{"task_id": "Java/1", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        StringBuilder currentGroup = new StringBuilder();\n        int balance = 0;\n\n        for (char c : paren_string.replace(\" \", \"\").toCharArray()) {\n            currentGroup.append(c);\n            if (c == '(') {\n                balance++;\n            } else if (c == ')') {\n                balance--;\n            }\n            if (balance == 0) {\n                result.add(currentGroup.toString());\n                currentGroup.setLength(0);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1:\n        String input1 = \"( ) (( )) (( )( ))\";\n        List<String> expected1 = Arrays.asList(\"()\", \"(())\", \"(()())\");\n        List<String> actual1 = solution.separate_paren_groups(input1);\n        System.out.println(\"Test case 1: \" + (actual1.equals(expected1) ? \"Pass\" : \"Fail\"));\n\n        // Test case 2:\n        String input2 = \"(()) () ()\";\n        List<String> expected2 = Arrays.asList(\"(())\", \"()\", \"()\");\n        List<String> actual2 = solution.separate_paren_groups(input2);\n        System.out.println(\"Test case 2: \" + (actual2.equals(expected2) ? \"Pass\" : \"Fail\"));\n\n        // Test case 3:\n        String input3 = \"((()))\";\n        List<String> expected3 = Arrays.asList(\"((()))\");\n        List<String> actual3 = solution.separate_paren_groups(input3);\n        System.out.println(\"Test case 3: \" + (actual3.equals(expected3) ? \"Pass\" : \"Fail\"));\n\n        // Test case 4:\n        String input4 = \"()\";\n        List<String> expected4 = Arrays.asList(\"()\");\n        List<String> actual4 = solution.separate_paren_groups(input4);\n        System.out.println(\"Test case 4: \" + (actual4.equals(expected4) ? \"Pass\" : \"Fail\"));\n\n        // Test case 5:\n        String input5 = \"\";\n        List<String> expected5 = Arrays.asList();\n        List<String> actual5 = solution.separate_paren_groups(input5);\n        System.out.println(\"Test case 5: \" + (actual5.equals(expected5) ? \"Pass\" : \"Fail\"));\n    }\n}\n"}
{"task_id": "Java/126", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If the a number appears more than twice, return false. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted(Arrays.asList(5)) -> true\n    is_sorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    is_sorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    is_sorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    is_sorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    is_sorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean is_sorted(List<Integer> lst) {\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (Integer num : lst) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n            if (countMap.get(num) > 2) {\n                return false;\n            }\n        }\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < lst.get(i - 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.is_sorted(Arrays.asList(5))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 3, 4, 5))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 3, 2, 4, 5))); // false\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7))); // false\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 2, 3, 3, 4))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 2, 2, 3, 4))); // false\n    }\n}\n"}
{"task_id": "Java/38", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n"}
{"task_id": "Java/18", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n     */\n    public int how_many_times(String string, String substring) {\n        int count = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: Empty string\n        System.out.println(\"Test case 1:\");\n        System.out.println(\"Expected output: 0\");\n        System.out.println(\"Actual output: \" + solution.how_many_times(\"\", \"a\"));\n        System.out.println();\n\n        // Test case 2: Single character substring\n        System.out.println(\"Test case 2:\");\n        System.out.println(\"Expected output: 3\");\n        System.out.println(\"Actual output: \" + solution.how_many_times(\"aaa\", \"a\"));\n        System.out.println();\n\n        // Test case 3: Overlapping substrings\n        System.out.println(\"Test case 3:\");\n        System.out.println(\"Expected output: 3\");\n        System.out.println(\"Actual output: \" + solution.how_many_times(\"aaaa\", \"aa\"));\n        System.out.println();\n\n        // Test case 4: No matches\n        System.out.println(\"Test case 4:\");\n        System.out.println(\"Expected output: 0\");\n        System.out.println(\"Actual output: \" + solution.how_many_times(\"hello\", \"world\"));\n        System.out.println();\n\n        // Test case 5: Substring is longer than string\n        System.out.println(\"Test case 5:\");\n        System.out.println(\"Expected output: 0\");\n        System.out.println(\"Actual output: \" + solution.how_many_times(\"hello\", \"hello world\"));\n        System.out.println();\n    }\n}\n"}
{"task_id": "Java/45", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n     */\n    public double triangle_area(double a, double h) {\n        return 0.5 * a * h;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: Positive values\n        double result1 = solution.triangle_area(5, 3);\n        System.out.println(\"Test case 1: Expected 7.5, Actual \" + result1);\n\n        // Test case 2: Zero values\n        double result2 = solution.triangle_area(0, 3);\n        System.out.println(\"Test case 2: Expected 0.0, Actual \" + result2);\n\n        // Test case 3: Negative values\n        double result3 = solution.triangle_area(-5, 3);\n        System.out.println(\"Test case 3: Expected -7.5, Actual \" + result3);\n\n        // Test case 4: Large values\n        double result4 = solution.triangle_area(100, 200);\n        System.out.println(\"Test case 4: Expected 10000.0, Actual \" + result4);\n    }\n}\n"}
{"task_id": "Java/81", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numerical_letter_grade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                result.add(\"A+\");\n            } else if (grade > 3.7) {\n                result.add(\"A\");\n            } else if (grade > 3.3) {\n                result.add(\"A-\");\n            } else if (grade > 3.0) {\n                result.add(\"B+\");\n            } else if (grade > 2.7) {\n                result.add(\"B\");\n            } else if (grade > 2.3) {\n                result.add(\"B-\");\n            } else if (grade > 2.0) {\n                result.add(\"C+\");\n            } else if (grade > 1.7) {\n                result.add(\"C\");\n            } else if (grade > 1.3) {\n                result.add(\"C-\");\n            } else if (grade > 1.0) {\n                result.add(\"D+\");\n            } else if (grade > 0.7) {\n                result.add(\"D\");\n            } else if (grade > 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> grades1 = Arrays.asList(4.0, 3.0, 1.7, 2.0, 3.5);\n        List<String> expected1 = Arrays.asList(\"A+\", \"B\", \"C-\", \"C\", \"A-\");\n        System.out.println(\"Test case 1: \" + (solution.numerical_letter_grade(grades1).equals(expected1) ? \"Pass\" : \"Fail\"));\n\n        List<Double> grades2 = Arrays.asList(3.8, 2.5, 1.2, 0.8, 0.0);\n        List<String> expected2 = Arrays.asList(\"A\", \"B-\", \"D-\", \"D\", \"E\");\n        System.out.println(\"Test case 2: \" + (solution.numerical_letter_grade(grades2).equals(expected2) ? \"Pass\" : \"Fail\"));\n\n        List<Double> grades3 = Arrays.asList(4.0, 4.0, 4.0, 4.0, 4.0);\n        List<String> expected3 = Arrays.asList(\"A+\", \"A+\", \"A+\", \"A+\", \"A+\");\n        System.out.println(\"Test case 3: \" + (solution.numerical_letter_grade(grades3).equals(expected3) ? \"Pass\" : \"Fail\"));\n\n        List<Double> grades4 = Arrays.asList(0.0, 0.0, 0.0, 0.0, 0.0);\n        List<String> expected4 = Arrays.asList(\"E\", \"E\", \"E\", \"E\", \"E\");\n        System.out.println(\"Test case 4: \" + (solution.numerical_letter_grade(grades4).equals(expected4) ? \"Pass\" : \"Fail\"));\n    }\n}\n"}
{"task_id": "Java/26", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        return numbers.stream()\n                .distinct()\n                .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/134", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        if (txt.isEmpty()) {\n            return false;\n        }\n        if (txt.charAt(txt.length() - 1) == ' ') {\n            return false;\n        }\n        String[] words = txt.split(\"\\\\s+\");\n        String lastWord = words[words.length - 1];\n        if (lastWord.length() == 1) {\n            return Character.isLetter(lastWord.charAt(0));\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/76", "generation": "import java.lang.Math;\n\nclass Solution {\n    public boolean is_simple_power(int x, int n) {\n        if (x <= 0 || n <= 0) {\n            return false;\n        }\n        double logResult = Math.log(x) / Math.log(n);\n        return logResult == (int) logResult;\n    }\n}\n"}
{"task_id": "Java/120", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        Integer[] array = arr.toArray(new Integer[0]);\n        Arrays.sort(array);\n        List<Integer> result = new ArrayList<>();\n        for (int i = array.length - k; i < array.length; i++) {\n            result.add(array[i]);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/47", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    8.0\n     */\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> list1 = Arrays.asList(3, 1, 2, 4, 5);\n        List<Integer> list2 = Arrays.asList(-10, 4, 6, 1000, 10, 20);\n        List<Integer> list3 = Arrays.asList(1, 2, 3, 4, 5, 6, 7);\n        List<Integer> list4 = Arrays.asList(1, 2, 3, 4, 5);\n\n        System.out.println(\"Median of list1: \" + solution.median(list1));\n        System.out.println(\"Median of list2: \" + solution.median(list2));\n        System.out.println(\"Median of list3: \" + solution.median(list3));\n        System.out.println(\"Median of list4: \" + solution.median(list4));\n    }\n}\n"}
{"task_id": "Java/78", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hex_key(String num) {\n        int count = 0;\n        for (char c : num.toCharArray()) {\n            switch (c) {\n                case '2':\n                case '3':\n                case '5':\n                case '7':\n                case 'B':\n                case 'D':\n                    count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(\"Expected 1, Actual: \" + solution.hex_key(\"AB\"));\n        System.out.println(\"Expected 2, Actual: \" + solution.hex_key(\"1077E\"));\n        System.out.println(\"Expected 4, Actual: \" + solution.hex_key(\"ABED1A33\"));\n        System.out.println(\"Expected 6, Actual: \" + solution.hex_key(\"123456789ABCDEF0\"));\n        System.out.println(\"Expected 2, Actual: \" + solution.hex_key(\"2020\"));\n        System.out.println(\"Expected 0, Actual: \" + solution.hex_key(\"\"));\n        System.out.println(\"Expected 0, Actual: \" + solution.hex_key(\"0\"));\n    }\n}\n"}
{"task_id": "Java/129", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int[][] directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n        int[] minPath = new int[k];\n        Arrays.fill(minPath, Integer.MAX_VALUE);\n\n        dfs(grid, k, 0, 0, new int[k], 0, minPath, directions);\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            result.add(minPath[i]);\n        }\n        return result;\n    }\n\n    private void dfs(List<List<Integer>> grid, int k, int i, int j, int[] path, int index, int[] minPath, int[][] directions) {\n        if (index == k) {\n            if (compare(path, minPath) < 0) {\n                System.arraycopy(path, 0, minPath, 0, k);\n            }\n            return;\n        }\n        path[index] = grid.get(i).get(j);\n        for (int[] direction : directions) {\n            int ni = i + direction[0];\n            int nj = j + direction[1];\n            if (ni >= 0 && ni < grid.size() && nj >= 0 && nj < grid.get(0).size()) {\n                dfs(grid, k, ni, nj, path, index + 1, minPath, directions);\n            }\n        }\n    }\n\n    private int compare(int[] a, int[] b) {\n        for (int i = 0; i < a.length; i++) {\n            if (a[i] < b[i]) {\n                return -1;\n            } else if (a[i] > b[i]) {\n                return 1;\n            }\n        }\n        return 0;\n    }\n}\n"}
{"task_id": "Java/59", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n     */\n    public int largest_prime_factor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i != 0) {\n                i += 1;\n            } else {\n                n /= i;\n            }\n        }\n        return n;\n    }\n}\n"}
{"task_id": "Java/123", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> get_odd_collatz(int n) {\n        List<Integer> result = new ArrayList<>();\n        Set<Integer> seen = new HashSet<>();\n        while (n != 1) {\n            if (n % 2 == 1 && !seen.contains(n)) {\n                result.add(n);\n                seen.add(n);\n            }\n            n = n % 2 == 0 ? n / 2 : 3 * n + 1;\n        }\n        result.add(1);\n        Collections.sort(result);\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.get_odd_collatz(5)); // [1, 5]\n        System.out.println(solution.get_odd_collatz(1)); // [1]\n        System.out.println(solution.get_odd_collatz(10)); // [1]\n        System.out.println(solution.get_odd_collatz(6)); // [1]\n        System.out.println(solution.get_odd_collatz(27)); // [1, 5, 13, 27]\n    }\n}\n"}
{"task_id": "Java/74", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match(Arrays.asList(), Arrays.asList()) -> []\n    total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    total_match(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        int sum1 = lst1.stream().mapToInt(String::length).sum();\n        int sum2 = lst2.stream().mapToInt(String::length).sum();\n        return sum1 <= sum2 ? lst1 : lst2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<String> test1 = Arrays.asList();\n        List<String> test2 = Arrays.asList();\n        System.out.println(solution.total_match(test1, test2)); // []\n\n        test1 = Arrays.asList(\"hi\", \"admin\");\n        test2 = Arrays.asList(\"hI\", \"Hi\");\n        System.out.println(solution.total_match(test1, test2)); // [\"hI\", \"Hi\"]\n\n        test1 = Arrays.asList(\"hi\", \"admin\");\n        test2 = Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\");\n        System.out.println(solution.total_match(test1, test2)); // [\"hi\", \"admin\"]\n\n        test1 = Arrays.asList(\"hi\", \"admin\");\n        test2 = Arrays.asList(\"hI\", \"hi\", \"hi\");\n        System.out.println(solution.total_match(test1, test2)); // [\"hI\", \"hi\", \"hi\"]\n\n        test1 = Arrays.asList(\"4\");\n        test2 = Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\");\n        System.out.println(solution.total_match(test1, test2)); // [\"4\"]\n    }\n}\n"}
{"task_id": "Java/21", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        List<Double> result = new ArrayList<>();\n        for (double num : numbers) {\n            result.add((num - min) / (max - min));\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> numbers1 = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        List<Double> expected1 = Arrays.asList(0.0, 0.25, 0.5, 0.75, 1.0);\n        System.out.println(\"Test case 1: \" + (solution.rescale_to_unit(numbers1).equals(expected1) ? \"Pass\" : \"Fail\"));\n\n        List<Double> numbers2 = Arrays.asList(10.0, 20.0, 30.0, 40.0, 50.0);\n        List<Double> expected2 = Arrays.asList(0.0, 0.25, 0.5, 0.75, 1.0);\n        System.out.println(\"Test case 2: \" + (solution.rescale_to_unit(numbers2).equals(expected2) ? \"Pass\" : \"Fail\"));\n\n        List<Double> numbers3 = Arrays.asList(-10.0, -5.0, 0.0, 5.0, 10.0);\n        List<Double> expected3 = Arrays.asList(0.0, 0.25, 0.5, 0.75, 1.0);\n        System.out.println(\"Test case 3: \" + (solution.rescale_to_unit(numbers3).equals(expected3) ? \"Pass\" : \"Fail\"));\n    }\n}\n"}
{"task_id": "Java/48", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n     */\n    public boolean is_palindrome(String text) {\n        int left = 0;\n        int right = text.length() - 1;\n\n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.is_palindrome(\"\"));  // true\n        System.out.println(solution.is_palindrome(\"aba\"));  // true\n        System.out.println(solution.is_palindrome(\"aaaaa\"));  // true\n        System.out.println(solution.is_palindrome(\"zbcd\"));  // false\n        System.out.println(solution.is_palindrome(\"madam\"));  // true\n        System.out.println(solution.is_palindrome(\"hello\"));  // false\n    }\n}\n"}
{"task_id": "Java/13", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n     */\n    public int greatest_common_divisor(int a, int b) {\n        if (b == 0) {\n            return a;\n        } else {\n            return greatest_common_divisor(b, a % b);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1:\n        int a = 3;\n        int b = 5;\n        int expected = 1;\n        int actual = solution.greatest_common_divisor(a, b);\n        System.out.println(\"Test case 1: \" + (actual == expected ? \"Pass\" : \"Fail\"));\n\n        // Test case 2:\n        a = 25;\n        b = 15;\n        expected = 5;\n        actual = solution.greatest_common_divisor(a, b);\n        System.out.println(\"Test case 2: \" + (actual == expected ? \"Pass\" : \"Fail\"));\n\n        // Test case 3:\n        a = 48;\n        b = 18;\n        expected = 6;\n        actual = solution.greatest_common_divisor(a, b);\n        System.out.println(\"Test case 3: \" + (actual == expected ? \"Pass\" : \"Fail\"));\n\n        // Test case 4:\n        a = 101;\n        b = 103;\n        expected = 1;\n        actual = solution.greatest_common_divisor(a, b);\n        System.out.println(\"Test case 4: \" + (actual == expected ? \"Pass\" : \"Fail\"));\n    }\n}\n"}
{"task_id": "Java/42", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incr_list(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incr_list(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incr_list(List<Integer> l) {\n        return l.stream()\n                .map(i -> i + 1)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> input1 = Arrays.asList(1, 2, 3);\n        List<Integer> expected1 = Arrays.asList(2, 3, 4);\n        System.out.println(\"Test case 1: \" + (solution.incr_list(input1).equals(expected1) ? \"Pass\" : \"Fail\"));\n\n        // Test case 2\n        List<Integer> input2 = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        List<Integer> expected2 = Arrays.asList(6, 4, 6, 3, 4, 4, 10, 1, 124);\n        System.out.println(\"Test case 2: \" + (solution.incr_list(input2).equals(expected2) ? \"Pass\" : \"Fail\"));\n\n        // Test case 3: Empty list\n        List<Integer> input3 = new ArrayList<>();\n        List<Integer> expected3 = new ArrayList<>();\n        System.out.println(\"Test case 3: \" + (solution.incr_list(input3).equals(expected3) ? \"Pass\" : \"Fail\"));\n\n        // Test case 4: List with single element\n        List<Integer> input4 = Arrays.asList(10);\n        List<Integer> expected4 = Arrays.asList(11);\n        System.out.println(\"Test case 4: \" + (solution.incr_list(input4).equals(expected4) ? \"Pass\" : \"Fail\"));\n    }\n}\n"}
{"task_id": "Java/84", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return in binary the total sum of its digits.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        int sum = 0;\n        while (N > 0) {\n            sum += N % 10;\n            N /= 10;\n        }\n        return Integer.toBinaryString(sum);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Test case 1:\");\n        System.out.println(\"Input: N = 1000\");\n        System.out.println(\"Expected output: 1\");\n        System.out.println(\"Actual output: \" + solution.solve(1000));\n        System.out.println();\n\n        System.out.println(\"Test case 2:\");\n        System.out.println(\"Input: N = 150\");\n        System.out.println(\"Expected output: 110\");\n        System.out.println(\"Actual output: \" + solution.solve(150));\n        System.out.println();\n\n        System.out.println(\"Test case 3:\");\n        System.out.println(\"Input: N = 147\");\n        System.out.println(\"Expected output: 1100\");\n        System.out.println(\"Actual output: \" + solution.solve(147));\n        System.out.println();\n\n        System.out.println(\"Test case 4:\");\n        System.out.println(\"Input: N = 0\");\n        System.out.println(\"Expected output: 0\");\n        System.out.println(\"Actual output: \" + solution.solve(0));\n        System.out.println();\n\n        System.out.println(\"Test case 5:\");\n        System.out.println(\"Input: N = 10000\");\n        System.out.println(\"Expected output: 1\");\n        System.out.println(\"Actual output: \" + solution.solve(10000));\n    }\n}\n"}
{"task_id": "Java/140", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String fix_spaces(String text) {\n        StringBuilder result = new StringBuilder();\n        int spaceCount = 0;\n        for (char c : text.toCharArray()) {\n            if (c == ' ') {\n                spaceCount++;\n            } else {\n                if (spaceCount > 2) {\n                    result.append(\"-\");\n                } else if (spaceCount > 0) {\n                    result.append(\"_\");\n                }\n                spaceCount = 0;\n                result.append(c);\n            }\n        }\n        if (spaceCount > 2) {\n            result.append(\"-\");\n        } else if (spaceCount > 0) {\n            result.append(\"_\");\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/92", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) -> true\n\n    any_int(3, 2, 2) -> false\n\n    any_int(3, -2, 1) -> true\n\n    any_int(3.6, -2.2, 2) -> false\n     */\n    public boolean any_int(Object x, Object y, Object z) {\n        if (!(x instanceof Integer) || !(y instanceof Integer) || !(z instanceof Integer)) {\n            return false;\n        }\n        int a = (int) x;\n        int b = (int) y;\n        int c = (int) z;\n        return (a == b + c) || (b == a + c) || (c == a + b);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.any_int(5, 2, 7)); // true\n        System.out.println(solution.any_int(3, 2, 2)); // false\n        System.out.println(solution.any_int(3, -2, 1)); // true\n        System.out.println(solution.any_int(3.6, -2.2, 2)); // false\n        System.out.println(solution.any_int(1, 2, 3)); // false\n        System.out.println(solution.any_int(1, 1, 2)); // true\n    }\n}\n"}
{"task_id": "Java/143", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String words_in_sentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.append(word).append(\" \");\n            }\n        }\n\n        return result.toString().trim();\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return false;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        String sentence1 = \"This is a test\";\n        String expected1 = \"is\";\n        System.out.println(\"Test case 1:\");\n        System.out.println(\"Input: \" + sentence1);\n        System.out.println(\"Expected: \" + expected1);\n        System.out.println(\"Actual: \" + solution.words_in_sentence(sentence1));\n        System.out.println();\n\n        // Test case 2\n        String sentence2 = \"lets go for swimming\";\n        String expected2 = \"go for\";\n        System.out.println(\"Test case 2:\");\n        System.out.println(\"Input: \" + sentence2);\n        System.out.println(\"Expected: \" + expected2);\n        System.out.println(\"Actual: \" + solution.words_in_sentence(sentence2));\n        System.out.println();\n\n        // Test case 3\n        String sentence3 = \"hello world\";\n        String expected3 = \"\";\n        System.out.println(\"Test case 3:\");\n        System.out.println(\"Input: \" + sentence3);\n        System.out.println(\"Expected: \" + expected3);\n        System.out.println(\"Actual: \" + solution.words_in_sentence(sentence3));\n        System.out.println();\n\n        // Test case 4\n        String sentence4 = \"a b c\";\n        String expected4 = \"a b c\";\n        System.out.println(\"Test case 4:\");\n        System.out.println(\"Input: \" + sentence4);\n        System.out.println(\"Expected: \" + expected4);\n        System.out.println(\"Actual: \" + solution.words_in_sentence(sentence4));\n        System.out.println();\n    }\n}\n"}
{"task_id": "Java/148", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a list containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty list if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        List<String> result = new ArrayList<>();\n\n        int index1 = -1;\n        int index2 = -1;\n\n        for (int i = 0; i < planets.length; i++) {\n            if (planets[i].equals(planet1)) {\n                index1 = i;\n            }\n            if (planets[i].equals(planet2)) {\n                index2 = i;\n            }\n        }\n\n        if (index1 == -1 || index2 == -1) {\n            return result;\n        }\n\n        int start = Math.min(index1, index2);\n        int end = Math.max(index1, index2);\n\n        for (int i = start + 1; i < end; i++) {\n            result.add(planets[i]);\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.bf(\"Jupiter\", \"Neptune\")); // [\"Saturn\", \"Uranus\"]\n        System.out.println(solution.bf(\"Earth\", \"Mercury\")); // [\"Venus\"]\n        System.out.println(solution.bf(\"Mercury\", \"Uranus\")); // [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n        System.out.println(solution.bf(\"Invalid\", \"Neptune\")); // []\n        System.out.println(solution.bf(\"Jupiter\", \"Invalid\")); // []\n    }\n}\n"}
{"task_id": "Java/115", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity. Can't use buckets from other wells to extract water from one well.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        int count = 0;\n        for (List<Integer> row : grid) {\n            int sum = 0;\n            for (int num : row) {\n                sum += num;\n            }\n            count += (sum + capacity - 1) / capacity;\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<List<Integer>> grid1 = Arrays.asList(\n            Arrays.asList(0, 0, 1, 0),\n            Arrays.asList(0, 1, 0, 0),\n            Arrays.asList(1, 1, 1, 1)\n        );\n        int capacity1 = 1;\n        System.out.println(\"Test case 1: Expected output = 6, Actual output = \" + solution.max_fill(grid1, capacity1));\n\n        // Test case 2\n        List<List<Integer>> grid2 = Arrays.asList(\n            Arrays.asList(0, 0, 1, 1),\n            Arrays.asList(0, 0, 0, 0),\n            Arrays.asList(1, 1, 1, 1),\n            Arrays.asList(0, 1, 1, 1)\n        );\n        int capacity2 = 2;\n        System.out.println(\"Test case 2: Expected output = 5, Actual output = \" + solution.max_fill(grid2, capacity2));\n\n        // Test case 3\n        List<List<Integer>> grid3 = Arrays.asList(\n            Arrays.asList(0, 0, 0),\n            Arrays.asList(0, 0, 0)\n        );\n        int capacity3 = 5;\n        System.out.println(\"Test case 3: Expected output = 0, Actual output = \" + solution.max_fill(grid3, capacity3));\n    }\n}\n"}
{"task_id": "Java/71", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n     */\n    public double triangle_area(double a, double b, double c) {\n        // Check if the sides form a valid triangle\n        if (a + b > c && a + c > b && b + c > a) {\n            // Calculate the semi-perimeter\n            double s = (a + b + c) / 2;\n            // Calculate the area using Heron's formula\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            // Return the area rounded to 2 decimal points\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            // Return -1 if the sides do not form a valid triangle\n            return -1;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Test case 1:\");\n        System.out.println(\"Expected output: 6.00\");\n        System.out.println(\"Actual output: \" + solution.triangle_area(3, 4, 5));\n        System.out.println();\n\n        System.out.println(\"Test case 2:\");\n        System.out.println(\"Expected output: -1\");\n        System.out.println(\"Actual output: \" + solution.triangle_area(1, 2, 10));\n        System.out.println();\n\n        System.out.println(\"Test case 3:\");\n        System.out.println(\"Expected output: 12.00\");\n        System.out.println(\"Actual output: \" + solution.triangle_area(6, 8, 10));\n        System.out.println();\n\n        System.out.println(\"Test case 4:\");\n        System.out.println(\"Expected output: -1\");\n        System.out.println(\"Actual output: \" + solution.triangle_area(1, 1, 10));\n        System.out.println();\n\n        System.out.println(\"Test case 5:\");\n        System.out.println(\"Expected output: 0.00\");\n        System.out.println(\"Actual output: \" + solution.triangle_area(0, 0, 0));\n        System.out.println();\n    }\n}\n"}
{"task_id": "Java/163", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order. Please note that the even digits refer to even numbers less than 10.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n     */\n    public List<Integer> generate_integers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        int start = Math.min(a, b);\n        int end = Math.max(a, b);\n        \n        for (int i = start; i <= end; i++) {\n            if (i % 2 == 0 && i < 10) {\n                result.add(i);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1:\n        System.out.println(\"Test case 1:\");\n        System.out.println(\"Input: a = 2, b = 8\");\n        System.out.println(\"Expected output: [2, 4, 6, 8]\");\n        System.out.println(\"Actual output: \" + solution.generate_integers(2, 8));\n        \n        // Test case 2:\n        System.out.println(\"\\nTest case 2:\");\n        System.out.println(\"Input: a = 8, b = 2\");\n        System.out.println(\"Expected output: [2, 4, 6, 8]\");\n        System.out.println(\"Actual output: \" + solution.generate_integers(8, 2));\n        \n        // Test case 3:\n        System.out.println(\"\\nTest case 3:\");\n        System.out.println(\"Input: a = 10, b = 14\");\n        System.out.println(\"Expected output: []\");\n        System.out.println(\"Actual output: \" + solution.generate_integers(10, 14));\n    }\n}\n"}
{"task_id": "Java/19", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sort_numbers(String numbers) {\n        String[] numArray = numbers.split(\" \");\n        String[] numOrder = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n        Arrays.sort(numArray, (a, b) -> Arrays.asList(numOrder).indexOf(a) - Arrays.asList(numOrder).indexOf(b));\n        return String.join(\" \", numArray);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sort_numbers(\"three one five\"));  // \"one three five\"\n        System.out.println(solution.sort_numbers(\"nine eight seven six five four three two one zero\"));  // \"zero one two three four five six seven eight nine\"\n        System.out.println(solution.sort_numbers(\"five four three two one\"));  // \"one two three four five\"\n        System.out.println(solution.sort_numbers(\"zero zero one one two two three three\"));  // \"zero zero one one two two three three\"\n    }\n}\n"}
{"task_id": "Java/118", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String get_closest_vowel(String word) {\n        String vowels = \"AEIOUaeiou\";\n        StringBuilder sb = new StringBuilder(word);\n        String reversedWord = sb.reverse().toString();\n        for (int i = 1; i < reversedWord.length() - 1; i++) {\n            if (vowels.indexOf(reversedWord.charAt(i)) != -1 \n                && vowels.indexOf(reversedWord.charAt(i-1)) == -1 \n                && vowels.indexOf(reversedWord.charAt(i+1)) == -1) {\n                return String.valueOf(reversedWord.charAt(i));\n            }\n        }\n        return \"\";\n    }\n}\n"}
{"task_id": "Java/101", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> words_string(String s) {\n        s = s.replace(',', ' ');  // replace commas with spaces\n        String[] wordsArray = s.split(\"\\\\s+\");  // split the string into words\n        List<String> wordsList = Arrays.asList(wordsArray);  // convert array to list\n        return wordsList;\n    }\n}\n"}
{"task_id": "Java/151", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int double_the_difference(List<Object> lst) {\n        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (int) obj;\n                if (num > 0 && num % 2 != 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/133", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_squares(List<Double> lst) {\n        int sum = 0;\n        for (double num : lst) {\n            sum += (int) Math.ceil(num) * (int) Math.ceil(num);\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/144", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n\n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n\n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n\n        long resultNumerator = (long) xNumerator * nNumerator;\n        long resultDenominator = (long) xDenominator * nDenominator;\n\n        return resultNumerator % resultDenominator == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1:\n        System.out.println(\"Test case 1: simplify(\\\"1/5\\\", \\\"5/1\\\") = \" + solution.simplify(\"1/5\", \"5/1\")); // Expected output: true\n\n        // Test case 2:\n        System.out.println(\"Test case 2: simplify(\\\"1/6\\\", \\\"2/1\\\") = \" + solution.simplify(\"1/6\", \"2/1\")); // Expected output: false\n\n        // Test case 3:\n        System.out.println(\"Test case 3: simplify(\\\"7/10\\\", \\\"10/2\\\") = \" + solution.simplify(\"7/10\", \"10/2\")); // Expected output: false\n\n        // Test case 4:\n        System.out.println(\"Test case 4: simplify(\\\"1/2\\\", \\\"3/4\\\") = \" + solution.simplify(\"1/2\", \"3/4\")); // Expected output: false\n\n        // Test case 5:\n        System.out.println(\"Test case 5: simplify(\\\"3/4\\\", \\\"4/3\\\") = \" + solution.simplify(\"3/4\", \"4/3\")); // Expected output: true\n    }\n}\n"}
{"task_id": "Java/158", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * This function accepts a list of strings and returns the word with maximum number\n     * of unique characters. If multiple strings have maximum number of unique\n     * characters, it returns the one which comes first in lexicographical order.\n     *\n     * @param words A list of strings\n     * @return The word with maximum number of unique characters\n     */\n    public String find_max(List<String> words) {\n        String maxWord = \"\";\n        int maxUniqueChars = 0;\n\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n\n            if (uniqueChars.size() > maxUniqueChars) {\n                maxUniqueChars = uniqueChars.size();\n                maxWord = word;\n            } else if (uniqueChars.size() == maxUniqueChars) {\n                if (word.compareTo(maxWord) < 0) {\n                    maxWord = word;\n                }\n            }\n        }\n\n        return maxWord;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<String> words1 = Arrays.asList(\"name\", \"of\", \"string\");\n        System.out.println(\"Expected: string, Actual: \" + solution.find_max(words1));\n\n        // Test case 2\n        List<String> words2 = Arrays.asList(\"name\", \"enam\", \"game\");\n        System.out.println(\"Expected: enam, Actual: \" + solution.find_max(words2));\n\n        // Test case 3\n        List<String> words3 = Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\");\n        System.out.println(\"Expected: aaaaaaa, Actual: \" + solution.find_max(words3));\n\n        // Test case 4 (edge case: empty list)\n        List<String> words4 = new ArrayList<>();\n        System.out.println(\"Expected: , Actual: \" + solution.find_max(words4));\n\n        // Test case 5 (edge case: single element list)\n        List<String> words5 = Arrays.asList(\"hello\");\n        System.out.println(\"Expected: hello, Actual: \" + solution.find_max(words5));\n    }\n}\n"}
{"task_id": "Java/63", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n <= 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        } else {\n            int[] fibfib = new int[n + 1];\n            fibfib[0] = 0;\n            fibfib[1] = 0;\n            fibfib[2] = 1;\n            for (int i = 3; i <= n; i++) {\n                fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n            }\n            return fibfib[n];\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(\"Test case 1:\");\n        System.out.println(\"Expected output: 0\");\n        System.out.println(\"Actual output: \" + solution.fibfib(1));\n        System.out.println();\n\n        System.out.println(\"Test case 2:\");\n        System.out.println(\"Expected output: 4\");\n        System.out.println(\"Actual output: \" + solution.fibfib(5));\n        System.out.println();\n\n        System.out.println(\"Test case 3:\");\n        System.out.println(\"Expected output: 24\");\n        System.out.println(\"Actual output: \" + solution.fibfib(8));\n        System.out.println();\n    }\n}\n"}
{"task_id": "Java/37", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sort_even(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sort_even(List<Integer> l) {\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                even.add(l.get(i));\n            } else {\n                odd.add(l.get(i));\n            }\n        }\n        Collections.sort(even);\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(even.get(i / 2));\n            } else {\n                result.add(odd.get(i / 2));\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> test1 = Arrays.asList(1, 2, 3);\n        List<Integer> test2 = Arrays.asList(5, 6, 3, 4);\n        List<Integer> test3 = Arrays.asList(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\n        System.out.println(solution.sort_even(test1)); // [1, 2, 3]\n        System.out.println(solution.sort_even(test2)); // [3, 6, 5, 4]\n        System.out.println(solution.sort_even(test3)); // [1, 10, 2, 9, 3, 8, 4, 7, 5, 6]\n    }\n}\n"}
{"task_id": "Java/159", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        int totalEaten = number + Math.min(need, remaining);\n        int carrotsLeft = remaining - Math.min(need, remaining);\n        return Arrays.asList(totalEaten, carrotsLeft);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.eat(5, 6, 10)); // [11, 4]\n        System.out.println(solution.eat(4, 8, 9)); // [12, 1]\n        System.out.println(solution.eat(1, 10, 10)); // [11, 0]\n        System.out.println(solution.eat(2, 11, 5)); // [7, 0]\n        System.out.println(solution.eat(0, 0, 0)); // [0, 0]\n        System.out.println(solution.eat(1000, 1000, 1000)); // [2000, 0]\n    }\n}\n"}
{"task_id": "Java/52", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> below_threshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean below_threshold(List<Integer> l, int t) {\n        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1:\n        List<Integer> list1 = Arrays.asList(1, 2, 4, 10);\n        int threshold1 = 100;\n        System.out.println(\"Test case 1: \" + solution.below_threshold(list1, threshold1)); // Expected output: true\n\n        // Test case 2:\n        List<Integer> list2 = Arrays.asList(1, 20, 4, 10);\n        int threshold2 = 5;\n        System.out.println(\"Test case 2: \" + solution.below_threshold(list2, threshold2)); // Expected output: false\n\n        // Test case 3: empty list\n        List<Integer> list3 = new ArrayList<>();\n        int threshold3 = 10;\n        System.out.println(\"Test case 3: \" + solution.below_threshold(list3, threshold3)); // Expected output: true\n\n        // Test case 4: threshold is 0\n        List<Integer> list4 = Arrays.asList(1, 2, 3);\n        int threshold4 = 0;\n        System.out.println(\"Test case 4: \" + solution.below_threshold(list4, threshold4)); // Expected output: false\n    }\n}\n"}
{"task_id": "Java/137", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Object> compare_one(Object a, Object b) {\n        // Convert string inputs to double, handling both '.' and ',' as decimal separators\n        double aValue = getDoubleValue(a);\n        double bValue = getDoubleValue(b);\n\n        // Compare the values\n        if (aValue > bValue) {\n            return Optional.of(a);\n        } else if (aValue < bValue) {\n            return Optional.of(b);\n        } else {\n            return Optional.empty();\n        }\n    }\n\n    private double getDoubleValue(Object value) {\n        if (value instanceof String) {\n            return Double.parseDouble(((String) value).replace(',', '.'));\n        } else if (value instanceof Integer) {\n            return (double) (Integer) value;\n        } else if (value instanceof Double) {\n            return (Double) value;\n        } else {\n            throw new RuntimeException(\"Unsupported value type\");\n        }\n    }\n}\n"}
{"task_id": "Java/154", "generation": "class Solution {\n    public boolean cycpattern_check(String a, String b) {\n        // Concatenate the first word with itself to handle rotations\n        String double_a = a + a;\n        \n        // Check if the second word or any of its rotations is a substring in the concatenated string\n        for (int i = 0; i < b.length(); i++) {\n            String rotated_b = b.substring(i) + b.substring(0, i);\n            if (double_a.contains(rotated_b)) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n}\n"}
{"task_id": "Java/44", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\n    >>> change_base(7, 2)\n    \"111\"\n     */\n    public String change_base(int x, int base) {\n        if (x == 0) return \"0\";\n        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            sb.insert(0, x % base);\n            x /= base;\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.change_base(8, 3));  // \"22\"\n        System.out.println(solution.change_base(8, 2));  // \"1000\"\n        System.out.println(solution.change_base(7, 2));  // \"111\"\n        System.out.println(solution.change_base(0, 2));  // \"0\"\n        System.out.println(solution.change_base(10, 2)); // \"1010\"\n    }\n}\n"}
{"task_id": "Java/112", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverse_delete(String s, String c) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                sb.append(ch);\n            }\n        }\n        String result = sb.toString();\n        boolean isPalindrome = result.equals(sb.reverse().toString());\n        return Arrays.asList(result, isPalindrome);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.reverse_delete(\"abcde\", \"ae\")); // (\"bcd\", false)\n        System.out.println(solution.reverse_delete(\"abcdef\", \"b\")); // (\"acdef\", false)\n        System.out.println(solution.reverse_delete(\"abcdedcba\", \"ab\")); // (\"cdedc\", true)\n        System.out.println(solution.reverse_delete(\"radar\", \"r\")); // (\"ada\", true)\n        System.out.println(solution.reverse_delete(\"hello\", \"l\")); // (\"heo\", false)\n    }\n}\n"}
{"task_id": "Java/87", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    List<Integer> coord = new ArrayList<>();\n                    coord.add(i);\n                    coord.add(j);\n                    result.add(coord);\n                }\n            }\n        }\n        Collections.sort(result, (a, b) -> {\n            if (a.get(0).equals(b.get(0))) {\n                return b.get(1).compareTo(a.get(1));\n            } else {\n                return a.get(0).compareTo(b.get(0));\n            }\n        });\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<List<Integer>> lst1 = Arrays.asList(\n            Arrays.asList(1, 2, 3, 4, 5, 6),\n            Arrays.asList(1, 2, 3, 4, 1, 6),\n            Arrays.asList(1, 2, 3, 4, 5, 1)\n        );\n        System.out.println(solution.get_row(lst1, 1)); // [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n\n        List<List<Integer>> lst2 = new ArrayList<>();\n        System.out.println(solution.get_row(lst2, 1)); // []\n\n        List<List<Integer>> lst3 = Arrays.asList(\n            new ArrayList<>(),\n            Arrays.asList(1),\n            Arrays.asList(1, 2, 3)\n        );\n        System.out.println(solution.get_row(lst3, 3)); // [[2, 2]]\n    }\n}\n"}
{"task_id": "Java/113", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> odd_count(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            int count = 0;\n            for (char c : lst.get(i).toCharArray()) {\n                if ((c - '0') % 2 != 0) {\n                    count++;\n                }\n            }\n            String temp = \"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\";\n            result.add(temp);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<String> test1 = Arrays.asList(\"1234567\");\n        List<String> result1 = solution.odd_count(test1);\n        System.out.println(result1);\n\n        List<String> test2 = Arrays.asList(\"3\",\"11111111\");\n        List<String> result2 = solution.odd_count(test2);\n        System.out.println(result2);\n    }\n}\n"}
{"task_id": "Java/29", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix(List.of(), \"a\")\n    []\n    >>> filter_by_prefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: Empty list\n        List<String> result1 = solution.filter_by_prefix(List.of(), \"a\");\n        System.out.println(\"Test case 1: \" + result1);\n\n        // Test case 2: List with matching prefix\n        List<String> result2 = solution.filter_by_prefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\");\n        System.out.println(\"Test case 2: \" + result2);\n\n        // Test case 3: List with no matching prefix\n        List<String> result3 = solution.filter_by_prefix(Arrays.asList(\"bcd\", \"cde\", \"array\"), \"a\");\n        System.out.println(\"Test case 3: \" + result3);\n\n        // Test case 4: List with multiple matching prefixes\n        List<String> result4 = solution.filter_by_prefix(Arrays.asList(\"abc\", \"abcd\", \"cde\", \"array\"), \"ab\");\n        System.out.println(\"Test case 4: \" + result4);\n    }\n}\n"}
{"task_id": "Java/6", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parse_nested_parens(String paren_string) {\n        String[] groups = paren_string.split(\" \");\n        List<Integer> result = new ArrayList<>();\n\n        for (String group : groups) {\n            int maxDepth = 0;\n            int currentDepth = 0;\n\n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentDepth++;\n                    maxDepth = Math.max(maxDepth, currentDepth);\n                } else if (c == ')') {\n                    currentDepth--;\n                }\n            }\n\n            result.add(maxDepth);\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        String input1 = \"(()()) ((())) () ((())()())\";\n        List<Integer> expected1 = Arrays.asList(2, 3, 1, 3);\n        System.out.println(\"Test case 1:\");\n        System.out.println(\"Input: \" + input1);\n        System.out.println(\"Expected output: \" + expected1);\n        System.out.println(\"Actual output: \" + solution.parse_nested_parens(input1));\n        System.out.println();\n\n        // Test case 2\n        String input2 = \"(()) () ()\";\n        List<Integer> expected2 = Arrays.asList(2, 1, 1);\n        System.out.println(\"Test case 2:\");\n        System.out.println(\"Input: \" + input2);\n        System.out.println(\"Expected output: \" + expected2);\n        System.out.println(\"Actual output: \" + solution.parse_nested_parens(input2));\n        System.out.println();\n\n        // Test case 3\n        String input3 = \"((()))\";\n        List<Integer> expected3 = Arrays.asList(3);\n        System.out.println(\"Test case 3:\");\n        System.out.println(\"Input: \" + input3);\n        System.out.println(\"Expected output: \" + expected3);\n        System.out.println(\"Actual output: \" + solution.parse_nested_parens(input3));\n        System.out.println();\n    }\n}\n"}
{"task_id": "Java/46", "generation": "class Solution {\n    public int fib4(int n) {\n        if (n <= 1) {\n            return 0;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 0;\n        }\n        \n        int[] fib4Values = new int[4];\n        fib4Values[0] = 0;\n        fib4Values[1] = 0;\n        fib4Values[2] = 2;\n        fib4Values[3] = 0;\n        \n        for (int i = 4; i <= n; i++) {\n            int nextFib4 = fib4Values[0] + fib4Values[1] + fib4Values[2] + fib4Values[3];\n            fib4Values[0] = fib4Values[1];\n            fib4Values[1] = fib4Values[2];\n            fib4Values[2] = fib4Values[3];\n            fib4Values[3] = nextFib4;\n        }\n        \n        return fib4Values[3];\n    }\n}\n"}
{"task_id": "Java/16", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a string, find out how many distinct characters (regardless of case) does it consist of\n     * \n     * @param string the input string\n     * @return the number of distinct characters in the string\n     */\n    public int count_distinct_characters(String string) {\n        // Convert the string to lowercase to ignore case\n        string = string.toLowerCase();\n        \n        // Use a HashSet to store unique characters\n        Set<Character> uniqueChars = new HashSet<>();\n        \n        // Iterate over each character in the string\n        for (char c : string.toCharArray()) {\n            // Add the character to the set\n            uniqueChars.add(c);\n        }\n        \n        // Return the size of the set, which represents the number of distinct characters\n        return uniqueChars.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.count_distinct_characters(\"xyzXYZ\"));  // Expected output: 3\n        System.out.println(solution.count_distinct_characters(\"Jerry\"));  // Expected output: 4\n        System.out.println(solution.count_distinct_characters(\"aaa\"));  // Expected output: 1\n        System.out.println(solution.count_distinct_characters(\"abcdefghijklmnopqrstuvwxyz\"));  // Expected output: 26\n    }\n}\n"}
{"task_id": "Java/99", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int closest_integer(String value) {\n        double num = Double.parseDouble(value);\n        if (num - Math.floor(num) == 0.5) {\n            return (int) Math.ceil(Math.abs(num)) * (num < 0 ? -1 : 1);\n        } else {\n            return (int) Math.round(num);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(\"Test Case 1:\");\n        System.out.println(\"Expected: 10\");\n        System.out.println(\"Actual: \" + solution.closest_integer(\"10\"));\n        System.out.println();\n\n        System.out.println(\"Test Case 2:\");\n        System.out.println(\"Expected: 15\");\n        System.out.println(\"Actual: \" + solution.closest_integer(\"15.3\"));\n        System.out.println();\n\n        System.out.println(\"Test Case 3:\");\n        System.out.println(\"Expected: 15\");\n        System.out.println(\"Actual: \" + solution.closest_integer(\"14.5\"));\n        System.out.println();\n\n        System.out.println(\"Test Case 4:\");\n        System.out.println(\"Expected: -15\");\n        System.out.println(\"Actual: \" + solution.closest_integer(\"-14.5\"));\n        System.out.println();\n\n        System.out.println(\"Test Case 5:\");\n        System.out.println(\"Expected: 0\");\n        System.out.println(\"Actual: \" + solution.closest_integer(\"0.3\"));\n        System.out.println();\n\n        System.out.println(\"Test Case 6:\");\n        System.out.println(\"Expected: -1\");\n        System.out.println(\"Actual: \" + solution.closest_integer(\"-0.5\"));\n        System.out.println();\n    }\n}\n"}
{"task_id": "Java/122", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a non-empty array of integers arr and an integer k, return\n     * the sum of the elements with at most two digits from the first k elements of arr.\n     *\n     * @param arr a non-empty array of integers\n     * @param k   an integer representing the number of elements to consider\n     * @return the sum of the elements with at most two digits from the first k elements of arr\n     */\n    public int add_elements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (Math.abs(arr.get(i)) < 100) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1:\n        List<Integer> arr1 = Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9);\n        int k1 = 4;\n        System.out.println(\"Test case 1:\");\n        System.out.println(\"Input: arr = \" + arr1 + \", k = \" + k1);\n        System.out.println(\"Output: \" + solution.add_elements(arr1, k1));\n        System.out.println(\"Expected output: 24\");\n        System.out.println();\n\n        // Test case 2:\n        List<Integer> arr2 = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);\n        int k2 = 5;\n        System.out.println(\"Test case 2:\");\n        System.out.println(\"Input: arr = \" + arr2 + \", k = \" + k2);\n        System.out.println(\"Output: \" + solution.add_elements(arr2, k2));\n        System.out.println(\"Expected output: 15\");\n        System.out.println();\n\n        // Test case 3:\n        List<Integer> arr3 = Arrays.asList(1000, 2000, 3000, 4000, 5000);\n        int k3 = 3;\n        System.out.println(\"Test case 3:\");\n        System.out.println(\"Input: arr = \" + arr3 + \", k = \" + k3);\n        System.out.println(\"Output: \" + solution.add_elements(arr3, k3));\n        System.out.println(\"Expected output: 0\");\n        System.out.println();\n    }\n}\n"}
{"task_id": "Java/53", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}\n"}
{"task_id": "Java/162", "generation": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] hashBytes = md.digest(text.getBytes());\n        BigInteger no = new BigInteger(1, hashBytes);\n        String hashText = no.toString(16);\n        while (hashText.length() < 32) {\n            hashText = \"0\" + hashText;\n        }\n        return Optional.of(hashText);\n    }\n\n    public static void main(String[] args) throws NoSuchAlgorithmException {\n        Solution solution = new Solution();\n\n        // Test case 1: Non-empty string\n        String text1 = \"Hello world\";\n        String expected1 = \"3e25960a79dbc69b674cd4ec67a72c62\";\n        Optional<String> result1 = solution.string_to_md5(text1);\n        System.out.println(\"Test case 1: \" + (result1.isPresent() && result1.get().equals(expected1) ? \"Pass\" : \"Fail\"));\n\n        // Test case 2: Empty string\n        String text2 = \"\";\n        Optional<String> result2 = solution.string_to_md5(text2);\n        System.out.println(\"Test case 2: \" + (!result2.isPresent() ? \"Pass\" : \"Fail\"));\n\n        // Test case 3: Another non-empty string\n        String text3 = \"Test string\";\n        String expected3 = \"d41d8cd98f00b204e9800998ecf8427e\";\n        Optional<String> result3 = solution.string_to_md5(text3);\n        System.out.println(\"Test case 3: \" + (result3.isPresent() && result3.get().equals(expected3) ? \"Pass\" : \"Fail\"));\n    }\n}\n"}
{"task_id": "Java/58", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        // Convert lists to sets to remove duplicates and improve lookup efficiency\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n\n        // Find the intersection of the two sets\n        set1.retainAll(set2);\n\n        // Convert the set back to a list and sort it\n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result);\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> l1 = Arrays.asList(1, 4, 3, 34, 653, 2, 5);\n        List<Integer> l2 = Arrays.asList(5, 7, 1, 5, 9, 653, 121);\n        List<Integer> expected = Arrays.asList(1, 5, 653);\n        System.out.println(\"Test case 1: \" + solution.common(l1, l2).equals(expected));\n\n        // Test case 2\n        l1 = Arrays.asList(5, 3, 2, 8);\n        l2 = Arrays.asList(3, 2);\n        expected = Arrays.asList(2, 3);\n        System.out.println(\"Test case 2: \" + solution.common(l1, l2).equals(expected));\n\n        // Test case 3: empty lists\n        l1 = Arrays.asList();\n        l2 = Arrays.asList();\n        expected = Arrays.asList();\n        System.out.println(\"Test case 3: \" + solution.common(l1, l2).equals(expected));\n\n        // Test case 4: no common elements\n        l1 = Arrays.asList(1, 2, 3);\n        l2 = Arrays.asList(4, 5, 6);\n        expected = Arrays.asList();\n        System.out.println(\"Test case 4: \" + solution.common(l1, l2).equals(expected));\n    }\n}\n"}
{"task_id": "Java/73", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallest_change(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallest_change(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallest_change(List<Integer> arr) {\n        int left = 0;\n        int right = arr.size() - 1;\n        int changes = 0;\n        while (left < right) {\n            if (!arr.get(left).equals(arr.get(right))) {\n                changes++;\n            }\n            left++;\n            right--;\n        }\n        return changes;\n    }\n}\n"}
{"task_id": "Java/150", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n     */\n    public int x_or_y(int n, int x, int y) {\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Test case 1:\");\n        System.out.println(\"Expected: 34\");\n        System.out.println(\"Actual: \" + solution.x_or_y(7, 34, 12));\n        System.out.println();\n\n        System.out.println(\"Test case 2:\");\n        System.out.println(\"Expected: 5\");\n        System.out.println(\"Actual: \" + solution.x_or_y(15, 8, 5));\n        System.out.println();\n\n        System.out.println(\"Test case 3:\");\n        System.out.println(\"Expected: 10\");\n        System.out.println(\"Actual: \" + solution.x_or_y(23, 10, 20));\n        System.out.println();\n\n        System.out.println(\"Test case 4:\");\n        System.out.println(\"Expected: 15\");\n        System.out.println(\"Actual: \" + solution.x_or_y(30, 15, 20));\n        System.out.println();\n    }\n}\n"}
{"task_id": "Java/54", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same kind of characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean same_chars(String s0, String s1) {\n        // Convert strings to sets to remove duplicates and compare\n        Set<Character> set0 = new HashSet<>();\n        Set<Character> set1 = new HashSet<>();\n\n        for (char c : s0.toCharArray()) {\n            set0.add(c);\n        }\n\n        for (char c : s1.toCharArray()) {\n            set1.add(c);\n        }\n\n        return set0.equals(set1);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"));  // true\n        System.out.println(solution.same_chars(\"abcd\", \"dddddddabc\"));  // true\n        System.out.println(solution.same_chars(\"dddddddabc\", \"abcd\"));  // true\n        System.out.println(solution.same_chars(\"eabcd\", \"dddddddabc\"));  // false\n        System.out.println(solution.same_chars(\"abcd\", \"dddddddabce\"));  // false\n        System.out.println(solution.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"));  // false\n    }\n}\n"}
{"task_id": "Java/108", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int count_nums(List<Integer> arr) {\n        int count = 0;\n        for (Integer num : arr) {\n            int sum = 0;\n            String strNum = String.valueOf(Math.abs(num));\n            for (char digit : strNum.toCharArray()) {\n                sum += Character.getNumericValue(digit);\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/20", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        Collections.sort(numbers);\n        double minDiff = Double.MAX_VALUE;\n        List<Double> closestElements = new ArrayList<>();\n\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = numbers.get(i + 1) - numbers.get(i);\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestElements.clear();\n                closestElements.add(numbers.get(i));\n                closestElements.add(numbers.get(i + 1));\n            }\n        }\n\n        return closestElements;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Double> numbers1 = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n        List<Double> result1 = solution.find_closest_elements(numbers1);\n        System.out.println(\"Test case 1: \" + result1);\n\n        // Test case 2\n        List<Double> numbers2 = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);\n        List<Double> result2 = solution.find_closest_elements(numbers2);\n        System.out.println(\"Test case 2: \" + result2);\n\n        // Test case 3\n        List<Double> numbers3 = Arrays.asList(10.0, 20.0, 30.0, 40.0, 50.0, 25.0);\n        List<Double> result3 = solution.find_closest_elements(numbers3);\n        System.out.println(\"Test case 3: \" + result3);\n\n        // Test case 4\n        List<Double> numbers4 = Arrays.asList(1.0, 1.0, 1.0, 1.0, 1.0);\n        List<Double> result4 = solution.find_closest_elements(numbers4);\n        System.out.println(\"Test case 4: \" + result4);\n    }\n}\n"}
{"task_id": "Java/90", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    next_smallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    next_smallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    next_smallest(Arrays.asList()) == Optional.empty\n    next_smallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        if (lst.isEmpty() || lst.size() < 2) {\n            return Optional.empty();\n        }\n\n        Set<Integer> set = new HashSet<>(lst);\n        if (set.size() < 2) {\n            return Optional.empty();\n        }\n\n        List<Integer> sortedList = new ArrayList<>(set);\n        Collections.sort(sortedList);\n        return Optional.of(sortedList.get(1));\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1:\n        List<Integer> lst1 = Arrays.asList(1, 2, 3, 4, 5);\n        System.out.println(\"Test case 1: \" + solution.next_smallest(lst1)); // Expected output: Optional[2]\n\n        // Test case 2:\n        List<Integer> lst2 = Arrays.asList(5, 1, 4, 3, 2);\n        System.out.println(\"Test case 2: \" + solution.next_smallest(lst2)); // Expected output: Optional[2]\n\n        // Test case 3:\n        List<Integer> lst3 = Arrays.asList();\n        System.out.println(\"Test case 3: \" + solution.next_smallest(lst3)); // Expected output: Optional.empty\n\n        // Test case 4:\n        List<Integer> lst4 = Arrays.asList(1, 1);\n        System.out.println(\"Test case 4: \" + solution.next_smallest(lst4)); // Expected output: Optional.empty\n    }\n}\n"}
{"task_id": "Java/131", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return product == 1 ? 0 : product;\n    }\n}\n"}
{"task_id": "Java/160", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        int result = operand.get(0);\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int num = operand.get(i + 1);\n            if (op.equals(\"+\")) {\n                result += num;\n            } else if (op.equals(\"-\")) {\n                result -= num;\n            } else if (op.equals(\"*\")) {\n                result *= num;\n            } else if (op.equals(\"/\")) {\n                result /= num;\n            } else if (op.equals(\"**\")) {\n                result = (int) Math.pow(result, num);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/17", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parse_music(String string) {\n        String[] notes = string.split(\" \");\n        List<Integer> beats = new ArrayList<>();\n\n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n                beats.add(4);\n            } else if (note.equals(\"o|\")) {\n                beats.add(2);\n            } else if (note.equals(\".|\")) {\n                beats.add(1);\n            }\n        }\n\n        return beats;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1:\n        String input1 = \"o o| .| o| o| .| .| .| .| o o\";\n        List<Integer> expected1 = Arrays.asList(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4);\n        List<Integer> result1 = solution.parse_music(input1);\n        System.out.println(\"Test case 1: \" + result1.equals(expected1));\n\n        // Test case 2:\n        String input2 = \"o| o| o| o|\";\n        List<Integer> expected2 = Arrays.asList(2, 2, 2, 2);\n        List<Integer> result2 = solution.parse_music(input2);\n        System.out.println(\"Test case 2: \" + result2.equals(expected2));\n\n        // Test case 3:\n        String input3 = \".| .| .| .| .|\";\n        List<Integer> expected3 = Arrays.asList(1, 1, 1, 1, 1);\n        List<Integer> result3 = solution.parse_music(input3);\n        System.out.println(\"Test case 3: \" + result3.equals(expected3));\n\n        // Test case 4:\n        String input4 = \"o o o o\";\n        List<Integer> expected4 = Arrays.asList(4, 4, 4, 4);\n        List<Integer> result4 = solution.parse_music(input4);\n        System.out.println(\"Test case 4: \" + result4.equals(expected4));\n\n        // Test case 5:\n        String input5 = \"\";\n        List<Integer> expected5 = Arrays.asList();\n        List<Integer> result5 = solution.parse_music(input5);\n        System.out.println(\"Test case 5: \" + result5.equals(expected5));\n    }\n}\n"}
{"task_id": "Java/98", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper(\"aBCdEf\") returns 1\n    count_upper(\"abcdefg\") returns 0\n    count_upper(\"dBBE\") returns 0\n     */    \n    public int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && isVowel(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isVowel(char c) {\n        String vowels = \"AEIOU\";\n        return vowels.indexOf(c) != -1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(\"Test case 1:\");\n        System.out.println(\"Expected: 1\");\n        System.out.println(\"Actual: \" + solution.count_upper(\"aBCdEf\"));\n        System.out.println();\n\n        System.out.println(\"Test case 2:\");\n        System.out.println(\"Expected: 0\");\n        System.out.println(\"Actual: \" + solution.count_upper(\"abcdefg\"));\n        System.out.println();\n\n        System.out.println(\"Test case 3:\");\n        System.out.println(\"Expected: 0\");\n        System.out.println(\"Actual: \" + solution.count_upper(\"dBBE\"));\n        System.out.println();\n\n        System.out.println(\"Test case 4:\");\n        System.out.println(\"Expected: 2\");\n        System.out.println(\"Actual: \" + solution.count_upper(\"ABCDE\"));\n        System.out.println();\n\n        System.out.println(\"Test case 5:\");\n        System.out.println(\"Expected: 0\");\n        System.out.println(\"Actual: \" + solution.count_upper(\"\"));\n        System.out.println();\n    }\n}\n"}
{"task_id": "Java/65", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String circular_shift(int x, int shift) {\n        String numStr = String.valueOf(x);\n        int numDigits = numStr.length();\n        shift = shift % numDigits;\n        if (shift == 0) {\n            StringBuilder sb = new StringBuilder(numStr);\n            return sb.reverse().toString();\n        } else {\n            String lastShiftChars = numStr.substring(numDigits - shift);\n            String remainingChars = numStr.substring(0, numDigits - shift);\n            return lastShiftChars + remainingChars;\n        }\n    }\n}\n"}
{"task_id": "Java/8", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product(List.of())\n    [0, 1]\n    >>> sum_product(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sum_product(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        return Arrays.asList(sum, product);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: Empty list\n        List<Integer> result1 = solution.sum_product(List.of());\n        System.out.println(\"Test case 1: \" + result1);\n        assert result1.equals(Arrays.asList(0, 1)) : \"Test case 1 failed\";\n\n        // Test case 2: Non-empty list\n        List<Integer> result2 = solution.sum_product(Arrays.asList(1, 2, 3, 4));\n        System.out.println(\"Test case 2: \" + result2);\n        assert result2.equals(Arrays.asList(10, 24)) : \"Test case 2 failed\";\n\n        // Test case 3: Single element list\n        List<Integer> result3 = solution.sum_product(Arrays.asList(5));\n        System.out.println(\"Test case 3: \" + result3);\n        assert result3.equals(Arrays.asList(5, 5)) : \"Test case 3 failed\";\n\n        // Test case 4: List with negative numbers\n        List<Integer> result4 = solution.sum_product(Arrays.asList(-1, -2, -3, -4));\n        System.out.println(\"Test case 4: \" + result4);\n        assert result4.equals(Arrays.asList(-10, 24)) : \"Test case 4 failed\";\n\n        System.out.println(\"All test cases passed\");\n    }\n}\n"}
{"task_id": "Java/49", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        return power(2, n, p);\n    }\n\n    private int power(int base, int exponent, int mod) {\n        int result = 1;\n        base = base % mod;\n        while (exponent > 0) {\n            if (exponent % 2 == 1) {\n                result = (result * base) % mod;\n            }\n            exponent = exponent >> 1;\n            base = (base * base) % mod;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(\"Test case 1: modp(3, 5) = \" + solution.modp(3, 5)); // Expected output: 3\n        System.out.println(\"Test case 2: modp(1101, 101) = \" + solution.modp(1101, 101)); // Expected output: 2\n        System.out.println(\"Test case 3: modp(0, 101) = \" + solution.modp(0, 101)); // Expected output: 1\n        System.out.println(\"Test case 4: modp(3, 11) = \" + solution.modp(3, 11)); // Expected output: 8\n        System.out.println(\"Test case 5: modp(100, 101) = \" + solution.modp(100, 101)); // Expected output: 1\n    }\n}\n"}
{"task_id": "Java/153", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.Strongest_Extension.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        int maxStrength = Integer.MIN_VALUE;\n        String strongestExtension = \"\";\n\n        for (String extension : extensions) {\n            int cap = 0;\n            int sm = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n                } else if (Character.isLowerCase(c)) {\n                    sm++;\n                }\n            }\n            int strength = cap - sm;\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return class_name + \".\" + strongestExtension;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<String> extensions1 = Arrays.asList(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\");\n        System.out.println(solution.Strongest_Extension(\"Slices\", extensions1)); // Expected output: \"Slices.SErviNGSliCes\"\n\n        // Test case 2\n        List<String> extensions2 = Arrays.asList(\"AA\", \"Be\", \"CC\");\n        System.out.println(solution.Strongest_Extension(\"my_class\", extensions2)); // Expected output: \"my_class.AA\"\n\n        // Test case 3\n        List<String> extensions3 = Arrays.asList(\"aBc\", \"DeF\", \"GhI\");\n        System.out.println(solution.Strongest_Extension(\"another_class\", extensions3)); // Expected output: \"another_class.aBc\"\n\n        // Test case 4\n        List<String> extensions4 = Arrays.asList(\"ALLCAPS\", \"alllowercase\", \"MiXeDcAsE\");\n        System.out.println(solution.Strongest_Extension(\"yet_another_class\", extensions4)); // Expected output: \"yet_another_class.ALLCAPS\"\n    }\n}\n"}
{"task_id": "Java/96", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(\"Test cases:\");\n        System.out.println(\"count_up_to(5) => \" + solution.count_up_to(5)); // [2,3]\n        System.out.println(\"count_up_to(11) => \" + solution.count_up_to(11)); // [2,3,5,7]\n        System.out.println(\"count_up_to(0) => \" + solution.count_up_to(0)); // []\n        System.out.println(\"count_up_to(20) => \" + solution.count_up_to(20)); // [2,3,5,7,11,13,17,19]\n        System.out.println(\"count_up_to(1) => \" + solution.count_up_to(1)); // []\n        System.out.println(\"count_up_to(18) => \" + solution.count_up_to(18)); // [2,3,5,7,11,13,17]\n    }\n}\n"}
{"task_id": "Java/64", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n     */\n    public int vowels_count(String s) {\n        int count = 0;\n        s = s.toLowerCase();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            } else if (c == 'y' && i == s.length() - 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(\"Test Case 1:\");\n        System.out.println(\"Input: abcde\");\n        System.out.println(\"Expected Output: 2\");\n        System.out.println(\"Actual Output: \" + solution.vowels_count(\"abcde\"));\n        System.out.println();\n\n        System.out.println(\"Test Case 2:\");\n        System.out.println(\"Input: ACEDY\");\n        System.out.println(\"Expected Output: 3\");\n        System.out.println(\"Actual Output: \" + solution.vowels_count(\"ACEDY\"));\n        System.out.println();\n\n        System.out.println(\"Test Case 3:\");\n        System.out.println(\"Input: hello\");\n        System.out.println(\"Expected Output: 2\");\n        System.out.println(\"Actual Output: \" + solution.vowels_count(\"hello\"));\n        System.out.println();\n\n        System.out.println(\"Test Case 4:\");\n        System.out.println(\"Input: y\");\n        System.out.println(\"Expected Output: 1\");\n        System.out.println(\"Actual Output: \" + solution.vowels_count(\"y\"));\n        System.out.println();\n\n        System.out.println(\"Test Case 5:\");\n        System.out.println(\"Input: empty string\");\n        System.out.println(\"Expected Output: 0\");\n        System.out.println(\"Actual Output: \" + solution.vowels_count(\"\"));\n        System.out.println();\n    }\n}\n"}
{"task_id": "Java/102", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n     */\n    public int choose_num(int x, int y) {\n        if (x > y) {\n            return -1;\n        } else {\n            int evenNum = y - (y % 2);\n            return evenNum >= x ? evenNum : -1;\n        }\n    }\n}\n"}
{"task_id": "Java/88", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> array) {\n        List<Integer> result = new ArrayList<>(array);\n        if (result.size() > 1) {\n            if ((result.get(0) + result.get(result.size() - 1)) % 2 == 0) {\n                Collections.sort(result, Collections.reverseOrder());\n            } else {\n                Collections.sort(result);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/146", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (Integer num : nums) {\n            if (num > 10 && isOdd(num % 10) && isOdd(getFirstDigit(num))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isOdd(int digit) {\n        return digit == 1 || digit == 3 || digit == 5 || digit == 7 || digit == 9;\n    }\n\n    private int getFirstDigit(int num) {\n        num = Math.abs(num);\n        while (num >= 10) {\n            num /= 10;\n        }\n        return num;\n    }\n}\n"}
{"task_id": "Java/30", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> get_positive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> get_positive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> get_positive(List<Integer> l) {\n        return l.stream()\n                .filter(x -> x > 0)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> list1 = Arrays.asList(-1, 2, -4, 5, 6);\n        List<Integer> expected1 = Arrays.asList(2, 5, 6);\n        System.out.println(\"Test case 1: \" + (solution.get_positive(list1).equals(expected1) ? \"Pass\" : \"Fail\"));\n\n        // Test case 2\n        List<Integer> list2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n        List<Integer> expected2 = Arrays.asList(5, 3, 2, 3, 9, 123, 1);\n        System.out.println(\"Test case 2: \" + (solution.get_positive(list2).equals(expected2) ? \"Pass\" : \"Fail\"));\n\n        // Test case 3: Empty list\n        List<Integer> list3 = new ArrayList<>();\n        List<Integer> expected3 = new ArrayList<>();\n        System.out.println(\"Test case 3: \" + (solution.get_positive(list3).equals(expected3) ? \"Pass\" : \"Fail\"));\n\n        // Test case 4: List with no positive numbers\n        List<Integer> list4 = Arrays.asList(-1, -2, -3, 0);\n        List<Integer> expected4 = new ArrayList<>();\n        System.out.println(\"Test case 4: \" + (solution.get_positive(list4).equals(expected4) ? \"Pass\" : \"Fail\"));\n    }\n}\n"}
{"task_id": "Java/97", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Complete the function that takes two integers and returns\n     * the product of their unit digits.\n     * Assume the input is always valid.\n     * Examples:\n     * multiply(148, 412) should return 16.\n     * multiply(19, 28) should return 72.\n     * multiply(2020, 1851) should return 0.\n     * multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        // Get the unit digits of a and b\n        int unitDigitA = Math.abs(a) % 10;\n        int unitDigitB = Math.abs(b) % 10;\n\n        // Return the product of the unit digits\n        return unitDigitA * unitDigitB;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Test case 1:\");\n        System.out.println(\"Expected output: 16\");\n        System.out.println(\"Actual output: \" + solution.multiply(148, 412));\n\n        System.out.println(\"\\nTest case 2:\");\n        System.out.println(\"Expected output: 72\");\n        System.out.println(\"Actual output: \" + solution.multiply(19, 28));\n\n        System.out.println(\"\\nTest case 3:\");\n        System.out.println(\"Expected output: 0\");\n        System.out.println(\"Actual output: \" + solution.multiply(2020, 1851));\n\n        System.out.println(\"\\nTest case 4:\");\n        System.out.println(\"Expected output: 20\");\n        System.out.println(\"Actual output: \" + solution.multiply(14, -15));\n    }\n}\n"}
{"task_id": "Java/95", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a map, return True if all keys are strings and all keys are in lower case or  in upper case, else return False.\n     * The function should return False is the given map is empty.\n     */\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        boolean allLower = true;\n        boolean allUpper = true;\n\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n\n            String strKey = (String) key;\n            if (!strKey.equals(strKey.toLowerCase())) {\n                allLower = false;\n            }\n            if (!strKey.equals(strKey.toUpperCase())) {\n                allUpper = false;\n            }\n        }\n\n        return allLower || allUpper;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: All keys are strings and in lower case\n        Map<Object, Object> dict1 = new HashMap<>();\n        dict1.put(\"a\", \"apple\");\n        dict1.put(\"b\", \"banana\");\n        System.out.println(solution.check_dict_case(dict1)); // Expected output: true\n\n        // Test case 2: All keys are strings but not all in lower case or upper case\n        Map<Object, Object> dict2 = new HashMap<>();\n        dict2.put(\"a\", \"apple\");\n        dict2.put(\"A\", \"banana\");\n        dict2.put(\"B\", \"banana\");\n        System.out.println(solution.check_dict_case(dict2)); // Expected output: false\n\n        // Test case 3: Not all keys are strings\n        Map<Object, Object> dict3 = new HashMap<>();\n        dict3.put(\"a\", \"apple\");\n        dict3.put(8, \"banana\");\n        dict3.put(\"a\", \"apple\");\n        System.out.println(solution.check_dict_case(dict3)); // Expected output: false\n\n        // Test case 4: All keys are strings but not all in lower case or upper case\n        Map<Object, Object> dict4 = new HashMap<>();\n        dict4.put(\"Name\", \"John\");\n        dict4.put(\"Age\", \"36\");\n        dict4.put(\"City\", \"Houston\");\n        System.out.println(solution.check_dict_case(dict4)); // Expected output: false\n\n        // Test case 5: All keys are strings and in upper case\n        Map<Object, Object> dict5 = new HashMap<>();\n        dict5.put(\"STATE\", \"NC\");\n        dict5.put(\"ZIP\", \"12345\");\n        System.out.println(solution.check_dict_case(dict5)); // Expected output: true\n\n        // Test case 6: Empty dictionary\n        Map<Object, Object> dict6 = new HashMap<>();\n        System.out.println(solution.check_dict_case(dict6)); // Expected output: false\n    }\n}\n"}
{"task_id": "Java/10", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n     */\n    public String make_palindrome(String string) {\n        if (isPalindrome(string)) {\n            return string;\n        }\n\n        for (int i = string.length() - 1; i >= 0; i--) {\n            String postfix = string.substring(i);\n            if (isPalindrome(postfix)) {\n                String prefix = string.substring(0, i);\n                StringBuilder sb = new StringBuilder(prefix);\n                return string + sb.reverse().toString();\n            }\n        }\n        return \"\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.make_palindrome(\"\")); // \"\"\n        System.out.println(solution.make_palindrome(\"cat\")); // \"catac\"\n        System.out.println(solution.make_palindrome(\"cata\")); // \"catac\"\n        System.out.println(solution.make_palindrome(\"abc\")); // \"abcba\"\n        System.out.println(solution.make_palindrome(\"abba\")); // \"abba\"\n        System.out.println(solution.make_palindrome(\"abcd\")); // \"abcdcba\"\n    }\n}\n"}
{"task_id": "Java/109", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    move_one_ball(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean move_one_ball(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        int minIndex = arr.indexOf(Collections.min(arr));\n        List<Integer> sortedArr = new ArrayList<>(arr.subList(minIndex, arr.size()));\n        sortedArr.addAll(arr.subList(0, minIndex));\n\n        for (int i = 1; i < sortedArr.size(); i++) {\n            if (sortedArr.get(i) < sortedArr.get(i - 1)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1:\n        List<Integer> arr1 = Arrays.asList(3, 4, 5, 1, 2);\n        System.out.println(\"Test case 1: \" + solution.move_one_ball(arr1)); // Expected output: true\n\n        // Test case 2:\n        List<Integer> arr2 = Arrays.asList(3, 5, 4, 1, 2);\n        System.out.println(\"Test case 2: \" + solution.move_one_ball(arr2)); // Expected output: false\n\n        // Test case 3:\n        List<Integer> arr3 = Arrays.asList(1, 2, 3, 4, 5);\n        System.out.println(\"Test case 3: \" + solution.move_one_ball(arr3)); // Expected output: true\n\n        // Test case 4:\n        List<Integer> arr4 = Arrays.asList();\n        System.out.println(\"Test case 4: \" + solution.move_one_ball(arr4)); // Expected output: true\n    }\n}\n"}
{"task_id": "Java/4", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * For a given list of input numbers, calculate Mean Absolute Deviation\n     * around the mean of this dataset.\n     * Mean Absolute Deviation is the average absolute difference between each\n     * element and a centerpoint (mean in this case):\n     * MAD = average | x - x_mean |\n     */\n    public double mean_absolute_deviation(List<Double> numbers) {\n        // Calculate the mean\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n\n        // Calculate the absolute deviations from the mean\n        double sumAbsDev = 0;\n        for (double num : numbers) {\n            sumAbsDev += Math.abs(num - mean);\n        }\n\n        // Calculate the Mean Absolute Deviation\n        return sumAbsDev / numbers.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1:\n        List<Double> numbers1 = Arrays.asList(1.0, 2.0, 3.0, 4.0);\n        System.out.println(\"Test case 1: \" + solution.mean_absolute_deviation(numbers1)); // Expected output: 1.0\n\n        // Test case 2:\n        List<Double> numbers2 = Arrays.asList(10.0, 20.0, 30.0, 40.0);\n        System.out.println(\"Test case 2: \" + solution.mean_absolute_deviation(numbers2)); // Expected output: 10.0\n\n        // Test case 3:\n        List<Double> numbers3 = Arrays.asList(1.5, 2.5, 3.5, 4.5);\n        System.out.println(\"Test case 3: \" + solution.mean_absolute_deviation(numbers3)); // Expected output: 1.0\n\n        // Test case 4: Empty list\n        List<Double> numbers4 = new ArrayList<>();\n        try {\n            System.out.println(\"Test case 4: \" + solution.mean_absolute_deviation(numbers4));\n        } catch (ArithmeticException e) {\n            System.out.println(\"Test case 4: \" + e.getMessage()); // Expected output: / by zero\n        }\n\n        // Test case 5: Single element list\n        List<Double> numbers5 = Arrays.asList(5.0);\n        System.out.println(\"Test case 5: \" + solution.mean_absolute_deviation(numbers5)); // Expected output: 0.0\n    }\n}\n"}
{"task_id": "Java/77", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        double cubeRoot = Math.cbrt(a);\n        return cubeRoot == Math.round(cubeRoot);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.iscube(1));  // true\n        System.out.println(solution.iscube(2));  // false\n        System.out.println(solution.iscube(-1)); // true\n        System.out.println(solution.iscube(64)); // true\n        System.out.println(solution.iscube(0));  // true\n        System.out.println(solution.iscube(180)); // false\n    }\n}\n"}
{"task_id": "Java/57", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        boolean increasing = true;\n        boolean decreasing = true;\n\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n        }\n\n        return increasing || decreasing;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.monotonic(Arrays.asList(1, 2, 4, 20)));  // true\n        System.out.println(solution.monotonic(Arrays.asList(1, 20, 4, 10)));  // false\n        System.out.println(solution.monotonic(Arrays.asList(4, 1, 0, -10)));  // true\n        System.out.println(solution.monotonic(Arrays.asList(1, 1, 1, 1)));  // true\n        System.out.println(solution.monotonic(Arrays.asList(1, 2, 3, 2)));  // false\n        System.out.println(solution.monotonic(Arrays.asList(5, 4, 3, 2, 1)));  // true\n        System.out.println(solution.monotonic(Arrays.asList(1)));  // true\n        System.out.println(solution.monotonic(Arrays.asList(1, 1)));  // true\n    }\n}\n"}
{"task_id": "Java/142", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sum_squares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> lst1 = Arrays.asList(1, 2, 3);\n        List<Integer> lst2 = new ArrayList<>();\n        List<Integer> lst3 = Arrays.asList(-1, -5, 2, -1, -5);\n\n        System.out.println(\"Test Case 1: \" + solution.sum_squares(lst1)); // Expected output: 6\n        System.out.println(\"Test Case 2: \" + solution.sum_squares(lst2)); // Expected output: 0\n        System.out.println(\"Test Case 3: \" + solution.sum_squares(lst3)); // Expected output: -126\n    }\n}\n"}
{"task_id": "Java/121", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(\"Test 1: \" + solution.solution(Arrays.asList(5, 8, 7, 1)) + \" == 12\");\n        System.out.println(\"Test 2: \" + solution.solution(Arrays.asList(3, 3, 3, 3, 3)) + \" == 9\");\n        System.out.println(\"Test 3: \" + solution.solution(Arrays.asList(30, 13, 24, 321)) + \" == 0\");\n    }\n}\n"}
{"task_id": "Java/23", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: Empty string\n        System.out.println(\"Test case 1: Empty string\");\n        System.out.println(\"Expected output: 0\");\n        System.out.println(\"Actual output: \" + solution.strlen(\"\"));\n        System.out.println();\n\n        // Test case 2: Non-empty string\n        System.out.println(\"Test case 2: Non-empty string\");\n        System.out.println(\"Expected output: 3\");\n        System.out.println(\"Actual output: \" + solution.strlen(\"abc\"));\n        System.out.println();\n\n        // Test case 3: Single character string\n        System.out.println(\"Test case 3: Single character string\");\n        System.out.println(\"Expected output: 1\");\n        System.out.println(\"Actual output: \" + solution.strlen(\"a\"));\n        System.out.println();\n\n        // Test case 4: Long string\n        System.out.println(\"Test case 4: Long string\");\n        System.out.println(\"Expected output: 10\");\n        System.out.println(\"Actual output: \" + solution.strlen(\"abcdefghij\"));\n        System.out.println();\n    }\n}\n"}
{"task_id": "Java/80", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => false\n    is_happy(aa) => false\n    is_happy(abcd) => true\n    is_happy(aabb) => false\n    is_happy(adb) => true\n    is_happy(xyy) => false\n     */\n    public boolean is_happy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.is_happy(\"a\")); // false\n        System.out.println(solution.is_happy(\"aa\")); // false\n        System.out.println(solution.is_happy(\"abcd\")); // true\n        System.out.println(solution.is_happy(\"aabb\")); // false\n        System.out.println(solution.is_happy(\"adb\")); // true\n        System.out.println(solution.is_happy(\"xyy\")); // false\n    }\n}\n"}
{"task_id": "Java/132", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_nested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.size() > 1) {\n                    return true;\n                }\n                stack.pop();\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/66", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Returns the sum of the upper characters only' ASCII codes in the input string.\n     * \n     * @param s the input string\n     * @return the sum of the upper characters only' ASCII codes\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Test case 1:\");\n        System.out.println(\"Expected output: 0\");\n        System.out.println(\"Actual output: \" + solution.digitSum(\"\"));\n        System.out.println();\n\n        System.out.println(\"Test case 2:\");\n        System.out.println(\"Expected output: 131\");\n        System.out.println(\"Actual output: \" + solution.digitSum(\"abAB\"));\n        System.out.println();\n\n        System.out.println(\"Test case 3:\");\n        System.out.println(\"Expected output: 67\");\n        System.out.println(\"Actual output: \" + solution.digitSum(\"abcCd\"));\n        System.out.println();\n\n        System.out.println(\"Test case 4:\");\n        System.out.println(\"Expected output: 69\");\n        System.out.println(\"Actual output: \" + solution.digitSum(\"helloE\"));\n        System.out.println();\n\n        System.out.println(\"Test case 5:\");\n        System.out.println(\"Expected output: 131\");\n        System.out.println(\"Actual output: \" + solution.digitSum(\"woArBld\"));\n        System.out.println();\n\n        System.out.println(\"Test case 6:\");\n        System.out.println(\"Expected output: 153\");\n        System.out.println(\"Actual output: \" + solution.digitSum(\"aAaaaXa\"));\n        System.out.println();\n    }\n}\n"}
{"task_id": "Java/14", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> all_prefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: Empty string\n        List<String> result1 = solution.all_prefixes(\"\");\n        System.out.println(\"Test case 1: \" + result1);\n        assert result1.isEmpty();\n\n        // Test case 2: Single character string\n        List<String> result2 = solution.all_prefixes(\"a\");\n        System.out.println(\"Test case 2: \" + result2);\n        assert result2.equals(Arrays.asList(\"a\"));\n\n        // Test case 3: Multi-character string\n        List<String> result3 = solution.all_prefixes(\"abc\");\n        System.out.println(\"Test case 3: \" + result3);\n        assert result3.equals(Arrays.asList(\"a\", \"ab\", \"abc\"));\n\n        // Test case 4: Long string\n        List<String> result4 = solution.all_prefixes(\"abcdefghijklmnopqrstuvwxyz\");\n        System.out.println(\"Test case 4: \" + result4);\n        assert result4.size() == 26;\n        for (int i = 0; i < 26; i++) {\n            assert result4.get(i).equals(\"abcdefghijklmnopqrstuvwxyz\".substring(0, i + 1));\n        }\n\n        System.out.println(\"All test cases pass!\");\n    }\n}\n"}
{"task_id": "Java/25", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(\"Test case 1:\");\n        System.out.println(\"Input: 8\");\n        System.out.println(\"Expected output: [2, 2, 2]\");\n        System.out.println(\"Actual output: \" + solution.factorize(8));\n        System.out.println();\n\n        System.out.println(\"Test case 2:\");\n        System.out.println(\"Input: 25\");\n        System.out.println(\"Expected output: [5, 5]\");\n        System.out.println(\"Actual output: \" + solution.factorize(25));\n        System.out.println();\n\n        System.out.println(\"Test case 3:\");\n        System.out.println(\"Input: 70\");\n        System.out.println(\"Expected output: [2, 5, 7]\");\n        System.out.println(\"Actual output: \" + solution.factorize(70));\n        System.out.println();\n\n        System.out.println(\"Test case 4:\");\n        System.out.println(\"Input: 1\");\n        System.out.println(\"Expected output: []\");\n        System.out.println(\"Actual output: \" + solution.factorize(1));\n        System.out.println();\n\n        System.out.println(\"Test case 5:\");\n        System.out.println(\"Input: 2\");\n        System.out.println(\"Expected output: [2]\");\n        System.out.println(\"Actual output: \" + solution.factorize(2));\n        System.out.println();\n    }\n}\n"}
{"task_id": "Java/107", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> even_odd_palindrome(int n) {\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n\n    private boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0;\n        int right = str.length() - 1;\n\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        int n1 = 3;\n        List<Integer> result1 = solution.even_odd_palindrome(n1);\n        System.out.println(\"Test case 1: Input = \" + n1 + \", Output = (\" + result1.get(0) + \", \" + result1.get(1) + \")\");\n\n        // Test case 2\n        int n2 = 12;\n        List<Integer> result2 = solution.even_odd_palindrome(n2);\n        System.out.println(\"Test case 2: Input = \" + n2 + \", Output = (\" + result2.get(0) + \", \" + result2.get(1) + \")\");\n\n        // Test case 3\n        int n3 = 100;\n        List<Integer> result3 = solution.even_odd_palindrome(n3);\n        System.out.println(\"Test case 3: Input = \" + n3 + \", Output = (\" + result3.get(0) + \", \" + result3.get(1) + \")\");\n    }\n}\n"}
{"task_id": "Java/83", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int starts_one_ends(int n) {\n        // Calculate the total number of n-digit numbers\n        int totalNumbers = 9 * (int) Math.pow(10, n - 1);\n        \n        // Calculate the number of n-digit numbers that start with 1\n        int startsWithOne = (int) Math.pow(10, n - 1);\n        \n        // Calculate the number of n-digit numbers that end with 1\n        int endsWithOne = 9 * (int) Math.pow(10, n - 2) * 10;\n        \n        // Calculate the number of n-digit numbers that start and end with 1\n        int startsAndEndsWithOne = (int) Math.pow(10, n - 2) * 9;\n        \n        // Calculate the total count of numbers that start or end with 1\n        int totalCount = startsWithOne + endsWithOne - startsAndEndsWithOne;\n        \n        return totalCount;\n    }\n}\n"}
{"task_id": "Java/32", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> find_zero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> find_zero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double find_zero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"The number of coefficients must be even\");\n        }\n        if (xs.get(xs.size() - 1) == 0) {\n            throw new IllegalArgumentException(\"The largest non-zero coefficient must be at the end\");\n        }\n        \n        double x = 1.0; // Initial guess\n        double epsilon = 1e-6; // Convergence criterion\n        while (true) {\n            double f_x = poly(xs, x);\n            double f_prime_x = derivative(xs, x);\n            if (f_prime_x == 0) {\n                throw new IllegalArgumentException(\"The derivative is zero, cannot continue\");\n            }\n            double x_next = x - f_x / f_prime_x;\n            if (Math.abs(x_next - x) < epsilon) {\n                return x_next;\n            }\n            x = x_next;\n        }\n    }\n    \n    private double derivative(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size() - 1; i++) {\n            result += (i + 1) * xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/85", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 != 0 && lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1:\n        List<Integer> lst1 = Arrays.asList(4, 2, 6, 7);\n        System.out.println(\"Test case 1: \" + solution.add(lst1)); // Expected output: 2\n\n        // Test case 2:\n        List<Integer> lst2 = Arrays.asList(1, 3, 5, 7);\n        System.out.println(\"Test case 2: \" + solution.add(lst2)); // Expected output: 0\n\n        // Test case 3:\n        List<Integer> lst3 = Arrays.asList(2, 4, 6, 8);\n        System.out.println(\"Test case 3: \" + solution.add(lst3)); // Expected output: 4\n\n        // Test case 4:\n        List<Integer> lst4 = Arrays.asList(10, 20, 30, 40);\n        System.out.println(\"Test case 4: \" + solution.add(lst4)); // Expected output: 20\n    }\n}\n"}
{"task_id": "Java/156", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == \"xix\"\n    >>> int_to_mini_roman(152) == \"clii\"\n    >>> int_to_mini_roman(426) == \"cdxxvi\"\n     */\n    public String int_to_mini_roman(int number) {\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] romanNumerals = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        StringBuilder result = new StringBuilder();\n\n        for (int i = 0; i < values.length; i++) {\n            while (number >= values[i]) {\n                number -= values[i];\n                result.append(romanNumerals[i]);\n            }\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Test case 1:\");\n        System.out.println(\"Expected: xix\");\n        System.out.println(\"Actual: \" + solution.int_to_mini_roman(19));\n        System.out.println();\n\n        System.out.println(\"Test case 2:\");\n        System.out.println(\"Expected: clii\");\n        System.out.println(\"Actual: \" + solution.int_to_mini_roman(152));\n        System.out.println();\n\n        System.out.println(\"Test case 3:\");\n        System.out.println(\"Expected: cdxxvi\");\n        System.out.println(\"Actual: \" + solution.int_to_mini_roman(426));\n        System.out.println();\n\n        System.out.println(\"Test case 4:\");\n        System.out.println(\"Expected: i\");\n        System.out.println(\"Actual: \" + solution.int_to_mini_roman(1));\n        System.out.println();\n\n        System.out.println(\"Test case 5:\");\n        System.out.println(\"Expected: m\");\n        System.out.println(\"Actual: \" + solution.int_to_mini_roman(1000));\n        System.out.println();\n    }\n}\n"}
{"task_id": "Java/75", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Returns true if the given number is the multiplication of 3 prime numbers\n     * and false otherwise.\n     * Knowing that the prime number is less then 100.\n     * Example:\n     * is_multiply_prime(30) == true\n     * 30 = 2 * 3 * 5\n     */\n    public boolean is_multiply_prime(int a) {\n        // Precompute all prime numbers less than 100\n        boolean[] primes = new boolean[100];\n        Arrays.fill(primes, true);\n        primes[0] = primes[1] = false;\n        for (int i = 2; i * i < 100; i++) {\n            if (primes[i]) {\n                for (int j = i * i; j < 100; j += i) {\n                    primes[j] = false;\n                }\n            }\n        }\n\n        // Check all combinations of three prime numbers\n        for (int i = 2; i < 100; i++) {\n            if (primes[i]) {\n                for (int j = i; j < 100; j++) {\n                    if (primes[j]) {\n                        for (int k = j; k < 100; k++) {\n                            if (primes[k] && i * j * k == a) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.is_multiply_prime(30));  // true\n        System.out.println(solution.is_multiply_prime(2 * 3 * 5));  // true\n        System.out.println(solution.is_multiply_prime(2 * 3 * 7));  // true\n        System.out.println(solution.is_multiply_prime(2 * 3 * 11));  // true\n        System.out.println(solution.is_multiply_prime(2 * 3 * 13));  // true\n        System.out.println(solution.is_multiply_prime(2 * 3 * 17));  // true\n        System.out.println(solution.is_multiply_prime(2 * 3 * 19));  // true\n        System.out.println(solution.is_multiply_prime(2 * 3 * 23));  // true\n        System.out.println(solution.is_multiply_prime(2 * 3 * 29));  // true\n        System.out.println(solution.is_multiply_prime(2 * 3 * 31));  // true\n        System.out.println(solution.is_multiply_prime(2 * 3 * 37));  // true\n        System.out.println(solution.is_multiply_prime(2 * 3 * 41));  // true\n        System.out.println(solution.is_multiply_prime(2 * 3 * 43));  // true\n        System.out.println(solution.is_multiply_prime(2 * 3 * 47));  // true\n        System.out.println(solution.is_multiply_prime(2 * 3 * 53));  // true\n        System.out.println(solution.is_multiply_prime(2 * 3 * 59));  // true\n        System.out.println(solution.is_multiply_prime(2 * 3 * 61));  // true\n        System.out.println(solution.is_multiply_prime(2 * 3 * 67));  // true\n        System.out.println(solution.is_multiply_prime(2 * 3 * 71));  // true\n        System.out.println(solution.is_multiply_prime(2 * 3 * 73));  // true\n        System.out.println(solution.is_multiply_prime(2 * 3 * 79));  // true\n        System.out.println(solution.is_multiply_prime(2 * 3 * 83));  // true\n        System.out.println(solution.is_multiply_prime(2 * 3 * 89));  // true\n        System.out.println(solution.is_multiply_prime(2 * 3 * 97));  // true\n\n        System.out.println(solution.is_multiply_prime(1));  // false\n        System.out.println(solution.is_multiply_prime(2));  // false\n        System.out.println(solution.is_multiply_prime(3));  // false\n        System.out.println(solution.is_multiply_prime(4));  // false\n        System.out.println(solution.is_multiply_prime(5));  // false\n        System.out.println(solution.is_multiply_prime(6));  // false\n        System.out.println(solution.is_multiply_prime(7));  // false\n        System.out.println(solution.is_multiply_prime(8));  // false\n        System.out.println(solution.is_multiply_prime(9));  // false\n        System.out.println(solution.is_multiply_prime(10));  // false\n    }\n}\n"}
{"task_id": "Java/157", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == true\n    right_angle_triangle(1, 2, 3) == false\n     */\n    public boolean right_angle_triangle(int a, int b, int c) {\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        return sides[0]*sides[0] + sides[1]*sides[1] == sides[2]*sides[2];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.right_angle_triangle(3, 4, 5));  // true\n        System.out.println(solution.right_angle_triangle(1, 2, 3));  // false\n        System.out.println(solution.right_angle_triangle(5, 12, 13));  // true\n        System.out.println(solution.right_angle_triangle(8, 15, 17));  // true\n        System.out.println(solution.right_angle_triangle(7, 24, 25));  // true\n        System.out.println(solution.right_angle_triangle(11, 60, 61));  // true\n        System.out.println(solution.right_angle_triangle(20, 21, 29));  // false\n    }\n}\n"}
{"task_id": "Java/36", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n     */\n    public int fizz_buzz(int n) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String str = String.valueOf(i);\n                for (char c : str.toCharArray()) {\n                    if (c == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(\"Test Case 1:\");\n        System.out.println(\"Expected Output: 0\");\n        System.out.println(\"Actual Output: \" + solution.fizz_buzz(50));\n        System.out.println();\n\n        System.out.println(\"Test Case 2:\");\n        System.out.println(\"Expected Output: 2\");\n        System.out.println(\"Actual Output: \" + solution.fizz_buzz(78));\n        System.out.println();\n\n        System.out.println(\"Test Case 3:\");\n        System.out.println(\"Expected Output: 3\");\n        System.out.println(\"Actual Output: \" + solution.fizz_buzz(79));\n    }\n}\n"}
{"task_id": "Java/94", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int skjkasdkd(List<Integer> lst) {\n        int maxPrime = 0;\n        for (int num : lst) {\n            if (isPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n        return sumOfDigits(maxPrime);\n    }\n\n    private boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private int sumOfDigits(int n) {\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/60", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n     */\n    public int sum_to_n(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(\"Test 1:\");\n        System.out.println(\"Expected: 465, Actual: \" + solution.sum_to_n(30));\n        System.out.println(\"Test 2:\");\n        System.out.println(\"Expected: 5050, Actual: \" + solution.sum_to_n(100));\n        System.out.println(\"Test 3:\");\n        System.out.println(\"Expected: 15, Actual: \" + solution.sum_to_n(5));\n        System.out.println(\"Test 4:\");\n        System.out.println(\"Expected: 55, Actual: \" + solution.sum_to_n(10));\n        System.out.println(\"Test 5:\");\n        System.out.println(\"Expected: 1, Actual: \" + solution.sum_to_n(1));\n    }\n}\n"}
{"task_id": "Java/145", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> order_by_points(List<Integer> nums) {\n        List<Map.Entry<Integer, Integer>> list = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = sumOfDigits(nums.get(i));\n            list.add(new AbstractMap.SimpleEntry<>(sum, i));\n        }\n        Collections.sort(list, (a, b) -> a.getKey().equals(b.getKey()) ? a.getValue().compareTo(b.getValue()) : a.getKey().compareTo(b.getKey()));\n        List<Integer> result = new ArrayList<>();\n        for (Map.Entry<Integer, Integer> entry : list) {\n            result.add(nums.get(entry.getValue()));\n        }\n        return result;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        String str = String.valueOf(Math.abs(num));\n        for (char c : str.toCharArray()) {\n            sum += c - '0';\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/61", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n     */\n    public boolean correct_bracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.correct_bracketing(\"(\")); // false\n        System.out.println(solution.correct_bracketing(\"()\")); // true\n        System.out.println(solution.correct_bracketing(\"(()())\")); // true\n        System.out.println(solution.correct_bracketing(\")(()\")); // false\n    }\n}\n"}
{"task_id": "Java/79", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   // returns \"db1111db\"\n    decimal_to_binary(32)   // returns \"db100000db\"\n     */\n    public String decimal_to_binary(int decimal) {\n        return \"db\" + Integer.toBinaryString(decimal) + \"db\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.decimal_to_binary(15));   // \"db1111db\"\n        System.out.println(solution.decimal_to_binary(32));   // \"db100000db\"\n        System.out.println(solution.decimal_to_binary(0));    // \"db0db\"\n        System.out.println(solution.decimal_to_binary(1));    // \"db1db\"\n        System.out.println(solution.decimal_to_binary(255));  // \"db11111111db\"\n    }\n}\n"}
{"task_id": "Java/116", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sort_array(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 4, 3, 5))\n    >>> sort_array(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-4, -2, -6, -5, -3))\n    >>> sort_array(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 4, 3))\n     */\n    public List<Integer> sort_array(List<Integer> arr) {\n        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int onesA = Integer.bitCount(Math.abs(a));\n                int onesB = Integer.bitCount(Math.abs(b));\n                if (onesA == onesB) {\n                    return a - b;\n                } else {\n                    return onesA - onesB;\n                }\n            }\n        });\n        return arr;\n    }\n}\n"}
{"task_id": "Java/56", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n     */\n    public boolean correct_bracketing(String brackets) {\n        int balance = 0;\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                balance++;\n            } else if (c == '>') {\n                balance--;\n                if (balance < 0) {\n                    return false;\n                }\n            }\n        }\n        return balance == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.correct_bracketing(\"<\"));  // false\n        System.out.println(solution.correct_bracketing(\"<>\"));  // true\n        System.out.println(solution.correct_bracketing(\"<<><>>\"));  // true\n        System.out.println(solution.correct_bracketing(\"><<>\"));  // false\n    }\n}\n"}
{"task_id": "Java/111", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Map<String, Integer> histogram(String test) {\n        String[] words = test.split(\" \");\n        Map<String, Integer> count = new HashMap<>();\n        int maxCount = 0;\n\n        // Count the occurrences of each letter\n        for (String word : words) {\n            if (count.containsKey(word)) {\n                count.put(word, count.get(word) + 1);\n            } else {\n                count.put(word, 1);\n            }\n            maxCount = Math.max(maxCount, count.get(word));\n        }\n\n        // Create a new map with only the letters with the maximum count\n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : count.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/125", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object split_words(String txt) {\n        // Try to split on whitespace\n        String[] words = txt.split(\"\\\\s+\");\n        if (words.length > 1) {\n            return Arrays.asList(words);\n        }\n\n        // If no whitespace, try to split on commas\n        words = txt.split(\",\");\n        if (words.length > 1) {\n            return Arrays.asList(words);\n        }\n\n        // If no commas, count the number of lower-case letters with odd order in the alphabet\n        int count = 0;\n        for (char c : txt.toCharArray()) {\n            if (Character.isLowerCase(c) && (c - 'a') % 2 != 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/119", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String match_parens(List<String> lst) {\n        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n\n        return (isBalanced(s1 + s2) || isBalanced(s2 + s1)) ? \"Yes\" : \"No\";\n    }\n\n    public boolean isBalanced(String s) {\n        int count = 0;\n        for (char c : s.toCharArray()) {\n            if (c == '(') {\n                count++;\n            } else if (c == ')') {\n                count--;\n                if (count < 0) {\n                    return false;\n                }\n            }\n        }\n        return count == 0;\n    }\n}\n"}
{"task_id": "Java/124", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    valid_date(\"03-11-2000\") => true\n    valid_date(\"15-01-2012\") => false\n    valid_date(\"04-0-2040\") => false\n    valid_date(\"06-04-2020\") => true\n    valid_date(\"06/04/2020\") => false\n     */\n    public boolean valid_date(String date) {\n        if (date.isEmpty()) {\n            return false;\n        }\n\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n            return false;\n        }\n\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        int maxDays = getMaxDays(month, year);\n        if (day < 1 || day > maxDays) {\n            return false;\n        }\n\n        return true;\n    }\n\n    private int getMaxDays(int month, int year) {\n        if (month == 2) {\n            if (isLeapYear(year)) {\n                return 29;\n            } else {\n                return 28;\n            }\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            return 30;\n        } else {\n            return 31;\n        }\n    }\n\n    private boolean isLeapYear(int year) {\n        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.valid_date(\"03-11-2000\")); // true\n        System.out.println(solution.valid_date(\"15-01-2012\")); // false\n        System.out.println(solution.valid_date(\"04-0-2040\")); // false\n        System.out.println(solution.valid_date(\"06-04-2020\")); // true\n        System.out.println(solution.valid_date(\"06/04/2020\")); // false\n        System.out.println(solution.valid_date(\"02-29-2020\")); // true\n        System.out.println(solution.valid_date(\"02-29-2019\")); // false\n        System.out.println(solution.valid_date(\"13-01-2020\")); // false\n        System.out.println(solution.valid_date(\"01-32-2020\")); // false\n        System.out.println(solution.valid_date(\"\")); // false\n    }\n}\n"}
{"task_id": "Java/9", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int maxSoFar = Integer.MIN_VALUE;\n        for (int num : numbers) {\n            maxSoFar = Math.max(maxSoFar, num);\n            result.add(maxSoFar);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/43", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairs_sum_to_zero(Arrays.asList(1))\n    false\n     */\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for (Integer num : l) {\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1, 3, -2, 1))); // false\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(2, 4, -5, 3, 5, 7))); // true\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1))); // false\n    }\n}\n"}
{"task_id": "Java/82", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    prime_length(\"Hello\") == true\n    prime_length(\"abcdcba\") == true\n    prime_length(\"kittens\") == true\n    prime_length(\"orange\") == false\n     */\n    public boolean prime_length(String string) {\n        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.prime_length(\"Hello\")); // true\n        System.out.println(solution.prime_length(\"abcdcba\")); // true\n        System.out.println(solution.prime_length(\"kittens\")); // true\n        System.out.println(solution.prime_length(\"orange\")); // false\n        System.out.println(solution.prime_length(\"a\")); // false\n        System.out.println(solution.prime_length(\"\")); // false\n        System.out.println(solution.prime_length(\"ab\")); // false\n    }\n}\n"}
{"task_id": "Java/155", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n     */\n    public List<Integer> even_odd_count(int num) {\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        // Convert the integer to a string to easily iterate over each digit\n        String numStr = Math.abs(num) + \"\";\n        \n        for (char c : numStr.toCharArray()) {\n            int digit = Character.getNumericValue(c);\n            \n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        \n        // Return the counts as a list\n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(\"Test case 1:\");\n        System.out.println(\"Input: -12\");\n        System.out.println(\"Expected output: [1, 1]\");\n        System.out.println(\"Actual output: \" + solution.even_odd_count(-12));\n        \n        System.out.println(\"\\nTest case 2:\");\n        System.out.println(\"Input: 123\");\n        System.out.println(\"Expected output: [1, 2]\");\n        System.out.println(\"Actual output: \" + solution.even_odd_count(123));\n        \n        System.out.println(\"\\nTest case 3:\");\n        System.out.println(\"Input: 246\");\n        System.out.println(\"Expected output: [3, 0]\");\n        System.out.println(\"Actual output: \" + solution.even_odd_count(246));\n        \n        System.out.println(\"\\nTest case 4:\");\n        System.out.println(\"Input: 13579\");\n        System.out.println(\"Expected output: [0, 5]\");\n        System.out.println(\"Actual output: \" + solution.even_odd_count(13579));\n    }\n}\n"}
{"task_id": "Java/35", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> max_element(Arrays.asList(1, 2, 3))\n    3\n    >>> max_element(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int max_element(List<Integer> l) {\n        return Collections.max(l);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1:\n        List<Integer> list1 = Arrays.asList(1, 2, 3);\n        System.out.println(\"Test case 1: \" + solution.max_element(list1));\n        if (solution.max_element(list1) != 3) {\n            System.out.println(\"Test case 1 failed\");\n        }\n\n        // Test case 2:\n        List<Integer> list2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n        System.out.println(\"Test case 2: \" + solution.max_element(list2));\n        if (solution.max_element(list2) != 123) {\n            System.out.println(\"Test case 2 failed\");\n        }\n\n        // Test case 3: empty list\n        List<Integer> list3 = new ArrayList<>();\n        try {\n            System.out.println(\"Test case 3: \" + solution.max_element(list3));\n            System.out.println(\"Test case 3 failed\");\n        } catch (NoSuchElementException e) {\n            System.out.println(\"Test case 3 passed\");\n        }\n\n        // Test case 4: list with single element\n        List<Integer> list4 = Arrays.asList(10);\n        System.out.println(\"Test case 4: \" + solution.max_element(list4));\n        if (solution.max_element(list4) != 10) {\n            System.out.println(\"Test case 4 failed\");\n        }\n    }\n}\n"}
{"task_id": "Java/89", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        StringBuilder result = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                char base = Character.isUpperCase(c) ? 'A' : 'a';\n                result.append((char) ((c - base + 4) % 26 + base));\n            } else {\n                result.append(c);\n            }\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.encrypt(\"hi\")); // \"lm\"\n        System.out.println(solution.encrypt(\"asdfghjkl\")); // \"ewhjklnop\"\n        System.out.println(solution.encrypt(\"gf\")); // \"kj\"\n        System.out.println(solution.encrypt(\"et\")); // \"ix\"\n        System.out.println(solution.encrypt(\"Hello, World!\")); // \"Lipps, Asvph!\"\n    }\n}\n"}
{"task_id": "Java/24", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n     */\n    public int largest_divisor(int n) {\n        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return -1; // return -1 if no divisor is found\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(\"Test Case 1:\");\n        System.out.println(\"Input: 15\");\n        System.out.println(\"Expected Output: 5\");\n        System.out.println(\"Actual Output: \" + solution.largest_divisor(15));\n        System.out.println();\n\n        System.out.println(\"Test Case 2:\");\n        System.out.println(\"Input: 20\");\n        System.out.println(\"Expected Output: 10\");\n        System.out.println(\"Actual Output: \" + solution.largest_divisor(20));\n        System.out.println();\n\n        System.out.println(\"Test Case 3:\");\n        System.out.println(\"Input: 7\");\n        System.out.println(\"Expected Output: 1\");\n        System.out.println(\"Actual Output: \" + solution.largest_divisor(7));\n        System.out.println();\n\n        System.out.println(\"Test Case 4:\");\n        System.out.println(\"Input: 1\");\n        System.out.println(\"Expected Output: -1\");\n        System.out.println(\"Actual Output: \" + solution.largest_divisor(1));\n        System.out.println();\n    }\n}\n"}
{"task_id": "Java/22", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filter_integers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Object> values1 = Arrays.asList('a', 3.14, 5);\n        List<Integer> expected1 = Arrays.asList(5);\n        List<Integer> actual1 = solution.filter_integers(values1);\n        System.out.println(\"Test case 1: \" + (actual1.equals(expected1) ? \"Pass\" : \"Fail\"));\n\n        // Test case 2\n        List<Object> values2 = Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of());\n        List<Integer> expected2 = Arrays.asList(1, 2, 3);\n        List<Integer> actual2 = solution.filter_integers(values2);\n        System.out.println(\"Test case 2: \" + (actual2.equals(expected2) ? \"Pass\" : \"Fail\"));\n\n        // Test case 3: Empty list\n        List<Object> values3 = new ArrayList<>();\n        List<Integer> expected3 = new ArrayList<>();\n        List<Integer> actual3 = solution.filter_integers(values3);\n        System.out.println(\"Test case 3: \" + (actual3.equals(expected3) ? \"Pass\" : \"Fail\"));\n\n        // Test case 4: List with only integers\n        List<Object> values4 = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> expected4 = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> actual4 = solution.filter_integers(values4);\n        System.out.println(\"Test case 4: \" + (actual4.equals(expected4) ? \"Pass\" : \"Fail\"));\n    }\n}\n"}
{"task_id": "Java/161", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        StringBuilder result = new StringBuilder();\n        boolean hasLetter = false;\n\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                hasLetter = true;\n                result.append(Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c));\n            } else {\n                result.append(c);\n            }\n        }\n\n        if (!hasLetter) {\n            return result.reverse().toString();\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.solve(\"1234\")); // \"4321\"\n        System.out.println(solution.solve(\"ab\")); // \"AB\"\n        System.out.println(solution.solve(\"#a@C\")); // \"#A@c\"\n        System.out.println(solution.solve(\"Hello World!\")); // \"hELLO wORLD!\"\n        System.out.println(solution.solve(\"123abc\")); // \"123ABC\"\n        System.out.println(solution.solve(\"abcdefg\")); // \"ABCDEFG\"\n    }\n}\n"}
{"task_id": "Java/28", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder result = new StringBuilder();\n        for (String str : strings) {\n            result.append(str);\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: Empty list\n        List<String> emptyList = List.of();\n        System.out.println(\"Test case 1: concatenate(\" + emptyList + \") = \" + solution.concatenate(emptyList));\n\n        // Test case 2: List with multiple strings\n        List<String> multipleStrings = Arrays.asList(\"a\", \"b\", \"c\");\n        System.out.println(\"Test case 2: concatenate(\" + multipleStrings + \") = \" + solution.concatenate(multipleStrings));\n\n        // Test case 3: List with single string\n        List<String> singleString = Arrays.asList(\"hello\");\n        System.out.println(\"Test case 3: concatenate(\" + singleString + \") = \" + solution.concatenate(singleString));\n\n        // Test case 4: List with null strings\n        List<String> nullStrings = Arrays.asList(\"a\", null, \"c\");\n        System.out.println(\"Test case 4: concatenate(\" + nullStrings + \") = \" + solution.concatenate(nullStrings));\n    }\n}\n"}
{"task_id": "Java/72", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Returns True if the object q will fly, and False otherwise.\n     * The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n     */\n    public boolean will_it_fly(List<Integer> q, int w) {\n        // Check if the list is palindromic\n        boolean isPalindromic = isPalindrome(q);\n        \n        // Calculate the sum of the list elements\n        int sum = sumOfElements(q);\n        \n        // Return true if the list is palindromic and the sum is less than or equal to the maximum weight\n        return isPalindromic && sum <= w;\n    }\n\n    // Helper method to check if a list is palindromic\n    private boolean isPalindrome(List<Integer> list) {\n        int left = 0;\n        int right = list.size() - 1;\n        while (left < right) {\n            if (!list.get(left).equals(list.get(right))) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    // Helper method to calculate the sum of list elements\n    private int sumOfElements(List<Integer> list) {\n        int sum = 0;\n        for (Integer element : list) {\n            sum += element;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1: Unbalanced and sum is less than the maximum weight\n        List<Integer> q1 = Arrays.asList(1, 2);\n        int w1 = 5;\n        System.out.println(\"Test case 1: \" + solution.will_it_fly(q1, w1)); // Expected output: false\n\n        // Test case 2: Balanced but sum is more than the maximum weight\n        List<Integer> q2 = Arrays.asList(3, 2, 3);\n        int w2 = 1;\n        System.out.println(\"Test case 2: \" + solution.will_it_fly(q2, w2)); // Expected output: false\n\n        // Test case 3: Balanced and sum is less than the maximum weight\n        List<Integer> q3 = Arrays.asList(3, 2, 3);\n        int w3 = 9;\n        System.out.println(\"Test case 3: \" + solution.will_it_fly(q3, w3)); // Expected output: true\n\n        // Test case 4: Single element (balanced) and sum is less than the maximum weight\n        List<Integer> q4 = Arrays.asList(3);\n        int w4 = 5;\n        System.out.println(\"Test case 4: \" + solution.will_it_fly(q4, w4)); // Expected output: true\n    }\n}\n"}
{"task_id": "Java/127", "generation": "class Solution {\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n\n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n\n        if (intersectionStart <= intersectionEnd) {\n            int intersectionLength = intersectionEnd - intersectionStart + 1;\n            if (isPrime(intersectionLength)) {\n                return \"YES\";\n            }\n        }\n        return \"NO\";\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/86", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle(\"Hi\") returns \"Hi\"\n    anti_shuffle(\"hello\") returns \"ehllo\"\n    anti_shuffle(\"Hello World!!!\") returns \"!!!HdlloorW\"\n     */\n    public String anti_shuffle(String s) {\n        String[] words = s.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            char[] chars = words[i].toCharArray();\n            Arrays.sort(chars);\n            words[i] = new String(chars);\n        }\n        return String.join(\" \", words);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.anti_shuffle(\"Hi\")); // \"Hi\"\n        System.out.println(solution.anti_shuffle(\"hello\")); // \"ehllo\"\n        System.out.println(solution.anti_shuffle(\"Hello World!!!\")); // \"!!!HdlloorW\"\n        System.out.println(solution.anti_shuffle(\"a b c\")); // \"a b c\"\n        System.out.println(solution.anti_shuffle(\"abc def ghi\")); // \"abc def ghi\"\n        System.out.println(solution.anti_shuffle(\"\")); // \"\"\n        System.out.println(solution.anti_shuffle(\"   \")); // \"   \"\n    }\n}\n"}
{"task_id": "Java/3", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero(Arrays.asList(1, 2, 3))\n    false\n    >>> below_zero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: No withdrawals\n        List<Integer> operations1 = Arrays.asList(1, 2, 3);\n        System.out.println(\"Test case 1: \" + solution.below_zero(operations1)); // Expected output: false\n\n        // Test case 2: Withdrawal that brings balance below zero\n        List<Integer> operations2 = Arrays.asList(1, 2, -4, 5);\n        System.out.println(\"Test case 2: \" + solution.below_zero(operations2)); // Expected output: true\n\n        // Test case 3: Multiple withdrawals that bring balance below zero\n        List<Integer> operations3 = Arrays.asList(1, -2, -3, 5);\n        System.out.println(\"Test case 3: \" + solution.below_zero(operations3)); // Expected output: true\n\n        // Test case 4: No operations\n        List<Integer> operations4 = new ArrayList<>();\n        System.out.println(\"Test case 4: \" + solution.below_zero(operations4)); // Expected output: false\n    }\n}\n"}
{"task_id": "Java/69", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        Map<Integer, Integer> freqMap = new HashMap<>();\n        for (Integer num : lst) {\n            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);\n        }\n        \n        int max = -1;\n        for (Map.Entry<Integer, Integer> entry : freqMap.entrySet()) {\n            if (entry.getValue() >= entry.getKey() && entry.getKey() > max) {\n                max = entry.getKey();\n            }\n        }\n        \n        return max;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1:\n        List<Integer> lst1 = Arrays.asList(4, 1, 2, 2, 3, 1);\n        System.out.println(\"Test case 1: Expected output = 2, Actual output = \" + solution.search(lst1));\n        \n        // Test case 2:\n        List<Integer> lst2 = Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4);\n        System.out.println(\"Test case 2: Expected output = 3, Actual output = \" + solution.search(lst2));\n        \n        // Test case 3:\n        List<Integer> lst3 = Arrays.asList(5, 5, 4, 4, 4);\n        System.out.println(\"Test case 3: Expected output = -1, Actual output = \" + solution.search(lst3));\n        \n        // Test case 4: Empty list\n        List<Integer> lst4 = new ArrayList<>();\n        System.out.println(\"Test case 4: Expected output = -1, Actual output = \" + solution.search(lst4));\n        \n        // Test case 5: List with single element\n        List<Integer> lst5 = Arrays.asList(1);\n        System.out.println(\"Test case 5: Expected output = -1, Actual output = \" + solution.search(lst5));\n    }\n}\n"}
{"task_id": "Java/62", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> xs1 = Arrays.asList(3, 1, 2, 4, 5);\n        List<Integer> xs2 = Arrays.asList(1, 2, 3);\n\n        System.out.println(\"Derivative of \" + xs1 + \": \" + solution.derivative(xs1));\n        System.out.println(\"Derivative of \" + xs2 + \": \" + solution.derivative(xs2));\n    }\n}\n"}
{"task_id": "Java/50", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decode_shift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (Character.isLetter(ch)) {\n                char base = Character.isLowerCase(ch) ? 'a' : 'A';\n                sb.append((char) (base + ((ch - base - 5 + 26) % 26)));\n            } else {\n                sb.append(ch);\n            }\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/135", "generation": "class Solution {\n    public int can_arrange(List<Integer> arr) {\n        for (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}\n"}
{"task_id": "Java/93", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encode(String message) {\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder result = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (vowels.indexOf(c) != -1) {\n                if (Character.isLowerCase(c)) {\n                    result.append((char) ((c - 'a' + 2) % 26 + 'a'));\n                } else {\n                    result.append((char) ((c - 'A' + 2) % 26 + 'A'));\n                }\n            } else {\n                result.append(Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c));\n            }\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/147", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You are given a positive integer n. You have to create an integer array a of length n.\n     * For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n     * Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n     * and a[i] + a[j] + a[k] is a multiple of 3.\n     */\n    public int get_max_triples(int n) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = (i + 1) * (i + 1) - (i + 1) + 1;\n        }\n\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(\"Test Case 1:\");\n        System.out.println(\"Input: n = 5\");\n        System.out.println(\"Expected Output: 1\");\n        System.out.println(\"Actual Output: \" + solution.get_max_triples(5));\n        System.out.println();\n\n        System.out.println(\"Test Case 2:\");\n        System.out.println(\"Input: n = 10\");\n        System.out.println(\"Expected Output: 10\");\n        System.out.println(\"Actual Output: \" + solution.get_max_triples(10));\n        System.out.println();\n\n        System.out.println(\"Test Case 3:\");\n        System.out.println(\"Input: n = 20\");\n        System.out.println(\"Expected Output: 55\");\n        System.out.println(\"Actual Output: \" + solution.get_max_triples(20));\n        System.out.println();\n    }\n}\n"}
{"task_id": "Java/27", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"Hello\")\n    \"hELLO\"\n     */\n    public String flip_case(String string) {\n        StringBuilder result = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                result.append(Character.toLowerCase(c));\n            } else {\n                result.append(Character.toUpperCase(c));\n            }\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.flip_case(\"Hello\")); // \"hELLO\"\n        System.out.println(solution.flip_case(\"WORLD\")); // \"world\"\n        System.out.println(solution.flip_case(\"Java\")); // \"jAVA\"\n        System.out.println(solution.flip_case(\"aBcDeF\")); // \"AbCdEf\"\n        System.out.println(solution.flip_case(\"\")); // \"\"\n    }\n}\n"}
{"task_id": "Java/110", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int oddCountInLst1 = 0;\n        int evenCountInLst2 = 0;\n\n        for (Integer num : lst1) {\n            if (num % 2 != 0) {\n                oddCountInLst1++;\n            }\n        }\n\n        for (Integer num : lst2) {\n            if (num % 2 == 0) {\n                evenCountInLst2++;\n            }\n        }\n\n        return oddCountInLst1 <= evenCountInLst2 ? \"YES\" : \"NO\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1:\n        List<Integer> lst1 = Arrays.asList(1, 2, 3, 4);\n        List<Integer> lst2 = Arrays.asList(1, 2, 3, 4);\n        System.out.println(\"Test case 1: \" + solution.exchange(lst1, lst2)); // Expected output: \"YES\"\n\n        // Test case 2:\n        lst1 = Arrays.asList(1, 2, 3, 4);\n        lst2 = Arrays.asList(1, 5, 3, 4);\n        System.out.println(\"Test case 2: \" + solution.exchange(lst1, lst2)); // Expected output: \"NO\"\n\n        // Test case 3:\n        lst1 = Arrays.asList(1, 3, 5, 7);\n        lst2 = Arrays.asList(2, 4, 6, 8);\n        System.out.println(\"Test case 3: \" + solution.exchange(lst1, lst2)); // Expected output: \"YES\"\n\n        // Test case 4:\n        lst1 = Arrays.asList(2, 4, 6, 8);\n        lst2 = Arrays.asList(1, 3, 5, 7);\n        System.out.println(\"Test case 4: \" + solution.exchange(lst1, lst2)); // Expected output: \"YES\"\n    }\n}\n"}
{"task_id": "Java/141", "generation": "import java.util.*;\n\nclass Solution {\n    public String file_name_check(String file_name) {\n        // Check if the file name contains exactly one dot\n        if (file_name.indexOf('.') != file_name.lastIndexOf('.')) {\n            return \"No\";\n        }\n\n        // Split the file name into two parts: before and after the dot\n        String[] parts = file_name.split(\"\\\\.\");\n        String name = parts[0];\n        String extension = parts[1];\n\n        // Check if the substring before the dot starts with a letter from the latin alphabet\n        if (!Character.isLetter(name.charAt(0))) {\n            return \"No\";\n        }\n\n        // Check if the substring before the dot is not empty\n        if (name.length() == 0) {\n            return \"No\";\n        }\n\n        // Check if the number of digits in the file name is not more than three\n        int digitCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n                if (digitCount > 3) {\n                    return \"No\";\n                }\n            }\n        }\n\n        // Check if the substring after the dot is one of the allowed extensions\n        String[] allowedExtensions = {\"txt\", \"exe\", \"dll\"};\n        boolean isValidExtension = false;\n        for (String ext : allowedExtensions) {\n            if (extension.equals(ext)) {\n                isValidExtension = true;\n                break;\n            }\n        }\n        if (!isValidExtension) {\n            return \"No\";\n        }\n\n        // If all conditions are met, return \"Yes\"\n        return \"Yes\";\n    }\n}\n"}
{"task_id": "Java/104", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> unique_digits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> unique_digits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        for (Integer num : x) {\n            boolean hasEvenDigit = false;\n            String strNum = String.valueOf(num);\n            for (char c : strNum.toCharArray()) {\n                int digit = Character.getNumericValue(c);\n                if (digit % 2 == 0) {\n                    hasEvenDigit = true;\n                    break;\n                }\n            }\n            if (!hasEvenDigit) {\n                result.add(num);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> test1 = Arrays.asList(15, 33, 1422, 1);\n        List<Integer> test2 = Arrays.asList(152, 323, 1422, 10);\n        List<Integer> test3 = Arrays.asList(1, 3, 5, 7, 9);\n        List<Integer> test4 = Arrays.asList(2, 4, 6, 8, 10);\n\n        System.out.println(\"Test 1: \" + solution.unique_digits(test1)); // [1, 15, 33]\n        System.out.println(\"Test 2: \" + solution.unique_digits(test2)); // []\n        System.out.println(\"Test 3: \" + solution.unique_digits(test3)); // [1, 3, 5, 7, 9]\n        System.out.println(\"Test 4: \" + solution.unique_digits(test4)); // []\n    }\n}\n"}
{"task_id": "Java/100", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> result = new ArrayList<>();\n        result.add(n);\n        while (result.size() < n) {\n            if (result.get(result.size() - 1) % 2 == 0) {\n                result.add(result.get(result.size() - 1) + 1);\n            } else {\n                result.add(result.get(result.size() - 1) + 2);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/68", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        int minEven = Integer.MAX_VALUE;\n        int minIndex = -1;\n\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num % 2 == 0 && num < minEven) {\n                minEven = num;\n                minIndex = i;\n            }\n        }\n\n        if (minIndex == -1) {\n            return new ArrayList<>();\n        } else {\n            List<Integer> result = new ArrayList<>();\n            result.add(minEven);\n            result.add(minIndex);\n            return result;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> arr1 = Arrays.asList(4, 2, 3);\n        List<Integer> result1 = solution.pluck(arr1);\n        System.out.println(\"Test case 1: \" + result1);\n\n        // Test case 2\n        List<Integer> arr2 = Arrays.asList(1, 2, 3);\n        List<Integer> result2 = solution.pluck(arr2);\n        System.out.println(\"Test case 2: \" + result2);\n\n        // Test case 3\n        List<Integer> arr3 = new ArrayList<>();\n        List<Integer> result3 = solution.pluck(arr3);\n        System.out.println(\"Test case 3: \" + result3);\n\n        // Test case 4\n        List<Integer> arr4 = Arrays.asList(5, 0, 3, 0, 4, 2);\n        List<Integer> result4 = solution.pluck(arr4);\n        System.out.println(\"Test case 4: \" + result4);\n\n        // Test case 5 (no even numbers)\n        List<Integer> arr5 = Arrays.asList(1, 3, 5, 7, 9);\n        List<Integer> result5 = solution.pluck(arr5);\n        System.out.println(\"Test case 5: \" + result5);\n    }\n}\n"}
{"task_id": "Java/149", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert sorted_list_sum(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert sorted_list_sum(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> sorted_list_sum(List<String> lst) {\n        // Filter out strings with odd lengths\n        List<String> evenLengthStrings = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                evenLengthStrings.add(s);\n            }\n        }\n\n        // Sort the list by length and then alphabetically\n        Collections.sort(evenLengthStrings, (a, b) -> {\n            if (a.length() == b.length()) {\n                return a.compareTo(b);\n            } else {\n                return Integer.compare(a.length(), b.length());\n            }\n        });\n\n        return evenLengthStrings;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<String> lst1 = Arrays.asList(\"aa\", \"a\", \"aaa\");\n        List<String> result1 = solution.sorted_list_sum(lst1);\n        System.out.println(result1); // Expected output: [\"aa\"]\n\n        // Test case 2\n        List<String> lst2 = Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\");\n        List<String> result2 = solution.sorted_list_sum(lst2);\n        System.out.println(result2); // Expected output: [\"ab\", \"cd\"]\n\n        // Test case 3 (empty list)\n        List<String> lst3 = new ArrayList<>();\n        List<String> result3 = solution.sorted_list_sum(lst3);\n        System.out.println(result3); // Expected output: []\n\n        // Test case 4 (all strings have odd lengths)\n        List<String> lst4 = Arrays.asList(\"a\", \"abc\", \"abcd\");\n        List<String> result4 = solution.sorted_list_sum(lst4);\n        System.out.println(result4); // Expected output: []\n\n        // Test case 5 (all strings have even lengths)\n        List<String> lst5 = Arrays.asList(\"aa\", \"bb\", \"cc\");\n        List<String> result5 = solution.sorted_list_sum(lst5);\n        System.out.println(result5); // Expected output: [\"aa\", \"bb\", \"cc\"]\n    }\n}\n"}
{"task_id": "Java/128", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prod_signs(Arrays.asList(0, 1)) == 0\n    >>> prod_signs(Arrays.asList()) == None\n     */\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int sumOfMagnitudes = 0;\n        int productOfSigns = 1;\n\n        for (int num : arr) {\n            sumOfMagnitudes += Math.abs(num);\n            productOfSigns *= Integer.signum(num);\n        }\n\n        return Optional.of(sumOfMagnitudes * productOfSigns);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1:\n        List<Integer> arr1 = Arrays.asList(1, 2, 2, -4);\n        System.out.println(\"Test case 1: \" + solution.prod_signs(arr1).orElse(null)); // Expected output: -9\n\n        // Test case 2:\n        List<Integer> arr2 = Arrays.asList(0, 1);\n        System.out.println(\"Test case 2: \" + solution.prod_signs(arr2).orElse(null)); // Expected output: 0\n\n        // Test case 3:\n        List<Integer> arr3 = Arrays.asList();\n        System.out.println(\"Test case 3: \" + solution.prod_signs(arr3).orElse(null)); // Expected output: null\n    }\n}\n"}
{"task_id": "Java/2", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n     */\n    public double truncate_number(double number) {\n        return number - Math.floor(number);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1:\n        double number1 = 3.5;\n        double expected1 = 0.5;\n        double actual1 = solution.truncate_number(number1);\n        System.out.println(\"Test case 1: \" + (actual1 == expected1 ? \"Pass\" : \"Fail\"));\n\n        // Test case 2:\n        double number2 = 10.2;\n        double expected2 = 0.2;\n        double actual2 = solution.truncate_number(number2);\n        System.out.println(\"Test case 2: \" + (actual2 == expected2 ? \"Pass\" : \"Fail\"));\n\n        // Test case 3:\n        double number3 = 5.0;\n        double expected3 = 0.0;\n        double actual3 = solution.truncate_number(number3);\n        System.out.println(\"Test case 3: \" + (actual3 == expected3 ? \"Pass\" : \"Fail\"));\n\n        // Test case 4:\n        double number4 = 7.99;\n        double expected4 = 0.99;\n        double actual4 = solution.truncate_number(number4);\n        System.out.println(\"Test case 4: \" + (actual4 == expected4 ? \"Pass\" : \"Fail\"));\n    }\n}\n"}
{"task_id": "Java/103", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object rounded_avg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        double avg = (n + m) / 2.0;\n        int roundedAvg = (int) Math.round(avg);\n        String binary = Integer.toBinaryString(roundedAvg);\n        return binary;\n    }\n}\n"}
{"task_id": "Java/55", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        return fib[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(\"Test Case 1:\");\n        System.out.println(\"Expected Output: 55\");\n        System.out.println(\"Actual Output: \" + solution.fib(10));\n        System.out.println();\n\n        System.out.println(\"Test Case 2:\");\n        System.out.println(\"Expected Output: 1\");\n        System.out.println(\"Actual Output: \" + solution.fib(1));\n        System.out.println();\n\n        System.out.println(\"Test Case 3:\");\n        System.out.println(\"Expected Output: 21\");\n        System.out.println(\"Actual Output: \" + solution.fib(8));\n        System.out.println();\n\n        System.out.println(\"Test Case 4:\");\n        System.out.println(\"Expected Output: 0\");\n        System.out.println(\"Actual Output: \" + solution.fib(0));\n        System.out.println();\n\n        System.out.println(\"Test Case 5:\");\n        System.out.println(\"Expected Output: 1\");\n        System.out.println(\"Actual Output: \" + solution.fib(1));\n    }\n}\n"}
{"task_id": "Java/70", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strange_sort_list(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strange_sort_list(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        List<Integer> temp = new ArrayList<>(lst);\n        \n        while (!temp.isEmpty()) {\n            int min = Collections.min(temp);\n            result.add(min);\n            temp.remove((Integer) min);\n            \n            if (!temp.isEmpty()) {\n                int max = Collections.max(temp);\n                result.add(max);\n                temp.remove((Integer) max);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1\n        List<Integer> input1 = Arrays.asList(1, 2, 3, 4);\n        List<Integer> expected1 = Arrays.asList(1, 4, 2, 3);\n        System.out.println(\"Test case 1: \" + (solution.strange_sort_list(input1).equals(expected1) ? \"Pass\" : \"Fail\"));\n        \n        // Test case 2\n        List<Integer> input2 = Arrays.asList(5, 5, 5, 5);\n        List<Integer> expected2 = Arrays.asList(5, 5, 5, 5);\n        System.out.println(\"Test case 2: \" + (solution.strange_sort_list(input2).equals(expected2) ? \"Pass\" : \"Fail\"));\n        \n        // Test case 3\n        List<Integer> input3 = Arrays.asList();\n        List<Integer> expected3 = Arrays.asList();\n        System.out.println(\"Test case 3: \" + (solution.strange_sort_list(input3).equals(expected3) ? \"Pass\" : \"Fail\"));\n        \n        // Test case 4\n        List<Integer> input4 = Arrays.asList(10, 20, 30, 40, 50);\n        List<Integer> expected4 = Arrays.asList(10, 50, 20, 40, 30);\n        System.out.println(\"Test case 4: \" + (solution.strange_sort_list(input4).equals(expected4) ? \"Pass\" : \"Fail\"));\n    }\n}\n"}
{"task_id": "Java/34", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> set = new LinkedHashSet<>(l);\n        List<Integer> result = new ArrayList<>(set);\n        Collections.sort(result);\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: Duplicate elements\n        List<Integer> list1 = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        List<Integer> expected1 = Arrays.asList(0, 2, 3, 5, 9, 123);\n        System.out.println(\"Test case 1: \" + solution.unique(list1).equals(expected1));\n\n        // Test case 2: No duplicate elements\n        List<Integer> list2 = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> expected2 = Arrays.asList(1, 2, 3, 4, 5);\n        System.out.println(\"Test case 2: \" + solution.unique(list2).equals(expected2));\n\n        // Test case 3: Empty list\n        List<Integer> list3 = new ArrayList<>();\n        List<Integer> expected3 = new ArrayList<>();\n        System.out.println(\"Test case 3: \" + solution.unique(list3).equals(expected3));\n\n        // Test case 4: Single element list\n        List<Integer> list4 = Arrays.asList(5);\n        List<Integer> expected4 = Arrays.asList(5);\n        System.out.println(\"Test case 4: \" + solution.unique(list4).equals(expected4));\n    }\n}\n"}
{"task_id": "Java/15", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String string_sequence(int n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            if (i < n) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(\"Test Case 1:\");\n        System.out.println(\"Expected: 0\");\n        System.out.println(\"Actual: \" + solution.string_sequence(0));\n        System.out.println();\n\n        System.out.println(\"Test Case 2:\");\n        System.out.println(\"Expected: 0 1 2 3 4 5\");\n        System.out.println(\"Actual: \" + solution.string_sequence(5));\n        System.out.println();\n\n        System.out.println(\"Test Case 3:\");\n        System.out.println(\"Expected: 0 1 2 3 4 5 6 7 8 9\");\n        System.out.println(\"Actual: \" + solution.string_sequence(9));\n        System.out.println();\n\n        System.out.println(\"Test Case 4:\");\n        System.out.println(\"Expected: 0\");\n        System.out.println(\"Actual: \" + solution.string_sequence(0));\n        System.out.println();\n    }\n}\n"}
{"task_id": "Java/130", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n        if (n == 0) {\n            List<Integer> result = new ArrayList<>();\n            result.add(1);\n            return result;\n        } else if (n == 1) {\n            List<Integer> result = new ArrayList<>();\n            result.add(1);\n            result.add(3);\n            return result;\n        }\n\n        List<Integer> tribonacciSequence = new ArrayList<>();\n        tribonacciSequence.add(1);\n        tribonacciSequence.add(3);\n        tribonacciSequence.add(2);\n\n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                tribonacciSequence.add(1 + i / 2);\n            } else {\n                int nextNumber = tribonacciSequence.get(i - 1) + tribonacciSequence.get(i - 2) + tribonacciSequence.get(i - 3);\n                tribonacciSequence.add(nextNumber);\n            }\n        }\n\n        return tribonacciSequence.subList(0, n + 1);\n    }\n}\n"}
{"task_id": "Java/91", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int is_bored(String S) {\n        String[] sentences = S.replace('?', '.').replace('!', '.').split(\"\\\\.\");\n        int boredoms = 0;\n        for (String sentence : sentences) {\n            if (!sentence.trim().isEmpty() && sentence.trim().startsWith(\"I\")) {\n                boredoms++;\n            }\n        }\n        return boredoms;\n    }\n}\n"}
{"task_id": "Java/11", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n     */\n    public String string_xor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            int x = Character.getNumericValue(a.charAt(i));\n            int y = Character.getNumericValue(b.charAt(i));\n            result.append(x ^ y);\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/39", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n     */\n    public int prime_fib(int n) {\n        int count = 0;\n        int a = 0;\n        int b = 1;\n        while (true) {\n            int temp = a;\n            a = b;\n            b = temp + b;\n            if (isPrime(a)) {\n                count++;\n                if (count == n) {\n                    return a;\n                }\n            }\n        }\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(\"Test Case 1:\");\n        System.out.println(\"Expected: 2\");\n        System.out.println(\"Actual: \" + solution.prime_fib(1));\n        System.out.println();\n\n        System.out.println(\"Test Case 2:\");\n        System.out.println(\"Expected: 3\");\n        System.out.println(\"Actual: \" + solution.prime_fib(2));\n        System.out.println();\n\n        System.out.println(\"Test Case 3:\");\n        System.out.println(\"Expected: 5\");\n        System.out.println(\"Actual: \" + solution.prime_fib(3));\n        System.out.println();\n\n        System.out.println(\"Test Case 4:\");\n        System.out.println(\"Expected: 13\");\n        System.out.println(\"Actual: \" + solution.prime_fib(4));\n        System.out.println();\n\n        System.out.println(\"Test Case 5:\");\n        System.out.println(\"Expected: 89\");\n        System.out.println(\"Actual: \" + solution.prime_fib(5));\n    }\n}\n"}
{"task_id": "Java/117", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> select_words(String s, int n) {\n        List<String> result = new ArrayList<>();\n        String[] words = s.split(\"\\\\s+\");\n        for (String word : words) {\n            int consonants = 0;\n            for (char c : word.toLowerCase().toCharArray()) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                    consonants++;\n                }\n            }\n            if (consonants == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.select_words(\"Mary had a little lamb\", 4)); // [\"little\"]\n        System.out.println(solution.select_words(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\n        System.out.println(solution.select_words(\"simple white space\", 2)); // []\n        System.out.println(solution.select_words(\"Hello world\", 4)); // [\"world\"]\n        System.out.println(solution.select_words(\"Uncle sam\", 3)); // [\"Uncle\"]\n        System.out.println(solution.select_words(\"\", 3)); // []\n        System.out.println(solution.select_words(\"a e i o u\", 0)); // [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    }\n}\n"}
{"task_id": "Java/0", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> has_close_elements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> has_close_elements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (numbers.get(i + 1) - numbers.get(i) < threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1:\n        List<Double> numbers1 = Arrays.asList(1.0, 2.0, 3.0);\n        double threshold1 = 0.5;\n        System.out.println(\"Test case 1: \" + solution.has_close_elements(numbers1, threshold1)); // Expected output: false\n\n        // Test case 2:\n        List<Double> numbers2 = Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0);\n        double threshold2 = 0.3;\n        System.out.println(\"Test case 2: \" + solution.has_close_elements(numbers2, threshold2)); // Expected output: true\n\n        // Test case 3: empty list\n        List<Double> numbers3 = new ArrayList<>();\n        double threshold3 = 0.5;\n        System.out.println(\"Test case 3: \" + solution.has_close_elements(numbers3, threshold3)); // Expected output: false\n\n        // Test case 4: list with single element\n        List<Double> numbers4 = Arrays.asList(1.0);\n        double threshold4 = 0.5;\n        System.out.println(\"Test case 4: \" + solution.has_close_elements(numbers4, threshold4)); // Expected output: false\n    }\n}\n"}
{"task_id": "Java/31", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    false\n    >>> is_prime(101)\n    true\n    >>> is_prime(11)\n    true\n    >>> is_prime(13441)\n    true\n    >>> is_prime(61)\n    true\n    >>> is_prime(4)\n    false\n    >>> is_prime(1)\n    false\n     */\n    public boolean is_prime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.is_prime(6));  // false\n        System.out.println(solution.is_prime(101));  // true\n        System.out.println(solution.is_prime(11));  // true\n        System.out.println(solution.is_prime(13441));  // true\n        System.out.println(solution.is_prime(61));  // true\n        System.out.println(solution.is_prime(4));  // false\n        System.out.println(solution.is_prime(1));  // false\n    }\n}\n"}
{"task_id": "Java/106", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int factorial = 1;\n                for (int j = 1; j <= i; j++) {\n                    factorial *= j;\n                }\n                result.add(factorial);\n            } else {\n                int sum = (i * (i + 1)) / 2;\n                result.add(sum);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/5", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> numbers1 = List.of();\n        List<Integer> numbers2 = Arrays.asList(1, 2, 3);\n        List<Integer> numbers3 = Arrays.asList(1, 2, 3, 4, 5);\n\n        System.out.println(\"Test Case 1:\");\n        System.out.println(\"Input: \" + numbers1);\n        System.out.println(\"Expected Output: []\");\n        System.out.println(\"Actual Output: \" + solution.intersperse(numbers1, 4));\n        System.out.println();\n\n        System.out.println(\"Test Case 2:\");\n        System.out.println(\"Input: \" + numbers2);\n        System.out.println(\"Expected Output: [1, 4, 2, 4, 3]\");\n        System.out.println(\"Actual Output: \" + solution.intersperse(numbers2, 4));\n        System.out.println();\n\n        System.out.println(\"Test Case 3:\");\n        System.out.println(\"Input: \" + numbers3);\n        System.out.println(\"Expected Output: [1, 4, 2, 4, 3, 4, 4, 4, 5]\");\n        System.out.println(\"Actual Output: \" + solution.intersperse(numbers3, 4));\n    }\n}\n"}
{"task_id": "Java/114", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given an array of integers nums, find the minimum sum of any non-empty sub-array\n     * of nums.\n     * Example\n     * minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n     * minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n        for (int num : nums) {\n            currentSum = Math.min(num, currentSum + num);\n            minSum = Math.min(minSum, currentSum);\n        }\n        return minSum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1:\n        List<Integer> nums1 = Arrays.asList(2, 3, 4, 1, 2, 4);\n        System.out.println(\"Expected: 1, Actual: \" + solution.minSubArraySum(nums1));\n\n        // Test case 2:\n        List<Integer> nums2 = Arrays.asList(-1, -2, -3);\n        System.out.println(\"Expected: -6, Actual: \" + solution.minSubArraySum(nums2));\n\n        // Test case 3:\n        List<Integer> nums3 = Arrays.asList(1, 2, 3, 4, 5);\n        System.out.println(\"Expected: 1, Actual: \" + solution.minSubArraySum(nums3));\n\n        // Test case 4:\n        List<Integer> nums4 = Arrays.asList(-10, 10, -10, 10);\n        System.out.println(\"Expected: -10, Actual: \" + solution.minSubArraySum(nums4));\n\n        // Test case 5:\n        List<Integer> nums5 = Arrays.asList(0, 0, 0, 0);\n        System.out.println(\"Expected: 0, Actual: \" + solution.minSubArraySum(nums5));\n    }\n}\n"}
{"task_id": "Java/51", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels(\"\")\n    \"\"\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> remove_vowels(\"abcdef\")\n    \"bcdf\"\n    >>> remove_vowels(\"aaaaa\")\n    \"\"\n    >>> remove_vowels(\"aaBAA\")\n    \"B\"\n    >>> remove_vowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String remove_vowels(String text) {\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder result = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (vowels.indexOf(c) == -1) {\n                result.append(c);\n            }\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.remove_vowels(\"\")); // \"\"\n        System.out.println(solution.remove_vowels(\"abcdef\\nghijklm\")); // \"bcdf\\nghjklm\"\n        System.out.println(solution.remove_vowels(\"abcdef\")); // \"bcdf\"\n        System.out.println(solution.remove_vowels(\"aaaaa\")); // \"\"\n        System.out.println(solution.remove_vowels(\"aaBAA\")); // \"B\"\n        System.out.println(solution.remove_vowels(\"zbcd\")); // \"zbcd\"\n    }\n}\n"}
{"task_id": "Java/152", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> game1 = Arrays.asList(1, 2, 3, 4, 5, 1);\n        List<Integer> guess1 = Arrays.asList(1, 2, 3, 4, 2, -2);\n        System.out.println(\"Test Case 1:\");\n        System.out.println(\"Expected: [0, 0, 0, 0, 3, 3]\");\n        System.out.println(\"Actual: \" + solution.compare(game1, guess1));\n\n        List<Integer> game2 = Arrays.asList(0, 5, 0, 0, 0, 4);\n        List<Integer> guess2 = Arrays.asList(4, 1, 1, 0, 0, -2);\n        System.out.println(\"\\nTest Case 2:\");\n        System.out.println(\"Expected: [4, 4, 1, 0, 0, 6]\");\n        System.out.println(\"Actual: \" + solution.compare(game2, guess2));\n\n        List<Integer> game3 = Arrays.asList(1, 1, 1, 1, 1, 1);\n        List<Integer> guess3 = Arrays.asList(1, 1, 1, 1, 1, 1);\n        System.out.println(\"\\nTest Case 3:\");\n        System.out.println(\"Expected: [0, 0, 0, 0, 0, 0]\");\n        System.out.println(\"Actual: \" + solution.compare(game3, guess3));\n\n        List<Integer> game4 = Arrays.asList(-1, -2, -3, -4, -5, -6);\n        List<Integer> guess4 = Arrays.asList(-1, -2, -3, -4, -5, -6);\n        System.out.println(\"\\nTest Case 4:\");\n        System.out.println(\"Expected: [0, 0, 0, 0, 0, 0]\");\n        System.out.println(\"Actual: \" + solution.compare(game4, guess4));\n    }\n}\n"}
{"task_id": "Java/139", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long special_factorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            long factorial = 1;\n            for (int j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            result *= factorial;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1:\n        System.out.println(\"Test case 1:\");\n        System.out.println(\"Input: n = 4\");\n        System.out.println(\"Expected output: 288\");\n        System.out.println(\"Actual output: \" + solution.special_factorial(4));\n        System.out.println();\n\n        // Test case 2:\n        System.out.println(\"Test case 2:\");\n        System.out.println(\"Input: n = 5\");\n        System.out.println(\"Expected output: 34560\");\n        System.out.println(\"Actual output: \" + solution.special_factorial(5));\n        System.out.println();\n\n        // Test case 3:\n        System.out.println(\"Test case 3:\");\n        System.out.println(\"Input: n = 1\");\n        System.out.println(\"Expected output: 1\");\n        System.out.println(\"Actual output: \" + solution.special_factorial(1));\n        System.out.println();\n\n        // Test case 4:\n        System.out.println(\"Test case 4:\");\n        System.out.println(\"Input: n = 0\");\n        System.out.println(\"Expected output: Error (n should be greater than 0)\");\n        try {\n            System.out.println(\"Actual output: \" + solution.special_factorial(0));\n        } catch (Exception e) {\n            System.out.println(\"Actual output: Error (n should be greater than 0)\");\n        }\n        System.out.println();\n    }\n}\n"}
{"task_id": "Java/105", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> by_length(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        String[] names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        List<Integer> temp = new ArrayList<>();\n\n        // Filter numbers between 1 and 9\n        for (int num : arr) {\n            if (num >= 1 && num <= 9) {\n                temp.add(num);\n            }\n        }\n\n        // Sort the list\n        Collections.sort(temp);\n\n        // Reverse the list\n        Collections.reverse(temp);\n\n        // Replace numbers with their corresponding names\n        for (int num : temp) {\n            result.add(names[num - 1]);\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: Normal array\n        List<Integer> arr1 = Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3);\n        System.out.println(\"Test case 1: \" + solution.by_length(arr1));\n\n        // Test case 2: Empty array\n        List<Integer> arr2 = new ArrayList<>();\n        System.out.println(\"Test case 2: \" + solution.by_length(arr2));\n\n        // Test case 3: Array with strange numbers\n        List<Integer> arr3 = Arrays.asList(1, -1, 55);\n        System.out.println(\"Test case 3: \" + solution.by_length(arr3));\n\n        // Test case 4: Array with duplicates\n        List<Integer> arr4 = Arrays.asList(2, 2, 2, 1, 1, 1, 3, 3, 3);\n        System.out.println(\"Test case 4: \" + solution.by_length(arr4));\n    }\n}\n"}
{"task_id": "Java/12", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}\n"}
{"task_id": "Java/7", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring(List.of(), \"a\")\n    []\n    >>> filter_by_substring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                result.add(str);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: Empty list\n        List<String> strings1 = List.of();\n        String substring1 = \"a\";\n        List<String> expected1 = List.of();\n        assert solution.filter_by_substring(strings1, substring1).equals(expected1);\n\n        // Test case 2: List with matching strings\n        List<String> strings2 = Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\");\n        String substring2 = \"a\";\n        List<String> expected2 = Arrays.asList(\"abc\", \"bacd\", \"array\");\n        assert solution.filter_by_substring(strings2, substring2).equals(expected2);\n\n        // Test case 3: List with no matching strings\n        List<String> strings3 = Arrays.asList(\"bcd\", \"cde\", \"efg\");\n        String substring3 = \"a\";\n        List<String> expected3 = List.of();\n        assert solution.filter_by_substring(strings3, substring3).equals(expected3);\n\n        // Test case 4: List with multiple matching strings\n        List<String> strings4 = Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\", \"aardvark\");\n        String substring4 = \"a\";\n        List<String> expected4 = Arrays.asList(\"abc\", \"bacd\", \"array\", \"aardvark\");\n        assert solution.filter_by_substring(strings4, substring4).equals(expected4);\n\n        System.out.println(\"All test cases pass\");\n    }\n}\n"}
{"task_id": "Java/138", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == false\n    is_equal_to_sum_even(6) == false\n    is_equal_to_sum_even(8) == true\n     */\n    public boolean is_equal_to_sum_even(int n) {\n        if (n < 8) return false; // minimum sum of 4 positive even numbers is 8\n        for (int a = 2; a <= n / 4; a += 2) {\n            for (int b = a; b <= (n - a) / 3; b += 2) {\n                for (int c = b; c <= (n - a - b) / 2; c += 2) {\n                    int d = n - a - b - c;\n                    if (d >= 2 && d % 2 == 0) return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.is_equal_to_sum_even(4)); // false\n        System.out.println(solution.is_equal_to_sum_even(6)); // false\n        System.out.println(solution.is_equal_to_sum_even(8)); // true\n        System.out.println(solution.is_equal_to_sum_even(10)); // false\n        System.out.println(solution.is_equal_to_sum_even(12)); // true\n        System.out.println(solution.is_equal_to_sum_even(14)); // true\n    }\n}\n"}
{"task_id": "Java/41", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int car_race_collision(int n) {\n        return n * n;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: n = 1\n        System.out.println(\"Test case 1:\");\n        System.out.println(\"Input: n = 1\");\n        System.out.println(\"Expected output: 1\");\n        System.out.println(\"Actual output: \" + solution.car_race_collision(1));\n        System.out.println();\n\n        // Test case 2: n = 2\n        System.out.println(\"Test case 2:\");\n        System.out.println(\"Input: n = 2\");\n        System.out.println(\"Expected output: 4\");\n        System.out.println(\"Actual output: \" + solution.car_race_collision(2));\n        System.out.println();\n\n        // Test case 3: n = 5\n        System.out.println(\"Test case 3:\");\n        System.out.println(\"Input: n = 5\");\n        System.out.println(\"Expected output: 25\");\n        System.out.println(\"Actual output: \" + solution.car_race_collision(5));\n        System.out.println();\n\n        // Test case 4: n = 10\n        System.out.println(\"Test case 4:\");\n        System.out.println(\"Input: n = 10\");\n        System.out.println(\"Expected output: 100\");\n        System.out.println(\"Actual output: \" + solution.car_race_collision(10));\n        System.out.println();\n    }\n}\n"}
{"task_id": "Java/67", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruit_distribution(String s, int n) {\n        // Split the string into two parts: apples and oranges\n        String[] parts = s.split(\" and \");\n        \n        // Extract the number of apples and oranges\n        int apples = Integer.parseInt(parts[0].split(\" \")[0]);\n        int oranges = Integer.parseInt(parts[1].split(\" \")[0]);\n        \n        // Calculate the number of mangoes\n        int mangoes = n - apples - oranges;\n        \n        return mangoes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.fruit_distribution(\"5 apples and 6 oranges\", 19)); // Expected output: 8\n        System.out.println(solution.fruit_distribution(\"0 apples and 1 oranges\", 3)); // Expected output: 2\n        System.out.println(solution.fruit_distribution(\"2 apples and 3 oranges\", 100)); // Expected output: 95\n        System.out.println(solution.fruit_distribution(\"100 apples and 1 oranges\", 120)); // Expected output: 19\n    }\n}\n"}
{"task_id": "Java/40", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triples_sum_to_zero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triples_sum_to_zero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triples_sum_to_zero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triples_sum_to_zero(Arrays.asList(1))\n    false\n     */\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        if (l.size() < 3) {\n            return false;\n        }\n\n        Collections.sort(l);\n\n        for (int i = 0; i < l.size() - 2; i++) {\n            int left = i + 1;\n            int right = l.size() - 1;\n\n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1, 3, -2, 1))); // true\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(2, 4, -5, 3, 9, 7))); // true\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1))); // false\n    }\n}\n"}
{"task_id": "Java/33", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted in ascending order.\n    >>> sort_third(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sort_third(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sort_third(List<Integer> l) {\n        List<Integer> thirdIndices = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                thirdIndices.add(l.get(i));\n            }\n        }\n        Collections.sort(thirdIndices);\n        int j = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                l.set(i, thirdIndices.get(j));\n                j++;\n            }\n        }\n        return l;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> list1 = Arrays.asList(1, 2, 3);\n        List<Integer> result1 = solution.sort_third(list1);\n        System.out.println(result1); // [1, 2, 3]\n\n        List<Integer> list2 = Arrays.asList(5, 6, 3, 4, 8, 9, 2);\n        List<Integer> result2 = solution.sort_third(list2);\n        System.out.println(result2); // [2, 6, 3, 4, 8, 9, 5]\n\n        List<Integer> list3 = Arrays.asList(10, 20, 30, 40, 50, 60);\n        List<Integer> result3 = solution.sort_third(list3);\n        System.out.println(result3); // [10, 20, 30, 40, 50, 60]\n\n        List<Integer> list4 = Arrays.asList(1);\n        List<Integer> result4 = solution.sort_third(list4);\n        System.out.println(result4); // [1]\n\n        List<Integer> list5 = Arrays.asList();\n        List<Integer> result5 = solution.sort_third(list5);\n        System.out.println(result5); // []\n    }\n}\n"}
{"task_id": "Java/136", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largest_smallest_integers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largest_smallest_integers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst){\n        Optional<Integer> largestNegative = lst.stream()\n                .filter(x -> x < 0)\n                .max(Integer::compare);\n        \n        Optional<Integer> smallestPositive = lst.stream()\n                .filter(x -> x > 0)\n                .min(Integer::compare);\n        \n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1\n        List<Integer> lst1 = Arrays.asList(2, 4, 1, 3, 5, 7);\n        List<Optional<Integer>> result1 = solution.largest_smallest_integers(lst1);\n        System.out.println(\"Test case 1: \" + result1);\n        assert result1.get(0).equals(Optional.empty());\n        assert result1.get(1).equals(Optional.of(1));\n        \n        // Test case 2\n        List<Integer> lst2 = Arrays.asList();\n        List<Optional<Integer>> result2 = solution.largest_smallest_integers(lst2);\n        System.out.println(\"Test case 2: \" + result2);\n        assert result2.get(0).equals(Optional.empty());\n        assert result2.get(1).equals(Optional.empty());\n        \n        // Test case 3\n        List<Integer> lst3 = Arrays.asList(0);\n        List<Optional<Integer>> result3 = solution.largest_smallest_integers(lst3);\n        System.out.println(\"Test case 3: \" + result3);\n        assert result3.get(0).equals(Optional.empty());\n        assert result3.get(1).equals(Optional.empty());\n        \n        // Test case 4\n        List<Integer> lst4 = Arrays.asList(-1, -2, -3);\n        List<Optional<Integer>> result4 = solution.largest_smallest_integers(lst4);\n        System.out.println(\"Test case 4: \" + result4);\n        assert result4.get(0).equals(Optional.of(-1));\n        assert result4.get(1).equals(Optional.empty());\n        \n        // Test case 5\n        List<Integer> lst5 = Arrays.asList(1, 2, 3);\n        List<Optional<Integer>> result5 = solution.largest_smallest_integers(lst5);\n        System.out.println(\"Test case 5: \" + result5);\n        assert result5.get(0).equals(Optional.empty());\n        assert result5.get(1).equals(Optional.of(1));\n    }\n}\n"}
