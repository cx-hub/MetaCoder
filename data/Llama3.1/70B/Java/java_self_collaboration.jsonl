{"task_id": "Java/0", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> has_close_elements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> has_close_elements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        // Input Validation\n        if (numbers == null || numbers.isEmpty()) {\n            return false;\n        }\n        \n        // Threshold Validation\n        if (threshold <= 0) {\n            throw new IllegalArgumentException(\"Threshold must be a positive number\");\n        }\n        \n        // Sort the List\n        Collections.sort(numbers);\n        \n        // Iterate and Calculate Distances\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            // Check for Closest Pair\n            if (numbers.get(i + 1) - numbers.get(i) <= threshold) {\n                return true;\n            }\n        }\n        \n        // Return Result\n        return false;\n    }\n}\n"}
{"task_id": "Java/1", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separate_paren_groups(String paren_string) {\n        // Remove spaces from the input string\n        String input = removeSpaces(paren_string);\n\n        // Initialize an empty list to store the start and end indices of each parenthesis group\n        List<int[]> indices = new ArrayList<>();\n\n        // Identify the start and end indices of each parenthesis group\n        identifyGroups(input, indices);\n\n        // Extract each parenthesis group from the input string\n        List<String> groups = extractGroups(input, indices);\n\n        // Return the list of separated parenthesis groups\n        return groups;\n    }\n\n    // Method to remove spaces from the input string\n    private String removeSpaces(String input) {\n        return input.replaceAll(\"\\\\s\", \"\");\n    }\n\n    // Method to identify the start and end indices of each parenthesis group\n    private void identifyGroups(String input, List<int[]> indices) {\n        int start = -1;\n        int count = 0;\n\n        for (int i = 0; i < input.length(); i++) {\n            char c = input.charAt(i);\n\n            if (c == '(') {\n                if (start == -1) {\n                    start = i;\n                }\n                count++;\n            } else if (c == ')') {\n                count--;\n                if (count == 0) {\n                    indices.add(new int[] {start, i});\n                    start = -1;\n                }\n            }\n        }\n    }\n\n    // Method to extract each parenthesis group from the input string\n    private List<String> extractGroups(String input, List<int[]> indices) {\n        List<String> groups = new ArrayList<>();\n\n        for (int[] index : indices) {\n            groups.add(input.substring(index[0], index[1] + 1));\n        }\n\n        return groups;\n    }\n}\n"}
{"task_id": "Java/2", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n     */\n    public double truncate_number(double number) {\n        if (number <= 0) {\n            throw new IllegalArgumentException(\"Input number must be positive.\");\n        }\n        double integerPart = Math.floor(number);\n        double decimalPart = number - integerPart;\n        return decimalPart;\n    }\n}\n"}
{"task_id": "Java/3", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero(Arrays.asList(1, 2, 3))\n    false\n    >>> below_zero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/4", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double mean_absolute_deviation(List<Double> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list cannot be null or empty\");\n        }\n\n        double sum = numbers.stream().mapToDouble(Double::doubleValue).sum();\n        double mean = sum / numbers.size();\n\n        double sumOfAbsoluteDifferences = numbers.stream()\n                .mapToDouble(x -> Math.abs(x - mean))\n                .sum();\n\n        return sumOfAbsoluteDifferences / numbers.size();\n    }\n}\n"}
{"task_id": "Java/5", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        if (numbers == null || numbers.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/6", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parse_nested_parens(String paren_string) {\n        // Input Validation\n        if (paren_string == null || paren_string.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        // Group Extraction\n        String[] groups = paren_string.split(\"\\\\s+\");\n\n        // Initialize result list\n        List<Integer> result = new ArrayList<>();\n\n        // Iterate through each group\n        for (String group : groups) {\n            // Nesting Level Calculation\n            int maxLevel = 0;\n            int currentLevel = 0;\n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentLevel++;\n                    maxLevel = Math.max(maxLevel, currentLevel);\n                } else if (c == ')') {\n                    currentLevel--;\n                    if (currentLevel < 0) {\n                        // Unbalanced parentheses, throw exception\n                        throw new RuntimeException(\"Unbalanced parentheses in group: \" + group);\n                    }\n                }\n            }\n            if (currentLevel != 0) {\n                // Unbalanced parentheses, throw exception\n                throw new RuntimeException(\"Unbalanced parentheses in group: \" + group);\n            }\n            result.add(maxLevel);\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/7", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring(List.of(), \"a\")\n    []\n    >>> filter_by_substring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        if (strings == null || substring == null) {\n            throw new NullPointerException(\"Input list and substring cannot be null\");\n        }\n        \n        List<String> result = new ArrayList<>();\n        \n        for (String str : strings) {\n            if (str.contains(substring)) {\n                result.add(str);\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/8", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product(List.of())\n    [0, 1]\n    >>> sum_product(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sum_product(List<Integer> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            return Arrays.asList(0, 1);\n        }\n\n        int sum = 0;\n        int product = 1;\n\n        for (Integer num : numbers) {\n            sum += num;\n            product *= num;\n        }\n\n        return Arrays.asList(sum, product);\n    }\n}\n"}
{"task_id": "Java/9", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        List<Integer> result = new ArrayList<>();\n        int maxSoFar = numbers.get(0);\n        result.add(maxSoFar);\n\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > maxSoFar) {\n                maxSoFar = numbers.get(i);\n            }\n            result.add(maxSoFar);\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/10", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    /**\n    Find the longest postfix of a string that is a palindrome\n     */\n    public String findLongestPalindromicPostfix(String string) {\n        for (int i = string.length(); i > 0; i--) {\n            String postfix = string.substring(i - 1);\n            if (isPalindrome(postfix)) {\n                return postfix;\n            }\n        }\n        return \"\";\n    }\n\n    /**\n    Reverse the prefix of a string excluding the palindromic postfix\n     */\n    public String reversePrefix(String string, String postfix) {\n        int prefixLength = string.length() - postfix.length();\n        String prefix = string.substring(0, prefixLength);\n        StringBuilder reversedPrefix = new StringBuilder(prefix).reverse();\n        return reversedPrefix.toString();\n    }\n\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n     */\n    public String make_palindrome(String string) {\n        if (string.isEmpty()) {\n            return \"\";\n        }\n        String postfix = findLongestPalindromicPostfix(string);\n        String reversedPrefix = reversePrefix(string, postfix);\n        return string + reversedPrefix;\n    }\n}\n"}
{"task_id": "Java/11", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n     */\n    public String string_xor(String a, String b) {\n        // Input Validation\n        if (a == null || b == null || a.length() != b.length()) {\n            throw new IllegalArgumentException(\"Input strings must not be null and have the same length.\");\n        }\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) != '0' && a.charAt(i) != '1') {\n                throw new IllegalArgumentException(\"Input strings must consist only of 1s and 0s.\");\n            }\n            if (b.charAt(i) != '0' && b.charAt(i) != '1') {\n                throw new IllegalArgumentException(\"Input strings must consist only of 1s and 0s.\");\n            }\n        }\n\n        // Binary XOR Operation\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            result.append((char) ((a.charAt(i) - '0') ^ (b.charAt(i) - '0') + '0'));\n        }\n\n        // Result Conversion (not needed in this case)\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/12", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int maxLength = 0;\n        for (String str : strings) {\n            maxLength = Math.max(maxLength, str.length());\n        }\n\n        for (String str : strings) {\n            if (str.length() == maxLength) {\n                return Optional.of(str);\n            }\n        }\n\n        // This line should never be reached, but it's required by the compiler\n        return Optional.empty();\n    }\n}\n"}
{"task_id": "Java/13", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Returns the greatest common divisor of two integers a and b.\n     * \n     * @param a the first integer\n     * @param b the second integer\n     * @return the greatest common divisor of a and b\n     */\n    public int greatest_common_divisor(int a, int b) {\n        // Input Validation: Ensure that a and b are integers (not necessary in Java, as they are already declared as integers)\n        \n        // GCD Calculation using the Euclidean algorithm\n        if (b == 0) {\n            return a;\n        } else {\n            return greatest_common_divisor(b, a % b);\n        }\n    }\n}\n"}
{"task_id": "Java/14", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> all_prefixes(String string) {\n        if (string == null || string.isEmpty()) {\n            throw new IllegalArgumentException(\"Input string cannot be null or empty\");\n        }\n\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n\n        Collections.sort(prefixes, Comparator.comparingInt(String::length));\n        return prefixes;\n    }\n}\n"}
{"task_id": "Java/15", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String string_sequence(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Input must be a non-negative integer.\");\n        }\n\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            result.append(i);\n            if (i < n) {\n                result.append(\" \");\n            }\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/16", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n     */\n    public int count_distinct_characters(String string) {\n        if (string == null || string.isEmpty()) {\n            return 0;\n        }\n\n        Set<Character> uniqueChars = new HashSet<>();\n        for (char c : string.toLowerCase().toCharArray()) {\n            uniqueChars.add(c);\n        }\n\n        return uniqueChars.size();\n    }\n}\n"}
{"task_id": "Java/17", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parse_music(String string) {\n        Map<String, Integer> noteDurations = new HashMap<>();\n        noteDurations.put(\"o\", 4);\n        noteDurations.put(\"o|\", 2);\n        noteDurations.put(\".|\", 1);\n\n        String[] notes = string.split(\" \");\n        List<Integer> durations = new ArrayList<>();\n\n        for (String note : notes) {\n            if (noteDurations.containsKey(note)) {\n                durations.add(noteDurations.get(note));\n            }\n        }\n\n        return durations;\n    }\n}\n"}
{"task_id": "Java/18", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n     */\n    public int how_many_times(String string, String substring) {\n        if (string == null || string.isEmpty() || substring == null || substring.isEmpty()) {\n            return 0;\n        }\n        \n        int count = 0;\n        int stringIndex = 0;\n        \n        while (stringIndex < string.length()) {\n            if (string.startsWith(substring, stringIndex)) {\n                count++;\n                stringIndex += 1;\n            } else {\n                stringIndex += 1;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/19", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sort_numbers(String numbers) {\n        String[] numArray = numbers.split(\" \");\n        Map<String, Integer> numMap = new HashMap<>();\n        numMap.put(\"zero\", 0);\n        numMap.put(\"one\", 1);\n        numMap.put(\"two\", 2);\n        numMap.put(\"three\", 3);\n        numMap.put(\"four\", 4);\n        numMap.put(\"five\", 5);\n        numMap.put(\"six\", 6);\n        numMap.put(\"seven\", 7);\n        numMap.put(\"eight\", 8);\n        numMap.put(\"nine\", 9);\n\n        Integer[] numValues = new Integer[numArray.length];\n        for (int i = 0; i < numArray.length; i++) {\n            numValues[i] = numMap.get(numArray[i]);\n        }\n\n        Arrays.sort(numValues);\n\n        String[] sortedNumArray = new String[numValues.length];\n        for (int i = 0; i < numValues.length; i++) {\n            for (Map.Entry<String, Integer> entry : numMap.entrySet()) {\n                if (entry.getValue().equals(numValues[i])) {\n                    sortedNumArray[i] = entry.getKey();\n                    break;\n                }\n            }\n        }\n\n        return String.join(\" \", sortedNumArray);\n    }\n}\n"}
{"task_id": "Java/20", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        if (numbers.size() < 2) {\n            throw new IllegalArgumentException(\"Input list must have at least two elements\");\n        }\n\n        Collections.sort(numbers);\n\n        double minDiff = Double.MAX_VALUE;\n        double closestNum1 = 0.0;\n        double closestNum2 = 0.0;\n\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestNum1 = numbers.get(i);\n                closestNum2 = numbers.get(i + 1);\n            }\n        }\n\n        List<Double> result = new ArrayList<>();\n        result.add(closestNum1);\n        result.add(closestNum2);\n        return result;\n    }\n}\n"}
{"task_id": "Java/21", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        if (numbers.size() < 2) {\n            throw new IllegalArgumentException(\"Input list must have at least two elements\");\n        }\n\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        double range = max - min;\n\n        List<Double> transformedNumbers = new ArrayList<>();\n        for (double number : numbers) {\n            double transformedNumber = (number - min) / range;\n            transformedNumbers.add(transformedNumber);\n        }\n\n        return transformedNumbers;\n    }\n}\n"}
{"task_id": "Java/22", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filter_integers(List<Object> values) {\n        if (values == null) {\n            return new ArrayList<>();\n        }\n\n        List<Integer> filteredList = new ArrayList<>();\n\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                filteredList.add((Integer) value);\n            }\n        }\n\n        return filteredList;\n    }\n}\n"}
{"task_id": "Java/23", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        if (string == null) {\n            throw new NullPointerException(\"Input string is null\");\n        }\n        return string.length();\n    }\n}\n"}
{"task_id": "Java/24", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n     */\n    public int largest_divisor(int n) {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"Input must be a positive integer.\");\n        }\n\n        int maxDivisor = 1;\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n    }\n}\n"}
{"task_id": "Java/25", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n                result.add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) {\n            result.add(n);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/26", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        Map<Integer, Long> frequencyMap = numbers.stream()\n                .collect(Collectors.groupingByConcurrent(i -> i, Collectors.counting()));\n        \n        return numbers.stream()\n                .filter(i -> frequencyMap.get(i) == 1)\n                .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/27", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"Hello\")\n    \"hELLO\"\n     */\n    public String flip_case(String string) {\n        if (string == null || string.isEmpty()) {\n            return string;\n        }\n\n        StringBuilder result = new StringBuilder();\n\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                result.append(Character.toLowerCase(c));\n            } else {\n                result.append(Character.toUpperCase(c));\n            }\n        }\n\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/28", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        if (strings == null || strings.isEmpty()) {\n            return \"\";\n        }\n\n        StringBuilder result = new StringBuilder();\n        for (String str : strings) {\n            result.append(str);\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/29", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix(List.of(), \"a\")\n    []\n    >>> filter_by_prefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        if (strings == null || prefix == null) {\n            return new ArrayList<>();\n        }\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/30", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> get_positive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> get_positive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> get_positive(List<Integer> l) {\n        if (l == null) {\n            throw new NullPointerException(\"Input list cannot be null\");\n        }\n        return l.stream()\n                .filter(num -> num > 0)\n                .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/31", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    false\n    >>> is_prime(101)\n    true\n    >>> is_prime(11)\n    true\n    >>> is_prime(13441)\n    true\n    >>> is_prime(61)\n    true\n    >>> is_prime(4)\n    false\n    >>> is_prime(1)\n    false\n     */\n    public boolean is_prime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/32", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> find_zero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> find_zero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double find_zero(List<Double> xs) {\n        // Input Validation\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"The input list must have an even number of coefficients.\");\n        }\n        int lastIndex = xs.size() - 1;\n        for (int i = lastIndex; i >= 0; i--) {\n            if (xs.get(i) != 0) {\n                if (i != lastIndex) {\n                    throw new IllegalArgumentException(\"The largest non-zero coefficient must be at the end of the list.\");\n                }\n                break;\n            }\n        }\n\n        // Root Finding using Bisection Method\n        double a = -100; // initial lower bound\n        double b = 100; // initial upper bound\n        double tol = 1e-6; // tolerance\n        while (b - a > tol) {\n            double c = (a + b) / 2;\n            if (poly(xs, c) == 0) {\n                return c;\n            } else if (poly(xs, a) * poly(xs, c) < 0) {\n                b = c;\n            } else {\n                a = c;\n            }\n        }\n        return (a + b) / 2;\n    }\n}\n"}
{"task_id": "Java/33", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted in ascending order.\n    >>> sort_third(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sort_third(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sort_third(List<Integer> l) {\n        if (l.isEmpty()) {\n            return l;\n        }\n\n        List<Integer> thirdIndices = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                thirdIndices.add(l.get(i));\n            }\n        }\n\n        Collections.sort(thirdIndices);\n\n        List<Integer> result = new ArrayList<>();\n        int thirdIndex = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(thirdIndices.get(thirdIndex++));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/34", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        // Step 1: Remove Duplicates\n        Set<Integer> uniqueSet = new HashSet<>(l);\n        \n        // Step 2: Convert HashSet to List\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n        \n        // Step 3: Sort the List\n        Collections.sort(uniqueList);\n        \n        // Step 4: Return the Sorted List\n        return uniqueList;\n    }\n}\n"}
{"task_id": "Java/35", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> max_element(Arrays.asList(1, 2, 3))\n    3\n    >>> max_element(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int max_element(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list is null or empty\");\n        }\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}\n"}
{"task_id": "Java/36", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n     */\n    public int fizz_buzz(int n) {\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String str = String.valueOf(i);\n                for (char c : str.toCharArray()) {\n                    if (c == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/37", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sort_even(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sort_even(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        List<Integer> evenIndexedElements = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 2) {\n            evenIndexedElements.add(l.get(i));\n        }\n\n        Collections.sort(evenIndexedElements);\n\n        List<Integer> result = new ArrayList<>();\n        int evenIndex = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(evenIndexedElements.get(evenIndex++));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/38", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decode_cyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // decycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n"}
{"task_id": "Java/39", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n     */\n    public int prime_fib(int n) {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\");\n        }\n\n        int count = 0;\n        int a = 0;\n        int b = 1;\n\n        while (true) {\n            int temp = a;\n            a = b;\n            b = temp + b;\n\n            if (isPrime(a)) {\n                count++;\n                if (count == n) {\n                    return a;\n                }\n            }\n        }\n    }\n\n    private boolean isPrime(int number) {\n        if (number <= 1) {\n            return false;\n        }\n        if (number == 2) {\n            return true;\n        }\n        if (number % 2 == 0) {\n            return false;\n        }\n\n        int sqrt = (int) Math.sqrt(number);\n        for (int i = 3; i <= sqrt; i += 2) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/40", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triples_sum_to_zero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triples_sum_to_zero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triples_sum_to_zero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triples_sum_to_zero(Arrays.asList(1))\n    false\n     */\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        if (l.size() < 3) {\n            return false;\n        }\n\n        Set<Integer> set = new HashSet<>(l);\n        List<Integer> distinctList = new ArrayList<>(set);\n\n        for (int i = 0; i < distinctList.size() - 2; i++) {\n            int left = i + 1;\n            int right = distinctList.size() - 1;\n\n            while (left < right) {\n                int sum = distinctList.get(i) + distinctList.get(left) + distinctList.get(right);\n\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n\n        return false;\n    }\n}\n"}
{"task_id": "Java/41", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Car {\n    int id;\n    double position;\n    double speed;\n    boolean direction; // true for left to right, false for right to left\n\n    public Car(int id, double position, double speed, boolean direction) {\n        this.id = id;\n        this.position = position;\n        this.speed = speed;\n        this.direction = direction;\n    }\n}\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int car_race_collision(int n) {\n        // Initialize cars and simulation parameters\n        Car[] leftToRight = new Car[n];\n        Car[] rightToLeft = new Car[n];\n        double speed = 1.0; // constant speed\n        double dt = 0.01; // time step\n        int maxTimeSteps = 1000; // termination condition\n        double epsilon = 0.001; // small value for collision detection\n\n        // Initialize car positions\n        for (int i = 0; i < n; i++) {\n            leftToRight[i] = new Car(i, -1000 + i * 10, speed, true);\n            rightToLeft[i] = new Car(i, 1000 - i * 10, speed, false);\n        }\n\n        // Simulate car movement and detect collisions\n        int collisions = 0;\n        for (int t = 0; t < maxTimeSteps; t++) {\n            // Update car positions\n            for (Car car : leftToRight) {\n                car.position += speed * dt;\n            }\n            for (Car car : rightToLeft) {\n                car.position -= speed * dt;\n            }\n\n            // Detect collisions\n            for (Car car1 : leftToRight) {\n                for (Car car2 : rightToLeft) {\n                    if (Math.abs(car1.position - car2.position) <= epsilon) {\n                        collisions++;\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    }\n}\n"}
{"task_id": "Java/42", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incr_list(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incr_list(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incr_list(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list is empty or null\");\n        }\n        return l.stream()\n                .map(i -> i + 1)\n                .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/43", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairs_sum_to_zero(Arrays.asList(1))\n    false\n     */\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        if (l.size() < 2) {\n            return false;\n        }\n        \n        Set<Integer> set = new HashSet<>();\n        for (int num : l) {\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/44", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\n    >>> change_base(7, 2)\n    \"111\"\n     */\n    public String change_base(int x, int base) {\n        if (x < 0 || base < 2 || base > 9) {\n            throw new IllegalArgumentException(\"Invalid input\");\n        }\n\n        if (x == 0) {\n            return \"0\";\n        }\n\n        StringBuilder result = new StringBuilder();\n        while (x > 0) {\n            int remainder = x % base;\n            result.insert(0, remainder);\n            x = x / base;\n        }\n\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/45", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n     */\n    public double triangle_area(double a, double h) {\n        if (a < 0 || h < 0) {\n            throw new IllegalArgumentException(\"Side length and height must be non-negative numbers.\");\n        }\n        double area = 0.5 * a * h;\n        return area;\n    }\n}\n"}
{"task_id": "Java/46", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 3) {\n            if (n == 2) return 2;\n            else return 0;\n        }\n        \n        int[] fib4_values = new int[n + 1];\n        fib4_values[0] = 0;\n        fib4_values[1] = 0;\n        fib4_values[2] = 2;\n        fib4_values[3] = 0;\n        \n        for (int i = 4; i <= n; i++) {\n            fib4_values[i] = fib4_values[i-1] + fib4_values[i-2] + fib4_values[i-3] + fib4_values[i-4];\n        }\n        \n        return fib4_values[n];\n    }\n}\n"}
{"task_id": "Java/47", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    8.0\n     */\n    public double median(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list is empty or null\");\n        }\n\n        List<Integer> sortedList = new ArrayList<>(l);\n        Collections.sort(sortedList);\n\n        int n = sortedList.size();\n        if (n % 2 == 0) {\n            return (sortedList.get(n / 2 - 1) + sortedList.get(n / 2)) / 2.0;\n        } else {\n            return (double) sortedList.get(n / 2);\n        }\n    }\n}\n"}
{"task_id": "Java/48", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n     */\n    public boolean is_palindrome(String text) {\n        if (text == null || text.isEmpty()) {\n            return true;\n        }\n\n        String cleanText = text.replaceAll(\"[^a-zA-Z0-9]\", \"\").toLowerCase();\n        int left = 0;\n        int right = cleanText.length() - 1;\n\n        while (left < right) {\n            if (cleanText.charAt(left) != cleanText.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/49", "generation": "import java.math.BigInteger;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        if (p <= 0) {\n            throw new IllegalArgumentException(\"p must be a positive integer\");\n        }\n        BigInteger result = BigInteger.ONE;\n        BigInteger base = BigInteger.valueOf(2);\n        BigInteger modulus = BigInteger.valueOf(p);\n        while (n > 0) {\n            if (n % 2 == 1) {\n                result = result.multiply(base).mod(modulus);\n            }\n            base = base.multiply(base).mod(modulus);\n            n /= 2;\n        }\n        return result.intValue();\n    }\n}\n"}
{"task_id": "Java/50", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a' + 5) % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decode_shift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a' - 5 + 26) % 26)));\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/51", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels(\"\")\n    \"\"\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> remove_vowels(\"abcdef\")\n    \"bcdf\"\n    >>> remove_vowels(\"aaaaa\")\n    \"\"\n    >>> remove_vowels(\"aaBAA\")\n    \"B\"\n    >>> remove_vowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String remove_vowels(String text) {\n        if (text == null || text.isEmpty()) {\n            return \"\";\n        }\n\n        StringBuilder result = new StringBuilder();\n        String vowels = \"aeiouAEIOU\";\n\n        for (char c : text.toCharArray()) {\n            if (vowels.indexOf(c) == -1) {\n                result.append(c);\n            }\n        }\n\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/52", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> below_threshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean below_threshold(List<Integer> l, int t) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list cannot be empty\");\n        }\n        boolean result = true;\n        for (Integer element : l) {\n            if (element >= t) {\n                result = false;\n                break;\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/53", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        // Input Validation\n        if (x < Integer.MIN_VALUE || x > Integer.MAX_VALUE || y < Integer.MIN_VALUE || y > Integer.MAX_VALUE) {\n            throw new ArithmeticException(\"Input values exceed integer limits\");\n        }\n\n        // Addition Logic\n        int result = x + y;\n\n        // Result Handling\n        return result;\n    }\n}\n"}
{"task_id": "Java/54", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same kind of characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean same_chars(String s0, String s1) {\n        if (s0 == null || s1 == null) {\n            return false;\n        }\n        \n        Set<Character> set0 = new HashSet<>();\n        Set<Character> set1 = new HashSet<>();\n        \n        for (char c : s0.toLowerCase().toCharArray()) {\n            set0.add(c);\n        }\n        \n        for (char c : s1.toLowerCase().toCharArray()) {\n            set1.add(c);\n        }\n        \n        return set0.equals(set1);\n    }\n}\n"}
{"task_id": "Java/55", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"Input must be a positive integer.\");\n        }\n\n        if (n == 1 || n == 2) {\n            return 1;\n        }\n\n        int[] memo = new int[n + 1];\n        memo[1] = 1;\n        memo[2] = 1;\n\n        for (int i = 3; i <= n; i++) {\n            memo[i] = memo[i - 1] + memo[i - 2];\n        }\n\n        return memo[n];\n    }\n}\n"}
{"task_id": "Java/56", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n     */\n    public boolean correct_bracketing(String brackets) {\n        if (brackets == null || brackets.isEmpty()) {\n            return true;\n        }\n\n        Stack<Character> stack = new Stack<>();\n\n        for (char c : brackets.toCharArray()) {\n            if (c != '<' && c != '>') {\n                throw new IllegalArgumentException(\"Input string contains invalid characters\");\n            }\n\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n\n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/57", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        boolean isIncreasing = true;\n        boolean isDecreasing = true;\n\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1)) {\n                isIncreasing = false;\n            }\n            if (l.get(i) < l.get(i + 1)) {\n                isDecreasing = false;\n            }\n        }\n\n        // Check edge cases\n        if (l.size() <= 1) {\n            return true;\n        }\n\n        return isIncreasing || isDecreasing;\n    }\n}\n"}
{"task_id": "Java/58", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> commonElements = new HashSet<>();\n        \n        for (Integer element : l2) {\n            if (set1.contains(element)) {\n                commonElements.add(element);\n            }\n        }\n        \n        List<Integer> result = new ArrayList<>(commonElements);\n        Collections.sort(result);\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/59", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n     */\n    public int largest_prime_factor(int n) {\n        int maxPrimeFactor = 1;\n        for (int i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n                maxPrimeFactor = i;\n                n /= i;\n            }\n        }\n        if (n > 1) {\n            maxPrimeFactor = n;\n        }\n        return maxPrimeFactor;\n    }\n}\n"}
{"task_id": "Java/60", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n     */\n    public long sum_to_n(int n) {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"Input must be a positive integer.\");\n        }\n        return (long) n * (n + 1) / 2;\n    }\n}\n"}
{"task_id": "Java/61", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n     */\n    public boolean correct_bracketing(String brackets) {\n        if (brackets == null || brackets.isEmpty()) {\n            return false;\n        }\n\n        for (char c : brackets.toCharArray()) {\n            if (c != '(' && c != ')') {\n                return false;\n            }\n        }\n\n        int openCount = 0;\n        Stack<Character> stack = new Stack<>();\n\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n\n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/62", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        if (xs.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list is empty\");\n        }\n\n        List<Integer> derivativeCoefficients = new ArrayList<>();\n\n        for (int i = 1; i < xs.size(); i++) {\n            derivativeCoefficients.add(xs.get(i) * i);\n        }\n\n        return derivativeCoefficients;\n    }\n}\n"}
{"task_id": "Java/63", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n <= 2) {\n            if (n == 2) return 1;\n            else return 0;\n        }\n        \n        int[] dp = new int[n + 1];\n        dp[0] = 0;\n        dp[1] = 0;\n        dp[2] = 1;\n        \n        for (int i = 3; i <= n; i++) {\n            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];\n        }\n        \n        return dp[n];\n    }\n}\n"}
{"task_id": "Java/64", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n     */\n    public int vowels_count(String s) {\n        if (s == null || s.isEmpty()) {\n            throw new IllegalArgumentException(\"Input string is empty\");\n        }\n\n        int vowelCount = 0;\n        s = s.toLowerCase();\n\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                vowelCount++;\n            }\n        }\n\n        if (s.charAt(s.length() - 1) == 'y') {\n            vowelCount++;\n        }\n\n        return vowelCount;\n    }\n}\n"}
{"task_id": "Java/65", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n     */\n    public String circular_shift(int x, int shift) {\n        String digitString = String.valueOf(x);\n        int numDigits = digitString.length();\n        int effectiveShift = shift % numDigits;\n\n        if (shift > numDigits) {\n            StringBuilder reversedDigits = new StringBuilder(digitString).reverse();\n            return reversedDigits.toString();\n        } else {\n            String shiftedDigits = digitString.substring(numDigits - effectiveShift) + digitString.substring(0, numDigits - effectiveShift);\n            return shiftedDigits;\n        }\n    }\n}\n"}
{"task_id": "Java/66", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/67", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruit_distribution(String s, int n) {\n        // Parse the input string to extract the numbers of apples and oranges\n        String[] parts = s.split(\" and \");\n        int apples = Integer.parseInt(parts[0].split(\" \")[0]);\n        int oranges = Integer.parseInt(parts[1].split(\" \")[0]);\n\n        // Calculate the total number of apples and oranges\n        int totalApplesAndOranges = apples + oranges;\n\n        // Calculate the number of mango fruits\n        int mangoFruits = n - totalApplesAndOranges;\n\n        // Return the result\n        return mangoFruits;\n    }\n}\n"}
{"task_id": "Java/68", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        int smallestEvenValue = Integer.MAX_VALUE;\n        int smallestEvenIndex = -1;\n\n        for (int i = 0; i < arr.size(); i++) {\n            int element = arr.get(i);\n            if (element % 2 == 0 && element < smallestEvenValue) {\n                smallestEvenValue = element;\n                smallestEvenIndex = i;\n            }\n        }\n\n        if (smallestEvenValue == Integer.MAX_VALUE) {\n            return new ArrayList<>();\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(smallestEvenValue);\n        result.add(smallestEvenIndex);\n        return result;\n    }\n}\n"}
{"task_id": "Java/69", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return -1;\n        }\n\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        for (Integer num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n\n        int max = -1;\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            if (entry.getValue() >= entry.getKey() && entry.getKey() > max) {\n                max = entry.getKey();\n            }\n        }\n\n        return max;\n    }\n}\n"}
{"task_id": "Java/70", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strange_sort_list(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strange_sort_list(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        List<Integer> temp = new ArrayList<>(lst);\n        \n        while (!temp.isEmpty()) {\n            result.add(Collections.min(temp));\n            temp.remove(Collections.min(temp));\n            \n            if (!temp.isEmpty()) {\n                result.add(Collections.max(temp));\n                temp.remove(Collections.max(temp));\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/71", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n     */\n    public double triangle_area(double a, double b, double c) {\n        // Input Validation\n        if (a <= 0 || b <= 0 || c <= 0) {\n            return -1;\n        }\n\n        // Validate Triangle\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n\n        // Calculate Semi-Perimeter\n        double s = (a + b + c) / 2;\n\n        // Calculate Area using Heron's formula\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\n        // Round Area to 2 decimal points\n        area = Math.round(area * 100.0) / 100.0;\n\n        return area;\n    }\n}\n"}
{"task_id": "Java/72", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean will_it_fly(List<Integer> q, int w) {\n        // Input Validation\n        if (q.isEmpty() || w < 0) {\n            return false;\n        }\n\n        // Check if the list is palindromic\n        boolean isPalindromic = isPalindrome(q);\n\n        // Calculate the sum of the list elements\n        int sum = calculateSum(q);\n\n        // Compare the sum with the maximum possible weight\n        boolean isWithinWeight = sum <= w;\n\n        // Return the final result\n        return isPalindromic && isWithinWeight;\n    }\n\n    // Helper function to check if the list is palindromic\n    private boolean isPalindrome(List<Integer> list) {\n        int left = 0;\n        int right = list.size() - 1;\n        while (left < right) {\n            if (!list.get(left).equals(list.get(right))) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    // Helper function to calculate the sum of the list elements\n    private int calculateSum(List<Integer> list) {\n        int sum = 0;\n        for (Integer num : list) {\n            sum += num;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/73", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallest_change(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallest_change(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallest_change(List<Integer> arr) {\n        int n = arr.size();\n        if (n <= 1) {\n            return 0;\n        }\n\n        int left = 0;\n        int right = n - 1;\n        int count = 0;\n\n        while (left < right) {\n            if (!arr.get(left).equals(arr.get(right))) {\n                count++;\n            }\n            left++;\n            right--;\n        }\n\n        return count;\n    }\n}\n"}
{"task_id": "Java/74", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match(Arrays.asList(), Arrays.asList()) -> []\n    total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    total_match(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        int totalChars1 = calculateTotalChars(lst1);\n        int totalChars2 = calculateTotalChars(lst2);\n\n        if (totalChars1 <= totalChars2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n\n    private int calculateTotalChars(List<String> lst) {\n        int totalChars = 0;\n        for (String str : lst) {\n            totalChars += str.length();\n        }\n        return totalChars;\n    }\n}\n"}
{"task_id": "Java/75", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that the prime number is less then 100.\n    Example:\n    is_multiply_prime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean is_multiply_prime(int a) {\n        List<Integer> primes = generatePrimes();\n        return findPrimeFactors(a, primes);\n    }\n\n    private List<Integer> generatePrimes() {\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < 100; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private boolean findPrimeFactors(int n, List<Integer> primes) {\n        for (int i = 0; i < primes.size(); i++) {\n            for (int j = i; j < primes.size(); j++) {\n                for (int k = j; k < primes.size(); k++) {\n                    if (n == primes.get(i) * primes.get(j) * primes.get(k)) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/76", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n     */\n    public boolean is_simple_power(int x, int n) {\n        if (x <= 0 || n <= 0) {\n            return false;\n        }\n        if (x == 1) {\n            return true;\n        }\n        if (n == 1) {\n            return false;\n        }\n        double p = Math.log(x) / Math.log(n);\n        return p == Math.floor(p);\n    }\n}\n"}
{"task_id": "Java/77", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        return Math.cbrt(a) % 1 == 0;\n    }\n}\n"}
{"task_id": "Java/78", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hex_key(String num) {\n        Set<Character> primeHexDigits = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        int count = 0;\n        for (char c : num.toCharArray()) {\n            if (primeHexDigits.contains(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/79", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   // returns \"db1111db\"\n    decimal_to_binary(32)   // returns \"db100000db\"\n     */\n    public String decimal_to_binary(int decimal) {\n        if (decimal < 0) {\n            throw new IllegalArgumentException(\"Input decimal number must be non-negative.\");\n        }\n        String binary = Integer.toBinaryString(decimal);\n        return \"db\" + binary + \"db\";\n    }\n}\n"}
{"task_id": "Java/80", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => false\n    is_happy(aa) => false\n    is_happy(abcd) => true\n    is_happy(aabb) => false\n    is_happy(adb) => true\n    is_happy(xyy) => false\n     */\n    public boolean is_happy(String s) {\n        if (s == null || s.length() == 0) {\n            throw new IllegalArgumentException(\"Invalid input\");\n        }\n\n        if (s.length() < 3) {\n            return false;\n        }\n\n        for (int i = 0; i <= s.length() - 3; i++) {\n            String window = s.substring(i, i + 3);\n            if (!areDistinct(window)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private boolean areDistinct(String window) {\n        return window.charAt(0) != window.charAt(1) &&\n               window.charAt(0) != window.charAt(2) &&\n               window.charAt(1) != window.charAt(2);\n    }\n}\n"}
{"task_id": "Java/81", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numerical_letter_grade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double gpa : grades) {\n            if (gpa < 0.0 || gpa > 4.0) {\n                throw new IllegalArgumentException(\"Invalid GPA\");\n            }\n            if (gpa >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}\n"}
{"task_id": "Java/82", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    prime_length(\"Hello\") == true\n    prime_length(\"abcdcba\") == true\n    prime_length(\"kittens\") == true\n    prime_length(\"orange\") == false\n     */\n    public boolean prime_length(String string) {\n        if (string == null || string.isEmpty()) {\n            return false;\n        }\n        int length = string.length();\n        return isPrime(length);\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2, sqrt = (int) Math.sqrt(num); i <= sqrt; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/83", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int starts_one_ends(int n) {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"Input n must be a positive integer.\");\n        }\n\n        long countStartWithOne = 9 * (long) Math.pow(10, n - 2);\n        long countEndWithOne = 9 * (long) Math.pow(10, n - 2);\n        long overlapCount = (n > 1) ? 9 * (long) Math.pow(10, n - 3) : 1;\n\n        return (int) (countStartWithOne + countEndWithOne - overlapCount);\n    }\n}\n"}
{"task_id": "Java/84", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return in binary the total sum of its digits.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        int sum = 0;\n        while (N > 0) {\n            sum += N % 10;\n            N /= 10;\n        }\n        return Integer.toBinaryString(sum);\n    }\n}\n"}
{"task_id": "Java/85", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list is empty\");\n        }\n        \n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 != 0 && lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/86", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle(\"Hi\") returns \"Hi\"\n    anti_shuffle(\"hello\") returns \"ehllo\"\n    anti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String anti_shuffle(String s) {\n        if (s == null || s.isEmpty()) {\n            return \"\";\n        }\n\n        String[] words = s.split(\"\\\\s+\");\n\n        for (int i = 0; i < words.length; i++) {\n            char[] chars = words[i].toCharArray();\n            Arrays.sort(chars);\n            words[i] = new String(chars);\n        }\n\n        StringBuilder orderedString = new StringBuilder();\n\n        for (String word : words) {\n            orderedString.append(word).append(\" \");\n        }\n\n        return orderedString.toString().trim();\n    }\n}\n"}
{"task_id": "Java/87", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        List<List<Integer>> coordinates = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    List<Integer> coordinate = new ArrayList<>();\n                    coordinate.add(i);\n                    coordinate.add(j);\n                    coordinates.add(coordinate);\n                }\n            }\n        }\n        \n        Collections.sort(coordinates, new Comparator<List<Integer>>() {\n            @Override\n            public int compare(List<Integer> c1, List<Integer> c2) {\n                if (c1.get(0).equals(c2.get(0))) {\n                    return c2.get(1).compareTo(c1.get(1));\n                } else {\n                    return c1.get(0).compareTo(c2.get(0));\n                }\n            }\n        });\n        \n        return coordinates;\n    }\n}\n"}
{"task_id": "Java/88", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array(Arrays.asList()) => []\n    * sort_array(Arrays.asList(5)) => [5]\n    * sort_array(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sort_array(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sort_array(List<Integer> array) {\n        if (array == null || array.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        int sum = array.get(0) + array.get(array.size() - 1);\n        List<Integer> sortedArray = new ArrayList<>(array);\n\n        if (sum % 2 == 0) {\n            Collections.sort(sortedArray, Collections.reverseOrder());\n        } else {\n            Collections.sort(sortedArray);\n        }\n\n        return sortedArray;\n    }\n}\n"}
{"task_id": "Java/89", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    private static final String ALPHABET = \"abcdefghijklmnopqrstuvwxyz\";\n\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        if (!s.matches(\"[a-zA-Z]+\")) {\n            throw new IllegalArgumentException(\"Input string should only contain letters\");\n        }\n\n        int shift = 2 * 2;\n        StringBuilder encrypted = new StringBuilder();\n\n        for (char c : s.toCharArray()) {\n            int index = ALPHABET.indexOf(Character.toLowerCase(c));\n            int newIndex = (index + shift) % ALPHABET.length();\n            char encryptedChar = ALPHABET.charAt(newIndex);\n\n            if (Character.isUpperCase(c)) {\n                encryptedChar = Character.toUpperCase(encryptedChar);\n            }\n\n            encrypted.append(encryptedChar);\n        }\n\n        return encrypted.toString();\n    }\n}\n"}
{"task_id": "Java/90", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    next_smallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    next_smallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    next_smallest(Arrays.asList()) == Optional.empty\n    next_smallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        if (lst.isEmpty() || lst.size() == 1) {\n            return Optional.empty();\n        }\n\n        List<Integer> sortedList = new ArrayList<>(lst);\n        Collections.sort(sortedList);\n\n        if (sortedList.size() >= 2) {\n            return Optional.of(sortedList.get(1));\n        } else {\n            return Optional.empty();\n        }\n    }\n}\n"}
{"task_id": "Java/91", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int is_bored(String S) {\n        // Remove leading and trailing whitespace\n        S = S.trim();\n\n        // Split the input string into individual sentences\n        String[] sentences = S.split(\"[.!?]+\");\n\n        // Initialize a counter variable to keep track of the number of boredoms\n        int boredomCount = 0;\n\n        // Iterate through each sentence\n        for (String sentence : sentences) {\n            // Remove leading and trailing whitespace from the sentence\n            sentence = sentence.trim();\n\n            // Check if the sentence starts with the word \"I\" (case-insensitive)\n            if (!sentence.isEmpty() && Character.toLowerCase(sentence.charAt(0)) == 'i') {\n                // If it does, increment the boredom count\n                boredomCount++;\n            }\n        }\n\n        // Return the total count of boredoms\n        return boredomCount;\n    }\n}\n"}
{"task_id": "Java/92", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) -> true\n\n    any_int(3, 2, 2) -> false\n\n    any_int(3, -2, 1) -> true\n\n    any_int(3.6, -2.2, 2) -> false\n     */\n    public boolean any_int(Object x, Object y, Object z) {\n        // Input Validation\n        if (!(x instanceof Integer) || !(y instanceof Integer) || !(z instanceof Integer)) {\n            return false;\n        }\n\n        int a = (int) x;\n        int b = (int) y;\n        int c = (int) z;\n\n        // Sum Equality Check\n        if (a == b + c || b == a + c || c == a + b) {\n            return true;\n        }\n\n        // Return Result\n        return false;\n    }\n}\n"}
{"task_id": "Java/93", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        StringBuilder encodedMessage = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            char encodedChar = swapCase(c);\n            encodedChar = replaceVowel(encodedChar);\n            encodedMessage.append(encodedChar);\n        }\n        return encodedMessage.toString();\n    }\n\n    private char swapCase(char c) {\n        if (Character.isUpperCase(c)) {\n            return Character.toLowerCase(c);\n        } else {\n            return Character.toUpperCase(c);\n        }\n    }\n\n    private char replaceVowel(char c) {\n        switch (c) {\n            case 'a':\n            case 'A':\n                return 'c';\n            case 'e':\n            case 'E':\n                return 'g';\n            case 'i':\n            case 'I':\n                return 'k';\n            case 'o':\n            case 'O':\n                return 'q';\n            case 'u':\n            case 'U':\n                return 'w';\n            default:\n                return c;\n        }\n    }\n}\n"}
{"task_id": "Java/94", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int maxPrime = 0;\n        for (int num : lst) {\n            if (isPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n        if (maxPrime == 0) {\n            return 0;\n        }\n        return sumOfDigits(maxPrime);\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/95", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings and all keys are in lower case or  in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        // Check if the input map is empty\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        // Iterate through each key in the map\n        for (Object key : dict.keySet()) {\n            // Check if the key is a string\n            if (!(key instanceof String)) {\n                return false;\n            }\n\n            // Check if the string key is in lower case or upper case\n            String strKey = (String) key;\n            if (!strKey.equals(strKey.toLowerCase()) && !strKey.equals(strKey.toUpperCase())) {\n                return false;\n            }\n        }\n\n        // If all checks pass, return true\n        return true;\n    }\n}\n"}
{"task_id": "Java/96", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<>();\n        int count = 0;\n        int num = 2;\n        \n        while (count < n) {\n            if (isPrime(num)) {\n                primes.add(num);\n                count++;\n            }\n            num++;\n        }\n        \n        return primes;\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/97", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int unitDigitA = Math.abs(a) % 10;\n        int unitDigitB = Math.abs(b) % 10;\n        return unitDigitA * unitDigitB;\n    }\n}\n"}
{"task_id": "Java/98", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper(\"aBCdEf\") returns 1\n    count_upper(\"abcdefg\") returns 0\n    count_upper(\"dBBE\") returns 0\n     */    \n    public int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (isEvenIndex(i) && isUppercaseVowel(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isEvenIndex(int index) {\n        return index % 2 == 0;\n    }\n\n    private boolean isUppercaseVowel(char c) {\n        String vowels = \"AEIOU\";\n        return vowels.indexOf(c) != -1;\n    }\n}\n"}
{"task_id": "Java/99", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int closest_integer(String value) {\n        // Input validation\n        if (!value.matches(\"\\\\d+(\\\\.\\\\d+)?\")) {\n            throw new IllegalArgumentException(\"Invalid input string\");\n        }\n\n        // Parse input string\n        double num = Double.parseDouble(value);\n\n        // Calculate closest integer\n        int closestInt = (int) Math.round(num);\n        if (num - closestInt == 0.5) { // equidistant case\n            closestInt += (num > 0) ? 1 : -1;\n        }\n\n        // Return result\n        return closestInt;\n    }\n}\n"}
{"task_id": "Java/100", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> stoneCountList = new ArrayList<>();\n        int stoneCount = n;\n        int increment = (n % 2 == 0) ? 2 : 1;\n\n        for (int i = 0; i < n; i++) {\n            stoneCountList.add(stoneCount);\n            stoneCount += increment;\n            if (increment == 1) {\n                increment = 2;\n            } else {\n                increment = 1;\n            }\n        }\n\n        return stoneCountList;\n    }\n}\n"}
{"task_id": "Java/101", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> words_string(String s) {\n        if (s == null || s.isEmpty()) {\n            throw new IllegalArgumentException(\"Input string is null or empty\");\n        }\n\n        String[] words = s.split(\"[,\\\\s]+\");\n        List<String> result = new ArrayList<>();\n\n        for (String word : words) {\n            result.add(word.trim());\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/102", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n     */\n    public int choose_num(int x, int y) {\n        // Validate Input\n        if (x <= 0 || y <= 0) {\n            throw new IllegalArgumentException(\"Both x and y must be positive integers.\");\n        }\n\n        // Determine Range\n        if (x > y) {\n            int temp = x;\n            x = y;\n            y = temp;\n        }\n\n        // Find Largest Even Number\n        if (y % 2 == 0) {\n            return y;\n        } else {\n            for (int i = y - 1; i >= x; i--) {\n                if (i % 2 == 0) {\n                    return i;\n                }\n            }\n        }\n\n        // Handle Edge Cases\n        return -1;\n    }\n}\n"}
{"task_id": "Java/103", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"1111\"\n    rounded_avg(20, 33) => \"11011\"\n     */\n    public Object rounded_avg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        \n        long sum = (long) (n + m) * (m - n + 1) / 2;\n        long average = Math.round((double) sum / (m - n + 1));\n        return Integer.toBinaryString((int) average);\n    }\n}\n"}
{"task_id": "Java/104", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> unique_digits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> unique_digits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        for (Integer num : x) {\n            if (num > 0 && !hasEvenDigit(num)) {\n                result.add(num);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n\n    private boolean hasEvenDigit(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return true;\n            }\n            num /= 10;\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/105", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> by_length(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        String[] digitNames = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        List<Integer> filteredList = new ArrayList<>();\n\n        for (Integer num : arr) {\n            if (num >= 1 && num <= 9) {\n                filteredList.add(num);\n            }\n        }\n\n        Collections.sort(filteredList);\n        Collections.reverse(filteredList);\n\n        List<String> result = new ArrayList<>();\n        for (Integer num : filteredList) {\n            result.add(digitNames[num - 1]);\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/106", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(calculateFactorial(i));\n            } else {\n                result.add(calculateSum(i));\n            }\n        }\n        return result;\n    }\n\n    private int calculateFactorial(int i) {\n        int factorial = 1;\n        for (int j = 1; j <= i; j++) {\n            factorial *= j;\n        }\n        return factorial;\n    }\n\n    private int calculateSum(int i) {\n        return i * (i + 1) / 2;\n    }\n}\n"}
{"task_id": "Java/107", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> even_odd_palindrome(int n) {\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n\n    private boolean isPalindrome(int num) {\n        int reversed = 0;\n        int original = num;\n\n        while (num > 0) {\n            int digit = num % 10;\n            reversed = reversed * 10 + digit;\n            num /= 10;\n        }\n\n        return original == reversed;\n    }\n}\n"}
{"task_id": "Java/108", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums(Arrays.asList()) == 0\n    >>> count_nums(Arrays.asList(-1, 11, -11)) == 1\n    >>> count_nums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int count_nums(List<Integer> arr) {\n        int count = 0;\n        for (Integer num : arr) {\n            int sum = 0;\n            int temp = Math.abs(num);\n            while (temp > 0) {\n                sum += temp % 10;\n                temp /= 10;\n            }\n            if (num < 0) {\n                sum = -sum;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/109", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    move_one_ball(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean move_one_ball(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        int n = arr.size();\n        int[] nums = new int[n];\n        for (int i = 0; i < n; i++) {\n            nums[i] = arr.get(i);\n        }\n\n        boolean isSorted = true;\n        for (int i = 1; i < n; i++) {\n            if (nums[i] < nums[i - 1]) {\n                isSorted = false;\n                break;\n            }\n        }\n\n        if (isSorted) {\n            return true;\n        }\n\n        int maxLen = 1;\n        int maxEnd = 0;\n        int currLen = 1;\n        for (int i = 1; i < n; i++) {\n            if (nums[i] >= nums[i - 1]) {\n                currLen++;\n            } else {\n                if (currLen > maxLen) {\n                    maxLen = currLen;\n                    maxEnd = i - 1;\n                }\n                currLen = 1;\n            }\n        }\n\n        if (currLen > maxLen) {\n            maxLen = currLen;\n            maxEnd = n - 1;\n        }\n\n        for (int i = 0; i < n - maxLen; i++) {\n            if (nums[(maxEnd + 1) % n] < nums[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/110", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int oddCountInLst1 = 0;\n        int evenCountInLst2 = 0;\n\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCountInLst1++;\n            }\n        }\n\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCountInLst2++;\n            }\n        }\n\n        return evenCountInLst2 >= oddCountInLst1 ? \"YES\" : \"NO\";\n    }\n}\n"}
{"task_id": "Java/111", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String,Integer> histogram(String test) {\n        Map<String, Integer> letterCount = new HashMap<>();\n        Map<String, Integer> maxCountMap = new HashMap<>();\n        int maxCount = 0;\n\n        if (test.isEmpty()) {\n            return maxCountMap;\n        }\n\n        String[] letters = test.split(\" \");\n\n        for (String letter : letters) {\n            letterCount.put(letter, letterCount.getOrDefault(letter, 0) + 1);\n        }\n\n        maxCount = Collections.max(letterCount.values());\n\n        for (Map.Entry<String, Integer> entry : letterCount.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                maxCountMap.put(entry.getKey(), entry.getValue());\n            }\n        }\n\n        return maxCountMap;\n    }\n}\n"}
{"task_id": "Java/112", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverse_delete(String s, String c) {\n        // Character Deletion\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                sb.append(ch);\n            }\n        }\n        String resultString = sb.toString();\n\n        // Palindrome Check\n        boolean isPalindrome = true;\n        int left = 0;\n        int right = resultString.length() - 1;\n        while (left < right) {\n            if (resultString.charAt(left) != resultString.charAt(right)) {\n                isPalindrome = false;\n                break;\n            }\n            left++;\n            right--;\n        }\n\n        // Result Construction\n        List<Object> result = new ArrayList<>();\n        result.add(resultString);\n        result.add(isPalindrome);\n        return result;\n    }\n}\n"}
{"task_id": "Java/113", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> odd_count(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String str : lst) {\n            int oddCount = countOddDigits(str);\n            String modifiedStr = replaceIWithOddCount(\"the number of odd elements in the string \" + str + \" of the input.\", oddCount);\n            result.add(modifiedStr);\n        }\n        return result;\n    }\n\n    private int countOddDigits(String str) {\n        int count = 0;\n        for (char c : str.toCharArray()) {\n            if ((c - '0') % 2 != 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private String replaceIWithOddCount(String str, int oddCount) {\n        return str.replace(\"i\", String.valueOf(oddCount)).replace(\"in\", \"n\");\n    }\n}\n"}
{"task_id": "Java/114", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        if (nums.isEmpty()) {\n            throw new RuntimeException(\"Input list is empty\");\n        }\n        \n        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n        \n        for (int num : nums) {\n            currentSum += num;\n            minSum = Math.min(minSum, currentSum);\n            if (currentSum < 0) {\n                currentSum = 0;\n            }\n        }\n        \n        return minSum;\n    }\n}\n"}
{"task_id": "Java/115", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity. Can't use buckets from other wells to extract water from one well.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        if (grid == null || capacity <= 0) {\n            throw new IllegalArgumentException(\"Invalid input\");\n        }\n\n        int totalBucketLowers = 0;\n        for (List<Integer> row : grid) {\n            int waterAmount = 0;\n            for (int cell : row) {\n                if (cell == 1) {\n                    waterAmount++;\n                }\n            }\n            totalBucketLowers += (waterAmount + capacity - 1) / capacity;\n        }\n\n        return totalBucketLowers;\n    }\n}\n"}
{"task_id": "Java/116", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sort_array(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 4, 3, 5))\n    >>> sort_array(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-4, -2, -6, -5, -3))\n    >>> sort_array(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 4, 3))\n     */\n    public List<Integer> sort_array(List<Integer> arr) {\n        Collections.sort(arr, (a, b) -> {\n            int countA = Integer.bitCount(a);\n            int countB = Integer.bitCount(b);\n            if (countA == countB) {\n                return a.compareTo(b);\n            } else {\n                return Integer.compare(countA, countB);\n            }\n        });\n        return arr;\n    }\n}\n"}
{"task_id": "Java/117", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> select_words(String s, int n) {\n        // Tokenize the input string\n        String[] words = s.split(\"\\\\s+\");\n\n        // Initialize an empty list to store the result\n        List<String> result = new ArrayList<>();\n\n        // Iterate through each word in the array\n        for (String word : words) {\n            // Count the number of consonants in the word\n            int consonantCount = countConsonants(word);\n\n            // If the word has exactly n consonants, add it to the result list\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n\n        // Return the list of selected words\n        return result;\n    }\n\n    // Helper method to count the number of consonants in a word\n    private int countConsonants(String word) {\n        int count = 0;\n        for (char c : word.toLowerCase().toCharArray()) {\n            if (isConsonant(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    // Helper method to check if a character is a consonant\n    private boolean isConsonant(char c) {\n        return c >= 'a' && c <= 'z' && !isVowel(c);\n    }\n\n    // Helper method to check if a character is a vowel\n    private boolean isVowel(char c) {\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n}\n"}
{"task_id": "Java/118", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n     */\n    public String get_closest_vowel(String word) {\n        if (word == null || word.isEmpty()) {\n            return \"\";\n        }\n\n        String vowels = \"AEIOUaeiou\";\n        String closestVowel = \"\";\n\n        for (int i = word.length() - 1; i > 0; i--) {\n            char c = word.charAt(i);\n            if (vowels.indexOf(c) != -1) {\n                if (word.charAt(i - 1) != c && vowels.indexOf(word.charAt(i - 1)) == -1 \n                    && (i + 1 < word.length() ? vowels.indexOf(word.charAt(i + 1)) == -1 : true)) {\n                    closestVowel = String.valueOf(c);\n                    break;\n                }\n            }\n        }\n\n        return closestVowel;\n    }\n}\n"}
{"task_id": "Java/119", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    match_parens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    match_parens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String match_parens(List<String> lst) {\n        int openCount1 = 0, closeCount1 = 0, openCount2 = 0, closeCount2 = 0;\n        \n        // Count Open and Close Parentheses\n        for (char c : lst.get(0).toCharArray()) {\n            if (c == '(') openCount1++;\n            else closeCount1++;\n        }\n        \n        for (char c : lst.get(1).toCharArray()) {\n            if (c == '(') openCount2++;\n            else closeCount2++;\n        }\n        \n        // Determine Balance\n        int totalOpen = openCount1 + openCount2;\n        int totalClose = closeCount1 + closeCount2;\n        \n        if (totalOpen != totalClose) return \"No\";\n        \n        // Check Concatenation Orders\n        if (openCount1 >= closeCount2 && openCount2 >= closeCount1) return \"Yes\";\n        else return \"No\";\n    }\n}\n"}
{"task_id": "Java/120", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr, in ascending order.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        if (arr == null || arr.isEmpty() || k == 0) {\n            return new ArrayList<>();\n        }\n\n        if (k >= arr.size()) {\n            return new ArrayList<>(arr);\n        }\n\n        List<Integer> sortedArr = new ArrayList<>(arr);\n        Collections.sort(sortedArr);\n\n        return sortedArr.subList(sortedArr.size() - k, sortedArr.size());\n    }\n}\n"}
{"task_id": "Java/121", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return 0;\n        }\n        \n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        \n        return sum;\n    }\n}\n"}
{"task_id": "Java/122", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int add_elements(List<Integer> arr, int k) {\n        if (arr == null || arr.isEmpty() || k < 1 || k > arr.size()) {\n            throw new IllegalArgumentException(\"Invalid input\");\n        }\n\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            int num = arr.get(i);\n            if (String.valueOf(Math.abs(num)).length() <= 2) {\n                sum += num;\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/123", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> get_odd_collatz(int n) {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"Input must be a positive integer.\");\n        }\n\n        List<Integer> collatzSequence = new ArrayList<>();\n        List<Integer> oddNumbers = new ArrayList<>();\n\n        int current = n;\n        while (current != 1) {\n            collatzSequence.add(current);\n            if (current % 2 == 0) {\n                current = current / 2;\n            } else {\n                current = 3 * current + 1;\n            }\n        }\n        collatzSequence.add(1);\n\n        for (int num : collatzSequence) {\n            if (num % 2 != 0) {\n                oddNumbers.add(num);\n            }\n        }\n\n        Collections.sort(oddNumbers);\n        return oddNumbers;\n    }\n}\n"}
{"task_id": "Java/124", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    valid_date(\"03-11-2000\") => true\n    valid_date(\"15-01-2012\") => false\n    valid_date(\"04-0-2040\") => false\n    valid_date(\"06-04-2020\") => true\n    valid_date(\"06/04/2020\") => false\n     */\n    public boolean valid_date(String date) {\n        // Input Validation\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        // Date Format Validation\n        String[] dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n            return false;\n        }\n\n        // Month Validation\n        int month;\n        try {\n            month = Integer.parseInt(dateParts[0]);\n        } catch (NumberFormatException e) {\n            return false;\n        }\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        // Day Validation\n        int day;\n        try {\n            day = Integer.parseInt(dateParts[1]);\n        } catch (NumberFormatException e) {\n            return false;\n        }\n        int maxDays = getMaxDays(month);\n        if (day < 1 || day > maxDays) {\n            return false;\n        }\n\n        // Year Validation\n        int year;\n        try {\n            year = Integer.parseInt(dateParts[2]);\n        } catch (NumberFormatException e) {\n            return false;\n        }\n        if (year < 1) {\n            return false;\n        }\n\n        // Return Result\n        return true;\n    }\n\n    private int getMaxDays(int month) {\n        if (month == 2) {\n            return 29;\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            return 30;\n        } else {\n            return 31;\n        }\n    }\n}\n"}
{"task_id": "Java/125", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n     */\n    public Object split_words(String txt) {\n        if (txt == null || txt.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\"\\\\s+\"));\n        }\n\n        if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        }\n\n        int count = 0;\n        for (char c : txt.toCharArray()) {\n            if (Character.isLowerCase(c) && (c - 'a') % 2 != 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/126", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If the a number appears more than twice, return false. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted(Arrays.asList(5)) -> true\n    is_sorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    is_sorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    is_sorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    is_sorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    is_sorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean is_sorted(List<Integer> lst) {\n        if (lst == null || lst.isEmpty()) {\n            return false;\n        }\n\n        Map<Integer, Integer> freqMap = new HashMap<>();\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n            freqMap.put(lst.get(i), freqMap.getOrDefault(lst.get(i), 0) + 1);\n            if (freqMap.get(lst.get(i)) > 2) {\n                return false;\n            }\n        }\n        freqMap.put(lst.get(lst.size() - 1), freqMap.getOrDefault(lst.get(lst.size() - 1), 0) + 1);\n        if (freqMap.get(lst.get(lst.size() - 1)) > 2) {\n            return false;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/127", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // Find the intersection of the two intervals\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n\n        // If the intersection is empty, return \"NO\"\n        if (start > end) {\n            return \"NO\";\n        }\n\n        // Calculate the length of the intersection\n        int length = end - start + 1;\n\n        // If the length is 0 or 1, return \"NO\"\n        if (length <= 1) {\n            return \"NO\";\n        }\n\n        // Check if the length is a prime number\n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    // Helper function to check if a number is prime\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/128", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prod_signs(Arrays.asList(0, 1)) == 0\n    >>> prod_signs(Arrays.asList()) == None\n     */\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int sumOfMagnitudes = 0;\n        int productOfSigns = 1;\n\n        for (int num : arr) {\n            sumOfMagnitudes += Math.abs(num);\n            productOfSigns *= (num > 0) ? 1 : (num < 0) ? -1 : 0;\n        }\n\n        return Optional.of(sumOfMagnitudes * productOfSigns);\n    }\n}\n"}
{"task_id": "Java/129", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int[][] directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n        List<Integer> minPath = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                List<Integer> path = new ArrayList<>();\n                path.add(grid.get(i).get(j));\n                dfs(grid, i, j, k - 1, path, minPath, directions);\n            }\n        }\n        return minPath;\n    }\n\n    private void dfs(List<List<Integer>> grid, int x, int y, int k, List<Integer> path, List<Integer> minPath, int[][] directions) {\n        if (k == 0) {\n            if (minPath.isEmpty() || path.get(0) < minPath.get(0)) {\n                minPath.clear();\n                minPath.addAll(path);\n            } else if (path.get(0) == minPath.get(0)) {\n                for (int i = 1; i < path.size(); i++) {\n                    if (path.get(i) < minPath.get(i)) {\n                        minPath.clear();\n                        minPath.addAll(path);\n                        break;\n                    } else if (path.get(i) > minPath.get(i)) {\n                        break;\n                    }\n                }\n            }\n            return;\n        }\n        for (int[] direction : directions) {\n            int newX = x + direction[0];\n            int newY = y + direction[1];\n            if (newX >= 0 && newX < grid.size() && newY >= 0 && newY < grid.size()) {\n                path.add(grid.get(newX).get(newY));\n                dfs(grid, newX, newY, k - 1, path, minPath, directions);\n                path.remove(path.size() - 1);\n            }\n        }\n    }\n}\n"}
{"task_id": "Java/130", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> tribonacci = new ArrayList<>();\n        if (n == 0) {\n            tribonacci.add(1);\n        } else if (n == 1) {\n            tribonacci.add(1);\n            tribonacci.add(3);\n        } else if (n == 2) {\n            tribonacci.add(1);\n            tribonacci.add(3);\n            tribonacci.add(2);\n        } else {\n            tribonacci.add(1);\n            tribonacci.add(3);\n            tribonacci.add(2);\n            for (int i = 3; i <= n; i++) {\n                if (i % 2 == 0) {\n                    tribonacci.add(1 + i / 2);\n                } else {\n                    int next = tribonacci.get(i - 1) + tribonacci.get(i - 2) + tribonacci.get(i - 1);\n                    tribonacci.add(next);\n                }\n            }\n        }\n        return tribonacci;\n    }\n}\n"}
{"task_id": "Java/131", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"Input must be a positive integer.\");\n        }\n\n        int product = 1;\n        boolean hasOddDigit = false;\n\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n                hasOddDigit = true;\n            }\n            n /= 10;\n        }\n\n        return hasOddDigit ? product : 0;\n    }\n}\n"}
{"task_id": "Java/132", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    is_nested(\"[[]]\") -> true\n    is_nested(\"[]]]]]]][[[[[]\") -> false\n    is_nested(\"[][]\") -> false\n    is_nested(\"[]\") -> false\n    is_nested(\"[[][]]\") -> true\n    is_nested(\"[[]][[\") -> true\n     */\n    public boolean is_nested(String string) {\n        // Step 1: Validate Input String\n        for (char c : string.toCharArray()) {\n            if (c != '[' && c != ']') {\n                throw new IllegalArgumentException(\"Input string must only contain square brackets\");\n            }\n        }\n\n        // Step 2: Initialize Variables\n        int nestingLevel = 0;\n        boolean isNested = false;\n\n        // Step 3: Iterate Through the String\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                nestingLevel++;\n                if (nestingLevel > 1) {\n                    isNested = true;\n                }\n            } else if (c == ']') {\n                nestingLevel--;\n                if (nestingLevel < 0) {\n                    return false; // Unbalanced brackets\n                }\n            }\n        }\n\n        // Step 4: Check for Nesting\n        return isNested;\n    }\n}\n"}
{"task_id": "Java/133", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sum_squares(List<Double> lst) {\n        return (int) lst.stream()\n                .mapToDouble(Math::ceil)\n                .map(x -> x * x)\n                .sum();\n    }\n}\n"}
{"task_id": "Java/134", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") -> false\n    check_if_last_char_is_a_letter(\"apple pi e\") -> true\n    check_if_last_char_is_a_letter(\"apple pi e \") -> false\n    check_if_last_char_is_a_letter(\"\") -> false\n     */\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        if (txt.isEmpty()) {\n            return false;\n        }\n        \n        char lastChar = txt.charAt(txt.length() - 1);\n        if (!Character.isLetter(lastChar)) {\n            return false;\n        }\n        \n        String[] words = txt.split(\"\\\\s+\");\n        if (words.length == 1 || words[words.length - 1].length() == 1) {\n            return true;\n        }\n        \n        return false;\n    }\n}\n"}
{"task_id": "Java/135", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange(Arrays.asList(1,2,4,3,5)) = 3\n    can_arrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int can_arrange(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return -1;\n        }\n\n        int largestIndex = -1;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                largestIndex = i;\n            }\n        }\n        return largestIndex;\n    }\n}\n"}
{"task_id": "Java/136", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largest_smallest_integers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largest_smallest_integers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst){\n        Optional<Integer> largestNegative = lst.stream()\n                .filter(x -> x < 0)\n                .max(Integer::compare);\n\n        Optional<Integer> smallestPositive = lst.stream()\n                .filter(x -> x > 0)\n                .min(Integer::compare);\n\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n}\n"}
{"task_id": "Java/137", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) -> Optional.of(2.5)\n    compare_one(1, \"2,3\") -> Optional.of(\"2,3\")\n    compare_one(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compare_one(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compare_one(Object a, Object b) {\n        // Input Validation\n        if (!(a instanceof Integer || a instanceof Float || a instanceof String)) {\n            throw new IllegalArgumentException(\"Invalid input type for a\");\n        }\n        if (!(b instanceof Integer || b instanceof Float || b instanceof String)) {\n            throw new IllegalArgumentException(\"Invalid input type for b\");\n        }\n\n        // Type Normalization\n        float aValue;\n        if (a instanceof String) {\n            aValue = Float.valueOf(((String) a).replace(',', '.'));\n        } else {\n            aValue = Float.valueOf(a.toString());\n        }\n\n        float bValue;\n        if (b instanceof String) {\n            bValue = Float.valueOf(((String) b).replace(',', '.'));\n        } else {\n            bValue = Float.valueOf(b.toString());\n        }\n\n        // Comparison\n        if (aValue > bValue) {\n            // Type Conversion\n            if (a instanceof Integer) {\n                return Optional.of((int) aValue);\n            } else if (a instanceof Float) {\n                return Optional.of(aValue);\n            } else {\n                return Optional.of(a);\n            }\n        } else if (bValue > aValue) {\n            // Type Conversion\n            if (b instanceof Integer) {\n                return Optional.of((int) bValue);\n            } else if (b instanceof Float) {\n                return Optional.of(bValue);\n            } else {\n                return Optional.of(b);\n            }\n        } else {\n            // Equality Check\n            return Optional.empty();\n        }\n    }\n}\n"}
{"task_id": "Java/138", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == false\n    is_equal_to_sum_even(6) == false\n    is_equal_to_sum_even(8) == true\n     */\n    public boolean is_equal_to_sum_even(int n) {\n        if (n < 0) {\n            return false;\n        }\n\n        for (int a = 2; a <= n / 4; a += 2) {\n            for (int b = a; b <= (n - a) / 3; b += 2) {\n                for (int c = b; c <= (n - a - b) / 2; c += 2) {\n                    int d = n - a - b - c;\n                    if (d >= 2 && d % 2 == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/139", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long special_factorial(int n) {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"Input must be a positive integer.\");\n        }\n\n        long result = 1;\n        for (int i = n; i > 0; i--) {\n            long factorial = calculateFactorial(i);\n            result *= factorial;\n        }\n        return result;\n    }\n\n    private long calculateFactorial(int k) {\n        long factorial = 1;\n        for (int i = 1; i <= k; i++) {\n            factorial *= i;\n        }\n        return factorial;\n    }\n}\n"}
{"task_id": "Java/140", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fix_spaces(String text) {\n        if (text == null || text.isEmpty()) {\n            return text;\n        }\n\n        text = text.trim();\n        text = text.replaceAll(\" +\", \" \");\n        text = text.replaceAll(\"  +\", \"-\");\n        text = text.replaceAll(\" \", \"_\");\n\n        return text;\n    }\n}\n"}
{"task_id": "Java/141", "generation": "import java.util.*;\n\nclass Solution {\n    public String file_name_check(String file_name) {\n        int digitCount = countDigits(file_name);\n        boolean dotPresence = checkDotPresence(file_name);\n        String[] parts = file_name.split(\"\\\\.\");\n        boolean prefixValid = validatePrefix(parts[0]);\n        boolean suffixValid = validateSuffix(parts[1]);\n\n        return combineChecks(digitCount, dotPresence, prefixValid, suffixValid) ? \"Yes\" : \"No\";\n    }\n\n    private int countDigits(String fileName) {\n        int count = 0;\n        for (char c : fileName.toCharArray()) {\n            if (Character.isDigit(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean checkDotPresence(String fileName) {\n        return fileName.indexOf('.') != -1 && fileName.indexOf('.') == fileName.lastIndexOf('.');\n    }\n\n    private boolean validatePrefix(String prefix) {\n        return !prefix.isEmpty() && Character.isLetter(prefix.charAt(0));\n    }\n\n    private boolean validateSuffix(String suffix) {\n        return suffix.equals(\"txt\") || suffix.equals(\"exe\") || suffix.equals(\"dll\");\n    }\n\n    private boolean combineChecks(int digitCount, boolean dotPresence, boolean prefixValid, boolean suffixValid) {\n        return digitCount <= 3 && dotPresence && prefixValid && suffixValid;\n    }\n}\n"}
{"task_id": "Java/142", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sum_squares(List<Integer> lst) {\n        if (lst == null) {\n            throw new NullPointerException(\"Input list cannot be null\");\n        }\n\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int entry = lst.get(i);\n            if (i % 3 == 0) {\n                sum += entry * entry;\n            } else if (i % 4 == 0) {\n                sum += entry * entry * entry;\n            } else {\n                sum += entry;\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/143", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String words_in_sentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.append(word).append(\" \");\n            }\n        }\n\n        return result.toString().trim();\n    }\n\n    private boolean isPrime(int length) {\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= length; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/144", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Split the input strings into numerator and denominator\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n\n        // Parse the numerator and denominator to integers\n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n\n        // Multiply the numerators and denominators\n        long newNumerator = (long) xNumerator * nNumerator;\n        long newDenominator = (long) xDenominator * nDenominator;\n\n        // Calculate the GCD of the new numerator and denominator\n        long gcd = gcd(newNumerator, newDenominator);\n\n        // Check if the product is a whole number\n        return newDenominator == gcd;\n    }\n\n    // Helper function to calculate the GCD using the Euclidean algorithm\n    private long gcd(long a, long b) {\n        if (b == 0) {\n            return a;\n        } else {\n            return gcd(b, a % b);\n        }\n    }\n}\n"}
{"task_id": "Java/145", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n    If an integer is negative, then its first digit will be negative:\n    e.g. -123 has digits -1, 2, and 3.\n\n    For example:\n    >>> order_by_points(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> order_by_points(Arrays.asList()) == []\n     */\n    public List<Integer> order_by_points(List<Integer> nums) {\n        List<Map.Entry<Integer, Integer>> list = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            int num = nums.get(i);\n            while (num != 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            if (num < 0) sum = -sum;\n            list.add(new AbstractMap.SimpleEntry<>(sum, nums.get(i)));\n        }\n        Collections.sort(list, (a, b) -> {\n            if (a.getKey().equals(b.getKey())) {\n                return Integer.compare(nums.indexOf(a.getValue()), nums.indexOf(b.getValue()));\n            } else {\n                return a.getKey().compareTo(b.getKey());\n            }\n        });\n        List<Integer> result = new ArrayList<>();\n        for (Map.Entry<Integer, Integer> entry : list) {\n            result.add(entry.getValue());\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/146", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10 && isOddFirstAndLastDigit(num)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isOddFirstAndLastDigit(int num) {\n        String numStr = Math.abs(num) + \"\";\n        return isOdd(numStr.charAt(0) - '0') && isOdd(numStr.charAt(numStr.length() - 1) - '0');\n    }\n\n    private boolean isOdd(int digit) {\n        return digit % 2 != 0;\n    }\n}\n"}
{"task_id": "Java/147", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int get_max_triples(int n) {\n        int[] a = new int[n];\n        for (int i = 1; i <= n; i++) {\n            a[i - 1] = i * i - i + 1;\n        }\n        \n        int count = 0;\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/148", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    private static final List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\n    public List<String> bf(String planet1, String planet2) {\n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return new ArrayList<>();\n        }\n\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n\n        int start = Math.min(index1, index2) + 1;\n        int end = Math.max(index1, index2);\n\n        return planets.subList(start, end);\n    }\n}\n"}
{"task_id": "Java/149", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert sorted_list_sum(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert sorted_list_sum(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> sorted_list_sum(List<String> lst) {\n        if (lst == null || lst.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        return lst.stream()\n                .filter(s -> s.length() % 2 == 0)\n                .sorted(Comparator.comparingInt(String::length).thenComparing(Comparator.naturalOrder()))\n                .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/150", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n     */\n    public int x_or_y(int n, int x, int y) {\n        if (!isValidInput(n, x, y)) {\n            throw new IllegalArgumentException(\"Invalid input\");\n        }\n        \n        boolean isPrime = isPrime(n);\n        \n        if (isPrime) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    private boolean isValidInput(int n, int x, int y) {\n        return true; // input validation is not required in this case\n    }\n}\n"}
{"task_id": "Java/151", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    double_the_difference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    double_the_difference(Arrays.asList(-1, -2, 0)) == 0\n    double_the_difference(Arrays.asList(9, -2)) == 81\n    double_the_difference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int double_the_difference(List<Object> lst) {\n        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (int) obj;\n                if (num >= 0 && num % 2 != 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/152", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        if (game.size() != guess.size()) {\n            throw new IllegalArgumentException(\"Input lists must have the same length\");\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            int difference = Math.abs(game.get(i) - guess.get(i));\n            result.add(difference);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/153", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.Strongest_Extension.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        String strongestExtension = extensions.get(0);\n        int maxStrength = calculateStrength(strongestExtension);\n\n        for (int i = 1; i < extensions.size(); i++) {\n            String extension = extensions.get(i);\n            int strength = calculateStrength(extension);\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return class_name + \".\" + strongestExtension;\n    }\n\n    private int calculateStrength(String extension) {\n        int uppercaseCount = 0;\n        int lowercaseCount = 0;\n\n        for (char c : extension.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                uppercaseCount++;\n            } else if (Character.isLowerCase(c)) {\n                lowercaseCount++;\n            }\n        }\n\n        return uppercaseCount - lowercaseCount;\n    }\n}\n"}
{"task_id": "Java/154", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => false\n    cycpattern_check(\"hello\",\"ell\") => true\n    cycpattern_check(\"whassup\",\"psus\") => false\n    cycpattern_check(\"abab\",\"baa\") => true\n    cycpattern_check(\"efef\",\"eeff\") => false\n    cycpattern_check(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpattern_check(String a, String b) {\n        if (a == null || b == null || a.isEmpty() || b.isEmpty()) {\n            return false;\n        }\n\n        for (int i = 0; i < b.length(); i++) {\n            String rotation = b.substring(i) + b.substring(0, i);\n            if (a.indexOf(rotation) != -1) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n"}
{"task_id": "Java/155", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n     */\n    public List<Integer> even_odd_count(int num) {\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        // Convert the integer to a string to easily extract individual digits\n        String strNum = String.valueOf(Math.abs(num));\n        \n        // Iterate through each character in the string\n        for (char c : strNum.toCharArray()) {\n            int digit = Character.getNumericValue(c);\n            \n            // Check if the digit is even\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        \n        // Create a list containing the even and odd counts\n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/156", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == \"xix\"\n    >>> int_to_mini_roman(152) == \"clii\"\n    >>> int_to_mini_roman(426) == \"cdxxvi\"\n     */\n    public String int_to_mini_roman(int number) {\n        if (number < 1 || number > 1000) {\n            throw new IllegalArgumentException(\"Input number must be between 1 and 1000\");\n        }\n\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] romanNumerals = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\n        StringBuilder result = new StringBuilder();\n\n        for (int i = 0; i < values.length; i++) {\n            while (number >= values[i]) {\n                number -= values[i];\n                result.append(romanNumerals[i]);\n            }\n        }\n\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/157", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == true\n    right_angle_triangle(1, 2, 3) == false\n     */\n    public boolean right_angle_triangle(int a, int b, int c) {\n        // Validate Input\n        if (a <= 0 || b <= 0 || c <= 0) {\n            throw new IllegalArgumentException(\"All side lengths must be positive numbers.\");\n        }\n\n        // Sort Side Lengths\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n\n        // Check Pythagorean Theorem\n        return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n    }\n}\n"}
{"task_id": "Java/158", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String find_max(List<String> words) {\n        String result = \"\";\n        int maxUniqueCount = 0;\n\n        for (String word : words) {\n            int uniqueCount = countUniqueChars(word);\n            if (uniqueCount > maxUniqueCount || (uniqueCount == maxUniqueCount && word.compareTo(result) < 0)) {\n                maxUniqueCount = uniqueCount;\n                result = word;\n            }\n        }\n\n        return result;\n    }\n\n    private int countUniqueChars(String str) {\n        Set<Character> uniqueChars = new HashSet<>();\n        for (char c : str.toCharArray()) {\n            uniqueChars.add(c);\n        }\n        return uniqueChars.size();\n    }\n}\n"}
{"task_id": "Java/159", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        // Input validation\n        if (number < 0 || number > 1000 || need < 0 || need > 1000 || remaining < 0 || remaining > 1000) {\n            throw new IllegalArgumentException(\"Invalid input\");\n        }\n\n        // Calculate total carrots needed\n        int totalCarrotsNeeded = number + need;\n\n        // Check remaining carrots\n        int totalCarrotsEaten = Math.min(totalCarrotsNeeded, remaining);\n\n        // Calculate carrots left\n        int carrotsLeft = remaining - totalCarrotsEaten;\n\n        // Return result\n        return Arrays.asList(totalCarrotsEaten, carrotsLeft);\n    }\n}\n"}
{"task_id": "Java/160", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        // Validate input lists\n        if (operator.size() != operand.size() - 1) {\n            throw new IllegalArgumentException(\"Invalid input lists\");\n        }\n        for (int num : operand) {\n            if (num < 0) {\n                throw new IllegalArgumentException(\"Operand list contains negative integers\");\n            }\n        }\n        for (String op : operator) {\n            if (!op.equals(\"+\") && !op.equals(\"-\") && !op.equals(\"*\") && !op.equals(\"/\") && !op.equals(\"**\")) {\n                throw new IllegalArgumentException(\"Operator list contains invalid operators\");\n            }\n        }\n\n        // Build algebraic expression\n        StringBuilder expression = new StringBuilder();\n        for (int i = 0; i < operand.size(); i++) {\n            expression.append(operand.get(i));\n            if (i < operator.size()) {\n                expression.append(\" \").append(operator.get(i)).append(\" \");\n            }\n        }\n\n        // Evaluate algebraic expression\n        try {\n            return (int) evaluateExpression(expression.toString());\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error evaluating expression\", e);\n        }\n    }\n\n    private double evaluateExpression(String expression) {\n        return new Object() {\n            int pos = -1, ch;\n\n            void nextChar() {\n                ch = (++pos < expression.length()) ? expression.charAt(pos) : -1;\n            }\n\n            boolean eat(int charToEat) {\n                while (ch == ' ') nextChar();\n                if (ch == charToEat) {\n                    nextChar();\n                    return true;\n                }\n                return false;\n            }\n\n            double parse() {\n                nextChar();\n                double x = parseExpression();\n                if (pos < expression.length()) throw new RuntimeException(\"Unexpected: \" + (char)ch);\n                return x;\n            }\n\n            double parseExpression() {\n                double x = parseTerm();\n                for (;;) {\n                    if      (eat('+')) x += parseTerm(); // addition\n                    else if (eat('-')) x -= parseTerm(); // subtraction\n                    else return x;\n                }\n            }\n\n            double parseTerm() {\n                double x = parseFactor();\n                for (;;) {\n                    if      (eat('*')) x *= parseFactor(); // multiplication\n                    else if (eat('/')) x /= parseFactor(); // division\n                    else if (eat('*') && eat('*')) x = Math.pow(x, parseFactor()); // exponentiation\n                    else return x;\n                }\n            }\n\n            double parseFactor() {\n                if (eat('+')) return parseFactor(); // unary plus\n                if (eat('-')) return -parseFactor(); // unary minus\n\n                double x;\n                int startPos = this.pos;\n                if (eat('(')) { // parentheses\n                    x = parseExpression();\n                    eat(')');\n                } else if ((ch >= '0' && ch <= '9') || ch == '.') { // numbers\n                    while ((ch >= '0' && ch <= '9') || ch == '.') nextChar();\n                    x = Double.parseDouble(expression.substring(startPos, this.pos));\n                } else if (ch >= 'a' && ch <= 'z') { // functions\n                    while (ch >= 'a' && ch <= 'z') nextChar();\n                    String func = expression.substring(startPos, this.pos);\n                    x = parseFactor();\n                    if (func.equals(\"sqrt\")) x = Math.sqrt(x);\n                    else throw new RuntimeException(\"Unknown function: \" + func);\n                } else {\n                    throw new RuntimeException(\"Unexpected: \" + (char)ch);\n                }\n\n                return x;\n            }\n        }.parse();\n    }\n}\n"}
{"task_id": "Java/161", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        if (s == null || s.isEmpty()) {\n            return s;\n        }\n\n        boolean containsLetter = false;\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                containsLetter = true;\n                break;\n            }\n        }\n\n        if (containsLetter) {\n            StringBuilder result = new StringBuilder();\n            for (char c : s.toCharArray()) {\n                if (Character.isLetter(c)) {\n                    result.append(Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c));\n                } else {\n                    result.append(c);\n                }\n            }\n            return result.toString();\n        } else {\n            return new StringBuilder(s).reverse().toString();\n        }\n    }\n}\n"}
{"task_id": "Java/162", "generation": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text == null || text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] hashBytes = md.digest(text.getBytes());\n\n        BigInteger no = new BigInteger(1, hashBytes);\n        String hashString = no.toString(16);\n\n        while (hashString.length() < 32) {\n            hashString = \"0\" + hashString;\n        }\n\n        return Optional.of(hashString);\n    }\n}\n"}
{"task_id": "Java/163", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order. Please note that the even digits refer to even numbers less than 10.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n     */\n    public List<Integer> generate_integers(int a, int b) {\n        if (a < 1 || b < 1) {\n            throw new IllegalArgumentException(\"Both a and b must be positive integers.\");\n        }\n\n        int min = Math.min(a, b);\n        int max = Math.max(a, b);\n\n        List<Integer> evenDigits = new ArrayList<>();\n\n        for (int i = min; i <= max; i++) {\n            if (i < 10 && i % 2 == 0) {\n                evenDigits.add(i);\n            }\n        }\n\n        Collections.sort(evenDigits);\n\n        return evenDigits;\n    }\n}\n"}
