{"task_id": "Java/0", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        Collections.sort(numbers);\n        for (int i = 1; i < numbers.size(); i++) {\n            double distance = Math.abs(numbers.get(i) - numbers.get(i - 1));\n            if (distance < threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/1", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        StringBuilder current_group = new StringBuilder();\n        int balance = 0;\n        for (char c : paren_string.replace(\" \", \"\").toCharArray()) {\n            current_group.append(c);\n            if (c == '(') {\n                balance++;\n            } else {\n                balance--;\n            }\n            if (balance == 0) {\n                result.add(current_group.toString());\n                current_group.setLength(0);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/2", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double truncate_number(double number) {\n        int integer_part = (int) number;\n        double decimal_part = number - integer_part;\n        return decimal_part;\n    }\n}\n"}
{"task_id": "Java/3", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/4", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double mean_absolute_deviation(List<Double> numbers) {\n        // Calculate mean of numbers\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n\n        // Initialize sum of absolute differences to 0\n        double sumAbsoluteDifferences = 0;\n\n        // For each number in numbers:\n        for (double num : numbers) {\n            // Calculate absolute difference between number and mean\n            double absoluteDifference = Math.abs(num - mean);\n            // Add absolute difference to sum of absolute differences\n            sumAbsoluteDifferences += absoluteDifference;\n        }\n\n        // Calculate MAD by dividing sum of absolute differences by count of numbers\n        double mad = sumAbsoluteDifferences / numbers.size();\n\n        // Return MAD\n        return mad;\n    }\n}\n"}
{"task_id": "Java/5", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/6", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> parse_nested_parens(String paren_string) {\n        String[] groups = paren_string.split(\" \");\n        List<Integer> max_depths = new ArrayList<>();\n        \n        for (String group : groups) {\n            int max_depth = 0;\n            int current_depth = 0;\n            \n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    current_depth++;\n                    max_depth = Math.max(max_depth, current_depth);\n                } else if (c == ')') {\n                    current_depth--;\n                }\n            }\n            \n            max_depths.add(max_depth);\n        }\n        \n        return max_depths;\n    }\n}\n"}
{"task_id": "Java/7", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> filteredStrings = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredStrings.add(str);\n            }\n        }\n        return filteredStrings;\n    }\n}\n"}
{"task_id": "Java/8", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sum_product(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        List<Integer> result = new ArrayList<>();\n        result.add(sum);\n        result.add(product);\n        return result;\n    }\n}\n"}
{"task_id": "Java/9", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> rolling_max_list = new ArrayList<>();\n        int max_so_far = Integer.MIN_VALUE;\n        for (int num : numbers) {\n            if (num > max_so_far) {\n                max_so_far = num;\n            }\n            rolling_max_list.add(max_so_far);\n        }\n        return rolling_max_list;\n    }\n}\n"}
{"task_id": "Java/10", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n     */\n    public String make_palindrome(String string) {\n        if (string.isEmpty() || isPalindrome(string)) {\n            return string;\n        }\n        for (int i = string.length() - 1; i >= 0; i--) {\n            if (isPalindrome(string.substring(i))) {\n                return string + new StringBuilder(string.substring(0, i)).reverse().toString();\n            }\n        }\n        return \"\";\n    }\n}\n"}
{"task_id": "Java/11", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String string_xor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if ((a.charAt(i) == '0' && b.charAt(i) == '0') || (a.charAt(i) == '1' && b.charAt(i) == '1')) {\n                result.append('0');\n            } else {\n                result.append('1');\n            }\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/12", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        return Optional.of(strings.stream()\n                .max(Comparator.comparingInt(String::length))\n                .orElseThrow());\n    }\n}\n"}
{"task_id": "Java/13", "generation": "class Solution {\n    public int greatest_common_divisor(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}\n"}
{"task_id": "Java/14", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> all_prefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        String prefix = \"\";\n        for (char character : string.toCharArray()) {\n            prefix += character;\n            prefixes.add(prefix);\n        }\n        return prefixes;\n    }\n}\n"}
{"task_id": "Java/15", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String string_sequence(int n) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            result.append(i).append(\" \");\n        }\n        return result.toString().trim();\n    }\n}\n"}
{"task_id": "Java/16", "generation": "import java.util.*;\n\nclass Solution {\n    public int count_distinct_characters(String string) {\n        // Convert the string to lowercase\n        string = string.toLowerCase();\n        \n        // Create an empty set to store unique characters\n        Set<Character> uniqueChars = new HashSet<>();\n        \n        // Iterate over each character in the string\n        for (char c : string.toCharArray()) {\n            // Add the character to the set\n            uniqueChars.add(c);\n        }\n        \n        // Return the size of the set\n        return uniqueChars.size();\n    }\n}\n"}
{"task_id": "Java/17", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> parse_music(String string) {\n        List<Integer> result = new ArrayList<>();\n        int i = 0;\n        while (i < string.length()) {\n            if (string.charAt(i) == 'o' && (i == string.length() - 1 || string.charAt(i + 1) != '|')) {\n                result.add(4);\n                i++;\n            } else if (string.charAt(i) == 'o' && string.charAt(i + 1) == '|') {\n                result.add(2);\n                i += 2;\n            } else if (string.charAt(i) == '.' && string.charAt(i + 1) == '|') {\n                result.add(1);\n                i += 2;\n            } else {\n                i++;\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/18", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int how_many_times(String string, String substring) {\n        int count = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/19", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String sort_numbers(String numbers) {\n        // Create a HashMap to map number words to integer values\n        Map<String, Integer> numMap = new HashMap<>();\n        numMap.put(\"zero\", 0);\n        numMap.put(\"one\", 1);\n        numMap.put(\"two\", 2);\n        numMap.put(\"three\", 3);\n        numMap.put(\"four\", 4);\n        numMap.put(\"five\", 5);\n        numMap.put(\"six\", 6);\n        numMap.put(\"seven\", 7);\n        numMap.put(\"eight\", 8);\n        numMap.put(\"nine\", 9);\n\n        // Split the input string into an array of words\n        String[] numArray = numbers.split(\" \");\n\n        // Sort the array based on the integer values\n        Arrays.sort(numArray, (a, b) -> numMap.get(a) - numMap.get(b));\n\n        // Join the sorted array back into a string\n        String sortedNumbers = String.join(\" \", numArray);\n\n        // Return the sorted string\n        return sortedNumbers;\n    }\n}\n"}
{"task_id": "Java/20", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        List<Double> closest_pair = new ArrayList<>();\n        closest_pair.add(numbers.get(0));\n        closest_pair.add(numbers.get(1));\n        double min_diff = Math.abs(numbers.get(1) - numbers.get(0));\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = Math.abs(numbers.get(i + 1) - numbers.get(i));\n            if (diff < min_diff) {\n                min_diff = diff;\n                closest_pair.clear();\n                closest_pair.add(numbers.get(i));\n                closest_pair.add(numbers.get(i + 1));\n            }\n        }\n        Collections.sort(closest_pair);\n        return closest_pair;\n    }\n}\n"}
{"task_id": "Java/21", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        double min_value = Collections.min(numbers);\n        double max_value = Collections.max(numbers);\n        double range = max_value - min_value;\n        \n        List<Double> result = new ArrayList<>();\n        for (double number : numbers) {\n            double normalized_number = (number - min_value) / range;\n            result.add(normalized_number);\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/22", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> filter_integers(List<Object> values) {\n        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n}\n"}
{"task_id": "Java/23", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int strlen(String string) {\n        return string.length();\n    }\n}\n"}
{"task_id": "Java/24", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largest_divisor(int n) {\n        int potential_divisor = n - 1;\n        while (potential_divisor > 0) {\n            if (n % potential_divisor == 0) {\n                return potential_divisor;\n            }\n            potential_divisor--;\n        }\n        return 1;\n    }\n}\n"}
{"task_id": "Java/25", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> factorize(int n) {\n        List<Integer> primeFactors = new ArrayList<>();\n        int divisor = 2;\n        while (n > 1) {\n            if (n % divisor == 0) {\n                primeFactors.add(divisor);\n                n = n / divisor;\n            } else {\n                divisor++;\n            }\n        }\n        return primeFactors;\n    }\n}\n"}
{"task_id": "Java/26", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        Map<Integer, Long> countMap = numbers.stream()\n                .collect(Collectors.groupingByConcurrent(i -> i, Collectors.counting()));\n        \n        List<Integer> result = new ArrayList<>();\n        for (Integer num : numbers) {\n            if (countMap.get(num) == 1) {\n                result.add(num);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/27", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String flip_case(String string) {\n        StringBuilder result = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                result.append(Character.toUpperCase(c));\n            } else if (Character.isUpperCase(c)) {\n                result.append(Character.toLowerCase(c));\n            }\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/28", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String str : strings) {\n            sb.append(str);\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/29", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/30", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> get_positive(List<Integer> l) {\n        return l.stream()\n                .filter(num -> num > 0)\n                .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/31", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_prime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/32", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> find_zero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> find_zero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double find_zero(List<Double> xs) {\n        // Check if the number of coefficients is even\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"The number of coefficients must be even.\");\n        }\n        \n        // Check if the largest non-zero coefficient is at the end\n        int lastNonZeroIndex = xs.size() - 1;\n        while (lastNonZeroIndex >= 0 && xs.get(lastNonZeroIndex) == 0) {\n            lastNonZeroIndex--;\n        }\n        if (lastNonZeroIndex != xs.size() - 1) {\n            throw new IllegalArgumentException(\"The largest non-zero coefficient must be at the end.\");\n        }\n        \n        // Use the Newton-Raphson method to find a zero of the polynomial\n        double x = 1.0; // initial guess\n        double epsilon = 1e-10; // tolerance\n        while (true) {\n            double fx = poly(xs, x);\n            if (Math.abs(fx) < epsilon) {\n                return x;\n            }\n            double dfx = 0;\n            for (int i = 1; i < xs.size(); i++) {\n                dfx += i * xs.get(i) * Math.pow(x, i - 1);\n            }\n            x = x - fx / dfx;\n        }\n    }\n}\n"}
{"task_id": "Java/33", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_third(List<Integer> l) {\n        // Separate values at indices that are divisible by three\n        List<Integer> third_values = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                third_values.add(l.get(i));\n            }\n        }\n\n        // Sort the separated values\n        Collections.sort(third_values);\n\n        // Create a new list l' and copy values from l\n        List<Integer> l_prime = new ArrayList<>();\n        int third_index = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                l_prime.add(third_values.get(third_index));\n                third_index++;\n            } else {\n                l_prime.add(l.get(i));\n            }\n        }\n\n        return l_prime;\n    }\n}\n"}
{"task_id": "Java/34", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> unique(List<Integer> l) {\n        // Create an empty set\n        Set<Integer> uniqueSet = new HashSet<>();\n        \n        // Add all elements from the input list to the set\n        uniqueSet.addAll(l);\n        \n        // Convert the set to a list\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n        \n        // Sort the list in ascending order\n        Collections.sort(uniqueList);\n        \n        // Return the sorted list\n        return uniqueList;\n    }\n}\n"}
{"task_id": "Java/35", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int max_element(List<Integer> l) {\n        return Collections.max(l);\n    }\n}\n"}
{"task_id": "Java/36", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fizz_buzz(int n) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String str = Integer.toString(i);\n                for (char c : str.toCharArray()) {\n                    if (c == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/37", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_even(List<Integer> l) {\n        List<Integer> even_list = new ArrayList<>();\n        List<Integer> odd_list = new ArrayList<>();\n        \n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                even_list.add(l.get(i));\n            } else {\n                odd_list.add(l.get(i));\n            }\n        }\n        \n        Collections.sort(even_list);\n        \n        List<Integer> result_list = new ArrayList<>();\n        \n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result_list.add(even_list.get(i / 2));\n            } else {\n                result_list.add(odd_list.get(i / 2));\n            }\n        }\n        \n        return result_list;\n    }\n}\n"}
{"task_id": "Java/38", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decode_cyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n"}
{"task_id": "Java/39", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int prime_fib(int n) {\n        int count = 0;\n        int a = 0, b = 1;\n        while (count < n) {\n            if (is_prime(b)) {\n                count++;\n                if (count == n) {\n                    return b;\n                }\n            }\n            int temp = a;\n            a = b;\n            b = temp + b;\n        }\n        return -1; // Return -1 if no such number is found\n    }\n\n    public boolean is_prime(int num) {\n        if (num < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/40", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        Collections.sort(l);\n        for (int i = 0; i < l.size() - 2; i++) {\n            int left = i + 1;\n            int right = l.size() - 1;\n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/41", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int car_race_collision(int n) {\n        // Calculate the number of pairs of cars\n        int collisions = n * n;\n        return collisions;\n    }\n}\n"}
{"task_id": "Java/42", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> incr_list(List<Integer> l) {\n        return l.stream()\n                 .map(n -> n + 1)\n                 .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/43", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for (int num : l) {\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/44", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String change_base(int x, int base) {\n        StringBuilder result = new StringBuilder();\n        while (x > 0) {\n            int remainder = x % base;\n            result.insert(0, remainder);\n            x = x / base;\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/45", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangle_area(double a, double h) {\n        double area = (a * h) / 2;\n        return area;\n    }\n}\n"}
{"task_id": "Java/46", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib4(int n) {\n        if (n <= 1) {\n            return 0;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 0;\n        }\n\n        int[] fib4_values = new int[n + 1];\n        fib4_values[0] = 0;\n        fib4_values[1] = 0;\n        fib4_values[2] = 2;\n        fib4_values[3] = 0;\n\n        for (int i = 4; i <= n; i++) {\n            fib4_values[i] = fib4_values[i - 1] + fib4_values[i - 2] + fib4_values[i - 3] + fib4_values[i - 4];\n        }\n\n        return fib4_values[n];\n    }\n}\n"}
{"task_id": "Java/47", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 1) {\n            return l.get(n / 2);\n        } else {\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        }\n    }\n}\n"}
{"task_id": "Java/48", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_palindrome(String text) {\n        String reversed_text = new StringBuilder(text).reverse().toString();\n        return text.equals(reversed_text);\n    }\n}\n"}
{"task_id": "Java/49", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int modp(int n, int p) {\n        int result = 1;\n        int base = 2;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                result = (result * base) % p;\n            }\n            base = (base * base) % p;\n            n = n / 2;\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/50", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decode_shift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26)));\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/51", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String remove_vowels(String text) {\n        String output = \"\";\n        String vowels = \"aeiouAEIOU\";\n        for (char c : text.toCharArray()) {\n            if (vowels.indexOf(c) == -1) {\n                output += c;\n            }\n        }\n        return output;\n    }\n}\n"}
{"task_id": "Java/52", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean below_threshold(List<Integer> l, int t) {\n        for (Integer num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/53", "generation": "class Solution {\n    public int add(int x, int y) {\n        return x + y;\n    }\n}\n"}
{"task_id": "Java/54", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean same_chars(String s0, String s1) {\n        Set<Character> set0 = new HashSet<>();\n        Set<Character> set1 = new HashSet<>();\n\n        for (char c : s0.toCharArray()) {\n            set0.add(c);\n        }\n\n        for (char c : s1.toCharArray()) {\n            set1.add(c);\n        }\n\n        return set0.equals(set1);\n    }\n}\n"}
{"task_id": "Java/55", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        return fib[n];\n    }\n}\n"}
{"task_id": "Java/56", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correct_bracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/57", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean monotonic(List<Integer> l) {\n        boolean increasing = true;\n        boolean decreasing = true;\n\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n        }\n\n        return increasing || decreasing;\n    }\n}\n"}
{"task_id": "Java/58", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> commonSet = new HashSet<>();\n        for (Integer num : l1) {\n            if (l2.contains(num)) {\n                commonSet.add(num);\n            }\n        }\n        List<Integer> commonList = new ArrayList<>(commonSet);\n        Collections.sort(commonList);\n        return commonList;\n    }\n}\n"}
{"task_id": "Java/59", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largest_prime_factor(int n) {\n        int divisor = 2;\n        while (n > 1) {\n            if (n % divisor == 0) {\n                n = n / divisor;\n            } else {\n                divisor = divisor + 1;\n            }\n        }\n        return divisor - 1;\n    }\n}\n"}
{"task_id": "Java/60", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_to_n(int n) {\n        return (n * (n + 1)) / 2;\n    }\n}\n"}
{"task_id": "Java/61", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correct_bracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/62", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/63", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fibfib(int n) {\n        if (n == 0 || n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int[] dp = new int[n + 1];\n        dp[0] = 0;\n        dp[1] = 0;\n        dp[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];\n        }\n        return dp[n];\n    }\n}\n"}
{"task_id": "Java/64", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int vowels_count(String s) {\n        int count = 0;\n        s = s.toLowerCase();\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            } else if (s.charAt(i) == 'y' && i == s.length() - 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/65", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String circular_shift(int x, int shift) {\n        String str = Integer.toString(x);\n        int n = str.length();\n        int effectiveShift = shift % n;\n        if (effectiveShift == 0) {\n            return str;\n        } else if (effectiveShift == n) {\n            StringBuilder sb = new StringBuilder(str);\n            return sb.reverse().toString();\n        } else {\n            return str.substring(n - effectiveShift) + str.substring(0, n - effectiveShift);\n        }\n    }\n}\n"}
{"task_id": "Java/66", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digitSum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/67", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruit_distribution(String s, int n) {\n        // Split the string into parts to extract the numbers of apples and oranges\n        String[] parts = s.split(\" and \");\n        int apples = extractNumber(parts[0]);\n        int oranges = extractNumber(parts[1]);\n        \n        // Calculate the number of mango fruits\n        int mangoes = n - apples - oranges;\n        \n        return mangoes;\n    }\n    \n    public int extractNumber(String s) {\n        // Remove the word \"apples\" or \"oranges\" from the string and convert the remaining part to an integer\n        s = s.replaceAll(\"apples\", \"\").replaceAll(\"oranges\", \"\").trim();\n        return Integer.parseInt(s);\n    }\n}\n"}
{"task_id": "Java/68", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> pluck(List<Integer> arr) {\n        int smallestEvenValue = Integer.MAX_VALUE;\n        int smallestEvenIndex = -1;\n        \n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < smallestEvenValue) {\n                smallestEvenValue = arr.get(i);\n                smallestEvenIndex = i;\n            }\n        }\n        \n        if (smallestEvenIndex == -1) {\n            return new ArrayList<>();\n        } else {\n            List<Integer> result = new ArrayList<>();\n            result.add(smallestEvenValue);\n            result.add(smallestEvenIndex);\n            return result;\n        }\n    }\n}\n"}
{"task_id": "Java/69", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int search(List<Integer> lst) {\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        for (Integer num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        int result = -1;\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            if (entry.getValue() >= entry.getKey() && entry.getKey() > result) {\n                result = entry.getKey();\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/70", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> copy = new ArrayList<>(lst);\n        List<Integer> sortedList = new ArrayList<>();\n        boolean isMin = true;\n        while (!copy.isEmpty()) {\n            int value;\n            if (isMin) {\n                value = Collections.min(copy);\n            } else {\n                value = Collections.max(copy);\n            }\n            sortedList.add(value);\n            copy.remove((Integer) value);\n            isMin = !isMin;\n        }\n        return sortedList;\n    }\n}\n"}
{"task_id": "Java/71", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangle_area(double a, double b, double c) {\n        // Check if the three sides form a valid triangle\n        if ((a + b > c) && (a + c > b) && (b + c > a)) {\n            // Calculate the semi-perimeter\n            double s = (a + b + c) / 2;\n            // Calculate the area using Heron's formula\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            // Round the area to 2 decimal points\n            area = Math.round(area * 100.0) / 100.0;\n            return area;\n        } else {\n            return -1;\n        }\n    }\n}\n"}
{"task_id": "Java/72", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean will_it_fly(List<Integer> q, int w) {\n        // Check if the list is palindromic\n        boolean isBalanced = isPalindromic(q);\n        \n        // Calculate the sum of the elements in the list\n        int sum = calculateSum(q);\n        \n        // Check if the sum is less than or equal to the maximum possible weight\n        boolean isWithinWeightLimit = sum <= w;\n        \n        // Return true if the object is balanced and within the weight limit, false otherwise\n        return isBalanced && isWithinWeightLimit;\n    }\n    \n    // Helper function to check if a list is palindromic\n    public boolean isPalindromic(List<Integer> list) {\n        int left = 0;\n        int right = list.size() - 1;\n        while (left < right) {\n            if (!list.get(left).equals(list.get(right))) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n    \n    // Helper function to calculate the sum of elements in a list\n    public int calculateSum(List<Integer> list) {\n        int sum = 0;\n        for (Integer num : list) {\n            sum += num;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/73", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int smallest_change(List<Integer> arr) {\n        int count = 0;\n        int left = 0;\n        int right = arr.size() - 1;\n        while (left < right) {\n            if (!arr.get(left).equals(arr.get(right))) {\n                count++;\n            }\n            left++;\n            right--;\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/74", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        int sum1 = lst1.stream().mapToInt(String::length).sum();\n        int sum2 = lst2.stream().mapToInt(String::length).sum();\n        \n        if (sum1 <= sum2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n"}
{"task_id": "Java/75", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean is_multiply_prime(int a) {\n        List<Integer> prime_numbers = new ArrayList<>();\n        for (int i = 2; i < 100; i++) {\n            if (isPrime(i)) {\n                prime_numbers.add(i);\n            }\n        }\n\n        for (int i : prime_numbers) {\n            for (int j : prime_numbers) {\n                for (int k : prime_numbers) {\n                    if (i * j * k == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/76", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_simple_power(int x, int n) {\n        int power = 0;\n        int result = 1;\n        while (result <= x) {\n            if (result == x) {\n                return true;\n            }\n            power = power + 1;\n            result = (int) Math.pow(n, power);\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/77", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean iscube(int a) {\n        int cubeRoot = (int) Math.round(Math.cbrt(Math.abs(a)));\n        return cubeRoot * cubeRoot * cubeRoot == Math.abs(a);\n    }\n}\n"}
{"task_id": "Java/78", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int hex_key(String num) {\n        int count = 0;\n        for (char c : num.toCharArray()) {\n            switch (c) {\n                case '2':\n                case '3':\n                case '5':\n                case '7':\n                case 'B':\n                case 'D':\n                    count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/79", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String decimal_to_binary(int decimal) {\n        String binary = Integer.toBinaryString(decimal);\n        return \"db\" + binary + \"db\";\n    }\n}\n"}
{"task_id": "Java/80", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_happy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i+1) && s.charAt(i+1) == s.charAt(i+2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/81", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}\n"}
{"task_id": "Java/82", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean prime_length(String string) {\n        int length = string.length();\n        return is_prime(length);\n    }\n\n    public boolean is_prime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/83", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int starts_one_ends(int n) {\n        // Calculate total number of n-digit numbers\n        int total_numbers = 9 * (int)Math.pow(10, n-1);\n        \n        // Calculate numbers that do not start with 1\n        int no_start_one = 8 * (int)Math.pow(10, n-1);\n        \n        // Calculate numbers that do not end with 1\n        int no_end_one = 9 * (int)Math.pow(10, n-1) - 1;\n        \n        // Calculate numbers that do not start or end with 1\n        int no_start_or_end_one = no_start_one - (no_end_one - total_numbers);\n        \n        // Return the count of numbers that start or end with 1\n        return total_numbers - no_start_or_end_one;\n    }\n}\n"}
{"task_id": "Java/84", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(int N) {\n        int sum = 0;\n        while (N > 0) {\n            sum += N % 10;\n            N /= 10;\n        }\n        return Integer.toBinaryString(sum);\n    }\n}\n"}
{"task_id": "Java/85", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 != 0) { // Check if index is odd\n                if (lst.get(i) % 2 == 0) { // Check if element is even\n                    sum += lst.get(i);\n                }\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/86", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String anti_shuffle(String s) {\n        String[] words = s.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            char[] chars = words[i].toCharArray();\n            Arrays.sort(chars);\n            words[i] = new String(chars);\n        }\n        return String.join(\" \", words);\n    }\n}\n"}
{"task_id": "Java/87", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    List<Integer> coord = new ArrayList<>();\n                    coord.add(i);\n                    coord.add(j);\n                    result.add(coord);\n                }\n            }\n        }\n        Collections.sort(result, (a, b) -> {\n            if (a.get(0).equals(b.get(0))) {\n                return b.get(1).compareTo(a.get(1));\n            } else {\n                return a.get(0).compareTo(b.get(0));\n            }\n        });\n        return result;\n    }\n}\n"}
{"task_id": "Java/88", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> array) {\n        // Create a copy of the given array to avoid modifying it\n        List<Integer> copiedArray = new ArrayList<>(array);\n        \n        // Check if the array is empty\n        if (copiedArray.isEmpty()) {\n            return copiedArray;\n        }\n        \n        // Calculate the sum of the first and last index values\n        int sum = copiedArray.get(0) + copiedArray.get(copiedArray.size() - 1);\n        \n        // Sort the array in ascending order if the sum is odd\n        if (sum % 2 != 0) {\n            Collections.sort(copiedArray);\n        } \n        // Sort the array in descending order if the sum is even\n        else {\n            Collections.sort(copiedArray, Collections.reverseOrder());\n        }\n        \n        return copiedArray;\n    }\n}\n"}
{"task_id": "Java/89", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encrypt(String s) {\n        StringBuilder encrypted = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                char base = Character.isUpperCase(c) ? 'A' : 'a';\n                encrypted.append((char) ((c - base + 4) % 26 + base));\n            } else {\n                encrypted.append(c);\n            }\n        }\n        return encrypted.toString();\n    }\n}\n"}
{"task_id": "Java/90", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        // Check if the list is empty\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n\n        // Remove duplicates from the list\n        Set<Integer> set = new HashSet<>(lst);\n\n        // Check if the set has less than 2 elements\n        if (set.size() < 2) {\n            return Optional.empty();\n        }\n\n        // Sort the set in ascending order\n        List<Integer> sortedList = new ArrayList<>(set);\n        Collections.sort(sortedList);\n\n        // Return the second smallest element\n        return Optional.of(sortedList.get(1));\n    }\n}\n"}
{"task_id": "Java/91", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int is_bored(String S) {\n        String[] sentences = S.replaceAll(\"\\\\?\", \".\").replaceAll(\"!\",\".\").split(\"\\\\.\");\n        int boredom_count = 0;\n        for (String sentence : sentences) {\n            if (!sentence.isEmpty() && sentence.trim().startsWith(\"I\")) {\n                boredom_count++;\n            }\n        }\n        return boredom_count;\n    }\n}\n"}
{"task_id": "Java/92", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean any_int(Object x, Object y, Object z) {\n        // Check if all numbers are integers\n        if (!(x instanceof Integer) || !(y instanceof Integer) || !(z instanceof Integer)) {\n            return false;\n        }\n        \n        // Check if one of the numbers is equal to the sum of the other two\n        if ((int)x + (int)y == (int)z || (int)x + (int)z == (int)y || (int)y + (int)z == (int)x) {\n            return true;\n        }\n        \n        return false;\n    }\n}\n"}
{"task_id": "Java/93", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encode(String message) {\n        StringBuilder encodedMessage = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (isVowel(c)) {\n                encodedMessage.append(getNextVowel(c));\n            } else {\n                encodedMessage.append(c);\n            }\n            if (Character.isUpperCase(c)) {\n                encodedMessage.setCharAt(encodedMessage.length() - 1, Character.toLowerCase(encodedMessage.charAt(encodedMessage.length() - 1)));\n            } else {\n                encodedMessage.setCharAt(encodedMessage.length() - 1, Character.toUpperCase(encodedMessage.charAt(encodedMessage.length() - 1)));\n            }\n        }\n        return encodedMessage.toString();\n    }\n\n    private boolean isVowel(char c) {\n        String vowels = \"aeiouAEIOU\";\n        return vowels.indexOf(c) != -1;\n    }\n\n    private char getNextVowel(char c) {\n        String vowels = \"aeiouAEIOU\";\n        int index = vowels.indexOf(c);\n        if (index == -1) {\n            return c;\n        }\n        index = (index + 2) % vowels.length();\n        return vowels.charAt(index);\n    }\n}\n"}
{"task_id": "Java/94", "generation": "import java.util.*;\n\nclass Solution {\n    public int skjkasdkd(List<Integer> lst) {\n        int maxPrime = 0;\n        for (int num : lst) {\n            if (isPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n        return sumOfDigits(maxPrime);\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/95", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String strKey = (String) key;\n            if (!strKey.equals(strKey.toLowerCase()) && !strKey.equals(strKey.toUpperCase())) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/96", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            boolean isPrime = true;\n            for (int j = 2; j <= Math.sqrt(i); j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                primes.add(i);\n            }\n            if (primes.size() == n) {\n                break;\n            }\n        }\n        return primes;\n    }\n}\n"}
{"task_id": "Java/97", "generation": "class Solution {\n    public int multiply(int a, int b) {\n        int unit_digit_a = Math.abs(a) % 10;\n        int unit_digit_b = Math.abs(b) % 10;\n        int product = unit_digit_a * unit_digit_b;\n        return product;\n    }\n}\n"}
{"task_id": "Java/98", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && isUppercaseVowel(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isUppercaseVowel(char c) {\n        return \"AEIOU\".indexOf(c) != -1;\n    }\n}\n"}
{"task_id": "Java/99", "generation": "class Solution {\n    public int closest_integer(String value) {\n        double num = Double.parseDouble(value);\n        double decimalPart = num - Math.floor(num);\n        if (decimalPart < 0.5) {\n            return (int) Math.floor(num);\n        } else if (decimalPart > 0.5) {\n            return (int) Math.ceil(num);\n        } else {\n            if (num > 0) {\n                return (int) Math.ceil(num);\n            } else {\n                return (int) Math.floor(num);\n            }\n        }\n    }\n}\n"}
{"task_id": "Java/100", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> levels = new ArrayList<>();\n        int current_level = n;\n        while (levels.size() < n) {\n            levels.add(current_level);\n            if (current_level % 2 == 0) {\n                current_level += 1;\n            } else {\n                current_level += 2;\n            }\n        }\n        return levels;\n    }\n}\n"}
{"task_id": "Java/101", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> words_string(String s) {\n        String[] wordsArray = s.split(\"[,\\\\s]+\");\n        return Arrays.asList(wordsArray);\n    }\n}\n"}
{"task_id": "Java/102", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int choose_num(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        if (x % 2 == 0) {\n            return x;\n        } else {\n            return y - 1;\n        }\n    }\n}\n"}
{"task_id": "Java/103", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object rounded_avg(int n, int m) {\n        if (n > m) {\n            return -1;\n        } else {\n            double average = (n + m) / 2.0;\n            int rounded_average = (int) Math.round(average);\n            return Integer.toBinaryString(rounded_average);\n        }\n    }\n}\n"}
{"task_id": "Java/104", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> unique_digits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        for (Integer num : x) {\n            String str = String.valueOf(num);\n            boolean has_even_digit = false;\n            for (char c : str.toCharArray()) {\n                int digit = Character.getNumericValue(c);\n                if (digit % 2 == 0) {\n                    has_even_digit = true;\n                    break;\n                }\n            }\n            if (!has_even_digit) {\n                result.add(num);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}\n"}
{"task_id": "Java/105", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> by_length(List<Integer> arr) {\n        // Filter the array to include only numbers between 1 and 9\n        List<Integer> filteredArr = new ArrayList<>();\n        for (Integer num : arr) {\n            if (num >= 1 && num <= 9) {\n                filteredArr.add(num);\n            }\n        }\n\n        // Sort the filtered array\n        Collections.sort(filteredArr);\n\n        // Reverse the sorted array\n        Collections.reverse(filteredArr);\n\n        // Create a map to map numbers to their corresponding names\n        Map<Integer, String> numToName = new HashMap<>();\n        numToName.put(1, \"One\");\n        numToName.put(2, \"Two\");\n        numToName.put(3, \"Three\");\n        numToName.put(4, \"Four\");\n        numToName.put(5, \"Five\");\n        numToName.put(6, \"Six\");\n        numToName.put(7, \"Seven\");\n        numToName.put(8, \"Eight\");\n        numToName.put(9, \"Nine\");\n\n        // Replace each number with its corresponding name\n        List<String> result = new ArrayList<>();\n        for (Integer num : filteredArr) {\n            result.add(numToName.get(num));\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/106", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int factorial = 1;\n                for (int j = 1; j <= i; j++) {\n                    factorial *= j;\n                }\n                result.add(factorial);\n            } else {\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/107", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> even_odd_palindrome(int n) {\n        int even_count = 0;\n        int odd_count = 0;\n\n        for (int i = 1; i <= n; i++) {\n            String str = String.valueOf(i);\n            StringBuilder sb = new StringBuilder(str);\n            String reverse = sb.reverse().toString();\n\n            if (str.equals(reverse)) {\n                if (i % 2 == 0) {\n                    even_count++;\n                } else {\n                    odd_count++;\n                }\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(even_count);\n        result.add(odd_count);\n        return result;\n    }\n}\n"}
{"task_id": "Java/108", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int count_nums(List<Integer> arr) {\n        int count = 0;\n        for (Integer num : arr) {\n            int sum = 0;\n            String str = String.valueOf(Math.abs(num));\n            for (char c : str.toCharArray()) {\n                sum += Character.getNumericValue(c);\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/109", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean move_one_ball(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        int n = arr.size();\n        List<Integer> sortedArr = new ArrayList<>(arr);\n        Collections.sort(sortedArr);\n\n        for (int i = 0; i < n; i++) {\n            boolean isSorted = true;\n            for (int j = 0; j < n; j++) {\n                if (!arr.get((i + j) % n).equals(sortedArr.get(j))) {\n                    isSorted = false;\n                    break;\n                }\n            }\n            if (isSorted) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/110", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int count_odd_in_lst1 = 0;\n        int count_even_in_lst2 = 0;\n\n        for (int element : lst1) {\n            if (element % 2 != 0) {\n                count_odd_in_lst1 += 1;\n            }\n        }\n\n        for (int element : lst2) {\n            if (element % 2 == 0) {\n                count_even_in_lst2 += 1;\n            }\n        }\n\n        if (count_odd_in_lst1 <= count_even_in_lst2) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}\n"}
{"task_id": "Java/111", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Map<String,Integer> histogram(String test) {\n        Map<String, Integer> letterCounts = new HashMap<>();\n        String[] letters = test.split(\" \");\n        \n        for (String letter : letters) {\n            if (letterCounts.containsKey(letter)) {\n                letterCounts.put(letter, letterCounts.get(letter) + 1);\n            } else {\n                letterCounts.put(letter, 1);\n            }\n        }\n        \n        int maxCount = Collections.max(letterCounts.values());\n        \n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : letterCounts.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/112", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Object> reverse_delete(String s, String c) {\n        // Create a StringBuilder to efficiently build the result string\n        StringBuilder result = new StringBuilder();\n        \n        // Iterate over each character in the string s\n        for (char ch : s.toCharArray()) {\n            // Check if the character is not in the string c\n            if (c.indexOf(ch) == -1) {\n                // If the character is not in c, append it to the result string\n                result.append(ch);\n            }\n        }\n        \n        // Convert the result StringBuilder to a string\n        String resultStr = result.toString();\n        \n        // Check if the result string is a palindrome\n        boolean isPalindrome = resultStr.equals(resultStr.reverse().toString());\n        \n        // Create a list to store the result string and the palindrome check\n        List<Object> list = new ArrayList<>();\n        list.add(resultStr);\n        list.add(isPalindrome);\n        \n        // Return the list\n        return list;\n    }\n}\n"}
{"task_id": "Java/113", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            int count = 0;\n            for (char c : lst.get(i).toCharArray()) {\n                if ((c - '0') % 2 != 0) {\n                    count++;\n                }\n            }\n            String str = \"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\";\n            result.add(str);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/114", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int minSubArraySum(List<Integer> nums) {\n        int min_sum = Integer.MAX_VALUE;\n        int current_sum = 0;\n        for (int num : nums) {\n            current_sum += num;\n            if (current_sum < min_sum) {\n                min_sum = current_sum;\n            }\n            if (current_sum > 0) {\n                current_sum = 0;\n            }\n        }\n        return min_sum;\n    }\n}\n"}
{"task_id": "Java/115", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        int total_times = 0;\n        for (List<Integer> well : grid) {\n            int water_units = 0;\n            for (int unit : well) {\n                water_units += unit;\n            }\n            total_times += (water_units + capacity - 1) / capacity;\n        }\n        return total_times;\n    }\n}\n"}
{"task_id": "Java/116", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> arr) {\n        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int onesA = Integer.bitCount(Math.abs(a));\n                int onesB = Integer.bitCount(Math.abs(b));\n                if (onesA == onesB) {\n                    return a - b;\n                } else {\n                    return onesA - onesB;\n                }\n            }\n        });\n        return arr;\n    }\n}\n"}
{"task_id": "Java/117", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> select_words(String s, int n) {\n        List<String> result = new ArrayList<>();\n        String[] words = s.split(\"\\\\s+\");\n        for (String word : words) {\n            int consonantCount = 0;\n            for (char c : word.toLowerCase().toCharArray()) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                    consonantCount++;\n                }\n            }\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/118", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String get_closest_vowel(String word) {\n        String vowels = \"AEIOUaeiou\";\n        for (int i = word.length() - 1; i > 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) != -1) {\n                if (vowels.indexOf(word.charAt(i - 1)) == -1 && vowels.indexOf(word.charAt(i + 1)) == -1) {\n                    return String.valueOf(word.charAt(i));\n                }\n            }\n        }\n        return \"\";\n    }\n}\n"}
{"task_id": "Java/119", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String match_parens(List<String> lst) {\n        int open_count1 = 0, close_count1 = 0, open_count2 = 0, close_count2 = 0;\n        for (char c : lst.get(0).toCharArray()) {\n            if (c == '(') {\n                open_count1++;\n            } else {\n                close_count1++;\n            }\n        }\n        for (char c : lst.get(1).toCharArray()) {\n            if (c == '(') {\n                open_count2++;\n            } else {\n                close_count2++;\n            }\n        }\n        if (open_count1 + open_count2 == close_count1 + close_count2) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}\n"}
{"task_id": "Java/120", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Create a copy of the original list to avoid modifying it\n        List<Integer> sortedArr = new ArrayList<>(arr);\n        \n        // Sort the copied list in ascending order\n        Collections.sort(sortedArr);\n        \n        // Return the last k elements of the sorted list\n        return sortedArr.subList(sortedArr.size() - k, sortedArr.size());\n    }\n}\n"}
{"task_id": "Java/121", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/122", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add_elements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (String.valueOf(Math.abs(arr.get(i))).length() <= 2) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/123", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> get_odd_collatz(int n) {\n        List<Integer> odd_numbers = new ArrayList<>();\n        int current = n;\n        while (current != 1) {\n            if (current % 2 != 0) {\n                odd_numbers.add(current);\n            }\n            if (current % 2 == 0) {\n                current = current / 2;\n            } else {\n                current = current * 3 + 1;\n            }\n        }\n        odd_numbers.add(1);\n        Collections.sort(odd_numbers);\n        return odd_numbers;\n    }\n}\n"}
{"task_id": "Java/124", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean valid_date(String date) {\n        // Check if the date string is not empty\n        if (date.isEmpty()) {\n            return false;\n        }\n\n        // Split the date string into month, day, and year\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n            return false;\n        }\n\n        int month, day, year;\n        try {\n            month = Integer.parseInt(parts[0]);\n            day = Integer.parseInt(parts[1]);\n            year = Integer.parseInt(parts[2]);\n        } catch (NumberFormatException e) {\n            return false;\n        }\n\n        // Check if the month is valid\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        // Check if the day is valid based on the month\n        if (month == 2) {\n            if (day < 1 || day > 29) {\n                return false;\n            }\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return false;\n            }\n        } else {\n            if (day < 1 || day > 31) {\n                return false;\n            }\n        }\n\n        // If all checks pass, the date is valid\n        return true;\n    }\n}\n"}
{"task_id": "Java/125", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object split_words(String txt) {\n        // First, try to split the string on whitespace\n        String[] words = txt.split(\"\\\\s+\");\n        \n        // If the resulting array has more than one element, return it\n        if (words.length > 1) {\n            return Arrays.asList(words);\n        }\n        \n        // If not, try to split the string on commas\n        words = txt.split(\",\");\n        \n        // If the resulting array has more than one element, return it\n        if (words.length > 1) {\n            return Arrays.asList(words);\n        }\n        \n        // If not, count the number of lower-case letters with odd order in the alphabet\n        int count = 0;\n        for (char c : txt.toCharArray()) {\n            if (Character.isLowerCase(c) && (c - 'a') % 2 != 0) {\n                count++;\n            }\n        }\n        \n        // Return the count\n        return count;\n    }\n}\n"}
{"task_id": "Java/126", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_sorted(List<Integer> lst) {\n        // Create a hashmap to store the frequency of each number\n        HashMap<Integer, Integer> freqMap = new HashMap<>();\n        \n        // Iterate through the list to populate the hashmap\n        for (int num : lst) {\n            if (freqMap.containsKey(num)) {\n                freqMap.put(num, freqMap.get(num) + 1);\n            } else {\n                freqMap.put(num, 1);\n            }\n        }\n        \n        // Check if any number appears more than twice\n        for (int freq : freqMap.values()) {\n            if (freq > 2) {\n                return false;\n            }\n        }\n        \n        // Check if the list is sorted in ascending order\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n        }\n        \n        // If all checks pass, return true\n        return true;\n    }\n}\n"}
{"task_id": "Java/127", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n        int length = end - start + 1;\n        \n        if (length <= 0) {\n            return \"NO\";\n        }\n        \n        if (length == 1) {\n            return \"NO\";\n        }\n        \n        boolean isPrime = true;\n        for (int i = 2; i * i <= length; i++) {\n            if (length % i == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        \n        return isPrime ? \"YES\" : \"NO\";\n    }\n}\n"}
{"task_id": "Java/128", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int sum_of_magnitudes = 0;\n        int product_of_signs = 1;\n\n        for (int num : arr) {\n            sum_of_magnitudes += Math.abs(num);\n            product_of_signs *= Integer.signum(num);\n        }\n\n        return Optional.of(sum_of_magnitudes * product_of_signs);\n    }\n}\n"}
{"task_id": "Java/129", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int[][] directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> {\n            for (int i = 0; i < k; i++) {\n                if (a[i] != b[i]) return a[i] - b[i];\n            }\n            return 0;\n        });\n        boolean[][][] visited = new boolean[n][n][k + 1];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                int[] path = new int[k];\n                Arrays.fill(path, grid.get(i).get(j));\n                pq.offer(new int[]{i, j, 1, grid.get(i).get(j)});\n                visited[i][j][1] = true;\n            }\n        }\n        while (!pq.isEmpty()) {\n            int[] current = pq.poll();\n            int x = current[0], y = current[1], len = current[2];\n            if (len == k) {\n                List<Integer> result = new ArrayList<>();\n                for (int i = 3; i < current.length; i++) {\n                    result.add(current[i]);\n                }\n                return result;\n            }\n            for (int[] direction : directions) {\n                int nx = x + direction[0], ny = y + direction[1];\n                if (nx >= 0 && nx < n && ny >= 0 && ny < n && !visited[nx][ny][len + 1]) {\n                    int[] newPath = Arrays.copyOf(current, current.length + 1);\n                    newPath[newPath.length - 1] = grid.get(nx).get(ny);\n                    pq.offer(newPath);\n                    visited[nx][ny][len + 1] = true;\n                }\n            }\n        }\n        return new ArrayList<>();\n    }\n}\n"}
{"task_id": "Java/130", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n        List<Integer> tribonacci = new ArrayList<>();\n        tribonacci.add(1);\n        if (n == 0) return tribonacci;\n        tribonacci.add(3);\n        if (n == 1) return tribonacci;\n        tribonacci.add(2);\n        if (n == 2) return tribonacci;\n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                tribonacci.add(1 + i / 2);\n            } else {\n                tribonacci.add(tribonacci.get(i - 2) + tribonacci.get(i - 3) + tribonacci.get(i - 1));\n            }\n        }\n        return tribonacci;\n    }\n}\n"}
{"task_id": "Java/131", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digits(int n) {\n        int product = 1;\n        String str = Integer.toString(n);\n        for (char c : str.toCharArray()) {\n            int digit = Character.getNumericValue(c);\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n        }\n        return product == 1 ? 0 : product;\n    }\n}\n"}
{"task_id": "Java/132", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean is_nested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (!stack.isEmpty()) {\n                    stack.pop();\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/133", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_squares(List<Double> lst) {\n        int sum = 0;\n        for (double number : lst) {\n            int rounded_number = (int) Math.ceil(number);\n            int squared_number = rounded_number * rounded_number;\n            sum += squared_number;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/134", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        if (txt.isEmpty()) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar)) {\n            int lastSpaceIndex = txt.lastIndexOf(' ');\n            if (lastSpaceIndex == -1 || lastSpaceIndex != txt.length() - 2) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/135", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int can_arrange(List<Integer> arr) {\n        int index = -1;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i-1)) {\n                index = i;\n            }\n        }\n        return index;\n    }\n}\n"}
{"task_id": "Java/136", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        Optional<Integer> largestNegative = Optional.empty();\n        Optional<Integer> smallestPositive = Optional.empty();\n\n        for (Integer num : lst) {\n            if (num < 0) {\n                if (!largestNegative.isPresent() || num > largestNegative.get()) {\n                    largestNegative = Optional.of(num);\n                }\n            } else if (num > 0) {\n                if (!smallestPositive.isPresent() || num < smallestPositive.get()) {\n                    smallestPositive = Optional.of(num);\n                }\n            }\n        }\n\n        List<Optional<Integer>> result = new ArrayList<>();\n        result.add(largestNegative);\n        result.add(smallestPositive);\n        return result;\n    }\n}\n"}
{"task_id": "Java/137", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Object> compare_one(Object a, Object b) {\n        // Convert string representations of numbers to doubles\n        double aValue = convertToDouble(a);\n        double bValue = convertToDouble(b);\n\n        // If the values are equal, return an empty Optional\n        if (aValue == bValue) {\n            return Optional.empty();\n        }\n\n        // Return the larger value in its original type\n        if (aValue > bValue) {\n            return Optional.of(a);\n        } else {\n            return Optional.of(b);\n        }\n    }\n\n    private double convertToDouble(Object value) {\n        if (value instanceof String) {\n            // Replace comma with dot if necessary\n            String strValue = ((String) value).replace(',', '.');\n            return Double.parseDouble(strValue);\n        } else if (value instanceof Integer || value instanceof Double) {\n            return ((Number) value).doubleValue();\n        } else {\n            throw new UnsupportedOperationException(\"Unsupported data type\");\n        }\n    }\n}\n"}
{"task_id": "Java/138", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_equal_to_sum_even(int n) {\n        for (int i = 2; i <= n / 4; i += 2) {\n            if (can_be_expressed_as_sum_of_three_even_numbers(n - i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public boolean can_be_expressed_as_sum_of_three_even_numbers(int x) {\n        for (int j = 2; j <= x / 3; j += 2) {\n            for (int k = j; k <= (x - j) / 2; k += 2) {\n                if ((x - j - k) % 2 == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/139", "generation": "class Solution {\n    public long special_factorial(int n) {\n        long result = 1;\n        for (int i = n; i > 0; i--) {\n            long factorial = 1;\n            for (int j = i; j > 0; j--) {\n                factorial *= j;\n            }\n            result *= factorial;\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/140", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String fix_spaces(String text) {\n        StringBuilder result = new StringBuilder();\n        int spaceCount = 0;\n        for (char c : text.toCharArray()) {\n            if (c == ' ') {\n                spaceCount++;\n            } else {\n                if (spaceCount > 2) {\n                    result.append('-');\n                } else if (spaceCount > 0) {\n                    for (int i = 0; i < spaceCount; i++) {\n                        result.append('_');\n                    }\n                }\n                result.append(c);\n                spaceCount = 0;\n            }\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/141", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String file_name_check(String file_name) {\n        // Check if the file name contains exactly one dot\n        if (file_name.indexOf('.') != file_name.lastIndexOf('.')) {\n            return \"No\";\n        }\n\n        // Split the file name into two parts: before and after the dot\n        String[] parts = file_name.split(\"\\\\.\");\n\n        // Check if the substring before the dot is not empty and starts with a latin alphabet letter\n        if (parts[0].isEmpty() || !Character.isLetter(parts[0].charAt(0))) {\n            return \"No\";\n        }\n\n        // Check if the substring after the dot is one of the allowed extensions\n        if (!Arrays.asList(\"txt\", \"exe\", \"dll\").contains(parts[1])) {\n            return \"No\";\n        }\n\n        // Count the number of digits in the file name\n        int digitCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n        }\n\n        // Check if there are more than three digits in the file name\n        if (digitCount > 3) {\n            return \"No\";\n        }\n\n        // If all conditions are met, return \"Yes\"\n        return \"Yes\";\n    }\n}\n"}
{"task_id": "Java/142", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_squares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/143", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String words_in_sentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.append(word).append(\" \");\n            }\n        }\n        return result.toString().trim();\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/144", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean simplify(String x, String n) {\n        // Split the input strings into numerators and denominators\n        String[] x_parts = x.split(\"/\");\n        String[] n_parts = n.split(\"/\");\n\n        int x_num = Integer.parseInt(x_parts[0]);\n        int x_den = Integer.parseInt(x_parts[1]);\n        int n_num = Integer.parseInt(n_parts[0]);\n        int n_den = Integer.parseInt(n_parts[1]);\n\n        // Multiply the numerators and denominators\n        long result_num = (long) x_num * n_num;\n        long result_den = (long) x_den * n_den;\n\n        // Check if the resulting fraction can be simplified to a whole number\n        if (result_den == 1 || result_num % result_den == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"}
{"task_id": "Java/145", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> order_by_points(List<Integer> nums) {\n        List<Pair> pairs = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = sumOfDigits(nums.get(i));\n            pairs.add(new Pair(nums.get(i), sum, i));\n        }\n        Collections.sort(pairs, (a, b) -> {\n            if (a.sum == b.sum) {\n                return a.index - b.index;\n            } else {\n                return a.sum - b.sum;\n            }\n        });\n        List<Integer> result = new ArrayList<>();\n        for (Pair pair : pairs) {\n            result.add(pair.num);\n        }\n        return result;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        while (num != 0) {\n            sum += Math.abs(num % 10);\n            num /= 10;\n        }\n        return sum;\n    }\n\n    private class Pair {\n        int num;\n        int sum;\n        int index;\n\n        public Pair(int num, int sum, int index) {\n            this.num = num;\n            this.sum = sum;\n            this.index = index;\n        }\n    }\n}\n"}
{"task_id": "Java/146", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (Integer num : nums) {\n            if (num > 10) {\n                int lastDigit = Math.abs(num % 10);\n                String strNum = String.valueOf(Math.abs(num));\n                int firstDigit = strNum.charAt(0) - '0';\n                if (isOdd(lastDigit) && isOdd(firstDigit)) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    private boolean isOdd(int digit) {\n        return digit % 2 != 0;\n    }\n}\n"}
{"task_id": "Java/147", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int get_max_triples(int n) {\n        int count = 0;\n        int[] a = new int[n];\n        int[] remainder_count = new int[3];\n        for (int i = 1; i <= n; i++) {\n            a[i-1] = i * i - i + 1;\n            int remainder = a[i-1] % 3;\n            remainder_count[remainder]++;\n        }\n        count += remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2) / 6;\n        count += remainder_count[1] * remainder_count[1] * (remainder_count[1] - 1) / 6;\n        count += remainder_count[2] * remainder_count[2] * (remainder_count[2] - 1) / 6;\n        count += remainder_count[0] * remainder_count[1] * remainder_count[2];\n        return count;\n    }\n}\n"}
{"task_id": "Java/148", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> bf(String planet1, String planet2) {\n        String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        List<String> result = new ArrayList<>();\n        \n        // Check if both planets are valid\n        if (!isValidPlanet(planet1, planets) || !isValidPlanet(planet2, planets)) {\n            return result;\n        }\n        \n        // Find the indices of the two planets\n        int index1 = findIndex(planet1, planets);\n        int index2 = findIndex(planet2, planets);\n        \n        // Swap indices if necessary\n        if (index1 > index2) {\n            int temp = index1;\n            index1 = index2;\n            index2 = temp;\n        }\n        \n        // Add planets between the two indices to the result\n        for (int i = index1 + 1; i < index2; i++) {\n            result.add(planets[i]);\n        }\n        \n        return result;\n    }\n    \n    // Helper function to check if a planet is valid\n    private boolean isValidPlanet(String planet, String[] planets) {\n        for (String p : planets) {\n            if (p.equals(planet)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    // Helper function to find the index of a planet\n    private int findIndex(String planet, String[] planets) {\n        for (int i = 0; i < planets.length; i++) {\n            if (planets[i].equals(planet)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}\n"}
{"task_id": "Java/149", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> sorted_list_sum(List<String> lst) {\n        // Filter out strings with odd lengths\n        List<String> evenLengthStrings = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                evenLengthStrings.add(s);\n            }\n        }\n\n        // Sort the list by length and then alphabetically\n        Collections.sort(evenLengthStrings, new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                if (s1.length() == s2.length()) {\n                    return s1.compareTo(s2);\n                } else {\n                    return Integer.compare(s1.length(), s2.length());\n                }\n            }\n        });\n\n        return evenLengthStrings;\n    }\n}\n"}
{"task_id": "Java/150", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int x_or_y(int n, int x, int y) {\n        if (n < 2) {\n            return y;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n"}
{"task_id": "Java/151", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int double_the_difference(List<Object> lst) {\n        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (int) obj;\n                if (num > 0 && num % 2 != 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/152", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            int difference = Math.abs(game.get(i) - guess.get(i));\n            result.add(difference);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/153", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        String strongest_extension = extensions.get(0);\n        int max_strength = calculateStrength(strongest_extension);\n        \n        for (int i = 1; i < extensions.size(); i++) {\n            int strength = calculateStrength(extensions.get(i));\n            if (strength > max_strength) {\n                max_strength = strength;\n                strongest_extension = extensions.get(i);\n            }\n        }\n        \n        return class_name + \".\" + strongest_extension;\n    }\n    \n    private int calculateStrength(String extension) {\n        int cap = 0;\n        int sm = 0;\n        \n        for (char c : extension.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                cap++;\n            } else if (Character.isLowerCase(c)) {\n                sm++;\n            }\n        }\n        \n        return cap - sm;\n    }\n}\n"}
{"task_id": "Java/154", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean cycpattern_check(String a, String b) {\n        String concat = a + a;\n        for (int i = 0; i < b.length(); i++) {\n            String rotation = b.substring(i) + b.substring(0, i);\n            if (concat.contains(rotation)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/155", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> even_odd_count(int num) {\n        int even_count = 0;\n        int odd_count = 0;\n        String num_str = String.valueOf(Math.abs(num));\n        for (char digit : num_str.toCharArray()) {\n            int digit_int = Character.getNumericValue(digit);\n            if (digit_int % 2 == 0) {\n                even_count++;\n            } else {\n                odd_count++;\n            }\n        }\n        List<Integer> result = new ArrayList<>();\n        result.add(even_count);\n        result.add(odd_count);\n        return result;\n    }\n}\n"}
{"task_id": "Java/156", "generation": "import java.util.*;\n\nclass Solution {\n    public String int_to_mini_roman(int number) {\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] romanNumerals = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        StringBuilder result = new StringBuilder();\n        \n        for (int i = 0; i < values.length; i++) {\n            while (number >= values[i]) {\n                number -= values[i];\n                result.append(romanNumerals[i]);\n            }\n        }\n        \n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/157", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean right_angle_triangle(int a, int b, int c) {\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        return (sides[0]*sides[0] + sides[1]*sides[1] == sides[2]*sides[2]);\n    }\n}\n"}
{"task_id": "Java/158", "generation": "import java.util.*;\n\nclass Solution {\n    public String find_max(List<String> words) {\n        int max_unique_chars = 0;\n        String result = \"\";\n\n        for (String word : words) {\n            Set<Character> unique_chars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                unique_chars.add(c);\n            }\n\n            if (unique_chars.size() > max_unique_chars) {\n                max_unique_chars = unique_chars.size();\n                result = word;\n            } else if (unique_chars.size() == max_unique_chars) {\n                if (word.compareTo(result) < 0) {\n                    result = word;\n                }\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/159", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> eat(int number, int need, int remaining) {\n        int totalEaten = number + Math.min(need, remaining);\n        int carrotsLeft = remaining - Math.min(need, remaining);\n        List<Integer> result = new ArrayList<>();\n        result.add(totalEaten);\n        result.add(carrotsLeft);\n        return result;\n    }\n}\n"}
{"task_id": "Java/160", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        int result = operand.get(0);\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int num = operand.get(i + 1);\n            switch (op) {\n                case \"+\":\n                    result += num;\n                    break;\n                case \"-\":\n                    result -= num;\n                    break;\n                case \"*\":\n                    result *= num;\n                    break;\n                case \"/\":\n                    result /= num;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, num);\n                    break;\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/161", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(String s) {\n        boolean hasLetter = false;\n        StringBuilder result = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                hasLetter = true;\n                result.append(Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c));\n            } else {\n                result.append(c);\n            }\n        }\n        if (!hasLetter) {\n            result.reverse();\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/162", "generation": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] hashBytes = md.digest(text.getBytes());\n        BigInteger no = new BigInteger(1, hashBytes);\n        String hashtext = no.toString(16);\n        while (hashtext.length() < 32) {\n            hashtext = \"0\" + hashtext;\n        }\n        return Optional.of(hashtext);\n    }\n}\n"}
{"task_id": "Java/163", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> generate_integers(int a, int b) {\n        int min_val = Math.min(a, b);\n        int max_val = Math.max(a, b);\n        List<Integer> result = new ArrayList<>();\n        for (int i = min_val; i <= max_val; i++) {\n            if (i < 10 && i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}\n"}
