{"task_id": "CPP/94", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <algorithm>\n\n// Function to check if a number is prime\nbool isPrime(int num) {\n    if (num <= 1) return false;\n    for (int i = 2; i * i <= num; i++) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\n// Function to calculate the sum of digits of a number\nint sumOfDigits(int num) {\n    int sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}\n\nint skjkasdkd(vector<int> lst) {\n    // Find the largest prime number in the list\n    int maxPrime = 0;\n    for (int num : lst) {\n        if (isPrime(num) && num > maxPrime) {\n            maxPrime = num;\n        }\n    }\n\n    // If no prime number is found, return 0\n    if (maxPrime == 0) return 0;\n\n    // Return the sum of digits of the largest prime number\n    return sumOfDigits(maxPrime);\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}) == 10);\n    assert (skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}) == 25);\n    assert (skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}) == 13);\n    assert (skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}) == 11);\n    assert (skjkasdkd({0,81,12,3,1,21}) == 3);\n    assert (skjkasdkd({0,8,1,2,1,7}) == 7);\n    assert (skjkasdkd({8191}) == 19);\n    assert (skjkasdkd({8191, 123456, 127, 7}) == 19);\n    assert (skjkasdkd({127, 97, 8192}) == 10);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/15", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <string>\nusing namespace std;\n\n/**\n * Returns a string containing space-delimited numbers starting from 0 up to n inclusive.\n *\n * @param n The upper limit of the sequence (inclusive).\n * @return A string containing the sequence of numbers.\n */\nstring string_sequence(int n) {\n    string result = \"\";\n    for (int i = 0; i <= n; i++) {\n        result += to_string(i);\n        if (i < n) {\n            result += \" \";\n        }\n    }\n    return result;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_sequence(0) == \"0\");\n    assert (string_sequence(3) == \"0 1 2 3\");\n     assert (string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/102", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n/**\n * Returns the biggest even integer number in the range [x, y] inclusive.\n * If no such number exists, returns -1.\n *\n * @param x The start of the range (inclusive).\n * @param y The end of the range (inclusive).\n * @return The biggest even integer number in the range, or -1 if none exists.\n */\nint choose_num(int x, int y) {\n    // Check if the range is valid (x <= y)\n    if (x > y) {\n        return -1;\n    }\n\n    // Start from the end of the range and work backwards\n    for (int i = y; i >= x; i--) {\n        // Check if the current number is even\n        if (i % 2 == 0) {\n            return i;\n        }\n    }\n\n    // If no even number is found, return -1\n    return -1;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (choose_num(12, 15) == 14);\n    assert (choose_num(13, 12) == -1);\n    assert (choose_num(33, 12354) == 12354);\n    assert (choose_num(5234, 5233) == -1);\n    assert (choose_num(6, 29) == 28);\n    assert (choose_num(27, 10) == -1);\n    assert (choose_num(7, 7) == -1);\n    assert (choose_num(546, 546) == 546);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/61", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <string>\nusing namespace std;\n\n/**\n * Returns true if every opening bracket in the input string has a corresponding closing bracket.\n *\n * @param brackets A string of '(' and ')'.\n * @return True if the bracketing is correct, false otherwise.\n */\nbool correct_bracketing(string brackets) {\n    int balance = 0; // Keep track of the balance of opening and closing brackets\n\n    for (char c : brackets) {\n        if (c == '(') {\n            balance++; // Increment balance when we see an opening bracket\n        } else if (c == ')') {\n            balance--; // Decrement balance when we see a closing bracket\n            if (balance < 0) {\n                return false; // If balance goes negative, there's an extra closing bracket\n            }\n        }\n    }\n\n    return balance == 0; // Return true if balance is zero, meaning every opening bracket has a corresponding closing bracket\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"()\"));\n    assert (correct_bracketing(\"(()())\"));\n    assert (correct_bracketing(\"()()(()())()\"));\n    assert (correct_bracketing(\"()()((()()())())(()()(()))\"));\n    assert (not (correct_bracketing(\"((()())))\")));\n    assert (not (correct_bracketing(\")(()\")));\n    assert (not (correct_bracketing(\"(\")));\n    assert (not (correct_bracketing(\"((((\")));\n    assert (not (correct_bracketing(\")\")));\n    assert (not (correct_bracketing(\"(()\")));\n    assert (not (correct_bracketing(\"()()(()())())(()\")));\n    assert (not (correct_bracketing(\"()()(()())()))()\")));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/25", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <vector>\nusing namespace std;\n\n/**\n * Returns a vector of prime factors of the given integer in the order from smallest to largest.\n * Each factor is repeated the number of times it appears in the factorization.\n * The input number is equal to the product of all factors.\n *\n * @param n The input integer to factorize.\n * @return A vector of prime factors.\n */\nvector<int> factorize(int n) {\n    vector<int> factors;\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n}\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(factorize(2) , {2}));\n    assert (issame(factorize(4) , {2, 2}));\n    assert (issame(factorize(8) , {2, 2, 2}));\n     assert (issame(factorize(3 * 19) , {3, 19}));\n    assert (issame(factorize(3 * 19 * 3 * 19) , {3, 3, 19, 19})); \n    assert (issame(factorize(3 * 19 * 3 * 19 * 3 * 19) , {3, 3, 3, 19, 19, 19})); \n    assert (issame(factorize(3 * 19 * 19 * 19) , {3, 19, 19, 19})); \n    assert (issame(factorize(3 * 2 * 3) , {2, 3, 3}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/33", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n/**\n * This function takes a vector l and returns a vector l' such that\n * l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n * to the values of the corresponding indicies of l, but sorted in ascending order.\n */\nvector<int> sort_third(vector<int> l) {\n    // Create a new vector to store the values at indices divisible by 3\n    vector<int> third_values;\n    \n    // Iterate over the input vector and extract values at indices divisible by 3\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            third_values.push_back(l[i]);\n        }\n    }\n    \n    // Sort the extracted values in ascending order\n    sort(third_values.begin(), third_values.end());\n    \n    // Create a new vector to store the result\n    vector<int> result = l;\n    \n    // Iterate over the input vector and replace values at indices divisible by 3 with the sorted values\n    int j = 0;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            result[i] = third_values[j++];\n        }\n    }\n    \n    return result;\n}\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_third({1, 2, 3}) , sort_third({1, 2, 3})));\n    assert (issame(sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}) , sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})));\n    assert (issame(sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}) , sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10})));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2}) , {2, 6, 3, 4, 8, 9, 5}));\n    assert (issame(sort_third({5, 8, 3, 4, 6, 9, 2}) , {2, 8, 3, 4, 6, 9, 5}));\n    assert (issame(sort_third({5, 6, 9, 4, 8, 3, 2}) , {2, 6, 9, 4, 8, 3, 5}));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2, 1}) , {2, 6, 3, 4, 8, 9, 5, 1}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/116", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\nvector<int> sort_array(vector<int> arr) {\n    // Use a lambda function as the comparison function for sorting\n    sort(arr.begin(), arr.end(), [](int a, int b) {\n        // Calculate the number of ones in the binary representation of a and b\n        int ones_a = __builtin_popcount(abs(a));\n        int ones_b = __builtin_popcount(abs(b));\n\n        // If the number of ones is the same, sort based on decimal value\n        if (ones_a == ones_b) {\n            return a < b;\n        }\n\n        // Otherwise, sort based on the number of ones\n        return ones_a < ones_b;\n    });\n\n    return arr;\n}\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({1,5,2,3,4}) , {1, 2, 4, 3, 5}));\n    assert (issame(sort_array({-2,-3,-4,-5,-6}) , {-4, -2, -6, -5, -3}));\n    assert (issame(sort_array({1,0,2,3,4}) , {0, 1, 2, 4, 3}));\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({2,5,77,4,5,3,5,7,2,3,4}) , {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77}));\n    assert (issame(sort_array({3,6,44,12,32,5}) , {32, 3, 5, 6, 12, 44}));\n    assert (issame(sort_array({2,4,8,16,32}) , {2, 4, 8, 16, 32}));\n    assert (issame(sort_array({2,4,8,16,32}) , {2, 4, 8, 16, 32}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/10", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <string>\nusing namespace std;\n\n/**\n * Checks if a given string is a palindrome.\n *\n * @param str The input string to check.\n * @return True if the string is a palindrome, false otherwise.\n */\nbool is_palindrome(string str) {\n    // Create a reversed copy of the input string\n    string s(str.rbegin(), str.rend());\n    // Compare the original string with its reversed copy\n    return s == str;\n}\n\n/**\n * Finds the shortest palindrome that begins with a supplied string.\n *\n * Algorithm idea:\n * 1. Find the longest postfix of the supplied string that is a palindrome.\n * 2. Append to the end of the string the reverse of a string prefix that comes before the palindromic suffix.\n *\n * @param str The input string to make a palindrome.\n * @return The shortest palindrome that begins with the input string.\n */\nstring make_palindrome(string str) {\n    // Handle the edge case where the input string is empty\n    if (str.empty()) {\n        return \"\";\n    }\n\n    // Initialize variables to store the longest palindromic postfix and its length\n    string longest_palindromic_postfix = \"\";\n    int longest_palindromic_postfix_length = 0;\n\n    // Iterate over the input string to find the longest palindromic postfix\n    for (int i = str.length() - 1; i >= 0; --i) {\n        // Extract the postfix from the input string\n        string postfix = str.substr(i);\n        // Check if the postfix is a palindrome\n        if (is_palindrome(postfix)) {\n            // Update the longest palindromic postfix if the current postfix is longer\n            if (postfix.length() > longest_palindromic_postfix_length) {\n                longest_palindromic_postfix = postfix;\n                longest_palindromic_postfix_length = postfix.length();\n            }\n        }\n    }\n\n    // Find the prefix that comes before the longest palindromic postfix\n    string prefix = str.substr(0, str.length() - longest_palindromic_postfix_length);\n\n    // Reverse the prefix\n    string reversed_prefix(prefix.rbegin(), prefix.rend());\n\n    // Append the reversed prefix to the end of the input string\n    return str + reversed_prefix;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (make_palindrome(\"\") == \"\");\n    assert (make_palindrome(\"x\") == \"x\");\n     assert (make_palindrome(\"xyz\") == \"xyzyx\");\n     assert (make_palindrome(\"xyx\") == \"xyx\") ;\n     assert (make_palindrome(\"jerry\") == \"jerryrrej\");\n}\n\n\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/163", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <vector>\n#include <algorithm> // for std::sort\n\nusing namespace std;\n\n/**\n * Returns a vector of even digits between a and b (inclusive) in ascending order.\n * \n * @param a The lower bound (inclusive).\n * @param b The upper bound (inclusive).\n * @return A vector of even digits between a and b.\n */\nvector<int> generate_integers(int a, int b) {\n    // Swap a and b if a is greater than b\n    if (a > b) {\n        swap(a, b);\n    }\n\n    vector<int> even_digits;\n\n    // Iterate from a to b\n    for (int i = a; i <= b; i++) {\n        // Check if the number is even and less than 10\n        if (i % 2 == 0 && i < 10) {\n            even_digits.push_back(i);\n        }\n    }\n\n    // Sort the vector in ascending order\n    sort(even_digits.begin(), even_digits.end());\n\n    return even_digits;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(generate_integers(2, 10) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(10, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(132, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(17,89) , {}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/1", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\n/**\n * Separate groups of nested parentheses into separate strings.\n *\n * @param paren_string Input string containing multiple groups of nested parentheses.\n * @return Vector of strings, each representing a separate group of parentheses.\n */\nvector<string> separate_paren_groups(string paren_string) {\n    vector<string> result;\n    string current_group;\n    int balance = 0; // Balance of open and close parentheses\n\n    // Iterate over each character in the input string\n    for (char c : paren_string) {\n        // Ignore spaces\n        if (c == ' ') continue;\n\n        // Update balance\n        if (c == '(') balance++;\n        else if (c == ')') balance--;\n\n        // Add character to current group\n        current_group += c;\n\n        // If balance is zero, we've found a complete group\n        if (balance == 0) {\n            result.push_back(current_group);\n            current_group.clear();\n        }\n    }\n\n    return result;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){  \n    assert (issame(separate_paren_groups(\"(()()) ((())) () ((())()())\"),{\"(()())\", \"((()))\", \"()\", \"((())()())\"}));\n    assert (issame(separate_paren_groups(\"() (()) ((())) (((())))\"), {\"()\", \"(())\", \"((()))\", \"(((())))\" }));\n    assert (issame(separate_paren_groups(\"(()(())((())))\") ,{ \"(()(())((())))\" }));\n    assert (issame(separate_paren_groups(\"( ) (( )) (( )( ))\") ,{\"()\", \"(())\", \"(()())\"}));\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/41", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <stdio.h>\n\n/**\n * Calculate the number of collisions between two sets of cars moving in opposite directions.\n *\n * @param n The number of cars in each set.\n * @return The total number of collisions.\n */\nint car_race_collision(int n) {\n    // Since all cars move at the same speed, each car in one set will collide with each car in the other set.\n    // Therefore, the total number of collisions is the product of the number of cars in each set.\n    return n * n;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (car_race_collision(2) == 4);\n    assert (car_race_collision(3) == 9);\n    assert (car_race_collision(4) == 16);\n    assert (car_race_collision(8) == 64);\n    assert (car_race_collision(10) == 100);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/137", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <string>\n#include <algorithm>\n#include <boost/any.hpp>\nusing namespace std;\n\nboost::any compare_one(boost::any a, boost::any b) {\n    // Convert string inputs to float, handling both '.' and ',' as decimal separators\n    if (a.type() == typeid(string)) {\n        string strA = boost::any_cast<string>(a);\n        replace(strA.begin(), strA.end(), ',', '.');\n        a = stof(strA);\n    }\n    if (b.type() == typeid(string)) {\n        string strB = boost::any_cast<string>(b);\n        replace(strB.begin(), strB.end(), ',', '.');\n        b = stof(strB);\n    }\n\n    // Compare the values\n    if (a.type() == typeid(int) && b.type() == typeid(int)) {\n        int intA = boost::any_cast<int>(a);\n        int intB = boost::any_cast<int>(b);\n        return (intA > intB) ? a : ((intA < intB) ? b : \"None\");\n    } else if (a.type() == typeid(float) && b.type() == typeid(float)) {\n        float floatA = boost::any_cast<float>(a);\n        float floatB = boost::any_cast<float>(b);\n        return (floatA > floatB) ? a : ((floatA < floatB) ? b : \"None\");\n    } else {\n        float floatA = boost::any_cast<float>(a);\n        float floatB = boost::any_cast<float>(b);\n        return (floatA > floatB) ? a : ((floatA < floatB) ? b : \"None\");\n    }\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (boost::any_cast<int>(compare_one(1, 2)) == 2);\n    assert (boost::any_cast<double>(compare_one(1, 2.5))== 2.5);\n    assert (boost::any_cast<int>(compare_one(2, 3)) == 3);\n    assert (boost::any_cast<int>(compare_one(5, 6)) == 6);\n    assert (boost::any_cast<string>(compare_one(1, string(\"2,3\")))== \"2,3\");\n    assert (boost::any_cast<string>(compare_one(string(\"5,1\"), string(\"6\"))) == \"6\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), string(\"2\"))) == \"2\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), 1)) == \"None\");\n}\n", "result": "failed: terminate called after throwing an instance of 'boost::wrapexcept<boost::bad_any_cast>'\n  what():  boost::bad_any_cast: failed conversion using boost::any_cast\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/88", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n/**\n * Returns a copy of the given vector after sorting.\n * The sorting order is determined by the sum of the first and last index values.\n * If the sum is odd, the vector is sorted in ascending order.\n * If the sum is even, the vector is sorted in descending order.\n *\n * @param array The input vector to be sorted.\n * @return A new sorted vector.\n */\nvector<int> sort_array(vector<int> array) {\n    // Calculate the sum of the first and last index values\n    int sum = array.empty() ? 0 : array[0] + array.back();\n\n    // Create a copy of the input vector\n    vector<int> sorted_array = array;\n\n    // Sort the copied vector based on the sum\n    if (sum % 2 == 0) {\n        // Sort in descending order if the sum is even\n        sort(sorted_array.rbegin(), sorted_array.rend());\n    } else {\n        // Sort in ascending order if the sum is odd\n        sort(sorted_array.begin(), sorted_array.end());\n    }\n\n    return sorted_array;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({5}) , {5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5}) , {0, 1, 2, 3, 4, 5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5, 6}) , {6, 5, 4, 3, 2, 1, 0}));\n    assert (issame(sort_array({2, 1}) , {1, 2}));\n    assert (issame(sort_array({15, 42, 87, 32 ,11, 0}) , {0, 11, 15, 32, 42, 87}));\n    assert (issame(sort_array({21, 14, 23, 11}) , {23, 21, 14, 11}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/147", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <vector>\nusing namespace std;\n\nint get_max_triples(int n) {\n    vector<int> a(n);\n    for (int i = 0; i < n; i++) {\n        a[i] = (i + 1) * (i + 1) - (i + 1) + 1;\n    }\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_max_triples(5) == 1);\n    assert (get_max_triples(6) == 4);\n    assert (get_max_triples(10) == 36);\n    assert (get_max_triples(100) == 53361);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/31", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <stdio.h>\n\n/**\n * Returns true if a given number is prime, and false otherwise.\n *\n * @param n The number to check for primality.\n * @return true if n is prime, false otherwise.\n */\nbool is_prime(long long n) {\n    if (n <= 1) {\n        // Numbers less than or equal to 1 are not prime.\n        return false;\n    }\n\n    // Check if n is divisible by any number up to its square root.\n    for (long long i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            // If n is divisible by i, it's not prime.\n            return false;\n        }\n    }\n\n    // If we reach this point, n is prime.\n    return true;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_prime(6) == false);\n    assert (is_prime(101) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(13441) == true);\n    assert (is_prime(61) == true);\n    assert (is_prime(4) == false);\n    assert (is_prime(1) == false);\n    assert (is_prime(5) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(17) == true);\n    assert (is_prime(5 * 17) == false);\n    assert (is_prime(11 * 7) == false);\n    assert (is_prime(13441 * 19) == false);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/69", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <iostream>\n#include <vector>\n#include <unordered_map>\n\nint search(std::vector<int> lst) {\n    // Create a frequency map to store the count of each integer\n    std::unordered_map<int, int> freqMap;\n    for (int num : lst) {\n        freqMap[num]++;\n    }\n\n    // Iterate through the frequency map to find the greatest integer\n    // that has a frequency greater than or equal to its value\n    int maxNum = -1;\n    for (const auto& pair : freqMap) {\n        if (pair.second >= pair.first && pair.first > maxNum) {\n            maxNum = pair.first;\n        }\n    }\n\n    return maxNum;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (search({5, 5, 5, 5, 1}) == 1);\n    assert (search({4, 1, 4, 1, 4, 4}) == 4);\n    assert (search({3, 3}) == -1);\n    assert (search({8, 8, 8, 8, 8, 8, 8, 8}) == 8);\n    assert (search({2, 3, 3, 2, 2}) == 2);\n    assert (search({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}) == 1);\n    assert (search({3, 2, 8, 2}) == 2);\n    assert (search({6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}) == 1);\n    assert (search({8, 8, 3, 6, 5, 6, 4}) == -1);\n    assert (search({6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}) == 1);\n    assert (search({1, 9, 10, 1, 3}) == 1);\n    assert (search({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}) == 5);\n    assert (search({1}) == 1);\n    assert (search({8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}) == 4);\n    assert (search({2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}) == 2);\n    assert (search({1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}) == 1);\n    assert (search({9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}) == 4);\n    assert (search({2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}) == 4);\n    assert (search({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}) == 2);\n    assert (search({5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}) == -1);\n    assert (search({10}) == -1);\n    assert (search({9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}) == 2);\n    assert (search({5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}) == 1);\n    assert (search({7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}) == 1);\n    assert (search({3, 10, 10, 9, 2}) == -1);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/52", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <vector>\nusing namespace std;\n\n/**\n * Returns true if all numbers in the vector l are below threshold t.\n *\n * @param l A vector of integers.\n * @param t The threshold value.\n * @return True if all numbers in l are below t, false otherwise.\n */\nbool below_threshold(vector<int> l, int t) {\n    for (int num : l) {\n        if (num >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_threshold({1, 2, 4, 10}, 100));\n    assert (not(below_threshold({1, 20, 4, 10}, 5)));\n    assert (below_threshold({1, 20, 4, 10}, 21));\n    assert (below_threshold({1, 20, 4, 10}, 22));\n    assert (below_threshold({1, 8, 4, 10}, 11));\n    assert (not(below_threshold({1, 8, 4, 10}, 10)));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/22", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n\nvector<int> filter_integers(list_any values) {\n    vector<int> result;\n    for (const auto& value : values) {\n        if (value.type() == typeid(int)) {\n            result.push_back(boost::any_cast<int>(value));\n        }\n    }\n    return result;\n}\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_integers({}),{}));\n\n    assert (issame(filter_integers({4,  {},23.2, 9, string(\"adasd\")}) ,{4, 9}));\n    assert (issame(filter_integers({3, 'c', 3, 3, 'a', 'b'}) ,{3, 3, 3}));\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/154", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <string>\nusing namespace std;\n\nbool cycpattern_check(string a, string b) {\n    // concatenate the first word with itself to handle rotations\n    string double_a = a + a;\n    \n    // check if the second word or any of its rotations is a substring in the concatenated string\n    for (int i = 0; i < b.length(); i++) {\n        string rotated_b = b.substr(i) + b.substr(0, i);\n        if (double_a.find(rotated_b) != string::npos) {\n            return true;\n        }\n    }\n    \n    return false;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert  (cycpattern_check(\"xyzw\",\"xyw\") == false );\n    assert  (cycpattern_check(\"yello\",\"ell\") == true );\n    assert  (cycpattern_check(\"whattup\",\"ptut\") == false );\n    assert  (cycpattern_check(\"efef\",\"fee\") == true );\n    assert  (cycpattern_check(\"abab\",\"aabb\") == false );\n    assert  (cycpattern_check(\"winemtt\",\"tinem\") == true );\n}\n", "result": "failed: a.out: test.cpp:38: int main(): Assertion `cycpattern_check(\"xyzw\",\"xyw\") == false' failed.\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/118", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\nstring get_closest_vowel(string word) {\n  // Define the vowels\n  string vowels = \"AEIOUaeiou\";\n\n  // Iterate from the right side of the word\n  for (int i = word.length() - 1; i > 0; --i) {\n    // Check if the current character is a vowel\n    if (vowels.find(word[i]) != string::npos) {\n      // Check if the previous character is a consonant\n      if (vowels.find(word[i - 1]) == string::npos) {\n        // Check if the next character is a consonant\n        if (i + 1 < word.length() && vowels.find(word[i + 1]) == string::npos) {\n          // Return the vowel\n          return string(1, word[i]);\n        }\n      }\n    }\n  }\n\n  // If no vowel is found, return an empty string\n  return \"\";\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_closest_vowel(\"yogurt\") == \"u\");\n    assert (get_closest_vowel(\"full\") == \"u\");\n    assert (get_closest_vowel(\"easy\") == \"\");\n    assert (get_closest_vowel(\"eAsy\") == \"\");\n    assert (get_closest_vowel(\"ali\") == \"\");\n    assert (get_closest_vowel(\"bad\") == \"a\");\n    assert (get_closest_vowel(\"most\") ==\"o\");\n    assert (get_closest_vowel(\"ab\") == \"\");\n    assert (get_closest_vowel(\"ba\") == \"\");\n    assert (get_closest_vowel(\"quick\") == \"\");\n    assert (get_closest_vowel(\"anime\") == \"i\");\n    assert (get_closest_vowel(\"Asia\") == \"\");\n    assert (get_closest_vowel(\"Above\") == \"o\");\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/92", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <stdio.h>\n#include <math.h>\n\nbool any_int(float a, float b, float c) {\n    // Check if all numbers are integers\n    if (a != (int)a || b != (int)b || c != (int)c) {\n        return false;\n    }\n\n    // Check if one of the numbers is equal to the sum of the other two\n    if (a == b + c || b == a + c || c == a + b) {\n        return true;\n    }\n\n    return false;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (any_int(2, 3, 1)==true);\n    assert (any_int(2.5, 2, 3)==false);\n    assert (any_int(1.5, 5, 3.5)==false);\n    assert (any_int(2, 6, 2)==false);\n    assert (any_int(4, 2, 2)==true);\n    assert (any_int(2.2, 2.2, 2.2)==false);\n    assert (any_int(-4, 6, 2)==true);\n    assert (any_int(2,1,1)==true);\n    assert (any_int(3,4,7)==true);\n    assert (any_int(3.01,4,7)==false);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/115", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\nint max_fill(vector<vector<int>> grid, int capacity) {\n    int total_water = 0;\n    for (const auto& row : grid) {\n        for (int cell : row) {\n            total_water += cell;\n        }\n    }\n    return (total_water + capacity - 1) / capacity;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (max_fill({{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}, 1) == 6);\n    assert (max_fill({{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}, 2) == 5);\n    assert (max_fill({{0,0,0}, {0,0,0}}, 5) == 0);\n    assert (max_fill({{1,1,1,1}, {1,1,1,1}}, 2) == 4);\n    assert (max_fill({{1,1,1,1}, {1,1,1,1}}, 9) == 2);\n}\n", "result": "failed: a.out: test.cpp:36: int main(): Assertion `max_fill({{1,1,1,1}, {1,1,1,1}}, 9) == 2' failed.\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/37", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\nvector<float> sort_even(vector<float> l) {\n    // Separate even-indexed elements into a new vector\n    vector<float> even_elements;\n    for (size_t i = 0; i < l.size(); i += 2) {\n        even_elements.push_back(l[i]);\n    }\n\n    // Sort the even-indexed elements\n    sort(even_elements.begin(), even_elements.end());\n\n    // Create a new vector with the sorted even-indexed elements\n    vector<float> result;\n    size_t even_idx = 0;\n    for (size_t i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            result.push_back(even_elements[even_idx++]);\n        } else {\n            result.push_back(l[i]);\n        }\n    }\n\n    return result;\n}\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_even({1, 2, 3}), {1, 2, 3}));\n    assert (issame(sort_even({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}) , {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123}));\n    assert (issame(sort_even({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}) , {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/105", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <map>\n#include <algorithm>\n\nusing namespace std;\n\n// Function to convert numbers to their corresponding names\nvector<string> by_length(vector<int> arr) {\n    // Filter out numbers that are not between 1 and 9\n    vector<int> filtered_arr;\n    for (int num : arr) {\n        if (num >= 1 && num <= 9) {\n            filtered_arr.push_back(num);\n        }\n    }\n\n    // Sort the filtered array\n    sort(filtered_arr.begin(), filtered_arr.end());\n\n    // Reverse the sorted array\n    reverse(filtered_arr.begin(), filtered_arr.end());\n\n    // Map numbers to their corresponding names\n    map<int, string> num_to_name = {\n        {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"},\n        {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}\n    };\n\n    // Convert numbers to their corresponding names\n    vector<string> result;\n    for (int num : filtered_arr) {\n        result.push_back(num_to_name[num]);\n    }\n\n    return result;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(by_length({2, 1, 1, 4, 5, 8, 2, 3}) , {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}));\n    assert (issame(by_length({}) , {}));\n    assert (issame(by_length({1, -1 , 55}) , {\"One\"}));\n    assert (issame(by_length({1, -1, 3, 2}) , {\"Three\", \"Two\", \"One\"}));\n    assert (issame(by_length({9, 4, 8}) , {\"Nine\", \"Eight\", \"Four\"}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/131", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\nint digits(int n) {\n    int product = 1;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit % 2 != 0) {\n            product *= digit;\n        }\n        n /= 10;\n    }\n    return product == 1 ? 0 : product;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digits(5) == 5);\n    assert (digits(54) == 5);\n    assert (digits(120) ==1);\n    assert (digits(5014) == 5);\n    assert (digits(98765) == 315);\n    assert (digits(5576543) == 2625);\n    assert (digits(2468) == 0);\n}\n", "result": "failed: a.out: test.cpp:36: int main(): Assertion `digits(120) ==1' failed.\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/6", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<int> parse_nested_parens(string paren_string) {\n    vector<int> result;\n    size_t start = 0;\n    while (start < paren_string.size()) {\n        size_t end = paren_string.find(' ', start);\n        if (end == string::npos) {\n            end = paren_string.size();\n        }\n        string group = paren_string.substr(start, end - start);\n        int max_depth = 0;\n        int current_depth = 0;\n        for (char c : group) {\n            if (c == '(') {\n                current_depth++;\n                max_depth = max(max_depth, current_depth);\n            } else if (c == ')') {\n                current_depth--;\n            }\n        }\n        result.push_back(max_depth);\n        start = end + 1;\n    }\n    return result;\n}\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_nested_parens(\"(()()) ((())) () ((())()())\"),{2, 3, 1, 3}));\n     assert (issame(parse_nested_parens(\"() (()) ((())) (((())))\") , {1, 2, 3, 4}));\n    assert (issame(parse_nested_parens(\"(()(())((())))\") ,{4}));\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/2", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <stdio.h>\n#include <math.h>\n\n/**\n * Returns the decimal part of a given floating point number.\n *\n * @param number A positive floating point number.\n * @return The decimal part of the number.\n */\nfloat truncate_number(float number) {\n    // Calculate the integer part of the number\n    int integer_part = (int) number;\n\n    // Subtract the integer part from the original number to get the decimal part\n    float decimal_part = number - integer_part;\n\n    return decimal_part;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n assert (truncate_number(3.5) == 0.5); \n assert (abs(truncate_number(1.33) - 0.33) < 1e-4);\n  assert (abs(truncate_number(123.456) - 0.456) < 1e-4);\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/16", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\n/**\n * Counts the number of distinct characters in a given string, regardless of case.\n *\n * @param str The input string.\n * @return The number of distinct characters in the string.\n */\nint count_distinct_characters(string str) {\n    // Convert the string to lowercase to ignore case differences\n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n\n    // Create a set to store unique characters\n    vector<char> unique_chars;\n\n    // Iterate over each character in the string\n    for (char c : str) {\n        // If the character is not already in the set, add it\n        if (find(unique_chars.begin(), unique_chars.end(), c) == unique_chars.end()) {\n            unique_chars.push_back(c);\n        }\n    }\n\n    // Return the size of the set, which represents the number of distinct characters\n    return unique_chars.size();\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_distinct_characters(\"\") == 0);\n    assert (count_distinct_characters(\"abcde\") == 5);\n    assert (count_distinct_characters(\"abcdecadeCADE\") == 5);\n    assert (count_distinct_characters(\"aaaaAAAAaaaa\") == 1);\n    assert (count_distinct_characters(\"Jerry jERRY JeRRRY\") == 5);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/106", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <stdio.h>\n#include <vector>\n\n/**\n * Returns a vector of size n, where the value at index i is the factorial of i if i is even,\n * or the sum of numbers from 1 to i otherwise.\n *\n * @param n The size of the vector to return.\n * @return A vector of size n with the calculated values.\n */\nvector<int> f(int n) {\n    vector<int> result(n);\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 == 0) { // i is even\n            int factorial = 1;\n            for (int j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            result[i - 1] = factorial;\n        } else { // i is odd\n            int sum = 0;\n            for (int j = 1; j <= i; j++) {\n                sum += j;\n            }\n            result[i - 1] = sum;\n        }\n    }\n    return result;\n}\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(f(5) , {1, 2, 6, 24, 15}));\n    assert (issame(f(7) , {1, 2, 6, 24, 15, 720, 28}));\n    assert (issame(f(1) , {1}));\n    assert (issame(f(3) , {1, 2, 6}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/135", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <vector>\nusing namespace std;\n\n/**\n * Returns the largest index of an element which is not greater than or equal to \n * the element immediately preceding it. If no such element exists then return -1.\n *\n * @param arr The input vector of integers.\n * @return The largest index of an element which is not greater than or equal to \n * the element immediately preceding it, or -1 if no such element exists.\n */\nint can_arrange(vector<int> arr) {\n    int n = arr.size();\n    int max_index = -1;\n    \n    // Iterate through the array from the second element to the end\n    for (int i = 1; i < n; i++) {\n        // Check if the current element is not greater than or equal to the previous element\n        if (arr[i] < arr[i - 1]) {\n            // Update the max_index if the current index is greater\n            max_index = i;\n        }\n    }\n    \n    return max_index;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (can_arrange({1,2,4,3,5})==3);\n    assert (can_arrange({1,2,4,5})==-1);\n    assert (can_arrange({1,4,2,5,6,7,8,9,10})==2);\n    assert (can_arrange({4,8,5,7,3})==4);\n    assert (can_arrange({})==-1);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/162", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n\nstring string_to_md5(string text) {\n    if (text.empty()) {\n        return \"None\";\n    }\n\n    unsigned char md5_hash[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.size(), md5_hash);\n\n    string md5_string;\n    for (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n        char hex[3];\n        sprintf(hex, \"%02x\", md5_hash[i]);\n        md5_string += hex;\n    }\n\n    return md5_string;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert (string_to_md5(\"\") == \"None\");\n    assert (string_to_md5(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert (string_to_md5(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/87", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <vector>\n#include <algorithm>\n\nvector<vector<int>> get_row(vector<vector<int>> lst, int x) {\n    vector<vector<int>> coordinates;\n\n    // Iterate over each row in the list\n    for (int i = 0; i < lst.size(); i++) {\n        // Iterate over each element in the row\n        for (int j = 0; j < lst[i].size(); j++) {\n            // Check if the element is equal to x\n            if (lst[i][j] == x) {\n                // Add the coordinates to the result vector\n                coordinates.push_back({i, j});\n            }\n        }\n    }\n\n    // Sort the coordinates by row in ascending order\n    sort(coordinates.begin(), coordinates.end(), [](const vector<int>& a, const vector<int>& b) {\n        return a[0] < b[0];\n    });\n\n    // Sort the coordinates of each row by column in descending order\n    for (int i = 0; i < coordinates.size(); i++) {\n        int row = coordinates[i][0];\n        int start = i;\n        while (i < coordinates.size() && coordinates[i][0] == row) {\n            i++;\n        }\n        sort(coordinates.begin() + start, coordinates.begin() + i, [](const vector<int>& a, const vector<int>& b) {\n            return a[1] > b[1];\n        });\n        i--;\n    }\n\n    return coordinates;\n}\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}}, 1) , {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}));\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6}}, 2) , {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}}));\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,1,3,4,5,6},\n        {1,2,1,4,5,6},\n        {1,2,3,1,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}\n    }, 1) , {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}}));\n    assert (issame(get_row({}, 1) , {}));\n    assert (issame(get_row({{1}}, 2) , {}));\n    assert (issame(get_row({{}, {1}, {1, 2, 3}}, 3) , {{2, 2}}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/44", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\nstring change_base(int x, int base) {\n    string result = \"\";\n    while (x > 0) {\n        int remainder = x % base;\n        result = to_string(remainder) + result;\n        x /= base;\n    }\n    return result;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (change_base(8, 3) == \"22\");\n    assert (change_base(9, 3) == \"100\");\n    assert (change_base(234, 2) == \"11101010\");\n    assert (change_base(16, 2) == \"10000\");\n    assert (change_base(8, 2) == \"1000\");\n    assert (change_base(7, 2) == \"111\");\n    for (int x=2;x<8;x++)\n        assert (change_base(x, x + 1) == to_string(x));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/97", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <stdio.h>\n\nint multiply(int a, int b) {\n    // Get the unit digits of a and b\n    int unitDigitA = abs(a) % 10;\n    int unitDigitB = abs(b) % 10;\n\n    // Return the product of the unit digits\n    return unitDigitA * unitDigitB;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (multiply(148, 412) == 16                   );\n    assert (multiply(19, 28) == 72       );\n    assert (multiply(2020, 1851) == 0);\n    assert (multiply(14,-15) == 20   );\n    assert (multiply(76, 67) == 42    );\n    assert (multiply(17, 27) == 49    );\n    assert (multiply(0, 1) == 0);\n    assert (multiply(0, 0) == 0);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/161", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\nstring solve(string s) {\n    // Check if the string contains any letters\n    bool hasLetters = false;\n    for (char c : s) {\n        if (isalpha(c)) {\n            hasLetters = true;\n            break;\n        }\n    }\n\n    // If the string contains letters, reverse their case\n    if (hasLetters) {\n        for (char& c : s) {\n            if (isalpha(c)) {\n                c = islower(c) ? toupper(c) : tolower(c);\n            }\n        }\n    } \n    // If the string contains no letters, reverse the string\n    else {\n        reverse(s.begin(), s.end());\n    }\n\n    return s;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(\"AsDf\") == \"aSdF\");\n    assert (solve(\"1234\") == \"4321\");\n    assert (solve(\"ab\") == \"AB\");\n    assert (solve(\"#a@C\") == \"#A@c\");\n    assert (solve(\"#AsdfW^45\") == \"#aSDFw^45\");\n    assert (solve(\"#6@2\") == \"2@6#\");\n    assert (solve(\"#$a^D\") == \"#$A^d\");\n    assert (solve(\"#ccc\") == \"#CCC\");\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/5", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <stdio.h>\n#include <vector>\n\n/**\n * Inserts a number \"delimiter\" between every two consecutive elements of input vector `numbers`.\n *\n * @param numbers Input vector of integers.\n * @param delimiter Number to be inserted between consecutive elements.\n * @return New vector with delimiter inserted between consecutive elements.\n */\nstd::vector<int> intersperse(std::vector<int> numbers, int delimiter) {\n    std::vector<int> result;\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n        if (i < numbers.size() - 1) {\n            result.push_back(delimiter);\n        }\n    }\n    return result;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(intersperse({}, 7), {}));\n    \n    assert (issame(intersperse({5, 6, 3, 2}, 8),{5, 8, 6, 8, 3, 8, 2}));\n    assert (issame(intersperse({2, 2, 2}, 2),{2, 2, 2, 2, 2}));\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/38", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <string>\nusing namespace std;\n\n/**\n * Encodes a string by cycling groups of three characters.\n * \n * @param s The input string to be encoded.\n * @return The encoded string.\n */\nstring encode_cyclic(string s) {\n    int l = s.length();\n    int num = (l + 2) / 3;\n    string x, output;\n    int i;\n    for (i = 0; i * 3 < l; i++) {\n        // Cycle elements in each group, unless group has fewer elements than 3.\n        x = s.substr(i * 3, 3);\n        if (x.length() == 3) x = x.substr(1) + x[0];\n        output = output + x;\n    }\n    return output;\n}\n\n/**\n * Decodes a string that was encoded with the encode_cyclic function.\n * \n * @param s The input string to be decoded.\n * @return The decoded string.\n */\nstring decode_cyclic(string s) {\n    int l = s.length();\n    int num = (l + 2) / 3;\n    string x, output;\n    int i;\n    for (i = 0; i * 3 < l; i++) {\n        // Reverse the cycling of elements in each group.\n        x = s.substr(i * 3, 3);\n        if (x.length() == 3) x = x[2] + x.substr(0, 2);\n        output = output + x;\n    }\n    return output;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    \n    for (int i=0;i<100;i++)\n    {\n        int l=10+rand()%11;\n        string str=\"\";\n        for (int j=0;j<l;j++)\n        {\n            char chr=97+rand()%26;\n            str+=chr;\n        }\n\n        string encoded_str = encode_cyclic(str);\n        assert (decode_cyclic(encoded_str) == str);\n    }\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/152", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n\n/**\n * Compare the actual scores with the guessed scores and return a vector of differences.\n *\n * @param game  A vector of actual scores.\n * @param guess A vector of guessed scores.\n * @return A vector of differences between actual and guessed scores.\n */\nvector<int> compare(vector<int> game, vector<int> guess) {\n    vector<int> differences;\n    for (int i = 0; i < game.size(); i++) {\n        int difference = abs(game[i] - guess[i]);\n        differences.push_back(difference);\n    }\n    return differences;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,5,0,0,0,4},{4,1,1,0,0,-2}),{4,4,1,0,0,6}));\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,0,0,0,0,0},{0,0,0,0,0,0}),{0,0,0,0,0,0}));\n    assert (issame(compare({1,2,3},{-1,-2,-3}),{2,4,6}));\n    assert (issame(compare({1,2,3,5},{-1,2,3,4}),{2,0,0,1}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/93", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\nstring encode(string message) {\n    string vowels = \"aeiouAEIOU\";\n    string encoded_message = \"\";\n    for (char c : message) {\n        if (vowels.find(c) != string::npos) {\n            if (isupper(c)) {\n                encoded_message += 'A' + (c - 'A' + 2) % 26;\n            } else {\n                encoded_message += 'a' + (c - 'a' + 2) % 26;\n            }\n        } else {\n            if (isupper(c)) {\n                encoded_message += tolower(c);\n            } else {\n                encoded_message += toupper(c);\n            }\n        }\n    }\n    return encoded_message;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encode(\"TEST\") == \"tgst\");\n    assert (encode(\"Mudasir\") == \"mWDCSKR\");\n    assert (encode(\"YES\") == \"ygs\");\n    assert (encode(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert (encode(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\n", "result": "failed: a.out: test.cpp:43: int main(): Assertion `encode(\"TEST\") == \"tgst\"' failed.\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/62", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <math.h>\n#include <vector>\n\nusing namespace std;\n\n/**\n * Returns the derivative of a polynomial represented by its coefficients.\n *\n * The input vector xs represents the coefficients of a polynomial:\n * xs[0] + xs[1] * x + xs[2] * x^2 + ...\n *\n * The output vector represents the coefficients of the derivative of this polynomial.\n *\n * @param xs Coefficients of the polynomial\n * @return Coefficients of the derivative of the polynomial\n */\nvector<float> derivative(vector<float> xs) {\n    vector<float> derivative_xs;\n    for (int i = 1; i < xs.size(); i++) {\n        derivative_xs.push_back(i * xs[i]);\n    }\n    return derivative_xs;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(derivative({3, 1, 2, 4, 5}) , {1, 4, 12, 20}));\n    assert (issame(derivative({1, 2, 3}) , {2, 6}));\n    assert (issame(derivative({3, 2, 1}) , {2, 2}));\n    assert (issame(derivative({3, 2, 1, 0, 4}) , {2, 2, 0, 16}));\n    assert (issame(derivative({1}) , {}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/24", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <stdio.h>\n\n/**\n * Finds the largest number that divides n evenly, smaller than n.\n *\n * @param n The input number.\n * @return The largest divisor of n, smaller than n.\n */\nint largest_divisor(int n) {\n    for (int i = n - 1; i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return 1; // If no divisors are found, return 1 (since 1 is a divisor of every number)\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_divisor(3) == 1);\n    assert (largest_divisor(7) == 1);\n    assert (largest_divisor(10) == 5);\n    assert (largest_divisor(100) == 50);\n    assert (largest_divisor(49) == 7);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/56", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <string>\nusing namespace std;\n\n/**\n * Returns true if every opening bracket has a corresponding closing bracket.\n *\n * @param brackets a string of '<' and '>'\n * @return true if brackets are correctly paired, false otherwise\n */\nbool correct_bracketing(string brackets) {\n    int balance = 0;\n    for (char c : brackets) {\n        if (c == '<') {\n            balance++;\n        } else if (c == '>') {\n            balance--;\n            if (balance < 0) {\n                return false; // more closing brackets than opening\n            }\n        }\n    }\n    return balance == 0; // all opening brackets have a corresponding closing bracket\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"<>\"));\n    assert (correct_bracketing(\"<<><>>\"));\n    assert (correct_bracketing(\"<><><<><>><>\"));\n    assert (correct_bracketing(\"<><><<<><><>><>><<><><<>>>\"));\n    assert (not (correct_bracketing(\"<<<><>>>>\")));\n    assert (not (correct_bracketing(\"><<>\")));\n    assert (not (correct_bracketing(\"<\")));\n    assert (not (correct_bracketing(\"<<<<\")));\n    assert (not (correct_bracketing(\">\")));\n    assert (not (correct_bracketing(\"<<>\")));\n    assert (not (correct_bracketing(\"<><><<><>><>><<>\")));\n    assert (not (correct_bracketing(\"<><><<><>><>>><>\")));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/4", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n\n/**\n * Calculate the Mean Absolute Deviation (MAD) of a dataset.\n *\n * MAD is the average absolute difference between each element and the mean of the dataset.\n *\n * @param numbers The input dataset.\n * @return The Mean Absolute Deviation of the dataset.\n */\nfloat mean_absolute_deviation(vector<float> numbers) {\n    // Calculate the mean of the dataset\n    float sum = 0.0;\n    for (float num : numbers) {\n        sum += num;\n    }\n    float mean = sum / numbers.size();\n\n    // Calculate the absolute deviations from the mean\n    float sum_abs_dev = 0.0;\n    for (float num : numbers) {\n        sum_abs_dev += fabs(num - mean);\n    }\n\n    // Calculate the Mean Absolute Deviation\n    float mad = sum_abs_dev / numbers.size();\n\n    return mad;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0}) - 2.0/3.0) < 1e-4);\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0}) - 1.0) < 1e-4);\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0, 5.0}) - 6.0/5.0) < 1e-4);\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/7", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\n/**\n * Filters an input vector of strings to only include those that contain a given substring.\n *\n * @param strings The input vector of strings to filter.\n * @param substring The substring to search for in each string.\n * @return A new vector containing only the strings that contain the substring.\n */\nvector<string> filter_by_substring(vector<string> strings, string substring) {\n    vector<string> filtered_strings;\n    for (const auto& str : strings) {\n        if (str.find(substring) != string::npos) {\n            filtered_strings.push_back(str);\n        }\n    }\n    return filtered_strings;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_substring({}, \"john\"),{}));\n     assert (issame(filter_by_substring({\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), {\"xxx\", \"xxxAAA\", \"xxx\"}));\n    assert (issame(filter_by_substring({\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"),{\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"}));\n     assert (issame(filter_by_substring({\"grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\") ,{\"grunt\", \"prune\"}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/159", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <vector>\nusing namespace std;\n\nvector<int> eat(int number, int need, int remaining) {\n    // Calculate the total number of carrots needed\n    int total_needed = number + need;\n    \n    // Calculate the total number of carrots eaten\n    int total_eaten = min(total_needed, number + remaining);\n    \n    // Calculate the number of carrots left\n    int carrots_left = remaining - (total_eaten - number);\n    \n    // Return the result as a vector\n    return {total_eaten, carrots_left};\n}\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(eat(5, 6, 10) , {11, 4}));\n    assert (issame(eat(4, 8, 9) , {12, 1}));\n    assert (issame(eat(1, 10, 10) , {11, 0}));\n    assert (issame(eat(2, 11, 5) , {7, 0}));\n    \n    assert (issame(eat(4, 5, 7) , {9, 2}));\n    assert (issame(eat(4, 5, 1) , {5, 0}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/79", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include<stdio.h>\n#include<string>\n#include<bitset>\nusing namespace std;\n\nstring decimal_to_binary(int decimal){\n    string binary = bitset<32>(decimal).to_string();  // convert decimal to binary\n    size_t pos = binary.find('1');  // find the first '1' in the binary string\n    if (pos != string::npos) {\n        binary = binary.substr(pos);  // remove leading zeros\n    } else {\n        binary = \"0\";  // handle the case where decimal is 0\n    }\n    return \"db\" + binary + \"db\";  // add \"db\" prefix and suffix\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (decimal_to_binary(0) == \"db0db\");\n    assert (decimal_to_binary(32) == \"db100000db\");\n    assert (decimal_to_binary(103) == \"db1100111db\");\n    assert (decimal_to_binary(15) == \"db1111db\");\n\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/155", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <math.h>\n#include <string>\n#include <vector>\nusing namespace std;\n\n/**\n * Returns a vector containing the count of even and odd digits in the given integer.\n *\n * @param num The input integer.\n * @return A vector of size 2, where the first element is the count of even digits and the second element is the count of odd digits.\n */\nvector<int> even_odd_count(int num) {\n    int evenCount = 0;\n    int oddCount = 0;\n\n    // Convert the integer to a string to easily iterate over each digit\n    string numStr = to_string(abs(num)); // Use abs to handle negative numbers\n\n    // Iterate over each digit in the string\n    for (char digit : numStr) {\n        int digitValue = digit - '0'; // Convert char to int\n\n        // Check if the digit is even or odd\n        if (digitValue % 2 == 0) {\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n\n    // Return the counts as a vector\n    return {evenCount, oddCount};\n}\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_count(7) , {0, 1}));\n    assert (issame(even_odd_count(-78) , {1, 1}));\n    assert (issame(even_odd_count(3452) , {2, 2}));\n    assert (issame(even_odd_count(346211) , {3, 3}));\n    assert (issame(even_odd_count(-345821) , {3, 3}));\n    assert (issame(even_odd_count(-2) , {1, 0}));\n    assert (issame(even_odd_count(-45347) , {2, 3}));\n    assert (issame(even_odd_count(0) , {1, 0}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/27", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <string>\nusing namespace std;\n\n/**\n * Flips the case of all characters in a given string.\n * \n * @param str The input string.\n * @return The string with all characters' cases flipped.\n */\nstring flip_case(string str) {\n    for (char& c : str) {\n        if (c >= 'a' && c <= 'z') {\n            // Convert lowercase to uppercase\n            c = c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n            // Convert uppercase to lowercase\n            c = c - 'A' + 'a';\n        }\n    }\n    return str;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (flip_case(\"\") == \"\");\n    assert (flip_case(\"Hello!\") == \"hELLO!\");\n    assert (flip_case(\"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/146", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\nint specialFilter(vector<int> nums) {\n    int count = 0;\n    for (int num : nums) {\n        if (num > 10) {\n            string numStr = to_string(abs(num)); // convert to string to access digits\n            if (numStr[0] == '1' || numStr[0] == '3' || numStr[0] == '5' || numStr[0] == '7' || numStr[0] == '9') {\n                if (numStr[numStr.size() - 1] == '1' || numStr[numStr.size() - 1] == '3' || numStr[numStr.size() - 1] == '5' || numStr[numStr.size() - 1] == '7' || numStr[numStr.size() - 1] == '9') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (specialFilter({5, -2, 1, -5}) == 0  );\n    assert (specialFilter({15, -73, 14, -15}) == 1);\n    assert (specialFilter({33, -2, -3, 45, 21, 109}) == 2);\n    assert (specialFilter({43, -12, 93, 125, 121, 109}) == 4);\n    assert (specialFilter({71, -2, -33, 75, 21, 19}) == 3);\n    assert (specialFilter({1}) == 0              );\n    assert (specialFilter({}) == 0                   );\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/83", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include<stdio.h>\nusing namespace std;\nint starts_one_ends(int n){\n    // Calculate the total number of n-digit positive integers\n    int total = 9 * (int)pow(10, n - 1);\n    \n    // Calculate the number of n-digit positive integers that start with 1\n    int starts_with_one = (int)pow(10, n - 1);\n    \n    // Calculate the number of n-digit positive integers that end with 1\n    int ends_with_one = 9 * (int)pow(10, n - 2) * 9;\n    \n    // Subtract the number of n-digit positive integers that start and end with 1\n    // to avoid double counting\n    int starts_and_ends_with_one = (int)pow(9, n - 2) * 9;\n    \n    // Return the total count of n-digit positive integers that start or end with 1\n    return starts_with_one + ends_with_one - starts_and_ends_with_one;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (starts_one_ends(1) == 1);\n    assert (starts_one_ends(2) == 18);\n    assert (starts_one_ends(3) == 180);\n    assert (starts_one_ends(4) == 1800);\n    assert (starts_one_ends(5) == 18000);\n}\n", "result": "failed: a.out: test.cpp:42: int main(): Assertion `starts_one_ends(2) == 18' failed.\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/136", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n/**\n * Returns a vector (a, b), where \"a\" is the largest of negative integers,\n * and \"b\" is the smallest of positive integers in the input vector.\n * If there is no negative or positive integers, return them as 0.\n */\nvector<int> largest_smallest_integers(vector<int> lst) {\n    int largest_negative = 0;\n    int smallest_positive = 0;\n\n    // Find the largest negative integer\n    for (int num : lst) {\n        if (num < 0 && (largest_negative == 0 || num > largest_negative)) {\n            largest_negative = num;\n        }\n    }\n\n    // Find the smallest positive integer\n    for (int num : lst) {\n        if (num > 0 && (smallest_positive == 0 || num < smallest_positive)) {\n            smallest_positive = num;\n        }\n    }\n\n    return {largest_negative, smallest_positive};\n}\n\n// Example usage:\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7}) , {0, 1}));\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7, 0}) , {0, 1}));\n    assert (issame(largest_smallest_integers({1, 3, 2, 4, 5, 6, -2}) , {-2, 1}));\n    assert (issame(largest_smallest_integers({4, 5, 3, 6, 2, 7, -7}) , {-7, 2}));\n    assert (issame(largest_smallest_integers({7, 3, 8, 4, 9, 2, 5, -9}) , {-9, 2}));\n    assert (issame(largest_smallest_integers({}) , {0, 0}));\n    assert (issame(largest_smallest_integers({0}) , {0, 0}));\n    assert (issame(largest_smallest_integers({-1, -3, -5, -6}) , {-1, 0}));\n    assert (issame(largest_smallest_integers({-1, -3, -5, -6, 0}) , {-1, 0}));\n    assert (issame(largest_smallest_integers({-6, -4, -4, -3, 1}) , {-3, 1}));\n    assert (issame(largest_smallest_integers({-6, -4, -4, -3, -100, 1}) , {-3, 1}));\n\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/81", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> numerical_letter_grade(vector<float> grades) {\n    vector<string> letter_grades;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grade > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grade > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n}\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(numerical_letter_grade({4.0, 3, 1.7, 2, 3.5}) , {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}));\n    assert (issame(numerical_letter_grade({1.2}) , {\"D+\"}));\n    assert (issame(numerical_letter_grade({0.5}) , {\"D-\"}));\n    assert (issame(numerical_letter_grade({0.0}) , {\"E\"}));\n    assert (issame(numerical_letter_grade({1, 0.3, 1.5, 2.8, 3.3}) , {\"D\", \"D-\", \"C-\", \"B\", \"B+\"}));\n    assert (issame(numerical_letter_grade({0, 0.7}) , {\"E\", \"D-\"}));\n    \n}\n", "result": "failed: a.out: test.cpp:65: int main(): Assertion `issame(numerical_letter_grade({4.0, 3, 1.7, 2, 3.5}) , {\"A+\", \"B\", \"C-\", \"C\", \"A-\"})' failed.\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/48", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <string>\nusing namespace std;\n\n/**\n * Checks if a given string is a palindrome.\n *\n * A palindrome is a string that reads the same backward as forward.\n *\n * @param text The input string to check.\n * @return True if the string is a palindrome, false otherwise.\n */\nbool is_palindrome(string text) {\n    int left = 0;\n    int right = text.length() - 1;\n\n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n\n    return true;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_palindrome(\"\") == true);\n    assert (is_palindrome(\"aba\") == true);\n    assert (is_palindrome(\"aaaaa\") == true);\n    assert (is_palindrome(\"zbcd\") == false);\n    assert (is_palindrome(\"xywyx\") == true);\n    assert (is_palindrome(\"xywyz\") == false);\n    assert (is_palindrome(\"xywzx\") == false);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/67", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <sstream>\n#include <string>\nusing namespace std;\n\nint fruit_distribution(string s, int n) {\n    istringstream iss(s);\n    string word;\n    int apples, oranges;\n\n    iss >> apples >> word >> oranges >> word;\n\n    int mangoes = n - apples - oranges;\n\n    return mangoes;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fruit_distribution(\"5 apples and 6 oranges\",19) == 8);\n    assert (fruit_distribution(\"5 apples and 6 oranges\",21) == 10);\n    assert (fruit_distribution(\"0 apples and 1 oranges\",3) == 2);\n    assert (fruit_distribution(\"1 apples and 0 oranges\",3) == 2);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",100) == 95);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",5) == 0);\n    assert (fruit_distribution(\"1 apples and 100 oranges\",120) == 19);\n}\n", "result": "failed: a.out: test.cpp:36: int main(): Assertion `fruit_distribution(\"5 apples and 6 oranges\",19) == 8' failed.\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/151", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <stdio.h>\n#include <math.h>\n#include <vector>\n\nlong long double_the_difference(vector<float> lst) {\n    long long sum_of_squares = 0;\n    for (float num : lst) {\n        if (num > 0 && fmod(num, 1) == 0 && fmod(num, 2) != 0) {\n            sum_of_squares += (long long)pow(num, 2);\n        }\n    }\n    return sum_of_squares;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (double_the_difference({}) == 0);\n    assert (double_the_difference({5, 4}) == 25);\n    assert (double_the_difference({0.1, 0.2, 0.3}) == 0 );\n    assert (double_the_difference({-10, -20, -30}) == 0 );\n    assert (double_the_difference({-1, -2, 8}) == 0);\n    assert (double_the_difference({0.2, 3, 5}) == 34);\n    \n    \n    long long odd_sum=0;\n    vector<float> lst={};\n\n    for (int i=-99;i<100;i+=2)\n    {\n        lst.push_back(i+0.0);\n        if (i>0 and i%2==1) odd_sum+=i*i;\n    }\n  \n    assert (double_the_difference(lst) == odd_sum );\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/78", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\nint hex_key(string num) {\n    int count = 0;\n    string prime_digits = \"2357BD\";\n    for (char c : num) {\n        if (prime_digits.find(c) != string::npos) {\n            count++;\n        }\n    }\n    return count;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (hex_key(\"AB\") == 1      );\n    assert (hex_key(\"1077E\") == 2 );\n    assert (hex_key(\"ABED1A33\") == 4     );\n    assert (hex_key(\"2020\") == 2 );\n    assert (hex_key(\"123456789ABCDEF0\") == 6      );\n    assert (hex_key(\"112233445566778899AABBCCDDEEFF00\") == 12 );\n    assert (hex_key(\"\") == 0);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/53", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <iostream>\n\nint add(int x, int y) {\n    return x + y;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add(0, 1) == 1);\n    assert (add(1, 0) == 1);\n    assert (add(2, 3) == 5);\n    assert (add(5, 7) == 12);\n    assert (add(7, 5) == 12);\n    for (int i=0;i<100;i+=1)\n    {\n        int x=rand()%1000;\n        int y=rand()%1000;\n        assert (add(x, y) == x + y);\n    }\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/125", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> split_words(string txt) {\n    // Check if the string contains whitespace\n    if (txt.find(' ') != string::npos) {\n        // Split on whitespace\n        vector<string> words;\n        size_t pos = 0;\n        while ((pos = txt.find(' ')) != string::npos) {\n            words.push_back(txt.substr(0, pos));\n            txt.erase(0, pos + 1);\n        }\n        words.push_back(txt);\n        return words;\n    } else if (txt.find(',') != string::npos) {\n        // Split on commas\n        vector<string> words;\n        size_t pos = 0;\n        while ((pos = txt.find(',')) != string::npos) {\n            words.push_back(txt.substr(0, pos));\n            txt.erase(0, pos + 1);\n        }\n        words.push_back(txt);\n        return words;\n    } else {\n        // Count the number of lowercase letters with odd order in the alphabet\n        int count = 0;\n        for (char c : txt) {\n            if (c >= 'a' && c <= 'z' && (c - 'a') % 2 != 0) {\n                count++;\n            }\n        }\n        return {to_string(count)};\n    }\n}\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(split_words(\"Hello world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello,world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello world,!\") , {\"Hello\",\"world,!\"}));\n    assert (issame(split_words(\"Hello,Hello,world !\") , {\"Hello,Hello,world\",\"!\"}));\n    assert (issame(split_words(\"abcdef\") , {\"3\"}));\n    assert (issame(split_words(\"aaabb\") , {\"2\"}));\n    assert (issame(split_words(\"aaaBb\") , {\"1\"}));\n    assert (issame(split_words(\"\") ,{\"0\"}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/117", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\nvector<string> select_words(string s, int n) {\n    vector<string> result;\n    string word;\n    for (char c : s) {\n        if (c == ' ') {\n            if (!word.empty()) {\n                int consonants = 0;\n                for (char w : word) {\n                    if (w != 'a' && w != 'e' && w != 'i' && w != 'o' && w != 'u' &&\n                        w != 'A' && w != 'E' && w != 'I' && w != 'O' && w != 'U') {\n                        consonants++;\n                    }\n                }\n                if (consonants == n) {\n                    result.push_back(word);\n                }\n                word.clear();\n            }\n        } else {\n            word += c;\n        }\n    }\n    // Handle the last word\n    if (!word.empty()) {\n        int consonants = 0;\n        for (char w : word) {\n            if (w != 'a' && w != 'e' && w != 'i' && w != 'o' && w != 'u' &&\n                w != 'A' && w != 'E' && w != 'I' && w != 'O' && w != 'U') {\n                consonants++;\n            }\n        }\n        if (consonants == n) {\n            result.push_back(word);\n        }\n    }\n    return result;\n}\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(select_words(\"Mary had a little lamb\", 4) , {\"little\"}   ));\n    assert (issame(select_words(\"Mary had a little lamb\", 3) , {\"Mary\", \"lamb\"} ));\n    assert (issame(select_words(\"simple white space\", 2) , {}     ));\n    assert (issame(select_words(\"Hello world\", 4) , {\"world\"}  ));\n    assert (issame(select_words(\"Uncle sam\", 3) , {\"Uncle\"}));\n    assert (issame(select_words(\"\", 4) , {}));\n    assert (issame(select_words(\"a b c d e f\", 1) , {\"b\", \"c\", \"d\", \"f\"}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/160", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <iostream>\n#include <vector>\n#include <string>\n#include <stdexcept>\n\nint do_algebra(const std::vector<std::string>& operato, const std::vector<int>& operand) {\n    if (operato.size() != operand.size() - 1) {\n        throw std::invalid_argument(\"Invalid input: operator and operand vectors must have compatible sizes\");\n    }\n\n    int result = operand[0];\n    for (size_t i = 0; i < operato.size(); ++i) {\n        if (operato[i] == \"+\") {\n            result += operand[i + 1];\n        } else if (operato[i] == \"-\") {\n            result -= operand[i + 1];\n        } else if (operato[i] == \"*\") {\n            result *= operand[i + 1];\n        } else if (operato[i] == \"//\") {\n            if (operand[i + 1] == 0) {\n                throw std::runtime_error(\"Division by zero\");\n            }\n            result /= operand[i + 1];\n        } else if (operato[i] == \"**\") {\n            result = pow(result, operand[i + 1]);\n        } else {\n            throw std::invalid_argument(\"Invalid operator: \" + operato[i]);\n        }\n    }\n\n    return result;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (do_algebra({\"**\", \"*\", \"+\"}, {2, 3, 4, 5}) == 37);\n    assert (do_algebra({\"+\", \"*\", \"-\"}, {2, 3, 4, 5}) == 9);\n    assert (do_algebra({\"//\", \"*\"}, {7, 3, 4}) == 8);\n}\n", "result": "failed: a.out: test.cpp:53: int main(): Assertion `do_algebra({\"+\", \"*\", \"-\"}, {2, 3, 4, 5}) == 9' failed.\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/74", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> total_match(vector<string> lst1, vector<string> lst2) {\n    int sum1 = 0, sum2 = 0;\n    \n    // Calculate the total number of characters in lst1\n    for (const auto& str : lst1) {\n        sum1 += str.length();\n    }\n    \n    // Calculate the total number of characters in lst2\n    for (const auto& str : lst2) {\n        sum2 += str.length();\n    }\n    \n    // Return the list with fewer characters\n    return (sum1 <= sum2) ? lst1 : lst2;\n}\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(total_match({}, {}) , {}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\"}) , {\"hi\", \"hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) , {\"4\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) , {\"hI\", \"Hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) , {\"hI\", \"hi\", \"hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hii\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({}, {\"this\"}) , {}));\n    assert (issame(total_match({\"this\"}, {}) , {}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/98", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\n/**\n * Counts the number of uppercase vowels in even indices of a given string.\n *\n * @param s The input string.\n * @return The number of uppercase vowels in even indices.\n */\nint count_upper(string s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        // Check if the index is even\n        if (i % 2 == 0) {\n            // Check if the character is an uppercase vowel\n            if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_upper(\"aBCdEf\")  == 1);\n    assert (count_upper(\"abcdefg\") == 0);\n    assert (count_upper(\"dBBE\") == 0);\n    assert (count_upper(\"B\")  == 0);\n    assert (count_upper(\"U\")  == 1);\n    assert (count_upper(\"\") == 0);\n    assert (count_upper(\"EEEE\") == 2);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/140", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <string>\nusing namespace std;\n\nstring fix_spaces(string text) {\n    string result = \"\";\n    int space_count = 0;\n    for (char c : text) {\n        if (c == ' ') {\n            space_count++;\n        } else {\n            if (space_count > 2) {\n                result += \"-\";\n            } else if (space_count > 0) {\n                result += \"_\";\n            }\n            space_count = 0;\n            result += c;\n        }\n    }\n    if (space_count > 2) {\n        result += \"-\";\n    } else if (space_count > 0) {\n        result += \"_\";\n    }\n    return result;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fix_spaces(\"Example\") == \"Example\");\n    assert (fix_spaces(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert (fix_spaces(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert (fix_spaces(\"Exa   mple\") == \"Exa-mple\");\n    assert (fix_spaces(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\n", "result": "failed: a.out: test.cpp:49: int main(): Assertion `fix_spaces(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"' failed.\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/34", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n/**\n * Returns a vector of unique elements in sorted order.\n *\n * @param l The input vector.\n * @return A vector of unique elements in sorted order.\n */\nvector<int> unique(vector<int> l) {\n    // Remove duplicates by converting to a set\n    sort(l.begin(), l.end());\n    l.erase(unique(l.begin(), l.end()), l.end());\n    return l;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique({5, 3, 5, 2, 3, 3, 9, 0, 123}) , {0, 2, 3, 5, 9, 123}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/66", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <string>\nusing namespace std;\n\n/**\n * Returns the sum of the ASCII codes of the upper case characters in the input string.\n *\n * @param s The input string.\n * @return The sum of the ASCII codes of the upper case characters.\n */\nint digitSum(string s) {\n    int sum = 0;\n    for (char c : s) {\n        if (isupper(c)) {\n            sum += c;\n        }\n    }\n    return sum;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digitSum(\"\") == 0);\n    assert (digitSum(\"abAB\") == 131);\n    assert (digitSum(\"abcCd\") == 67);\n    assert (digitSum(\"helloE\") == 69);\n    assert (digitSum(\"woArBld\") == 131);\n    assert (digitSum(\"aAaaaXa\") == 153);\n    assert (digitSum(\" How are yOu?\") == 151);\n    assert (digitSum(\"You arE Very Smart\") == 327);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/139", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\nlong long special_factorial(int n) {\n    long long result = 1;\n    for (int i = 1; i <= n; i++) {\n        long long factorial = 1;\n        for (int j = 1; j <= i; j++) {\n            factorial *= j;\n        }\n        result *= factorial;\n    }\n    return result;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (special_factorial(4) == 288);\n    assert (special_factorial(5) == 34560);\n    assert (special_factorial(7) == 125411328000);\n    assert (special_factorial(1) == 1);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/120", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.rbegin(), arr.rend()); // sort in descending order\n    vector<int> result(arr.begin(), arr.begin() + k); // take the first k elements\n    sort(result.begin(), result.end()); // sort in ascending order\n    return result;\n}\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(maximum({-3, -4, 5}, 3) , {-4, -3, 5}));\n    assert (issame(maximum({4, -4, 4}, 2) , {4, 4}));\n    assert (issame(maximum({-3, 2, 1, 2, -1, -2, 1}, 1) , {2}));\n    assert (issame(maximum({123, -123, 20, 0 , 1, 2, -3}, 3) , {2, 20, 123}));\n    assert (issame(maximum({-123, 20, 0 , 1, 2, -3}, 4) , {0, 1, 2, 20}));\n    assert (issame(maximum({5, 15, 0, 3, -13, -8, 0}, 7) , {-13, -8, 0, 0, 3, 5, 15}));\n    assert (issame(maximum({-1, 0, 2, 5, 3, -10}, 2) , {3, 5}));\n    assert (issame(maximum({1, 0, 5, -7}, 1) , {5}));\n    assert (issame(maximum({4, -4}, 2) , {-4, 4}));\n    assert (issame(maximum({-10, 10}, 2) , {-10, 10}));\n    assert (issame(maximum({1, 2, 3, -23, 243, -400, 0}, 0) , {}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/121", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <stdio.h>\n#include <vector>\n\nint solution(std::vector<int> lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solution({5, 8, 7, 1})    == 12);\n    assert (solution({3, 3, 3, 3, 3}) == 9);\n    assert (solution({30, 13, 24, 321}) == 0);\n    assert (solution({5, 9}) == 5);\n    assert (solution({2, 4, 8}) == 0);\n    assert (solution({30, 13, 23, 32}) == 23);\n    assert (solution({3, 13, 2, 9}) == 3);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/35", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <math.h>\n#include <vector>\n#include <algorithm> // for std::max_element\n\nusing namespace std;\n\nfloat max_element(vector<float> l) {\n    if (l.empty()) {\n        throw std::invalid_argument(\"Vector is empty\");\n    }\n    return *std::max_element(l.begin(), l.end());\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(max_element({1, 2, 3})- 3)<1e-4);\n    assert (abs(max_element({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})- 124)<1e-4);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/12", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\n/**\n * Returns the longest string from a vector of strings.\n * If multiple strings have the same maximum length, returns the first one.\n * Returns an empty string if the input vector is empty.\n */\nstring longest(vector<string> strings) {\n    if (strings.empty()) {\n        return \"\";\n    }\n\n    string longestStr = strings[0];\n    for (const auto& str : strings) {\n        if (str.length() > longestStr.length()) {\n            longestStr = str;\n        }\n    }\n\n    return longestStr;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (longest({}) == \"\");\n    assert (longest({\"x\", \"y\", \"z\"}) == \"x\");\n    assert (longest({\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"}) == \"zzzz\");\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/20", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n/**\n * Find the two closest elements in a vector of numbers.\n *\n * @param numbers A vector of numbers (length at least 2)\n * @return A vector containing the two closest numbers in order (smaller, larger)\n */\nvector<float> find_closest_elements(vector<float> numbers) {\n  // Sort the vector in ascending order\n  sort(numbers.begin(), numbers.end());\n\n  // Initialize the minimum difference and the closest pair\n  float min_diff = INFINITY;\n  vector<float> closest_pair;\n\n  // Iterate through the sorted vector to find the closest pair\n  for (size_t i = 0; i < numbers.size() - 1; ++i) {\n    float diff = numbers[i + 1] - numbers[i];\n    if (diff < min_diff) {\n      min_diff = diff;\n      closest_pair = {numbers[i], numbers[i + 1]};\n    }\n  }\n\n  return closest_pair;\n}\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(find_closest_elements({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}) , {3.9, 4.0}));\n    assert (issame(find_closest_elements({1.0, 2.0, 5.9, 4.0, 5.0}) , {5.0, 5.9} ));\n    assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}) ,{2.0, 2.2}));\n     assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}) ,{2.0, 2.0}));\n      assert (issame(find_closest_elements({1.1, 2.2, 3.1, 4.1, 5.1}) , {2.2, 3.1}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/85", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <stdio.h>\n#include <vector>\n\nint add(std::vector<int> lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 != 0 && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add({4, 88}) == 88);\n    assert (add({4, 5, 6, 7, 2, 122}) == 122);\n    assert (add({4, 0, 6, 7}) == 0);\n    assert (add({4, 4, 6, 8}) == 12);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/21", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\nvector<float> rescale_to_unit(vector<float> numbers) {\n    // Find the minimum and maximum values in the vector\n    float min_val = *min_element(numbers.begin(), numbers.end());\n    float max_val = *max_element(numbers.begin(), numbers.end());\n\n    // Check if all values are the same (to avoid division by zero)\n    if (min_val == max_val) {\n        // If all values are the same, return a vector of zeros\n        vector<float> result(numbers.size(), 0.0f);\n        return result;\n    }\n\n    // Apply the linear transformation to each element\n    vector<float> result;\n    for (float num : numbers) {\n        result.push_back((num - min_val) / (max_val - min_val));\n    }\n\n    return result;\n}\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(rescale_to_unit({2.0, 49.9}) , {0.0, 1.0}));\n     assert (issame(rescale_to_unit({100.0, 49.9}) ,{1.0, 0.0})); \n     assert (issame(rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0}) , {0.0, 0.25, 0.5, 0.75, 1.0}));\n    assert (issame(rescale_to_unit({2.0, 1.0, 5.0, 3.0, 4.0}) , {0.25, 0.0, 1.0, 0.5, 0.75}));\n     assert (issame(rescale_to_unit({12.0, 11.0, 15.0, 13.0, 14.0}) ,{0.25, 0.0, 1.0, 0.5, 0.75}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/119", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\n// Move the function definition outside of match_parens\nbool is_balanced(const string& s) {\n    int balance = 0;\n    for (char c : s) {\n        if (c == '(') {\n            balance++;\n        } else {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance == 0;\n}\n\nstring match_parens(vector<string> lst) {\n    return (is_balanced(lst[0] + lst[1]) || is_balanced(lst[1] + lst[0])) ? \"Yes\" : \"No\";\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (match_parens({\"()(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \")\"}) == \"No\");\n    assert (match_parens({\"(()(())\", \"())())\"}) == \"No\");\n    assert (match_parens({\")())\", \"(()()(\"}) == \"Yes\");\n    assert (match_parens({\"(())))\", \"(()())((\"}) == \"Yes\");\n    assert (match_parens({\"()\", \"())\"}) == \"No\");\n    assert (match_parens({\"(()(\", \"()))()\"}) == \"Yes\");\n    assert (match_parens({\"((((\", \"((())\"}) == \"No\");\n    assert (match_parens({\")(()\", \"(()(\"}) == \"No\");\n    assert (match_parens({\")(\", \")(\"}) == \"No\");\n    assert (match_parens({\"(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \"(\"}) == \"Yes\" );\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/19", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <string>\n#include <map>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n// Function to sort numbers in a string\nstring sort_numbers(string numbers) {\n    // Map to store number words and their corresponding integer values\n    map<string, int> numMap = {\n        {\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3}, {\"four\", 4},\n        {\"five\", 5}, {\"six\", 6}, {\"seven\", 7}, {\"eight\", 8}, {\"nine\", 9}\n    };\n\n    // Split the input string into a vector of words\n    vector<string> words;\n    size_t pos = 0;\n    while ((pos = numbers.find(\" \")) != string::npos) {\n        words.push_back(numbers.substr(0, pos));\n        numbers.erase(0, pos + 1);\n    }\n    words.push_back(numbers);\n\n    // Sort the words based on their corresponding integer values\n    sort(words.begin(), words.end(), [&numMap](const string& a, const string& b) {\n        return numMap[a] < numMap[b];\n    });\n\n    // Join the sorted words back into a string\n    string sortedNumbers;\n    for (const auto& word : words) {\n        sortedNumbers += word + \" \";\n    }\n    sortedNumbers.pop_back(); // Remove the trailing space\n\n    return sortedNumbers;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sort_numbers(\"\") == \"\");\n    assert (sort_numbers(\"three\") == \"three\");\n    assert (sort_numbers(\"three five nine\") == \"three five nine\");\n     assert (sort_numbers(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n      assert (sort_numbers(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/30", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n\n/**\n * Returns a new vector containing only the positive numbers from the input vector.\n *\n * @param l The input vector of numbers.\n * @return A new vector containing only the positive numbers from the input vector.\n */\nvector<float> get_positive(vector<float> l) {\n    vector<float> positive_numbers;\n    for (float num : l) {\n        if (num > 0) {\n            positive_numbers.push_back(num);\n        }\n    }\n    return positive_numbers;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_positive({-1, -2, 4, 5, 6}) , {4, 5, 6} ));\n    assert (issame(get_positive({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}) , {5, 3, 2, 3, 3, 9, 123, 1}));\n     assert (issame(get_positive({-1, -2}) , {} ));\n     assert (issame(get_positive({}) , {}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/64", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\nint vowels_count(string s) {\n    int count = 0;\n    for (char c : s) {\n        switch (tolower(c)) {\n            case 'a':\n            case 'e':\n            case 'i':\n            case 'o':\n            case 'u':\n                count++;\n                break;\n            case 'y':\n                if (c == s.back()) {\n                    count++;\n                }\n                break;\n        }\n    }\n    return count;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (vowels_count(\"abcde\") == 2);\n    assert (vowels_count(\"Alone\") == 3);\n    assert (vowels_count(\"key\") == 2);\n    assert (vowels_count(\"bye\") == 1);\n    assert (vowels_count(\"keY\") == 2);\n    assert (vowels_count(\"bYe\") == 1);\n    assert (vowels_count(\"ACEDY\") == 3);\n   \n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/128", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <math.h>\n#include <vector>\n\nusing namespace std;\n\n/**\n * Returns the sum of magnitudes of integers multiplied by product of all signs\n * of each number in the vector.\n *\n * @param arr A vector of integers.\n * @return The product of signs multiplied by the sum of magnitudes.\n *         Returns -32768 for an empty vector.\n */\nint prod_signs(vector<int> arr) {\n    int sum_magnitudes = 0;\n    int product_signs = 1;\n\n    // Iterate over each element in the vector\n    for (int num : arr) {\n        // Calculate the magnitude of the number\n        int magnitude = abs(num);\n\n        // Update the sum of magnitudes\n        sum_magnitudes += magnitude;\n\n        // Update the product of signs\n        if (num > 0) {\n            product_signs *= 1;\n        } else if (num < 0) {\n            product_signs *= -1;\n        } else {\n            // If the number is 0, the product of signs is 0\n            product_signs = 0;\n        }\n    }\n\n    // If the vector is empty, return -32768\n    if (arr.empty()) {\n        return -32768;\n    }\n\n    // Return the product of signs multiplied by the sum of magnitudes\n    return product_signs * sum_magnitudes;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prod_signs({1, 2, 2, -4}) == -9);\n    assert (prod_signs({0, 1}) == 0);\n    assert (prod_signs({1, 1, 1, 2, 3, -1, 1}) == -10);\n    assert (prod_signs({}) == -32768);\n    assert (prod_signs({2, 4,1, 2, -1, -1, 9}) == 20);\n    assert (prod_signs({-1, 1, -1, 1}) == 4);\n    assert (prod_signs({-1, 1, 1, 1}) == -4);\n    assert (prod_signs({-1, 1, 1, 0}) == 0);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/122", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\nint add_elements(vector<int> arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++) {\n        int num = arr[i];\n        int digits = 0;\n        if (num == 0) digits = 1;\n        else if (num < 0) num = -num;\n        while (num > 0) {\n            num /= 10;\n            digits++;\n        }\n        if (digits <= 2) sum += arr[i];\n    }\n    return sum;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add_elements({1,-2,-3,41,57,76,87,88,99}, 3) == -4);\n    assert (add_elements({111,121,3,4000,5,6}, 2) == 0);\n    assert (add_elements({11,21,3,90,5,6,7,8,9}, 4) == 125);\n    assert (add_elements({111,21,3,4000,5,6,7,8,9}, 4) == 24);\n    assert (add_elements({1}, 1) == 1);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/59", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <stdio.h>\n\n// Function to check if a number is prime\nint is_prime(int num) {\n    if (num <= 1) return 0;\n    for (int i = 2; i * i <= num; i++) {\n        if (num % i == 0) return 0;\n    }\n    return 1;\n}\n\n// Function to find the largest prime factor of a number\nint largest_prime_factor(int n) {\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            if (is_prime(n / i)) return n / i;\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_prime_factor(15) == 5);\n    assert (largest_prime_factor(27) == 3);\n    assert (largest_prime_factor(63) == 7);\n    assert (largest_prime_factor(330) == 11);\n    assert (largest_prime_factor(13195) == 29);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/134", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <string>\nusing namespace std;\n\n/**\n * Returns true if the last character of a given string is an alphabetical character\n * and is not a part of a word, and false otherwise.\n *\n * @param txt The input string to check.\n * @return true if the last character is a standalone alphabetical character, false otherwise.\n */\nbool check_if_last_char_is_a_letter(string txt) {\n    // Check if the string is empty\n    if (txt.empty()) {\n        return false;\n    }\n\n    // Get the last character of the string\n    char last_char = txt.back();\n\n    // Check if the last character is an alphabetical character\n    if (!isalpha(last_char)) {\n        return false;\n    }\n\n    // Check if the last character is part of a word\n    if (txt.length() > 1 && txt[txt.length() - 2] != ' ') {\n        return false;\n    }\n\n    // If all checks pass, return true\n    return true;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_if_last_char_is_a_letter(\"apple\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e\") == true);\n    assert (check_if_last_char_is_a_letter(\"eeeee\") == false);\n    assert (check_if_last_char_is_a_letter(\"A\") == true);\n    assert (check_if_last_char_is_a_letter(\"Pumpkin pie \") == false);\n    assert (check_if_last_char_is_a_letter(\"Pumpkin pie 1\") == false);\n    assert (check_if_last_char_is_a_letter(\"\") == false);\n    assert (check_if_last_char_is_a_letter(\"eeeee e \") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pie\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e \") == false);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/127", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring intersection(vector<int> interval1, vector<int> interval2) {\n    // Calculate the intersection of the two intervals\n    int intersection_start = max(interval1[0], interval2[0]);\n    int intersection_end = min(interval1[1], interval2[1]);\n\n    // Check if the intervals intersect\n    if (intersection_start <= intersection_end) {\n        // Calculate the length of the intersection\n        int intersection_length = intersection_end - intersection_start + 1;\n\n        // Check if the length of the intersection is a prime number\n        if (intersection_length > 1) {\n            bool is_prime = true;\n            for (int i = 2; i * i <= intersection_length; i++) {\n                if (intersection_length % i == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            return is_prime ? \"YES\" : \"NO\";\n        } else {\n            return \"NO\";\n        }\n    } else {\n        return \"NO\";\n    }\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (intersection({1, 2}, {2, 3}) == \"NO\");\n    assert (intersection({-1, 1}, {0, 4}) == \"NO\");\n    assert (intersection({-3, -1}, {-5, 5}) == \"YES\");\n    assert (intersection({-2, 2}, {-4, 0}) == \"YES\");\n    assert (intersection({-11, 2}, {-1, -1}) == \"NO\");\n    assert (intersection({1, 2}, {3, 5}) == \"NO\");\n    assert (intersection({1, 2}, {1, 2}) == \"NO\");\n    assert (intersection({-2, -2}, {-3, -2}) == \"NO\");\n}\n", "result": "failed: a.out: test.cpp:52: int main(): Assertion `intersection({-1, 1}, {0, 4}) == \"NO\"' failed.\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/42", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n    vector<int> result(l.size());\n    std::transform(l.begin(), l.end(), result.begin(), [](int x) { return x + 1; });\n    return result;\n}\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(incr_list({}) , {}));\n    assert (issame(incr_list({3, 2, 1}) , {4, 3, 2}));\n    assert (issame(incr_list({5, 2, 5, 2, 3, 3, 9, 0, 123}) , {6, 3, 6, 3, 4, 4, 10, 1, 124}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/11", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <string>\nusing namespace std;\n\n/**\n * Performs binary XOR on two input strings consisting only of 1s and 0s.\n * \n * @param a First input string\n * @param b Second input string\n * @return Result of binary XOR as a string\n */\nstring string_xor(string a, string b) {\n    // Check if both strings have the same length\n    if (a.length() != b.length()) {\n        throw invalid_argument(\"Both strings must have the same length\");\n    }\n\n    string result = \"\";\n    for (int i = 0; i < a.length(); i++) {\n        // Perform XOR on corresponding characters\n        char xor_result = (a[i] == b[i]) ? '0' : '1';\n        result += xor_result;\n    }\n    return result;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_xor(\"111000\", \"101010\") == \"010010\");\n     assert (string_xor(\"1\", \"1\") == \"0\");\n    assert (string_xor(\"0101\", \"0000\") == \"0101\");\n\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/13", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <stdio.h>\n\n// Function to calculate the greatest common divisor of two integers\nint greatest_common_divisor(int a, int b) {\n    // Base case: if b is 0, the GCD is a\n    if (b == 0) {\n        return a;\n    }\n    // Recursive case: call the function with b and the remainder of a/b\n    else {\n        return greatest_common_divisor(b, a % b);\n    }\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (greatest_common_divisor(3, 7) == 1);\n     assert (greatest_common_divisor(10, 15) == 5);\n      assert (greatest_common_divisor(49, 14) == 7);\n     assert (greatest_common_divisor(144, 60) == 12);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/60", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <stdio.h>\n\n// Function to calculate the sum of numbers from 1 to n\nint sum_to_n(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_to_n(1) == 1);\n    assert (sum_to_n(6) == 21);\n    assert (sum_to_n(11) == 66);\n    assert (sum_to_n(30) == 465);\n    assert (sum_to_n(100) == 5050);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/40", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <algorithm>\n#include <vector>\n\nbool triples_sum_to_zero(std::vector<int> l) {\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n        if (i > 0 && l[i] == l[i-1]) {\n            continue;\n        }\n        int left = i + 1;\n        int right = l.size() - 1;\n        while (left < right) {\n            int total = l[i] + l[left] + l[right];\n            if (total < 0) {\n                left += 1;\n            } else if (total > 0) {\n                right -= 1;\n            } else {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (triples_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (triples_sum_to_zero({1, 3, 5, -1}) == false);\n    assert (triples_sum_to_zero({1, 3, -2, 1}) == true);\n    assert (triples_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (triples_sum_to_zero({1, 2, 5, 7}) == false);\n    assert (triples_sum_to_zero({2, 4, -5, 3, 9, 7}) == true);\n    assert (triples_sum_to_zero({1}) == false);\n    assert (triples_sum_to_zero({1, 3, 5, -100}) == false);\n    assert (triples_sum_to_zero({100, 3, 5, -100}) == false);\n}\n", "result": "failed: ", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/23", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <string>\nusing namespace std;\n\n/**\n * Returns the length of the given string.\n *\n * @param str The input string.\n * @return The length of the string.\n */\nint strlen(string str) {\n    return str.length();\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (strlen(\"\") == 0);\n    assert (strlen(\"x\") == 1);\n     assert (strlen(\"asdasnakj\") == 9);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/130", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <vector>\nusing namespace std;\n\nvector<int> tri(int n) {\n    vector<int> tribonacci_sequence(n + 1);\n    tribonacci_sequence[1] = 3;\n    tribonacci_sequence[2] = 1 + 2 / 2;\n    tribonacci_sequence[3] = tribonacci_sequence[2] + tribonacci_sequence[1] + (1 + 4 / 2);\n    for (int i = 4; i <= n; i++) {\n        if (i % 2 == 0) {\n            tribonacci_sequence[i] = 1 + i / 2;\n        } else {\n            tribonacci_sequence[i] = tribonacci_sequence[i - 1] + tribonacci_sequence[i - 2] + tribonacci_sequence[i - 3];\n        }\n    }\n    return tribonacci_sequence;\n}\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(tri(3) , {1, 3, 2, 8}));\n    assert (issame(tri(4) , {1, 3, 2, 8, 3}));\n    assert (issame(tri(5) , {1, 3, 2, 8, 3, 15}));\n    assert (issame(tri(6) , {1, 3, 2, 8, 3, 15, 4}));\n    assert (issame(tri(7) , {1, 3, 2, 8, 3, 15, 4, 24}));\n    assert (issame(tri(8) , {1, 3, 2, 8, 3, 15, 4, 24, 5}));\n    assert (issame(tri(9) , {1, 3, 2, 8, 3, 15, 4, 24, 5, 35}));\n    assert (issame(tri(20) , {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11}));\n    assert (issame(tri(0) , {1}));\n    assert (issame(tri(1) , {1, 3}));\n}\n", "result": "failed: a.out: test.cpp:46: int main(): Assertion `issame(tri(3) , {1, 3, 2, 8})' failed.\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/46", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\nusing namespace std;\n\nint fib4(int n) {\n    if (n <= 1) {\n        return 0;\n    } else if (n == 2) {\n        return 2;\n    } else if (n == 3) {\n        return 0;\n    }\n\n    int fib4_values[4] = {0, 0, 2, 0};\n    for (int i = 4; i <= n; i++) {\n        int next_fib4 = fib4_values[0] + fib4_values[1] + fib4_values[2] + fib4_values[3];\n        fib4_values[0] = fib4_values[1];\n        fib4_values[1] = fib4_values[2];\n        fib4_values[2] = fib4_values[3];\n        fib4_values[3] = next_fib4;\n    }\n\n    return fib4_values[3];\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib4(5) == 4);\n    assert (fib4(8) == 28);\n    assert (fib4(10) == 104);\n    assert (fib4(12) == 386);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/51", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\nstring remove_vowels(string text) {\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    for (char c : text) {\n        if (vowels.find(c) == string::npos) {\n            result += c;\n        }\n    }\n    return result;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (remove_vowels(\"\") == \"\");\n    assert (remove_vowels(\"abcdef\\nghijklm\") == \"bcdf\\nghjklm\");\n    assert (remove_vowels(\"fedcba\") == \"fdcb\");\n    assert (remove_vowels(\"eeeee\") == \"\");\n    assert (remove_vowels(\"acBAA\") == \"cB\");\n    assert (remove_vowels(\"EcBOO\") == \"cB\");\n    assert (remove_vowels(\"ybcd\") == \"ybcd\");\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/18", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <string>\nusing namespace std;\n\n/**\n * Counts the number of occurrences of a substring in a given string.\n * Overlapping cases are included in the count.\n *\n * @param str The original string to search in.\n * @param substring The substring to search for.\n * @return The number of times the substring is found in the original string.\n */\nint how_many_times(string str, string substring) {\n    int count = 0;\n    size_t pos = 0;\n\n    // Loop through the string until we've checked all possible positions\n    while (pos < str.length()) {\n        // Find the next occurrence of the substring\n        pos = str.find(substring, pos);\n\n        // If the substring is not found, break out of the loop\n        if (pos == string::npos) {\n            break;\n        }\n\n        // Increment the count and move the position to the next character\n        count++;\n        pos++;\n    }\n\n    return count;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (how_many_times(\"\", \"x\") == 0);\n    assert (how_many_times(\"xyxyxyx\", \"x\") == 4);\n     assert (how_many_times(\"cacacacac\", \"cac\") == 4);\n    assert (how_many_times(\"john doe\", \"john\") == 1);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/143", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <stdio.h>\n#include <string>\n#include <sstream>\n#include <vector>\n\n// Function to check if a number is prime\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\n// Function to get words with prime lengths from a sentence\nstring words_in_sentence(string sentence) {\n    stringstream ss(sentence);\n    string word;\n    string result = \"\";\n\n    // Iterate over each word in the sentence\n    while (ss >> word) {\n        // Check if the length of the word is a prime number\n        if (isPrime(word.length())) {\n            // If it is, append it to the result string\n            result += word + \" \";\n        }\n    }\n\n    // Remove the trailing space from the result string\n    if (!result.empty()) {\n        result.pop_back();\n    }\n\n    return result;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (words_in_sentence(\"This is a test\") == \"is\");\n    assert (words_in_sentence(\"lets go for swimming\") == \"go for\");\n    assert (words_in_sentence(\"there is no place available here\") == \"there is no place\");\n    assert (words_in_sentence(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert (words_in_sentence(\"go for it\") == \"go for it\");\n    assert (words_in_sentence(\"here\") == \"\");\n    assert (words_in_sentence(\"here is\") == \"is\");\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/63", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <stdio.h>\n\n/**\n * Compute the n-th element of the FibFib number sequence.\n *\n * The FibFib sequence is defined as:\n *   fibfib(0) == 0\n *   fibfib(1) == 0\n *   fibfib(2) == 1\n *   fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n *\n * @param n The index of the element to compute.\n * @return The n-th element of the FibFib sequence.\n */\nint fibfib(int n) {\n  if (n <= 1) return 0; // base cases\n  if (n == 2) return 1; // base case\n\n  // Use dynamic programming to store previously computed values\n  int fibfib_values[n + 1];\n  fibfib_values[0] = 0;\n  fibfib_values[1] = 0;\n  fibfib_values[2] = 1;\n\n  // Compute the n-th element using the recurrence relation\n  for (int i = 3; i <= n; i++) {\n    fibfib_values[i] = fibfib_values[i - 1] + fibfib_values[i - 2] + fibfib_values[i - 3];\n  }\n\n  return fibfib_values[n];\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fibfib(2) == 1);\n    assert (fibfib(1) == 0);\n    assert (fibfib(5) == 4);\n    assert (fibfib(8) == 24);\n    assert (fibfib(10) == 81);\n    assert (fibfib(12) == 274);\n    assert (fibfib(14) == 927);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/43", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\nbool pairs_sum_to_zero(vector<int> l) {\n    // Create a set to store the elements we've seen so far\n    set<int> seen;\n\n    // Iterate over the vector\n    for (int num : l) {\n        // Check if the negation of the current number is in the set\n        if (seen.find(-num) != seen.end()) {\n            // If it is, return true\n            return true;\n        }\n        // Otherwise, add the current number to the set\n        seen.insert(num);\n    }\n\n    // If we've iterated over the entire vector and haven't found a pair that sums to zero, return false\n    return false;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (pairs_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (pairs_sum_to_zero({1, 3, -2, 1}) == false);\n    assert (pairs_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (pairs_sum_to_zero({2, 4, -5, 3, 5, 7}) == true);\n    assert (pairs_sum_to_zero({1}) == false);\n    assert (pairs_sum_to_zero({-3, 9, -1, 3, 2, 30}) == true);\n    assert (pairs_sum_to_zero({-3, 9, -1, 3, 2, 31}) == true);\n    assert (pairs_sum_to_zero({-3, 9, -1, 4, 2, 30}) == false);\n    assert (pairs_sum_to_zero({-3, 9, -1, 4, 2, 31}) == false);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/108", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\nint count_nums(vector<int> n) {\n    int count = 0;\n    for (int num : n) {\n        int digit_sum = 0;\n        int temp = abs(num);\n        while (temp > 0) {\n            digit_sum += temp % 10;\n            temp /= 10;\n        }\n        if (digit_sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_nums({}) == 0);\n    assert (count_nums({-1, -2, 0}) == 0);\n    assert (count_nums({1, 1, 2, -2, 3, 4, 5}) == 6);\n    assert (count_nums({1, 6, 9, -6, 0, 1, 5}) == 5);\n    assert (count_nums({1, 100, 98, -7, 1, -1}) == 4);\n    assert (count_nums({12, 23, 34, -45, -56, 0}) == 5);\n    assert (count_nums({-0, 1}) == 1);\n    assert (count_nums({1}) == 1);\n}\n", "result": "failed: a.out: test.cpp:39: int main(): Assertion `count_nums({-1, -2, 0}) == 0' failed.\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/89", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring encrypt(string s) {\n    string result = \"\";\n    for (char c : s) {\n        if (isalpha(c)) {\n            int ascii_offset = isupper(c) ? 65 : 97;\n            result += (char)((c - ascii_offset + 2*2) % 26 + ascii_offset);\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encrypt(\"hi\") == \"lm\");\n    assert (encrypt(\"asdfghjkl\") == \"ewhjklnop\");\n    assert (encrypt(\"gf\") == \"kj\");\n    assert (encrypt(\"et\") == \"ix\");\n    assert (encrypt(\"faewfawefaewg\")==\"jeiajeaijeiak\");\n    assert (encrypt(\"hellomyfriend\")==\"lippsqcjvmirh\");\n    assert (encrypt(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")==\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert (encrypt(\"a\")==\"e\");\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/70", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\nvector<int> strange_sort_list(vector<int> lst) {\n    if (lst.empty()) return lst; // edge case: empty list\n\n    vector<int> result;\n    bool is_min = true; // flag to alternate between min and max\n\n    while (!lst.empty()) {\n        if (is_min) {\n            auto min_it = min_element(lst.begin(), lst.end());\n            result.push_back(*min_it);\n            lst.erase(min_it);\n        } else {\n            auto max_it = max_element(lst.begin(), lst.end());\n            result.push_back(*max_it);\n            lst.erase(max_it);\n        }\n        is_min = !is_min; // toggle flag\n    }\n\n    return result;\n}\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(strange_sort_list({1, 2, 3, 4}) , {1, 4, 2, 3}));\n    assert (issame(strange_sort_list({5, 6, 7, 8, 9}) , {5, 9, 6, 8, 7}));\n    assert (issame(strange_sort_list({1, 2, 3, 4, 5}) , {1, 5, 2, 4, 3}));\n    assert (issame(strange_sort_list({5, 6, 7, 8, 9, 1}) , {1, 9, 5, 8, 6, 7}));\n    assert (issame(strange_sort_list({5, 5, 5, 5}) , {5, 5, 5, 5}));\n    assert (issame(strange_sort_list({}) , {}));\n    assert (issame(strange_sort_list({1,2,3,4,5,6,7,8}) , {1, 8, 2, 7, 3, 6, 4, 5}));\n    assert (issame(strange_sort_list({0,2,2,2,5,5,-5,-5}) , {-5, 5, -5, 5, 0, 2, 2, 2}));\n    assert (issame(strange_sort_list({111111}) , {111111}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/104", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nbool has_even_digit(int n) {\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit % 2 == 0) {\n            return true;\n        }\n        n /= 10;\n    }\n    return false;\n}\n\nvector<int> unique_digits(vector<int> x) {\n    vector<int> result;\n    for (int num : x) {\n        if (!has_even_digit(num)) {\n            result.push_back(num);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique_digits({15, 33, 1422, 1}) , {1, 15, 33}));\n    assert (issame(unique_digits({152, 323, 1422, 10}) , {}));\n    assert (issame(unique_digits({12345, 2033, 111, 151}) , {111, 151}));\n    assert (issame(unique_digits({135, 103, 31}) , {31, 135}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/26", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\nvector<int> remove_duplicates(vector<int> numbers) {\n    vector<int> result;\n    for (int num : numbers) {\n        if (count(numbers.begin(), numbers.end(), num) == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(remove_duplicates({}) , {}));\n     assert (issame(remove_duplicates({1, 2, 3, 4}) , {1, 2, 3, 4}));\n      assert (issame(remove_duplicates({1, 2, 3, 2, 4, 3, 5}) , {1, 4, 5}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/126", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nbool is_sorted(vector<int> lst) {\n    vector<int> sorted_lst = lst;\n    sort(sorted_lst.begin(), sorted_lst.end());\n    if (lst != sorted_lst) return false;\n\n    for (int i = 0; i < lst.size(); i++) {\n        int count = 0;\n        for (int j = 0; j < lst.size(); j++) {\n            if (lst[i] == lst[j]) count++;\n        }\n        if (count > 2) return false;\n    }\n    return true;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_sorted({5}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5}) == false);\n    assert (is_sorted({1, 2, 3, 4, 5, 6}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5, 6, 7}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5, 6, 7}) == false);\n    assert (is_sorted({}) == true);\n    assert (is_sorted({1}) == true);\n    assert (is_sorted({3, 2, 1}) == false);\n    assert (is_sorted({1, 2, 2, 2, 3, 4}) == false);\n    assert (is_sorted({1, 2, 3, 3, 3, 4}) == false);\n    assert (is_sorted({1, 2, 2, 3, 3, 4}) == true);\n    assert (is_sorted({1, 2, 3, 4}) == true);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/68", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <vector>\n#include <limits>\n\n/**\n * Plucks the node with the smallest even value from the given tree branch.\n * If multiple nodes have the same smallest even value, returns the node with the smallest index.\n * If no even values are found or the input vector is empty, returns an empty vector.\n *\n * @param arr The input vector representing the tree branch.\n * @return A vector containing the smallest even value and its index, or an empty vector if no even values are found.\n */\nvector<int> pluck(vector<int> arr) {\n    int smallestEven = std::numeric_limits<int>::max(); // Initialize with max int value\n    int smallestIndex = -1;\n\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < smallestEven) {\n            smallestEven = arr[i];\n            smallestIndex = i;\n        }\n    }\n\n    if (smallestIndex == -1) {\n        return {}; // Return empty vector if no even values are found\n    }\n\n    return {smallestEven, smallestIndex};\n}\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(pluck({4,2,3}) , {2, 1}));\n    assert (issame(pluck({1,2,3}) , {2, 1}));\n    assert (issame(pluck({}) , {}));\n    assert (issame(pluck({5, 0, 3, 0, 4, 2}) , {0, 1}));\n    assert (issame(pluck({1, 2, 3, 0, 5, 3}) , {0, 3}));\n    assert (issame(pluck({5, 4, 8, 4 ,8}) , {4, 1}));\n    assert (issame(pluck({7, 6, 7, 1}) , {6, 1}));\n    assert (issame(pluck({7, 9, 7, 1}) , {}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/90", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\nint next_smallest(vector<int> lst) {\n    // Check if the list is empty\n    if (lst.empty()) {\n        return -1; // Return -1 to indicate no 2nd smallest element\n    }\n\n    // Sort the list in ascending order\n    sort(lst.begin(), lst.end());\n\n    // Check if there are at least two distinct elements\n    if (lst.size() < 2 || lst[0] == lst[1]) {\n        return -1; // Return -1 to indicate no 2nd smallest element\n    }\n\n    // Return the 2nd smallest element\n    return lst[1];\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (next_smallest({1, 2, 3, 4, 5}) == 2);\n    assert (next_smallest({5, 1, 4, 3, 2}) == 2);\n    assert (next_smallest({}) == -1);\n    assert (next_smallest({1, 1}) == -1);\n    assert (next_smallest({1,1,1,1,0}) == 1);\n    assert (next_smallest({-35, 34, 12, -45}) == -35);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/58", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> common(vector<int> l1, vector<int> l2) {\n    // Remove duplicates from l1 and l2\n    sort(l1.begin(), l1.end());\n    l1.erase(unique(l1.begin(), l1.end()), l1.end());\n    \n    sort(l2.begin(), l2.end());\n    l2.erase(unique(l2.begin(), l2.end()), l2.end());\n    \n    // Find the intersection of l1 and l2\n    vector<int> result;\n    set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), back_inserter(result));\n    \n    return result;\n}\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}) , {1, 5, 653}));\n    assert (issame(common({5, 3, 2, 8}, {3, 2}) , {2, 3}));\n    assert (issame(common({4, 3, 2, 8}, {3, 2, 4}) , {2, 3, 4}));\n    assert (issame(common({4, 3, 2, 8}, {}) , {}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/96", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <vector>\n#include <cmath>\n\n/**\n * Returns a vector of the first n prime numbers less than n.\n *\n * @param n A non-negative integer.\n * @return A vector of prime numbers less than n.\n */\nvector<int> count_up_to(int n) {\n    vector<int> primes;\n    for (int i = 2; i < n; i++) {\n        bool is_prime = true;\n        for (int j = 2; j <= sqrt(i); j++) {\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(count_up_to(5) , {2,3}));\n    assert (issame(count_up_to(6) , {2,3,5}));\n    assert (issame(count_up_to(7) , {2,3,5}));\n    assert (issame(count_up_to(10) , {2,3,5,7}));\n    assert (issame(count_up_to(0) , {}));\n    assert (issame(count_up_to(22) , {2,3,5,7,11,13,17,19}));\n    assert (issame(count_up_to(1) , {}));\n    assert (issame(count_up_to(18) , {2,3,5,7,11,13,17}));\n    assert (issame(count_up_to(47) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43}));\n    assert (issame(count_up_to(101) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/112", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> reverse_delete(string s, string c) {\n    // Remove characters from s that are present in c\n    string result = \"\";\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            result += ch;\n        }\n    }\n\n    // Check if the result string is a palindrome\n    string reversed = result;\n    reverse(reversed.begin(), reversed.end());\n    bool is_palindrome = result == reversed;\n\n    // Return the result string and the palindrome check result\n    return {result, is_palindrome ? \"True\" : \"False\"};\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(reverse_delete(\"abcde\",\"ae\") , {\"bcd\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdef\", \"b\") , {\"acdef\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"ab\") , {\"cdedc\",\"True\"}));\n    assert (issame(reverse_delete(\"dwik\",\"w\") , {\"dik\",\"False\"}));\n    assert (issame(reverse_delete(\"a\",\"a\") , {\"\",\"True\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"\") , {\"abcdedcba\",\"True\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"v\") , {\"abcdedcba\",\"True\"}));\n    assert (issame(reverse_delete(\"vabba\",\"v\") , {\"abba\",\"True\"}));\n    assert (issame(reverse_delete(\"mamma\", \"mia\") , {\"\", \"True\"}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/99", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\nint closest_integer(string value) {\n    double num = stod(value); // convert string to double\n    double fractional_part = num - floor(num); // get fractional part\n\n    if (fractional_part < 0.5) {\n        return floor(num); // round down\n    } else if (fractional_part > 0.5) {\n        return ceil(num); // round up\n    } else {\n        // equidistant from two integers, round away from zero\n        if (num > 0) {\n            return ceil(num);\n        } else {\n            return floor(num);\n        }\n    }\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (closest_integer(\"10\") == 10);\n    assert (closest_integer(\"14.5\") == 15);\n    assert (closest_integer(\"-15.5\") == -16);\n    assert (closest_integer(\"15.3\") == 15);\n    assert (closest_integer(\"0\") == 0);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/157", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <stdio.h>\n#include <math.h>\n\n/**\n * Returns true if the three sides form a right-angled triangle, false otherwise.\n * A right-angled triangle is a triangle in which one angle is right angle or 90 degree.\n *\n * @param a The length of the first side.\n * @param b The length of the second side.\n * @param c The length of the third side.\n * @return True if the three sides form a right-angled triangle, false otherwise.\n */\nbool right_angle_triangle(float a, float b, float c) {\n    // Sort the sides in ascending order\n    if (a > b) {\n        float temp = a;\n        a = b;\n        b = temp;\n    }\n    if (b > c) {\n        float temp = b;\n        b = c;\n        c = temp;\n    }\n\n    // Check if the square of the longest side is equal to the sum of the squares of the other two sides\n    return (a * a + b * b == c * c);\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (right_angle_triangle(3, 4, 5) == true);\n    assert (right_angle_triangle(1, 2, 3) == false);\n    assert (right_angle_triangle(10, 6, 8) == true);\n    assert (right_angle_triangle(2, 2, 2) == false);\n    assert (right_angle_triangle(7, 24, 25) == true);\n    assert (right_angle_triangle(10, 5, 7) == false);\n    assert (right_angle_triangle(5, 12, 13) == true);\n    assert (right_angle_triangle(15, 8, 17) == true);\n    assert (right_angle_triangle(48, 55, 73) == true);\n    assert (right_angle_triangle(1, 1, 1) == false);\n    assert (right_angle_triangle(2, 2, 10) == false);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/49", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <stdio.h>\n\n/**\n * Returns 2^n modulo p.\n *\n * @param n The exponent.\n * @param p The modulus.\n * @return 2^n modulo p.\n */\nint modp(int n, int p) {\n    int result = 1;\n    int base = 2;\n\n    while (n > 0) {\n        if (n % 2 == 1) {\n            result = (result * base) % p;\n        }\n        base = (base * base) % p;\n        n /= 2;\n    }\n\n    return result;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (modp(3, 5) == 3);\n    assert (modp(1101, 101) == 2);\n    assert (modp(0, 101) == 1);\n    assert (modp(3, 11) == 8);\n    assert (modp(100, 101) == 1);\n    assert (modp(30, 5) == 4);\n    assert (modp(31, 5) == 3);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/149", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\nvector<string> sorted_list_sum(vector<string> lst) {\n    // Filter out strings with odd lengths\n    lst.erase(remove_if(lst.begin(), lst.end(), [](const string& s) { return s.length() % 2 != 0; }), lst.end());\n\n    // Sort the remaining strings by length and then alphabetically\n    sort(lst.begin(), lst.end(), [](const string& a, const string& b) {\n        if (a.length() == b.length()) {\n            return a < b;\n        }\n        return a.length() < b.length();\n    });\n\n    return lst;\n}\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sorted_list_sum({\"aa\", \"a\", \"aaa\"}) , {\"aa\"}));\n    assert (issame(sorted_list_sum({\"school\", \"AI\", \"asdf\", \"b\"}) , {\"AI\", \"asdf\", \"school\"}));\n    assert (issame(sorted_list_sum({\"d\", \"b\", \"c\", \"a\"}) , {}));\n    assert (issame(sorted_list_sum({\"d\", \"dcba\", \"abcd\", \"a\"}) , {\"abcd\", \"dcba\"}));\n    assert (issame(sorted_list_sum({\"AI\", \"ai\", \"au\"}) , {\"AI\", \"ai\", \"au\"}));\n    assert (issame(sorted_list_sum({\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}) , {}));\n    assert (issame(sorted_list_sum({\"aaaa\", \"bbbb\", \"dd\", \"cc\"}) , {\"cc\", \"dd\", \"aaaa\", \"bbbb\"}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/156", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\nstring int_to_mini_roman(int number) {\n    // Define the mapping of integers to roman numerals\n    vector<pair<int, string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"},\n        {100, \"c\"}, {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"},\n        {10, \"x\"}, {9, \"ix\"}, {5, \"v\"}, {4, \"iv\"}, {1, \"i\"}\n    };\n\n    string result;\n    for (const auto& pair : roman_numerals) {\n        // Subtract the largest possible roman numeral value from the number\n        while (number >= pair.first) {\n            number -= pair.first;\n            result += pair.second;\n        }\n    }\n\n    return result;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (int_to_mini_roman(19) == \"xix\");\n    assert (int_to_mini_roman(152) == \"clii\");\n    assert (int_to_mini_roman(251) == \"ccli\");\n    assert (int_to_mini_roman(426) == \"cdxxvi\");\n    assert (int_to_mini_roman(500) == \"d\");\n    assert (int_to_mini_roman(1) == \"i\");\n    assert (int_to_mini_roman(4) == \"iv\");\n    assert (int_to_mini_roman(43) == \"xliii\");\n    assert (int_to_mini_roman(90) == \"xc\");\n    assert (int_to_mini_roman(94) == \"xciv\");\n    assert (int_to_mini_roman(532) == \"dxxxii\");\n    assert (int_to_mini_roman(900) == \"cm\");\n    assert (int_to_mini_roman(994) == \"cmxciv\");\n    assert (int_to_mini_roman(1000) == \"m\");\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/9", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> result;\n    int max_so_far = INT_MIN;\n    for (int num : numbers) {\n        max_so_far = max(max_so_far, num);\n        result.push_back(max_so_far);\n    }\n    return result;\n}\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(rolling_max({}),{}));\n    assert (issame(rolling_max({1, 2, 3, 4}) , {1, 2, 3, 4}));\n     assert (issame(rolling_max({4, 3, 2, 1}),{4, 4, 4, 4}));\n      assert (issame(rolling_max({3, 2, 3, 100, 3}) ,{3, 3, 3, 100, 100}));\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/65", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <string>\n#include <algorithm>\n\nstring circular_shift(int x, int shift) {\n    string num_str = to_string(x);\n    int num_digits = num_str.length();\n    shift = shift % num_digits;\n    if (shift == 0) {\n        std::reverse(num_str.begin(), num_str.end());\n        return num_str;\n    } else {\n        string shifted_str = num_str.substr(num_digits - shift, shift) + num_str.substr(0, num_digits - shift);\n        return shifted_str;\n    }\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (circular_shift(100, 2) == \"001\");\n    assert (circular_shift(12, 2) == \"12\");\n    assert (circular_shift(97, 8) == \"79\");\n    assert (circular_shift(12, 1) == \"21\");\n    assert (circular_shift(11, 101) == \"11\");\n}\n", "result": "failed: a.out: test.cpp:37: int main(): Assertion `circular_shift(12, 2) == \"12\"' failed.\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/158", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\nstring find_max(vector<string> words) {\n    int max_unique_chars = 0;\n    string result = \"\";\n\n    for (const string& word : words) {\n        set<char> unique_chars(word.begin(), word.end());\n        int num_unique_chars = unique_chars.size();\n\n        if (num_unique_chars > max_unique_chars) {\n            max_unique_chars = num_unique_chars;\n            result = word;\n        } else if (num_unique_chars == max_unique_chars) {\n            result = min(result, word);\n        }\n    }\n\n    return result;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert ((find_max({\"name\", \"of\", \"string\"}) == \"string\"));\n    assert ((find_max({\"name\", \"enam\", \"game\"}) == \"enam\"));\n    assert ((find_max({\"aaaaaaa\", \"bb\", \"cc\"}) == \"aaaaaaa\"));\n    assert ((find_max({\"abc\", \"cba\"}) == \"abc\"));\n    assert ((find_max({\"play\", \"this\", \"game\", \"of\",\"footbott\"}) == \"footbott\"));\n    assert ((find_max({\"we\", \"are\", \"gonna\", \"rock\"}) == \"gonna\"));\n    assert ((find_max({\"we\", \"are\", \"a\", \"mad\", \"nation\"}) == \"nation\"));\n    assert ((find_max({\"this\", \"is\", \"a\", \"prrk\"}) == \"this\"));\n    assert ((find_max({\"b\"}) == \"b\"));\n    assert ((find_max({\"play\", \"play\", \"play\"}) == \"play\"));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/8", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <stdio.h>\n#include <vector>\n\n/**\n * Returns a vector containing the sum and product of all integers in the input vector.\n * Empty sum is 0 and empty product is 1.\n *\n * @param numbers Input vector of integers\n * @return Vector containing sum and product of integers\n */\nstd::vector<int> sum_product(std::vector<int> numbers) {\n    int sum = 0;\n    int product = 1;\n\n    // Iterate over each number in the input vector\n    for (int num : numbers) {\n        sum += num;  // Add number to sum\n        product *= num;  // Multiply number with product\n    }\n\n    // Create a new vector with sum and product\n    std::vector<int> result = {sum, product};\n\n    return result;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sum_product({}) ,{0, 1}));\n    assert (issame(sum_product({1, 1, 1}), {3, 1}));\n    assert (issame(sum_product({100, 0}),{100, 0}));\n     assert (issame(sum_product({3, 5, 7}) , {3 + 5 + 7, 3 * 5 * 7}));\n      assert (issame(sum_product({10}) ,{10, 10}));\n}\n\n\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/86", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\nstring anti_shuffle(string s) {\n    string result = \"\";\n    string word = \"\";\n    \n    // Iterate through each character in the input string\n    for (char c : s) {\n        // If the character is a space, add the sorted word to the result and reset the word\n        if (c == ' ') {\n            sort(word.begin(), word.end()); // Sort the characters in the word\n            result += word + \" \"; // Add the sorted word to the result\n            word = \"\"; // Reset the word\n        } else {\n            word += c; // Add the character to the current word\n        }\n    }\n    \n    // Sort and add the last word to the result\n    sort(word.begin(), word.end());\n    result += word;\n    \n    return result;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (anti_shuffle(\"Hi\") == \"Hi\");\n    assert (anti_shuffle(\"hello\") == \"ehllo\");\n    assert (anti_shuffle(\"number\") == \"bemnru\");\n    assert (anti_shuffle(\"abcd\") == \"abcd\");\n    assert (anti_shuffle(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert (anti_shuffle(\"\") == \"\");\n    assert (anti_shuffle(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/129", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <vector>\n#include <algorithm>\n\nvector<int> minPath(std::vector<std::vector<int>> grid, int k) {\n    int n = grid.size();\n    std::vector<int> directions = {0, 1, 0, -1, 0};\n    std::vector<int> minPath(k, INT_MAX);\n\n    std::function<void(int, int, int, std::vector<int>&)> dfs =\n        [&](int i, int j, int pathLen, std::vector<int>& currentPath) {\n            if (pathLen == k) {\n                if (currentPath < minPath) {\n                    minPath = currentPath;\n                }\n                return;\n            }\n            for (int d = 0; d < 4; ++d) {\n                int ni = i + directions[d];\n                int nj = j + directions[d + 1];\n                if (ni >= 0 && ni < n && nj >= 0 && nj < n) {\n                    currentPath.push_back(grid[ni][nj]);\n                    dfs(ni, nj, pathLen + 1, currentPath);\n                    currentPath.pop_back();\n                }\n            }\n        };\n\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            std::vector<int> currentPath = {grid[i][j]};\n            dfs(i, j, 1, currentPath);\n        }\n    }\n\n    return minPath;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3) , {1, 2, 1}));\n    assert (issame(minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1) , {1}));\n    assert (issame(minPath({{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}, 4) , {1, 2, 1, 2}));\n    assert (issame(minPath({{6, 4, 13, 10}, {5, 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}}, 7) , {1, 10, 1, 10, 1, 10, 1}));\n    assert (issame(minPath({{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3, 10, 11, 16}}, 5) , {1, 7, 1, 7, 1}));\n    assert (issame(minPath({{11, 8, 7, 2}, {5, 16, 14, 4}, {9, 3, 15, 6}, {12, 13, 10, 1}}, 9) , {1, 6, 1, 6, 1, 6, 1, 6, 1}));\n    assert (issame(minPath({{12, 13, 10, 1}, {9, 3, 15, 6}, {5, 16, 14, 4}, {11, 8, 7, 2}}, 12) , {1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6}));\n    assert (issame(minPath({{2, 7, 4}, {3, 1, 5}, {6, 8, 9}}, 8) , {1, 3, 1, 3, 1, 3, 1, 3}));\n    assert (issame(minPath({{6, 1, 5}, {3, 8, 9}, {2, 7, 4}}, 8) , {1, 5, 1, 5, 1, 5, 1, 5}));\n    assert (issame(minPath({{1, 2}, {3, 4}}, 10) , {1, 2, 1, 2, 1, 2, 1, 2, 1, 2}));\n    assert (issame(minPath({{1, 3}, {3, 2}}, 10) , {1, 3, 1, 3, 1, 3, 1, 3, 1, 3}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/55", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <stdio.h>\n\nint fib(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    int a = 0, b = 1, result = 0;\n    for (int i = 2; i <= n; i++) {\n        result = a + b;\n        a = b;\n        b = result;\n    }\n    return result;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib(10) == 55);\n    assert (fib(1) == 1);\n    assert (fib(8) == 21);\n    assert (fib(11) == 89);\n    assert (fib(12) == 144);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/95", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <string>\n#include <map>\nusing namespace std;\n\n/**\n * Checks if all keys in a map are strings and are either all in lower case or all in upper case.\n *\n * @param dict The input map to check.\n * @return True if all keys are strings and are either all in lower case or all in upper case, false otherwise.\n */\nbool check_dict_case(map<string, string> dict) {\n    // If the map is empty, return false\n    if (dict.empty()) {\n        return false;\n    }\n\n    // Check if all keys are strings (this is always true in C++ since map keys are typed)\n    // Check if all keys are either all in lower case or all in upper case\n    bool allLower = true;\n    bool allUpper = true;\n    for (const auto& pair : dict) {\n        const string& key = pair.first;\n        for (char c : key) {\n            if (isupper(c)) {\n                allLower = false;\n            } else if (islower(c)) {\n                allUpper = false;\n            } else {\n                // If the key contains a non-alphabetic character, return false\n                return false;\n            }\n        }\n    }\n\n    // If all keys are either all in lower case or all in upper case, return true\n    return allLower || allUpper;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"b\",\"banana\"}}) == true);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) == false);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}}) == false);\n    assert (check_dict_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) == false);\n    assert (check_dict_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) == true  );\n    assert (check_dict_case({{\"fruit\",\"Orange\"}, {\"taste\",\"Sweet\"} }) == true  );\n    assert (check_dict_case({}) == false);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/72", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <stdio.h>\n#include <vector>\n#include <algorithm>\n\nbool will_it_fly(std::vector<int> q, int w) {\n    // Check if the vector is a palindrome\n    std::vector<int> reversed_q = q;\n    std::reverse(reversed_q.begin(), reversed_q.end());\n    if (q != reversed_q) {\n        return false; // Not a palindrome, won't fly\n    }\n\n    // Check if the sum of elements is less than or equal to the maximum weight\n    int sum = 0;\n    for (int i : q) {\n        sum += i;\n    }\n    if (sum > w) {\n        return false; // Too heavy, won't fly\n    }\n\n    return true; // Balanced and not too heavy, will fly\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (will_it_fly({3, 2, 3}, 9)==true);\n    assert (will_it_fly({1, 2}, 5) == false);\n    assert (will_it_fly({3}, 5) == true);\n    assert (will_it_fly({3, 2, 3}, 1) == false);\n    assert (will_it_fly({1, 2, 3}, 6) ==false);\n    assert (will_it_fly({5}, 5) == true);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/29", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\n/**\n * Filter an input vector of strings only for ones that start with a given prefix.\n *\n * @param strings Input vector of strings\n * @param prefix Prefix to filter by\n * @return Filtered vector of strings\n */\nvector<string> filter_by_prefix(vector<string> strings, string prefix) {\n    vector<string> filtered_strings;\n    for (const auto& str : strings) {\n        if (str.find(prefix) == 0) {\n            filtered_strings.push_back(str);\n        }\n    }\n    return filtered_strings;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_prefix({}, \"john\") , {}));\n    assert (issame(filter_by_prefix({\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\") , {\"xxx\", \"xxxAAA\", \"xxx\"}));\n\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/54", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\nbool same_chars(string s0, string s1) {\n    // Create a set of unique characters from each string\n    set<char> chars0(s0.begin(), s0.end());\n    set<char> chars1(s1.begin(), s1.end());\n\n    // Compare the two sets\n    return chars0 == chars1;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert (same_chars(\"abcd\", \"dddddddabc\") == true);\n    assert (same_chars(\"dddddddabc\", \"abcd\") == true);\n    assert (same_chars(\"eabcd\", \"dddddddabc\") == false);\n    assert (same_chars(\"abcd\", \"dddddddabcf\") == false);\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert (same_chars(\"aabb\", \"aaccc\") == false);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/77", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <cmath>\n#include <iostream>\n\nbool iscube(int a) {\n    int cube_root = round(std::pow(std::abs(a), 1.0/3.0));\n    return cube_root * cube_root * cube_root == std::abs(a);\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (iscube(1) == true);\n    assert (iscube(2) == false);\n    assert (iscube(-1) == true);\n    assert (iscube(64) == true);\n    assert (iscube(180) == false);\n    assert (iscube(1000) == true);\n    assert (iscube(0) == true);\n    assert (iscube(1729) == false);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/91", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <string>\n#include <vector>\nusing namespace std;\n\nint is_bored(string S) {\n    vector<string> sentences;\n    string temp = \"\";\n    for (char c : S) {\n        if (c == '.' || c == '?' || c == '!') {\n            sentences.push_back(temp);\n            temp = \"\";\n        } else {\n            temp += c;\n        }\n    }\n    if (!temp.empty()) {\n        sentences.push_back(temp);\n    }\n\n    int boredoms = 0;\n    for (string sentence : sentences) {\n        if (!sentence.empty() && toupper(sentence[0]) == 'I') {\n            boredoms++;\n        }\n    }\n    return boredoms;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_bored(\"Hello world\") == 0);\n    assert (is_bored(\"Is the sky blue?\") == 0);\n    assert (is_bored(\"I love It !\") == 1);\n    assert (is_bored(\"bIt\") == 0);\n    assert (is_bored(\"I feel good today. I will be productive. will kill It\") == 2);\n    assert (is_bored(\"You and I are going for a walk\") == 0);\n}\n", "result": "failed: a.out: test.cpp:48: int main(): Assertion `is_bored(\"Is the sky blue?\") == 0' failed.\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/73", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <vector>\nusing namespace std;\n\n/**\n * Returns the minimum number of elements that need to be changed to make the vector palindromic.\n *\n * @param arr The input vector of integers.\n * @return The minimum number of changes required.\n */\nint smallest_change(vector<int> arr) {\n    int n = arr.size();\n    int changes = 0;\n\n    // Compare elements from the start and end of the vector, moving towards the center.\n    for (int i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n - i - 1]) {\n            changes++;\n        }\n    }\n\n    return changes;\n}\n\n// Example usage:\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (smallest_change({1,2,3,5,4,7,9,6}) == 4);\n    assert (smallest_change({1, 2, 3, 4, 3, 2, 2}) == 1);\n    assert (smallest_change({1, 4, 2}) == 1);\n    assert (smallest_change({1, 4, 4, 2}) == 1);\n    assert (smallest_change({1, 2, 3, 2, 1}) == 0);\n    assert (smallest_change({3, 1, 1, 3}) == 0);\n    assert (smallest_change({1}) == 0);\n    assert (smallest_change({0, 1}) == 1);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/71", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <stdio.h>\n#include <math.h>\n\n/**\n * Calculates the area of a triangle given the lengths of its three sides.\n * \n * @param a The length of the first side.\n * @param b The length of the second side.\n * @param c The length of the third side.\n * @return The area of the triangle rounded to 2 decimal points if the sides form a valid triangle, -1 otherwise.\n */\nfloat triangle_area(float a, float b, float c) {\n    // Check if the sides form a valid triangle\n    if (a + b > c && a + c > b && b + c > a) {\n        // Calculate the semi-perimeter\n        float s = (a + b + c) / 2;\n        \n        // Calculate the area using Heron's formula\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n        \n        // Return the area rounded to 2 decimal points\n        return roundf(area * 100) / 100;\n    } else {\n        // Return -1 if the sides do not form a valid triangle\n        return -1;\n    }\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(3, 4, 5)-6.00)<0.01);\n    assert (abs(triangle_area(1, 2, 10) +1)<0.01);\n    assert (abs(triangle_area(4, 8, 5) -8.18)<0.01);\n    assert (abs(triangle_area(2, 2, 2) -1.73)<0.01);\n    assert (abs(triangle_area(1, 2, 3) +1)<0.01);\n    assert (abs(triangle_area(10, 5, 7) - 16.25)<0.01);\n    assert (abs(triangle_area(2, 6, 3) +1)<0.01);\n    assert (abs(triangle_area(1, 1, 1) -0.43)<0.01);\n    assert (abs(triangle_area(2, 2, 10) +1)<0.01);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/82", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <string>\nusing namespace std;\n\n/**\n * Returns true if the length of the input string is a prime number, false otherwise.\n *\n * @param str The input string.\n * @return True if the length of the string is prime, false otherwise.\n */\nbool prime_length(string str) {\n    int length = str.length();\n    if (length <= 1) {\n        return false; // 0 and 1 are not prime numbers\n    }\n\n    for (int i = 2; i * i <= length; i++) {\n        if (length % i == 0) {\n            return false; // if length is divisible by any number, it's not prime\n        }\n    }\n\n    return true; // if no divisors found, length is prime\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_length(\"Hello\") == true);\n    assert (prime_length(\"abcdcba\") == true);\n    assert (prime_length(\"kittens\") == true);\n    assert (prime_length(\"orange\") == false);\n    assert (prime_length(\"wow\") == true);\n    assert (prime_length(\"world\") == true);\n    assert (prime_length(\"MadaM\") == true);\n    assert (prime_length(\"Wow\") == true);\n    assert (prime_length(\"\") == false);\n    assert (prime_length(\"HI\") == true);\n    assert (prime_length(\"go\") == true);\n    assert (prime_length(\"gogo\") == false);\n    assert (prime_length(\"aaaaaaaaaaaaaaa\") == false);\n    assert (prime_length(\"Madam\") == true);\n    assert (prime_length(\"M\") == false);\n    assert (prime_length(\"0\") == false);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/114", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <stdio.h>\n#include <vector>\n#include <algorithm>\n\n/**\n * Finds the minimum sum of any non-empty sub-vector of nums.\n *\n * @param nums A vector of integers.\n * @return The minimum sum of any non-empty sub-vector of nums.\n */\nlong long minSubArraySum(vector<long long> nums) {\n    // Initialize the minimum sum to the first element of the vector\n    long long min_sum = nums[0];\n    \n    // Initialize the current sum to the first element of the vector\n    long long current_sum = nums[0];\n    \n    // Iterate through the vector starting from the second element\n    for (int i = 1; i < nums.size(); i++) {\n        // Update the current sum by adding the current element\n        current_sum = min(nums[i], current_sum + nums[i]);\n        \n        // Update the minimum sum if the current sum is smaller\n        min_sum = min(min_sum, current_sum);\n    }\n    \n    // Return the minimum sum\n    return min_sum;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (minSubArraySum({2, 3, 4, 1, 2, 4}) == 1);\n    assert (minSubArraySum({-1, -2, -3}) == -6);\n    assert (minSubArraySum({-1, -2, -3, 2, -10}) == -14);\n    assert (minSubArraySum({-9999999999999999}) == -9999999999999999);\n    assert (minSubArraySum({0, 10, 20, 1000000}) == 0);\n    assert (minSubArraySum({-1, -2, -3, 10, -5}) == -6);\n    assert (minSubArraySum({100, -1, -2, -3, 10, -5}) == -6);\n    assert (minSubArraySum({10, 11, 13, 8, 3, 4}) == 3);\n    assert (minSubArraySum({100, -33, 32, -1, 0, -2}) == -33);\n    assert (minSubArraySum({-10}) == -10);\n    assert (minSubArraySum({7}) == 7);\n    assert (minSubArraySum({1, -1}) == -1);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/138", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <stdio.h>\n\n/**\n * Evaluates whether the given number n can be written as the sum of exactly 4 positive even numbers.\n *\n * @param n The number to check.\n * @return True if n can be written as the sum of exactly 4 positive even numbers, false otherwise.\n */\nbool is_equal_to_sum_even(int n) {\n    // We need to find 4 positive even numbers that sum up to n.\n    // The smallest possible even number is 2, so we start from there.\n    for (int a = 2; a <= n / 4; a += 2) {\n        for (int b = a; b <= (n - a) / 3; b += 2) {\n            for (int c = b; c <= (n - a - b) / 2; c += 2) {\n                int d = n - a - b - c;\n                // Check if d is a positive even number.\n                if (d > 0 && d % 2 == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_equal_to_sum_even(4) == false);\n    assert (is_equal_to_sum_even(6) == false);\n    assert (is_equal_to_sum_even(8) == true);\n    assert (is_equal_to_sum_even(10) == true);\n    assert (is_equal_to_sum_even(11) == false);\n    assert (is_equal_to_sum_even(12) == true);\n    assert (is_equal_to_sum_even(13) == false);\n    assert (is_equal_to_sum_even(16) == true);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/132", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stack>\n#include <string>\nusing namespace std;\n\nbool is_nested(string str) {\n    stack<char> s;\n    for (char c : str) {\n        if (c == '[') {\n            s.push(c);\n        } else if (c == ']') {\n            if (s.size() > 1) {\n                return true;\n            }\n            if (!s.empty()) {\n                s.pop();\n            }\n        }\n    }\n    return false;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_nested(\"[[]]\") == true);\n    assert (is_nested(\"[]]]]]]][[[[[]\") == false);\n    assert (is_nested(\"[][]\") == false);\n    assert (is_nested((\"[]\")) == false);\n    assert (is_nested(\"[[[[]]]]\") == true);\n    assert (is_nested(\"[]]]]]]]]]]\") == false);\n    assert (is_nested(\"[][][[]]\") == true);\n    assert (is_nested(\"[[]\") == false);\n    assert (is_nested(\"[]]\") == false);\n    assert (is_nested(\"[[]][[\") == true);\n    assert (is_nested(\"[[][]]\") == true);\n    assert (is_nested(\"\") == false);\n    assert (is_nested(\"[[[[[[[[\") == false);\n    assert (is_nested(\"]]]]]]]]\") == false);\n}\n", "result": "failed: a.out: test.cpp:42: int main(): Assertion `is_nested(\"[]]]]]]][[[[[]\") == false' failed.\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/50", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <string>\nusing namespace std;\n\n/**\n * Encodes a string by shifting every character by 5 positions in the alphabet.\n *\n * @param s The input string to be encoded.\n * @return The encoded string.\n */\nstring encode_shift(string s) {\n    string out;\n    int i;\n    for (i = 0; i < s.length(); i++) {\n        int w = ((int)s[i] + 5 - (int)'a') % 26 + (int)'a';\n        out = out + (char)w;\n    }\n    return out;\n}\n\n/**\n * Decodes a string that was previously encoded with the encode_shift function.\n *\n * @param s The input string to be decoded.\n * @return The decoded string.\n */\nstring decode_shift(string s) {\n    string out;\n    int i;\n    for (i = 0; i < s.length(); i++) {\n        int w = ((int)s[i] - 5 - (int)'a' + 26) % 26 + (int)'a';\n        out = out + (char)w;\n    }\n    return out;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    \n    for (int i=0;i<100;i++)\n    {\n        int l=10+rand()%11;\n        string str=\"\";\n        for (int j=0;j<l;j++)\n        {\n            char chr=97+rand()%26;\n            str+=chr;\n        }\n\n        string encoded_str = encode_shift(str);\n        assert (decode_shift(encoded_str) == str);\n    }\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/3", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <vector>\nusing namespace std;\n\n/**\n * Detects if the balance of a bank account falls below zero at any point.\n *\n * @param operations A vector of deposit and withdrawal operations.\n * @return True if the balance falls below zero, false otherwise.\n */\nbool below_zero(vector<int> operations) {\n    int balance = 0;\n    for (int operation : operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_zero({}) == false);\n    assert (below_zero({1, 2, -3, 1, 2, -3}) == false);\n    assert (below_zero({1, 2, -4, 5, 6}) == true);\n    assert (below_zero({1, -1, 2, -2, 5, -5, 4, -4}) == false);\n    assert (below_zero({1, -1, 2, -2, 5, -5, 4, -5}) == true);\n    assert (below_zero({1, -2, 2, -2, 5, -5, 4, -4}) == true);\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/142", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\nint sum_squares(vector<int> lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3}) == 6);\n    assert (sum_squares({1,4,9}) == 14);\n    assert (sum_squares({}) == 0);\n    assert (sum_squares({1,1,1,1,1,1,1,1,1}) == 9);\n    assert (sum_squares({-1,-1,-1,-1,-1,-1,-1,-1,-1}) == -3);\n    assert (sum_squares({0}) == 0);\n    assert (sum_squares({-1,-5,2,-1,-5}) == -126);\n    assert (sum_squares({-56,-99,1,0,-2}) == 3030);\n    assert (sum_squares({-1,0,0,0,0,0,0,0,-1}) == 0);\n    assert (sum_squares({-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}) == -14196);\n    assert (sum_squares({-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}) == -1448);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/103", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\nstring rounded_avg(int n, int m) {\n    if (n > m) return \"-1\";\n\n    int sum = (n + m) * (m - n + 1) / 2;\n    int avg = floor((double)sum / (m - n + 1));\n\n    string binary = \"\";\n    while (avg > 0) {\n        binary = (avg % 2 == 0 ? \"0\" : \"1\") + binary;\n        avg /= 2;\n    }\n\n    return binary;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (rounded_avg(1, 5) == \"11\");\n    assert (rounded_avg(7, 13) == \"1010\");\n    assert (rounded_avg(964,977) == \"1111001010\");\n    assert (rounded_avg(996,997) == \"1111100100\");\n    assert (rounded_avg(560,851) == \"1011000001\");  \n    assert (rounded_avg(185,546) == \"101101101\");\n    assert (rounded_avg(362,496) == \"110101101\");\n    assert (rounded_avg(350,902) == \"1001110010\");\n    assert (rounded_avg(197,233) == \"11010111\");\n    assert (rounded_avg(7, 5) == \"-1\");\n    assert (rounded_avg(5, 1) == \"-1\");\n    assert (rounded_avg(5, 5) == \"101\");\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/57", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <stdio.h>\n#include <vector>\n#include <algorithm>\n\n/**\n * Returns true if the vector elements are monotonically increasing or decreasing.\n *\n * @param l The input vector.\n * @return True if the vector is monotonically increasing or decreasing, false otherwise.\n */\nbool monotonic(const std::vector<float>& l) {\n    if (l.size() <= 1) {\n        return true; // A single element or empty vector is considered monotonic.\n    }\n\n    bool increasing = true;\n    bool decreasing = true;\n\n    for (size_t i = 1; i < l.size(); ++i) {\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n        } else if (l[i] < l[i - 1]) {\n            increasing = false;\n        }\n    }\n\n    return increasing || decreasing;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (monotonic({1, 2, 4, 10}) == true);\n    assert (monotonic({1, 2, 4, 20}) == true);\n    assert (monotonic({1, 20, 4, 10}) == false);\n    assert (monotonic({4, 1, 0, -10}) == true);\n    assert (monotonic({4, 1, 1, 0}) == true);\n    assert (monotonic({1, 2, 3, 2, 5, 60}) == false);\n    assert (monotonic({1, 2, 3, 4, 5, 60}) == true);\n    assert (monotonic({9, 9, 9, 9}) == true);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/28", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <stdio.h>\n#include <vector>\n#include <string>\n\n/**\n * Concatenates a vector of strings into a single string.\n *\n * @param strings Vector of strings to concatenate.\n * @return A single string containing all the input strings concatenated together.\n */\nstring concatenate(const vector<string>& strings) {\n    string result;\n    for (const auto& str : strings) {\n        result += str;\n    }\n    return result;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (concatenate({}) == \"\");\n     assert (concatenate({\"x\", \"y\", \"z\"}) == \"xyz\");\n    assert (concatenate({\"x\", \"y\", \"z\", \"w\", \"k\"}) == \"xyzwk\");\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/39", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <cmath>\n\nbool is_prime(int num) {\n    if (num < 2) {\n        return false;\n    }\n    for (int i = 2; i <= std::sqrt(num); i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint prime_fib(int n) {\n    int a = 0;\n    int b = 1;\n    int count = 0;\n    while (true) {\n        if (is_prime(b)) {\n            count++;\n            if (count == n) {\n                return b;\n            }\n        }\n        int temp = a;\n        a = b;\n        b = temp + b;\n    }\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_fib(1) == 2);\n    assert (prime_fib(2) == 3);\n    assert (prime_fib(3) == 5);\n    assert (prime_fib(4) == 13);\n    assert (prime_fib(5) == 89);\n    assert (prime_fib(6) == 233);\n    assert (prime_fib(7) == 1597);\n    assert (prime_fib(8) == 28657);\n    assert (prime_fib(9) == 514229);\n    assert (prime_fib(10) == 433494437);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/45", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n/**\n * Calculates the area of a triangle given the length of a side and the height.\n *\n * @param a The length of a side of the triangle.\n * @param h The height of the triangle.\n * @return The area of the triangle.\n */\nfloat triangle_area(float a, float h) {\n    // The formula for the area of a triangle is (base * height) / 2.\n    // In this case, we're assuming 'a' is the base and 'h' is the height.\n    return (a * h) / 2;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(5, 3) - 7.5)<1e-4);\n    assert (abs(triangle_area(2, 2) - 2.0)<1e-4);\n    assert (abs(triangle_area(10, 8) - 40.0)<1e-4);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/84", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <string>\n#include <bitset>\nusing namespace std;\n\nstring solve(int N) {\n    int sum_of_digits = 0;\n    while (N > 0) {\n        sum_of_digits += N % 10;\n        N /= 10;\n    }\n    return bitset<32>(sum_of_digits).to_string();\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(1000) == \"1\");\n    assert (solve(150) == \"110\");\n    assert (solve(147) == \"1100\");\n    assert (solve(333) == \"1001\");\n    assert (solve(963) == \"10010\");\n}\n", "result": "failed: a.out: test.cpp:32: int main(): Assertion `solve(1000) == \"1\"' failed.\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/145", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <string>\n\n// Function to calculate the sum of digits of a number\nint sumOfDigits(int n) {\n    int sum = 0;\n    std::string str = std::to_string(std::abs(n));\n    for (char c : str) {\n        sum += c - '0';\n    }\n    return sum;\n}\n\nvector<int> order_by_points(vector<int> nums) {\n    std::vector<std::pair<int, int>> sums;\n    for (int i = 0; i < nums.size(); i++) {\n        sums.push_back({sumOfDigits(nums[i]), i});\n    }\n    std::sort(sums.begin(), sums.end());\n    std::vector<int> sortedNums;\n    for (auto& sum : sums) {\n        sortedNums.push_back(nums[sum.second]);\n    }\n    return sortedNums;\n}\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(order_by_points({1, 11, -1, -11, -12}) , {-1, -11, 1, -12, 11}));\n    assert (issame(order_by_points({1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46}) , {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457}));\n    assert (issame(order_by_points({}) , {}));\n    assert (issame(order_by_points({1, -11, -32, 43, 54, -98, 2, -3}) , {-3, -32, -98, -11, 1, 2, 43, 54}));\n    assert (issame(order_by_points({1,2,3,4,5,6,7,8,9,10,11}) , {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}));\n    assert (issame(order_by_points({0,6,6,-76,-21,23,4}) , {-76, -21, 0, 4, 23, 6, 6}));\n    \n}\n", "result": "failed: a.out: test.cpp:54: int main(): Assertion `issame(order_by_points({1, 11, -1, -11, -12}) , {-1, -11, 1, -12, 11})' failed.\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/113", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <map>\nusing namespace std;\n\nvector<string> odd_count(vector<string> lst) {\n    vector<string> result;\n    for (int i = 0; i < lst.size(); i++) {\n        int odd_count = 0;\n        for (char c : lst[i]) {\n            if ((c - '0') % 2 != 0) {\n                odd_count++;\n            }\n        }\n        string temp = \"the number of odd elements \";\n        temp += to_string(odd_count);\n        temp += \"n the str\";\n        temp += to_string(odd_count);\n        temp += \"ng \";\n        temp += to_string(odd_count);\n        temp += \" of the \";\n        temp += to_string(odd_count);\n        temp += \"nput.\";\n        result.push_back(temp);\n    }\n    return result;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(odd_count({\"1234567\"}) , {\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}));\n    assert (issame(odd_count({\"3\",\"11111111\"}) , {\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}));\n    assert (issame(odd_count({\"271\", \"137\", \"314\"}) , {\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\",\n        \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\"\n    }));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/36", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <stdio.h>\n\n/**\n * Returns the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n *\n * @param n The upper limit (exclusive) for the range of numbers to check.\n * @return The count of occurrences of the digit 7 in the specified range.\n */\nint fizz_buzz(int n) {\n    int count = 0;\n    for (int i = 1; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            int num = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n                    count++;\n                }\n                num /= 10;\n            }\n        }\n    }\n    return count;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fizz_buzz(50) == 0);\n    assert (fizz_buzz(78) == 2);\n    assert (fizz_buzz(79) == 3);\n    assert (fizz_buzz(100) == 3);\n    assert (fizz_buzz(200) == 6);\n    assert (fizz_buzz(4000) == 192);\n    assert (fizz_buzz(10000) == 639);\n    assert (fizz_buzz(100000) == 8026);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/144", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <stdio.h>\n#include <string>\n#include <sstream>\n\nbool simplify(string x, string n) {\n    // Split the input strings into numerator and denominator\n    int x_num, x_den, n_num, n_den;\n    char slash;\n    stringstream(x) >> x_num >> slash >> x_den;\n    stringstream(n) >> n_num >> slash >> n_den;\n\n    // Calculate the product of the numerators and denominators\n    long long product_num = (long long)x_num * n_num;\n    long long product_den = (long long)x_den * n_den;\n\n    // Check if the product is a whole number\n    return product_num % product_den == 0;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/6\", \"2/1\") == false);\n    assert (simplify(\"5/1\", \"3/1\") == true);\n    assert (simplify(\"7/10\", \"10/2\") == false);\n    assert (simplify(\"2/10\", \"50/10\") == true);\n    assert (simplify(\"7/2\", \"4/2\") == true);\n    assert (simplify(\"11/6\", \"6/1\") == true);\n    assert (simplify(\"2/3\", \"5/2\") == false);\n    assert (simplify(\"5/2\", \"3/5\") == false);\n    assert (simplify(\"2/4\", \"8/4\") == true);\n    assert (simplify(\"2/4\", \"4/2\") == true);\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/5\", \"1/5\") == false);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/17", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\n/**\n * Parse a string of musical notes in a special ASCII format and return a vector of integers\n * representing the number of beats each note lasts.\n *\n * Legend:\n * \"o\" - whole note, lasts four beats\n * \"o|\" - half note, lasts two beats\n * \".|\" - quarter note, lasts one beat\n *\n * @param music_string The input string of musical notes\n * @return A vector of integers representing the number of beats each note lasts\n */\nvector<int> parse_music(string music_string) {\n    vector<int> beats;\n    int i = 0;\n    while (i < music_string.length()) {\n        if (music_string[i] == 'o') {\n            if (i + 1 < music_string.length() && music_string[i + 1] == '|') {\n                // Half note\n                beats.push_back(2);\n                i += 2;\n            } else {\n                // Whole note\n                beats.push_back(4);\n                i += 1;\n            }\n        } else if (music_string[i] == '.') {\n            // Quarter note\n            beats.push_back(1);\n            i += 2; // Skip the \"|\" character\n        } else {\n            // Skip whitespace characters\n            i += 1;\n        }\n    }\n    return beats;\n}\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_music(\"\") , {}));\n     assert (issame(parse_music(\"o o o o\") ,{4, 4, 4, 4}));\n      assert (issame(parse_music(\".| .| .| .|\") , {1, 1, 1, 1}));\n assert (issame(parse_music(\"o| o| .| .| o o o o\") , {2, 2, 1, 1, 4, 4, 4, 4}));\n  assert (issame(parse_music(\"o| .| o| .| o o| o o|\") , {2, 1, 2, 1, 4, 2, 4, 2}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/75", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <stdio.h>\n#include <vector>\n\n// Function to check if a number is prime\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\n// Function to check if a number is the product of 3 prime numbers\nbool is_multiply_prime(int a) {\n    // Generate all prime numbers less than 100\n    std::vector<int> primes;\n    for (int i = 2; i < 100; i++) {\n        if (is_prime(i)) primes.push_back(i);\n    }\n\n    // Check all combinations of 3 prime numbers\n    for (int i = 0; i < primes.size(); i++) {\n        for (int j = i; j < primes.size(); j++) {\n            for (int k = j; k < primes.size(); k++) {\n                if (a == primes[i] * primes[j] * primes[k]) return true;\n            }\n        }\n    }\n    return false;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_multiply_prime(5) == false);\n    assert (is_multiply_prime(30) == true);\n    assert (is_multiply_prime(8) == true);\n    assert (is_multiply_prime(10) == false);\n    assert (is_multiply_prime(125) == true);\n    assert (is_multiply_prime(3 * 5 * 7) == true);\n    assert (is_multiply_prime(3 * 6 * 7) == false);\n    assert (is_multiply_prime(9 * 9 * 9) == false);\n    assert (is_multiply_prime(11 * 9 * 9) == false);\n    assert (is_multiply_prime(11 * 13 * 7) == true);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/0", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\n/**\n * Checks if any two numbers in the given vector are closer to each other than the given threshold.\n *\n * @param numbers The vector of numbers to check.\n * @param threshold The minimum distance between two numbers.\n * @return True if any two numbers are closer than the threshold, false otherwise.\n */\nbool has_close_elements(vector<float> numbers, float threshold) {\n    // Sort the vector of numbers in ascending order\n    sort(numbers.begin(), numbers.end());\n\n    // Iterate through the sorted vector and check the distance between each pair of adjacent numbers\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        // Calculate the distance between the current number and the next number\n        float distance = numbers[i + 1] - numbers[i];\n\n        // If the distance is less than or equal to the threshold, return true\n        if (distance <= threshold) {\n            return true;\n        }\n    }\n\n    // If no pairs of numbers are closer than the threshold, return false\n    return false;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    vector<float> a={1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    assert (has_close_elements(a, 0.3)==true);\n    assert (has_close_elements(a, 0.05) == false);\n\n    assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95) == true);\n    assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8) ==false);\n    assert (has_close_elements({1.0, 2.0, 3.0, 4.0, 5.0}, 2.0) == true);\n    assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0) == true);\n    assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5) == false);\n    \n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/47", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <math.h>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n/**\n * Returns the median of elements in the vector l.\n *\n * @param l A vector of floating point numbers.\n * @return The median of the elements in the vector.\n */\nfloat median(vector<float> l) {\n    // First, we need to sort the vector in ascending order\n    sort(l.begin(), l.end());\n\n    // Get the size of the vector\n    int n = l.size();\n\n    // If the size of the vector is odd, the median is the middle element\n    if (n % 2 != 0) {\n        return l[n / 2];\n    }\n    // If the size of the vector is even, the median is the average of the two middle elements\n    else {\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    }\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(median({3, 1, 2, 4, 5}) - 3)<1e-4);\n    assert (abs(median({-10, 4, 6, 1000, 10, 20}) -8.0)<1e-4);\n    assert (abs(median({5}) - 5)<1e-4);\n    assert (abs(median({6, 5}) - 5.5)<1e-4);\n    assert (abs(median({8, 1, 3, 9, 9, 2, 7}) - 7)<1e-4 );\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/124", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nbool valid_date(string date) {\n    // Check if date string is not empty\n    if (date.empty()) {\n        return false;\n    }\n\n    // Split date string into month, day, and year\n    int month, day, year;\n    char delimiter;\n    stringstream ss(date);\n    ss >> month >> delimiter >> day >> delimiter >> year;\n\n    // Check if date is in the correct format (mm-dd-yyyy)\n    if (ss.fail() || delimiter != '-' || month < 1 || month > 12) {\n        return false;\n    }\n\n    // Check if day is valid for the given month\n    if (month == 2) {\n        // February has 29 days\n        if (day < 1 || day > 29) {\n            return false;\n        }\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        // April, June, September, and November have 30 days\n        if (day < 1 || day > 30) {\n            return false;\n        }\n    } else {\n        // All other months have 31 days\n        if (day < 1 || day > 31) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (valid_date(\"03-11-2000\") == true);\n    assert (valid_date(\"15-01-2012\") == false);\n    assert (valid_date(\"04-0-2040\") == false);\n    assert (valid_date(\"06-04-2020\") == true);\n    assert (valid_date(\"01-01-2007\") == true);\n    assert (valid_date(\"03-32-2011\") == false);\n    assert (valid_date(\"\") == false);\n    assert (valid_date(\"04-31-3000\") == false);\n    assert (valid_date(\"06-06-2005\") == true);\n    assert (valid_date(\"21-31-2000\") == false);\n    assert (valid_date(\"04-12-2003\") == true);\n    assert (valid_date(\"04122003\") == false);\n    assert (valid_date(\"20030412\") == false);\n    assert (valid_date(\"2003-04\") == false);\n    assert (valid_date(\"2003-04-12\") == false);\n    assert (valid_date(\"04-2003\") == false);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/14", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\n/**\n * Returns a vector of all prefixes from shortest to longest of the input string.\n *\n * @param str The input string.\n * @return A vector of all prefixes of the input string.\n */\nvector<string> all_prefixes(string str) {\n    vector<string> prefixes;\n    for (int i = 1; i <= str.length(); i++) {\n        prefixes.push_back(str.substr(0, i));\n    }\n    return prefixes;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(all_prefixes(\"\"),{}));\n    assert (issame(all_prefixes(\"asdfgh\") ,{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}));\n     assert (issame(all_prefixes(\"WWW\") ,{\"W\", \"WW\", \"WWW\"}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/101", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\n/**\n * Splits a string of words separated by commas or spaces into a vector of words.\n *\n * @param s The input string of words.\n * @return A vector of words.\n */\nvector<string> words_string(string s) {\n    vector<string> words;\n    string word;\n    for (char c : s) {\n        if (c == ',' || c == ' ') {\n            if (!word.empty()) {\n                words.push_back(word);\n                word.clear();\n            }\n        } else {\n            word += c;\n        }\n    }\n    if (!word.empty()) {\n        words.push_back(word);\n    }\n    return words;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(words_string(\"Hi, my name is John\") , {\"Hi\", \"my\", \"name\", \"is\", \"John\"}));\n    assert (issame(words_string(\"One, two, three, four, five, six\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n    assert (issame(words_string(\"Hi, my name\") , {\"Hi\", \"my\", \"name\"}));\n    assert (issame(words_string(\"One,, two, three, four, five, six,\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n    assert (issame(words_string(\"\") , {}));\n    assert (issame(words_string(\"ahmed     , gamal\") , {\"ahmed\", \"gamal\"}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/141", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <string>\n#include <cctype> // for std::isdigit and std::isalpha\n\nstring file_name_check(const string& file_name) {\n    // Check if the file name contains exactly one dot\n    size_t dot_pos = file_name.find('.');\n    if (dot_pos == string::npos || file_name.find('.', dot_pos + 1) != string::npos) {\n        return \"No\";\n    }\n\n    // Check if the substring before the dot is not empty and starts with a letter\n    if (dot_pos == 0 || !std::isalpha(file_name[0])) {\n        return \"No\";\n    }\n\n    // Check if the substring after the dot is one of the allowed extensions\n    string extension = file_name.substr(dot_pos + 1);\n    if (extension != \"txt\" && extension != \"exe\" && extension != \"dll\") {\n        return \"No\";\n    }\n\n    // Count the number of digits in the file name\n    int digit_count = 0;\n    for (char c : file_name) {\n        if (std::isdigit(c)) {\n            digit_count++;\n        }\n    }\n    if (digit_count > 3) {\n        return \"No\";\n    }\n\n    // If all checks pass, return \"Yes\"\n    return \"Yes\";\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (file_name_check(\"example.txt\") == \"Yes\");\n    assert (file_name_check(\"1example.dll\") == \"No\");\n    assert (file_name_check(\"s1sdf3.asd\") == \"No\");\n    assert (file_name_check(\"K.dll\") == \"Yes\");\n    assert (file_name_check(\"MY16FILE3.exe\") == \"Yes\");\n    assert (file_name_check(\"His12FILE94.exe\") == \"No\");\n    assert (file_name_check(\"_Y.txt\") == \"No\");\n    assert (file_name_check(\"?aREYA.exe\") == \"No\");\n    assert (file_name_check(\"/this_is_valid.dll\") == \"No\");\n    assert (file_name_check(\"this_is_valid.wow\") == \"No\");\n    assert (file_name_check(\"this_is_valid.txt\") == \"Yes\");\n    assert (file_name_check(\"this_is_valid.txtexe\") == \"No\");\n    assert (file_name_check(\"#this2_i4s_5valid.ten\") == \"No\");\n    assert (file_name_check(\"@this1_is6_valid.exe\") == \"No\");\n    assert (file_name_check(\"this_is_12valid.6exe4.txt\") == \"No\");\n    assert (file_name_check(\"all.exe.txt\") == \"No\");\n    assert (file_name_check(\"I563_No.exe\") == \"Yes\");\n    assert (file_name_check(\"Is3youfault.txt\") == \"Yes\");\n    assert (file_name_check(\"no_one#knows.dll\") == \"Yes\");\n    assert (file_name_check(\"1I563_Yes3.exe\") == \"No\");\n    assert (file_name_check(\"I563_Yes3.txtt\") == \"No\");\n    assert (file_name_check(\"final..txt\") == \"No\");\n    assert (file_name_check(\"final132\") == \"No\");\n    assert (file_name_check(\"_f4indsartal132.\") == \"No\");\n    assert (file_name_check(\".txt\") == \"No\");\n    assert (file_name_check(\"s.\") == \"No\");\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/123", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\nvector<int> get_odd_collatz(int n) {\n    vector<int> odd_numbers;\n    while (n != 1) {\n        if (n % 2 != 0) {\n            odd_numbers.push_back(n);\n        }\n        n = (n % 2 == 0) ? n / 2 : 3 * n + 1;\n    }\n    odd_numbers.push_back(1); // 1 is always an odd number in the sequence\n    sort(odd_numbers.begin(), odd_numbers.end());\n    return odd_numbers;\n}\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_odd_collatz(14) , {1, 5, 7, 11, 13, 17}));\n    assert (issame(get_odd_collatz(5) , {1, 5}));\n    assert (issame(get_odd_collatz(12) , {1, 3, 5}));\n    assert (issame(get_odd_collatz(1) , {1}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/109", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <algorithm>\n#include <vector>\n\nbool move_one_ball(std::vector<int> arr) {\n    if (arr.empty()) {\n        return true;\n    }\n\n    std::vector<int> sorted_arr = arr;\n    std::sort(sorted_arr.begin(), sorted_arr.end());\n\n    for (int i = 0; i < arr.size(); i++) {\n        std::vector<int> rotated_arr(arr.size());\n        std::copy(arr.begin() + i, arr.end(), rotated_arr.begin());\n        std::copy(arr.begin(), arr.begin() + i, rotated_arr.begin() + arr.size() - i);\n        if (rotated_arr == sorted_arr) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (move_one_ball({3, 4, 5, 1, 2})==true);\n    assert (move_one_ball({3, 5, 10, 1, 2})==true);\n    assert (move_one_ball({4, 3, 1, 2})==false);\n    assert (move_one_ball({3, 5, 4, 1, 2})==false);\n    assert (move_one_ball({})==true);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/133", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n\nint sum_squares(vector<float> lst) {\n    int sum = 0;\n    for (float num : lst) {\n        int rounded_num = ceil(num); // round to upper int\n        sum += rounded_num * rounded_num; // square and add to sum\n    }\n    return sum;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3})==14);\n    assert (sum_squares({1.0,2,3})==14);\n    assert (sum_squares({1,3,5,7})==84);\n    assert (sum_squares({1.4,4.2,0})==29);\n    assert (sum_squares({-2.4,1,1})==6);\n    assert (sum_squares({100,1,15,2})==10230);\n    assert (sum_squares({10000,10000})==200000000);\n    assert (sum_squares({-1.4,4.6,6.3})==75);\n    assert (sum_squares({-1.4,17.9,18.9,19.9})==1086);\n    assert (sum_squares({0})==0);\n    assert (sum_squares({-1})==1);\n    assert (sum_squares({-1,1,0})==2);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/148", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <vector>\n#include <string>\n#include <algorithm>\n\nvector<string> bf(string planet1, string planet2) {\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    auto it1 = find(planets.begin(), planets.end(), planet1);\n    auto it2 = find(planets.begin(), planets.end(), planet2);\n    if (it1 == planets.end() || it2 == planets.end()) {\n        return {};\n    }\n    if (it1 > it2) {\n        swap(it1, it2);\n    }\n    return vector<string>(next(it1), it2);\n}\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(bf(\"Jupiter\", \"Neptune\") , {\"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Mercury\") , {\"Venus\",}));\n    assert (issame(bf(\"Mercury\", \"Uranus\") , {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}));\n    assert (issame(bf(\"Neptune\", \"Venus\") , {\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Earth\") , {}));\n    assert (issame(bf(\"Mars\", \"Earth\") , {}));\n    assert (issame(bf(\"Jupiter\", \"Makemake\") , {}));\n}\n", "result": "failed: terminate called after throwing an instance of 'std::length_error'\n  what():  cannot create std::vector larger than max_size()\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/100", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <stdio.h>\n#include <vector>\n\n/**\n * Creates a pile of n levels of stones, where the number of stones in each level\n * is determined by the parity of the initial number of stones.\n *\n * @param n The initial number of stones.\n * @return A vector of integers, where each element represents the number of stones\n *         in the corresponding level.\n */\nvector<int> make_a_pile(int n) {\n    vector<int> stones;\n    int current = n;\n\n    // Loop until we have n levels\n    for (int i = 0; i < n; i++) {\n        // Add the current number of stones to the vector\n        stones.push_back(current);\n\n        // Determine the next number of stones based on the parity of the current number\n        if (current % 2 == 0) { // even\n            current += 2; // next even number\n        } else { // odd\n            current += 2; // next odd number\n        }\n    }\n\n    return stones;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(make_a_pile(3) , {3, 5, 7}));\n    assert (issame(make_a_pile(4) , {4,6,8,10}));\n    assert (issame(make_a_pile(5) , {5, 7, 9, 11, 13}));\n    assert (issame(make_a_pile(6) , {6, 8, 10, 12, 14, 16}));\n    assert (issame(make_a_pile(8) , {8, 10, 12, 14, 16, 18, 20, 22}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/150", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <stdio.h>\n\n// Function to check if a number is prime\nint is_prime(int n) {\n    if (n <= 1) return 0;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) return 0;\n    }\n    return 1;\n}\n\n// Function to return x if n is prime, y otherwise\nint x_or_y(int n, int x, int y) {\n    if (is_prime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (x_or_y(7, 34, 12) == 34);\n    assert (x_or_y(15, 8, 5) == 5);\n    assert (x_or_y(3, 33, 5212) == 33);\n    assert (x_or_y(1259, 3, 52) == 3);\n    assert (x_or_y(7919, -1, 12) == -1);\n    assert (x_or_y(3609, 1245, 583) == 583);\n    assert (x_or_y(91, 56, 129) == 129);\n    assert (x_or_y(6, 34, 1234) == 1234);\n    assert (x_or_y(1, 2, 0) == 0);\n    assert (x_or_y(2, 2, 0) == 2);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/110", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\nstring exchange(vector<int> lst1, vector<int> lst2) {\n    int evenCountInLst2 = 0;\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            evenCountInLst2++;\n        }\n    }\n\n    int oddCountInLst1 = 0;\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            oddCountInLst1++;\n        }\n    }\n\n    return (evenCountInLst2 >= oddCountInLst1) ? \"YES\" : \"NO\";\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (exchange({1, 2, 3, 4}, {1, 2, 3, 4}) == \"YES\");\n    assert (exchange({1, 2, 3, 4}, {1, 5, 3, 4}) == \"NO\");\n    assert (exchange({1, 2, 3, 4}, {2, 1, 4, 3}) == \"YES\" );\n    assert (exchange({5, 7, 3}, {2, 6, 4}) == \"YES\");\n    assert (exchange({5, 7, 3}, {2, 6, 3}) == \"NO\" );\n    assert (exchange({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}) == \"NO\");\n    assert (exchange({100, 200}, {200, 200}) == \"YES\");\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/153", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nstring Strongest_Extension(string class_name, vector<string> extensions) {\n    auto calculate_strength = [&](const string& extension) {\n        int cap = 0, sm = 0;\n        for (char c : extension) {\n            if (isupper(c)) cap++;\n            if (islower(c)) sm++;\n        }\n        return cap - sm;\n    };\n\n    auto strongest_extension = *max_element(extensions.begin(), extensions.end(),\n        [&](const string& a, const string& b) {\n            return calculate_strength(a) < calculate_strength(b);\n        });\n\n    return class_name + \".\" + strongest_extension;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (Strongest_Extension(\"Watashi\", {\"tEN\", \"niNE\", \"eIGHt8OKe\"}) == \"Watashi.eIGHt8OKe\");\n    assert (Strongest_Extension(\"Boku123\", {\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}) == \"Boku123.YEs.WeCaNe\");\n    assert (Strongest_Extension(\"__YESIMHERE\", {\"t\", \"eMptY\", \"(nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}) == \"__YESIMHERE.NuLl__\");\n    assert (Strongest_Extension(\"K\", {\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}) == \"K.TAR\");\n    assert (Strongest_Extension(\"__HAHA\", {\"Tab\", \"123\", \"781345\", \"-_-\"}) == \"__HAHA.123\");\n    assert (Strongest_Extension(\"YameRore\", {\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}) == \"YameRore.okIWILL123\");\n    assert (Strongest_Extension(\"finNNalLLly\", {\"Die\", \"NowW\", \"Wow\", \"WoW\"}) == \"finNNalLLly.WoW\");\n    assert (Strongest_Extension(\"_\", {\"Bb\", \"91245\"}) == \"_.Bb\");\n    assert (Strongest_Extension(\"Sp\", {\"671235\", \"Bb\"}) == \"Sp.671235\");\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/107", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\n/**\n * Returns a vector containing the number of even and odd integer palindromes\n * within the range [1, n].\n *\n * @param n A positive integer.\n * @return A vector of two integers, where the first element is the number of even\n *         integer palindromes and the second element is the number of odd integer\n *         palindromes.\n */\nvector<int> even_odd_palindrome(int n) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    // Iterate over the range [1, n]\n    for (int i = 1; i <= n; i++) {\n        // Convert the integer to a string to check if it's a palindrome\n        string str = to_string(i);\n        string rev_str = str;\n        reverse(rev_str.begin(), rev_str.end());\n\n        // Check if the string is a palindrome\n        if (str == rev_str) {\n            // Check if the palindrome is even or odd\n            if (i % 2 == 0) {\n                even_count++;\n            } else {\n                odd_count++;\n            }\n        }\n    }\n\n    // Return the counts as a vector\n    return {even_count, odd_count};\n}\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_palindrome(123) , {8, 13}));\n    assert (issame(even_odd_palindrome(12) , {4, 6}));\n    assert (issame(even_odd_palindrome(3) , {1, 2}));\n    assert (issame(even_odd_palindrome(63) , {6, 8}));\n    assert (issame(even_odd_palindrome(25) , {5, 6}));\n    assert (issame(even_odd_palindrome(19) , {4, 6}));\n    assert (issame(even_odd_palindrome(9) , {4, 5}));\n    assert (issame(even_odd_palindrome(1) , {0, 1}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/80", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <string>\nusing namespace std;\n\n/**\n * Checks if a string is happy.\n * A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n *\n * @param s The input string.\n * @return True if the string is happy, false otherwise.\n */\nbool is_happy(string s) {\n    // Check if the string length is at least 3\n    if (s.length() < 3) {\n        return false;\n    }\n\n    // Iterate over the string with a sliding window of size 3\n    for (int i = 0; i <= s.length() - 3; i++) {\n        // Check if the current 3 consecutive letters are distinct\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n\n    // If we reach this point, the string is happy\n    return true;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_happy(\"a\") == false );\n    assert (is_happy(\"aa\") == false );\n    assert (is_happy(\"abcd\") == true );\n    assert (is_happy(\"aabb\") == false );\n    assert (is_happy(\"adb\") == true );\n    assert (is_happy(\"xyy\") == false );\n    assert (is_happy(\"iopaxpoi\") == true );\n    assert (is_happy(\"iopaxioi\") == false );\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/111", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <stdio.h>\n#include <string>\n#include <map>\nusing namespace std;\n\n/**\n * Returns a map of the letter(s) with the most repetition and their corresponding count.\n * If several letters have the same occurrence, returns all of them.\n *\n * @param test a string representing a space separated lowercase letters\n * @return a map of char to int, where each key is a letter and its value is the count\n */\nmap<char, int> histogram(string test) {\n    map<char, int> letterCounts;\n    int maxCount = 0;\n\n    // Count the occurrences of each letter\n    for (char c : test) {\n        if (c != ' ') { // ignore spaces\n            letterCounts[c]++;\n            maxCount = max(maxCount, letterCounts[c]);\n        }\n    }\n\n    // Filter the map to only include letters with the maximum count\n    map<char, int> result;\n    for (auto& pair : letterCounts) {\n        if (pair.second == maxCount) {\n            result[pair.first] = pair.second;\n        }\n    }\n\n    return result;\n}\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\nint main(){\n    assert (issame(histogram(\"a b b a\") , {{'a',2},{'b', 2}}));\n    assert (issame(histogram(\"a b c a b\") , {{'a', 2},{'b', 2}}));\n    assert (issame(histogram(\"a b c d g\") , {{'a', 1}, {'b', 1}, {'c', 1}, {'d', 1}, {'g', 1}}));\n    assert (issame(histogram(\"r t g\") , {{'r', 1},{'t', 1},{'g', 1}}));\n    assert (issame(histogram(\"b b b b a\") , {{'b', 4}}));\n    assert (issame(histogram(\"r t g\") , {{'r', 1},{'t', 1},{'g', 1}}));\n    assert (issame(histogram(\"\") , {}));\n    assert (issame(histogram(\"a\") , {{'a', 1}}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/32", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <iostream>\n#include <vector>\n#include <cmath>\n\ndouble poly(const std::vector<double>& xs, double x) {\n    double sum = 0.0;\n    for (size_t i = 0; i < xs.size(); ++i) {\n        sum += xs[i] * pow(x, i);\n    }\n    return sum;\n}\n\ndouble polyDerivative(const std::vector<double>& xs, double x) {\n    double sum = 0.0;\n    for (size_t i = 1; i < xs.size(); ++i) {\n        sum += i * xs[i] * pow(x, i - 1);\n    }\n    return sum;\n}\n\ndouble find_zero(const std::vector<double>& xs) {\n    if (xs.size() % 2 != 0) {\n        throw std::invalid_argument(\"The number of coefficients must be even\");\n    }\n    if (xs.back() == 0.0) {\n        throw std::invalid_argument(\"The largest non-zero coefficient must be at the end\");\n    }\n\n    double x = 1.0; // initial guess\n    while (true) {\n        double f_x = poly(xs, x);\n        double f_prime_x = polyDerivative(xs, x);\n        double x_next = x - f_x / f_prime_x;\n        if (std::abs(x_next - x) < 1e-6) { // convergence criterion\n            return x_next;\n        }\n        x = x_next;\n    }\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n   \n    double solution;\n    int ncoeff;\n    for (int i=0;i<100;i++)\n    {\n        ncoeff = 2 * (1+rand()%4);\n        vector<double> coeffs = {};\n        for (int j=0;j<ncoeff;j++)\n        {\n            double coeff = -10+rand()%21;\n            if (coeff == 0) coeff = 1;\n            coeffs.push_back(coeff);\n        }\n        \n        solution = find_zero(coeffs);\n        assert (abs(poly(coeffs, solution))< 1e-3);\n    }\n}\n", "result": "timed out", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/76", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\nbool is_simple_power(int x, int n) {\n    if (x <= 0 || n <= 0) {\n        return false;\n    }\n    int exp = 0;\n    while (pow(n, exp) <= x) {\n        if (pow(n, exp) == x) {\n            return true;\n        }\n        exp++;\n    }\n    return false;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_simple_power(1, 4)== true);\n    assert (is_simple_power(2, 2)==true);\n    assert (is_simple_power(8, 2)==true);\n    assert (is_simple_power(3, 2)==false);\n    assert (is_simple_power(3, 1)==false);\n    assert (is_simple_power(5, 3)==false);\n    assert (is_simple_power(16, 2)== true);\n    assert (is_simple_power(143214, 16)== false);\n    assert (is_simple_power(4, 2)==true);\n    assert (is_simple_power(9, 3)==true);\n    assert (is_simple_power(16, 4)==true);\n    assert (is_simple_power(24, 2)==false);\n    assert (is_simple_power(128, 4)==false);\n    assert (is_simple_power(12, 6)==false);\n    assert (is_simple_power(1, 1)==true);\n    assert (is_simple_power(1, 12)==true);\n}\n", "result": "timed out", "passed": false, "finish": -1, "file": "", "output": []}
