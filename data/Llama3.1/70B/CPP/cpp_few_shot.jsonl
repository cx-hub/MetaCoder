{"task_id": "CPP/0", "generation": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n            if (abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/1", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> result;\n    string temp = \"\";\n    int count = 0;\n    for (char c : paren_string) {\n        if (c == '(') {\n            count++;\n            temp += c;\n        } else if (c == ')') {\n            count--;\n            temp += c;\n            if (count == 0) {\n                result.push_back(temp);\n                temp = \"\";\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/2", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n    return number - (int)number;\n}\n"}
{"task_id": "CPP/3", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n    int balance = 0;\n    for (int operation : operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n    float sum = 0;\n    for (float num : numbers) {\n        sum += num;\n    }\n    float mean = sum / numbers.size();\n    float sum_abs_diff = 0;\n    for (float num : numbers) {\n        sum_abs_diff += abs(num - mean);\n    }\n    return sum_abs_diff / numbers.size();\n}\n"}
{"task_id": "CPP/5", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){\n    vector<int> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n        if (i < numbers.size() - 1) {\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/6", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> result;\n    string group = \"\";\n    for (char c : paren_string) {\n        if (c == ' ') {\n            if (!group.empty()) {\n                int max_depth = 0;\n                int current_depth = 0;\n                for (char ch : group) {\n                    if (ch == '(') {\n                        current_depth++;\n                        max_depth = max(max_depth, current_depth);\n                    } else if (ch == ')') {\n                        current_depth--;\n                    }\n                }\n                result.push_back(max_depth);\n                group = \"\";\n            }\n        } else {\n            group += c;\n        }\n    }\n    if (!group.empty()) {\n        int max_depth = 0;\n        int current_depth = 0;\n        for (char ch : group) {\n            if (ch == '(') {\n                current_depth++;\n                max_depth = max(max_depth, current_depth);\n            } else if (ch == ')') {\n                current_depth--;\n            }\n        }\n        result.push_back(max_depth);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/7", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.find(substring) != string::npos) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/8", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n    int sum = 0;\n    int product = 1;\n    for (int num : numbers) {\n        sum += num;\n        product *= num;\n    }\n    return {sum, product};\n}\n"}
{"task_id": "CPP/9", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> result;\n    int maxSoFar = numbers[0];\n    result.push_back(maxSoFar);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > maxSoFar) {\n            maxSoFar = numbers[i];\n        }\n        result.push_back(maxSoFar);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/10", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\n\nstring make_palindrome(string str){\n    if (str.empty() || is_palindrome(str)) \n        return str;\n\n    string rev_str(str.rbegin(), str.rend());\n    for (int i = 0; i < str.length(); i++) {\n        if (str.substr(0, str.length() - i) == rev_str.substr(i)) {\n            return str + rev_str.substr(0, i);\n        }\n    }\n    return \"\";\n}\n"}
{"task_id": "CPP/11", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a, string b) {\n    string result = \"\";\n    for (int i = 0; i < a.length(); i++) {\n        if (a[i] != b[i]) {\n            result += '1';\n        } else {\n            result += '0';\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/12", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n    if (strings.empty())\n        return \"\";\n    string longestStr = strings[0];\n    for (int i = 1; i < strings.size(); i++) {\n        if (strings[i].length() > longestStr.length())\n            longestStr = strings[i];\n    }\n    return longestStr;\n}\n"}
{"task_id": "CPP/13", "generation": "#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n    if (b == 0)\n        return a;\n    else\n        return greatest_common_divisor(b, a % b);\n}\n"}
{"task_id": "CPP/14", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n    vector<string> prefixes;\n    for (int i = 1; i <= str.length(); i++) {\n        prefixes.push_back(str.substr(0, i));\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n    string result = \"\";\n    for (int i = 0; i <= n; i++) {\n        result += to_string(i);\n        if (i < n) {\n            result += \" \";\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/16", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nint count_distinct_characters(string str){\n    // Convert the string to lowercase\n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    \n    // Create a set to store unique characters\n    set<char> unique_chars(str.begin(), str.end());\n    \n    // Return the number of unique characters\n    return unique_chars.size();\n}\n"}
{"task_id": "CPP/17", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){\n    vector<int> beats;\n    for (int i = 0; i < music_string.length(); i++) {\n        if (music_string[i] == 'o' && i + 1 < music_string.length() && music_string[i + 1] == '|') {\n            beats.push_back(2);\n            i++;\n        } else if (music_string[i] == '.' && i + 1 < music_string.length() && music_string[i + 1] == '|') {\n            beats.push_back(1);\n            i++;\n        } else if (music_string[i] == 'o') {\n            beats.push_back(4);\n        }\n    }\n    return beats;\n}\n"}
{"task_id": "CPP/18", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str, string substring) {\n    int count = 0;\n    for (int i = 0; i <= str.length() - substring.length(); i++) {\n        if (str.substr(i, substring.length()) == substring) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/19", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nstring sort_numbers(string numbers){\n    map<string, int> numMap = {\n        {\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3}, {\"four\", 4},\n        {\"five\", 5}, {\"six\", 6}, {\"seven\", 7}, {\"eight\", 8}, {\"nine\", 9}\n    };\n\n    vector<string> numList;\n    string word = \"\";\n    for (char c : numbers) {\n        if (c == ' ') {\n            numList.push_back(word);\n            word = \"\";\n        } else {\n            word += c;\n        }\n    }\n    numList.push_back(word);\n\n    sort(numList.begin(), numList.end(), [&numMap](const string& a, const string& b) {\n        return numMap[a] < numMap[b];\n    });\n\n    string sortedNumbers = \"\";\n    for (const string& num : numList) {\n        sortedNumbers += num + \" \";\n    }\n    sortedNumbers.pop_back(); // remove the last space\n\n    return sortedNumbers;\n}\n"}
{"task_id": "CPP/20", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<float> find_closest_elements(vector<float> numbers){\n    sort(numbers.begin(), numbers.end());\n    float min_diff = numbers[1] - numbers[0];\n    vector<float> result = {numbers[0], numbers[1]};\n    \n    for (int i = 1; i < numbers.size() - 1; i++) {\n        float diff = numbers[i + 1] - numbers[i];\n        if (diff < min_diff) {\n            min_diff = diff;\n            result = {numbers[i], numbers[i + 1]};\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/21", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){\n    float min_val = *min_element(numbers.begin(), numbers.end());\n    float max_val = *max_element(numbers.begin(), numbers.end());\n    float range = max_val - min_val;\n    vector<float> rescaled_numbers;\n    for (float num : numbers) {\n        rescaled_numbers.push_back((num - min_val) / range);\n    }\n    return rescaled_numbers;\n}\n"}
{"task_id": "CPP/22", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n\nvector<int> filter_integers(list_any values){\n    vector<int> out;\n    for (const auto& value : values) {\n        if (value.type() == typeid(int)) {\n            out.push_back(boost::any_cast<int>(value));\n        }\n    }\n    return out;\n}\n"}
{"task_id": "CPP/23", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n    return str.length();\n}\n"}
{"task_id": "CPP/24", "generation": "#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n    for (int i = n - 1; i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return 1; // In case n is a prime number\n}\n"}
{"task_id": "CPP/25", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n    vector<int> factors;\n    int divisor = 2;\n    while (n > 1) {\n        while (n % divisor == 0) {\n            factors.push_back(divisor);\n            n = n / divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n"}
{"task_id": "CPP/26", "generation": "#include<stdio.h>\n#include<vector>\n#include<unordered_set>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> out = {};\n    unordered_set<int> seen;\n    for (int num : numbers) {\n        if (seen.find(num) == seen.end()) {\n            out.push_back(num);\n            seen.insert(num);\n        }\n    }\n    return out;\n}\n"}
{"task_id": "CPP/27", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring flip_case(string str){\n    string result = \"\";\n    for (char c : str) {\n        if (islower(c)) {\n            result += toupper(c);\n        } else {\n            result += tolower(c);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/28", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n    string result = \"\";\n    for (const string& str : strings) {\n        result += str;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/29", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.find(prefix) == 0) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/30", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n    vector<float> positive_numbers;\n    for (float num : l) {\n        if (num > 0) {\n            positive_numbers.push_back(num);\n        }\n    }\n    return positive_numbers;\n}\n"}
{"task_id": "CPP/31", "generation": "#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n    if (n <= 1) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (long long i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/32", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n\ndouble poly(vector<double> xs, double x){\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    double low = -1000.0;\n    double high = 1000.0;\n    double eps = 0.00001;\n    while (high - low > eps) {\n        double mid = (low + high) / 2.0;\n        if (poly(xs, mid) * poly(xs, low) < 0) {\n            high = mid;\n        } else {\n            low = mid;\n        }\n    }\n    return (low + high) / 2.0;\n}\n"}
{"task_id": "CPP/33", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n    vector<int> third_elements;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            third_elements.push_back(l[i]);\n        }\n    }\n    sort(third_elements.begin(), third_elements.end());\n    int j = 0;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l[i] = third_elements[j];\n            j++;\n        }\n    }\n    return l;\n}\n"}
{"task_id": "CPP/34", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n    sort(l.begin(), l.end());\n    l.erase(unique(l.begin(), l.end()), l.end());\n    return l;\n}\n"}
{"task_id": "CPP/35", "generation": "#include<algorithm>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n    return *max_element(l.begin(), l.end());\n}\n"}
{"task_id": "CPP/36", "generation": "#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            int num = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n                    count++;\n                }\n                num /= 10;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n    vector<float> even;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            even.push_back(l[i]);\n        }\n    }\n    sort(even.begin(), even.end());\n    int evenIndex = 0;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            l[i] = even[evenIndex++];\n        }\n    }\n    return l;\n}\n"}
{"task_id": "CPP/38", "generation": "string decode_cyclic(string s){ \n    // returns decoded string by cycling groups of three characters back.\n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group back. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x[2]+x.substr(0,2);\n        output=output+x;\n    }\n    return output;\n}\n"}
{"task_id": "CPP/39", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\n// Function to check if a number is prime\nbool isPrime(int num) {\n    if (num <= 1) return false;\n    for (int i = 2; i * i <= num; i++) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\n// Function to generate Fibonacci numbers\nint fibonacci(int n) {\n    if (n <= 0) return 0;\n    if (n == 1) return 1;\n    return fibonacci(n-1) + fibonacci(n-2);\n}\n\n// Function to find the nth prime Fibonacci number\nint prime_fib(int n) {\n    int count = 0;\n    int fib = 0;\n    int i = 0;\n    while (count < n) {\n        fib = fibonacci(i);\n        if (isPrime(fib)) count++;\n        i++;\n    }\n    return fib;\n}\n"}
{"task_id": "CPP/40", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nbool triples_sum_to_zero(vector<int> l){\n    if (l.size() < 3) {\n        return false;\n    }\n    sort(l.begin(), l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n        int left = i + 1;\n        int right = l.size() - 1;\n        while (left < right) {\n            int sum = l[i] + l[left] + l[right];\n            if (sum == 0) {\n                return true;\n            } else if (sum < 0) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "#include<stdio.h>\nusing namespace std;\nint car_race_collision(int n){\n    return n * n;\n}\n"}
{"task_id": "CPP/42", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n    for (int i = 0; i < l.size(); i++) {\n        l[i] += 1;\n    }\n    return l;\n}\n"}
{"task_id": "CPP/43", "generation": "#include<stdio.h>\n#include<vector>\n#include<unordered_set>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n    unordered_set<int> seen;\n    for (int num : l) {\n        if (seen.find(-num) != seen.end()) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x, int base) {\n    string result = \"\";\n    while (x > 0) {\n        result = to_string(x % base) + result;\n        x /= base;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/45", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a, float h) {\n    return 0.5 * a * h;\n}\n"}
{"task_id": "CPP/46", "generation": "#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n    if (n < 0) {\n        printf(\"Input should be a non-negative integer.\");\n        return -1; // or throw an exception\n    }\n    if (n <= 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    int fib4_n_1 = 0;\n    int fib4_n_2 = 2;\n    int fib4_n_3 = 0;\n    int fib4_n_4 = 0;\n    for (int i = 4; i <= n; i++) {\n        int temp = fib4_n_1 + fib4_n_2 + fib4_n_3 + fib4_n_4;\n        fib4_n_4 = fib4_n_3;\n        fib4_n_3 = fib4_n_2;\n        fib4_n_2 = fib4_n_1;\n        fib4_n_1 = temp;\n    }\n    return fib4_n_1;\n}\n"}
{"task_id": "CPP/47", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nfloat median(vector<float> l){\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    } else {\n        return l[n / 2];\n    }\n}\n"}
{"task_id": "CPP/48", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n    int start = 0;\n    int end = text.length() - 1;\n    while (start < end) {\n        if (text[start] != text[end]) {\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/49", "generation": "#include<stdio.h>\nusing namespace std;\nint modp(int n, int p) {\n    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long long temp = modp(n / 2, p);\n        return (temp * temp) % p;\n    } else {\n        return (2 * modp(n - 1, p)) % p;\n    }\n}\n"}
{"task_id": "CPP/50", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n    // takes as input string encoded with encode_shift function. Returns decoded string.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5-(int)'a')%26+(int)'a';   \n        if (w < (int)'a') w += 26; // handle negative values\n        out=out+(char)w;\n    }\n    return out;\n}\n"}
{"task_id": "CPP/51", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    for (char c : text) {\n        if (vowels.find(c) == string::npos) {\n            result += c;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/52", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int> l, int t) {\n    for (int num : l) {\n        if (num >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/53", "generation": "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x, int y) {\n    return x + y;\n}\n"}
{"task_id": "CPP/54", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nbool same_chars(string s0, string s1) {\n    sort(s0.begin(), s0.end());\n    sort(s1.begin(), s1.end());\n    return s0 == s1;\n}\n"}
{"task_id": "CPP/55", "generation": "#include<stdio.h>\nusing namespace std;\nint fib(int n){\n    if (n <= 0) {\n        printf(\"Input should be a positive integer.\");\n        return -1; // or throw an exception\n    }\n    else if (n == 1) {\n        return 1;\n    }\n    else if (n == 2) {\n        return 1;\n    }\n    else {\n        int a = 1, b = 1, result = 0;\n        for (int i = 3; i <= n; i++) {\n            result = a + b;\n            a = b;\n            b = result;\n        }\n        return result;\n    }\n}\n"}
{"task_id": "CPP/56", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int count = 0;\n    for (char c : brackets) {\n        if (c == '<') {\n            count++;\n        } else if (c == '>') {\n            count--;\n            if (count < 0) {\n                return false;\n            }\n        }\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/57", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n    bool increasing = true;\n    bool decreasing = true;\n    \n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > l[i-1]) {\n            decreasing = false;\n        }\n        if (l[i] < l[i-1]) {\n            increasing = false;\n        }\n    }\n    \n    return increasing || decreasing;\n}\n"}
{"task_id": "CPP/58", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n    vector<int> result;\n    set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), back_inserter(result));\n    return result;\n}\n"}
{"task_id": "CPP/59", "generation": "#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i) {\n            i += 1;\n        } else {\n            n /= i;\n        }\n    }\n    return n;\n}\n"}
{"task_id": "CPP/60", "generation": "#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n    return n * (n + 1) / 2;\n}\n"}
{"task_id": "CPP/61", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int count = 0;\n    for (char c : brackets) {\n        if (c == '(') {\n            count++;\n        } else if (c == ')') {\n            count--;\n            if (count < 0) {\n                return false;\n            }\n        }\n    }\n    return count == 0;\n}\n"}
{"task_id": "CPP/62", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n    vector<float> out;\n    for (int i = 1; i < xs.size(); i++) {\n        out.push_back(xs[i] * i);\n    }\n    return out;\n}\n"}
{"task_id": "CPP/63", "generation": "#include<stdio.h>\nusing namespace std;\n\nint fibfib(int n) {\n    if (n <= 1) {\n        return 0;\n    } else if (n == 2) {\n        return 1;\n    } else {\n        int a = 0, b = 0, c = 1;\n        for (int i = 3; i <= n; i++) {\n            int temp = a + b + c;\n            a = b;\n            b = c;\n            c = temp;\n        }\n        return c;\n    }\n}\n"}
{"task_id": "CPP/64", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nint vowels_count(string s){\n    int count = 0;\n    for (char c : s) {\n        char lowerC = tolower(c);\n        if (lowerC == 'a' || lowerC == 'e' || lowerC == 'i' || lowerC == 'o' || lowerC == 'u') {\n            count++;\n        }\n    }\n    if (tolower(s.back()) == 'y') {\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x, int shift) {\n    string str = to_string(x);\n    int n = str.length();\n    shift = shift % n;\n    if (shift == 0) return str;\n    string result = str.substr(n - shift) + str.substr(0, n - shift);\n    return result;\n}\n"}
{"task_id": "CPP/66", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n    int sum = 0;\n    for (char c : s) {\n        if (isupper(c)) {\n            sum += (int)c;\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "#include<stdio.h>\n#include<string>\n#include<sstream>\nusing namespace std;\n\nint fruit_distribution(string s, int n) {\n    int apples, oranges;\n    stringstream ss(s);\n    string temp;\n    ss >> temp >> apples >> temp >> temp >> oranges;\n    return n - apples - oranges;\n}\n"}
{"task_id": "CPP/68", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n    int minEven = INT_MAX;\n    int minIndex = -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < minEven) {\n            minEven = arr[i];\n            minIndex = i;\n        }\n    }\n    if (minIndex != -1) {\n        return {minEven, minIndex};\n    } else {\n        return {};\n    }\n}\n"}
{"task_id": "CPP/69", "generation": "#include<stdio.h>\n#include<vector>\n#include<unordered_map>\nusing namespace std;\n\nint search(vector<int> lst){\n    unordered_map<int, int> freq;\n    for (int num : lst) {\n        if (freq.find(num) != freq.end()) {\n            freq[num]++;\n        } else {\n            freq[num] = 1;\n        }\n    }\n    int max_num = -1;\n    for (auto& pair : freq) {\n        if (pair.second >= pair.first && pair.first > max_num) {\n            max_num = pair.first;\n        }\n    }\n    return max_num;\n}\n"}
{"task_id": "CPP/70", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> result;\n    bool isMin = true;\n    while (!lst.empty()) {\n        if (isMin) {\n            int minIndex = min_element(lst.begin(), lst.end()) - lst.begin();\n            result.push_back(lst[minIndex]);\n            lst.erase(lst.begin() + minIndex);\n        } else {\n            int maxIndex = max_element(lst.begin(), lst.end()) - lst.begin();\n            result.push_back(lst[maxIndex]);\n            lst.erase(lst.begin() + maxIndex);\n        }\n        isMin = !isMin;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/71", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a, float b, float c) {\n    // Check if the three sides form a valid triangle\n    if (a + b > c && a + c > b && b + c > a) {\n        // Calculate the semi-perimeter\n        float s = (a + b + c) / 2;\n        // Calculate the area using Heron's formula\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n        // Return the area rounded to 2 decimal points\n        return round(area * 100) / 100.0;\n    } else {\n        // Return -1 if the three sides do not form a valid triangle\n        return -1.0;\n    }\n}\n"}
{"task_id": "CPP/72", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q, int w) {\n    int sum = 0;\n    for (int num : q) {\n        sum += num;\n    }\n    if (sum > w) {\n        return false;\n    }\n    int left = 0, right = q.size() - 1;\n    while (left < right) {\n        if (q[left] != q[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/73", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n    int n = arr.size();\n    int count = 0;\n    for (int i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n - i - 1]) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/74", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int sum1 = 0, sum2 = 0;\n    for (const string& str : lst1) sum1 += str.length();\n    for (const string& str : lst2) sum2 += str.length();\n    return sum1 <= sum2 ? lst1 : lst2;\n}\n"}
{"task_id": "CPP/75", "generation": "#include<stdio.h>\nusing namespace std;\n\n// Function to check if a number is prime\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\n// Function to check if a number is the product of 3 prime numbers\nbool is_multiply_prime(int a) {\n    for (int i = 2; i < 100; i++) {\n        if (is_prime(i) && a % i == 0) {\n            int b = a / i;\n            for (int j = 2; j < 100; j++) {\n                if (is_prime(j) && b % j == 0) {\n                    int c = b / j;\n                    if (is_prime(c)) return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/76", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x, int n) {\n    if (x <= 0 || n <= 0) {\n        return false;\n    }\n    if (n == 1) {\n        return x == 1;\n    }\n    double result = log(x) / log(n);\n    return result == (int)result;\n}\n"}
{"task_id": "CPP/77", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscube(int a){\n    double cubeRoot = round(cbrt(abs(a)));\n    return cubeRoot * cubeRoot * cubeRoot == abs(a);\n}\n"}
{"task_id": "CPP/78", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nint hex_key(string num){\n    int count = 0;\n    for (char c : num) {\n        switch (c) {\n            case '2':\n            case '3':\n            case '5':\n            case '7':\n            case 'B':\n            case 'D':\n                count++;\n                break;\n            default:\n                break;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n    string binary = \"\";\n    while (decimal > 0) {\n        binary = (decimal % 2 == 0 ? \"0\" : \"1\") + binary;\n        decimal /= 2;\n    }\n    return \"db\" + binary + \"db\";\n}\n"}
{"task_id": "CPP/80", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n    if (s.length() < 3) {\n        return false;\n    }\n    for (int i = 0; i < s.length() - 2; i++) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/81", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> letter_grades;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grade > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grade > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n}\n"}
{"task_id": "CPP/82", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\n// Function to check if a number is prime\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nbool prime_length(string str) {\n    // Get the length of the string\n    int length = str.length();\n    \n    // Check if the length is a prime number\n    return is_prime(length);\n}\n"}
{"task_id": "CPP/83", "generation": "#include<stdio.h>\nusing namespace std;\nint starts_one_ends(int n){\n    if (n == 1) return 1;\n    int total = pow(10, n - 1);\n    int starts_with_one = pow(10, n - 1);\n    int ends_with_one = pow(10, n - 1);\n    int starts_and_ends_with_one = 1;\n    return starts_with_one + ends_with_one - starts_and_ends_with_one;\n}\n"}
{"task_id": "CPP/84", "generation": "#include<stdio.h>\n#include<string>\n#include<bitset>\n#include<string>\nusing namespace std;\n\nstring solve(int N){\n    int sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N /= 10;\n    }\n    return bitset<32>(sum).to_string().substr(bitset<32>(sum).to_string().find('1'));\n}\n"}
{"task_id": "CPP/85", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 != 0 && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nstring anti_shuffle(string s) {\n    string word = \"\";\n    string result = \"\";\n    for (char c : s) {\n        if (c == ' ') {\n            sort(word.begin(), word.end());\n            result += word + \" \";\n            word = \"\";\n        } else {\n            word += c;\n        }\n    }\n    sort(word.begin(), word.end());\n    result += word;\n    return result;\n}\n"}
{"task_id": "CPP/87", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> coordinates;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                coordinates.push_back({i, j});\n            }\n        }\n    }\n    sort(coordinates.begin(), coordinates.end(), [](const vector<int>& a, const vector<int>& b) {\n        if (a[0] == b[0]) {\n            return a[1] > b[1];\n        }\n        return a[0] < b[0];\n    });\n    return coordinates;\n}\n"}
{"task_id": "CPP/88", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n    vector<int> sorted_array = array;\n    if (array.size() > 1) {\n        if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n            sort(sorted_array.begin(), sorted_array.end(), greater<int>());\n        } else {\n            sort(sorted_array.begin(), sorted_array.end());\n        }\n    }\n    return sorted_array;\n}\n"}
{"task_id": "CPP/89", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n    string result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        char c = s[i];\n        if (c >= 'a' && c <= 'z') {\n            c = 'a' + (c - 'a' + 4) % 26;\n            result += c;\n        } else if (c >= 'A' && c <= 'Z') {\n            c = 'A' + (c - 'A' + 4) % 26;\n            result += c;\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/90", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nint next_smallest(vector<int> lst){\n    if (lst.size() < 2) {\n        return -1; // equivalent to None in Python\n    }\n    sort(lst.begin(), lst.end());\n    if (lst[0] == lst[1]) {\n        return -1; // equivalent to None in Python\n    }\n    return lst[1];\n}\n"}
{"task_id": "CPP/91", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n    int boredomCount = 0;\n    string sentence;\n    for (char c : S) {\n        if (c == '.' || c == '?' || c == '!') {\n            if (!sentence.empty() && sentence[0] == 'I') {\n                boredomCount++;\n            }\n            sentence.clear();\n        } else {\n            sentence += c;\n        }\n    }\n    // Check the last sentence\n    if (!sentence.empty() && sentence[0] == 'I') {\n        boredomCount++;\n    }\n    return boredomCount;\n}\n"}
{"task_id": "CPP/92", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a, float b, float c) {\n    if (a != (int)a || b != (int)b || c != (int)c) return false;\n    return (a + b == c) || (a + c == b) || (b + c == a);\n}\n"}
{"task_id": "CPP/93", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nstring encode(string message){\n    string vowels = \"aeiouAEIOU\";\n    string shiftedVowels = \"cdeoCDEO\";\n    for (int i = 0; i < message.length(); i++) {\n        if (isalpha(message[i])) {\n            message[i] = isupper(message[i]) ? tolower(message[i]) : toupper(message[i]);\n            size_t pos = vowels.find(message[i]);\n            if (pos != string::npos) {\n                message[i] = shiftedVowels[pos];\n            }\n        }\n    }\n    return message;\n}\n"}
{"task_id": "CPP/94", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nint sumOfDigits(int n) {\n    int sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum;\n}\n\nint skjkasdkd(vector<int> lst) {\n    int maxPrime = 0;\n    for (int num : lst) {\n        if (isPrime(num) && num > maxPrime) {\n            maxPrime = num;\n        }\n    }\n    return sumOfDigits(maxPrime);\n}\n"}
{"task_id": "CPP/95", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n    if (dict.empty()) return false;\n    bool allLower = true;\n    bool allUpper = true;\n    for (auto& pair : dict) {\n        for (char c : pair.first) {\n            if (isupper(c)) allLower = false;\n            if (islower(c)) allUpper = false;\n            if (!isalpha(c)) return false;\n        }\n    }\n    return allLower || allUpper;\n}\n"}
{"task_id": "CPP/96", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\n// Function to check if a number is prime\nbool isPrime(int num) {\n    if (num <= 1) return false;\n    for (int i = 2; i * i <= num; i++) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\nvector<int> count_up_to(int n) {\n    vector<int> primes;\n    for (int i = 2; i < n; i++) {\n        if (isPrime(i)) {\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n"}
{"task_id": "CPP/97", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a, int b) {\n    int unitDigitA = abs(a) % 10;\n    int unitDigitB = abs(b) % 10;\n    return unitDigitA * unitDigitB;\n}\n"}
{"task_id": "CPP/98", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n    int count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (i % 2 == 0 && (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/99", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n    double num = stod(value);\n    if (num - floor(num) == 0.5) {\n        if (num > 0) {\n            return floor(num) + 1;\n        } else {\n            return floor(num) - 1;\n        }\n    } else {\n        return round(num);\n    }\n}\n"}
{"task_id": "CPP/100", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n    vector<int> pile;\n    for (int i = 0; i < n; i++) {\n        if (n % 2 == 0) {\n            pile.push_back(n + 2 * i);\n        } else {\n            pile.push_back(n + 2 * i);\n        }\n        n = (n % 2 == 0) ? n + 1 : n + 2;\n    }\n    return pile;\n}\n"}
{"task_id": "CPP/101", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n    vector<string> words;\n    string word = \"\";\n    for (char c : s) {\n        if (c == ' ' || c == ',') {\n            if (!word.empty()) {\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    if (!word.empty()) {\n        words.push_back(word);\n    }\n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n    if (x > y) return -1;\n    if (x % 2 == 0) {\n        if (y % 2 == 0) return y;\n        else return y - 1;\n    } else {\n        if (y % 2 == 0) return y;\n        else {\n            if (x + 1 > y) return -1;\n            else return y - 1;\n        }\n    }\n}\n"}
{"task_id": "CPP/103", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n, int m) {\n    if (n > m) return \"-1\";\n    int sum = (n + m) * (m - n + 1) / 2;\n    int avg = sum / (m - n + 1);\n    string binary = \"\";\n    while (avg > 0) {\n        binary = to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n    return binary;\n}\n"}
{"task_id": "CPP/104", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n    vector<int> result;\n    for (int num : x) {\n        bool hasEvenDigit = false;\n        int temp = num;\n        while (temp > 0) {\n            int digit = temp % 10;\n            if (digit % 2 == 0) {\n                hasEvenDigit = true;\n                break;\n            }\n            temp /= 10;\n        }\n        if (!hasEvenDigit) {\n            result.push_back(num);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/105", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n\nvector<string> by_length(vector<int> arr){\n    vector<int> sorted_arr;\n    for (int num : arr) {\n        if (num >= 1 && num <= 9) {\n            sorted_arr.push_back(num);\n        }\n    }\n    sort(sorted_arr.begin(), sorted_arr.end());\n    reverse(sorted_arr.begin(), sorted_arr.end());\n\n    map<int, string> num_to_name = {\n        {1, \"One\"},\n        {2, \"Two\"},\n        {3, \"Three\"},\n        {4, \"Four\"},\n        {5, \"Five\"},\n        {6, \"Six\"},\n        {7, \"Seven\"},\n        {8, \"Eight\"},\n        {9, \"Nine\"}\n    };\n\n    vector<string> result;\n    for (int num : sorted_arr) {\n        result.push_back(num_to_name[num]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/106", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n    vector<int> result;\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            int factorial = 1;\n            for (int j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            result.push_back(factorial);\n        } else {\n            int sum = 0;\n            for (int j = 1; j <= i; j++) {\n                sum += j;\n            }\n            result.push_back(sum);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/107", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nbool isPalindrome(int num) {\n    string str = to_string(num);\n    int start = 0, end = str.length() - 1;\n    while (start < end) {\n        if (str[start] != str[end]) return false;\n        start++;\n        end--;\n    }\n    return true;\n}\n\nvector<int> even_odd_palindrome(int n) {\n    int evenCount = 0, oddCount = 0;\n    for (int i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 == 0) evenCount++;\n            else oddCount++;\n        }\n    }\n    return {evenCount, oddCount};\n}\n"}
{"task_id": "CPP/108", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n    int count = 0;\n    for (int num : n) {\n        int sum = 0;\n        int temp = abs(num);\n        while (temp > 0) {\n            sum += temp % 10;\n            temp /= 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/109", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n    if (arr.size() == 0) return true;\n    vector<int> sorted_arr = arr;\n    sort(sorted_arr.begin(), sorted_arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        bool match = true;\n        for (int j = 0; j < arr.size(); j++) {\n            if (arr[(i + j) % arr.size()] != sorted_arr[j]) {\n                match = false;\n                break;\n            }\n        }\n        if (match) return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/110", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n    int odd_count1 = 0;\n    int even_count2 = 0;\n    \n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            odd_count1++;\n        }\n    }\n    \n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            even_count2++;\n        }\n    }\n    \n    if (odd_count1 <= even_count2) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n"}
{"task_id": "CPP/111", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\n#include<sstream>\nusing namespace std;\n\nmap<char,int> histogram(string test){\n    map<char,int> countMap;\n    int maxCount = 0;\n    map<char,int> result;\n\n    // Split the string into words and count the occurrence of each letter\n    stringstream ss(test);\n    string word;\n    while (ss >> word) {\n        for (char c : word) {\n            if (countMap.find(c) != countMap.end()) {\n                countMap[c]++;\n            } else {\n                countMap[c] = 1;\n            }\n            maxCount = max(maxCount, countMap[c]);\n        }\n    }\n\n    // Create the result map with letters that have the maximum count\n    for (auto& pair : countMap) {\n        if (pair.second == maxCount) {\n            result[pair.first] = pair.second;\n        }\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/112", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s, string c) {\n    string result = \"\";\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            result += ch;\n        }\n    }\n    string reversed = result;\n    reverse(reversed.begin(), reversed.end());\n    vector<string> output = {result, (result == reversed) ? \"True\" : \"False\"};\n    return output;\n}\n"}
{"task_id": "CPP/113", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n    vector<string> out;\n    for (int i = 0; i < lst.size(); i++) {\n        int count = 0;\n        for (char c : lst[i]) {\n            if ((c - '0') % 2 != 0) {\n                count++;\n            }\n        }\n        string temp = \"the number of odd elements \" + to_string(count) + \"n the str\" + to_string(count) + \"ng \" + to_string(count) + \" of the \" + to_string(count) + \"nput.\";\n        out.push_back(temp);\n    }\n    return out;\n}\n"}
{"task_id": "CPP/114", "generation": "#include<stdio.h>\n#include<vector>\n#include<climits>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n    long long minSum = LLONG_MAX;\n    long long currentSum = 0;\n    for (long long num : nums) {\n        currentSum = min(num, currentSum + num);\n        minSum = min(minSum, currentSum);\n    }\n    return minSum;\n}\n"}
{"task_id": "CPP/115", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid, int capacity) {\n    int total_water = 0;\n    for (const auto& well : grid) {\n        for (int water : well) {\n            total_water += water;\n        }\n    }\n    return (total_water + capacity - 1) / capacity;\n}\n"}
{"task_id": "CPP/116", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\n// Function to count the number of ones in the binary representation of a number\nint countOnes(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n\n// Custom comparator function for sorting\nbool compare(int a, int b) {\n    int onesA = countOnes(abs(a));\n    int onesB = countOnes(abs(b));\n    if (onesA == onesB) {\n        return a < b;\n    }\n    return onesA < onesB;\n}\n\nvector<int> sort_array(vector<int> arr) {\n    // Sort the array using the custom comparator function\n    sort(arr.begin(), arr.end(), compare);\n    return arr;\n}\n"}
{"task_id": "CPP/117", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nvector<string> select_words(string s, int n) {\n    vector<string> words;\n    string word = \"\";\n    for (char c : s) {\n        if (c == ' ') {\n            words.push_back(word);\n            word = \"\";\n        } else {\n            word += c;\n        }\n    }\n    if (!word.empty()) {\n        words.push_back(word);\n    }\n\n    vector<string> result;\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    for (string w : words) {\n        int count = 0;\n        for (char c : w) {\n            if (consonants.find(c) != string::npos) {\n                count++;\n            }\n        }\n        if (count == n) {\n            result.push_back(w);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/118", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nstring get_closest_vowel(string word){\n    string vowels = \"AEIOUaeiou\";\n    for (int i = word.size() - 1; i > 0; --i) {\n        if (vowels.find(word[i]) != string::npos) {\n            if (vowels.find(word[i-1]) == string::npos && vowels.find(word[i+1]) == string::npos) {\n                return string(1, word[i]);\n            }\n        }\n    }\n    return \"\";\n}\n"}
{"task_id": "CPP/119", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n    int count1 = 0, count2 = 0;\n    for (char c : lst[0]) {\n        if (c == '(') count1++;\n        else count1--;\n    }\n    for (char c : lst[1]) {\n        if (c == '(') count2++;\n        else count2--;\n    }\n    return (abs(count1 + count2) <= 1) ? \"Yes\" : \"No\";\n}\n"}
{"task_id": "CPP/120", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n    // Sort the vector in descending order\n    sort(arr.rbegin(), arr.rend());\n    \n    // Select the first k elements\n    vector<int> result(arr.begin(), arr.begin() + k);\n    \n    // Sort the selected elements in ascending order\n    sort(result.begin(), result.end());\n    \n    return result;\n}\n"}
{"task_id": "CPP/121", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solution(vector<int> lst){\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n    int sum = 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n    vector<int> odd_collatz = {n};\n    while (n != 1) {\n        if (n % 2 == 0) {\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n            odd_collatz.push_back(n);\n        }\n    }\n    sort(odd_collatz.begin(), odd_collatz.end());\n    return odd_collatz;\n}\n"}
{"task_id": "CPP/124", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nbool valid_date(string date){\n    // Check if the date string is not empty\n    if (date.empty()) {\n        return false;\n    }\n\n    // Check if the date is in the correct format\n    if (date.length() != 10 || date[2] != '-' || date[5] != '-') {\n        return false;\n    }\n\n    int month, day, year;\n    // Extract month, day, and year from the date string\n    sscanf(date.c_str(), \"%d-%d-%d\", &month, &day, &year);\n\n    // Check if the month is valid\n    if (month < 1 || month > 12) {\n        return false;\n    }\n\n    // Check if the day is valid based on the month\n    if (month == 2) {\n        if (day < 1 || day > 29) {\n            return false;\n        }\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) {\n            return false;\n        }\n    } else {\n        if (day < 1 || day > 31) {\n            return false;\n        }\n    }\n\n    return true;\n}\n"}
{"task_id": "CPP/125", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nvector<string> split_words(string txt){\n    vector<string> out;\n    if (txt.find(' ') != string::npos) {\n        size_t pos = 0;\n        while ((pos = txt.find(' ')) != string::npos) {\n            out.push_back(txt.substr(0, pos));\n            txt.erase(0, pos + 1);\n        }\n        out.push_back(txt);\n    } else if (txt.find(',') != string::npos) {\n        size_t pos = 0;\n        while ((pos = txt.find(',')) != string::npos) {\n            out.push_back(txt.substr(0, pos));\n            txt.erase(0, pos + 1);\n        }\n        out.push_back(txt);\n    } else {\n        int count = 0;\n        for (char c : txt) {\n            if (c >= 'a' && c <= 'z' && (c - 'a') % 2 != 0) {\n                count++;\n            }\n        }\n        out.push_back(to_string(count));\n    }\n    return out;\n}\n"}
{"task_id": "CPP/126", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n    // Check if the list is sorted in ascending order\n    if (!is_sorted(lst.begin(), lst.end())) {\n        return false;\n    }\n    \n    // Check if any number appears more than twice\n    for (int i = 0; i < lst.size() - 2; i++) {\n        if (lst[i] == lst[i + 1] && lst[i] == lst[i + 2]) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n"}
{"task_id": "CPP/127", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nstring intersection(vector<int> interval1, vector<int> interval2) {\n    int start = max(interval1[0], interval2[0]);\n    int end = min(interval1[1], interval2[1]);\n    int length = end - start + 1;\n    if (length <= 0) return \"NO\";\n    return isPrime(length) ? \"YES\" : \"NO\";\n}\n"}
{"task_id": "CPP/128", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n    if (arr.empty()) return -32768;\n    int sum = 0;\n    int product = 1;\n    for (int num : arr) {\n        sum += abs(num);\n        if (num > 0) product *= 1;\n        else if (num < 0) product *= -1;\n        else product *= 0;\n    }\n    return sum * product;\n}\n"}
{"task_id": "CPP/129", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\n// Function to check if a cell is valid\nbool isValid(int x, int y, int n) {\n    return (x >= 0 && x < n && y >= 0 && y < n);\n}\n\n// Function to perform DFS\nvoid dfs(int x, int y, int k, vector<vector<int>>& grid, vector<int>& path, vector<vector<bool>>& visited, vector<int>& result) {\n    int n = grid.size();\n    if (k == 0) {\n        if (path.size() < result.size() || result.empty()) {\n            result = path;\n        }\n        return;\n    }\n    visited[x][y] = true;\n    path.push_back(grid[x][y]);\n    int dx[] = {-1, 1, 0, 0};\n    int dy[] = {0, 0, -1, 1};\n    for (int i = 0; i < 4; i++) {\n        int nx = x + dx[i];\n        int ny = y + dy[i];\n        if (isValid(nx, ny, n) && !visited[nx][ny]) {\n            dfs(nx, ny, k - 1, grid, path, visited, result);\n        }\n    }\n    path.pop_back();\n    visited[x][y] = false;\n}\n\nvector<int> minPath(vector<vector<int>> grid, int k) {\n    int n = grid.size();\n    vector<int> result;\n    vector<vector<bool>> visited(n, vector<bool>(n, false));\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            vector<int> path;\n            dfs(i, j, k, grid, path, visited, result);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/130", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n    vector<int> trib(n + 1);\n    trib[0] = 1;\n    if (n >= 1) trib[1] = 3;\n    if (n >= 2) trib[2] = 2;\n    for (int i = 3; i <= n; i++) {\n        if (i % 2 == 0) trib[i] = 1 + i / 2;\n        else trib[i] = trib[i - 1] + trib[i - 2] + trib[i - 3];\n    }\n    return trib;\n}\n"}
{"task_id": "CPP/131", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n    int product = 1;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit % 2 != 0) {\n            product *= digit;\n        }\n        n /= 10;\n    }\n    return product == 1 ? 0 : product;\n}\n"}
{"task_id": "CPP/132", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_nested(string str){\n    int count = 0;\n    for (char c : str) {\n        if (c == '[') {\n            count++;\n        } else {\n            count--;\n            if (count > 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/133", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n    int sum = 0;\n    for (float num : lst) {\n        sum += pow(ceil(num), 2);\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/134", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n    if (txt.length() == 0) return false;\n    if (txt[txt.length() - 1] == ' ') return false;\n    size_t lastSpace = txt.find_last_of(' ');\n    if (lastSpace == string::npos) return false;\n    string lastWord = txt.substr(lastSpace + 1);\n    return isalpha(lastWord[0]);\n}\n"}
{"task_id": "CPP/135", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n    int n = arr.size();\n    int max_index = -1;\n    for (int i = 1; i < n; i++) {\n        if (arr[i] < arr[i-1]) {\n            max_index = i;\n        }\n    }\n    return max_index;\n}\n"}
{"task_id": "CPP/136", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n    int largest_negative = 0;\n    int smallest_positive = 0;\n    for (int num : lst) {\n        if (num < 0) {\n            if (largest_negative == 0 || num > largest_negative) {\n                largest_negative = num;\n            }\n        } else if (num > 0) {\n            if (smallest_positive == 0 || num < smallest_positive) {\n                smallest_positive = num;\n            }\n        }\n    }\n    return {largest_negative, smallest_positive};\n}\n"}
{"task_id": "CPP/137", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n\n// Function to convert string to float, handling both '.' and ',' as decimal separators\nfloat stringToFloat(const string& str) {\n    string temp = str;\n    replace(temp.begin(), temp.end(), ',', '.');\n    return stof(temp);\n}\n\nboost::any compare_one(boost::any a, boost::any b) {\n    // Convert both inputs to float, handling strings and different decimal separators\n    float fa, fb;\n    if (a.type() == typeid(string)) fa = stringToFloat(any_cast<string>(a));\n    else if (a.type() == typeid(int)) fa = any_cast<int>(a);\n    else fa = any_cast<float>(a);\n\n    if (b.type() == typeid(string)) fb = stringToFloat(any_cast<string>(b));\n    else if (b.type() == typeid(int)) fb = any_cast<int>(b);\n    else fb = any_cast<float>(b);\n\n    // Compare the values\n    if (fa > fb) return a;\n    else if (fa < fb) return b;\n    else return boost::any(\"None\"); // Return \"None\" if the values are equal\n}\n"}
{"task_id": "CPP/138", "generation": "#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n    if (n < 8) return false;\n    for (int a = 2; a <= n / 4; a += 2) {\n        for (int b = a; b <= (n - a) / 3; b += 2) {\n            for (int c = b; c <= (n - a - b) / 2; c += 2) {\n                int d = n - a - b - c;\n                if (d >= c && d % 2 == 0) return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/139", "generation": "#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n    long long result = 1;\n    for (int i = 1; i <= n; i++) {\n        long long factorial = 1;\n        for (int j = 1; j <= i; j++) {\n            factorial *= j;\n        }\n        result *= factorial;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/140", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n    string result = \"\";\n    int consecutive_spaces = 0;\n    for (char c : text) {\n        if (c == ' ') {\n            consecutive_spaces++;\n            if (consecutive_spaces == 1) {\n                result += '_';\n            } else if (consecutive_spaces > 2) {\n                result = result.substr(0, result.size() - 1) + '-';\n            }\n        } else {\n            consecutive_spaces = 0;\n            result += c;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/141", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n    int digit_count = 0;\n    int dot_count = 0;\n    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n            digit_count++;\n        }\n        if (file_name[i] == '.') {\n            dot_count++;\n        }\n    }\n    if (digit_count > 3 || dot_count != 1) {\n        return \"No\";\n    }\n    int dot_index = file_name.find('.');\n    if (file_name[0] < 'a' || file_name[0] > 'z' && file_name[0] < 'A' || file_name[0] > 'Z') {\n        return \"No\";\n    }\n    string extension = file_name.substr(dot_index + 1);\n    if (extension != \"txt\" && extension != \"exe\" && extension != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n"}
{"task_id": "CPP/142", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "#include<stdio.h>\n#include<string>\n#include<vector>\nusing namespace std;\n\n// Function to check if a number is prime\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nstring words_in_sentence(string sentence) {\n    string word = \"\";\n    string result = \"\";\n    for (char c : sentence) {\n        if (c == ' ') {\n            if (isPrime(word.length())) {\n                result += word + \" \";\n            }\n            word = \"\";\n        } else {\n            word += c;\n        }\n    }\n    if (isPrime(word.length())) {\n        result += word;\n    }\n    // Remove the trailing space if present\n    if (!result.empty() && result.back() == ' ') {\n        result.pop_back();\n    }\n    return result;\n}\n"}
{"task_id": "CPP/144", "generation": "#include<stdio.h>\n#include<string>\n#include<sstream>\nusing namespace std;\n\nbool simplify(string x, string n) {\n    int xNumerator, xDenominator, nNumerator, nDenominator;\n    char temp;\n    \n    // Parse the fractions\n    stringstream ss1(x);\n    ss1 >> xNumerator >> temp >> xDenominator;\n    \n    stringstream ss2(n);\n    ss2 >> nNumerator >> temp >> nDenominator;\n    \n    // Calculate the product of the numerators and denominators\n    int productNumerator = xNumerator * nNumerator;\n    int productDenominator = xDenominator * nDenominator;\n    \n    // Check if the product is a whole number\n    return productNumerator % productDenominator == 0;\n}\n"}
{"task_id": "CPP/145", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\n// Function to calculate the sum of digits of a number\nint sumOfDigits(int n) {\n    int sum = 0;\n    while (n != 0) {\n        sum += abs(n % 10);\n        n /= 10;\n    }\n    return sum;\n}\n\nvector<int> order_by_points(vector<int> nums){\n    // Create a vector of pairs to store the sum of digits and the original index\n    vector<pair<int, int>> sumAndIndex;\n    for (int i = 0; i < nums.size(); i++) {\n        sumAndIndex.push_back({sumOfDigits(nums[i]), i});\n    }\n\n    // Sort the vector of pairs based on the sum of digits and the original index\n    sort(sumAndIndex.begin(), sumAndIndex.end(), [](const pair<int, int>& a, const pair<int, int>& b) {\n        if (a.first == b.first) {\n            return a.second < b.second;\n        }\n        return a.first < b.first;\n    });\n\n    // Create the result vector by mapping the sorted pairs back to the original numbers\n    vector<int> result;\n    for (const auto& pair : sumAndIndex) {\n        result.push_back(nums[pair.second]);\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/146", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nint specialFilter(vector<int> nums){\n    int count = 0;\n    for (int num : nums) {\n        if (abs(num) > 10) {\n            string strNum = to_string(abs(num));\n            if ((strNum[0] - '0') % 2 != 0 && (strNum[strNum.size() - 1] - '0') % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_max_triples(int n){\n    vector<int> a;\n    for (int i = 1; i <= n; i++) {\n        a.push_back(i * i - i + 1);\n    }\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        for (int j = i + 1; j < n - 1; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> bf(string planet1, string planet2) {\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int index1 = -1, index2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) index1 = i;\n        if (planets[i] == planet2) index2 = i;\n    }\n    if (index1 == -1 || index2 == -1) return {};\n    if (index1 > index2) swap(index1, index2);\n    vector<string> result;\n    for (int i = index1 + 1; i < index2; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/149", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n    // Filter out strings with odd lengths\n    lst.erase(remove_if(lst.begin(), lst.end(), [](const string& s){ return s.length() % 2 != 0; }), lst.end());\n    \n    // Sort the vector by length of each word and then alphabetically\n    sort(lst.begin(), lst.end(), [](const string& a, const string& b){\n        if (a.length() == b.length()) {\n            return a < b;\n        } else {\n            return a.length() < b.length();\n        }\n    });\n    \n    return lst;\n}\n"}
{"task_id": "CPP/150", "generation": "#include<stdio.h>\nusing namespace std;\n\n// Function to check if a number is prime\nbool isPrime(int num) {\n    if (num <= 1) return false;\n    for (int i = 2; i * i <= num; i++) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\nint x_or_y(int n, int x, int y) {\n    if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n"}
{"task_id": "CPP/151", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nlong long double_the_difference(vector<float> lst){\n    long long sum = 0;\n    for (float num : lst) {\n        if (num > 0 && fmod(num, 1) == 0) {\n            sum += (long long)num * (long long)num;\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/152", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> result;\n    for (int i = 0; i < game.size(); i++) {\n        result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;\n}\n"}
{"task_id": "CPP/153", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nstring Strongest_Extension(string class_name, vector<string> extensions) {\n    string strongestExtension = extensions[0];\n    int maxStrength = 0;\n    \n    for (char c : strongestExtension) {\n        if (isupper(c)) maxStrength++;\n        if (islower(c)) maxStrength--;\n    }\n    \n    for (int i = 1; i < extensions.size(); i++) {\n        int strength = 0;\n        for (char c : extensions[i]) {\n            if (isupper(c)) strength++;\n            if (islower(c)) strength--;\n        }\n        if (strength > maxStrength) {\n            maxStrength = strength;\n            strongestExtension = extensions[i];\n        }\n    }\n    \n    return class_name + \".\" + strongestExtension;\n}\n"}
{"task_id": "CPP/154", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool cycpattern_check(string a, string b) {\n    string temp = b + b;\n    for (int i = 0; i < b.length(); i++) {\n        string rotated_b = temp.substr(i, b.length());\n        if (a.find(rotated_b) != string::npos) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/155", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n    int even = 0, odd = 0;\n    string str = to_string(abs(num));\n    for (char c : str) {\n        int digit = c - '0';\n        if (digit % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return {even, odd};\n}\n"}
{"task_id": "CPP/156", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nstring int_to_mini_roman(int number){\n    vector<pair<int, string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"},\n        {100, \"c\"}, {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"},\n        {10, \"x\"}, {9, \"ix\"}, {5, \"v\"}, {4, \"iv\"}, {1, \"i\"}\n    };\n\n    string result = \"\";\n    for (const auto& numeral : roman_numerals) {\n        while (number >= numeral.first) {\n            result += numeral.second;\n            number -= numeral.first;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/157", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a, float b, float c) {\n    float sides[] = {a, b, c};\n    std::sort(sides, sides + 3);\n    return (sides[0]*sides[0] + sides[1]*sides[1] == sides[2]*sides[2]);\n}\n"}
{"task_id": "CPP/158", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nstring find_max(vector<string> words){\n    string max_word = words[0];\n    int max_unique_chars = words[0].length();\n\n    for (int i = 1; i < words.size(); i++) {\n        string word = words[i];\n        set<char> unique_chars(word.begin(), word.end());\n        int num_unique_chars = unique_chars.size();\n\n        if (num_unique_chars > max_unique_chars) {\n            max_word = word;\n            max_unique_chars = num_unique_chars;\n        } else if (num_unique_chars == max_unique_chars) {\n            if (word < max_word) {\n                max_word = word;\n            }\n        }\n    }\n\n    return max_word;\n}\n"}
{"task_id": "CPP/159", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number, int need, int remaining) {\n    int totalEaten = number + min(need, remaining);\n    int carrotsLeft = max(0, remaining - need);\n    return {totalEaten, carrotsLeft};\n}\n"}
{"task_id": "CPP/160", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\n\nint do_algebra(vector<string> operato, vector<int> operand){\n    int result = operand[0];\n    for (int i = 0; i < operato.size(); i++) {\n        if (operato[i] == \"+\") {\n            result += operand[i + 1];\n        } else if (operato[i] == \"-\") {\n            result -= operand[i + 1];\n        } else if (operato[i] == \"*\") {\n            result *= operand[i + 1];\n        } else if (operato[i] == \"//\") {\n            result /= operand[i + 1];\n        } else if (operato[i] == \"**\") {\n            result = pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/161", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n    bool hasLetter = false;\n    for (char c : s) {\n        if (isalpha(c)) {\n            hasLetter = true;\n            break;\n        }\n    }\n    if (!hasLetter) {\n        reverse(s.begin(), s.end());\n    } else {\n        for (char& c : s) {\n            if (isalpha(c)) {\n                c = islower(c) ? toupper(c) : tolower(c);\n            }\n        }\n    }\n    return s;\n}\n"}
{"task_id": "CPP/162", "generation": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n\nstring string_to_md5(string text){\n    if (text.empty()) {\n        return \"\";\n    }\n\n    unsigned char hash[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.size(), hash);\n\n    string md5String;\n    for (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n        char hex[3];\n        sprintf(hex, \"%02x\", hash[i]);\n        md5String += hex;\n    }\n\n    return md5String;\n}\n"}
{"task_id": "CPP/163", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> generate_integers(int a, int b) {\n    vector<int> evenDigits = {2, 4, 6, 8};\n    int minVal = min(a, b);\n    int maxVal = max(a, b);\n    vector<int> result;\n    for (int digit : evenDigits) {\n        if (minVal <= digit && digit <= maxVal) {\n            result.push_back(digit);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/0", "generation": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (abs(numbers[i]-numbers[j])<threshold)\n            return true;\n    return false;\n}\n"}
