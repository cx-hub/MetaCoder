{"task_id": "CPP/0", "generation": "#include<stdio.h>\n#include<vector>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n\nbool has_close_elements(vector<float> numbers, float threshold){\n  sort(numbers.begin(), numbers.end());\n  for (int i = 0; i < numbers.size() - 1; i++) {\n    if (abs(numbers[i] - numbers[i + 1]) < threshold) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"task_id": "CPP/1", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> result;\n    string current_group = \"\";\n    int balance = 0;\n    \n    for (char c : paren_string) {\n        if (c == ' ') continue;\n        \n        current_group += c;\n        \n        if (c == '(') balance++;\n        else balance--;\n        \n        if (balance == 0) {\n            result.push_back(current_group);\n            current_group = \"\";\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/2", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n    return fmod(number, 1.0); // get the remainder of the division of the number by 1.0\n}\n"}
{"task_id": "CPP/3", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n    int balance = 0;\n    for (int operation : operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n    float sum = 0;\n    for (float num : numbers) {\n        sum += num;\n    }\n    float mean = sum / numbers.size();\n    float sum_of_abs_diff = 0;\n    for (float num : numbers) {\n        sum_of_abs_diff += abs(num - mean);\n    }\n    float mad = sum_of_abs_diff / numbers.size();\n    return mad;\n}\n"}
{"task_id": "CPP/5", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimiter){\n    vector<int> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n        if (i < numbers.size() - 1) {\n            result.push_back(delimiter);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/6", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> results;\n    size_t start = 0, end = 0;\n    while ((end = paren_string.find(' ', start)) != string::npos) {\n        string group = paren_string.substr(start, end - start);\n        int max_level = 0;\n        int current_level = 0;\n        for (char c : group) {\n            if (c == '(') {\n                current_level++;\n                max_level = max(max_level, current_level);\n            } else if (c == ')') {\n                current_level--;\n            }\n        }\n        results.push_back(max_level);\n        start = end + 1;\n    }\n    // Process the last group\n    string group = paren_string.substr(start);\n    int max_level = 0;\n    int current_level = 0;\n    for (char c : group) {\n        if (c == '(') {\n            current_level++;\n            max_level = max(max_level, current_level);\n        } else if (c == ')') {\n            current_level--;\n        }\n    }\n    results.push_back(max_level);\n    return results;\n}\n"}
{"task_id": "CPP/7", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> filter_by_substring(vector<string> strings, string substring){\n  vector<string> filtered_strings;\n  for (const string& str : strings) {\n    if (str.find(substring) != string::npos) {\n      filtered_strings.push_back(str);\n    }\n  }\n  return filtered_strings;\n}\n"}
{"task_id": "CPP/8", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n    int sum = 0;\n    int product = 1;\n    for (int num : numbers) {\n        sum += num;\n        product *= num;\n    }\n    return {sum, product};\n}\n"}
{"task_id": "CPP/9", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> rolling_max_elements;\n    int max_so_far = numbers[0];\n    rolling_max_elements.push_back(max_so_far);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far) {\n            max_so_far = numbers[i];\n        }\n        rolling_max_elements.push_back(max_so_far);\n    }\n    return rolling_max_elements;\n}\n"}
{"task_id": "CPP/10", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\n\nstring make_palindrome(string str){\n    if (str.empty() || is_palindrome(str)) \n        return str;\n\n    string rev_str(str.rbegin(), str.rend());\n    for (int i = 0; i < str.length(); i++) {\n        if (str.find(rev_str.substr(i)) == 0) {\n            return str + rev_str.substr(0, i);\n        }\n    }\n    return str + rev_str;\n}\n"}
{"task_id": "CPP/11", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a, string b) {\n  string result = \"\";\n  for (int i = 0; i < a.length(); i++) {\n    if ((a[i] == '1' && b[i] == '1') || (a[i] == '0' && b[i] == '0')) {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return result;\n}\n"}
{"task_id": "CPP/12", "generation": "#include<algorithm>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n    if (strings.empty()) {\n        return \"\";\n    }\n    return *max_element(strings.begin(), strings.end(),\n        [](const string& a, const string& b) {\n            return a.length() < b.length();\n        });\n}\n"}
{"task_id": "CPP/13", "generation": "#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n"}
{"task_id": "CPP/14", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n  vector<string> prefixes;\n  string prefix = \"\";\n  for (char c : str) {\n    prefix += c;\n    prefixes.push_back(prefix);\n  }\n  return prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "#include<stdio.h>\n#include<string>\n#include<sstream>\nusing namespace std;\nstring string_sequence(int n){\n    stringstream ss;\n    for (int i = 0; i <= n; i++) {\n        ss << i << \" \";\n    }\n    string result = ss.str();\n    // Remove the last space\n    if (!result.empty()) {\n        result.pop_back();\n    }\n    return result;\n}\n"}
{"task_id": "CPP/16", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){\n    // Convert the string to lowercase\n    for (char& c : str) {\n        c = tolower(c);\n    }\n    \n    // Create a set to store unique characters\n    set<char> unique_chars;\n    \n    // Add each character to the set\n    for (char c : str) {\n        unique_chars.insert(c);\n    }\n    \n    // Return the size of the set\n    return unique_chars.size();\n}\n"}
{"task_id": "CPP/17", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<int> parse_music(string music_string){\n    vector<int> beats;\n    for (int i = 0; i < music_string.length(); i++) {\n        if (music_string[i] == 'o' && i + 1 < music_string.length() && music_string[i + 1] == '|') {\n            beats.push_back(2);\n            i++;\n        } else if (music_string[i] == '.' && i + 1 < music_string.length() && music_string[i + 1] == '|') {\n            beats.push_back(1);\n            i++;\n        } else if (music_string[i] == 'o') {\n            beats.push_back(4);\n        }\n    }\n    return beats;\n}\n"}
{"task_id": "CPP/18", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str, string substring){\n  int count = 0;\n  for (int i = 0; i <= str.length() - substring.length(); i++) {\n    if (str.substr(i, substring.length()) == substring) {\n      count++;\n    }\n  }\n  return count;\n}\n"}
{"task_id": "CPP/19", "generation": "#include <iostream>\n#include <sstream>\n#include <vector>\n#include <map>\n#include <algorithm>\n\nstring sort_numbers(string numbers) {\n    // Map of word numbers to their corresponding integer values\n    map<string, int> numMap = {\n        {\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3}, {\"four\", 4},\n        {\"five\", 5}, {\"six\", 6}, {\"seven\", 7}, {\"eight\", 8}, {\"nine\", 9}\n    };\n\n    // Split the input string into a vector of words\n    istringstream iss(numbers);\n    vector<string> words;\n    string word;\n    while (iss >> word) {\n        words.push_back(word);\n    }\n\n    // Sort the vector of words based on their corresponding integer values\n    sort(words.begin(), words.end(), [&numMap](const string& a, const string& b) {\n        return numMap[a] < numMap[b];\n    });\n\n    // Join the sorted words back into a string\n    ostringstream oss;\n    for (const string& word : words) {\n        oss << word << \" \";\n    }\n\n    // Return the sorted string\n    return oss.str().substr(0, oss.str().size() - 1); // Remove the trailing space\n}\n"}
{"task_id": "CPP/20", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<float> find_closest_elements(vector<float> numbers){\n    sort(numbers.begin(), numbers.end());\n    float min_diff = INFINITY;\n    vector<float> closest_pair;\n    \n    for (int i = 0; i < numbers.size() - 1; i++) {\n        float diff = abs(numbers[i] - numbers[i + 1]);\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = {numbers[i], numbers[i + 1]};\n        }\n    }\n    \n    return closest_pair;\n}\n"}
{"task_id": "CPP/21", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<float> rescale_to_unit(vector<float> numbers){\n  float min_value = *min_element(numbers.begin(), numbers.end());\n  float max_value = *max_element(numbers.begin(), numbers.end());\n  float range = max_value - min_value;\n  vector<float> scaled_numbers;\n  for (float number : numbers) {\n    float scaled_number = (number - min_value) / range;\n    scaled_numbers.push_back(scaled_number);\n  }\n  return scaled_numbers;\n}\n"}
{"task_id": "CPP/22", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n\nvector<int> filter_integers(list_any values){\n    vector<int> out;\n    for (const auto& value : values) {\n        if (value.type() == typeid(int)) {\n            out.push_back(boost::any_cast<int>(value));\n        }\n    }\n    return out;\n}\n"}
{"task_id": "CPP/23", "generation": "int strlen(string str){ return str.size(); }\n"}
{"task_id": "CPP/24", "generation": "#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n  for (int i = n - 1; i > 0; i--) {\n    if (n % i == 0) {\n      return i;\n    }\n  }\n  return 1; // in case n is a prime number\n}\n"}
{"task_id": "CPP/25", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n  vector<int> prime_factors;\n  int i = 2;\n  while (n > 1) {\n    if (n % i == 0) {\n      prime_factors.push_back(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return prime_factors;\n}\n"}
{"task_id": "CPP/26", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\n#include<unordered_map>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n    unordered_map<int, int> count_map;\n    for (int num : numbers) {\n        count_map[num]++;\n    }\n    vector<int> result;\n    for (int num : numbers) {\n        if (count_map[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/27", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring flip_case(string str){\n    string result = \"\";\n    for (char c : str) {\n        if (isupper(c)) {\n            result += tolower(c);\n        } else if (islower(c)) {\n            result += toupper(c);\n        } else {\n            result += c; // leave non-letter characters unchanged\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/28", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n  string result = \"\";\n  for (const string& str : strings) {\n    result += str;\n  }\n  return result;\n}\n"}
{"task_id": "CPP/29", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n  vector<string> output;\n  for (const string& str : strings) {\n    if (str.find(prefix) == 0) {\n      output.push_back(str);\n    }\n  }\n  return output;\n}\n"}
{"task_id": "CPP/30", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n  vector<float> output;\n  for (float num : l) {\n    if (num > 0) {\n      output.push_back(num);\n    }\n  }\n  return output;\n}\n"}
{"task_id": "CPP/31", "generation": "#include <cmath>\nbool is_prime(long long n) {\n  if (n <= 1) {\n    return false;\n  }\n  for (long long i = 2; i <= std::sqrt(n); i++) {\n    if (n % i == 0) {\n      return false;\n    }\n  }\n  return true;\n}\n"}
{"task_id": "CPP/32", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n\ndouble poly(vector<double> xs, double x){\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    int n = xs.size();\n    if (n % 2 != 0) {\n        throw invalid_argument(\"The number of coefficients must be even.\");\n    }\n    if (xs[n-1] == 0) {\n        throw invalid_argument(\"The largest coefficient must be non-zero.\");\n    }\n    double a = -1.0;\n    double b = 1.0;\n    while (true) {\n        double fa = poly(xs, a);\n        double fb = poly(xs, b);\n        if (fa * fb <= 0) {\n            break;\n        }\n        if (abs(fa) < abs(fb)) {\n            b = (a + b) / 2.0;\n        } else {\n            a = (a + b) / 2.0;\n        }\n    }\n    return (a + b) / 2.0;\n}\n"}
{"task_id": "CPP/33", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n    vector<int> third_elements;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            third_elements.push_back(l[i]);\n        }\n    }\n    sort(third_elements.begin(), third_elements.end());\n    int j = 0;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l[i] = third_elements[j];\n            j++;\n        }\n    }\n    return l;\n}\n"}
{"task_id": "CPP/34", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n    sort(l.begin(), l.end()); // sort the vector\n    l.erase(unique(l.begin(), l.end()), l.end()); // remove duplicates\n    return l;\n}\n"}
{"task_id": "CPP/35", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n    float max_val = l[0];\n    for (float element : l) {\n        if (element > max_val) {\n            max_val = element;\n        }\n    }\n    return max_val;\n}\n"}
{"task_id": "CPP/36", "generation": "#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            int num = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n                    count++;\n                }\n                num /= 10;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/37", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n    vector<float> even_indices;\n    vector<float> odd_indices;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            even_indices.push_back(l[i]);\n        } else {\n            odd_indices.push_back(l[i]);\n        }\n    }\n    sort(even_indices.begin(), even_indices.end());\n    vector<float> result;\n    int even_index = 0;\n    int odd_index = 0;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            result.push_back(even_indices[even_index]);\n            even_index++;\n        } else {\n            result.push_back(odd_indices[odd_index]);\n            odd_index++;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/38", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring decode_cyclic(string s){ \n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1,1)+x.substr(2,1)+x.substr(0,1);\n        output=output+x;\n    }\n    return output;\n}\n"}
{"task_id": "CPP/39", "generation": "#include <cmath>\n#include <iostream>\n\nbool is_prime(int num) {\n    if (num < 2) {\n        return false;\n    }\n    for (int i = 2; i <= std::sqrt(num); i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint prime_fib(int n) {\n    int fib_count = 0;\n    int a = 0;\n    int b = 1;\n    while (true) {\n        if (is_prime(b)) {\n            fib_count++;\n            if (fib_count == n) {\n                return b;\n            }\n        }\n        int temp = a;\n        a = b;\n        b = temp + b;\n    }\n}\n"}
{"task_id": "CPP/40", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nbool triples_sum_to_zero(vector<int> l){\n    sort(l.begin(), l.end());\n    for (int i = 0; i < l.size() - 2; i++){\n        int left = i + 1;\n        int right = l.size() - 1;\n        while (left < right){\n            int sum = l[i] + l[left] + l[right];\n            if (sum == 0){\n                return true;\n            } else if (sum < 0){\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/41", "generation": "#include<stdio.h>\nusing namespace std;\nint car_race_collision(int n){\n    return n * n;\n}\n"}
{"task_id": "CPP/42", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n    for (int i = 0; i < l.size(); i++) {\n        l[i] = l[i] + 1;\n    }\n    return l;\n}\n"}
{"task_id": "CPP/43", "generation": "#include<stdio.h>\n#include<vector>\n#include<unordered_set>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n    unordered_set<int> seen;\n    for (int num : l) {\n        if (seen.find(-num) != seen.end()) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}\n"}
{"task_id": "CPP/44", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x, int base) {\n    string result = \"\";\n    while (x > 0) {\n        int remainder = x % base;\n        result = to_string(remainder) + result;\n        x = x / base;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/45", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a, float h) {\n  float area = (a * h) / 2;\n  return area;\n}\n"}
{"task_id": "CPP/46", "generation": "#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n    if (n <= 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n\n    int a = 0, b = 0, c = 2, d = 0, temp;\n    for (int i = 4; i <= n; i++) {\n        temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = temp;\n    }\n    return d;\n}\n"}
{"task_id": "CPP/47", "generation": "float median(vector<float> l){\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 != 0){\n        return l[n/2];\n    } else {\n        float mid1 = l[n/2 - 1];\n        float mid2 = l[n/2];\n        return (mid1 + mid2) / 2.0;\n    }\n}\n"}
{"task_id": "CPP/48", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nbool is_palindrome(string text){\n    int left = 0;\n    int right = text.length() - 1;\n\n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n\n    return true;\n}\n"}
{"task_id": "CPP/49", "generation": "#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n    int result = 1;\n    int base = 2;\n    while (n > 0) {\n        if (n % 2 == 1) {\n            result = (result * base) % p;\n        }\n        base = (base * base) % p;\n        n = n / 2;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/50", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n    // takes as input string encoded with encode_shift function. Returns decoded string.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5-(int)'a')%26+(int)'a';   \n        if(w<(int)'a') w+=(int)'a'+26;\n        out=out+(char)w;\n    }\n    return out;\n}\n"}
{"task_id": "CPP/51", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nstring remove_vowels(string text){\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    for (char c : text) {\n        if (vowels.find(c) == string::npos) {\n            result += c;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/52", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int> l, int t) {\n  for (int number : l) {\n    if (number >= t) {\n      return false;\n    }\n  }\n  return true;\n}\n"}
{"task_id": "CPP/53", "generation": "int add(int x, int y) {\n  return x + y;\n}\n"}
{"task_id": "CPP/54", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\n#include<unordered_set>\nusing namespace std;\n\nbool same_chars(string s0, string s1) {\n  unordered_set<char> set0(s0.begin(), s0.end());\n  unordered_set<char> set1(s1.begin(), s1.end());\n  return set0 == set1;\n}\n"}
{"task_id": "CPP/55", "generation": "#include<stdio.h>\nusing namespace std;\nint fib(int n){\n    if (n <= 1) {\n        return n;\n    }\n    int a = 0;\n    int b = 1;\n    for (int i = 2; i <= n; i++) {\n        int temp = a + b;\n        a = b;\n        b = temp;\n    }\n    return b;\n}\n"}
{"task_id": "CPP/56", "generation": "#include<stdio.h>\n#include<string>\n#include<stack>\nusing namespace std;\n\nbool correct_bracketing(string brackets){\n    stack<char> s;\n    for (char c : brackets){\n        if (c == '<'){\n            s.push(c);\n        } else if (c == '>'){\n            if (s.empty()){\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();\n}\n"}
{"task_id": "CPP/57", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n  bool increasing = true;\n  bool decreasing = true;\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] < l[i - 1]) {\n      increasing = false;\n    }\n    if (l[i] > l[i - 1]) {\n      decreasing = false;\n    }\n  }\n  return increasing || decreasing;\n}\n"}
{"task_id": "CPP/58", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n    // Find the intersection of two vectors\n    vector<int> intersection;\n    set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), back_inserter(intersection));\n    \n    // Remove duplicates by converting to a set and back to a vector\n    set<int> unique(intersection.begin(), intersection.end());\n    intersection.assign(unique.begin(), unique.end());\n    \n    // Sort the vector\n    sort(intersection.begin(), intersection.end());\n    \n    return intersection;\n}\n"}
{"task_id": "CPP/59", "generation": "#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n = n / i;\n        } else {\n            i = i + 1;\n        }\n    }\n    return n;\n}\n"}
{"task_id": "CPP/60", "generation": "#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n    return n <= 0 ? 0 : n * (n + 1) / 2;\n}\n"}
{"task_id": "CPP/61", "generation": "#include<stdio.h>\n#include<string>\n#include<stack>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    stack<char> s;\n    for (char c : brackets) {\n        if (c == '(') {\n            s.push(c);\n        } else if (c == ')') {\n            if (s.empty()) {\n                return false;\n            } else {\n                s.pop();\n            }\n        }\n    }\n    return s.empty();\n}\n"}
{"task_id": "CPP/62", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n    vector<float> out = {};\n    for (int i = 1; i < xs.size(); i++) {\n        out.push_back(xs[i] * i);\n    }\n    return out;\n}\n"}
{"task_id": "CPP/63", "generation": "#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n    if (n <= 1) return 0;\n    if (n == 2) return 1;\n    int a = 0, b = 0, c = 1;\n    for (int i = 3; i <= n; i++) {\n        int temp = a + b + c;\n        a = b;\n        b = c;\n        c = temp;\n    }\n    return c;\n}\n"}
{"task_id": "CPP/64", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nint vowels_count(string s){\n    // Convert the string to lowercase to handle both lowercase and uppercase vowels\n    transform(s.begin(), s.end(), s.begin(), ::tolower);\n    \n    // Initialize a counter for vowels\n    int count = 0;\n    \n    // Check if 'y' is at the end of the string\n    bool y_at_end = (s[s.size() - 1] == 'y');\n    \n    // Iterate over each character in the string\n    for (char c : s) {\n        // Check if the character is a vowel (excluding 'y' for now)\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    \n    // If 'y' is at the end of the string, increment the vowel count\n    if (y_at_end) {\n        count++;\n    }\n    \n    // Return the total vowel count\n    return count;\n}\n"}
{"task_id": "CPP/65", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n    string str = to_string(x);\n    int length = str.length();\n    int effective_shift = shift % length;\n    if (effective_shift == 0) {\n        return str;\n    } else {\n        string last_chars = str.substr(length - effective_shift);\n        string remaining_chars = str.substr(0, length - effective_shift);\n        return last_chars + remaining_chars;\n    }\n}\n"}
{"task_id": "CPP/66", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n    int sum = 0;\n    for (char c : s) {\n        if (isupper(c)) {\n            sum += (int)c;\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/67", "generation": "#include<stdio.h>\n#include<string>\n#include<sstream>\nusing namespace std;\n\nint fruit_distribution(string s, int n) {\n    // Split the string into parts\n    stringstream ss(s);\n    string part;\n    int apples, oranges;\n    ss >> apples;\n    ss >> part; // \"apples\"\n    ss >> part; // \"and\"\n    ss >> oranges;\n    ss >> part; // \"oranges\"\n\n    // Calculate the number of mangoes\n    int mangoes = n - apples - oranges;\n    return mangoes;\n}\n"}
{"task_id": "CPP/68", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<int> pluck(vector<int> arr){\n    int smallest_even = INT_MAX; // Initialize with max integer value\n    int smallest_even_index = -1; // Initialize with -1, indicating no even value found\n\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < smallest_even) {\n            smallest_even = arr[i];\n            smallest_even_index = i;\n        }\n    }\n\n    if (smallest_even_index != -1) {\n        return {smallest_even, smallest_even_index};\n    } else {\n        return {};\n    }\n}\n"}
{"task_id": "CPP/69", "generation": "#include<stdio.h>\n#include<vector>\n#include<unordered_map>\nusing namespace std;\n\nint search(vector<int> lst){\n    unordered_map<int, int> freq;\n    for (int num : lst) {\n        if (freq.find(num) != freq.end()) {\n            freq[num]++;\n        } else {\n            freq[num] = 1;\n        }\n    }\n\n    int max_freq = -1;\n    for (auto& pair : freq) {\n        if (pair.second >= pair.first && pair.first > max_freq) {\n            max_freq = pair.first;\n        }\n    }\n\n    return max_freq;\n}\n"}
{"task_id": "CPP/70", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> result;\n    bool is_min = true;\n    while (!lst.empty()) {\n        if (is_min) {\n            auto min_it = min_element(lst.begin(), lst.end());\n            result.push_back(*min_it);\n            lst.erase(min_it);\n        } else {\n            auto max_it = max_element(lst.begin(), lst.end());\n            result.push_back(*max_it);\n            lst.erase(max_it);\n        }\n        is_min = !is_min;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/71", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a, float b, float c) {\n  if (a + b <= c || a + c <= b || b + c <= a) {\n    return -1;\n  }\n  float s = (a + b + c) / 2;\n  float area = sqrt(s * (s - a) * (s - b) * (s - c));\n  return round(area * 100) / 100; // round to 2 decimal points\n}\n"}
{"task_id": "CPP/72", "generation": "bool will_it_fly(vector<int> q, int w) {\n  vector<int> reversed_q = q;\n  reverse(reversed_q.begin(), reversed_q.end());\n  int sum = 0;\n  for (int element : q) {\n    sum += element;\n  }\n  return q == reversed_q && sum <= w;\n}\n"}
{"task_id": "CPP/73", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n    int n = arr.size();\n    int changes = 0;\n    for (int i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n - i - 1]) {\n            changes++;\n        }\n    }\n    return changes;\n}\n"}
{"task_id": "CPP/74", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\n// Function to calculate the total number of characters in a vector of strings\nint totalChars(const vector<string>& lst) {\n    int total = 0;\n    for (const string& str : lst) {\n        total += str.length();\n    }\n    return total;\n}\n\nvector<string> total_match(vector<string> lst1, vector<string> lst2) {\n    int total1 = totalChars(lst1);\n    int total2 = totalChars(lst2);\n    \n    if (total1 <= total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n"}
{"task_id": "CPP/75", "generation": "#include <iostream>\n#include <vector>\n#include <cmath>\n\n// Function to check if a number is prime\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\n// Function to generate all prime numbers less than 100\nstd::vector<int> generate_primes() {\n    std::vector<int> primes;\n    for (int i = 2; i < 100; i++) {\n        if (is_prime(i)) primes.push_back(i);\n    }\n    return primes;\n}\n\n// Function to check if a number is the product of three prime numbers\nbool is_multiply_prime(int a) {\n    std::vector<int> primes = generate_primes();\n    for (int i = 0; i < primes.size(); i++) {\n        for (int j = i; j < primes.size(); j++) {\n            for (int k = j; k < primes.size(); k++) {\n                if (primes[i] * primes[j] * primes[k] == a) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n"}
{"task_id": "CPP/76", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x, int n) {\n    if (x <= 0 || n <= 0) {\n        return false;\n    }\n    double logResult = log(x) / log(n);\n    return logResult == (int)logResult;\n}\n"}
{"task_id": "CPP/77", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscube(int a){\n    double cube_root = round(cbrt(abs(a)));\n    return pow(cube_root, 3) == abs(a);\n}\n"}
{"task_id": "CPP/78", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nint hex_key(string num){\n    int count = 0;\n    for (char c : num) {\n        switch (c) {\n            case '2':\n            case '3':\n            case '5':\n            case '7':\n            case 'B':\n            case 'D':\n                count++;\n                break;\n            default:\n                break;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/79", "generation": "#include<stdio.h>\n#include<string>\n#include<bitset>\nusing namespace std;\n\nstring decimal_to_binary(int decimal){\n    string binary = bitset<32>(decimal).to_string();\n    size_t pos = binary.find('1');\n    if (pos != string::npos)\n        binary = binary.substr(pos);\n    return \"db\" + binary + \"db\";\n}\n"}
{"task_id": "CPP/80", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n  if (s.length() < 3) {\n    return false;\n  }\n  for (int i = 0; i < s.length() - 2; i++) {\n    if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]) {\n      return false;\n    }\n  }\n  return true;\n}\n"}
{"task_id": "CPP/81", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> letter_grades;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grade > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grade > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n}\n"}
{"task_id": "CPP/82", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\n// Function to check if a number is prime\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\n// Function to check if the length of a string is prime\nbool prime_length(string str) {\n    int length = str.length();\n    return isPrime(length);\n}\n"}
{"task_id": "CPP/83", "generation": "#include<stdio.h>\nusing namespace std;\nint starts_one_ends(int n){\n    // Count the number of n-digit integers that start with 1\n    int start_with_one = 9 * (pow(10, n-1) - 1) + 1;\n    \n    // Count the number of n-digit integers that end with 1\n    int end_with_one = 9 * (pow(10, n-1) - 1) + 1;\n    \n    // Subtract the number of integers that both start and end with 1\n    // to avoid double-counting\n    int both_start_and_end_with_one = 1;\n    \n    // Return the total count\n    return start_with_one + end_with_one - both_start_and_end_with_one;\n}\n"}
{"task_id": "CPP/84", "generation": "#include<stdio.h>\n#include<string>\n#include<bitset>\n#include<string>\nusing namespace std;\n\nstring solve(int N){\n    int sum = 0;\n    while (N > 0){\n        sum = sum + N % 10;\n        N = N / 10;\n    }\n    string binary = bitset<32>(sum).to_string();\n    size_t pos = binary.find('1');\n    if(pos != string::npos)\n        return binary.substr(pos);\n    else\n        return \"0\";\n}\n"}
{"task_id": "CPP/85", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 != 0 && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nstring anti_shuffle(string s) {\n    string result = \"\";\n    string word = \"\";\n    \n    for (char c : s) {\n        if (c == ' ') {\n            // Sort the characters in the word\n            sort(word.begin(), word.end());\n            result += word + \" \";\n            word = \"\";\n        } else {\n            word += c;\n        }\n    }\n    \n    // Sort the last word\n    sort(word.begin(), word.end());\n    result += word;\n    \n    return result;\n}\n"}
{"task_id": "CPP/87", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> coordinates;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                coordinates.push_back({i, j});\n            }\n        }\n    }\n    sort(coordinates.begin(), coordinates.end(), [](const vector<int>& a, const vector<int>& b) {\n        if (a[0] == b[0]) {\n            return a[1] > b[1];\n        }\n        return a[0] < b[0];\n    });\n    return coordinates;\n}\n"}
{"task_id": "CPP/88", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n  if (array.empty()) {\n    return array;\n  }\n  int sum = array[0] + array[array.size() - 1];\n  if (sum % 2 != 0) {\n    sort(array.begin(), array.end());\n  } else {\n    sort(array.begin(), array.end(), greater<int>());\n  }\n  return array;\n}\n"}
{"task_id": "CPP/89", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring encrypt(string s) {\n    string result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        char c = s[i];\n        if (c >= 'a' && c <= 'z') {\n            c = 'a' + (c - 'a' + 4) % 26;\n        } else if (c >= 'A' && c <= 'Z') {\n            c = 'A' + (c - 'A' + 4) % 26;\n        }\n        result += c;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/90", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nint next_smallest(vector<int> lst){\n    // Remove duplicates from lst by converting it to a set\n    set<int> unique_lst(lst.begin(), lst.end());\n    \n    // If the set has less than 2 elements, return None\n    if (unique_lst.size() < 2) {\n        return -1; // equivalent to None in Python\n    }\n    \n    // Otherwise, return the 2nd smallest element in the set\n    auto it = unique_lst.begin();\n    it++; // increment to the 2nd smallest element\n    return *it;\n}\n"}
{"task_id": "CPP/91", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n    int boredomCount = 0;\n    string sentence;\n    for (char c : S) {\n        if (c == '.' || c == '?' || c == '!') {\n            if (!sentence.empty() && sentence[0] == 'I') {\n                boredomCount++;\n            }\n            sentence.clear();\n        } else {\n            sentence += c;\n        }\n    }\n    // Check the last sentence\n    if (!sentence.empty() && sentence[0] == 'I') {\n        boredomCount++;\n    }\n    return boredomCount;\n}\n"}
{"task_id": "CPP/92", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a, float b, float c) {\n  // Check if all numbers are integers\n  if (a != (int)a || b != (int)b || c != (int)c) {\n    return false;\n  }\n  // Check if one number is equal to the sum of the other two\n  if (a + b == c || a + c == b || b + c == a) {\n    return true;\n  }\n  return false;\n}\n"}
{"task_id": "CPP/93", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nstring encode(string message) {\n  string vowels = \"aeiouAEIOU\";\n  for (int i = 0; i < message.length(); i++) {\n    if (vowels.find(message[i]) != string::npos) {\n      // Replace vowel with letter 2 places ahead of it in alphabet\n      if (message[i] >= 'a' && message[i] <= 'z') {\n        message[i] = 'a' + (message[i] - 'a' + 2) % 26;\n      } else {\n        message[i] = 'A' + (message[i] - 'A' + 2) % 26;\n      }\n    }\n    // Swap case of character\n    if (message[i] >= 'a' && message[i] <= 'z') {\n      message[i] -= 32;\n    } else {\n      message[i] += 32;\n    }\n  }\n  return message;\n}\n"}
{"task_id": "CPP/94", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<cmath>\nusing namespace std;\n\nbool isPrime(int n) {\n  if (n <= 1) return false;\n  for (int i = 2; i <= sqrt(n); i++) {\n    if (n % i == 0) return false;\n  }\n  return true;\n}\n\nint sumOfDigits(int n) {\n  int sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum;\n}\n\nint skjkasdkd(vector<int> lst) {\n  int maxPrime = 0;\n  for (int num : lst) {\n    if (isPrime(num) && num > maxPrime) {\n      maxPrime = num;\n    }\n  }\n  return sumOfDigits(maxPrime);\n}\n"}
{"task_id": "CPP/95", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\n\nbool check_dict_case(map<string,string> dict){\n    // Check if the dictionary is empty\n    if (dict.empty()) {\n        return false;\n    }\n\n    // Initialize flags to track if all keys are in lower case or upper case\n    bool allLower = true;\n    bool allUpper = true;\n\n    // Iterate over each key in the dictionary\n    for (const auto& pair : dict) {\n        const string& key = pair.first;\n\n        // Check if the key is not a string (this will always be true in C++ since the map is defined with string keys)\n        // However, we can check if the key contains any non-alphabetic characters\n        for (char c : key) {\n            if (!isalpha(c)) {\n                return false;\n            }\n        }\n\n        // Check if the key is not in lower case\n        if (!allLower && !allUpper) {\n            break;\n        }\n        if (isupper(key[0])) {\n            allLower = false;\n        }\n        // Check if the key is not in upper case\n        if (islower(key[0])) {\n            allUpper = false;\n        }\n    }\n\n    // Return true if all keys are in lower case or upper case, false otherwise\n    return allLower || allUpper;\n}\n"}
{"task_id": "CPP/96", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\n// Function to check if a number is prime\nbool isPrime(int num) {\n    if (num <= 1) return false;\n    for (int i = 2; i * i <= num; i++) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\nvector<int> count_up_to(int n) {\n    vector<int> primes;\n    for (int i = 2; i < n; i++) {\n        if (isPrime(i)) {\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n"}
{"task_id": "CPP/97", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n    // Get the unit digits of a and b\n    int unitDigitA = abs(a) % 10;\n    int unitDigitB = abs(b) % 10;\n    \n    // Calculate the product of the unit digits\n    int product = unitDigitA * unitDigitB;\n    \n    return product;\n}\n"}
{"task_id": "CPP/98", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nint count_upper(string s){\n    int count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (i % 2 == 0) { // Check if index is even\n            char c = s[i];\n            if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/99", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n\nint closest_integer(string value) {\n    double num = stod(value);\n    double decimal = num - floor(num);\n    if (decimal < 0.5) {\n        return floor(num);\n    } else if (decimal > 0.5) {\n        return ceil(num);\n    } else {\n        if (num > 0) {\n            return ceil(num);\n        } else {\n            return floor(num);\n        }\n    }\n}\n"}
{"task_id": "CPP/100", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n    vector<int> stones;\n    int current = n;\n    for (int i = 1; i <= n; i++) {\n        stones.push_back(current);\n        if (n % 2 != 0) {\n            current += 2;\n        } else {\n            current += 1;\n        }\n    }\n    return stones;\n}\n"}
{"task_id": "CPP/101", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<sstream>\nusing namespace std;\n\nvector<string> words_string(string s) {\n    vector<string> words;\n    istringstream iss(s);\n    string word;\n    while (iss >> word) {\n        // Remove any trailing commas from the word\n        if (!word.empty() && word.back() == ',') {\n            word.pop_back();\n        }\n        words.push_back(word);\n    }\n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "int choose_num(int x, int y) {\n  if (x > y) {\n    return -1;\n  }\n  for (int i = y; i >= x; i--) {\n    if (i % 2 == 0) {\n      return i;\n    }\n  }\n  return -1;\n}\n"}
{"task_id": "CPP/103", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<iostream>\n#include<bitset>\nusing namespace std;\n\nstring rounded_avg(int n, int m) {\n  if (n > m) {\n    return \"-1\";\n  }\n  double average = (n + m) / 2.0;\n  int rounded_average = floor(average);\n  string binary = bitset<32>(rounded_average).to_string();\n  // Remove leading zeros\n  size_t pos = binary.find('1');\n  if (pos != string::npos) {\n    binary = binary.substr(pos);\n  }\n  return binary;\n}\n"}
{"task_id": "CPP/104", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n    vector<int> result;\n    for (int num : x) {\n        bool has_even_digit = false;\n        string str_num = to_string(num);\n        for (char digit : str_num) {\n            if ((digit - '0') % 2 == 0) {\n                has_even_digit = true;\n                break;\n            }\n        }\n        if (!has_even_digit) {\n            result.push_back(num);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n"}
{"task_id": "CPP/105", "generation": "#include <vector>\n#include <string>\n#include <map>\n#include <algorithm>\n\nstd::vector<std::string> by_length(std::vector<int> arr) {\n    std::map<int, std::string> digitToName = {\n        {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"},\n        {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}\n    };\n\n    std::vector<int> filteredArr;\n    for (int num : arr) {\n        if (num >= 1 && num <= 9) {\n            filteredArr.push_back(num);\n        }\n    }\n\n    std::sort(filteredArr.begin(), filteredArr.end());\n    std::reverse(filteredArr.begin(), filteredArr.end());\n\n    std::vector<std::string> result;\n    for (int num : filteredArr) {\n        result.push_back(digitToName[num]);\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/106", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<int> f(int n) {\n    vector<int> result(n);\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 == 0) { // i is even\n            int factorial = 1;\n            for (int j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            result[i-1] = factorial;\n        } else { // i is odd\n            int sum = 0;\n            for (int j = 1; j <= i; j++) {\n                sum += j;\n            }\n            result[i-1] = sum;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/107", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<int> even_odd_palindrome(int n) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 1; i <= n; i++) {\n        string str = to_string(i);\n        string rev_str = str;\n        reverse(rev_str.begin(), rev_str.end());\n        if (str == rev_str) {\n            if (i % 2 == 0) {\n                even_count++;\n            } else {\n                odd_count++;\n            }\n        }\n    }\n    return {even_count, odd_count};\n}\n"}
{"task_id": "CPP/108", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n\nint count_nums(vector<int> n) {\n  int count = 0;\n  for (int num : n) {\n    int sum_of_digits = 0;\n    int temp = abs(num); // take absolute value to handle negative numbers\n    while (temp != 0) {\n      int digit = temp % 10;\n      sum_of_digits += digit;\n      temp /= 10;\n    }\n    if (sum_of_digits > 0) {\n      count += 1;\n    }\n  }\n  return count;\n}\n"}
{"task_id": "CPP/109", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nbool move_one_ball(vector<int> arr){\n    if (arr.empty()) {\n        return true;\n    }\n    vector<int> sorted_arr = arr;\n    sort(sorted_arr.begin(), sorted_arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        bool match = true;\n        for (int j = 0; j < arr.size(); j++) {\n            if (arr[(i + j) % arr.size()] != sorted_arr[j]) {\n                match = false;\n                break;\n            }\n        }\n        if (match) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/110", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nstring exchange(vector<int> lst1, vector<int> lst2) {\n    int count_odd_in_lst1 = 0;\n    int count_even_in_lst2 = 0;\n\n    for (int element : lst1) {\n        if (element % 2 != 0) {\n            count_odd_in_lst1 += 1;\n        }\n    }\n\n    for (int element : lst2) {\n        if (element % 2 == 0) {\n            count_even_in_lst2 += 1;\n        }\n    }\n\n    if (count_even_in_lst2 >= count_odd_in_lst1) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n"}
{"task_id": "CPP/111", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n    map<char,int> letter_count;\n    map<char,int> result;\n    int max_count = 0;\n    \n    // Count the occurrence of each letter\n    for (char c : test) {\n        if (c != ' ') {\n            letter_count[c]++;\n            if (letter_count[c] > max_count) {\n                max_count = letter_count[c];\n            }\n        }\n    }\n    \n    // Find the letters with the maximum count\n    for (auto& pair : letter_count) {\n        if (pair.second == max_count) {\n            result[pair.first] = pair.second;\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/112", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s, string c) {\n    // Remove characters from s that are present in c\n    string result = \"\";\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            result += ch;\n        }\n    }\n    \n    // Check if the result string is a palindrome\n    string reversed = result;\n    reverse(reversed.begin(), reversed.end());\n    bool isPalindrome = result == reversed;\n    \n    // Return the result string and the palindrome check\n    return {result, isPalindrome ? \"True\" : \"False\"};\n}\n"}
{"task_id": "CPP/113", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> odd_count(vector<string> lst){\n  vector<string> result;\n  string template_str = \"the number of odd elements %dn the str%ng %d of the %nput.\";\n  for (int i = 0; i < lst.size(); i++) {\n    int odd_count = 0;\n    for (char c : lst[i]) {\n      if ((c - '0') % 2 != 0) {\n        odd_count++;\n      }\n    }\n    char buffer[100];\n    sprintf(buffer, template_str.c_str(), odd_count, odd_count, i + 1);\n    result.push_back(buffer);\n  }\n  return result;\n}\n"}
{"task_id": "CPP/114", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nlong long minSubArraySum(vector<long long> nums) {\n    long long min_sum = LLONG_MAX; // Initialize min_sum to infinity\n    long long current_sum = 0;\n\n    for (long long num : nums) {\n        current_sum += num;\n        if (current_sum < min_sum) {\n            min_sum = current_sum;\n        }\n        if (current_sum > 0) {\n            current_sum = 0;\n        }\n    }\n\n    return min_sum;\n}\n"}
{"task_id": "CPP/115", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nint max_fill(vector<vector<int>> grid, int capacity) {\n    int num_times = 0;\n    for (const auto& well : grid) {\n        int water_units = 0;\n        for (int unit : well) {\n            water_units += unit;\n        }\n        num_times += (water_units + capacity - 1) / capacity;\n    }\n    return num_times;\n}\n"}
{"task_id": "CPP/116", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n    sort(arr.begin(), arr.end(), [](int a, int b) {\n        int countA = __builtin_popcount(abs(a));\n        int countB = __builtin_popcount(abs(b));\n        if (countA == countB) {\n            return abs(a) < abs(b);\n        }\n        return countA < countB;\n    });\n    return arr;\n}\n"}
{"task_id": "CPP/117", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\n// Function to check if a character is a consonant\nbool isConsonant(char c) {\n    c = tolower(c);\n    return c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u';\n}\n\n// Function to count the number of consonants in a word\nint countConsonants(string word) {\n    int count = 0;\n    for (char c : word) {\n        if (isConsonant(c)) {\n            count++;\n        }\n    }\n    return count;\n}\n\nvector<string> select_words(string s, int n) {\n    vector<string> result;\n    string word = \"\";\n    \n    // Iterate over the string\n    for (char c : s) {\n        // If the character is a space, it means we've reached the end of a word\n        if (c == ' ') {\n            // If the word has exactly n consonants, add it to the result\n            if (countConsonants(word) == n) {\n                result.push_back(word);\n            }\n            // Reset the word\n            word = \"\";\n        } else {\n            // Add the character to the current word\n            word += c;\n        }\n    }\n    \n    // Check the last word\n    if (countConsonants(word) == n) {\n        result.push_back(word);\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/118", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nstring get_closest_vowel(string word){\n    string vowels = \"AEIOUaeiou\";\n    string result = \"\";\n    int min_distance = INT_MAX;\n    \n    for (int i = 1; i < word.size() - 1; i++) {\n        if (vowels.find(word[i]) != string::npos) {\n            if (isalpha(word[i-1]) && isalpha(word[i+1])) {\n                if (word.size() - i - 1 < min_distance) {\n                    min_distance = word.size() - i - 1;\n                    result = word[i];\n                }\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/119", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n    int count1 = 0, count2 = 0;\n    for (char c : lst[0]) {\n        if (c == '(') count1++;\n        else count1--;\n    }\n    for (char c : lst[1]) {\n        if (c == '(') count2++;\n        else count2--;\n    }\n    return (abs(count1 + count2) <= 1) ? \"Yes\" : \"No\";\n}\n"}
{"task_id": "CPP/120", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n    // Sort the array in descending order\n    sort(arr.begin(), arr.end(), greater<int>());\n    \n    // Select the first k elements\n    vector<int> result(arr.begin(), arr.begin() + k);\n    \n    // Sort the result in ascending order\n    sort(result.begin(), result.end());\n    \n    return result;\n}\n"}
{"task_id": "CPP/121", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solution(vector<int> lst){\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/123", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> get_odd_collatz(int n) {\n  vector<int> odd_numbers;\n  int current_term = n;\n  while (current_term != 1) {\n    if (current_term % 2 != 0) {\n      odd_numbers.push_back(current_term);\n    }\n    if (current_term % 2 == 0) {\n      current_term = current_term / 2;\n    } else {\n      current_term = 3 * current_term + 1;\n    }\n  }\n  odd_numbers.push_back(1);\n  sort(odd_numbers.begin(), odd_numbers.end());\n  return odd_numbers;\n}\n"}
{"task_id": "CPP/124", "generation": "#include<stdio.h>\n#include<string>\n#include<sstream>\nusing namespace std;\n\nbool valid_date(string date) {\n    // Check if the date string is not empty\n    if (date.empty()) {\n        return false;\n    }\n\n    // Check if the date is in the correct format\n    if (date.length() != 10 || date[2] != '-' || date[5] != '-') {\n        return false;\n    }\n\n    int month, day, year;\n    stringstream ss(date);\n    ss >> month;\n    ss.ignore(1, '-');\n    ss >> day;\n    ss.ignore(1, '-');\n    ss >> year;\n\n    // Check if the month is valid\n    if (month < 1 || month > 12) {\n        return false;\n    }\n\n    // Check if the day is valid\n    if (month == 2) {\n        if (day < 1 || day > 29) {\n            return false;\n        }\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) {\n            return false;\n        }\n    } else {\n        if (day < 1 || day > 31) {\n            return false;\n        }\n    }\n\n    return true;\n}\n"}
{"task_id": "CPP/125", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nvector<string> split_words(string txt) {\n  // Check if the string contains whitespace\n  if (txt.find(' ') != string::npos) {\n    // Split on whitespace\n    vector<string> words;\n    size_t pos = 0;\n    while ((pos = txt.find(' ')) != string::npos) {\n      words.push_back(txt.substr(0, pos));\n      txt.erase(0, pos + 1);\n    }\n    words.push_back(txt);\n    return words;\n  }\n  // Check if the string contains commas\n  else if (txt.find(',') != string::npos) {\n    // Split on commas\n    vector<string> words;\n    size_t pos = 0;\n    while ((pos = txt.find(',')) != string::npos) {\n      words.push_back(txt.substr(0, pos));\n      txt.erase(0, pos + 1);\n    }\n    words.push_back(txt);\n    return words;\n  }\n  // If neither whitespace nor commas exist\n  else {\n    int count = 0;\n    for (char c : txt) {\n      if (islower(c) && (c - 'a') % 2 != 0) {\n        count++;\n      }\n    }\n    return {to_string(count)};\n  }\n}\n"}
{"task_id": "CPP/126", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n  int prev_num = -1;\n  std::map<int, int> num_count;\n  for (int num : lst) {\n    if (prev_num != -1 && num < prev_num) {\n      return false;\n    }\n    if (num_count.find(num) != num_count.end()) {\n      num_count[num]++;\n      if (num_count[num] > 2) {\n        return false;\n      }\n    } else {\n      num_count[num] = 1;\n    }\n    prev_num = num;\n  }\n  return true;\n}\n"}
{"task_id": "CPP/127", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\n// Function to check if a number is prime\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nstring intersection(vector<int> interval1, vector<int> interval2) {\n    // Find the intersection of the two intervals\n    int start = max(interval1[0], interval2[0]);\n    int end = min(interval1[1], interval2[1]);\n\n    // Check if the intervals intersect\n    if (start > end) return \"NO\";\n\n    // Calculate the length of the intersection\n    int length = end - start + 1;\n\n    // Check if the length is a prime number\n    if (isPrime(length)) return \"YES\";\n    else return \"NO\";\n}\n"}
{"task_id": "CPP/128", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n    int sum_of_magnitudes = 0;\n    int product_of_signs = 1;\n    for (int num : arr) {\n        sum_of_magnitudes += abs(num);\n        if (num > 0) {\n            product_of_signs *= 1;\n        } else if (num < 0) {\n            product_of_signs *= -1;\n        } else {\n            product_of_signs *= 0;\n        }\n    }\n    if (arr.empty()) {\n        return -32768;\n    } else {\n        return sum_of_magnitudes * product_of_signs;\n    }\n}\n"}
{"task_id": "CPP/129", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> minPath(vector<vector<int>> grid, int k) {\n    int n = grid.size();\n    vector<int> minPath;\n    vector<int> directions = {0, 1, 0, -1, 0};\n    \n    // Find the minimum value in the grid\n    int minValue = INT_MAX;\n    int startX, startY;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (grid[i][j] < minValue) {\n                minValue = grid[i][j];\n                startX = i;\n                startY = j;\n            }\n        }\n    }\n    \n    // Perform BFS to find the minimum path\n    vector<vector<bool>> visited(n, vector<bool>(n, false));\n    queue<vector<int>> q;\n    q.push({startX, startY, minValue, 1});\n    visited[startX][startY] = true;\n    \n    while (!q.empty()) {\n        int x = q.front()[0];\n        int y = q.front()[1];\n        int val = q.front()[2];\n        int len = q.front()[3];\n        q.pop();\n        \n        if (len == k) {\n            minPath.push_back(val);\n            break;\n        }\n        \n        for (int i = 0; i < 4; i++) {\n            int nx = x + directions[i];\n            int ny = y + directions[i + 1];\n            \n            if (nx >= 0 && nx < n && ny >= 0 && ny < n && !visited[nx][ny]) {\n                q.push({nx, ny, grid[nx][ny], len + 1});\n                visited[nx][ny] = true;\n            }\n        }\n    }\n    \n    // If k is greater than 1, we need to revisit the minimum value to get the lexicographically smallest path\n    if (k > 1) {\n        minPath.push_back(minValue);\n        k--;\n        while (k > 1) {\n            minPath.push_back(minValue);\n            k--;\n        }\n    }\n    \n    return minPath;\n}\n"}
{"task_id": "CPP/130", "generation": "#include <vector>\nusing namespace std;\n\nvector<int> tri(int n) {\n    vector<int> tribonacci(n + 1);\n    tribonacci[0] = 1;\n    if (n >= 1) tribonacci[1] = 3;\n    if (n >= 2) tribonacci[2] = 2;\n    for (int i = 3; i <= n; i++) {\n        if (i % 2 == 0) {\n            tribonacci[i] = 1 + i / 2;\n        } else {\n            tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3];\n        }\n    }\n    return tribonacci;\n}\n"}
{"task_id": "CPP/131", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n  int product = 1;\n  string str = to_string(n);\n  for (char c : str) {\n    int digit = c - '0';\n    if (digit % 2 != 0) {\n      product *= digit;\n    }\n  }\n  return product == 1 ? 0 : product;\n}\n"}
{"task_id": "CPP/132", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_nested(string str){\n    int count = 0;\n    for (char c : str) {\n        if (c == '[') {\n            count++;\n        } else {\n            count--;\n            if (count > 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/133", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n\nint sum_squares(vector<float> lst){\n    int sum = 0;\n    for (float element : lst) {\n        int roundedElement = ceil(element);\n        int squaredElement = roundedElement * roundedElement;\n        sum += squaredElement;\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/134", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n  if (txt.empty()) {\n    return false;\n  }\n  char last_char = txt.back();\n  if (isalpha(last_char)) {\n    if (txt.find_last_of(' ') != txt.size() - 1) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"task_id": "CPP/135", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n    int n = arr.size();\n    int max_index = -1;\n    for (int i = 1; i < n; i++) {\n        if (arr[i] < arr[i-1]) {\n            max_index = i;\n        }\n    }\n    return max_index;\n}\n"}
{"task_id": "CPP/136", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n  int largest_negative = 0;\n  int smallest_positive = 0;\n  for (int num : lst) {\n    if (num < 0 && (largest_negative == 0 || num > largest_negative)) {\n      largest_negative = num;\n    }\n    if (num > 0 && (smallest_positive == 0 || num < smallest_positive)) {\n      smallest_positive = num;\n    }\n  }\n  return {largest_negative, smallest_positive};\n}\n"}
{"task_id": "CPP/137", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n\nboost::any compare_one(boost::any a, boost::any b) {\n  // Check if both variables are of the same data type\n  if (a.type() == b.type()) {\n    if (boost::any_cast<float>(a) > boost::any_cast<float>(b)) {\n      return a;\n    } else if (boost::any_cast<float>(b) > boost::any_cast<float>(a)) {\n      return b;\n    } else {\n      return boost::any(\"None\");\n    }\n  } else {\n    // Convert variables to float for comparison\n    float fa = boost::any_cast<float>(a);\n    float fb = boost::any_cast<float>(b);\n\n    if (fa > fb) {\n      // Return a in its original data type\n      if (a.type() == typeid(int)) {\n        return boost::any(int(fa));\n      } else if (a.type() == typeid(float)) {\n        return boost::any(fa);\n      } else if (a.type() == typeid(string)) {\n        return boost::any(to_string(fa));\n      }\n    } else if (fb > fa) {\n      // Return b in its original data type\n      if (b.type() == typeid(int)) {\n        return boost::any(int(fb));\n      } else if (b.type() == typeid(float)) {\n        return boost::any(fb);\n      } else if (b.type() == typeid(string)) {\n        return boost::any(to_string(fb));\n      }\n    } else {\n      return boost::any(\"None\");\n    }\n  }\n}\n"}
{"task_id": "CPP/138", "generation": "#include <iostream>\nusing namespace std;\n\nbool can_be_sum_of_two_even(int n) {\n  for (int i = 2; i <= n - 2; i += 2) {\n    if (n - i >= 2 && (n - i) % 2 == 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\nbool can_be_sum_of_three_even(int n) {\n  if (n < 6) {\n    return false;\n  }\n  for (int i = 2; i <= n - 4; i += 2) {\n    if (can_be_sum_of_two_even(n - i)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nbool is_equal_to_sum_even(int n) {\n  if (n < 8) {\n    return false;\n  }\n  for (int i = 2; i <= n - 6; i += 2) {\n    if (can_be_sum_of_three_even(n - i)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n"}
{"task_id": "CPP/139", "generation": "#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n    long long result = 1;\n    for (int i = n; i > 0; i--) {\n        long long factorial = 1;\n        for (int j = 1; j <= i; j++) {\n            factorial *= j;\n        }\n        result *= factorial;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/140", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n    string result = \"\";\n    int consecutive_spaces = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            consecutive_spaces++;\n            if (consecutive_spaces == 1) {\n                result += '_';\n            } else if (consecutive_spaces > 2) {\n                result = result.substr(0, result.length() - 1) + '-';\n            }\n        } else {\n            consecutive_spaces = 0;\n            result += text[i];\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/141", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n    // Check if the file name contains exactly one dot\n    int dot_count = 0;\n    for (char c : file_name) {\n        if (c == '.') {\n            dot_count++;\n        }\n    }\n    if (dot_count != 1) {\n        return \"No\";\n    }\n\n    // Split the file name into two parts at the dot\n    size_t dot_index = file_name.find('.');\n    string name = file_name.substr(0, dot_index);\n    string extension = file_name.substr(dot_index + 1);\n\n    // Check if the name starts with a letter and contains no more than three digits\n    int digit_count = 0;\n    if (!isalpha(name[0])) {\n        return \"No\";\n    }\n    for (char c : name) {\n        if (isdigit(c)) {\n            digit_count++;\n            if (digit_count > 3) {\n                return \"No\";\n            }\n        }\n    }\n\n    // Check if the extension is valid\n    if (extension != \"txt\" && extension != \"exe\" && extension != \"dll\") {\n        return \"No\";\n    }\n\n    // If all checks pass, return \"Yes\"\n    return \"Yes\";\n}\n"}
{"task_id": "CPP/142", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nint sum_squares(vector<int> lst) {\n  int sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 3 == 0) {\n      lst[i] = lst[i] * lst[i];\n    } else if (i % 4 == 0 && i % 3 != 0) {\n      lst[i] = lst[i] * lst[i] * lst[i];\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "#include<stdio.h>\n#include<string>\n#include<vector>\nusing namespace std;\n\n// Function to check if a number is prime\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\n// Function to split the sentence into words\nvector<string> splitSentence(string sentence) {\n    vector<string> words;\n    string word = \"\";\n    for (char c : sentence) {\n        if (c == ' ') {\n            words.push_back(word);\n            word = \"\";\n        } else {\n            word += c;\n        }\n    }\n    words.push_back(word);\n    return words;\n}\n\nstring words_in_sentence(string sentence) {\n    vector<string> words = splitSentence(sentence);\n    string result = \"\";\n    for (string word : words) {\n        if (isPrime(word.length())) {\n            result += word + \" \";\n        }\n    }\n    // Remove the trailing space\n    if (!result.empty()) {\n        result.pop_back();\n    }\n    return result;\n}\n"}
{"task_id": "CPP/144", "generation": "#include<stdio.h>\n#include<string>\n#include<sstream>\nusing namespace std;\n\nbool simplify(string x, string n) {\n    int xNumerator, xDenominator, nNumerator, nDenominator;\n    \n    // Split the fractions into numerators and denominators\n    size_t xSlash = x.find('/');\n    size_t nSlash = n.find('/');\n    \n    stringstream(x.substr(0, xSlash)) >> xNumerator;\n    stringstream(x.substr(xSlash + 1)) >> xDenominator;\n    \n    stringstream(n.substr(0, nSlash)) >> nNumerator;\n    stringstream(n.substr(nSlash + 1)) >> nDenominator;\n    \n    // Calculate the product of the fractions\n    long long productNumerator = (long long)xNumerator * nNumerator;\n    long long productDenominator = (long long)xDenominator * nDenominator;\n    \n    // Check if the product is a whole number\n    return productNumerator % productDenominator == 0;\n}\n"}
{"task_id": "CPP/145", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\n// Function to calculate the sum of digits of a number\nint sumOfDigits(int num) {\n    int sum = 0;\n    while (num != 0) {\n        sum += abs(num % 10);\n        num /= 10;\n    }\n    return sum;\n}\n\nvector<int> order_by_points(vector<int> nums) {\n    // Create a vector of pairs to store the value and its index\n    vector<pair<int, int>> indexedNums;\n    for (int i = 0; i < nums.size(); i++) {\n        indexedNums.push_back({nums[i], i});\n    }\n    \n    // Sort the vector of pairs using a custom comparator function\n    sort(indexedNums.begin(), indexedNums.end(), [](const pair<int, int>& a, const pair<int, int>& b) {\n        int sumA = sumOfDigits(a.first);\n        int sumB = sumOfDigits(b.first);\n        if (sumA == sumB) {\n            return a.second < b.second;\n        }\n        return sumA < sumB;\n    });\n    \n    // Extract the sorted values\n    vector<int> sortedNums;\n    for (const auto& pair : indexedNums) {\n        sortedNums.push_back(pair.first);\n    }\n    \n    return sortedNums;\n}\n"}
{"task_id": "CPP/146", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nint specialFilter(vector<int> nums){\n    int count = 0;\n    for (int num : nums) {\n        if (num > 10) {\n            string strNum = to_string(abs(num)); // Use abs to handle negative numbers\n            if ((strNum[0] - '0') % 2 != 0 && (strNum[strNum.size() - 1] - '0') % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/147", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_max_triples(int n){\n    int count = 0;\n    vector<int> a(n);\n    int remainder_count[3] = {0};\n    for (int i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n        int remainder = a[i] % 3;\n        remainder_count[remainder]++;\n    }\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            for (int k = 0; k < 3; k++) {\n                if ((i + j + k) % 3 == 0) {\n                    count += remainder_count[i] * remainder_count[j] * remainder_count[k];\n                }\n            }\n        }\n    }\n    // Since we are counting each triple three times (i, j, k), (j, k, i), (k, i, j), we need to divide the count by 6\n    count /= 6;\n    return count;\n}\n"}
{"task_id": "CPP/148", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\n// Define the order of the planets in our solar system\nvector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n\nvector<string> bf(string planet1, string planet2) {\n    // Check if both planet names are correct\n    if (find(planets.begin(), planets.end(), planet1) == planets.end() || \n        find(planets.begin(), planets.end(), planet2) == planets.end()) {\n        return {};\n    }\n\n    // Find the indices of the two planets\n    int index1 = find(planets.begin(), planets.end(), planet1) - planets.begin();\n    int index2 = find(planets.begin(), planets.end(), planet2) - planets.begin();\n\n    // Swap indices if planet1 is farther from the Sun than planet2\n    if (index1 > index2) {\n        swap(index1, index2);\n    }\n\n    // Return the planets between the two indices, excluding the two planets themselves\n    return vector<string>(planets.begin() + index1 + 1, planets.begin() + index2);\n}\n"}
{"task_id": "CPP/149", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nvector<string> sorted_list_sum(vector<string> lst){\n    // Remove strings with odd lengths\n    lst.erase(remove_if(lst.begin(), lst.end(), [](const string& s){ return s.length() % 2 != 0; }), lst.end());\n    \n    // Sort the list by length and then alphabetically\n    sort(lst.begin(), lst.end(), [](const string& a, const string& b){\n        if (a.length() == b.length()) {\n            return a < b;\n        }\n        return a.length() < b.length();\n    });\n    \n    return lst;\n}\n"}
{"task_id": "CPP/150", "generation": "#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n  if (n < 2) return y;\n  for (int i = 2; i * i <= n; i++) {\n    if (n % i == 0) return y;\n  }\n  return x;\n}\n"}
{"task_id": "CPP/151", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nlong long double_the_difference(vector<float> lst){\n    long long sum = 0;\n    for (float num : lst) {\n        if (num > 0 && fmod(num, 1) == 0) {\n            sum += (long long)num * (long long)num;\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/152", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> result;\n    for (int i = 0; i < game.size(); i++) {\n        int diff = abs(game[i] - guess[i]);\n        result.push_back(diff);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/153", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nstring Strongest_Extension(string class_name, vector<string> extensions) {\n    // Initialize the strongest extension and its strength\n    string strongest_extension = extensions[0];\n    int max_strength = 0;\n    \n    // Iterate over each extension\n    for (const string& extension : extensions) {\n        // Calculate the strength of the current extension\n        int cap = 0, sm = 0;\n        for (char c : extension) {\n            if (isupper(c)) cap++;\n            else if (islower(c)) sm++;\n        }\n        int strength = cap - sm;\n        \n        // Update the strongest extension if the current one is stronger\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    \n    // Return the class name with the strongest extension\n    return class_name + \".\" + strongest_extension;\n}\n"}
{"task_id": "CPP/154", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nbool cycpattern_check(string a, string b) {\n    // Concatenate the first string with itself to handle rotations\n    string temp = a + a;\n    \n    // Check if the second string or any of its rotations is a substring in the concatenated string\n    for (int i = 0; i < b.length(); i++) {\n        string rotated_b = b.substr(i, b.length() - i) + b.substr(0, i);\n        if (temp.find(rotated_b) != string::npos) {\n            return true;\n        }\n    }\n    \n    return false;\n}\n"}
{"task_id": "CPP/155", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n    int even_count = 0;\n    int odd_count = 0;\n    string str = to_string(abs(num)); // convert to positive and then to string\n    for (char digit : str) {\n        int digit_int = digit - '0'; // convert character back to integer\n        if (digit_int % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    return {even_count, odd_count};\n}\n"}
{"task_id": "CPP/156", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nstring int_to_mini_roman(int number) {\n    vector<pair<int, string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"},\n        {100, \"c\"}, {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"},\n        {10, \"x\"}, {9, \"ix\"}, {5, \"v\"}, {4, \"iv\"}, {1, \"i\"}\n    };\n\n    string result = \"\";\n    for (const auto& pair : roman_numerals) {\n        while (number >= pair.first) {\n            number -= pair.first;\n            result += pair.second;\n        }\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/157", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a, float b, float c) {\n    // Check if the square of the longest side is equal to the sum of the squares of the other two sides\n    if (a * a + b * b == c * c || a * a + c * c == b * b || b * b + c * c == a * a) {\n        return true;\n    } else {\n        return false;\n    }\n}\n"}
{"task_id": "CPP/158", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <unordered_set>\n\nusing namespace std;\n\nstring find_max(vector<string> words) {\n  int max_unique_chars = 0;\n  string result = \"\";\n\n  for (const string& word : words) {\n    int unique_chars = count_unique_chars(word);\n    if (unique_chars > max_unique_chars) {\n      max_unique_chars = unique_chars;\n      result = word;\n    } else if (unique_chars == max_unique_chars) {\n      if (word < result) {\n        result = word;\n      }\n    }\n  }\n\n  return result;\n}\n\nint count_unique_chars(const string& word) {\n  unordered_set<char> unique_chars;\n  for (char c : word) {\n    unique_chars.insert(c);\n  }\n  return unique_chars.size();\n}\n"}
{"task_id": "CPP/159", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\n    int totalEaten = number + min(need, remaining);\n    int carrotsLeft = max(0, remaining - need);\n    return {totalEaten, carrotsLeft};\n}\n"}
{"task_id": "CPP/160", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\n\nint do_algebra(vector<string> operato, vector<int> operand){\n    int result = operand[0];\n    for (int i = 0; i < operato.size(); i++) {\n        if (operato[i] == \"+\") {\n            result += operand[i + 1];\n        } else if (operato[i] == \"-\") {\n            result -= operand[i + 1];\n        } else if (operato[i] == \"*\") {\n            result *= operand[i + 1];\n        } else if (operato[i] == \"//\") {\n            result /= operand[i + 1];\n        } else if (operato[i] == \"**\") {\n            result = pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/161", "generation": "#include <algorithm>\n#include <cctype>\n#include <string>\nusing namespace std;\n\nstring solve(string s) {\n    string result = \"\";\n    for (char c : s) {\n        if (isalpha(c)) {\n            if (isupper(c)) {\n                result += tolower(c);\n            } else {\n                result += toupper(c);\n            }\n        } else {\n            result += c;\n        }\n    }\n    bool containsLetter = false;\n    for (char c : result) {\n        if (isalpha(c)) {\n            containsLetter = true;\n            break;\n        }\n    }\n    if (!containsLetter) {\n        reverse(result.begin(), result.end());\n    }\n    return result;\n}\n"}
{"task_id": "CPP/162", "generation": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n\nstring string_to_md5(string text){\n    if (text.empty()) {\n        return \"None\";\n    }\n\n    unsigned char hash[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.size(), hash);\n\n    string md5_string;\n    for (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n        char hex[3];\n        sprintf(hex, \"%02x\", hash[i]);\n        md5_string += hex;\n    }\n\n    return md5_string;\n}\n"}
{"task_id": "CPP/163", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a, int b) {\n    vector<int> evenDigits;\n    if (a > b) {\n        swap(a, b);\n    }\n    for (int i = a; i <= b; i++) {\n        if (i % 2 == 0 && i < 10) {\n            evenDigits.push_back(i);\n        }\n    }\n    return evenDigits;\n}\n"}
