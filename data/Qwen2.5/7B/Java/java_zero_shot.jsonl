{"task_id": "Java/0", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n     >>> has_close_elements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n     false\n     >>> has_close_elements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n     true\n     */\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        if (numbers == null || numbers.size() < 2) {\n            return false;\n        }\n        \n        Collections.sort(numbers);\n        \n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) - numbers.get(i - 1) < threshold) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.has_close_elements(Arrays.asList(1.0, 2.0, 3.0), 0.5)); // Expected: false\n        System.out.println(solution.has_close_elements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)); // Expected: true\n        System.out.println(solution.has_close_elements(Arrays.asList(10.0, 10.1, 10.2, 10.3), 0.05)); // Expected: false\n        System.out.println(solution.has_close_elements(Arrays.asList(-1.0, -0.9, -0.8), 0.1)); // Expected: true\n    }\n}\n"}
{"task_id": "Java/1", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n     * separate those groups into separate strings and return the list of those.\n     * Separate groups are balanced (each open brace is properly closed) and not nested within each other\n     * Ignore any spaces in the input string.\n     *\n     * @param paren_string The input string containing multiple groups of nested parentheses.\n     * @return A List of separate strings, each representing a group of balanced parentheses.\n     */\n    public List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        int balance = 0;\n        StringBuilder currentGroup = new StringBuilder();\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == ' ') continue; // Ignore spaces\n\n            if (c == '(') {\n                balance++;\n                currentGroup.append(c);\n            } else if (c == ')') {\n                balance--;\n                currentGroup.append(c);\n\n                if (balance == 0) { // End of a group\n                    result.add(currentGroup.toString());\n                    currentGroup = new StringBuilder();\n                }\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Test Case 1: ( ) (( )) (( )( ))\");\n        List<String> test1 = solution.separate_paren_groups(\"( ) (( )) (( )( ))\");\n        for (String group : test1) {\n            System.out.println(group);\n        }\n\n        System.out.println(\"\\nTest Case 2: (()())(())\");\n        List<String> test2 = solution.separate_paren_groups(\"(()())(())\");\n        for (String group : test2) {\n            System.out.println(group);\n        }\n\n        System.out.println(\"\\nTest Case 3: ((()))((()))\");\n        List<String> test3 = solution.separate_paren_groups(\"((()))((()))\");\n        for (String group : test3) {\n            System.out.println(group);\n        }\n    }\n}\n"}
{"task_id": "Java/2", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     Given a positive floating point number, it can be decomposed into\n     and integer part (largest integer smaller than given number) and decimals\n     (leftover part always smaller than 1).\n\n     Return the decimal part of the number.\n     >>> truncate_number(3.5)\n     0.5\n     */\n    public double truncate_number(double number) {\n        return number - Math.floor(number);\n    }\n\n    // Test cases to verify the correctness of the method\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(\"Test Case 1: \" + (solution.truncate_number(3.5) == 0.5)); // Expected output: true\n        System.out.println(\"Test Case 2: \" + (solution.truncate_number(4.99) == 0.99)); // Expected output: true\n        System.out.println(\"Test Case 3: \" + (solution.truncate_number(10.0) == 0.0)); // Expected output: true\n        System.out.println(\"Test Case 4: \" + (solution.truncate_number(-2.5) == -0.5)); // Expected output: true\n        System.out.println(\"Test Case 5: \" + (solution.truncate_number(7.123) == 0.123)); // Expected output: true\n    }\n}\n"}
{"task_id": "Java/3", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You're given a list of deposit and withdrawal operations on a bank account that starts with\n     * zero balance. Your task is to detect if at any point the balance of the account falls below zero,\n     * and at that point, the function should return true. Otherwise, it should return false.\n     *\n     * @param operations List of integers representing deposits (positive) and withdrawals (negative).\n     * @return boolean indicating whether the balance ever goes below zero.\n     */\n    public boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (int op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.below_zero(Arrays.asList(1, 2, 3))); // Expected: false\n        System.out.println(solution.below_zero(Arrays.asList(1, 2, -4, 5))); // Expected: true\n        System.out.println(solution.below_zero(Arrays.asList(-1, -2, -3))); // Expected: true\n        System.out.println(solution.below_zero(Arrays.asList(10, -5, -6, 7))); // Expected: false\n        System.out.println(solution.below_zero(Arrays.asList(100, -90, -10, -80))); // Expected: true\n    }\n}\n"}
{"task_id": "Java/4", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * For a given list of input numbers, calculate Mean Absolute Deviation around the mean of this dataset.\n     * Mean Absolute Deviation is the average absolute difference between each element and a centerpoint (mean in this case):\n     * MAD = average | x - x_mean |\n     *\n     * @param numbers List of Double values\n     * @return Mean Absolute Deviation as a double\n     */\n    public double mean_absolute_deviation(List<Double> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list cannot be null or empty\");\n        }\n\n        // Calculate the mean of the dataset\n        double sum = 0.0;\n        for (Double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n\n        // Calculate the Mean Absolute Deviation\n        double mad = 0.0;\n        for (Double num : numbers) {\n            mad += Math.abs(num - mean);\n        }\n        return mad / numbers.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.mean_absolute_deviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))); // Expected output: 1.0\n        System.out.println(solution.mean_absolute_deviation(Arrays.asList(5.0, 7.0, 9.0, 11.0))); // Expected output: 2.0\n        System.out.println(solution.mean_absolute_deviation(Arrays.asList(-3.0, -1.0, 0.0, 2.0, 4.0))); // Expected output: 2.0\n        System.out.println(solution.mean_absolute_deviation(Arrays.asList(10.5, 10.75, 11.0, 10.25))); // Expected output: 0.375\n    }\n}\n"}
{"task_id": "Java/5", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Insert a number 'delimiter' between every two consecutive elements of input list `numbers`\n     *\n     * @param numbers The input list of integers.\n     * @param delimiter The integer to be inserted as a delimiter.\n     * @return A new list with the delimiter interspersed.\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        if (numbers == null || numbers.size() <= 1) {\n            return numbers;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.intersperse(List.of(), 4)); // Expected: []\n        System.out.println(solution.intersperse(Arrays.asList(1, 2, 3), 4)); // Expected: [1, 4, 2, 4, 3]\n        System.out.println(solution.intersperse(Arrays.asList(5), 0)); // Expected: [5]\n        System.out.println(solution.intersperse(Arrays.asList(1, 2), -1)); // Expected: [1, -1, 2]\n    }\n}\n"}
{"task_id": "Java/6", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n     * For each of the group, output the deepest level of nesting of parentheses.\n     * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n     *\n     * @param paren_string The input string containing groups of nested parentheses\n     * @return A list of integers representing the deepest level of nesting for each group\n     */\n    public List<Integer> parse_nested_parens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        String[] groups = paren_string.split(\" \");\n        \n        for (String group : groups) {\n            int maxDepth = 0;\n            int currentDepth = 0;\n            \n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentDepth++;\n                    maxDepth = Math.max(maxDepth, currentDepth);\n                } else if (c == ')') {\n                    currentDepth--;\n                }\n            }\n            \n            result.add(maxDepth);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        String test1 = \"(()()) ((())) () ((())()())\";\n        List<Integer> expected1 = Arrays.asList(2, 3, 1, 3);\n        System.out.println(\"Test Case 1: \" + solution.parse_nested_parens(test1).equals(expected1) ? \"Passed\" : \"Failed\");\n        \n        String test2 = \"(()) (()) ()\";\n        List<Integer> expected2 = Arrays.asList(2, 2, 1);\n        System.out.println(\"Test Case 2: \" + solution.parse_nested_parens(test2).equals(expected2) ? \"Passed\" : \"Failed\");\n        \n        String test3 = \"((())) (((()))) ()\";\n        List<Integer> expected3 = Arrays.asList(3, 4, 1);\n        System.out.println(\"Test Case 3: \" + solution.parse_nested_parens(test3).equals(expected3) ? \"Passed\" : \"Failed\");\n        \n        String test4 = \"() (()) ((())) (((())))\";\n        List<Integer> expected4 = Arrays.asList(1, 2, 3, 4);\n        System.out.println(\"Test Case 4: \" + solution.parse_nested_parens(test4).equals(expected4) ? \"Passed\" : \"Failed\");\n    }\n}\n"}
{"task_id": "Java/7", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Filter an input list of strings only for ones that contain given substring\n     *\n     * @param strings The list of strings to filter.\n     * @param substring The substring to look for in the strings.\n     * @return A filtered list containing only strings that include the specified substring.\n     */\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                result.add(str);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Test Case 1: Empty list\");\n        List<String> test1 = new ArrayList<>();\n        String substring1 = \"a\";\n        System.out.println(solution.filter_by_substring(test1, substring1)); // Expected: []\n\n        System.out.println(\"\\nTest Case 2: Mixed strings with 'a'\");\n        List<String> test2 = Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\");\n        String substring2 = \"a\";\n        System.out.println(solution.filter_by_substring(test2, substring2)); // Expected: [abc, bacd, array]\n\n        System.out.println(\"\\nTest Case 3: No matching substrings\");\n        List<String> test3 = Arrays.asList(\"hello\", \"world\", \"java\");\n        String substring3 = \"python\";\n        System.out.println(solution.filter_by_substring(test3, substring3)); // Expected: []\n\n        System.out.println(\"\\nTest Case 4: Substring at the end of strings\");\n        List<String> test4 = Arrays.asList(\"data\", \"science\", \"analysis\", \"statistics\");\n        String substring4 = \"tics\";\n        System.out.println(solution.filter_by_substring(test4, substring4)); // Expected: [statistics]\n    }\n}\n"}
{"task_id": "Java/8", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n     * Empty sum should be equal to 0 and empty product should be equal to 1.\n     *\n     * @param numbers The input list of integers\n     * @return A List containing the sum and product of the integers\n     */\n    public List<Integer> sum_product(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n\n        return Arrays.asList(sum, product);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Test Case 1: Empty List\");\n        System.out.println(solution.sum_product(new ArrayList<>())); // Expected output: [0, 1]\n\n        System.out.println(\"\\nTest Case 2: Single Element List\");\n        System.out.println(solution.sum_product(Arrays.asList(5))); // Expected output: [5, 5]\n\n        System.out.println(\"\\nTest Case 3: Multiple Elements List\");\n        System.out.println(solution.sum_product(Arrays.asList(1, 2, 3, 4))); // Expected output: [10, 24]\n    }\n}\n"}
{"task_id": "Java/9", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence.\n     *\n     * @param numbers The input list of integers.\n     * @return A list containing the rolling maximum elements.\n     */\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        List<Integer> result = new ArrayList<>();\n        int maxSoFar = Integer.MIN_VALUE;\n        \n        for (int num : numbers) {\n            if (num > maxSoFar) {\n                maxSoFar = num;\n            }\n            result.add(maxSoFar);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.rolling_max(Arrays.asList(1, 2, 3, 2, 3, 4, 2))); // [1, 2, 3, 3, 3, 4, 4]\n        System.out.println(solution.rolling_max(Arrays.asList())); // []\n        System.out.println(solution.rolling_max(Arrays.asList(5))); // [5]\n        System.out.println(solution.rolling_max(Arrays.asList(-1, -3, -2, -4))); // [-1, -1, -1, -1]\n    }\n}\n"}
{"task_id": "Java/10", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Test if given string is a palindrome.\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    /**\n     * Find the shortest palindrome that begins with a supplied string.\n     * Algorithm idea is simple:\n     * - Find the longest postfix of supplied string that is a palindrome.\n     * - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n     */\n    public String make_palindrome(String string) {\n        if (string == null || string.isEmpty()) {\n            return \"\";\n        }\n\n        int n = string.length();\n        for (int i = 0; i < n / 2; i++) {\n            if (string.charAt(i) != string.charAt(n - 1 - i)) {\n                break;\n            }\n        }\n\n        String prefix = string.substring(0, n - i);\n        StringBuilder reversedPrefix = new StringBuilder(prefix).reverse();\n        return string + reversedPrefix.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isPalindrome(\"\")); // true\n        System.out.println(solution.isPalindrome(\"cat\")); // false\n        System.out.println(solution.isPalindrome(\"cata\")); // true\n\n        System.out.println(solution.make_palindrome(\"\")); // \"\"\n        System.out.println(solution.make_palindrome(\"cat\")); // \"catac\"\n        System.out.println(solution.make_palindrome(\"cata\")); // \"catac\"\n\n        System.out.println(solution.make_palindrome(\"race\")); // \"racecar\"\n        System.out.println(solution.make_palindrome(\"madam\")); // \"madam\"\n    }\n}\n"}
{"task_id": "Java/11", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Input are two strings a and b consisting only of 1s and 0s.\n     * Perform binary XOR on these inputs and return result also as a string.\n     *\n     * @param a the first binary string\n     * @param b the second binary string\n     * @return the result of binary XOR operation as a string\n     */\n    public String string_xor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        \n        // Ensure both strings are of equal length\n        int maxLength = Math.max(a.length(), b.length());\n        a = String.format(\"%\" + maxLength + \"s\", a).replace(' ', '0');\n        b = String.format(\"%\" + maxLength + \"s\", b).replace(' ', '0');\n\n        for (int i = 0; i < maxLength; i++) {\n            // XOR the bits and append to result\n            char bitA = a.charAt(i);\n            char bitB = b.charAt(i);\n            if (bitA == bitB) {\n                result.append('0');\n            } else {\n                result.append('1');\n            }\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.string_xor(\"010\", \"110\")); // Expected output: \"100\"\n        System.out.println(solution.string_xor(\"101010\", \"110011\")); // Expected output: \"011001\"\n        System.out.println(solution.string_xor(\"1111\", \"0000\")); // Expected output: \"1111\"\n        System.out.println(solution.string_xor(\"0000\", \"0000\")); // Expected output: \"0000\"\n        System.out.println(solution.string_xor(\"1111111\", \"0000000\")); // Expected output: \"1111111\"\n    }\n}\n"}
{"task_id": "Java/12", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Out of list of strings, return the longest one. Return the first one in case of multiple\n     * strings of the same length. Return Optional.empty() in case the input list is empty.\n     *\n     * @param strings List of strings to process\n     * @return Optional containing the longest string or Optional.empty() if the list is empty\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longestString = strings.get(0);\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n        return Optional.of(longestString);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.longest(List.of())); // Expected: Optional.empty\n        System.out.println(solution.longest(Arrays.asList(\"a\", \"b\", \"c\"))); // Expected: Optional[a]\n        System.out.println(solution.longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))); // Expected: Optional[ccc]\n        System.out.println(solution.longest(Arrays.asList(\"hello\", \"world\", \"java\", \"python\"))); // Expected: Optional[python]\n    }\n}\n"}
{"task_id": "Java/13", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return a greatest common divisor of two integers a and b\n     *\n     * @param a first integer\n     * @param b second integer\n     * @return the greatest common divisor of a and b\n     */\n    public int greatest_common_divisor(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n\n    /**\n     * Test the greatest_common_divisor method with some test cases\n     */\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"GCD of 3 and 5: \" + solution.greatest_common_divisor(3, 5)); // Expected output: 1\n        System.out.println(\"GCD of 25 and 15: \" + solution.greatest_common_divisor(25, 15)); // Expected output: 5\n        System.out.println(\"GCD of 100 and 80: \" + solution.greatest_common_divisor(100, 80)); // Expected output: 20\n        System.out.println(\"GCD of 7 and 3: \" + solution.greatest_common_divisor(7, 3)); // Expected output: 1\n        System.out.println(\"GCD of 49 and 14: \" + solution.greatest_common_divisor(49, 14)); // Expected output: 7\n    }\n}\n"}
{"task_id": "Java/14", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Return list of all prefixes from shortest to longest of the input string\n     *\n     * @param string The input string for which to generate all prefixes.\n     * @return A List containing all prefixes of the input string, ordered from shortest to longest.\n     */\n    public List<String> all_prefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        if (string == null || string.isEmpty()) {\n            return prefixes;\n        }\n        \n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        \n        return prefixes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case\n        String input = \"abc\";\n        List<String> expectedOutput = Arrays.asList(\"a\", \"ab\", \"abc\");\n        List<String> actualOutput = solution.all_prefixes(input);\n        \n        System.out.println(\"Input: \" + input);\n        System.out.println(\"Expected Output: \" + expectedOutput);\n        System.out.println(\"Actual Output:  \" + actualOutput);\n        \n        // Check if the output matches the expected result\n        boolean isCorrect = expectedOutput.equals(actualOutput);\n        System.out.println(\"Is Correct: \" + isCorrect);\n    }\n}\n"}
{"task_id": "Java/15", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n     *\n     * @param n The upper limit of the sequence (inclusive).\n     * @return A string with space-separated numbers from 0 to n.\n     */\n    public String string_sequence(int n) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            if (i > 0) {\n                result.append(\" \");\n            }\n            result.append(i);\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.string_sequence(0)); // Expected output: \"0\"\n        System.out.println(solution.string_sequence(5)); // Expected output: \"0 1 2 3 4 5\"\n        System.out.println(solution.string_sequence(10)); // Expected output: \"0 1 2 3 4 5 6 7 8 9 10\"\n    }\n}\n"}
{"task_id": "Java/16", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a string, find out how many distinct characters (regardless of case) does it consist of.\n     *\n     * @param string The input string.\n     * @return The number of distinct characters in the string, ignoring case.\n     */\n    public int count_distinct_characters(String string) {\n        // Convert the string to lowercase to ignore case\n        String lowerCaseString = string.toLowerCase();\n        \n        // Use a HashSet to store unique characters\n        Set<Character> uniqueChars = new HashSet<>();\n        \n        // Iterate through each character in the string and add it to the set\n        for (char c : lowerCaseString.toCharArray()) {\n            uniqueChars.add(c);\n        }\n        \n        // The size of the set is the number of distinct characters\n        return uniqueChars.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.count_distinct_characters(\"xyzXYZ\")); // Expected output: 3\n        System.out.println(solution.count_distinct_characters(\"Jerry\"));   // Expected output: 4\n        System.out.println(solution.count_distinct_characters(\"HelloWorld\")); // Expected output: 7\n        System.out.println(solution.count_distinct_characters(\"\"));         // Expected output: 0\n        System.out.println(solution.count_distinct_characters(\"AaAaAa\"));   // Expected output: 1\n    }\n}\n"}
{"task_id": "Java/17", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Input to this function is a string representing musical notes in a special ASCII format.\n     * Your task is to parse this string and return list of integers corresponding to how many beats does each note last.\n     *\n     * Here is a legend:\n     * \"o\" - whole note, lasts four beats\n     * \"o|\" - half note, lasts two beats\n     * \".|\" - quater note, lasts one beat\n     */\n    public List<Integer> parse_music(String string) {\n        List<Integer> result = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        \n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    result.add(4);\n                    break;\n                case \"o|\":\n                    result.add(2);\n                    break;\n                case \".|\":\n                    result.add(1);\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid note: \" + note);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.parse_music(\"o o| .| o| o| .| .| .| .| o o\")); // [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n        System.out.println(solution.parse_music(\"o| .| .| o o| .|\")); // [2, 1, 1, 4, 2, 1]\n        System.out.println(solution.parse_music(\".| .| .| .|\")); // [1, 1, 1, 1]\n        System.out.println(solution.parse_music(\"o o o o\")); // [4, 4, 4, 4]\n\n        try {\n            solution.parse_music(\"invalid note\"); // Should throw an exception\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n"}
{"task_id": "Java/18", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Find how many times a given substring can be found in the original string. Count overlapping cases.\n     *\n     * @param string The original string.\n     * @param substring The substring to find.\n     * @return The number of times the substring appears in the original string, including overlaps.\n     */\n    public int how_many_times(String string, String substring) {\n        if (substring.isEmpty()) return 0;\n        \n        int count = 0;\n        int index = 0;\n        \n        while ((index = string.indexOf(substring, index)) != -1) {\n            count++;\n            index++; // Move to the next character after the found substring\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.how_many_times(\"\", \"a\")); // Expected output: 0\n        System.out.println(solution.how_many_times(\"aaa\", \"a\")); // Expected output: 3\n        System.out.println(solution.how_many_times(\"aaaa\", \"aa\")); // Expected output: 3\n        System.out.println(solution.how_many_times(\"abababa\", \"aba\")); // Expected output: 3\n        System.out.println(solution.how_many_times(\"testtest\", \"test\")); // Expected output: 2\n    }\n}\n"}
{"task_id": "Java/19", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Input is a space-delimited string of numberals from 'zero' to 'nine'.\n     * Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n     * Return the string with numbers sorted from smallest to largest\n     *\n     * @param numbers a space-delimited string of numberals\n     * @return the sorted string of numberals\n     */\n    public String sort_numbers(String numbers) {\n        Map<String, Integer> numeralMap = new HashMap<>();\n        numeralMap.put(\"zero\", 0);\n        numeralMap.put(\"one\", 1);\n        numeralMap.put(\"two\", 2);\n        numeralMap.put(\"three\", 3);\n        numeralMap.put(\"four\", 4);\n        numeralMap.put(\"five\", 5);\n        numeralMap.put(\"six\", 6);\n        numeralMap.put(\"seven\", 7);\n        numeralMap.put(\"eight\", 8);\n        numeralMap.put(\"nine\", 9);\n\n        String[] words = numbers.split(\"\\\\s+\");\n        Integer[] nums = new Integer[words.length];\n        \n        for (int i = 0; i < words.length; i++) {\n            nums[i] = numeralMap.get(words[i]);\n        }\n\n        Arrays.sort(nums);\n        \n        StringBuilder sortedNumbers = new StringBuilder();\n        for (Integer num : nums) {\n            sortedNumbers.append(numeralMap.inverse().get(num)).append(\" \");\n        }\n        \n        return sortedNumbers.toString().trim();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sort_numbers(\"three one five\")); // Expected: \"one three five\"\n        System.out.println(solution.sort_numbers(\"nine eight seven\")); // Expected: \"seven eight nine\"\n        System.out.println(solution.sort_numbers(\"four six two\")); // Expected: \"two four six\"\n        System.out.println(solution.sort_numbers(\"zero zero\")); // Expected: \"zero zero\"\n        System.out.println(solution.sort_numbers(\"five three one\")); // Expected: \"one three five\"\n    }\n}\n"}
{"task_id": "Java/20", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n     */\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements.\");\n        }\n\n        double minDiff = Double.MAX_VALUE;\n        List<Double> closestElements = new ArrayList<>();\n\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (diff < minDiff) {\n                    minDiff = diff;\n                    closestElements.clear();\n                    closestElements.add(Math.min(numbers.get(i), numbers.get(j)));\n                    closestElements.add(Math.max(numbers.get(i), numbers.get(j)));\n                }\n            }\n        }\n\n        return closestElements;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))); // [2.0, 2.2]\n        System.out.println(solution.find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))); // [2.0, 2.0]\n        System.out.println(solution.find_closest_elements(Arrays.asList(1.5, 3.1, 2.8, 4.7))); // [2.8, 3.1]\n        System.out.println(solution.find_closest_elements(Arrays.asList(-1.0, -2.0, -3.0, -4.0, -5.0, -2.5))); // [-2.5, -2.0]\n    }\n}\n"}
{"task_id": "Java/21", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given list of numbers (of at least two elements), apply a linear transform to that list,\n     * such that the smallest number will become 0 and the largest will become 1.\n     *\n     * @param numbers List of Double values\n     * @return A new list where each element is rescaled to the range [0, 1]\n     */\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements\");\n        }\n\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n\n        List<Double> rescaledNumbers = new ArrayList<>();\n        for (Double num : numbers) {\n            double scaledValue = (num - min) / (max - min);\n            rescaledNumbers.add(scaledValue);\n        }\n\n        return rescaledNumbers;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.rescale_to_unit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))); // [0.0, 0.25, 0.5, 0.75, 1.0]\n        System.out.println(solution.rescale_to_unit(Arrays.asList(-10.0, -5.0, 0.0, 5.0, 10.0))); // [0.0, 0.25, 0.5, 0.75, 1.0]\n        System.out.println(solution.rescale_to_unit(Arrays.asList(3.5, 4.5, 5.5, 6.5, 7.5))); // [0.0, 0.25, 0.5, 0.75, 1.0]\n    }\n}\n"}
{"task_id": "Java/22", "generation": "import java.util.*;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\nclass Solution {\n    /**\n     * Filter given list of any values only for integers\n     */\n    public List<Integer> filter_integers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n\n    @Test\n    public void testFilterIntegers() {\n        // Test case 1: Mixed types with a string and float\n        List<Object> mixedList = Arrays.asList('a', 3.14, 5);\n        List<Integer> expected1 = new ArrayList<>(Arrays.asList(5));\n        assertEquals(expected1, filter_integers(mixedList));\n\n        // Test case 2: List of integers, strings, map, and list\n        List<Object> mixedList2 = Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of());\n        List<Integer> expected2 = new ArrayList<>(Arrays.asList(1, 2, 3));\n        assertEquals(expected2, filter_integers(mixedList2));\n\n        // Test case 3: Empty list\n        List<Object> emptyList = new ArrayList<>();\n        List<Integer> expected3 = new ArrayList<>();\n        assertEquals(expected3, filter_integers(emptyList));\n\n        // Test case 4: List with only integers\n        List<Object> integerList = Arrays.asList(10, 20, 30);\n        List<Integer> expected4 = new ArrayList<>(Arrays.asList(10, 20, 30));\n        assertEquals(expected4, filter_integers(integerList));\n\n        // Test case 5: List with only non-integer values\n        List<Object> nonIntegerList = Arrays.asList(\"hello\", 3.14f, true);\n        List<Integer> expected5 = new ArrayList<>();\n        assertEquals(expected5, filter_integers(nonIntegerList));\n    }\n}\n"}
{"task_id": "Java/23", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return length of given string\n     * >>> strlen(\"\")\n     * 0\n     * >>> strlen(\"abc\")\n     * 3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"strlen(\"\") should be 0: \" + (solution.strlen(\"\") == 0));\n        System.out.println(\"strlen(\\\"abc\\\") should be 3: \" + (solution.strlen(\"abc\") == 3));\n        System.out.println(\"strlen(\\\"hello world\\\") should be 11: \" + (solution.strlen(\"hello world\") == 11));\n        System.out.println(\"strlen(\\\"Java\\\") should be 4: \" + (solution.strlen(\"Java\") == 4));\n        System.out.println(\"strlen(\\\"1234567890\\\") should be 10: \" + (solution.strlen(\"1234567890\") == 10));\n    }\n}\n"}
{"task_id": "Java/24", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * For a given number n, find the largest number that divides n evenly, smaller than n.\n     *\n     * @param n The input number.\n     * @return The largest divisor of n, smaller than n.\n     */\n    public int largest_divisor(int n) {\n        for (int i = n / 2; i >= 1; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1; // If no divisor is found, return 1 (every number is divisible by 1).\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.largest_divisor(15)); // Expected output: 5\n        System.out.println(solution.largest_divisor(28)); // Expected output: 14\n        System.out.println(solution.largest_divisor(37)); // Expected output: 1 (since 37 is a prime number)\n        System.out.println(solution.largest_divisor(100)); // Expected output: 50\n        System.out.println(solution.largest_divisor(2)); // Expected output: 1\n    }\n}\n"}
{"task_id": "Java/25", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Return list of prime factors of given integer in the order from smallest to largest.\n     * Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n     * Input number should be equal to the product of all factors\n     *\n     * @param n The integer to factorize\n     * @return A list containing the prime factors of `n`\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        // Divide by 2 until it's not divisible anymore\n        while (n % 2 == 0) {\n            factors.add(2);\n            n /= 2;\n        }\n        \n        // Check for odd factors from 3 onwards\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        \n        // If n is a prime number greater than 2\n        if (n > 2) {\n            factors.add(n);\n        }\n        \n        return factors;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.factorize(8));   // Expected: [2, 2, 2]\n        System.out.println(solution.factorize(25));  // Expected: [5, 5]\n        System.out.println(solution.factorize(70));  // Expected: [2, 5, 7]\n        System.out.println(solution.factorize(49));  // Expected: [7, 7]\n        System.out.println(solution.factorize(100)); // Expected: [2, 2, 5, 5]\n    }\n}\n"}
{"task_id": "Java/26", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * From a list of integers, remove all elements that occur more than once.\n     * Keep order of elements left the same as in the input.\n     *\n     * @param numbers The input list of integers.\n     * @return A new list with duplicates removed and original order preserved.\n     */\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        // Use a stream to filter out elements that occur more than once\n        return numbers.stream()\n                      .filter(distinctByObject())\n                      .collect(Collectors.toList());\n    }\n\n    // Helper method to create a predicate for filtering distinct objects\n    private static Predicate<Object> distinctByObject() {\n        Set<Object> seen = new HashSet<>();\n        return obj -> !seen.contains(obj) && seen.add(obj);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.remove_duplicates(Arrays.asList(1, 2, 3, 2, 4))); // [1, 3, 4]\n        System.out.println(solution.remove_duplicates(Arrays.asList(5, 6, 7, 8, 9, 5, 6))); // [7, 8, 9]\n        System.out.println(solution.remove_duplicates(Arrays.asList())); // []\n        System.out.println(solution.remove_duplicates(Arrays.asList(10, 20, 30))); // [10, 20, 30]\n    }\n}\n"}
{"task_id": "Java/27", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n     *\n     * @param string The input string to be flipped.\n     * @return A new string with the case of each character flipped.\n     */\n    public String flip_case(String string) {\n        StringBuilder result = new StringBuilder();\n        \n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                result.append(Character.toLowerCase(c));\n            } else {\n                result.append(Character.toUpperCase(c));\n            }\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.flip_case(\"Hello\"));  // Expected: \"hELLO\"\n        System.out.println(solution.flip_case(\"WORLD\"));  // Expected: \"world\"\n        System.out.println(solution.flip_case(\"Java\"));   // Expected: \"jAVA\"\n        System.out.println(solution.flip_case(\"123abcABC\"));  // Expected: \"123ABCabc\"\n        System.out.println(solution.flip_case(\"\"));       // Expected: \"\"\n    }\n}\n"}
{"task_id": "Java/28", "generation": "import java.util.Arrays;\nimport java.util.List;\n\nclass Solution {\n\n    /**\n     * Concatenate list of strings into a single string\n     *\n     * @param strings List of strings to concatenate\n     * @return A single concatenated string\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String str : strings) {\n            sb.append(str);\n        }\n        return sb.toString();\n    }\n\n    /**\n     * Main method to run tests on the concatenate function.\n     *\n     * @param args Command line arguments\n     */\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: Empty list\n        List<String> emptyList = Arrays.asList();\n        System.out.println(\"Test Case 1 (Empty List): \" + solution.concatenate(emptyList).equals(\"\") ? \"Pass\" : \"Fail\");\n\n        // Test case 2: Single element list\n        List<String> singleElementList = Arrays.asList(\"a\");\n        System.out.println(\"Test Case 2 (Single Element List): \" + solution.concatenate(singleElementList).equals(\"a\") ? \"Pass\" : \"Fail\");\n\n        // Test case 3: Multiple elements list\n        List<String> multipleElementsList = Arrays.asList(\"a\", \"b\", \"c\");\n        System.out.println(\"Test Case 3 (Multiple Elements List): \" + solution.concatenate(multipleElementsList).equals(\"abc\") ? \"Pass\" : \"Fail\");\n\n        // Test case 4: Another example with spaces and special characters\n        List<String> complexList = Arrays.asList(\"Hello\", \" \", \"World!\", \"123\");\n        System.out.println(\"Test Case 4 (Complex List): \" + solution.concatenate(complexList).equals(\"Hello World!123\") ? \"Pass\" : \"Fail\");\n\n        // Test case 5: Another empty list to ensure it works consistently\n        System.out.println(\"Test Case 5 (Another Empty List): \" + solution.concatenate(emptyList).equals(\"\") ? \"Pass\" : \"Fail\");\n    }\n}\n"}
{"task_id": "Java/29", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Filter an input list of strings only for ones that start with a given prefix.\n     *\n     * @param strings The input list of strings.\n     * @param prefix  The prefix to filter the strings by.\n     * @return A list of strings that start with the specified prefix.\n     */\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n}\n\npublic class TestSolution {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: Empty list\n        List<String> emptyList = new ArrayList<>();\n        System.out.println(\"Test Case 1 (Empty List): \" + solution.filter_by_prefix(emptyList, \"a\"));\n\n        // Test case 2: No matching prefix\n        List<String> noMatchList = Arrays.asList(\"abc\", \"bcd\", \"cde\");\n        System.out.println(\"Test Case 2 (No Match): \" + solution.filter_by_prefix(noMatchList, \"z\"));\n\n        // Test case 3: Matching prefix\n        List<String> matchList = Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\");\n        System.out.println(\"Test Case 3 (Match): \" + solution.filter_by_prefix(matchList, \"a\"));\n    }\n}\n"}
{"task_id": "Java/30", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return only positive numbers in the list.\n     *\n     * @param l The input list of integers.\n     * @return A list containing only the positive integers from the input list.\n     */\n    public List<Integer> get_positive(List<Integer> l) {\n        return l.stream()\n                .filter(x -> x > 0)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Test Case 1: \" + solution.get_positive(Arrays.asList(-1, 2, -4, 5, 6)));\n        System.out.println(\"Expected Output 1: [2, 5, 6]\");\n\n        System.out.println(\"Test Case 2: \" + solution.get_positive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)));\n        System.out.println(\"Expected Output 2: [5, 3, 2, 3, 9, 123, 1]\");\n    }\n}\n"}
{"task_id": "Java/31", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Return true if a given number is prime, and false otherwise.\n     */\n    public boolean is_prime(int n) {\n        // Handle edge cases\n        if (n <= 1) return false;\n        if (n == 2 || n == 3) return true;\n        if (n % 2 == 0 || n % 3 == 0) return false;\n\n        // Check for factors from 5 to sqrt(n)\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.is_prime(6));   // Output: false\n        System.out.println(solution.is_prime(101)); // Output: true\n        System.out.println(solution.is_prime(11));  // Output: true\n        System.out.println(solution.is_prime(13441));// Output: true\n        System.out.println(solution.is_prime(61));  // Output: true\n        System.out.println(solution.is_prime(4));   // Output: false\n        System.out.println(solution.is_prime(1));   // Output: false\n    }\n}\n"}
{"task_id": "Java/32", "generation": "import java.util.Arrays;\nimport java.util.List;\n\nclass Solution {\n    /**\n     Evaluates polynomial with coefficients xs at point x.\n     return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n      */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n\n    /**\n     xs are coefficients of a polynomial.\n     find_zero finds x such that poly(x) = 0.\n     find_zero returns only one zero point, even if there are many.\n     Moreover, find_zero only takes list xs having an even number of coefficients\n     and the largest non-zero coefficient as it guarantees\n     a solution.\n     >>> find_zero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n     -0.5\n     >>> find_zero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n     1.0\n     */\n    public double find_zero(List<Double> xs) {\n        if (xs.size() % 2 != 0 || xs.isEmpty()) {\n            throw new IllegalArgumentException(\"The list must have an even number of coefficients.\");\n        }\n\n        // Implementing a simple bisection method to find the root.\n        double lowerBound = -10;\n        double upperBound = 10;\n        double epsilon = 1e-6;\n\n        while (upperBound - lowerBound > epsilon) {\n            double midPoint = (lowerBound + upperBound) / 2.0;\n            if (poly(xs, midPoint) == 0) {\n                return midPoint; // Exact root found\n            } else if (poly(xs, lowerBound) * poly(xs, midPoint) < 0) {\n                upperBound = midPoint;\n            } else {\n                lowerBound = midPoint;\n            }\n        }\n\n        return (lowerBound + upperBound) / 2.0; // Approximate root\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Double> coefficients1 = Arrays.asList(1.0, 2.0);\n        System.out.println(\"Root of f(x) = 1 + 2x: \" + solution.find_zero(coefficients1)); // Should be around -0.5\n\n        List<Double> coefficients2 = Arrays.asList(-6.0, 11.0, -6.0, 1.0);\n        System.out.println(\"Root of f(x) = x^3 - 6x^2 + 11x - 6: \" + solution.find_zero(coefficients2)); // Should be around 1.0\n\n        List<Double> coefficients3 = Arrays.asList(1.0, -3.0, 2.0);\n        System.out.println(\"Root of f(x) = x^2 - 3x + 2: \" + solution.find_zero(coefficients3)); // Should be around 1.0 or 2.0\n    }\n}\n"}
{"task_id": "Java/33", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * This function takes a list l and returns a list l' such that\n     * l' is identical to l in the indicies that are not divisible by three, while its values at the indices that are divisible by three are equal\n     * to the values of the corresponding indices of l, but sorted in ascending order.\n     */\n    public List<Integer> sort_third(List<Integer> l) {\n        if (l == null || l.size() < 3) {\n            return new ArrayList<>(l);\n        }\n\n        List<Integer> thirdIndices = new ArrayList<>();\n        for (int i = 2; i < l.size(); i += 3) {\n            thirdIndices.add(l.get(i));\n        }\n\n        Collections.sort(thirdIndices);\n\n        int thirdIndex = 0;\n        for (int i = 2; i < l.size() && thirdIndex < thirdIndices.size(); i += 3, thirdIndex++) {\n            l.set(i, thirdIndices.get(thirdIndex));\n        }\n\n        return l;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sort_third(Arrays.asList(1, 2, 3))); // [1, 2, 3]\n        System.out.println(solution.sort_third(Arrays.asList(5, 6, 3, 4, 8, 9, 2))); // [2, 6, 3, 4, 8, 9, 5]\n        System.out.println(solution.sort_third(Arrays.asList())); // []\n        System.out.println(solution.sort_third(Arrays.asList(10))); // [10]\n        System.out.println(solution.sort_third(Arrays.asList(7, 8, 9, 10, 11, 12, 13, 14, 15))); // [7, 8, 9, 10, 11, 12, 13, 14, 15]\n    }\n}\n"}
{"task_id": "Java/34", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return sorted unique elements in a list\n     *\n     * @param l input list of integers\n     * @return a List containing sorted unique elements from the input list\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> set = new LinkedHashSet<>(l); // Use LinkedHashSet to preserve order and remove duplicates\n        return new ArrayList<>(set);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> inputList1 = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        System.out.println(\"Input: \" + inputList1);\n        System.out.println(\"Output: \" + solution.unique(inputList1));\n\n        // Test case 2\n        List<Integer> inputList2 = Arrays.asList(1, 2, 3, 4, 5);\n        System.out.println(\"Input: \" + inputList2);\n        System.out.println(\"Output: \" + solution.unique(inputList2));\n\n        // Test case 3\n        List<Integer> inputList3 = new ArrayList<>();\n        System.out.println(\"Input: \" + inputList3);\n        System.out.println(\"Output: \" + solution.unique(inputList3));\n    }\n}\n"}
{"task_id": "Java/35", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return maximum element in the list.\n     *\n     * @param l List of integers\n     * @return The maximum integer in the list\n     */\n    public int max_element(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be null or empty\");\n        }\n        \n        return Collections.max(l);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(1, 2, 3);\n        System.out.println(\"Max element in [1, 2, 3]: \" + solution.max_element(test1)); // Expected: 3\n\n        List<Integer> test2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n        System.out.println(\"Max element in [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]: \" + solution.max_element(test2)); // Expected: 123\n\n        List<Integer> test3 = Arrays.asList();\n        try {\n            System.out.println(\"Max element in []: \" + solution.max_element(test3));\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage()); // Expected: List cannot be null or empty\n        }\n\n        List<Integer> test4 = null;\n        try {\n            System.out.println(\"Max element in null: \" + solution.max_element(test4));\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage()); // Expected: List cannot be null or empty\n        }\n    }\n}\n"}
{"task_id": "Java/36", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n     */\n    public int fizz_buzz(int n) {\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String numStr = Integer.toString(i);\n                for (char c : numStr.toCharArray()) {\n                    if (c == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.fizz_buzz(50));  // Expected output: 0\n        System.out.println(solution.fizz_buzz(78));  // Expected output: 2\n        System.out.println(solution.fizz_buzz(79));  // Expected output: 3\n    }\n}\n"}
{"task_id": "Java/37", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * This function takes a list l and returns a list l' such that\n     * l' is identical to l in the odd indicies, while its values at the even indicies are equal\n     * to the values of the even indicies of l, but sorted.\n     */\n    public List<Integer> sort_even(List<Integer> l) {\n        List<Integer> result = new ArrayList<>(l);\n        \n        // Extract even-indexed elements and sort them\n        List<Integer> evenElements = new ArrayList<>();\n        for (int i = 0; i < result.size(); i += 2) {\n            evenElements.add(result.get(i));\n        }\n        Collections.sort(evenElements);\n        \n        // Place sorted even-indexed elements back into the result list\n        int evenIndex = 0;\n        for (int i = 0; i < result.size(); i += 2) {\n            result.set(i, evenElements.get(evenIndex++));\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sort_even(Arrays.asList(1, 2, 3))); // [1, 2, 3]\n        System.out.println(solution.sort_even(Arrays.asList(5, 6, 3, 4))); // [3, 6, 5, 4]\n        System.out.println(solution.sort_even(Arrays.asList(9, 8, 7, 6, 5, 4))); // [5, 8, 7, 6, 9, 4]\n        System.out.println(solution.sort_even(Arrays.asList())); // []\n    }\n}\n"}
{"task_id": "Java/38", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n     * takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decode_cyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse the cycling in each group to decode. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, \"\" + groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Original: \" + \"HelloWorld\");\n        System.out.println(\"Encoded: \" + solution.encodeCyclic(\"HelloWorld\"));\n        System.out.println(\"Decoded: \" + solution.decode_cyclic(solution.encodeCyclic(\"HelloWorld\")));\n\n        System.out.println(\"Original: \" + \"JavaProgramming\");\n        System.out.println(\"Encoded: \" + solution.encodeCyclic(\"JavaProgramming\"));\n        System.out.println(\"Decoded: \" + solution.decode_cyclic(solution.encodeCyclic(\"JavaProgramming\")));\n\n        System.out.println(\"Original: \" + \"AlibabaCloud\");\n        System.out.println(\"Encoded: \" + solution.encodeCyclic(\"AlibabaCloud\"));\n        System.out.println(\"Decoded: \" + solution.decode_cyclic(solution.encodeCyclic(\"AlibabaCloud\")));\n    }\n}\n"}
{"task_id": "Java/39", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n     */\n    public int prime_fib(int n) {\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; primes.size() < n; ) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n            i++;\n        }\n\n        return findFibonacciPrime(primes, n);\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private int findFibonacciPrime(List<Integer> primes, int n) {\n        int fib1 = 0;\n        int fib2 = 1;\n        int fib3;\n\n        for (int i = 1; ; i++) {\n            fib3 = fib1 + fib2;\n            if (primes.contains(fib3)) {\n                return fib3;\n            }\n            fib1 = fib2;\n            fib2 = fib3;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(\"prime_fib(1): \" + solution.prime_fib(1)); // Expected: 2\n        System.out.println(\"prime_fib(2): \" + solution.prime_fib(2)); // Expected: 3\n        System.out.println(\"prime_fib(3): \" + solution.prime_fib(3)); // Expected: 5\n        System.out.println(\"prime_fib(4): \" + solution.prime_fib(4)); // Expected: 13\n        System.out.println(\"prime_fib(5): \" + solution.prime_fib(5)); // Expected: 89\n    }\n}\n"}
{"task_id": "Java/40", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * triples_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are three distinct elements in the list that\n     * sum to zero, and False otherwise.\n     */\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        // Sort the list to make it easier to find triplets that sum to zero\n        Collections.sort(l);\n        \n        for (int i = 0; i < l.size() - 2; i++) {\n            int left = i + 1;\n            int right = l.size() - 1;\n            \n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                \n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1, 3, -2, 1))); // true\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(2, 4, -5, 3, 9, 7))); // true\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1))); // false\n    }\n}\n"}
{"task_id": "Java/41", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Imagine a road that's a perfectly straight infinitely long line.\n     * n cars are driving left to right; simultaneously, a different set of n cars\n     * are driving right to left. The two sets of cars start out being very far from each other.\n     * All cars move in the same speed. Two cars are said to collide when a car that's moving left to right hits a car that's moving right to left.\n     * However, the cars are infinitely sturdy and strong; as a result, they continue moving in their trajectory as if they did not collide.\n     *\n     * This function outputs the number of such collisions.\n     */\n    public int car_race_collision(int n) {\n        // Since all cars move at the same speed and start far apart,\n        // each car from one direction will eventually collide with exactly one car from the opposite direction.\n        return n;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.car_race_collision(0));  // Expected output: 0\n        System.out.println(solution.car_race_collision(1));  // Expected output: 1\n        System.out.println(solution.car_race_collision(2));  // Expected output: 2\n        System.out.println(solution.car_race_collision(5));  // Expected output: 5\n    }\n}\n"}
{"task_id": "Java/42", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return list with elements incremented by 1.\n     *\n     * @param l The input list of integers.\n     * @return A new list where each element is incremented by 1.\n     */\n    public List<Integer> incr_list(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> list1 = Arrays.asList(1, 2, 3);\n        System.out.println(\"Original list: \" + list1);\n        System.out.println(\"Incremented list: \" + solution.incr_list(list1));\n\n        // Expected output:\n        // Original list: [1, 2, 3]\n        // Incremented list: [2, 3, 4]\n\n        // Test case 2\n        List<Integer> list2 = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        System.out.println(\"Original list: \" + list2);\n        System.out.println(\"Incremented list: \" + solution.incr_list(list2));\n\n        // Expected output:\n        // Original list: [5, 3, 5, 2, 3, 3, 9, 0, 123]\n        // Incremented list: [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    }\n}\n"}
{"task_id": "Java/43", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * pairs_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are two distinct elements in the list that\n     * sum to zero, and False otherwise.\n     */\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        Set<Integer> seen = new HashSet<>();\n        \n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1, 3, -2, 1))); // false\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(2, 4, -5, 3, 5, 7))); // true\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1))); // false\n    }\n}\n"}
{"task_id": "Java/44", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Change numerical base of input number x to base.\n     * return string representation after the conversion.\n     * base numbers are less than 10.\n     *\n     * @param x The number to be converted.\n     * @param base The target base for conversion (less than 10).\n     * @return String representation of the converted number.\n     */\n    public String change_base(int x, int base) {\n        if (base < 2 || base > 9) {\n            throw new IllegalArgumentException(\"Base must be between 2 and 9.\");\n        }\n        \n        StringBuilder result = new StringBuilder();\n        while (x > 0) {\n            result.insert(0, x % base);\n            x /= base;\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.change_base(8, 3)); // Expected output: \"22\"\n        System.out.println(solution.change_base(8, 2)); // Expected output: \"1000\"\n        System.out.println(solution.change_base(7, 2)); // Expected output: \"111\"\n        System.out.println(solution.change_base(255, 8)); // Expected output: \"377\"\n        System.out.println(solution.change_base(10, 4)); // Expected output: \"22\"\n    }\n}\n"}
{"task_id": "Java/45", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given length of a side (base) and height, return area for a triangle.\n     *\n     * @param a The length of the base of the triangle.\n     * @param h The height of the triangle.\n     * @return The area of the triangle.\n     */\n    public double triangle_area(double a, double h) {\n        return 0.5 * a * h;\n    }\n\n    /**\n     * Main method to test the triangle_area function with various inputs.\n     */\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Triangle area (base=5, height=3): \" + solution.triangle_area(5, 3)); // Expected: 7.5\n        System.out.println(\"Triangle area (base=10, height=4): \" + solution.triangle_area(10, 4)); // Expected: 20.0\n        System.out.println(\"Triangle area (base=7, height=8): \" + solution.triangle_area(7, 8));   // Expected: 28.0\n        System.out.println(\"Triangle area (base=9, height=6): \" + solution.triangle_area(9, 6));   // Expected: 27.0\n    }\n}\n"}
{"task_id": "Java/46", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * The Fib4 number sequence is defined as follows:\n     * fib4(0) -> 0\n     * fib4(1) -> 0\n     * fib4(2) -> 2\n     * fib4(3) -> 0\n     * fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n     * Please write a function to efficiently compute the n-th element of the fib4 number sequence. Do not use recursion.\n     */\n    public int fib4(int n) {\n        if (n == 0 || n == 1) return 0;\n        if (n == 2) return 2;\n        if (n == 3) return 0;\n\n        int[] dp = new int[n + 1];\n        dp[0] = 0;\n        dp[1] = 0;\n        dp[2] = 2;\n        dp[3] = 0;\n\n        for (int i = 4; i <= n; i++) {\n            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4];\n        }\n\n        return dp[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.fib4(5)); // Expected output: 4\n        System.out.println(solution.fib4(6)); // Expected output: 8\n        System.out.println(solution.fib4(7)); // Expected output: 14\n    }\n}\n"}
{"task_id": "Java/47", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return median of elements in the list l.\n     *\n     * @param l List of integers\n     * @return The median value as a double\n     */\n    public double median(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be null or empty\");\n        }\n\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            return (l.get(size / 2 - 1) + l.get(size / 2)) / 2.0;\n        } else {\n            return l.get(size / 2);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> testList1 = Arrays.asList(3, 1, 2, 4, 5);\n        System.out.println(\"Median of [3, 1, 2, 4, 5]: \" + solution.median(testList1)); // Expected: 3\n\n        List<Integer> testList2 = Arrays.asList(-10, 4, 6, 1000, 10, 20);\n        System.out.println(\"Median of [-10, 4, 6, 1000, 10, 20]: \" + solution.median(testList2)); // Expected: 8.0\n\n        List<Integer> testList3 = Arrays.asList(1, 2, 3, 4);\n        System.out.println(\"Median of [1, 2, 3, 4]: \" + solution.median(testList3)); // Expected: 2.5\n\n        List<Integer> testList4 = Arrays.asList(-5, -3, -1, 0, 2, 4, 6);\n        System.out.println(\"Median of [-5, -3, -1, 0, 2, 4, 6]: \" + solution.median(testList4)); // Expected: 0.0\n\n        List<Integer> testList5 = Arrays.asList();\n        try {\n            System.out.println(\"Median of []: \" + solution.median(testList5));\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage()); // Expected: List cannot be null or empty\n        }\n    }\n}\n"}
{"task_id": "Java/48", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Checks if given string is a palindrome\n     *\n     * @param text the input string to check\n     * @return true if the string is a palindrome, false otherwise\n     */\n    public boolean is_palindrome(String text) {\n        int left = 0;\n        int right = text.length() - 1;\n\n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.is_palindrome(\"\"));       // true\n        System.out.println(solution.is_palindrome(\"aba\"));    // true\n        System.out.println(solution.is_palindrome(\"aaaaa\"));  // true\n        System.out.println(solution.is_palindrome(\"zbcd\"));   // false\n        System.out.println(solution.is_palindrome(\"level\"));  // true\n        System.out.println(solution.is_palindrome(\"noon\"));   // true\n        System.out.println(solution.is_palindrome(\"abcde\"));  // false\n    }\n}\n"}
{"task_id": "Java/49", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return 2^n modulo p (be aware of numerics).\n     */\n    public int modp(int n, int p) {\n        if (n == 0) return 1;\n        \n        long result = 1;\n        long base = 2;\n        \n        while (n > 0) {\n            if ((n & 1) == 1) {\n                result = (result * base) % p;\n            }\n            base = (base * base) % p;\n            n >>= 1;\n        }\n        \n        return (int) result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.modp(3, 5));   // Expected output: 3\n        System.out.println(solution.modp(1101, 101)); // Expected output: 2\n        System.out.println(solution.modp(0, 101));  // Expected output: 1\n        System.out.println(solution.modp(3, 11));   // Expected output: 8\n        System.out.println(solution.modp(100, 101)); // Expected output: 1\n    }\n}\n"}
{"task_id": "Java/50", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n     * takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decode_shift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n     * Test method to verify the encodeShift and decode_shift functions.\n     */\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        String testString1 = \"abc\";\n        String encodedString1 = solution.encodeShift(testString1);\n        System.out.println(\"Encoded: \" + encodedString1); // Expected: \"fgh\"\n\n        String decodedString1 = solution.decode_shift(encodedString1);\n        System.out.println(\"Decoded: \" + decodedString1); // Expected: \"abc\"\n\n        String testString2 = \"xyz\";\n        String encodedString2 = solution.encodeShift(testString2);\n        System.out.println(\"Encoded: \" + encodedString2); // Expected: \"cde\"\n\n        String decodedString2 = solution.decode_shift(encodedString2);\n        System.out.println(\"Decoded: \" + decodedString2); // Expected: \"xyz\"\n    }\n}\n"}
{"task_id": "Java/51", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * remove_vowels is a function that takes string and returns string without vowels.\n     */\n    public String remove_vowels(String text) {\n        if (text == null || text.isEmpty()) {\n            return text;\n        }\n        \n        StringBuilder result = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (!isVowel(c)) {\n                result.append(c);\n            }\n        }\n        return result.toString();\n    }\n\n    private boolean isVowel(char c) {\n        return \"AEIOUaeiou\".indexOf(c) != -1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.remove_vowels(\"\")); // Output: \"\"\n        System.out.println(solution.remove_vowels(\"abcdef\\nghijklm\")); // Output: \"bcdf\\nghjklm\"\n        System.out.println(solution.remove_vowels(\"abcdef\")); // Output: \"bcdf\"\n        System.out.println(solution.remove_vowels(\"aaaaa\")); // Output: \"\"\n        System.out.println(solution.remove_vowels(\"aaBAA\")); // Output: \"B\"\n        System.out.println(solution.remove_vowels(\"zbcd\")); // Output: \"zbcd\"\n    }\n}\n"}
{"task_id": "Java/52", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return True if all numbers in the list l are below threshold t.\n     */\n    public boolean below_threshold(List<Integer> l, int t) {\n        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.below_threshold(Arrays.asList(1, 2, 4, 10), 100)); // Expected: true\n        System.out.println(solution.below_threshold(Arrays.asList(1, 20, 4, 10), 5));  // Expected: false\n        System.out.println(solution.below_threshold(Arrays.asList(-1, -2, -3), 0));    // Expected: true\n        System.out.println(solution.below_threshold(Arrays.asList(), 100));            // Expected: true (empty list)\n        System.out.println(solution.below_threshold(Arrays.asList(99, 100, 101), 100)); // Expected: false\n    }\n}\n"}
{"task_id": "Java/53", "generation": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nclass Solution {\n    /**\n     * Add two numbers x and y\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n\n    // Test cases for the add method\n    @Test\n    void testAdd() {\n        assertEquals(5, add(2, 3), \"2 + 3 should be 5\");\n        assertEquals(12, add(5, 7), \"5 + 7 should be 12\");\n        assertEquals(0, add(0, 0), \"0 + 0 should be 0\");\n        assertEquals(-1, add(-1, -2), \"-1 + (-2) should be -3\");\n        assertEquals(999, add(998, 1), \"998 + 1 should be 999\");\n    }\n}\n"}
{"task_id": "Java/54", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Check if two words have the same kind of characters.\n     */\n    public boolean same_chars(String s0, String s1) {\n        // Convert both strings to sets of characters to remove duplicates and then compare them\n        Set<Character> set0 = new HashSet<>();\n        for (char c : s0.toCharArray()) {\n            set0.add(c);\n        }\n\n        Set<Character> set1 = new HashSet<>();\n        for (char c : s1.toCharArray()) {\n            set1.add(c);\n        }\n\n        return set0.equals(set1);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // true\n        System.out.println(solution.same_chars(\"abcd\", \"dddddddabc\"));              // true\n        System.out.println(solution.same_chars(\"dddddddabc\", \"abcd\"));              // true\n        System.out.println(solution.same_chars(\"eabcd\", \"dddddddabc\"));             // false\n        System.out.println(solution.same_chars(\"abcd\", \"dddddddabce\"));             // false\n        System.out.println(solution.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"));  // false\n    }\n}\n"}
{"task_id": "Java/55", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return n-th Fibonacci number.\n     *\n     * >>> fib(10)\n     * 55\n     * >>> fib(1)\n     * 1\n     * >>> fib(8)\n     * 21\n     */\n    public int fib(int n) {\n        if (n <= 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        }\n        \n        int a = 0, b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a + b;\n            a = b;\n            b = temp;\n        }\n        return b;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"fib(10): \" + solution.fib(10)); // Expected: 55\n        System.out.println(\"fib(1): \" + solution.fib(1));   // Expected: 1\n        System.out.println(\"fib(8): \" + solution.fib(8));   // Expected: 21\n        System.out.println(\"fib(0): \" + solution.fib(0));   // Expected: 0\n        System.out.println(\"fib(-5): \" + solution.fib(-5)); // Expected: 0 (or handle as an error)\n    }\n}\n"}
{"task_id": "Java/56", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * brackets is a string of \"<\" and \">\".\n     * return True if every opening bracket has a corresponding closing bracket.\n     *\n     * >>> correct_bracketing(\"<\")\n     * false\n     * >>> correct_bracketing(\"<>\")\n     * true\n     * >>> correct_bracketing(\"<<><>>\")\n     * true\n     * >>> correct_bracketing(\"><<>\")\n     * false\n     */\n    public boolean correct_bracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        \n        for (char ch : brackets.toCharArray()) {\n            if (ch == '<') {\n                stack.push(ch);\n            } else if (ch == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.correct_bracketing(\"<\"));      // Output: false\n        System.out.println(solution.correct_bracketing(\"<>\"));     // Output: true\n        System.out.println(solution.correct_bracketing(\"<<><>>\")); // Output: true\n        System.out.println(solution.correct_bracketing(\"><<>\"));   // Output: false\n    }\n}\n"}
{"task_id": "Java/57", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return true if list elements are monotonically increasing or decreasing.\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l == null || l.size() <= 1) {\n            return true;\n        }\n\n        boolean increasing = false;\n        boolean decreasing = false;\n\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i + 1)) {\n                increasing = true;\n            }\n            if (l.get(i) > l.get(i + 1)) {\n                decreasing = true;\n            }\n\n            // If both are true, the list is not monotonic\n            if (increasing && decreasing) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.monotonic(Arrays.asList(1, 2, 4, 20))); // true\n        System.out.println(solution.monotonic(Arrays.asList(1, 20, 4, 10))); // false\n        System.out.println(solution.monotonic(Arrays.asList(4, 1, 0, -10))); // true\n        System.out.println(solution.monotonic(Arrays.asList())); // true\n        System.out.println(solution.monotonic(Arrays.asList(5))); // true\n        System.out.println(solution.monotonic(Arrays.asList(3, 2, 1))); // true\n    }\n}\n"}
{"task_id": "Java/58", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return sorted unique common elements for two lists.\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n\n        // Retain only the elements that are present in both sets\n        set1.retainAll(set2);\n\n        // Convert the resulting set to a sorted list and return it\n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result);\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> l1 = Arrays.asList(1, 4, 3, 34, 653, 2, 5);\n        List<Integer> l2 = Arrays.asList(5, 7, 1, 5, 9, 653, 121);\n        System.out.println(\"Common elements (Test case 1): \" + solution.common(l1, l2)); // Expected: [1, 5, 653]\n\n        // Test case 2\n        List<Integer> l3 = Arrays.asList(5, 3, 2, 8);\n        List<Integer> l4 = Arrays.asList(3, 2);\n        System.out.println(\"Common elements (Test case 2): \" + solution.common(l3, l4)); // Expected: [2, 3]\n\n        // Test case 3\n        List<Integer> l5 = Arrays.asList(10, 20, 30);\n        List<Integer> l6 = Arrays.asList(40, 50, 60);\n        System.out.println(\"Common elements (Test case 3): \" + solution.common(l5, l6)); // Expected: []\n\n        // Test case 4\n        List<Integer> l7 = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> l8 = Arrays.asList(0, 1, 2, 3, 4, 5, 6);\n        System.out.println(\"Common elements (Test case 4): \" + solution.common(l7, l8)); // Expected: [1, 2, 3, 4, 5]\n    }\n}\n"}
{"task_id": "Java/59", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Return the largest prime factor of n. Assume n > 1 and is not a prime.\n     *\n     * @param n The number for which to find the largest prime factor.\n     * @return The largest prime factor of n.\n     */\n    public int largest_prime_factor(int n) {\n        int maxPrime = -1;\n        \n        // Divide n by 2 to remove all even factors\n        while (n % 2 == 0) {\n            maxPrime = 2;\n            n /= 2;\n        }\n        \n        // Now n must be odd, start checking from 3\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            // While i divides n, remove i and set maxPrime to i\n            while (n % i == 0) {\n                maxPrime = i;\n                n /= i;\n            }\n        }\n        \n        // This condition is to handle the case when n is a prime number greater than 2\n        if (n > 2) {\n            maxPrime = n;\n        }\n        \n        return maxPrime;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.largest_prime_factor(13195)); // Expected output: 29\n        System.out.println(solution.largest_prime_factor(2048));  // Expected output: 2\n        System.out.println(solution.largest_prime_factor(600851475143L)); // Expected output: 6857 (Note: Use long to handle large numbers)\n    }\n}\n"}
{"task_id": "Java/60", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * sum_to_n is a function that sums numbers from 1 to n.\n     */\n    public int sum_to_n(int n) {\n        return (n * (n + 1)) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(\"sum_to_n(30): \" + solution.sum_to_n(30)); // Expected: 465\n        System.out.println(\"sum_to_n(100): \" + solution.sum_to_n(100)); // Expected: 5050\n        System.out.println(\"sum_to_n(5): \" + solution.sum_to_n(5)); // Expected: 15\n        System.out.println(\"sum_to_n(10): \" + solution.sum_to_n(10)); // Expected: 55\n        System.out.println(\"sum_to_n(1): \" + solution.sum_to_n(1)); // Expected: 1\n    }\n}\n"}
{"task_id": "Java/61", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * brackets is a string of \"(\" and \")\".\n     * return True if every opening bracket has a corresponding closing bracket.\n     */\n    public boolean correct_bracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        \n        for (char ch : brackets.toCharArray()) {\n            if (ch == '(') {\n                stack.push(ch);\n            } else if (ch == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.correct_bracketing(\"(\"));       // Output: false\n        System.out.println(solution.correct_bracketing(\"()\"));      // Output: true\n        System.out.println(solution.correct_bracketing(\"(()())\"));  // Output: true\n        System.out.println(solution.correct_bracketing(\")(()\"));    // Output: false\n        System.out.println(solution.correct_bracketing(\"((()))\"));  // Output: true\n        System.out.println(solution.correct_bracketing(\"(()\"));     // Output: false\n        System.out.println(solution.correct_bracketing(\"())\"));     // Output: false\n    }\n}\n"}
{"task_id": "Java/62", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * xs represent coefficients of a polynomial.\n     * xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     * Return derivative of this polynomial in the same form.\n     *\n     * @param xs Coefficients of the polynomial\n     * @return Derivative of the polynomial as a list of coefficients\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        if (xs == null || xs.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Derivative of [3, 1, 2, 4, 5]: \" + solution.derivative(Arrays.asList(3, 1, 2, 4, 5)));\n        System.out.println(\"Derivative of [1, 2, 3]: \" + solution.derivative(Arrays.asList(1, 2, 3)));\n\n        // Additional test cases\n        System.out.println(\"Derivative of [0, 1, 2]: \" + solution.derivative(Arrays.asList(0, 1, 2)));\n        System.out.println(\"Derivative of [5]: \" + solution.derivative(Arrays.asList(5)));\n        System.out.println(\"Derivative of []: \" + solution.derivative(new ArrayList<>()));\n    }\n}\n"}
{"task_id": "Java/63", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n     fibfib(0) == 0\n     fibfib(1) == 0\n     fibfib(2) == 1\n     fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n     Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n     >>> fibfib(1)\n     0\n     >>> fibfib(5)\n     4\n     >>> fibfib(8)\n     24\n      */\n    public int fibfib(int n) {\n        if (n == 0 || n == 1) return 0;\n        if (n == 2) return 1;\n\n        int[] memo = new int[n + 1];\n        memo[0] = 0;\n        memo[1] = 0;\n        memo[2] = 1;\n\n        for (int i = 3; i <= n; i++) {\n            memo[i] = memo[i - 1] + memo[i - 2] + memo[i - 3];\n        }\n\n        return memo[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.fibfib(1)); // Expected output: 0\n        System.out.println(solution.fibfib(5)); // Expected output: 4\n        System.out.println(solution.fibfib(8)); // Expected output: 24\n\n        // Additional test cases\n        System.out.println(solution.fibfib(3)); // Expected output: 1\n        System.out.println(solution.fibfib(6)); // Expected output: 7\n        System.out.println(solution.fibfib(9)); // Expected output: 34\n    }\n}\n"}
{"task_id": "Java/64", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function vowels_count which takes a string representing\n     * a word as input and returns the number of vowels in the string.\n     * Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n     * vowel, but only when it is at the end of the given word.\n     *\n     * Example:\n     * >>> vowels_count(\"abcde\")\n     * 2\n     * >>> vowels_count(\"ACEDY\")\n     * 3\n     */\n    public int vowels_count(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = Character.toLowerCase(s.charAt(i));\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            } else if (c == 'y' && i == s.length() - 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.vowels_count(\"abcde\")); // Expected output: 2\n        System.out.println(solution.vowels_count(\"ACEDY\")); // Expected output: 3\n        System.out.println(solution.vowels_count(\"rhythm\")); // Expected output: 0\n        System.out.println(solution.vowels_count(\"encyclopedia\")); // Expected output: 6\n        System.out.println(solution.vowels_count(\"SYZYGY\")); // Expected output: 1\n    }\n}\n"}
{"task_id": "Java/65", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Circular shift the digits of the integer x, shift the digits right by shift\n     * and return the result as a string.\n     * If shift > number of digits, return digits reversed.\n     *\n     * @param x The integer to be circular shifted.\n     * @param shift The number of positions to shift the digits to the right.\n     * @return The resulting string after the circular shift.\n     */\n    public String circular_shift(int x, int shift) {\n        if (x == 0) return \"0\"; // Handle edge case where x is zero\n        String numStr = Integer.toString(x);\n        int len = numStr.length();\n        \n        // If shift > number of digits, reverse the string\n        if (shift >= len) {\n            return new StringBuilder(numStr).reverse().toString();\n        }\n        \n        // Perform circular shift\n        int effectiveShift = shift % len;\n        String shiftedPart = numStr.substring(len - effectiveShift);\n        String remainingPart = numStr.substring(0, len - effectiveShift);\n        return shiftedPart + remainingPart;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.circular_shift(12345, 2)); // Expected: \"34512\"\n        System.out.println(solution.circular_shift(12345, 5)); // Expected: \"54321\"\n        System.out.println(solution.circular_shift(12345, 7)); // Expected: \"54321\"\n        System.out.println(solution.circular_shift(0, 1));     // Expected: \"0\"\n    }\n}\n"}
{"task_id": "Java/66", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function that takes a string as input and returns the sum of the upper characters only ASCII codes.\n     *\n     * Examples:\n     * digitSum(\"\") => 0\n     * digitSum(\"abAB\") => 131\n     * digitSum(\"abcCd\") => 67\n     * digitSum(\"helloE\") => 69\n     * digitSum(\"woArBld\") => 131\n     * digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.digitSum(\"\")); // Expected: 0\n        System.out.println(solution.digitSum(\"abAB\")); // Expected: 131 ('A' + 'B')\n        System.out.println(solution.digitSum(\"abcCd\")); // Expected: 67 ('C' + 'D')\n        System.out.println(solution.digitSum(\"helloE\")); // Expected: 69 ('E')\n        System.out.println(solution.digitSum(\"woArBld\")); // Expected: 131 ('A' + 'B' + 'L' + 'D')\n        System.out.println(solution.digitSum(\"aAaaaXa\")); // Expected: 153 ('A' * 4 + 'X')\n    }\n}\n"}
{"task_id": "Java/67", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * In this task, you will be given a string that represents a number of apples and oranges\n     * that are distributed in a basket of fruit. The basket contains apples, oranges, and mango fruits.\n     * Given the string that represents the total number of oranges and apples and an integer that represent\n     * the total number of the fruits in the basket return the number of the mango fruits in the basket.\n     *\n     * @param s a string representing the number of apples and oranges (e.g., \"5 apples and 6 oranges\")\n     * @param n the total number of fruits in the basket\n     * @return the number of mango fruits in the basket\n     */\n    public int fruit_distribution(String s, int n) {\n        // Extract the numbers from the string using regex\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[1]);\n        int oranges = Integer.parseInt(parts[3]);\n\n        // Calculate the number of mango fruits\n        return n - (apples + oranges);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.fruit_distribution(\"5 apples and 6 oranges\", 19)); // Expected output: 8\n        System.out.println(solution.fruit_distribution(\"0 apples and 1 oranges\", 3));   // Expected output: 2\n        System.out.println(solution.fruit_distribution(\"2 apples and 3 oranges\", 100)); // Expected output: 95\n        System.out.println(solution.fruit_distribution(\"100 apples and 1 oranges\", 120)); // Expected output: 19\n    }\n}\n"}
{"task_id": "Java/68", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given an array representing a branch of a tree that has non-negative integer nodes,\n     * your task is to pluck one of the nodes and return it.\n     * The plucked node should be the node with the smallest even value.\n     * If multiple nodes with the same smallest even value are found, return the node that has the smallest index.\n     *\n     * @param arr the list of integers representing the tree branch\n     * @return a list containing the smallest even value and its index, or an empty list if no valid node is found\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        int minEvenValue = Integer.MAX_VALUE;\n        int minIndex = -1;\n\n        for (int i = 0; i < arr.size(); i++) {\n            int value = arr.get(i);\n            if (value % 2 == 0 && value <= minEvenValue) {\n                if (value < minEvenValue || (value == minEvenValue && i < minIndex)) {\n                    minEvenValue = value;\n                    minIndex = i;\n                }\n            }\n        }\n\n        if (minIndex == -1) {\n            return new ArrayList<>();\n        } else {\n            return Arrays.asList(minEvenValue, minIndex);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.pluck(Arrays.asList(4, 2, 3))); // Output: [2, 1]\n        System.out.println(solution.pluck(Arrays.asList(1, 2, 3))); // Output: [2, 1]\n        System.out.println(solution.pluck(Arrays.asList()));       // Output: []\n        System.out.println(solution.pluck(Arrays.asList(5, 0, 3, 0, 4, 2))); // Output: [0, 1]\n    }\n}\n"}
{"task_id": "Java/69", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n     * zero, and has a frequency greater than or equal to the value of the integer itself.\n     * The frequency of an integer is the number of times it appears in the list.\n     * If no such a value exist, return -1.\n     */\n    public int search(List<Integer> lst) {\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        // Count the frequency of each element\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        int result = -1;\n        \n        // Find the greatest integer that meets the criteria\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            if (entry.getKey() <= entry.getValue()) {\n                result = Math.max(result, entry.getKey());\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.search(Arrays.asList(4, 1, 2, 2, 3, 1))); // Expected output: 2\n        System.out.println(solution.search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4))); // Expected output: 3\n        System.out.println(solution.search(Arrays.asList(5, 5, 4, 4, 4))); // Expected output: -1\n        System.out.println(solution.search(Arrays.asList(2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4))); // Expected output: 4\n    }\n}\n"}
{"task_id": "Java/70", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given list of integers, return list in strange order.\n     * Strange sorting, is when you start with the minimum value,\n     * then maximum of the remaining integers, then minimum and so on.\n     *\n     * Examples:\n     * strange_sort_list(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n     * strange_sort_list(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n     * strange_sort_list(Arrays()) == Arrays()\n     */\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        if (lst.isEmpty()) return result;\n\n        // Sort the list to easily find min and max\n        Collections.sort(lst);\n\n        int left = 0;\n        int right = lst.size() - 1;\n\n        while (left <= right) {\n            if (left == right) {\n                result.add(lst.get(left));\n                break;\n            }\n            result.add(lst.get(left++)); // Add minimum value\n            result.add(lst.get(right--)); // Add maximum value\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.strange_sort_list(Arrays.asList(1, 2, 3, 4))); // [1, 4, 2, 3]\n        System.out.println(solution.strange_sort_list(Arrays.asList(5, 5, 5, 5))); // [5, 5, 5, 5]\n        System.out.println(solution.strange_sort_list(Arrays.asList()));           // []\n        System.out.println(solution.strange_sort_list(Arrays.asList(10, -2, 3, 7))); // [-2, 10, 3, 7]\n    }\n}\n"}
{"task_id": "Java/71", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given the lengths of the three sides of a triangle. Return the area of\n     * the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n     * Otherwise return -1.\n     * Three sides make a valid triangle when the sum of any two sides is greater\n     * than the third side.\n     * Example:\n     * triangle_area(3, 4, 5) == 6.00\n     * triangle_area(1, 2, 10) == -1\n     */\n    public double triangle_area(double a, double b, double c) {\n        // Check if the sides form a valid triangle\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        \n        // Calculate the semi-perimeter\n        double s = (a + b + c) / 2.0;\n        \n        // Calculate the area using Heron's formula\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        \n        // Return the area rounded to 2 decimal points\n        return Math.round(area * 100.0) / 100.0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.triangle_area(3, 4, 5)); // Expected output: 6.00\n        System.out.println(solution.triangle_area(1, 2, 10)); // Expected output: -1\n        System.out.println(solution.triangle_area(5, 5, 8)); // Expected output: 12.00\n        System.out.println(solution.triangle_area(7, 10, 5)); // Expected output: -1 (since 7 + 5 <= 10)\n    }\n}\n"}
{"task_id": "Java/72", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function that returns True if the object q will fly, and False otherwise.\n     * The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n     *\n     * Example:\n     * will_it_fly(Arrays.asList(1, 2), 5) -> false\n     * # 1+2 is less than the maximum possible weight, but it's unbalanced.\n     *\n     * will_it_fly(Arrays.asList(3, 2, 3), 1) -> false\n     * # it's balanced, but 3+2+3 is more than the maximum possible weight.\n     *\n     * will_it_fly(Arrays.asList(3, 2, 3), 9) -> true\n     * # 3+2+3 is less than the maximum possible weight, and it's balanced.\n     *\n     * will_it_fly(Arrays.asList(3), 5) -> true\n     * # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean will_it_fly(List<Integer> q, int w) {\n        // Check if the list is a palindrome\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (!q.get(i).equals(q.get(q.size() - 1 - i))) {\n                return false;\n            }\n        }\n\n        // Calculate the sum of elements in the list\n        int sum = q.stream().mapToInt(Integer::intValue).sum();\n\n        // Check if the sum is less than or equal to w\n        return sum <= w;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.will_it_fly(Arrays.asList(1, 2), 5)); // false\n        System.out.println(solution.will_it_fly(Arrays.asList(3, 2, 3), 1)); // false\n        System.out.println(solution.will_it_fly(Arrays.asList(3, 2, 3), 9)); // true\n        System.out.println(solution.will_it_fly(Arrays.asList(3), 5)); // true\n    }\n}\n"}
{"task_id": "Java/73", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given an array arr of integers, find the minimum number of elements that\n     * need to be changed to make the array palindromic. A palindromic array is an array that\n     * is read the same backwards and forwards. In one change, you can change one element to any other element.\n     *\n     * For example:\n     * smallest_change(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n     * smallest_change(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n     * smallest_change(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallest_change(List<Integer> arr) {\n        int left = 0;\n        int right = arr.size() - 1;\n        int changes = 0;\n\n        while (left < right) {\n            if (!arr.get(left).equals(arr.get(right))) {\n                changes++;\n            }\n            left++;\n            right--;\n        }\n\n        return changes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.smallest_change(Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6))); // Output: 4\n        System.out.println(solution.smallest_change(Arrays.asList(1, 2, 3, 4, 3, 2, 2)));   // Output: 1\n        System.out.println(solution.smallest_change(Arrays.asList(1, 2, 3, 2, 1)));         // Output: 0\n    }\n}\n"}
{"task_id": "Java/74", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Write a function that accepts two lists of strings and returns the list that has\n     * total number of chars in the all strings of the list less than the other list.\n     *\n     * if the two lists have the same number of chars, return the first list.\n     */\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        int sum1 = 0, sum2 = 0;\n\n        // Calculate the total number of characters in each list\n        for (String s : lst1) {\n            sum1 += s.length();\n        }\n        for (String s : lst2) {\n            sum2 += s.length();\n        }\n\n        // Compare the sums and return the appropriate list\n        if (sum1 < sum2) {\n            return lst1;\n        } else if (sum2 < sum1) {\n            return lst2;\n        } else {\n            return lst1;  // If they are equal, return the first list\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.total_match(new ArrayList<>(), new ArrayList<>())); // []\n        System.out.println(solution.total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\"))); // [\"hI\", \"Hi\"]\n        System.out.println(solution.total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\"))); // [\"hi\", \"admin\"]\n        System.out.println(solution.total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\"))); // [\"hI\", \"hi\", \"hi\"]\n        System.out.println(solution.total_match(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"))); // [\"4\"]\n    }\n}\n"}
{"task_id": "Java/75", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function that returns true if the given number is the multiplication of 3 prime numbers\n     * and false otherwise.\n     * Knowing that the prime number is less than 100.\n     * Example:\n     * is_multiply_prime(30) == true\n     * 30 = 2 * 3 * 5\n     */\n    public boolean is_multiply_prime(int a) {\n        if (a < 2) return false;\n\n        // List of prime numbers less than 100\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n\n        for (int i = 0; i < primes.length; i++) {\n            int p1 = primes[i];\n            if (a % p1 == 0) {\n                a /= p1;\n                // Check the remaining part of 'a' with the same logic\n                for (int j = i; j < primes.length; j++) {\n                    int p2 = primes[j];\n                    if (a % p2 == 0) {\n                        a /= p2;\n                        // Check the remaining part of 'a' with the same logic\n                        for (int k = j; k < primes.length; k++) {\n                            int p3 = primes[k];\n                            if (a % p3 == 0 && a / p3 == 1) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.is_multiply_prime(30));   // true, 30 = 2 * 3 * 5\n        System.out.println(solution.is_multiply_prime(60));   // false, 60 is not the product of exactly three primes (2 * 2 * 3 * 5)\n        System.out.println(solution.is_multiply_prime(105));  // true, 105 = 3 * 5 * 7\n        System.out.println(solution.is_multiply_prime(49));   // false, 49 is not the product of exactly three primes (7 * 7)\n        System.out.println(solution.is_multiply_prime(2 * 3 * 11)); // true, 66 = 2 * 3 * 11\n    }\n}\n"}
{"task_id": "Java/76", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Your task is to write a function that returns true if a number x is a simple\n     * power of n and false in other cases.\n     * x is a simple power of n if n**int=x\n     * For example:\n     * is_simple_power(1, 4) => true\n     * is_simple_power(2, 2) => true\n     * is_simple_power(8, 2) => true\n     * is_simple_power(3, 2) => false\n     * is_simple_power(3, 1) => false\n     * is_simple_power(5, 3) => false\n     */\n    public boolean is_simple_power(int x, int n) {\n        if (n == 1) {\n            return x == 1;\n        }\n        \n        double power = Math.pow(x, 1.0 / n);\n        return Math.abs(power - Math.round(power)) < 1e-10; // Check if the result is close to an integer\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.is_simple_power(1, 4));   // true\n        System.out.println(solution.is_simple_power(2, 2));   // true\n        System.out.println(solution.is_simple_power(8, 2));   // true\n        System.out.println(solution.is_simple_power(3, 2));   // false\n        System.out.println(solution.is_simple_power(3, 1));   // false\n        System.out.println(solution.is_simple_power(5, 3));   // false\n        System.out.println(solution.is_simple_power(27, 3));  // true\n        System.out.println(solution.is_simple_power(64, 4));  // true\n    }\n}\n"}
{"task_id": "Java/77", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Write a function that takes an integer a and returns true\n     * if this integer is a cube of some integer number.\n     * Note: you may assume the input is always valid.\n     * Examples:\n     * iscube(1) ==> true\n     * iscube(2) ==> false\n     * iscube(-1) ==> true\n     * iscube(64) ==> true\n     * iscube(0) ==> true\n     * iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) return true; // Special case for 0\n        \n        int absA = Math.abs(a);\n        double cubeRoot = Math.cbrt(absA);\n        \n        // Check if the cube root is an integer by comparing it with its rounded value\n        return Math.floor(cubeRoot) == Math.ceil(cubeRoot);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.iscube(1));   // true\n        System.out.println(solution.iscube(2));   // false\n        System.out.println(solution.iscube(-1));  // true\n        System.out.println(solution.iscube(64));  // true\n        System.out.println(solution.iscube(0));   // true\n        System.out.println(solution.iscube(180)); // false\n    }\n}\n"}
{"task_id": "Java/78", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You have been tasked to write a function that receives\n     * a hexadecimal number as a string and counts the number of hexadecimal\n     * digits that are primes (prime number, or a prime, is a natural number\n     * greater than 1 that is not a product of two smaller natural numbers).\n     * Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n     * Prime numbers are 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\n     * So you have to determine a number of the following digits: 2, 3, 5, 7,\n     * B (=decimal 11), D (=decimal 13).\n     * Note: you may assume the input is always correct or empty string,\n     * and symbols A,B,C,D,E,F are always uppercase.\n     * Examples:\n     * For num = \"AB\" the output should be 1.\n     * For num = \"1077E\" the output should be 2.\n     * For num = \"ABED1A33\" the output should be 4.\n     * For num = \"123456789ABCDEF0\" the output should be 6.\n     * For num = \"2020\" the output should be 2.\n     */\n    public int hex_key(String num) {\n        // Define a set of prime hexadecimal digits\n        Set<Character> primes = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        // Count the number of prime hexadecimal digits in the input string\n        int count = 0;\n        for (char c : num.toCharArray()) {\n            if (primes.contains(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.hex_key(\"AB\")); // Expected output: 1\n        System.out.println(solution.hex_key(\"1077E\")); // Expected output: 2\n        System.out.println(solution.hex_key(\"ABED1A33\")); // Expected output: 4\n        System.out.println(solution.hex_key(\"123456789ABCDEF0\")); // Expected output: 6\n        System.out.println(solution.hex_key(\"2020\")); // Expected output: 2\n    }\n}\n"}
{"task_id": "Java/79", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You will be given a number in decimal form and your task is to convert it to\n     * binary format. The function should return a string, with each character representing a binary\n     * number. Each character in the string will be '0' or '1'.\n     *\n     * There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n     * The extra characters are there to help with the format.\n     *\n     * Examples:\n     * decimal_to_binary(15)   // returns \"db1111db\"\n     * decimal_to_binary(32)   // returns \"db100000db\"\n     */\n    public String decimal_to_binary(int decimal) {\n        if (decimal == 0) return \"db0db\";\n        \n        StringBuilder binary = new StringBuilder();\n        while (decimal > 0) {\n            int remainder = decimal % 2;\n            binary.insert(0, remainder);\n            decimal /= 2;\n        }\n        \n        return \"db\" + binary.toString() + \"db\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.decimal_to_binary(15));   // Expected: db1111db\n        System.out.println(solution.decimal_to_binary(32));   // Expected: db100000db\n        System.out.println(solution.decimal_to_binary(0));    // Expected: db0db\n        System.out.println(solution.decimal_to_binary(45));   // Expected: db101101db\n        System.out.println(solution.decimal_to_binary(255));  // Expected: db11111111db\n    }\n}\n"}
{"task_id": "Java/80", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You are given a string s.\n     * Your task is to check if the string is happy or not.\n     * A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n     * For example:\n     * is_happy(a) => false\n     * is_happy(aa) => false\n     * is_happy(abcd) => true\n     * is_happy(aabb) => false\n     * is_happy(adb) => true\n     * is_happy(xyy) => false\n     */\n    public boolean is_happy(String s) {\n        if (s.length() < 3) return false;\n        \n        for (int i = 0; i <= s.length() - 3; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || \n                s.charAt(i) == s.charAt(i + 2) || \n                s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.is_happy(\"a\"));       // Output: false\n        System.out.println(solution.is_happy(\"aa\"));      // Output: false\n        System.out.println(solution.is_happy(\"abcd\"));    // Output: true\n        System.out.println(solution.is_happy(\"aabb\"));    // Output: false\n        System.out.println(solution.is_happy(\"adb\"));     // Output: true\n        System.out.println(solution.is_happy(\"xyy\"));     // Output: false\n        System.out.println(solution.is_happy(\"abcde\"));   // Output: true\n        System.out.println(solution.is_happy(\"abca\"));    // Output: true\n        System.out.println(solution.is_happy(\"abccba\"));  // Output: false\n    }\n}\n"}
{"task_id": "Java/81", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * It is the last week of the semester and the teacher has to give the grades\n     * to students. The teacher has given a list of GPAs for some students and you have to write\n     * a function that can output a list of letter grades using the following table:\n     *\n     * GPA       |    Letter grade\n     * 4.0                A+\n     * > 3.7              A\n     * > 3.3              A-\n     * > 3.0              B+\n     * > 2.7              B\n     * > 2.3              B-\n     * > 2.0              C+\n     * > 1.7              C\n     * > 1.3              C-\n     * > 1.0              D+\n     * > 0.7              D\n     * > 0.0              D-\n     * 0.0                E\n     *\n     * Example:\n     * numerical_letter_grade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        \n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n\n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Double> grades1 = Arrays.asList(4.0, 3, 1.7, 2, 3.5);\n        System.out.println(solution.numerical_letter_grade(grades1)); // Expected: [A+, B, C-, C, A-]\n\n        List<Double> grades2 = Arrays.asList(4.0, 3.8, 3.2, 2.9, 2.6, 1.5, 1.2, 0.8);\n        System.out.println(solution.numerical_letter_grade(grades2)); // Expected: [A+, A, A-, B+, B-, C+, C-, D]\n\n        List<Double> grades3 = Arrays.asList(4.0, 0.0, -1.0);\n        System.out.println(solution.numerical_letter_grade(grades3)); // Expected: [A+, E]\n    }\n}\n"}
{"task_id": "Java/82", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function that takes a string and returns true if the string\n     * length is a prime number or false otherwise\n     *\n     * Examples:\n     * - prime_length(\"Hello\") == true\n     * - prime_length(\"abcdcba\") == true\n     * - prime_length(\"kittens\") == true\n     * - prime_length(\"orange\") == false\n     */\n    public boolean prime_length(String string) {\n        int length = string.length();\n        return isPrime(length);\n    }\n\n    private boolean isPrime(int number) {\n        if (number <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= number; i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.prime_length(\"Hello\"));   // Expected: true\n        System.out.println(solution.prime_length(\"abcdcba\")); // Expected: true\n        System.out.println(solution.prime_length(\"kittens\")); // Expected: true\n        System.out.println(solution.prime_length(\"orange\"));  // Expected: false\n        System.out.println(solution.prime_length(\"a\"));       // Expected: false\n        System.out.println(solution.prime_length(\"ab\"));      // Expected: false\n        System.out.println(solution.prime_length(\"abcde\"));   // Expected: true\n    }\n}\n"}
{"task_id": "Java/83", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given a positive integer n, return the count of the numbers of n-digit\n     positive integers that start or end with 1.\n     */\n    public int starts_one_ends(int n) {\n        if (n == 1) {\n            // If n is 1, there's only one digit and it must be 1 to satisfy both conditions.\n            return 1;\n        } else {\n            // Total count of n-digit numbers that start or end with 1\n            long total = 2 * (long)Math.pow(10, n - 1);\n            // Subtract the count of n-digit numbers that both start and end with 1 to avoid double-counting.\n            long overlap = (n > 1) ? (long)Math.pow(10, n - 2) : 0;\n            return (int)(total - overlap);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.starts_one_ends(1)); // Expected output: 1\n        System.out.println(solution.starts_one_ends(2)); // Expected output: 18 (10-19, 21, 31, ..., 91)\n        System.out.println(solution.starts_one_ends(3)); // Expected output: 180 (100-199, 210, 211, ..., 991)\n        System.out.println(solution.starts_one_ends(4)); // Expected output: 1800\n    }\n}\n"}
{"task_id": "Java/84", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     Given a positive integer N, return in binary the total sum of its digits.\n\n     Example\n         For N = 1000, the sum of digits will be 1 the output should be \"1\".\n         For N = 150, the sum of digits will be 6 the output should be \"110\".\n         For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n     Variables:\n         @N integer\n              Constraints: 0 <= N <= 10000.\n     Output:\n          a string of binary number\n      */\n    public String solve(int N) {\n        int sum = 0;\n        while (N > 0) {\n            sum += N % 10;\n            N /= 10;\n        }\n        return Integer.toBinaryString(sum);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.solve(1000)); // Expected output: \"1\"\n        System.out.println(solution.solve(150));  // Expected output: \"110\"\n        System.out.println(solution.solve(147));  // Expected output: \"1100\"\n        System.out.println(solution.solve(9999)); // Expected output: \"11110001110\"\n    }\n}\n"}
{"task_id": "Java/85", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a non-empty list of integers lst, add the even elements that are at odd indices.\n     *\n     * Examples:\n     * - add(Arrays.asList(4, 2, 6, 7)) should return 2 (since only 2 is an even element at an odd index)\n     */\n    public int add(List<Integer> lst) {\n        if (lst == null || lst.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be null or empty\");\n        }\n\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) { // Start from index 1 and increment by 2\n            Integer element = lst.get(i);\n            if (element % 2 == 0) {\n                sum += element;\n            }\n        }\n\n        return sum;\n    }\n}\n\npublic class TestSolution {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.add(Arrays.asList(4, 2, 6, 7))); // Expected output: 2\n        System.out.println(solution.add(Arrays.asList(1, 3, 5, 7, 9))); // Expected output: 0 (no even elements at odd indices)\n        System.out.println(solution.add(Arrays.asList(8, 4, 2, 6, 10, 12))); // Expected output: 12 (only 12 is an even element at an odd index)\n        System.out.println(solution.add(Arrays.asList(-2, -4, -6, -8))); // Expected output: -4 (-4 is the only even element at an odd index)\n    }\n}\n"}
{"task_id": "Java/86", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function that takes a string and returns an ordered version of it.\n     * Ordered version of string, is a string where all words (separated by space)\n     * are replaced by a new word where all the characters arranged in\n     * ascending order based on ascii value.\n     * Note: You should keep the order of words and blank spaces in the sentence.\n     *\n     * For example:\n     * anti_shuffle(\"Hi\") returns \"Hi\"\n     * anti_shuffle(\"hello\") returns \"ehllo\"\n     * anti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String anti_shuffle(String s) {\n        if (s == null || s.isEmpty()) {\n            return s;\n        }\n\n        StringBuilder result = new StringBuilder();\n        int wordStartIndex = 0;\n\n        for (int i = 0; i <= s.length(); i++) {\n            if (i == s.length() || s.charAt(i) == ' ') {\n                String word = s.substring(wordStartIndex, i);\n                char[] chars = word.toCharArray();\n                Arrays.sort(chars);\n                result.append(new String(chars));\n                if (i < s.length()) { // Append the space after each word\n                    result.append(' ');\n                }\n                wordStartIndex = i + 1;\n            }\n        }\n\n        return result.toString().trim(); // Trim to remove trailing spaces\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.anti_shuffle(\"Hi\")); // Expected: \"Hi\"\n        System.out.println(solution.anti_shuffle(\"hello\")); // Expected: \"ehllo\"\n        System.out.println(solution.anti_shuffle(\"Hello World!!!\")); // Expected: \"Hello !!!Wdlor\"\n        System.out.println(solution.anti_shuffle(\"Programming is fun!\")); // Expected: \"Pamgimnig is fnu!\"\n    }\n}\n"}
{"task_id": "Java/87", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given a 2 dimensional data, as a nested lists,\n     * which is similar to matrix, however, unlike matrices,\n     * each row may contain a different number of columns.\n     * Given lst, and integer x, find integers x in the list,\n     * and return list of lists, [[x1, y1], [x2, y2] ...] such that\n     * each list is a coordinate - (row, columns), starting with 0.\n     * Sort coordinates initially by rows in ascending order.\n     * Also, sort coordinates of the row by columns in descending order.\n     *\n     * Examples:\n     * get_row([\n     *   [1,2,3,4,5,6],\n     *   [1,2,3,4,1,6],\n     *   [1,2,3,4,5,1]\n     * ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n     * get_row([], 1) == []\n     * get_row([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j).equals(x)) {\n                    result.add(Arrays.asList(i, j));\n                }\n            }\n        }\n\n        // Sort by rows in ascending order\n        Collections.sort(result, new Comparator<List<Integer>>() {\n            @Override\n            public int compare(List<Integer> o1, List<Integer> o2) {\n                return o1.get(0).compareTo(o2.get(0));\n            }\n        });\n\n        // For each row, sort coordinates by columns in descending order\n        for (List<Integer> coord : result) {\n            if (coord.size() == 2) { // Ensure the list has exactly two elements\n                Collections.sort(coord, new Comparator<Integer>() {\n                    @Override\n                    public int compare(Integer o1, Integer o2) {\n                        return o2.compareTo(o1);\n                    }\n                });\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<List<Integer>> lst1 = Arrays.asList(\n            Arrays.asList(1, 2, 3, 4, 5, 6),\n            Arrays.asList(1, 2, 3, 4, 1, 6),\n            Arrays.asList(1, 2, 3, 4, 5, 1)\n        );\n        System.out.println(solution.get_row(lst1, 1)); // Expected: [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n\n        List<List<Integer>> lst2 = new ArrayList<>();\n        System.out.println(solution.get_row(lst2, 1)); // Expected: []\n\n        List<List<Integer>> lst3 = Arrays.asList(\n            new ArrayList<>(),\n            Arrays.asList(1),\n            Arrays.asList(1, 2, 3)\n        );\n        System.out.println(solution.get_row(lst3, 3)); // Expected: [[2, 2]]\n    }\n}\n"}
{"task_id": "Java/88", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n\n    /**\n     * Given an array of non-negative integers, return a copy of the given array after sorting,\n     * you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n     * or sort it in descending order if the sum( first index value, last index value) is even.\n     *\n     * Note:\n     * * don't change the given array.\n     */\n    public List<Integer> sort_array(List<Integer> array) {\n        if (array == null || array.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        int sum = array.get(0) + array.get(array.size() - 1);\n        List<Integer> sortedArray = new ArrayList<>(array);\n\n        if (sum % 2 == 0) {\n            Collections.sort(sortedArray, Collections.reverseOrder());\n        } else {\n            Collections.sort(sortedArray);\n        }\n\n        return sortedArray;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sort_array(Arrays.asList())); // []\n        System.out.println(solution.sort_array(Arrays.asList(5))); // [5]\n        System.out.println(solution.sort_array(Arrays.asList(2, 4, 3, 0, 1, 5))); // [0, 1, 2, 3, 4, 5]\n        System.out.println(solution.sort_array(Arrays.asList(2, 4, 3, 0, 1, 5, 6))); // [6, 5, 4, 3, 2, 1, 0]\n\n        // Additional test cases\n        System.out.println(solution.sort_array(Arrays.asList(1, 3, 5, 7, 9))); // [1, 3, 5, 7, 9]\n        System.out.println(solution.sort_array(Arrays.asList(10, 8, 6, 4, 2))); // [10, 8, 6, 4, 2]\n    }\n}\n"}
{"task_id": "Java/89", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Create a function encrypt that takes a string as an argument and\n     * returns a string encrypted with the alphabet being rotated.\n     * The alphabet should be rotated in a manner such that the letters\n     * shift down by two multiplied to two places.\n     * For example:\n     * encrypt(\"hi\") returns \"lm\"\n     * encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n     * encrypt(\"gf\") returns \"kj\"\n     * encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        StringBuilder encrypted = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                char base = Character.isUpperCase(c) ? 'A' : 'a';\n                int offset = ((c - base + 4) % 26);\n                encrypted.append((char) (base + offset));\n            } else {\n                encrypted.append(c);\n            }\n        }\n        return encrypted.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.encrypt(\"hi\"));       // Expected: \"lm\"\n        System.out.println(solution.encrypt(\"asdfghjkl\")); // Expected: \"ewhjklnop\"\n        System.out.println(solution.encrypt(\"gf\"));       // Expected: \"kj\"\n        System.out.println(solution.encrypt(\"et\"));       // Expected: \"ix\"\n        System.out.println(solution.encrypt(\"Hello, World!\")); // Expected: \"Lipps, Asvph!\"\n    }\n}\n"}
{"task_id": "Java/90", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given a list of integers.\n     * Write a function next_smallest() that returns the 2nd smallest element of the list.\n     * Return null if there is no such element.\n     *\n     * @param lst The input list of integers\n     * @return Optional containing the 2nd smallest integer, or Optional.empty() if not available\n     */\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        // Remove duplicates and sort the list to find the second smallest element\n        Set<Integer> uniqueElements = new TreeSet<>(lst);\n        \n        // Check if there are at least 2 unique elements\n        if (uniqueElements.size() < 2) {\n            return Optional.empty();\n        }\n        \n        // Return the second element in the sorted set\n        Integer[] arr = uniqueElements.toArray(new Integer[0]);\n        return Optional.of(arr[1]);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.next_smallest(Arrays.asList(1, 2, 3, 4, 5))); // Expected: Optional[2]\n        System.out.println(solution.next_smallest(Arrays.asList(5, 1, 4, 3, 2))); // Expected: Optional[2]\n        System.out.println(solution.next_smallest(Arrays.asList()));             // Expected: Optional.empty\n        System.out.println(solution.next_smallest(Arrays.asList(1, 1)));         // Expected: Optional.empty\n        System.out.println(solution.next_smallest(Arrays.asList(7, 5, 3, 9, 2))); // Expected: Optional[3]\n    }\n}\n"}
{"task_id": "Java/91", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You'll be given a string of words, and your task is to count the number\n     * of boredoms. A boredom is a sentence that starts with the word \"I\".\n     * Sentences are delimited by '.', '?' or '!'.\n     *\n     * For example:\n     * >>> is_bored(\"Hello world\")\n     * 0\n     * >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n     * 1\n     */\n    public int is_bored(String S) {\n        if (S == null || S.isEmpty()) return 0;\n\n        String[] sentences = S.split(\"[.?!]\");\n        int boredomCount = 0;\n\n        for (String sentence : sentences) {\n            // Trim leading and trailing spaces to handle cases like \"I love this weather. \"\n            sentence = sentence.trim();\n            if (!sentence.isEmpty() && sentence.startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n\n        return boredomCount;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.is_bored(\"Hello world\")); // Expected output: 0\n        System.out.println(solution.is_bored(\"The sky is blue. The sun is shining. I love this weather\")); // Expected output: 1\n        System.out.println(solution.is_bored(\"I am bored. Are you? Yes, I am!\")); // Expected output: 2\n        System.out.println(solution.is_bored(\"No boring sentences here.\")); // Expected output: 0\n        System.out.println(solution.is_bored(\"I love Java. I also enjoy Python. I think C++ is fun too.\")); // Expected output: 3\n    }\n}\n"}
{"task_id": "Java/92", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Create a function that takes 3 numbers.\n     * Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n     * Returns false in any other cases.\n     *\n     * Examples:\n     * - any_int(5, 2, 7) -> true\n     * - any_int(3, 2, 2) -> false\n     * - any_int(3, -2, 1) -> true\n     * - any_int(3.6, -2.2, 2) -> false\n     */\n    public boolean any_int(Object x, Object y, Object z) {\n        // Check if all inputs are integers\n        if (!(x instanceof Integer && y instanceof Integer && z instanceof Integer)) {\n            return false;\n        }\n\n        int a = (Integer) x;\n        int b = (Integer) y;\n        int c = (Integer) z;\n\n        // Check if any number is the sum of the other two\n        return a == b + c || b == a + c || c == a + b;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.any_int(5, 2, 7));   // true\n        System.out.println(solution.any_int(3, 2, 2));   // false\n        System.out.println(solution.any_int(3, -2, 1));  // true\n        System.out.println(solution.any_int(3.6, -2.2, 2)); // false\n        System.out.println(solution.any_int(0, 0, 0));   // true\n    }\n}\n"}
{"task_id": "Java/93", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \n    /**\n     * Write a function that takes a message, and encodes in such a way that it swaps case of all letters,\n     * replaces all vowels in the message with the letter that appears 2 places ahead of that vowel in the english alphabet.\n     * Assume only letters.\n     *\n     * Examples:\n     * >>> encode(\"test\")\n     * \"TGST\"\n     * >>> encode(\"This is a message\")\n     * \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        StringBuilder encodedMessage = new StringBuilder();\n        \n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                // Swap case\n                char swappedCaseChar = Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c);\n                \n                // Check if the character is a vowel and replace it with the corresponding character 2 places ahead\n                switch (swappedCaseChar) {\n                    case 'a':\n                        encodedMessage.append('C');\n                        break;\n                    case 'e':\n                        encodedMessage.append('G');\n                        break;\n                    case 'i':\n                        encodedMessage.append('K');\n                        break;\n                    case 'o':\n                        encodedMessage.append('Q');\n                        break;\n                    case 'u':\n                        encodedMessage.append('W');\n                        break;\n                    default:\n                        // If it's not a vowel, just append the swapped case character\n                        encodedMessage.append(swappedCaseChar);\n                }\n            } else {\n                // Non-letter characters are appended as is\n                encodedMessage.append(c);\n            }\n        }\n        \n        return encodedMessage.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.encode(\"test\"));  // Expected: \"TGST\"\n        System.out.println(solution.encode(\"This is a message\"));  // Expected: \"tHKS KS C MGSSCGG\"\n        System.out.println(solution.encode(\"Hello World!\"));  // Expected: \"hKLLQ wOrLD!\"\n    }\n}\n"}
{"task_id": "Java/94", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You are given a list of integers.\n     * You need to find the largest prime value and return the sum of its digits.\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        if (lst == null || lst.isEmpty()) {\n            return 0;\n        }\n\n        int maxPrime = -1;\n        for (int num : lst) {\n            if (isPrime(num)) {\n                maxPrime = Math.max(maxPrime, num);\n            }\n        }\n\n        if (maxPrime == -1) {\n            return 0; // No prime number found\n        }\n\n        return sumOfDigits(maxPrime);\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> lst1 = Arrays.asList(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3);\n        System.out.println(solution.skjkasdkd(lst1)); // Output: 10\n\n        List<Integer> lst2 = Arrays.asList(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1);\n        System.out.println(solution.skjkasdkd(lst2)); // Output: 25\n\n        List<Integer> lst3 = Arrays.asList(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3);\n        System.out.println(solution.skjkasdkd(lst3)); // Output: 13\n\n        List<Integer> lst4 = Arrays.asList(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6);\n        System.out.println(solution.skjkasdkd(lst4)); // Output: 11\n\n        List<Integer> lst5 = Arrays.asList(0, 81, 12, 3, 1, 21);\n        System.out.println(solution.skjkasdkd(lst5)); // Output: 3\n\n        List<Integer> lst6 = Arrays.asList(0, 8, 1, 2, 1, 7);\n        System.out.println(solution.skjkasdkd(lst6)); // Output: 7\n    }\n}\n"}
{"task_id": "Java/95", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a map, return True if all keys are strings and all keys are in lower case or in upper case, else return False.\n     * The function should return False is the given map is empty.\n     */\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        boolean allLowerCase = true;\n        boolean allUpperCase = true;\n\n        for (Object key : dict.keySet()) {\n            String strKey = key.toString();\n            if (!strKey.equals(key)) { // Check if the key is a string\n                return false;\n            }\n            if (!strKey.equals(strKey.toLowerCase())) {\n                allLowerCase = false;\n            }\n            if (!strKey.equals(strKey.toUpperCase())) {\n                allUpperCase = false;\n            }\n        }\n\n        return allLowerCase || allUpperCase;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.check_dict_case(Map.of(\"a\", \"apple\", \"b\", \"banana\"))); // True\n        System.out.println(solution.check_dict_case(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"banana\"))); // False\n        System.out.println(solution.check_dict_case(Map.of(\"a\", \"apple\", 8, \"banana\", \"a\", \"apple\"))); // False\n        System.out.println(solution.check_dict_case(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\"))); // False\n        System.out.println(solution.check_dict_case(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))); // True\n    }\n}\n"}
{"task_id": "Java/96", "generation": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Solution {\n    /**\n     * Implement a function that takes an non-negative integer and returns an array of the first n\n     * integers that are prime numbers and less than n.\n     *\n     * @param n The upper limit (non-inclusive) to find prime numbers up to.\n     * @return A list containing the prime numbers less than n.\n     */\n    public List<Integer> count_up_to(int n) {\n        if (n <= 2) return new ArrayList<>();\n        \n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    /**\n     * Helper method to check if a number is prime.\n     *\n     * @param num The number to check.\n     * @return true if the number is prime, false otherwise.\n     */\n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.count_up_to(5));   // [2,3]\n        System.out.println(solution.count_up_to(11));  // [2,3,5,7]\n        System.out.println(solution.count_up_to(0));   // []\n        System.out.println(solution.count_up_to(20));  // [2,3,5,7,11,13,17,19]\n        System.out.println(solution.count_up_to(1));   // []\n        System.out.println(solution.count_up_to(18));  // [2,3,5,7,11,13,17]\n    }\n}\n"}
{"task_id": "Java/97", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Complete the function that takes two integers and returns\n     * the product of their unit digits.\n     * Assume the input is always valid.\n     * Examples:\n     * multiply(148, 412) should return 16.\n     * multiply(19, 28) should return 72.\n     * multiply(2020, 1851) should return 0.\n     * multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        // Extract the unit digits of both numbers\n        int unitDigitA = Math.abs(a % 10);\n        int unitDigitB = Math.abs(b % 10);\n\n        // Return the product of the unit digits\n        return unitDigitA * unitDigitB;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.multiply(148, 412)); // Expected output: 16\n        System.out.println(solution.multiply(19, 28));   // Expected output: 72\n        System.out.println(solution.multiply(2020, 1851)); // Expected output: 0\n        System.out.println(solution.multiply(14, -15));  // Expected output: 20\n    }\n}\n"}
{"task_id": "Java/98", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given a string s, count the number of uppercase vowels in even indices.\n     *\n     * For example:\n     * count_upper(\"aBCdEf\") returns 1\n     * count_upper(\"abcdefg\") returns 0\n     * count_upper(\"dBBE\") returns 0\n     */\n    public int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.count_upper(\"aBCdEf\")); // Expected output: 1\n        System.out.println(solution.count_upper(\"abcdefg\")); // Expected output: 0\n        System.out.println(solution.count_upper(\"dBBE\")); // Expected output: 0\n        System.out.println(solution.count_upper(\"AeIoUaEiOu\")); // Expected output: 5\n        System.out.println(solution.count_upper(\"zZzZ\")); // Expected output: 2\n    }\n}\n"}
{"task_id": "Java/99", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Create a function that takes a value (string) representing a number and returns the closest integer to it.\n     * If the number is equidistant from two integers, round it away from zero.\n     *\n     * Examples:\n     * >>> closest_integer(\"10\")\n     * 10\n     * >>> closest_integer(\"15.3\")\n     * 15\n     * >>> closest_integer(\"14.5\")\n     * 15\n     * >>> closest_integer(\"-14.5\")\n     * -15\n     */\n    public int closest_integer(String value) {\n        double num = Double.parseDouble(value);\n        double floorValue = Math.floor(num);\n        double ceilValue = Math.ceil(num);\n\n        if (num - floorValue == 0.5 || ceilValue - num == 0.5) {\n            return num > 0 ? (int) ceilValue : (int) floorValue;\n        } else {\n            return (int) Math.round(num);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.closest_integer(\"10\"));   // Expected output: 10\n        System.out.println(solution.closest_integer(\"15.3\")); // Expected output: 15\n        System.out.println(solution.closest_integer(\"14.5\")); // Expected output: 15\n        System.out.println(solution.closest_integer(\"-14.5\"));// Expected output: -15\n        System.out.println(solution.closest_integer(\"0.5\"));  // Expected output: 1\n        System.out.println(solution.closest_integer(\"-0.5\")); // Expected output: -1\n    }\n}\n"}
{"task_id": "Java/100", "generation": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Solution {\n    /**\n     * Given a positive integer n, you have to make a pile of n levels of stones.\n     * The first level has n stones.\n     * The number of stones in the next level is:\n     * - the next odd number if n is odd.\n     * - the next even number if n is even.\n     * Return the number of stones in each level in a list, where element at index\n     * i represents the number of stones in the level (i+1).\n     *\n     * Examples:\n     * >>> make_a_pile(3)\n     * [3, 5, 7]\n     */\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 0; i < n; i++) {\n            int stones = n + 2 * i;\n            if ((n & 1) == 1 && (i & 1) == 0) { // If n is odd and i is even\n                stones += 1; // Make it the next odd number\n            } else if ((n & 1) == 0 && (i & 1) == 1) { // If n is even and i is odd\n                stones -= 1; // Make it the next even number\n            }\n            result.add(stones);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.make_a_pile(3)); // Expected: [3, 5, 7]\n        System.out.println(solution.make_a_pile(4)); // Expected: [4, 6, 8, 10]\n        System.out.println(solution.make_a_pile(1)); // Expected: [1]\n        System.out.println(solution.make_a_pile(2)); // Expected: [2, 4]\n    }\n}\n"}
{"task_id": "Java/101", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You will be given a string of words separated by commas or spaces. Your task is\n     * to split the string into words and return an array of the words.\n     *\n     * For example:\n     * words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n     * words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six])\n     */\n    public List<String> words_string(String s) {\n        // Split the string by commas and spaces\n        String[] splitWords = s.split(\"[,\\\\s]+\");\n        \n        // Convert the array to a list and return it\n        return Arrays.asList(splitWords);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<String> result1 = solution.words_string(\"Hi, my name is John\");\n        System.out.println(result1.equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\")) ? \"Test 1 Passed\" : \"Test 1 Failed\");\n\n        List<String> result2 = solution.words_string(\"One, two, three, four, five, six\");\n        System.out.println(result2.equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\")) ? \"Test 2 Passed\" : \"Test 2 Failed\");\n\n        List<String> result3 = solution.words_string(\"Hello,world this is a test\");\n        System.out.println(result3.equals(Arrays.asList(\"Hello\", \"world\", \"this\", \"is\", \"a\", \"test\")) ? \"Test 3 Passed\" : \"Test 3 Failed\");\n\n        List<String> result4 = solution.words_string(\"\");\n        System.out.println(result4.equals(Arrays.asList()) ? \"Test 4 Passed\" : \"Test 4 Failed\");\n    }\n}\n"}
{"task_id": "Java/102", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * This function takes two positive numbers x and y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.\n     *\n     * For example:\n     * choose_num(12, 15) = 14\n     * choose_num(13, 12) = -1\n     */\n    public int choose_num(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        \n        // Start from the end of the range and move backwards to find the biggest even number\n        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                return i;\n            }\n        }\n        \n        return -1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.choose_num(12, 15)); // Expected output: 14\n        System.out.println(solution.choose_num(13, 12)); // Expected output: -1\n        System.out.println(solution.choose_num(8, 10));  // Expected output: 10\n        System.out.println(solution.choose_num(7, 7));   // Expected output: -1 (since there's no even number in the range)\n        System.out.println(solution.choose_num(24, 30)); // Expected output: 30\n    }\n}\n"}
{"task_id": "Java/103", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given two positive integers n and m, and your task is to compute the\n     * average of the integers from n through m (including n and m).\n     * Round the answer to the nearest integer and convert that to binary.\n     * If n is greater than m, return -1.\n     * Example:\n     * rounded_avg(1, 5) => \"11\"\n     * rounded_avg(7, 5) => -1\n     * rounded_avg(10, 20) => \"1111\"\n     * rounded_avg(20, 33) => \"11011\"\n     */\n    public Object rounded_avg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n\n        long sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        \n        double average = sum / ((double)(m - n + 1));\n        int roundedAverage = (int)Math.round(average);\n        return Integer.toBinaryString(roundedAverage);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.rounded_avg(1, 5));   // Output: \"11\"\n        System.out.println(solution.rounded_avg(7, 5));   // Output: -1\n        System.out.println(solution.rounded_avg(10, 20)); // Output: \"1111\"\n        System.out.println(solution.rounded_avg(20, 33)); // Output: \"11011\"\n    }\n}\n"}
{"task_id": "Java/104", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given a list of positive integers x. return a sorted list of all\n     * elements that hasn't any even digit.\n     *\n     * Note: Returned list should be sorted in increasing order.\n     *\n     * For example:\n     * >>> unique_digits(Arrays.asList(15, 33, 1422, 1))\n     * [1, 15, 33]\n     * >>> unique_digits(Arrays.asList(152, 323, 1422, 10))\n     * []\n     */\n    public List<Integer> unique_digits(List<Integer> x) {\n        return x.stream()\n                .filter(this::hasNoEvenDigits)\n                .sorted()\n                .collect(Collectors.toList());\n    }\n\n    private boolean hasNoEvenDigits(int number) {\n        while (number > 0) {\n            int digit = number % 10;\n            if (digit % 2 == 0) {\n                return false;\n            }\n            number /= 10;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.unique_digits(Arrays.asList(15, 33, 1422, 1))); // [1, 15, 33]\n        System.out.println(solution.unique_digits(Arrays.asList(152, 323, 1422, 10))); // []\n        System.out.println(solution.unique_digits(Arrays.asList(1, 3, 5, 7, 9))); // [1, 3, 5, 7, 9]\n        System.out.println(solution.unique_digits(Arrays.asList(2, 4, 6, 8))); // []\n    }\n}\n"}
{"task_id": "Java/105", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n     * reverse the resulting array, and then replace each digit by its corresponding name from\n     * \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n     *\n     * @param arr input list of integers\n     * @return a list of strings representing the names of the digits in reverse sorted order\n     */\n    public List<String> by_length(List<Integer> arr) {\n        // Filter out numbers not between 1 and 9 inclusive\n        List<Integer> filtered = arr.stream()\n                                     .filter(num -> num >= 1 && num <= 9)\n                                     .sorted()\n                                     .collect(Collectors.toList());\n        \n        // Reverse the list\n        Collections.reverse(filtered);\n        \n        // Map each digit to its corresponding name\n        List<String> result = filtered.stream()\n                                      .map(num -> switch (num) {\n                                          case 1 -> \"One\";\n                                          case 2 -> \"Two\";\n                                          case 3 -> \"Three\";\n                                          case 4 -> \"Four\";\n                                          case 5 -> \"Five\";\n                                          case 6 -> \"Six\";\n                                          case 7 -> \"Seven\";\n                                          case 8 -> \"Eight\";\n                                          case 9 -> \"Nine\";\n                                          default -> \"\";\n                                      })\n                                      .collect(Collectors.toList());\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.by_length(Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3))); // [Eight, Five, Four, Three, Two, Two, One, One]\n        System.out.println(solution.by_length(Arrays.asList())); // []\n        System.out.println(solution.by_length(Arrays.asList(1, -1, 55))); // [One]\n        System.out.println(solution.by_length(Arrays.asList(9, 7, 3, 2, 4, 8, 6, 5, 1))); // [Nine, Eight, Seven, Six, Five, Four, Three, Two, One]\n    }\n}\n"}
{"task_id": "Java/106", "generation": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Solution {\n\n    /**\n     * Implement the function f that takes n as a parameter,\n     * and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n     * or the sum of numbers from 1 to i otherwise.\n     * i starts from 1.\n     * The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n     *\n     * @param n the size of the list to be returned\n     * @return a list where each element at index i follows the specified rules\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                // Calculate factorial of even i\n                int factorial = calculateFactorial(i);\n                result.add(factorial);\n            } else {\n                // Calculate sum from 1 to odd i\n                int sum = calculateSumToI(i);\n                result.add(sum);\n            }\n        }\n        \n        return result;\n    }\n\n    private int calculateFactorial(int n) {\n        if (n == 0 || n == 1) {\n            return 1;\n        }\n        int factorial = 1;\n        for (int i = 2; i <= n; i++) {\n            factorial *= i;\n        }\n        return factorial;\n    }\n\n    private int calculateSumToI(int n) {\n        return n * (n + 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.f(5)); // Expected output: [1, 2, 6, 24, 15]\n        System.out.println(solution.f(3)); // Expected output: [1, 2, 3]\n        System.out.println(solution.f(0)); // Expected output: []\n    }\n}\n"}
{"task_id": "Java/107", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a positive integer n, return a tuple that has the number of even and odd\n     * integer palindromes that fall within the range(1, n), inclusive.\n     *\n     * @param n The upper limit (inclusive) to check for palindromes.\n     * @return A List containing two elements: [number_of_even_palindromes, number_of_odd_palindromes]\n     */\n    public List<Integer> even_odd_palindrome(int n) {\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        return Arrays.asList(evenCount, oddCount);\n    }\n\n    /**\n     * Helper method to check if a number is a palindrome.\n     *\n     * @param num The number to check.\n     * @return true if the number is a palindrome, false otherwise.\n     */\n    private boolean isPalindrome(int num) {\n        String str = Integer.toString(num);\n        int left = 0;\n        int right = str.length() - 1;\n\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.even_odd_palindrome(3));  // Output: [1, 2]\n        System.out.println(solution.even_odd_palindrome(12)); // Output: [4, 6]\n        System.out.println(solution.even_odd_palindrome(10)); // Output: [5, 5]\n    }\n}\n"}
{"task_id": "Java/108", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Write a function count_nums which takes an array of integers and returns\n     * the number of elements which has a sum of digits > 0.\n     * If a number is negative, then its first signed digit will be negative:\n     * e.g. -123 has signed digits -1, 2, and 3.\n     */\n    public int count_nums(List<Integer> arr) {\n        int count = 0;\n        for (int num : arr) {\n            if (sum_of_digits(num) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private int sum_of_digits(int num) {\n        boolean isNegative = num < 0;\n        int sum = 0;\n        while (num != 0) {\n            int digit = Math.abs(num % 10);\n            sum += digit;\n            num /= 10;\n        }\n        return isNegative ? -digit : sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.count_nums(Arrays.asList())); // Expected output: 0\n        System.out.println(solution.count_nums(Arrays.asList(-1, 11, -11))); // Expected output: 1\n        System.out.println(solution.count_nums(Arrays.asList(1, 1, 2))); // Expected output: 3\n    }\n}\n"}
{"task_id": "Java/109", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N]. The\n     * numbers in the array will be randomly ordered. Your task is to determine if\n     * it is possible to get an array sorted in non-decreasing order by performing\n     * the following operation on the given array:\n     *      You are allowed to perform right shift operation any number of times.\n     *\n     * One right shift operation means shifting all elements of the array by one\n     * position in the right direction. The last element of the array will be moved to\n     * the starting position in the array i.e. 0th index.\n     *\n     * If it is possible to obtain the sorted array by performing the above operation\n     * then return true else return False.\n     * If the given array is empty then return true.\n     *\n     * Note: The given list is guaranteed to have unique elements.\n     */\n    public boolean move_one_ball(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        int n = arr.size();\n        for (int i = 0; i < n - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                // Check if the array can be sorted by a single right shift\n                List<Integer> shiftedArr = new ArrayList<>(arr);\n                Collections.rotate(shiftedArr, 1);\n                for (int j = 0; j < n - 1; j++) {\n                    if (shiftedArr.get(j) > shiftedArr.get(j + 1)) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n\n        // If no out-of-order elements are found, the array is already sorted\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.move_one_ball(Arrays.asList(3, 4, 5, 1, 2))); // true\n        System.out.println(solution.move_one_ball(Arrays.asList(3, 5, 4, 1, 2))); // false\n        System.out.println(solution.move_one_ball(Arrays.asList()));              // true\n        System.out.println(solution.move_one_ball(Arrays.asList(1, 2, 3, 4, 5))); // true\n        System.out.println(solution.move_one_ball(Arrays.asList(5, 1, 2, 3, 4))); // true\n        System.out.println(solution.move_one_ball(Arrays.asList(1, 3, 2, 4, 5))); // false\n    }\n}\n"}
{"task_id": "Java/110", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * In this problem, you will implement a function that takes two lists of numbers,\n     * and determines whether it is possible to perform an exchange of elements\n     * between them to make lst1 a list of only even numbers.\n     * There is no limit on the number of exchanged elements between lst1 and lst2.\n     * If it is possible to exchange elements between the lst1 and lst2 to make\n     * all the elements of lst1 to be even, return \"YES\".\n     * Otherwise, return \"NO\".\n     * For example:\n     * exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n     * exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n     * It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Count odd numbers in lst1 and even numbers in lst2\n        int oddCountInLst1 = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCountInLst1++;\n            }\n        }\n\n        int evenCountInLst2 = 0;\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCountInLst2++;\n            }\n        }\n\n        // If there are enough even numbers in lst2 to replace all odd numbers in lst1, return \"YES\"\n        if (oddCountInLst1 <= evenCountInLst2) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4))); // Expected: \"YES\"\n        System.out.println(solution.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4))); // Expected: \"NO\"\n        System.out.println(solution.exchange(Arrays.asList(1, 3, 5, 7), Arrays.asList(2, 4, 6, 8))); // Expected: \"YES\"\n        System.out.println(solution.exchange(Arrays.asList(2, 4, 6, 8), Arrays.asList(1, 3, 5, 7))); // Expected: \"NO\" (since there are no odd numbers in lst1)\n    }\n}\n"}
{"task_id": "Java/111", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given a string representing a space separated lowercase letters, return a dictionary\n     * of the letter with the most repetition and containing the corresponding count.\n     * If several letters have the same occurrence, return all of them.\n     *\n     * Example:\n     * histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n     * histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n     * histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n     * histogram(\"b b b b a\") == {\"b\": 4}\n     * histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        String[] letters = test.split(\" \");\n        Map<String, Integer> letterCount = new HashMap<>();\n        \n        for (String letter : letters) {\n            if (!letter.isEmpty()) {\n                letterCount.put(letter, letterCount.getOrDefault(letter, 0) + 1);\n            }\n        }\n\n        int maxCount = Collections.max(letterCount.values());\n        Map<String, Integer> result = new LinkedHashMap<>();\n\n        for (Map.Entry<String, Integer> entry : letterCount.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.histogram(\"a b c\"));  // {\"a\": 1, \"b\": 1, \"c\": 1}\n        System.out.println(solution.histogram(\"a b b a\"));  // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"a b c a b\"));  // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"b b b b a\"));  // {\"b\": 4}\n        System.out.println(solution.histogram(\"\"));  // {}\n    }\n}\n"}
{"task_id": "Java/112", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Task\n     * We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n     * then check if the result string is palindrome.\n     * A string is called palindrome if it reads the same backward as forward.\n     * You should return a tuple containing the result string and true/false for the check.\n     */\n    public List<Object> reverse_delete(String s, String c) {\n        // Remove characters from s that are present in c\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!c.contains(String.valueOf(ch))) {\n                sb.append(ch);\n            }\n        }\n\n        // Check if the resulting string is a palindrome\n        String resultString = sb.toString();\n        boolean isPalindrome = isPalindrome(resultString);\n\n        return Arrays.asList(resultString, isPalindrome);\n    }\n\n    private boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n\n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.reverse_delete(\"abcde\", \"ae\"));  // Expected: [bcd, false]\n        System.out.println(solution.reverse_delete(\"abcdef\", \"b\"));  // Expected: [acdef, false]\n        System.out.println(solution.reverse_delete(\"abcdedcba\", \"ab\"));  // Expected: [cdedc, true]\n    }\n}\n"}
{"task_id": "Java/113", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     Given a list of strings, where each string consists of only digits, return a list.\n     Each element i of the output should be \"the number of odd elements in the\n     string i of the input.\" where all the i's should be replaced by the number\n     of odd digits in the i\"th string of the input.\n\n     >>> odd_count(Arrays.asList(\"1234567\"))\n     [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n     >>> odd_count(Arrays.asList(\"3\",\"11111111\"))\n     [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n      \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            int count = 0;\n            for (char c : s.toCharArray()) {\n                if ((c - '0') % 2 != 0) {\n                    count++;\n                }\n            }\n            String formattedResult = \"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\";\n            result.add(formattedResult);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<String> input1 = Arrays.asList(\"1234567\");\n        System.out.println(solution.odd_count(input1)); // Expected: [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\n        // Test case 2\n        List<String> input2 = Arrays.asList(\"3\", \"11111111\");\n        System.out.println(solution.odd_count(input2)); // Expected: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    }\n}\n"}
{"task_id": "Java/114", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given an array of integers nums, find the minimum sum of any non-empty sub-array\n     * of nums.\n     *\n     * Example:\n     * minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n     * minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        if (nums == null || nums.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list cannot be null or empty\");\n        }\n\n        int currentMin = Integer.MAX_VALUE;\n        int globalMin = Integer.MAX_VALUE;\n\n        for (int num : nums) {\n            currentMin = Math.min(num, currentMin + num);\n            globalMin = Math.min(globalMin, currentMin);\n        }\n\n        return globalMin;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4))); // Expected output: 1\n        System.out.println(solution.minSubArraySum(Arrays.asList(-1, -2, -3)));       // Expected output: -6\n        System.out.println(solution.minSubArraySum(Arrays.asList(1, 2, 3, -6, 1)));   // Expected output: -6\n        System.out.println(solution.minSubArraySum(Arrays.asList(1, 2, 3, 4, 5)));    // Expected output: 1\n        System.out.println(solution.minSubArraySum(Arrays.asList(-1, -2, -3, -4)));   // Expected output: -10\n    }\n}\n"}
{"task_id": "Java/115", "generation": "import java.util.List;\n\nclass Solution {\n    /**\n     * You are given a rectangular grid of wells. Each row represents a single well,\n     * and each 1 in a row represents a single unit of water.\n     * Each well has a corresponding bucket that can be used to extract water from it,\n     * and all buckets have the same capacity. Can't use buckets from other wells to extract water from one well.\n     * Your task is to use the buckets to empty the wells.\n     * Output the number of times you need to lower the buckets.\n\n     * Example 1:\n     * Input:\n     *      grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n     *      bucket_capacity : 1\n     * Output: 6\n\n     * Example 2:\n     * Input:\n     *      grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n     *      bucket_capacity : 2\n     * Output: 5\n\n     * Example 3:\n     * Input:\n     *      grid : [[0,0,0], [0,0,0]]\n     *      bucket_capacity : 5\n     * Output: 0\n\n     * Constraints:\n     * - all wells have the same length\n     * - 1 <= grid.length <= 10^2\n     * - 1 <= grid[:,1].length <= 10^2\n     * - grid[i][j] -> 0 | 1\n     * - 1 <= capacity <= 10\n     */\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        int totalDrops = 0;\n        for (List<Integer> well : grid) {\n            int waterUnits = 0;\n            for (int unit : well) {\n                if (unit == 1) {\n                    waterUnits++;\n                }\n            }\n            totalDrops += Math.ceil((double) waterUnits / capacity);\n        }\n        return totalDrops;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test Case 1\n        List<List<Integer>> grid1 = Arrays.asList(\n            Arrays.asList(0, 0, 1, 0),\n            Arrays.asList(0, 1, 0, 0),\n            Arrays.asList(1, 1, 1, 1)\n        );\n        int capacity1 = 1;\n        System.out.println(\"Test Case 1: \" + solution.max_fill(grid1, capacity1)); // Expected output: 6\n\n        // Test Case 2\n        List<List<Integer>> grid2 = Arrays.asList(\n            Arrays.asList(0, 0, 1, 1),\n            Arrays.asList(0, 0, 0, 0),\n            Arrays.asList(1, 1, 1, 1),\n            Arrays.asList(0, 1, 1, 1)\n        );\n        int capacity2 = 2;\n        System.out.println(\"Test Case 2: \" + solution.max_fill(grid2, capacity2)); // Expected output: 5\n\n        // Test Case 3\n        List<List<Integer>> grid3 = Arrays.asList(\n            Arrays.asList(0, 0, 0),\n            Arrays.asList(0, 0, 0)\n        );\n        int capacity3 = 5;\n        System.out.println(\"Test Case 3: \" + solution.max_fill(grid3, capacity3)); // Expected output: 0\n    }\n}\n"}
{"task_id": "Java/116", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * In this Kata, you have to sort an array of integers according to\n     * number of ones in their binary representation in ascending order.\n     * For similar number of ones, sort based on decimal value.\n     *\n     * It must be implemented like this:\n     * >>> sort_array(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 4, 3, 5))\n     * >>> sort_array(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-4, -2, -6, -5, -3))\n     * >>> sort_array(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 4, 3))\n     */\n    public List<Integer> sort_array(List<Integer> arr) {\n        return arr.stream()\n                  .sorted(Comparator.comparingInt(this::countOnes)\n                                    .thenComparingInt(x -> x))\n                  .collect(Collectors.toList());\n    }\n\n    private int countOnes(int num) {\n        if (num < 0) {\n            // For negative numbers, we consider their absolute value for counting ones\n            return Integer.toBinaryString(Math.abs(num)).length() - Integer.toBinaryString(~Math.abs(num) & ((1 << 32) - 1)).length();\n        } else {\n            return Integer.bitCount(num);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(1, 5, 2, 3, 4);\n        System.out.println(\"Test Case 1: \" + solution.sort_array(test1).equals(Arrays.asList(1, 2, 4, 3, 5)));\n\n        List<Integer> test2 = Arrays.asList(-2, -3, -4, -5, -6);\n        System.out.println(\"Test Case 2: \" + solution.sort_array(test2).equals(Arrays.asList(-4, -2, -6, -5, -3)));\n\n        List<Integer> test3 = Arrays.asList(1, 0, 2, 3, 4);\n        System.out.println(\"Test Case 3: \" + solution.sort_array(test3).equals(Arrays.asList(0, 1, 2, 4, 3)));\n    }\n}\n"}
{"task_id": "Java/117", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     Given a string s and a natural number n, you have been tasked to implement\n     a function that returns a list of all words from string s that contain exactly\n     n consonants, in order these words appear in the string s.\n     If the string s is empty then the function should return an empty list.\n     Note: you may assume the input string contains only letters and spaces.\n     Examples:\n     select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n     select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n     select_words(\"simple white space\", 2) ==> []\n     select_words(\"Hello world\", 4) ==> [\"world\"]\n     select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n      */\n    public List<String> select_words(String s, int n) {\n        if (s == null || s.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        String[] words = s.split(\"\\\\s+\");\n        List<String> result = new ArrayList<>();\n\n        for (String word : words) {\n            long consonantsCount = word.toLowerCase().chars()\n                    .filter(c -> \"bcdfghjklmnpqrstvwxyz\".indexOf(c) != -1)\n                    .count();\n\n            if (consonantsCount == n) {\n                result.add(word);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.select_words(\"Mary had a little lamb\", 4)); // [\"little\"]\n        System.out.println(solution.select_words(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\n        System.out.println(solution.select_words(\"simple white space\", 2));     // []\n        System.out.println(solution.select_words(\"Hello world\", 4));            // [\"world\"]\n        System.out.println(solution.select_words(\"Uncle sam\", 3));              // [\"Uncle\"]\n    }\n}\n"}
{"task_id": "Java/118", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You are given a word. Your task is to find the closest vowel that stands between\n     * two consonants from the right side of the word (case sensitive).\n     *\n     * Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n     * find any vowel met the above condition.\n     *\n     * You may assume that the given string contains English letter only.\n     */\n    public String get_closest_vowel(String word) {\n        // Convert the input to a character array for easier manipulation\n        char[] chars = word.toCharArray();\n        int n = chars.length;\n        \n        // Iterate from right to left, looking for vowels between consonants\n        for (int i = n - 2; i > 0; i--) {\n            if (!isVowel(chars[i]) && isVowel(chars[i + 1])) {\n                return String.valueOf(chars[i]);\n            }\n        }\n        \n        // If no vowel found, return an empty string\n        return \"\";\n    }\n\n    private boolean isVowel(char c) {\n        // Check if the character is a vowel (case sensitive)\n        return \"AEIOUaeiou\".indexOf(c) != -1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.get_closest_vowel(\"yogurt\"));  // Output: \"u\"\n        System.out.println(solution.get_closest_vowel(\"FULL\"));    // Output: \"U\"\n        System.out.println(solution.get_closest_vowel(\"quick\"));   // Output: \"\"\n        System.out.println(solution.get_closest_vowel(\"ab\"));      // Output: \"\"\n        System.out.println(solution.get_closest_vowel(\"aBcDeFgHiJkLmNoPqRsTuVwXyZ\"));  // Output: \"u\"\n    }\n}\n"}
{"task_id": "Java/119", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You are given a list of two strings, both strings consist of open\n     * parentheses \"(\" or close parentheses \")\" only.\n     * Your job is to check if it is possible to concatenate the two strings in\n     * some order, that the resulting string will be good.\n     * A string S is considered to be good if and only if all parentheses in S\n     * are balanced. For example: the string \"(())()\" is good, while the string\n     * \"())\" is not.\n     * Return \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\n     Examples:\n     match_parens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n     match_parens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String match_parens(List<String> lst) {\n        // Check if the first string followed by the second is balanced\n        if (isBalanced(lst.get(0) + lst.get(1))) return \"Yes\";\n        \n        // Check if the second string followed by the first is balanced\n        if (isBalanced(lst.get(1) + lst.get(0))) return \"Yes\";\n\n        return \"No\";\n    }\n\n    private boolean isBalanced(String s) {\n        int balance = 0;\n        for (char c : s.toCharArray()) {\n            if (c == '(') {\n                balance++;\n            } else if (c == ')') {\n                balance--;\n            }\n            // If balance goes negative, parentheses are unbalanced\n            if (balance < 0) return false;\n        }\n        // If balance is zero, parentheses are balanced\n        return balance == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.match_parens(Arrays.asList(\"()(\", \")\"))); // Expected: Yes\n        System.out.println(solution.match_parens(Arrays.asList(\")\", \")\")));   // Expected: No\n        System.out.println(solution.match_parens(Arrays.asList(\"(())\", \"()\"))); // Expected: Yes\n        System.out.println(solution.match_parens(Arrays.asList(\"(()\", \"())\"))); // Expected: Yes\n        System.out.println(solution.match_parens(Arrays.asList(\"(\", \"(\")));    // Expected: No\n    }\n}\n"}
{"task_id": "Java/120", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     Given an array arr of integers and a positive integer k, return a sorted list\n     of length k with the maximum k numbers in arr, in ascending order.\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Use a priority queue to keep track of the top k elements\n        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n        \n        for (int num : arr) {\n            pq.offer(num);\n            if (pq.size() > k) {\n                pq.poll(); // Remove the smallest element in the heap\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        \n        Collections.sort(result); // Sort the result list in ascending order\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> arr1 = Arrays.asList(-3, -4, 5);\n        int k1 = 3;\n        System.out.println(solution.maximum(arr1, k1)); // Output: [-4, -3, 5]\n\n        List<Integer> arr2 = Arrays.asList(4, -4, 4);\n        int k2 = 2;\n        System.out.println(solution.maximum(arr2, k2)); // Output: [4, 4]\n\n        List<Integer> arr3 = Arrays.asList(-3, 2, 1, 2, -1, -2, 1);\n        int k3 = 1;\n        System.out.println(solution.maximum(arr3, k3)); // Output: [2]\n    }\n}\n"}
{"task_id": "Java/121", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n     *\n     * Examples:\n     * solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n     * solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n     * solution(Arrays.asList(30, 13, 24, 321)) ==> 0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.solution(Arrays.asList(5, 8, 7, 1))); // Expected output: 12\n        System.out.println(solution.solution(Arrays.asList(3, 3, 3, 3, 3))); // Expected output: 9\n        System.out.println(solution.solution(Arrays.asList(30, 13, 24, 321))); // Expected output: 0\n    }\n}\n"}
{"task_id": "Java/122", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a non-empty array of integers arr and an integer k, return\n     * the sum of the elements with at most two digits from the first k elements of arr.\n     *\n     * Example:\n     * Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n     * Output: 24 # sum of 21 + 3\n     *\n     * Constraints:\n     * 1. 1 <= len(arr) <= 100\n     * 2. 1 <= k <= len(arr)\n     */\n    public int add_elements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < Math.min(k, arr.size()); i++) {\n            if (arr.get(i) >= -99 && arr.get(i) <= 99 || arr.get(i) >= 1000 && arr.get(i) <= 9999) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9);\n        int k1 = 4;\n        System.out.println(solution.add_elements(test1, k1)); // Expected output: 24\n\n        List<Integer> test2 = Arrays.asList(10, 20, 30, 40, 50, 60, 70, 80, 90);\n        int k2 = 9;\n        System.out.println(solution.add_elements(test2, k2)); // Expected output: 450\n\n        List<Integer> test3 = Arrays.asList(100, 200, 300, 400, 500, 600);\n        int k3 = 6;\n        System.out.println(solution.add_elements(test3, k3)); // Expected output: 0\n\n        List<Integer> test4 = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n        int k4 = 10;\n        System.out.println(solution.add_elements(test4, k4)); // Expected output: 55\n\n        List<Integer> test5 = Arrays.asList(12345, -6789, 101, 202, 303);\n        int k5 = 5;\n        System.out.println(solution.add_elements(test5, k5)); // Expected output: 606\n    }\n}\n"}
{"task_id": "Java/123", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n     *\n     * The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n     * as follows: start with any positive integer n. Then each term is obtained from the\n     * previous term as follows: if the previous term is even, the next term is one half of\n     * the previous term. If the previous term is odd, the next term is 3 times the previous\n     * term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n     *\n     * Note:\n     * 1. Collatz(1) is [1].\n     * 2. returned list sorted in increasing order.\n     */\n    public List<Integer> get_odd_collatz(int n) {\n        List<Integer> result = new ArrayList<>();\n        while (n != 1) {\n            if (n % 2 == 1) { // Check if the number is odd\n                result.add(n);\n            }\n            n = n % 2 == 0 ? n / 2 : 3 * n + 1; // Apply Collatz rules\n        }\n        result.add(1); // Add 1 to the list as it's always in the sequence\n        Collections.sort(result); // Sort the list in increasing order\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.get_odd_collatz(5)); // Expected output: [1, 5]\n        System.out.println(solution.get_odd_collatz(7)); // Expected output: [1, 7, 11, 22]\n        System.out.println(solution.get_odd_collatz(10)); // Expected output: [1, 5, 7, 9, 13, 19, 27, 64]\n    }\n}\n"}
{"task_id": "Java/124", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You have to write a function which validates a given date string and\n     * returns true if the date is valid otherwise false.\n     * The date is valid if all of the following rules are satisfied:\n     * 1. The date string is not empty.\n     * 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n     * 3. The months should not be less than 1 or higher than 12.\n     * 4. The date should be in the format: mm-dd-yyyy\n     *\n     * for example:\n     * valid_date(\"03-11-2000\") => true\n     * valid_date(\"15-01-2012\") => false\n     * valid_date(\"04-0-2040\") => false\n     * valid_date(\"06-04-2020\") => true\n     * valid_date(\"06/04/2020\") => false\n     */\n    public boolean valid_date(String date) {\n        if (date == null || date.isEmpty()) return false;\n\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) return false;\n\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\n        if (month < 1 || month > 12) return false;\n        if (day < 1 || day > 31) return false;\n\n        // Check for valid days based on the month\n        switch (month) {\n            case 4:\n            case 6:\n            case 9:\n            case 11:\n                if (day > 30) return false;\n                break;\n            case 2: // February\n                if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {\n                    if (day > 29) return false;\n                } else {\n                    if (day > 28) return false;\n                }\n                break;\n            default:\n                // Months with 31 days\n                if (day > 31) return false;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.valid_date(\"03-11-2000\")); // true\n        System.out.println(solution.valid_date(\"15-01-2012\")); // false\n        System.out.println(solution.valid_date(\"04-0-2040\"));  // false\n        System.out.println(solution.valid_date(\"06-04-2020\")); // true\n        System.out.println(solution.valid_date(\"06/04/2020\")); // false\n    }\n}\n"}
{"task_id": "Java/125", "generation": "import java.util.List;\n\nclass Solution {\n\n    /**\n     * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n     * should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n     * alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n     *\n     * @param txt The input string to process.\n     * @return A list of words or an integer based on the rules described.\n     */\n    public Object split_words(String txt) {\n        if (txt == null || txt.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        // Check for whitespace\n        String[] parts = txt.split(\"\\\\s+\");\n        if (parts.length > 0) {\n            return Arrays.asList(parts);\n        }\n\n        // Check for commas\n        if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        }\n\n        // Count lowercase letters with odd order in the alphabet\n        int count = 0;\n        for (char c : txt.toCharArray()) {\n            if (Character.isLowerCase(c) && ((c - 'a') % 2 == 1)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.split_words(\"Hello world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.split_words(\"Hello,world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.split_words(\"abcdef\"));      // 3\n        System.out.println(solution.split_words(\"a,b,c,d,e,f\")); // [a, b, c, d, e, f]\n        System.out.println(solution.split_words(\"\"));            // []\n        System.out.println(solution.split_words(\"noSplitChar\")); // 4 (n=13, o=14, s=18, p=15)\n    }\n}\n"}
{"task_id": "Java/126", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a list of numbers, return whether or not they are sorted in ascending order.\n     * If the number appears more than twice, return false. Assume no negative numbers and only integers.\n     *\n     * @param lst the list of integers to check\n     * @return true if the list is sorted in ascending order with no number appearing more than twice, otherwise false\n     */\n    public boolean is_sorted(List<Integer> lst) {\n        int count = 1;\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i).equals(lst.get(i - 1))) {\n                count++;\n                if (count > 2) {\n                    return false;\n                }\n            } else {\n                count = 1;\n            }\n            if (lst.get(i) < lst.get(i - 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.is_sorted(Arrays.asList(5))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 3, 4, 5))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 3, 2, 4, 5))); // false\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7))); // false\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 2, 3, 3, 4))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 2, 2, 3, 4))); // false\n    }\n}\n"}
{"task_id": "Java/127", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You are given two intervals,\n     * where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n     * The given intervals are closed which means that the interval (start, end)\n     * includes both start and end.\n     * For each given interval, it is assumed that its start is less or equal its end.\n     * Your task is to determine whether the length of intersection of these two\n     * intervals is a prime number.\n     * Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n     * which its length is 1, which not a prime number.\n     * If the length of the intersection is a prime number, return \"YES\",\n     * otherwise, return \"NO\".\n     * If the two intervals don't intersect, return \"NO\".\n     *\n     * @param interval1 The first interval as a List<Integer> with 2 elements (start, end).\n     * @param interval2 The second interval as a List<Integer> with 2 elements (start, end).\n     * @return \"YES\" if the length of intersection is a prime number, otherwise \"NO\".\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int startMax = Math.max(interval1.get(0), interval2.get(0));\n        int endMin = Math.min(interval1.get(1), interval2.get(1));\n\n        if (startMax > endMin) {\n            return \"NO\"; // No intersection\n        }\n\n        int lengthOfIntersection = endMin - startMax + 1;\n        return isPrime(lengthOfIntersection) ? \"YES\" : \"NO\";\n    }\n\n    private boolean isPrime(int number) {\n        if (number <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= number; i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.intersection(Arrays.asList(1, 2), Arrays.asList(2, 3))); // NO\n        System.out.println(solution.intersection(Arrays.asList(-1, 1), Arrays.asList(0, 4))); // NO\n        System.out.println(solution.intersection(Arrays.asList(-3, -1), Arrays.asList(-5, 5))); // YES\n        System.out.println(solution.intersection(Arrays.asList(5, 7), Arrays.asList(6, 8))); // YES (length is 2)\n        System.out.println(solution.intersection(Arrays.asList(10, 14), Arrays.asList(13, 19))); // NO (length is 3 but not in the intersection range)\n    }\n}\n"}
{"task_id": "Java/128", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given an array arr of integers and you need to return\n     * sum of magnitudes of integers multiplied by product of all signs\n     * of each number in the array, represented by 1, -1 or 0.\n     * Note: return None for empty arr.\n     *\n     * Example:\n     * >>> prod_signs(Arrays.asList(1, 2, 2, -4)) == -9\n     * >>> prod_signs(Arrays.asList(0, 1)) == 0\n     * >>> prod_signs(Arrays.asList()) == Optional.empty()\n     */\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int magnitudeSum = 0;\n        int signProduct = 1;\n\n        for (Integer num : arr) {\n            magnitudeSum += Math.abs(num);\n\n            if (num == 0) {\n                signProduct = 0;\n                break;\n            } else if (num < 0) {\n                signProduct *= -1;\n            }\n        }\n\n        return Optional.of(magnitudeSum * signProduct);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.prod_signs(Arrays.asList(1, 2, 2, -4)).orElse(null)); // Should print -9\n        System.out.println(solution.prod_signs(Arrays.asList(0, 1)).orElse(null)); // Should print 0\n        System.out.println(solution.prod_signs(Arrays.asList()).orElse(null)); // Should print null\n\n        // Additional test cases\n        System.out.println(solution.prod_signs(Arrays.asList(-3, -2, 4)).orElse(null)); // Should print 9\n        System.out.println(solution.prod_signs(Arrays.asList(1, 0, -1)).orElse(null)); // Should print 0\n    }\n}\n"}
{"task_id": "Java/129", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n     each cell of the grid contains a value. Every integer in the range [1, N * N]\n     inclusive appears exactly once on the cells of the grid.\n\n     You have to find the minimum path of length k in the grid. You can start\n     from any cell, and in each step you can move to any of the neighbor cells,\n     in other words, you can go to cells which share an edge with your current\n     cell.\n     Please note that a path of length k means visiting exactly k cells (not\n     necessarily distinct).\n     You CANNOT go off the grid.\n     A path A (of length k) is considered less than a path B (of length k) if\n     after making the ordered lists of the values on the cells that A and B go\n     through (let's call them lst_A and lst_B), lst_A is lexicographically less\n     than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n     such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n     lst_A[j] = lst_B[j].\n     It is guaranteed that the answer is unique.\n     Return an ordered list of the values on the cells that the minimum path go through.\n\n     Examples:\n\n         Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n         Output: [1, 2, 1]\n\n         Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n         Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        PriorityQueue<Cell> pq = new PriorityQueue<>(Comparator.comparingInt(cell -> cell.value));\n        \n        // Initialize the priority queue with all cells in the grid\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                pq.offer(new Cell(grid.get(i).get(j), i, j));\n            }\n        }\n\n        // Extract k smallest values from the priority queue\n        List<Integer> result = new ArrayList<>();\n        while (!pq.isEmpty() && k > 0) {\n            Cell cell = pq.poll();\n            if (result.size() == 0 || !result.get(result.size() - 1).equals(cell.value)) {\n                result.add(cell.value);\n                k--;\n            }\n        }\n\n        return result;\n    }\n\n    private static class Cell implements Comparable<Cell> {\n        int value;\n        int row;\n        int col;\n\n        public Cell(int value, int row, int col) {\n            this.value = value;\n            this.row = row;\n            this.col = col;\n        }\n\n        @Override\n        public int compareTo(Cell other) {\n            return Integer.compare(this.value, other.value);\n        }\n    }\n\n    // Test cases\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<List<Integer>> grid1 = Arrays.asList(\n                Arrays.asList(1, 2, 3),\n                Arrays.asList(4, 5, 6),\n                Arrays.asList(7, 8, 9)\n        );\n        System.out.println(solution.minPath(grid1, 3)); // Output: [1, 2, 1]\n\n        List<List<Integer>> grid2 = Arrays.asList(\n                Arrays.asList(5, 9, 3),\n                Arrays.asList(4, 1, 6),\n                Arrays.asList(7, 8, 2)\n        );\n        System.out.println(solution.minPath(grid2, 1)); // Output: [1]\n    }\n}\n"}
{"task_id": "Java/130", "generation": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Solution {\n    /**\n     * Generates the first n + 1 numbers of the Tribonacci sequence.\n     *\n     * @param n A non-negative integer representing the length of the sequence.\n     * @return A list containing the first n + 1 numbers of the Tribonacci sequence.\n     */\n    public List<Integer> tri(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Input must be a non-negative integer\");\n        }\n\n        List<Integer> result = new ArrayList<>();\n        // Base cases\n        if (n >= 0) result.add(3);\n        if (n >= 1) result.add(2); // tri(2) = 1 + (2 / 2) = 2\n\n        for (int i = 2; i <= n; i++) {\n            int nextValue;\n            if (i % 2 == 0) {\n                nextValue = 1 + i / 2;\n            } else {\n                nextValue = result.get(i - 1) + result.get(i - 2) + result.get(i);\n            }\n            result.add(nextValue);\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.tri(3)); // Expected: [3, 2, 8]\n        System.out.println(solution.tri(5)); // Expected: [3, 2, 8, 14, 27, 50]\n        System.out.println(solution.tri(0)); // Expected: [3]\n        System.out.println(solution.tri(1)); // Expected: [3, 2]\n    }\n}\n"}
{"task_id": "Java/131", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a positive integer n, return the product of the odd digits.\n     * Return 0 if all digits are even.\n     * For example:\n     * digits(1)  == 1\n     * digits(4)  == 0\n     * digits(235) == 15\n     */\n    public int digits(int n) {\n        int product = 1;\n        boolean hasOddDigit = false;\n\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n                hasOddDigit = true;\n            }\n            n /= 10;\n        }\n\n        return hasOddDigit ? product : 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.digits(1));   // Expected output: 1\n        System.out.println(solution.digits(4));   // Expected output: 0\n        System.out.println(solution.digits(235)); // Expected output: 15\n        System.out.println(solution.digits(2468)); // Expected output: 0\n        System.out.println(solution.digits(13579)); // Expected output: 945\n    }\n}\n"}
{"task_id": "Java/132", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Create a function that takes a string as input which contains only square brackets.\n     * The function should return true if and only if there is a valid subsequence of brackets\n     * where at least one bracket in the subsequence is nested.\n     *\n     * @param string the input string containing only square brackets\n     * @return true if there is a nested subsequence, false otherwise\n     */\n    public boolean is_nested(String string) {\n        int balance = 0;\n        boolean hasNested = false;\n\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                balance++;\n                if (balance > 1) {\n                    hasNested = true;\n                }\n            } else if (c == ']') {\n                balance--;\n                if (balance < 0) {\n                    return false; // Unbalanced brackets\n                }\n            }\n        }\n\n        return hasNested && balance == 0; // Ensure all brackets are balanced and there is at least one nested pair\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.is_nested(\"[[]]\")); // true\n        System.out.println(solution.is_nested(\"[]]]]]]][[[[[]\")); // false\n        System.out.println(solution.is_nested(\"[][]\")); // false\n        System.out.println(solution.is_nested(\"[]\")); // false\n        System.out.println(solution.is_nested(\"[[][]]\")); // true\n        System.out.println(solution.is_nested(\"[[]][[\")); // true\n    }\n}\n"}
{"task_id": "Java/133", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     You are given a list of numbers.\n     You need to return the sum of squared numbers in the given list,\n     round each element in the list to the upper int(Ceiling) first.\n     Examples:\n     For lst = [1,2,3] the output should be 14\n     For lst = [1,4,9] the output should be 98\n     For lst = [1,3,5,7] the output should be 84\n     For lst = [1.4,4.2,0] the output should be 29\n     For lst = [-2.4,1,1] the output should be 6\n      */\n    public int sum_squares(List<Double> lst) {\n        return lst.stream()\n                  .mapToDouble(num -> Math.ceil(num))\n                  .map(num -> num * num)\n                  .sum();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sum_squares(List.of(1.0, 2.0, 3.0))); // Expected output: 14\n        System.out.println(solution.sum_squares(List.of(1.0, 4.0, 9.0))); // Expected output: 98\n        System.out.println(solution.sum_squares(List.of(1.0, 3.0, 5.0, 7.0))); // Expected output: 84\n        System.out.println(solution.sum_squares(List.of(1.4, 4.2, 0.0))); // Expected output: 29\n        System.out.println(solution.sum_squares(List.of(-2.4, 1.0, 1.0))); // Expected output: 6\n    }\n}\n"}
{"task_id": "Java/134", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Create a function that returns true if the last character\n     * of a given string is an alphabetical character and is not\n     * a part of a word, and false otherwise.\n     * Note: \"word\" is a group of characters separated by space.\n     *\n     * Examples:\n     * check_if_last_char_is_a_letter(\"apple pie\") -> false\n     * check_if_last_char_is_a_letter(\"apple pi e\") -> true\n     * check_if_last_char_is_a_letter(\"apple pi e \") -> false\n     * check_if_last_char_is_a_letter(\"\") -> false\n     */\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        if (txt == null || txt.isEmpty()) {\n            return false;\n        }\n\n        char lastChar = txt.charAt(txt.length() - 1);\n        \n        // Check if the last character is a space or not part of a word\n        if (lastChar == ' ') {\n            return false;\n        }\n        \n        // Check if the last character is an alphabetical letter\n        return Character.isLetter(lastChar);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.check_if_last_char_is_a_letter(\"apple pie\"));  // false\n        System.out.println(solution.check_if_last_char_is_a_letter(\"apple pi e\")); // true\n        System.out.println(solution.check_if_last_char_is_a_letter(\"apple pi e \")); // false\n        System.out.println(solution.check_if_last_char_is_a_letter(\"\"));           // false\n        System.out.println(solution.check_if_last_char_is_a_letter(\"a b c d e f g h i j k l m n o p q r s t u v w x y z \")); // false\n        System.out.println(solution.check_if_last_char_is_a_letter(\"z\"));          // true\n    }\n}\n"}
{"task_id": "Java/135", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Create a function which returns the largest index of an element which\n     * is not greater than or equal to the element immediately preceding it. If\n     * no such element exists then return -1. The given array will not contain\n     * duplicate values.\n     *\n     * Examples:\n     * can_arrange(Arrays.asList(1,2,4,3,5)) = 3\n     * can_arrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int can_arrange(List<Integer> arr) {\n        if (arr == null || arr.size() < 2) {\n            return -1;\n        }\n        \n        for (int i = arr.size() - 2; i >= 0; i--) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                return i;\n            }\n        }\n        \n        return -1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.can_arrange(Arrays.asList(1, 2, 4, 3, 5))); // Expected output: 3\n        System.out.println(solution.can_arrange(Arrays.asList(1, 2, 3)));       // Expected output: -1\n        System.out.println(solution.can_arrange(Arrays.asList(5, 4, 3, 2, 1))); // Expected output: 0\n        System.out.println(solution.can_arrange(Arrays.asList(1, 3, 2, 4, 6))); // Expected output: 2\n    }\n}\n"}
{"task_id": "Java/136", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Create a function that returns a tuple (a, b), where 'a' is\n     * the largest of negative integers, and 'b' is the smallest\n     * of positive integers in a list.\n     * If there is no negative or positive integers, return them as None.\n     *\n     * Examples:\n     * largest_smallest_integers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n     * largest_smallest_integers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n     * largest_smallest_integers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Arrays.asList(Optional.empty(), Optional.empty());\n        }\n\n        Optional<Integer> smallestPositive = lst.stream()\n                .filter(n -> n > 0)\n                .min(Integer::compare);\n\n        Optional<Integer> largestNegative = lst.stream()\n                .filter(n -> n < 0)\n                .max(Integer::compare);\n\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(2, 4, 1, 3, 5, 7))); // (Optional.empty(), Optional.of(1))\n        System.out.println(solution.largest_smallest_integers(Arrays.asList()));                // (Optional.empty(), Optional.empty())\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(0)));               // (Optional.empty(), Optional.empty())\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(-2, -4, 1, 3, 5, 7)));// (Optional.of(-2), Optional.of(1))\n    }\n}\n"}
{"task_id": "Java/137", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Create a function that takes integers, floats, or strings representing\n     * real numbers, and returns the larger variable in its given variable type.\n     * Return None if the values are equal.\n     * Note: If a real number is represented as a string, the floating point might be . or ,\n     *\n     * compare_one(1, 2.5) -> Optional.of(2.5)\n     * compare_one(1, \"2,3\") -> Optional.of(\"2,3\")\n     * compare_one(\"5,1\", \"6\") -> Optional.of(\"6\")\n     * compare_one(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compare_one(Object a, Object b) {\n        double numA = convertToDouble(a);\n        double numB = convertToDouble(b);\n\n        if (numA == numB) {\n            return Optional.empty();\n        } else if (numA > numB) {\n            return Optional.of(a);\n        } else {\n            return Optional.of(b);\n        }\n    }\n\n    private double convertToDouble(Object value) {\n        if (value instanceof String) {\n            String strValue = (String) value;\n            strValue = strValue.replace(',', '.');\n            return Double.parseDouble(strValue);\n        } else if (value instanceof Integer) {\n            return ((Integer) value).doubleValue();\n        } else if (value instanceof Float) {\n            return ((Float) value).doubleValue();\n        }\n        throw new IllegalArgumentException(\"Unsupported type\");\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.compare_one(1, 2.5)); // Optional[2.5]\n        System.out.println(solution.compare_one(1, \"2,3\")); // Optional[2,3]\n        System.out.println(solution.compare_one(\"5,1\", \"6\")); // Optional[6]\n        System.out.println(solution.compare_one(\"1\", 1)); // Optional.empty\n    }\n}\n"}
{"task_id": "Java/138", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n     *\n     * @param n The number to check\n     * @return true if n can be expressed as the sum of 4 positive even numbers, false otherwise\n     */\n    public boolean is_equal_to_sum_even(int n) {\n        // Since the smallest sum of 4 positive even numbers is 2 + 2 + 2 + 2 = 8,\n        // any number less than 8 cannot be expressed as such a sum.\n        if (n < 8) {\n            return false;\n        }\n        \n        // If n - 8 is even, then we can express n as the sum of 4 positive even numbers\n        // because we can add pairs of 2 to make up for the difference.\n        return (n - 8) % 2 == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.is_equal_to_sum_even(4)); // false\n        System.out.println(solution.is_equal_to_sum_even(6)); // false\n        System.out.println(solution.is_equal_to_sum_even(8)); // true\n        System.out.println(solution.is_equal_to_sum_even(10)); // true (2 + 2 + 2 + 4 = 10)\n        System.out.println(solution.is_equal_to_sum_even(12)); // true (2 + 2 + 2 + 6 = 12)\n        System.out.println(solution.is_equal_to_sum_even(14)); // true (2 + 2 + 2 + 8 = 14)\n        System.out.println(solution.is_equal_to_sum_even(16)); // true (2 + 2 + 2 + 10 = 16)\n        System.out.println(solution.is_equal_to_sum_even(17)); // false\n    }\n}\n"}
{"task_id": "Java/139", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     The Brazilian factorial is defined as:\n     brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n     where n > 0\n\n     For example:\n     >>> special_factorial(4)\n     288\n\n     The function will receive an integer as input and should return the special\n     factorial of this integer.\n      */\n    public long special_factorial(int n) {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"Input must be a positive integer\");\n        }\n\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    private long factorial(int num) {\n        if (num == 0 || num == 1) {\n            return 1;\n        }\n        long fact = 1;\n        for (int i = 2; i <= num; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"special_factorial(4): \" + solution.special_factorial(4)); // Expected: 288\n        System.out.println(\"special_factorial(3): \" + solution.special_factorial(3)); // Expected: 12\n        System.out.println(\"special_factorial(5): \" + solution.special_factorial(5)); // Expected: 34560\n\n        try {\n            System.out.println(\"special_factorial(-1): \" + solution.special_factorial(-1));\n        } catch (IllegalArgumentException e) {\n            System.out.println(\"Caught exception for special_factorial(-1): \" + e.getMessage());\n        }\n    }\n}\n"}
{"task_id": "Java/140", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a string text, replace all spaces in it with underscores,\n     * and if a string has more than 2 consecutive spaces,\n     * then replace all consecutive spaces with -\n     *\n     * @param text the input string to process\n     * @return the processed string\n     */\n    public String fix_spaces(String text) {\n        StringBuilder result = new StringBuilder();\n        int spaceCount = 0;\n\n        for (char c : text.toCharArray()) {\n            if (c == ' ') {\n                spaceCount++;\n                if (spaceCount > 2) {\n                    // Replace more than 2 consecutive spaces with '-'\n                    result.append('-');\n                    spaceCount = 1; // Reset the count after replacing\n                } else {\n                    result.append('_');\n                }\n            } else {\n                result.append(c);\n                spaceCount = 0; // Reset the count for non-space characters\n            }\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.fix_spaces(\"Example\"));       // Output: Example\n        System.out.println(solution.fix_spaces(\"Example 1\"));     // Output: Example_1\n        System.out.println(solution.fix_spaces(\" Example 2\"));    // Output: _Example_2\n        System.out.println(solution.fix_spaces(\" Example   3\"));  // Output: _Example-3\n        System.out.println(solution.fix_spaces(\"  Leading spaces\")); // Output: __Leading_spaces\n        System.out.println(solution.fix_spaces(\"Trailing spaces  \")); // Output: Trailing_spaces--\n    }\n}\n"}
{"task_id": "Java/141", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Create a function which takes a string representing a file's name, and returns\n     * \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n     * A file's name is considered to be valid if and only if all the following conditions\n     * are met:\n     * - There should not be more than three digits ('0'-'9') in the file's name.\n     * - The file's name contains exactly one dot '.'\n     * - The substring before the dot should not be empty, and it starts with a letter from\n     *   the latin alphapet ('a'-'z' and 'A'-'Z').\n     * - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n     *\n     * Examples:\n     * file_name_check(\"example.txt\") # => \"Yes\"\n     * file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String file_name_check(String file_name) {\n        if (file_name == null || file_name.isEmpty()) return \"No\";\n        \n        int digitCount = 0;\n        boolean hasDot = false;\n        boolean validExtension = Arrays.asList(\"txt\", \"exe\", \"dll\").contains(file_name.substring(file_name.lastIndexOf('.') + 1));\n        String nameBeforeDot = file_name.substring(0, file_name.lastIndexOf('.'));\n        \n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n                if (digitCount > 3) return \"No\";\n            } else if (c == '.') {\n                hasDot = true;\n            }\n        }\n\n        // Check if the name before the dot starts with a letter\n        if (!nameBeforeDot.isEmpty() && Character.isLetter(nameBeforeDot.charAt(0))) {\n            return validExtension ? \"Yes\" : \"No\";\n        } else {\n            return \"No\";\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.file_name_check(\"example.txt\"));  // Expected: Yes\n        System.out.println(solution.file_name_check(\"1example.dll\")); // Expected: No (starts with a digit)\n        System.out.println(solution.file_name_check(\".txt\"));         // Expected: No (empty name before dot)\n        System.out.println(solution.file_name_check(\"example.exe\"));  // Expected: Yes\n        System.out.println(solution.file_name_check(\"example.doc\"));  // Expected: No (invalid extension)\n        System.out.println(solution.file_name_check(\"1234567890.dll\")); // Expected: No (more than three digits)\n    }\n}\n"}
{"task_id": "Java/142", "generation": "import java.util.List;\n\nclass Solution {\n    /**\n     * This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n     *\n     * Examples:\n     * For lst = [1,2,3] the output should be 6\n     * For lst = []  the output should be 0\n     * For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sum_squares(List<Integer> lst) {\n        if (lst == null || lst.isEmpty()) {\n            return 0;\n        }\n\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int value = lst.get(i);\n            if (i % 3 == 0 && i != 0) { // Square the entry if index is a multiple of 3\n                value *= value;\n            } else if (i % 4 == 0 && i % 3 != 0) { // Cube the entry if index is a multiple of 4 and not a multiple of 3\n                value *= value * value;\n            }\n            sum += value;\n        }\n\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sum_squares(List.of(1, 2, 3))); // Expected output: 6\n        System.out.println(solution.sum_squares(List.of())); // Expected output: 0\n        System.out.println(solution.sum_squares(List.of(-1, -5, 2, -1, -5))); // Expected output: -126\n    }\n}\n"}
{"task_id": "Java/143", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given a string representing a sentence,\n     * the sentence contains some words separated by a space,\n     * and you have to return a string that contains the words from the original sentence,\n     * whose lengths are prime numbers,\n     * the order of the words in the new string should be the same as the original one.\n     *\n     * Example 1:\n     * Input: sentence = \"This is a test\"\n     * Output: \"is\"\n     *\n     * Example 2:\n     * Input: sentence = \"lets go for swimming\"\n     * Output: \"go for\"\n     *\n     * Constraints:\n     * * 1 <= len(sentence) <= 100\n     * * sentence contains only letters\n     */\n    public String words_in_sentence(String sentence) {\n        // Split the sentence into words\n        String[] words = sentence.split(\" \");\n        \n        StringBuilder result = new StringBuilder();\n        \n        for (String word : words) {\n            if (isPrime(word.length())) {\n                if (result.length() > 0) {\n                    result.append(\" \");\n                }\n                result.append(word);\n            }\n        }\n        \n        return result.toString();\n    }\n\n    // Helper method to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.words_in_sentence(\"This is a test\")); // Output: \"is\"\n        System.out.println(solution.words_in_sentence(\"lets go for swimming\")); // Output: \"go for\"\n        System.out.println(solution.words_in_sentence(\"hello world\")); // Output: \"world\"\n        System.out.println(solution.words_in_sentence(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")); // Output: \"b c d e f g h i k m n p r s u w y\"\n    }\n}\n"}
{"task_id": "Java/144", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Your task is to implement a function that will simplify the expression\n     * x * n. The function returns true if x * n evaluates to a whole number and false\n     * otherwise. Both x and n, are string representation of a fraction, and have the following format,\n     * <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n     *\n     * You can assume that x, and n are valid fractions, and do not have zero as denominator.\n     */\n    public boolean simplify(String x, String n) {\n        // Split the strings into numerator and denominator\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n\n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n\n        // Simplify the expression: (xNumerator * nNumerator) / (xDenominator * nDenominator)\n        int numeratorProduct = xNumerator * nNumerator;\n        int denominatorProduct = xDenominator * nDenominator;\n\n        // Check if the result is a whole number\n        return numeratorProduct % denominatorProduct == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.simplify(\"1/5\", \"5/1\")); // true\n        System.out.println(solution.simplify(\"1/6\", \"2/1\")); // false\n        System.out.println(solution.simplify(\"7/10\", \"10/2\")); // false\n        System.out.println(solution.simplify(\"3/4\", \"4/3\")); // true\n        System.out.println(solution.simplify(\"5/8\", \"8/5\")); // true\n        System.out.println(solution.simplify(\"9/16\", \"16/9\")); // true\n        System.out.println(solution.simplify(\"2/7\", \"7/2\")); // false\n    }\n}\n"}
{"task_id": "Java/145", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     Write a function which sorts the given list of integers\n     in ascending order according to the sum of their digits.\n     Note: if there are several items with similar sum of their digits,\n     order them based on their index in original list.\n     If an integer is negative, then its first digit will be negative:\n     e.g. -123 has digits -1, 2, and 3.\n\n     For example:\n     >>> order_by_points(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n     >>> order_by_points(Arrays.asList()) == []\n      */\n    public List<Integer> order_by_points(List<Integer> nums) {\n        return nums.stream()\n                   .sorted(Comparator.comparingInt(Solution::digitSum)\n                                     .thenComparingInt(nums::indexOf))\n                   .collect(Collectors.toList());\n    }\n\n    private static int digitSum(int num) {\n        boolean isNegative = num < 0;\n        int sum = 0;\n        while (num != 0) {\n            int digit = num % 10;\n            if (isNegative && digit != 0) {\n                digit = -digit;\n            }\n            sum += Math.abs(digit);\n            num /= 10;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.order_by_points(Arrays.asList(1, 11, -1, -11, -12))); // [-1, -11, 1, -12, 11]\n        System.out.println(solution.order_by_points(Arrays.asList())); // []\n        System.out.println(solution.order_by_points(Arrays.asList(-99, 99, -88, 88, -77, 77))); // [-77, 77, -88, 88, -99, 99]\n    }\n}\n"}
{"task_id": "Java/146", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function that takes an array of numbers as input and returns\n     * the number of elements in the array that are greater than 10 and both\n     * first and last digits of a number are odd (1, 3, 5, 7, 9).\n     * For example:\n     * specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n     * specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (Integer num : nums) {\n            if (num > 10 && isFirstAndLastDigitOdd(num)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isFirstAndLastDigitOdd(int num) {\n        String strNum = Math.abs(num).toString();\n        int firstDigit = Character.digit(strNum.charAt(0), 10);\n        int lastDigit = Character.digit(strNum.charAt(strNum.length() - 1), 10);\n\n        return (firstDigit % 2 != 0) && (lastDigit % 2 != 0);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.specialFilter(Arrays.asList(15, -73, 14, -15))); // Expected output: 1\n        System.out.println(solution.specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109))); // Expected output: 2\n        System.out.println(solution.specialFilter(Arrays.asList(-73, 15, 14, 109, 33, 45, 21))); // Expected output: 3\n        System.out.println(solution.specialFilter(Arrays.asList(1, 3, 5, 7, 9))); // Expected output: 0\n        System.out.println(solution.specialFilter(Arrays.asList(-1, -3, -5, -7, -9))); // Expected output: 0\n    }\n}\n"}
{"task_id": "Java/147", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You are given a positive integer n. You have to create an integer array a of length n.\n     * For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n     * Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n     * and a[i] + a[j] + a[k] is a multiple of 3.\n     *\n     * Example :\n     * Input: n = 5\n     * Output: 1\n     * Explanation:\n     * a = [1, 3, 7, 13, 21]\n     * The only valid triple is (1, 7, 13).\n     */\n    public int get_max_triples(int n) {\n        List<Integer> arr = new ArrayList<>();\n        \n        // Generate the array\n        for (int i = 1; i <= n; i++) {\n            arr.add(i * i - i + 1);\n        }\n        \n        int count = 0;\n        \n        // Iterate through all possible triples\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                for (int k = j + 1; k < arr.size(); k++) {\n                    if ((arr.get(i) + arr.get(j) + arr.get(k)) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.get_max_triples(5)); // Expected output: 1\n        System.out.println(solution.get_max_triples(6)); // Expected output: 2\n        System.out.println(solution.get_max_triples(7)); // Expected output: 3\n    }\n}\n"}
{"task_id": "Java/148", "generation": "import java.util.*;\n\nclass Solution {\n    private static final List<String> PLANETS = Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    );\n\n    /**\n     * There are eight planets in our solar system: the closest to the Sun\n     * is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n     * Uranus, Neptune.\n     * Write a function that takes two planet names as strings planet1 and planet2.\n     * The function should return a list containing all planets whose orbits are\n     * located between the orbit of planet1 and the orbit of planet2, sorted by\n     * the proximity to the sun.\n     * The function should return an empty list if planet1 or planet2\n     * are not correct planet names.\n     *\n     * @param planet1 the first planet name\n     * @param planet2 the second planet name\n     * @return a list of planets between the two given planets, sorted by proximity to the sun\n     */\n    public List<String> bf(String planet1, String planet2) {\n        int index1 = PLANETS.indexOf(planet1);\n        int index2 = PLANETS.indexOf(planet2);\n\n        if (index1 == -1 || index2 == -1 || index1 >= index2) {\n            return new ArrayList<>();\n        }\n\n        List<String> result = new ArrayList<>();\n        for (int i = index1 + 1; i < index2; i++) {\n            result.add(PLANETS.get(i));\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.bf(\"Jupiter\", \"Neptune\")); // [\"Saturn\", \"Uranus\"]\n        System.out.println(solution.bf(\"Earth\", \"Mercury\"));   // []\n        System.out.println(solution.bf(\"Mercury\", \"Uranus\"));  // [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n    }\n}\n"}
{"task_id": "Java/149", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Write a function that accepts a list of strings as a parameter,\n     * deletes the strings that have odd lengths from it,\n     * and returns the resulted list with a sorted order.\n     * The list is always a list of strings and never an array of numbers,\n     * and it may contain duplicates.\n     * The order of the list should be ascending by length of each word, and you\n     * should return the list sorted by that rule.\n     * If two words have the same length, sort the list alphabetically.\n     * The function should return a list of strings in sorted order.\n     * You may assume that all words will have the same length.\n     * For example:\n     * assert sorted_list_sum(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n     * assert sorted_list_sum(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> sorted_list_sum(List<String> lst) {\n        // Remove strings with odd lengths\n        lst.removeIf(s -> s.length() % 2 != 0);\n\n        // Sort the list by length, then alphabetically if lengths are equal\n        Collections.sort(lst, (s1, s2) -> {\n            int lenCompare = Integer.compare(s1.length(), s2.length());\n            return lenCompare == 0 ? s1.compareTo(s2) : lenCompare;\n        });\n\n        return lst;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<String> test1 = Arrays.asList(\"aa\", \"a\", \"aaa\");\n        System.out.println(solution.sorted_list_sum(test1)); // Expected: [aa]\n\n        List<String> test2 = Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\");\n        System.out.println(solution.sorted_list_sum(test2)); // Expected: [ab, cd]\n\n        List<String> test3 = Arrays.asList(\"hello\", \"world\", \"hi\", \"bye\");\n        System.out.println(solution.sorted_list_sum(test3)); // Expected: [hi, bye]\n    }\n}\n"}
{"task_id": "Java/150", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * A simple program which should return the value of x if n is\n     * a prime number and should return the value of y otherwise.\n     *\n     * Examples:\n     * for x_or_y(7, 34, 12) == 34\n     * for x_or_y(15, 8, 5) == 5\n     */\n    public int x_or_y(int n, int x, int y) {\n        return isPrime(n) ? x : y;\n    }\n\n    /**\n     * Helper method to check if a number is prime.\n     *\n     * @param num the number to check\n     * @return true if the number is prime, false otherwise\n     */\n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.x_or_y(7, 34, 12)); // Should print 34\n        System.out.println(solution.x_or_y(15, 8, 5));  // Should print 5\n        System.out.println(solution.x_or_y(2, 10, 20)); // Should print 10 (since 2 is prime)\n        System.out.println(solution.x_or_y(4, 30, 40)); // Should print 40 (since 4 is not prime)\n    }\n}\n"}
{"task_id": "Java/151", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given a list of numbers, return the sum of squares of the numbers\n     in the list that are odd. Ignore numbers that are negative or not integers.\n     */\n    public int double_the_difference(List<Object> lst) {\n        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                if (num > 0 && num % 2 != 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.double_the_difference(Arrays.asList(1, 3, 2, 0))); // Output: 10\n        System.out.println(solution.double_the_difference(Arrays.asList(-1, -2, 0)));  // Output: 0\n        System.out.println(solution.double_the_difference(Arrays.asList(9, -2)));      // Output: 81\n        System.out.println(solution.double_the_difference(Arrays.asList(0)));         // Output: 0\n        System.out.println(solution.double_the_difference(new ArrayList<>()));         // Output: 0\n    }\n}\n"}
{"task_id": "Java/152", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * I think we all remember that feeling when the result of some long-awaited\n     * event is finally known. The feelings and thoughts you have at that moment are\n     * definitely worth noting down and comparing.\n     * Your task is to determine if a person correctly guessed the results of a number of matches.\n     * You are given two arrays of scores and guesses of equal length, where each index shows a match.\n     * Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n     * the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n     example:\n\n     compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n     compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            result.add(diff);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> game1 = Arrays.asList(1, 2, 3, 4, 5, 1);\n        List<Integer> guess1 = Arrays.asList(1, 2, 3, 4, 2, -2);\n        System.out.println(solution.compare(game1, guess1)); // Expected: [0, 0, 0, 0, 3, 3]\n\n        // Test case 2\n        List<Integer> game2 = Arrays.asList(0, 5, 0, 0, 0, 4);\n        List<Integer> guess2 = Arrays.asList(4, 1, 1, 0, 0, -2);\n        System.out.println(solution.compare(game2, guess2)); // Expected: [4, 4, 1, 0, 0, 6]\n\n        // Test case 3\n        List<Integer> game3 = Arrays.asList(10, 20, 30, 40);\n        List<Integer> guess3 = Arrays.asList(10, 25, 35, 45);\n        System.out.println(solution.compare(game3, guess3)); // Expected: [0, 5, 5, 5]\n\n        // Test case 4\n        List<Integer> game4 = Arrays.asList(7, 8, 9, 10);\n        List<Integer> guess4 = Arrays.asList(6, 8, 10, 12);\n        System.out.println(solution.compare(game4, guess4)); // Expected: [1, 0, 1, 2]\n    }\n}\n"}
{"task_id": "Java/153", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You will be given the name of a class (a string) and a list of extensions.\n     * The extensions are to be used to load additional classes to the class. The\n     * strength of the extension is as follows: Let CAP be the number of the uppercase\n     * letters in the extension's name, and let SM be the number of lowercase letters\n     * in the extension's name, the strength is given by the fraction CAP - SM.\n     * You should find the strongest extension and return a string in this\n     * format: ClassName.Strongest_Extension.\n     * If there are two or more extensions with the same strength, you should\n     * choose the one that comes first in the list.\n     * For example, if you are given \"Slices\" as the class and a list of the\n     * extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n     * return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n     * (its strength is -1).\n     * Example:\n     * for Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        int maxStrength = Integer.MIN_VALUE;\n        String strongestExtension = \"\";\n        \n        for (String extension : extensions) {\n            int capCount = 0;\n            int smCount = 0;\n            \n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smCount++;\n                }\n            }\n            \n            int strength = capCount - smCount;\n            \n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n        \n        return class_name + \".\" + strongestExtension;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.Strongest_Extension(\"Slices\", Arrays.asList(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"))); // Should print: Slices.SErviNGSliCes\n        System.out.println(solution.Strongest_Extension(\"my_class\", Arrays.asList(\"AA\", \"Be\", \"CC\"))); // Should print: my_class.AA\n        System.out.println(solution.Strongest_Extension(\"DataHandler\", Arrays.asList(\"JSONParser\", \"XMLReader\", \"CSVLoader\"))); // Should print: DataHandler.JSONParser\n    }\n}\n"}
{"task_id": "Java/154", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n     * cycpattern_check(\"abcd\",\"abd\") => false\n     * cycpattern_check(\"hello\",\"ell\") => true\n     * cycpattern_check(\"whassup\",\"psus\") => false\n     * cycpattern_check(\"abab\",\"baa\") => true\n     * cycpattern_check(\"efef\",\"eeff\") => false\n     * cycpattern_check(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpattern_check(String a, String b) {\n        // Check if the second word or any of its rotations is a substring in the first word\n        for (int i = 0; i < b.length(); i++) {\n            String rotated = rotateString(b, i);\n            if (a.contains(rotated)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // Helper method to rotate the string by a given number of positions\n    private String rotateString(String s, int n) {\n        int len = s.length();\n        n = n % len;  // In case n is larger than the length of the string\n        return s.substring(len - n) + s.substring(0, len - n);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.cycpattern_check(\"abcd\", \"abd\")); // false\n        System.out.println(solution.cycpattern_check(\"hello\", \"ell\")); // true\n        System.out.println(solution.cycpattern_check(\"whassup\", \"psus\")); // false\n        System.out.println(solution.cycpattern_check(\"abab\", \"baa\")); // true\n        System.out.println(solution.cycpattern_check(\"efef\", \"eeff\")); // false\n        System.out.println(solution.cycpattern_check(\"himenss\", \"simen\")); // true\n    }\n}\n"}
{"task_id": "Java/155", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given an integer. return a tuple that has the number of even and odd digits respectively.\n     \n      Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n     */\n    public List<Integer> even_odd_count(int num) {\n        // Convert the number to a string to easily iterate over each digit\n        String strNum = Integer.toString(Math.abs(num));\n        \n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 0; i < strNum.length(); i++) {\n            int digit = Character.getNumericValue(strNum.charAt(i));\n            \n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n\n        // Return the counts as a list\n        return Arrays.asList(evenCount, oddCount);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.even_odd_count(-12));  // Expected output: [1, 1]\n        System.out.println(solution.even_odd_count(123));  // Expected output: [1, 2]\n        System.out.println(solution.even_odd_count(0));    // Expected output: [1, 0] (0 is considered even)\n        System.out.println(solution.even_odd_count(-456789));  // Expected output: [3, 3]\n    }\n}\n"}
{"task_id": "Java/156", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     Given a positive integer, obtain its roman numeral equivalent as a string,\n     and return it in lowercase.\n     Restrictions: 1 <= num <= 1000\n\n     Examples:\n     >>> int_to_mini_roman(19) == \"xix\"\n     >>> int_to_mini_roman(152) == \"clii\"\n     >>> int_to_mini_roman(426) == \"cdxxvi\"\n     */\n    public String int_to_mini_roman(int number) {\n        if (number < 1 || number > 1000) {\n            throw new IllegalArgumentException(\"Number must be between 1 and 1000\");\n        }\n\n        StringBuilder roman = new StringBuilder();\n        \n        // Thousands\n        while (number >= 1000) {\n            roman.append('m');\n            number -= 1000;\n        }\n        \n        // Hundreds\n        if (number >= 900) {\n            roman.append(\"cm\");\n            number -= 900;\n        } else if (number >= 500) {\n            roman.append('d');\n            number -= 500;\n        } else if (number >= 400) {\n            roman.append(\"cd\");\n            number -= 400;\n        }\n        \n        // Tens\n        if (number >= 90) {\n            roman.append(\"xc\");\n            number -= 90;\n        } else if (number >= 50) {\n            roman.append('l');\n            number -= 50;\n        } else if (number >= 40) {\n            roman.append(\"xl\");\n            number -= 40;\n        }\n        \n        // Units\n        if (number >= 9) {\n            roman.append(\"ix\");\n            number -= 9;\n        } else if (number >= 5) {\n            roman.append('v');\n            number -= 5;\n        } else if (number >= 4) {\n            roman.append(\"iv\");\n            number -= 4;\n        }\n        \n        // Remaining\n        while (number > 0) {\n            roman.append('i');\n            number--;\n        }\n\n        return roman.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.int_to_mini_roman(19));   // Output: xix\n        System.out.println(solution.int_to_mini_roman(152));  // Output: clii\n        System.out.println(solution.int_to_mini_roman(426));  // Output: cdxxvi\n\n        // Additional test cases\n        System.out.println(solution.int_to_mini_roman(399));  // Output: ccclxxxix\n        System.out.println(solution.int_to_mini_roman(583));  // Output: dlxxxiii\n        System.out.println(solution.int_to_mini_roman(1000)); // Output: m\n    }\n}\n"}
{"task_id": "Java/157", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given the lengths of the three sides of a triangle. Return true if the three\n     * sides form a right-angled triangle, false otherwise.\n     * A right-angled triangle is a triangle in which one angle is a right angle or 90 degrees.\n     *\n     * Example:\n     * right_angle_triangle(3, 4, 5) == true\n     * right_angle_triangle(1, 2, 3) == false\n     */\n    public boolean right_angle_triangle(int a, int b, int c) {\n        // Sort the sides to ensure the longest side is last\n        int[] sides = new int[]{a, b, c};\n        Arrays.sort(sides);\n        \n        // Check if the square of the longest side equals the sum of squares of other two sides\n        return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) == Math.pow(sides[2], 2);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.right_angle_triangle(3, 4, 5)); // Expected: true\n        System.out.println(solution.right_angle_triangle(1, 2, 3)); // Expected: false\n        System.out.println(solution.right_angle_triangle(5, 12, 13)); // Expected: true\n        System.out.println(solution.right_angle_triangle(6, 8, 10)); // Expected: true\n        System.out.println(solution.right_angle_triangle(7, 10, 12)); // Expected: false\n    }\n}\n"}
{"task_id": "Java/158", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function that accepts a list of strings.\n     * The list contains different words. Return the word with maximum number\n     * of unique characters. If multiple strings have maximum number of unique\n     * characters, return the one which comes first in lexicographical order.\n     *\n     * find_max([\"name\", \"of\", \"string\"]) == \"string\"\n     * find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n     * find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\n     */\n    public String find_max(List<String> words) {\n        if (words == null || words.isEmpty()) {\n            return \"\";\n        }\n\n        String maxWord = \"\";\n        int maxUniqueChars = 0;\n\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            if (uniqueChars.size() > maxUniqueChars || \n                (uniqueChars.size() == maxUniqueChars && word.compareTo(maxWord) < 0)) {\n                maxUniqueChars = uniqueChars.size();\n                maxWord = word;\n            }\n        }\n\n        return maxWord;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<String> test1 = Arrays.asList(\"name\", \"of\", \"string\");\n        System.out.println(solution.find_max(test1)); // Output: string\n\n        List<String> test2 = Arrays.asList(\"name\", \"enam\", \"game\");\n        System.out.println(solution.find_max(test2)); // Output: enam\n\n        List<String> test3 = Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\");\n        System.out.println(solution.find_max(test3)); // Output: aaaaaaa\n    }\n}\n"}
{"task_id": "Java/159", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You're a hungry rabbit, and you already have eaten a certain number of carrots,\n     * but now you need to eat more carrots to complete the day's meals.\n     * return an array of [ total number of eaten carrots after your meals,\n     *                     the number of carrots left after your meals ]\n     * if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n     * Example:\n     * eat(5, 6, 10) -> [11, 4]\n     * eat(4, 8, 9) -> [12, 1]\n     * eat(1, 10, 10) -> [11, 0]\n     * eat(2, 11, 5) -> [7, 0]\n\n     * Variables:\n     * @number : integer\n     *        the number of carrots that you have eaten.\n     * @need : integer\n     *        the number of carrots that you need to eat.\n     * @remaining : integer\n     *        the number of remaining carrots thet exist in stock\n\n     * Constrain:\n     * * 0 <= number <= 1000\n     * * 0 <= need <= 1000\n     * * 0 <= remaining <= 1000\n\n     * Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        int totalEaten = number + Math.min(need, remaining);\n        int carrotsLeft = Math.max(remaining - need, 0);\n        return Arrays.asList(totalEaten, carrotsLeft);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.eat(5, 6, 10)); // Expected: [11, 4]\n        System.out.println(solution.eat(4, 8, 9));  // Expected: [12, 1]\n        System.out.println(solution.eat(1, 10, 10));// Expected: [11, 0]\n        System.out.println(solution.eat(2, 11, 5) );// Expected: [7, 0]\n    }\n}\n"}
{"task_id": "Java/160", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given two lists operator, and operand. The first list has basic algebra operations,\n     * and the second list is a list of integers. Use the two given lists to build the algebric\n     * expression and return the evaluation of this expression.\n     *\n     * @param operator List of strings representing the operators: \"+\", \"-\", \"*\", \"/\", \"**\"\n     * @param operand  List of integers representing the operands\n     * @return The result of evaluating the algebraic expression\n     */\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        if (operator.isEmpty() || operand.size() < 2) {\n            throw new IllegalArgumentException(\"Invalid input: operator list must not be empty and operand list must have at least two elements.\");\n        }\n\n        int result = operand.get(0);\n        for (int i = 0; i < operator.size(); i++) {\n            switch (operator.get(i)) {\n                case \"+\":\n                    result += operand.get(i + 1);\n                    break;\n                case \"-\":\n                    result -= operand.get(i + 1);\n                    break;\n                case \"*\":\n                    result *= operand.get(i + 1);\n                    break;\n                case \"/\":\n                    if (operand.get(i + 1) == 0) {\n                        throw new ArithmeticException(\"Division by zero is not allowed.\");\n                    }\n                    result /= operand.get(i + 1);\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, operand.get(i + 1));\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Unsupported operator: \" + operator.get(i));\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<String> operators1 = Arrays.asList(\"+\", \"*\", \"-\");\n        List<Integer> operands1 = Arrays.asList(2, 3, 4, 5);\n        System.out.println(solution.do_algebra(operators1, operands1)); // Expected output: 9\n\n        List<String> operators2 = Arrays.asList(\"/\", \"+\", \"**\");\n        List<Integer> operands2 = Arrays.asList(8, 2, 3, 2);\n        System.out.println(solution.do_algebra(operators2, operands2)); // Expected output: 4 (8 / 2 + 3 ** 2)\n\n        List<String> operators3 = Arrays.asList(\"*\", \"-\");\n        List<Integer> operands3 = Arrays.asList(10, 5, 3);\n        System.out.println(solution.do_algebra(operators3, operands3)); // Expected output: 17 (10 * 5 - 3)\n    }\n}\n"}
{"task_id": "Java/161", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You are given a string s.\n     * if s[i] is a letter, reverse its case from lower to upper or vise versa,\n     * otherwise keep it as it is. If the string contains no letters, reverse the string.\n     * The function should return the resulted string.\n     *\n     * Examples:\n     * solve(\"1234\") = \"4321\"\n     * solve(\"ab\") = \"AB\"\n     * solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        if (s == null || s.isEmpty()) {\n            return s;\n        }\n\n        boolean containsLetters = false;\n        StringBuilder result = new StringBuilder();\n\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                containsLetters = true;\n                result.append(Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c));\n            } else {\n                result.append(c);\n            }\n        }\n\n        return containsLetters ? result.toString() : new StringBuilder(s).reverse().toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.solve(\"1234\")); // Expected: \"4321\"\n        System.out.println(solution.solve(\"ab\"));   // Expected: \"AB\"\n        System.out.println(solution.solve(\"#a@C\")); // Expected: \"#A@c\"\n        System.out.println(solution.solve(\"\"));     // Expected: \"\"\n        System.out.println(solution.solve(\"123!@#\")); // Expected: \"#@!321\"\n    }\n}\n"}
{"task_id": "Java/162", "generation": "import java.math.BigInteger;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Optional;\n\nclass Solution {\n\n    /**\n     * Given a string \"text\", return its md5 hash equivalent string with length being 32.\n     * If \"text\" is an empty string, return Optional.empty().\n     *\n     * >>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] messageDigest = md.digest(text.getBytes());\n        BigInteger no = new BigInteger(1, messageDigest);\n        \n        // Convert message digest into hex value\n        String hashtext = no.toString(16);\n        while (hashtext.length() < 32) {\n            hashtext = \"0\" + hashtext;\n        }\n        \n        return Optional.of(hashtext);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"MD5 of 'Hello world': \" + solution.string_to_md5(\"Hello world\").orElse(\"N/A\"));\n        System.out.println(\"MD5 of '': \" + solution.string_to_md5(\"\").orElse(\"N/A\"));\n\n        try {\n            System.out.println(\"MD5 of 'Another Test': \" + solution.string_to_md5(\"Another Test\").orElse(\"N/A\"));\n        } catch (NoSuchAlgorithmException e) {\n            System.err.println(\"Error: \" + e.getMessage());\n        }\n    }\n}\n"}
{"task_id": "Java/163", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given two positive integers a and b, return the even digits between a\n     * and b, in ascending order. Please note that the even digits refer to even numbers less than 10.\n     *\n     * For example:\n     * generate_integers(2, 8) => [2, 4, 6, 8]\n     * generate_integers(8, 2) => [2, 4, 6, 8]\n     * generate_integers(10, 14) => []\n     */\n    public List<Integer> generate_integers(int a, int b) {\n        // Ensure the lower bound is less than or equal to the upper bound\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = a; i <= b; i++) {\n            // Extract each digit and check if it is even\n            while (i > 0) {\n                int digit = i % 10;\n                if (digit >= 2 && digit <= 8 && !result.contains(digit)) {\n                    result.add(digit);\n                }\n                i /= 10;\n            }\n        }\n\n        // Sort the result list\n        Collections.sort(result);\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.generate_integers(2, 8));   // Output: [2, 4, 6, 8]\n        System.out.println(solution.generate_integers(8, 2));   // Output: [2, 4, 6, 8]\n        System.out.println(solution.generate_integers(10, 14)); // Output: []\n    }\n}\n"}
{"task_id": "Java/0", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n     *\n     * @param numbers List of Double values.\n     * @param threshold The threshold value for closeness.\n     * @return true if there exist at least two elements whose difference is less than the threshold; false otherwise.\n     */\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        // Sort the list to make it easier to find close elements\n        Collections.sort(numbers);\n\n        // Iterate through the sorted list and check the difference between consecutive elements\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (numbers.get(i + 1) - numbers.get(i) < threshold) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.has_close_elements(Arrays.asList(1.0, 2.0, 3.0), 0.5)); // Expected: false\n        System.out.println(solution.has_close_elements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)); // Expected: true\n        System.out.println(solution.has_close_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0), 0.1)); // Expected: false\n        System.out.println(solution.has_close_elements(Arrays.asList(1.5, 2.5, 3.5, 4.5, 5.5), 0.75)); // Expected: true\n    }\n}\n"}
{"task_id": "Java/1", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n     * separate those group into separate strings and return the list of those.\n     * Separate groups are balanced (each open brace is properly closed) and not nested within each other\n     * Ignore any spaces in the input string.\n     *\n     * @param paren_string The input string containing multiple groups of nested parentheses.\n     * @return A List of separate strings, each representing a group of balanced parentheses.\n     */\n    public List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Integer> stack = new Stack<>();\n        \n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            \n            if (c == '(') {\n                stack.push(i);\n            } else if (c == ')') {\n                if (!stack.isEmpty()) {\n                    int start = stack.pop();\n                    // Ignore spaces\n                    while (i + 1 < paren_string.length() && Character.isWhitespace(paren_string.charAt(i + 1))) {\n                        i++;\n                    }\n                    result.add(paren_string.substring(start, i + 1));\n                }\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.separate_paren_groups(\"( ) (( )) (( )( ))\")); // [\"()\", \"(())\", \"(()())\"]\n        System.out.println(solution.separate_paren_groups(\"((())) (()) ()\")); // [\"((()))\", \"(())\", \"()\"]\n        System.out.println(solution.separate_paren_groups(\"() (()) (((())))\")); // [\"()\", \"(())\", \"(((())))\"]\n        System.out.println(solution.separate_paren_groups(\"(((()))) (( ))\")); // [\"(((())))\", \"(())\"]\n    }\n}\n"}
{"task_id": "Java/2", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given a positive floating point number, it can be decomposed into\n     and integer part (largest integer smaller than given number) and decimals\n     (leftover part always smaller than 1).\n\n     Return the decimal part of the number.\n     >>> truncate_number(3.5)\n     0.5\n      */\n    public double truncate_number(double number) {\n        return number - Math.floor(number);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Truncate 3.5: \" + solution.truncate_number(3.5)); // Expected output: 0.5\n        System.out.println(\"Truncate 123.456: \" + solution.truncate_number(123.456)); // Expected output: 0.456\n        System.out.println(\"Truncate -789.123: \" + solution.truncate_number(-789.123)); // Expected output: -0.123\n        System.out.println(\"Truncate 0.999: \" + solution.truncate_number(0.999)); // Expected output: 0.999\n        System.out.println(\"Truncate 42.0: \" + solution.truncate_number(42.0)); // Expected output: 0.0\n    }\n}\n"}
{"task_id": "Java/3", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You're given a list of deposit and withdrawal operations on a bank account that starts with\n     * zero balance. Your task is to detect if at any point the balance of account falls below zero,\n     * and at that point function should return True. Otherwise it should return False.\n     *\n     * @param operations List of integers representing deposits (positive values) and withdrawals (negative values)\n     * @return true if the balance goes below zero, false otherwise\n     */\n    public boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (int op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.below_zero(Arrays.asList(1, 2, 3))); // Expected: false\n        System.out.println(solution.below_zero(Arrays.asList(1, 2, -4, 5))); // Expected: true\n        System.out.println(solution.below_zero(Arrays.asList(-1, 2, 3))); // Expected: false\n        System.out.println(solution.below_zero(Arrays.asList(10, -15, 5, -6))); // Expected: true\n    }\n}\n"}
{"task_id": "Java/4", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * For a given list of input numbers, calculate Mean Absolute Deviation around the mean of this dataset.\n     * Mean Absolute Deviation is the average absolute difference between each element and a centerpoint (mean in this case):\n     * MAD = average | x - x_mean |\n     *\n     * @param numbers List of Double values\n     * @return Mean Absolute Deviation as a double\n     */\n    public double mean_absolute_deviation(List<Double> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list cannot be null or empty\");\n        }\n\n        // Calculate the mean of the dataset\n        double sum = 0.0;\n        for (Double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n\n        // Calculate the Mean Absolute Deviation\n        double mad = 0.0;\n        for (Double num : numbers) {\n            mad += Math.abs(num - mean);\n        }\n        return mad / numbers.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.mean_absolute_deviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))); // Expected output: 1.0\n        System.out.println(solution.mean_absolute_deviation(Arrays.asList(5.0, 7.0, 9.0, 11.0))); // Expected output: 2.0\n        System.out.println(solution.mean_absolute_deviation(Arrays.asList(-3.0, -1.0, 0.0, 2.0))); // Expected output: 1.5\n        System.out.println(solution.mean_absolute_deviation(Arrays.asList(10.0))); // Expected output: 0.0 (single element)\n    }\n}\n"}
{"task_id": "Java/5", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Insert a number 'delimiter' between every two consecutive elements of input list `numbers`\n     *\n     * @param numbers The input list of integers.\n     * @param delimiter The integer to be inserted as a delimiter.\n     * @return A new list with the delimiter interspersed.\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        if (numbers == null || numbers.size() <= 1) {\n            return numbers;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.intersperse(List.of(), 4)); // Expected: []\n        System.out.println(solution.intersperse(Arrays.asList(1, 2, 3), 4)); // Expected: [1, 4, 2, 4, 3]\n        System.out.println(solution.intersperse(Arrays.asList(5), 0)); // Expected: [5]\n        System.out.println(solution.intersperse(Arrays.asList(1, 2, 3, 4), -1)); // Expected: [1, -1, 2, -1, 3, -1, 4]\n    }\n}\n"}
{"task_id": "Java/6", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n     * For each of the group, output the deepest level of nesting of parentheses.\n     * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n     *\n     * >>> parse_nested_parens(\"(()()) ((())) () ((())()())\n     * [2, 3, 1, 3]\n     */\n    public List<Integer> parse_nested_parens(String paren_string) {\n        String[] groups = paren_string.split(\"\\\\s+\");\n        List<Integer> depths = new ArrayList<>();\n        \n        for (String group : groups) {\n            int maxDepth = 0;\n            int currentDepth = 0;\n            \n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentDepth++;\n                    maxDepth = Math.max(maxDepth, currentDepth);\n                } else if (c == ')') {\n                    currentDepth--;\n                }\n            }\n            \n            depths.add(maxDepth);\n        }\n        \n        return depths;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        String test1 = \"(()()) ((())) () ((())()())\";\n        List<Integer> result1 = solution.parse_nested_parens(test1);\n        System.out.println(result1); // Expected output: [2, 3, 1, 3]\n        \n        String test2 = \"(()) (()) (((())))\";\n        List<Integer> result2 = solution.parse_nested_parens(test2);\n        System.out.println(result2); // Expected output: [2, 2, 4]\n        \n        String test3 = \"((())) () ((()))\";\n        List<Integer> result3 = solution.parse_nested_parens(test3);\n        System.out.println(result3); // Expected output: [3, 1, 3]\n    }\n}\n"}
{"task_id": "Java/7", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Filter an input list of strings only for ones that contain given substring\n     *\n     * @param strings The input list of strings\n     * @param substring The substring to filter by\n     * @return A list of strings containing the given substring\n     */\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> filteredStrings = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredStrings.add(str);\n            }\n        }\n        return filteredStrings;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<String> testList1 = Arrays.asList();\n        String substring1 = \"a\";\n        System.out.println(\"Test Case 1: \" + solution.filter_by_substring(testList1, substring1)); // Expected output: []\n\n        // Test case 2\n        List<String> testList2 = Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\");\n        String substring2 = \"a\";\n        System.out.println(\"Test Case 2: \" + solution.filter_by_substring(testList2, substring2)); // Expected output: [abc, bacd, array]\n\n        // Test case 3\n        List<String> testList3 = Arrays.asList(\"hello\", \"world\", \"java\", \"python\");\n        String substring3 = \"o\";\n        System.out.println(\"Test Case 3: \" + solution.filter_by_substring(testList3, substring3)); // Expected output: [hello, world, python]\n\n        // Test case 4\n        List<String> testList4 = Arrays.asList(\"apple\", \"banana\", \"cherry\");\n        String substring4 = \"z\";\n        System.out.println(\"Test Case 4: \" + solution.filter_by_substring(testList4, substring4)); // Expected output: []\n    }\n}\n"}
{"task_id": "Java/8", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n     * Empty sum should be equal to 0 and empty product should be equal to 1.\n     *\n     * @param numbers The input list of integers\n     * @return A List containing the sum and product of the integers\n     */\n    public List<Integer> sum_product(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n\n        for (Integer number : numbers) {\n            sum += number;\n            if (number != 0) { // Avoid division by zero in case all elements are zero\n                product *= number;\n            }\n        }\n\n        return Arrays.asList(sum, product);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = new ArrayList<>();\n        System.out.println(\"Test 1: \" + solution.sum_product(test1)); // Expected output: [0, 1]\n\n        List<Integer> test2 = Arrays.asList(1, 2, 3, 4);\n        System.out.println(\"Test 2: \" + solution.sum_product(test2)); // Expected output: [10, 24]\n\n        List<Integer> test3 = Arrays.asList(-1, -2, -3, -4);\n        System.out.println(\"Test 3: \" + solution.sum_product(test3)); // Expected output: [-10, 24]\n\n        List<Integer> test4 = Arrays.asList(0, 1, 2, 3);\n        System.out.println(\"Test 4: \" + solution.sum_product(test4)); // Expected output: [6, 0]\n    }\n}\n"}
{"task_id": "Java/9", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence.\n     *\n     * @param numbers The input list of integers.\n     * @return A list containing the rolling maximum elements.\n     */\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        List<Integer> result = new ArrayList<>();\n        int maxSoFar = Integer.MIN_VALUE;\n\n        for (int num : numbers) {\n            if (num > maxSoFar) {\n                maxSoFar = num;\n            }\n            result.add(maxSoFar);\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(1, 2, 3, 2, 3, 4, 2);\n        System.out.println(\"Test Case 1: \" + solution.rolling_max(test1)); // Expected: [1, 2, 3, 3, 3, 4, 4]\n\n        List<Integer> test2 = Arrays.asList(5, 3, 8, 6, 7);\n        System.out.println(\"Test Case 2: \" + solution.rolling_max(test2)); // Expected: [5, 5, 8, 8, 8]\n\n        List<Integer> test3 = new ArrayList<>();\n        System.out.println(\"Test Case 3 (empty list): \" + solution.rolling_max(test3)); // Expected: []\n\n        List<Integer> test4 = Arrays.asList(10);\n        System.out.println(\"Test Case 4 (single element): \" + solution.rolling_max(test4)); // Expected: [10]\n    }\n}\n"}
{"task_id": "Java/10", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    /**\n     * Find the shortest palindrome that begins with a supplied string.\n     * Algorithm idea is simple:\n     * - Find the longest postfix of supplied string that is a palindrome.\n     * - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n     */\n    public String make_palindrome(String string) {\n        if (string.isEmpty()) return \"\";\n\n        int n = string.length();\n        for (int i = n; i >= 0; i--) {\n            if (isPalindrome(string.substring(0, i))) {\n                // Found the longest palindromic suffix\n                String prefix = string.substring(i);\n                StringBuilder reversedPrefix = new StringBuilder(prefix).reverse();\n                return string + reversedPrefix.toString();\n            }\n        }\n        return string;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases for isPalindrome method\n        System.out.println(solution.isPalindrome(\"\")); // true\n        System.out.println(solution.isPalindrome(\"a\")); // true\n        System.out.println(solution.isPalindrome(\"racecar\")); // true\n        System.out.println(solution.isPalindrome(\"hello\")); // false\n\n        // Test cases for make_palindrome method\n        System.out.println(solution.make_palindrome(\"\")); // \"\"\n        System.out.println(solution.make_palindrome(\"cat\")); // \"catac\"\n        System.out.println(solution.make_palindrome(\"cata\")); // \"catac\"\n        System.out.println(solution.make_palindrome(\"abc\")); // \"abccba\"\n        System.out.println(solution.make_palindrome(\"abcd\")); // \"abcddcba\"\n    }\n}\n"}
{"task_id": "Java/11", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Input are two strings a and b consisting only of 1s and 0s.\n     * Perform binary XOR on these inputs and return result also as a string.\n     *\n     * @param a the first binary string\n     * @param b the second binary string\n     * @return the result of binary XOR operation as a string\n     */\n    public String string_xor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        \n        // Ensure both strings are of equal length by padding with leading zeros if necessary\n        int maxLength = Math.max(a.length(), b.length());\n        a = String.format(\"%\" + maxLength + \"s\", a).replace(' ', '0');\n        b = String.format(\"%\" + maxLength + \"s\", b).replace(' ', '0');\n\n        // Perform XOR operation character by character\n        for (int i = 0; i < maxLength; i++) {\n            char bitA = a.charAt(i);\n            char bitB = b.charAt(i);\n\n            if (bitA == bitB) {\n                result.append('0');\n            } else {\n                result.append('1');\n            }\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.string_xor(\"010\", \"110\"));  // Expected output: \"100\"\n        System.out.println(solution.string_xor(\"101010\", \"110011\"));  // Expected output: \"011001\"\n        System.out.println(solution.string_xor(\"1111\", \"0000\"));  // Expected output: \"1111\"\n        System.out.println(solution.string_xor(\"0000\", \"0000\"));  // Expected output: \"0000\"\n        System.out.println(solution.string_xor(\"11111111\", \"00000000\"));  // Expected output: \"11111111\"\n    }\n}\n"}
{"task_id": "Java/12", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Out of list of strings, return the longest one. Return the first one in case of multiple\n     * strings of the same length. Return Optional.empty() in case the input list is empty.\n     *\n     * @param strings List of strings to be processed.\n     * @return Optional containing the longest string or Optional.empty() if the list is empty.\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longestString = strings.get(0);\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n        return Optional.of(longestString);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.longest(new ArrayList<>())); // Expected: Optional.empty\n        System.out.println(solution.longest(Arrays.asList(\"a\", \"b\", \"c\"))); // Expected: Optional[a]\n        System.out.println(solution.longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))); // Expected: Optional[ccc]\n\n        // Additional test cases\n        System.out.println(solution.longest(Arrays.asList())); // Expected: Optional.empty\n        System.out.println(solution.longest(Arrays.asList(\"hello\", \"world\", \"java\", \"python\"))); // Expected: Optional[python]\n    }\n}\n"}
{"task_id": "Java/13", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return a greatest common divisor of two integers a and b\n     *\n     * @param a first integer\n     * @param b second integer\n     * @return the greatest common divisor of a and b\n     */\n    public int greatest_common_divisor(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n\n    // Test cases to verify the correctness of the method\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: GCD of 3 and 5 is 1\n        System.out.println(\"GCD of 3 and 5: \" + solution.greatest_common_divisor(3, 5)); // Expected output: 1\n\n        // Test case 2: GCD of 25 and 15 is 5\n        System.out.println(\"GCD of 25 and 15: \" + solution.greatest_common_divisor(25, 15)); // Expected output: 5\n\n        // Test case 3: GCD of 100 and 80 is 20\n        System.out.println(\"GCD of 100 and 80: \" + solution.greatest_common_divisor(100, 80)); // Expected output: 20\n\n        // Test case 4: GCD of 7 and 35 is 7\n        System.out.println(\"GCD of 7 and 35: \" + solution.greatest_common_divisor(7, 35)); // Expected output: 7\n\n        // Test case 5: GCD of 1024 and 64 is 64\n        System.out.println(\"GCD of 1024 and 64: \" + solution.greatest_common_divisor(1024, 64)); // Expected output: 64\n    }\n}\n"}
{"task_id": "Java/14", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return list of all prefixes from shortest to longest of the input string\n     * >>> all_prefixes(\"abc\")\n     * [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> all_prefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n\n    // Method to test the all_prefixes method\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: Empty string\n        System.out.println(\"Test Case 1 (\\\"\\\" expected): \" + solution.all_prefixes(\"\"));\n        List<String> expected1 = new ArrayList<>();\n        assert solution.all_prefixes(\"\").equals(expected1) : \"Test Case 1 failed\";\n\n        // Test case 2: Single character\n        System.out.println(\"Test Case 2 (\\\"a\\\" expected): \" + solution.all_prefixes(\"a\"));\n        List<String> expected2 = Arrays.asList(\"a\");\n        assert solution.all_prefixes(\"a\").equals(expected2) : \"Test Case 2 failed\";\n\n        // Test case 3: Multiple characters\n        System.out.println(\"Test Case 3 (\\\"ab\\\", \\\"abc\\\" expected): \" + solution.all_prefixes(\"abc\"));\n        List<String> expected3 = Arrays.asList(\"a\", \"ab\", \"abc\");\n        assert solution.all_prefixes(\"abc\").equals(expected3) : \"Test Case 3 failed\";\n\n        // Test case 4: String with spaces\n        System.out.println(\"Test Case 4 (\\\"hello\\\", \\\"hell\\\", \\\"he\\\", \\\"h\\\" expected): \" + solution.all_prefixes(\"hello\"));\n        List<String> expected4 = Arrays.asList(\"h\", \"he\", \"hel\", \"hell\", \"hello\");\n        assert solution.all_prefixes(\"hello\").equals(expected4) : \"Test Case 4 failed\";\n\n        System.out.println(\"All test cases passed!\");\n    }\n}\n"}
{"task_id": "Java/15", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n     *\n     * @param n The upper limit of the sequence (inclusive).\n     * @return A string with space-delimited numbers from 0 to n.\n     */\n    public String string_sequence(int n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            if (i > 0) {\n                sb.append(\" \");\n            }\n            sb.append(i);\n        }\n        return sb.toString();\n    }\n\n    // Test cases\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: n = 0\n        System.out.println(solution.string_sequence(0)); // Expected output: \"0\"\n\n        // Test case 2: n = 5\n        System.out.println(solution.string_sequence(5)); // Expected output: \"0 1 2 3 4 5\"\n\n        // Additional test cases\n        System.out.println(solution.string_sequence(10)); // Expected output: \"0 1 2 3 4 5 6 7 8 9 10\"\n        System.out.println(solution.string_sequence(-3)); // Expected output: \"\"\n    }\n}\n"}
{"task_id": "Java/16", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a string, find out how many distinct characters (regardless of case) does it consist of.\n     *\n     * @param string The input string.\n     * @return The number of distinct characters in the string, ignoring case.\n     */\n    public int count_distinct_characters(String string) {\n        // Convert the string to lowercase to ignore case\n        String lowerCaseString = string.toLowerCase();\n        \n        // Use a HashSet to store unique characters\n        Set<Character> uniqueChars = new HashSet<>();\n        \n        // Iterate through each character in the string and add it to the set\n        for (char c : lowerCaseString.toCharArray()) {\n            uniqueChars.add(c);\n        }\n        \n        // The size of the set is the number of distinct characters\n        return uniqueChars.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.count_distinct_characters(\"xyzXYZ\")); // Expected output: 3\n        System.out.println(solution.count_distinct_characters(\"Jerry\"));   // Expected output: 4\n        System.out.println(solution.count_distinct_characters(\"HelloWorld\")); // Expected output: 7\n        System.out.println(solution.count_distinct_characters(\"AAAaaa\"));  // Expected output: 1\n        System.out.println(solution.count_distinct_characters(\"\"));        // Expected output: 0\n    }\n}\n"}
{"task_id": "Java/17", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Input to this function is a string representing musical notes in a special ASCII format.\n     * Your task is to parse this string and return list of integers corresponding to how many beats does each note last.\n     *\n     * Here is a legend:\n     * \"o\" - whole note, lasts four beats\n     * \"o|\" - half note, lasts two beats\n     * \".|\" - quater note, lasts one beat\n     */\n    public List<Integer> parse_music(String string) {\n        String[] notes = string.split(\" \");\n        List<Integer> result = new ArrayList<>();\n        \n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    result.add(4);\n                    break;\n                case \"o|\":\n                    result.add(2);\n                    break;\n                case \".|\":\n                    result.add(1);\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid note: \" + note);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.parse_music(\"o o| .| o| o| .| .| .| .| o o\")); // Expected: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n        System.out.println(solution.parse_music(\"o| .| o o| .|\")); // Expected: [2, 1, 4, 2, 1]\n        System.out.println(solution.parse_music(\".| .| .| .|\")); // Expected: [1, 1, 1, 1, 1]\n        \n        try {\n            solution.parse_music(\"o o| .| o| o| .| .| .| .| x\"); // Should throw an exception\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage()); // Expected: Invalid note: x\n        }\n    }\n}\n"}
{"task_id": "Java/18", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Find how many times a given substring can be found in the original string. Count overlapping cases.\n     *\n     * @param string The original string.\n     * @param substring The substring to find.\n     * @return The number of times the substring appears in the original string, including overlaps.\n     */\n    public int how_many_times(String string, String substring) {\n        if (substring.isEmpty()) return 0;\n        \n        int count = 0;\n        int index = 0;\n        \n        while ((index = string.indexOf(substring, index)) != -1) {\n            count++;\n            index++; // Move to the next character after the found substring\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.how_many_times(\"\", \"a\")); // Expected output: 0\n        System.out.println(solution.how_many_times(\"aaa\", \"a\")); // Expected output: 3\n        System.out.println(solution.how_many_times(\"aaaa\", \"aa\")); // Expected output: 3\n        System.out.println(solution.how_many_times(\"abababa\", \"aba\")); // Expected output: 3\n        System.out.println(solution.how_many_times(\"testtest\", \"tst\")); // Expected output: 2\n    }\n}\n"}
{"task_id": "Java/19", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Input is a space-delimited string of numberals from 'zero' to 'nine'.\n     * Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n     * Return the string with numbers sorted from smallest to largest\n     *\n     * @param numbers The input string containing numberals.\n     * @return A string with the numberals sorted in ascending order.\n     */\n    public String sort_numbers(String numbers) {\n        Map<String, Integer> numeralMap = new HashMap<>();\n        numeralMap.put(\"zero\", 0);\n        numeralMap.put(\"one\", 1);\n        numeralMap.put(\"two\", 2);\n        numeralMap.put(\"three\", 3);\n        numeralMap.put(\"four\", 4);\n        numeralMap.put(\"five\", 5);\n        numeralMap.put(\"six\", 6);\n        numeralMap.put(\"seven\", 7);\n        numeralMap.put(\"eight\", 8);\n        numeralMap.put(\"nine\", 9);\n\n        String[] words = numbers.split(\"\\\\s+\");\n        Integer[] nums = new Integer[words.length];\n\n        for (int i = 0; i < words.length; i++) {\n            nums[i] = numeralMap.get(words[i]);\n        }\n\n        Arrays.sort(nums);\n\n        StringBuilder sortedNumbers = new StringBuilder();\n        for (Integer num : nums) {\n            sortedNumbers.append(numeralMap.inverse().get(num)).append(\" \");\n        }\n\n        return sortedNumbers.toString().trim();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sort_numbers(\"three one five\")); // Expected: \"one three five\"\n        System.out.println(solution.sort_numbers(\"nine eight seven\")); // Expected: \"seven eight nine\"\n        System.out.println(solution.sort_numbers(\"four two six zero\")); // Expected: \"zero two four six\"\n        System.out.println(solution.sort_numbers(\"five three one\")); // Expected: \"one three five\"\n        System.out.println(solution.sort_numbers(\"\")); // Expected: \"\"\n    }\n}\n"}
{"task_id": "Java/20", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n     */\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements\");\n        }\n\n        double minDiff = Double.MAX_VALUE;\n        List<Double> closestElements = new ArrayList<>();\n\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (diff < minDiff) {\n                    minDiff = diff;\n                    closestElements.clear();\n                    closestElements.add(Math.min(numbers.get(i), numbers.get(j)));\n                    closestElements.add(Math.max(numbers.get(i), numbers.get(j)));\n                }\n            }\n        }\n\n        return closestElements;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))); // [2.0, 2.2]\n        System.out.println(solution.find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))); // [2.0, 2.0]\n        System.out.println(solution.find_closest_elements(Arrays.asList(1.5, 3.1, 2.8, 4.6, 2.9))); // [2.8, 2.9]\n        System.out.println(solution.find_closest_elements(Arrays.asList(-1.0, -2.0, -3.0, -4.0, -5.0, -2.1))); // [-2.1, -2.0]\n    }\n}\n"}
{"task_id": "Java/21", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given list of numbers (of at least two elements), apply a linear transform to that list,\n     * such that the smallest number will become 0 and the largest will become 1.\n     *\n     * @param numbers List of Double values\n     * @return A new list where each element is rescaled to the range [0, 1]\n     */\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements\");\n        }\n\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n\n        List<Double> rescaledNumbers = new ArrayList<>();\n        for (Double num : numbers) {\n            double scaledValue = (num - min) / (max - min);\n            rescaledNumbers.add(scaledValue);\n        }\n        return rescaledNumbers;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Double> test1 = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        System.out.println(\"Test Case 1: \" + solution.rescale_to_unit(test1));\n\n        List<Double> test2 = Arrays.asList(-1.0, 0.0, 1.0, 2.0);\n        System.out.println(\"Test Case 2: \" + solution.rescale_to_unit(test2));\n\n        List<Double> test3 = Arrays.asList(10.5, 20.5, 30.5, 40.5);\n        System.out.println(\"Test Case 3: \" + solution.rescale_to_unit(test3));\n    }\n}\n"}
{"task_id": "Java/22", "generation": "import java.util.*;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\nclass Solution {\n\n    /**\n     * Filter given list of any values only for integers\n     */\n    public List<Integer> filter_integers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n\n    @Test\n    public void testFilterIntegers() {\n        // Test case 1: Mixed types with a string and float\n        List<Object> mixedList = Arrays.asList('a', 3.14, 5);\n        List<Integer> expected1 = new ArrayList<>(Arrays.asList(5));\n        assertEquals(expected1, filter_integers(mixedList));\n\n        // Test case 2: List of integers, strings, map, and list\n        List<Object> mixedList2 = Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of());\n        List<Integer> expected2 = new ArrayList<>(Arrays.asList(1, 2, 3));\n        assertEquals(expected2, filter_integers(mixedList2));\n\n        // Test case 3: Empty list\n        List<Object> emptyList = new ArrayList<>();\n        List<Integer> expected3 = new ArrayList<>();\n        assertEquals(expected3, filter_integers(emptyList));\n\n        // Test case 4: List with only integers\n        List<Object> integerList = Arrays.asList(10, 20, 30);\n        List<Integer> expected4 = new ArrayList<>(Arrays.asList(10, 20, 30));\n        assertEquals(expected4, filter_integers(integerList));\n\n        // Test case 5: List with only non-integer values\n        List<Object> nonIntegerList = Arrays.asList(\"hello\", 3.14, Map.of(), List.of());\n        List<Integer> expected5 = new ArrayList<>();\n        assertEquals(expected5, filter_integers(nonIntegerList));\n    }\n}\n"}
{"task_id": "Java/23", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return length of given string\n     * >>> strlen(\"\")\n     * 0\n     * >>> strlen(\"abc\")\n     * 3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"strlen(\"\") should be 0: \" + (solution.strlen(\"\") == 0));\n        System.out.println(\"strlen(\\\"abc\\\") should be 3: \" + (solution.strlen(\"abc\") == 3));\n        System.out.println(\"strlen(\\\"hello world\\\") should be 11: \" + (solution.strlen(\"hello world\") == 11));\n        System.out.println(\"strlen(\\\"Java\\\") should be 4: \" + (solution.strlen(\"Java\") == 4));\n        System.out.println(\"strlen(\\\"1234567890\\\") should be 10: \" + (solution.strlen(\"1234567890\") == 10));\n    }\n}\n"}
{"task_id": "Java/24", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * For a given number n, find the largest number that divides n evenly, smaller than n.\n     *\n     * @param n The input number.\n     * @return The largest divisor of n that is smaller than n.\n     */\n    public int largest_divisor(int n) {\n        for (int i = n / 2; i >= 1; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        // If no divisor found, which should not happen as every number is divisible by 1\n        return 1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Testing largest_divisor method:\");\n        int testCases[] = {15, 28, 37, 49, 60};\n        int expectedResults[] = {5, 14, 1, 7, 15};\n\n        for (int i = 0; i < testCases.length; i++) {\n            int result = solution.largest_divisor(testCases[i]);\n            System.out.println(\"Input: \" + testCases[i] + \", Expected: \" + expectedResults[i] + \", Actual: \" + result);\n            if (result == expectedResults[i]) {\n                System.out.println(\"Test case \" + i + \" passed.\");\n            } else {\n                System.out.println(\"Test case \" + i + \" failed.\");\n            }\n        }\n    }\n}\n"}
{"task_id": "Java/25", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Return list of prime factors of given integer in the order from smallest to largest.\n     * Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n     * Input number should be equal to the product of all factors\n     *\n     * @param n The integer to factorize.\n     * @return A list containing the prime factors of `n`.\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        // Divide by 2 to remove all even factors\n        while (n % 2 == 0) {\n            factors.add(2);\n            n /= 2;\n        }\n        \n        // Now n must be odd, so we can skip one element (Note i = i +2)\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            // While i divides n, add i and divide n\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n\n        // This condition is to handle the case when n is a prime number greater than 2\n        if (n > 2) {\n            factors.add(n);\n        }\n\n        return factors;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Factorize(8): \" + solution.factorize(8));   // [2, 2, 2]\n        System.out.println(\"Factorize(25): \" + solution.factorize(25));  // [5, 5]\n        System.out.println(\"Factorize(70): \" + solution.factorize(70));  // [2, 5, 7]\n        System.out.println(\"Factorize(49): \" + solution.factorize(49));  // [7, 7]\n        System.out.println(\"Factorize(100): \" + solution.factorize(100)); // [2, 2, 5, 5]\n    }\n}\n"}
{"task_id": "Java/26", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * From a list of integers, remove all elements that occur more than once.\n     * Keep order of elements left the same as in the input.\n     *\n     * @param numbers List of integers from which duplicates need to be removed.\n     * @return A new list with duplicates removed and original order preserved.\n     */\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        // Use a stream to filter out elements that occur more than once\n        return numbers.stream()\n                      .distinct()\n                      .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(1, 2, 3, 2, 4);\n        System.out.println(\"Original: \" + test1);\n        System.out.println(\"After removing duplicates: \" + solution.remove_duplicates(test1));\n\n        List<Integer> test2 = Arrays.asList(5, 6, 7, 8, 9, 5, 6, 10);\n        System.out.println(\"Original: \" + test2);\n        System.out.println(\"After removing duplicates: \" + solution.remove_duplicates(test2));\n\n        List<Integer> test3 = Arrays.asList();\n        System.out.println(\"Original: \" + test3);\n        System.out.println(\"After removing duplicates: \" + solution.remove_duplicates(test3));\n\n        List<Integer> test4 = Arrays.asList(1, 1, 1, 1, 1);\n        System.out.println(\"Original: \" + test4);\n        System.out.println(\"After removing duplicates: \" + solution.remove_duplicates(test4));\n    }\n}\n"}
{"task_id": "Java/27", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n     *\n     * @param string The input string to be flipped.\n     * @return A new string with the case of each character flipped.\n     */\n    public String flip_case(String string) {\n        StringBuilder result = new StringBuilder();\n        \n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                result.append(Character.toLowerCase(c));\n            } else {\n                result.append(Character.toUpperCase(c));\n            }\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.flip_case(\"Hello\"));  // Expected: \"hELLO\"\n        System.out.println(solution.flip_case(\"WORLD\"));  // Expected: \"world\"\n        System.out.println(solution.flip_case(\"Java\"));   // Expected: \"jAVA\"\n        System.out.println(solution.flip_case(\"123abcABC\"));  // Expected: \"123ABCabc\"\n        System.out.println(solution.flip_case(\"\"));       // Expected: \"\"\n    }\n}\n"}
{"task_id": "Java/28", "generation": "import java.util.Arrays;\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nclass Solution {\n    /**\n     * Concatenate list of strings into a single string\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder result = new StringBuilder();\n        for (String str : strings) {\n            result.append(str);\n        }\n        return result.toString();\n    }\n\n    // Test cases\n    @Test\n    void testConcatenateEmptyList() {\n        List<String> emptyList = Arrays.asList();\n        assertEquals(\"\", concatenate(emptyList), \"Should return an empty string for an empty list\");\n    }\n\n    @Test\n    void testConcatenateSingleElement() {\n        List<String> singleElementList = Arrays.asList(\"a\");\n        assertEquals(\"a\", concatenate(singleElementList), \"Should return the same string for a single element list\");\n    }\n\n    @Test\n    void testConcatenateMultipleElements() {\n        List<String> multipleElementsList = Arrays.asList(\"a\", \"b\", \"c\");\n        assertEquals(\"abc\", concatenate(multipleElementsList), \"Should concatenate all elements into one string\");\n    }\n}\n"}
{"task_id": "Java/29", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Filter an input list of strings only for ones that start with a given prefix.\n     *\n     * @param strings The input list of strings.\n     * @param prefix  The prefix to filter the strings by.\n     * @return A list of strings that start with the given prefix.\n     */\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n\n    // Test cases\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: Empty list\n        List<String> emptyList = new ArrayList<>();\n        System.out.println(\"Test Case 1 (Empty List): \" + solution.filter_by_prefix(emptyList, \"a\"));\n\n        // Test case 2: No matching prefix\n        List<String> noMatchList = Arrays.asList(\"abc\", \"bcd\", \"cde\");\n        System.out.println(\"Test Case 2 (No Match): \" + solution.filter_by_prefix(noMatchList, \"z\"));\n\n        // Test case 3: Matching prefix\n        List<String> matchList = Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\");\n        System.out.println(\"Test Case 3 (Matching Prefix): \" + solution.filter_by_prefix(matchList, \"a\"));\n    }\n}\n"}
{"task_id": "Java/30", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return only positive numbers in the list.\n     */\n    public List<Integer> get_positive(List<Integer> l) {\n        return l.stream()\n                .filter(num -> num > 0)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        Solution solution = new Solution();\n        \n        // Test case 1\n        List<Integer> list1 = Arrays.asList(-1, 2, -4, 5, 6);\n        System.out.println(\"Expected: [2, 5, 6]\");\n        System.out.println(\"Result: \" + solution.get_positive(list1));\n        \n        // Test case 2\n        List<Integer> list2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n        System.out.println(\"Expected: [5, 3, 2, 3, 9, 123, 1]\");\n        System.out.println(\"Result: \" + solution.get_positive(list2));\n    }\n}\n"}
{"task_id": "Java/31", "generation": "import java.util.*;\n\nclass Solution {\n    \n    /**\n     * Return true if a given number is prime, and false otherwise.\n     */\n    public boolean is_prime(int n) {\n        // Handle edge cases\n        if (n <= 1) return false;\n        if (n == 2 || n == 3) return true;\n        if (n % 2 == 0 || n % 3 == 0) return false;\n\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"is_prime(6): \" + solution.is_prime(6));   // false\n        System.out.println(\"is_prime(101): \" + solution.is_prime(101)); // true\n        System.out.println(\"is_prime(11): \" + solution.is_prime(11));   // true\n        System.out.println(\"is_prime(13441): \" + solution.is_prime(13441)); // false (11 * 1222)\n        System.out.println(\"is_prime(61): \" + solution.is_prime(61));    // true\n        System.out.println(\"is_prime(4): \" + solution.is_prime(4));      // false\n        System.out.println(\"is_prime(1): \" + solution.is_prime(1));      // false\n    }\n}\n"}
{"task_id": "Java/32", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     Evaluates polynomial with coefficients xs at point x.\n     return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n      */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n\n    /**\n     xs are coefficients of a polynomial.\n     find_zero finds x such that poly(x) = 0.\n     find_zero returns only one zero point, even if there are many.\n     Moreover, find_zero only takes list xs having an even number of coefficients\n     and the largest non-zero coefficient as it guarantees\n     a solution.\n     >>> find_zero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n     -0.5\n     >>> find_zero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n     1.0\n      */\n    public double find_zero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"The list must have an even number of coefficients.\");\n        }\n        \n        // Check for the largest non-zero coefficient\n        double maxCoeff = Double.MIN_VALUE;\n        int maxIndex = -1;\n        for (int i = 0; i < xs.size(); i++) {\n            if (!xs.get(i).equals(0) && Math.abs(xs.get(i)) > maxCoeff) {\n                maxCoeff = Math.abs(xs.get(i));\n                maxIndex = i;\n            }\n        }\n\n        // Ensure the largest non-zero coefficient is at an even index\n        if (maxIndex % 2 != 0) {\n            throw new IllegalArgumentException(\"The largest non-zero coefficient must be at an even index.\");\n        }\n\n        // Use a simple bisection method to find the root\n        double low = -1000;\n        double high = 1000;\n        while (high - low > 1e-6) {\n            double mid = (low + high) / 2.0;\n            if (poly(xs, mid) < 0) {\n                low = mid;\n            } else {\n                high = mid;\n            }\n        }\n\n        return (low + high) / 2.0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.poly(Arrays.asList(1.0, 2.0), -0.5)); // Should be close to 0\n        System.out.println(solution.find_zero(Arrays.asList(1.0, 2.0)));   // Should return -0.5\n\n        System.out.println(solution.poly(Arrays.asList(-6.0, 11.0, -6.0, 1.0), 1.0)); // Should be close to 0\n        System.out.println(solution.find_zero(Arrays.asList(-6.0, 11.0, -6.0, 1.0))); // Should return 1.0\n\n        System.out.println(solution.poly(Arrays.asList(1.0, -3.0, 2.0), 2.0)); // Should be close to 0\n        System.out.println(solution.find_zero(Arrays.asList(1.0, -3.0, 2.0)));   // Should return 2.0\n\n        System.out.println(solution.poly(Arrays.asList(-1.0, 4.0, -5.0, 2.0), 1.0)); // Should be close to 0\n        System.out.println(solution.find_zero(Arrays.asList(-1.0, 4.0, -5.0, 2.0))); // Should return 1.0\n    }\n}\n"}
{"task_id": "Java/33", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * This function takes a list l and returns a list l' such that\n     * l' is identical to l in the indicies that are not divisible by three, while its values at the indices that are divisible by three are equal\n     * to the values of the corresponding indices of l, but sorted in ascending order.\n     */\n    public List<Integer> sort_third(List<Integer> l) {\n        if (l == null || l.size() < 3) {\n            return new ArrayList<>(l);\n        }\n\n        // Extract elements at indices divisible by three\n        List<Integer> thirdIndices = new ArrayList<>();\n        for (int i = 2; i < l.size(); i += 3) {\n            thirdIndices.add(l.get(i));\n        }\n\n        // Sort the extracted elements\n        Collections.sort(thirdIndices);\n\n        // Replace elements at indices divisible by three with sorted values\n        List<Integer> result = new ArrayList<>(l);\n        for (int i = 0, j = 0; i < l.size(); i += 3, j++) {\n            if (i + 2 < l.size()) {\n                result.set(i + 2, thirdIndices.get(j));\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sort_third(Arrays.asList(1, 2, 3))); // [1, 2, 3]\n        System.out.println(solution.sort_third(Arrays.asList(5, 6, 3, 4, 8, 9, 2))); // [2, 6, 3, 4, 8, 9, 5]\n        System.out.println(solution.sort_third(Arrays.asList(10, 20, 30, 40, 50, 60, 70, 80, 90))); // [10, 20, 30, 40, 50, 60, 70, 80, 90]\n        System.out.println(solution.sort_third(Arrays.asList(100, 200, 300))); // [100, 200, 300]\n    }\n}\n"}
{"task_id": "Java/34", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return sorted unique elements in a list\n     *\n     * @param l input list of integers\n     * @return a List containing sorted unique elements from the input list\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> set = new LinkedHashSet<>(l);\n        return new ArrayList<>(set);\n    }\n}\n\npublic class TestSolution {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> input1 = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        System.out.println(\"Input: \" + input1);\n        System.out.println(\"Output: \" + solution.unique(input1));\n        \n        // Expected output: [0, 2, 3, 5, 9, 123]\n\n        // Test case 2\n        List<Integer> input2 = Arrays.asList(10, 8, 6, 4, 2, 10, 8);\n        System.out.println(\"Input: \" + input2);\n        System.out.println(\"Output: \" + solution.unique(input2));\n        \n        // Expected output: [2, 4, 6, 8, 10]\n\n        // Test case 3\n        List<Integer> input3 = Arrays.asList();\n        System.out.println(\"Input: \" + input3);\n        System.out.println(\"Output: \" + solution.unique(input3));\n        \n        // Expected output: []\n\n        // Test case 4\n        List<Integer> input4 = Arrays.asList(1, 2, 3, 4, 5);\n        System.out.println(\"Input: \" + input4);\n        System.out.println(\"Output: \" + solution.unique(input4));\n        \n        // Expected output: [1, 2, 3, 4, 5]\n    }\n}\n"}
{"task_id": "Java/35", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return maximum element in the list.\n     *\n     * @param l List of integers\n     * @return The maximum integer in the list\n     */\n    public int max_element(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be null or empty\");\n        }\n        \n        return Collections.max(l);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(1, 2, 3);\n        System.out.println(\"Max element in [1, 2, 3]: \" + solution.max_element(test1)); // Expected: 3\n\n        List<Integer> test2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n        System.out.println(\"Max element in [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]: \" + solution.max_element(test2)); // Expected: 123\n\n        List<Integer> test3 = Arrays.asList();\n        try {\n            System.out.println(\"Max element in []: \" + solution.max_element(test3));\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage()); // Expected: List cannot be null or empty\n        }\n\n        List<Integer> test4 = null;\n        try {\n            System.out.println(\"Max element in [null]: \" + solution.max_element(test4));\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage()); // Expected: List cannot be null or empty\n        }\n    }\n}\n"}
{"task_id": "Java/36", "generation": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nclass Solution {\n    /**\n     * Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n     */\n    public int fizz_buzz(int n) {\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String numStr = Integer.toString(i);\n                for (char c : numStr.toCharArray()) {\n                    if (c == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n\n    // Test cases\n    @Test\n    public void testFizzBuzz() {\n        assertEquals(0, fizz_buzz(50));\n        assertEquals(2, fizz_buzz(78));\n        assertEquals(3, fizz_buzz(79));\n        assertEquals(1, fizz_buzz(143)); // 143 is divisible by 11 and contains '7'\n        assertEquals(2, fizz_buzz(156)); // 143 and 156 are divisible by 11 or 13 and contain '7'\n        assertEquals(0, fizz_buzz(100)); // No numbers less than 100 that are divisible by 11 or 13 contain '7'\n    }\n}\n"}
{"task_id": "Java/37", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     This function takes a list l and returns a list l' such that\n     l' is identical to l in the odd indicies, while its values at the even indicies are equal\n     to the values of the even indicies of l, but sorted.\n     >>> sort_even(Arrays.asList(1, 2, 3))\n     [1, 2, 3]\n     >>> sort_even(Arrays.asList(5, 6, 3, 4))\n     [3, 6, 5, 4]\n     */\n    public List<Integer> sort_even(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        List<Integer> result = new ArrayList<>(l);\n        List<Integer> evenIndicesValues = new ArrayList<>();\n\n        for (int i = 0; i < l.size(); i += 2) {\n            evenIndicesValues.add(l.get(i));\n        }\n\n        Collections.sort(evenIndicesValues);\n\n        int evenIndex = 0;\n        for (int i = 0; i < result.size() && evenIndex < evenIndicesValues.size(); i++) {\n            if (i % 2 == 0) {\n                result.set(i, evenIndicesValues.get(evenIndex++));\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sort_even(Arrays.asList(1, 2, 3))); // Expected: [1, 2, 3]\n        System.out.println(solution.sort_even(Arrays.asList(5, 6, 3, 4))); // Expected: [3, 6, 5, 4]\n        System.out.println(solution.sort_even(Arrays.asList())); // Expected: []\n        System.out.println(solution.sort_even(Arrays.asList(10))); // Expected: [10]\n        System.out.println(solution.sort_even(Arrays.asList(7, 8, 9, 10, 11))); // Expected: [7, 8, 9, 10, 11]\n    }\n}\n"}
{"task_id": "Java/38", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n     * takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decode_cyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse the cycling in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Original: \" + \"hello\");\n        System.out.println(\"Encoded:  \" + solution.encodeCyclic(\"hello\"));\n        System.out.println(\"Decoded:  \" + solution.decode_cyclic(solution.encodeCyclic(\"hello\")));\n\n        System.out.println(\"Original: \" + \"world\");\n        System.out.println(\"Encoded:  \" + solution.encodeCyclic(\"world\"));\n        System.out.println(\"Decoded:  \" + solution.decode_cyclic(solution.encodeCyclic(\"world\")));\n\n        System.out.println(\"Original: \" + \"java\");\n        System.out.println(\"Encoded:  \" + solution.encodeCyclic(\"java\"));\n        System.out.println(\"Decoded:  \" + solution.decode_cyclic(solution.encodeCyclic(\"java\")));\n    }\n}\n"}
{"task_id": "Java/39", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n     */\n    public int prime_fib(int n) {\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; primes.size() < n; ) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n            i++;\n        }\n\n        return findFibonacciPrimes(primes, n);\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    private int findFibonacciPrimes(List<Integer> primes, int n) {\n        List<Integer> fibPrimes = new ArrayList<>();\n        int a = 0, b = 1;\n        while (fibPrimes.size() < n) {\n            int nextFib = a + b;\n            a = b;\n            b = nextFib;\n\n            if (primes.contains(nextFib)) {\n                fibPrimes.add(nextFib);\n            }\n        }\n\n        return fibPrimes.get(n - 1);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.prime_fib(1)); // Expected output: 2\n        System.out.println(solution.prime_fib(2)); // Expected output: 3\n        System.out.println(solution.prime_fib(3)); // Expected output: 5\n        System.out.println(solution.prime_fib(4)); // Expected output: 13\n        System.out.println(solution.prime_fib(5)); // Expected output: 89\n    }\n}\n"}
{"task_id": "Java/40", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * triples_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are three distinct elements in the list that\n     * sum to zero, and False otherwise.\n     */\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        // Sort the list to make it easier to find triplets that sum to zero\n        Collections.sort(l);\n        \n        for (int i = 0; i < l.size() - 2; i++) {\n            int left = i + 1;\n            int right = l.size() - 1;\n            \n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                \n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1, 3, -2, 1))); // true\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(2, 4, -5, 3, 9, 7))); // true\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1))); // false\n    }\n}\n"}
{"task_id": "Java/41", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Imagine a road that's a perfectly straight infinitely long line.\n     * n cars are driving left to right; simultaneously, a different set of n cars\n     * are driving right to left. The two sets of cars start out being very far from\n     * each other. All cars move in the same speed. Two cars are said to collide\n     * when a car that's moving left to right hits a car that's moving right to left.\n     * However, the cars are infinitely sturdy and strong; as a result, they continue moving\n     * in their trajectory as if they did not collide.\n     *\n     * This function outputs the number of such collisions.\n     */\n    public int car_race_collision(int n) {\n        // Since all cars start far apart and move at the same speed,\n        // each car from one direction will eventually collide with a car\n        // from the opposite direction. Therefore, the total number of collisions\n        // is simply the number of cars in one set.\n        return n;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.car_race_collision(0));  // Expected output: 0\n        System.out.println(solution.car_race_collision(1));  // Expected output: 1\n        System.out.println(solution.car_race_collision(2));  // Expected output: 2\n        System.out.println(solution.car_race_collision(5));  // Expected output: 5\n    }\n}\n"}
{"task_id": "Java/42", "generation": "import java.util.Arrays;\nimport java.util.List;\n\nclass Solution {\n\n    /**\n     * Return list with elements incremented by 1.\n     *\n     * @param l the input list of integers\n     * @return a new list with each element incremented by 1\n     */\n    public List<Integer> incr_list(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n\n    /**\n     * Main method to test the incr_list function.\n     *\n     * @param args command line arguments (not used)\n     */\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> list1 = Arrays.asList(1, 2, 3);\n        System.out.println(\"Original list: \" + list1);\n        System.out.println(\"Incremented list: \" + solution.incr_list(list1));\n\n        // Expected output:\n        // Original list: [1, 2, 3]\n        // Incremented list: [2, 3, 4]\n\n        // Test case 2\n        List<Integer> list2 = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        System.out.println(\"Original list: \" + list2);\n        System.out.println(\"Incremented list: \" + solution.incr_list(list2));\n\n        // Expected output:\n        // Original list: [5, 3, 5, 2, 3, 3, 9, 0, 123]\n        // Incremented list: [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    }\n}\n"}
{"task_id": "Java/43", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * pairs_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are two distinct elements in the list that\n     * sum to zero, and False otherwise.\n     */\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        Set<Integer> seen = new HashSet<>();\n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        return false;\n    }\n\n    // Test cases\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1, 3, 5, 0)));   // false\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1, 3, -2, 1)));  // false\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1, 2, 3, 7)));   // false\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(2, 4, -5, 3, 5, 7))); // true\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1)));            // false\n    }\n}\n"}
{"task_id": "Java/44", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Change numerical base of input number x to base.\n     * return string representation after the conversion.\n     * base numbers are less than 10.\n     *\n     * @param x The number to be converted.\n     * @param base The target base for conversion (less than 10).\n     * @return String representation of the converted number.\n     */\n    public String change_base(int x, int base) {\n        if (base < 2 || base > 9) {\n            throw new IllegalArgumentException(\"Base must be between 2 and 9.\");\n        }\n        \n        StringBuilder result = new StringBuilder();\n        while (x > 0) {\n            int remainder = x % base;\n            result.insert(0, remainder);\n            x /= base;\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.change_base(8, 3)); // Expected: \"22\"\n        System.out.println(solution.change_base(8, 2)); // Expected: \"1000\"\n        System.out.println(solution.change_base(7, 2)); // Expected: \"111\"\n        System.out.println(solution.change_base(255, 8)); // Expected: \"377\"\n        System.out.println(solution.change_base(10, 4)); // Expected: \"22\"\n    }\n}\n"}
{"task_id": "Java/45", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given length of a side (base) and height, return area for a triangle.\n     *\n     * @param a The length of the base of the triangle.\n     * @param h The height of the triangle.\n     * @return The area of the triangle.\n     */\n    public double triangle_area(double a, double h) {\n        return 0.5 * a * h;\n    }\n\n    /**\n     * Main method to test the triangle_area function with various inputs.\n     */\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Triangle area (base: 5, height: 3): \" + solution.triangle_area(5, 3)); // Expected output: 7.5\n        System.out.println(\"Triangle area (base: 10, height: 4): \" + solution.triangle_area(10, 4)); // Expected output: 20.0\n        System.out.println(\"Triangle area (base: 7, height: 8): \" + solution.triangle_area(7, 8)); // Expected output: 28.0\n        System.out.println(\"Triangle area (base: 15, height: 6): \" + solution.triangle_area(15, 6)); // Expected output: 45.0\n    }\n}\n"}
{"task_id": "Java/46", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     The Fib4 number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n     fib4(0) -> 0\n     fib4(1) -> 0\n     fib4(2) -> 2\n     fib4(3) -> 0\n     fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n     Please write a function to efficiently compute the n-th element of the fib4 number sequence. Do not use recursion.\n     >>> fib4(5)\n     4\n     >>> fib4(6)\n     8\n     >>> fib4(7)\n     14\n     */\n    public int fib4(int n) {\n        if (n == 0 || n == 1) return 0;\n        if (n == 2) return 2;\n        if (n == 3) return 0;\n\n        int[] dp = new int[n + 1];\n        dp[0] = 0;\n        dp[1] = 0;\n        dp[2] = 2;\n        dp[3] = 0;\n\n        for (int i = 4; i <= n; i++) {\n            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4];\n        }\n\n        return dp[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.fib4(5)); // Expected output: 4\n        System.out.println(solution.fib4(6)); // Expected output: 8\n        System.out.println(solution.fib4(7)); // Expected output: 14\n        System.out.println(solution.fib4(8)); // Expected output: 24\n        System.out.println(solution.fib4(9)); // Expected output: 44\n    }\n}\n"}
{"task_id": "Java/47", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return median of elements in the list l.\n     *\n     * @param l List of integers\n     * @return The median as a double\n     */\n    public double median(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be null or empty\");\n        }\n\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            return ((double) l.get(size / 2 - 1) + (double) l.get(size / 2)) / 2;\n        } else {\n            return (double) l.get(size / 2);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> testList1 = Arrays.asList(3, 1, 2, 4, 5);\n        System.out.println(\"Median of [3, 1, 2, 4, 5]: \" + solution.median(testList1)); // Expected: 3\n\n        List<Integer> testList2 = Arrays.asList(-10, 4, 6, 1000, 10, 20);\n        System.out.println(\"Median of [-10, 4, 6, 1000, 10, 20]: \" + solution.median(testList2)); // Expected: 8.0\n\n        List<Integer> testList3 = Arrays.asList(1, 2, 3, 4);\n        System.out.println(\"Median of [1, 2, 3, 4]: \" + solution.median(testList3)); // Expected: 2.5\n\n        List<Integer> testList4 = Arrays.asList();\n        try {\n            System.out.println(\"Median of []: \" + solution.median(testList4));\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage()); // Expected: List cannot be null or empty\n        }\n\n        List<Integer> testList5 = null;\n        try {\n            System.out.println(\"Median of null: \" + solution.median(testList5));\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage()); // Expected: List cannot be null or empty\n        }\n    }\n}\n"}
{"task_id": "Java/48", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Checks if given string is a palindrome\n     >>> is_palindrome(\"\")\n     true\n     >>> is_palindrome(\"aba\")\n     true\n     >>> is_palindrome(\"aaaaa\")\n     true\n     >>> is_palindrome(\"zbcd\")\n     false\n     */\n    public boolean is_palindrome(String text) {\n        int left = 0;\n        int right = text.length() - 1;\n\n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.is_palindrome(\"\"));       // Output: true\n        System.out.println(solution.is_palindrome(\"aba\"));    // Output: true\n        System.out.println(solution.is_palindrome(\"aaaaa\"));  // Output: true\n        System.out.println(solution.is_palindrome(\"zbcd\"));   // Output: false\n        System.out.println(solution.is_palindrome(\"racecar\"));// Output: true\n        System.out.println(solution.is_palindrome(\"step on no pets\")); // Output: true (ignoring spaces and case)\n    }\n}\n"}
{"task_id": "Java/49", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return 2^n modulo p (be aware of numerics).\n     */\n    public int modp(int n, int p) {\n        if (n == 0) return 1;\n        \n        long result = 1;\n        long base = 2;\n        \n        while (n > 0) {\n            if ((n & 1) == 1) {\n                result = (result * base) % p;\n            }\n            base = (base * base) % p;\n            n >>= 1;\n        }\n        \n        return (int) result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.modp(3, 5));   // Expected output: 3\n        System.out.println(solution.modp(1101, 101)); // Expected output: 2\n        System.out.println(solution.modp(0, 101));  // Expected output: 1\n        System.out.println(solution.modp(3, 11));   // Expected output: 8\n        System.out.println(solution.modp(100, 101)); // Expected output: 1\n    }\n}\n"}
{"task_id": "Java/50", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n     * takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decode_shift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n     * Main method to test the encodeShift and decode_shift methods.\n     */\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        String[] testStrings = {\"abc\", \"xyz\", \"hello\", \"world\", \"java\"};\n        \n        for (String s : testStrings) {\n            String encoded = solution.encodeShift(s);\n            System.out.println(\"Original: \" + s);\n            System.out.println(\"Encoded:  \" + encoded);\n\n            // Decode the string and print the result\n            String decoded = solution.decode_shift(encoded);\n            System.out.println(\"Decoded:  \" + decoded);\n            System.out.println();\n        }\n    }\n}\n"}
{"task_id": "Java/51", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * remove_vowels is a function that takes string and returns string without vowels.\n     */\n    public String remove_vowels(String text) {\n        if (text == null || text.isEmpty()) {\n            return text;\n        }\n        \n        StringBuilder result = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (!isVowel(c)) {\n                result.append(c);\n            }\n        }\n        return result.toString();\n    }\n\n    private boolean isVowel(char c) {\n        return \"AEIOUaeiou\".indexOf(c) != -1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.remove_vowels(\"\")); // Output: \"\"\n        System.out.println(solution.remove_vowels(\"abcdef\\nghijklm\")); // Output: \"bcdf\\nghjklm\"\n        System.out.println(solution.remove_vowels(\"abcdef\")); // Output: \"bcdf\"\n        System.out.println(solution.remove_vowels(\"aaaaa\")); // Output: \"\"\n        System.out.println(solution.remove_vowels(\"aaBAA\")); // Output: \"B\"\n        System.out.println(solution.remove_vowels(\"zbcd\")); // Output: \"zbcd\"\n    }\n}\n"}
{"task_id": "Java/52", "generation": "import java.util.Arrays;\nimport java.util.List;\n\nclass Solution {\n\n    /**\n     * Return True if all numbers in the list l are below threshold t.\n     */\n    public boolean below_threshold(List<Integer> l, int t) {\n        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.below_threshold(Arrays.asList(1, 2, 4, 10), 100)); // Expected: true\n        System.out.println(solution.below_threshold(Arrays.asList(1, 20, 4, 10), 5));  // Expected: false\n        System.out.println(solution.below_threshold(Arrays.asList(-1, -2, -3), 0));    // Expected: true\n        System.out.println(solution.below_threshold(Arrays.asList(), 100));            // Expected: true (empty list)\n        System.out.println(solution.below_threshold(Arrays.asList(99, 100, 101), 100)); // Expected: false\n    }\n}\n"}
{"task_id": "Java/53", "generation": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nclass Solution {\n    /**\n     * Add two numbers x and y\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n\n    // Test cases for the add method\n    @Test\n    void testAdd() {\n        assertEquals(5, add(2, 3), \"2 + 3 should be 5\");\n        assertEquals(12, add(5, 7), \"5 + 7 should be 12\");\n        assertEquals(0, add(0, 0), \"0 + 0 should be 0\");\n        assertEquals(-1, add(-1, -2), \"-1 + (-2) should be -3\");\n        assertEquals(999, add(998, 1), \"998 + 1 should be 999\");\n    }\n}\n"}
{"task_id": "Java/54", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Check if two words have the same kind of characters.\n     */\n    public boolean same_chars(String s0, String s1) {\n        // Convert both strings to sets of characters to remove duplicates and compare them\n        Set<Character> setS0 = new HashSet<>();\n        for (char c : s0.toCharArray()) {\n            setS0.add(c);\n        }\n\n        Set<Character> setS1 = new HashSet<>();\n        for (char c : s1.toCharArray()) {\n            setS1.add(c);\n        }\n\n        // Compare the sets\n        return setS0.equals(setS1);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // true\n        System.out.println(solution.same_chars(\"abcd\", \"dddddddabc\"));              // true\n        System.out.println(solution.same_chars(\"dddddddabc\", \"abcd\"));              // true\n        System.out.println(solution.same_chars(\"eabcd\", \"dddddddabc\"));             // false\n        System.out.println(solution.same_chars(\"abcd\", \"dddddddabce\"));             // false\n        System.out.println(solution.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"));  // false\n    }\n}\n"}
{"task_id": "Java/55", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return n-th Fibonacci number.\n     * >>> fib(10)\n     * 55\n     * >>> fib(1)\n     * 1\n     * >>> fib(8)\n     * 21\n     */\n    public int fib(int n) {\n        if (n <= 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        }\n        \n        int a = 0, b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a + b;\n            a = b;\n            b = temp;\n        }\n        return b;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(\"fib(10): \" + solution.fib(10)); // Expected: 55\n        System.out.println(\"fib(1): \" + solution.fib(1));   // Expected: 1\n        System.out.println(\"fib(8): \" + solution.fib(8));   // Expected: 21\n        System.out.println(\"fib(0): \" + solution.fib(0));   // Expected: 0\n        System.out.println(\"fib(-5): \" + solution.fib(-5)); // Expected: 0 (or an error, depending on your implementation)\n    }\n}\n"}
{"task_id": "Java/56", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * brackets is a string of \"<\" and \">\".\n     * return True if every opening bracket has a corresponding closing bracket.\n     *\n     * >>> correct_bracketing(\"<\")\n     * false\n     * >>> correct_bracketing(\"<>\")\n     * true\n     * >>> correct_bracketing(\"<<><>>\")\n     * true\n     * >>> correct_bracketing(\"><<>\")\n     * false\n     */\n    public boolean correct_bracketing(String brackets) {\n        int balance = 0;\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                balance++;\n            } else if (c == '>') {\n                balance--;\n            }\n            // If at any point the balance is negative, it means there's a closing bracket without an opening one\n            if (balance < 0) {\n                return false;\n            }\n        }\n        // If the balance is zero, all brackets are correctly matched\n        return balance == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.correct_bracketing(\"<\"));      // false\n        System.out.println(solution.correct_bracketing(\"<>\"));     // true\n        System.out.println(solution.correct_bracketing(\"<<><>>\")); // true\n        System.out.println(solution.correct_bracketing(\"><<>\"));   // false\n    }\n}\n"}
{"task_id": "Java/57", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return true if list elements are monotonically increasing or decreasing.\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l == null || l.size() <= 1) {\n            return true;\n        }\n\n        boolean increasing = false;\n        boolean decreasing = false;\n\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i - 1)) {\n                increasing = true;\n            }\n            if (l.get(i) < l.get(i - 1)) {\n                decreasing = true;\n            }\n\n            // If both increasing and decreasing are true, the list is not monotonic\n            if (increasing && decreasing) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.monotonic(Arrays.asList(1, 2, 4, 20))); // true\n        System.out.println(solution.monotonic(Arrays.asList(1, 20, 4, 10))); // false\n        System.out.println(solution.monotonic(Arrays.asList(4, 1, 0, -10))); // true\n        System.out.println(solution.monotonic(Arrays.asList())); // true\n        System.out.println(solution.monotonic(Arrays.asList(5))); // true\n        System.out.println(solution.monotonic(Arrays.asList(3, 2, 1))); // true\n    }\n}\n"}
{"task_id": "Java/58", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return sorted unique common elements for two lists.\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n\n        // Retain only the elements that are present in both sets\n        set1.retainAll(set2);\n\n        // Convert the resulting set to a sorted list\n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result);\n\n        return result;\n    }\n}\n\npublic class TestSolution {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> l1 = Arrays.asList(1, 4, 3, 34, 653, 2, 5);\n        List<Integer> l2 = Arrays.asList(5, 7, 1, 5, 9, 653, 121);\n        System.out.println(\"Common elements (Test case 1): \" + solution.common(l1, l2)); // Expected: [1, 5, 653]\n\n        // Test case 2\n        List<Integer> l3 = Arrays.asList(5, 3, 2, 8);\n        List<Integer> l4 = Arrays.asList(3, 2);\n        System.out.println(\"Common elements (Test case 2): \" + solution.common(l3, l4)); // Expected: [2, 3]\n\n        // Test case 3\n        List<Integer> l5 = Arrays.asList(10, 20, 30, 40);\n        List<Integer> l6 = Arrays.asList(50, 60, 70, 80);\n        System.out.println(\"Common elements (Test case 3): \" + solution.common(l5, l6)); // Expected: []\n\n        // Test case 4\n        List<Integer> l7 = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> l8 = Arrays.asList(4, 5, 6, 7, 8);\n        System.out.println(\"Common elements (Test case 4): \" + solution.common(l7, l8)); // Expected: [4, 5]\n    }\n}\n"}
{"task_id": "Java/59", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Return the largest prime factor of n. Assume n > 1 and is not a prime.\n     *\n     * @param n the number to find the largest prime factor for\n     * @return the largest prime factor of n\n     */\n    public int largest_prime_factor(int n) {\n        int maxPrime = -1;\n        \n        // Divide n by 2 to remove all even factors\n        while (n % 2 == 0) {\n            maxPrime = 2;\n            n /= 2;\n        }\n        \n        // Now n must be odd, start checking from 3\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            // While i divides n, remove i and set maxPrime to i\n            while (n % i == 0) {\n                maxPrime = i;\n                n /= i;\n            }\n        }\n        \n        // If n becomes a prime number greater than 2\n        if (n > 2) {\n            maxPrime = n;\n        }\n        \n        return maxPrime;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.largest_prime_factor(13195)); // Expected output: 29\n        System.out.println(solution.largest_prime_factor(2048));  // Expected output: 2\n        System.out.println(solution.largest_prime_factor(600851475143L)); // Expected output: 6857 (a large prime factor)\n    }\n}\n"}
{"task_id": "Java/60", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * sum_to_n is a function that sums numbers from 1 to n.\n     */\n    public int sum_to_n(int n) {\n        return (n * (n + 1)) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"sum_to_n(30): \" + solution.sum_to_n(30)); // Expected: 465\n        System.out.println(\"sum_to_n(100): \" + solution.sum_to_n(100)); // Expected: 5050\n        System.out.println(\"sum_to_n(5): \" + solution.sum_to_n(5)); // Expected: 15\n        System.out.println(\"sum_to_n(10): \" + solution.sum_to_n(10)); // Expected: 55\n        System.out.println(\"sum_to_n(1): \" + solution.sum_to_n(1)); // Expected: 1\n    }\n}\n"}
{"task_id": "Java/61", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * brackets is a string of \"(\" and \")\".\n     * return True if every opening bracket has a corresponding closing bracket.\n     *\n     * >>> correct_bracketing(\"(\")\n     * false\n     * >>> correct_bracketing(\"()\")\n     * true\n     * >>> correct_bracketing(\"(()())\")\n     * true\n     * >>> correct_bracketing(\")(()\")\n     * false\n     */\n    public boolean correct_bracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        \n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.correct_bracketing(\"(\"));      // Output: false\n        System.out.println(solution.correct_bracketing(\"()\"));     // Output: true\n        System.out.println(solution.correct_bracketing(\"(()())\")); // Output: true\n        System.out.println(solution.correct_bracketing(\")(()\"));   // Output: false\n    }\n}\n"}
{"task_id": "Java/62", "generation": "import java.util.*;\n\nclass Solution {\n    \n    /**\n     * xs represent coefficients of a polynomial.\n     * xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     * Return derivative of this polynomial in the same form.\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        if (xs == null || xs.size() <= 1) {\n            return new ArrayList<>();\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.derivative(Arrays.asList(3, 1, 2, 4, 5))); // Expected: [1, 4, 12, 20]\n        System.out.println(solution.derivative(Arrays.asList(1, 2, 3)));       // Expected: [2, 6]\n        System.out.println(solution.derivative(Arrays.asList()));              // Expected: []\n        System.out.println(solution.derivative(Arrays.asList(5)));             // Expected: []\n    }\n}\n"}
{"task_id": "Java/63", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     The FibFib number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n     fibfib(0) == 0\n     fibfib(1) == 0\n     fibfib(2) == 1\n     fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n     Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n     >>> fibfib(1)\n     0\n     >>> fibfib(5)\n     4\n     >>> fibfib(8)\n     24\n     */\n    public int fibfib(int n) {\n        if (n == 0 || n == 1) return 0;\n        if (n == 2) return 1;\n\n        int a = 0, b = 0, c = 1;\n        for (int i = 3; i <= n; i++) {\n            int next = a + b + c;\n            a = b;\n            b = c;\n            c = next;\n        }\n        return c;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(\"fibfib(1): \" + solution.fibfib(1));  // Expected: 0\n        System.out.println(\"fibfib(5): \" + solution.fibfib(5));  // Expected: 4\n        System.out.println(\"fibfib(8): \" + solution.fibfib(8));  // Expected: 24\n        System.out.println(\"fibfib(10): \" + solution.fibfib(10)); // Expected: 76\n    }\n}\n"}
{"task_id": "Java/64", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function vowels_count which takes a string representing\n     * a word as input and returns the number of vowels in the string.\n     * Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n     * vowel, but only when it is at the end of the given word.\n     *\n     * Example:\n     * >>> vowels_count(\"abcde\")\n     * 2\n     * >>> vowels_count(\"ACEDY\")\n     * 3\n     */\n    public int vowels_count(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = Character.toLowerCase(s.charAt(i));\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            } else if (c == 'y' && i == s.length() - 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.vowels_count(\"abcde\")); // Expected output: 2\n        System.out.println(solution.vowels_count(\"ACEDY\")); // Expected output: 3\n        System.out.println(solution.vowels_count(\"rhythm\")); // Expected output: 0\n        System.out.println(solution.vowels_count(\"encyclopedia\")); // Expected output: 6\n    }\n}\n"}
{"task_id": "Java/65", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Circular shift the digits of the integer x, shift the digits right by shift\n     * and return the result as a string.\n     * If shift > number of digits, return digits reversed.\n     *\n     * @param x The integer to be shifted.\n     * @param shift The number of positions to shift the digits to the right.\n     * @return The resulting string after circular shifting or reversing if necessary.\n     */\n    public String circular_shift(int x, int shift) {\n        String numStr = Integer.toString(x);\n        int len = numStr.length();\n        \n        // If shift is greater than the number of digits, reverse the string\n        if (shift >= len) {\n            return new StringBuilder(numStr).reverse().toString();\n        }\n        \n        // Perform circular shift\n        shift %= len;  // Handle shifts larger than the length of the number\n        String shifted = numStr.substring(len - shift) + numStr.substring(0, len - shift);\n        return shifted;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.circular_shift(12345, 2));  // Expected: \"34512\"\n        System.out.println(solution.circular_shift(12345, 5));  // Expected: \"54321\" (reversed)\n        System.out.println(solution.circular_shift(12345, 7));  // Expected: \"34512\" (same as shift 2 due to modulo operation)\n        System.out.println(solution.circular_shift(98765, 0));  // Expected: \"98765\"\n        System.out.println(solution.circular_shift(98765, 1));  // Expected: \"59876\"\n    }\n}\n"}
{"task_id": "Java/66", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function that takes a string as input and returns the sum of the ASCII codes of uppercase characters only.\n     *\n     * Examples:\n     * digitSum(\"\") => 0\n     * digitSum(\"abAB\") => 131\n     * digitSum(\"abcCd\") => 67\n     * digitSum(\"helloE\") => 69\n     * digitSum(\"woArBld\") => 131\n     * digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n\n    // Test cases to verify the correctness of the function\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.digitSum(\"\")); // Expected output: 0\n        System.out.println(solution.digitSum(\"abAB\")); // Expected output: 131 (65 + 66)\n        System.out.println(solution.digitSum(\"abcCd\")); // Expected output: 67 ('C' = 67)\n        System.out.println(solution.digitSum(\"helloE\")); // Expected output: 69 ('E' = 69)\n        System.out.println(solution.digitSum(\"woArBld\")); // Expected output: 131 (65 + 66)\n        System.out.println(solution.digitSum(\"aAaaaXa\")); // Expected output: 153 (65 + 88 + 88 + 65)\n    }\n}\n"}
{"task_id": "Java/67", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * In this task, you will be given a string that represents a number of apples and oranges\n     * that are distributed in a basket of fruit. The basket contains apples, oranges, and mango fruits.\n     * Given the string that represents the total number of the oranges and apples and an integer that represent the total number of the fruits\n     * in the basket return the number of the mango fruits in the basket.\n     *\n     * @param s a string representing the number of apples and oranges (e.g., \"5 apples and 6 oranges\")\n     * @param n the total number of fruits in the basket\n     * @return the number of mango fruits in the basket\n     */\n    public int fruit_distribution(String s, int n) {\n        // Extract the numbers from the string using regex\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[3]);\n\n        // Calculate the number of mango fruits\n        return n - (apples + oranges);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.fruit_distribution(\"5 apples and 6 oranges\", 19)); // Expected output: 8\n        System.out.println(solution.fruit_distribution(\"0 apples and 1 oranges\", 3));   // Expected output: 2\n        System.out.println(solution.fruit_distribution(\"2 apples and 3 oranges\", 100)); // Expected output: 95\n        System.out.println(solution.fruit_distribution(\"100 apples and 1 oranges\", 120)); // Expected output: 19\n    }\n}\n"}
{"task_id": "Java/68", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given an array representing a branch of a tree that has non-negative integer nodes,\n     * your task is to pluck one of the nodes and return it.\n     * The plucked node should be the node with the smallest even value.\n     * If multiple nodes with the same smallest even value are found, return the node that has the smallest index.\n     *\n     * @param arr the list of integer nodes\n     * @return a list containing the smallest even value and its index, or an empty list if no such node exists\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        int minEvenValue = Integer.MAX_VALUE;\n        int minIndex = -1;\n\n        for (int i = 0; i < arr.size(); i++) {\n            int value = arr.get(i);\n            if (value % 2 == 0 && value <= minEvenValue) {\n                if (value < minEvenValue || (value == minEvenValue && i < minIndex)) {\n                    minEvenValue = value;\n                    minIndex = i;\n                }\n            }\n        }\n\n        if (minIndex == -1) {\n            return new ArrayList<>();\n        } else {\n            return Arrays.asList(minEvenValue, minIndex);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.pluck(Arrays.asList(4, 2, 3))); // Output: [2, 1]\n        System.out.println(solution.pluck(Arrays.asList(1, 2, 3))); // Output: [2, 1]\n        System.out.println(solution.pluck(Arrays.asList()));       // Output: []\n        System.out.println(solution.pluck(Arrays.asList(5, 0, 3, 0, 4, 2))); // Output: [0, 1]\n    }\n}\n"}
{"task_id": "Java/69", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n     * zero, and has a frequency greater than or equal to the value of the integer itself.\n     * The frequency of an integer is the number of times it appears in the list.\n     * If no such a value exist, return -1.\n     *\n     * Examples:\n     * search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n     * search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n     * search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        // Count the frequency of each integer in the list\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        int result = -1;\n        \n        // Find the greatest integer with a frequency greater than or equal to its value\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            if (entry.getKey() <= entry.getValue() && entry.getKey() > result) {\n                result = entry.getKey();\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.search(Arrays.asList(4, 1, 2, 2, 3, 1))); // Expected output: 2\n        System.out.println(solution.search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4))); // Expected output: 3\n        System.out.println(solution.search(Arrays.asList(5, 5, 4, 4, 4))); // Expected output: -1\n        System.out.println(solution.search(Arrays.asList(7, 7, 7, 8, 8, 9, 9, 9, 9))); // Expected output: 9\n        System.out.println(solution.search(Arrays.asList(6, 6, 5, 4, 3, 2, 1))); // Expected output: -1\n    }\n}\n"}
{"task_id": "Java/70", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given list of integers, return list in strange order.\n     * Strange sorting, is when you start with the minimum value,\n     * then maximum of the remaining integers, then minimum and so on.\n     *\n     * Examples:\n     * strange_sort_list(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n     * strange_sort_list(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n     * strange_sort_list(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        while (!lst.isEmpty()) {\n            // Add the minimum value\n            int minVal = Collections.min(lst);\n            result.add(minVal);\n            lst.remove(Integer.valueOf(minVal));\n\n            if (lst.isEmpty()) {\n                break;\n            }\n\n            // Add the maximum value\n            int maxVal = Collections.max(lst);\n            result.add(maxVal);\n            lst.remove(Integer.valueOf(maxVal));\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.strange_sort_list(Arrays.asList(1, 2, 3, 4))); // Expected: [1, 4, 2, 3]\n        System.out.println(solution.strange_sort_list(Arrays.asList(5, 5, 5, 5))); // Expected: [5, 5, 5, 5]\n        System.out.println(solution.strange_sort_list(Arrays.asList()));           // Expected: []\n        System.out.println(solution.strange_sort_list(Arrays.asList(10, -2, 3, 7, 8))); // Expected: [-2, 10, 3, 8, 7]\n    }\n}\n"}
{"task_id": "Java/71", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given the lengths of the three sides of a triangle. Return the area of\n     * the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n     * Otherwise return -1.\n     * Three sides make a valid triangle when the sum of any two sides is greater\n     * than the third side.\n     * Example:\n     * triangle_area(3, 4, 5) == 6.00\n     * triangle_area(1, 2, 10) == -1\n     */\n    public double triangle_area(double a, double b, double c) {\n        // Check if the sides form a valid triangle\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        \n        // Calculate the semi-perimeter\n        double s = (a + b + c) / 2;\n        \n        // Calculate the area using Heron's formula\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        \n        // Round to 2 decimal points\n        return Math.round(area * 100.0) / 100.0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.triangle_area(3, 4, 5)); // Expected output: 6.00\n        System.out.println(solution.triangle_area(1, 2, 10)); // Expected output: -1\n        System.out.println(solution.triangle_area(5, 5, 8)); // Expected output: ~20.78\n        System.out.println(solution.triangle_area(6, 8, 10)); // Expected output: 24.00\n    }\n}\n"}
{"task_id": "Java/72", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function that returns True if the object q will fly, and False otherwise.\n     * The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n     *\n     * Example:\n     * will_it_fly(Arrays.asList(1, 2), 5) -> false\n     * # 1+2 is less than the maximum possible weight, but it's unbalanced.\n     *\n     * will_it_fly(Arrays.asList(3, 2, 3), 1) -> false\n     * # it's balanced, but 3+2+3 is more than the maximum possible weight.\n     *\n     * will_it_fly(Arrays.asList(3, 2, 3), 9) -> true\n     * # 3+2+3 is less than the maximum possible weight, and it's balanced.\n     *\n     * will_it_fly(Arrays.asList(3), 5) -> true\n     * # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean will_it_fly(List<Integer> q, int w) {\n        // Check if the list is a palindrome\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (!q.get(i).equals(q.get(q.size() - 1 - i))) {\n                return false;\n            }\n        }\n\n        // Calculate the sum of elements in the list\n        int sum = q.stream().mapToInt(Integer::intValue).sum();\n\n        // Check if the sum is less than or equal to w\n        return sum <= w;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.will_it_fly(Arrays.asList(1, 2), 5)); // false\n        System.out.println(solution.will_it_fly(Arrays.asList(3, 2, 3), 1)); // false\n        System.out.println(solution.will_it_fly(Arrays.asList(3, 2, 3), 9)); // true\n        System.out.println(solution.will_it_fly(Arrays.asList(3), 5)); // true\n    }\n}\n"}
{"task_id": "Java/73", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given an array arr of integers, find the minimum number of elements that\n     * need to be changed to make the array palindromic. A palindromic array is an array that\n     * is read the same backwards and forwards. In one change, you can change one element to any other element.\n     *\n     * For example:\n     * smallest_change(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n     * smallest_change(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n     * smallest_change(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallest_change(List<Integer> arr) {\n        int left = 0;\n        int right = arr.size() - 1;\n        int changes = 0;\n\n        while (left < right) {\n            if (!arr.get(left).equals(arr.get(right))) {\n                changes++;\n            }\n            left++;\n            right--;\n        }\n\n        return changes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.smallest_change(Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6))); // Output: 4\n        System.out.println(solution.smallest_change(Arrays.asList(1, 2, 3, 4, 3, 2, 2)));   // Output: 1\n        System.out.println(solution.smallest_change(Arrays.asList(1, 2, 3, 2, 1)));         // Output: 0\n    }\n}\n"}
{"task_id": "Java/74", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Write a function that accepts two lists of strings and returns the list that has\n     * total number of chars in the all strings of the list less than the other list.\n     *\n     * if the two lists have the same number of chars, return the first list.\n     */\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        int sum1 = 0;\n        for (String str : lst1) {\n            sum1 += str.length();\n        }\n\n        int sum2 = 0;\n        for (String str : lst2) {\n            sum2 += str.length();\n        }\n\n        if (sum1 <= sum2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.total_match(new ArrayList<>(), new ArrayList<>()).equals(new ArrayList<>())); // true\n        System.out.println(solution.total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")).equals(Arrays.asList(\"hI\", \"Hi\"))); // true\n        System.out.println(solution.total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")).equals(Arrays.asList(\"hi\", \"admin\"))); // true\n        System.out.println(solution.total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")).equals(Arrays.asList(\"hI\", \"hi\", \"hi\"))); // true\n        System.out.println(solution.total_match(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")).equals(Arrays.asList(\"4\"))); // true\n    }\n}\n"}
{"task_id": "Java/75", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function that returns true if the given number is the multiplication of 3 prime numbers\n     * and false otherwise.\n     * Knowing that the prime number is less than 100.\n     * Example:\n     * is_multiply_prime(30) == true\n     * 30 = 2 * 3 * 5\n     */\n    public boolean is_multiply_prime(int a) {\n        if (a < 2) return false;\n\n        int count = 0;\n        for (int i = 2; i <= Math.sqrt(a); i++) {\n            while (a % i == 0 && isPrime(i)) {\n                count++;\n                a /= i;\n            }\n        }\n\n        // Check if the remaining number is also prime and greater than 1\n        if (a > 1 && isPrime(a)) {\n            count++;\n        }\n\n        return count == 3;\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.is_multiply_prime(30)); // true, because 30 = 2 * 3 * 5\n        System.out.println(solution.is_multiply_prime(60)); // false, because 60 = 2 * 2 * 3 * 5 (more than 3 primes)\n        System.out.println(solution.is_multiply_prime(100)); // false, because 100 is not a product of exactly 3 primes\n        System.out.println(solution.is_multiply_prime(2 * 3 * 7)); // true, because 42 = 2 * 3 * 7\n        System.out.println(solution.is_multiply_prime(5 * 7 * 11)); // true, because 385 = 5 * 7 * 11\n    }\n}\n"}
{"task_id": "Java/76", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Your task is to write a function that returns true if a number x is a simple\n     * power of n and false in other cases.\n     * x is a simple power of n if n**int=x\n     * For example:\n     * is_simple_power(1, 4) => true\n     * is_simple_power(2, 2) => true\n     * is_simple_power(8, 2) => true\n     * is_simple_power(3, 2) => false\n     * is_simple_power(3, 1) => false\n     * is_simple_power(5, 3) => false\n     */\n    public boolean is_simple_power(int x, int n) {\n        if (n == 1) {\n            return x == 1;\n        }\n        \n        double power = Math.pow(x, 1.0 / n);\n        return Math.abs(power - Math.round(power)) < 1e-10;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.is_simple_power(1, 4));   // true\n        System.out.println(solution.is_simple_power(2, 2));   // true\n        System.out.println(solution.is_simple_power(8, 2));   // true\n        System.out.println(solution.is_simple_power(3, 2));   // false\n        System.out.println(solution.is_simple_power(3, 1));   // false\n        System.out.println(solution.is_simple_power(5, 3));   // false\n        System.out.println(solution.is_simple_power(16, 2));  // true\n        System.out.println(solution.is_simple_power(81, 3));  // true\n        System.out.println(solution.is_simple_power(27, 3));  // true\n        System.out.println(solution.is_simple_power(29, 3));  // false\n    }\n}\n"}
{"task_id": "Java/77", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Write a function that takes an integer a and returns true\n     * if this integer is a cube of some integer number.\n     * Note: you may assume the input is always valid.\n     * Examples:\n     * iscube(1) ==> true\n     * iscube(2) ==> false\n     * iscube(-1) ==> true\n     * iscube(64) ==> true\n     * iscube(0) ==> true\n     * iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) return true;\n        for (int i = -100; i <= 100; i++) { // Assuming the input will not be too large\n            if (i * i * i == a) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.iscube(1));   // true\n        System.out.println(solution.iscube(2));   // false\n        System.out.println(solution.iscube(-1));  // true\n        System.out.println(solution.iscube(64));  // true\n        System.out.println(solution.iscube(0));   // true\n        System.out.println(solution.iscube(180)); // false\n    }\n}\n"}
{"task_id": "Java/78", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You have been tasked to write a function that receives\n     * a hexadecimal number as a string and counts the number of hexadecimal\n     * digits that are primes (prime number, or a prime, is a natural number\n     * greater than 1 that is not a product of two smaller natural numbers).\n     * Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n     * Prime numbers are 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\n     * So you have to determine a number of the following digits: 2, 3, 5, 7,\n     * B (=decimal 11), D (=decimal 13).\n     * Note: you may assume the input is always correct or empty string,\n     * and symbols A,B,C,D,E,F are always uppercase.\n     * Examples:\n     * For num = \"AB\" the output should be 1.\n     * For num = \"1077E\" the output should be 2.\n     * For num = \"ABED1A33\" the output should be 4.\n     * For num = \"123456789ABCDEF0\" the output should be 6.\n     * For num = \"2020\" the output should be 2.\n     */\n    public int hex_key(String num) {\n        // Define a set of prime hexadecimal digits\n        Set<Character> primes = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        int count = 0;\n        for (char c : num.toCharArray()) {\n            if (primes.contains(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.hex_key(\"AB\")); // Expected output: 1\n        System.out.println(solution.hex_key(\"1077E\")); // Expected output: 2\n        System.out.println(solution.hex_key(\"ABED1A33\")); // Expected output: 4\n        System.out.println(solution.hex_key(\"123456789ABCDEF0\")); // Expected output: 6\n        System.out.println(solution.hex_key(\"2020\")); // Expected output: 2\n    }\n}\n"}
{"task_id": "Java/79", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You will be given a number in decimal form and your task is to convert it to\n     * binary format. The function should return a string, with each character representing a binary\n     * number. Each character in the string will be '0' or '1'.\n     *\n     * There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n     * The extra characters are there to help with the format.\n     *\n     * Examples:\n     * decimal_to_binary(15)   // returns \"db1111db\"\n     * decimal_to_binary(32)   // returns \"db100000db\"\n     */\n    public String decimal_to_binary(int decimal) {\n        if (decimal == 0) return \"db0db\";\n        \n        StringBuilder binary = new StringBuilder();\n        while (decimal > 0) {\n            binary.insert(0, decimal % 2);\n            decimal /= 2;\n        }\n        \n        return \"db\" + binary.toString() + \"db\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.decimal_to_binary(15));   // Expected: db1111db\n        System.out.println(solution.decimal_to_binary(32));   // Expected: db100000db\n        System.out.println(solution.decimal_to_binary(0));    // Expected: db0db\n        System.out.println(solution.decimal_to_binary(45));   // Expected: db101101db\n        System.out.println(solution.decimal_to_binary(255));  // Expected: db11111111db\n    }\n}\n"}
{"task_id": "Java/80", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You are given a string s.\n     * Your task is to check if the string is happy or not.\n     * A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n     * For example:\n     * is_happy(a) => false\n     * is_happy(aa) => false\n     * is_happy(abcd) => true\n     * is_happy(aabb) => false\n     * is_happy(adb) => true\n     * is_happy(xyy) => false\n     */\n    public boolean is_happy(String s) {\n        if (s.length() < 3) return false;\n        \n        for (int i = 0; i <= s.length() - 3; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || \n                s.charAt(i) == s.charAt(i + 2) || \n                s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.is_happy(\"a\"));       // Output: false\n        System.out.println(solution.is_happy(\"aa\"));      // Output: false\n        System.out.println(solution.is_happy(\"abcd\"));    // Output: true\n        System.out.println(solution.is_happy(\"aabb\"));    // Output: false\n        System.out.println(solution.is_happy(\"adb\"));     // Output: true\n        System.out.println(solution.is_happy(\"xyy\"));     // Output: false\n        System.out.println(solution.is_happy(\"abcabc\"));  // Output: true\n        System.out.println(solution.is_happy(\"abccba\"));  // Output: false\n    }\n}\n"}
{"task_id": "Java/81", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * It is the last week of the semester and the teacher has to give the grades\n     * to students. The teacher has been making her own algorithm for grading.\n     * The only problem is, she has lost the code she used for grading.\n     * She has given you a list of GPAs for some students and you have to write\n     * a function that can output a list of letter grades using the following table:\n     *\n     * GPA       |    Letter grade\n     * 4.0                A+\n     * > 3.7              A\n     * > 3.3              A-\n     * > 3.0              B+\n     * > 2.7              B\n     * > 2.3              B-\n     * > 2.0              C+\n     * > 1.7              C\n     * > 1.3              C-\n     * > 1.0              D+\n     * > 0.7              D\n     * > 0.0              D-\n     * 0.0                E\n     *\n     * Example:\n     * numerical_letter_grade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        \n        for (Double gpa : grades) {\n            if (gpa >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n\n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Double> test1 = Arrays.asList(4.0, 3, 1.7, 2, 3.5);\n        System.out.println(solution.numerical_letter_grade(test1)); // Expected: [A+, B, C-, C, A-]\n\n        List<Double> test2 = Arrays.asList(4.0, 3.8, 3.2, 2.6, 2.0, 1.7, 1.3, 1.0, 0.8);\n        System.out.println(solution.numerical_letter_grade(test2)); // Expected: [A+, A, A-, B+, B, C, C-, D+, D-]\n\n        List<Double> test3 = Arrays.asList(4.5, 3.9, 3.1, 2.8, 2.0, 1.6, 0.9);\n        System.out.println(solution.numerical_letter_grade(test3)); // Expected: [A+, A, A-, B+, B, C-, D]\n    }\n}\n"}
{"task_id": "Java/82", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function that takes a string and returns true if the string\n     * length is a prime number or false otherwise.\n     *\n     * Examples:\n     * - prime_length(\"Hello\") == true\n     * - prime_length(\"abcdcba\") == true\n     * - prime_length(\"kittens\") == true\n     * - prime_length(\"orange\") == false\n     */\n    public boolean prime_length(String string) {\n        int length = string.length();\n        \n        if (length <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.prime_length(\"Hello\"));   // Expected: true\n        System.out.println(solution.prime_length(\"abcdcba\")); // Expected: true\n        System.out.println(solution.prime_length(\"kittens\")); // Expected: true\n        System.out.println(solution.prime_length(\"orange\"));  // Expected: false\n        System.out.println(solution.prime_length(\"a\"));       // Expected: false\n        System.out.println(solution.prime_length(\"ab\"));      // Expected: false\n        System.out.println(solution.prime_length(\"abcde\"));   // Expected: true\n    }\n}\n"}
{"task_id": "Java/83", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given a positive integer n, return the count of the numbers of n-digit\n     positive integers that start or end with 1.\n     */\n    public int starts_one_ends(int n) {\n        if (n == 1) {\n            return 1; // Only one 1-digit number starts and ends with 1\n        }\n        \n        long totalNumbers = (long)Math.pow(10, n);\n        long numbersStartingWith1 = (long)Math.pow(10, n - 1); // Numbers like 1xxxxx\n        long numbersEndingWith1 = (long)Math.pow(10, n - 1); // Numbers like xxxxx1\n        \n        // Subtract the overlap where a number both starts and ends with 1\n        long numbersStartingAndEndingWith1 = (long)Math.pow(10, n - 2);\n        \n        return (int)(numbersStartingWith1 + numbersEndingWith1 - numbersStartingAndEndingWith1);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.starts_one_ends(1)); // Expected: 1\n        System.out.println(solution.starts_one_ends(2)); // Expected: 18 (10, 11, 12...19, 21, 31...91)\n        System.out.println(solution.starts_one_ends(3)); // Expected: 180 (1xx, x1x, xx1 excluding overlaps)\n        \n        // Additional test cases\n        for (int i = 4; i <= 6; i++) {\n            System.out.println(\"n=\" + i + \": \" + solution.starts_one_ends(i));\n        }\n    }\n}\n"}
{"task_id": "Java/84", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given a positive integer N, return in binary the total sum of its digits.\n\n     Example\n         For N = 1000, the sum of digits will be 1 and the output should be \"1\".\n         For N = 150, the sum of digits will be 6 and the output should be \"110\".\n         For N = 147, the sum of digits will be 12 and the output should be \"1100\".\n\n     Variables:\n         @N integer\n              Constraints: 0 <= N <= 10000.\n     Output:\n          a string of binary number\n      */\n    public String solve(int N) {\n        int sum = 0;\n        while (N > 0) {\n            sum += N % 10;\n            N /= 10;\n        }\n        return Integer.toBinaryString(sum);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.solve(1000)); // Expected output: \"1\"\n        System.out.println(solution.solve(150));  // Expected output: \"110\"\n        System.out.println(solution.solve(147));  // Expected output: \"1100\"\n        System.out.println(solution.solve(9999)); // Expected output: \"1111000110\"\n    }\n}\n"}
{"task_id": "Java/85", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given a non-empty list of integers lst. add the even elements that are at odd indices.\n     *\n     * Examples:\n     * - add(Arrays.asList(4, 2, 6, 7)) should return 2\n     */\n    public int add(List<Integer> lst) {\n        if (lst == null || lst.size() < 2) {\n            throw new IllegalArgumentException(\"List must have at least two elements\");\n        }\n\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            int element = lst.get(i);\n            if (element % 2 == 0) {\n                sum += element;\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.add(Arrays.asList(4, 2, 6, 7))); // Expected output: 2\n        System.out.println(solution.add(Arrays.asList(1, 3, 5, 7, 9, 8))); // Expected output: 8\n        System.out.println(solution.add(Arrays.asList(2, 4, 6, 8, 10))); // Expected output: 12\n        System.out.println(solution.add(Arrays.asList(1, 3, 5, 7, 9))); // Expected output: 0 (no even elements at odd indices)\n    }\n}\n"}
{"task_id": "Java/86", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function that takes a string and returns an ordered version of it.\n     * Ordered version of string, is a string where all words (separated by space)\n     * are replaced by a new word where all the characters arranged in\n     * ascending order based on ascii value.\n     * Note: You should keep the order of words and blank spaces in the sentence.\n     *\n     * For example:\n     * anti_shuffle(\"Hi\") returns \"Hi\"\n     * anti_shuffle(\"hello\") returns \"ehllo\"\n     * anti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String anti_shuffle(String s) {\n        if (s == null || s.isEmpty()) {\n            return s;\n        }\n\n        StringBuilder result = new StringBuilder();\n        int wordStart = 0;\n\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\n            // Check if we reached the end of a word or the end of the string\n            if (c == ' ' || i == s.length() - 1) {\n                String word = s.substring(wordStart, i + 1);\n                result.append(orderedWord(word));\n                if (i != s.length() - 1) { // Add space back after each word except the last one\n                    result.append(' ');\n                }\n                wordStart = i + 1;\n            }\n        }\n\n        return result.toString();\n    }\n\n    private String orderedWord(String word) {\n        char[] chars = word.toCharArray();\n        Arrays.sort(chars);\n        return new String(chars);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.anti_shuffle(\"Hi\")); // Expected: \"Hi\"\n        System.out.println(solution.anti_shuffle(\"hello\")); // Expected: \"ehllo\"\n        System.out.println(solution.anti_shuffle(\"Hello World!!!\")); // Expected: \"Hello !!!Wdlor\"\n        System.out.println(solution.anti_shuffle(\"Programming is fun!\")); // Expected: \"Pamgimmig is fnu!\"\n    }\n}\n"}
{"task_id": "Java/87", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given a 2 dimensional data, as a nested lists,\n     * which is similar to matrix, however, unlike matrices,\n     * each row may contain a different number of columns.\n     * Given lst, and integer x, find integers x in the list,\n     * and return list of lists, [[x1, y1], [x2, y2] ...] such that\n     * each list is a coordinate - (row, columns), starting with 0.\n     * Sort coordinates initially by rows in ascending order.\n     * Also, sort coordinates of the row by columns in descending order.\n     *\n     * Examples:\n     * get_row([\n     *   [1,2,3,4,5,6],\n     *   [1,2,3,4,1,6],\n     *   [1,2,3,4,5,1]\n     * ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n     * get_row([], 1) == []\n     * get_row([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j).equals(x)) {\n                    result.add(Arrays.asList(i, j));\n                }\n            }\n        }\n\n        // Sort by rows in ascending order\n        Collections.sort(result, new Comparator<List<Integer>>() {\n            public int compare(List<Integer> o1, List<Integer> o2) {\n                return o1.get(0).compareTo(o2.get(0));\n            }\n        });\n\n        // For each row, sort coordinates of the row by columns in descending order\n        for (List<Integer> coord : result) {\n            if (coord.size() > 1) { // Ensure we only process rows with more than one coordinate\n                Collections.sort(coord, new Comparator<Integer>() {\n                    public int compare(Integer o1, Integer o2) {\n                        return o2.compareTo(o1);\n                    }\n                });\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<List<Integer>> lst1 = Arrays.asList(\n            Arrays.asList(1, 2, 3, 4, 5, 6),\n            Arrays.asList(1, 2, 3, 4, 1, 6),\n            Arrays.asList(1, 2, 3, 4, 5, 1)\n        );\n        System.out.println(solution.get_row(lst1, 1)); // Expected: [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n\n        List<List<Integer>> lst2 = new ArrayList<>();\n        System.out.println(solution.get_row(lst2, 1)); // Expected: []\n\n        List<List<Integer>> lst3 = Arrays.asList(\n            new ArrayList<>(),\n            Arrays.asList(1),\n            Arrays.asList(1, 2, 3)\n        );\n        System.out.println(solution.get_row(lst3, 3)); // Expected: [[2, 2]]\n    }\n}\n"}
{"task_id": "Java/88", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given an array of non-negative integers, return a copy of the given array after sorting,\n     * you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n     * or sort it in descending order if the sum( first index value, last index value) is even.\n     *\n     * Note:\n     * * don't change the given array.\n     */\n    public List<Integer> sort_array(List<Integer> array) {\n        if (array == null || array.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        int sum = array.get(0) + array.get(array.size() - 1);\n        List<Integer> sortedArray = new ArrayList<>(array);\n\n        if (sum % 2 == 0) {\n            // Sort in descending order\n            sortedArray.sort(Collections.reverseOrder());\n        } else {\n            // Sort in ascending order\n            Collections.sort(sortedArray);\n        }\n\n        return sortedArray;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sort_array(Arrays.asList())); // []\n        System.out.println(solution.sort_array(Arrays.asList(5))); // [5]\n        System.out.println(solution.sort_array(Arrays.asList(2, 4, 3, 0, 1, 5))); // [0, 1, 2, 3, 4, 5]\n        System.out.println(solution.sort_array(Arrays.asList(2, 4, 3, 0, 1, 5, 6))); // [6, 5, 4, 3, 2, 1, 0]\n    }\n}\n"}
{"task_id": "Java/89", "generation": "import java.util.*;\n\nclass Solution {\n    \n    /**\n     * Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated.\n     * The alphabet should be rotated in a manner such that the letters shift down by two multiplied to two places.\n     * For example:\n     * encrypt(\"hi\") returns \"lm\"\n     * encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n     * encrypt(\"gf\") returns \"kj\"\n     * encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        StringBuilder encrypted = new StringBuilder();\n        \n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                char base = Character.isUpperCase(c) ? 'A' : 'a';\n                int offset = ((c - base + 4) % 26); // Shift down by two multiplied to two places\n                encrypted.append((char)(base + offset));\n            } else {\n                encrypted.append(c);\n            }\n        }\n        \n        return encrypted.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.encrypt(\"hi\")); // Expected: \"lm\"\n        System.out.println(solution.encrypt(\"asdfghjkl\")); // Expected: \"ewhjklnop\"\n        System.out.println(solution.encrypt(\"gf\")); // Expected: \"kj\"\n        System.out.println(solution.encrypt(\"et\")); // Expected: \"ix\"\n        System.out.println(solution.encrypt(\"Hello, World!\")); // Expected: \"Lipps, Asvph!\"\n    }\n}\n"}
{"task_id": "Java/90", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given a list of integers.\n     * Write a function next_smallest() that returns the 2nd smallest element of the list.\n     * Return null if there is no such element.\n     *\n     * @param lst The input list of integers\n     * @return Optional containing the 2nd smallest element or Optional.empty()\n     */\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        // Remove duplicates and sort the list to find the second smallest element\n        Set<Integer> uniqueElements = new TreeSet<>(lst);\n        \n        if (uniqueElements.size() < 2) {\n            return Optional.empty();\n        }\n        \n        Integer secondSmallest = null;\n        for (Integer num : uniqueElements) {\n            if (secondSmallest == null) {\n                secondSmallest = num;\n            } else {\n                break; // We only need the first two elements\n            }\n        }\n        \n        return Optional.of(secondSmallest);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.next_smallest(Arrays.asList(1, 2, 3, 4, 5))); // Optional[2]\n        System.out.println(solution.next_smallest(Arrays.asList(5, 1, 4, 3, 2))); // Optional[2]\n        System.out.println(solution.next_smallest(Arrays.asList()));             // Optional.empty\n        System.out.println(solution.next_smallest(Arrays.asList(1, 1)));         // Optional.empty\n    }\n}\n"}
{"task_id": "Java/91", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You'll be given a string of words, and your task is to count the number\n     * of boredoms. A boredom is a sentence that starts with the word \"I\".\n     * Sentences are delimited by '.', '?' or '!'.\n     *\n     * For example:\n     * >>> is_bored(\"Hello world\")\n     * 0\n     * >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n     * 1\n     */\n    public int is_bored(String S) {\n        if (S == null || S.isEmpty()) return 0;\n\n        String[] sentences = S.split(\"[.?!]\");\n        int boredomCount = 0;\n\n        for (String sentence : sentences) {\n            // Trim leading and trailing spaces\n            sentence = sentence.trim();\n            if (!sentence.isEmpty() && sentence.startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n\n        return boredomCount;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.is_bored(\"Hello world\")); // Expected output: 0\n        System.out.println(solution.is_bored(\"The sky is blue. The sun is shining. I love this weather\")); // Expected output: 1\n        System.out.println(solution.is_bored(\"I am bored. Are you? Yes, I am!\")); // Expected output: 2\n        System.out.println(solution.is_bored(\"No boring sentences here.\")); // Expected output: 0\n        System.out.println(solution.is_bored(\"I love Java. I also like Python. I enjoy coding.\")); // Expected output: 3\n    }\n}\n"}
{"task_id": "Java/92", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Create a function that takes 3 numbers.\n     * Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n     * Returns false in any other cases.\n     *\n     * Examples\n     * any_int(5, 2, 7) -> true\n     * any_int(3, 2, 2) -> false\n     * any_int(3, -2, 1) -> true\n     * any_int(3.6, -2.2, 2) -> false\n     */\n    public boolean any_int(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int a = (Integer) x;\n            int b = (Integer) y;\n            int c = (Integer) z;\n\n            return a == b + c || b == a + c || c == a + b;\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.any_int(5, 2, 7));   // true\n        System.out.println(solution.any_int(3, 2, 2));   // false\n        System.out.println(solution.any_int(3, -2, 1));  // true\n        System.out.println(solution.any_int(3.6, -2.2, 2)); // false (since one of the numbers is not an integer)\n    }\n}\n"}
{"task_id": "Java/93", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Write a function that takes a message, and encodes in such a way that it swaps case of all letters,\n     * replaces all vowels in the message with the letter that appears 2 places ahead of that vowel in the english alphabet.\n     * Assume only letters.\n     *\n     * Examples:\n     * >>> encode(\"test\")\n     * \"TGST\"\n     * >>> encode(\"This is a message\")\n     * \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        StringBuilder encodedMessage = new StringBuilder();\n        \n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                // Swap case\n                char swappedCaseChar = Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c);\n                \n                // Replace vowels with the letter that appears 2 places ahead in the alphabet\n                switch (swappedCaseChar) {\n                    case 'a':\n                        encodedMessage.append('C');\n                        break;\n                    case 'e':\n                        encodedMessage.append('G');\n                        break;\n                    case 'i':\n                        encodedMessage.append('K');\n                        break;\n                    case 'o':\n                        encodedMessage.append('Q');\n                        break;\n                    case 'u':\n                        encodedMessage.append('W');\n                        break;\n                    default:\n                        // Non-vowel characters remain unchanged\n                        encodedMessage.append(swappedCaseChar);\n                }\n            } else {\n                // Non-letter characters remain unchanged\n                encodedMessage.append(c);\n            }\n        }\n\n        return encodedMessage.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.encode(\"test\"));  // Expected: \"TGST\"\n        System.out.println(solution.encode(\"This is a message\"));  // Expected: \"tHKS KS C MGSSCGG\"\n        System.out.println(solution.encode(\"Hello World!\"));  // Expected: \"hKLLQ wOrld!\"\n        System.out.println(solution.encode(\"Programming is fun.\"));  // Expected: \"pRGRMMNG KS fVN.\"\n    }\n}\n"}
{"task_id": "Java/94", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You are given a list of integers.\n     * You need to find the largest prime value and return the sum of its digits.\n     *\n     * Examples:\n     * For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n     * For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n     * For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n     * For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n     * For lst = [0,81,12,3,1,21] the output should be 3\n     * For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int maxPrime = -1;\n        \n        for (int num : lst) {\n            if (isPrime(num)) {\n                maxPrime = Math.max(maxPrime, num);\n            }\n        }\n\n        return maxPrime == -1 ? 0 : sumOfDigits(maxPrime);\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) return false;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> lst1 = Arrays.asList(0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3);\n        System.out.println(solution.skjkasdkd(lst1)); // Output: 10\n\n        List<Integer> lst2 = Arrays.asList(1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1);\n        System.out.println(solution.skjkasdkd(lst2)); // Output: 25\n\n        List<Integer> lst3 = Arrays.asList(1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3);\n        System.out.println(solution.skjkasdkd(lst3)); // Output: 13\n\n        List<Integer> lst4 = Arrays.asList(0,724,32,71,99,32,6,0,5,91,83,0,5,6);\n        System.out.println(solution.skjkasdkd(lst4)); // Output: 11\n\n        List<Integer> lst5 = Arrays.asList(0,81,12,3,1,21);\n        System.out.println(solution.skjkasdkd(lst5)); // Output: 3\n\n        List<Integer> lst6 = Arrays.asList(0,8,1,2,1,7);\n        System.out.println(solution.skjkasdkd(lst6)); // Output: 7\n    }\n}\n"}
{"task_id": "Java/95", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a map, return True if all keys are strings and all keys are in lower case or in upper case, else return False.\n     * The function should return False is the given map is empty.\n     */\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        boolean allLowerCase = true;\n        boolean allUpperCase = true;\n\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String strKey = (String) key;\n            if (!strKey.equals(strKey.toLowerCase())) {\n                allLowerCase = false;\n            }\n            if (!strKey.equals(strKey.toUpperCase())) {\n                allUpperCase = false;\n            }\n        }\n\n        return allLowerCase || allUpperCase;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.check_dict_case(Map.of(\"a\", \"apple\", \"b\", \"banana\"))); // True\n        System.out.println(solution.check_dict_case(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"banana\"))); // False\n        System.out.println(solution.check_dict_case(Map.of(\"a\", \"apple\", 8, \"banana\", \"a\", \"apple\"))); // False\n        System.out.println(solution.check_dict_case(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\"))); // False\n        System.out.println(solution.check_dict_case(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))); // True\n    }\n}\n"}
{"task_id": "Java/96", "generation": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Solution {\n\n    /**\n     * Implement a function that takes an non-negative integer and returns an array of the first n\n     * integers that are prime numbers and less than n.\n     */\n    public List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<>();\n        \n        if (n <= 2) return primes; // No primes less than 2\n        \n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        \n        return primes;\n    }\n\n    /**\n     * Helper method to check if a number is prime.\n     */\n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.count_up_to(5));   // [2, 3]\n        System.out.println(solution.count_up_to(11));  // [2, 3, 5, 7]\n        System.out.println(solution.count_up_to(0));   // []\n        System.out.println(solution.count_up_to(20));  // [2, 3, 5, 7, 11, 13, 17, 19]\n        System.out.println(solution.count_up_to(1));   // []\n        System.out.println(solution.count_up_to(18));  // [2, 3, 5, 7, 11, 13, 17]\n    }\n}\n"}
{"task_id": "Java/97", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Complete the function that takes two integers and returns\n     * the product of their unit digits.\n     * Assume the input is always valid.\n     * Examples:\n     * multiply(148, 412) should return 16.\n     * multiply(19, 28) should return 72.\n     * multiply(2020, 1851) should return 0.\n     * multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        // Extract the unit digits of both numbers\n        int unitDigitA = Math.abs(a % 10);\n        int unitDigitB = Math.abs(b % 10);\n\n        // Return the product of the unit digits\n        return unitDigitA * unitDigitB;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.multiply(148, 412)); // Expected output: 16\n        System.out.println(solution.multiply(19, 28));   // Expected output: 72\n        System.out.println(solution.multiply(2020, 1851)); // Expected output: 0\n        System.out.println(solution.multiply(14, -15));  // Expected output: 20\n    }\n}\n"}
{"task_id": "Java/98", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given a string s, count the number of uppercase vowels in even indices.\n     \n     For example:\n     count_upper(\"aBCdEf\") returns 1\n     count_upper(\"abcdefg\") returns 0\n     count_upper(\"dBBE\") returns 0\n      */    \n    public int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.count_upper(\"aBCdEf\"));  // Expected output: 1\n        System.out.println(solution.count_upper(\"abcdefg\")); // Expected output: 0\n        System.out.println(solution.count_upper(\"dBBE\"));    // Expected output: 0\n        System.out.println(solution.count_upper(\"AeIoUc\"));  // Expected output: 3\n        System.out.println(solution.count_upper(\"zZzZ\"));    // Expected output: 2\n    }\n}\n"}
{"task_id": "Java/99", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Create a function that takes a value (string) representing a number\n     * and returns the closest integer to it. If the number is equidistant\n     * from two integers, round it away from zero.\n     *\n     * Examples:\n     * >>> closest_integer(\"10\")\n     * 10\n     * >>> closest_integer(\"15.3\")\n     * 15\n     * >>> closest_integer(\"14.5\")\n     * 15\n     * >>> closest_integer(\"-14.5\")\n     * -15\n     */\n    public int closest_integer(String value) {\n        double num = Double.parseDouble(value);\n        double floorValue = Math.floor(num);\n        double ceilValue = Math.ceil(num);\n\n        if (num - floorValue == 0.5 || ceilValue - num == 0.5) {\n            return num > 0 ? (int) ceilValue : (int) floorValue;\n        } else {\n            return (int) Math.round(num);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.closest_integer(\"10\"));   // Expected output: 10\n        System.out.println(solution.closest_integer(\"15.3\")); // Expected output: 15\n        System.out.println(solution.closest_integer(\"14.5\")); // Expected output: 15\n        System.out.println(solution.closest_integer(\"-14.5\"));// Expected output: -15\n    }\n}\n"}
{"task_id": "Java/100", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a positive integer n, you have to make a pile of n levels of stones.\n     * The first level has n stones.\n     * The number of stones in the next level is:\n     * - the next odd number if n is odd.\n     * - the next even number if n is even.\n     * Return the number of stones in each level in a list, where element at index\n     * i represents the number of stones in the level (i+1).\n     *\n     * Examples:\n     * >>> make_a_pile(3)\n     * [3, 5, 7]\n     */\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 0; i < n; i++) {\n            int stones = n + 2 * i;\n            if ((n & 1) == 1 && (i & 1) == 0) { // If n is odd and i is even\n                stones += 1; // Make it the next odd number\n            } else if ((n & 1) == 0 && (i & 1) == 1) { // If n is even and i is odd\n                stones -= 1; // Make it the next even number\n            }\n            result.add(stones);\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.make_a_pile(3)); // Expected: [3, 5, 7]\n        System.out.println(solution.make_a_pile(4)); // Expected: [4, 6, 8, 10]\n        System.out.println(solution.make_a_pile(1)); // Expected: [1]\n        System.out.println(solution.make_a_pile(2)); // Expected: [2, 4]\n    }\n}\n"}
{"task_id": "Java/101", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You will be given a string of words separated by commas or spaces. Your task is\n     * to split the string into words and return an array of the words.\n     *\n     * For example:\n     * words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n     * words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six])\n     */\n    public List<String> words_string(String s) {\n        // Split the string by commas and spaces\n        String[] parts = s.split(\"[,\\\\s]+\");\n        \n        // Convert array to list\n        return Arrays.asList(parts);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<String> result1 = solution.words_string(\"Hi, my name is John\");\n        System.out.println(result1.equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\")) ? \"Test 1 Passed\" : \"Test 1 Failed\");\n\n        List<String> result2 = solution.words_string(\"One, two, three, four, five, six\");\n        System.out.println(result2.equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\")) ? \"Test 2 Passed\" : \"Test 2 Failed\");\n\n        List<String> result3 = solution.words_string(\"Hello,world this is a test\");\n        System.out.println(result3.equals(Arrays.asList(\"Hello\", \"world\", \"this\", \"is\", \"a\", \"test\")) ? \"Test 3 Passed\" : \"Test 3 Failed\");\n\n        List<String> result4 = solution.words_string(\"singleword\");\n        System.out.println(result4.equals(Arrays.asList(\"singleword\")) ? \"Test 4 Passed\" : \"Test 4 Failed\");\n\n        List<String> result5 = solution.words_string(\"\");\n        System.out.println(result5.equals(Arrays.asList()) ? \"Test 5 Passed\" : \"Test 5 Failed\");\n    }\n}\n"}
{"task_id": "Java/102", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     This function takes two positive numbers x and y and returns the\n     biggest even integer number that is in the range [x, y] inclusive. If\n     there's no such number, then the function should return -1.\n     \n     For example:\n     choose_num(12, 15) = 14\n     choose_num(13, 12) = -1\n     */\n    public int choose_num(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        \n        // Start from the end of the range and move backwards to find the largest even number\n        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                return i;\n            }\n        }\n        \n        return -1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.choose_num(12, 15)); // Expected output: 14\n        System.out.println(solution.choose_num(13, 12)); // Expected output: -1\n        System.out.println(solution.choose_num(10, 20)); // Expected output: 20\n        System.out.println(solution.choose_num(21, 29)); // Expected output: 28\n        System.out.println(solution.choose_num(30, 35)); // Expected output: 34\n        System.out.println(solution.choose_num(36, 36)); // Expected output: 36\n        System.out.println(solution.choose_num(37, 39)); // Expected output: 38\n    }\n}\n"}
{"task_id": "Java/103", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given two positive integers n and m, and your task is to compute the\n     * average of the integers from n through m (including n and m).\n     * Round the answer to the nearest integer and convert that to binary.\n     * If n is greater than m, return -1.\n     * Example:\n     * rounded_avg(1, 5) => \"11\"\n     * rounded_avg(7, 5) => -1\n     * rounded_avg(10, 20) => \"1111\"\n     * rounded_avg(20, 33) => \"11011\"\n     */\n    public Object rounded_avg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        \n        long sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        \n        double average = sum / (m - n + 1);\n        int roundedAverage = (int) Math.round(average);\n        \n        return Integer.toBinaryString(roundedAverage);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.rounded_avg(1, 5));   // Output: \"11\"\n        System.out.println(solution.rounded_avg(7, 5));   // Output: -1\n        System.out.println(solution.rounded_avg(10, 20)); // Output: \"1111\"\n        System.out.println(solution.rounded_avg(20, 33)); // Output: \"11011\"\n    }\n}\n"}
{"task_id": "Java/104", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given a list of positive integers x. return a sorted list of all\n     * elements that hasn't any even digit.\n     *\n     * Note: Returned list should be sorted in increasing order.\n     */\n    public List<Integer> unique_digits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (Integer num : x) {\n            if (!hasEvenDigit(num)) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        return result;\n    }\n\n    private boolean hasEvenDigit(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return true;\n            }\n            num /= 10;\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(15, 33, 1422, 1);\n        System.out.println(solution.unique_digits(test1)); // Expected: [1, 15, 33]\n\n        List<Integer> test2 = Arrays.asList(152, 323, 1422, 10);\n        System.out.println(solution.unique_digits(test2)); // Expected: []\n\n        List<Integer> test3 = Arrays.asList(7, 89, 135, 2468);\n        System.out.println(solution.unique_digits(test3)); // Expected: [7, 135]\n    }\n}\n"}
{"task_id": "Java/105", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n     * reverse the resulting array, and then replace each digit by its corresponding name from\n     * \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n     *\n     * @param arr input list of integers\n     * @return a list of strings representing the names of the digits in reverse sorted order\n     */\n    public List<String> by_length(List<Integer> arr) {\n        // Filter out numbers not between 1 and 9 inclusive\n        List<Integer> filtered = arr.stream()\n                                     .filter(num -> num >= 1 && num <= 9)\n                                     .sorted()\n                                     .collect(Collectors.toList());\n        \n        // Reverse the list\n        Collections.reverse(filtered);\n        \n        // Map each digit to its corresponding name\n        List<String> result = filtered.stream()\n                                      .map(num -> switch (num) {\n                                          case 1 -> \"One\";\n                                          case 2 -> \"Two\";\n                                          case 3 -> \"Three\";\n                                          case 4 -> \"Four\";\n                                          case 5 -> \"Five\";\n                                          case 6 -> \"Six\";\n                                          case 7 -> \"Seven\";\n                                          case 8 -> \"Eight\";\n                                          case 9 -> \"Nine\";\n                                          default -> \"\";\n                                      })\n                                      .collect(Collectors.toList());\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.by_length(Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3))); // [Eight, Five, Four, Three, Two, Two, One, One]\n        System.out.println(solution.by_length(Arrays.asList())); // []\n        System.out.println(solution.by_length(Arrays.asList(1, -1, 55))); // [One]\n        System.out.println(solution.by_length(Arrays.asList(9, 7, 3, 2, 4, 8, 6, 5, 1))); // [Nine, Eight, Seven, Six, Five, Four, Three, Two, One]\n    }\n}\n"}
{"task_id": "Java/106", "generation": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Solution {\n    /**\n     * Implement the function f that takes n as a parameter,\n     * and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n     * or the sum of numbers from 1 to i otherwise.\n     * i starts from 1.\n     * The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n     * Example:\n     * f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                // Calculate factorial of even index\n                int factorial = calculateFactorial(i);\n                result.add(factorial);\n            } else {\n                // Calculate sum from 1 to odd index\n                int sum = calculateSum(i);\n                result.add(sum);\n            }\n        }\n        \n        return result;\n    }\n\n    private int calculateFactorial(int n) {\n        if (n == 0 || n == 1) {\n            return 1;\n        }\n        int factorial = 1;\n        for (int i = 2; i <= n; i++) {\n            factorial *= i;\n        }\n        return factorial;\n    }\n\n    private int calculateSum(int n) {\n        return n * (n + 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.f(5)); // Expected output: [1, 2, 6, 24, 15]\n        System.out.println(solution.f(3)); // Expected output: [1, 2, 6]\n        System.out.println(solution.f(0)); // Expected output: []\n    }\n}\n"}
{"task_id": "Java/107", "generation": "import java.util.*;\n\nclass Solution {\n\n    public List<Integer> even_odd_palindrome(int n) {\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        return Arrays.asList(evenCount, oddCount);\n    }\n\n    private boolean isPalindrome(int number) {\n        String numStr = Integer.toString(number);\n        int left = 0;\n        int right = numStr.length() - 1;\n\n        while (left < right) {\n            if (numStr.charAt(left) != numStr.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.even_odd_palindrome(3));  // Output: [1, 2]\n        System.out.println(solution.even_odd_palindrome(12)); // Output: [4, 6]\n        System.out.println(solution.even_odd_palindrome(5));  // Output: [2, 3]\n    }\n}\n"}
{"task_id": "Java/108", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Write a function count_nums which takes an array of integers and returns\n     * the number of elements which has a sum of digits > 0.\n     * If a number is negative, then its first signed digit will be negative:\n     * e.g. -123 has signed digits -1, 2, and 3.\n     */\n    public int count_nums(List<Integer> arr) {\n        int count = 0;\n        for (int num : arr) {\n            if (sumOfDigits(num) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private int sumOfDigits(int num) {\n        boolean isNegative = num < 0;\n        int sum = 0;\n        while (num != 0) {\n            int digit = Math.abs(num % 10);\n            sum += digit;\n            num /= 10;\n        }\n        return isNegative ? -digit : sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.count_nums(Arrays.asList())); // Expected output: 0\n        System.out.println(solution.count_nums(Arrays.asList(-1, 11, -11))); // Expected output: 1\n        System.out.println(solution.count_nums(Arrays.asList(1, 1, 2))); // Expected output: 3\n    }\n}\n"}
{"task_id": "Java/109", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N]. The\n     * numbers in the array will be randomly ordered. Your task is to determine if\n     * it is possible to get an array sorted in non-decreasing order by performing\n     * the following operation on the given array:\n     * - You are allowed to perform right shift operation any number of times.\n     *\n     * One right shift operation means shifting all elements of the array by one\n     * position in the right direction. The last element of the array will be moved to\n     * the starting position in the array i.e. 0th index.\n     *\n     * If it is possible to obtain the sorted array by performing the above operation\n     * then return true else return False.\n     * If the given array is empty then return true.\n     *\n     * Note: The given list is guaranteed to have unique elements.\n     */\n    public boolean move_one_ball(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        int n = arr.size();\n        for (int i = 0; i < n - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                // Check if the array can be sorted by a single right shift\n                List<Integer> shiftedArr = new ArrayList<>(arr);\n                Collections.rotate(shiftedArr, 1); // Perform one right shift\n                for (int j = 0; j < n - 1; j++) {\n                    if (shiftedArr.get(j) > shiftedArr.get(j + 1)) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n\n        // If no out-of-order elements found, the array is already sorted\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.move_one_ball(Arrays.asList(3, 4, 5, 1, 2))); // Expected: true\n        System.out.println(solution.move_one_ball(Arrays.asList(3, 5, 4, 1, 2))); // Expected: false\n        System.out.println(solution.move_one_ball(Arrays.asList()));             // Expected: true\n        System.out.println(solution.move_one_ball(Arrays.asList(1, 2, 3, 4, 5))); // Expected: true\n        System.out.println(solution.move_one_ball(Arrays.asList(5, 1, 2, 3, 4))); // Expected: true\n    }\n}\n"}
{"task_id": "Java/110", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * In this problem, you will implement a function that takes two lists of numbers,\n     * and determines whether it is possible to perform an exchange of elements\n     * between them to make lst1 a list of only even numbers.\n     * There is no limit on the number of exchanged elements between lst1 and lst2.\n     * If it is possible to exchange elements between the lst1 and lst2 to make\n     * all the elements of lst1 to be even, return \"YES\".\n     * Otherwise, return \"NO\".\n     * For example:\n     * exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n     * exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n     * It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Count odd numbers in lst1 and even numbers in lst2\n        int oddCount = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCount++;\n            }\n        }\n\n        int evenCount = 0;\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCount++;\n            }\n        }\n\n        // If there are enough even numbers in lst2 to replace all odd numbers in lst1, return \"YES\"\n        return oddCount <= evenCount ? \"YES\" : \"NO\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4))); // Expected: YES\n        System.out.println(solution.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4))); // Expected: NO\n        System.out.println(solution.exchange(Arrays.asList(1, 3, 5, 7), Arrays.asList(2, 4, 6, 8))); // Expected: YES\n        System.out.println(solution.exchange(Arrays.asList(1, 3, 5, 7), Arrays.asList(1, 3, 5, 7))); // Expected: NO\n    }\n}\n"}
{"task_id": "Java/111", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given a string representing a space separated lowercase letters, return a dictionary\n     * of the letter with the most repetition and containing the corresponding count.\n     * If several letters have the same occurrence, return all of them.\n     *\n     * Example:\n     * histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n     * histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n     * histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n     * histogram(\"b b b b a\") == {\"b\": 4}\n     * histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        if (test.isEmpty()) {\n            return new HashMap<>();\n        }\n\n        String[] letters = test.split(\" \");\n        Map<String, Integer> letterCounts = new HashMap<>();\n\n        for (String letter : letters) {\n            if (!letter.trim().isEmpty()) { // Trim to handle any leading/trailing spaces\n                int count = letterCounts.getOrDefault(letter, 0);\n                letterCounts.put(letter, count + 1);\n            }\n        }\n\n        int maxCount = Collections.max(letterCounts.values());\n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : letterCounts.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.histogram(\"a b c\")); // {\"a\": 1, \"b\": 1, \"c\": 1}\n        System.out.println(solution.histogram(\"a b b a\")); // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"a b c a b\")); // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"b b b b a\")); // {\"b\": 4}\n        System.out.println(solution.histogram(\"\")); // {}\n    }\n}\n"}
{"task_id": "Java/112", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Task\n     * We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n     * then check if the result string is palindrome.\n     * A string is called palindrome if it reads the same backward as forward.\n     * You should return a tuple containing the result string and true/false for the check.\n     * Example\n     * For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n     * For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n     * For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverse_delete(String s, String c) {\n        // Remove characters from s that are present in c\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!c.contains(String.valueOf(ch))) {\n                sb.append(ch);\n            }\n        }\n\n        // Check if the resulting string is a palindrome\n        String resultString = sb.toString();\n        boolean isPalindrome = isPalindrome(resultString);\n\n        return Arrays.asList(resultString, isPalindrome);\n    }\n\n    private boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n\n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.reverse_delete(\"abcde\", \"ae\"));  // Expected: [bcd, false]\n        System.out.println(solution.reverse_delete(\"abcdef\", \"b\"));  // Expected: [acdef, false]\n        System.out.println(solution.reverse_delete(\"abcdedcba\", \"ab\"));  // Expected: [cdedc, true]\n    }\n}\n"}
{"task_id": "Java/113", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     Given a list of strings, where each string consists of only digits, return a list.\n     Each element i of the output should be \"the number of odd elements in the\n     string i of the input.\" where all the i's should be replaced by the number\n     of odd digits in the i\"th string of the input.\n\n     >>> odd_count(Arrays.asList(\"1234567\"))\n     [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n     >>> odd_count(Arrays.asList(\"3\",\"11111111\"))\n     [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n      \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            int count = 0;\n            for (char c : s.toCharArray()) {\n                if ((c - '0') % 2 != 0) {\n                    count++;\n                }\n            }\n            String formattedResult = \"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\";\n            result.add(formattedResult);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<String> input1 = Arrays.asList(\"1234567\");\n        System.out.println(solution.odd_count(input1));\n\n        // Test case 2\n        List<String> input2 = Arrays.asList(\"3\", \"11111111\");\n        System.out.println(solution.odd_count(input2));\n    }\n}\n"}
{"task_id": "Java/114", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given an array of integers nums, find the minimum sum of any non-empty sub-array\n     * of nums.\n     *\n     * Example:\n     * minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n     * minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        if (nums.isEmpty()) return Integer.MAX_VALUE;\n        \n        int currentMin = nums.get(0);\n        int globalMin = nums.get(0);\n        \n        for (int i = 1; i < nums.size(); i++) {\n            currentMin = Math.min(nums.get(i), currentMin + nums.get(i));\n            globalMin = Math.min(globalMin, currentMin);\n        }\n        \n        return globalMin;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4))); // Expected output: 1\n        System.out.println(solution.minSubArraySum(Arrays.asList(-1, -2, -3)));       // Expected output: -6\n        System.out.println(solution.minSubArraySum(Arrays.asList(1, 2, 3, -6, 1)));   // Expected output: -6\n        System.out.println(solution.minSubArraySum(Arrays.asList(1, 2, 3, 4, 5)));    // Expected output: 1\n        System.out.println(solution.minSubArraySum(Arrays.asList(-1, -2, -3, -4)));   // Expected output: -10\n    }\n}\n"}
{"task_id": "Java/115", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given a rectangular grid of wells. Each row represents a single well,\n     * and each 1 in a row represents a single unit of water.\n     * Each well has a corresponding bucket that can be used to extract water from it,\n     * and all buckets have the same capacity. Can't use buckets from other wells to extract water from one well.\n     * Your task is to use the buckets to empty the wells.\n     * Output the number of times you need to lower the buckets.\n     *\n     * Example 1:\n     * Input:\n     *      grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n     *      bucket_capacity : 1\n     * Output: 6\n     *\n     * Example 2:\n     * Input:\n     *      grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n     *      bucket_capacity : 2\n     * Output: 5\n     *\n     * Example 3:\n     * Input:\n     *      grid : [[0,0,0], [0,0,0]]\n     *      bucket_capacity : 5\n     * Output: 0\n     */\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        int totalDrops = 0;\n        for (List<Integer> well : grid) {\n            int waterUnits = 0;\n            for (int unit : well) {\n                waterUnits += unit;\n            }\n            totalDrops += Math.ceil((double) waterUnits / capacity);\n        }\n        return totalDrops;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test Case 1\n        List<List<Integer>> grid1 = Arrays.asList(\n                Arrays.asList(0, 0, 1, 0),\n                Arrays.asList(0, 1, 0, 0),\n                Arrays.asList(1, 1, 1, 1)\n        );\n        int capacity1 = 1;\n        System.out.println(\"Test Case 1: \" + solution.max_fill(grid1, capacity1)); // Expected output: 6\n\n        // Test Case 2\n        List<List<Integer>> grid2 = Arrays.asList(\n                Arrays.asList(0, 0, 1, 1),\n                Arrays.asList(0, 0, 0, 0),\n                Arrays.asList(1, 1, 1, 1),\n                Arrays.asList(0, 1, 1, 1)\n        );\n        int capacity2 = 2;\n        System.out.println(\"Test Case 2: \" + solution.max_fill(grid2, capacity2)); // Expected output: 5\n\n        // Test Case 3\n        List<List<Integer>> grid3 = Arrays.asList(\n                Arrays.asList(0, 0, 0),\n                Arrays.asList(0, 0, 0)\n        );\n        int capacity3 = 5;\n        System.out.println(\"Test Case 3: \" + solution.max_fill(grid3, capacity3)); // Expected output: 0\n    }\n}\n"}
{"task_id": "Java/116", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * In this Kata, you have to sort an array of integers according to\n     * number of ones in their binary representation in ascending order.\n     * For similar number of ones, sort based on decimal value.\n     *\n     * It must be implemented like this:\n     * >>> sort_array(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 4, 3, 5))\n     * >>> sort_array(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-4, -2, -6, -5, -3))\n     * >>> sort_array(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 4, 3))\n     */\n    public List<Integer> sort_array(List<Integer> arr) {\n        // Sort the list based on the number of ones in binary representation and then by decimal value\n        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int countO1 = Integer.bitCount(o1);\n                int countO2 = Integer.bitCount(o2);\n                \n                if (countO1 != countO2) {\n                    return countO1 - countO2;\n                } else {\n                    return o1.compareTo(o2);\n                }\n            }\n        });\n        \n        return arr;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(1, 5, 2, 3, 4);\n        System.out.println(\"Test Case 1: \" + (solution.sort_array(test1).equals(Arrays.asList(1, 2, 4, 3, 5)) ? \"Passed\" : \"Failed\"));\n\n        List<Integer> test2 = Arrays.asList(-2, -3, -4, -5, -6);\n        System.out.println(\"Test Case 2: \" + (solution.sort_array(test2).equals(Arrays.asList(-4, -2, -6, -5, -3)) ? \"Passed\" : \"Failed\"));\n\n        List<Integer> test3 = Arrays.asList(1, 0, 2, 3, 4);\n        System.out.println(\"Test Case 3: \" + (solution.sort_array(test3).equals(Arrays.asList(0, 1, 2, 4, 3)) ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/117", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given a string s and a natural number n, you have been tasked to implement\n     * a function that returns a list of all words from string s that contain exactly\n     * n consonants, in order these words appear in the string s.\n     * If the string s is empty then the function should return an empty list.\n     * Note: you may assume the input string contains only letters and spaces.\n     */\n    public List<String> select_words(String s, int n) {\n        if (s == null || s.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        String[] words = s.split(\"\\\\s+\");\n        List<String> result = new ArrayList<>();\n\n        for (String word : words) {\n            long consonantCount = word.toLowerCase().chars()\n                    .filter(c -> \"bcdfghjklmnpqrstvwxyz\".indexOf(c) != -1)\n                    .count();\n\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.select_words(\"Mary had a little lamb\", 4)); // [\"little\"]\n        System.out.println(solution.select_words(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\n        System.out.println(solution.select_words(\"simple white space\", 2));     // []\n        System.out.println(solution.select_words(\"Hello world\", 4));            // [\"world\"]\n        System.out.println(solution.select_words(\"Uncle sam\", 3));              // [\"Uncle\"]\n    }\n}\n"}
{"task_id": "Java/118", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You are given a word. Your task is to find the closest vowel that stands between\n     * two consonants from the right side of the word (case sensitive).\n     *\n     * Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n     * find any vowel met the above condition.\n     *\n     * You may assume that the given string contains English letter only.\n     *\n     * Example:\n     * get_closest_vowel(\"yogurt\") ==> \"u\"\n     * get_closest_vowel(\"FULL\") ==> \"U\"\n     * get_closest_vowel(\"quick\") ==> \"\"\n     * get_closest_vowel(\"ab\") ==> \"\"\n     */\n    public String get_closest_vowel(String word) {\n        if (word == null || word.length() < 3) {\n            return \"\";\n        }\n\n        // Define vowels\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n\n        for (int i = word.length() - 2; i > 0; i--) {\n            char currentChar = word.charAt(i);\n            if (vowels.contains(currentChar)) {\n                // Check the character before and after to ensure it's between two consonants\n                boolean leftIsConsonant = !vowels.contains(word.charAt(i - 1));\n                boolean rightIsConsonant = i + 1 < word.length() && !vowels.contains(word.charAt(i + 1));\n\n                if (leftIsConsonant && rightIsConsonant) {\n                    return String.valueOf(currentChar);\n                }\n            }\n        }\n\n        return \"\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.get_closest_vowel(\"yogurt\"));  // Output: \"u\"\n        System.out.println(solution.get_closest_vowel(\"FULL\"));    // Output: \"U\"\n        System.out.println(solution.get_closest_vowel(\"quick\"));   // Output: \"\"\n        System.out.println(solution.get_closest_vowel(\"ab\"));      // Output: \"\"\n        System.out.println(solution.get_closest_vowel(\"aBcDeFgH\"));  // Output: \"e\"\n    }\n}\n"}
{"task_id": "Java/119", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You are given a list of two strings, both strings consist of open\n     * parentheses \"(\" or close parentheses \")\" only.\n     * Your job is to check if it is possible to concatenate the two strings in\n     * some order, that the resulting string will be good.\n     * A string S is considered to be good if and only if all parentheses in S\n     * are balanced. For example: the string \"(())()\" is good, while the string\n     * \"())\" is not.\n     * Return \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\n     Examples:\n     match_parens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n     match_parens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String match_parens(List<String> lst) {\n        // Check if the first string followed by the second is balanced\n        if (isBalanced(lst.get(0) + lst.get(1))) return \"Yes\";\n        \n        // Check if the second string followed by the first is balanced\n        if (isBalanced(lst.get(1) + lst.get(0))) return \"Yes\";\n\n        return \"No\";\n    }\n\n    private boolean isBalanced(String s) {\n        int balance = 0;\n        for (char c : s.toCharArray()) {\n            if (c == '(') {\n                balance++;\n            } else if (c == ')') {\n                balance--;\n            }\n            // If balance goes negative, parentheses are unbalanced\n            if (balance < 0) return false;\n        }\n        // If balance is zero, parentheses are balanced\n        return balance == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.match_parens(Arrays.asList(\"()(\", \")\"))); // Expected: Yes\n        System.out.println(solution.match_parens(Arrays.asList(\")\", \")\")));   // Expected: No\n        System.out.println(solution.match_parens(Arrays.asList(\"(())\", \"()\"))); // Expected: Yes\n        System.out.println(solution.match_parens(Arrays.asList(\"(()\", \"())\"))); // Expected: Yes\n        System.out.println(solution.match_parens(Arrays.asList(\"(\", \"(\")));    // Expected: No\n    }\n}\n"}
{"task_id": "Java/120", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     Given an array arr of integers and a positive integer k, return a sorted list\n     of length k with the maximum k numbers in arr, in ascending order.\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Create a min-heap to keep track of the top k elements\n        PriorityQueue<Integer> minHeap = new PriorityQueue<>(k);\n        \n        for (int num : arr) {\n            if (minHeap.size() < k) {\n                minHeap.offer(num); // Add element to heap if it's not full yet\n            } else if (num > minHeap.peek()) {\n                minHeap.poll(); // Remove the smallest element and add the new one\n                minHeap.offer(num);\n            }\n        }\n\n        // Convert the min-heap to a sorted list in ascending order\n        List<Integer> result = new ArrayList<>(minHeap);\n        Collections.sort(result);\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.maximum(Arrays.asList(-3, -4, 5), 3)); // [-4, -3, 5]\n        System.out.println(solution.maximum(Arrays.asList(4, -4, 4), 2)); // [4, 4]\n        System.out.println(solution.maximum(Arrays.asList(-3, 2, 1, 2, -1, -2, 1), 1)); // [2]\n    }\n}\n"}
{"task_id": "Java/121", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n     *\n     * Examples:\n     * solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n     * solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n     * solution(Arrays.asList(30, 13, 24, 321)) ==> 0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.solution(Arrays.asList(5, 8, 7, 1))); // Expected output: 12\n        System.out.println(solution.solution(Arrays.asList(3, 3, 3, 3, 3))); // Expected output: 9\n        System.out.println(solution.solution(Arrays.asList(30, 13, 24, 321))); // Expected output: 0\n    }\n}\n"}
{"task_id": "Java/122", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given a non-empty array of integers arr and an integer k, return\n     the sum of the elements with at most two digits from the first k elements of arr.\n     */\n    public int add_elements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < Math.min(k, arr.size()); i++) {\n            if (arr.get(i).toString().length() <= 2) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> arr1 = Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9);\n        int k1 = 4;\n        System.out.println(\"Test Case 1: \" + solution.add_elements(arr1, k1)); // Expected output: 24\n\n        // Test case 2\n        List<Integer> arr2 = Arrays.asList(100, 200, 3, 4, 5);\n        int k2 = 5;\n        System.out.println(\"Test Case 2: \" + solution.add_elements(arr2, k2)); // Expected output: 12\n\n        // Test case 3\n        List<Integer> arr3 = Arrays.asList(123, 456, 789);\n        int k3 = 3;\n        System.out.println(\"Test Case 3: \" + solution.add_elements(arr3, k3)); // Expected output: 0\n\n        // Test case 4\n        List<Integer> arr4 = Arrays.asList(12, 345, 6789, 10);\n        int k4 = 2;\n        System.out.println(\"Test Case 4: \" + solution.add_elements(arr4, k4)); // Expected output: 46\n\n        // Test case 5\n        List<Integer> arr5 = Arrays.asList(1, 2, 3, 4, 5);\n        int k5 = 5;\n        System.out.println(\"Test Case 5: \" + solution.add_elements(arr5, k5)); // Expected output: 15\n    }\n}\n"}
{"task_id": "Java/123", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n     *\n     * @param n A positive integer for which the Collatz sequence is generated and filtered for odd numbers.\n     * @return A List<Integer> containing the odd numbers from the Collatz sequence of n, sorted in increasing order.\n     */\n    public List<Integer> get_odd_collatz(int n) {\n        List<Integer> result = new ArrayList<>();\n        while (n != 1) {\n            if (n % 2 == 1) { // Check if n is odd\n                result.add(n);\n            }\n            n = (n % 2 == 0) ? n / 2 : 3 * n + 1; // Apply Collatz rules\n        }\n        result.add(1); // Add the final term of the sequence, which is always 1\n\n        Collections.sort(result); // Sort the list in increasing order\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.get_odd_collatz(5)); // Expected: [1, 5]\n        System.out.println(solution.get_odd_collatz(7)); // Expected: [1, 7, 11, 22]\n        System.out.println(solution.get_odd_collatz(1)); // Expected: [1]\n        System.out.println(solution.get_odd_collatz(8)); // Expected: [1, 5, 16, 4, 2]\n    }\n}\n"}
{"task_id": "Java/124", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You have to write a function which validates a given date string and\n     * returns true if the date is valid otherwise false.\n     * The date is valid if all of the following rules are satisfied:\n     * 1. The date string is not empty.\n     * 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\n     *    And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\n     *    And, the number of days is not less than 1 or higher than 29 for the month 2.\n     * 3. The months should not be less than 1 or higher than 12.\n     * 4. The date should be in the format: mm-dd-yyyy\n     *\n     * for example:\n     * valid_date(\"03-11-2000\") => true\n     * valid_date(\"15-01-2012\") => false\n     * valid_date(\"04-0-2040\") => false\n     * valid_date(\"06-04-2020\") => true\n     * valid_date(\"06/04/2020\") => false\n     */\n    public boolean valid_date(String date) {\n        if (date == null || date.isEmpty()) return false;\n\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) return false;\n\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\n        // Check month\n        if (month < 1 || month > 12) return false;\n\n        // Check days based on the month\n        switch (month) {\n            case 2:\n                if (day < 1 || day > 29) return false;\n                break;\n            case 4:\n            case 6:\n            case 9:\n            case 11:\n                if (day < 1 || day > 30) return false;\n                break;\n            default:\n                if (day < 1 || day > 31) return false;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.valid_date(\"03-11-2000\")); // true\n        System.out.println(solution.valid_date(\"15-01-2012\")); // false\n        System.out.println(solution.valid_date(\"04-0-2040\"));  // false\n        System.out.println(solution.valid_date(\"06-04-2020\")); // true\n        System.out.println(solution.valid_date(\"06/04/2020\")); // false\n    }\n}\n"}
{"task_id": "Java/125", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n     should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n     alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n     Examples:\n     split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\n     split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]\n     split_words(\"abcdef\") == 3\n     */\n    public Object split_words(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\"\\\\s+\"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && ((c - 'a') % 2 == 1)) {\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.split_words(\"Hello world!\")); // Should print: [Hello, world!]\n        System.out.println(solution.split_words(\"Hello,world!\")); // Should print: [Hello, world!]\n        System.out.println(solution.split_words(\"abcdef\"));      // Should print: 3\n\n        // Additional test cases\n        System.out.println(solution.split_words(\"a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z\"));\n        System.out.println(solution.split_words(\"1234567890\"));\n        System.out.println(solution.split_words(\"no,spaces,or,commas\"));\n    }\n}\n"}
{"task_id": "Java/126", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given a list of numbers, return whether or not they are sorted in ascending order.\n     * If the a number appears more than twice, return false. Assume no negative numbers and only integers.\n     *\n     * Examples:\n     * is_sorted(Arrays.asList(5)) -> true\n     * is_sorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n     * is_sorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n     * is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n     * is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n     * is_sorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n     * is_sorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n     * is_sorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean is_sorted(List<Integer> lst) {\n        if (lst == null || lst.size() <= 1) {\n            return true;\n        }\n\n        int count = 1; // To keep track of consecutive duplicates\n\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i).equals(lst.get(i - 1))) {\n                count++;\n                if (count > 2) {\n                    return false;\n                }\n            } else {\n                count = 1;\n            }\n\n            if (lst.get(i) < lst.get(i - 1)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.is_sorted(Arrays.asList(5))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 3, 4, 5))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 3, 2, 4, 5))); // false\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7))); // false\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 2, 3, 3, 4))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 2, 2, 3, 4))); // false\n    }\n}\n"}
{"task_id": "Java/127", "generation": "import java.util.List;\n\nclass Solution {\n\n    /**\n     * Determines whether the length of intersection of two intervals is a prime number.\n     *\n     * @param interval1 The first interval represented as a list [start, end].\n     * @param interval2 The second interval represented as a list [start, end].\n     * @return \"YES\" if the length of the intersection is a prime number, otherwise \"NO\".\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int startMax = Math.max(interval1.get(0), interval2.get(0));\n        int endMin = Math.min(interval1.get(1), interval2.get(1));\n\n        if (startMax > endMin) {\n            return \"NO\"; // No intersection\n        }\n\n        int lengthOfIntersection = endMin - startMax + 1;\n\n        return isPrime(lengthOfIntersection) ? \"YES\" : \"NO\";\n    }\n\n    /**\n     * Checks if a number is prime.\n     *\n     * @param num The number to check.\n     * @return true if the number is prime, false otherwise.\n     */\n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.intersection(List.of(1, 2), List.of(2, 3))); // NO\n        System.out.println(solution.intersection(List.of(-1, 1), List.of(0, 4))); // NO\n        System.out.println(solution.intersection(List.of(-3, -1), List.of(-5, 5))); // YES\n    }\n}\n"}
{"task_id": "Java/128", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given an array arr of integers and you need to return\n     * sum of magnitudes of integers multiplied by product of all signs\n     * of each number in the array, represented by 1, -1 or 0.\n     * Note: return None for empty arr.\n     *\n     * Example:\n     * >>> prod_signs(Arrays.asList(1, 2, 2, -4)) == -9\n     * >>> prod_signs(Arrays.asList(0, 1)) == 0\n     * >>> prod_signs(Arrays.asList()) == Optional.empty()\n     */\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int magnitudeSum = 0;\n        int signProduct = 1;\n\n        for (Integer num : arr) {\n            magnitudeSum += Math.abs(num);\n\n            if (num == 0) {\n                signProduct = 0;\n                break;\n            } else if (num < 0) {\n                signProduct *= -1;\n            }\n        }\n\n        return Optional.of(magnitudeSum * signProduct);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.prod_signs(Arrays.asList(1, 2, 2, -4))); // Expected output: -9\n        System.out.println(solution.prod_signs(Arrays.asList(0, 1)));       // Expected output: 0\n        System.out.println(solution.prod_signs(Arrays.asList()));          // Expected output: Optional.empty()\n    }\n}\n"}
{"task_id": "Java/129", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n     each cell of the grid contains a value. Every integer in the range [1, N * N]\n     inclusive appears exactly once on the cells of the grid.\n\n     You have to find the minimum path of length k in the grid. You can start\n     from any cell, and in each step you can move to any of the neighbor cells,\n     in other words, you can go to cells which share an edge with your current\n     cell.\n     Please note that a path of length k means visiting exactly k cells (not\n     necessarily distinct).\n     You CANNOT go off the grid.\n     A path A (of length k) is considered less than a path B (of length k) if\n     after making the ordered lists of the values on the cells that A and B go\n     through (let's call them lst_A and lst_B), lst_A is lexicographically less\n     than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n     such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n     lst_A[j] = lst_B[j].\n     It is guaranteed that the answer is unique.\n     Return an ordered list of the values on the cells that the minimum path go through.\n\n     Examples:\n\n         Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n         Output: [1, 2, 1]\n\n         Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n         Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                pq.offer(new int[]{grid.get(i).get(j), i, j});\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        while (!pq.isEmpty() && k > 0) {\n            int[] current = pq.poll();\n            result.add(current[0]);\n            k--;\n\n            // Add neighbors to the priority queue\n            if (current[1] - 1 >= 0) pq.offer(new int[]{grid.get(current[1] - 1).get(current[2]), current[1] - 1, current[2]});\n            if (current[1] + 1 < n) pq.offer(new int[]{grid.get(current[1] + 1).get(current[2]), current[1] + 1, current[2]});\n            if (current[2] - 1 >= 0) pq.offer(new int[]{grid.get(current[1]).get(current[2] - 1), current[1], current[2] - 1});\n            if (current[2] + 1 < n) pq.offer(new int[]{grid.get(current[1]).get(current[2] + 1), current[1], current[2] + 1});\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<List<Integer>> grid1 = Arrays.asList(\n            Arrays.asList(1, 2, 3),\n            Arrays.asList(4, 5, 6),\n            Arrays.asList(7, 8, 9)\n        );\n        int k1 = 3;\n        System.out.println(solution.minPath(grid1, k1)); // Expected: [1, 2, 1]\n\n        // Test case 2\n        List<List<Integer>> grid2 = Arrays.asList(\n            Arrays.asList(5, 9, 3),\n            Arrays.asList(4, 1, 6),\n            Arrays.asList(7, 8, 2)\n        );\n        int k2 = 1;\n        System.out.println(solution.minPath(grid2, k2)); // Expected: [1]\n    }\n}\n"}
{"task_id": "Java/130", "generation": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Solution {\n\n    /**\n     * Generates the first n + 1 numbers of the Tribonacci sequence.\n     *\n     * @param n a non-negative integer representing the length of the sequence.\n     * @return a list containing the first n + 1 numbers of the Tribonacci sequence.\n     */\n    public List<Integer> tri(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Input must be a non-negative integer\");\n        }\n\n        List<Integer> result = new ArrayList<>();\n        // Base cases\n        if (n >= 0) result.add(3);\n        if (n >= 1) result.add(2); // tri(2)\n        if (n >= 2) result.add(8); // tri(3)\n\n        for (int i = 3; i <= n; i++) {\n            int nextValue;\n            if (i % 2 == 0) {\n                nextValue = 1 + i / 2;\n            } else {\n                nextValue = result.get(i - 1) + result.get(i - 2) + result.get(i);\n            }\n            result.add(nextValue);\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.tri(0)); // [3]\n        System.out.println(solution.tri(1)); // [3, 2]\n        System.out.println(solution.tri(2)); // [3, 2, 8]\n        System.out.println(solution.tri(3)); // [3, 2, 8, 5]\n        System.out.println(solution.tri(4)); // [3, 2, 8, 5, 10]\n    }\n}\n"}
{"task_id": "Java/131", "generation": "import java.util.*;\n\nclass Solution {\n\n    /**\n     * Given a positive integer n, return the product of the odd digits.\n     * Return 0 if all digits are even.\n     * For example:\n     * digits(1)  == 1\n     * digits(4)  == 0\n     * digits(235) == 15\n     */\n    public int digits(int n) {\n        int product = 1;\n        boolean hasOddDigit = false;\n\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n                hasOddDigit = true;\n            }\n            n /= 10;\n        }\n\n        return hasOddDigit ? product : 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.digits(1));   // Expected output: 1\n        System.out.println(solution.digits(4));   // Expected output: 0\n        System.out.println(solution.digits(235)); // Expected output: 15\n        System.out.println(solution.digits(2468)); // Expected output: 0\n        System.out.println(solution.digits(13579)); // Expected output: 945\n    }\n}\n"}
{"task_id": "Java/132", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Create a function that takes a string as input which contains only square brackets.\n     * The function should return true if and only if there is a valid subsequence of brackets\n     * where at least one bracket in the subsequence is nested.\n     *\n     * @param string the input string containing only square brackets\n     * @return true if there is a nested subsequence, false otherwise\n     */\n    public boolean is_nested(String string) {\n        int balance = 0;\n        boolean hasNested = false;\n\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                balance++;\n                if (balance > 1) {\n                    hasNested = true;\n                }\n            } else if (c == ']') {\n                balance--;\n                if (balance < 0) {\n                    return false; // Unbalanced brackets\n                }\n            }\n        }\n\n        return hasNested && balance == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.is_nested(\"[[]]\")); // true\n        System.out.println(solution.is_nested(\"[]]]]]]][[[[[]\")); // false\n        System.out.println(solution.is_nested(\"[][]\")); // false\n        System.out.println(solution.is_nested(\"[]\")); // false\n        System.out.println(solution.is_nested(\"[[][]]\")); // true\n        System.out.println(solution.is_nested(\"[[]][[\")); // true\n    }\n}\n"}
{"task_id": "Java/133", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     You are given a list of numbers.\n     You need to return the sum of squared numbers in the given list,\n     round each element in the list to the upper int(Ceiling) first.\n     Examples:\n     For lst = [1,2,3] the output should be 14\n     For lst = [1,4,9] the output should be 98\n     For lst = [1,3,5,7] the output should be 84\n     For lst = [1.4,4.2,0] the output should be 29\n     For lst = [-2.4,1,1] the output should be 6\n      */\n    public int sum_squares(List<Double> lst) {\n        return lst.stream()\n                  .mapToDouble(num -> Math.ceil(num))\n                  .map(num -> num * num)\n                  .sum();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Double> test1 = Arrays.asList(1.0, 2.0, 3.0);\n        System.out.println(solution.sum_squares(test1)); // Output: 14\n\n        List<Double> test2 = Arrays.asList(1.0, 4.0, 9.0);\n        System.out.println(solution.sum_squares(test2)); // Output: 98\n\n        List<Double> test3 = Arrays.asList(1.0, 3.0, 5.0, 7.0);\n        System.out.println(solution.sum_squares(test3)); // Output: 84\n\n        List<Double> test4 = Arrays.asList(1.4, 4.2, 0.0);\n        System.out.println(solution.sum_squares(test4)); // Output: 29\n\n        List<Double> test5 = Arrays.asList(-2.4, 1.0, 1.0);\n        System.out.println(solution.sum_squares(test5)); // Output: 6\n    }\n}\n"}
{"task_id": "Java/134", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Create a function that returns true if the last character\n     * of a given string is an alphabetical character and is not\n     * a part of a word, and false otherwise.\n     * Note: \"word\" is a group of characters separated by space.\n     *\n     * Examples:\n     * check_if_last_char_is_a_letter(\"apple pie\") -> false\n     * check_if_last_char_is_a_letter(\"apple pi e\") -> true\n     * check_if_last_char_is_a_letter(\"apple pi e \") -> false\n     * check_if_last_char_is_a_letter(\"\") -> false\n     */\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        if (txt == null || txt.isEmpty()) {\n            return false;\n        }\n\n        char lastChar = txt.charAt(txt.length() - 1);\n        \n        // Check if the last character is a space or not an alphabetical character\n        if (lastChar == ' ') {\n            return false;\n        }\n        \n        int lastIndex = txt.lastIndexOf(' ');\n        if (lastIndex == -1) {\n            return Character.isLetter(lastChar); // If no spaces, check if it's a letter\n        } else {\n            char prevChar = txt.charAt(lastIndex + 1);\n            return Character.isLetter(prevChar); // Check the character before the last space\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.check_if_last_char_is_a_letter(\"apple pie\")); // false\n        System.out.println(solution.check_if_last_char_is_a_letter(\"apple pi e\")); // true\n        System.out.println(solution.check_if_last_char_is_a_letter(\"apple pi e \")); // false\n        System.out.println(solution.check_if_last_char_is_a_letter(\"\")); // false\n        System.out.println(solution.check_if_last_char_is_a_letter(\"a b c d e f g h i j k l m n o p q r s t u v w x y z \")); // true\n    }\n}\n"}
{"task_id": "Java/135", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Create a function which returns the largest index of an element which\n     * is not greater than or equal to the element immediately preceding it.\n     * If no such element exists then return -1. The given array will not contain\n     * duplicate values.\n     *\n     * Examples:\n     * can_arrange(Arrays.asList(1,2,4,3,5)) = 3\n     * can_arrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int can_arrange(List<Integer> arr) {\n        if (arr == null || arr.size() < 2) {\n            return -1;\n        }\n\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.can_arrange(Arrays.asList(1, 2, 4, 3, 5))); // Expected output: 3\n        System.out.println(solution.can_arrange(Arrays.asList(1, 2, 3)));       // Expected output: -1\n        System.out.println(solution.can_arrange(Arrays.asList(5, 4, 3, 2, 1))); // Expected output: 0\n        System.out.println(solution.can_arrange(Arrays.asList(1, 3, 5, 7, 6))); // Expected output: 3\n    }\n}\n"}
{"task_id": "Java/136", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Create a function that returns a tuple (a, b), where 'a' is\n     * the largest of negative integers, and 'b' is the smallest\n     * of positive integers in a list.\n     * If there is no negative or positive integers, return them as None.\n     *\n     * Examples:\n     * largest_smallest_integers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n     * largest_smallest_integers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n     * largest_smallest_integers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Arrays.asList(Optional.empty(), Optional.empty());\n        }\n\n        Optional<Integer> smallestPositive = lst.stream()\n                .filter(num -> num > 0)\n                .min(Integer::compare);\n\n        Optional<Integer> largestNegative = lst.stream()\n                .filter(num -> num < 0)\n                .max(Integer::compare);\n\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(2, 4, 1, 3, 5, 7))); // (Optional.empty(), Optional.of(1))\n        System.out.println(solution.largest_smallest_integers(Arrays.asList()));                // (Optional.empty(), Optional.empty())\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(0)));               // (Optional.empty(), Optional.empty())\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(-5, -3, 2, 4)));    // (Optional.of(-3), Optional.of(2))\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(-1, -2, -3)));      // (Optional.of(-1), Optional.empty())\n    }\n}\n"}
{"task_id": "Java/137", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Create a function that takes integers, floats, or strings representing\n     * real numbers, and returns the larger variable in its given variable type.\n     * Return None if the values are equal.\n     * Note: If a real number is represented as a string, the floating point might be . or ,\n     *\n     * compare_one(1, 2.5) -> Optional.of(2.5)\n     * compare_one(1, \"2,3\") -> Optional.of(\"2,3\")\n     * compare_one(\"5,1\", \"6\") -> Optional.of(\"6\")\n     * compare_one(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compare_one(Object a, Object b) {\n        double numA = parseNumber(a);\n        double numB = parseNumber(b);\n\n        if (numA == numB) {\n            return Optional.empty();\n        }\n\n        if (numA > numB) {\n            return Optional.of(a);\n        } else {\n            return Optional.of(b);\n        }\n    }\n\n    private double parseNumber(Object value) {\n        if (value instanceof Integer) {\n            return ((Integer) value).doubleValue();\n        } else if (value instanceof Float) {\n            return ((Float) value).doubleValue();\n        } else if (value instanceof String) {\n            return Double.parseDouble(((String) value).replace(',', '.'));\n        }\n        throw new IllegalArgumentException(\"Unsupported type: \" + value.getClass().getName());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.compare_one(1, 2.5)); // Optional.of(2.5)\n        System.out.println(solution.compare_one(1, \"2,3\")); // Optional.of(\"2,3\")\n        System.out.println(solution.compare_one(\"5,1\", \"6\")); // Optional.of(\"6\")\n        System.out.println(solution.compare_one(\"1\", 1)); // Optional.empty()\n    }\n}\n"}
{"task_id": "Java/138", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n     * Example:\n     * is_equal_to_sum_even(4) == false\n     * is_equal_to_sum_even(6) == false\n     * is_equal_to_sum_even(8) == true\n     */\n    public boolean is_equal_to_sum_even(int n) {\n        // Since the smallest sum of 4 positive even numbers is 2 + 2 + 2 + 2 = 8,\n        // any number less than 8 cannot be expressed as such a sum.\n        if (n < 8) {\n            return false;\n        }\n        \n        // If n - 8 is even, then we can express n as the sum of 4 positive even numbers\n        // because we can add pairs of 2 to make up the difference.\n        return (n - 8) % 2 == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.is_equal_to_sum_even(4)); // false\n        System.out.println(solution.is_equal_to_sum_even(6)); // false\n        System.out.println(solution.is_equal_to_sum_even(8)); // true\n        System.out.println(solution.is_equal_to_sum_even(10)); // true (2 + 2 + 2 + 4 = 10)\n        System.out.println(solution.is_equal_to_sum_even(12)); // true (2 + 2 + 2 + 6 = 12)\n        System.out.println(solution.is_equal_to_sum_even(14)); // true (2 + 2 + 2 + 8 = 14)\n        System.out.println(solution.is_equal_to_sum_even(16)); // true (2 + 2 + 2 + 10 = 16)\n    }\n}\n"}
{"task_id": "Java/139", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     The Brazilian factorial is defined as:\n     brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n     where n > 0\n\n     For example:\n     >>> special_factorial(4)\n     288\n\n     The function will receive an integer as input and should return the special\n     factorial of this integer.\n      */\n    public long special_factorial(int n) {\n        if (n == 1 || n == 0) {\n            return 1;\n        }\n        \n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    private long factorial(int num) {\n        if (num == 0 || num == 1) {\n            return 1;\n        }\n        \n        long fact = 1;\n        for (int i = 2; i <= num; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"special_factorial(4): \" + solution.special_factorial(4)); // Expected: 288\n        System.out.println(\"special_factorial(3): \" + solution.special_factorial(3)); // Expected: 12\n        System.out.println(\"special_factorial(5): \" + solution.special_factorial(5)); // Expected: 34560\n        System.out.println(\"special_factorial(1): \" + solution.special_factorial(1)); // Expected: 1\n        System.out.println(\"special_factorial(2): \" + solution.special_factorial(2)); // Expected: 2\n    }\n}\n"}
{"task_id": "Java/140", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     Given a string text, replace all spaces in it with underscores,\n     and if a string has more than 2 consecutive spaces,\n     then replace all consecutive spaces with -\n     */\n    public String fix_spaces(String text) {\n        StringBuilder result = new StringBuilder();\n        int spaceCount = 0;\n\n        for (char c : text.toCharArray()) {\n            if (c == ' ') {\n                spaceCount++;\n            } else {\n                if (spaceCount > 2) {\n                    result.append('-');\n                } else if (spaceCount > 0) {\n                    result.append('_');\n                }\n                spaceCount = 0;\n                result.append(c);\n            }\n        }\n\n        // Handle trailing spaces\n        if (spaceCount > 2) {\n            result.append('-');\n        } else if (spaceCount > 0) {\n            result.append('_');\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.fix_spaces(\"Example\"));      // Output: Example\n        System.out.println(solution.fix_spaces(\"Example 1\"));    // Output: Example_1\n        System.out.println(solution.fix_spaces(\" Example 2\"));   // Output: _Example_2\n        System.out.println(solution.fix_spaces(\" Example   3\")); // Output: _Example-3\n\n        // Additional test cases\n        System.out.println(solution.fix_spaces(\"  Leading spaces\"));    // Output: __Leading_spaces\n        System.out.println(solution.fix_spaces(\"Trailing spaces  \"));  // Output: Trailing_spaces--\n        System.out.println(solution.fix_spaces(\"Multiple   spaces\"));  // Output: Multiple-_spaces\n        System.out.println(solution.fix_spaces(\"NoSpacesHere\"));       // Output: NoSpacesHere\n    }\n}\n"}
{"task_id": "Java/141", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Create a function which takes a string representing a file's name, and returns\n     * \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n     * A file's name is considered to be valid if and only if all the following conditions\n     * are met:\n     * - There should not be more than three digits ('0'-'9') in the file's name.\n     * - The file's name contains exactly one dot '.'.\n     * - The substring before the dot should not be empty, and it starts with a letter from\n     *   the latin alphapet ('a'-'z' and 'A'-'Z').\n     * - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n     *\n     * Examples:\n     * file_name_check(\"example.txt\") # => \"Yes\"\n     * file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String file_name_check(String file_name) {\n        // Check for exactly one dot\n        int dotCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (c == '.') {\n                dotCount++;\n            }\n        }\n        if (dotCount != 1) return \"No\";\n\n        // Split the string by dot to get the two parts: before and after the dot\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length != 2) return \"No\"; // There should be exactly one dot\n\n        // Check for empty part before the dot\n        if (parts[0].isEmpty()) return \"No\";\n\n        // Check if the first character is a letter\n        if (!Character.isLetter(parts[0].charAt(0))) return \"No\";\n\n        // Check for more than three digits in the file name\n        int digitCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n        }\n        if (digitCount > 3) return \"No\";\n\n        // Check the extension part after the dot\n        String extension = parts[1];\n        if (!\"txt\".equals(extension) && !\"exe\".equals(extension) && !\"dll\".equals(extension)) {\n            return \"No\";\n        }\n\n        return \"Yes\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.file_name_check(\"example.txt\"));  // Expected: Yes\n        System.out.println(solution.file_name_check(\"1example.dll\")); // Expected: No (starts with a digit)\n        System.out.println(solution.file_name_check(\".txt\"));         // Expected: No (empty part before the dot)\n        System.out.println(solution.file_name_check(\"example.exe\"));  // Expected: Yes\n        System.out.println(solution.file_name_check(\"example1234.dll\"));// Expected: No (more than three digits)\n        System.out.println(solution.file_name_check(\"example.doc\"));  // Expected: No (invalid extension)\n    }\n}\n"}
{"task_id": "Java/142", "generation": "import java.util.List;\n\nclass Solution {\n    /**\n     * This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n     *\n     * Examples:\n     * For lst = [1,2,3] the output should be 6\n     * For lst = []  the output should be 0\n     * For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sum_squares(List<Integer> lst) {\n        if (lst == null || lst.isEmpty()) {\n            return 0;\n        }\n\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int value = lst.get(i);\n            if ((i + 1) % 3 == 0) {\n                sum += value * value;\n            } else if ((i + 1) % 4 == 0 && (i + 1) % 3 != 0) {\n                sum += value * value * value;\n            } else {\n                sum += value;\n            }\n        }\n\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sum_squares(List.of(1, 2, 3))); // Output: 6\n        System.out.println(solution.sum_squares(List.of())); // Output: 0\n        System.out.println(solution.sum_squares(List.of(-1, -5, 2, -1, -5))); // Output: -126\n        System.out.println(solution.sum_squares(List.of(4, 8, 12, 16, 20, 24))); // Output: 3792\n    }\n}\n"}
{"task_id": "Java/143", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given a string representing a sentence,\n     * the sentence contains some words separated by a space,\n     * and you have to return a string that contains the words from the original sentence,\n     * whose lengths are prime numbers,\n     * the order of the words in the new string should be the same as the original one.\n     *\n     * Example 1:\n     * Input: sentence = \"This is a test\"\n     * Output: \"is\"\n     *\n     * Example 2:\n     * Input: sentence = \"lets go for swimming\"\n     * Output: \"go for\"\n     *\n     * Constraints:\n     * * 1 <= len(sentence) <= 100\n     * * sentence contains only letters\n     */\n    public String words_in_sentence(String sentence) {\n        List<String> words = Arrays.asList(sentence.split(\" \"));\n        StringBuilder result = new StringBuilder();\n        \n        for (String word : words) {\n            if (isPrime(word.length())) {\n                if (result.length() > 0) {\n                    result.append(\" \");\n                }\n                result.append(word);\n            }\n        }\n        \n        return result.toString();\n    }\n\n    private boolean isPrime(int number) {\n        if (number <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= number; i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.words_in_sentence(\"This is a test\")); // Output: \"is\"\n        System.out.println(solution.words_in_sentence(\"lets go for swimming\")); // Output: \"go for\"\n        System.out.println(solution.words_in_sentence(\"Java programming language\")); // Output: \"Java lang\"\n        System.out.println(solution.words_in_sentence(\"hello world\")); // Output: \"\"\n    }\n}\n"}
{"task_id": "Java/144", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Your task is to implement a function that will simplify the expression\n     * x * n. The function returns true if x * n evaluates to a whole number and false\n     * otherwise. Both x and n, are string representation of a fraction, and have the following format,\n     * <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n     *\n     * You can assume that x, and n are valid fractions, and do not have zero as denominator.\n     */\n    public boolean simplify(String x, String n) {\n        // Split the strings into numerator and denominator\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n\n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n\n        // Simplify the expression (x * n) / 1\n        return (xNumerator * nNumerator) % (xDenominator * nDenominator) == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.simplify(\"1/5\", \"5/1\")); // true\n        System.out.println(solution.simplify(\"1/6\", \"2/1\")); // false\n        System.out.println(solution.simplify(\"7/10\", \"10/2\")); // false\n        System.out.println(solution.simplify(\"3/4\", \"4/3\")); // true\n        System.out.println(solution.simplify(\"5/8\", \"8/5\")); // true\n        System.out.println(solution.simplify(\"9/16\", \"16/9\")); // true\n    }\n}\n"}
{"task_id": "Java/145", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Write a function which sorts the given list of integers\n     * in ascending order according to the sum of their digits.\n     * Note: if there are several items with similar sum of their digits,\n     * order them based on their index in original list.\n     * If an integer is negative, then its first digit will be negative:\n     * e.g. -123 has digits -1, 2, and 3.\n     *\n     * For example:\n     * >>> order_by_points(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n     * >>> order_by_points(Arrays.asList()) == []\n     */\n    public List<Integer> order_by_points(List<Integer> nums) {\n        // Sort the list based on the sum of digits and then by original index\n        return nums.stream()\n                   .sorted(Comparator.comparingInt(Solution::sumOfDigits)\n                                     .thenComparingInt(nums::indexOf))\n                   .collect(Collectors.toList());\n    }\n\n    private static int sumOfDigits(int num) {\n        boolean isNegative = num < 0;\n        int absNum = Math.abs(num);\n        int sum = 0;\n\n        while (absNum > 0) {\n            sum += absNum % 10;\n            absNum /= 10;\n        }\n\n        // If the number was negative, subtract the first digit from the sum\n        if (isNegative && absNum == num) {\n            sum -= absNum; // The first digit is -1 for negative numbers\n        }\n\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(1, 11, -1, -11, -12);\n        System.out.println(solution.order_by_points(test1)); // Expected: [-1, -11, 1, -12, 11]\n\n        List<Integer> test2 = new ArrayList<>();\n        System.out.println(solution.order_by_points(test2)); // Expected: []\n\n        List<Integer> test3 = Arrays.asList(-99, 99, -88, 88);\n        System.out.println(solution.order_by_points(test3)); // Expected: [-88, 88, -99, 99]\n    }\n}\n"}
{"task_id": "Java/146", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Write a function that takes an array of numbers as input and returns\n     * the number of elements in the array that are greater than 10 and both\n     * first and last digits of a number are odd (1, 3, 5, 7, 9).\n     * For example:\n     * specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n     * specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10 && isFirstAndLastDigitOdd(num)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isFirstAndLastDigitOdd(int num) {\n        String strNum = Integer.toString(Math.abs(num));\n        int firstDigit = Character.digit(strNum.charAt(0), 10);\n        int lastDigit = Character.digit(strNum.charAt(strNum.length() - 1), 10);\n\n        return (firstDigit % 2 != 0) && (lastDigit % 2 != 0);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.specialFilter(Arrays.asList(15, -73, 14, -15))); // Expected output: 1\n        System.out.println(solution.specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109))); // Expected output: 2\n        System.out.println(solution.specialFilter(Arrays.asList(-73, 15, 14, 33, 45, 21, 109))); // Expected output: 3\n        System.out.println(solution.specialFilter(Arrays.asList(1, -1, 2, -2, 3, -3))); // Expected output: 0\n    }\n}\n"}
{"task_id": "Java/147", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You are given a positive integer n. You have to create an integer array a of length n.\n     * For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n     * Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n     * and a[i] + a[j] + a[k] is a multiple of 3.\n     *\n     * Example :\n     * Input: n = 5\n     * Output: 1\n     * Explanation:\n     * a = [1, 3, 7, 13, 21]\n     * The only valid triple is (1, 7, 13).\n     */\n    public int get_max_triples(int n) {\n        List<Integer> arr = new ArrayList<>();\n        \n        // Generate the array based on the given formula\n        for (int i = 1; i <= n; i++) {\n            arr.add(i * i - i + 1);\n        }\n        \n        int count = 0;\n        \n        // Iterate through all possible triples (i, j, k) where i < j < k\n        for (int i = 0; i < arr.size() - 2; i++) {\n            for (int j = i + 1; j < arr.size() - 1; j++) {\n                for (int k = j + 1; k < arr.size(); k++) {\n                    if ((arr.get(i) + arr.get(j) + arr.get(k)) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.get_max_triples(5)); // Expected output: 1\n        System.out.println(solution.get_max_triples(6)); // Expected output: 2\n        System.out.println(solution.get_max_triples(7)); // Expected output: 3\n    }\n}\n"}
{"task_id": "Java/148", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * There are eight planets in our solar system: the closest to the Sun\n     * is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n     * Uranus, Neptune.\n     * Write a function that takes two planet names as strings planet1 and planet2.\n     * The function should return a list containing all planets whose orbits are\n     * located between the orbit of planet1 and the orbit of planet2, sorted by\n     * the proximity to the sun.\n     * The function should return an empty list if planet1 or planet2\n     * are not correct planet names.\n     * Examples:\n     * bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n     * bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n     * bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        // Array of planets sorted by proximity to the Sun\n        String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        \n        int index1 = -1;\n        int index2 = -1;\n\n        // Find the indices of planet1 and planet2\n        for (int i = 0; i < planets.length; i++) {\n            if (planets[i].equals(planet1)) {\n                index1 = i;\n            }\n            if (planets[i].equals(planet2)) {\n                index2 = i;\n            }\n        }\n\n        // If either planet is not found, return an empty list\n        if (index1 == -1 || index2 == -1) {\n            return new ArrayList<>();\n        }\n\n        // Ensure index1 is less than index2 for correct order\n        if (index1 > index2) {\n            int temp = index1;\n            index1 = index2;\n            index2 = temp;\n        }\n\n        // Collect the planets between planet1 and planet2, inclusive\n        List<String> result = new ArrayList<>();\n        for (int i = index1 + 1; i < index2; i++) {\n            result.add(planets[i]);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.bf(\"Jupiter\", \"Neptune\")); // [\"Saturn\", \"Uranus\"]\n        System.out.println(solution.bf(\"Earth\", \"Mercury\"));   // [\"Venus\"]\n        System.out.println(solution.bf(\"Mercury\", \"Uranus\"));  // [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n        System.out.println(solution.bf(\"Pluto\", \"Mars\"));      // []\n    }\n}\n"}
{"task_id": "Java/149", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function that accepts a list of strings as a parameter,\n     * deletes the strings that have odd lengths from it,\n     * and returns the resulted list with a sorted order.\n     * The list is always a list of strings and never an array of numbers,\n     * and it may contain duplicates.\n     * The order of the list should be ascending by length of each word, and you\n     * should return the list sorted by that rule.\n     * If two words have the same length, sort the list alphabetically.\n     * The function should return a list of strings in sorted order.\n     * You may assume that all words will have the same length.\n     * For example:\n     * assert sorted_list_sum(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n     * assert sorted_list_sum(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> sorted_list_sum(List<String> lst) {\n        // Remove strings with odd lengths\n        lst.removeIf(s -> s.length() % 2 != 0);\n        \n        // Sort the list by length, then alphabetically if lengths are equal\n        Collections.sort(lst, (s1, s2) -> {\n            int lenCompare = Integer.compare(s1.length(), s2.length());\n            return lenCompare == 0 ? s1.compareTo(s2) : lenCompare;\n        });\n        \n        return lst;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        List<String> test1 = Arrays.asList(\"aa\", \"a\", \"aaa\");\n        System.out.println(solution.sorted_list_sum(test1));  // Output: [aa]\n        \n        List<String> test2 = Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\");\n        System.out.println(solution.sorted_list_sum(test2));  // Output: [ab, cd]\n    }\n}\n"}
{"task_id": "Java/150", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * A simple program which should return the value of x if n is\n     * a prime number and should return the value of y otherwise.\n     *\n     * Examples:\n     * for x_or_y(7, 34, 12) == 34\n     * for x_or_y(15, 8, 5) == 5\n     */\n    public int x_or_y(int n, int x, int y) {\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    // Helper method to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.x_or_y(7, 34, 12)); // Should print 34\n        System.out.println(solution.x_or_y(15, 8, 5));  // Should print 5\n        System.out.println(solution.x_or_y(13, 20, 10));// Should print 20 (since 13 is prime)\n        System.out.println(solution.x_or_y(4, 6, 9));   // Should print 9 (since 4 is not prime)\n    }\n}\n"}
{"task_id": "Java/151", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a list of numbers, return the sum of squares of the numbers in the list that are odd.\n     * Ignore numbers that are negative or not integers.\n     *\n     * @param lst The input list of objects.\n     * @return The sum of squares of the odd positive integers in the list.\n     */\n    public int double_the_difference(List<Object> lst) {\n        return lst.stream()\n                  .filter(obj -> obj instanceof Integer)\n                  .mapToInt(obj -> (Integer) obj)\n                  .filter(num -> num > 0 && num % 2 != 0)\n                  .map(num -> num * num)\n                  .sum();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.double_the_difference(Arrays.asList(1, 3, 2, 0))); // Expected output: 10\n        System.out.println(solution.double_the_difference(Arrays.asList(-1, -2, 0))); // Expected output: 0\n        System.out.println(solution.double_the_difference(Arrays.asList(9, -2)));      // Expected output: 81\n        System.out.println(solution.double_the_difference(Arrays.asList(0)));          // Expected output: 0\n        System.out.println(solution.double_the_difference(new ArrayList<>()));         // Expected output: 0\n    }\n}\n"}
{"task_id": "Java/152", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Compares the game scores with the guesses and returns an array of how far off each guess was.\n     *\n     * @param game  A list of integers representing the actual game scores.\n     * @param guess A list of integers representing the guessed scores.\n     * @return A list of integers where each element is the absolute difference between the guess and the score, or 0 if they are equal.\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            result.add(diff);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> game1 = Arrays.asList(1, 2, 3, 4, 5, 1);\n        List<Integer> guess1 = Arrays.asList(1, 2, 3, 4, 2, -2);\n        System.out.println(\"Test Case 1: \" + solution.compare(game1, guess1)); // Expected: [0, 0, 0, 0, 3, 3]\n\n        // Test case 2\n        List<Integer> game2 = Arrays.asList(0, 5, 0, 0, 0, 4);\n        List<Integer> guess2 = Arrays.asList(4, 1, 1, 0, 0, -2);\n        System.out.println(\"Test Case 2: \" + solution.compare(game2, guess2)); // Expected: [4, 4, 1, 0, 0, 6]\n\n        // Test case 3\n        List<Integer> game3 = Arrays.asList(5, 7, 8, 9);\n        List<Integer> guess3 = Arrays.asList(5, 7, 8, 10);\n        System.out.println(\"Test Case 3: \" + solution.compare(game3, guess3)); // Expected: [0, 0, 0, 1]\n\n        // Test case 4\n        List<Integer> game4 = Arrays.asList(2, 3, 5, 7, 11);\n        List<Integer> guess4 = Arrays.asList(1, 4, 6, 8, 9);\n        System.out.println(\"Test Case 4: \" + solution.compare(game4, guess4)); // Expected: [1, 1, 1, 1, 2]\n    }\n}\n"}
{"task_id": "Java/153", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You will be given the name of a class (a string) and a list of extensions.\n     * The extensions are to be used to load additional classes to the class. The\n     * strength of the extension is as follows: Let CAP be the number of the uppercase\n     * letters in the extension's name, and let SM be the number of lowercase letters\n     * in the extension's name, the strength is given by the fraction CAP - SM.\n     * You should find the strongest extension and return a string in this\n     * format: ClassName.Strongest_Extension.\n     * If there are two or more extensions with the same strength, you should\n     * choose the one that comes first in the list.\n     * For example, if you are given \"Slices\" as the class and a list of the\n     * extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n     * return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n     * (its strength is -1).\n     * Example:\n     * for Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        int maxStrength = Integer.MIN_VALUE;\n        String strongestExtension = \"\";\n\n        for (String extension : extensions) {\n            int capCount = 0;\n            int smCount = 0;\n\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smCount++;\n                }\n            }\n\n            int strength = capCount - smCount;\n\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            } else if (strength == maxStrength && extensions.indexOf(extension) < extensions.indexOf(strongestExtension)) {\n                strongestExtension = extension;\n            }\n        }\n\n        return class_name + \".\" + strongestExtension;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.Strongest_Extension(\"Slices\", Arrays.asList(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"))); // Should print: Slices.SErviNGSliCes\n        System.out.println(solution.Strongest_Extension(\"my_class\", Arrays.asList(\"AA\", \"Be\", \"CC\"))); // Should print: my_class.AA\n        System.out.println(solution.Strongest_Extension(\"DataProcessor\", Arrays.asList(\"dataIO\", \"DATAIO\", \"dataio\"))); // Should print: DataProcessor.DATAIO\n    }\n}\n"}
{"task_id": "Java/154", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word.\n     * cycpattern_check(\"abcd\",\"abd\") => false\n     * cycpattern_check(\"hello\",\"ell\") => true\n     * cycpattern_check(\"whassup\",\"psus\") => false\n     * cycpattern_check(\"abab\",\"baa\") => true\n     * cycpattern_check(\"efef\",\"eeff\") => false\n     * cycpattern_check(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpattern_check(String a, String b) {\n        if (b.length() > a.length()) return false;\n        \n        for (int i = 0; i < b.length(); i++) {\n            String rotatedB = rotateString(b, i);\n            if (a.contains(rotatedB)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private String rotateString(String s, int k) {\n        int n = s.length();\n        k = k % n; // In case the rotation is greater than the length of the string\n        return s.substring(n - k) + s.substring(0, n - k);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.cycpattern_check(\"abcd\", \"abd\")); // false\n        System.out.println(solution.cycpattern_check(\"hello\", \"ell\")); // true\n        System.out.println(solution.cycpattern_check(\"whassup\", \"psus\")); // false\n        System.out.println(solution.cycpattern_check(\"abab\", \"baa\")); // true\n        System.out.println(solution.cycpattern_check(\"efef\", \"eeff\")); // false\n        System.out.println(solution.cycpattern_check(\"himenss\", \"simen\")); // true\n    }\n}\n"}
{"task_id": "Java/155", "generation": "import java.util.List;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\nclass Solution {\n    /**\n     Given an integer. return a tuple that has the number of even and odd digits respectively.\n     \n      Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n     */\n    public List<Integer> even_odd_count(int num) {\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        // Handle negative numbers\n        num = Math.abs(num);\n        \n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num /= 10;\n        }\n        \n        return List.of(evenCount, oddCount);\n    }\n\n    @Test\n    public void testEvenOddCount() {\n        assertEquals(List.of(1, 1), even_odd_count(-12));\n        assertEquals(List.of(1, 2), even_odd_count(123));\n        assertEquals(List.of(0, 4), even_odd_count(2468));\n        assertEquals(List.of(4, 0), even_odd_count(13579));\n        assertEquals(List.of(2, 2), even_odd_count(1234));\n        assertEquals(List.of(1, 3), even_odd_count(-12345));\n    }\n}\n"}
{"task_id": "Java/156", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     Given a positive integer, obtain its roman numeral equivalent as a string,\n     and return it in lowercase.\n     Restrictions: 1 <= num <= 1000\n\n     Examples:\n     >>> int_to_mini_roman(19) == \"xix\"\n     >>> int_to_mini_roman(152) == \"clii\"\n     >>> int_to_mini_roman(426) == \"cdxxvi\"\n     */\n    public String int_to_mini_roman(int number) {\n        if (number < 1 || number > 1000) {\n            throw new IllegalArgumentException(\"Number must be between 1 and 1000\");\n        }\n\n        LinkedHashMap<Integer, String> romanNumerals = new LinkedHashMap<>();\n        romanNumerals.put(1000, \"m\");\n        romanNumerals.put(900, \"cm\");\n        romanNumerals.put(500, \"d\");\n        romanNumerals.put(400, \"cd\");\n        romanNumerals.put(100, \"c\");\n        romanNumerals.put(90, \"xc\");\n        romanNumerals.put(50, \"l\");\n        romanNumerals.put(40, \"xl\");\n        romanNumerals.put(10, \"x\");\n        romanNumerals.put(9, \"ix\");\n        romanNumerals.put(5, \"v\");\n        romanNumerals.put(4, \"iv\");\n        romanNumerals.put(1, \"i\");\n\n        StringBuilder result = new StringBuilder();\n        for (Map.Entry<Integer, String> entry : romanNumerals.entrySet()) {\n            while (number >= entry.getKey()) {\n                number -= entry.getKey();\n                result.append(entry.getValue());\n            }\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"19 -> \" + solution.int_to_mini_roman(19));  // Expected: xix\n        System.out.println(\"152 -> \" + solution.int_to_mini_roman(152)); // Expected: clii\n        System.out.println(\"426 -> \" + solution.int_to_mini_roman(426)); // Expected: cdxxvi\n        System.out.println(\"900 -> \" + solution.int_to_mini_roman(900)); // Expected: cm\n        System.out.println(\"1000 -> \" + solution.int_to_mini_roman(1000)); // Expected: m\n    }\n}\n"}
{"task_id": "Java/157", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given the lengths of the three sides of a triangle. Return true if the three\n     * sides form a right-angled triangle, false otherwise.\n     * A right-angled triangle is a triangle in which one angle is a right angle or 90 degrees.\n     *\n     * Example:\n     * right_angle_triangle(3, 4, 5) == true\n     * right_angle_triangle(1, 2, 3) == false\n     */\n    public boolean right_angle_triangle(int a, int b, int c) {\n        // Sort the sides to ensure the longest side is last\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        \n        // Check if the square of the longest side equals the sum of squares of other two sides\n        return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) == Math.pow(sides[2], 2);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.right_angle_triangle(3, 4, 5)); // true\n        System.out.println(solution.right_angle_triangle(1, 2, 3)); // false\n        System.out.println(solution.right_angle_triangle(6, 8, 10)); // true\n        System.out.println(solution.right_angle_triangle(5, 5, 5)); // false\n    }\n}\n"}
{"task_id": "Java/158", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Write a function that accepts a list of strings.\n     * The list contains different words. Return the word with maximum number\n     * of unique characters. If multiple strings have maximum number of unique\n     * characters, return the one which comes first in lexicographical order.\n     *\n     * find_max([\"name\", \"of\", \"string\"]) == \"string\"\n     * find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n     * find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\n     */\n    public String find_max(List<String> words) {\n        if (words == null || words.isEmpty()) {\n            return \"\";\n        }\n\n        String maxWord = \"\";\n        int maxUniqueChars = 0;\n\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            \n            if (uniqueChars.size() > maxUniqueChars || \n                (uniqueChars.size() == maxUniqueChars && word.compareTo(maxWord) < 0)) {\n                maxUniqueChars = uniqueChars.size();\n                maxWord = word;\n            }\n        }\n\n        return maxWord;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.find_max(Arrays.asList(\"name\", \"of\", \"string\"))); // Output: string\n        System.out.println(solution.find_max(Arrays.asList(\"name\", \"enam\", \"game\"))); // Output: enam\n        System.out.println(solution.find_max(Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\")));  // Output: aaaaaaa\n        System.out.println(solution.find_max(new ArrayList<>()));                     // Output: \n    }\n}\n"}
{"task_id": "Java/159", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You're a hungry rabbit, and you already have eaten a certain number of carrots,\n     * but now you need to eat more carrots to complete the day's meals.\n     * return an array of [ total number of eaten carrots after your meals,\n     *                     the number of carrots left after your meals ]\n     * if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n     * Example:\n     * eat(5, 6, 10) -> [11, 4]\n     * eat(4, 8, 9) -> [12, 1]\n     * eat(1, 10, 10) -> [11, 0]\n     * eat(2, 11, 5) -> [7, 0]\n\n     * Variables:\n     * @number : integer\n     *        the number of carrots that you have eaten.\n     * @need : integer\n     *        the number of carrots that you need to eat.\n     * @remaining : integer\n     *        the number of remaining carrots thet exist in stock\n\n     * Constrain:\n     * * 0 <= number <= 1000\n     * * 0 <= need <= 1000\n     * * 0 <= remaining <= 1000\n\n     * Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        int totalEaten = number + Math.min(need, remaining);\n        int carrotsLeft = Math.max(remaining - need, 0);\n        return Arrays.asList(totalEaten, carrotsLeft);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.eat(5, 6, 10)); // Expected: [11, 4]\n        System.out.println(solution.eat(4, 8, 9));  // Expected: [12, 1]\n        System.out.println(solution.eat(1, 10, 10));// Expected: [11, 0]\n        System.out.println(solution.eat(2, 11, 5) );// Expected: [7, 0]\n    }\n}\n"}
{"task_id": "Java/160", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     Given two lists operator, and operand. The first list has basic algebra operations, and\n     the second list is a list of integers. Use the two given lists to build the algebric\n     expression and return the evaluation of this expression.\n\n     The basic algebra operations:\n     Addition ( + )\n     Subtraction ( - )\n     Multiplication ( * )\n     Floor division ( / )\n     Exponentiation ( ** )\n\n     Example:\n     operator[\"+\", \"*\", \"-\"]\n     array = [2, 3, 4, 5]\n     result = 2 + 3 * 4 - 5\n     => result = 9\n\n     Note:\n         The length of operator list is equal to the length of operand list minus one.\n         Operand is a list of non-negative integers.\n         Operator list has at least one operator, and operand list has at least two operands.\n      */\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        if (operator.isEmpty() || operand.size() < 2) {\n            throw new IllegalArgumentException(\"Invalid input\");\n        }\n\n        int result = operand.get(0);\n        for (int i = 0; i < operator.size(); i++) {\n            switch (operator.get(i)) {\n                case \"+\":\n                    result += operand.get(i + 1);\n                    break;\n                case \"-\":\n                    result -= operand.get(i + 1);\n                    break;\n                case \"*\":\n                    result *= operand.get(i + 1);\n                    break;\n                case \"/\":\n                    if (operand.get(i + 1) == 0) {\n                        throw new ArithmeticException(\"Division by zero\");\n                    }\n                    result /= operand.get(i + 1);\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, operand.get(i + 1));\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Unsupported operator: \" + operator.get(i));\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<String> operators1 = Arrays.asList(\"+\", \"*\", \"-\");\n        List<Integer> operands1 = Arrays.asList(2, 3, 4, 5);\n        System.out.println(solution.do_algebra(operators1, operands1)); // Expected output: 9\n\n        List<String> operators2 = Arrays.asList(\"/\", \"+\", \"**\");\n        List<Integer> operands2 = Arrays.asList(8, 2, 3, 2);\n        System.out.println(solution.do_algebra(operators2, operands2)); // Expected output: 64\n    }\n}\n"}
{"task_id": "Java/161", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given a string s.\n     * if s[i] is a letter, reverse its case from lower to upper or vise versa,\n     * otherwise keep it as it is.\n     * If the string contains no letters, reverse the string.\n     * The function should return the resulted string.\n     * Examples\n     * solve(\"1234\") = \"4321\"\n     * solve(\"ab\") = \"AB\"\n     * solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        if (s.chars().allMatch(Character::isLetter)) {\n            return new StringBuilder(s).reverse().toString();\n        }\n        \n        char[] chars = s.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLetter(chars[i])) {\n                chars[i] = Character.isLowerCase(chars[i]) ? Character.toUpperCase(chars[i]) : Character.toLowerCase(chars[i]);\n            }\n        }\n        \n        return new String(chars);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.solve(\"1234\"));  // Expected output: \"4321\"\n        System.out.println(solution.solve(\"ab\"));    // Expected output: \"AB\"\n        System.out.println(solution.solve(\"#a@C\"));  // Expected output: \"#A@c\"\n        System.out.println(solution.solve(\"Hello World!\"));  // Expected output: \"hELLO wORLD!\"\n        System.out.println(solution.solve(\"1234567890\"));  // Expected output: \"0987654321\"\n    }\n}\n"}
{"task_id": "Java/162", "generation": "import java.math.BigInteger;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Optional;\n\nclass Solution {\n    /**\n     * Given a string \"text\", return its md5 hash equivalent string with length being 32.\n     * If \"text\" is an empty string, return Optional.empty().\n     *\n     * >>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] messageDigest = md.digest(text.getBytes());\n        BigInteger no = new BigInteger(1, messageDigest);\n        \n        // Convert message digest into hex value\n        String hashtext = no.toString(16);\n        while (hashtext.length() < 32) {\n            hashtext = \"0\" + hashtext;\n        }\n        \n        return Optional.of(hashtext);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(\"MD5 of 'Hello world': \" + solution.string_to_md5(\"Hello world\").orElse(\"None\"));\n        System.out.println(\"MD5 of '': \" + solution.string_to_md5(\"\").orElse(\"None\"));\n    }\n}\n"}
{"task_id": "Java/163", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given two positive integers a and b, return the even digits between a\n     * and b, in ascending order. Please note that the even digits refer to even numbers less than 10.\n     *\n     * For example:\n     * generate_integers(2, 8) => [2, 4, 6, 8]\n     * generate_integers(8, 2) => [2, 4, 6, 8]\n     * generate_integers(10, 14) => []\n     */\n    public List<Integer> generate_integers(int a, int b) {\n        // Ensure a is less than or equal to b\n        if (a > b) {\n            return generate_integers(b, a);\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = Math.max(a, 2); i <= Math.min(b, 8); i += 2) {\n            result.add(i);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.generate_integers(2, 8));   // [2, 4, 6, 8]\n        System.out.println(solution.generate_integers(8, 2));   // [2, 4, 6, 8]\n        System.out.println(solution.generate_integers(10, 14)); // []\n        System.out.println(solution.generate_integers(1, 9));   // [2, 4, 6, 8]\n        System.out.println(solution.generate_integers(3, 7));   // [4, 6]\n    }\n}\n"}
{"task_id": "Java/0", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n     >>> has_close_elements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n     false\n     >>> has_close_elements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n     true\n     */\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        if (numbers == null || numbers.size() < 2) {\n            return false;\n        }\n        \n        Collections.sort(numbers);\n        \n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = Math.abs(numbers.get(i + 1) - numbers.get(i));\n            if (diff < threshold) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.has_close_elements(Arrays.asList(1.0, 2.0, 3.0), 0.5)); // Expected: false\n        System.out.println(solution.has_close_elements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)); // Expected: true\n        System.out.println(solution.has_close_elements(Arrays.asList(-1.0, -2.0, -3.0), 1.5)); // Expected: false\n        System.out.println(solution.has_close_elements(Arrays.asList(1.0, 1.0, 1.0, 1.0), 0.1)); // Expected: true\n        System.out.println(solution.has_close_elements(Arrays.asList(), 0.3)); // Expected: false\n        System.out.println(solution.has_close_elements(Arrays.asList(5.0), 0.3)); // Expected: false\n    }\n}\n"}
{"task_id": "Java/1", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n     * separate those groups into separate strings and return the list of those.\n     * Separate groups are balanced (each open brace is properly closed) and not nested within each other\n     * Ignore any spaces in the input string.\n     *\n     * @param paren_string The input string containing multiple groups of nested parentheses.\n     * @return A List of separate strings, each representing a group of balanced parentheses.\n     */\n    public List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Integer> stack = new Stack<>();\n        \n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            \n            if (c == '(') {\n                stack.push(i);\n            } else if (c == ')') {\n                if (!stack.isEmpty()) {\n                    int start = stack.pop();\n                    // Ignore spaces\n                    while (start + 1 < i && Character.isWhitespace(paren_string.charAt(start + 1))) {\n                        start++;\n                    }\n                    result.add(paren_string.substring(start, i + 1));\n                }\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.separate_paren_groups(\"( ) (( )) (( )( ))\")); // [\"()\", \"(())\", \"(()())\"]\n        System.out.println(solution.separate_paren_groups(\"((())) (()) ()\")); // [\"((()))\", \"(())\", \"()\"]\n        System.out.println(solution.separate_paren_groups(\"() (()) (()())\")); // [\"()\", \"(())\", \"(()())\"]\n        System.out.println(solution.separate_paren_groups(\"((())) (( )) ( )\")); // [\"((()))\", \"(())\", \"()\"]\n    }\n}\n"}
{"task_id": "Java/2", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given a positive floating point number, it can be decomposed into\n     and integer part (largest integer smaller than given number) and decimals\n     (leftover part always smaller than 1).\n\n     Return the decimal part of the number.\n     >>> truncate_number(3.5)\n     0.5\n     */\n    public double truncate_number(double number) {\n        return number - Math.floor(number);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Truncate 3.5: \" + solution.truncate_number(3.5)); // Expected output: 0.5\n        System.out.println(\"Truncate 123.456: \" + solution.truncate_number(123.456)); // Expected output: 0.456\n        System.out.println(\"Truncate -78.9: \" + solution.truncate_number(-78.9)); // Expected output: -0.9 (Note: This will return the fractional part, not the negative of the integer part)\n        System.out.println(\"Truncate 10.0: \" + solution.truncate_number(10.0)); // Expected output: 0.0\n        System.out.println(\"Truncate 42.0: \" + solution.truncate_number(42.0)); // Expected output: 0.0\n    }\n}\n"}
{"task_id": "Java/3", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You're given a list of deposit and withdrawal operations on a bank account that starts with\n     * zero balance. Your task is to detect if at any point the balance of the account falls below zero,\n     * and in that case, return true. Otherwise, return false.\n     *\n     * @param operations List of integers representing deposits (positive) and withdrawals (negative).\n     * @return boolean indicating whether the balance goes below zero at any point.\n     */\n    public boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.below_zero(Arrays.asList(1, 2, 3))); // Expected: false\n        System.out.println(solution.below_zero(Arrays.asList(1, 2, -4, 5))); // Expected: true\n        System.out.println(solution.below_zero(Arrays.asList(-1, 2, 3))); // Expected: false\n        System.out.println(solution.below_zero(Arrays.asList(10, -15, 5, -6))); // Expected: true\n    }\n}\n"}
{"task_id": "Java/4", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * For a given list of input numbers, calculate Mean Absolute Deviation around the mean of this dataset.\n     * Mean Absolute Deviation is the average absolute difference between each element and a centerpoint (mean in this case):\n     * MAD = average | x - x_mean |\n     *\n     * @param numbers List of Double values\n     * @return The Mean Absolute Deviation as a double\n     */\n    public double mean_absolute_deviation(List<Double> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list cannot be null or empty\");\n        }\n\n        // Calculate the mean\n        double sum = 0.0;\n        for (Double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n\n        // Calculate the Mean Absolute Deviation\n        double mad = 0.0;\n        for (Double num : numbers) {\n            mad += Math.abs(num - mean);\n        }\n        return mad / numbers.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.mean_absolute_deviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))); // Expected: 1.0\n        System.out.println(solution.mean_absolute_deviation(Arrays.asList(-1.0, 0.0, 1.0, 2.0))); // Expected: 1.0\n        System.out.println(solution.mean_absolute_deviation(Arrays.asList(5.0, 7.0, 9.0, 11.0))); // Expected: 2.0\n        System.out.println(solution.mean_absolute_deviation(Arrays.asList())); // Should throw an exception\n    }\n}\n"}
{"task_id": "Java/5", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Insert a number 'delimiter' between every two consecutive elements of input list `numbers`\n     *\n     * @param numbers The input list of integers.\n     * @param delimiter The integer to be inserted as a delimiter.\n     * @return A new list with the delimiter inserted between each pair of consecutive elements.\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        if (numbers == null || numbers.size() <= 1) {\n            return numbers;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.intersperse(List.of(), 4)); // Expected: []\n        System.out.println(solution.intersperse(Arrays.asList(1, 2, 3), 4)); // Expected: [1, 4, 2, 4, 3]\n        System.out.println(solution.intersperse(Arrays.asList(5), 4)); // Expected: [5]\n        System.out.println(solution.intersperse(Arrays.asList(1, 2, 3, 4), 0)); // Expected: [1, 0, 2, 0, 3, 0, 4]\n    }\n}\n"}
{"task_id": "Java/6", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n     * For each of the group, output the deepest level of nesting of parentheses.\n     * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n     *\n     * @param paren_string The input string containing groups of nested parentheses\n     * @return A list of integers representing the deepest level of nesting for each group\n     */\n    public List<Integer> parse_nested_parens(String paren_string) {\n        String[] groups = paren_string.split(\" \");\n        List<Integer> result = new ArrayList<>();\n        \n        for (String group : groups) {\n            int maxDepth = 0;\n            int currentDepth = 0;\n            \n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentDepth++;\n                    maxDepth = Math.max(maxDepth, currentDepth);\n                } else if (c == ')') {\n                    currentDepth--;\n                }\n            }\n            \n            result.add(maxDepth);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        String test1 = \"(()()) ((())) () ((())()())\";\n        List<Integer> expected1 = Arrays.asList(2, 3, 1, 3);\n        System.out.println(\"Test Case 1: \" + solution.parse_nested_parens(test1).equals(expected1) ? \"Pass\" : \"Fail\");\n        \n        String test2 = \"(()) (()) ()\";\n        List<Integer> expected2 = Arrays.asList(2, 2, 1);\n        System.out.println(\"Test Case 2: \" + solution.parse_nested_parens(test2).equals(expected2) ? \"Pass\" : \"Fail\");\n        \n        String test3 = \"((())) (((()))) ()\";\n        List<Integer> expected3 = Arrays.asList(3, 4, 1);\n        System.out.println(\"Test Case 3: \" + solution.parse_nested_parens(test3).equals(expected3) ? \"Pass\" : \"Fail\");\n        \n        String test4 = \"\";\n        List<Integer> expected4 = new ArrayList<>();\n        System.out.println(\"Test Case 4: \" + solution.parse_nested_parens(test4).equals(expected4) ? \"Pass\" : \"Fail\");\n    }\n}\n"}
{"task_id": "Java/7", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Filter an input list of strings only for ones that contain given substring\n     *\n     * @param strings The input list of strings\n     * @param substring The substring to filter by\n     * @return A list of strings containing the specified substring\n     */\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> filteredStrings = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredStrings.add(str);\n            }\n        }\n        return filteredStrings;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<String> testList1 = new ArrayList<>(Arrays.asList());\n        String substring1 = \"a\";\n        System.out.println(\"Test Case 1: \" + solution.filter_by_substring(testList1, substring1)); // Expected output: []\n\n        // Test case 2\n        List<String> testList2 = new ArrayList<>(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"));\n        String substring2 = \"a\";\n        System.out.println(\"Test Case 2: \" + solution.filter_by_substring(testList2, substring2)); // Expected output: [abc, bacd, array]\n\n        // Test case 3\n        List<String> testList3 = new ArrayList<>(Arrays.asList(\"hello\", \"world\", \"java\", \"python\"));\n        String substring3 = \"o\";\n        System.out.println(\"Test Case 3: \" + solution.filter_by_substring(testList3, substring3)); // Expected output: [hello, world, python]\n\n        // Test case 4\n        List<String> testList4 = new ArrayList<>(Arrays.asList(\"apple\", \"banana\", \"cherry\", \"date\"));\n        String substring4 = \"z\";\n        System.out.println(\"Test Case 4: \" + solution.filter_by_substring(testList4, substring4)); // Expected output: []\n    }\n}\n"}
{"task_id": "Java/8", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n     * Empty sum should be equal to 0 and empty product should be equal to 1.\n     *\n     * @param numbers The input list of integers\n     * @return A List containing the sum and product of the integers\n     */\n    public List<Integer> sum_product(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n\n        return Arrays.asList(sum, product);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Test Case 1: Empty List\");\n        System.out.println(solution.sum_product(new ArrayList<>())); // Expected output: [0, 1]\n\n        System.out.println(\"\\nTest Case 2: Single Element List\");\n        System.out.println(solution.sum_product(Arrays.asList(5))); // Expected output: [5, 5]\n\n        System.out.println(\"\\nTest Case 3: Multiple Elements List\");\n        System.out.println(solution.sum_product(Arrays.asList(1, 2, 3, 4))); // Expected output: [10, 24]\n    }\n}\n"}
{"task_id": "Java/9", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence.\n     *\n     * @param numbers The input list of integers.\n     * @return A list containing the rolling maximum elements.\n     */\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        List<Integer> result = new ArrayList<>();\n        int maxSoFar = Integer.MIN_VALUE;\n\n        for (int num : numbers) {\n            if (num > maxSoFar) {\n                maxSoFar = num;\n            }\n            result.add(maxSoFar);\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(1, 2, 3, 2, 3, 4, 2);\n        System.out.println(solution.rolling_max(test1)); // Expected: [1, 2, 3, 3, 3, 4, 4]\n\n        List<Integer> test2 = Arrays.asList(5, 3, 8, 6, 7, 9, 4);\n        System.out.println(solution.rolling_max(test2)); // Expected: [5, 5, 8, 8, 8, 9, 9]\n\n        List<Integer> test3 = Arrays.asList(10, 9, 8, 7, 6, 5, 4);\n        System.out.println(solution.rolling_max(test3)); // Expected: [10, 10, 10, 10, 10, 10, 10]\n\n        List<Integer> test4 = Arrays.asList();\n        System.out.println(solution.rolling_max(test4)); // Expected: []\n\n        List<Integer> test5 = null;\n        System.out.println(solution.rolling_max(test5)); // Expected: []\n    }\n}\n"}
{"task_id": "Java/10", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Test if given string is a palindrome.\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    /**\n     * Find the shortest palindrome that begins with a supplied string.\n     * Algorithm idea is simple:\n     * - Find the longest postfix of supplied string that is a palindrome.\n     * - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n     */\n    public String make_palindrome(String string) {\n        if (string.isEmpty()) return \"\";\n\n        int n = string.length();\n        for (int i = n; i > 0; i--) {\n            if (isPalindrome(string.substring(n - i))) {\n                // Found the longest palindromic suffix\n                String prefix = string.substring(0, n - i);\n                StringBuilder reversedPrefix = new StringBuilder(prefix).reverse();\n                return string + reversedPrefix.toString();\n            }\n        }\n\n        // Fallback case: If no palindromic suffix is found (should not happen for valid input)\n        return string;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.isPalindrome(\"\")); // true\n        System.out.println(solution.isPalindrome(\"racecar\")); // true\n        System.out.println(solution.isPalindrome(\"hello\")); // false\n\n        System.out.println(solution.make_palindrome(\"\")); // \"\"\n        System.out.println(solution.make_palindrome(\"cat\")); // \"catac\"\n        System.out.println(solution.make_palindrome(\"cata\")); // \"catac\"\n        System.out.println(solution.make_palindrome(\"abcde\")); // \"abcdecba\"\n        System.out.println(solution.make_palindrome(\"madam\")); // \"madam\"\n    }\n}\n"}
{"task_id": "Java/11", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Input are two strings a and b consisting only of 1s and 0s.\n     * Perform binary XOR on these inputs and return result also as a string.\n     *\n     * @param a the first binary string\n     * @param b the second binary string\n     * @return the result of binary XOR operation as a string\n     */\n    public String string_xor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        \n        // Ensure both strings are of equal length by padding with leading zeros if necessary\n        int maxLength = Math.max(a.length(), b.length());\n        a = String.format(\"%\" + maxLength + \"s\", a).replace(' ', '0');\n        b = String.format(\"%\" + maxLength + \"s\", b).replace(' ', '0');\n\n        // Perform XOR operation character by character\n        for (int i = 0; i < maxLength; i++) {\n            char bitA = a.charAt(i);\n            char bitB = b.charAt(i);\n\n            if (bitA == bitB) {\n                result.append('0');\n            } else {\n                result.append('1');\n            }\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.string_xor(\"010\", \"110\")); // Expected output: \"100\"\n        System.out.println(solution.string_xor(\"101010\", \"110011\")); // Expected output: \"011001\"\n        System.out.println(solution.string_xor(\"1111\", \"0000\")); // Expected output: \"1111\"\n        System.out.println(solution.string_xor(\"0000\", \"0000\")); // Expected output: \"0000\"\n        System.out.println(solution.string_xor(\"11111111\", \"00000000\")); // Expected output: \"11111111\"\n    }\n}\n"}
{"task_id": "Java/12", "generation": "import java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass Solution {\n\n    /**\n     * Out of list of strings, return the longest one. Return the first one in case of multiple\n     * strings of the same length. Return Optional.empty() in case the input list is empty.\n     *\n     * @param strings List of strings to be processed.\n     * @return Optional containing the longest string or Optional.empty() if the list is empty.\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longest = strings.get(0);\n        for (String str : strings) {\n            if (str.length() > longest.length()) {\n                longest = str;\n            }\n        }\n        return Optional.of(longest);\n    }\n\n    // Test methods\n    @Test\n    public void testLongestEmptyList() {\n        assertEquals(Optional.empty(), longest(new ArrayList<>()));\n    }\n\n    @Test\n    public void testLongestSingleElement() {\n        assertEquals(Optional.of(\"a\"), longest(Arrays.asList(\"a\")));\n    }\n\n    @Test\n    public void testLongestMultipleElements() {\n        assertEquals(Optional.of(\"ccc\"), longest(Arrays.asList(\"a\", \"bb\", \"ccc\")));\n    }\n\n    @Test\n    public void testLongestEqualLengthStrings() {\n        assertEquals(Optional.of(\"b\"), longest(Arrays.asList(\"a\", \"b\", \"c\"))); // \"b\" is the first one in case of equal length\n    }\n}\n"}
{"task_id": "Java/13", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return a greatest common divisor of two integers a and b\n     *\n     * @param a first integer\n     * @param b second integer\n     * @return the greatest common divisor of a and b\n     */\n    public int greatest_common_divisor(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n\n    // Test cases to verify the correctness of the method\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1: GCD of 3 and 5 is 1\n        System.out.println(\"GCD of 3 and 5: \" + solution.greatest_common_divisor(3, 5)); // Expected output: 1\n        \n        // Test case 2: GCD of 25 and 15 is 5\n        System.out.println(\"GCD of 25 and 15: \" + solution.greatest_common_divisor(25, 15)); // Expected output: 5\n        \n        // Test case 3: GCD of 100 and 80 is 20\n        System.out.println(\"GCD of 100 and 80: \" + solution.greatest_common_divisor(100, 80)); // Expected output: 20\n        \n        // Test case 4: GCD of 7 and 13 (both prime) is 1\n        System.out.println(\"GCD of 7 and 13: \" + solution.greatest_common_divisor(7, 13)); // Expected output: 1\n        \n        // Test case 5: GCD of 48 and 60 is 12\n        System.out.println(\"GCD of 48 and 60: \" + solution.greatest_common_divisor(48, 60)); // Expected output: 12\n    }\n}\n"}
{"task_id": "Java/14", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Return list of all prefixes from shortest to longest of the input string\n     *\n     * @param string The input string\n     * @return A List containing all prefixes of the input string, ordered from shortest to longest\n     */\n    public List<String> all_prefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Testing all_prefixes with input 'abc':\");\n        List<String> result1 = solution.all_prefixes(\"abc\");\n        System.out.println(result1);  // Expected: [a, ab, abc]\n\n        System.out.println(\"\\nTesting all_prefixes with input 'hello':\");\n        List<String> result2 = solution.all_prefixes(\"hello\");\n        System.out.println(result2);  // Expected: [h, he, hel, hell, hello]\n\n        System.out.println(\"\\nTesting all_prefixes with input '':\");\n        List<String> result3 = solution.all_prefixes(\"\");\n        System.out.println(result3);  // Expected: []\n\n        System.out.println(\"\\nTesting all_prefixes with input 'a':\");\n        List<String> result4 = solution.all_prefixes(\"a\");\n        System.out.println(result4);  // Expected: [a]\n    }\n}\n"}
{"task_id": "Java/15", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n     *\n     * @param n The upper limit of the sequence (inclusive).\n     * @return A string with space-separated numbers from 0 to n.\n     */\n    public String string_sequence(int n) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            if (i > 0) {\n                result.append(\" \");\n            }\n            result.append(i);\n        }\n        return result.toString();\n    }\n\n    // Test cases to verify the correctness of the string_sequence method\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.string_sequence(0).equals(\"0\") ? \"Test 1 Passed\" : \"Test 1 Failed\");\n        System.out.println(solution.string_sequence(5).equals(\"0 1 2 3 4 5\") ? \"Test 2 Passed\" : \"Test 2 Failed\");\n        System.out.println(solution.string_sequence(10).equals(\"0 1 2 3 4 5 6 7 8 9 10\") ? \"Test 3 Passed\" : \"Test 3 Failed\");\n    }\n}\n"}
{"task_id": "Java/16", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a string, find out how many distinct characters (regardless of case) does it consist of.\n     *\n     * @param string The input string to analyze.\n     * @return The number of distinct characters in the string, ignoring case.\n     */\n    public int count_distinct_characters(String string) {\n        // Convert the string to lowercase to ignore case\n        String lowerCaseString = string.toLowerCase();\n        \n        // Use a HashSet to store unique characters\n        Set<Character> uniqueChars = new HashSet<>();\n        for (char c : lowerCaseString.toCharArray()) {\n            uniqueChars.add(c);\n        }\n        \n        return uniqueChars.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.count_distinct_characters(\"xyzXYZ\")); // Expected output: 3\n        System.out.println(solution.count_distinct_characters(\"Jerry\"));   // Expected output: 4\n        System.out.println(solution.count_distinct_characters(\"Mississippi\")); // Expected output: 4\n        System.out.println(solution.count_distinct_characters(\"\"));         // Expected output: 0\n        System.out.println(solution.count_distinct_characters(\"AaAaAa\"));   // Expected output: 1\n    }\n}\n"}
{"task_id": "Java/17", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Input to this function is a string representing musical notes in a special ASCII format.\n     * Your task is to parse this string and return list of integers corresponding to how many beats does each note last.\n     *\n     * Here is a legend:\n     * \"o\" - whole note, lasts four beats\n     * \"o|\" - half note, lasts two beats\n     * \".|\" - quater note, lasts one beat\n     */\n    public List<Integer> parse_music(String string) {\n        List<Integer> result = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        \n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    result.add(4);\n                    break;\n                case \"o|\":\n                    result.add(2);\n                    break;\n                case \".|\":\n                    result.add(1);\n                    break;\n                default:\n                    // Ignore unrecognized notes\n                    break;\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.parse_music(\"o o| .| o| o| .| .| .| .| o o\")); // Expected: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n        System.out.println(solution.parse_music(\"o| .| o .|\")); // Expected: [2, 1, 4, 1]\n        System.out.println(solution.parse_music(\".| o| o .| o| o|\")); // Expected: [1, 2, 4, 1, 2, 2]\n        System.out.println(solution.parse_music(\"o o o o\")); // Expected: [4, 4, 4, 4]\n    }\n}\n"}
{"task_id": "Java/18", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Find how many times a given substring can be found in the original string. Count overlapping cases.\n     *\n     * @param string The original string.\n     * @param substring The substring to find.\n     * @return The number of times the substring appears in the original string, including overlaps.\n     */\n    public int how_many_times(String string, String substring) {\n        if (substring.isEmpty()) return 0;\n        \n        int count = 0;\n        int index = 0;\n        \n        while ((index = string.indexOf(substring, index)) != -1) {\n            count++;\n            index++; // Move to the next character after the found substring\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.how_many_times(\"\", \"a\")); // Expected output: 0\n        System.out.println(solution.how_many_times(\"aaa\", \"a\")); // Expected output: 3\n        System.out.println(solution.how_many_times(\"aaaa\", \"aa\")); // Expected output: 3\n        System.out.println(solution.how_many_times(\"abababa\", \"aba\")); // Expected output: 3\n        System.out.println(solution.how_many_times(\"testtest\", \"test\")); // Expected output: 2\n        System.out.println(solution.how_many_times(\"hello\", \"\")); // Expected output: 0\n    }\n}\n"}
{"task_id": "Java/19", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Input is a space-delimited string of numberals from 'zero' to 'nine'.\n     * Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n     * Return the string with numbers sorted from smallest to largest\n     *\n     * @param numbers a space-delimited string of numberals\n     * @return the sorted string\n     */\n    public String sort_numbers(String numbers) {\n        Map<String, Integer> numeralMap = new HashMap<>();\n        numeralMap.put(\"zero\", 0);\n        numeralMap.put(\"one\", 1);\n        numeralMap.put(\"two\", 2);\n        numeralMap.put(\"three\", 3);\n        numeralMap.put(\"four\", 4);\n        numeralMap.put(\"five\", 5);\n        numeralMap.put(\"six\", 6);\n        numeralMap.put(\"seven\", 7);\n        numeralMap.put(\"eight\", 8);\n        numeralMap.put(\"nine\", 9);\n\n        String[] words = numbers.split(\"\\\\s+\");\n        List<Integer> sortedNumbers = new ArrayList<>();\n        \n        for (String word : words) {\n            if (numeralMap.containsKey(word)) {\n                sortedNumbers.add(numeralMap.get(word));\n            }\n        }\n\n        Collections.sort(sortedNumbers);\n        \n        StringBuilder result = new StringBuilder();\n        for (int num : sortedNumbers) {\n            result.append(numeralMap.inverse().get(num)).append(\" \");\n        }\n        \n        return result.toString().trim();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sort_numbers(\"three one five\")); // Expected: \"one three five\"\n        System.out.println(solution.sort_numbers(\"nine eight seven\")); // Expected: \"seven eight nine\"\n        System.out.println(solution.sort_numbers(\"four six two\")); // Expected: \"two four six\"\n        System.out.println(solution.sort_numbers(\"zero zero\")); // Expected: \"zero zero\"\n        System.out.println(solution.sort_numbers(\"five three one\")); // Expected: \"one three five\"\n    }\n}\n"}
{"task_id": "Java/20", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n     *\n     * @param numbers The input list of Double values.\n     * @return A List containing the two closest elements in ascending order.\n     */\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"Input list must contain at least two elements.\");\n        }\n\n        double minDiff = Double.MAX_VALUE;\n        List<Double> closestElements = new ArrayList<>();\n\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (diff < minDiff) {\n                    minDiff = diff;\n                    closestElements.clear();\n                    closestElements.add(Math.min(numbers.get(i), numbers.get(j)));\n                    closestElements.add(Math.max(numbers.get(i), numbers.get(j)));\n                }\n            }\n        }\n\n        return closestElements;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))); // [2.0, 2.2]\n        System.out.println(solution.find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))); // [2.0, 2.0]\n        System.out.println(solution.find_closest_elements(Arrays.asList(1.5, 3.1, 2.8, 4.6))); // [2.8, 3.1]\n        System.out.println(solution.find_closest_elements(Arrays.asList(-1.0, -2.0, -3.0, -4.0, -5.0, -2.9))); // [-3.0, -2.9]\n    }\n}\n"}
{"task_id": "Java/21", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given list of numbers (of at least two elements), apply a linear transform to that list,\n     * such that the smallest number will become 0 and the largest will become 1.\n     *\n     * @param numbers List of Double values\n     * @return A new list where each element is rescaled to the range [0, 1]\n     */\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements\");\n        }\n\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n\n        List<Double> scaledNumbers = new ArrayList<>();\n        for (Double num : numbers) {\n            double scaledValue = (num - min) / (max - min);\n            scaledNumbers.add(scaledValue);\n        }\n        return scaledNumbers;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Double> test1 = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        System.out.println(\"Test Case 1: \" + solution.rescale_to_unit(test1)); // Expected: [0.0, 0.25, 0.5, 0.75, 1.0]\n\n        List<Double> test2 = Arrays.asList(10.0, 20.0, 30.0);\n        System.out.println(\"Test Case 2: \" + solution.rescale_to_unit(test2)); // Expected: [0.0, 0.5, 1.0]\n\n        List<Double> test3 = Arrays.asList(-5.0, -10.0, -15.0);\n        System.out.println(\"Test Case 3: \" + solution.rescale_to_unit(test3)); // Expected: [1.0, 0.5, 0.0]\n    }\n}\n"}
{"task_id": "Java/22", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Filter given list of any values only for integers\n     *\n     * @param values List of objects to be filtered.\n     * @return A list containing only the integer values from the input list.\n     */\n    public List<Integer> filter_integers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Object> list1 = Arrays.asList('a', 3.14, 5);\n        System.out.println(\"Test Case 1: \" + solution.filter_integers(list1)); // Expected output: [5]\n\n        // Test case 2\n        List<Object> list2 = Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of());\n        System.out.println(\"Test Case 2: \" + solution.filter_integers(list2)); // Expected output: [1, 2, 3]\n\n        // Test case 3\n        List<Object> list3 = Arrays.asList(4.5, 'b', 7, true);\n        System.out.println(\"Test Case 3: \" + solution.filter_integers(list3)); // Expected output: [7]\n    }\n}\n"}
{"task_id": "Java/23", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return length of given string\n     *\n     * >>> strlen(\"\")\n     * 0\n     * >>> strlen(\"abc\")\n     * 3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"strlen(\"\") should be 0: \" + (solution.strlen(\"\") == 0));\n        System.out.println(\"strlen(\\\"abc\\\") should be 3: \" + (solution.strlen(\"abc\") == 3));\n        System.out.println(\"strlen(\\\"hello world\\\") should be 11: \" + (solution.strlen(\"hello world\") == 11));\n        System.out.println(\"strlen(\\\"Java\\\") should be 4: \" + (solution.strlen(\"Java\") == 4));\n        System.out.println(\"strlen(\\\"1234567890\\\") should be 10: \" + (solution.strlen(\"1234567890\") == 10));\n    }\n}\n"}
{"task_id": "Java/24", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * For a given number n, find the largest number that divides n evenly, smaller than n.\n     *\n     * @param n the input number\n     * @return the largest divisor of n, smaller than n\n     */\n    public int largest_divisor(int n) {\n        for (int i = n / 2; i >= 1; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        // If no divisor is found, which should not happen for positive integers,\n        // we can throw an exception or return a default value.\n        throw new IllegalArgumentException(\"No valid divisor found for \" + n);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.largest_divisor(15));  // Expected output: 5\n        System.out.println(solution.largest_divisor(28));  // Expected output: 14\n        System.out.println(solution.largest_divisor(37));  // Expected output: 1 (since 37 is a prime number)\n        System.out.println(solution.largest_divisor(100)); // Expected output: 50\n\n        // Additional test cases to ensure robustness\n        try {\n            System.out.println(solution.largest_divisor(-10)); // Should throw an exception\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n\n        try {\n            System.out.println(solution.largest_divisor(0));  // Should throw an exception\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n"}
{"task_id": "Java/25", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Return list of prime factors of given integer in the order from smallest to largest.\n     * Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n     * Input number should be equal to the product of all factors\n     *\n     * @param n The integer to factorize\n     * @return A list containing the prime factors of `n`\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        // Divide by 2 until it's not divisible anymore\n        while (n % 2 == 0) {\n            factors.add(2);\n            n /= 2;\n        }\n        \n        // Check for odd factors from 3 onwards\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        \n        // If n is a prime number greater than 2\n        if (n > 2) {\n            factors.add(n);\n        }\n        \n        return factors;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.factorize(8));   // [2, 2, 2]\n        System.out.println(solution.factorize(25));  // [5, 5]\n        System.out.println(solution.factorize(70));  // [2, 5, 7]\n        System.out.println(solution.factorize(49));  // [7, 7]\n        System.out.println(solution.factorize(100)); // [2, 2, 5, 5]\n    }\n}\n"}
{"task_id": "Java/26", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * From a list of integers, remove all elements that occur more than once.\n     * Keep order of elements left the same as in the input.\n     *\n     * @param numbers The input list of integers.\n     * @return A new list with duplicates removed while maintaining original order.\n     */\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        // Use a stream to filter out elements that appear more than once\n        return numbers.stream()\n                      .distinct()\n                      .collect(Collectors.toList());\n    }\n\n    /**\n     * Main method for testing the remove_duplicates function.\n     */\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1\n        List<Integer> testList1 = Arrays.asList(1, 2, 3, 2, 4);\n        System.out.println(\"Original list: \" + testList1);\n        System.out.println(\"After removing duplicates: \" + solution.remove_duplicates(testList1));\n        \n        // Test case 2\n        List<Integer> testList2 = Arrays.asList(5, 6, 7, 8, 9, 5, 6, 10);\n        System.out.println(\"Original list: \" + testList2);\n        System.out.println(\"After removing duplicates: \" + solution.remove_duplicates(testList2));\n        \n        // Test case 3\n        List<Integer> testList3 = Arrays.asList(11, 12, 13, 14, 15);\n        System.out.println(\"Original list: \" + testList3);\n        System.out.println(\"After removing duplicates: \" + solution.remove_duplicates(testList3));\n        \n        // Test case 4\n        List<Integer> testList4 = Arrays.asList();\n        System.out.println(\"Original list: \" + testList4);\n        System.out.println(\"After removing duplicates: \" + solution.remove_duplicates(testList4));\n    }\n}\n"}
{"task_id": "Java/27", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n     *\n     * @param string The input string to be flipped.\n     * @return A new string with the case of each character flipped.\n     */\n    public String flip_case(String string) {\n        StringBuilder result = new StringBuilder();\n        \n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                result.append(Character.toLowerCase(c));\n            } else if (Character.isLowerCase(c)) {\n                result.append(Character.toUpperCase(c));\n            } else {\n                result.append(c);\n            }\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.flip_case(\"Hello\"));  // Output: \"hELLO\"\n        System.out.println(solution.flip_case(\"WORLD\"));  // Output: \"world\"\n        System.out.println(solution.flip_case(\"Java123!\"));  // Output: \"jAVA123!\"\n        System.out.println(solution.flip_case(\"12345\"));  // Output: \"12345\"\n        System.out.println(solution.flip_case(\"aBcDeFgHiJkLmNoPqRsTuVwXyZ\"));  // Output: \"AbCdEfGhIjKlMnOpQrStUvWxYz\"\n    }\n}\n"}
{"task_id": "Java/28", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Concatenate list of strings into a single string\n     *\n     * @param strings List of strings to concatenate\n     * @return A single concatenated string\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder result = new StringBuilder();\n        for (String str : strings) {\n            result.append(str);\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.concatenate(new ArrayList<>())); // Expected output: \"\"\n        System.out.println(solution.concatenate(Arrays.asList(\"a\", \"b\", \"c\"))); // Expected output: \"abc\"\n        System.out.println(solution.concatenate(Arrays.asList(\"hello\", \" \", \"world\"))); // Expected output: \"hello world\"\n        System.out.println(solution.concatenate(Arrays.asList(\"Java\", \"\", \"Programming\"))); // Expected output: \"JavaProgramming\"\n    }\n}\n"}
{"task_id": "Java/29", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Filter an input list of strings only for ones that start with a given prefix.\n     *\n     * @param strings The input list of strings.\n     * @param prefix  The prefix to filter the strings by.\n     * @return A list of strings that start with the given prefix.\n     */\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.filter_by_prefix(new ArrayList<>(), \"a\"));  // []\n        System.out.println(solution.filter_by_prefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\"));  // [abc, array]\n        System.out.println(solution.filter_by_prefix(Arrays.asList(\"apple\", \"banana\", \"apricot\", \"cherry\"), \"a\"));  // [apple, apricot]\n    }\n}\n"}
{"task_id": "Java/30", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return only positive numbers in the list.\n     *\n     * @param l The input list of integers.\n     * @return A list containing only the positive integers from the input list.\n     */\n    public List<Integer> get_positive(List<Integer> l) {\n        return l.stream()\n                .filter(n -> n > 0)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> list1 = Arrays.asList(-1, 2, -4, 5, 6);\n        System.out.println(\"Test Case 1: \" + solution.get_positive(list1)); // Expected output: [2, 5, 6]\n\n        // Test case 2\n        List<Integer> list2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n        System.out.println(\"Test Case 2: \" + solution.get_positive(list2)); // Expected output: [5, 3, 2, 3, 9, 123, 1]\n    }\n}\n"}
{"task_id": "Java/31", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Return true if a given number is prime, and false otherwise.\n     */\n    public boolean is_prime(int n) {\n        // Handle edge cases\n        if (n <= 1) return false;\n        if (n == 2 || n == 3) return true;\n        if (n % 2 == 0 || n % 3 == 0) return false;\n\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.is_prime(6));   // false\n        System.out.println(solution.is_prime(101)); // true\n        System.out.println(solution.is_prime(11));  // true\n        System.out.println(solution.is_prime(13441));// true\n        System.out.println(solution.is_prime(61));  // true\n        System.out.println(solution.is_prime(4));   // false\n        System.out.println(solution.is_prime(1));   // false\n\n        // Additional test cases\n        System.out.println(solution.is_prime(2));   // true\n        System.out.println(solution.is_prime(3));   // true\n        System.out.println(solution.is_prime(5));   // true\n        System.out.println(solution.is_prime(7));   // true\n        System.out.println(solution.is_prime(9));   // false\n        System.out.println(solution.is_prime(17));  // true\n    }\n}\n"}
{"task_id": "Java/32", "generation": "import java.util.Arrays;\nimport java.util.List;\n\nclass Solution {\n    /**\n     Evaluates polynomial with coefficients xs at point x.\n     return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n      */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n\n    /**\n     xs are coefficients of a polynomial.\n     find_zero finds x such that poly(x) = 0.\n     find_zero returns only one zero point, even if there are many.\n     Moreover, find_zero only takes list xs having an even number of coefficients\n     and the largest non-zero coefficient as it guarantees\n     a solution.\n     >>> find_zero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n     -0.5\n     >>> find_zero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n     1.0\n      */\n    public double find_zero(List<Double> xs) {\n        if (xs.isEmpty() || xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"List must have an even number of coefficients.\");\n        }\n\n        // Implementing a simple bisection method to find the root.\n        double lowerBound = -100;\n        double upperBound = 100;\n        double epsilon = 1e-6;\n\n        while (upperBound - lowerBound > epsilon) {\n            double midPoint = (lowerBound + upperBound) / 2.0;\n            if (poly(xs, midPoint) == 0) {\n                return midPoint; // Exact root found\n            } else if (poly(xs, lowerBound) * poly(xs, midPoint) < 0) {\n                upperBound = midPoint;\n            } else {\n                lowerBound = midPoint;\n            }\n        }\n\n        return (lowerBound + upperBound) / 2.0; // Approximate root\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Double> coefficients1 = Arrays.asList(1.0, 2.0);\n        System.out.println(\"Root of f(x) = 1 + 2x: \" + solution.find_zero(coefficients1)); // Should be around -0.5\n\n        List<Double> coefficients2 = Arrays.asList(-6.0, 11.0, -6.0, 1.0);\n        System.out.println(\"Root of f(x) = x^3 - 6x^2 + 11x - 6: \" + solution.find_zero(coefficients2)); // Should be around 1.0\n\n        List<Double> coefficients3 = Arrays.asList(1.0, -5.0, 6.0);\n        System.out.println(\"Root of f(x) = x^2 - 5x + 6: \" + solution.find_zero(coefficients3)); // Should be around 2.0 or 3.0\n\n        List<Double> coefficients4 = Arrays.asList(1.0, -3.0, 3.0, -1.0);\n        System.out.println(\"Root of f(x) = x^3 - 3x^2 + 3x - 1: \" + solution.find_zero(coefficients4)); // Should be around 1.0\n    }\n}\n"}
{"task_id": "Java/33", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     This function takes a list l and returns a list l' such that\n     l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n     to the values of the corresponding indicies of l, but sorted in ascending order.\n     >>> sort_third(Arrays.asList(1, 2, 3))\n     [1, 2, 3]\n     >>> sort_third(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n     [2, 6, 3, 4, 8, 9, 5]\n      */\n    public List<Integer> sort_third(List<Integer> l) {\n        if (l == null || l.size() < 3) {\n            return new ArrayList<>(l);\n        }\n\n        // Extract elements at indices divisible by three\n        List<Integer> thirdIndices = new ArrayList<>();\n        for (int i = 2; i < l.size(); i += 3) {\n            thirdIndices.add(l.get(i));\n        }\n\n        // Sort the extracted elements\n        Collections.sort(thirdIndices);\n\n        // Replace the original elements at indices divisible by three with sorted ones\n        List<Integer> result = new ArrayList<>(l);\n        for (int i = 0, j = 0; i < l.size(); i += 3) {\n            if (j < thirdIndices.size()) {\n                result.set(i + 2, thirdIndices.get(j++));\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sort_third(Arrays.asList(1, 2, 3))); // [1, 2, 3]\n        System.out.println(solution.sort_third(Arrays.asList(5, 6, 3, 4, 8, 9, 2))); // [2, 6, 3, 4, 8, 9, 5]\n        System.out.println(solution.sort_third(Arrays.asList(10, 11, 12, 13, 14, 15, 16, 17, 18))); // [10, 11, 12, 13, 14, 15, 16, 17, 18]\n        System.out.println(solution.sort_third(Arrays.asList(9, 8, 7, 6, 5, 4, 3, 2, 1))); // [9, 8, 7, 6, 5, 4, 3, 2, 1]\n    }\n}\n"}
{"task_id": "Java/34", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return sorted unique elements in a list\n     *\n     * @param l The input list of integers\n     * @return A sorted list containing only unique elements from the input list\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> set = new LinkedHashSet<>(l);\n        return new ArrayList<>(set);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> inputList1 = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        System.out.println(\"Input: \" + inputList1);\n        System.out.println(\"Output: \" + solution.unique(inputList1));\n\n        // Test case 2\n        List<Integer> inputList2 = Arrays.asList(1, 2, 3, 4, 5);\n        System.out.println(\"Input: \" + inputList2);\n        System.out.println(\"Output: \" + solution.unique(inputList2));\n\n        // Test case 3\n        List<Integer> inputList3 = new ArrayList<>();\n        System.out.println(\"Input: \" + inputList3);\n        System.out.println(\"Output: \" + solution.unique(inputList3));\n    }\n}\n"}
{"task_id": "Java/35", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n\n    /**\n     * Return maximum element in the list.\n     */\n    public int max_element(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be null or empty\");\n        }\n        \n        return Collections.max(l);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(1, 2, 3);\n        System.out.println(\"Max element in [1, 2, 3]: \" + solution.max_element(test1)); // Expected: 3\n\n        List<Integer> test2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n        System.out.println(\"Max element in [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]: \" + solution.max_element(test2)); // Expected: 123\n\n        List<Integer> test3 = Arrays.asList();\n        try {\n            System.out.println(\"Max element in []: \" + solution.max_element(test3));\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage()); // Expected: List cannot be null or empty\n        }\n\n        List<Integer> test4 = null;\n        try {\n            System.out.println(\"Max element in null: \" + solution.max_element(test4));\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage()); // Expected: List cannot be null or empty\n        }\n    }\n}\n"}
{"task_id": "Java/36", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n     */\n    public int fizz_buzz(int n) {\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String numStr = Integer.toString(i);\n                for (char c : numStr.toCharArray()) {\n                    if (c == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(\"fizz_buzz(50): \" + solution.fizz_buzz(50)); // Expected: 0\n        System.out.println(\"fizz_buzz(78): \" + solution.fizz_buzz(78)); // Expected: 2\n        System.out.println(\"fizz_buzz(79): \" + solution.fizz_buzz(79)); // Expected: 3\n        System.out.println(\"fizz_buzz(100): \" + solution.fizz_buzz(100)); // Additional test case, expected: 4 (77 is divisible by 11 and contains '7')\n    }\n}\n"}
{"task_id": "Java/37", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * This function takes a list l and returns a list l' such that\n     * l' is identical to l in the odd indicies, while its values at the even indicies are equal\n     * to the values of the even indicies of l, but sorted.\n     *\n     * @param l The input list of integers.\n     * @return A new list where elements at even indices are sorted and elements at odd indices remain unchanged.\n     */\n    public List<Integer> sort_even(List<Integer> l) {\n        if (l == null || l.isEmpty()) return l;\n\n        // Extract the elements at even indices\n        List<Integer> evenIndices = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 2) {\n            evenIndices.add(l.get(i));\n        }\n\n        // Sort the extracted elements\n        Collections.sort(evenIndices);\n\n        // Create a new list to store the result\n        List<Integer> result = new ArrayList<>(l);\n        \n        // Place sorted elements back into their original positions\n        for (int i = 0, j = 0; i < l.size(); i += 2, j++) {\n            result.set(i, evenIndices.get(j));\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sort_even(Arrays.asList(1, 2, 3))); // [1, 2, 3]\n        System.out.println(solution.sort_even(Arrays.asList(5, 6, 3, 4))); // [3, 6, 5, 4]\n        System.out.println(solution.sort_even(Arrays.asList())); // []\n        System.out.println(solution.sort_even(Arrays.asList(7))); // [7]\n        System.out.println(solution.sort_even(Arrays.asList(10, 20, 30, 40, 50))); // [10, 20, 30, 40, 50]\n    }\n}\n"}
{"task_id": "Java/38", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n     * takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decode_cyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse the cycling in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, \"\" + groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(\"Original: \" + \"HelloWorld\");\n        System.out.println(\"Encoded: \" + solution.encodeCyclic(\"HelloWorld\"));\n        System.out.println(\"Decoded: \" + solution.decode_cyclic(solution.encodeCyclic(\"HelloWorld\")));\n    }\n}\n"}
{"task_id": "Java/39", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n     */\n    public int prime_fib(int n) {\n        List<Integer> primes = new ArrayList<>();\n        \n        // Generate Fibonacci numbers until we find the nth prime one\n        for (int fib = 0; primes.size() < n;) {\n            if (isPrime(fib)) {\n                primes.add(fib);\n            }\n            fib = nextFibonacciNumber(fib);\n        }\n        \n        return primes.get(n - 1);\n    }\n\n    // Helper method to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    // Helper method to generate the next Fibonacci number\n    private int nextFibonacciNumber(int currentFib) {\n        if (currentFib == 0) return 1;\n        int prev = 0, curr = 1;\n        while (true) {\n            int next = prev + curr;\n            if (next > currentFib) return next;\n            prev = curr;\n            curr = next;\n        }\n    }\n\n    // Test cases\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.prime_fib(1));  // Expected: 2\n        System.out.println(solution.prime_fib(2));  // Expected: 3\n        System.out.println(solution.prime_fib(3));  // Expected: 5\n        System.out.println(solution.prime_fib(4));  // Expected: 13\n        System.out.println(solution.prime_fib(5));  // Expected: 89\n    }\n}\n"}
{"task_id": "Java/40", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * triples_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are three distinct elements in the list that\n     * sum to zero, and False otherwise.\n     */\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        // Sort the list to make it easier to find triplets that sum to zero\n        Collections.sort(l);\n        \n        for (int i = 0; i < l.size() - 2; i++) {\n            int left = i + 1;\n            int right = l.size() - 1;\n            \n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                \n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1, 3, -2, 1))); // true\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(2, 4, -5, 3, 9, 7))); // true\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1))); // false\n    }\n}\n"}
{"task_id": "Java/41", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Imagine a road that's a perfectly straight infinitely long line.\n     * n cars are driving left to right; simultaneously, a different set of n cars\n     * are driving right to left. The two sets of cars start out being very far from\n     * each other. All cars move in the same speed. Two cars are said to collide\n     * when a car that's moving left to right hits a car that's moving right to left.\n     * However, the cars are infinitely sturdy and strong; as a result, they continue moving\n     * in their trajectory as if they did not collide.\n     *\n     * This function outputs the number of such collisions.\n     */\n    public int car_race_collision(int n) {\n        // Since all cars move at the same speed and start far apart,\n        // each left-to-right car will eventually collide with exactly one right-to-left car.\n        return n;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.car_race_collision(0));  // Expected output: 0\n        System.out.println(solution.car_race_collision(1));  // Expected output: 1\n        System.out.println(solution.car_race_collision(2));  // Expected output: 2\n        System.out.println(solution.car_race_collision(5));  // Expected output: 5\n    }\n}\n"}
{"task_id": "Java/42", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return list with elements incremented by 1.\n     *\n     * @param l The input list of integers.\n     * @return A new list where each element is incremented by 1.\n     */\n    public List<Integer> incr_list(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> list1 = Arrays.asList(1, 2, 3);\n        System.out.println(\"Original: \" + list1);\n        System.out.println(\"Incremented: \" + solution.incr_list(list1));\n\n        // Test case 2\n        List<Integer> list2 = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        System.out.println(\"Original: \" + list2);\n        System.out.println(\"Incremented: \" + solution.incr_list(list2));\n    }\n}\n"}
{"task_id": "Java/43", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * pairs_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are two distinct elements in the list that\n     * sum to zero, and False otherwise.\n     */\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        Set<Integer> seen = new HashSet<>();\n        \n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        \n        return false;\n    }\n\n    // Test cases\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1, 3, -2, 1))); // false\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(2, 4, -5, 3, 5, 7))); // true\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1))); // false\n    }\n}\n"}
{"task_id": "Java/44", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Change numerical base of input number x to base.\n     * return string representation after the conversion.\n     * base numbers are less than 10.\n     *\n     * @param x The input number to be converted.\n     * @param base The target base for conversion (less than 10).\n     * @return String representation of the converted number.\n     */\n    public String change_base(int x, int base) {\n        if (x == 0) return \"0\";\n        \n        StringBuilder result = new StringBuilder();\n        while (x > 0) {\n            result.insert(0, x % base);\n            x /= base;\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.change_base(8, 3)); // Expected output: \"22\"\n        System.out.println(solution.change_base(8, 2)); // Expected output: \"1000\"\n        System.out.println(solution.change_base(7, 2)); // Expected output: \"111\"\n        System.out.println(solution.change_base(255, 16)); // Expected output: \"FF\" (Note: base is less than 10, so this test case should be adjusted)\n        System.out.println(solution.change_base(10, 8)); // Expected output: \"12\"\n    }\n}\n"}
{"task_id": "Java/45", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given length of a side (base) and height, return area for a triangle.\n     *\n     * @param a The base of the triangle.\n     * @param h The height of the triangle.\n     * @return The area of the triangle.\n     */\n    public double triangle_area(double a, double h) {\n        return 0.5 * a * h;\n    }\n\n    /**\n     * Main method to run test cases for the triangle_area function.\n     */\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Test Case 1: Base = 5, Height = 3\");\n        double result1 = solution.triangle_area(5, 3);\n        System.out.println(\"Expected: 7.5, Actual: \" + result1);\n\n        System.out.println(\"\\nTest Case 2: Base = 10, Height = 4\");\n        double result2 = solution.triangle_area(10, 4);\n        System.out.println(\"Expected: 20.0, Actual: \" + result2);\n\n        System.out.println(\"\\nTest Case 3: Base = 7, Height = 8\");\n        double result3 = solution.triangle_area(7, 8);\n        System.out.println(\"Expected: 28.0, Actual: \" + result3);\n\n        System.out.println(\"\\nTest Case 4: Base = 15, Height = 6\");\n        double result4 = solution.triangle_area(15, 6);\n        System.out.println(\"Expected: 45.0, Actual: \" + result4);\n    }\n}\n"}
{"task_id": "Java/46", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     The Fib4 number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n     fib4(0) -> 0\n     fib4(1) -> 0\n     fib4(2) -> 2\n     fib4(3) -> 0\n     fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n     Please write a function to efficiently compute the n-th element of the fib4 number sequence. Do not use recursion.\n     >>> fib4(5)\n     4\n     >>> fib4(6)\n     8\n     >>> fib4(7)\n     14\n     */\n    public int fib4(int n) {\n        if (n == 0 || n == 1) return 0;\n        if (n == 2) return 2;\n        if (n == 3) return 0;\n\n        int[] dp = new int[n + 1];\n        dp[0] = 0;\n        dp[1] = 0;\n        dp[2] = 2;\n        dp[3] = 0;\n\n        for (int i = 4; i <= n; i++) {\n            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4];\n        }\n\n        return dp[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.fib4(5)); // Expected output: 4\n        System.out.println(solution.fib4(6)); // Expected output: 8\n        System.out.println(solution.fib4(7)); // Expected output: 14\n        System.out.println(solution.fib4(8)); // Expected output: 24\n        System.out.println(solution.fib4(9)); // Expected output: 44\n    }\n}\n"}
{"task_id": "Java/47", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return median of elements in the list l.\n     *\n     * @param l The list of integers.\n     * @return The median value as a double.\n     */\n    public double median(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be null or empty\");\n        }\n\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            return ((double) l.get(size / 2 - 1) + (double) l.get(size / 2)) / 2;\n        } else {\n            return (double) l.get(size / 2);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> testList1 = Arrays.asList(3, 1, 2, 4, 5);\n        System.out.println(\"Median of [3, 1, 2, 4, 5]: \" + solution.median(testList1)); // Expected: 3\n\n        List<Integer> testList2 = Arrays.asList(-10, 4, 6, 1000, 10, 20);\n        System.out.println(\"Median of [-10, 4, 6, 1000, 10, 20]: \" + solution.median(testList2)); // Expected: 8.0\n\n        List<Integer> testList3 = Arrays.asList(5, 3, -1);\n        System.out.println(\"Median of [5, 3, -1]: \" + solution.median(testList3)); // Expected: 3.0\n\n        List<Integer> testList4 = Arrays.asList();\n        try {\n            System.out.println(\"Median of []: \" + solution.median(testList4));\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage()); // Expected: List cannot be null or empty\n        }\n\n        List<Integer> testList5 = null;\n        try {\n            System.out.println(\"Median of null: \" + solution.median(testList5));\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage()); // Expected: List cannot be null or empty\n        }\n    }\n}\n"}
{"task_id": "Java/48", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Checks if given string is a palindrome\n     >>> is_palindrome(\"\")\n     true\n     >>> is_palindrome(\"aba\")\n     true\n     >>> is_palindrome(\"aaaaa\")\n     true\n     >>> is_palindrome(\"zbcd\")\n     false\n     */\n    public boolean is_palindrome(String text) {\n        int left = 0;\n        int right = text.length() - 1;\n\n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.is_palindrome(\"\"));       // true\n        System.out.println(solution.is_palindrome(\"aba\"));    // true\n        System.out.println(solution.is_palindrome(\"aaaaa\"));  // true\n        System.out.println(solution.is_palindrome(\"zbcd\"));   // false\n        System.out.println(solution.is_palindrome(\"level\"));  // true\n        System.out.println(solution.is_palindrome(\"noon\"));   // true\n        System.out.println(solution.is_palindrome(\"abcde\"));  // false\n    }\n}\n"}
{"task_id": "Java/49", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return 2^n modulo p (be aware of numerics).\n     *\n     * @param n the exponent\n     * @param p the modulus\n     * @return 2^n mod p\n     */\n    public int modp(int n, int p) {\n        // Using BigInteger to handle large numbers and avoid overflow\n        return new java.math.BigInteger(\"2\").modPow(new java.math.BigInteger(Integer.toString(n)), \n                                                     new java.math.BigInteger(Integer.toString(p))).intValue();\n    }\n\n    /**\n     * Main method for testing the modp function.\n     */\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.modp(3, 5));   // Expected output: 3\n        System.out.println(solution.modp(1101, 101)); // Expected output: 2\n        System.out.println(solution.modp(0, 101));  // Expected output: 1\n        System.out.println(solution.modp(3, 11));   // Expected output: 8\n        System.out.println(solution.modp(100, 101)); // Expected output: 1\n    }\n}\n"}
{"task_id": "Java/50", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n     * takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decode_shift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n     * Main method to test the encodeShift and decode_shift methods.\n     */\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        String[] testStrings = {\"abc\", \"xyz\", \"hello world\", \"java\", \"\"};\n\n        for (String s : testStrings) {\n            System.out.println(\"Original: \" + s);\n            String encoded = solution.encodeShift(s);\n            System.out.println(\"Encoded:  \" + encoded);\n\n            String decoded = solution.decode_shift(encoded);\n            System.out.println(\"Decoded:  \" + decoded);\n            System.out.println();\n        }\n    }\n}\n"}
{"task_id": "Java/51", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * remove_vowels is a function that takes string and returns string without vowels.\n     */\n    public String remove_vowels(String text) {\n        if (text == null || text.isEmpty()) {\n            return text;\n        }\n        \n        StringBuilder result = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (!isVowel(c)) {\n                result.append(c);\n            }\n        }\n        return result.toString();\n    }\n\n    private boolean isVowel(char c) {\n        return \"AEIOUaeiou\".indexOf(c) != -1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.remove_vowels(\"\")); // Output: \"\"\n        System.out.println(solution.remove_vowels(\"abcdef\\nghijklm\")); // Output: \"bcdf\\nghjklm\"\n        System.out.println(solution.remove_vowels(\"abcdef\")); // Output: \"bcdf\"\n        System.out.println(solution.remove_vowels(\"aaaaa\")); // Output: \"\"\n        System.out.println(solution.remove_vowels(\"aaBAA\")); // Output: \"B\"\n        System.out.println(solution.remove_vowels(\"zbcd\")); // Output: \"zbcd\"\n    }\n}\n"}
{"task_id": "Java/52", "generation": "import java.util.Arrays;\nimport java.util.List;\n\nclass Solution {\n    /**\n     * Return True if all numbers in the list l are below threshold t.\n     */\n    public boolean below_threshold(List<Integer> l, int t) {\n        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.below_threshold(Arrays.asList(1, 2, 4, 10), 100)); // Expected: true\n        System.out.println(solution.below_threshold(Arrays.asList(1, 20, 4, 10), 5));  // Expected: false\n        System.out.println(solution.below_threshold(Arrays.asList(-1, -2, -3), 0));    // Expected: true\n        System.out.println(solution.below_threshold(Arrays.asList(), 100));            // Expected: true (empty list)\n        System.out.println(solution.below_threshold(Arrays.asList(99, 50, 49), 100));  // Expected: true\n        System.out.println(solution.below_threshold(Arrays.asList(99, 100, 49), 100)); // Expected: false\n    }\n}\n"}
{"task_id": "Java/53", "generation": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nclass Solution {\n    /**\n     * Add two numbers x and y\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n\n    // Test cases for the add method\n    @Test\n    void testAdd() {\n        assertEquals(5, add(2, 3), \"2 + 3 should be 5\");\n        assertEquals(12, add(5, 7), \"5 + 7 should be 12\");\n        assertEquals(0, add(0, 0), \"0 + 0 should be 0\");\n        assertEquals(-1, add(-1, -2), \"-1 + (-2) should be -3\");\n        assertEquals(1, add(-1, 2), \"-1 + 2 should be 1\");\n    }\n}\n"}
{"task_id": "Java/54", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Check if two words have the same kind of characters.\n     */\n    public boolean same_chars(String s0, String s1) {\n        // Convert both strings to sets of characters to remove duplicates and compare them\n        Set<Character> set0 = new HashSet<>();\n        for (char c : s0.toCharArray()) {\n            set0.add(c);\n        }\n\n        Set<Character> set1 = new HashSet<>();\n        for (char c : s1.toCharArray()) {\n            set1.add(c);\n        }\n\n        // Compare the sets to check if they contain exactly the same characters\n        return set0.equals(set1);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // true\n        System.out.println(solution.same_chars(\"abcd\", \"dddddddabc\"));              // true\n        System.out.println(solution.same_chars(\"dddddddabc\", \"abcd\"));              // true\n        System.out.println(solution.same_chars(\"eabcd\", \"dddddddabc\"));             // false\n        System.out.println(solution.same_chars(\"abcd\", \"dddddddabce\"));             // false\n        System.out.println(solution.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"));  // false\n    }\n}\n"}
{"task_id": "Java/55", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \n    /**\n     * Return n-th Fibonacci number.\n     * >>> fib(10)\n     * 55\n     * >>> fib(1)\n     * 1\n     * >>> fib(8)\n     * 21\n     */\n    public int fib(int n) {\n        if (n <= 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        }\n        \n        int a = 0, b = 1, c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(\"fib(10): \" + solution.fib(10)); // Expected: 55\n        System.out.println(\"fib(1): \" + solution.fib(1));   // Expected: 1\n        System.out.println(\"fib(8): \" + solution.fib(8));   // Expected: 21\n        System.out.println(\"fib(0): \" + solution.fib(0));   // Expected: 0\n        System.out.println(\"fib(-5): \" + solution.fib(-5)); // Expected: 0 (or throw an exception, depending on the implementation)\n    }\n}\n"}
{"task_id": "Java/56", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * brackets is a string of \"<\" and \">\".\n     * return True if every opening bracket has a corresponding closing bracket.\n     *\n     * >>> correct_bracketing(\"<\")\n     * false\n     * >>> correct_bracketing(\"<>\")\n     * true\n     * >>> correct_bracketing(\"<<><>>\")\n     * true\n     * >>> correct_bracketing(\"><<>\")\n     * false\n     */\n    public boolean correct_bracketing(String brackets) {\n        int balance = 0;\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                balance++;\n            } else if (c == '>') {\n                balance--;\n            }\n            if (balance < 0) {\n                return false; // A closing bracket appears before an opening one\n            }\n        }\n        return balance == 0; // True if all brackets are correctly matched\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.correct_bracketing(\"<\"));      // Output: false\n        System.out.println(solution.correct_bracketing(\"<>\"));     // Output: true\n        System.out.println(solution.correct_bracketing(\"<<><>>\")); // Output: true\n        System.out.println(solution.correct_bracketing(\"><<>\"));   // Output: false\n    }\n}\n"}
{"task_id": "Java/57", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return true if list elements are monotonically increasing or decreasing.\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l == null || l.size() < 2) return true;\n\n        boolean increasing = true;\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i - 1)) {\n                increasing = true;\n            } else if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            } else { // equal elements\n                continue;\n            }\n\n            if (increasing && l.get(i) < l.get(i - 1)) return false;\n            if (!increasing && l.get(i) > l.get(i - 1)) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.monotonic(Arrays.asList(1, 2, 4, 20))); // true\n        System.out.println(solution.monotonic(Arrays.asList(1, 20, 4, 10))); // false\n        System.out.println(solution.monotonic(Arrays.asList(4, 1, 0, -10))); // true\n        System.out.println(solution.monotonic(Arrays.asList(5, 5, 5, 5)));   // true (constant list)\n        System.out.println(solution.monotonic(Arrays.asList()));            // true (empty list)\n    }\n}\n"}
{"task_id": "Java/58", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return sorted unique common elements for two lists.\n     *\n     * @param l1 first list of integers\n     * @param l2 second list of integers\n     * @return a List containing the sorted unique common elements\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n\n        // Retain only the elements that are present in both sets\n        set1.retainAll(set2);\n\n        // Convert the resulting set to a sorted list\n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result);\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> l1 = Arrays.asList(1, 4, 3, 34, 653, 2, 5);\n        List<Integer> l2 = Arrays.asList(5, 7, 1, 5, 9, 653, 121);\n        System.out.println(\"Common elements (Test case 1): \" + solution.common(l1, l2)); // Expected: [1, 5, 653]\n\n        // Test case 2\n        List<Integer> l3 = Arrays.asList(5, 3, 2, 8);\n        List<Integer> l4 = Arrays.asList(3, 2);\n        System.out.println(\"Common elements (Test case 2): \" + solution.common(l3, l4)); // Expected: [2, 3]\n\n        // Test case 3\n        List<Integer> l5 = Arrays.asList(10, 20, 30);\n        List<Integer> l6 = Arrays.asList(40, 50, 60);\n        System.out.println(\"Common elements (Test case 3): \" + solution.common(l5, l6)); // Expected: []\n\n        // Test case 4\n        List<Integer> l7 = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> l8 = Arrays.asList(0, 1, 2, 3, 4, 5, 6);\n        System.out.println(\"Common elements (Test case 4): \" + solution.common(l7, l8)); // Expected: [1, 2, 3, 4, 5]\n    }\n}\n"}
{"task_id": "Java/59", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Return the largest prime factor of n. Assume n > 1 and is not a prime.\n     *\n     * @param n the number to find the largest prime factor for\n     * @return the largest prime factor of n\n     */\n    public int largest_prime_factor(int n) {\n        int maxPrime = -1;\n        \n        // Divide n by 2 to remove all even factors\n        while (n % 2 == 0) {\n            maxPrime = 2;\n            n /= 2;\n        }\n        \n        // Now n must be odd, start checking from 3\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            // While i divides n, remove i and set maxPrime to i\n            while (n % i == 0) {\n                maxPrime = i;\n                n /= i;\n            }\n        }\n        \n        // If n becomes a prime number greater than 2\n        if (n > 2) {\n            maxPrime = n;\n        }\n        \n        return maxPrime;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.largest_prime_factor(13195)); // Expected output: 29\n        System.out.println(solution.largest_prime_factor(2048));  // Expected output: 2\n        System.out.println(solution.largest_prime_factor(600851475143L)); // Expected output: 6857 (Note: Use long for large numbers)\n    }\n}\n"}
{"task_id": "Java/60", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * sum_to_n is a function that sums numbers from 1 to n.\n     */\n    public int sum_to_n(int n) {\n        return (n * (n + 1)) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"sum_to_n(30): \" + solution.sum_to_n(30)); // Expected: 465\n        System.out.println(\"sum_to_n(100): \" + solution.sum_to_n(100)); // Expected: 5050\n        System.out.println(\"sum_to_n(5): \" + solution.sum_to_n(5)); // Expected: 15\n        System.out.println(\"sum_to_n(10): \" + solution.sum_to_n(10)); // Expected: 55\n        System.out.println(\"sum_to_n(1): \" + solution.sum_to_n(1)); // Expected: 1\n    }\n}\n"}
{"task_id": "Java/61", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * brackets is a string of \"(\" and \")\".\n     * return True if every opening bracket has a corresponding closing bracket.\n     */\n    public boolean correct_bracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        \n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.correct_bracketing(\"(\"));       // Expected: false\n        System.out.println(solution.correct_bracketing(\"()\"));      // Expected: true\n        System.out.println(solution.correct_bracketing(\"(()())\"));  // Expected: true\n        System.out.println(solution.correct_bracketing(\")(()\"));    // Expected: false\n        System.out.println(solution.correct_bracketing(\"(())\"));    // Expected: true\n        System.out.println(solution.correct_bracketing(\"()()\"));    // Expected: true\n        System.out.println(solution.correct_bracketing(\"(()\"));     // Expected: false\n        System.out.println(solution.correct_bracketing(\")(\"));      // Expected: false\n    }\n}\n"}
{"task_id": "Java/62", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * xs represent coefficients of a polynomial.\n     * xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     * Return derivative of this polynomial in the same form.\n     *\n     * @param xs Coefficients of the polynomial\n     * @return Derivative of the polynomial as a list of coefficients\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        if (xs == null || xs.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.derivative(Arrays.asList(3, 1, 2, 4, 5))); // Expected: [1, 4, 12, 20]\n        System.out.println(solution.derivative(Arrays.asList(1, 2, 3)));       // Expected: [2, 6]\n\n        // Additional test cases\n        System.out.println(solution.derivative(Arrays.asList()));             // Expected: []\n        System.out.println(solution.derivative(Arrays.asList(5)));            // Expected: []\n\n        List<Integer> xs = Arrays.asList(10, -2, 3, 4);\n        System.out.println(solution.derivative(xs));                          // Expected: [-2, 6, 12]\n    }\n}\n"}
{"task_id": "Java/63", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     The FibFib number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n     fibfib(0) == 0\n     fibfib(1) == 0\n     fibfib(2) == 1\n     fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n     Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n     >>> fibfib(1)\n     0\n     >>> fibfib(5)\n     4\n     >>> fibfib(8)\n     24\n     */\n    public int fibfib(int n) {\n        if (n == 0 || n == 1) return 0;\n        if (n == 2) return 1;\n\n        int a = 0, b = 0, c = 1;\n        for (int i = 3; i <= n; i++) {\n            int next = a + b + c;\n            a = b;\n            b = c;\n            c = next;\n        }\n        return c;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.fibfib(1));  // Expected output: 0\n        System.out.println(solution.fibfib(5));  // Expected output: 4\n        System.out.println(solution.fibfib(8));  // Expected output: 24\n        System.out.println(solution.fibfib(10)); // Expected output: 76\n    }\n}\n"}
{"task_id": "Java/64", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function vowels_count which takes a string representing\n     * a word as input and returns the number of vowels in the string.\n     * Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n     * vowel, but only when it is at the end of the given word.\n     *\n     * Example:\n     * >>> vowels_count(\"abcde\")\n     * 2\n     * >>> vowels_count(\"ACEDY\")\n     * 3\n     */\n    public int vowels_count(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = Character.toLowerCase(s.charAt(i));\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            } else if (c == 'y' && i == s.length() - 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.vowels_count(\"abcde\")); // Expected output: 2\n        System.out.println(solution.vowels_count(\"ACEDY\")); // Expected output: 3\n        System.out.println(solution.vowels_count(\"rhythm\")); // Expected output: 0\n        System.out.println(solution.vowels_count(\"SYZYGY\")); // Expected output: 1\n        System.out.println(solution.vowels_count(\"quickly\")); // Expected output: 2\n    }\n}\n"}
{"task_id": "Java/65", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Circular shift the digits of the integer x, shift the digits right by shift\n     * and return the result as a string.\n     * If shift > number of digits, return digits reversed.\n     *\n     * @param x The integer to be shifted.\n     * @param shift The number of positions to shift the digits to the right.\n     * @return The resulting string after circular shifting or reversing if necessary.\n     */\n    public String circular_shift(int x, int shift) {\n        // Convert the integer to a string\n        String numStr = Integer.toString(x);\n        int len = numStr.length();\n        \n        // If shift is greater than the number of digits, reverse the string\n        if (shift > len) {\n            return new StringBuilder(numStr).reverse().toString();\n        }\n        \n        // Perform circular shift\n        shift %= len;  // Handle cases where shift > len\n        String shifted = numStr.substring(len - shift) + numStr.substring(0, len - shift);\n        return shifted;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.circular_shift(12345, 2));  // Expected: \"34512\"\n        System.out.println(solution.circular_shift(12345, 5));  // Expected: \"54321\" (reversed)\n        System.out.println(solution.circular_shift(12345, 7));  // Expected: \"34512\" (circular shift)\n        System.out.println(solution.circular_shift(98765, 0));  // Expected: \"98765\"\n        System.out.println(solution.circular_shift(98765, 1));  // Expected: \"59876\"\n    }\n}\n"}
{"task_id": "Java/66", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function that takes a string as input and returns the sum of the upper characters only ASCII codes.\n     *\n     * Examples:\n     * digitSum(\"\") => 0\n     * digitSum(\"abAB\") => 131\n     * digitSum(\"abcCd\") => 67\n     * digitSum(\"helloE\") => 69\n     * digitSum(\"woArBld\") => 131\n     * digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n\n    // Test harness to verify the correctness of the digitSum method\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.digitSum(\"\") == 0 ? \"Test passed\" : \"Test failed\");\n        System.out.println(solution.digitSum(\"abAB\") == 131 ? \"Test passed\" : \"Test failed\");\n        System.out.println(solution.digitSum(\"abcCd\") == 67 ? \"Test passed\" : \"Test failed\");\n        System.out.println(solution.digitSum(\"helloE\") == 69 ? \"Test passed\" : \"Test failed\");\n        System.out.println(solution.digitSum(\"woArBld\") == 131 ? \"Test passed\" : \"Test failed\");\n        System.out.println(solution.digitSum(\"aAaaaXa\") == 153 ? \"Test passed\" : \"Test failed\");\n    }\n}\n"}
{"task_id": "Java/67", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * In this task, you will be given a string that represents a number of apples and oranges\n     * that are distributed in a basket of fruit. The basket contains apples, oranges, and mango fruits.\n     * Given the string that represents the total number of the oranges and apples and an integer that represent the total number of the fruits\n     * in the basket return the number of the mango fruits in the basket.\n     *\n     * @param s a string representing the number of apples and oranges (e.g., \"5 apples and 6 oranges\")\n     * @param n the total number of fruits in the basket\n     * @return the number of mango fruits in the basket\n     */\n    public int fruit_distribution(String s, int n) {\n        // Extract the numbers from the string using regex\n        String[] parts = s.split(\" and \");\n        int apples = Integer.parseInt(parts[0].split(\" \")[0]);\n        int oranges = Integer.parseInt(parts[1].split(\" \")[0]);\n\n        // Calculate the number of mango fruits\n        return n - (apples + oranges);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.fruit_distribution(\"5 apples and 6 oranges\", 19)); // Expected output: 8\n        System.out.println(solution.fruit_distribution(\"0 apples and 1 oranges\", 3));   // Expected output: 2\n        System.out.println(solution.fruit_distribution(\"2 apples and 3 oranges\", 100)); // Expected output: 95\n        System.out.println(solution.fruit_distribution(\"100 apples and 1 oranges\", 120)); // Expected output: 19\n    }\n}\n"}
{"task_id": "Java/68", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given an array representing a branch of a tree that has non-negative integer nodes,\n     * your task is to pluck one of the nodes and return it.\n     * The plucked node should be the node with the smallest even value.\n     * If multiple nodes with the same smallest even value are found, return the node that has the smallest index.\n     *\n     * @param arr List<Integer> representing the branch of a tree\n     * @return List<Integer> containing the smallest even value and its index, or an empty list if no valid node is found\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        int minEvenValue = Integer.MAX_VALUE;\n        int minIndex = -1;\n\n        for (int i = 0; i < arr.size(); i++) {\n            int value = arr.get(i);\n            if (value % 2 == 0 && value <= minEvenValue) {\n                if (value < minEvenValue || (value == minEvenValue && i < minIndex)) {\n                    minEvenValue = value;\n                    minIndex = i;\n                }\n            }\n        }\n\n        if (minIndex == -1) {\n            return new ArrayList<>();\n        } else {\n            return Arrays.asList(minEvenValue, minIndex);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.pluck(Arrays.asList(4, 2, 3))); // [2, 1]\n        System.out.println(solution.pluck(Arrays.asList(1, 2, 3))); // [2, 1]\n        System.out.println(solution.pluck(Arrays.asList()));       // []\n        System.out.println(solution.pluck(Arrays.asList(5, 0, 3, 0, 4, 2))); // [0, 1]\n    }\n}\n"}
{"task_id": "Java/69", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n     * zero, and has a frequency greater than or equal to the value of the integer itself.\n     * The frequency of an integer is the number of times it appears in the list.\n     * If no such a value exist, return -1.\n     *\n     * Examples:\n     * search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n     * search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n     * search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        // Count the frequency of each integer in the list\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        int result = -1;\n        \n        // Check which integers meet the condition and find the greatest one\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            if (entry.getKey() <= entry.getValue()) {\n                result = Math.max(result, entry.getKey());\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.search(Arrays.asList(4, 1, 2, 2, 3, 1))); // Expected output: 2\n        System.out.println(solution.search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4))); // Expected output: 3\n        System.out.println(solution.search(Arrays.asList(5, 5, 4, 4, 4))); // Expected output: -1\n        System.out.println(solution.search(Arrays.asList(6, 6, 6, 7, 7, 8, 8, 8, 8))); // Expected output: 8\n    }\n}\n"}
{"task_id": "Java/70", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given list of integers, return list in strange order.\n     * Strange sorting, is when you start with the minimum value,\n     * then maximum of the remaining integers, then minimum and so on.\n     *\n     * Examples:\n     * strange_sort_list(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n     * strange_sort_list(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n     * strange_sort_list(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        if (lst.isEmpty()) return lst;\n\n        List<Integer> sortedList = new ArrayList<>();\n        while (!lst.isEmpty()) {\n            // Add the minimum value\n            int minVal = Collections.min(lst);\n            sortedList.add(minVal);\n            lst.remove(Integer.valueOf(minVal));\n\n            // If there are still elements left, add the maximum value\n            if (!lst.isEmpty()) {\n                int maxVal = Collections.max(lst);\n                sortedList.add(maxVal);\n                lst.remove(Integer.valueOf(maxVal));\n            }\n        }\n\n        return sortedList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.strange_sort_list(Arrays.asList(1, 2, 3, 4))); // Expected: [1, 4, 2, 3]\n        System.out.println(solution.strange_sort_list(Arrays.asList(5, 5, 5, 5))); // Expected: [5, 5, 5, 5]\n        System.out.println(solution.strange_sort_list(Arrays.asList()));           // Expected: []\n        System.out.println(solution.strange_sort_list(Arrays.asList(10, -2, 3, 7, 8))); // Expected: [-2, 10, 3, 8, 7]\n    }\n}\n"}
{"task_id": "Java/71", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given the lengths of the three sides of a triangle. Return the area of\n     * the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n     * Otherwise return -1\n     * Three sides make a valid triangle when the sum of any two sides is greater\n     * than the third side.\n     * Example:\n     * triangle_area(3, 4, 5) == 6.00\n     * triangle_area(1, 2, 10) == -1\n     */\n    public double triangle_area(double a, double b, double c) {\n        // Check if the sides form a valid triangle\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        \n        // Calculate the semi-perimeter\n        double s = (a + b + c) / 2.0;\n        \n        // Calculate the area using Heron's formula\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        \n        // Round to 2 decimal points\n        return Math.round(area * 100.0) / 100.0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.triangle_area(3, 4, 5)); // Expected output: 6.00\n        System.out.println(solution.triangle_area(1, 2, 10)); // Expected output: -1\n        System.out.println(solution.triangle_area(5, 5, 8)); // Expected output: 12.00\n        System.out.println(solution.triangle_area(7, 10, 5)); // Expected output: -1 (since 7 + 5 <= 10)\n    }\n}\n"}
{"task_id": "Java/72", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function that returns True if the object q will fly, and False otherwise.\n     * The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n     *\n     * Example:\n     * will_it_fly(Arrays.asList(1, 2), 5) -> false\n     * # 1+2 is less than the maximum possible weight, but it's unbalanced.\n     *\n     * will_it_fly(Arrays.asList(3, 2, 3), 1) -> false\n     * # it's balanced, but 3+2+3 is more than the maximum possible weight.\n     *\n     * will_it_fly(Arrays.asList(3, 2, 3), 9) -> true\n     * # 3+2+3 is less than the maximum possible weight, and it's balanced.\n     *\n     * will_it_fly(Arrays.asList(3), 5) -> true\n     * # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean will_it_fly(List<Integer> q, int w) {\n        // Check if the list is a palindrome\n        List<Integer> reversedQ = new ArrayList<>(q);\n        Collections.reverse(reversedQ);\n        if (!q.equals(reversedQ)) {\n            return false;\n        }\n\n        // Calculate the sum of elements in the list\n        int sum = q.stream().mapToInt(Integer::intValue).sum();\n\n        // Check if the sum is less than or equal to w\n        return sum <= w;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.will_it_fly(Arrays.asList(1, 2), 5)); // false\n        System.out.println(solution.will_it_fly(Arrays.asList(3, 2, 3), 1)); // false\n        System.out.println(solution.will_it_fly(Arrays.asList(3, 2, 3), 9)); // true\n        System.out.println(solution.will_it_fly(Arrays.asList(3), 5)); // true\n    }\n}\n"}
{"task_id": "Java/73", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given an array arr of integers, find the minimum number of elements that\n     * need to be changed to make the array palindromic. A palindromic array is an array that\n     * is read the same backwards and forwards. In one change, you can change one element to any other element.\n     *\n     * For example:\n     * smallest_change(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n     * smallest_change(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n     * smallest_change(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallest_change(List<Integer> arr) {\n        int left = 0;\n        int right = arr.size() - 1;\n        int changes = 0;\n\n        while (left < right) {\n            if (!arr.get(left).equals(arr.get(right))) {\n                changes++;\n            }\n            left++;\n            right--;\n        }\n\n        return changes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.smallest_change(Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6))); // Expected output: 4\n        System.out.println(solution.smallest_change(Arrays.asList(1, 2, 3, 4, 3, 2, 2)));   // Expected output: 1\n        System.out.println(solution.smallest_change(Arrays.asList(1, 2, 3, 2, 1)));         // Expected output: 0\n        System.out.println(solution.smallest_change(Arrays.asList(5, 9, 3, 8, 7, 4, 6, 2, 1, 8))); // Expected output: 3\n    }\n}\n"}
{"task_id": "Java/74", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function that accepts two lists of strings and returns the list that has\n     * total number of chars in the all strings of the list less than the other list.\n     *\n     * if the two lists have the same number of chars, return the first list.\n     */\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        int sum1 = 0;\n        for (String s : lst1) {\n            sum1 += s.length();\n        }\n\n        int sum2 = 0;\n        for (String s : lst2) {\n            sum2 += s.length();\n        }\n\n        if (sum1 <= sum2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.total_match(new ArrayList<>(), new ArrayList<>())); // []\n        System.out.println(solution.total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\"))); // [hI, Hi]\n        System.out.println(solution.total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\"))); // [hi, admin]\n        System.out.println(solution.total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\"))); // [hI, hi, hi]\n        System.out.println(solution.total_match(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"))); // [4]\n    }\n}\n"}
{"task_id": "Java/75", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function that returns true if the given number is the multiplication of 3 prime numbers\n     * and false otherwise.\n     * Knowing that the prime number is less than 100.\n     * Example:\n     * is_multiply_prime(30) == true\n     * 30 = 2 * 3 * 5\n     */\n    public boolean is_multiply_prime(int a) {\n        if (a < 2) return false;\n\n        int count = 0;\n        for (int i = 2; i <= Math.sqrt(a); i++) {\n            while (a % i == 0 && isPrime(i)) {\n                count++;\n                a /= i;\n            }\n        }\n\n        // If the remaining number is greater than 1 and is also prime, increment the count\n        if (a > 1 && isPrime(a)) {\n            count++;\n        }\n\n        return count == 3;\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.is_multiply_prime(30)); // true, because 30 = 2 * 3 * 5\n        System.out.println(solution.is_multiply_prime(60)); // false, because 60 = 2 * 2 * 3 * 5 (more than 3 prime factors)\n        System.out.println(solution.is_multiply_prime(100)); // false, because 100 is not the product of exactly 3 primes\n        System.out.println(solution.is_multiply_prime(2 * 3 * 7)); // true, because 42 = 2 * 3 * 7\n        System.out.println(solution.is_multiply_prime(2 * 5 * 7)); // true, because 70 = 2 * 5 * 7\n    }\n}\n"}
{"task_id": "Java/76", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Your task is to write a function that returns true if a number x is a simple\n     * power of n and false in other cases.\n     * x is a simple power of n if n**int=x\n     * For example:\n     * is_simple_power(1, 4) => true\n     * is_simple_power(2, 2) => true\n     * is_simple_power(8, 2) => true\n     * is_simple_power(3, 2) => false\n     * is_simple_power(3, 1) => false\n     * is_simple_power(5, 3) => false\n     */\n    public boolean is_simple_power(int x, int n) {\n        if (n == 1) {\n            return x == 1;\n        }\n        \n        long power = 1;\n        while (power < x) {\n            power *= n;\n        }\n        \n        return power == x;\n    }\n\n    // Test cases\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.is_simple_power(1, 4));   // true\n        System.out.println(solution.is_simple_power(2, 2));   // true\n        System.out.println(solution.is_simple_power(8, 2));   // true\n        System.out.println(solution.is_simple_power(3, 2));   // false\n        System.out.println(solution.is_simple_power(3, 1));   // false\n        System.out.println(solution.is_simple_power(5, 3));   // false\n        System.out.println(solution.is_simple_power(27, 3));  // true\n        System.out.println(solution.is_simple_power(16, 4));  // true\n        System.out.println(solution.is_simple_power(9, 3));   // true\n    }\n}\n"}
{"task_id": "Java/77", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Write a function that takes an integer a and returns true\n     * if this integer is a cube of some integer number.\n     * Note: you may assume the input is always valid.\n     * Examples:\n     * iscube(1) ==> true\n     * iscube(2) ==> false\n     * iscube(-1) ==> true\n     * iscube(64) ==> true\n     * iscube(0) ==> true\n     * iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) return true; // 0 is a cube of itself\n\n        int absA = Math.abs(a); // Work with the absolute value to handle negative numbers\n        for (int i = 1; i * i * i <= absA; i++) {\n            if (i * i * i == absA) return true;\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.iscube(1));   // true\n        System.out.println(solution.iscube(2));   // false\n        System.out.println(solution.iscube(-1));  // true\n        System.out.println(solution.iscube(64));  // true\n        System.out.println(solution.iscube(0));   // true\n        System.out.println(solution.iscube(180)); // false\n    }\n}\n"}
{"task_id": "Java/78", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You have been tasked to write a function that receives\n     * a hexadecimal number as a string and counts the number of hexadecimal\n     * digits that are primes (prime number, or a prime, is a natural number\n     * greater than 1 that is not a product of two smaller natural numbers).\n     * Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n     * Prime numbers are 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\n     * So you have to determine a number of the following digits: 2, 3, 5, 7,\n     * B (=decimal 11), D (=decimal 13).\n     * Note: you may assume the input is always correct or empty string,\n     * and symbols A,B,C,D,E,F are always uppercase.\n     * Examples:\n     * For num = \"AB\" the output should be 1.\n     * For num = \"1077E\" the output should be 2.\n     * For num = \"ABED1A33\" the output should be 4.\n     * For num = \"123456789ABCDEF0\" the output should be 6.\n     * For num = \"2020\" the output should be 2.\n     */\n    public int hex_key(String num) {\n        // Define a set of prime hexadecimal digits\n        Set<Character> primes = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        // Count the number of prime hexadecimal digits in the input string\n        int count = 0;\n        for (char c : num.toCharArray()) {\n            if (primes.contains(c)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.hex_key(\"AB\")); // Expected output: 1\n        System.out.println(solution.hex_key(\"1077E\")); // Expected output: 2\n        System.out.println(solution.hex_key(\"ABED1A33\")); // Expected output: 4\n        System.out.println(solution.hex_key(\"123456789ABCDEF0\")); // Expected output: 6\n        System.out.println(solution.hex_key(\"2020\")); // Expected output: 2\n    }\n}\n"}
{"task_id": "Java/79", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You will be given a number in decimal form and your task is to convert it to\n     * binary format. The function should return a string, with each character representing a binary\n     * number. Each character in the string will be '0' or '1'.\n     *\n     * There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n     * The extra characters are there to help with the format.\n     *\n     * Examples:\n     * decimal_to_binary(15)   // returns \"db1111db\"\n     * decimal_to_binary(32)   // returns \"db100000db\"\n     */\n    public String decimal_to_binary(int decimal) {\n        if (decimal == 0) {\n            return \"db0db\";\n        }\n        \n        StringBuilder binary = new StringBuilder();\n        while (decimal > 0) {\n            binary.insert(0, decimal % 2);\n            decimal /= 2;\n        }\n\n        return \"db\" + binary.toString() + \"db\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.decimal_to_binary(15));   // Expected: db1111db\n        System.out.println(solution.decimal_to_binary(32));   // Expected: db100000db\n        System.out.println(solution.decimal_to_binary(0));    // Expected: db0db\n        System.out.println(solution.decimal_to_binary(45));   // Expected: db101101db\n        System.out.println(solution.decimal_to_binary(255));  // Expected: db11111111db\n    }\n}\n"}
{"task_id": "Java/80", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You are given a string s.\n     * Your task is to check if the string is happy or not.\n     * A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n     * For example:\n     * is_happy(a) => false\n     * is_happy(aa) => false\n     * is_happy(abcd) => true\n     * is_happy(aabb) => false\n     * is_happy(adb) => true\n     * is_happy(xyy) => false\n     */\n    public boolean is_happy(String s) {\n        if (s.length() < 3) return false;\n\n        for (int i = 0; i <= s.length() - 3; i++) {\n            char first = s.charAt(i);\n            char second = s.charAt(i + 1);\n            char third = s.charAt(i + 2);\n\n            if (first == second || second == third || first == third) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.is_happy(\"a\"));       // Output: false\n        System.out.println(solution.is_happy(\"aa\"));      // Output: false\n        System.out.println(solution.is_happy(\"abcd\"));    // Output: true\n        System.out.println(solution.is_happy(\"aabb\"));    // Output: false\n        System.out.println(solution.is_happy(\"adb\"));     // Output: true\n        System.out.println(solution.is_happy(\"xyy\"));     // Output: false\n        System.out.println(solution.is_happy(\"abcde\"));   // Output: true\n        System.out.println(solution.is_happy(\"abca\"));    // Output: true\n        System.out.println(solution.is_happy(\"abccba\"));  // Output: false\n    }\n}\n"}
{"task_id": "Java/81", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * It is the last week of the semester and the teacher has to give the grades\n     * to students. The teacher has given a list of GPAs for some students and you have to write\n     * a function that can output a list of letter grades using the following table:\n     *\n     * GPA       |    Letter grade\n     * 4.0                A+\n     * > 3.7              A\n     * > 3.3              A-\n     * > 3.0              B+\n     * > 2.7              B\n     * > 2.3              B-\n     * > 2.0              C+\n     * > 1.7              C\n     * > 1.3              C-\n     * > 1.0              D+\n     * > 0.7              D\n     * > 0.0              D-\n     * 0.0                E\n     *\n     * Example:\n     * numerical_letter_grade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        \n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n\n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Double> grades1 = Arrays.asList(4.0, 3, 1.7, 2, 3.5);\n        System.out.println(solution.numerical_letter_grade(grades1)); // Expected: [A+, B, C-, C, A-]\n\n        List<Double> grades2 = Arrays.asList(4.0, 3.8, 3.2, 2.9, 1.6, 0.5);\n        System.out.println(solution.numerical_letter_grade(grades2)); // Expected: [A+, A, A-, B+, C-, D]\n\n        List<Double> grades3 = Arrays.asList(4.0, 4.0, 4.0, 4.0, 4.0);\n        System.out.println(solution.numerical_letter_grade(grades3)); // Expected: [A+, A+, A+, A+, A+]\n    }\n}\n"}
{"task_id": "Java/82", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function that takes a string and returns true if the string\n     * length is a prime number or false otherwise.\n     *\n     * Examples:\n     * prime_length(\"Hello\") == true\n     * prime_length(\"abcdcba\") == true\n     * prime_length(\"kittens\") == true\n     * prime_length(\"orange\") == false\n     */\n    public boolean prime_length(String string) {\n        int length = string.length();\n        return isPrime(length);\n    }\n\n    private boolean isPrime(int number) {\n        if (number <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= number; i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.prime_length(\"Hello\"));       // Output: true\n        System.out.println(solution.prime_length(\"abcdcba\"));     // Output: true\n        System.out.println(solution.prime_length(\"kittens\"));     // Output: true\n        System.out.println(solution.prime_length(\"orange\"));      // Output: false\n        System.out.println(solution.prime_length(\"\"));            // Output: false\n        System.out.println(solution.prime_length(\"a\"));           // Output: true\n    }\n}\n"}
{"task_id": "Java/83", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given a positive integer n, return the count of the numbers of n-digit\n     positive integers that start or end with 1.\n     */\n    public int starts_one_ends(int n) {\n        if (n == 1) {\n            // If n is 1, there's only one digit and it can be either \"1\" which satisfies both conditions.\n            return 1;\n        } else {\n            // For n > 1:\n            // - Count of numbers starting with 1: 10^(n-1)\n            // - Count of numbers ending with 1: 10^(n-1)\n            // - Subtract the count of numbers that both start and end with 1 to avoid double-counting\n            int startWithOne = (int) Math.pow(10, n - 1);\n            int endWithOne = (int) Math.pow(10, n - 1);\n            int bothStartAndEndWithOne = (int) Math.pow(10, n - 2);\n\n            return startWithOne + endWithOne - bothStartAndEndWithOne;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.starts_one_ends(1)); // Expected output: 1\n        System.out.println(solution.starts_one_ends(2)); // Expected output: 19 (10 + 10 - 1)\n        System.out.println(solution.starts_one_ends(3)); // Expected output: 180 (100 + 100 - 10)\n        System.out.println(solution.starts_one_ends(4)); // Expected output: 1800 (1000 + 1000 - 100)\n    }\n}\n"}
{"task_id": "Java/84", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given a positive integer N, return in binary the total sum of its digits.\n     \n     Example:\n         For N = 1000, the sum of digits will be 1 the output should be \"1\".\n         For N = 150, the sum of digits will be 6 the output should be \"110\".\n         For N = 147, the sum of digits will be 12 the output should be \"1100\".\n     \n     Variables:\n         @N integer\n             Constraints: 0 <= N <= 10000.\n     Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        int sum = 0;\n        \n        // Calculate the sum of digits\n        while (N > 0) {\n            sum += N % 10;\n            N /= 10;\n        }\n        \n        // Convert the sum to binary and return as a string\n        return Integer.toBinaryString(sum);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.solve(1000)); // Expected output: \"1\"\n        System.out.println(solution.solve(150));  // Expected output: \"110\"\n        System.out.println(solution.solve(147));  // Expected output: \"1100\"\n        System.out.println(solution.solve(9999)); // Expected output: \"11110001111\"\n    }\n}\n"}
{"task_id": "Java/85", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a non-empty list of integers lst, add the even elements that are at odd indices.\n     *\n     * Examples:\n     *      add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        if (lst == null || lst.size() < 2) {\n            throw new IllegalArgumentException(\"List must have at least two elements\");\n        }\n\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            int element = lst.get(i);\n            if (element % 2 == 0) {\n                sum += element;\n            }\n        }\n        return sum;\n    }\n}\n\npublic class TestSolution {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> lst1 = Arrays.asList(4, 2, 6, 7);\n        int result1 = solution.add(lst1);\n        System.out.println(\"Test Case 1: \" + (result1 == 2 ? \"Passed\" : \"Failed\"));\n\n        // Test case 2\n        List<Integer> lst2 = Arrays.asList(3, 5, 8, 9, 10);\n        int result2 = solution.add(lst2);\n        System.out.println(\"Test Case 2: \" + (result2 == 10 ? \"Passed\" : \"Failed\"));\n\n        // Test case 3\n        List<Integer> lst3 = Arrays.asList(1, 2, 3, 4, 5, 6);\n        int result3 = solution.add(lst3);\n        System.out.println(\"Test Case 3: \" + (result3 == 6 ? \"Passed\" : \"Failed\"));\n\n        // Test case 4\n        List<Integer> lst4 = Arrays.asList(10, 20, 30, 40, 50);\n        int result4 = solution.add(lst4);\n        System.out.println(\"Test Case 4: \" + (result4 == 60 ? \"Passed\" : \"Failed\"));\n\n        // Test case 5\n        List<Integer> lst5 = Arrays.asList(1, 3, 5, 7, 9);\n        int result5 = solution.add(lst5);\n        System.out.println(\"Test Case 5: \" + (result5 == 0 ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/86", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function that takes a string and returns an ordered version of it.\n     * Ordered version of string, is a string where all words (separated by space)\n     * are replaced by a new word where all the characters arranged in\n     * ascending order based on ascii value.\n     * Note: You should keep the order of words and blank spaces in the sentence.\n     *\n     * For example:\n     * anti_shuffle(\"Hi\") returns \"Hi\"\n     * anti_shuffle(\"hello\") returns \"ehllo\"\n     * anti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String anti_shuffle(String s) {\n        if (s == null || s.isEmpty()) {\n            return s;\n        }\n\n        StringBuilder result = new StringBuilder();\n        int wordStart = 0;\n\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\n            // Check if we've reached the end of a word or the end of the string\n            if (c == ' ' || i == s.length() - 1) {\n                String word = s.substring(wordStart, i + 1);\n                result.append(ascendingOrder(word));\n                if (i < s.length() - 1) { // Add space back after each processed word except the last one\n                    result.append(' ');\n                }\n                wordStart = i + 1;\n            }\n        }\n\n        return result.toString();\n    }\n\n    private String ascendingOrder(String word) {\n        char[] chars = word.toCharArray();\n        Arrays.sort(chars);\n        return new String(chars);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.anti_shuffle(\"Hi\")); // Expected: \"Hi\"\n        System.out.println(solution.anti_shuffle(\"hello\")); // Expected: \"ehllo\"\n        System.out.println(solution.anti_shuffle(\"Hello World!!!\")); // Expected: \"Hello !!!Wdlor\"\n        System.out.println(solution.anti_shuffle(\"Programming is fun!\")); // Expected: \"Pamgimmgn ir fs nu!\"\n    }\n}\n"}
{"task_id": "Java/87", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given a 2 dimensional data, as a nested lists,\n     * which is similar to matrix, however, unlike matrices,\n     * each row may contain a different number of columns.\n     * Given lst, and integer x, find integers x in the list,\n     * and return list of lists, [[x1, y1], [x2, y2] ...] such that\n     * each list is a coordinate - (row, columns), starting with 0.\n     * Sort coordinates initially by rows in ascending order.\n     * Also, sort coordinates of the row by columns in descending order.\n     *\n     * Examples:\n     * get_row([\n     *   [1,2,3,4,5,6],\n     *   [1,2,3,4,1,6],\n     *   [1,2,3,4,5,1]\n     * ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n     * get_row([], 1) == []\n     * get_row([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j).equals(x)) {\n                    result.add(Arrays.asList(i, j));\n                }\n            }\n        }\n\n        // Sort by rows in ascending order\n        Collections.sort(result, new Comparator<List<Integer>>() {\n            @Override\n            public int compare(List<Integer> o1, List<Integer> o2) {\n                return o1.get(0).compareTo(o2.get(0));\n            }\n        });\n\n        // For each row, sort coordinates by columns in descending order\n        for (List<Integer> coord : result) {\n            if (coord.size() > 1) { // Ensure the list has at least two elements\n                Collections.sort(coord.subList(1, coord.size()), Collections.reverseOrder());\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<List<Integer>> lst1 = Arrays.asList(\n            Arrays.asList(1, 2, 3, 4, 5, 6),\n            Arrays.asList(1, 2, 3, 4, 1, 6),\n            Arrays.asList(1, 2, 3, 4, 5, 1)\n        );\n        System.out.println(solution.get_row(lst1, 1)); // Expected: [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n\n        List<List<Integer>> lst2 = new ArrayList<>();\n        System.out.println(solution.get_row(lst2, 1)); // Expected: []\n\n        List<List<Integer>> lst3 = Arrays.asList(\n            new ArrayList<>(),\n            Arrays.asList(1),\n            Arrays.asList(1, 2, 3)\n        );\n        System.out.println(solution.get_row(lst3, 3)); // Expected: [[2, 2]]\n    }\n}\n"}
{"task_id": "Java/88", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given an array of non-negative integers, return a copy of the given array after sorting,\n     * you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n     * or sort it in descending order if the sum( first index value, last index value) is even.\n     *\n     * Note:\n     * * don't change the given array.\n     */\n    public List<Integer> sort_array(List<Integer> array) {\n        if (array == null || array.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        int first = array.get(0);\n        int last = array.get(array.size() - 1);\n\n        // Determine sorting order based on the sum of the first and last elements\n        boolean isAscending = (first + last) % 2 != 0;\n\n        List<Integer> sortedArray = new ArrayList<>(array); // Create a copy to avoid modifying the original list\n\n        if (isAscending) {\n            Collections.sort(sortedArray);\n        } else {\n            sortedArray.sort(Collections.reverseOrder());\n        }\n\n        return sortedArray;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sort_array(Arrays.asList())); // []\n        System.out.println(solution.sort_array(Arrays.asList(5))); // [5]\n        System.out.println(solution.sort_array(Arrays.asList(2, 4, 3, 0, 1, 5))); // [0, 1, 2, 3, 4, 5]\n        System.out.println(solution.sort_array(Arrays.asList(2, 4, 3, 0, 1, 5, 6))); // [6, 5, 4, 3, 2, 1, 0]\n    }\n}\n"}
{"task_id": "Java/89", "generation": "import java.util.*;\n\nclass Solution {\n    \n    /**\n     * Create a function encrypt that takes a string as an argument and\n     * returns a string encrypted with the alphabet being rotated.\n     * The alphabet should be rotated in a manner such that the letters\n     * shift down by two multiplied to two places.\n     * For example:\n     * encrypt(\"hi\") returns \"lm\"\n     * encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n     * encrypt(\"gf\") returns \"kj\"\n     * encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        StringBuilder encrypted = new StringBuilder();\n        \n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                char base = Character.isUpperCase(c) ? 'A' : 'a';\n                int offset = ((c - base + 4) % 26);\n                encrypted.append((char) (base + offset));\n            } else {\n                encrypted.append(c);\n            }\n        }\n        \n        return encrypted.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.encrypt(\"hi\"));       // Should print \"lm\"\n        System.out.println(solution.encrypt(\"asdfghjkl\")); // Should print \"ewhjklnop\"\n        System.out.println(solution.encrypt(\"gf\"));       // Should print \"kj\"\n        System.out.println(solution.encrypt(\"et\"));       // Should print \"ix\"\n        System.out.println(solution.encrypt(\"Hello, World!\")); // Should print \"Lipps, Asvph!\"\n    }\n}\n"}
{"task_id": "Java/90", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given a list of integers.\n     * Write a function next_smallest() that returns the 2nd smallest element of the list.\n     * Return null if there is no such element.\n     *\n     * @param lst The input list of integers\n     * @return Optional containing the 2nd smallest integer, or Optional.empty() if not available\n     */\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        // Remove duplicates and sort the list\n        Set<Integer> uniqueElements = new TreeSet<>(lst);\n        \n        // Check if there are at least 2 elements in the set\n        if (uniqueElements.size() < 2) {\n            return Optional.empty();\n        }\n        \n        // Return the second smallest element\n        Iterator<Integer> iterator = uniqueElements.iterator();\n        iterator.next(); // Skip the first element\n        return Optional.of(iterator.next());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.next_smallest(Arrays.asList(1, 2, 3, 4, 5))); // Expected: Optional[2]\n        System.out.println(solution.next_smallest(Arrays.asList(5, 1, 4, 3, 2))); // Expected: Optional[2]\n        System.out.println(solution.next_smallest(Arrays.asList()));             // Expected: Optional.empty\n        System.out.println(solution.next_smallest(Arrays.asList(1, 1)));         // Expected: Optional.empty\n        System.out.println(solution.next_smallest(Arrays.asList(7, 5, 3, 9, 2))); // Expected: Optional[3]\n    }\n}\n"}
{"task_id": "Java/91", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You'll be given a string of words, and your task is to count the number\n     * of boredoms. A boredom is a sentence that starts with the word \"I\".\n     * Sentences are delimited by '.', '?' or '!'.\n     *\n     * For example:\n     * >>> is_bored(\"Hello world\")\n     * 0\n     * >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n     * 1\n     */\n    public int is_bored(String S) {\n        if (S == null || S.isEmpty()) return 0;\n\n        String[] sentences = S.split(\"[.?!]\");\n        int boredomCount = 0;\n\n        for (String sentence : sentences) {\n            // Trim leading and trailing spaces to handle cases like \"I love this weather. \"\n            String trimmedSentence = sentence.trim();\n            if (!trimmedSentence.isEmpty() && trimmedSentence.startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n\n        return boredomCount;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.is_bored(\"Hello world\")); // Expected output: 0\n        System.out.println(solution.is_bored(\"The sky is blue. The sun is shining. I love this weather\")); // Expected output: 1\n        System.out.println(solution.is_bored(\"I am bored. Are you? Yes, I am!\")); // Expected output: 2\n        System.out.println(solution.is_bored(\"\")); // Expected output: 0\n        System.out.println(solution.is_bored(\"I love Java. I also like Python.\")); // Expected output: 2\n    }\n}\n"}
{"task_id": "Java/92", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Create a function that takes 3 numbers.\n     * Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n     * Returns false in any other cases.\n     *\n     * Examples\n     * any_int(5, 2, 7) -> true\n     * any_int(3, 2, 2) -> false\n     * any_int(3, -2, 1) -> true\n     * any_int(3.6, -2.2, 2) -> false\n     */\n    public boolean any_int(Object x, Object y, Object z) {\n        // Check if all inputs are integers\n        if (!(x instanceof Integer && y instanceof Integer && z instanceof Integer)) {\n            return false;\n        }\n\n        int a = (Integer) x;\n        int b = (Integer) y;\n        int c = (Integer) z;\n\n        // Check if any number is equal to the sum of the other two\n        return a == b + c || b == a + c || c == a + b;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.any_int(5, 2, 7));   // true\n        System.out.println(solution.any_int(3, 2, 2));   // false\n        System.out.println(solution.any_int(3, -2, 1));  // true\n        System.out.println(solution.any_int(3.6, -2.2, 2)); // false\n        System.out.println(solution.any_int(10, 5, 5));  // true\n    }\n}\n"}
{"task_id": "Java/93", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Write a function that takes a message, and encodes in such a way that it swaps case of all letters,\n     * replaces all vowels in the message with the letter that appears 2 places ahead of that vowel in the english alphabet.\n     * Assume only letters.\n     *\n     * Examples:\n     * >>> encode(\"test\")\n     * \"TGST\"\n     * >>> encode(\"This is a message\")\n     * \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        StringBuilder encodedMessage = new StringBuilder();\n        \n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                char lowerCaseChar = Character.toLowerCase(c);\n                \n                // Swap case\n                char swappedCaseChar = Character.isLowerCase(lowerCaseChar) ? Character.toUpperCase(lowerCaseChar) : Character.toLowerCase(lowerCaseChar);\n                \n                // Replace vowels with the letter that appears 2 places ahead in the alphabet\n                if (lowerCaseChar == 'a') {\n                    swappedCaseChar = 'c';\n                } else if (lowerCaseChar == 'e') {\n                    swappedCaseChar = 'g';\n                } else if (lowerCaseChar == 'i') {\n                    swappedCaseChar = 'k';\n                } else if (lowerCaseChar == 'o') {\n                    swappedCaseChar = 'q';\n                } else if (lowerCaseChar == 'u') {\n                    swappedCaseChar = 'w';\n                }\n                \n                encodedMessage.append(swappedCaseChar);\n            } else {\n                // Non-letter characters are not modified\n                encodedMessage.append(c);\n            }\n        }\n\n        return encodedMessage.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.encode(\"test\"));  // Expected: \"TGST\"\n        System.out.println(solution.encode(\"This is a message\"));  // Expected: \"tHKS KS C MGSSCGG\"\n        System.out.println(solution.encode(\"Hello World!\"));  // Expected: \"hFLLQ wQRLD!\"\n        System.out.println(solution.encode(\"Programming is fun.\"));  // Expected: \"pRqRRMMKNG KM hVQ.\"\n    }\n}\n"}
{"task_id": "Java/94", "generation": "import java.util.List;\n\nclass Solution {\n    /**\n     * You are given a list of integers.\n     * You need to find the largest prime value and return the sum of its digits.\n     *\n     * @param lst the input list of integers\n     * @return the sum of the digits of the largest prime number in the list\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        if (lst == null || lst.isEmpty()) {\n            return 0;\n        }\n\n        int maxPrime = -1;\n\n        for (int num : lst) {\n            if (isPrime(num)) {\n                maxPrime = Math.max(maxPrime, num);\n            }\n        }\n\n        if (maxPrime == -1) {\n            return 0; // No prime number found\n        }\n\n        return sumOfDigits(maxPrime);\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}\n\npublic class TestSolution {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> lst1 = Arrays.asList(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3);\n        System.out.println(solution.skjkasdkd(lst1)); // Output: 10\n\n        List<Integer> lst2 = Arrays.asList(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1);\n        System.out.println(solution.skjkasdkd(lst2)); // Output: 25\n\n        List<Integer> lst3 = Arrays.asList(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3);\n        System.out.println(solution.skjkasdkd(lst3)); // Output: 13\n\n        List<Integer> lst4 = Arrays.asList(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6);\n        System.out.println(solution.skjkasdkd(lst4)); // Output: 11\n\n        List<Integer> lst5 = Arrays.asList(0, 81, 12, 3, 1, 21);\n        System.out.println(solution.skjkasdkd(lst5)); // Output: 3\n\n        List<Integer> lst6 = Arrays.asList(0, 8, 1, 2, 1, 7);\n        System.out.println(solution.skjkasdkd(lst6)); // Output: 7\n    }\n}\n"}
{"task_id": "Java/95", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a map, return True if all keys are strings and all keys are in lower case or in upper case, else return False.\n     * The function should return False is the given map is empty.\n     */\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        boolean allLowerCase = true;\n        boolean allUpperCase = true;\n\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String strKey = (String) key;\n            if (!strKey.equals(strKey.toLowerCase())) {\n                allLowerCase = false;\n            }\n            if (!strKey.equals(strKey.toUpperCase())) {\n                allUpperCase = false;\n            }\n        }\n\n        return allLowerCase || allUpperCase;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.check_dict_case(Map.of(\"a\", \"apple\", \"b\", \"banana\"))); // True\n        System.out.println(solution.check_dict_case(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"banana\"))); // False\n        System.out.println(solution.check_dict_case(Map.of(\"a\", \"apple\", 8, \"banana\", \"a\", \"apple\"))); // False\n        System.out.println(solution.check_dict_case(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\"))); // False\n        System.out.println(solution.check_dict_case(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))); // True\n    }\n}\n"}
{"task_id": "Java/96", "generation": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Solution {\n\n    /**\n     * Implement a function that takes an non-negative integer and returns an array of the first n\n     * integers that are prime numbers and less than n.\n     *\n     * @param n The upper limit (non-inclusive) to find prime numbers up to.\n     * @return A List containing the prime numbers less than n.\n     */\n    public List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<>();\n        \n        for (int i = 2; i < n && primes.size() < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        \n        return primes;\n    }\n\n    /**\n     * Helper method to check if a number is prime.\n     *\n     * @param num The number to check for primality.\n     * @return true if the number is prime, false otherwise.\n     */\n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.count_up_to(5));   // [2, 3]\n        System.out.println(solution.count_up_to(11));  // [2, 3, 5, 7]\n        System.out.println(solution.count_up_to(0));   // []\n        System.out.println(solution.count_up_to(20));  // [2, 3, 5, 7, 11, 13, 17, 19]\n        System.out.println(solution.count_up_to(1));   // []\n        System.out.println(solution.count_up_to(18));  // [2, 3, 5, 7, 11, 13, 17]\n    }\n}\n"}
{"task_id": "Java/97", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Complete the function that takes two integers and returns\n     * the product of their unit digits.\n     * Assume the input is always valid.\n     * Examples:\n     * multiply(148, 412) should return 16.\n     * multiply(19, 28) should return 72.\n     * multiply(2020, 1851) should return 0.\n     * multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        // Extract the unit digits of both numbers\n        int unitDigitA = Math.abs(a % 10);\n        int unitDigitB = Math.abs(b % 10);\n\n        // Return the product of the unit digits\n        return unitDigitA * unitDigitB;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.multiply(148, 412)); // Expected output: 16\n        System.out.println(solution.multiply(19, 28));   // Expected output: 72\n        System.out.println(solution.multiply(2020, 1851)); // Expected output: 0\n        System.out.println(solution.multiply(14, -15));  // Expected output: 20\n    }\n}\n"}
{"task_id": "Java/98", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given a string s, count the number of uppercase vowels in even indices.\n     *\n     * For example:\n     * count_upper(\"aBCdEf\") returns 1\n     * count_upper(\"abcdefg\") returns 0\n     * count_upper(\"dBBE\") returns 0\n     */\n    public int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.count_upper(\"aBCdEf\"));  // Expected output: 1\n        System.out.println(solution.count_upper(\"abcdefg\")); // Expected output: 0\n        System.out.println(solution.count_upper(\"dBBE\"));    // Expected output: 0\n        System.out.println(solution.count_upper(\"AeIoUc\"));  // Expected output: 3\n        System.out.println(solution.count_upper(\"zZzZ\"));    // Expected output: 2\n    }\n}\n"}
{"task_id": "Java/99", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Create a function that takes a value (string) representing a number and returns the closest integer to it.\n     * If the number is equidistant from two integers, round it away from zero.\n     *\n     * Examples:\n     * >>> closest_integer(\"10\")\n     * 10\n     * >>> closest_integer(\"15.3\")\n     * 15\n     * >>> closest_integer(\"14.5\")\n     * 15\n     * >>> closest_integer(\"-14.5\")\n     * -15\n     */\n    public int closest_integer(String value) {\n        double num = Double.parseDouble(value);\n        double fractionalPart = num % 1;\n        \n        if (Math.abs(fractionalPart) == 0.5) {\n            return (int)(num > 0 ? Math.ceil(num) : Math.floor(num));\n        } else {\n            return (int)Math.round(num);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.closest_integer(\"10\"));   // Expected output: 10\n        System.out.println(solution.closest_integer(\"15.3\")); // Expected output: 15\n        System.out.println(solution.closest_integer(\"14.5\")); // Expected output: 15\n        System.out.println(solution.closest_integer(\"-14.5\"));// Expected output: -15\n    }\n}\n"}
{"task_id": "Java/100", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a positive integer n, you have to make a pile of n levels of stones.\n     * The first level has n stones.\n     * The number of stones in the next level is:\n     * - the next odd number if n is odd.\n     * - the next even number if n is even.\n     * Return the number of stones in each level in a list, where element at index\n     * i represents the number of stones in the level (i+1).\n     *\n     * Examples:\n     * >>> make_a_pile(3)\n     * [3, 5, 7]\n     */\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 0; i < n; i++) {\n            int stones = n + 2 * i;\n            if ((n & 1) == 1 && (i & 1) == 0) { // If n is odd and i is even\n                stones += 1; // Make it the next odd number\n            } else if ((n & 1) == 0 && (i & 1) == 1) { // If n is even and i is odd\n                stones -= 1; // Make it the next even number\n            }\n            result.add(stones);\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.make_a_pile(3)); // Expected: [3, 5, 7]\n        System.out.println(solution.make_a_pile(4)); // Expected: [4, 6, 8, 10]\n        System.out.println(solution.make_a_pile(1)); // Expected: [1]\n        System.out.println(solution.make_a_pile(2)); // Expected: [2, 4]\n    }\n}\n"}
{"task_id": "Java/101", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You will be given a string of words separated by commas or spaces. Your task is\n     * to split the string into words and return an array of the words.\n     *\n     * For example:\n     * words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n     * words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six])\n     */\n    public List<String> words_string(String s) {\n        // Split the string by commas and spaces\n        String[] wordsArray = s.split(\"[,\\\\s]+\");\n        \n        // Convert the array to a list\n        return Arrays.asList(wordsArray);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"))); // Expected: true\n        System.out.println(solution.words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))); // Expected: true\n\n        // Additional test cases\n        System.out.println(solution.words_string(\"Hello,world!\").equals(Arrays.asList(\"Hello\", \"world!\"))); // Expected: true\n        System.out.println(solution.words_string(\"This is a test.\").equals(Arrays.asList(\"This\", \"is\", \"a\", \"test.\"))); // Expected: true\n    }\n}\n"}
{"task_id": "Java/102", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * This function takes two positive numbers x and y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.\n     *\n     * For example:\n     * choose_num(12, 15) = 14\n     * choose_num(13, 12) = -1\n     */\n    public int choose_num(int x, int y) {\n        // If x is greater than y, return -1 as there's no valid range.\n        if (x > y) {\n            return -1;\n        }\n        \n        // Start from the end of the range and check for the biggest even number\n        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                return i;\n            }\n        }\n        \n        // If no even number is found, return -1\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.choose_num(12, 15)); // Expected output: 14\n        System.out.println(solution.choose_num(13, 12)); // Expected output: -1\n        System.out.println(solution.choose_num(10, 20)); // Expected output: 20\n        System.out.println(solution.choose_num(21, 29)); // Expected output: 28\n        System.out.println(solution.choose_num(30, 30)); // Expected output: 30\n        System.out.println(solution.choose_num(31, 25)); // Expected output: -1 (since the range is invalid)\n    }\n}\n"}
{"task_id": "Java/103", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given two positive integers n and m, and your task is to compute the\n     * average of the integers from n through m (including n and m).\n     * Round the answer to the nearest integer and convert that to binary.\n     * If n is greater than m, return -1.\n     * Example:\n     * rounded_avg(1, 5) => \"11\"\n     * rounded_avg(7, 5) => -1\n     * rounded_avg(10, 20) => \"1111\"\n     * rounded_avg(20, 33) => \"11011\"\n     */\n    public Object rounded_avg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        \n        long sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        \n        double average = sum / ((double)(m - n + 1));\n        int roundedAverage = (int)Math.round(average);\n        \n        return Integer.toBinaryString(roundedAverage);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.rounded_avg(1, 5));   // Expected output: \"11\"\n        System.out.println(solution.rounded_avg(7, 5));   // Expected output: -1\n        System.out.println(solution.rounded_avg(10, 20)); // Expected output: \"1111\"\n        System.out.println(solution.rounded_avg(20, 33)); // Expected output: \"11011\"\n    }\n}\n"}
{"task_id": "Java/104", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given a list of positive integers x. return a sorted list of all\n     * elements that hasn't any even digit.\n     *\n     * Note: Returned list should be sorted in increasing order.\n     */\n    public List<Integer> unique_digits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (Integer num : x) {\n            if (!hasEvenDigit(num)) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        return result;\n    }\n\n    private boolean hasEvenDigit(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return true;\n            }\n            num /= 10;\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(15, 33, 1422, 1);\n        System.out.println(solution.unique_digits(test1)); // Expected: [1, 15, 33]\n\n        List<Integer> test2 = Arrays.asList(152, 323, 1422, 10);\n        System.out.println(solution.unique_digits(test2)); // Expected: []\n\n        List<Integer> test3 = Arrays.asList(7, 89, 135, 246, 357);\n        System.out.println(solution.unique_digits(test3)); // Expected: [7, 89, 135, 357]\n    }\n}\n"}
{"task_id": "Java/105", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n     * reverse the resulting array, and then replace each digit by its corresponding name from\n     * \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n     *\n     * @param arr the input list of integers\n     * @return a list of strings representing the names of the digits in reverse sorted order\n     */\n    public List<String> by_length(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        // Filter out numbers not between 1 and 9 inclusive\n        List<Integer> filtered = arr.stream()\n                                     .filter(num -> num >= 1 && num <= 9)\n                                     .sorted()\n                                     .collect(Collectors.toList());\n\n        Collections.reverse(filtered);\n\n        List<String> result = new ArrayList<>();\n        for (Integer num : filtered) {\n            switch (num) {\n                case 1: result.add(\"One\"); break;\n                case 2: result.add(\"Two\"); break;\n                case 3: result.add(\"Three\"); break;\n                case 4: result.add(\"Four\"); break;\n                case 5: result.add(\"Five\"); break;\n                case 6: result.add(\"Six\"); break;\n                case 7: result.add(\"Seven\"); break;\n                case 8: result.add(\"Eight\"); break;\n                case 9: result.add(\"Nine\"); break;\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3);\n        System.out.println(solution.by_length(test1)); // Expected: [Eight, Five, Four, Three, Two, Two, One, One]\n\n        List<Integer> test2 = new ArrayList<>();\n        System.out.println(solution.by_length(test2)); // Expected: []\n\n        List<Integer> test3 = Arrays.asList(1, -1, 55);\n        System.out.println(solution.by_length(test3)); // Expected: [One]\n    }\n}\n"}
{"task_id": "Java/106", "generation": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Solution {\n    /**\n     * Implement the function f that takes n as a parameter,\n     * and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n     * or the sum of numbers from 1 to i otherwise.\n     * i starts from 1.\n     * The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n     * Example:\n     * f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                // Calculate factorial of i\n                int factorial = calculateFactorial(i);\n                result.add(factorial);\n            } else {\n                // Calculate sum from 1 to i\n                int sum = calculateSum(i);\n                result.add(sum);\n            }\n        }\n        \n        return result;\n    }\n\n    private int calculateFactorial(int n) {\n        if (n == 0 || n == 1) {\n            return 1;\n        }\n        int factorial = 1;\n        for (int i = 2; i <= n; i++) {\n            factorial *= i;\n        }\n        return factorial;\n    }\n\n    private int calculateSum(int n) {\n        return n * (n + 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.f(5));  // Expected output: [1, 2, 6, 24, 15]\n        System.out.println(solution.f(3));  // Expected output: [1, 2, 3]\n        System.out.println(solution.f(0));  // Expected output: []\n    }\n}\n"}
{"task_id": "Java/107", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a positive integer n, return a tuple that has the number of even and odd\n     * integer palindromes that fall within the range(1, n), inclusive.\n     *\n     * @param n The upper limit (inclusive) to check for palindromes.\n     * @return A List containing two integers: the first is the count of even palindromes,\n     *         and the second is the count of odd palindromes.\n     */\n    public List<Integer> even_odd_palindrome(int n) {\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        return Arrays.asList(evenCount, oddCount);\n    }\n\n    private boolean isPalindrome(int number) {\n        String numStr = Integer.toString(number);\n        int left = 0;\n        int right = numStr.length() - 1;\n\n        while (left < right) {\n            if (numStr.charAt(left) != numStr.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.even_odd_palindrome(3));  // Output: [1, 2]\n        System.out.println(solution.even_odd_palindrome(12)); // Output: [4, 6]\n        System.out.println(solution.even_odd_palindrome(100)); // Additional test case\n    }\n}\n"}
{"task_id": "Java/108", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Write a function count_nums which takes an array of integers and returns\n     * the number of elements which has a sum of digits > 0.\n     * If a number is negative, then its first signed digit will be negative:\n     * e.g. -123 has signed digits -1, 2, and 3.\n     *\n     * @param arr the input list of integers\n     * @return the count of numbers with a positive sum of digits\n     */\n    public int count_nums(List<Integer> arr) {\n        int count = 0;\n        for (Integer num : arr) {\n            if (sumOfDigits(num) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private int sumOfDigits(int num) {\n        boolean isNegative = num < 0;\n        int sum = 0;\n        while (num != 0) {\n            int digit = num % 10;\n            if (isNegative && digit == -num % 10) {\n                // If the number is negative, use the first signed digit\n                sum -= digit;\n            } else {\n                sum += digit;\n            }\n            num /= 10;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.count_nums(new ArrayList<>()) == 0); // true\n        System.out.println(solution.count_nums(Arrays.asList(-1, 11, -11)) == 1); // true\n        System.out.println(solution.count_nums(Arrays.asList(1, 1, 2)) == 3); // true\n    }\n}\n"}
{"task_id": "Java/109", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N]. The\n     * numbers in the array will be randomly ordered. Your task is to determine if\n     * it is possible to get an array sorted in non-decreasing order by performing\n     * the following operation on the given array:\n     *      You are allowed to perform right shift operation any number of times.\n     *\n     * One right shift operation means shifting all elements of the array by one\n     * position in the right direction. The last element of the array will be moved to\n     * the starting position in the array i.e. 0th index.\n     *\n     * If it is possible to obtain the sorted array by performing the above operation\n     * then return true else return False.\n     * If the given array is empty then return true.\n     *\n     * Note: The given list is guaranteed to have unique elements.\n     */\n    public boolean move_one_ball(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        int n = arr.size();\n        for (int i = 0; i < n - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                // Check if the array can be sorted by a single right shift\n                List<Integer> shiftedArr = new ArrayList<>(arr);\n                Collections.rotate(shiftedArr, 1);\n                for (int j = 0; j < n - 1; j++) {\n                    if (shiftedArr.get(j) > shiftedArr.get(j + 1)) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n\n        // If no out-of-order elements found, the array is already sorted\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.move_one_ball(Arrays.asList(3, 4, 5, 1, 2))); // true\n        System.out.println(solution.move_one_ball(Arrays.asList(3, 5, 4, 1, 2))); // false\n        System.out.println(solution.move_one_ball(Arrays.asList()));             // true\n        System.out.println(solution.move_one_ball(Arrays.asList(1, 2, 3, 4, 5))); // true\n        System.out.println(solution.move_one_ball(Arrays.asList(5, 1, 2, 3, 4))); // true\n    }\n}\n"}
{"task_id": "Java/110", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * In this problem, you will implement a function that takes two lists of numbers,\n     * and determines whether it is possible to perform an exchange of elements\n     * between them to make lst1 a list of only even numbers.\n     * There is no limit on the number of exchanged elements between lst1 and lst2.\n     * If it is possible to exchange elements between the lst1 and lst2 to make\n     * all the elements of lst1 to be even, return \"YES\".\n     * Otherwise, return \"NO\".\n     * For example:\n     * exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n     * exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n     * It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Count odd numbers in lst1 and even numbers in lst2\n        int oddCountInLst1 = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCountInLst1++;\n            }\n        }\n\n        int evenCountInLst2 = 0;\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCountInLst2++;\n            }\n        }\n\n        // If there are enough even numbers in lst2 to replace all odd numbers in lst1, return \"YES\"\n        if (oddCountInLst1 <= evenCountInLst2) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4))); // Expected: \"YES\"\n        System.out.println(solution.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4))); // Expected: \"NO\"\n        System.out.println(solution.exchange(Arrays.asList(1, 3, 5, 7), Arrays.asList(2, 4, 6, 8))); // Expected: \"YES\"\n        System.out.println(solution.exchange(Arrays.asList(1, 3, 5, 7), Arrays.asList(1, 3, 5, 7))); // Expected: \"NO\"\n    }\n}\n"}
{"task_id": "Java/111", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given a string representing a space separated lowercase letters, return a dictionary\n     of the letter with the most repetition and containing the corresponding count.\n     If several letters have the same occurrence, return all of them.\n\n     Example:\n     histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n     histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n     histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n     histogram(\"b b b b a\") == {\"b\": 4}\n     histogram(\"\") == {}\n      */\n    public Map<String, Integer> histogram(String test) {\n        if (test.isEmpty()) {\n            return new HashMap<>();\n        }\n\n        String[] letters = test.split(\" \");\n        Map<String, Integer> letterCountMap = new HashMap<>();\n\n        for (String letter : letters) {\n            if (!letter.trim().isEmpty()) { // Ignore empty strings\n                letterCountMap.put(letter, letterCountMap.getOrDefault(letter, 0) + 1);\n            }\n        }\n\n        int maxCount = Collections.max(letterCountMap.values());\n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : letterCountMap.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.histogram(\"a b c\")); // {\"a\": 1, \"b\": 1, \"c\": 1}\n        System.out.println(solution.histogram(\"a b b a\")); // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"a b c a b\")); // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"b b b b a\")); // {\"b\": 4}\n        System.out.println(solution.histogram(\"\")); // {}\n    }\n}\n"}
{"task_id": "Java/112", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Task\n     * We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n     * then check if the result string is palindrome.\n     * A string is called palindrome if it reads the same backward as forward.\n     * You should return a tuple containing the result string and true/false for the check.\n     * Example:\n     * For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n     * For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n     * For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverse_delete(String s, String c) {\n        // Create a set of characters to delete\n        Set<Character> charsToDelete = new HashSet<>();\n        for (char ch : c.toCharArray()) {\n            charsToDelete.add(ch);\n        }\n\n        // Build the result string by removing characters in 's' that are in 'charsToDelete'\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!charsToDelete.contains(ch)) {\n                result.append(ch);\n            }\n        }\n\n        // Check if the result string is a palindrome\n        String reversedResult = result.reverse().toString();\n        boolean isPalindrome = result.toString().equals(reversedResult);\n\n        return Arrays.asList(result.toString(), isPalindrome);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.reverse_delete(\"abcde\", \"ae\"));  // Expected: [bcd, false]\n        System.out.println(solution.reverse_delete(\"abcdef\", \"b\"));  // Expected: [acdef, false]\n        System.out.println(solution.reverse_delete(\"abcdedcba\", \"ab\"));  // Expected: [cdedc, true]\n    }\n}\n"}
{"task_id": "Java/113", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     Given a list of strings, where each string consists of only digits, return a list.\n     Each element i of the output should be \"the number of odd elements in the\n     string i of the input.\" where all the i's should be replaced by the number\n     of odd digits in the i\"th string of the input.\n\n     >>> odd_count(Arrays.asList(\"1234567\"))\n     [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n     >>> odd_count(Arrays.asList(\"3\",\"11111111\"))\n     [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n      \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            int count = 0;\n            for (char c : s.toCharArray()) {\n                if ((c - '0') % 2 != 0) {\n                    count++;\n                }\n            }\n            String formattedResult = \"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\";\n            result.add(formattedResult);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1\n        List<String> input1 = Arrays.asList(\"1234567\");\n        System.out.println(solution.odd_count(input1));\n        \n        // Expected output: [the number of odd elements 4n the str4ng 4 of the 4nput.]\n\n        // Test case 2\n        List<String> input2 = Arrays.asList(\"3\", \"11111111\");\n        System.out.println(solution.odd_count(input2));\n        \n        // Expected output: \n        // [the number of odd elements 1n the str1ng 1 of the 1nput.]\n        // [the number of odd elements 8n the str8ng 8 of the 8nput.]\n    }\n}\n"}
{"task_id": "Java/114", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given an array of integers nums, find the minimum sum of any non-empty sub-array\n     * of nums.\n     *\n     * Example:\n     * minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n     * minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        if (nums == null || nums.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list cannot be null or empty\");\n        }\n\n        int currentMin = nums.get(0);\n        int globalMin = nums.get(0);\n\n        for (int i = 1; i < nums.size(); i++) {\n            currentMin = Math.min(nums.get(i), currentMin + nums.get(i));\n            globalMin = Math.min(globalMin, currentMin);\n        }\n\n        return globalMin;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4))); // Expected output: 1\n        System.out.println(solution.minSubArraySum(Arrays.asList(-1, -2, -3)));       // Expected output: -6\n        System.out.println(solution.minSubArraySum(Arrays.asList(1, 2, 3, -6, 1)));   // Expected output: -6\n        System.out.println(solution.minSubArraySum(Arrays.asList(1, 2, 3, 4, 5)));    // Expected output: 1\n        System.out.println(solution.minSubArraySum(Arrays.asList(-1, -2, -3, -4)));   // Expected output: -10\n    }\n}\n"}
{"task_id": "Java/115", "generation": "import java.util.List;\n\nclass Solution {\n    /**\n     * You are given a rectangular grid of wells. Each row represents a single well,\n     * and each 1 in a row represents a single unit of water.\n     * Each well has a corresponding bucket that can be used to extract water from it,\n     * and all buckets have the same capacity. Can't use buckets from other wells to extract water from one well.\n     * Your task is to use the buckets to empty the wells.\n     * Output the number of times you need to lower the buckets.\n     *\n     * @param grid a 2D list representing the grid of wells\n     * @param capacity the capacity of each bucket\n     * @return the number of times buckets need to be lowered\n     */\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        int totalLowerings = 0;\n        \n        for (List<Integer> well : grid) {\n            int waterUnits = 0;\n            for (int unit : well) {\n                waterUnits += unit;\n            }\n            \n            totalLowerings += Math.ceil((double) waterUnits / capacity);\n        }\n        \n        return totalLowerings;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<List<Integer>> grid1 = Arrays.asList(\n                Arrays.asList(0, 0, 1, 0),\n                Arrays.asList(0, 1, 0, 0),\n                Arrays.asList(1, 1, 1, 1)\n        );\n        int capacity1 = 1;\n        System.out.println(solution.max_fill(grid1, capacity1)); // Output: 6\n\n        // Test case 2\n        List<List<Integer>> grid2 = Arrays.asList(\n                Arrays.asList(0, 0, 1, 1),\n                Arrays.asList(0, 0, 0, 0),\n                Arrays.asList(1, 1, 1, 1),\n                Arrays.asList(0, 1, 1, 1)\n        );\n        int capacity2 = 2;\n        System.out.println(solution.max_fill(grid2, capacity2)); // Output: 5\n\n        // Test case 3\n        List<List<Integer>> grid3 = Arrays.asList(\n                Arrays.asList(0, 0, 0),\n                Arrays.asList(0, 0, 0)\n        );\n        int capacity3 = 5;\n        System.out.println(solution.max_fill(grid3, capacity3)); // Output: 0\n    }\n}\n"}
{"task_id": "Java/116", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * In this Kata, you have to sort an array of integers according to\n     * number of ones in their binary representation in ascending order.\n     * For similar number of ones, sort based on decimal value.\n     *\n     * It must be implemented like this:\n     * >>> sort_array(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 4, 3, 5))\n     * >>> sort_array(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-4, -2, -6, -5, -3))\n     * >>> sort_array(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 4, 3))\n     */\n    public List<Integer> sort_array(List<Integer> arr) {\n        // Sort the array based on the number of ones in binary representation and then by decimal value\n        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int countOnesO1 = Integer.bitCount(o1);\n                int countOnesO2 = Integer.bitCount(o2);\n\n                if (countOnesO1 == countOnesO2) {\n                    return o1.compareTo(o2);\n                }\n\n                return countOnesO1 - countOnesO2;\n            }\n        });\n\n        return arr;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(1, 5, 2, 3, 4);\n        System.out.println(\"Test Case 1: \" + solution.sort_array(test1).equals(Arrays.asList(1, 2, 4, 3, 5)));\n\n        List<Integer> test2 = Arrays.asList(-2, -3, -4, -5, -6);\n        System.out.println(\"Test Case 2: \" + solution.sort_array(test2).equals(Arrays.asList(-4, -2, -6, -5, -3)));\n\n        List<Integer> test3 = Arrays.asList(1, 0, 2, 3, 4);\n        System.out.println(\"Test Case 3: \" + solution.sort_array(test3).equals(Arrays.asList(0, 1, 2, 4, 3)));\n    }\n}\n"}
{"task_id": "Java/117", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given a string s and a natural number n, you have been tasked to implement\n     a function that returns a list of all words from string s that contain exactly\n     n consonants, in order these words appear in the string s.\n     If the string s is empty then the function should return an empty list.\n     Note: you may assume the input string contains only letters and spaces.\n     Examples:\n     select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n     select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n     select_words(\"simple white space\", 2) ==> []\n     select_words(\"Hello world\", 4) ==> [\"world\"]\n     select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n      */\n    public List<String> select_words(String s, int n) {\n        if (s == null || s.isEmpty()) return new ArrayList<>();\n        \n        String[] words = s.split(\"\\\\s+\");\n        List<String> result = new ArrayList<>();\n        \n        for (String word : words) {\n            long consonantsCount = word.chars()\n                                        .filter(c -> \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\".indexOf(c) != -1)\n                                        .count();\n            \n            if (consonantsCount == n) {\n                result.add(word);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.select_words(\"Mary had a little lamb\", 4)); // [\"little\"]\n        System.out.println(solution.select_words(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\n        System.out.println(solution.select_words(\"simple white space\", 2));     // []\n        System.out.println(solution.select_words(\"Hello world\", 4));            // [\"world\"]\n        System.out.println(solution.select_words(\"Uncle sam\", 3));              // [\"Uncle\"]\n    }\n}\n"}
{"task_id": "Java/118", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You are given a word. Your task is to find the closest vowel that stands between\n     * two consonants from the right side of the word (case sensitive).\n     *\n     * Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n     * find any vowel met the above condition.\n     *\n     * You may assume that the given string contains English letter only.\n     */\n    public String get_closest_vowel(String word) {\n        // Define vowels for easy checking\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        \n        // Iterate from the end of the string to find the closest vowel between two consonants\n        for (int i = word.length() - 2; i > 0; i--) {\n            char currentChar = word.charAt(i);\n            if (vowels.contains(currentChar)) {\n                return String.valueOf(currentChar);\n            }\n            // Check if both characters before and after the current character are consonants\n            if (!vowels.contains(word.charAt(i - 1)) && !vowels.contains(word.charAt(i + 1))) {\n                return \"\";\n            }\n        }\n        \n        return \"\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.get_closest_vowel(\"yogurt\")); // Output: \"u\"\n        System.out.println(solution.get_closest_vowel(\"FULL\"));   // Output: \"U\"\n        System.out.println(solution.get_closest_vowel(\"quick\"));  // Output: \"\"\n        System.out.println(solution.get_closest_vowel(\"ab\"));     // Output: \"\"\n        System.out.println(solution.get_closest_vowel(\"aBcDeFgHiJkLmNoPqRsTuVwXyZ\")); // Output: \"e\"\n    }\n}\n"}
{"task_id": "Java/119", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given a list of two strings, both strings consist of open\n     * parentheses \"(\" or close parentheses \")\" only.\n     * Your job is to check if it is possible to concatenate the two strings in\n     * some order, that the resulting string will be good.\n     * A string S is considered to be good if and only if all parentheses in S\n     * are balanced. For example: the string \"(())()\" is good, while the string\n     * \"())\" is not.\n     * Return \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\n     Examples:\n     match_parens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n     match_parens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String match_parens(List<String> lst) {\n        // Check if the first or second string alone is balanced\n        if (isBalanced(lst.get(0)) || isBalanced(lst.get(1))) {\n            return \"Yes\";\n        }\n\n        // Try concatenating in both possible orders and check for balance\n        String concat1 = lst.get(0) + lst.get(1);\n        String concat2 = lst.get(1) + lst.get(0);\n\n        if (isBalanced(concat1) || isBalanced(concat2)) {\n            return \"Yes\";\n        }\n\n        return \"No\";\n    }\n\n    // Helper method to check if a string has balanced parentheses\n    private boolean isBalanced(String s) {\n        int balance = 0;\n        for (char c : s.toCharArray()) {\n            if (c == '(') {\n                balance++;\n            } else if (c == ')') {\n                balance--;\n            }\n            if (balance < 0) {\n                return false; // A closing parenthesis before an opening one\n            }\n        }\n        return balance == 0; // All parentheses are balanced\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.match_parens(Arrays.asList(\"()(\", \")\"))); // Expected: Yes\n        System.out.println(solution.match_parens(Arrays.asList(\")\", \")\")));   // Expected: No\n        System.out.println(solution.match_parens(Arrays.asList(\"(())\", \"()\"))); // Expected: Yes\n        System.out.println(solution.match_parens(Arrays.asList(\"(()\", \")))\"))); // Expected: Yes\n        System.out.println(solution.match_parens(Arrays.asList(\"(\", \"(\")));    // Expected: No\n    }\n}\n"}
{"task_id": "Java/120", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     Given an array arr of integers and a positive integer k, return a sorted list\n     of length k with the maximum k numbers in arr, in ascending order.\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Create a min-heap to keep track of the top k elements\n        PriorityQueue<Integer> minHeap = new PriorityQueue<>(k);\n        \n        for (int num : arr) {\n            if (minHeap.size() < k) {\n                minHeap.offer(num); // Add element to heap if it's not full yet\n            } else if (num > minHeap.peek()) {\n                minHeap.poll(); // Remove the smallest element and add the current one\n                minHeap.offer(num);\n            }\n        }\n\n        // Convert the min-heap to a list and sort it in ascending order\n        List<Integer> result = new ArrayList<>(minHeap);\n        Collections.sort(result);\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.maximum(Arrays.asList(-3, -4, 5), 3)); // [-4, -3, 5]\n        System.out.println(solution.maximum(Arrays.asList(4, -4, 4), 2));   // [4, 4]\n        System.out.println(solution.maximum(Arrays.asList(-3, 2, 1, 2, -1, -2, 1), 1)); // [2]\n    }\n}\n"}
{"task_id": "Java/121", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n     *\n     * Examples:\n     * solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n     * solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n     * solution(Arrays.asList(30, 13, 24, 321)) ==> 0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.solution(Arrays.asList(5, 8, 7, 1))); // Expected output: 12\n        System.out.println(solution.solution(Arrays.asList(3, 3, 3, 3, 3))); // Expected output: 9\n        System.out.println(solution.solution(Arrays.asList(30, 13, 24, 321))); // Expected output: 0\n    }\n}\n"}
{"task_id": "Java/122", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given a non-empty array of integers arr and an integer k, return\n     the sum of the elements with at most two digits from the first k elements of arr.\n\n     Example:\n\n         Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n         Output: 24 # sum of 21 + 3\n\n     Constraints:\n         1. 1 <= len(arr) <= 100\n         2. 1 <= k <= len(arr)\n      */\n    public int add_elements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < Math.min(k, arr.size()); i++) {\n            if (arr.get(i) >= -99 && arr.get(i) <= 99 || arr.get(i) >= 1000 && arr.get(i) <= 9999) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9);\n        int k1 = 4;\n        System.out.println(solution.add_elements(test1, k1)); // Expected output: 24\n\n        List<Integer> test2 = Arrays.asList(10, 20, 30, 40, 50, 60, 70, 80, 90);\n        int k2 = 5;\n        System.out.println(solution.add_elements(test2, k2)); // Expected output: 150\n\n        List<Integer> test3 = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n        int k3 = 10;\n        System.out.println(solution.add_elements(test3, k3)); // Expected output: 55\n\n        List<Integer> test4 = Arrays.asList(12345, -6789, 101, 11, 12);\n        int k4 = 5;\n        System.out.println(solution.add_elements(test4, k4)); // Expected output: 13\n    }\n}\n"}
{"task_id": "Java/123", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n     *\n     * @param n A positive integer for which to generate the Collatz sequence and extract odd numbers.\n     * @return A List of Integer containing the odd numbers from the Collatz sequence of n, sorted in increasing order.\n     */\n    public List<Integer> get_odd_collatz(int n) {\n        List<Integer> result = new ArrayList<>();\n        while (n != 1) {\n            if (n % 2 == 1) { // Check if n is odd\n                result.add(n);\n            }\n            n = (n % 2 == 0) ? n / 2 : 3 * n + 1; // Apply Collatz rules\n        }\n        result.add(1); // Add the final number in the sequence, which is always 1\n        Collections.sort(result); // Sort the list in increasing order\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.get_odd_collatz(5)); // Expected: [1, 5]\n        System.out.println(solution.get_odd_collatz(7)); // Expected: [1, 7, 11, 22]\n        System.out.println(solution.get_odd_collatz(10)); // Expected: [1, 3, 5, 15]\n    }\n}\n"}
{"task_id": "Java/124", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You have to write a function which validates a given date string and\n     * returns true if the date is valid otherwise false.\n     * The date is valid if all of the following rules are satisfied:\n     * 1. The date string is not empty.\n     * 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n     * 3. The months should not be less than 1 or higher than 12.\n     * 4. The date should be in the format: mm-dd-yyyy\n     *\n     * @param date the date string to validate\n     * @return true if the date is valid, false otherwise\n     */\n    public boolean valid_date(String date) {\n        // Split the date into components\n        String[] parts = date.split(\"-\");\n        \n        // Check if there are exactly 3 parts (mm-dd-yyyy)\n        if (parts.length != 3) return false;\n        \n        int month, day, year;\n        \n        try {\n            month = Integer.parseInt(parts[0]);\n            day = Integer.parseInt(parts[1]);\n            year = Integer.parseInt(parts[2]);\n        } catch (NumberFormatException e) {\n            return false; // If any part is not a number\n        }\n        \n        // Check if the month is valid\n        if (month < 1 || month > 12) return false;\n        \n        // Check for leap year and February days\n        boolean isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));\n        int maxDaysInMonth = new int[]{31, 28 + (isLeapYear ? 1 : 0), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}[month - 1];\n        \n        // Check if the day is valid\n        return day >= 1 && day <= maxDaysInMonth;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.valid_date(\"03-11-2000\")); // true\n        System.out.println(solution.valid_date(\"15-01-2012\")); // false\n        System.out.println(solution.valid_date(\"04-0-2040\"));  // false\n        System.out.println(solution.valid_date(\"06-04-2020\")); // true\n        System.out.println(solution.valid_date(\"06/04/2020\")); // false (wrong format)\n    }\n}\n"}
{"task_id": "Java/125", "generation": "import java.util.List;\n\nclass Solution {\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(splitWords(\"Hello world!\").equals(List.of(\"Hello\", \"world!\")) ? \"Test 1 Passed\" : \"Test 1 Failed\");\n        System.out.println(splitWords(\"Hello,world!\").equals(List.of(\"Hello\", \"world!\")) ? \"Test 2 Passed\" : \"Test 2 Failed\");\n        System.out.println(splitWords(\"abcdef\").equals(3) ? \"Test 3 Passed\" : \"Test 3 Failed\");\n        System.out.println(splitWords(\"No,whitespace\").equals(List.of(\"No\", \"whitespace\")) ? \"Test 4 Passed\" : \"Test 4 Failed\");\n        System.out.println(splitWords(\"no,commas,too\").equals(List.of(\"no\", \"commas\", \"too\")) ? \"Test 5 Passed\" : \"Test 5 Failed\");\n        System.out.println(splitWords(\"AaBbCc\").equals(3) ? \"Test 6 Passed\" : \"Test 6 Failed\"); // 'a', 'b', and 'c' have odd orders\n    }\n\n    /**\n     * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n     * should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n     * alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n     *\n     * @param txt The input string to be processed.\n     * @return A list of words or an integer representing the count of lowercase letters with odd order in the alphabet.\n     */\n    public static Object splitWords(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\"\\\\s+\"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && ((c - 'a') % 2 == 1)) {\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n}\n"}
{"task_id": "Java/126", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a list of numbers, return whether or not they are sorted in ascending order.\n     * If the a number appears more than twice, return false. Assume no negative numbers and only integers.\n     *\n     * @param lst the list of integers to check\n     * @return true if the list is sorted in ascending order with no number appearing more than twice, otherwise false\n     */\n    public boolean is_sorted(List<Integer> lst) {\n        if (lst == null || lst.size() <= 1) return true;\n\n        int count = 1;\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i).equals(lst.get(i - 1))) {\n                count++;\n                if (count > 2) return false;\n            } else {\n                count = 1;\n            }\n            if (lst.get(i) < lst.get(i - 1)) return false;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.is_sorted(Arrays.asList(5))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 3, 4, 5))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 3, 2, 4, 5))); // false\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7))); // false\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 2, 3, 3, 4))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 2, 2, 3, 4))); // false\n    }\n}\n"}
{"task_id": "Java/127", "generation": "import java.util.List;\n\nclass Solution {\n    /**\n     * You are given two intervals,\n     * where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n     * The given intervals are closed which means that the interval (start, end)\n     * includes both start and end.\n     * For each given interval, it is assumed that its start is less or equal its end.\n     * Your task is to determine whether the length of intersection of these two\n     * intervals is a prime number.\n     * Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n     * which its length is 1, which not a prime number.\n     * If the length of the intersection is a prime number, return \"YES\",\n     * otherwise, return \"NO\".\n     * If the two intervals don't intersect, return \"NO\".\n     *\n     * @param interval1 The first interval as a list of two integers [start, end].\n     * @param interval2 The second interval as a list of two integers [start, end].\n     * @return \"YES\" if the length of intersection is a prime number, otherwise \"NO\".\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int startMax = Math.max(interval1.get(0), interval2.get(0));\n        int endMin = Math.min(interval1.get(1), interval2.get(1));\n\n        if (startMax > endMin) {\n            return \"NO\"; // No intersection\n        }\n\n        int intersectionLength = endMin - startMax + 1;\n\n        return isPrime(intersectionLength) ? \"YES\" : \"NO\";\n    }\n\n    private boolean isPrime(int number) {\n        if (number <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= number; i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.intersection(List.of(1, 2), List.of(2, 3))); // NO\n        System.out.println(solution.intersection(List.of(-1, 1), List.of(0, 4))); // NO\n        System.out.println(solution.intersection(List.of(-3, -1), List.of(-5, 5))); // YES\n    }\n}\n"}
{"task_id": "Java/128", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given an array arr of integers and you need to return\n     * sum of magnitudes of integers multiplied by product of all signs\n     * of each number in the array, represented by 1, -1 or 0.\n     * Note: return None for empty arr.\n     *\n     * Example:\n     * >>> prod_signs(Arrays.asList(1, 2, 2, -4)) == -9\n     * >>> prod_signs(Arrays.asList(0, 1)) == 0\n     * >>> prod_signs(Arrays.asList()) == Optional.empty()\n     */\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int magnitudeSum = 0;\n        int signProduct = 1;\n\n        for (Integer num : arr) {\n            if (num == 0) {\n                signProduct = 0; // If any number is zero, the product of signs will be zero\n                break;\n            }\n            magnitudeSum += Math.abs(num);\n            signProduct *= (num > 0 ? 1 : (num < 0 ? -1 : 0));\n        }\n\n        return Optional.of(magnitudeSum * signProduct);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.prod_signs(Arrays.asList(1, 2, 2, -4))); // Expected output: -9\n        System.out.println(solution.prod_signs(Arrays.asList(0, 1)));        // Expected output: Optional[0]\n        System.out.println(solution.prod_signs(Arrays.asList()));           // Expected output: Optional.empty\n    }\n}\n"}
{"task_id": "Java/129", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n     each cell of the grid contains a value. Every integer in the range [1, N * N]\n     inclusive appears exactly once on the cells of the grid.\n\n     You have to find the minimum path of length k in the grid. You can start\n     from any cell, and in each step you can move to any of the neighbor cells,\n     in other words, you can go to cells which share an edge with your current\n     cell.\n     Please note that a path of length k means visiting exactly k cells (not\n     necessarily distinct).\n     You CANNOT go off the grid.\n     A path A (of length k) is considered less than a path B (of length k) if\n     after making the ordered lists of the values on the cells that A and B go\n     through (let's call them lst_A and lst_B), lst_A is lexicographically less\n     than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n     such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n     lst_A[j] = lst_B[j].\n     It is guaranteed that the answer is unique.\n     Return an ordered list of the values on the cells that the minimum path go through.\n\n     Examples:\n\n         Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n         Output: [1, 2, 1]\n\n         Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n         Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                pq.offer(new int[]{grid.get(i).get(j), i, j});\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        while (!pq.isEmpty() && k > 0) {\n            int[] current = pq.poll();\n            if (k == 1) {\n                result.add(current[0]);\n                break;\n            }\n            for (int[] dir : new int[][]{{-1, 0}, {1, 0}, {0, -1}, {0, 1}}) {\n                int nx = current[1] + dir[0];\n                int ny = current[2] + dir[1];\n                if (nx >= 0 && nx < n && ny >= 0 && ny < n) {\n                    pq.offer(new int[]{grid.get(nx).get(ny), nx, ny});\n                }\n            }\n            k--;\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<List<Integer>> grid1 = Arrays.asList(\n            Arrays.asList(1, 2, 3),\n            Arrays.asList(4, 5, 6),\n            Arrays.asList(7, 8, 9)\n        );\n        int k1 = 3;\n        System.out.println(solution.minPath(grid1, k1)); // Expected: [1, 2, 1]\n\n        // Test case 2\n        List<List<Integer>> grid2 = Arrays.asList(\n            Arrays.asList(5, 9, 3),\n            Arrays.asList(4, 1, 6),\n            Arrays.asList(7, 8, 2)\n        );\n        int k2 = 1;\n        System.out.println(solution.minPath(grid2, k2)); // Expected: [1]\n    }\n}\n"}
{"task_id": "Java/130", "generation": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Solution {\n    /**\n     * Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n     * the last couple centuries. However, what people don't know is Tribonacci sequence.\n     * Tribonacci sequence is defined by the recurrence:\n     * tri(1) = 3\n     * tri(n) = 1 + n / 2, if n is even.\n     * tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n     * For example:\n     * tri(2) = 1 + (2 / 2) = 2\n     * tri(4) = 3\n     * tri(3) = tri(2) + tri(1) + tri(4)\n     *        = 2 + 3 + 3 = 8\n     * You are given a non-negative integer number n, you have to return a list of the\n     * first n + 1 numbers of the Tribonacci sequence.\n     *\n     * @param n A non-negative integer representing the length of the Tribonacci sequence to generate.\n     * @return A List<Integer> containing the first n + 1 numbers of the Tribonacci sequence.\n     */\n    public List<Integer> tri(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Input must be a non-negative integer\");\n        }\n\n        List<Integer> result = new ArrayList<>();\n        // Base cases\n        if (n >= 0) result.add(3);\n        if (n >= 1) result.add(2); // tri(2)\n        if (n >= 2) {\n            int tri1 = 3; // tri(1)\n            int tri2 = 2; // tri(2)\n            for (int i = 3; i <= n; i++) {\n                int nextTri = tri1 + tri2 + getTri(i + 1);\n                result.add(nextTri);\n                tri1 = tri2;\n                tri2 = nextTri;\n            }\n        }\n\n        return result;\n    }\n\n    // Helper method to calculate tri(n) for odd n\n    private int getTri(int n) {\n        if (n % 2 == 0) {\n            return 1 + n / 2;\n        } else {\n            return tri(n - 1) + tri(n - 2) + tri(n + 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.tri(3)); // Expected: [3, 2, 8]\n        System.out.println(solution.tri(5)); // Expected: [3, 2, 8, 14, 27]\n        System.out.println(solution.tri(0)); // Expected: [3]\n    }\n}\n"}
{"task_id": "Java/131", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given a positive integer n, return the product of the odd digits.\n     Return 0 if all digits are even.\n     For example:\n     digits(1)  == 1\n     digits(4)  == 0\n     digits(235) == 15\n     */\n    public int digits(int n) {\n        int product = 1;\n        boolean hasOddDigit = false;\n\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n                hasOddDigit = true;\n            }\n            n /= 10;\n        }\n\n        return hasOddDigit ? product : 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.digits(1));   // Output: 1\n        System.out.println(solution.digits(4));   // Output: 0\n        System.out.println(solution.digits(235)); // Output: 15\n        System.out.println(solution.digits(2468)); // Output: 0\n        System.out.println(solution.digits(13579)); // Output: 945\n    }\n}\n"}
{"task_id": "Java/132", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Create a function that takes a string as input which contains only square brackets.\n     * The function should return true if and only if there is a valid subsequence of brackets\n     * where at least one bracket in the subsequence is nested.\n     *\n     * @param string the input string containing only square brackets\n     * @return true if there is a nested subsequence, false otherwise\n     */\n    public boolean is_nested(String string) {\n        int balance = 0;\n        boolean hasNested = false;\n\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                balance++;\n                if (balance > 1) {\n                    hasNested = true;\n                }\n            } else if (c == ']') {\n                balance--;\n                if (balance < 0) {\n                    return false; // Unbalanced brackets\n                }\n            }\n        }\n\n        return hasNested && balance == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.is_nested(\"[[]]\")); // true\n        System.out.println(solution.is_nested(\"[]]]]]]][[[[[]\")); // false\n        System.out.println(solution.is_nested(\"[][]\")); // false\n        System.out.println(solution.is_nested(\"[]\")); // false\n        System.out.println(solution.is_nested(\"[[][]]\")); // true\n        System.out.println(solution.is_nested(\"[[]][[\")); // true\n    }\n}\n"}
{"task_id": "Java/133", "generation": "import java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Solution {\n    /**\n     * You are given a list of numbers.\n     * You need to return the sum of squared numbers in the given list,\n     * round each element in the list to the upper int(Ceiling) first.\n     *\n     * @param lst The input list of Double values\n     * @return The sum of squared ceiling-rounded numbers\n     */\n    public int sum_squares(List<Double> lst) {\n        return lst.stream()\n                  .mapToDouble(num -> Math.ceil(num))\n                  .map(num -> num * num)\n                  .sum();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sum_squares(Arrays.asList(1.0, 2.0, 3.0))); // Expected output: 14\n        System.out.println(solution.sum_squares(Arrays.asList(1.0, 4.0, 9.0))); // Expected output: 98\n        System.out.println(solution.sum_squares(Arrays.asList(1.0, 3.0, 5.0, 7.0))); // Expected output: 84\n        System.out.println(solution.sum_squares(Arrays.asList(1.4, 4.2, 0.0))); // Expected output: 29\n        System.out.println(solution.sum_squares(Arrays.asList(-2.4, 1.0, 1.0))); // Expected output: 6\n    }\n}\n"}
{"task_id": "Java/134", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Create a function that returns true if the last character\n     * of a given string is an alphabetical character and is not\n     * a part of a word, and false otherwise.\n     * Note: \"word\" is a group of characters separated by space.\n     *\n     * Examples:\n     * check_if_last_char_is_a_letter(\"apple pie\") -> false\n     * check_if_last_char_is_a_letter(\"apple pi e\") -> true\n     * check_if_last_char_is_a_letter(\"apple pi e \") -> false\n     * check_if_last_char_is_a_letter(\"\") -> false\n     */\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        if (txt == null || txt.isEmpty()) {\n            return false;\n        }\n\n        int lastCharIndex = txt.length() - 1;\n\n        // Check if the last character is a space or not part of a word\n        if (txt.charAt(lastCharIndex) != ' ') {\n            return false;\n        }\n\n        // Check if the character before the last one is an alphabetical character\n        if (lastCharIndex > 0 && Character.isLetter(txt.charAt(lastCharIndex - 1))) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.check_if_last_char_is_a_letter(\"apple pie\"));   // Output: false\n        System.out.println(solution.check_if_last_char_is_a_letter(\"apple pi e\"));  // Output: true\n        System.out.println(solution.check_if_last_char_is_a_letter(\"apple pi e \")); // Output: false\n        System.out.println(solution.check_if_last_char_is_a_letter(\"\"));            // Output: false\n        System.out.println(solution.check_if_last_char_is_a_letter(\"a \"));          // Output: true\n        System.out.println(solution.check_if_last_char_is_a_letter(\"a b c d e f g h i j k l m n o p q r s t u v w x y z \"));  // Output: false\n    }\n}\n"}
{"task_id": "Java/135", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Create a function which returns the largest index of an element which\n     * is not greater than or equal to the element immediately preceding it. If\n     * no such element exists then return -1. The given array will not contain\n     * duplicate values.\n     *\n     * Examples:\n     * can_arrange(Arrays.asList(1,2,4,3,5)) = 3\n     * can_arrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int can_arrange(List<Integer> arr) {\n        for (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.can_arrange(Arrays.asList(1, 2, 4, 3, 5))); // Expected output: 3\n        System.out.println(solution.can_arrange(Arrays.asList(1, 2, 3)));       // Expected output: -1\n        System.out.println(solution.can_arrange(Arrays.asList(5, 4, 3, 2, 1))); // Expected output: 0\n        System.out.println(solution.can_arrange(Arrays.asList(10, 20, 15, 30, 25))); // Expected output: 2\n    }\n}\n"}
{"task_id": "Java/136", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Create a function that returns a tuple (a, b), where 'a' is\n     * the largest of negative integers, and 'b' is the smallest\n     * of positive integers in a list.\n     * If there is no negative or positive integers, return them as None.\n     *\n     * Examples:\n     * largest_smallest_integers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n     * largest_smallest_integers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n     * largest_smallest_integers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Arrays.asList(Optional.empty(), Optional.empty());\n        }\n\n        Optional<Integer> smallestPositive = lst.stream()\n                .filter(num -> num > 0)\n                .min(Integer::compare);\n\n        Optional<Integer> largestNegative = lst.stream()\n                .filter(num -> num < 0)\n                .max(Integer::compare);\n\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(2, 4, 1, 3, 5, 7))); // (Optional.empty(), Optional.of(1))\n        System.out.println(solution.largest_smallest_integers(Arrays.asList()));                // (Optional.empty(), Optional.empty())\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(0)));               // (Optional.empty(), Optional.empty())\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(-3, -1, 2, 4)));    // (Optional.of(-1), Optional.of(2))\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(-5, -7, -9)));      // (Optional.of(-5), Optional.empty())\n    }\n}\n"}
{"task_id": "Java/137", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Create a function that takes integers, floats, or strings representing\n     * real numbers, and returns the larger variable in its given variable type.\n     * Return None if the values are equal.\n     * Note: If a real number is represented as a string, the floating point might be . or ,\n     *\n     * compare_one(1, 2.5) -> Optional.of(2.5)\n     * compare_one(1, \"2,3\") -> Optional.of(\"2,3\")\n     * compare_one(\"5,1\", \"6\") -> Optional.of(\"6\")\n     * compare_one(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compare_one(Object a, Object b) {\n        double numA = parseNumber(a);\n        double numB = parseNumber(b);\n\n        if (numA == numB) {\n            return Optional.empty();\n        } else if (numA > numB) {\n            return Optional.of(a);\n        } else {\n            return Optional.of(b);\n        }\n    }\n\n    private double parseNumber(Object value) {\n        if (value instanceof Integer) {\n            return ((Integer) value).doubleValue();\n        } else if (value instanceof Float) {\n            return ((Float) value).doubleValue();\n        } else if (value instanceof String) {\n            String strValue = ((String) value).replace(',', '.');\n            try {\n                return Double.parseDouble(strValue);\n            } catch (NumberFormatException e) {\n                throw new IllegalArgumentException(\"Invalid number format: \" + strValue, e);\n            }\n        } else {\n            throw new IllegalArgumentException(\"Unsupported type: \" + value.getClass().getName());\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.compare_one(1, 2.5)); // Optional[2.5]\n        System.out.println(solution.compare_one(1, \"2,3\")); // Optional[2,3]\n        System.out.println(solution.compare_one(\"5,1\", \"6\")); // Optional[6]\n        System.out.println(solution.compare_one(\"1\", 1)); // Optional.empty\n    }\n}\n"}
{"task_id": "Java/138", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n     * Example:\n     * is_equal_to_sum_even(4) == false\n     * is_equal_to_sum_even(6) == false\n     * is_equal_to_sum_even(8) == true\n     */\n    public boolean is_equal_to_sum_even(int n) {\n        // Since the smallest sum of 4 positive even numbers is 2 + 2 + 2 + 2 = 8,\n        // any number less than 8 cannot be expressed as such a sum.\n        if (n < 8) {\n            return false;\n        }\n        \n        // If n - 8 is even, then we can express n as the sum of 4 positive even numbers\n        // because we can add pairs of 2 to 8 to get any even number greater than or equal to 8.\n        return (n - 8) % 2 == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(\"is_equal_to_sum_even(4): \" + solution.is_equal_to_sum_even(4)); // false\n        System.out.println(\"is_equal_to_sum_even(6): \" + solution.is_equal_to_sum_even(6)); // false\n        System.out.println(\"is_equal_to_sum_even(8): \" + solution.is_equal_to_sum_even(8)); // true\n        System.out.println(\"is_equal_to_sum_even(10): \" + solution.is_equal_to_sum_even(10)); // true (2+2+2+4)\n        System.out.println(\"is_equal_to_sum_even(12): \" + solution.is_equal_to_sum_even(12)); // true (2+2+2+6)\n        System.out.println(\"is_equal_to_sum_even(14): \" + solution.is_equal_to_sum_even(14)); // true (2+2+2+8)\n        System.out.println(\"is_equal_to_sum_even(16): \" + solution.is_equal_to_sum_even(16)); // true (2+2+2+10)\n    }\n}\n"}
{"task_id": "Java/139", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * The Brazilian factorial is defined as:\n     * brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n     * where n > 0\n     *\n     * For example:\n     * >>> special_factorial(4)\n     * 288\n     *\n     * The function will receive an integer as input and should return the special\n     * factorial of this integer.\n     */\n    public long special_factorial(int n) {\n        if (n == 0 || n == 1) {\n            return 1;\n        }\n        \n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    private long factorial(int number) {\n        if (number <= 1) {\n            return 1;\n        }\n        long fact = 1;\n        for (int i = 2; i <= number; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(\"special_factorial(4): \" + solution.special_factorial(4)); // Expected: 288\n        System.out.println(\"special_factorial(5): \" + solution.special_factorial(5)); // Expected: 34560\n        System.out.println(\"special_factorial(1): \" + solution.special_factorial(1)); // Expected: 1\n        System.out.println(\"special_factorial(2): \" + solution.special_factorial(2)); // Expected: 2\n    }\n}\n"}
{"task_id": "Java/140", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given a string text, replace all spaces in it with underscores,\n     and if a string has more than 2 consecutive spaces,\n     then replace all consecutive spaces with -\n\n     fix_spaces(\"Example\") == \"Example\"\n     fix_spaces(\"Example 1\") == \"Example_1\"\n     fix_spaces(\" Example 2\") == \"_Example_2\"\n     fix_spaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fix_spaces(String text) {\n        if (text == null || text.isEmpty()) return text;\n\n        StringBuilder result = new StringBuilder();\n        int spaceCount = 0;\n\n        for (char c : text.toCharArray()) {\n            if (c == ' ') {\n                spaceCount++;\n                if (spaceCount > 2) {\n                    // Replace more than 2 consecutive spaces with '-'\n                    result.append('-');\n                    spaceCount = 1; // Reset the count after replacement\n                } else {\n                    result.append('_');\n                }\n            } else {\n                spaceCount = 0; // Reset the count for non-space characters\n                result.append(c);\n            }\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.fix_spaces(\"Example\"));       // Output: Example\n        System.out.println(solution.fix_spaces(\"Example 1\"));     // Output: Example_1\n        System.out.println(solution.fix_spaces(\" Example 2\"));    // Output: _Example_2\n        System.out.println(solution.fix_spaces(\" Example   3\"));  // Output: _Example-3\n        System.out.println(solution.fix_spaces(\"  Leading spaces\")); // Output: __Leading_spaces\n        System.out.println(solution.fix_spaces(\"Trailing spaces  \")); // Output: Trailing_spaces--\n    }\n}\n"}
{"task_id": "Java/141", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Create a function which takes a string representing a file's name, and returns\n     * \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n     * A file's name is considered to be valid if and only if all the following conditions\n     * are met:\n     * - There should not be more than three digits ('0'-'9') in the file's name.\n     * - The file's name contains exactly one dot '.'\n     * - The substring before the dot should not be empty, and it starts with a letter from\n     *   the latin alphapet ('a'-'z' and 'A'-'Z').\n     * - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n     * Examples:\n     * file_name_check(\"example.txt\") # => \"Yes\"\n     * file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String file_name_check(String file_name) {\n        if (file_name == null || file_name.isEmpty()) return \"No\";\n        \n        int digitCount = 0;\n        boolean hasDot = false;\n        boolean validExtension = Arrays.asList(\"txt\", \"exe\", \"dll\").contains(file_name.substring(file_name.lastIndexOf('.') + 1));\n        String nameBeforeDot = file_name.substring(0, file_name.lastIndexOf('.'));\n        \n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) digitCount++;\n            else if (c == '.') hasDot = true;\n        }\n        \n        return (digitCount <= 3 && hasDot && nameBeforeDot.length() > 0 && Character.isLetter(nameBeforeDot.charAt(0)) && validExtension) ? \"Yes\" : \"No\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.file_name_check(\"example.txt\"));       // Expected: Yes\n        System.out.println(solution.file_name_check(\"1example.dll\"));      // Expected: No (starts with a digit)\n        System.out.println(solution.file_name_check(\".txt\"));              // Expected: No (empty name before dot)\n        System.out.println(solution.file_name_check(\"example123.txt\"));    // Expected: Yes\n        System.out.println(solution.file_name_check(\"example4567.dll\"));   // Expected: No (more than 3 digits)\n        System.out.println(solution.file_name_check(\"example.exe\"));       // Expected: Yes\n        System.out.println(solution.file_name_check(\"123example.txt\"));    // Expected: No (starts with a digit)\n        System.out.println(solution.file_name_check(\"example..txt\"));      // Expected: No (invalid dot placement)\n        System.out.println(solution.file_name_check(\"example.doc\"));       // Expected: No (invalid extension)\n    }\n}\n"}
{"task_id": "Java/142", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n     Examples:\n     For lst = [1,2,3] the output should be 6\n     For lst = []  the output should be 0\n     For lst = [-1,-5,2,-1,-5]  the output should be -126\n      */\n    public int sum_squares(List<Integer> lst) {\n        if (lst == null || lst.isEmpty()) {\n            return 0;\n        }\n\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int value = lst.get(i);\n            if ((i + 1) % 3 == 0) {\n                sum += Math.pow(value, 2);\n            } else if ((i + 1) % 4 == 0 && (i + 1) % 3 != 0) {\n                sum += Math.pow(value, 3);\n            }\n        }\n\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sum_squares(Arrays.asList(1, 2, 3))); // Output: 6\n        System.out.println(solution.sum_squares(Arrays.asList())); // Output: 0\n        System.out.println(solution.sum_squares(Arrays.asList(-1, -5, 2, -1, -5))); // Output: -126\n\n        // Additional test cases\n        System.out.println(solution.sum_squares(Arrays.asList(4, 5, 6, 7, 8, 9))); // Output: 302 (4^2 + 7^2 + 9^3)\n        System.out.println(solution.sum_squares(Arrays.asList(-2, -3, -4, -5, -6, -7, -8))); // Output: -162 (-4^2 + -5^2 + -8^3)\n    }\n}\n"}
{"task_id": "Java/143", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given a string representing a sentence,\n     * the sentence contains some words separated by a space,\n     * and you have to return a string that contains the words from the original sentence,\n     * whose lengths are prime numbers,\n     * the order of the words in the new string should be the same as the original one.\n     *\n     * Example 1:\n     * Input: sentence = \"This is a test\"\n     * Output: \"is\"\n     *\n     * Example 2:\n     * Input: sentence = \"lets go for swimming\"\n     * Output: \"go for\"\n     *\n     * Constraints:\n     * * 1 <= len(sentence) <= 100\n     * * sentence contains only letters\n     */\n    public String words_in_sentence(String sentence) {\n        List<String> words = Arrays.asList(sentence.split(\" \"));\n        StringBuilder result = new StringBuilder();\n        \n        for (String word : words) {\n            if (isPrime(word.length())) {\n                if (result.length() > 0) {\n                    result.append(\" \");\n                }\n                result.append(word);\n            }\n        }\n\n        return result.toString();\n    }\n\n    // Helper method to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Test cases\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.words_in_sentence(\"This is a test\")); // Output: \"is\"\n        System.out.println(solution.words_in_sentence(\"lets go for swimming\")); // Output: \"go for\"\n        System.out.println(solution.words_in_sentence(\"hello world\")); // Output: \"world\"\n        System.out.println(solution.words_in_sentence(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")); // Output: \"b c d e f g h i k m n p r s u w y\"\n    }\n}\n"}
{"task_id": "Java/144", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Your task is to implement a function that will simplify the expression\n     * x * n. The function returns true if x * n evaluates to a whole number and false\n     * otherwise. Both x and n, are string representation of a fraction, and have the following format,\n     * <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n     *\n     * You can assume that x, and n are valid fractions, and do not have zero as denominator.\n     */\n    public boolean simplify(String x, String n) {\n        // Split the strings into numerator and denominator\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n\n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n\n        // Simplify the multiplication of fractions\n        int resultNumerator = xNumerator * nNumerator;\n        int resultDenominator = xDenominator * nDenominator;\n\n        // Check if the result is a whole number by checking if the numerator is divisible by the denominator\n        return (resultNumerator % resultDenominator == 0);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.simplify(\"1/5\", \"5/1\")); // true\n        System.out.println(solution.simplify(\"1/6\", \"2/1\")); // false\n        System.out.println(solution.simplify(\"7/10\", \"10/2\")); // false\n        System.out.println(solution.simplify(\"3/4\", \"4/3\")); // true\n        System.out.println(solution.simplify(\"5/8\", \"8/5\")); // true\n        System.out.println(solution.simplify(\"9/16\", \"16/9\")); // true\n    }\n}\n"}
{"task_id": "Java/145", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Write a function which sorts the given list of integers in ascending order according to the sum of their digits.\n     * Note: if there are several items with similar sum of their digits, order them based on their index in original list.\n     * If an integer is negative, then its first digit will be negative:\n     * e.g. -123 has digits -1, 2, and 3.\n     *\n     * For example:\n     * >>> order_by_points(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n     * >>> order_by_points(Arrays.asList()) == []\n     */\n    public List<Integer> order_by_points(List<Integer> nums) {\n        return nums.stream()\n                   .sorted(Comparator.comparingInt(Solution::sumOfDigits)\n                                     .thenComparingInt(nums::indexOf))\n                   .collect(Collectors.toList());\n    }\n\n    private static int sumOfDigits(int num) {\n        if (num == 0) return 0;\n        boolean isNegative = num < 0;\n        int absNum = Math.abs(num);\n        int sum = 0;\n        while (absNum > 0) {\n            sum += absNum % 10;\n            absNum /= 10;\n        }\n        return isNegative ? -sum : sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(1, 11, -1, -11, -12);\n        System.out.println(solution.order_by_points(test1)); // Expected: [-1, -11, 1, -12, 11]\n\n        List<Integer> test2 = new ArrayList<>();\n        System.out.println(solution.order_by_points(test2)); // Expected: []\n\n        List<Integer> test3 = Arrays.asList(-99, -88, -77, -66, -55);\n        System.out.println(solution.order_by_points(test3)); // Expected: [-66, -77, -55, -99, -88]\n    }\n}\n"}
{"task_id": "Java/146", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Write a function that takes an array of numbers as input and returns\n     * the number of elements in the array that are greater than 10 and both\n     * first and last digits of a number are odd (1, 3, 5, 7, 9).\n     * For example:\n     * specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n     * specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10 && isFirstAndLastDigitOdd(num)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isFirstAndLastDigitOdd(int num) {\n        String strNum = Integer.toString(Math.abs(num));\n        int firstDigit = Character.digit(strNum.charAt(0), 10);\n        int lastDigit = Character.digit(strNum.charAt(strNum.length() - 1), 10);\n\n        return (firstDigit % 2 != 0) && (lastDigit % 2 != 0);\n    }\n}\n\npublic class TestSolution {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.specialFilter(Arrays.asList(15, -73, 14, -15))); // Expected output: 1\n        System.out.println(solution.specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109))); // Expected output: 2\n        System.out.println(solution.specialFilter(Arrays.asList(-7, 11, 13, 15, 17, 19))); // Expected output: 4\n        System.out.println(solution.specialFilter(Arrays.asList(10, 20, 30, -40, 50))); // Expected output: 0\n    }\n}\n"}
{"task_id": "Java/147", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You are given a positive integer n. You have to create an integer array a of length n.\n     * For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n     * Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n     * and a[i] + a[j] + a[k] is a multiple of 3.\n     *\n     * Example :\n     * Input: n = 5\n     * Output: 1\n     * Explanation:\n     * a = [1, 3, 7, 13, 21]\n     * The only valid triple is (1, 7, 13).\n     */\n    public int get_max_triples(int n) {\n        List<Integer> a = new ArrayList<>();\n        \n        // Generate the array a\n        for (int i = 1; i <= n; i++) {\n            a.add(i * i - i + 1);\n        }\n        \n        int count = 0;\n        \n        // Iterate through all possible triples (i, j, k) where i < j < k\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a.get(i) + a.get(j) + a.get(k)) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.get_max_triples(5)); // Expected output: 1\n        System.out.println(solution.get_max_triples(6)); // Expected output: 2\n        System.out.println(solution.get_max_triples(7)); // Expected output: 3\n    }\n}\n"}
{"task_id": "Java/148", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * There are eight planets in our solar system: the closest to the Sun\n     * is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n     * Uranus, Neptune.\n     * Write a function that takes two planet names as strings planet1 and planet2.\n     * The function should return a list containing all planets whose orbits are\n     * located between the orbit of planet1 and the orbit of planet2, sorted by\n     * the proximity to the sun.\n     * The function should return an empty list if planet1 or planet2\n     * are not correct planet names.\n     * Examples:\n     * bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n     * bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n     * bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        // Define the order of planets from closest to farthest from the Sun\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n\n        // Check if both planet names are valid\n        if (index1 == -1 || index2 == -1) {\n            return new ArrayList<>();\n        }\n\n        // Ensure index1 is less than index2 for correct slicing\n        if (index1 > index2) {\n            int temp = index1;\n            index1 = index2;\n            index2 = temp;\n        }\n\n        // Return the sublist of planets between the two given indices, excluding the endpoints\n        return new ArrayList<>(planets.subList(index1 + 1, index2));\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.bf(\"Jupiter\", \"Neptune\")); // [\"Saturn\", \"Uranus\"]\n        System.out.println(solution.bf(\"Earth\", \"Mercury\"));   // [\"Venus\"]\n        System.out.println(solution.bf(\"Mercury\", \"Uranus\"));  // [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n        System.out.println(solution.bf(\"Pluto\", \"Mars\"));      // []\n    }\n}\n"}
{"task_id": "Java/149", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Write a function that accepts a list of strings as a parameter,\n     * deletes the strings that have odd lengths from it,\n     * and returns the resulted list with a sorted order.\n     * The list is always a list of strings and never an array of numbers,\n     * and it may contain duplicates.\n     * The order of the list should be ascending by length of each word, and you\n     * should return the list sorted by that rule.\n     * If two words have the same length, sort the list alphabetically.\n     * The function should return a list of strings in sorted order.\n     * You may assume that all words will have the same length.\n     * For example:\n     * assert sorted_list_sum(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n     * assert sorted_list_sum(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> sorted_list_sum(List<String> lst) {\n        // Remove strings with odd lengths\n        List<String> filteredList = new ArrayList<>();\n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                filteredList.add(str);\n            }\n        }\n\n        // Sort the list by length, then alphabetically\n        Collections.sort(filteredList, (a, b) -> {\n            int lenCompare = Integer.compare(a.length(), b.length());\n            return lenCompare != 0 ? lenCompare : a.compareTo(b);\n        });\n\n        return filteredList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<String> test1 = Arrays.asList(\"aa\", \"a\", \"aaa\");\n        System.out.println(solution.sorted_list_sum(test1)); // Expected: [aa]\n\n        List<String> test2 = Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\");\n        System.out.println(solution.sorted_list_sum(test2)); // Expected: [ab, cd]\n\n        List<String> test3 = Arrays.asList(\"hello\", \"world\", \"hi\", \"bye\");\n        System.out.println(solution.sorted_list_sum(test3)); // Expected: [hi, bye]\n    }\n}\n"}
{"task_id": "Java/150", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * A simple program which should return the value of x if n is\n     * a prime number and should return the value of y otherwise.\n     *\n     * Examples:\n     * for x_or_y(7, 34, 12) == 34\n     * for x_or_y(15, 8, 5) == 5\n     */\n    public int x_or_y(int n, int x, int y) {\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    /**\n     * Helper method to check if a number is prime.\n     *\n     * @param num the number to check\n     * @return true if the number is prime, false otherwise\n     */\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.x_or_y(7, 34, 12)); // Expected output: 34 (since 7 is prime)\n        System.out.println(solution.x_or_y(15, 8, 5));  // Expected output: 5 (since 15 is not prime)\n        System.out.println(solution.x_or_y(2, 10, 20)); // Expected output: 10 (since 2 is prime)\n        System.out.println(solution.x_or_y(4, 30, 40)); // Expected output: 40 (since 4 is not prime)\n    }\n}\n"}
{"task_id": "Java/151", "generation": "import java.util.Arrays;\nimport java.util.List;\n\nclass Solution {\n\n    /**\n     * Given a list of numbers, return the sum of squares of the numbers in the list that are odd.\n     * Ignore numbers that are negative or not integers.\n     *\n     * @param lst List of objects to process.\n     * @return The sum of squares of odd positive integers in the list.\n     */\n    public int double_the_difference(List<Object> lst) {\n        return lst.stream()\n                  .filter(obj -> obj instanceof Integer)\n                  .mapToInt(obj -> (Integer) obj)\n                  .filter(num -> num > 0 && num % 2 != 0)\n                  .map(num -> num * num)\n                  .sum();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.double_the_difference(Arrays.asList(1, 3, 2, 0))); // Expected output: 10\n        System.out.println(solution.double_the_difference(Arrays.asList(-1, -2, 0))); // Expected output: 0\n        System.out.println(solution.double_the_difference(Arrays.asList(9, -2)));      // Expected output: 81\n        System.out.println(solution.double_the_difference(Arrays.asList(0)));          // Expected output: 0\n        System.out.println(solution.double_the_difference(Arrays.asList()));           // Expected output: 0\n    }\n}\n"}
{"task_id": "Java/152", "generation": "import java.util.List;\n\nclass Solution {\n    /**\n     * Compares the game scores with the guesses and returns an array of the same length denoting how far off each guess was.\n     * If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n     *\n     * @param game The list of actual game scores.\n     * @param guess The list of guesses made by a person.\n     * @return A list containing the differences between each guess and the corresponding game score.\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            int difference = Math.abs(game.get(i) - guess.get(i));\n            result.add(difference);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> game1 = Arrays.asList(1, 2, 3, 4, 5, 1);\n        List<Integer> guess1 = Arrays.asList(1, 2, 3, 4, 2, -2);\n        System.out.println(\"Test Case 1: \" + solution.compare(game1, guess1)); // Expected output: [0, 0, 0, 0, 3, 3]\n\n        // Test case 2\n        List<Integer> game2 = Arrays.asList(0, 5, 0, 0, 0, 4);\n        List<Integer> guess2 = Arrays.asList(4, 1, 1, 0, 0, -2);\n        System.out.println(\"Test Case 2: \" + solution.compare(game2, guess2)); // Expected output: [4, 4, 1, 0, 0, 6]\n\n        // Test case 3\n        List<Integer> game3 = Arrays.asList(5, 7, 8, 9);\n        List<Integer> guess3 = Arrays.asList(5, 6, 8, 10);\n        System.out.println(\"Test Case 3: \" + solution.compare(game3, guess3)); // Expected output: [0, 1, 0, 1]\n\n        // Test case 4\n        List<Integer> game4 = Arrays.asList(2, 2, 2, 2);\n        List<Integer> guess4 = Arrays.asList(1, 3, 2, 1);\n        System.out.println(\"Test Case 4: \" + solution.compare(game4, guess4)); // Expected output: [1, 1, 0, 1]\n    }\n}\n"}
{"task_id": "Java/153", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You will be given the name of a class (a string) and a list of extensions.\n     * The extensions are to be used to load additional classes to the class. The\n     * strength of the extension is as follows: Let CAP be the number of the uppercase\n     * letters in the extension's name, and let SM be the number of lowercase letters\n     * in the extension's name, the strength is given by the fraction CAP - SM.\n     * You should find the strongest extension and return a string in this\n     * format: ClassName.Strongest_Extension.\n     * If there are two or more extensions with the same strength, you should\n     * choose the one that comes first in the list.\n     * For example, if you are given \"Slices\" as the class and a list of the\n     * extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n     * return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n     * (its strength is -1).\n     * Example:\n     * for Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        int maxStrength = Integer.MIN_VALUE;\n        String strongestExtension = \"\";\n        \n        for (String extension : extensions) {\n            int capCount = 0;\n            int smCount = 0;\n            \n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smCount++;\n                }\n            }\n            \n            int strength = capCount - smCount;\n            \n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n        \n        return class_name + \".\" + strongestExtension;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.Strongest_Extension(\"Slices\", Arrays.asList(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"))); // Should print: Slices.SErviNGSliCes\n        System.out.println(solution.Strongest_Extension(\"my_class\", Arrays.asList(\"AA\", \"Be\", \"CC\"))); // Should print: my_class.AA\n        System.out.println(solution.Strongest_Extension(\"DataProcessor\", Arrays.asList(\"dataIO\", \"DATAIO\", \"dataio\"))); // Should print: DataProcessor.DATAIO\n    }\n}\n"}
{"task_id": "Java/154", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n     * cycpattern_check(\"abcd\",\"abd\") => false\n     * cycpattern_check(\"hello\",\"ell\") => true\n     * cycpattern_check(\"whassup\",\"psus\") => false\n     * cycpattern_check(\"abab\",\"baa\") => true\n     * cycpattern_check(\"efef\",\"eeff\") => false\n     * cycpattern_check(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpattern_check(String a, String b) {\n        if (b.length() > a.length()) return false;\n        \n        // Generate all rotations of the second word\n        for (int i = 0; i < b.length(); i++) {\n            String rotatedB = rotateString(b, i);\n            if (a.contains(rotatedB)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private String rotateString(String s, int k) {\n        int n = s.length();\n        k = k % n; // In case the rotation is greater than the length of the string\n        return s.substring(n - k) + s.substring(0, n - k);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.cycpattern_check(\"abcd\", \"abd\")); // false\n        System.out.println(solution.cycpattern_check(\"hello\", \"ell\")); // true\n        System.out.println(solution.cycpattern_check(\"whassup\", \"psus\")); // false\n        System.out.println(solution.cycpattern_check(\"abab\", \"baa\")); // true\n        System.out.println(solution.cycpattern_check(\"efef\", \"eeff\")); // false\n        System.out.println(solution.cycpattern_check(\"himenss\", \"simen\")); // true\n    }\n}\n"}
{"task_id": "Java/155", "generation": "import java.util.List;\n\nclass Solution {\n\n    /**\n     * Given an integer, return a tuple that has the number of even and odd digits respectively.\n     *\n     * Example:\n     * even_odd_count(-12) ==> (1, 1)\n     * even_odd_count(123) ==> (1, 2)\n     */\n    public List<Integer> even_odd_count(int num) {\n        int evenCount = 0;\n        int oddCount = 0;\n\n        // Handle negative numbers\n        if (num < 0) {\n            num = -num; // Make the number positive for digit extraction\n        }\n\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num /= 10;\n        }\n\n        return List.of(evenCount, oddCount);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.even_odd_count(-12)); // Expected output: [1, 1]\n        System.out.println(solution.even_odd_count(123)); // Expected output: [1, 2]\n        System.out.println(solution.even_odd_count(0));   // Expected output: [1, 0] (since 0 is considered even)\n        System.out.println(solution.even_odd_count(-456789)); // Expected output: [3, 3]\n    }\n}\n"}
{"task_id": "Java/156", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given a positive integer, obtain its roman numeral equivalent as a string,\n     and return it in lowercase.\n     Restrictions: 1 <= num <= 1000\n\n     Examples:\n     >>> int_to_mini_roman(19) == \"xix\"\n     >>> int_to_mini_roman(152) == \"clii\"\n     >>> int_to_mini_roman(426) == \"cdxxvi\"\n     */\n    public String int_to_mini_roman(int number) {\n        if (number < 1 || number > 1000) {\n            throw new IllegalArgumentException(\"Number must be between 1 and 1000\");\n        }\n\n        StringBuilder roman = new StringBuilder();\n        Map<Integer, String> romanMap = new TreeMap<>(Collections.reverseOrder());\n        romanMap.put(1000, \"m\");\n        romanMap.put(900, \"cm\");\n        romanMap.put(500, \"d\");\n        romanMap.put(400, \"cd\");\n        romanMap.put(100, \"c\");\n        romanMap.put(90, \"xc\");\n        romanMap.put(50, \"l\");\n        romanMap.put(40, \"xl\");\n        romanMap.put(10, \"x\");\n        romanMap.put(9, \"ix\");\n        romanMap.put(5, \"v\");\n        romanMap.put(4, \"iv\");\n        romanMap.put(1, \"i\");\n\n        for (Map.Entry<Integer, String> entry : romanMap.entrySet()) {\n            while (number >= entry.getKey()) {\n                roman.append(entry.getValue());\n                number -= entry.getKey();\n            }\n        }\n\n        return roman.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.int_to_mini_roman(19));  // Expected: \"xix\"\n        System.out.println(solution.int_to_mini_roman(152)); // Expected: \"clii\"\n        System.out.println(solution.int_to_mini_roman(426)); // Expected: \"cdxxvi\"\n\n        // Additional test cases\n        System.out.println(solution.int_to_mini_roman(399));  // Expected: \"cccxcix\"\n        System.out.println(solution.int_to_mini_roman(583));  // Expected: \"dlxxxiii\"\n        System.out.println(solution.int_to_mini_roman(947));  // Expected: \"cmxlviis\"\n    }\n}\n"}
{"task_id": "Java/157", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given the lengths of the three sides of a triangle. Return true if the three\n     * sides form a right-angled triangle, false otherwise.\n     * A right-angled triangle is a triangle in which one angle is a right angle or 90 degrees.\n     * Example:\n     * right_angle_triangle(3, 4, 5) == true\n     * right_angle_triangle(1, 2, 3) == false\n     */\n    public boolean right_angle_triangle(int a, int b, int c) {\n        // Sort the sides to ensure the longest side is last\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        \n        // Check if the square of the longest side equals the sum of squares of other two sides\n        return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) == Math.pow(sides[2], 2);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.right_angle_triangle(3, 4, 5)); // true\n        System.out.println(solution.right_angle_triangle(1, 2, 3)); // false\n        System.out.println(solution.right_angle_triangle(6, 8, 10)); // true\n        System.out.println(solution.right_angle_triangle(7, 10, 12)); // false\n        System.out.println(solution.right_angle_triangle(5, 5, 5)); // false (not a right-angled triangle)\n    }\n}\n"}
{"task_id": "Java/158", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function that accepts a list of strings.\n     * The list contains different words. Return the word with maximum number\n     * of unique characters. If multiple strings have maximum number of unique\n     * characters, return the one which comes first in lexicographical order.\n     *\n     * find_max([\"name\", \"of\", \"string\"]) == \"string\"\n     * find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n     * find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\n     */\n    public String find_max(List<String> words) {\n        if (words == null || words.isEmpty()) {\n            return \"\";\n        }\n\n        String maxWord = \"\";\n        int maxUniqueChars = 0;\n\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            if (uniqueChars.size() > maxUniqueChars || \n                (uniqueChars.size() == maxUniqueChars && word.compareTo(maxWord) < 0)) {\n                maxUniqueChars = uniqueChars.size();\n                maxWord = word;\n            }\n        }\n\n        return maxWord;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.find_max(Arrays.asList(\"name\", \"of\", \"string\"))); // Output: string\n        System.out.println(solution.find_max(Arrays.asList(\"name\", \"enam\", \"game\"))); // Output: enam\n        System.out.println(solution.find_max(Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\")));  // Output: aaaaaaa\n        System.out.println(solution.find_max(new ArrayList<>()));                     // Output: (empty string)\n    }\n}\n"}
{"task_id": "Java/159", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You're a hungry rabbit, and you already have eaten a certain number of carrots,\n     * but now you need to eat more carrots to complete the day's meals.\n     * You should return an array of [ total number of eaten carrots after your meals,\n     *                                the number of carrots left after your meals ]\n     * if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n     *\n     * Example:\n     * * eat(5, 6, 10) -> [11, 4]\n     * * eat(4, 8, 9) -> [12, 1]\n     * * eat(1, 10, 10) -> [11, 0]\n     * * eat(2, 11, 5) -> [7, 0]\n     *\n     * Variables:\n     * @number : integer\n     *        the number of carrots that you have eaten.\n     * @need : integer\n     *        the number of carrots that you need to eat.\n     * @remaining : integer\n     *        the number of remaining carrots thet exist in stock\n     *\n     * Constraints:\n     * * 0 <= number <= 1000\n     * * 0 <= need <= 1000\n     * * 0 <= remaining <= 1000\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        // Calculate the total number of carrots to be eaten\n        int totalEaten = number + Math.min(need, remaining);\n        \n        // Calculate the number of carrots left after eating\n        int carrotsLeft = Math.max(0, remaining - need);\n        \n        return Arrays.asList(totalEaten, carrotsLeft);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.eat(5, 6, 10)); // Expected: [11, 4]\n        System.out.println(solution.eat(4, 8, 9));  // Expected: [12, 1]\n        System.out.println(solution.eat(1, 10, 10));// Expected: [11, 0]\n        System.out.println(solution.eat(2, 11, 5) );// Expected: [7, 0]\n    }\n}\n"}
{"task_id": "Java/160", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given two lists operator, and operand. The first list has basic algebra operations,\n     * and the second list is a list of integers. Use the two given lists to build the algebric\n     * expression and return the evaluation of this expression.\n     *\n     * @param operator List of strings representing the operators: \"+\", \"-\", \"*\", \"/\", \"**\"\n     * @param operand  List of non-negative integers\n     * @return The result of evaluating the algebraic expression\n     */\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        if (operator.isEmpty() || operand.size() < 2) {\n            throw new IllegalArgumentException(\"Invalid input lists\");\n        }\n\n        int result = operand.get(0);\n\n        for (int i = 0; i < operator.size(); i++) {\n            switch (operator.get(i)) {\n                case \"+\":\n                    result += operand.get(i + 1);\n                    break;\n                case \"-\":\n                    result -= operand.get(i + 1);\n                    break;\n                case \"*\":\n                    result *= operand.get(i + 1);\n                    break;\n                case \"/\":\n                    if (operand.get(i + 1) == 0) {\n                        throw new ArithmeticException(\"Division by zero\");\n                    }\n                    result /= operand.get(i + 1);\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, operand.get(i + 1));\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Unsupported operator: \" + operator.get(i));\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<String> operators1 = Arrays.asList(\"+\", \"*\", \"-\");\n        List<Integer> operands1 = Arrays.asList(2, 3, 4, 5);\n        System.out.println(solution.do_algebra(operators1, operands1)); // Output: 9\n\n        List<String> operators2 = Arrays.asList(\"*\", \"/\", \"+\");\n        List<Integer> operands2 = Arrays.asList(8, 2, 4, 1);\n        System.out.println(solution.do_algebra(operators2, operands2)); // Output: 5\n\n        List<String> operators3 = Arrays.asList(\"**\");\n        List<Integer> operands3 = Arrays.asList(2, 3);\n        System.out.println(solution.do_algebra(operators3, operands3)); // Output: 8\n    }\n}\n"}
{"task_id": "Java/161", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given a string s.\n     * if s[i] is a letter, reverse its case from lower to upper or vise versa,\n     * otherwise keep it as it is.\n     * If the string contains no letters, reverse the string.\n     * The function should return the resulted string.\n     *\n     * Examples:\n     * solve(\"1234\") = \"4321\"\n     * solve(\"ab\") = \"AB\"\n     * solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        if (s == null || s.isEmpty()) {\n            return s;\n        }\n\n        boolean containsLetters = false;\n        StringBuilder result = new StringBuilder();\n\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                containsLetters = true;\n                result.append(Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c));\n            } else {\n                result.append(c);\n            }\n        }\n\n        return containsLetters ? result.toString() : new StringBuilder(s).reverse().toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.solve(\"1234\")); // Expected: \"4321\"\n        System.out.println(solution.solve(\"ab\"));   // Expected: \"AB\"\n        System.out.println(solution.solve(\"#a@C\")); // Expected: \"#A@c\"\n        System.out.println(solution.solve(\"\"));     // Expected: \"\"\n        System.out.println(solution.solve(null));   // Expected: null\n    }\n}\n"}
{"task_id": "Java/162", "generation": "import java.math.BigInteger;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Optional;\n\nclass Solution {\n    /**\n     * Given a string \"text\", return its md5 hash equivalent string with length being 32.\n     * If \"text\" is an empty string, return Optional.empty().\n     *\n     * >>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] messageDigest = md.digest(text.getBytes());\n        BigInteger no = new BigInteger(1, messageDigest);\n        String hashtext = no.toString(16);\n\n        // Make the hash text 32 characters long\n        while (hashtext.length() < 32) {\n            hashtext = \"0\" + hashtext;\n        }\n\n        return Optional.of(hashtext);\n    }\n}\n\npublic class TestSolution {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: Non-empty string\n        System.out.println(\"MD5 of 'Hello world': \" + solution.string_to_md5(\"Hello world\").orElse(\"None\"));\n        \n        // Expected output: MD5 of 'Hello world': 3e25960a79dbc69b674cd4ec67a72c62\n\n        // Test case 2: Empty string\n        System.out.println(\"MD5 of '' (empty string): \" + solution.string_to_md5(\"\").orElse(\"None\"));\n        \n        // Expected output: MD5 of '' (empty string): None\n    }\n}\n"}
{"task_id": "Java/163", "generation": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Solution {\n    /**\n     * Given two positive integers a and b, return the even digits between a\n     * and b, in ascending order. Please note that the even digits refer to even numbers less than 10.\n     *\n     * For example:\n     * generate_integers(2, 8) => [2, 4, 6, 8]\n     * generate_integers(8, 2) => [2, 4, 6, 8]\n     * generate_integers(10, 14) => []\n     */\n    public List<Integer> generate_integers(int a, int b) {\n        // Ensure a is less than or equal to b\n        if (a > b) {\n            return generate_integers(b, a);\n        }\n\n        List<Integer> evenDigits = new ArrayList<>();\n        \n        for (int i = a; i <= b; i++) {\n            int digit;\n            while (i > 0) {\n                digit = i % 10;\n                if (digit % 2 == 0 && digit < 10) {\n                    evenDigits.add(digit);\n                }\n                i /= 10;\n            }\n        }\n\n        return evenDigits;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.generate_integers(2, 8));   // Output: [2, 4, 6, 8]\n        System.out.println(solution.generate_integers(8, 2));   // Output: [2, 4, 6, 8]\n        System.out.println(solution.generate_integers(10, 14)); // Output: []\n    }\n}\n"}
{"task_id": "Java/0", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n     >>> has_close_elements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n     false\n     >>> has_close_elements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n     true\n     */\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        if (numbers == null || numbers.size() < 2) {\n            return false;\n        }\n\n        Collections.sort(numbers);\n\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = Math.abs(numbers.get(i + 1) - numbers.get(i));\n            if (diff < threshold) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.has_close_elements(Arrays.asList(1.0, 2.0, 3.0), 0.5)); // Expected: false\n        System.out.println(solution.has_close_elements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)); // Expected: true\n        System.out.println(solution.has_close_elements(Arrays.asList(10.0, 10.1, 10.2, 10.3), 0.05)); // Expected: false\n        System.out.println(solution.has_close_elements(Arrays.asList(-1.0, -0.9, -0.8, -0.7), 0.1)); // Expected: true\n    }\n}\n"}
{"task_id": "Java/1", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n     * separate those group into separate strings and return the list of those.\n     * Separate groups are balanced (each open brace is properly closed) and not nested within each other\n     * Ignore any spaces in the input string.\n     *\n     * @param paren_string The input string containing multiple groups of nested parentheses.\n     * @return A List of separate strings representing balanced groups of parentheses.\n     */\n    public List<String> separate_paren_groups(String paren_string) {\n        Stack<Integer> stack = new Stack<>();\n        List<String> result = new ArrayList<>();\n        \n        StringBuilder currentGroup = new StringBuilder();\n        \n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            \n            if (c == '(') {\n                stack.push(i);\n                currentGroup.append(c);\n            } else if (c == ')') {\n                if (!stack.isEmpty()) {\n                    stack.pop();\n                    currentGroup.append(c);\n                    \n                    if (stack.isEmpty()) {\n                        result.add(currentGroup.toString());\n                        currentGroup = new StringBuilder();\n                    }\n                }\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.separate_paren_groups(\"( ) (( )) (( )( ))\")); // Expected: [\"()\", \"(())\", \"(()())\"]\n        System.out.println(solution.separate_paren_groups(\"((())) (()) () (()())\")); // Expected: [\"((()))\", \"(())\", \"()\", \"(()())\"]\n        System.out.println(solution.separate_paren_groups(\"()()\")); // Expected: [\"()\", \"()\"]\n        System.out.println(solution.separate_paren_groups(\"((())) (( )) ( )\")); // Expected: [\"((()))\", \"(())\", \"()\"]\n    }\n}\n"}
{"task_id": "Java/2", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     Given a positive floating point number, it can be decomposed into\n     an integer part (largest integer smaller than given number) and decimals\n     (leftover part always smaller than 1).\n\n     Return the decimal part of the number.\n     >>> truncate_number(3.5)\n     0.5\n     */\n    public double truncate_number(double number) {\n        return number - Math.floor(number);\n    }\n\n    // Test cases to verify the correctness of the method\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(\"Test Case 1: \" + (solution.truncate_number(3.5) == 0.5 ? \"Passed\" : \"Failed\"));\n        System.out.println(\"Test Case 2: \" + (solution.truncate_number(4.789) == 0.789 ? \"Passed\" : \"Failed\"));\n        System.out.println(\"Test Case 3: \" + (solution.truncate_number(-2.123) == -0.123 ? \"Passed\" : \"Failed\"));\n        System.out.println(\"Test Case 4: \" + (solution.truncate_number(0.999) == 0.999 ? \"Passed\" : \"Failed\"));\n        System.out.println(\"Test Case 5: \" + (solution.truncate_number(-10.0) == -0.0 ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/3", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You're given a list of deposit and withdrawal operations on a bank account that starts with\n     * zero balance. Your task is to detect if at any point the balance of the account falls below zero,\n     * and at that point, the function should return true. Otherwise, it should return false.\n     *\n     * @param operations List of integers representing deposits (positive) and withdrawals (negative).\n     * @return boolean indicating whether the balance ever goes below zero.\n     */\n    public boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (int op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.below_zero(Arrays.asList(1, 2, 3))); // Expected: false\n        System.out.println(solution.below_zero(Arrays.asList(1, 2, -4, 5))); // Expected: true\n        System.out.println(solution.below_zero(Arrays.asList(-1, -2, -3))); // Expected: true\n        System.out.println(solution.below_zero(Arrays.asList(10, -5, -6, 7))); // Expected: false\n        System.out.println(solution.below_zero(Arrays.asList(1, -2, 3, -4, 5))); // Expected: true\n    }\n}\n"}
{"task_id": "Java/4", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * For a given list of input numbers, calculate Mean Absolute Deviation around the mean of this dataset.\n     * Mean Absolute Deviation is the average absolute difference between each element and a centerpoint (mean in this case):\n     * MAD = average | x - x_mean |\n     *\n     * @param numbers List of Double values\n     * @return double representing the Mean Absolute Deviation\n     */\n    public double mean_absolute_deviation(List<Double> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list cannot be null or empty\");\n        }\n\n        // Calculate the mean of the dataset\n        double sum = 0.0;\n        for (Double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n\n        // Calculate the Mean Absolute Deviation\n        double mad = 0.0;\n        for (Double num : numbers) {\n            mad += Math.abs(num - mean);\n        }\n        return mad / numbers.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.mean_absolute_deviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))); // Expected output: 1.0\n        System.out.println(solution.mean_absolute_deviation(Arrays.asList(5.0, 7.0, 9.0, 11.0))); // Expected output: 2.0\n        System.out.println(solution.mean_absolute_deviation(Arrays.asList(-3.0, -1.0, 0.0, 2.0, 4.0))); // Expected output: 2.0\n        System.out.println(solution.mean_absolute_deviation(Arrays.asList(10.5, 10.75, 10.875, 11.0))); // Expected output: 0.1875\n    }\n}\n"}
{"task_id": "Java/5", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Insert a number 'delimiter' between every two consecutive elements of input list `numbers`\n     *\n     * @param numbers The input list of integers.\n     * @param delimiter The integer to be inserted as a delimiter.\n     * @return A new list with the delimiter interspersed.\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        if (numbers == null || numbers.size() <= 1) {\n            return numbers;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.intersperse(List.of(), 4)); // Expected: []\n        System.out.println(solution.intersperse(Arrays.asList(1, 2, 3), 4)); // Expected: [1, 4, 2, 4, 3]\n        System.out.println(solution.intersperse(Arrays.asList(5), 0)); // Expected: [5]\n        System.out.println(solution.intersperse(Arrays.asList(1, 2, 3, 4), -1)); // Expected: [1, -1, 2, -1, 3, -1, 4]\n    }\n}\n"}
{"task_id": "Java/6", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n     * For each of the group, output the deepest level of nesting of parentheses.\n     * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n     *\n     * >>> parse_nested_parens(\"(()()) ((())) () ((())()())\n     * [2, 3, 1, 3]\n     */\n    public List<Integer> parse_nested_parens(String paren_string) {\n        String[] groups = paren_string.split(\"\\\\s+\");\n        List<Integer> result = new ArrayList<>();\n        \n        for (String group : groups) {\n            int maxDepth = 0;\n            int currentDepth = 0;\n            \n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentDepth++;\n                    maxDepth = Math.max(maxDepth, currentDepth);\n                } else if (c == ')') {\n                    currentDepth--;\n                }\n            }\n            \n            result.add(maxDepth);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        String test1 = \"(()()) ((())) () ((())()())\";\n        List<Integer> expected1 = Arrays.asList(2, 3, 1, 3);\n        System.out.println(\"Test Case 1: \" + (solution.parse_nested_parens(test1).equals(expected1) ? \"Passed\" : \"Failed\"));\n        \n        String test2 = \"(()) () ((())) (((())))\";\n        List<Integer> expected2 = Arrays.asList(2, 1, 3, 4);\n        System.out.println(\"Test Case 2: \" + (solution.parse_nested_parens(test2).equals(expected2) ? \"Passed\" : \"Failed\"));\n        \n        String test3 = \"() () ()\";\n        List<Integer> expected3 = Arrays.asList(1, 1, 1);\n        System.out.println(\"Test Case 3: \" + (solution.parse_nested_parens(test3).equals(expected3) ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/7", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Filter an input list of strings only for ones that contain given substring\n     *\n     * @param strings The list of strings to filter.\n     * @param substring The substring to look for in the strings.\n     * @return A filtered list containing only strings that include the specified substring.\n     */\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                result.add(str);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.filter_by_substring(List.of(), \"a\")); // Expected: []\n        System.out.println(solution.filter_by_substring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")); // Expected: [abc, bacd, array]\n        System.out.println(solution.filter_by_substring(Arrays.asList(\"hello\", \"world\", \"java\", \"python\"), \"o\")); // Expected: [hello, world, python]\n        System.out.println(solution.filter_by_substring(Arrays.asList(\"apple\", \"banana\", \"cherry\", \"date\"), \"z\")); // Expected: []\n    }\n}\n"}
{"task_id": "Java/8", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n     * Empty sum should be equal to 0 and empty product should be equal to 1.\n     *\n     * @param numbers List of integers\n     * @return A List containing [sum, product]\n     */\n    public List<Integer> sum_product(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n\n        for (int number : numbers) {\n            sum += number;\n            if (number != 0) { // Avoid division by zero\n                product *= number;\n            }\n        }\n\n        return Arrays.asList(sum, product);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Test Case 1: Empty List\");\n        System.out.println(solution.sum_product(new ArrayList<>())); // Expected output: [0, 1]\n\n        System.out.println(\"Test Case 2: [1, 2, 3, 4]\");\n        System.out.println(solution.sum_product(Arrays.asList(1, 2, 3, 4))); // Expected output: [10, 24]\n\n        System.out.println(\"Test Case 3: [-1, -2, -3, -4]\");\n        System.out.println(solution.sum_product(Arrays.asList(-1, -2, -3, -4))); // Expected output: [-10, 24]\n\n        System.out.println(\"Test Case 4: [0, 5, 6]\");\n        System.out.println(solution.sum_product(Arrays.asList(0, 5, 6))); // Expected output: [11, 30]\n    }\n}\n"}
{"task_id": "Java/9", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence.\n     *\n     * @param numbers The input list of integers.\n     * @return A list containing the rolling maximum elements.\n     */\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        List<Integer> result = new ArrayList<>();\n        int maxSoFar = Integer.MIN_VALUE;\n        \n        for (int num : numbers) {\n            if (num > maxSoFar) {\n                maxSoFar = num;\n            }\n            result.add(maxSoFar);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.rolling_max(Arrays.asList(1, 2, 3, 2, 3, 4, 2))); // [1, 2, 3, 3, 3, 4, 4]\n        System.out.println(solution.rolling_max(Arrays.asList(5, 3, 8, 6, 7, 9, 4, 10))); // [5, 5, 8, 8, 8, 9, 9, 10]\n        System.out.println(solution.rolling_max(Arrays.asList())); // []\n        System.out.println(solution.rolling_max(Arrays.asList(3, 2, 1))); // [3, 3, 3]\n    }\n}\n"}
{"task_id": "Java/10", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    /**\n     Find the shortest palindrome that begins with a supplied string.\n     Algorithm idea is simple:\n     - Find the longest postfix of supplied string that is a palindrome.\n     - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n     */\n    public String make_palindrome(String string) {\n        if (string == null || string.isEmpty()) {\n            return \"\";\n        }\n\n        int n = string.length();\n        for (int i = 0; i < n / 2; i++) {\n            if (string.charAt(i) != string.charAt(n - 1 - i)) {\n                break;\n            }\n        }\n\n        // If the entire string is a palindrome, no need to append anything\n        if (i == n / 2) {\n            return string;\n        }\n\n        // Find the longest palindromic suffix\n        String suffix = string.substring(i + 1);\n        int len = suffix.length();\n        for (int j = len; j >= 0; j--) {\n            if (isPalindrome(suffix.substring(0, j))) {\n                break;\n            }\n        }\n\n        // Append the reverse of the prefix that comes before the palindromic suffix\n        String prefix = string.substring(0, i + 1);\n        return string + new StringBuilder(prefix).reverse().toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.make_palindrome(\"\")); // Output: \"\"\n        System.out.println(solution.make_palindrome(\"cat\")); // Output: \"catac\"\n        System.out.println(solution.make_palindrome(\"cata\")); // Output: \"catac\"\n        System.out.println(solution.make_palindrome(\"race\")); // Output: \"racecar\"\n        System.out.println(solution.make_palindrome(\"madam\")); // Output: \"madam\"\n    }\n}\n"}
{"task_id": "Java/11", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Input are two strings a and b consisting only of 1s and 0s.\n     * Perform binary XOR on these inputs and return result also as a string.\n     *\n     * @param a the first binary string\n     * @param b the second binary string\n     * @return the result of binary XOR operation as a string\n     */\n    public String string_xor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        \n        // Ensure both strings are of equal length by padding with leading zeros if necessary\n        int maxLength = Math.max(a.length(), b.length());\n        a = padStringWithZeros(a, maxLength);\n        b = padStringWithZeros(b, maxLength);\n\n        for (int i = 0; i < maxLength; i++) {\n            // Perform XOR operation on each bit and append to the result\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append('0');\n            } else {\n                result.append('1');\n            }\n        }\n\n        return result.toString();\n    }\n\n    /**\n     * Pads a string with leading zeros to match the specified length.\n     *\n     * @param str the input string\n     * @param length the target length\n     * @return the padded string\n     */\n    private String padStringWithZeros(String str, int length) {\n        while (str.length() < length) {\n            str = \"0\" + str;\n        }\n        return str;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.string_xor(\"010\", \"110\")); // Expected output: \"100\"\n        System.out.println(solution.string_xor(\"10101\", \"00111\")); // Expected output: \"10010\"\n        System.out.println(solution.string_xor(\"1111\", \"0000\")); // Expected output: \"1111\"\n        System.out.println(solution.string_xor(\"0000\", \"0000\")); // Expected output: \"0000\"\n    }\n}\n"}
{"task_id": "Java/12", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     Out of list of strings, return the longest one. Return the first one in case of multiple\n     strings of the same length. Return Optional.empty() in case the input list is empty.\n     >>> longest(List.of())\n     Optional.empty\n     >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n     Optional[a]\n     >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n     Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longestString = strings.get(0);\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n        return Optional.of(longestString);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.longest(List.of())); // Expected: Optional.empty\n        System.out.println(solution.longest(Arrays.asList(\"a\", \"b\", \"c\"))); // Expected: Optional[a]\n        System.out.println(solution.longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))); // Expected: Optional[ccc]\n        System.out.println(solution.longest(Arrays.asList(\"hello\", \"world\", \"java\", \"programming\"))); // Expected: Optional[programming]\n    }\n}\n"}
{"task_id": "Java/13", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return a greatest common divisor of two integers a and b\n     *\n     * @param a the first integer\n     * @param b the second integer\n     * @return the greatest common divisor of a and b\n     */\n    public int greatest_common_divisor(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n\n    /**\n     * Test the greatest_common_divisor method with some test cases\n     */\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"GCD of 3 and 5: \" + solution.greatest_common_divisor(3, 5)); // Expected output: 1\n        System.out.println(\"GCD of 25 and 15: \" + solution.greatest_common_divisor(25, 15)); // Expected output: 5\n        System.out.println(\"GCD of 100 and 80: \" + solution.greatest_common_divisor(100, 80)); // Expected output: 20\n        System.out.println(\"GCD of 7 and 13: \" + solution.greatest_common_divisor(7, 13)); // Expected output: 1\n        System.out.println(\"GCD of 45 and 90: \" + solution.greatest_common_divisor(45, 90)); // Expected output: 45\n    }\n}\n"}
{"task_id": "Java/14", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Return list of all prefixes from shortest to longest of the input string\n     *\n     * @param string The input string for which to generate all prefixes.\n     * @return A List containing all prefixes of the input string, ordered from shortest to longest.\n     */\n    public List<String> all_prefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        if (string == null || string.isEmpty()) {\n            return prefixes;\n        }\n        \n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        \n        return prefixes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Testing all_prefixes with 'abc':\");\n        List<String> result1 = solution.all_prefixes(\"abc\");\n        System.out.println(result1); // Expected: [a, ab, abc]\n\n        System.out.println(\"\\nTesting all_prefixes with 'hello':\");\n        List<String> result2 = solution.all_prefixes(\"hello\");\n        System.out.println(result2); // Expected: [h, he, hel, hell, hello]\n\n        System.out.println(\"\\nTesting all_prefixes with an empty string:\");\n        List<String> result3 = solution.all_prefixes(\"\");\n        System.out.println(result3); // Expected: []\n\n        System.out.println(\"\\nTesting all_prefixes with null input:\");\n        List<String> result4 = solution.all_prefixes(null);\n        System.out.println(result4); // Expected: []\n    }\n}\n"}
{"task_id": "Java/15", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n     *\n     * @param n The upper limit of the sequence (inclusive).\n     * @return A string containing space-delimited numbers from 0 to n.\n     */\n    public String string_sequence(int n) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            if (i > 0) {\n                result.append(\" \");\n            }\n            result.append(i);\n        }\n        return result.toString();\n    }\n\n    // Test cases to verify the correctness of the string_sequence method\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: n = 0\n        System.out.println(solution.string_sequence(0).equals(\"0\") ? \"Test 1 Passed\" : \"Test 1 Failed\");\n\n        // Test case 2: n = 5\n        System.out.println(solution.string_sequence(5).equals(\"0 1 2 3 4 5\") ? \"Test 2 Passed\" : \"Test 2 Failed\");\n\n        // Additional test cases\n        System.out.println(solution.string_sequence(10).equals(\"0 1 2 3 4 5 6 7 8 9 10\") ? \"Test 3 Passed\" : \"Test 3 Failed\");\n        System.out.println(solution.string_sequence(-3).equals(\"\") ? \"Test 4 Passed\" : \"Test 4 Failed\"); // Edge case: n < 0\n    }\n}\n"}
{"task_id": "Java/16", "generation": "import java.util.HashSet;\nimport org.junit.Test;\nimport static org.junit.Assert.assertEquals;\n\nclass Solution {\n\n    /**\n     * Given a string, find out how many distinct characters (regardless of case) does it consist of.\n     *\n     * @param string the input string to analyze\n     * @return the number of distinct characters in the string, ignoring case\n     */\n    public int count_distinct_characters(String string) {\n        HashSet<Character> distinctChars = new HashSet<>();\n        \n        for (char c : string.toCharArray()) {\n            char lowerCaseChar = Character.toLowerCase(c);\n            distinctChars.add(lowerCaseChar);\n        }\n        \n        return distinctChars.size();\n    }\n\n    @Test\n    public void testCountDistinctCharacters() {\n        assertEquals(3, count_distinct_characters(\"xyzXYZ\")); // 3 distinct characters: x, y, z\n        assertEquals(4, count_distinct_characters(\"Jerry\"));   // 4 distinct characters: j, e, r, y\n        assertEquals(1, count_distinct_characters(\"AAAaaa\"));  // 1 distinct character: a\n        assertEquals(0, count_distinct_characters(\"\"));         // 0 distinct characters (empty string)\n        assertEquals(26, count_distinct_characters(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")); // 26 distinct characters (all letters in both cases)\n    }\n}\n"}
{"task_id": "Java/17", "generation": "import java.util.List;\nimport java.util.Arrays;\n\nclass Solution {\n\n    /**\n     * Input to this function is a string representing musical notes in a special ASCII format.\n     * Your task is to parse this string and return list of integers corresponding to how many beats does each note last.\n     *\n     * Here is a legend:\n     * \"o\" - whole note, lasts four beats\n     * \"o|\" - half note, lasts two beats\n     * \".|\" - quater note, lasts one beat\n     */\n    public List<Integer> parse_music(String string) {\n        String[] notes = string.split(\" \");\n        List<Integer> beats = new ArrayList<>();\n        \n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    beats.add(4);\n                    break;\n                case \"o|\":\n                    beats.add(2);\n                    break;\n                case \".|\":\n                    beats.add(1);\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid note: \" + note);\n            }\n        }\n        \n        return beats;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        List<Integer> expectedOutput = Arrays.asList(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4);\n        String input = \"o o| .| o| o| .| .| .| .| o o\";\n        \n        List<Integer> actualOutput = solution.parse_music(input);\n        \n        // Check if the output matches the expected result\n        boolean isCorrect = expectedOutput.equals(actualOutput);\n        \n        System.out.println(\"Expected Output: \" + expectedOutput);\n        System.out.println(\"Actual Output:   \" + actualOutput);\n        System.out.println(\"Is Correct:      \" + isCorrect);\n    }\n}\n"}
{"task_id": "Java/18", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Find how many times a given substring can be found in the original string. Count overlapping cases.\n     *\n     * @param string The original string.\n     * @param substring The substring to find.\n     * @return The number of times the substring appears in the original string, including overlaps.\n     */\n    public int how_many_times(String string, String substring) {\n        if (substring.isEmpty()) return 0;\n        \n        int count = 0;\n        int index = 0;\n        \n        while ((index = string.indexOf(substring, index)) != -1) {\n            count++;\n            index++; // Move to the next character after the found substring\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.how_many_times(\"\", \"a\")); // Expected output: 0\n        System.out.println(solution.how_many_times(\"aaa\", \"a\")); // Expected output: 3\n        System.out.println(solution.how_many_times(\"aaaa\", \"aa\")); // Expected output: 3\n        System.out.println(solution.how_many_times(\"abababa\", \"aba\")); // Expected output: 3\n        System.out.println(solution.how_many_times(\"testtest\", \"test\")); // Expected output: 2\n        System.out.println(solution.how_many_times(\"abcde\", \"fgh\")); // Expected output: 0\n    }\n}\n"}
{"task_id": "Java/19", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Input is a space-delimited string of numberals from 'zero' to 'nine'.\n     * Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n     * Return the string with numbers sorted from smallest to largest\n     *\n     * @param numbers a space-delimited string of numberals\n     * @return the sorted string\n     */\n    public String sort_numbers(String numbers) {\n        Map<String, Integer> numeralMap = new HashMap<>();\n        numeralMap.put(\"zero\", 0);\n        numeralMap.put(\"one\", 1);\n        numeralMap.put(\"two\", 2);\n        numeralMap.put(\"three\", 3);\n        numeralMap.put(\"four\", 4);\n        numeralMap.put(\"five\", 5);\n        numeralMap.put(\"six\", 6);\n        numeralMap.put(\"seven\", 7);\n        numeralMap.put(\"eight\", 8);\n        numeralMap.put(\"nine\", 9);\n\n        String[] words = numbers.split(\"\\\\s+\");\n        Integer[] nums = new Integer[words.length];\n\n        for (int i = 0; i < words.length; i++) {\n            nums[i] = numeralMap.get(words[i]);\n        }\n\n        Arrays.sort(nums);\n\n        StringBuilder sortedNumbers = new StringBuilder();\n        for (Integer num : nums) {\n            sortedNumbers.append(numeralMap.inverse().get(num)).append(\" \");\n        }\n\n        return sortedNumbers.toString().trim();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sort_numbers(\"three one five\")); // Expected: \"one three five\"\n        System.out.println(solution.sort_numbers(\"nine eight seven\")); // Expected: \"seven eight nine\"\n        System.out.println(solution.sort_numbers(\"four six two\")); // Expected: \"two four six\"\n        System.out.println(solution.sort_numbers(\"zero zero\")); // Expected: \"zero zero\"\n        System.out.println(solution.sort_numbers(\"five three one\")); // Expected: \"one three five\"\n    }\n}\n"}
{"task_id": "Java/20", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n     */\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements\");\n        }\n\n        double minDiff = Double.MAX_VALUE;\n        List<Double> closestElements = new ArrayList<>();\n\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (diff < minDiff) {\n                    minDiff = diff;\n                    closestElements.clear();\n                    closestElements.add(Math.min(numbers.get(i), numbers.get(j)));\n                    closestElements.add(Math.max(numbers.get(i), numbers.get(j)));\n                }\n            }\n        }\n\n        return closestElements;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))); // [2.0, 2.2]\n        System.out.println(solution.find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))); // [2.0, 2.0]\n        System.out.println(solution.find_closest_elements(Arrays.asList(-1.0, -2.0, -3.0, -4.0, -5.0, -2.2))); // [-2.2, -2.0]\n        System.out.println(solution.find_closest_elements(Arrays.asList(10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0))); // [9.0, 10.0]\n        System.out.println(solution.find_closest_elements(Arrays.asList(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5))); // [1.5, 2.5]\n    }\n}\n"}
{"task_id": "Java/21", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     Given list of numbers (of at least two elements), apply a linear transform to that list,\n     such that the smallest number will become 0 and the largest will become 1\n     >>> rescale_to_unit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n     [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"Input list must contain at least two elements\");\n        }\n\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n\n        List<Double> scaledNumbers = new ArrayList<>();\n        for (Double number : numbers) {\n            double scaledValue = (number - min) / (max - min);\n            scaledNumbers.add(scaledValue);\n        }\n        return scaledNumbers;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Test Case 1: [1.0, 2.0, 3.0, 4.0, 5.0]\");\n        List<Double> test1 = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        System.out.println(solution.rescale_to_unit(test1));\n\n        System.out.println(\"Test Case 2: [10.0, 20.0, 30.0]\");\n        List<Double> test2 = Arrays.asList(10.0, 20.0, 30.0);\n        System.out.println(solution.rescale_to_unit(test2));\n\n        System.out.println(\"Test Case 3: [5.5, 7.8, 9.2, 4.3]\");\n        List<Double> test3 = Arrays.asList(5.5, 7.8, 9.2, 4.3);\n        System.out.println(solution.rescale_to_unit(test3));\n    }\n}\n"}
{"task_id": "Java/22", "generation": "import java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass Solution {\n\n    /**\n     * Filter given list of any values only for integers\n     *\n     * @param values List of objects to be filtered\n     * @return A list containing only the integer values from the input list\n     */\n    public List<Integer> filter_integers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n\n    @Test\n    void testFilterIntegers() {\n        assertEquals(Arrays.asList(5), filter_integers(Arrays.asList('a', 3.14, 5)));\n        assertEquals(Arrays.asList(1, 2, 3), filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of())));\n        assertEquals(Arrays.asList(), filter_integers(Arrays.asList(\"hello\", true, null)));\n        assertEquals(Arrays.asList(0, -1, 42), filter_integers(Arrays.asList(0, -1, 42, 'x', new ArrayList<>(), new HashMap<>())));\n    }\n}\n\n// To run the tests, you can use a testing framework like JUnit. Ensure that your environment is set up to support JUnit.\n"}
{"task_id": "Java/23", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return length of given string\n     *\n     * >>> strlen(\"\")\n     * 0\n     * >>> strlen(\"abc\")\n     * 3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n\n    public static void main(String[] args) {\n        // Test cases for the strlen method\n        Solution solution = new Solution();\n\n        // Test case 1: Empty string\n        System.out.println(\"strlen(\"\") should be 0: \" + (solution.strlen(\"\") == 0));\n\n        // Test case 2: Single character string\n        System.out.println(\"strlen(\\\"a\\\") should be 1: \" + (solution.strlen(\"a\") == 1));\n\n        // Test case 3: Multiple characters string\n        System.out.println(\"strlen(\\\"abc\\\") should be 3: \" + (solution.strlen(\"abc\") == 3));\n\n        // Test case 4: Longer string\n        System.out.println(\"strlen(\\\"hello world\\\") should be 11: \" + (solution.strlen(\"hello world\") == 11));\n    }\n}\n"}
{"task_id": "Java/24", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * For a given number n, find the largest number that divides n evenly, smaller than n.\n     *\n     * @param n The input number.\n     * @return The largest divisor of n that is smaller than n.\n     */\n    public int largest_divisor(int n) {\n        for (int i = n / 2; i >= 1; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1; // If no divisor found, return 1 (every number is divisible by 1)\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.largest_divisor(15)); // Expected output: 5\n        System.out.println(solution.largest_divisor(28)); // Expected output: 14\n        System.out.println(solution.largest_divisor(37)); // Expected output: 1 (since 37 is a prime number)\n        System.out.println(solution.largest_divisor(99)); // Expected output: 33\n    }\n}\n"}
{"task_id": "Java/25", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Return list of prime factors of given integer in the order from smallest to largest.\n     * Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n     * Input number should be equal to the product of all factors\n     *\n     * @param n The integer to factorize\n     * @return A list containing the prime factors of `n`\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        // Divide by 2 to remove all even factors\n        while (n % 2 == 0) {\n            factors.add(2);\n            n /= 2;\n        }\n        // Now n is odd, start checking from 3\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            // While i divides n, add i and divide n\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        // If n is a prime number greater than 2\n        if (n > 2) {\n            factors.add(n);\n        }\n        return factors;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Factorize(8): \" + solution.factorize(8));   // [2, 2, 2]\n        System.out.println(\"Factorize(25): \" + solution.factorize(25));  // [5, 5]\n        System.out.println(\"Factorize(70): \" + solution.factorize(70));  // [2, 5, 7]\n        System.out.println(\"Factorize(49): \" + solution.factorize(49));  // [7, 7]\n        System.out.println(\"Factorize(100): \" + solution.factorize(100)); // [2, 2, 5, 5]\n    }\n}\n"}
{"task_id": "Java/26", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * From a list of integers, remove all elements that occur more than once.\n     * Keep order of elements left the same as in the input.\n     *\n     * @param numbers List of integers to process.\n     * @return A new list with duplicates removed and original order preserved.\n     */\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        // Use a stream to filter out elements that appear more than once\n        return numbers.stream()\n                      .distinct()\n                      .collect(Collectors.toList());\n    }\n\n    /**\n     * Test the remove_duplicates method with various inputs.\n     */\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: Normal list with duplicates\n        List<Integer> input1 = Arrays.asList(1, 2, 3, 2, 4);\n        System.out.println(\"Input: \" + input1);\n        System.out.println(\"Output: \" + solution.remove_duplicates(input1));\n\n        // Test case 2: List without duplicates\n        List<Integer> input2 = Arrays.asList(5, 6, 7, 8);\n        System.out.println(\"Input: \" + input2);\n        System.out.println(\"Output: \" + solution.remove_duplicates(input2));\n\n        // Test case 3: Empty list\n        List<Integer> input3 = new ArrayList<>();\n        System.out.println(\"Input: \" + input3);\n        System.out.println(\"Output: \" + solution.remove_duplicates(input3));\n\n        // Test case 4: List with all duplicates\n        List<Integer> input4 = Arrays.asList(1, 1, 1, 1, 1);\n        System.out.println(\"Input: \" + input4);\n        System.out.println(\"Output: \" + solution.remove_duplicates(input4));\n    }\n}\n"}
{"task_id": "Java/27", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n     *\n     * @param string The input string to be flipped.\n     * @return A new string with the case of each character flipped.\n     */\n    public String flip_case(String string) {\n        StringBuilder result = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                result.append(Character.toLowerCase(c));\n            } else {\n                result.append(Character.toUpperCase(c));\n            }\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.flip_case(\"Hello\"));  // Output: \"hELLO\"\n        System.out.println(solution.flip_case(\"WORLD\"));  // Output: \"world\"\n        System.out.println(solution.flip_case(\"Java123\"));  // Output: \"jAVA123\"\n        System.out.println(solution.flip_case(\"12345\"));  // Output: \"12345\" (no change as there are no alphabetic characters)\n        System.out.println(solution.flip_case(\"\"));  // Output: \"\" (empty string)\n    }\n}\n"}
{"task_id": "Java/28", "generation": "import java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nclass Solution {\n    /**\n     * Concatenate list of strings into a single string\n     *\n     * @param strings the list of strings to concatenate\n     * @return the concatenated string\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String str : strings) {\n            sb.append(str);\n        }\n        return sb.toString();\n    }\n}\n\nclass TestSolution {\n    @Test\n    void testConcatenateEmptyList() {\n        Solution solution = new Solution();\n        assertEquals(\"\", solution.concatenate(new ArrayList<>()), \"Should concatenate an empty list to an empty string\");\n    }\n\n    @Test\n    void testConcatenateSingleElement() {\n        Solution solution = new Solution();\n        assertEquals(\"a\", solution.concatenate(Arrays.asList(\"a\")), \"Should concatenate a single element list to the same string\");\n    }\n\n    @Test\n    void testConcatenateMultipleElements() {\n        Solution solution = new Solution();\n        assertEquals(\"abc\", solution.concatenate(Arrays.asList(\"a\", \"b\", \"c\")), \"Should concatenate multiple elements into one string\");\n    }\n}\n"}
{"task_id": "Java/29", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Filter an input list of strings only for ones that start with a given prefix.\n     *\n     * @param strings The input list of strings.\n     * @param prefix  The prefix to filter the strings by.\n     * @return A list of strings that start with the given prefix.\n     */\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Test Case 1: Empty List\");\n        System.out.println(solution.filter_by_prefix(List.of(), \"a\")); // []\n\n        System.out.println(\"\\nTest Case 2: No Matching Prefix\");\n        System.out.println(solution.filter_by_prefix(Arrays.asList(\"abc\", \"bcd\", \"cde\"), \"z\")); // []\n\n        System.out.println(\"\\nTest Case 3: Matching Prefix\");\n        System.out.println(solution.filter_by_prefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")); // [abc, array]\n\n        System.out.println(\"\\nTest Case 4: Multiple Matches\");\n        System.out.println(solution.filter_by_prefix(Arrays.asList(\"apple\", \"banana\", \"apricot\", \"cherry\", \"blueberry\"), \"a\")); // [apple, apricot]\n    }\n}\n"}
{"task_id": "Java/30", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return only positive numbers in the list.\n     *\n     * @param l The input list of integers.\n     * @return A list containing only the positive numbers from the input list.\n     */\n    public List<Integer> get_positive(List<Integer> l) {\n        return l.stream()\n                .filter(num -> num > 0)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Test Case 1: \" + solution.get_positive(Arrays.asList(-1, 2, -4, 5, 6)));\n        System.out.println(\"Expected Output: [2, 5, 6]\");\n\n        System.out.println(\"Test Case 2: \" + solution.get_positive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)));\n        System.out.println(\"Expected Output: [5, 3, 2, 3, 9, 123, 1]\");\n    }\n}\n"}
{"task_id": "Java/31", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Return true if a given number is prime, and false otherwise.\n     */\n    public boolean is_prime(int n) {\n        // Handle edge cases for 0, 1, and negative numbers\n        if (n <= 1) {\n            return false;\n        }\n        \n        // Check divisibility from 2 to the square root of n\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.is_prime(6));   // Output: false\n        System.out.println(solution.is_prime(101)); // Output: true\n        System.out.println(solution.is_prime(11));  // Output: true\n        System.out.println(solution.is_prime(13441));// Output: true\n        System.out.println(solution.is_prime(61));  // Output: true\n        System.out.println(solution.is_prime(4));   // Output: false\n        System.out.println(solution.is_prime(1));   // Output: false\n    }\n}\n"}
{"task_id": "Java/32", "generation": "import java.util.Arrays;\nimport java.util.List;\n\nclass Solution {\n    /**\n     Evaluates polynomial with coefficients xs at point x.\n     return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n      */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n\n    /**\n     xs are coefficients of a polynomial.\n     find_zero finds x such that poly(x) = 0.\n     find_zero returns only one zero point, even if there are many.\n     Moreover, find_zero only takes list xs having an even number of coefficients\n     and the largest non-zero coefficient as it guarantees\n     a solution.\n     >>> find_zero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n     -0.5\n     >>> find_zero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n     1.0\n      */\n    public double find_zero(List<Double> xs) {\n        if (xs.size() % 2 != 0 || xs.isEmpty()) {\n            throw new IllegalArgumentException(\"The list must have an even number of coefficients.\");\n        }\n\n        // Implementing a simple bisection method to find the root.\n        double lowerBound = -10;\n        double upperBound = 10;\n        double tolerance = 1e-6;\n\n        while (upperBound - lowerBound > tolerance) {\n            double midPoint = (lowerBound + upperBound) / 2.0;\n            if (poly(xs, midPoint) == 0) {\n                return midPoint;\n            } else if (poly(xs, lowerBound) * poly(xs, midPoint) < 0) {\n                upperBound = midPoint;\n            } else {\n                lowerBound = midPoint;\n            }\n        }\n\n        return (lowerBound + upperBound) / 2.0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases for poly method\n        List<Double> xs1 = Arrays.asList(1.0, 2.0);\n        double result1 = solution.poly(xs1, -0.5);\n        System.out.println(\"poly(1, 2)(-0.5) = \" + result1); // Should be close to 0\n\n        List<Double> xs2 = Arrays.asList(-6.0, 11.0, -6.0, 1.0);\n        double result2 = solution.poly(xs2, 1.0);\n        System.out.println(\"poly(-6, 11, -6, 1)(1) = \" + result2); // Should be close to 0\n\n        // Test cases for find_zero method\n        List<Double> xs3 = Arrays.asList(1.0, 2.0);\n        double zeroPoint1 = solution.find_zero(xs3);\n        System.out.println(\"find_zero([1, 2]) = \" + zeroPoint1); // Should be close to -0.5\n\n        List<Double> xs4 = Arrays.asList(-6.0, 11.0, -6.0, 1.0);\n        double zeroPoint2 = solution.find_zero(xs4);\n        System.out.println(\"find_zero([-6, 11, -6, 1]) = \" + zeroPoint2); // Should be close to 1.0\n    }\n}\n"}
{"task_id": "Java/33", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     This function takes a list l and returns a list l' such that\n     l' is identical to l in the indicies that are not divisible by three, while its values at the indices that are divisible by three are equal\n     to the values of the corresponding indices of l, but sorted in ascending order.\n     >>> sort_third(Arrays.asList(1, 2, 3))\n     [1, 2, 3]\n     >>> sort_third(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n     [2, 6, 3, 4, 8, 9, 5]\n      */\n    public List<Integer> sort_third(List<Integer> l) {\n        if (l == null || l.size() < 3) {\n            return l;\n        }\n\n        List<Integer> result = new ArrayList<>(l);\n        List<Integer> thirdIndicesValues = new ArrayList<>();\n\n        for (int i = 2; i < result.size(); i += 3) {\n            thirdIndicesValues.add(result.get(i));\n        }\n\n        Collections.sort(thirdIndicesValues);\n\n        int index = 0;\n        for (int i = 2; i < result.size() && index < thirdIndicesValues.size(); i += 3, ++index) {\n            result.set(i, thirdIndicesValues.get(index));\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sort_third(Arrays.asList(1, 2, 3))); // [1, 2, 3]\n        System.out.println(solution.sort_third(Arrays.asList(5, 6, 3, 4, 8, 9, 2))); // [2, 6, 3, 4, 8, 9, 5]\n        System.out.println(solution.sort_third(Arrays.asList(10, 11, 12, 13, 14, 15, 16, 17, 18))); // [10, 11, 12, 13, 14, 15, 16, 17, 18]\n        System.out.println(solution.sort_third(Arrays.asList(9, 8, 7, 6, 5, 4, 3, 2, 1))); // [9, 8, 7, 6, 5, 4, 3, 2, 1]\n    }\n}\n"}
{"task_id": "Java/34", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return sorted unique elements in a list\n     * >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n     * [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> set = new LinkedHashSet<>(l);\n        return new ArrayList<>(set);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1\n        List<Integer> list1 = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        System.out.println(\"Original: \" + list1);\n        System.out.println(\"Unique:   \" + solution.unique(list1));\n        \n        // Test case 2\n        List<Integer> list2 = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n        System.out.println(\"Original: \" + list2);\n        System.out.println(\"Unique:   \" + solution.unique(list2));\n        \n        // Test case 3\n        List<Integer> list3 = Arrays.asList(10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0);\n        System.out.println(\"Original: \" + list3);\n        System.out.println(\"Unique:   \" + solution.unique(list3));\n        \n        // Test case 4\n        List<Integer> list4 = Arrays.asList(1, 1, 1, 1, 1);\n        System.out.println(\"Original: \" + list4);\n        System.out.println(\"Unique:   \" + solution.unique(list4));\n    }\n}\n"}
{"task_id": "Java/35", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return maximum element in the list.\n     *\n     * @param l List of integers from which to find the maximum element.\n     * @return The maximum element in the list.\n     */\n    public int max_element(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List must not be null or empty\");\n        }\n        \n        return Collections.max(l);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(1, 2, 3);\n        System.out.println(\"Max element in [1, 2, 3]: \" + solution.max_element(test1)); // Expected: 3\n\n        List<Integer> test2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n        System.out.println(\"Max element in [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]: \" + solution.max_element(test2)); // Expected: 123\n\n        List<Integer> test3 = Arrays.asList(-1, -2, -3, -4);\n        System.out.println(\"Max element in [-1, -2, -3, -4]: \" + solution.max_element(test3)); // Expected: -1\n\n        List<Integer> test4 = new ArrayList<>();\n        try {\n            System.out.println(\"Max element in []: \" + solution.max_element(test4));\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage()); // Expected: List must not be null or empty\n        }\n\n        List<Integer> test5 = null;\n        try {\n            System.out.println(\"Max element in null: \" + solution.max_element(test5));\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage()); // Expected: List must not be null or empty\n        }\n    }\n}\n"}
{"task_id": "Java/36", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n     */\n    public int fizz_buzz(int n) {\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String numStr = Integer.toString(i);\n                for (char c : numStr.toCharArray()) {\n                    if (c == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(\"fizz_buzz(50): \" + solution.fizz_buzz(50)); // Expected: 0\n        System.out.println(\"fizz_buzz(78): \" + solution.fizz_buzz(78)); // Expected: 2\n        System.out.println(\"fizz_buzz(79): \" + solution.fizz_buzz(79)); // Expected: 3\n        System.out.println(\"fizz_buzz(100): \" + solution.fizz_buzz(100)); // Expected: 4 (77, 781, 782)\n        System.out.println(\"fizz_buzz(150): \" + solution.fizz_buzz(150)); // Expected: 6\n    }\n}\n"}
{"task_id": "Java/37", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     This function takes a list l and returns a list l' such that\n     l' is identical to l in the odd indicies, while its values at the even indicies are equal\n     to the values of the even indicies of l, but sorted.\n     >>> sort_even(Arrays.asList(1, 2, 3))\n     [1, 2, 3]\n     >>> sort_even(Arrays.asList(5, 6, 3, 4))\n     [3, 6, 5, 4]\n      */\n    public List<Integer> sort_even(List<Integer> l) {\n        if (l == null || l.isEmpty()) return l;\n\n        List<Integer> evenIndices = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 2) {\n            evenIndices.add(l.get(i));\n        }\n\n        Collections.sort(evenIndices);\n\n        List<Integer> result = new ArrayList<>(l);\n        int evenIndex = 0;\n        for (int i = 0; i < result.size(); i += 2) {\n            if (evenIndex < evenIndices.size()) {\n                result.set(i, evenIndices.get(evenIndex));\n                evenIndex++;\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sort_even(Arrays.asList(1, 2, 3))); // [1, 2, 3]\n        System.out.println(solution.sort_even(Arrays.asList(5, 6, 3, 4))); // [3, 6, 5, 4]\n        System.out.println(solution.sort_even(Arrays.asList(9, 8, 7, 6, 5, 4, 3, 2, 1))); // [3, 8, 5, 6, 7, 4, 9, 2, 1]\n        System.out.println(solution.sort_even(new ArrayList<>())); // []\n        System.out.println(solution.sort_even(Arrays.asList(10))); // [10]\n    }\n}\n"}
{"task_id": "Java/38", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n     * takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decode_cyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse the cycling in each group to decode. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Original: \" + \"abcde\");\n        System.out.println(\"Encoded:  \" + solution.encodeCyclic(\"abcde\"));\n        System.out.println(\"Decoded:  \" + solution.decode_cyclic(solution.encodeCyclic(\"abcde\")));\n\n        System.out.println(\"Original: \" + \"hello\");\n        System.out.println(\"Encoded:  \" + solution.encodeCyclic(\"hello\"));\n        System.out.println(\"Decoded:  \" + solution.decode_cyclic(solution.encodeCyclic(\"hello\")));\n\n        System.out.println(\"Original: \" + \"world!\");\n        System.out.println(\"Encoded:  \" + solution.encodeCyclic(\"world!\"));\n        System.out.println(\"Decoded:  \" + solution.decode_cyclic(solution.encodeCyclic(\"world!\")));\n    }\n}\n"}
{"task_id": "Java/39", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n     */\n    public int prime_fib(int n) {\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; primes.size() < n; ) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n            i++;\n        }\n        \n        return findFibonacciPrime(primes, n);\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    private int findFibonacciPrime(List<Integer> primes, int n) {\n        List<Integer> fibPrimes = new ArrayList<>();\n        int a = 0, b = 1;\n        while (fibPrimes.size() < n) {\n            int nextFib = a + b;\n            a = b;\n            b = nextFib;\n            if (primes.contains(nextFib)) {\n                fibPrimes.add(nextFib);\n            }\n        }\n        return fibPrimes.get(n - 1);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.prime_fib(1)); // Expected output: 2\n        System.out.println(solution.prime_fib(2)); // Expected output: 3\n        System.out.println(solution.prime_fib(3)); // Expected output: 5\n        System.out.println(solution.prime_fib(4)); // Expected output: 13\n        System.out.println(solution.prime_fib(5)); // Expected output: 89\n    }\n}\n"}
{"task_id": "Java/40", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * triples_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are three distinct elements in the list that\n     * sum to zero, and False otherwise.\n     */\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        // Sort the list to make it easier to find triplets that sum to zero\n        Collections.sort(l);\n        \n        for (int i = 0; i < l.size() - 2; i++) {\n            int left = i + 1;\n            int right = l.size() - 1;\n            \n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                \n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1, 3, -2, 1))); // true\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(2, 4, -5, 3, 9, 7))); // true\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1))); // false\n    }\n}\n"}
{"task_id": "Java/41", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Imagine a road that's a perfectly straight infinitely long line.\n     * n cars are driving left to right; simultaneously, a different set of n cars\n     * are driving right to left. The two sets of cars start out being very far from each other.\n     * All cars move in the same speed. Two cars are said to collide when a car that's moving left to right hits a car that's moving right to left.\n     * However, the cars are infinitely sturdy and strong; as a result, they continue moving in their trajectory as if they did not collide.\n     *\n     * This function outputs the number of such collisions.\n     */\n    public int car_race_collision(int n) {\n        // Since all cars move at the same speed and start far apart,\n        // each car from one direction will eventually collide with exactly one car from the opposite direction.\n        return n;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.car_race_collision(0));  // Expected output: 0\n        System.out.println(solution.car_race_collision(1));  // Expected output: 1\n        System.out.println(solution.car_race_collision(2));  // Expected output: 2\n        System.out.println(solution.car_race_collision(5));  // Expected output: 5\n    }\n}\n"}
{"task_id": "Java/42", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return list with elements incremented by 1.\n     *\n     * @param l The input list of integers.\n     * @return A new list where each element is incremented by 1.\n     */\n    public List<Integer> incr_list(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Test Case 1: \" + solution.incr_list(Arrays.asList(1, 2, 3)).equals(Arrays.asList(2, 3, 4)));\n        System.out.println(\"Test Case 2: \" + solution.incr_list(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123)).equals(Arrays.asList(6, 4, 6, 3, 4, 4, 10, 1, 124)));\n        System.out.println(\"Test Case 3: \" + solution.incr_list(Arrays.asList(-1, -2, -3)).equals(Arrays.asList(0, -1, -2)));\n        System.out.println(\"Test Case 4: \" + solution.incr_list(new ArrayList<>()).equals(new ArrayList<>()));\n\n        // Additional test case with a larger list\n        List<Integer> largeList = Arrays.asList(100, 200, 300, 400, 500);\n        System.out.println(\"Test Case 5: \" + solution.incr_list(largeList).equals(Arrays.asList(101, 201, 301, 401, 501)));\n    }\n}\n"}
{"task_id": "Java/43", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * pairs_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are two distinct elements in the list that\n     * sum to zero, and False otherwise.\n     */\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        Set<Integer> seen = new HashSet<>();\n        \n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1, 3, -2, 1))); // false\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(2, 4, -5, 3, 5, 7))); // true\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1))); // false\n    }\n}\n"}
{"task_id": "Java/44", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Change numerical base of input number x to base.\n     * return string representation after the conversion.\n     * base numbers are less than 10.\n     *\n     * @param x The number to be converted.\n     * @param base The target base for conversion (less than 10).\n     * @return String representation of the converted number.\n     */\n    public String change_base(int x, int base) {\n        if (x == 0) return \"0\";\n        \n        StringBuilder result = new StringBuilder();\n        while (x > 0) {\n            int remainder = x % base;\n            result.insert(0, remainder);\n            x /= base;\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.change_base(8, 3)); // Expected: \"22\"\n        System.out.println(solution.change_base(8, 2)); // Expected: \"1000\"\n        System.out.println(solution.change_base(7, 2)); // Expected: \"111\"\n        System.out.println(solution.change_base(45, 5)); // Expected: \"140\"\n        System.out.println(solution.change_base(98, 7)); // Expected: \"163\"\n    }\n}\n"}
{"task_id": "Java/45", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given length of a side (base) and height, return area for a triangle.\n     *\n     * @param a The base length of the triangle.\n     * @param h The height of the triangle.\n     * @return The area of the triangle.\n     */\n    public double triangle_area(double a, double h) {\n        return 0.5 * a * h;\n    }\n\n    /**\n     * Main method to run test cases.\n     *\n     * @param args Command line arguments (not used).\n     */\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Test Case 1: Base = 5, Height = 3\");\n        double result1 = solution.triangle_area(5, 3);\n        System.out.println(\"Expected: 7.5, Actual: \" + result1);\n\n        System.out.println(\"\\nTest Case 2: Base = 10, Height = 4\");\n        double result2 = solution.triangle_area(10, 4);\n        System.out.println(\"Expected: 20.0, Actual: \" + result2);\n\n        System.out.println(\"\\nTest Case 3: Base = 7, Height = 8\");\n        double result3 = solution.triangle_area(7, 8);\n        System.out.println(\"Expected: 28.0, Actual: \" + result3);\n\n        System.out.println(\"\\nTest Case 4: Base = 15, Height = 6\");\n        double result4 = solution.triangle_area(15, 6);\n        System.out.println(\"Expected: 45.0, Actual: \" + result4);\n    }\n}\n"}
{"task_id": "Java/46", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     The Fib4 number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n     fib4(0) -> 0\n     fib4(1) -> 0\n     fib4(2) -> 2\n     fib4(3) -> 0\n     fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n     Please write a function to efficiently compute the n-th element of the fib4 number sequence. Do not use recursion.\n     >>> fib4(5)\n     4\n     >>> fib4(6)\n     8\n     >>> fib4(7)\n     14\n     */\n    public int fib4(int n) {\n        if (n == 0 || n == 1) return 0;\n        if (n == 2) return 2;\n        if (n == 3) return 0;\n\n        int[] dp = new int[n + 1];\n        dp[0] = 0;\n        dp[1] = 0;\n        dp[2] = 2;\n        dp[3] = 0;\n\n        for (int i = 4; i <= n; i++) {\n            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4];\n        }\n\n        return dp[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.fib4(5)); // Expected output: 4\n        System.out.println(solution.fib4(6)); // Expected output: 8\n        System.out.println(solution.fib4(7)); // Expected output: 14\n        System.out.println(solution.fib4(8)); // Expected output: 24\n        System.out.println(solution.fib4(9)); // Expected output: 44\n    }\n}\n"}
{"task_id": "Java/47", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return median of elements in the list l.\n     *\n     * @param l List of integers\n     * @return The median value as a double\n     */\n    public double median(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be null or empty\");\n        }\n\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            return ((double) l.get(size / 2 - 1) + (double) l.get(size / 2)) / 2;\n        } else {\n            return (double) l.get(size / 2);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> testList1 = Arrays.asList(3, 1, 2, 4, 5);\n        System.out.println(\"Median of \" + testList1 + \": \" + solution.median(testList1)); // Expected: 3\n\n        List<Integer> testList2 = Arrays.asList(-10, 4, 6, 1000, 10, 20);\n        System.out.println(\"Median of \" + testList2 + \": \" + solution.median(testList2)); // Expected: 8.0\n\n        List<Integer> testList3 = Arrays.asList(7, 5, 3, 1);\n        System.out.println(\"Median of \" + testList3 + \": \" + solution.median(testList3)); // Expected: 4.0\n\n        List<Integer> testList4 = Arrays.asList(-5, -2, 0, 3, 8, 9, 12);\n        System.out.println(\"Median of \" + testList4 + \": \" + solution.median(testList4)); // Expected: 3.0\n    }\n}\n"}
{"task_id": "Java/48", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Checks if given string is a palindrome\n     >>> is_palindrome(\"\")\n     true\n     >>> is_palindrome(\"aba\")\n     true\n     >>> is_palindrome(\"aaaaa\")\n     true\n     >>> is_palindrome(\"zbcd\")\n     false\n     */\n    public boolean is_palindrome(String text) {\n        int left = 0;\n        int right = text.length() - 1;\n\n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.is_palindrome(\"\"));       // true\n        System.out.println(solution.is_palindrome(\"aba\"));    // true\n        System.out.println(solution.is_palindrome(\"aaaaa\"));  // true\n        System.out.println(solution.is_palindrome(\"zbcd\"));   // false\n        System.out.println(solution.is_palindrome(\"level\"));  // true\n        System.out.println(solution.is_palindrome(\"noon\"));   // true\n        System.out.println(solution.is_palindrome(\"abcde\"));  // false\n    }\n}\n"}
{"task_id": "Java/49", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return 2^n modulo p (be aware of numerics).\n     */\n    public int modp(int n, int p) {\n        if (n == 0) return 1; // Base case: 2^0 = 1\n        long result = 1;\n        for (int i = 0; i < n; i++) {\n            result = (result * 2) % p;\n        }\n        return (int) result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.modp(3, 5));   // Expected output: 3\n        System.out.println(solution.modp(1101, 101)); // Expected output: 2\n        System.out.println(solution.modp(0, 101));  // Expected output: 1\n        System.out.println(solution.modp(3, 11));   // Expected output: 8\n        System.out.println(solution.modp(100, 101)); // Expected output: 1\n    }\n}\n"}
{"task_id": "Java/50", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n     * takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decode_shift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n     * Main method to test the encodeShift and decode_shift methods.\n     */\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        String[] testStrings = {\"abc\", \"hello\", \"world\", \"java\", \"programming\"};\n        \n        for (String s : testStrings) {\n            System.out.println(\"Original: \" + s);\n            String encoded = solution.encodeShift(s);\n            System.out.println(\"Encoded:  \" + encoded);\n\n            String decoded = solution.decode_shift(encoded);\n            System.out.println(\"Decoded:  \" + decoded);\n            \n            // Check if the original and decoded strings are equal\n            assert s.equals(decoded) : \"Decoding failed for string: \" + s;\n        }\n\n        System.out.println(\"All test cases passed!\");\n    }\n}\n"}
{"task_id": "Java/51", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * remove_vowels is a function that takes string and returns string without vowels.\n     */\n    public String remove_vowels(String text) {\n        if (text == null || text.isEmpty()) {\n            return text;\n        }\n        \n        StringBuilder result = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (!isVowel(c)) {\n                result.append(c);\n            }\n        }\n        return result.toString();\n    }\n\n    private boolean isVowel(char c) {\n        return \"aeiouAEIOU\".indexOf(c) != -1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.remove_vowels(\"\")); // Output: \"\"\n        System.out.println(solution.remove_vowels(\"abcdef\\nghijklm\")); // Output: \"bcdf\\nghjklm\"\n        System.out.println(solution.remove_vowels(\"abcdef\")); // Output: \"bcdf\"\n        System.out.println(solution.remove_vowels(\"aaaaa\")); // Output: \"\"\n        System.out.println(solution.remove_vowels(\"aaBAA\")); // Output: \"B\"\n        System.out.println(solution.remove_vowels(\"zbcd\")); // Output: \"zbcd\"\n    }\n}\n"}
{"task_id": "Java/52", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return True if all numbers in the list l are below threshold t.\n     */\n    public boolean below_threshold(List<Integer> l, int t) {\n        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.below_threshold(Arrays.asList(1, 2, 4, 10), 100)); // Expected: true\n        System.out.println(solution.below_threshold(Arrays.asList(1, 20, 4, 10), 5));  // Expected: false\n        System.out.println(solution.below_threshold(Arrays.asList(-1, -2, -3), 0));    // Expected: true\n        System.out.println(solution.below_threshold(Arrays.asList(), 100));            // Expected: true (empty list)\n        System.out.println(solution.below_threshold(Arrays.asList(99, 100, 101), 100)); // Expected: false\n    }\n}\n"}
{"task_id": "Java/53", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n\n    /**\n     * Add two numbers x and y\n     *\n     * @param x the first number\n     * @param y the second number\n     * @return the sum of x and y\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Test Case 1: \" + (solution.add(2, 3) == 5 ? \"Passed\" : \"Failed\"));\n        System.out.println(\"Test Case 2: \" + (solution.add(5, 7) == 12 ? \"Passed\" : \"Failed\"));\n        System.out.println(\"Test Case 3: \" + (solution.add(-1, -1) == -2 ? \"Passed\" : \"Failed\"));\n        System.out.println(\"Test Case 4: \" + (solution.add(0, 0) == 0 ? \"Passed\" : \"Failed\"));\n        System.out.println(\"Test Case 5: \" + (solution.add(100, 200) == 300 ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/54", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Check if two words have the same kind of characters.\n     */\n    public boolean same_chars(String s0, String s1) {\n        // Convert both strings to character arrays\n        char[] chars0 = s0.toCharArray();\n        char[] chars1 = s1.toCharArray();\n\n        // Create a frequency map for each string\n        Map<Character, Integer> freqMap0 = new HashMap<>();\n        Map<Character, Integer> freqMap1 = new HashMap<>();\n\n        // Populate the frequency maps\n        for (char c : chars0) {\n            freqMap0.put(c, freqMap0.getOrDefault(c, 0) + 1);\n        }\n        for (char c : chars1) {\n            freqMap1.put(c, freqMap1.getOrDefault(c, 0) + 1);\n        }\n\n        // Check if the frequency maps are equal\n        return freqMap0.equals(freqMap1);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // true\n        System.out.println(solution.same_chars(\"abcd\", \"dddddddabc\"));              // true\n        System.out.println(solution.same_chars(\"dddddddabc\", \"abcd\"));              // true\n        System.out.println(solution.same_chars(\"eabcd\", \"dddddddabc\"));             // false\n        System.out.println(solution.same_chars(\"abcd\", \"dddddddabce\"));             // false\n        System.out.println(solution.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"));  // false\n    }\n}\n"}
{"task_id": "Java/55", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return n-th Fibonacci number.\n     *\n     * @param n The position in the Fibonacci sequence.\n     * @return The n-th Fibonacci number.\n     */\n    public int fib(int n) {\n        if (n <= 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        }\n        \n        int a = 0, b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a + b;\n            a = b;\n            b = temp;\n        }\n        return b;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(\"fib(10): \" + solution.fib(10)); // Expected: 55\n        System.out.println(\"fib(1): \" + solution.fib(1));   // Expected: 1\n        System.out.println(\"fib(8): \" + solution.fib(8));   // Expected: 21\n        System.out.println(\"fib(0): \" + solution.fib(0));   // Expected: 0\n        System.out.println(\"fib(-5): \" + solution.fib(-5)); // Expected: 0 (or handle error as needed)\n    }\n}\n"}
{"task_id": "Java/56", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * brackets is a string of \"<\" and \">\".\n     * return True if every opening bracket has a corresponding closing bracket.\n     *\n     * >>> correct_bracketing(\"<\")\n     * false\n     * >>> correct_bracketing(\"<>\")\n     * true\n     * >>> correct_bracketing(\"<<><>>\")\n     * true\n     * >>> correct_bracketing(\"><<>\")\n     * false\n     */\n    public boolean correct_bracketing(String brackets) {\n        int balance = 0;\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                balance++;\n            } else if (c == '>') {\n                balance--;\n            }\n            if (balance < 0) {\n                return false; // A closing bracket appears before an opening one\n            }\n        }\n        return balance == 0; // All brackets are correctly matched\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.correct_bracketing(\"<\"));       // false\n        System.out.println(solution.correct_bracketing(\"<>\"));      // true\n        System.out.println(solution.correct_bracketing(\"<<><>>\"));  // true\n        System.out.println(solution.correct_bracketing(\"><<>\"));    // false\n        System.out.println(solution.correct_bracketing(\"<<><<>>\")); // true\n        System.out.println(solution.correct_bracketing(\"<><>\"));    // true\n        System.out.println(solution.correct_bracketing(\"><><\"));    // false\n    }\n}\n"}
{"task_id": "Java/57", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return true if list elements are monotonically increasing or decreasing.\n     *\n     * @param l the input list of integers\n     * @return true if the list is monotonic, false otherwise\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l == null || l.size() <= 1) {\n            return true;\n        }\n\n        boolean increasing = true;\n        boolean decreasing = true;\n\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            } else if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n        }\n\n        return increasing || decreasing;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.monotonic(Arrays.asList(1, 2, 4, 20))); // true\n        System.out.println(solution.monotonic(Arrays.asList(1, 20, 4, 10))); // false\n        System.out.println(solution.monotonic(Arrays.asList(4, 1, 0, -10))); // true\n        System.out.println(solution.monotonic(Arrays.asList(5, 5, 5, 5)));   // true (constant list is considered monotonic)\n        System.out.println(solution.monotonic(Arrays.asList()));            // true (empty list is considered monotonic)\n    }\n}\n"}
{"task_id": "Java/58", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return sorted unique common elements for two lists.\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n\n        // Retain only the elements that are present in both sets\n        set1.retainAll(set2);\n\n        // Convert the result back to a sorted list\n        List<Integer> commonElements = new ArrayList<>(set1);\n        Collections.sort(commonElements);\n\n        return commonElements;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> l1 = Arrays.asList(1, 4, 3, 34, 653, 2, 5);\n        List<Integer> l2 = Arrays.asList(5, 7, 1, 5, 9, 653, 121);\n        System.out.println(\"Common elements (Test case 1): \" + solution.common(l1, l2)); // Expected: [1, 5, 653]\n\n        // Test case 2\n        List<Integer> l3 = Arrays.asList(5, 3, 2, 8);\n        List<Integer> l4 = Arrays.asList(3, 2);\n        System.out.println(\"Common elements (Test case 2): \" + solution.common(l3, l4)); // Expected: [2, 3]\n\n        // Test case 3\n        List<Integer> l5 = Arrays.asList(10, 20, 30);\n        List<Integer> l6 = Arrays.asList(40, 50, 60);\n        System.out.println(\"Common elements (Test case 3): \" + solution.common(l5, l6)); // Expected: []\n\n        // Test case 4\n        List<Integer> l7 = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> l8 = Arrays.asList(0, 1, 2, 3, 4, 5, 6);\n        System.out.println(\"Common elements (Test case 4): \" + solution.common(l7, l8)); // Expected: [1, 2, 3, 4, 5]\n    }\n}\n"}
{"task_id": "Java/59", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Return the largest prime factor of n. Assume n > 1 and is not a prime.\n     *\n     * @param n the number to find the largest prime factor for\n     * @return the largest prime factor of n\n     */\n    public int largest_prime_factor(int n) {\n        int maxPrime = -1;\n        \n        // Divide n by 2 to remove all even factors\n        while (n % 2 == 0) {\n            maxPrime = 2;\n            n /= 2;\n        }\n        \n        // Now n must be odd, start checking from 3\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            // While i divides n, print i and divide n\n            while (n % i == 0) {\n                maxPrime = i;\n                n /= i;\n            }\n        }\n        \n        // This condition is to handle the case when n is a prime number greater than 2\n        if (n > 2) {\n            maxPrime = n;\n        }\n        \n        return maxPrime;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.largest_prime_factor(13195)); // Expected output: 29\n        System.out.println(solution.largest_prime_factor(2048));  // Expected output: 2\n        System.out.println(solution.largest_prime_factor(600851475143L)); // Expected output: 6857 (a large prime factor)\n    }\n}\n"}
{"task_id": "Java/60", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * sum_to_n is a function that sums numbers from 1 to n.\n     */\n    public int sum_to_n(int n) {\n        return (n * (n + 1)) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"sum_to_n(30): \" + solution.sum_to_n(30)); // Expected: 465\n        System.out.println(\"sum_to_n(100): \" + solution.sum_to_n(100)); // Expected: 5050\n        System.out.println(\"sum_to_n(5): \" + solution.sum_to_n(5)); // Expected: 15\n        System.out.println(\"sum_to_n(10): \" + solution.sum_to_n(10)); // Expected: 55\n        System.out.println(\"sum_to_n(1): \" + solution.sum_to_n(1)); // Expected: 1\n    }\n}\n"}
{"task_id": "Java/61", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * brackets is a string of \"(\" and \")\".\n     * return True if every opening bracket has a corresponding closing bracket.\n     *\n     * >>> correct_bracketing(\"(\")\n     * false\n     * >>> correct_bracketing(\"()\")\n     * true\n     * >>> correct_bracketing(\"(()())\")\n     * true\n     * >>> correct_bracketing(\")(()\")\n     * false\n     */\n    public boolean correct_bracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        \n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.correct_bracketing(\"(\"));      // Expected: false\n        System.out.println(solution.correct_bracketing(\"()\"));     // Expected: true\n        System.out.println(solution.correct_bracketing(\"(()())\")); // Expected: true\n        System.out.println(solution.correct_bracketing(\")(()\"));   // Expected: false\n    }\n}\n"}
{"task_id": "Java/62", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * xs represent coefficients of a polynomial.\n     * xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     * Return derivative of this polynomial in the same form.\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        if (xs == null || xs.size() <= 1) {\n            return new ArrayList<>();\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.derivative(Arrays.asList(3, 1, 2, 4, 5))); // Expected: [1, 4, 12, 20]\n        System.out.println(solution.derivative(Arrays.asList(1, 2, 3)));       // Expected: [2, 6]\n\n        // Additional test cases\n        System.out.println(solution.derivative(Arrays.asList()));              // Expected: []\n        System.out.println(solution.derivative(Arrays.asList(5)));             // Expected: []\n    }\n}\n"}
{"task_id": "Java/63", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n     fibfib(0) == 0\n     fibfib(1) == 0\n     fibfib(2) == 1\n     fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n     Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n     >>> fibfib(1)\n     0\n     >>> fibfib(5)\n     4\n     >>> fibfib(8)\n     24\n      */\n    public int fibfib(int n) {\n        if (n == 0 || n == 1) return 0;\n        if (n == 2) return 1;\n\n        int a = 0, b = 0, c = 1;\n        for (int i = 3; i <= n; i++) {\n            int temp = a + b + c;\n            a = b;\n            b = c;\n            c = temp;\n        }\n        return c;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.fibfib(1));  // Expected output: 0\n        System.out.println(solution.fibfib(5));  // Expected output: 4\n        System.out.println(solution.fibfib(8));  // Expected output: 24\n    }\n}\n"}
{"task_id": "Java/64", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function vowels_count which takes a string representing\n     * a word as input and returns the number of vowels in the string.\n     * Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n     * vowel, but only when it is at the end of the given word.\n     *\n     * Example:\n     * >>> vowels_count(\"abcde\")\n     * 2\n     * >>> vowels_count(\"ACEDY\")\n     * 3\n     */\n    public int vowels_count(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = Character.toLowerCase(s.charAt(i));\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            } else if (c == 'y' && i == s.length() - 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.vowels_count(\"abcde\")); // Expected output: 2\n        System.out.println(solution.vowels_count(\"ACEDY\")); // Expected output: 3\n        System.out.println(solution.vowels_count(\"rhythm\")); // Expected output: 0\n        System.out.println(solution.vowels_count(\"encyclopedia\")); // Expected output: 6\n        System.out.println(solution.vowels_count(\"SYZYGY\")); // Expected output: 1\n    }\n}\n"}
{"task_id": "Java/65", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Circular shift the digits of the integer x, shift the digits right by shift\n     * and return the result as a string.\n     * If shift > number of digits, return digits reversed.\n     *\n     * @param x The integer to be circular shifted.\n     * @param shift The number of positions to shift the digits to the right.\n     * @return The resulting string after performing the circular shift.\n     */\n    public String circular_shift(int x, int shift) {\n        if (x == 0 || shift >= Integer.toString(x).length()) {\n            return new StringBuilder(Integer.toString(x)).reverse().toString();\n        }\n        \n        String numStr = Integer.toString(x);\n        int len = numStr.length();\n        shift %= len; // Handle cases where shift > number of digits\n        \n        if (shift == 0) {\n            return numStr;\n        }\n        \n        return numStr.substring(len - shift) + numStr.substring(0, len - shift);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.circular_shift(12345, 2)); // Expected: \"34512\"\n        System.out.println(solution.circular_shift(12345, 5)); // Expected: \"54321\"\n        System.out.println(solution.circular_shift(12345, 7)); // Expected: \"34512\" (since 7 % 5 = 2)\n        System.out.println(solution.circular_shift(0, 1));    // Expected: \"0\"\n        System.out.println(solution.circular_shift(12, 1));   // Expected: \"21\"\n        System.out.println(solution.circular_shift(12, 2));   // Expected: \"12\"\n    }\n}\n"}
{"task_id": "Java/66", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function that takes a string as input and returns the sum of the upper characters only ASCII codes.\n     *\n     * Examples:\n     * digitSum(\"\") => 0\n     * digitSum(\"abAB\") => 131\n     * digitSum(\"abcCd\") => 67\n     * digitSum(\"helloE\") => 69\n     * digitSum(\"woArBld\") => 131\n     * digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n\n    // Test cases to verify the correctness of the method\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.digitSum(\"\")); // Expected output: 0\n        System.out.println(solution.digitSum(\"abAB\")); // Expected output: 131 ('A' + 'B')\n        System.out.println(solution.digitSum(\"abcCd\")); // Expected output: 67 ('C' + 'D')\n        System.out.println(solution.digitSum(\"helloE\")); // Expected output: 69 ('E')\n        System.out.println(solution.digitSum(\"woArBld\")); // Expected output: 131 ('A' + 'B' + 'L' + 'D')\n        System.out.println(solution.digitSum(\"aAaaaXa\")); // Expected output: 153 ('A' * 4 + 'X')\n    }\n}\n"}
{"task_id": "Java/67", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * In this task, you will be given a string that represents a number of apples and oranges\n     * that are distributed in a basket of fruit. The basket contains apples, oranges, and mango fruits.\n     * Given the string that represents the total number of oranges and apples,\n     * and an integer that represent the total number of the fruits in the basket,\n     * return the number of the mango fruits in the basket.\n     *\n     * @param s a string representing the number of apples and oranges\n     * @param n the total number of fruits in the basket\n     * @return the number of mango fruits in the basket\n     */\n    public int fruit_distribution(String s, int n) {\n        // Extract the numbers from the string using regular expressions\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0].replaceAll(\"[^\\\\d]\", \"\"));\n        int oranges = Integer.parseInt(parts[3].replaceAll(\"[^\\\\d]\", \"\"));\n\n        // Calculate the number of mango fruits\n        return n - (apples + oranges);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.fruit_distribution(\"5 apples and 6 oranges\", 19)); // Expected output: 8\n        System.out.println(solution.fruit_distribution(\"0 apples and 1 oranges\", 3));   // Expected output: 2\n        System.out.println(solution.fruit_distribution(\"2 apples and 3 oranges\", 100)); // Expected output: 95\n        System.out.println(solution.fruit_distribution(\"100 apples and 1 oranges\", 120)); // Expected output: 19\n    }\n}\n"}
{"task_id": "Java/68", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> pluck(List<Integer> arr) {\n        if (arr.isEmpty()) return new ArrayList<>();\n        \n        int smallestEvenValue = Integer.MAX_VALUE;\n        int index = -1;\n\n        for (int i = 0; i < arr.size(); i++) {\n            int value = arr.get(i);\n            if (value % 2 == 0 && value <= smallestEvenValue) {\n                smallestEvenValue = value;\n                index = i;\n            }\n        }\n\n        return smallestEvenValue != Integer.MAX_VALUE ? Arrays.asList(smallestEvenValue, index) : new ArrayList<>();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test Case 1\n        List<Integer> input1 = Arrays.asList(4, 2, 3);\n        System.out.println(\"Input: \" + input1);\n        System.out.println(\"Output: \" + solution.pluck(input1));\n\n        // Test Case 2\n        List<Integer> input2 = Arrays.asList(1, 2, 3);\n        System.out.println(\"Input: \" + input2);\n        System.out.println(\"Output: \" + solution.pluck(input2));\n\n        // Test Case 3\n        List<Integer> input3 = new ArrayList<>();\n        System.out.println(\"Input: \" + input3);\n        System.out.println(\"Output: \" + solution.pluck(input3));\n\n        // Test Case 4\n        List<Integer> input4 = Arrays.asList(5, 0, 3, 0, 4, 2);\n        System.out.println(\"Input: \" + input4);\n        System.out.println(\"Output: \" + solution.pluck(input4));\n\n        // Test Case 5 - All odd numbers\n        List<Integer> input5 = Arrays.asList(1, 3, 5, 7);\n        System.out.println(\"Input: \" + input5);\n        System.out.println(\"Output: \" + solution.pluck(input5));\n\n        // Test Case 6 - Single even number at the end\n        List<Integer> input6 = Arrays.asList(1, 3, 5, 2);\n        System.out.println(\"Input: \" + input6);\n        System.out.println(\"Output: \" + solution.pluck(input6));\n\n        // Test Case 7 - All zeros\n        List<Integer> input7 = Arrays.asList(0, 0, 0);\n        System.out.println(\"Input: \" + input7);\n        System.out.println(\"Output: \" + solution.pluck(input7));\n    }\n}\n"}
{"task_id": "Java/69", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n     * zero, and has a frequency greater than or equal to the value of the integer itself.\n     * The frequency of an integer is the number of times it appears in the list.\n     * If no such a value exist, return -1.\n     *\n     * Examples:\n     * search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n     * search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n     * search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        // Count the frequency of each integer in the list\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        int result = -1;\n        \n        // Find the greatest integer with a frequency greater than or equal to its value\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            if (entry.getKey() <= entry.getValue() && entry.getKey() > result) {\n                result = entry.getKey();\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.search(Arrays.asList(4, 1, 2, 2, 3, 1))); // Expected output: 2\n        System.out.println(solution.search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4))); // Expected output: 3\n        System.out.println(solution.search(Arrays.asList(5, 5, 4, 4, 4))); // Expected output: -1\n        System.out.println(solution.search(Arrays.asList(6, 6, 6, 7, 8, 9, 9, 9, 9))); // Expected output: 9\n        System.out.println(solution.search(Arrays.asList(2, 3, 4, 5, 6))); // Expected output: -1\n    }\n}\n"}
{"task_id": "Java/70", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given list of integers, return list in strange order.\n     * Strange sorting, is when you start with the minimum value,\n     * then maximum of the remaining integers, then minimum and so on.\n     *\n     * Examples:\n     * strange_sort_list(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n     * strange_sort_list(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n     * strange_sort_list(Arrays()) == Arrays()\n     */\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        if (lst.isEmpty()) return result;\n\n        // Create a copy of the list to avoid modifying the original\n        List<Integer> sortedList = new ArrayList<>(lst);\n        Collections.sort(sortedList);\n\n        int left = 0;\n        int right = sortedList.size() - 1;\n\n        while (left <= right) {\n            if (left == right) {\n                result.add(sortedList.get(left));\n                break;\n            }\n            result.add(sortedList.get(left++));\n            result.add(sortedList.get(right--));\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.strange_sort_list(Arrays.asList(1, 2, 3, 4))); // [1, 4, 2, 3]\n        System.out.println(solution.strange_sort_list(Arrays.asList(5, 5, 5, 5))); // [5, 5, 5, 5]\n        System.out.println(solution.strange_sort_list(Arrays.asList()));           // []\n        System.out.println(solution.strange_sort_list(Arrays.asList(10, 20, 30, 40, 50))); // [10, 50, 20, 40, 30]\n    }\n}\n"}
{"task_id": "Java/71", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given the lengths of the three sides of a triangle. Return the area of\n     * the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n     * Otherwise return -1\n     * Three sides make a valid triangle when the sum of any two sides is greater\n     * than the third side.\n     * Example:\n     * triangle_area(3, 4, 5) == 6.00\n     * triangle_area(1, 2, 10) == -1\n     */\n    public double triangle_area(double a, double b, double c) {\n        // Check if the sides form a valid triangle\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        \n        // Calculate the semi-perimeter\n        double s = (a + b + c) / 2.0;\n        \n        // Calculate the area using Heron's formula\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        \n        // Round to 2 decimal points\n        return Math.round(area * 100.0) / 100.0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.triangle_area(3, 4, 5)); // Expected output: 6.00\n        System.out.println(solution.triangle_area(1, 2, 10)); // Expected output: -1\n        System.out.println(solution.triangle_area(5, 5, 8)); // Expected output: ~20.78\n        System.out.println(solution.triangle_area(6, 8, 10)); // Expected output: 24.00\n    }\n}\n"}
{"task_id": "Java/72", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function that returns True if the object q will fly, and False otherwise.\n     * The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n     *\n     * Example:\n     * will_it_fly(Arrays.asList(1, 2), 5) -> false\n     * # 1+2 is less than the maximum possible weight, but it's unbalanced.\n     *\n     * will_it_fly(Arrays.asList(3, 2, 3), 1) -> false\n     * # it's balanced, but 3+2+3 is more than the maximum possible weight.\n     *\n     * will_it_fly(Arrays.asList(3, 2, 3), 9) -> true\n     * # 3+2+3 is less than the maximum possible weight, and it's balanced.\n     *\n     * will_it_fly(Arrays.asList(3), 5) -> true\n     * # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean will_it_fly(List<Integer> q, int w) {\n        // Check if the list is a palindrome\n        List<Integer> reversedQ = new ArrayList<>(q);\n        Collections.reverse(reversedQ);\n        if (!q.equals(reversedQ)) {\n            return false;\n        }\n        \n        // Calculate the sum of elements in the list\n        int sum = q.stream().mapToInt(Integer::intValue).sum();\n        \n        // Check if the sum is less than or equal to w\n        return sum <= w;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.will_it_fly(Arrays.asList(1, 2), 5));  // false\n        System.out.println(solution.will_it_fly(Arrays.asList(3, 2, 3), 1));  // false\n        System.out.println(solution.will_it_fly(Arrays.asList(3, 2, 3), 9));  // true\n        System.out.println(solution.will_it_fly(Arrays.asList(3), 5));  // true\n    }\n}\n"}
{"task_id": "Java/73", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given an array arr of integers, find the minimum number of elements that\n     * need to be changed to make the array palindromic. A palindromic array is an array that\n     * is read the same backwards and forwards. In one change, you can change one element to any other element.\n     *\n     * For example:\n     * smallest_change(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n     * smallest_change(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n     * smallest_change(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallest_change(List<Integer> arr) {\n        int left = 0;\n        int right = arr.size() - 1;\n        int changes = 0;\n\n        while (left < right) {\n            if (!arr.get(left).equals(arr.get(right))) {\n                changes++;\n            }\n            left++;\n            right--;\n        }\n\n        return changes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.smallest_change(Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6))); // Expected output: 4\n        System.out.println(solution.smallest_change(Arrays.asList(1, 2, 3, 4, 3, 2, 2)));   // Expected output: 1\n        System.out.println(solution.smallest_change(Arrays.asList(1, 2, 3, 2, 1)));         // Expected output: 0\n        System.out.println(solution.smallest_change(Arrays.asList(5, 9, 3, 8, 6, 4, 7, 2))); // Expected output: 4\n        System.out.println(solution.smallest_change(Arrays.asList(1, 2, 3, 4, 5, 4, 3, 2, 1))); // Expected output: 0\n    }\n}\n"}
{"task_id": "Java/74", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Write a function that accepts two lists of strings and returns the list that has\n     * total number of chars in the all strings of the list less than the other list.\n     *\n     * if the two lists have the same number of chars, return the first list.\n     */\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        int sum1 = 0;\n        for (String str : lst1) {\n            sum1 += str.length();\n        }\n\n        int sum2 = 0;\n        for (String str : lst2) {\n            sum2 += str.length();\n        }\n\n        if (sum1 < sum2) {\n            return lst1;\n        } else if (sum2 < sum1) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.total_match(new ArrayList<>(), new ArrayList<>())); // []\n        System.out.println(solution.total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\"))); // [\"hI\", \"Hi\"]\n        System.out.println(solution.total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\"))); // [\"hi\", \"admin\"]\n        System.out.println(solution.total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\"))); // [\"hI\", \"hi\", \"hi\"]\n        System.out.println(solution.total_match(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"))); // [\"4\"]\n    }\n}\n"}
{"task_id": "Java/75", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Write a function that returns true if the given number is the multiplication of 3 prime numbers\n     * and false otherwise.\n     * Knowing that the prime number is less than 100.\n     * Example:\n     * is_multiply_prime(30) == true\n     * 30 = 2 * 3 * 5\n     */\n    public boolean is_multiply_prime(int a) {\n        if (a < 2) return false;\n\n        int count = 0;\n        for (int i = 2; i <= Math.sqrt(a); i++) {\n            while (a % i == 0 && isPrime(i)) {\n                count++;\n                a /= i;\n            }\n        }\n\n        // Check if the remaining number is also prime and greater than 1\n        if (a > 1 && isPrime(a)) {\n            count++;\n        }\n\n        return count == 3;\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.is_multiply_prime(30)); // true, because 30 = 2 * 3 * 5\n        System.out.println(solution.is_multiply_prime(60)); // false, because 60 = 2 * 2 * 3 * 5 (more than 3 primes)\n        System.out.println(solution.is_multiply_prime(100)); // false, because 100 is not a product of exactly 3 primes\n        System.out.println(solution.is_multiply_prime(2 * 3 * 7)); // true, because 42 = 2 * 3 * 7\n        System.out.println(solution.is_multiply_prime(59)); // false, because 59 is prime itself and not a product of exactly 3 primes\n    }\n}\n"}
{"task_id": "Java/76", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Your task is to write a function that returns true if a number x is a simple power of n and false in other cases.\n     * x is a simple power of n if n**int=x\n     * For example:\n     * is_simple_power(1, 4) => true\n     * is_simple_power(2, 2) => true\n     * is_simple_power(8, 2) => true\n     * is_simple_power(3, 2) => false\n     * is_simple_power(3, 1) => false\n     * is_simple_power(5, 3) => false\n     */\n    public boolean is_simple_power(int x, int n) {\n        if (n == 1) {\n            return x == 1;\n        }\n        \n        double power = Math.pow(x, 1.0 / n);\n        return Math.abs(power - Math.round(power)) < 1e-10; // Check if the result is close to an integer\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.is_simple_power(1, 4));   // true\n        System.out.println(solution.is_simple_power(2, 2));   // true\n        System.out.println(solution.is_simple_power(8, 2));   // true\n        System.out.println(solution.is_simple_power(3, 2));   // false\n        System.out.println(solution.is_simple_power(3, 1));   // false\n        System.out.println(solution.is_simple_power(5, 3));   // false\n        System.out.println(solution.is_simple_power(16, 2));  // true\n        System.out.println(solution.is_simple_power(81, 3));  // true\n        System.out.println(solution.is_simple_power(7, 2));   // false\n    }\n}\n"}
{"task_id": "Java/77", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Write a function that takes an integer a and returns true\n     * if this integer is a cube of some integer number.\n     * Note: you may assume the input is always valid.\n     * Examples:\n     * iscube(1) ==> true\n     * iscube(2) ==> false\n     * iscube(-1) ==> true\n     * iscube(64) ==> true\n     * iscube(0) ==> true\n     * iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) return true; // 0 is the cube of 0\n        \n        int absA = Math.abs(a);\n        double root = Math.cbrt(absA); // Calculate the cube root\n        return Math.floor(root) == root; // Check if the cube root is an integer\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.iscube(1));   // true\n        System.out.println(solution.iscube(2));   // false\n        System.out.println(solution.iscube(-1));  // true\n        System.out.println(solution.iscube(64));  // true\n        System.out.println(solution.iscube(0));   // true\n        System.out.println(solution.iscube(180)); // false\n    }\n}\n"}
{"task_id": "Java/78", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You have been tasked to write a function that receives\n     * a hexadecimal number as a string and counts the number of hexadecimal\n     * digits that are primes (prime number, or a prime, is a natural number\n     * greater than 1 that is not a product of two smaller natural numbers).\n     * Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n     * Prime numbers are 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\n     * So you have to determine a number of the following digits: 2, 3, 5, 7, B, D.\n     * Note: you may assume the input is always correct or empty string,\n     * and symbols A,B,C,D,E,F are always uppercase.\n     */\n    public int hex_key(String num) {\n        // Define a set of prime hexadecimal digits\n        Set<Character> primes = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        // Count the number of prime hexadecimal digits in the input string\n        int count = 0;\n        for (char c : num.toCharArray()) {\n            if (primes.contains(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.hex_key(\"AB\")); // Expected output: 1\n        System.out.println(solution.hex_key(\"1077E\")); // Expected output: 2\n        System.out.println(solution.hex_key(\"ABED1A33\")); // Expected output: 4\n        System.out.println(solution.hex_key(\"123456789ABCDEF0\")); // Expected output: 6\n        System.out.println(solution.hex_key(\"2020\")); // Expected output: 2\n    }\n}\n"}
{"task_id": "Java/79", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You will be given a number in decimal form and your task is to convert it to\n     * binary format. The function should return a string, with each character representing a binary\n     * number. Each character in the string will be '0' or '1'.\n     *\n     * There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n     * The extra characters are there to help with the format.\n     *\n     * Examples:\n     * decimal_to_binary(15)   // returns \"db1111db\"\n     * decimal_to_binary(32)   // returns \"db100000db\"\n     */\n    public String decimal_to_binary(int decimal) {\n        if (decimal == 0) return \"db0db\";\n        \n        StringBuilder binary = new StringBuilder();\n        while (decimal > 0) {\n            int remainder = decimal % 2;\n            binary.insert(0, remainder);\n            decimal /= 2;\n        }\n        \n        return \"db\" + binary.toString() + \"db\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.decimal_to_binary(15));   // Expected: db1111db\n        System.out.println(solution.decimal_to_binary(32));   // Expected: db100000db\n        System.out.println(solution.decimal_to_binary(0));    // Expected: db0db\n        System.out.println(solution.decimal_to_binary(45));   // Expected: db101101db\n        System.out.println(solution.decimal_to_binary(255));  // Expected: db11111111db\n    }\n}\n"}
{"task_id": "Java/80", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You are given a string s.\n     * Your task is to check if the string is happy or not.\n     * A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n     * For example:\n     * is_happy(a) => false\n     * is_happy(aa) => false\n     * is_happy(abcd) => true\n     * is_happy(aabb) => false\n     * is_happy(adb) => true\n     * is_happy(xyy) => false\n     */\n    public boolean is_happy(String s) {\n        if (s.length() < 3) return false;\n        \n        for (int i = 0; i <= s.length() - 3; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || \n                s.charAt(i) == s.charAt(i + 2) || \n                s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.is_happy(\"a\"));       // Output: false\n        System.out.println(solution.is_happy(\"aa\"));      // Output: false\n        System.out.println(solution.is_happy(\"abcd\"));    // Output: true\n        System.out.println(solution.is_happy(\"aabb\"));    // Output: false\n        System.out.println(solution.is_happy(\"adb\"));     // Output: true\n        System.out.println(solution.is_happy(\"xyy\"));     // Output: false\n        System.out.println(solution.is_happy(\"abcabc\"));  // Output: true\n        System.out.println(solution.is_happy(\"abccba\"));  // Output: false\n    }\n}\n"}
{"task_id": "Java/81", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * It is the last week of the semester and the teacher has to give the grades\n     * to students. The teacher has given you a list of GPAs for some students and you have to write\n     * a function that can output a list of letter grades using the following table:\n     *             GPA       |    Letter grade\n     *              4.0                A+\n     *            > 3.7                A\n     *            > 3.3                A-\n     *            > 3.0                B+\n     *            > 2.7                B\n     *            > 2.3                B-\n     *            > 2.0                C+\n     *            > 1.7                C\n     *            > 1.3                C-\n     *            > 1.0                D+\n     *            > 0.7                D\n     *            > 0.0                D-\n     *              0.0                E\n     *\n     * Example:\n     * numerical_letter_grade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        \n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n\n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Double> test1 = Arrays.asList(4.0, 3, 1.7, 2, 3.5);\n        System.out.println(solution.numerical_letter_grade(test1)); // Expected: [A+, B, C-, C, A-]\n\n        List<Double> test2 = Arrays.asList(4.0, 3.8, 3.2, 2.6, 1.9, 0.5);\n        System.out.println(solution.numerical_letter_grade(test2)); // Expected: [A+, A, A-, B+, C+, D-]\n\n        List<Double> test3 = Arrays.asList(4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0);\n        System.out.println(solution.numerical_letter_grade(test3)); // Expected: [A+, A, A-, B+, B, B-, C+, C, C-, D+, D, E]\n    }\n}\n"}
{"task_id": "Java/82", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function that takes a string and returns true if the string\n     * length is a prime number or false otherwise.\n     *\n     * Examples:\n     * - prime_length(\"Hello\") == true\n     * - prime_length(\"abcdcba\") == true\n     * - prime_length(\"kittens\") == true\n     * - prime_length(\"orange\") == false\n     */\n    public boolean prime_length(String string) {\n        int length = string.length();\n        \n        if (length <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.prime_length(\"Hello\"));       // Expected: true\n        System.out.println(solution.prime_length(\"abcdcba\"));     // Expected: true\n        System.out.println(solution.prime_length(\"kittens\"));     // Expected: true\n        System.out.println(solution.prime_length(\"orange\"));      // Expected: false\n        System.out.println(solution.prime_length(\"\"));            // Expected: false\n        System.out.println(solution.prime_length(\"a\"));           // Expected: false\n        System.out.println(solution.prime_length(\"ab\"));          // Expected: true\n    }\n}\n"}
{"task_id": "Java/83", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given a positive integer n, return the count of the numbers of n-digit\n     positive integers that start or end with 1.\n     */\n    public int starts_one_ends(int n) {\n        if (n == 1) {\n            // If n is 1, there's only one digit and it can be either \"1\" which satisfies both conditions.\n            return 1;\n        } else {\n            // For n > 1:\n            // - Numbers that start with 1: There are 9 * (10^(n-2)) possibilities for the remaining digits.\n            // - Numbers that end with 1: Similarly, there are 9 * (10^(n-2)) possibilities.\n            // - However, we need to subtract the count of numbers that both start and end with 1\n            //   because they were counted twice. There are 9 * (10^(n-3)) such numbers.\n            return 2 * (int) Math.pow(10, n - 1) - (int) Math.pow(10, n - 2);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.starts_one_ends(1)); // Expected output: 1\n        System.out.println(solution.starts_one_ends(2)); // Expected output: 18 (10, 11, ..., 19, 21, 31, ..., 91)\n        System.out.println(solution.starts_one_ends(3)); // Expected output: 180\n        System.out.println(solution.starts_one_ends(4)); // Expected output: 1800\n    }\n}\n"}
{"task_id": "Java/84", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given a positive integer N, return in binary the total sum of its digits.\n\n     Example\n         For N = 1000, the sum of digits will be 1 the output should be \"1\".\n         For N = 150, the sum of digits will be 6 the output should be \"110\".\n         For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n     Variables:\n         @N integer\n              Constraints: 0 <= N <= 10000.\n     Output:\n          a string of binary number\n      */\n    public String solve(int N) {\n        int sum = 0;\n        while (N > 0) {\n            sum += N % 10;\n            N /= 10;\n        }\n        return Integer.toBinaryString(sum);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.solve(1000)); // Output: \"1\"\n        System.out.println(solution.solve(150));  // Output: \"110\"\n        System.out.println(solution.solve(147));  // Output: \"1100\"\n        System.out.println(solution.solve(9999)); // Output: \"1111000110\"\n    }\n}\n"}
{"task_id": "Java/85", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a non-empty list of integers lst, add the even elements that are at odd indices.\n     *\n     * Examples:\n     * - add(Arrays.asList(4, 2, 6, 7)) should return 2 (since only 2 is an even element at an odd index)\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) { // Start from index 1 and increment by 2 to check odd indices\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.add(Arrays.asList(4, 2, 6, 7))); // Expected output: 2\n        System.out.println(solution.add(Arrays.asList(1, 3, 5, 7, 9, 8))); // Expected output: 8 (only 8 is an even element at an odd index)\n        System.out.println(solution.add(Arrays.asList(2, 4, 6, 8, 10))); // Expected output: 0 (no elements are even and at odd indices)\n    }\n}\n"}
{"task_id": "Java/86", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function that takes a string and returns an ordered version of it.\n     * Ordered version of string, is a string where all words (separated by space)\n     * are replaced by a new word where all the characters arranged in\n     * ascending order based on ascii value.\n     * Note: You should keep the order of words and blank spaces in the sentence.\n     *\n     * For example:\n     * anti_shuffle(\"Hi\") returns \"Hi\"\n     * anti_shuffle(\"hello\") returns \"ehllo\"\n     * anti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String anti_shuffle(String s) {\n        if (s == null || s.isEmpty()) {\n            return s;\n        }\n\n        StringBuilder result = new StringBuilder();\n        int wordStart = 0;\n\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\n            // Check if we've reached the end of a word or the end of the string\n            if (c == ' ' || i == s.length() - 1) {\n                String word = s.substring(wordStart, i + 1);\n                result.append(orderWord(word));\n                if (i != s.length() - 1) { // Add space back to the result if it's not the last character\n                    result.append(' ');\n                }\n                wordStart = i + 1;\n            }\n        }\n\n        return result.toString();\n    }\n\n    private String orderWord(String word) {\n        char[] chars = word.toCharArray();\n        Arrays.sort(chars);\n        return new String(chars);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.anti_shuffle(\"Hi\")); // Expected: \"Hi\"\n        System.out.println(solution.anti_shuffle(\"hello\")); // Expected: \"ehllo\"\n        System.out.println(solution.anti_shuffle(\"Hello World!!!\")); // Expected: \"Hello !!!Wdlor\"\n        System.out.println(solution.anti_shuffle(\"Programming is fun!\")); // Expected: \"Pamgimmig is fnu!\"\n    }\n}\n"}
{"task_id": "Java/87", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given a 2 dimensional data, as a nested lists,\n     * which is similar to matrix, however, unlike matrices,\n     * each row may contain a different number of columns.\n     * Given lst, and integer x, find integers x in the list,\n     * and return list of lists, [[x1, y1], [x2, y2] ...] such that\n     * each list is a coordinate - (row, columns), starting with 0.\n     * Sort coordinates initially by rows in ascending order.\n     * Also, sort coordinates of the row by columns in descending order.\n     *\n     * Examples:\n     * get_row([\n     *   [1,2,3,4,5,6],\n     *   [1,2,3,4,1,6],\n     *   [1,2,3,4,5,1]\n     * ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n     * get_row([], 1) == []\n     * get_row([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j).equals(x)) {\n                    result.add(Arrays.asList(i, j));\n                }\n            }\n        }\n\n        // Sort by rows in ascending order\n        Collections.sort(result, Comparator.comparingInt(list -> list.get(0)));\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<List<Integer>> lst1 = Arrays.asList(\n            Arrays.asList(1, 2, 3, 4, 5, 6),\n            Arrays.asList(1, 2, 3, 4, 1, 6),\n            Arrays.asList(1, 2, 3, 4, 5, 1)\n        );\n        System.out.println(solution.get_row(lst1, 1)); // Expected: [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n\n        List<List<Integer>> lst2 = new ArrayList<>();\n        System.out.println(solution.get_row(lst2, 1)); // Expected: []\n\n        List<List<Integer>> lst3 = Arrays.asList(\n            new ArrayList<>(),\n            Arrays.asList(1),\n            Arrays.asList(1, 2, 3)\n        );\n        System.out.println(solution.get_row(lst3, 3)); // Expected: [[2, 2]]\n    }\n}\n"}
{"task_id": "Java/88", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given an array of non-negative integers, return a copy of the given array after sorting,\n     * you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n     * or sort it in descending order if the sum( first index value, last index value) is even.\n     *\n     * Note:\n     * * don't change the given array.\n     */\n    public List<Integer> sort_array(List<Integer> array) {\n        if (array == null || array.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        int sum = array.get(0) + array.get(array.size() - 1);\n        List<Integer> sortedArray = new ArrayList<>(array);\n\n        if (sum % 2 == 0) {\n            // Sort in descending order\n            sortedArray.sort(Collections.reverseOrder());\n        } else {\n            // Sort in ascending order\n            Collections.sort(sortedArray);\n        }\n\n        return sortedArray;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sort_array(Arrays.asList())); // []\n        System.out.println(solution.sort_array(Arrays.asList(5))); // [5]\n        System.out.println(solution.sort_array(Arrays.asList(2, 4, 3, 0, 1, 5))); // [0, 1, 2, 3, 4, 5]\n        System.out.println(solution.sort_array(Arrays.asList(2, 4, 3, 0, 1, 5, 6))); // [6, 5, 4, 3, 2, 1, 0]\n    }\n}\n"}
{"task_id": "Java/89", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Create a function encrypt that takes a string as an argument and\n     * returns a string encrypted with the alphabet being rotated.\n     * The alphabet should be rotated in a manner such that the letters\n     * shift down by two multiplied to two places.\n     * For example:\n     * encrypt(\"hi\") returns \"lm\"\n     * encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n     * encrypt(\"gf\") returns \"kj\"\n     * encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        StringBuilder encrypted = new StringBuilder();\n        \n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                char base = Character.isUpperCase(c) ? 'A' : 'a';\n                int offset = ((c - base + 4) % 26);\n                encrypted.append((char)(base + offset));\n            } else {\n                encrypted.append(c);\n            }\n        }\n        \n        return encrypted.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.encrypt(\"hi\"));       // Expected: \"lm\"\n        System.out.println(solution.encrypt(\"asdfghjkl\")); // Expected: \"ewhjklnop\"\n        System.out.println(solution.encrypt(\"gf\"));       // Expected: \"kj\"\n        System.out.println(solution.encrypt(\"et\"));       // Expected: \"ix\"\n        System.out.println(solution.encrypt(\"Hello, World!\")); // Expected: \"Lipps, Asvph!\"\n    }\n}\n"}
{"task_id": "Java/90", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given a list of integers.\n     * Write a function next_smallest() that returns the 2nd smallest element of the list.\n     * Return null if there is no such element.\n     *\n     * @param lst The input list of integers\n     * @return Optional containing the 2nd smallest integer, or Optional.empty() if not available\n     */\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        // Remove duplicates and sort the list\n        Set<Integer> uniqueElements = new TreeSet<>(lst);\n        \n        // If there are less than 2 elements after removing duplicates, return Optional.empty()\n        if (uniqueElements.size() < 2) {\n            return Optional.empty();\n        }\n        \n        // Return the second element in the sorted set\n        Integer[] arr = uniqueElements.toArray(new Integer[0]);\n        return Optional.of(arr[1]);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.next_smallest(Arrays.asList(1, 2, 3, 4, 5))); // Expected: Optional[2]\n        System.out.println(solution.next_smallest(Arrays.asList(5, 1, 4, 3, 2))); // Expected: Optional[2]\n        System.out.println(solution.next_smallest(Arrays.asList()));             // Expected: Optional.empty\n        System.out.println(solution.next_smallest(Arrays.asList(1, 1)));         // Expected: Optional.empty\n        System.out.println(solution.next_smallest(Arrays.asList(7, 5, 3, 9, 2))); // Expected: Optional[3]\n    }\n}\n"}
{"task_id": "Java/91", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You'll be given a string of words, and your task is to count the number\n     * of boredoms. A boredom is a sentence that starts with the word \"I\".\n     * Sentences are delimited by '.', '?' or '!'.\n     *\n     * For example:\n     * >>> is_bored(\"Hello world\")\n     * 0\n     * >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n     * 1\n     */\n    public int is_bored(String S) {\n        if (S == null || S.isEmpty()) return 0;\n\n        String[] sentences = S.split(\"[.?!]\");\n        int boredomCount = 0;\n\n        for (String sentence : sentences) {\n            // Trim leading and trailing spaces to handle cases like \" I love this weather\"\n            sentence = sentence.trim();\n            if (!sentence.isEmpty() && sentence.startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n\n        return boredomCount;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.is_bored(\"Hello world\")); // Expected output: 0\n        System.out.println(solution.is_bored(\"The sky is blue. The sun is shining. I love this weather\")); // Expected output: 1\n        System.out.println(solution.is_bored(\"I am bored. Are you? I think so!\")); // Expected output: 2\n        System.out.println(solution.is_bored(\"No boring sentences here.\")); // Expected output: 0\n        System.out.println(solution.is_bored(\"I love Java. I hate bugs! I wish I could write perfect code every time.\")); // Expected output: 3\n    }\n}\n"}
{"task_id": "Java/92", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Create a function that takes 3 numbers.\n     * Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n     * Returns false in any other cases.\n     *\n     * Examples\n     * any_int(5, 2, 7) -> true\n     * any_int(3, 2, 2) -> false\n     * any_int(3, -2, 1) -> true\n     * any_int(3.6, -2.2, 2) -> false\n     */\n    public boolean any_int(Object x, Object y, Object z) {\n        if (!(x instanceof Integer && y instanceof Integer && z instanceof Integer)) {\n            return false;\n        }\n        \n        int a = (Integer) x;\n        int b = (Integer) y;\n        int c = (Integer) z;\n\n        return a == b + c || b == a + c || c == a + b;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.any_int(5, 2, 7));   // true\n        System.out.println(solution.any_int(3, 2, 2));   // false\n        System.out.println(solution.any_int(3, -2, 1));  // true\n        System.out.println(solution.any_int(3.6, -2.2, 2)); // false (should return false)\n        System.out.println(solution.any_int(10L, 5L, 5)); // false (should return false)\n    }\n}\n"}
{"task_id": "Java/93", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Write a function that takes a message, and encodes in such a way that it swaps case of all letters,\n     * replaces all vowels in the message with the letter that appears 2 places ahead of that vowel in the English alphabet.\n     * Assume only letters.\n     *\n     * Examples:\n     * >>> encode(\"test\")\n     * \"TGST\"\n     * >>> encode(\"This is a message\")\n     * \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        StringBuilder encodedMessage = new StringBuilder();\n        \n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                char lowerCaseChar = Character.toLowerCase(c);\n                \n                // Swap case\n                char swappedCaseChar = Character.isLowerCase(lowerCaseChar) ? Character.toUpperCase(lowerCaseChar) : Character.toLowerCase(lowerCaseChar);\n                \n                // Replace vowels with the letter 2 places ahead in the alphabet\n                if (lowerCaseChar == 'a' || lowerCaseChar == 'e' || lowerCaseChar == 'i' || lowerCaseChar == 'o' || lowerCaseChar == 'u') {\n                    switch (lowerCaseChar) {\n                        case 'a':\n                            swappedCaseChar = 'c';\n                            break;\n                        case 'e':\n                            swappedCaseChar = 'g';\n                            break;\n                        case 'i':\n                            swappedCaseChar = 'k';\n                            break;\n                        case 'o':\n                            swappedCaseChar = 'q';\n                            break;\n                        case 'u':\n                            swappedCaseChar = 'w';\n                            break;\n                    }\n                }\n                \n                encodedMessage.append(swappedCaseChar);\n            } else {\n                // Non-letter characters are not modified\n                encodedMessage.append(c);\n            }\n        }\n        \n        return encodedMessage.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.encode(\"test\"));  // Output: TGST\n        System.out.println(solution.encode(\"This is a message\"));  // Output: tHKS KS C MGSSCGG\n        System.out.println(solution.encode(\"Hello World!\"));  // Output: hGNNQ wNRLD!\n    }\n}\n"}
{"task_id": "Java/94", "generation": "import java.util.List;\n\nclass Solution {\n\n    /**\n     * You are given a list of integers.\n     * You need to find the largest prime value and return the sum of its digits.\n     *\n     * @param lst the input list of integers\n     * @return the sum of the digits of the largest prime number in the list, or 0 if no prime is found\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int maxPrime = -1;\n        for (int num : lst) {\n            if (isPrime(num)) {\n                maxPrime = Math.max(maxPrime, num);\n            }\n        }\n\n        return maxPrime == -1 ? 0 : sumOfDigits(maxPrime);\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) return false;\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.skjkasdkd(List.of(0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3))); // Output: 10\n        System.out.println(solution.skjkasdkd(List.of(1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1))); // Output: 25\n        System.out.println(solution.skjkasdkd(List.of(1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3))); // Output: 13\n        System.out.println(solution.skjkasdkd(List.of(0,724,32,71,99,32,6,0,5,91,83,0,5,6))); // Output: 11\n        System.out.println(solution.skjkasdkd(List.of(0,81,12,3,1,21))); // Output: 3\n        System.out.println(solution.skjkasdkd(List.of(0,8,1,2,1,7))); // Output: 7\n    }\n}\n"}
{"task_id": "Java/95", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a map, return True if all keys are strings and all keys are in lower case or in upper case, else return False.\n     * The function should return False is the given map is empty.\n     */\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        boolean allLowerCase = true;\n        boolean allUpperCase = true;\n\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String strKey = (String) key;\n            if (!strKey.equals(strKey.toLowerCase())) {\n                allLowerCase = false;\n            }\n            if (!strKey.equals(strKey.toUpperCase())) {\n                allUpperCase = false;\n            }\n        }\n\n        return allLowerCase || allUpperCase;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.check_dict_case(Map.of(\"a\", \"apple\", \"b\", \"banana\"))); // True\n        System.out.println(solution.check_dict_case(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"banana\"))); // False\n        System.out.println(solution.check_dict_case(Map.of(\"a\", \"apple\", 8, \"banana\", \"a\", \"apple\"))); // False\n        System.out.println(solution.check_dict_case(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\"))); // False\n        System.out.println(solution.check_dict_case(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))); // True\n    }\n}\n"}
{"task_id": "Java/96", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Implement a function that takes an non-negative integer and returns an array of the first n\n     * integers that are prime numbers and less than n.\n     */\n    public List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<>();\n        \n        for (int i = 2; i < n && primes.size() < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        \n        return primes;\n    }\n\n    /**\n     * Helper method to check if a number is prime.\n     */\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.count_up_to(5));   // Output: [2, 3]\n        System.out.println(solution.count_up_to(11));  // Output: [2, 3, 5, 7]\n        System.out.println(solution.count_up_to(0));   // Output: []\n        System.out.println(solution.count_up_to(20));  // Output: [2, 3, 5, 7, 11, 13, 17, 19]\n        System.out.println(solution.count_up_to(1));   // Output: []\n        System.out.println(solution.count_up_to(18));  // Output: [2, 3, 5, 7, 11, 13, 17]\n    }\n}\n"}
{"task_id": "Java/97", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Complete the function that takes two integers and returns\n     * the product of their unit digits.\n     * Assume the input is always valid.\n     * Examples:\n     * multiply(148, 412) should return 16.\n     * multiply(19, 28) should return 72.\n     * multiply(2020, 1851) should return 0.\n     * multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        // Extract the unit digits of both numbers\n        int unitDigitA = Math.abs(a % 10);\n        int unitDigitB = Math.abs(b % 10);\n\n        // Return the product of the unit digits\n        return unitDigitA * unitDigitB;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.multiply(148, 412)); // should print 16\n        System.out.println(solution.multiply(19, 28));   // should print 72\n        System.out.println(solution.multiply(2020, 1851)); // should print 0\n        System.out.println(solution.multiply(14, -15));  // should print 20\n    }\n}\n"}
{"task_id": "Java/98", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a string s, count the number of uppercase vowels in even indices.\n     *\n     * For example:\n     * count_upper(\"aBCdEf\") returns 1\n     * count_upper(\"abcdefg\") returns 0\n     * count_upper(\"dBBE\") returns 0\n     */\n    public int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.count_upper(\"aBCdEf\"));  // Expected output: 1\n        System.out.println(solution.count_upper(\"abcdefg\")); // Expected output: 0\n        System.out.println(solution.count_upper(\"dBBE\"));    // Expected output: 0\n        System.out.println(solution.count_upper(\"AeIoUaEiOu\")); // Expected output: 5\n        System.out.println(solution.count_upper(\"zZzZ\"));   // Expected output: 2\n    }\n}\n"}
{"task_id": "Java/99", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Create a function that takes a value (string) representing a number\n     * and returns the closest integer to it. If the number is equidistant\n     * from two integers, round it away from zero.\n     *\n     * Examples:\n     * >>> closest_integer(\"10\")\n     * 10\n     * >>> closest_integer(\"15.3\")\n     * 15\n     * >>> closest_integer(\"14.5\")\n     * 15\n     * >>> closest_integer(\"-14.5\")\n     * -15\n     */\n    public int closest_integer(String value) {\n        double num = Double.parseDouble(value);\n        double fractionalPart = num % 1;\n        \n        if (fractionalPart == 0.5 || fractionalPart == -0.5) {\n            return num > 0 ? (int)Math.ceil(num) : (int)Math.floor(num);\n        } else {\n            return (int)Math.round(num);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.closest_integer(\"10\"));   // Expected output: 10\n        System.out.println(solution.closest_integer(\"15.3\")); // Expected output: 15\n        System.out.println(solution.closest_integer(\"14.5\")); // Expected output: 15\n        System.out.println(solution.closest_integer(\"-14.5\"));// Expected output: -15\n    }\n}\n"}
{"task_id": "Java/100", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a positive integer n, you have to make a pile of n levels of stones.\n     * The first level has n stones.\n     * The number of stones in the next level is:\n     * - the next odd number if n is odd.\n     * - the next even number if n is even.\n     * Return the number of stones in each level in a list, where element at index\n     * i represents the number of stones in the level (i+1).\n     *\n     * Examples:\n     * >>> make_a_pile(3)\n     * [3, 5, 7]\n     */\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 0; i < n; i++) {\n            int stones = n + 2 * i;\n            if ((n & 1) == 1 && (i & 1) == 0) { // If n is odd and i is even\n                stones += 1; // Make it the next odd number\n            } else if ((n & 1) == 0 && (i & 1) == 1) { // If n is even and i is odd\n                stones -= 1; // Make it the next even number\n            }\n            result.add(stones);\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.make_a_pile(3)); // Expected: [3, 5, 7]\n        System.out.println(solution.make_a_pile(4)); // Expected: [4, 6, 8, 10]\n        System.out.println(solution.make_a_pile(1)); // Expected: [1]\n        System.out.println(solution.make_a_pile(2)); // Expected: [2, 4]\n    }\n}\n"}
{"task_id": "Java/101", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You will be given a string of words separated by commas or spaces. Your task is\n     * to split the string into words and return an array of the words.\n     *\n     * For example:\n     * words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n     * words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six])\n     */\n    public List<String> words_string(String s) {\n        // Split the string by commas and spaces\n        String[] splitWords = s.split(\"[,\\\\s]+\");\n        \n        // Convert the array to a list and return it\n        return Arrays.asList(splitWords);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<String> result1 = solution.words_string(\"Hi, my name is John\");\n        System.out.println(result1.equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\")) ? \"Test 1 Passed\" : \"Test 1 Failed\");\n\n        List<String> result2 = solution.words_string(\"One, two, three, four, five, six\");\n        System.out.println(result2.equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\")) ? \"Test 2 Passed\" : \"Test 2 Failed\");\n\n        List<String> result3 = solution.words_string(\"Hello,world this is a test\");\n        System.out.println(result3.equals(Arrays.asList(\"Hello\", \"world\", \"this\", \"is\", \"a\", \"test\")) ? \"Test 3 Passed\" : \"Test 3 Failed\");\n\n        List<String> result4 = solution.words_string(\"\");\n        System.out.println(result4.equals(Arrays.asList()) ? \"Test 4 Passed\" : \"Test 4 Failed\");\n    }\n}\n"}
{"task_id": "Java/102", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * This function takes two positive numbers x and y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.\n     *\n     * For example:\n     * choose_num(12, 15) = 14\n     * choose_num(13, 12) = -1\n     */\n    public int choose_num(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        \n        // Start from the end of the range and check for even numbers\n        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                return i;\n            }\n        }\n        \n        return -1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.choose_num(12, 15)); // Expected output: 14\n        System.out.println(solution.choose_num(13, 12)); // Expected output: -1\n        System.out.println(solution.choose_num(10, 20)); // Expected output: 20\n        System.out.println(solution.choose_num(21, 29)); // Expected output: 28\n        System.out.println(solution.choose_num(30, 35)); // Expected output: 34\n        System.out.println(solution.choose_num(36, 36)); // Expected output: 36\n        System.out.println(solution.choose_num(17, 17)); // Expected output: -1 (since the number is odd)\n    }\n}\n"}
{"task_id": "Java/103", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given two positive integers n and m, and your task is to compute the\n     * average of the integers from n through m (including n and m).\n     * Round the answer to the nearest integer and convert that to binary.\n     * If n is greater than m, return -1.\n     * Example:\n     * rounded_avg(1, 5) => \"11\"\n     * rounded_avg(7, 5) => -1\n     * rounded_avg(10, 20) => \"1111\"\n     * rounded_avg(20, 33) => \"11011\"\n     */\n    public Object rounded_avg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        \n        long sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        \n        double average = sum / (m - n + 1);\n        int roundedAverage = (int) Math.round(average);\n        \n        return Integer.toBinaryString(roundedAverage);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.rounded_avg(1, 5));   // Output: \"11\"\n        System.out.println(solution.rounded_avg(7, 5));   // Output: -1\n        System.out.println(solution.rounded_avg(10, 20)); // Output: \"1111\"\n        System.out.println(solution.rounded_avg(20, 33)); // Output: \"11011\"\n    }\n}\n"}
{"task_id": "Java/104", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given a list of positive integers x. return a sorted list of all\n     * elements that hasn't any even digit.\n     *\n     * Note: Returned list should be sorted in increasing order.\n     */\n    public List<Integer> unique_digits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (Integer num : x) {\n            if (!hasEvenDigit(num)) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        return result;\n    }\n\n    private boolean hasEvenDigit(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return true;\n            }\n            num /= 10;\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.unique_digits(Arrays.asList(15, 33, 1422, 1))); // [1, 15, 33]\n        System.out.println(solution.unique_digits(Arrays.asList(152, 323, 1422, 10))); // []\n        System.out.println(solution.unique_digits(Arrays.asList(7, 89, 123, 456, 789))); // [7, 89, 789]\n    }\n}\n"}
{"task_id": "Java/105", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n     * reverse the resulting array, and then replace each digit by its corresponding name from\n     * \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n     *\n     * @param arr the input list of integers\n     * @return a list of strings representing the names of the digits in reverse sorted order\n     */\n    public List<String> by_length(List<Integer> arr) {\n        // Filter out numbers not between 1 and 9 inclusive\n        List<Integer> filtered = arr.stream()\n                                     .filter(num -> num >= 1 && num <= 9)\n                                     .sorted()\n                                     .collect(Collectors.toList());\n        \n        Collections.reverse(filtered);\n        \n        List<String> result = new ArrayList<>();\n        for (Integer num : filtered) {\n            switch (num) {\n                case 1: result.add(\"One\"); break;\n                case 2: result.add(\"Two\"); break;\n                case 3: result.add(\"Three\"); break;\n                case 4: result.add(\"Four\"); break;\n                case 5: result.add(\"Five\"); break;\n                case 6: result.add(\"Six\"); break;\n                case 7: result.add(\"Seven\"); break;\n                case 8: result.add(\"Eight\"); break;\n                case 9: result.add(\"Nine\"); break;\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.by_length(Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3))); // [Eight, Five, Four, Three, Two, Two, One, One]\n        System.out.println(solution.by_length(Arrays.asList())); // []\n        System.out.println(solution.by_length(Arrays.asList(1, -1, 55))); // [One]\n        System.out.println(solution.by_length(Arrays.asList(9, 7, 3, 2, 4, 8, 6, 5, 1))); // [Nine, Eight, Seven, Six, Five, Four, Three, Two, One]\n    }\n}\n"}
{"task_id": "Java/106", "generation": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Solution {\n    /**\n     * Implement the function f that takes n as a parameter,\n     * and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n     * or the sum of numbers from 1 to i otherwise.\n     * i starts from 1.\n     * The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n     * Example:\n     * f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                // Calculate factorial of even index\n                int factorial = calculateFactorial(i);\n                result.add(factorial);\n            } else {\n                // Calculate sum from 1 to odd index\n                int sum = calculateSum(i);\n                result.add(sum);\n            }\n        }\n        \n        return result;\n    }\n\n    private int calculateFactorial(int n) {\n        if (n == 0 || n == 1) {\n            return 1;\n        }\n        int factorial = 1;\n        for (int i = 2; i <= n; i++) {\n            factorial *= i;\n        }\n        return factorial;\n    }\n\n    private int calculateSum(int n) {\n        return n * (n + 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.f(5)); // Expected output: [1, 2, 6, 24, 15]\n        System.out.println(solution.f(3)); // Expected output: [1, 2, 3]\n        System.out.println(solution.f(0)); // Expected output: []\n    }\n}\n"}
{"task_id": "Java/107", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a positive integer n, return a tuple that has the number of even and odd\n     * integer palindromes that fall within the range(1, n), inclusive.\n     *\n     * @param n the upper limit (inclusive)\n     * @return List<Integer> containing two elements: count of even palindromes and count of odd palindromes\n     */\n    public List<Integer> even_odd_palindrome(int n) {\n        int evenCount = 0, oddCount = 0;\n        \n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        return Arrays.asList(evenCount, oddCount);\n    }\n\n    /**\n     * Helper method to check if a number is a palindrome.\n     *\n     * @param num the number to check\n     * @return true if the number is a palindrome, false otherwise\n     */\n    private boolean isPalindrome(int num) {\n        String str = Integer.toString(num);\n        int left = 0;\n        int right = str.length() - 1;\n\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.even_odd_palindrome(3));  // Output: [1, 2]\n        System.out.println(solution.even_odd_palindrome(12)); // Output: [4, 6]\n        System.out.println(solution.even_odd_palindrome(50)); // Additional test case\n    }\n}\n"}
{"task_id": "Java/108", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Write a function count_nums which takes an array of integers and returns\n     * the number of elements which has a sum of digits > 0.\n     * If a number is negative, then its first signed digit will be negative:\n     * e.g. -123 has signed digits -1, 2, and 3.\n     */\n    public int count_nums(List<Integer> arr) {\n        int count = 0;\n        for (int num : arr) {\n            if (sumOfDigits(num) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private int sumOfDigits(int num) {\n        boolean isNegative = num < 0;\n        int sum = 0;\n        while (num != 0) {\n            int digit = Math.abs(num % 10);\n            sum += digit;\n            num /= 10;\n        }\n        return isNegative ? -digit : sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.count_nums(Arrays.asList())); // Expected output: 0\n        System.out.println(solution.count_nums(Arrays.asList(-1, 11, -11))); // Expected output: 1\n        System.out.println(solution.count_nums(Arrays.asList(1, 1, 2))); // Expected output: 3\n    }\n}\n"}
{"task_id": "Java/109", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N]. The\n     * numbers in the array will be randomly ordered. Your task is to determine if\n     * it is possible to get an array sorted in non-decreasing order by performing\n     * the following operation on the given array:\n     *      You are allowed to perform right shift operation any number of times.\n     *\n     * One right shift operation means shifting all elements of the array by one\n     * position in the right direction. The last element of the array will be moved to\n     * the starting position in the array i.e. 0th index.\n     *\n     * If it is possible to obtain the sorted array by performing the above operation\n     * then return true else return False.\n     * If the given array is empty then return true.\n     *\n     * Note: The given list is guaranteed to have unique elements.\n     */\n    public boolean move_one_ball(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        int n = arr.size();\n        for (int i = 0; i < n - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                // Check if the array can be sorted by a single right shift\n                List<Integer> shiftedArr = new ArrayList<>(arr);\n                Collections.rotate(shiftedArr, 1);\n                for (int j = 0; j < n - 1; j++) {\n                    if (shiftedArr.get(j) > shiftedArr.get(j + 1)) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n\n        // If no out-of-order elements are found, the array is already sorted\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.move_one_ball(Arrays.asList(3, 4, 5, 1, 2))); // true\n        System.out.println(solution.move_one_ball(Arrays.asList(3, 5, 4, 1, 2))); // false\n        System.out.println(solution.move_one_ball(Arrays.asList()));              // true\n        System.out.println(solution.move_one_ball(Arrays.asList(1, 2, 3, 4, 5))); // true\n        System.out.println(solution.move_one_ball(Arrays.asList(5, 1, 2, 3, 4))); // true\n    }\n}\n"}
{"task_id": "Java/110", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * In this problem, you will implement a function that takes two lists of numbers,\n     * and determines whether it is possible to perform an exchange of elements\n     * between them to make lst1 a list of only even numbers.\n     * There is no limit on the number of exchanged elements between lst1 and lst2.\n     * If it is possible to exchange elements between the lst1 and lst2 to make\n     * all the elements of lst1 to be even, return \"YES\".\n     * Otherwise, return \"NO\".\n     * For example:\n     * exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n     * exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n     * It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Count odd numbers in lst1 and even numbers in lst2\n        int oddCountInLst1 = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCountInLst1++;\n            }\n        }\n\n        int evenCountInLst2 = 0;\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCountInLst2++;\n            }\n        }\n\n        // If there are enough even numbers in lst2 to replace all odd numbers in lst1, return \"YES\"\n        return oddCountInLst1 <= evenCountInLst2 ? \"YES\" : \"NO\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4))); // Expected: YES\n        System.out.println(solution.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4))); // Expected: NO\n        System.out.println(solution.exchange(Arrays.asList(1, 3, 5, 7), Arrays.asList(2, 4, 6, 8))); // Expected: YES\n        System.out.println(solution.exchange(Arrays.asList(1, 3, 5, 7), Arrays.asList(1, 3, 5, 7))); // Expected: NO\n    }\n}\n"}
{"task_id": "Java/111", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given a string representing a space separated lowercase letters, return a dictionary\n     * of the letter with the most repetition and containing the corresponding count.\n     * If several letters have the same occurrence, return all of them.\n     *\n     * Example:\n     * histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n     * histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n     * histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n     * histogram(\"b b b b a\") == {\"b\": 4}\n     * histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> letterCount = new HashMap<>();\n        \n        // Split the input string by spaces\n        String[] letters = test.split(\" \");\n        \n        // Count occurrences of each letter\n        for (String letter : letters) {\n            if (!letter.isEmpty()) {  // Ignore empty strings\n                letterCount.put(letter, letterCount.getOrDefault(letter, 0) + 1);\n            }\n        }\n\n        // Find the maximum count\n        int maxCount = Collections.max(letterCount.values());\n\n        // Filter the map to only include letters with the maximum count\n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : letterCount.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.histogram(\"a b c\"));  // {\"a\": 1, \"b\": 1, \"c\": 1}\n        System.out.println(solution.histogram(\"a b b a\"));  // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"a b c a b\"));  // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"b b b b a\"));  // {\"b\": 4}\n        System.out.println(solution.histogram(\"\"));  // {}\n    }\n}\n"}
{"task_id": "Java/112", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Task\n     * We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n     * then check if the result string is palindrome.\n     * A string is called palindrome if it reads the same backward as forward.\n     * You should return a tuple containing the result string and true/false for the check.\n     * Example\n     * For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n     * For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n     * For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverse_delete(String s, String c) {\n        Set<Character> charsToRemove = new HashSet<>();\n        for (char ch : c.toCharArray()) {\n            charsToRemove.add(ch);\n        }\n\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!charsToRemove.contains(ch)) {\n                result.append(ch);\n            }\n        }\n\n        String reversedResult = result.reverse().toString();\n        boolean isPalindrome = result.toString().equals(reversedResult);\n\n        return Arrays.asList(result.toString(), isPalindrome);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.reverse_delete(\"abcde\", \"ae\"));  // Expected: [bcd, false]\n        System.out.println(solution.reverse_delete(\"abcdef\", \"b\"));  // Expected: [acdef, false]\n        System.out.println(solution.reverse_delete(\"abcdedcba\", \"ab\"));  // Expected: [cdedc, true]\n    }\n}\n"}
{"task_id": "Java/113", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     Given a list of strings, where each string consists of only digits, return a list.\n     Each element i of the output should be \"the number of odd elements in the\n     string i of the input.\" where all the i's should be replaced by the number\n     of odd digits in the i\"th string of the input.\n\n     >>> odd_count(Arrays.asList(\"1234567\"))\n     [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n     >>> odd_count(Arrays.asList(\"3\",\"11111111\"))\n     [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n      \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            int count = 0;\n            for (char c : s.toCharArray()) {\n                if ((c - '0') % 2 != 0) {\n                    count++;\n                }\n            }\n            String formattedResult = \"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\";\n            result.add(formattedResult);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<String> input1 = Arrays.asList(\"1234567\");\n        System.out.println(solution.odd_count(input1));\n\n        // Test case 2\n        List<String> input2 = Arrays.asList(\"3\", \"11111111\");\n        System.out.println(solution.odd_count(input2));\n    }\n}\n"}
{"task_id": "Java/114", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given an array of integers nums, find the minimum sum of any non-empty sub-array\n     * of nums.\n     *\n     * Example:\n     * minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n     * minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        if (nums == null || nums.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list cannot be null or empty\");\n        }\n\n        int currentMin = nums.get(0);\n        int globalMin = nums.get(0);\n\n        for (int i = 1; i < nums.size(); i++) {\n            currentMin = Math.min(nums.get(i), currentMin + nums.get(i));\n            globalMin = Math.min(globalMin, currentMin);\n        }\n\n        return globalMin;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4))); // Expected output: 1\n        System.out.println(solution.minSubArraySum(Arrays.asList(-1, -2, -3)));       // Expected output: -6\n        System.out.println(solution.minSubArraySum(Arrays.asList(1, 2, 3, -6, 1)));   // Expected output: -6\n        System.out.println(solution.minSubArraySum(Arrays.asList(1, 2, 3, 4, 5)));    // Expected output: 1\n        System.out.println(solution.minSubArraySum(Arrays.asList(-1, -2, -3, -4)));   // Expected output: -10\n    }\n}\n"}
{"task_id": "Java/115", "generation": "import java.util.List;\n\nclass Solution {\n    /**\n     * You are given a rectangular grid of wells. Each row represents a single well,\n     * and each 1 in a row represents a single unit of water.\n     * Each well has a corresponding bucket that can be used to extract water from it,\n     * and all buckets have the same capacity. Can't use buckets from other wells to extract water from one well.\n     * Your task is to use the buckets to empty the wells.\n     * Output the number of times you need to lower the buckets.\n\n     * Example 1:\n     * Input:\n     *      grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n     *      bucket_capacity : 1\n     * Output: 6\n\n     * Example 2:\n     * Input:\n     *      grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n     *      bucket_capacity : 2\n     * Output: 5\n\n     * Example 3:\n     * Input:\n     *      grid : [[0,0,0], [0,0,0]]\n     *      bucket_capacity : 5\n     * Output: 0\n\n     * Constraints:\n     * - all wells have the same length\n     * - 1 <= grid.length <= 10^2\n     * - 1 <= grid[:,1].length <= 10^2\n     * - grid[i][j] -> 0 | 1\n     * - 1 <= capacity <= 10\n     */\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        int totalDrops = 0;\n        for (List<Integer> well : grid) {\n            int waterUnits = 0;\n            for (int unit : well) {\n                if (unit == 1) {\n                    waterUnits++;\n                }\n            }\n            totalDrops += Math.ceil((double) waterUnits / capacity);\n        }\n        return totalDrops;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<List<Integer>> grid1 = Arrays.asList(\n            Arrays.asList(0, 0, 1, 0),\n            Arrays.asList(0, 1, 0, 0),\n            Arrays.asList(1, 1, 1, 1)\n        );\n        int capacity1 = 1;\n        System.out.println(\"Test case 1: \" + solution.max_fill(grid1, capacity1)); // Expected output: 6\n\n        // Test case 2\n        List<List<Integer>> grid2 = Arrays.asList(\n            Arrays.asList(0, 0, 1, 1),\n            Arrays.asList(0, 0, 0, 0),\n            Arrays.asList(1, 1, 1, 1),\n            Arrays.asList(0, 1, 1, 1)\n        );\n        int capacity2 = 2;\n        System.out.println(\"Test case 2: \" + solution.max_fill(grid2, capacity2)); // Expected output: 5\n\n        // Test case 3\n        List<List<Integer>> grid3 = Arrays.asList(\n            Arrays.asList(0, 0, 0),\n            Arrays.asList(0, 0, 0)\n        );\n        int capacity3 = 5;\n        System.out.println(\"Test case 3: \" + solution.max_fill(grid3, capacity3)); // Expected output: 0\n    }\n}\n"}
{"task_id": "Java/116", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * In this Kata, you have to sort an array of integers according to\n     * number of ones in their binary representation in ascending order.\n     * For similar number of ones, sort based on decimal value.\n     *\n     * It must be implemented like this:\n     * >>> sort_array(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 4, 3, 5))\n     * >>> sort_array(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-4, -2, -6, -5, -3))\n     * >>> sort_array(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 4, 3))\n     */\n    public List<Integer> sort_array(List<Integer> arr) {\n        return arr.stream()\n                  .sorted(Comparator.comparingInt(this::countOnes)\n                                    .thenComparingInt(x -> x))\n                  .collect(Collectors.toList());\n    }\n\n    private int countOnes(int num) {\n        if (num < 0) {\n            num = ~num + 1; // Convert negative number to positive and add 1\n        }\n        int onesCount = 0;\n        while (num > 0) {\n            onesCount += num & 1;\n            num >>= 1;\n        }\n        return onesCount;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(1, 5, 2, 3, 4);\n        System.out.println(\"Test Case 1: \" + solution.sort_array(test1).equals(Arrays.asList(1, 2, 4, 3, 5)));\n\n        List<Integer> test2 = Arrays.asList(-2, -3, -4, -5, -6);\n        System.out.println(\"Test Case 2: \" + solution.sort_array(test2).equals(Arrays.asList(-4, -2, -6, -5, -3)));\n\n        List<Integer> test3 = Arrays.asList(1, 0, 2, 3, 4);\n        System.out.println(\"Test Case 3: \" + solution.sort_array(test3).equals(Arrays.asList(0, 1, 2, 4, 3)));\n    }\n}\n"}
{"task_id": "Java/117", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given a string s and a natural number n, you have been tasked to implement\n     * a function that returns a list of all words from string s that contain exactly\n     * n consonants, in order these words appear in the string s.\n     * If the string s is empty then the function should return an empty list.\n     * Note: you may assume the input string contains only letters and spaces.\n     */\n    public List<String> select_words(String s, int n) {\n        if (s == null || s.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        String[] words = s.split(\"\\\\s+\");\n        List<String> result = new ArrayList<>();\n\n        for (String word : words) {\n            long consonantsCount = word.toLowerCase().chars()\n                    .filter(c -> \"bcdfghjklmnpqrstvwxyz\".indexOf(c - 'a') != -1)\n                    .count();\n\n            if (consonantsCount == n) {\n                result.add(word);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.select_words(\"Mary had a little lamb\", 4)); // [\"little\"]\n        System.out.println(solution.select_words(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\n        System.out.println(solution.select_words(\"simple white space\", 2));     // []\n        System.out.println(solution.select_words(\"Hello world\", 4));            // [\"world\"]\n        System.out.println(solution.select_words(\"Uncle sam\", 3));              // [\"Uncle\"]\n    }\n}\n"}
{"task_id": "Java/118", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You are given a word. Your task is to find the closest vowel that stands between\n     * two consonants from the right side of the word (case sensitive).\n     *\n     * Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n     * find any vowel met the above condition.\n     *\n     * You may assume that the given string contains English letter only.\n     */\n    public String get_closest_vowel(String word) {\n        // Define vowels for easy checking\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        \n        // Iterate from the end of the string to find the closest vowel between two consonants\n        for (int i = word.length() - 2; i > 0; i--) {\n            char currentChar = word.charAt(i);\n            if (vowels.contains(currentChar)) {\n                int leftIndex = i - 1;\n                while (leftIndex >= 0 && !vowels.contains(word.charAt(leftIndex))) {\n                    leftIndex--;\n                }\n                // Check if we found a consonant to the left\n                if (leftIndex >= 0) {\n                    return String.valueOf(currentChar);\n                }\n            }\n        }\n        \n        // Return empty string if no vowel is found between two consonants from the right side\n        return \"\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.get_closest_vowel(\"yogurt\"));  // Output: \"u\"\n        System.out.println(solution.get_closest_vowel(\"FULL\"));    // Output: \"U\"\n        System.out.println(solution.get_closest_vowel(\"quick\"));   // Output: \"\"\n        System.out.println(solution.get_closest_vowel(\"ab\"));      // Output: \"\"\n        System.out.println(solution.get_closest_vowel(\"rhythm\"));  // Output: \"\"\n        System.out.println(solution.get_closest_vowel(\"eagle\"));   // Output: \"a\"\n    }\n}\n"}
{"task_id": "Java/119", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given a list of two strings, both strings consist of open\n     * parentheses \"(\" or close parentheses \")\" only.\n     * Your job is to check if it is possible to concatenate the two strings in\n     * some order, that the resulting string will be good.\n     * A string S is considered to be good if and only if all parentheses in S\n     * are balanced. For example: the string \"(())()\" is good, while the string\n     * \"())\" is not.\n     * Return \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\n     Examples:\n     match_parens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n     match_parens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String match_parens(List<String> lst) {\n        // Check if the first string followed by the second is balanced\n        if (isBalanced(lst.get(0) + lst.get(1))) return \"Yes\";\n        \n        // Check if the second string followed by the first is balanced\n        if (isBalanced(lst.get(1) + lst.get(0))) return \"Yes\";\n\n        return \"No\";\n    }\n\n    private boolean isBalanced(String s) {\n        int balance = 0;\n        for (char c : s.toCharArray()) {\n            if (c == '(') balance++;\n            else if (c == ')') balance--;\n            // If balance goes negative, parentheses are unbalanced\n            if (balance < 0) return false;\n        }\n        // If balance is zero, parentheses are balanced\n        return balance == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.match_parens(Arrays.asList(\"()(\", \")\"))); // Expected: Yes\n        System.out.println(solution.match_parens(Arrays.asList(\")\", \")\")));   // Expected: No\n        System.out.println(solution.match_parens(Arrays.asList(\"(())\", \"()\"))); // Expected: Yes\n        System.out.println(solution.match_parens(Arrays.asList(\"(()\", \"())\"))); // Expected: Yes\n        System.out.println(solution.match_parens(Arrays.asList(\"(\", \"(\")));    // Expected: No\n    }\n}\n"}
{"task_id": "Java/120", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given an array arr of integers and a positive integer k, return a sorted list\n     * of length k with the maximum k numbers in arr, in ascending order.\n     *\n     * Example 1:\n     * Input: arr = [-3, -4, 5], k = 3\n     * Output: [-4, -3, 5]\n     *\n     * Example 2:\n     * Input: arr = [4, -4, 4], k = 2\n     * Output: [4, 4]\n     *\n     * Example 3:\n     * Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n     * Output: [2]\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Sort the array in descending order and then take the first k elements\n        Collections.sort(arr, Collections.reverseOrder());\n        return new ArrayList<>(arr.subList(0, Math.min(k, arr.size())));\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> arr1 = Arrays.asList(-3, -4, 5);\n        int k1 = 3;\n        System.out.println(\"Test Case 1: \" + solution.maximum(arr1, k1)); // Expected output: [-4, -3, 5]\n\n        // Test case 2\n        List<Integer> arr2 = Arrays.asList(4, -4, 4);\n        int k2 = 2;\n        System.out.println(\"Test Case 2: \" + solution.maximum(arr2, k2)); // Expected output: [4, 4]\n\n        // Test case 3\n        List<Integer> arr3 = Arrays.asList(-3, 2, 1, 2, -1, -2, 1);\n        int k3 = 1;\n        System.out.println(\"Test Case 3: \" + solution.maximum(arr3, k3)); // Expected output: [2]\n\n        // Test case 4\n        List<Integer> arr4 = Arrays.asList(10, 20, 30, 40, 50);\n        int k4 = 3;\n        System.out.println(\"Test Case 4: \" + solution.maximum(arr4, k4)); // Expected output: [30, 40, 50]\n\n        // Test case 5\n        List<Integer> arr5 = Arrays.asList(-10, -20, -30);\n        int k5 = 2;\n        System.out.println(\"Test Case 5: \" + solution.maximum(arr5, k5)); // Expected output: [-10, -20]\n    }\n}\n"}
{"task_id": "Java/121", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n     *\n     * Examples:\n     * solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n     * solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n     * solution(Arrays.asList(30, 13, 24, 321)) ==> 0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.solution(Arrays.asList(5, 8, 7, 1))); // Expected output: 12\n        System.out.println(solution.solution(Arrays.asList(3, 3, 3, 3, 3))); // Expected output: 9\n        System.out.println(solution.solution(Arrays.asList(30, 13, 24, 321))); // Expected output: 0\n    }\n}\n"}
{"task_id": "Java/122", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given a non-empty array of integers arr and an integer k, return\n     the sum of the elements with at most two digits from the first k elements of arr.\n     \n     Example:\n     \n         Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n         Output: 24 # sum of 21 + 3\n     \n     Constraints:\n         1. 1 <= len(arr) <= 100\n         2. 1 <= k <= len(arr)\n      */\n    public int add_elements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < Math.min(k, arr.size()); i++) {\n            if (arr.get(i).toString().length() <= 2) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> testArr1 = Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9);\n        int k1 = 4;\n        System.out.println(\"Test Case 1: \" + solution.add_elements(testArr1, k1)); // Expected output: 24\n\n        // Test case 2\n        List<Integer> testArr2 = Arrays.asList(10, 200, 3000, 40);\n        int k2 = 3;\n        System.out.println(\"Test Case 2: \" + solution.add_elements(testArr2, k2)); // Expected output: 140\n\n        // Test case 3\n        List<Integer> testArr3 = Arrays.asList(5, 6, 7, 8, 9);\n        int k3 = 5;\n        System.out.println(\"Test Case 3: \" + solution.add_elements(testArr3, k3)); // Expected output: 35\n\n        // Test case 4\n        List<Integer> testArr4 = Arrays.asList(100, 200, 300);\n        int k4 = 2;\n        System.out.println(\"Test Case 4: \" + solution.add_elements(testArr4, k4)); // Expected output: 0\n\n        // Test case 5\n        List<Integer> testArr5 = Arrays.asList(1, 2, 3, 4, 5);\n        int k5 = 5;\n        System.out.println(\"Test Case 5: \" + solution.add_elements(testArr5, k5)); // Expected output: 15\n    }\n}\n"}
{"task_id": "Java/123", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n     *\n     * @param n The starting positive integer for the Collatz sequence.\n     * @return A List of Integer containing the odd numbers in the Collatz sequence, sorted in increasing order.\n     */\n    public List<Integer> get_odd_collatz(int n) {\n        List<Integer> result = new ArrayList<>();\n        while (n != 1) {\n            if (n % 2 == 1) { // Check if n is odd\n                result.add(n);\n            }\n            n = (n % 2 == 0) ? n / 2 : 3 * n + 1; // Apply Collatz rules\n        }\n        result.add(1); // Add the final term, which is always 1\n        Collections.sort(result); // Sort the list in increasing order\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.get_odd_collatz(5)); // Expected: [1, 5]\n        System.out.println(solution.get_odd_collatz(7)); // Expected: [1, 7, 11, 22]\n        System.out.println(solution.get_odd_collatz(10)); // Expected: [1, 3, 5, 9]\n        System.out.println(solution.get_odd_collatz(1)); // Expected: [1]\n    }\n}\n"}
{"task_id": "Java/124", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You have to write a function which validates a given date string and\n     * returns true if the date is valid otherwise false.\n     * The date is valid if all of the following rules are satisfied:\n     * 1. The date string is not empty.\n     * 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n     * 3. The months should not be less than 1 or higher than 12.\n     * 4. The date should be in the format: mm-dd-yyyy\n     *\n     * for example:\n     * valid_date(\"03-11-2000\") => true\n     * valid_date(\"15-01-2012\") => false\n     * valid_date(\"04-0-2040\") => false\n     * valid_date(\"06-04-2020\") => true\n     * valid_date(\"06/04/2020\") => false\n     */\n    public boolean valid_date(String date) {\n        if (date == null || date.isEmpty()) return false;\n\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) return false;\n\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\n        // Check month\n        if (month < 1 || month > 12) return false;\n\n        // Check days based on the month\n        boolean isLeapYear = (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);\n        int[] maxDaysInMonth = {31, (isLeapYear ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\n        if (day < 1 || day > maxDaysInMonth[month - 1]) return false;\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.valid_date(\"03-11-2000\")); // true\n        System.out.println(solution.valid_date(\"15-01-2012\")); // false\n        System.out.println(solution.valid_date(\"04-0-2040\"));  // false\n        System.out.println(solution.valid_date(\"06-04-2020\")); // true\n        System.out.println(solution.valid_date(\"06/04/2020\")); // false\n    }\n}\n"}
{"task_id": "Java/125", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n     should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n     alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n     Examples:\n     split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\n     split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]\n     split_words(\"abcdef\") == 3\n     */\n    public Object split_words(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\"\\\\s+\"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && ((c - 'a') % 2 == 1)) {\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.split_words(\"Hello world!\")); // Should print: [Hello, world!]\n        System.out.println(solution.split_words(\"Hello,world!\")); // Should print: [Hello, world!]\n        System.out.println(solution.split_words(\"abcdef\"));      // Should print: 3\n\n        // Additional test cases\n        System.out.println(solution.split_words(\"a b c,d,e,f\")); // Should print: [a, b, c, d, e, f]\n        System.out.println(solution.split_words(\"noSpacesOrCommas\")); // Should print: 5\n    }\n}\n"}
{"task_id": "Java/126", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given a list of numbers, return whether or not they are sorted in ascending order. If the a number appears more than twice, return false. Assume no negative numbers and only integers.\n     \n     Examples:\n     is_sorted(Arrays.asList(5)) -> true\n     is_sorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n     is_sorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n     is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n     is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n     is_sorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n     is_sorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n     is_sorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n    */\n    public boolean is_sorted(List<Integer> lst) {\n        if (lst == null || lst.size() <= 1) return true;\n\n        int count = 1;\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i).equals(lst.get(i - 1))) {\n                count++;\n                if (count > 2) return false;\n            } else {\n                count = 1;\n            }\n            if (lst.get(i) < lst.get(i - 1)) return false;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.is_sorted(Arrays.asList(5))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 3, 4, 5))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 3, 2, 4, 5))); // false\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6))); // true\n        System.out.println(solution.isorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7))); // false\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 2, 3, 3, 4))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 2, 2, 3, 4))); // false\n    }\n}\n"}
{"task_id": "Java/127", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You are given two intervals,\n     * where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n     * The given intervals are closed which means that the interval (start, end)\n     * includes both start and end.\n     * For each given interval, it is assumed that its start is less or equal its end.\n     * Your task is to determine whether the length of intersection of these two\n     * intervals is a prime number.\n     * Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n     * which its length is 1, which not a prime number.\n     * If the length of the intersection is a prime number, return \"YES\",\n     * otherwise, return \"NO\".\n     * If the two intervals don't intersect, return \"NO\".\n     *\n     * @param interval1 The first interval as a List<Integer> with size 2\n     * @param interval2 The second interval as a List<Integer> with size 2\n     * @return \"YES\" if the length of intersection is prime, otherwise \"NO\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int startMax = Math.max(interval1.get(0), interval2.get(0));\n        int endMin = Math.min(interval1.get(1), interval2.get(1));\n\n        if (startMax > endMin) {\n            return \"NO\"; // No intersection\n        }\n\n        int lengthOfIntersection = endMin - startMax + 1;\n\n        return isPrime(lengthOfIntersection) ? \"YES\" : \"NO\";\n    }\n\n    private boolean isPrime(int number) {\n        if (number <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(number); i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.intersection(Arrays.asList(1, 2), Arrays.asList(2, 3))); // NO\n        System.out.println(solution.intersection(Arrays.asList(-1, 1), Arrays.asList(0, 4))); // NO\n        System.out.println(solution.intersection(Arrays.asList(-3, -1), Arrays.asList(-5, 5))); // YES\n    }\n}\n"}
{"task_id": "Java/128", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given an array arr of integers and you need to return\n     * sum of magnitudes of integers multiplied by product of all signs\n     * of each number in the array, represented by 1, -1 or 0.\n     * Note: return None for empty arr.\n     *\n     * Example:\n     * >>> prod_signs(Arrays.asList(1, 2, 2, -4)) == -9\n     * >>> prod_signs(Arrays.asList(0, 1)) == 0\n     * >>> prod_signs(Arrays.asList()) == Optional.empty()\n     */\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int sumOfMagnitudes = 0;\n        int productOfSigns = 1;\n\n        for (Integer num : arr) {\n            sumOfMagnitudes += Math.abs(num);\n\n            if (num == 0) {\n                productOfSigns = 0;\n                break; // If any number is zero, the product of signs will be zero\n            } else if (num < 0) {\n                productOfSigns *= -1;\n            }\n        }\n\n        return Optional.of(sumOfMagnitudes * productOfSigns);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.prod_signs(Arrays.asList(1, 2, 2, -4))); // Expected output: -9\n        System.out.println(solution.prod_signs(Arrays.asList(0, 1)));        // Expected output: Optional[0]\n        System.out.println(solution.prod_signs(Arrays.asList()));            // Expected output: Optional.empty\n    }\n}\n"}
{"task_id": "Java/129", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n     each cell of the grid contains a value. Every integer in the range [1, N * N]\n     inclusive appears exactly once on the cells of the grid.\n\n     You have to find the minimum path of length k in the grid. You can start\n     from any cell, and in each step you can move to any of the neighbor cells,\n     in other words, you can go to cells which share an edge with your current\n     cell.\n     Please note that a path of length k means visiting exactly k cells (not\n     necessarily distinct).\n     You CANNOT go off the grid.\n     A path A (of length k) is considered less than a path B (of length k) if\n     after making the ordered lists of the values on the cells that A and B go\n     through (let's call them lst_A and lst_B), lst_A is lexicographically less\n     than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n     such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n     lst_A[j] = lst_B[j].\n     It is guaranteed that the answer is unique.\n     Return an ordered list of the values on the cells that the minimum path go through.\n\n     Examples:\n\n         Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n         Output: [1, 2, 1]\n\n         Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n         Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);\n        \n        // Initialize the priority queue with all possible starting points\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                pq.offer(new int[]{grid.get(i).get(j), i, j});\n            }\n        }\n\n        // Directions: up, down, left, right\n        int[][] dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n\n        while (!pq.isEmpty()) {\n            int[] curr = pq.poll();\n            List<Integer> path = new ArrayList<>();\n            path.add(curr[0]);\n            \n            // Explore up to k steps\n            for (int i = 1; i < k; i++) {\n                boolean found = false;\n                for (int[] dir : dirs) {\n                    int nx = curr[1] + dir[0];\n                    int ny = curr[2] + dir[1];\n                    \n                    if (nx >= 0 && nx < n && ny >= 0 && ny < n) {\n                        path.add(grid.get(nx).get(ny));\n                        pq.offer(new int[]{grid.get(nx).get(ny), nx, ny});\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) break; // If no valid move is possible, stop\n            }\n\n            // Check if the current path length is k and return it\n            if (path.size() == k) {\n                return path;\n            }\n        }\n\n        return new ArrayList<>(); // Should never reach here due to problem constraints\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n\n        List<List<Integer>> grid1 = Arrays.asList(\n            Arrays.asList(1, 2, 3),\n            Arrays.asList(4, 5, 6),\n            Arrays.asList(7, 8, 9)\n        );\n        System.out.println(sol.minPath(grid1, 3)); // Output: [1, 2, 1]\n\n        List<List<Integer>> grid2 = Arrays.asList(\n            Arrays.asList(5, 9, 3),\n            Arrays.asList(4, 1, 6),\n            Arrays.asList(7, 8, 2)\n        );\n        System.out.println(sol.minPath(grid2, 1)); // Output: [1]\n    }\n}\n"}
{"task_id": "Java/130", "generation": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Solution {\n    /**\n     * Generates the first n + 1 numbers of the Tribonacci sequence.\n     *\n     * @param n A non-negative integer representing the length of the sequence.\n     * @return A list containing the first n + 1 numbers of the Tribonacci sequence.\n     */\n    public List<Integer> tri(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Input must be a non-negative integer.\");\n        }\n\n        List<Integer> result = new ArrayList<>();\n        // Base cases\n        if (n >= 0) result.add(3); // tri(1)\n        if (n >= 1) result.add(2); // tri(2)\n\n        for (int i = 2; i <= n; i++) {\n            int nextValue;\n            if (i % 2 == 0) {\n                nextValue = 1 + i / 2;\n            } else {\n                nextValue = result.get(i - 1) + result.get(i - 2) + result.get(i);\n            }\n            result.add(nextValue);\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.tri(3)); // Expected: [3, 2, 8]\n        System.out.println(solution.tri(5)); // Expected: [3, 2, 8, 14, 27, 60]\n        System.out.println(solution.tri(0)); // Expected: [3]\n        System.out.println(solution.tri(1)); // Expected: [3, 2]\n    }\n}\n"}
{"task_id": "Java/131", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a positive integer n, return the product of the odd digits.\n     * Return 0 if all digits are even.\n     * For example:\n     * digits(1)  == 1\n     * digits(4)  == 0\n     * digits(235) == 15\n     */\n    public int digits(int n) {\n        int product = 1;\n        boolean hasOddDigit = false;\n\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n                hasOddDigit = true;\n            }\n            n /= 10;\n        }\n\n        return hasOddDigit ? product : 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.digits(1));   // Output: 1\n        System.out.println(solution.digits(4));   // Output: 0\n        System.out.println(solution.digits(235)); // Output: 15\n        System.out.println(solution.digits(2468)); // Output: 0\n        System.out.println(solution.digits(13579)); // Output: 945\n    }\n}\n"}
{"task_id": "Java/132", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Create a function that takes a string as input which contains only square brackets.\n     * The function should return true if and only if there is a valid subsequence of brackets\n     * where at least one bracket in the subsequence is nested.\n     *\n     * @param string the input string containing only square brackets\n     * @return true if there is a nested subsequence, false otherwise\n     */\n    public boolean is_nested(String string) {\n        int balance = 0;\n        boolean hasNested = false;\n\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                balance++;\n                if (balance > 1) {\n                    hasNested = true;\n                }\n            } else if (c == ']') {\n                balance--;\n                if (balance < 0) {\n                    return false; // Unmatched closing bracket\n                }\n            }\n        }\n\n        return hasNested && balance == 0; // Ensure all brackets are matched and there is at least one nested pair\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.is_nested(\"[[]]\")); // true\n        System.out.println(solution.is_nested(\"[]]]]]]][[[[[]\")); // false\n        System.out.println(solution.is_nested(\"[][]\")); // false\n        System.out.println(solution.is_nested(\"[]\")); // false\n        System.out.println(solution.is_nested(\"[[][]]\")); // true\n        System.out.println(solution.is_nested(\"[[]][[\")); // true\n    }\n}\n"}
{"task_id": "Java/133", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     You are given a list of numbers.\n     You need to return the sum of squared numbers in the given list,\n     round each element in the list to the upper int(Ceiling) first.\n     Examples:\n     For lst = [1,2,3] the output should be 14\n     For lst = [1,4,9] the output should be 98\n     For lst = [1,3,5,7] the output should be 84\n     For lst = [1.4,4.2,0] the output should be 29\n     For lst = [-2.4,1,1] the output should be 6\n      */\n    public int sum_squares(List<Double> lst) {\n        return lst.stream()\n                  .mapToDouble(num -> Math.ceil(num))\n                  .map(num -> num * num)\n                  .sum();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sum_squares(List.of(1.0, 2.0, 3.0))); // Expected: 14\n        System.out.println(solution.sum_squares(List.of(1.0, 4.0, 9.0))); // Expected: 98\n        System.out.println(solution.sum_squares(List.of(1.0, 3.0, 5.0, 7.0))); // Expected: 84\n        System.out.println(solution.sum_squares(List.of(1.4, 4.2, 0.0))); // Expected: 29\n        System.out.println(solution.sum_squares(List.of(-2.4, 1.0, 1.0))); // Expected: 6\n    }\n}\n"}
{"task_id": "Java/134", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Create a function that returns true if the last character\n     * of a given string is an alphabetical character and is not\n     * a part of a word, and false otherwise.\n     * Note: \"word\" is a group of characters separated by space.\n     *\n     * Examples:\n     * check_if_last_char_is_a_letter(\"apple pie\") -> false\n     * check_if_last_char_is_a_letter(\"apple pi e\") -> true\n     * check_if_last_char_is_a_letter(\"apple pi e \") -> false\n     * check_if_last_char_is_a_letter(\"\") -> false\n     */\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        if (txt == null || txt.isEmpty()) {\n            return false;\n        }\n\n        // Get the last character of the string\n        char lastChar = txt.charAt(txt.length() - 1);\n\n        // Check if the last character is a space or not part of a word\n        if (lastChar == ' ') {\n            return false;\n        }\n\n        // Check if the last character is an alphabetical letter\n        return Character.isLetter(lastChar);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.check_if_last_char_is_a_letter(\"apple pie\"));  // false\n        System.out.println(solution.check_if_last_char_is_a_letter(\"apple pi e\")); // true\n        System.out.println(solution.check_if_last_char_is_a_letter(\"apple pi e \")); // false\n        System.out.println(solution.check_if_last_char_is_a_letter(\"\"));           // false\n        System.out.println(solution.check_if_last_char_is_a_letter(\"a b c d e f g h i j k l m n o p q r s t u v w x y z \")); // false\n        System.out.println(solution.check_if_last_char_is_a_letter(\"hello world!\")); // true (assuming the last character is 'd')\n    }\n}\n"}
{"task_id": "Java/135", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Create a function which returns the largest index of an element which\n     * is not greater than or equal to the element immediately preceding it. If\n     * no such element exists then return -1. The given array will not contain\n     * duplicate values.\n     *\n     * Examples:\n     * can_arrange(Arrays.asList(1,2,4,3,5)) = 3\n     * can_arrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int can_arrange(List<Integer> arr) {\n        if (arr == null || arr.size() < 2) {\n            return -1;\n        }\n\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.can_arrange(Arrays.asList(1, 2, 4, 3, 5))); // Expected output: 3\n        System.out.println(solution.can_arrange(Arrays.asList(1, 2, 3)));       // Expected output: -1\n        System.out.println(solution.can_arrange(Arrays.asList(5, 4, 3, 2, 1))); // Expected output: 0\n        System.out.println(solution.can_arrange(Arrays.asList(1, 3, 2, 4, 5))); // Expected output: 2\n    }\n}\n"}
{"task_id": "Java/136", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n     * Create a function that returns a tuple (a, b), where 'a' is\n     * the largest of negative integers, and 'b' is the smallest\n     * of positive integers in a list.\n     * If there is no negative or positive integers, return them as None.\n     *\n     * Examples:\n     * largest_smallest_integers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n     * largest_smallest_integers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n     * largest_smallest_integers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Arrays.asList(Optional.empty(), Optional.empty());\n        }\n\n        Optional<Integer> smallestPositive = lst.stream()\n                .filter(n -> n > 0)\n                .min(Integer::compare);\n\n        Optional<Integer> largestNegative = lst.stream()\n                .filter(n -> n < 0)\n                .max(Integer::compare);\n\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(2, 4, 1, 3, 5, 7))); // (Optional.empty(), Optional.of(1))\n        System.out.println(solution.largest_smallest_integers(Arrays.asList()));                // (Optional.empty(), Optional.empty())\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(0)));               // (Optional.empty(), Optional.empty())\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(-3, -1, 2, 4)));    // (Optional.of(-1), Optional.of(2))\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(-5, -7, -9)));      // (Optional.of(-5), Optional.empty())\n    }\n}\n"}
{"task_id": "Java/137", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Create a function that takes integers, floats, or strings representing\n     * real numbers, and returns the larger variable in its given variable type.\n     * Return None if the values are equal.\n     * Note: If a real number is represented as a string, the floating point might be . or ,\n     *\n     * compare_one(1, 2.5) -> Optional.of(2.5)\n     * compare_one(1, \"2,3\") -> Optional.of(\"2,3\")\n     * compare_one(\"5,1\", \"6\") -> Optional.of(\"6\")\n     * compare_one(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compare_one(Object a, Object b) {\n        double numA = convertToDouble(a);\n        double numB = convertToDouble(b);\n\n        if (numA == numB) {\n            return Optional.empty();\n        } else if (numA > numB) {\n            return Optional.of(a);\n        } else {\n            return Optional.of(b);\n        }\n    }\n\n    private double convertToDouble(Object value) {\n        if (value instanceof String) {\n            String strValue = (String) value;\n            // Replace comma with dot for parsing\n            strValue = strValue.replace(',', '.');\n            return Double.parseDouble(strValue);\n        } else if (value instanceof Integer) {\n            return ((Integer) value).doubleValue();\n        } else if (value instanceof Float) {\n            return ((Float) value).doubleValue();\n        }\n        throw new IllegalArgumentException(\"Unsupported type: \" + value.getClass().getName());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.compare_one(1, 2.5)); // Optional[2.5]\n        System.out.println(solution.compare_one(1, \"2,3\")); // Optional[2,3]\n        System.out.println(solution.compare_one(\"5,1\", \"6\")); // Optional[6]\n        System.out.println(solution.compare_one(\"1\", 1)); // Optional.empty\n    }\n}\n"}
{"task_id": "Java/138", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n     * Example:\n     * is_equal_to_sum_even(4) == false\n     * is_equal_to_sum_even(6) == false\n     * is_equal_to_sum_even(8) == true\n     */\n    public boolean is_equal_to_sum_even(int n) {\n        // Since the smallest sum of 4 positive even numbers is 2 + 2 + 2 + 2 = 8,\n        // any number less than 8 cannot be written as such a sum.\n        if (n < 8) {\n            return false;\n        }\n        \n        // If n - 8 is even, then we can write n as the sum of 4 positive even numbers\n        // because we can add pairs of 2 to make up the difference.\n        return (n - 8) % 2 == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.is_equal_to_sum_even(4)); // false\n        System.out.println(solution.is_equal_to_sum_even(6)); // false\n        System.out.println(solution.is_equal_to_sum_even(8)); // true\n        System.out.println(solution.is_equal_to_sum_even(10)); // true (2 + 2 + 2 + 4)\n        System.out.println(solution.is_equal_to_sum_even(12)); // true (2 + 2 + 2 + 6)\n        System.out.println(solution.is_equal_to_sum_even(14)); // true (2 + 2 + 2 + 8)\n        System.out.println(solution.is_equal_to_sum_even(16)); // true (2 + 2 + 2 + 10)\n    }\n}\n"}
{"task_id": "Java/139", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     The Brazilian factorial is defined as:\n     brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n     where n > 0\n\n     For example:\n     >>> special_factorial(4)\n     288\n\n     The function will receive an integer as input and should return the special\n     factorial of this integer.\n      */\n    public long special_factorial(int n) {\n        if (n == 1 || n == 0) {\n            return 1;\n        }\n        \n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    private long factorial(int number) {\n        if (number <= 1) {\n            return 1;\n        } else {\n            return number * factorial(number - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"special_factorial(4): \" + solution.special_factorial(4)); // Expected: 288\n        System.out.println(\"special_factorial(3): \" + solution.special_factorial(3)); // Expected: 12\n        System.out.println(\"special_factorial(5): \" + solution.special_factorial(5)); // Expected: 34560\n        System.out.println(\"special_factorial(1): \" + solution.special_factorial(1)); // Expected: 1\n        System.out.println(\"special_factorial(2): \" + solution.special_factorial(2)); // Expected: 2\n    }\n}\n"}
{"task_id": "Java/140", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given a string text, replace all spaces in it with underscores,\n     and if a string has more than 2 consecutive spaces,\n     then replace all consecutive spaces with -\n     */\n    public String fix_spaces(String text) {\n        StringBuilder result = new StringBuilder();\n        int spaceCount = 0;\n\n        for (char c : text.toCharArray()) {\n            if (c == ' ') {\n                spaceCount++;\n                if (spaceCount <= 2) {\n                    result.append('_');\n                }\n            } else {\n                if (spaceCount > 2) {\n                    result.delete(result.length() - 2, result.length());\n                    result.append('-');\n                }\n                spaceCount = 0;\n                result.append(c);\n            }\n        }\n\n        // Handle trailing spaces\n        if (spaceCount > 2) {\n            result.replace(result.length() - 2, result.length(), \"-\");\n        } else if (spaceCount == 2) {\n            result.setLength(result.length() - 1); // Remove the last underscore\n        }\n\n        return result.toString();\n    }\n}\n\npublic class TestSolution {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.fix_spaces(\"Example\") == \"Example\" ? \"Pass\" : \"Fail\");\n        System.out.println(solution.fix_spaces(\"Example 1\") == \"Example_1\" ? \"Pass\" : \"Fail\");\n        System.out.println(solution.fix_spaces(\" Example 2\") == \"_Example_2\" ? \"Pass\" : \"Fail\");\n        System.out.println(solution.fix_spaces(\" Example   3\") == \"_Example-3\" ? \"Pass\" : \"Fail\");\n\n        // Additional test cases\n        System.out.println(solution.fix_spaces(\"  Leading spaces\") == \"-Leading_spaces\" ? \"Pass\" : \"Fail\");\n        System.out.println(solution.fix_spaces(\"Trailing spaces  \") == \"Trailing_spaces-\" ? \"Pass\" : \"Fail\");\n        System.out.println(solution.fix_spaces(\"Multiple   spaces here\") == \"Multiple-_spaces_here\" ? \"Pass\" : \"Fail\");\n    }\n}\n"}
{"task_id": "Java/141", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Create a function which takes a string representing a file's name, and returns\n     * \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n     * A file's name is considered to be valid if and only if all the following conditions\n     * are met:\n     * - There should not be more than three digits ('0'-'9') in the file's name.\n     * - The file's name contains exactly one dot '.'\n     * - The substring before the dot should not be empty, and it starts with a letter from\n     *   the latin alphapet ('a'-'z' and 'A'-'Z').\n     * - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n     * Examples:\n     * file_name_check(\"example.txt\") # => \"Yes\"\n     * file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String file_name_check(String file_name) {\n        // Check for exactly one dot\n        int dotCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (c == '.') {\n                dotCount++;\n            }\n        }\n        if (dotCount != 1) return \"No\";\n\n        String[] parts = file_name.split(\"\\\\.\");\n        // Check the first part of the name\n        if (parts[0].isEmpty() || !Character.isLetter(parts[0].charAt(0))) {\n            return \"No\";\n        }\n\n        // Check for more than three digits in the first part\n        int digitCount = 0;\n        for (char c : parts[0].toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n            if (digitCount > 3) return \"No\";\n        }\n\n        // Check the extension\n        String extension = parts.length > 1 ? parts[1] : \"\";\n        if (!Arrays.asList(\"txt\", \"exe\", \"dll\").contains(extension.toLowerCase())) {\n            return \"No\";\n        }\n\n        return \"Yes\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.file_name_check(\"example.txt\"));  // Expected: Yes\n        System.out.println(solution.file_name_check(\"1example.dll\")); // Expected: No (starts with a digit)\n        System.out.println(solution.file_name_check(\".txt\"));         // Expected: No (empty first part)\n        System.out.println(solution.file_name_check(\"example.exe\"));  // Expected: Yes\n        System.out.println(solution.file_name_check(\"example1234.dll\"));// Expected: No (more than three digits)\n        System.out.println(solution.file_name_check(\"example.docx\")); // Expected: No (invalid extension)\n    }\n}\n"}
{"task_id": "Java/142", "generation": "import java.util.List;\n\nclass Solution {\n    /**\n     * This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n     *\n     * Examples:\n     * For lst = [1,2,3] the output should be 6\n     * For lst = []  the output should be 0\n     * For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sum_squares(List<Integer> lst) {\n        if (lst == null || lst.isEmpty()) {\n            return 0;\n        }\n\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int value = lst.get(i);\n            if ((i + 1) % 3 == 0) {\n                sum += Math.pow(value, 2);\n            } else if ((i + 1) % 4 == 0 && (i + 1) % 3 != 0) {\n                sum += Math.pow(value, 3);\n            }\n        }\n\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sum_squares(List.of(1, 2, 3))); // Expected output: 6\n        System.out.println(solution.sum_squares(List.of())); // Expected output: 0\n        System.out.println(solution.sum_squares(List.of(-1, -5, 2, -1, -5))); // Expected output: -126\n    }\n}\n"}
{"task_id": "Java/143", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given a string representing a sentence,\n     * the sentence contains some words separated by a space,\n     * and you have to return a string that contains the words from the original sentence,\n     * whose lengths are prime numbers,\n     * the order of the words in the new string should be the same as the original one.\n     *\n     * Example 1:\n     * Input: sentence = \"This is a test\"\n     * Output: \"is\"\n     *\n     * Example 2:\n     * Input: sentence = \"lets go for swimming\"\n     * Output: \"go for\"\n     *\n     * Constraints:\n     * * 1 <= len(sentence) <= 100\n     * * sentence contains only letters\n     */\n    public String words_in_sentence(String sentence) {\n        // Split the sentence into words\n        String[] words = sentence.split(\" \");\n        \n        // Build a string with words whose lengths are prime numbers\n        StringBuilder result = new StringBuilder();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                if (result.length() > 0) {\n                    result.append(\" \");\n                }\n                result.append(word);\n            }\n        }\n        \n        return result.toString();\n    }\n\n    // Helper method to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Test cases\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.words_in_sentence(\"This is a test\")); // Output: \"is\"\n        System.out.println(solution.words_in_sentence(\"lets go for swimming\")); // Output: \"go for\"\n        System.out.println(solution.words_in_sentence(\"hello world\")); // Output: \"\"\n        System.out.println(solution.words_in_sentence(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")); // Output: \"a b c d e f g h i j k l m n o p q r s t u v w x y z\"\n        System.out.println(solution.words_in_sentence(\"one two three four five six seven eight nine ten\")); // Output: \"three five seven\"\n    }\n}\n"}
{"task_id": "Java/144", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Your task is to implement a function that will simplify the expression\n     * x * n. The function returns true if x * n evaluates to a whole number and false\n     * otherwise. Both x and n, are string representation of a fraction, and have the following format,\n     * <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n     *\n     * You can assume that x, and n are valid fractions, and do not have zero as denominator.\n     *\n     * simplify(\"1/5\", \"5/1\") = true\n     * simplify(\"1/6\", \"2/1\") = false\n     * simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Split the fractions into numerator and denominator\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n\n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n\n        // Simplify the expression (x * n) / 1\n        int resultNumerator = xNumerator * nNumerator;\n        int resultDenominator = xDenominator * nDenominator;\n\n        // Check if the result is a whole number\n        return resultNumerator % resultDenominator == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.simplify(\"1/5\", \"5/1\")); // true\n        System.out.println(solution.simplify(\"1/6\", \"2/1\")); // false\n        System.out.println(solution.simplify(\"7/10\", \"10/2\")); // false\n        System.out.println(solution.simplify(\"3/4\", \"4/3\")); // true\n        System.out.println(solution.simplify(\"5/8\", \"8/5\")); // true\n        System.out.println(solution.simplify(\"2/3\", \"9/6\")); // true\n    }\n}\n"}
{"task_id": "Java/145", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Write a function which sorts the given list of integers in ascending order according to the sum of their digits.\n     * Note: if there are several items with similar sum of their digits, order them based on their index in original list.\n     * If an integer is negative, then its first digit will be negative:\n     * e.g. -123 has digits -1, 2, and 3.\n     *\n     * For example:\n     * >>> order_by_points(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n     * >>> order_by_points(Arrays.asList()) == []\n     */\n    public List<Integer> order_by_points(List<Integer> nums) {\n        return nums.stream()\n                   .sorted(Comparator.comparingInt(Solution::digitSum)\n                                     .thenComparingInt(nums::indexOf))\n                   .collect(Collectors.toList());\n    }\n\n    private static int digitSum(Integer num) {\n        if (num == null) return 0;\n        boolean isNegative = num < 0;\n        String strNum = Integer.toString(num);\n        int sum = 0;\n\n        for (int i = 0; i < strNum.length(); i++) {\n            char c = strNum.charAt(i);\n            if (i == 0 && isNegative) {\n                // Skip the negative sign\n                continue;\n            }\n            sum += Character.getNumericValue(c);\n        }\n\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> test1 = Arrays.asList(1, 11, -1, -11, -12);\n        System.out.println(solution.order_by_points(test1)); // Expected: [-1, -11, 1, -12, 11]\n\n        List<Integer> test2 = new ArrayList<>();\n        System.out.println(solution.order_by_points(test2)); // Expected: []\n\n        List<Integer> test3 = Arrays.asList(-5, -4, -3, -2, -1);\n        System.out.println(solution.order_by_points(test3)); // Expected: [-1, -2, -3, -4, -5]\n\n        List<Integer> test4 = Arrays.asList(0, 9, 8, 7, 6);\n        System.out.println(solution.order_by_points(test4)); // Expected: [0, 6, 7, 8, 9]\n    }\n}\n"}
{"task_id": "Java/146", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function that takes an array of numbers as input and returns\n     * the number of elements in the array that are greater than 10 and both\n     * first and last digits of a number are odd (1, 3, 5, 7, 9).\n     * For example:\n     * specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n     * specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10 && isFirstAndLastDigitOdd(num)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isFirstAndLastDigitOdd(int num) {\n        String strNum = Integer.toString(Math.abs(num));\n        int firstDigit = Character.digit(strNum.charAt(0), 10);\n        int lastDigit = Character.digit(strNum.charAt(strNum.length() - 1), 10);\n\n        return (firstDigit % 2 != 0) && (lastDigit % 2 != 0);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.specialFilter(Arrays.asList(15, -73, 14, -15))); // Expected output: 1\n        System.out.println(solution.specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109))); // Expected output: 2\n        System.out.println(solution.specialFilter(Arrays.asList(-11, 13, 27, 39, 41))); // Expected output: 3\n        System.out.println(solution.specialFilter(Arrays.asList(1, -1, 5, -5, 10))); // Expected output: 0\n    }\n}\n"}
{"task_id": "Java/147", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You are given a positive integer n. You have to create an integer array a of length n.\n     * For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n     * Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n     * and a[i] + a[j] + a[k] is a multiple of 3.\n     *\n     * Example :\n     * Input: n = 5\n     * Output: 1\n     * Explanation:\n     * a = [1, 3, 7, 13, 21]\n     * The only valid triple is (1, 7, 13).\n     */\n    public int get_max_triples(int n) {\n        List<Integer> arr = new ArrayList<>();\n        \n        // Generate the array\n        for (int i = 1; i <= n; i++) {\n            arr.add(i * i - i + 1);\n        }\n        \n        int count = 0;\n        \n        // Iterate through all possible triples\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                for (int k = j + 1; k < arr.size(); k++) {\n                    if ((arr.get(i) + arr.get(j) + arr.get(k)) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.get_max_triples(5)); // Expected output: 1\n        System.out.println(solution.get_max_triples(6)); // Expected output: 2\n        System.out.println(solution.get_max_triples(7)); // Expected output: 3\n    }\n}\n"}
{"task_id": "Java/148", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * There are eight planets in our solar system: the closerst to the Sun\n     * is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n     * Uranus, Neptune.\n     * Write a function that takes two planet names as strings planet1 and planet2.\n     * The function should return a list containing all planets whose orbits are\n     * located between the orbit of planet1 and the orbit of planet2, sorted by\n     * the proximity to the sun.\n     * The function should return an empty list if planet1 or planet2\n     * are not correct planet names.\n     * Examples:\n     * bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n     * bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n     * bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        // Define the order of planets from closest to farthest from the Sun\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n\n        // Check if both planet names are valid\n        if (index1 == -1 || index2 == -1) {\n            return new ArrayList<>();\n        }\n\n        // Ensure index1 is less than index2 for correct slicing\n        if (index1 > index2) {\n            int temp = index1;\n            index1 = index2;\n            index2 = temp;\n        }\n\n        // Return the sublist of planets between the two given planets, inclusive\n        return planets.subList(index1 + 1, index2);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.bf(\"Jupiter\", \"Neptune\")); // [\"Saturn\", \"Uranus\"]\n        System.out.println(solution.bf(\"Earth\", \"Mercury\"));   // [\"Venus\"]\n        System.out.println(solution.bf(\"Mercury\", \"Uranus\"));  // [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n        System.out.println(solution.bf(\"Neptune\", \"Venus\"));   // []\n    }\n}\n"}
{"task_id": "Java/149", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Write a function that accepts a list of strings as a parameter,\n     * deletes the strings that have odd lengths from it,\n     * and returns the resulted list with a sorted order.\n     * The list is always a list of strings and never an array of numbers,\n     * and it may contain duplicates.\n     * The order of the list should be ascending by length of each word, and you\n     * should return the list sorted by that rule.\n     * If two words have the same length, sort the list alphabetically.\n     * The function should return a list of strings in sorted order.\n     * You may assume that all words will have the same length.\n     */\n    public List<String> sorted_list_sum(List<String> lst) {\n        // Remove strings with odd lengths\n        lst.removeIf(s -> s.length() % 2 != 0);\n\n        // Sort the list by length, then alphabetically if lengths are equal\n        Collections.sort(lst, (s1, s2) -> {\n            int lenCompare = Integer.compare(s1.length(), s2.length());\n            return lenCompare == 0 ? s1.compareTo(s2) : lenCompare;\n        });\n\n        return lst;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<String> test1 = Arrays.asList(\"aa\", \"a\", \"aaa\");\n        System.out.println(solution.sorted_list_sum(test1)); // Expected: [aa]\n\n        List<String> test2 = Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\");\n        System.out.println(solution.sorted_list_sum(test2)); // Expected: [ab, cd]\n\n        List<String> test3 = Arrays.asList(\"hello\", \"world\", \"hi\", \"code\");\n        System.out.println(solution.sorted_list_sum(test3)); // Expected: [code, hi]\n    }\n}\n"}
{"task_id": "Java/150", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * A simple program which should return the value of x if n is\n     * a prime number and should return the value of y otherwise.\n     *\n     * Examples:\n     * for x_or_y(7, 34, 12) == 34\n     * for x_or_y(15, 8, 5) == 5\n     */\n    public int x_or_y(int n, int x, int y) {\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    /**\n     * Helper method to check if a number is prime.\n     *\n     * @param num the number to check\n     * @return true if num is prime, false otherwise\n     */\n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.x_or_y(7, 34, 12)); // Expected output: 34\n        System.out.println(solution.x_or_y(15, 8, 5));  // Expected output: 5\n        System.out.println(solution.x_or_y(2, 10, 20)); // Expected output: 10 (since 2 is prime)\n        System.out.println(solution.x_or_y(4, 30, 40)); // Expected output: 40 (since 4 is not prime)\n    }\n}\n"}
{"task_id": "Java/151", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given a list of numbers, return the sum of squares of the numbers\n     in the list that are odd. Ignore numbers that are negative or not integers.\n     \n     double_the_difference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n     double_the_difference(Arrays.asList(-1, -2, 0)) == 0\n     double_the_difference(Arrays.asList(9, -2)) == 81\n     double_the_difference(Arrays.asList(0)) == 0\n     \n     If the input list is empty, return 0.\n      */\n    public int double_the_difference(List<Object> lst) {\n        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                if (num > 0 && num % 2 != 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.double_the_difference(Arrays.asList(1, 3, 2, 0))); // Expected output: 10\n        System.out.println(solution.double_the_difference(Arrays.asList(-1, -2, 0))); // Expected output: 0\n        System.out.println(solution.double_the_difference(Arrays.asList(9, -2)));      // Expected output: 81\n        System.out.println(solution.double_the_difference(Arrays.asList(0)));          // Expected output: 0\n        System.out.println(solution.double_the_difference(new ArrayList<>()));         // Expected output: 0\n    }\n}\n"}
{"task_id": "Java/152", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Compares the game scores with the guess scores and returns an array of the same length denoting how far off each guess was.\n     *\n     * @param game The list of actual game scores.\n     * @param guess The list of guessed scores.\n     * @return A list where each element is the absolute difference between the corresponding game score and guess, or 0 if they are equal.\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            result.add(diff);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1Game = Arrays.asList(1, 2, 3, 4, 5, 1);\n        List<Integer> test1Guess = Arrays.asList(1, 2, 3, 4, 2, -2);\n        System.out.println(\"Test Case 1: \" + solution.compare(test1Game, test1Guess)); // Expected: [0, 0, 0, 0, 3, 3]\n\n        List<Integer> test2Game = Arrays.asList(0, 5, 0, 0, 0, 4);\n        List<Integer> test2Guess = Arrays.asList(4, 1, 1, 0, 0, -2);\n        System.out.println(\"Test Case 2: \" + solution.compare(test2Game, test2Guess)); // Expected: [4, 4, 1, 0, 0, 6]\n\n        List<Integer> test3Game = Arrays.asList(10, 20, 30);\n        List<Integer> test3Guess = Arrays.asList(15, 25, 35);\n        System.out.println(\"Test Case 3: \" + solution.compare(test3Game, test3Guess)); // Expected: [5, 5, 5]\n\n        List<Integer> test4Game = Arrays.asList(7, 8, 9, 10);\n        List<Integer> test4Guess = Arrays.asList(7, 8, 9, 11);\n        System.out.println(\"Test Case 4: \" + solution.compare(test4Game, test4Guess)); // Expected: [0, 0, 0, 1]\n    }\n}\n"}
{"task_id": "Java/153", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You will be given the name of a class (a string) and a list of extensions.\n     * The extensions are to be used to load additional classes to the class. The\n     * strength of the extension is as follows: Let CAP be the number of the uppercase\n     * letters in the extension's name, and let SM be the number of lowercase letters\n     * in the extension's name, the strength is given by the fraction CAP - SM.\n     * You should find the strongest extension and return a string in this\n     * format: ClassName.Strongest_Extension.\n     * If there are two or more extensions with the same strength, you should\n     * choose the one that comes first in the list.\n     * For example, if you are given \"Slices\" as the class and a list of the\n     * extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n     * return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n     * (its strength is -1).\n     * Example:\n     * for Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        int maxStrength = Integer.MIN_VALUE;\n        String strongestExtension = \"\";\n\n        for (String extension : extensions) {\n            int capCount = 0;\n            int smCount = 0;\n\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smCount++;\n                }\n            }\n\n            int strength = capCount - smCount;\n\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return class_name + \".\" + strongestExtension;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.Strongest_Extension(\"Slices\", Arrays.asList(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"))); // Should return \"Slices.SErviNGSliCes\"\n        System.out.println(solution.Strongest_Extension(\"my_class\", Arrays.asList(\"AA\", \"Be\", \"CC\"))); // Should return \"my_class.AA\"\n        System.out.println(solution.Strongest_Extension(\"DataProcessor\", Arrays.asList(\"dataIO\", \"DATAIO\", \"dataio\"))); // Should return \"DataProcessor.DATAIO\"\n    }\n}\n"}
{"task_id": "Java/154", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word.\n     *\n     * cycpattern_check(\"abcd\",\"abd\") => false\n     * cycpattern_check(\"hello\",\"ell\") => true\n     * cycpattern_check(\"whassup\",\"psus\") => false\n     * cycpattern_check(\"abab\",\"baa\") => true\n     * cycpattern_check(\"efef\",\"eeff\") => false\n     * cycpattern_check(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpattern_check(String a, String b) {\n        // Concatenate the first string with itself to handle rotations\n        String doubledA = a + a;\n        \n        // Check if any rotation of b is a substring in doubledA\n        for (int i = 0; i < b.length(); i++) {\n            String rotatedB = rotateString(b, i);\n            if (doubledA.contains(rotatedB)) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n\n    // Helper method to rotate the string\n    private String rotateString(String s, int k) {\n        int n = s.length();\n        k = k % n;  // In case k is larger than the length of the string\n        return s.substring(n - k) + s.substring(0, n - k);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.cycpattern_check(\"abcd\", \"abd\"));  // false\n        System.out.println(solution.cycpattern_check(\"hello\", \"ell\"));  // true\n        System.out.println(solution.cycpattern_check(\"whassup\", \"psus\"));  // false\n        System.out.println(solution.cycpattern_check(\"abab\", \"baa\"));  // true\n        System.out.println(solution.cycpattern_check(\"efef\", \"eeff\"));  // false\n        System.out.println(solution.cycpattern_check(\"himenss\", \"simen\"));  // true\n    }\n}\n"}
{"task_id": "Java/155", "generation": "import java.util.List;\n\nclass Solution {\n    /**\n     Given an integer. return a tuple that has the number of even and odd digits respectively.\n     \n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n     */\n    public List<Integer> even_odd_count(int num) {\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        // Make the number positive to handle negative numbers\n        num = Math.abs(num);\n        \n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num /= 10;\n        }\n        \n        return List.of(evenCount, oddCount);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(\"even_odd_count(-12): \" + solution.even_odd_count(-12)); // Expected: [1, 1]\n        System.out.println(\"even_odd_count(123): \" + solution.even_odd_count(123)); // Expected: [1, 2]\n        System.out.println(\"even_odd_count(0): \" + solution.even_odd_count(0));     // Expected: [1, 0]\n        System.out.println(\"even_odd_count(-987654321): \" + solution.even_odd_count(-987654321)); // Expected: [4, 5]\n    }\n}\n"}
{"task_id": "Java/156", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given a positive integer, obtain its roman numeral equivalent as a string,\n     and return it in lowercase.\n     Restrictions: 1 <= num <= 1000\n\n     Examples:\n     >>> int_to_mini_roman(19) == \"xix\"\n     >>> int_to_mini_roman(152) == \"clii\"\n     >>> int_to_mini_roman(426) == \"cdxxvi\"\n     */\n    public String int_to_mini_roman(int number) {\n        if (number < 1 || number > 1000) {\n            throw new IllegalArgumentException(\"Number must be between 1 and 1000\");\n        }\n\n        StringBuilder roman = new StringBuilder();\n        Map<Integer, String> romanMap = new HashMap<>();\n        romanMap.put(1000, \"m\");\n        romanMap.put(900, \"cm\");\n        romanMap.put(500, \"d\");\n        romanMap.put(400, \"cd\");\n        romanMap.put(100, \"c\");\n        romanMap.put(90, \"xc\");\n        romanMap.put(50, \"l\");\n        romanMap.put(40, \"xl\");\n        romanMap.put(10, \"x\");\n        romanMap.put(9, \"ix\");\n        romanMap.put(5, \"v\");\n        romanMap.put(4, \"iv\");\n        romanMap.put(1, \"i\");\n\n        for (Map.Entry<Integer, String> entry : romanMap.entrySet()) {\n            while (number >= entry.getKey()) {\n                roman.append(entry.getValue());\n                number -= entry.getKey();\n            }\n        }\n\n        return roman.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.int_to_mini_roman(19));  // Expected: \"xix\"\n        System.out.println(solution.int_to_mini_roman(152)); // Expected: \"clii\"\n        System.out.println(solution.int_to_mini_roman(426)); // Expected: \"cdxxvi\"\n\n        // Additional test cases\n        System.out.println(solution.int_to_mini_roman(399));  // Expected: \"cccxcix\"\n        System.out.println(solution.int_to_mini_roman(58));   // Expected: \"lviii\"\n        System.out.println(solution.int_to_mini_roman(947));  // Expected: \"cmxlvii\"\n    }\n}\n"}
{"task_id": "Java/157", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given the lengths of the three sides of a triangle. Return true if the three\n     * sides form a right-angled triangle, false otherwise.\n     * A right-angled triangle is a triangle in which one angle is 90 degrees.\n     *\n     * Example:\n     * right_angle_triangle(3, 4, 5) == true\n     * right_angle_triangle(1, 2, 3) == false\n     */\n    public boolean right_angle_triangle(int a, int b, int c) {\n        // Sort the sides to ensure the longest side is last\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        if (b > c) {\n            int temp = b;\n            b = c;\n            c = temp;\n        }\n        // Check if the square of the longest side is equal to the sum of squares of other two sides\n        return Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.right_angle_triangle(3, 4, 5)); // true\n        System.out.println(solution.right_angle_triangle(1, 2, 3)); // false\n        System.out.println(solution.right_angle_triangle(5, 12, 13)); // true\n        System.out.println(solution.right_angle_triangle(6, 8, 10)); // true\n        System.out.println(solution.right_angle_triangle(7, 10, 12)); // false\n    }\n}\n"}
{"task_id": "Java/158", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function that accepts a list of strings.\n     * The list contains different words. Return the word with maximum number\n     * of unique characters. If multiple strings have maximum number of unique\n     * characters, return the one which comes first in lexicographical order.\n     *\n     * find_max([\"name\", \"of\", \"string\"]) == \"string\"\n     * find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n     * find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\n     */\n    public String find_max(List<String> words) {\n        if (words == null || words.isEmpty()) {\n            return \"\";\n        }\n\n        // Sort the list lexicographically\n        Collections.sort(words);\n\n        String maxUniqueWord = \"\";\n        int maxUniqueCount = 0;\n\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n\n            if (uniqueChars.size() > maxUniqueCount) {\n                maxUniqueCount = uniqueChars.size();\n                maxUniqueWord = word;\n            }\n        }\n\n        return maxUniqueWord;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.find_max(Arrays.asList(\"name\", \"of\", \"string\"))); // Output: string\n        System.out.println(solution.find_max(Arrays.asList(\"name\", \"enam\", \"game\"))); // Output: enam\n        System.out.println(solution.find_max(Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\")));  // Output: aaaaaaa\n        System.out.println(solution.find_max(new ArrayList<>()));                     // Output: (empty string)\n    }\n}\n"}
{"task_id": "Java/159", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You're a hungry rabbit, and you already have eaten a certain number of carrots,\n     * but now you need to eat more carrots to complete the day's meals.\n     * You should return an array of [ total number of eaten carrots after your meals,\n     *                                the number of carrots left after your meals ]\n     * if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n     *\n     * Example:\n     * * eat(5, 6, 10) -> [11, 4]\n     * * eat(4, 8, 9) -> [12, 1]\n     * * eat(1, 10, 10) -> [11, 0]\n     * * eat(2, 11, 5) -> [7, 0]\n     *\n     * Variables:\n     * @number : integer\n     *        the number of carrots that you have eaten.\n     * @need : integer\n     *        the number of carrots that you need to eat.\n     * @remaining : integer\n     *        the number of remaining carrots in stock\n     *\n     * Constraints:\n     * * 0 <= number <= 1000\n     * * 0 <= need <= 1000\n     * * 0 <= remaining <= 1000\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        // Calculate the total number of carrots to be eaten\n        int totalToEat = Math.min(need, remaining);\n        \n        // Update the number of carrots eaten and remaining\n        int newNumberEaten = number + totalToEat;\n        int newRemainingCarrots = remaining - totalToEat;\n\n        return Arrays.asList(newNumberEaten, newRemainingCarrots);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.eat(5, 6, 10)); // Expected: [11, 4]\n        System.out.println(solution.eat(4, 8, 9));  // Expected: [12, 1]\n        System.out.println(solution.eat(1, 10, 10)); // Expected: [11, 0]\n        System.out.println(solution.eat(2, 11, 5));  // Expected: [7, 0]\n    }\n}\n"}
{"task_id": "Java/160", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given two lists operator, and operand. The first list has basic algebra operations,\n     * and the second list is a list of integers. Use the two given lists to build the algebric\n     * expression and return the evaluation of this expression.\n     *\n     * @param operator List of String representing operators: \"+\", \"-\", \"*\", \"/\", \"**\"\n     * @param operand  List of Integer operands\n     * @return The result of evaluating the algebraic expression\n     */\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        if (operator.isEmpty() || operand.size() < 2) {\n            throw new IllegalArgumentException(\"Invalid input lists\");\n        }\n\n        int result = operand.get(0);\n        for (int i = 0; i < operator.size(); i++) {\n            switch (operator.get(i)) {\n                case \"+\":\n                    result += operand.get(i + 1);\n                    break;\n                case \"-\":\n                    result -= operand.get(i + 1);\n                    break;\n                case \"*\":\n                    result *= operand.get(i + 1);\n                    break;\n                case \"/\":\n                    if (operand.get(i + 1) == 0) {\n                        throw new ArithmeticException(\"Division by zero\");\n                    }\n                    result /= operand.get(i + 1);\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, operand.get(i + 1));\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Unsupported operator: \" + operator.get(i));\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<String> operators1 = Arrays.asList(\"+\", \"*\", \"-\");\n        List<Integer> operands1 = Arrays.asList(2, 3, 4, 5);\n        System.out.println(solution.do_algebra(operators1, operands1)); // Expected output: 9\n\n        List<String> operators2 = Arrays.asList(\"/\", \"+\", \"**\");\n        List<Integer> operands2 = Arrays.asList(8, 2, 3, 2);\n        System.out.println(solution.do_algebra(operators2, operands2)); // Expected output: 4 (8 / 2 + 3 ** 2)\n\n        List<String> operators3 = Arrays.asList(\"*\", \"-\");\n        List<Integer> operands3 = Arrays.asList(10, 5, 3);\n        System.out.println(solution.do_algebra(operators3, operands3)); // Expected output: 40 (10 * 5 - 3)\n    }\n}\n"}
{"task_id": "Java/161", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given a string s.\n     * if s[i] is a letter, reverse its case from lower to upper or vise versa,\n     * otherwise keep it as it is. If the string contains no letters, reverse the string.\n     * The function should return the resulted string.\n     *\n     * Examples:\n     * solve(\"1234\") = \"4321\"\n     * solve(\"ab\") = \"AB\"\n     * solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        if (s == null || s.isEmpty()) {\n            return s;\n        }\n\n        boolean containsLetters = false;\n        StringBuilder result = new StringBuilder();\n\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                containsLetters = true;\n                result.append(Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c));\n            } else {\n                result.append(c);\n            }\n        }\n\n        return containsLetters ? result.toString() : new StringBuilder(s).reverse().toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.solve(\"1234\"));  // Expected output: \"4321\"\n        System.out.println(solution.solve(\"ab\"));    // Expected output: \"AB\"\n        System.out.println(solution.solve(\"#a@C\"));  // Expected output: \"#A@c\"\n        System.out.println(solution.solve(\"\"));      // Expected output: \"\"\n        System.out.println(solution.solve(null));    // Expected output: null\n        System.out.println(solution.solve(\"1234!@#\")); // Expected output: \"!@#4321\"\n    }\n}\n"}
{"task_id": "Java/162", "generation": "import java.math.BigInteger;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Optional;\n\nclass Solution {\n    /**\n     * Given a string \"text\", return its md5 hash equivalent string with length being 32.\n     * If \"text\" is an empty string, return Optional.empty().\n     *\n     * >>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] messageDigest = md.digest(text.getBytes());\n        BigInteger no = new BigInteger(1, messageDigest);\n        \n        // Convert message digest into hex value\n        String hashtext = no.toString(16);\n        while (hashtext.length() < 32) {\n            hashtext = \"0\" + hashtext;\n        }\n        \n        return Optional.of(hashtext);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"MD5 of 'Hello world': \" + solution.string_to_md5(\"Hello world\").orElse(\"N/A\"));\n        System.out.println(\"MD5 of '': \" + solution.string_to_md5(\"\").orElse(\"N/A\"));\n\n        try {\n            // Additional test case with a different string\n            String result = solution.string_to_md5(\"Another Test\").orElse(\"N/A\");\n            System.out.println(\"MD5 of 'Another Test': \" + result);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n    }\n}\n"}
{"task_id": "Java/163", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given two positive integers a and b, return the even digits between a\n     * and b, in ascending order. Please note that the even digits refer to even numbers less than 10.\n     *\n     * For example:\n     * generate_integers(2, 8) => [2, 4, 6, 8]\n     * generate_integers(8, 2) => [2, 4, 6, 8]\n     * generate_integers(10, 14) => []\n     */\n    public List<Integer> generate_integers(int a, int b) {\n        // Ensure a is less than or equal to b\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = a; i <= b; i++) {\n            // Check each digit of the number\n            while (i > 0) {\n                int digit = i % 10;\n                if (digit % 2 == 0 && digit < 10) {\n                    result.add(digit);\n                }\n                i /= 10;\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.generate_integers(2, 8));   // [2, 4, 6, 8]\n        System.out.println(solution.generate_integers(8, 2));   // [2, 4, 6, 8]\n        System.out.println(solution.generate_integers(10, 14)); // []\n        System.out.println(solution.generate_integers(3, 7));   // [4, 6]\n        System.out.println(solution.generate_integers(9, 15));  // [2, 4, 6, 8]\n    }\n}\n"}
{"task_id": "Java/0", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n     *\n     * @param numbers List of Double values.\n     * @param threshold The threshold value for closeness.\n     * @return true if there exist at least two elements whose difference is less than the threshold; false otherwise.\n     */\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        // Sort the list to make it easier to find close elements\n        Collections.sort(numbers);\n        \n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (numbers.get(i + 1) - numbers.get(i) < threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.has_close_elements(Arrays.asList(1.0, 2.0, 3.0), 0.5)); // Expected: false\n        System.out.println(solution.has_close_elements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)); // Expected: true\n        System.out.println(solution.has_close_elements(Arrays.asList(-1.0, -2.0, -3.0), 1.5)); // Expected: false\n        System.out.println(solution.has_close_elements(Arrays.asList(10.0, 10.1, 10.2, 10.3), 0.05)); // Expected: true\n    }\n}\n"}
{"task_id": "Java/1", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n     * separate those group into separate strings and return the list of those.\n     * Separate groups are balanced (each open brace is properly closed) and not nested within each other\n     * Ignore any spaces in the input string.\n     *\n     * @param paren_string The input string containing multiple groups of nested parentheses.\n     * @return A List of separate strings, each representing a group of balanced parentheses.\n     */\n    public List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        int balance = 0;\n        StringBuilder currentGroup = new StringBuilder();\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == ' ') continue; // Ignore spaces\n\n            if (c == '(') {\n                balance++;\n                currentGroup.append(c);\n            } else if (c == ')') {\n                balance--;\n                currentGroup.append(c);\n\n                if (balance == 0) { // A complete group is found\n                    result.add(currentGroup.toString());\n                    currentGroup = new StringBuilder(); // Reset for the next group\n                }\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Test Case 1: ( ) (( )) (( )( ))\");\n        List<String> test1 = solution.separate_paren_groups(\"( ) (( )) (( )( ))\");\n        for (String group : test1) {\n            System.out.println(group);\n        }\n\n        System.out.println(\"\\nTest Case 2: (()())(())\");\n        List<String> test2 = solution.separate_paren_groups(\"(()())(())\");\n        for (String group : test2) {\n            System.out.println(group);\n        }\n\n        System.out.println(\"\\nTest Case 3: ((()))((()))\");\n        List<String> test3 = solution.separate_paren_groups(\"((()))((()))\");\n        for (String group : test3) {\n            System.out.println(group);\n        }\n    }\n}\n"}
{"task_id": "Java/2", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given a positive floating point number, it can be decomposed into\n     and integer part (largest integer smaller than given number) and decimals\n     (leftover part always smaller than 1).\n\n     Return the decimal part of the number.\n     >>> truncate_number(3.5)\n     0.5\n     */\n    public double truncate_number(double number) {\n        return number - Math.floor(number);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Truncate 3.5: \" + solution.truncate_number(3.5)); // Expected output: 0.5\n        System.out.println(\"Truncate 123.456: \" + solution.truncate_number(123.456)); // Expected output: 0.456\n        System.out.println(\"Truncate -1.234: \" + solution.truncate_number(-1.234)); // Expected output: -0.234 (Note: floor of negative numbers is less than the number itself)\n        System.out.println(\"Truncate 0.999: \" + solution.truncate_number(0.999)); // Expected output: 0.999\n        System.out.println(\"Truncate 10.0: \" + solution.truncate_number(10.0)); // Expected output: 0.0\n    }\n}\n"}
{"task_id": "Java/3", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You're given a list of deposit and withdrawal operations on a bank account that starts with\n     * zero balance. Your task is to detect if at any point the balance of the account falls below zero,\n     * and at that point, the function should return true. Otherwise, it should return false.\n     *\n     * @param operations List of integers representing deposits (positive) and withdrawals (negative).\n     * @return boolean indicating whether the balance ever goes below zero.\n     */\n    public boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (int op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(1, 2, 3);\n        System.out.println(\"Test Case 1: \" + (solution.below_zero(test1) == false)); // Expected: true\n\n        List<Integer> test2 = Arrays.asList(1, 2, -4, 5);\n        System.out.println(\"Test Case 2: \" + (solution.below_zero(test2) == true)); // Expected: true\n\n        List<Integer> test3 = Arrays.asList(-1, 2, -1, 3);\n        System.out.println(\"Test Case 3: \" + (solution.below_zero(test3) == false)); // Expected: false\n\n        List<Integer> test4 = Arrays.asList(5, -6, 7, -8, 9);\n        System.out.println(\"Test Case 4: \" + (solution.below_zero(test4) == true)); // Expected: true\n    }\n}\n"}
{"task_id": "Java/4", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * For a given list of input numbers, calculate Mean Absolute Deviation around the mean of this dataset.\n     * Mean Absolute Deviation is the average absolute difference between each element and a centerpoint (mean in this case):\n     * MAD = average | x - x_mean |\n     *\n     * @param numbers List of Double values\n     * @return Mean Absolute Deviation as a double\n     */\n    public double mean_absolute_deviation(List<Double> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list cannot be null or empty\");\n        }\n\n        // Calculate the mean of the dataset\n        double sum = 0.0;\n        for (Double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n\n        // Calculate the Mean Absolute Deviation\n        double mad = 0.0;\n        for (Double num : numbers) {\n            mad += Math.abs(num - mean);\n        }\n        return mad / numbers.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.mean_absolute_deviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))); // Expected output: 1.0\n        System.out.println(solution.mean_absolute_deviation(Arrays.asList(5.0, 7.0, 9.0, 11.0, 13.0))); // Expected output: 2.8\n        System.out.println(solution.mean_absolute_deviation(Arrays.asList(-1.0, -2.0, -3.0, -4.0))); // Expected output: 1.5\n        System.out.println(solution.mean_absolute_deviation(Arrays.asList(10.0))); // Expected output: 0.0 (single element)\n    }\n}\n"}
{"task_id": "Java/5", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Insert a number 'delimiter' between every two consecutive elements of input list `numbers`\n     *\n     * @param numbers The input list of integers.\n     * @param delimiter The integer to be inserted as a delimiter.\n     * @return A new list with the delimiter interspersed.\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        if (numbers == null || numbers.size() <= 1) {\n            return numbers;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.intersperse(List.of(), 4)); // Expected: []\n        System.out.println(solution.intersperse(Arrays.asList(1, 2, 3), 4)); // Expected: [1, 4, 2, 4, 3]\n        System.out.println(solution.intersperse(Arrays.asList(5, 6, 7, 8), -1)); // Expected: [5, -1, 6, -1, 7, -1, 8]\n    }\n}\n"}
{"task_id": "Java/6", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n     * For each of the group, output the deepest level of nesting of parentheses.\n     * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n     *\n     * >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n     * [2, 3, 1, 3]\n     */\n    public List<Integer> parse_nested_parens(String paren_string) {\n        String[] groups = paren_string.split(\"\\\\s+\");\n        List<Integer> depths = new ArrayList<>();\n        \n        for (String group : groups) {\n            int maxDepth = 0;\n            int currentDepth = 0;\n            \n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentDepth++;\n                    maxDepth = Math.max(maxDepth, currentDepth);\n                } else if (c == ')') {\n                    currentDepth--;\n                }\n            }\n            \n            depths.add(maxDepth);\n        }\n        \n        return depths;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        String test1 = \"(()()) ((())) () ((())()())\";\n        List<Integer> result1 = solution.parse_nested_parens(test1);\n        System.out.println(result1); // Expected output: [2, 3, 1, 3]\n        \n        String test2 = \"(()) (()) (((())))\";\n        List<Integer> result2 = solution.parse_nested_parens(test2);\n        System.out.println(result2); // Expected output: [2, 2, 4]\n        \n        String test3 = \"((())) () (((())))\";\n        List<Integer> result3 = solution.parse_nested_parens(test3);\n        System.out.println(result3); // Expected output: [3, 1, 4]\n    }\n}\n"}
{"task_id": "Java/7", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Filter an input list of strings only for ones that contain given substring\n     *\n     * @param strings The input list of strings\n     * @param substring The substring to filter by\n     * @return A list of strings containing the specified substring\n     */\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> filteredList = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredList.add(str);\n            }\n        }\n        return filteredList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Test Case 1: Empty List\");\n        System.out.println(solution.filter_by_substring(List.of(), \"a\")); // Expected output: []\n\n        System.out.println(\"\\nTest Case 2: Normal List with 'a'\");\n        System.out.println(solution.filter_by_substring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\"));\n        // Expected output: [abc, bacd, array]\n\n        System.out.println(\"\\nTest Case 3: List without the substring\");\n        System.out.println(solution.filter_by_substring(Arrays.asList(\"hello\", \"world\", \"java\"), \"python\"));\n        // Expected output: []\n\n        System.out.println(\"\\nTest Case 4: List with multiple occurrences of the substring\");\n        System.out.println(solution.filter_by_substring(Arrays.asList(\"aaa\", \"baa\", \"aab\", \"bba\"), \"aa\"));\n        // Expected output: [aaa, aab]\n    }\n}\n"}
{"task_id": "Java/8", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n     * Empty sum should be equal to 0 and empty product should be equal to 1.\n     *\n     * @param numbers List of integers\n     * @return A List containing the sum and product of the integers\n     */\n    public List<Integer> sum_product(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n\n        return Arrays.asList(sum, product);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Test Case 1: Empty List\");\n        System.out.println(solution.sum_product(new ArrayList<>())); // Expected output: [0, 1]\n\n        System.out.println(\"\\nTest Case 2: List with elements [1, 2, 3, 4]\");\n        System.out.println(solution.sum_product(Arrays.asList(1, 2, 3, 4))); // Expected output: [10, 24]\n\n        System.out.println(\"\\nTest Case 3: List with a single element [5]\");\n        System.out.println(solution.sum_product(Arrays.asList(5))); // Expected output: [5, 5]\n\n        System.out.println(\"\\nTest Case 4: List with negative numbers [-1, -2, -3]\");\n        System.out.println(solution.sum_product(Arrays.asList(-1, -2, -3))); // Expected output: [-6, 6]\n    }\n}\n"}
{"task_id": "Java/9", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence.\n     *\n     * @param numbers The input list of integers.\n     * @return A list containing the rolling maximum elements.\n     */\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        List<Integer> result = new ArrayList<>();\n        int maxSoFar = Integer.MIN_VALUE;\n\n        for (int num : numbers) {\n            if (num > maxSoFar) {\n                maxSoFar = num;\n            }\n            result.add(maxSoFar);\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.rolling_max(Arrays.asList(1, 2, 3, 2, 3, 4, 2))); // [1, 2, 3, 3, 3, 4, 4]\n        System.out.println(solution.rolling_max(Arrays.asList()));                   // []\n        System.out.println(solution.rolling_max(Arrays.asList(5)));                  // [5]\n        System.out.println(solution.rolling_max(Arrays.asList(-1, -2, -3, -2, -3, -4, -2))); // [-1, -1, -1, -1, -1, -1, -1]\n    }\n}\n"}
{"task_id": "Java/10", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    /**\n     Find the shortest palindrome that begins with a supplied string.\n     Algorithm idea is simple:\n     - Find the longest postfix of supplied string that is a palindrome.\n     - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n     */\n    public String make_palindrome(String string) {\n        if (string == null || string.isEmpty()) {\n            return \"\";\n        }\n\n        int n = string.length();\n        for (int i = 0; i < n / 2; i++) {\n            if (string.charAt(i) != string.charAt(n - 1 - i)) {\n                break;\n            }\n        }\n\n        // If the entire string is a palindrome, no need to append anything\n        if (i == n / 2) {\n            return string;\n        }\n\n        // Find the longest palindromic suffix\n        String suffix = string.substring(i);\n        int start = i - 1;\n\n        while (!isPalindrome(string.substring(start))) {\n            start--;\n        }\n\n        // The prefix to be reversed and appended is from the beginning of the string up to (start + 1)\n        String prefix = string.substring(0, start + 1);\n        StringBuilder sb = new StringBuilder(prefix).reverse();\n\n        return string + sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.make_palindrome(\"\")); // \"\"\n        System.out.println(solution.make_palindrome(\"cat\")); // \"catac\"\n        System.out.println(solution.make_palindrome(\"cata\")); // \"catac\"\n        System.out.println(solution.make_palindrome(\"race\")); // \"racecar\"\n        System.out.println(solution.make_palindrome(\"madam\")); // \"madam\" (already a palindrome)\n    }\n}\n"}
{"task_id": "Java/11", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Input are two strings a and b consisting only of 1s and 0s.\n     * Perform binary XOR on these inputs and return result also as a string.\n     *\n     * @param a the first binary string\n     * @param b the second binary string\n     * @return the result of binary XOR operation as a string\n     */\n    public String string_xor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        int maxLength = Math.max(a.length(), b.length());\n        \n        // Pad both strings to have equal length\n        a = padStringToLength(a, maxLength);\n        b = padStringToLength(b, maxLength);\n\n        for (int i = 0; i < maxLength; i++) {\n            char bitA = a.charAt(i);\n            char bitB = b.charAt(i);\n            \n            // Perform XOR operation and append to result\n            if (bitA == bitB) {\n                result.append('0');\n            } else {\n                result.append('1');\n            }\n        }\n\n        return result.toString();\n    }\n\n    /**\n     * Pads the given string with '0's at the beginning to make it of specified length.\n     *\n     * @param str the input string\n     * @param length the desired length\n     * @return the padded string\n     */\n    private String padStringToLength(String str, int length) {\n        StringBuilder sb = new StringBuilder(str);\n        while (sb.length() < length) {\n            sb.insert(0, '0');\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.string_xor(\"010\", \"110\")); // Expected output: \"100\"\n        System.out.println(solution.string_xor(\"10101\", \"00111\")); // Expected output: \"10010\"\n        System.out.println(solution.string_xor(\"1111\", \"0000\")); // Expected output: \"1111\"\n        System.out.println(solution.string_xor(\"0000\", \"0000\")); // Expected output: \"0000\"\n        System.out.println(solution.string_xor(\"11111111\", \"00000000\")); // Expected output: \"11111111\"\n    }\n}\n"}
{"task_id": "Java/12", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     Out of list of strings, return the longest one. Return the first one in case of multiple\n     strings of the same length. Return Optional.empty() in case the input list is empty.\n     >>> longest(List.of())\n     Optional.empty\n     >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n     Optional[a]\n     >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n     Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longestString = strings.get(0);\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n        \n        return Optional.of(longestString);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Test Case 1: Empty List\");\n        System.out.println(solution.longest(List.of())); // Expected: Optional.empty\n\n        System.out.println(\"\\nTest Case 2: Single Element\");\n        System.out.println(solution.longest(Arrays.asList(\"a\"))); // Expected: Optional[a]\n\n        System.out.println(\"\\nTest Case 3: Multiple Elements with Different Lengths\");\n        System.out.println(solution.longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))); // Expected: Optional[ccc]\n\n        System.out.println(\"\\nTest Case 4: Multiple Elements with Same Length\");\n        System.out.println(solution.longest(Arrays.asList(\"aa\", \"bbb\", \"cccc\"))); // Expected: Optional[cccc]\n    }\n}\n"}
{"task_id": "Java/13", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return a greatest common divisor of two integers a and b\n     *\n     * @param a first integer\n     * @param b second integer\n     * @return the greatest common divisor of a and b\n     */\n    public int greatest_common_divisor(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n\n    // Test cases to verify the correctness of the method\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: GCD of 3 and 5 is 1\n        System.out.println(\"GCD of 3 and 5: \" + solution.greatest_common_divisor(3, 5)); // Expected output: 1\n\n        // Test case 2: GCD of 25 and 15 is 5\n        System.out.println(\"GCD of 25 and 15: \" + solution.greatest_common_divisor(25, 15)); // Expected output: 5\n\n        // Test case 3: GCD of 100 and 80 is 20\n        System.out.println(\"GCD of 100 and 80: \" + solution.greatest_common_divisor(100, 80)); // Expected output: 20\n\n        // Test case 4: GCD of 7 and 13 (both prime) is 1\n        System.out.println(\"GCD of 7 and 13: \" + solution.greatest_common_divisor(7, 13)); // Expected output: 1\n\n        // Test case 5: GCD of 0 and any number is that number (since gcd(0, b) = b)\n        System.out.println(\"GCD of 0 and 24: \" + solution.greatest_common_divisor(0, 24)); // Expected output: 24\n    }\n}\n"}
{"task_id": "Java/14", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Return list of all prefixes from shortest to longest of the input string\n     *\n     * @param string The input string\n     * @return A List containing all prefixes of the input string, ordered from shortest to longest\n     */\n    public List<String> all_prefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        if (string == null || string.isEmpty()) {\n            return prefixes;\n        }\n        \n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        \n        return prefixes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Testing all_prefixes(\\\"abc\\\"): \" + solution.all_prefixes(\"abc\")); // [\"a\", \"ab\", \"abc\"]\n        System.out.println(\"Testing all_prefixes(\\\"\\\"): \" + solution.all_prefixes(\"\")); // []\n        System.out.println(\"Testing all_prefixes(null): \" + solution.all_prefixes(null)); // []\n\n        // Additional test cases\n        System.out.println(\"Testing all_prefixes(\\\"hello\\\"): \" + solution.all_prefixes(\"hello\")); // [\"h\", \"he\", \"hel\", \"hell\", \"hello\"]\n        System.out.println(\"Testing all_prefixes(\\\"java\\\"): \" + solution.all_prefixes(\"java\")); // [\"j\", \"ja\", \"jav\", \"java\"]\n    }\n}\n"}
{"task_id": "Java/15", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n     *\n     * @param n The upper limit of the sequence (inclusive).\n     * @return A string with space-separated numbers from 0 to n.\n     */\n    public String string_sequence(int n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            if (i > 0) {\n                sb.append(\" \");\n            }\n            sb.append(i);\n        }\n        return sb.toString();\n    }\n\n    // Test cases to verify the correctness of the string_sequence method\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: n = 0\n        System.out.println(solution.string_sequence(0).equals(\"0\") ? \"Test 1 Passed\" : \"Test 1 Failed\");\n\n        // Test case 2: n = 5\n        System.out.println(solution.string_sequence(5).equals(\"0 1 2 3 4 5\") ? \"Test 2 Passed\" : \"Test 2 Failed\");\n\n        // Additional test cases\n        System.out.println(solution.string_sequence(10).equals(\"0 1 2 3 4 5 6 7 8 9 10\") ? \"Test 3 Passed\" : \"Test 3 Failed\");\n        System.out.println(solution.string_sequence(-1).equals(\"\") ? \"Test 4 Passed\" : \"Test 4 Failed\"); // Edge case: n < 0\n    }\n}\n"}
{"task_id": "Java/16", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a string, find out how many distinct characters (regardless of case) does it consist of.\n     *\n     * @param string The input string to analyze.\n     * @return The number of distinct characters in the string, ignoring case.\n     */\n    public int count_distinct_characters(String string) {\n        // Convert the string to lowercase to ignore case\n        String lowerCaseString = string.toLowerCase();\n        \n        // Use a HashSet to store unique characters\n        Set<Character> uniqueChars = new HashSet<>();\n        \n        // Iterate through each character in the string and add it to the set\n        for (char c : lowerCaseString.toCharArray()) {\n            uniqueChars.add(c);\n        }\n        \n        // The size of the set is the number of distinct characters\n        return uniqueChars.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.count_distinct_characters(\"xyzXYZ\")); // Expected output: 3\n        System.out.println(solution.count_distinct_characters(\"Jerry\"));   // Expected output: 4\n        System.out.println(solution.count_distinct_characters(\"HelloWorld\")); // Expected output: 7\n        System.out.println(solution.count_distinct_characters(\"AAAaaa\"));    // Expected output: 1\n        System.out.println(solution.count_distinct_characters(\"\"));          // Expected output: 0\n        System.out.println(solution.count_distinct_characters(\"aAaAaA\"));    // Expected output: 1\n    }\n}\n"}
{"task_id": "Java/17", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Input to this function is a string representing musical notes in a special ASCII format.\n     * Your task is to parse this string and return list of integers corresponding to how many beats does each note last.\n     *\n     * Here is a legend:\n     * \"o\" - whole note, lasts four beats\n     * \"o|\" - half note, lasts two beats\n     * \".|\" - quater note, lasts one beat\n     */\n    public List<Integer> parse_music(String string) {\n        List<Integer> beats = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        \n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    beats.add(4);\n                    break;\n                case \"o|\":\n                    beats.add(2);\n                    break;\n                case \".|\":\n                    beats.add(1);\n                    break;\n                default:\n                    // Handle invalid input if necessary\n                    throw new IllegalArgumentException(\"Invalid note: \" + note);\n            }\n        }\n\n        return beats;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.parse_music(\"o o| .| o| o| .| .| .| .| o o\")); // Expected: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n        System.out.println(solution.parse_music(\"o| .| .| o o|\"));                // Expected: [2, 1, 1, 4, 2]\n        System.out.println(solution.parse_music(\".| .| .| .|\"));                  // Expected: [1, 1, 1, 1]\n        System.out.println(solution.parse_music(\"o o|\"));                          // Expected: [4, 2]\n    }\n}\n"}
{"task_id": "Java/18", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Find how many times a given substring can be found in the original string. Count overlapping cases.\n     *\n     * @param string The original string.\n     * @param substring The substring to find.\n     * @return The number of times the substring appears in the original string, including overlaps.\n     */\n    public int how_many_times(String string, String substring) {\n        if (substring.isEmpty()) return 0;\n        \n        int count = 0;\n        int index = 0;\n        \n        while ((index = string.indexOf(substring, index)) != -1) {\n            count++;\n            index++; // Move to the next character after the found substring to allow for overlapping matches\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.how_many_times(\"\", \"a\")); // Expected output: 0\n        System.out.println(solution.how_many_times(\"aaa\", \"a\")); // Expected output: 3\n        System.out.println(solution.how_many_times(\"aaaa\", \"aa\")); // Expected output: 3\n        System.out.println(solution.how_many_times(\"abababa\", \"aba\")); // Expected output: 3\n        System.out.println(solution.how_many_times(\"testtest\", \"test\")); // Expected output: 2\n    }\n}\n"}
{"task_id": "Java/19", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Input is a space-delimited string of numberals from 'zero' to 'nine'.\n     * Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n     * Return the string with numbers sorted from smallest to largest\n     *\n     * @param numbers a space-delimited string of numberals\n     * @return the sorted string\n     */\n    public String sort_numbers(String numbers) {\n        Map<String, Integer> numeralMap = new HashMap<>();\n        numeralMap.put(\"zero\", 0);\n        numeralMap.put(\"one\", 1);\n        numeralMap.put(\"two\", 2);\n        numeralMap.put(\"three\", 3);\n        numeralMap.put(\"four\", 4);\n        numeralMap.put(\"five\", 5);\n        numeralMap.put(\"six\", 6);\n        numeralMap.put(\"seven\", 7);\n        numeralMap.put(\"eight\", 8);\n        numeralMap.put(\"nine\", 9);\n\n        String[] words = numbers.split(\" \");\n        Integer[] nums = new Integer[words.length];\n\n        for (int i = 0; i < words.length; i++) {\n            nums[i] = numeralMap.get(words[i]);\n        }\n\n        Arrays.sort(nums);\n\n        StringBuilder sortedNumbers = new StringBuilder();\n        for (Integer num : nums) {\n            sortedNumbers.append(numeralMap.inverse().get(num)).append(\" \");\n        }\n\n        return sortedNumbers.toString().trim();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sort_numbers(\"three one five\")); // Expected: \"one three five\"\n        System.out.println(solution.sort_numbers(\"nine eight seven\")); // Expected: \"seven eight nine\"\n        System.out.println(solution.sort_numbers(\"four six two\")); // Expected: \"two four six\"\n        System.out.println(solution.sort_numbers(\"zero zero\")); // Expected: \"zero zero\"\n        System.out.println(solution.sort_numbers(\"five three one\")); // Expected: \"one three five\"\n    }\n}\n"}
{"task_id": "Java/20", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n     */\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements.\");\n        }\n\n        double minDiff = Double.MAX_VALUE;\n        List<Double> closestElements = new ArrayList<>();\n\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (diff < minDiff) {\n                    minDiff = diff;\n                    closestElements.clear();\n                    closestElements.add(Math.min(numbers.get(i), numbers.get(j)));\n                    closestElements.add(Math.max(numbers.get(i), numbers.get(j)));\n                }\n            }\n        }\n\n        return closestElements;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))); // [2.0, 2.2]\n        System.out.println(solution.find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)));  // [2.0, 2.0]\n        System.out.println(solution.find_closest_elements(Arrays.asList(-1.0, -2.0, -3.0, -4.0, -5.0, -2.2))); // [-2.2, -2.0]\n        System.out.println(solution.find_closest_elements(Arrays.asList(10.5, 10.6, 10.7, 10.8, 10.9))); // [10.5, 10.6]\n    }\n}\n"}
{"task_id": "Java/21", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given list of numbers (of at least two elements), apply a linear transform to that list,\n     * such that the smallest number will become 0 and the largest will become 1.\n     *\n     * @param numbers List of Double values\n     * @return A new list where each element is rescaled to the range [0, 1]\n     */\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements\");\n        }\n\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n\n        List<Double> result = new ArrayList<>();\n        for (Double num : numbers) {\n            double scaledValue = (num - min) / (max - min);\n            result.add(scaledValue);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Double> test1 = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        System.out.println(\"Test Case 1: \" + solution.rescale_to_unit(test1));\n        \n        List<Double> test2 = Arrays.asList(-1.0, -2.0, -3.0, -4.0, -5.0);\n        System.out.println(\"Test Case 2: \" + solution.rescale_to_unit(test2));\n        \n        List<Double> test3 = Arrays.asList(10.0, 20.0, 30.0, 40.0, 50.0);\n        System.out.println(\"Test Case 3: \" + solution.rescale_to_unit(test3));\n    }\n}\n"}
{"task_id": "Java/22", "generation": "import java.util.*;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\nclass Solution {\n\n    /**\n     * Filter given list of any values only for integers\n     */\n    public List<Integer> filter_integers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n\n    @Test\n    public void testFilterIntegers() {\n        // Test case 1: Mixed types with a string and float\n        List<Object> mixedList = Arrays.asList('a', 3.14, 5);\n        List<Integer> expected1 = new ArrayList<>(Arrays.asList(5));\n        assertEquals(expected1, filter_integers(mixedList));\n\n        // Test case 2: List of integers, strings, map, and list\n        List<Object> mixedList2 = Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of());\n        List<Integer> expected2 = new ArrayList<>(Arrays.asList(1, 2, 3));\n        assertEquals(expected2, filter_integers(mixedList2));\n\n        // Test case 3: Empty list\n        List<Object> emptyList = new ArrayList<>();\n        List<Integer> expected3 = new ArrayList<>();\n        assertEquals(expected3, filter_integers(emptyList));\n\n        // Test case 4: Only integers in the list\n        List<Object> integerOnlyList = Arrays.asList(10, 20, 30);\n        List<Integer> expected4 = new ArrayList<>(Arrays.asList(10, 20, 30));\n        assertEquals(expected4, filter_integers(integerOnlyList));\n\n        // Test case 5: Mixed types with null\n        List<Object> mixedWithNull = Arrays.asList(null, \"hello\", 42);\n        List<Integer> expected5 = new ArrayList<>(Arrays.asList(42));\n        assertEquals(expected5, filter_integers(mixedWithNull));\n    }\n}\n"}
{"task_id": "Java/23", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Return length of given string\n     * >>> strlen(\"\")\n     * 0\n     * >>> strlen(\"abc\")\n     * 3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n\n    public static void main(String[] args) {\n        // Create an instance of Solution\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Test Case 1: Empty String\");\n        System.out.println(\"Expected Output: 0\");\n        System.out.println(\"Actual Output: \" + solution.strlen(\"\"));\n        System.out.println();\n\n        System.out.println(\"Test Case 2: Single Character String\");\n        System.out.println(\"Expected Output: 1\");\n        System.out.println(\"Actual Output: \" + solution.strlen(\"a\"));\n        System.out.println();\n\n        System.out.println(\"Test Case 3: Multiple Characters String\");\n        System.out.println(\"Expected Output: 5\");\n        System.out.println(\"Actual Output: \" + solution.strlen(\"hello\"));\n        System.out.println();\n\n        System.out.println(\"Test Case 4: Longer String with Spaces and Special Characters\");\n        System.out.println(\"Expected Output: 12\");\n        System.out.println(\"Actual Output: \" + solution.strlen(\"Hello, world!\"));\n    }\n}\n"}
{"task_id": "Java/24", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * For a given number n, find the largest number that divides n evenly, smaller than n.\n     *\n     * @param n The input number.\n     * @return The largest divisor of n that is smaller than n.\n     */\n    public int largest_divisor(int n) {\n        for (int i = n / 2; i >= 1; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        // If no divisor found, which should not happen for positive integers,\n        // we return -1 as an error indicator.\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.largest_divisor(15));  // Expected output: 5\n        System.out.println(solution.largest_divisor(28));  // Expected output: 14\n        System.out.println(solution.largest_divisor(37));  // Expected output: -1 (since 37 is prime)\n        System.out.println(solution.largest_divisor(100)); // Expected output: 50\n    }\n}\n"}
{"task_id": "Java/25", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Return list of prime factors of given integer in the order from smallest to largest.\n     * Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n     * Input number should be equal to the product of all factors\n     *\n     * @param n the integer to factorize\n     * @return a list of prime factors\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int factor = 2; factor <= n; factor++) {\n            while (n % factor == 0) {\n                factors.add(factor);\n                n /= factor;\n            }\n        }\n        return factors;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Factorize(8): \" + solution.factorize(8));   // Expected: [2, 2, 2]\n        System.out.println(\"Factorize(25): \" + solution.factorize(25));  // Expected: [5, 5]\n        System.out.println(\"Factorize(70): \" + solution.factorize(70));  // Expected: [2, 5, 7]\n        System.out.println(\"Factorize(49): \" + solution.factorize(49));  // Expected: [7, 7]\n        System.out.println(\"Factorize(1): \" + solution.factorize(1));    // Expected: []\n        System.out.println(\"Factorize(2): \" + solution.factorize(2));    // Expected: [2]\n    }\n}\n"}
{"task_id": "Java/26", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * From a list of integers, remove all elements that occur more than once.\n     * Keep order of elements left the same as in the input.\n     *\n     * @param numbers The input list of integers.\n     * @return A new list with duplicates removed and original order preserved.\n     */\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        // Use a stream to filter out elements that occur more than once\n        return numbers.stream()\n                      .distinct()\n                      .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.remove_duplicates(Arrays.asList(1, 2, 3, 2, 4))); // [1, 3, 4]\n        System.out.println(solution.remove_duplicates(Arrays.asList(5, 6, 7, 8, 9))); // [5, 6, 7, 8, 9]\n        System.out.println(solution.remove_duplicates(Arrays.asList(10, 20, 20, 30, 40, 40, 50))); // [10, 30, 50]\n        System.out.println(solution.remove_duplicates(Arrays.asList())); // []\n        System.out.println(solution.remove_duplicates(Arrays.asList(1, 1, 1, 1, 1))); // []\n    }\n}\n"}
{"task_id": "Java/27", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n     *\n     * @param string The input string to be flipped.\n     * @return A new string with the case of each character flipped.\n     */\n    public String flip_case(String string) {\n        StringBuilder result = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                result.append(Character.toLowerCase(c));\n            } else {\n                result.append(Character.toUpperCase(c));\n            }\n        }\n        return result.toString();\n    }\n\n    // Test method to verify the correctness of flip_case\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.flip_case(\"Hello\"));  // Expected: \"hELLO\"\n        System.out.println(solution.flip_case(\"WORLD\"));  // Expected: \"world\"\n        System.out.println(solution.flip_case(\"Java\"));   // Expected: \"jAVA\"\n        System.out.println(solution.flip_case(\"123abcABC\"));  // Expected: \"123ABCabc\"\n        System.out.println(solution.flip_case(\"\"));       // Expected: \"\"\n    }\n}\n"}
{"task_id": "Java/28", "generation": "import java.util.Arrays;\nimport java.util.List;\n\nclass Solution {\n    /**\n     * Concatenate list of strings into a single string\n     *\n     * @param strings List of strings to concatenate\n     * @return A single concatenated string\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String str : strings) {\n            sb.append(str);\n        }\n        return sb.toString();\n    }\n}\n\nclass TestSolution {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: Empty list\n        List<String> emptyList = Arrays.asList();\n        System.out.println(\"Expected: '', Actual: '\" + solution.concatenate(emptyList) + \"'\");\n\n        // Test case 2: Single element list\n        List<String> singleElementList = Arrays.asList(\"a\");\n        System.out.println(\"Expected: 'a', Actual: '\" + solution.concatenate(singleElementList) + \"'\");\n\n        // Test case 3: Multiple elements list\n        List<String> multipleElementsList = Arrays.asList(\"a\", \"b\", \"c\");\n        System.out.println(\"Expected: 'abc', Actual: '\" + solution.concatenate(multipleElementsList) + \"'\");\n    }\n}\n"}
{"task_id": "Java/29", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Filter an input list of strings only for ones that start with a given prefix.\n     *\n     * @param strings The input list of strings.\n     * @param prefix  The prefix to filter the strings by.\n     * @return A list of strings that start with the given prefix.\n     */\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.filter_by_prefix(new ArrayList<>(), \"a\"));  // []\n        System.out.println(solution.filter_by_prefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\"));  // [abc, array]\n        System.out.println(solution.filter_by_prefix(Arrays.asList(\"apple\", \"banana\", \"apricot\", \"cherry\"), \"a\"));  // [apple, apricot]\n    }\n}\n"}
{"task_id": "Java/30", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return only positive numbers in the list.\n     */\n    public List<Integer> get_positive(List<Integer> l) {\n        return l.stream()\n                .filter(num -> num > 0)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Test Case 1: \" + testGetPositive(Arrays.asList(-1, 2, -4, 5, 6), Arrays.asList(2, 5, 6)));\n        System.out.println(\"Test Case 2: \" + testGetPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10), Arrays.asList(5, 3, 2, 3, 9, 123, 1)));\n    }\n\n    private static boolean testGetPositive(List<Integer> input, List<Integer> expected) {\n        Solution solution = new Solution();\n        List<Integer> result = solution.get_positive(input);\n        return result.equals(expected);\n    }\n}\n"}
{"task_id": "Java/31", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Return true if a given number is prime, and false otherwise.\n     */\n    public boolean is_prime(int n) {\n        // Handle edge cases for 0, 1, and negative numbers\n        if (n <= 1) {\n            return false;\n        }\n        \n        // Check divisibility from 2 to the square root of n\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(\"is_prime(6): \" + !solution.is_prime(6));   // Expected: false\n        System.out.println(\"is_prime(101): \" + solution.is_prime(101)); // Expected: true\n        System.out.println(\"is_prime(11): \" + solution.is_prime(11));   // Expected: true\n        System.out.println(\"is_prime(13441): \" + !solution.is_prime(13441)); // Expected: false (13441 is not prime)\n        System.out.println(\"is_prime(61): \" + solution.is_prime(61));   // Expected: true\n        System.out.println(\"is_prime(4): \" + !solution.is_prime(4));    // Expected: false\n        System.out.println(\"is_prime(1): \" + !solution.is_prime(1));    // Expected: false\n    }\n}\n"}
{"task_id": "Java/32", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     Evaluates polynomial with coefficients xs at point x.\n     return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n      */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n\n    /**\n     xs are coefficients of a polynomial.\n     find_zero finds x such that poly(x) = 0.\n     find_zero returns only one zero point, even if there are many.\n     Moreover, find_zero only takes list xs having an even number of coefficients\n     and the largest non-zero coefficient as it guarantees a solution.\n     >>> find_zero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n     -0.5\n     >>> find_zero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n     1.0\n      */\n    public double find_zero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"The list of coefficients must have an even number of elements.\");\n        }\n        \n        // Implementing a simple bisection method to find the root.\n        double lowerBound = -100;\n        double upperBound = 100;\n        double epsilon = 1e-7;\n\n        while (upperBound - lowerBound > epsilon) {\n            double midPoint = (lowerBound + upperBound) / 2.0;\n            if (poly(xs, midPoint) == 0) {\n                return midPoint; // Found the exact root\n            } else if (poly(xs, lowerBound) * poly(xs, midPoint) < 0) {\n                upperBound = midPoint;\n            } else {\n                lowerBound = midPoint;\n            }\n        }\n\n        return (lowerBound + upperBound) / 2.0; // Return the approximate root\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases for poly method\n        List<Double> coefficients1 = Arrays.asList(1.0, 2.0);\n        double x1 = -0.5;\n        System.out.println(\"poly(\" + coefficients1 + \", \" + x1 + \") = \" + solution.poly(coefficients1, x1));\n\n        // Test cases for find_zero method\n        List<Double> coefficients2 = Arrays.asList(-6.0, 11.0, -6.0, 1.0);\n        System.out.println(\"find_zero(\" + coefficients2 + \") = \" + solution.find_zero(coefficients2));\n    }\n}\n"}
{"task_id": "Java/33", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     This function takes a list l and returns a list l' such that\n     l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n     to the values of the corresponding indicies of l, but sorted in ascending order.\n     >>> sort_third(Arrays.asList(1, 2, 3))\n     [1, 2, 3]\n     >>> sort_third(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n     [2, 6, 3, 4, 8, 9, 5]\n      */\n    public List<Integer> sort_third(List<Integer> l) {\n        if (l == null || l.size() < 3) {\n            return new ArrayList<>(l);\n        }\n\n        // Extract elements at indices divisible by three\n        List<Integer> thirdIndices = new ArrayList<>();\n        for (int i = 2; i < l.size(); i += 3) {\n            thirdIndices.add(l.get(i));\n        }\n\n        // Sort the extracted elements\n        Collections.sort(thirdIndices);\n\n        // Replace elements at indices divisible by three with sorted values\n        List<Integer> result = new ArrayList<>(l);\n        for (int i = 0, j = 0; i < l.size(); i += 3, j++) {\n            if (i + 1 == l.size()) {\n                break;\n            }\n            result.set(i + 1, thirdIndices.get(j));\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sort_third(Arrays.asList(1, 2, 3))); // [1, 2, 3]\n        System.out.println(solution.sort_third(Arrays.asList(5, 6, 3, 4, 8, 9, 2))); // [2, 6, 3, 4, 8, 9, 5]\n        System.out.println(solution.sort_third(Arrays.asList(10, 11, 12, 13, 14, 15, 16, 17, 18))); // [10, 12, 11, 14, 15, 13, 16, 17, 18]\n        System.out.println(solution.sort_third(Arrays.asList())); // []\n        System.out.println(solution.sort_third(Arrays.asList(1))); // [1]\n    }\n}\n"}
{"task_id": "Java/34", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return sorted unique elements in a list\n     *\n     * @param l input list of integers\n     * @return a List containing sorted unique elements from the input list\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> set = new TreeSet<>(l);\n        return new ArrayList<>(set);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))); // [0, 2, 3, 5, 9, 123]\n        System.out.println(solution.unique(Arrays.asList())); // []\n        System.out.println(solution.unique(Arrays.asList(1, 2, 3))); // [1, 2, 3]\n        System.out.println(solution.unique(Arrays.asList(-1, -2, -3, -4, -5))); // [-5, -4, -3, -2, -1]\n        System.out.println(solution.unique(Arrays.asList(7, 8, 9, 7, 8, 9, 10))); // [7, 8, 9, 10]\n    }\n}\n"}
{"task_id": "Java/35", "generation": "import java.util.Arrays;\nimport java.util.List;\n\nclass Solution {\n\n    /**\n     * Return maximum element in the list.\n     */\n    public int max_element(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be null or empty\");\n        }\n        \n        return l.stream().max(Integer::compare).get();\n    }\n\n    // Test cases to verify the correctness of the function\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> list1 = Arrays.asList(1, 2, 3);\n        System.out.println(\"Max element in \" + list1 + \": \" + solution.max_element(list1)); // Expected: 3\n\n        // Test case 2\n        List<Integer> list2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n        System.out.println(\"Max element in \" + list2 + \": \" + solution.max_element(list2)); // Expected: 123\n\n        // Test case 3\n        List<Integer> list3 = Arrays.asList(-1, -2, -3, -4);\n        System.out.println(\"Max element in \" + list3 + \": \" + solution.max_element(list3)); // Expected: -1\n\n        // Test case 4\n        List<Integer> list4 = Arrays.asList(0);\n        System.out.println(\"Max element in \" + list4 + \": \" + solution.max_element(list4)); // Expected: 0\n\n        // Test case 5 (edge case)\n        List<Integer> list5 = Arrays.asList();\n        try {\n            System.out.println(\"Max element in empty list: \" + solution.max_element(list5));\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage()); // Expected: List cannot be null or empty\n        }\n    }\n}\n"}
{"task_id": "Java/36", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n\n    /**\n     * Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n     */\n    public int fizz_buzz(int n) {\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String numStr = Integer.toString(i);\n                for (char c : numStr.toCharArray()) {\n                    if (c == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"fizz_buzz(50): \" + solution.fizz_buzz(50)); // Expected: 0\n        System.out.println(\"fizz_buzz(78): \" + solution.fizz_buzz(78)); // Expected: 2\n        System.out.println(\"fizz_buzz(79): \" + solution.fizz_buzz(79)); // Expected: 3\n        System.out.println(\"fizz_buzz(100): \" + solution.fizz_buzz(100)); // Expected: 4 (77, 781, 782, 783)\n        System.out.println(\"fizz_buzz(150): \" + solution.fizz_buzz(150)); // Expected: 6\n    }\n}\n"}
{"task_id": "Java/37", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * This function takes a list l and returns a list l' such that\n     * l' is identical to l in the odd indicies, while its values at the even indicies are equal\n     * to the values of the even indicies of l, but sorted.\n     */\n    public List<Integer> sort_even(List<Integer> l) {\n        List<Integer> result = new ArrayList<>(l);\n        List<Integer> evenIndicesValues = new ArrayList<>();\n        \n        // Extract values at even indices\n        for (int i = 0; i < result.size(); i += 2) {\n            evenIndicesValues.add(result.get(i));\n        }\n        \n        // Sort the extracted values\n        Collections.sort(evenIndicesValues);\n        \n        // Place sorted values back into their original positions\n        int evenIndex = 0;\n        for (int i = 0; i < result.size(); i += 2) {\n            result.set(i, evenIndicesValues.get(evenIndex++));\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.sort_even(Arrays.asList(1, 2, 3))); // Expected: [1, 2, 3]\n        System.out.println(solution.sort_even(Arrays.asList(5, 6, 3, 4))); // Expected: [3, 6, 5, 4]\n        System.out.println(solution.sort_even(Arrays.asList(9, 8, 7, 6, 5, 4, 3, 2, 1))); // Expected: [3, 8, 7, 6, 5, 4, 9, 2, 1]\n        System.out.println(solution.sort_even(Arrays.asList())); // Expected: []\n    }\n}\n"}
{"task_id": "Java/38", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n     * takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decode_cyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse the cycling in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Original: \" + \"hello\");\n        System.out.println(\"Encoded:  \" + solution.encodeCyclic(\"hello\"));\n        System.out.println(\"Decoded:  \" + solution.decode_cyclic(solution.encodeCyclic(\"hello\")));\n\n        System.out.println(\"Original: \" + \"world\");\n        System.out.println(\"Encoded:  \" + solution.encodeCyclic(\"world\"));\n        System.out.println(\"Decoded:  \" + solution.decode_cyclic(solution.encodeCyclic(\"world\")));\n\n        System.out.println(\"Original: \" + \"java\");\n        System.out.println(\"Encoded:  \" + solution.encodeCyclic(\"java\"));\n        System.out.println(\"Decoded:  \" + solution.decode_cyclic(solution.encodeCyclic(\"java\")));\n    }\n}\n"}
{"task_id": "Java/39", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n     */\n    public int prime_fib(int n) {\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; primes.size() < n; ) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n            i++;\n        }\n        \n        return findFibonacciPrime(primes, n);\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    private int findFibonacciPrime(List<Integer> primes, int n) {\n        List<Integer> fibonacciPrimes = new ArrayList<>();\n        int a = 0, b = 1;\n        while (fibonacciPrimes.size() < n) {\n            int nextFib = a + b;\n            a = b;\n            b = nextFib;\n            if (primes.contains(nextFib)) {\n                fibonacciPrimes.add(nextFib);\n            }\n        }\n        return fibonacciPrimes.get(n - 1);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.prime_fib(1)); // Expected: 2\n        System.out.println(solution.prime_fib(2)); // Expected: 3\n        System.out.println(solution.prime_fib(3)); // Expected: 5\n        System.out.println(solution.prime_fib(4)); // Expected: 13\n        System.out.println(solution.prime_fib(5)); // Expected: 89\n    }\n}\n"}
{"task_id": "Java/40", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * triples_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are three distinct elements in the list that\n     * sum to zero, and False otherwise.\n     */\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        // Sort the list to make it easier to find triplets that sum to zero\n        Collections.sort(l);\n        \n        for (int i = 0; i < l.size() - 2; i++) {\n            int left = i + 1;\n            int right = l.size() - 1;\n            \n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                \n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1, 3, -2, 1))); // true\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(2, 4, -5, 3, 9, 7))); // true\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1))); // false\n    }\n}\n"}
{"task_id": "Java/41", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Imagine a road that's a perfectly straight infinitely long line.\n     * n cars are driving left to right; simultaneously, a different set of n cars\n     * are driving right to left. The two sets of cars start out being very far from each other.\n     * All cars move in the same speed. Two cars are said to collide when a car that's moving left to right hits a car that's moving right to left.\n     * However, the cars are infinitely sturdy and strong; as a result, they continue moving in their trajectory as if they did not collide.\n     *\n     * This function outputs the number of such collisions.\n     */\n    public int car_race_collision(int n) {\n        // Since all cars move at the same speed and start far apart,\n        // each car from one direction will eventually collide with exactly one car\n        // coming from the opposite direction. Therefore, the total number of collisions is simply n.\n        return n;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.car_race_collision(0));  // Expected output: 0\n        System.out.println(solution.car_race_collision(1));  // Expected output: 1\n        System.out.println(solution.car_race_collision(2));  // Expected output: 2\n        System.out.println(solution.car_race_collision(3));  // Expected output: 3\n        System.out.println(solution.car_race_collision(10)); // Expected output: 10\n    }\n}\n"}
{"task_id": "Java/42", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return list with elements incremented by 1.\n     *\n     * @param l The input list of integers.\n     * @return A new list where each element is incremented by 1.\n     */\n    public List<Integer> incr_list(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> list1 = Arrays.asList(1, 2, 3);\n        System.out.println(\"Original: \" + list1);\n        System.out.println(\"Incremented: \" + solution.incr_list(list1));\n\n        // Test case 2\n        List<Integer> list2 = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        System.out.println(\"Original: \" + list2);\n        System.out.println(\"Incremented: \" + solution.incr_list(list2));\n    }\n}\n"}
{"task_id": "Java/43", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * pairs_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are two distinct elements in the list that\n     * sum to zero, and False otherwise.\n     */\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        Set<Integer> seen = new HashSet<>();\n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1, 3, -2, 1))); // false\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(2, 4, -5, 3, 5, 7))); // true\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1))); // false\n    }\n}\n"}
{"task_id": "Java/44", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Change numerical base of input number x to base.\n     * return string representation after the conversion.\n     * base numbers are less than 10.\n     *\n     * @param x The number to be converted.\n     * @param base The target base for conversion (less than 10).\n     * @return String representation of the converted number.\n     */\n    public String change_base(int x, int base) {\n        if (x == 0) return \"0\";\n        \n        StringBuilder result = new StringBuilder();\n        while (x > 0) {\n            int remainder = x % base;\n            result.insert(0, remainder);\n            x /= base;\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.change_base(8, 3));  // Expected output: \"22\"\n        System.out.println(solution.change_base(8, 2));  // Expected output: \"1000\"\n        System.out.println(solution.change_base(7, 2));  // Expected output: \"111\"\n        System.out.println(solution.change_base(255, 16)); // Expected output: \"FF\" (for base 16)\n        System.out.println(solution.change_base(10, 8));  // Expected output: \"12\"\n    }\n}\n"}
{"task_id": "Java/45", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given length of a side (base) and height, return area for a triangle.\n     *\n     * @param a The base of the triangle.\n     * @param h The height of the triangle.\n     * @return The area of the triangle.\n     */\n    public double triangle_area(double a, double h) {\n        return 0.5 * a * h;\n    }\n\n    /**\n     * Main method to run test cases for the triangle_area function.\n     *\n     * @param args Command line arguments (not used).\n     */\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Test Case 1: Base = 5, Height = 3\");\n        double result1 = solution.triangle_area(5, 3);\n        System.out.println(\"Expected: 7.5, Actual: \" + result1);\n\n        System.out.println(\"\\nTest Case 2: Base = 10, Height = 4\");\n        double result2 = solution.triangle_area(10, 4);\n        System.out.println(\"Expected: 20.0, Actual: \" + result2);\n\n        System.out.println(\"\\nTest Case 3: Base = 7, Height = 8\");\n        double result3 = solution.triangle_area(7, 8);\n        System.out.println(\"Expected: 28.0, Actual: \" + result3);\n\n        // Add more test cases as needed\n    }\n}\n"}
{"task_id": "Java/46", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0 || n == 1) return 0;\n        if (n == 2) return 2;\n        if (n == 3) return 0;\n\n        int[] dp = new int[n + 1];\n        dp[0] = 0;\n        dp[1] = 0;\n        dp[2] = 2;\n        dp[3] = 0;\n\n        for (int i = 4; i <= n; i++) {\n            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4];\n        }\n\n        return dp[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.fib4(5)); // Expected output: 4\n        System.out.println(solution.fib4(6)); // Expected output: 8\n        System.out.println(solution.fib4(7)); // Expected output: 14\n        System.out.println(solution.fib4(8)); // Expected output: 24\n        System.out.println(solution.fib4(9)); // Expected output: 44\n    }\n}\n"}
{"task_id": "Java/47", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return median of elements in the list l.\n     */\n    public double median(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be null or empty\");\n        }\n\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            return (l.get(size / 2 - 1) + l.get(size / 2)) / 2.0;\n        } else {\n            return l.get(size / 2);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> testList1 = Arrays.asList(3, 1, 2, 4, 5);\n        System.out.println(\"Median of [3, 1, 2, 4, 5]: \" + solution.median(testList1)); // Expected: 3\n\n        List<Integer> testList2 = Arrays.asList(-10, 4, 6, 1000, 10, 20);\n        System.out.println(\"Median of [-10, 4, 6, 1000, 10, 20]: \" + solution.median(testList2)); // Expected: 8.0\n\n        List<Integer> testList3 = Arrays.asList(1, 2, 3, 4);\n        System.out.println(\"Median of [1, 2, 3, 4]: \" + solution.median(testList3)); // Expected: 2.5\n\n        List<Integer> testList4 = Arrays.asList(-5, -3, -1, 0, 2, 4, 6);\n        System.out.println(\"Median of [-5, -3, -1, 0, 2, 4, 6]: \" + solution.median(testList4)); // Expected: 0.0\n\n        List<Integer> testList5 = Arrays.asList();\n        try {\n            System.out.println(\"Median of []: \" + solution.median(testList5));\n        } catch (IllegalArgumentException e) {\n            System.out.println(\"Caught expected exception for empty list: \" + e.getMessage());\n        }\n\n        List<Integer> testList6 = null;\n        try {\n            System.out.println(\"Median of null: \" + solution.median(testList6));\n        } catch (IllegalArgumentException e) {\n            System.out.println(\"Caught expected exception for null list: \" + e.getMessage());\n        }\n    }\n}\n"}
{"task_id": "Java/48", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     Checks if given string is a palindrome\n     >>> is_palindrome(\"\")\n     true\n     >>> is_palindrome(\"aba\")\n     true\n     >>> is_palindrome(\"aaaaa\")\n     true\n     >>> is_palindrome(\"zbcd\")\n     false\n     */\n    public boolean is_palindrome(String text) {\n        int left = 0;\n        int right = text.length() - 1;\n\n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.is_palindrome(\"\"));       // true\n        System.out.println(solution.is_palindrome(\"aba\"));    // true\n        System.out.println(solution.is_palindrome(\"aaaaa\"));  // true\n        System.out.println(solution.is_palindrome(\"zbcd\"));   // false\n        System.out.println(solution.is_palindrome(\"level\"));  // true\n        System.out.println(solution.is_palindrome(\"noon\"));   // true\n        System.out.println(solution.is_palindrome(\"abcde\"));  // false\n    }\n}\n"}
{"task_id": "Java/49", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return 2^n modulo p (be aware of numerics).\n     */\n    public int modp(int n, int p) {\n        if (n == 0) return 1; // Base case: 2^0 = 1\n        long result = 1;\n        for (int i = 0; i < n; i++) {\n            result = (result * 2) % p;\n        }\n        return (int) result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.modp(3, 5));   // Expected output: 3\n        System.out.println(solution.modp(1101, 101)); // Expected output: 2\n        System.out.println(solution.modp(0, 101));  // Expected output: 1\n        System.out.println(solution.modp(3, 11));   // Expected output: 8\n        System.out.println(solution.modp(100, 101)); // Expected output: 1\n    }\n}\n"}
{"task_id": "Java/50", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n     * takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decode_shift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n     * Test method to verify the encodeShift and decode_shift functions.\n     */\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        String test1 = \"abc\";\n        String encoded1 = solution.encodeShift(test1);\n        System.out.println(\"Encoded: \" + encoded1); // Expected: fgh\n\n        String decoded1 = solution.decode_shift(encoded1);\n        System.out.println(\"Decoded: \" + decoded1); // Expected: abc\n\n        String test2 = \"xyz\";\n        String encoded2 = solution.encodeShift(test2);\n        System.out.println(\"Encoded: \" + encoded2); // Expected: cde\n\n        String decoded2 = solution.decode_shift(encoded2);\n        System.out.println(\"Decoded: \" + decoded2); // Expected: xyz\n\n        String test3 = \"hello\";\n        String encoded3 = solution.encodeShift(test3);\n        System.out.println(\"Encoded: \" + encoded3); // Expected: mjqqt\n\n        String decoded3 = solution.decode_shift(encoded3);\n        System.out.println(\"Decoded: \" + decoded3); // Expected: hello\n    }\n}\n"}
{"task_id": "Java/51", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * remove_vowels is a function that takes string and returns string without vowels.\n     */\n    public String remove_vowels(String text) {\n        if (text == null || text.isEmpty()) {\n            return text;\n        }\n        \n        StringBuilder result = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (!isVowel(c)) {\n                result.append(c);\n            }\n        }\n        return result.toString();\n    }\n\n    private boolean isVowel(char c) {\n        return \"AEIOUaeiou\".indexOf(c) != -1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.remove_vowels(\"\")); // Output: \"\"\n        System.out.println(solution.remove_vowels(\"abcdef\\nghijklm\")); // Output: \"bcdf\\nghjklm\"\n        System.out.println(solution.remove_vowels(\"abcdef\")); // Output: \"bcdf\"\n        System.out.println(solution.remove_vowels(\"aaaaa\")); // Output: \"\"\n        System.out.println(solution.remove_vowels(\"aaBAA\")); // Output: \"B\"\n        System.out.println(solution.remove_vowels(\"zbcd\")); // Output: \"zbcd\"\n    }\n}\n"}
{"task_id": "Java/52", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return True if all numbers in the list l are below threshold t.\n     */\n    public boolean below_threshold(List<Integer> l, int t) {\n        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.below_threshold(Arrays.asList(1, 2, 4, 10), 100)); // Expected: true\n        System.out.println(solution.below_threshold(Arrays.asList(1, 20, 4, 10), 5));  // Expected: false\n        System.out.println(solution.below_threshold(Arrays.asList(-1, -2, -3), 0));    // Expected: true\n        System.out.println(solution.below_threshold(Arrays.asList(), 100));            // Expected: true (empty list)\n        System.out.println(solution.below_threshold(Arrays.asList(99, 100, 101), 100)); // Expected: false\n    }\n}\n"}
{"task_id": "Java/53", "generation": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nclass Solution {\n    /**\n     * Add two numbers x and y\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n\n    // Test cases for the add method\n    @Test\n    void testAdd() {\n        assertEquals(5, add(2, 3), \"2 + 3 should be 5\");\n        assertEquals(12, add(5, 7), \"5 + 7 should be 12\");\n        assertEquals(0, add(0, 0), \"0 + 0 should be 0\");\n        assertEquals(-1, add(-1, -2), \"-1 + (-2) should be -3\");\n        assertEquals(1, add(-1, 2), \"-1 + 2 should be 1\");\n    }\n}\n"}
{"task_id": "Java/54", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Check if two words have the same kind of characters.\n     */\n    public boolean same_chars(String s0, String s1) {\n        // Convert both strings to sets of characters\n        Set<Character> set0 = new HashSet<>();\n        for (char c : s0.toCharArray()) {\n            set0.add(c);\n        }\n        \n        Set<Character> set1 = new HashSet<>();\n        for (char c : s1.toCharArray()) {\n            set1.add(c);\n        }\n        \n        // Compare the sets\n        return set0.equals(set1);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // true\n        System.out.println(solution.same_chars(\"abcd\", \"dddddddabc\"));              // true\n        System.out.println(solution.same_chars(\"dddddddabc\", \"abcd\"));              // true\n        System.out.println(solution.same_chars(\"eabcd\", \"dddddddabc\"));             // false\n        System.out.println(solution.same_chars(\"abcd\", \"dddddddabce\"));             // false\n        System.out.println(solution.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"));  // false\n    }\n}\n"}
{"task_id": "Java/55", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return n-th Fibonacci number.\n     * >>> fib(10)\n     * 55\n     * >>> fib(1)\n     * 1\n     * >>> fib(8)\n     * 21\n     */\n    public int fib(int n) {\n        if (n <= 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        }\n        \n        int a = 0, b = 1, c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(\"fib(10): \" + solution.fib(10)); // Expected: 55\n        System.out.println(\"fib(1): \" + solution.fib(1));   // Expected: 1\n        System.out.println(\"fib(8): \" + solution.fib(8));   // Expected: 21\n        System.out.println(\"fib(0): \" + solution.fib(0));   // Expected: 0\n        System.out.println(\"fib(-5): \" + solution.fib(-5)); // Expected: 0 (or handle as an error)\n    }\n}\n"}
{"task_id": "Java/56", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * brackets is a string of \"<\" and \">\".\n     * return True if every opening bracket has a corresponding closing bracket.\n     *\n     * >>> correct_bracketing(\"<\")\n     * false\n     * >>> correct_bracketing(\"<>\")\n     * true\n     * >>> correct_bracketing(\"<<><>>\")\n     * true\n     * >>> correct_bracketing(\"><<>\")\n     * false\n     */\n    public boolean correct_bracketing(String brackets) {\n        int balance = 0;\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                balance++;\n            } else if (c == '>') {\n                balance--;\n            }\n            // If at any point the balance is negative, it means there's a closing bracket without an opening one\n            if (balance < 0) {\n                return false;\n            }\n        }\n        // If the balance is zero, all brackets are correctly matched\n        return balance == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.correct_bracketing(\"<\"));      // false\n        System.out.println(solution.correct_bracketing(\"<>\"));     // true\n        System.out.println(solution.correct_bracketing(\"<<><>>\")); // true\n        System.out.println(solution.correct_bracketing(\"><<>\"));   // false\n    }\n}\n"}
{"task_id": "Java/57", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return true if list elements are monotonically increasing or decreasing.\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l == null || l.size() <= 1) {\n            return true;\n        }\n\n        boolean increasing = true;\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i - 1)) {\n                increasing = true;\n            } else if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n\n            if ((increasing && l.get(i) < l.get(i - 1)) || (!increasing && l.get(i) > l.get(i - 1))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.monotonic(Arrays.asList(1, 2, 4, 20))); // true\n        System.out.println(solution.monotonic(Arrays.asList(1, 20, 4, 10))); // false\n        System.out.println(solution.monotonic(Arrays.asList(4, 1, 0, -10))); // true\n        System.out.println(solution.monotonic(Arrays.asList(5, 5, 5, 5)));   // true (constant list is considered monotonic)\n        System.out.println(solution.monotonic(Arrays.asList()));            // true (empty list is considered monotonic)\n    }\n}\n"}
{"task_id": "Java/58", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return sorted unique common elements for two lists.\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n\n        // Retain only the elements that are present in both sets\n        set1.retainAll(set2);\n\n        // Convert the resulting set to a sorted list\n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result);\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> l1 = Arrays.asList(1, 4, 3, 34, 653, 2, 5);\n        List<Integer> l2 = Arrays.asList(5, 7, 1, 5, 9, 653, 121);\n        System.out.println(\"Common elements (Test case 1): \" + solution.common(l1, l2)); // Expected: [1, 5, 653]\n\n        // Test case 2\n        List<Integer> l3 = Arrays.asList(5, 3, 2, 8);\n        List<Integer> l4 = Arrays.asList(3, 2);\n        System.out.println(\"Common elements (Test case 2): \" + solution.common(l3, l4)); // Expected: [2, 3]\n\n        // Test case 3\n        List<Integer> l5 = Arrays.asList(10, 20, 30, 40);\n        List<Integer> l6 = Arrays.asList(50, 60, 70);\n        System.out.println(\"Common elements (Test case 3): \" + solution.common(l5, l6)); // Expected: []\n\n        // Test case 4\n        List<Integer> l7 = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> l8 = Arrays.asList(3, 4, 5, 6, 7);\n        System.out.println(\"Common elements (Test case 4): \" + solution.common(l7, l8)); // Expected: [3, 4, 5]\n    }\n}\n"}
{"task_id": "Java/59", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Return the largest prime factor of n. Assume n > 1 and is not a prime.\n     *\n     * @param n the number to find the largest prime factor for\n     * @return the largest prime factor of n\n     */\n    public int largest_prime_factor(int n) {\n        int maxPrime = -1;\n        \n        // Divide n by 2 to remove all even factors\n        while (n % 2 == 0) {\n            maxPrime = 2;\n            n /= 2;\n        }\n        \n        // Now n must be odd, start checking from 3\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            // While i divides n, remove i and set maxPrime to i\n            while (n % i == 0) {\n                maxPrime = i;\n                n /= i;\n            }\n        }\n        \n        // This condition is to handle the case when n is a prime number greater than 2\n        if (n > 2) {\n            maxPrime = n;\n        }\n        \n        return maxPrime;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.largest_prime_factor(13195)); // Expected output: 29\n        System.out.println(solution.largest_prime_factor(2048));  // Expected output: 2\n        System.out.println(solution.largest_prime_factor(600851475143L)); // Expected output: 6857 (Note: Use long to handle large numbers)\n    }\n}\n"}
{"task_id": "Java/60", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * sum_to_n is a function that sums numbers from 1 to n.\n     */\n    public int sum_to_n(int n) {\n        return (n * (n + 1)) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"sum_to_n(30): \" + solution.sum_to_n(30)); // Expected: 465\n        System.out.println(\"sum_to_n(100): \" + solution.sum_to_n(100)); // Expected: 5050\n        System.out.println(\"sum_to_n(5): \" + solution.sum_to_n(5)); // Expected: 15\n        System.out.println(\"sum_to_n(10): \" + solution.sum_to_n(10)); // Expected: 55\n        System.out.println(\"sum_to_n(1): \" + solution.sum_to_n(1)); // Expected: 1\n    }\n}\n"}
{"task_id": "Java/61", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * brackets is a string of \"(\" and \")\".\n     * return True if every opening bracket has a corresponding closing bracket.\n     *\n     * >>> correct_bracketing(\"(\")\n     * false\n     * >>> correct_bracketing(\"()\")\n     * true\n     * >>> correct_bracketing(\"(()())\")\n     * true\n     * >>> correct_bracketing(\")(()\")\n     * false\n     */\n    public boolean correct_bracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        \n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.correct_bracketing(\"(\"));       // Output: false\n        System.out.println(solution.correct_bracketing(\"()\"));      // Output: true\n        System.out.println(solution.correct_bracketing(\"(()())\"));  // Output: true\n        System.out.println(solution.correct_bracketing(\")(()\"));    // Output: false\n        System.out.println(solution.correct_bracketing(\"(())\"));    // Output: true\n        System.out.println(solution.correct_bracketing(\"()()\"));    // Output: true\n        System.out.println(solution.correct_bracketing(\"(()\"));     // Output: false\n        System.out.println(solution.correct_bracketing(\")(\"));      // Output: false\n    }\n}\n"}
{"task_id": "Java/62", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * xs represent coefficients of a polynomial.\n     * xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     * Return derivative of this polynomial in the same form.\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        if (xs == null || xs.isEmpty()) {\n            return Collections.emptyList();\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Derivative of [3, 1, 2, 4, 5]: \" + solution.derivative(Arrays.asList(3, 1, 2, 4, 5)));\n        System.out.println(\"Derivative of [1, 2, 3]: \" + solution.derivative(Arrays.asList(1, 2, 3)));\n\n        // Additional test cases\n        System.out.println(\"Derivative of [0, 1, 2, 3]: \" + solution.derivative(Arrays.asList(0, 1, 2, 3)));\n        System.out.println(\"Derivative of [5]: \" + solution.derivative(Arrays.asList(5)));\n        System.out.println(\"Derivative of []: \" + solution.derivative(new ArrayList<>()));\n    }\n}\n"}
{"task_id": "Java/63", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n     fibfib(0) == 0\n     fibfib(1) == 0\n     fibfib(2) == 1\n     fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n     Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n     >>> fibfib(1)\n     0\n     >>> fibfib(5)\n     4\n     >>> fibfib(8)\n     24\n      */\n    public int fibfib(int n) {\n        if (n == 0 || n == 1) return 0;\n        if (n == 2) return 1;\n\n        int a = 0, b = 0, c = 1;\n        for (int i = 3; i <= n; i++) {\n            int temp = a + b + c;\n            a = b;\n            b = c;\n            c = temp;\n        }\n        return c;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.fibfib(1));  // Expected output: 0\n        System.out.println(solution.fibfib(5));  // Expected output: 4\n        System.out.println(solution.fibfib(8));  // Expected output: 24\n        System.out.println(solution.fibfib(10)); // Expected output: 76\n    }\n}\n"}
{"task_id": "Java/64", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function vowels_count which takes a string representing\n     * a word as input and returns the number of vowels in the string.\n     * Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n     * vowel, but only when it is at the end of the given word.\n     *\n     * Example:\n     * >>> vowels_count(\"abcde\")\n     * 2\n     * >>> vowels_count(\"ACEDY\")\n     * 3\n     */\n    public int vowels_count(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = Character.toLowerCase(s.charAt(i));\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            } else if (c == 'y' && i == s.length() - 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.vowels_count(\"abcde\")); // Expected output: 2\n        System.out.println(solution.vowels_count(\"ACEDY\")); // Expected output: 3\n        System.out.println(solution.vowels_count(\"rhythm\")); // Expected output: 0\n        System.out.println(solution.vowels_count(\"encyclopedia\")); // Expected output: 6\n        System.out.println(solution.vowels_count(\"quickly\")); // Expected output: 1\n    }\n}\n"}
{"task_id": "Java/65", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Circular shift the digits of the integer x, shift the digits right by shift\n     * and return the result as a string.\n     * If shift > number of digits, return digits reversed.\n     *\n     * @param x The integer to be shifted.\n     * @param shift The number of positions to shift the digits to the right.\n     * @return The resulting string after circular shifting or reversing if necessary.\n     */\n    public String circular_shift(int x, int shift) {\n        // Convert the integer to a string\n        String numStr = Integer.toString(x);\n        int len = numStr.length();\n        \n        // If shift is greater than the number of digits, reverse the string\n        if (shift >= len) {\n            return new StringBuilder(numStr).reverse().toString();\n        }\n        \n        // Calculate the effective shift within one full rotation\n        int effectiveShift = shift % len;\n        \n        // Perform circular shift\n        String shiftedPart = numStr.substring(len - effectiveShift, len);\n        String remainingPart = numStr.substring(0, len - effectiveShift);\n        \n        return shiftedPart + remainingPart;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.circular_shift(12, 1)); // Expected: \"21\"\n        System.out.println(solution.circular_shift(12, 2)); // Expected: \"12\"\n        System.out.println(solution.circular_shift(123456789, 3)); // Expected: \"789123456\"\n        System.out.println(solution.circular_shift(123456789, 10)); // Expected: \"987654321\"\n    }\n}\n"}
{"task_id": "Java/66", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function that takes a string as input and returns the sum of the upper characters only ASCII codes.\n     *\n     * Examples:\n     * digitSum(\"\") => 0\n     * digitSum(\"abAB\") => 131\n     * digitSum(\"abcCd\") => 67\n     * digitSum(\"helloE\") => 69\n     * digitSum(\"woArBld\") => 131\n     * digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n\n    // Test cases to verify the correctness of the method\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.digitSum(\"\")); // Expected output: 0\n        System.out.println(solution.digitSum(\"abAB\")); // Expected output: 131 ('A' + 'B')\n        System.out.println(solution.digitSum(\"abcCd\")); // Expected output: 67 ('C' + 'D')\n        System.out.println(solution.digitSum(\"helloE\")); // Expected output: 69 ('E')\n        System.out.println(solution.digitSum(\"woArBld\")); // Expected output: 131 ('A' + 'B' + 'L' + 'D')\n        System.out.println(solution.digitSum(\"aAaaaXa\")); // Expected output: 153 ('A' * 4 + 'X')\n    }\n}\n"}
{"task_id": "Java/67", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * In this task, you will be given a string that represents a number of apples and oranges\n     * that are distributed in a basket of fruit. The basket contains apples, oranges, and mango fruits.\n     * Given the string that represents the total number of the oranges and apples and an integer that represent the total number of the fruits\n     * in the basket return the number of the mango fruits in the basket.\n     *\n     * @param s a string representing the number of apples and oranges (e.g., \"5 apples and 6 oranges\")\n     * @param n the total number of fruits in the basket\n     * @return the number of mango fruits in the basket\n     */\n    public int fruit_distribution(String s, int n) {\n        // Extract the numbers from the string\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[3]);\n\n        // Calculate the number of mangoes\n        return n - (apples + oranges);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.fruit_distribution(\"5 apples and 6 oranges\", 19)); // Expected output: 8\n        System.out.println(solution.fruit_distribution(\"0 apples and 1 oranges\", 3));   // Expected output: 2\n        System.out.println(solution.fruit_distribution(\"2 apples and 3 oranges\", 100)); // Expected output: 95\n        System.out.println(solution.fruit_distribution(\"100 apples and 1 oranges\", 120)); // Expected output: 19\n    }\n}\n"}
{"task_id": "Java/68", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given an array representing a branch of a tree that has non-negative integer nodes,\n     * your task is to pluck one of the nodes and return it.\n     * The plucked node should be the node with the smallest even value.\n     * If multiple nodes with the same smallest even value are found, return the node that has the smallest index.\n     *\n     * @param arr the list of integer values representing tree branch nodes\n     * @return a list containing the smallest even value and its index, or an empty list if no valid node is found\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        int minEvenValue = Integer.MAX_VALUE;\n        int minIndex = -1;\n\n        for (int i = 0; i < arr.size(); i++) {\n            int value = arr.get(i);\n            if (value % 2 == 0 && value <= minEvenValue) {\n                if (value < minEvenValue || (value == minEvenValue && i < minIndex)) {\n                    minEvenValue = value;\n                    minIndex = i;\n                }\n            }\n        }\n\n        if (minIndex == -1) {\n            return new ArrayList<>();\n        } else {\n            return Arrays.asList(minEvenValue, minIndex);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.pluck(Arrays.asList(4, 2, 3))); // Output: [2, 1]\n        System.out.println(solution.pluck(Arrays.asList(1, 2, 3))); // Output: [2, 1]\n        System.out.println(solution.pluck(Arrays.asList()));       // Output: []\n        System.out.println(solution.pluck(Arrays.asList(5, 0, 3, 0, 4, 2))); // Output: [0, 1]\n    }\n}\n"}
{"task_id": "Java/69", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n     * zero, and has a frequency greater than or equal to the value of the integer itself.\n     * The frequency of an integer is the number of times it appears in the list.\n     * If no such a value exist, return -1.\n     *\n     * Examples:\n     * search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n     * search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n     * search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        // Count the frequency of each integer in the list\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        int result = -1;\n        \n        // Check which integers meet the criteria and find the greatest one\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            if (entry.getKey() <= entry.getValue()) {\n                result = Math.max(result, entry.getKey());\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.search(Arrays.asList(4, 1, 2, 2, 3, 1))); // Expected output: 2\n        System.out.println(solution.search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4))); // Expected output: 3\n        System.out.println(solution.search(Arrays.asList(5, 5, 4, 4, 4))); // Expected output: -1\n        System.out.println(solution.search(Arrays.asList(6, 6, 6, 7, 7, 8, 8, 8, 8))); // Expected output: 8\n    }\n}\n"}
{"task_id": "Java/70", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given list of integers, return list in strange order.\n     * Strange sorting, is when you start with the minimum value,\n     * then maximum of the remaining integers, then minimum and so on.\n     *\n     * Examples:\n     * strange_sort_list(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n     * strange_sort_list(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n     * strange_sort_list(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        while (!lst.isEmpty()) {\n            // Add the minimum value\n            int minVal = Collections.min(lst);\n            result.add(minVal);\n            lst.remove(Integer.valueOf(minVal));\n            \n            if (lst.isEmpty()) break;\n            \n            // Add the maximum value\n            int maxVal = Collections.max(lst);\n            result.add(maxVal);\n            lst.remove(Integer.valueOf(maxVal));\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.strange_sort_list(Arrays.asList(1, 2, 3, 4))); // Expected: [1, 4, 2, 3]\n        System.out.println(solution.strange_sort_list(Arrays.asList(5, 5, 5, 5))); // Expected: [5, 5, 5, 5]\n        System.out.println(solution.strange_sort_list(Arrays.asList()));           // Expected: []\n        System.out.println(solution.strange_sort_list(Arrays.asList(10, 20, 30, 40, 50))); // Expected: [10, 50, 20, 40, 30]\n    }\n}\n"}
{"task_id": "Java/71", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n\n    /**\n     * Given the lengths of the three sides of a triangle. Return the area of\n     * the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n     * Otherwise return -1.\n     * Three sides make a valid triangle when the sum of any two sides is greater\n     * than the third side.\n     * Example:\n     * triangle_area(3, 4, 5) == 6.00\n     * triangle_area(1, 2, 10) == -1\n     */\n    public double triangle_area(double a, double b, double c) {\n        // Check if the sides form a valid triangle\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        \n        // Calculate the semi-perimeter\n        double s = (a + b + c) / 2.0;\n\n        // Calculate the area using Heron's formula\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        \n        // Round to 2 decimal points\n        return Math.round(area * 100.0) / 100.0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.triangle_area(3, 4, 5)); // Expected output: 6.00\n        System.out.println(solution.triangle_area(1, 2, 10)); // Expected output: -1\n        System.out.println(solution.triangle_area(7, 8, 9)); // Expected output: ~26.83\n        System.out.println(solution.triangle_area(5, 5, 5)); // Expected output: 10.83\n    }\n}\n"}
{"task_id": "Java/72", "generation": "import java.util.*;\n\nclass Solution {\n\n    /**\n     * Write a function that returns True if the object q will fly, and False otherwise.\n     * The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n     *\n     * @param q A List<Integer> representing the object\n     * @param w An integer representing the maximum possible weight\n     * @return boolean indicating if the object will fly\n     */\n    public boolean will_it_fly(List<Integer> q, int w) {\n        // Check if the list is a palindrome\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (!q.get(i).equals(q.get(q.size() - 1 - i))) {\n                return false;\n            }\n        }\n\n        // Calculate the sum of elements in the list\n        int sum = q.stream().mapToInt(Integer::intValue).sum();\n\n        // Check if the sum is less than or equal to w\n        return sum <= w;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.will_it_fly(Arrays.asList(1, 2), 5));   // false\n        System.out.println(solution.will_it_fly(Arrays.asList(3, 2, 3), 1)); // false\n        System.out.println(solution.will_it_fly(Arrays.asList(3, 2, 3), 9)); // true\n        System.out.println(solution.will_it_fly(Arrays.asList(3), 5));      // true\n    }\n}\n"}
{"task_id": "Java/73", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given an array arr of integers, find the minimum number of elements that\n     * need to be changed to make the array palindromic. A palindromic array is an array that\n     * is read the same backwards and forwards. In one change, you can change one element to any other element.\n     *\n     * For example:\n     * smallest_change(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n     * smallest_change(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n     * smallest_change(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallest_change(List<Integer> arr) {\n        int left = 0;\n        int right = arr.size() - 1;\n        int changes = 0;\n\n        while (left < right) {\n            if (!arr.get(left).equals(arr.get(right))) {\n                changes++;\n            }\n            left++;\n            right--;\n        }\n\n        return changes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.smallest_change(Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6))); // Output: 4\n        System.out.println(solution.smallest_change(Arrays.asList(1, 2, 3, 4, 3, 2, 2)));    // Output: 1\n        System.out.println(solution.smallest_change(Arrays.asList(1, 2, 3, 2, 1)));          // Output: 0\n        System.out.println(solution.smallest_change(Arrays.asList(1, 2, 3, 4, 5, 6, 7)));    // Output: 3\n        System.out.println(solution.smallest_change(Arrays.asList(8, 9, 8, 9, 8, 9, 8)));   // Output: 0\n    }\n}\n"}
{"task_id": "Java/74", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Write a function that accepts two lists of strings and returns the list that has\n     * total number of chars in the all strings of the list less than the other list.\n     *\n     * if the two lists have the same number of chars, return the first list.\n     */\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        int count1 = 0;\n        for (String s : lst1) {\n            count1 += s.length();\n        }\n        \n        int count2 = 0;\n        for (String s : lst2) {\n            count2 += s.length();\n        }\n\n        if (count1 <= count2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.total_match(new ArrayList<>(), new ArrayList<>())); // []\n        System.out.println(solution.total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\"))); // [\"hI\", \"Hi\"]\n        System.out.println(solution.total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\"))); // [\"hi\", \"admin\"]\n        System.out.println(solution.total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\"))); // [\"hI\", \"hi\", \"hi\"]\n        System.out.println(solution.total_match(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"))); // [\"4\"]\n    }\n}\n"}
{"task_id": "Java/75", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Write a function that returns true if the given number is the multiplication of 3 prime numbers\n     * and false otherwise.\n     * Knowing that the prime number is less than 100.\n     * Example:\n     * is_multiply_prime(30) == true\n     * 30 = 2 * 3 * 5\n     */\n    public boolean is_multiply_prime(int a) {\n        if (a < 2) return false;\n\n        int count = 0;\n        for (int i = 2; i <= Math.sqrt(a); i++) {\n            while (a % i == 0 && isPrime(i)) {\n                count++;\n                a /= i;\n            }\n        }\n\n        // Check if the remaining number is also prime and part of the product\n        if (a > 1 && isPrime(a)) {\n            count++;\n        }\n\n        return count == 3;\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) return false;\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.is_multiply_prime(30)); // true, because 30 = 2 * 3 * 5\n        System.out.println(solution.is_multiply_prime(60)); // false, because 60 = 2 * 2 * 3 * 5 (more than 3 primes)\n        System.out.println(solution.is_multiply_prime(100)); // false, because 100 is not a product of exactly 3 primes\n        System.out.println(solution.is_multiply_prime(30030)); // true, because 30030 = 2 * 3 * 5 * 7 * 11 * 13 (more than 3 primes)\n        System.out.println(solution.is_multiply_prime(2 * 3 * 7)); // true, because 42 = 2 * 3 * 7\n    }\n}\n"}
{"task_id": "Java/76", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Your task is to write a function that returns true if a number x is a simple\n     * power of n and false in other cases.\n     * x is a simple power of n if n**int=x\n     * For example:\n     * is_simple_power(1, 4) => true\n     * is_simple_power(2, 2) => true\n     * is_simple_power(8, 2) => true\n     * is_simple_power(3, 2) => false\n     * is_simple_power(3, 1) => false\n     * is_simple_power(5, 3) => false\n     */\n    public boolean is_simple_power(int x, int n) {\n        if (n == 1) {\n            return x == 1;\n        }\n        \n        double power = Math.pow(n, Math.round(Math.log(x) / Math.log(n)));\n        return Math.abs(power - x) < 0.0001; // Allowing a small floating point tolerance\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.is_simple_power(1, 4));   // true\n        System.out.println(solution.is_simple_power(2, 2));   // true\n        System.out.println(solution.is_simple_power(8, 2));   // true\n        System.out.println(solution.is_simple_power(3, 2));   // false\n        System.out.println(solution.is_simple_power(3, 1));   // false\n        System.out.println(solution.is_simple_power(5, 3));   // false\n        System.out.println(solution.is_simple_power(16, 2));  // true\n        System.out.println(solution.is_simple_power(81, 3));  // true\n        System.out.println(solution.is_simple_power(27, 3));  // true\n        System.out.println(solution.is_simple_power(49, 7));  // true\n    }\n}\n"}
{"task_id": "Java/77", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Write a function that takes an integer a and returns true\n     * if this integer is a cube of some integer number.\n     * Note: you may assume the input is always valid.\n     * Examples:\n     * iscube(1) ==> true\n     * iscube(2) ==> false\n     * iscube(-1) ==> true\n     * iscube(64) ==> true\n     * iscube(0) ==> true\n     * iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) return true;\n        \n        // Handle negative numbers by checking the cube root and squaring it back\n        double cubeRoot = Math.cbrt(a);\n        int roundedCubeRoot = (int) Math.round(cubeRoot);\n        \n        return Math.pow(roundedCubeRoot, 3) == a;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.iscube(1));   // true\n        System.out.println(solution.iscube(2));   // false\n        System.out.println(solution.iscube(-1));  // true\n        System.out.println(solution.iscube(64));  // true\n        System.out.println(solution.iscube(0));   // true\n        System.out.println(solution.iscube(180)); // false\n    }\n}\n"}
{"task_id": "Java/78", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You have been tasked to write a function that receives\n     * a hexadecimal number as a string and counts the number of hexadecimal\n     * digits that are primes (prime number, or a prime, is a natural number\n     * greater than 1 that is not a product of two smaller natural numbers).\n     * Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n     * Prime numbers are 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\n     * So you have to determine a number of the following digits: 2, 3, 5, 7,\n     * B (=decimal 11), D (=decimal 13).\n     * Note: you may assume the input is always correct or empty string,\n     * and symbols A,B,C,D,E,F are always uppercase.\n     * Examples:\n     * For num = \"AB\" the output should be 1.\n     * For num = \"1077E\" the output should be 2.\n     * For num = \"ABED1A33\" the output should be 4.\n     * For num = \"123456789ABCDEF0\" the output should be 6.\n     * For num = \"2020\" the output should be 2.\n     */\n    public int hex_key(String num) {\n        // Define a set of prime hexadecimal digits\n        Set<Character> primes = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        // Count the number of prime hexadecimal digits in the input string\n        int count = 0;\n        for (char c : num.toCharArray()) {\n            if (primes.contains(c)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.hex_key(\"AB\")); // Expected output: 1\n        System.out.println(solution.hex_key(\"1077E\")); // Expected output: 2\n        System.out.println(solution.hex_key(\"ABED1A33\")); // Expected output: 4\n        System.out.println(solution.hex_key(\"123456789ABCDEF0\")); // Expected output: 6\n        System.out.println(solution.hex_key(\"2020\")); // Expected output: 2\n    }\n}\n"}
{"task_id": "Java/79", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You will be given a number in decimal form and your task is to convert it to\n     * binary format. The function should return a string, with each character representing a binary\n     * number. Each character in the string will be '0' or '1'.\n     *\n     * There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n     * The extra characters are there to help with the format.\n     *\n     * Examples:\n     * decimal_to_binary(15)   // returns \"db1111db\"\n     * decimal_to_binary(32)   // returns \"db100000db\"\n     */\n    public String decimal_to_binary(int decimal) {\n        if (decimal == 0) return \"db0db\";\n        \n        StringBuilder binary = new StringBuilder();\n        while (decimal > 0) {\n            binary.insert(0, decimal % 2);\n            decimal /= 2;\n        }\n        \n        return \"db\" + binary.toString() + \"db\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.decimal_to_binary(15));   // Expected: db1111db\n        System.out.println(solution.decimal_to_binary(32));   // Expected: db100000db\n        System.out.println(solution.decimal_to_binary(0));    // Expected: db0db\n        System.out.println(solution.decimal_to_binary(456));  // Expected: db111001000db\n        System.out.println(solution.decimal_to_binary(255));  // Expected: db11111111db\n    }\n}\n"}
{"task_id": "Java/80", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You are given a string s.\n     * Your task is to check if the string is happy or not.\n     * A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n     * For example:\n     * is_happy(a) => false\n     * is_happy(aa) => false\n     * is_happy(abcd) => true\n     * is_happy(aabb) => false\n     * is_happy(adb) => true\n     * is_happy(xyy) => false\n     */\n    public boolean is_happy(String s) {\n        if (s.length() < 3) return false;\n        \n        for (int i = 0; i <= s.length() - 3; i++) {\n            char first = s.charAt(i);\n            char second = s.charAt(i + 1);\n            char third = s.charAt(i + 2);\n            \n            if (first == second || second == third || first == third) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.is_happy(\"a\"));       // Output: false\n        System.out.println(solution.is_happy(\"aa\"));      // Output: false\n        System.out.println(solution.is_happy(\"abcd\"));    // Output: true\n        System.out.println(solution.is_happy(\"aabb\"));    // Output: false\n        System.out.println(solution.is_happy(\"adb\"));     // Output: true\n        System.out.println(solution.is_happy(\"xyy\"));     // Output: false\n        System.out.println(solution.is_happy(\"abcabc\"));  // Output: true\n        System.out.println(solution.is_happy(\"abacaba\")); // Output: false\n    }\n}\n"}
{"task_id": "Java/81", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * It is the last week of the semester and the teacher has to give the grades\n     * to students. The teacher has given a list of GPAs for some students and you have to write\n     * a function that can output a list of letter grades using the following table:\n     *\n     * GPA       |    Letter grade\n     * 4.0                A+\n     * > 3.7              A\n     * > 3.3              A-\n     * > 3.0              B+\n     * > 2.7              B\n     * > 2.3              B-\n     * > 2.0              C+\n     * > 1.7              C\n     * > 1.3              C-\n     * > 1.0              D+\n     * > 0.7              D\n     * > 0.0              D-\n     * 0.0                E\n     *\n     * Example:\n     * numerical_letter_grade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        \n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        \n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        List<Double> test1 = Arrays.asList(4.0, 3, 1.7, 2, 3.5);\n        System.out.println(solution.numerical_letter_grade(test1)); // Expected: [A+, B, C-, C, A-]\n        \n        List<Double> test2 = Arrays.asList(4.0, 3.8, 3.2, 2.9, 2.6, 1.7, 1.2, 0.8);\n        System.out.println(solution.numerical_letter_grade(test2)); // Expected: [A+, A, A-, B+, B, C, C-, D]\n        \n        List<Double> test3 = Arrays.asList(4.5, 3.9, 3.1, 2.0, 1.6, 0.7);\n        System.out.println(solution.numerical_letter_grade(test3)); // Expected: [A+, A, A-, C+, C-, D]\n    }\n}\n"}
{"task_id": "Java/82", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function that takes a string and returns true if the string\n     * length is a prime number or false otherwise\n     * Examples:\n     * prime_length(\"Hello\") == true\n     * prime_length(\"abcdcba\") == true\n     * prime_length(\"kittens\") == true\n     * prime_length(\"orange\") == false\n     */\n    public boolean prime_length(String string) {\n        int length = string.length();\n        return isPrime(length);\n    }\n\n    private boolean isPrime(int number) {\n        if (number <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= number; i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.prime_length(\"Hello\"));   // true\n        System.out.println(solution.prime_length(\"abcdcba\")); // true\n        System.out.println(solution.prime_length(\"kittens\")); // true\n        System.out.println(solution.prime_length(\"orange\"));  // false\n    }\n}\n"}
{"task_id": "Java/83", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given a positive integer n, return the count of the numbers of n-digit\n     positive integers that start or end with 1.\n     */\n    public int starts_one_ends(int n) {\n        if (n == 1) {\n            return 1; // Only one 1-digit number starts and ends with 1\n        }\n        \n        long total = (long)Math.pow(10, n - 1); // Total count of n-digit numbers\n        \n        // Count of numbers that start with 1\n        int startWithOne = (int)total;\n        \n        // Count of numbers that end with 1\n        int endWithOne = (int)total;\n        \n        // Subtract the count of numbers that both start and end with 1 to avoid double-counting\n        int startAndEndWithOne = (int)Math.pow(10, n - 2);\n        \n        return startWithOne + endWithOne - startAndEndWithOne;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.starts_one_ends(1)); // Expected output: 1\n        System.out.println(solution.starts_one_ends(2)); // Expected output: 18 (10, 11, ..., 19, 21, 31, ..., 91)\n        System.out.println(solution.starts_one_ends(3)); // Expected output: 180\n        System.out.println(solution.starts_one_ends(4)); // Expected output: 1800\n    }\n}\n"}
{"task_id": "Java/84", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     Given a positive integer N, return in binary the total sum of its digits.\n\n     Example\n         For N = 1000, the sum of digits will be 1 the output should be \"1\".\n         For N = 150, the sum of digits will be 6 the output should be \"110\".\n         For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n     Variables:\n         @N integer\n              Constraints: 0 <= N <= 10000.\n     Output:\n          a string of binary number\n      */\n    public String solve(int N) {\n        int sum = 0;\n        \n        // Calculate the sum of digits\n        while (N > 0) {\n            sum += N % 10;\n            N /= 10;\n        }\n        \n        // Convert the sum to binary and return as a string\n        return Integer.toBinaryString(sum);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.solve(1000)); // Expected output: \"1\"\n        System.out.println(solution.solve(150));  // Expected output: \"110\"\n        System.out.println(solution.solve(147));  // Expected output: \"1100\"\n        System.out.println(solution.solve(9999)); // Expected output: \"11110001111\"\n    }\n}\n"}
{"task_id": "Java/85", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given a non-empty list of integers lst. add the even elements that are at odd indices.\n     *\n     * Examples:\n     * - add(Arrays.asList(4, 2, 6, 7)) should return 2 (since only 2 is an even number at an odd index)\n     */\n    public int add(List<Integer> lst) {\n        if (lst == null || lst.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be null or empty\");\n        }\n\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) { // Start from index 1 and increment by 2\n            Integer value = lst.get(i);\n            if (value % 2 == 0) {\n                sum += value;\n            }\n        }\n\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.add(Arrays.asList(4, 2, 6, 7))); // Should print 2\n        System.out.println(solution.add(Arrays.asList(1, 3, 5, 7, 9))); // Should print 0 (no even numbers at odd indices)\n        System.out.println(solution.add(Arrays.asList(8, 4, 2, 6, 10, 12))); // Should print 16 (4 + 12)\n    }\n}\n"}
{"task_id": "Java/86", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function that takes a string and returns an ordered version of it.\n     * Ordered version of string, is a string where all words (separated by space)\n     * are replaced by a new word where all the characters arranged in\n     * ascending order based on ascii value.\n     * Note: You should keep the order of words and blank spaces in the sentence.\n     *\n     * For example:\n     * anti_shuffle(\"Hi\") returns \"Hi\"\n     * anti_shuffle(\"hello\") returns \"ehllo\"\n     * anti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String anti_shuffle(String s) {\n        if (s == null || s.isEmpty()) {\n            return s;\n        }\n\n        StringBuilder result = new StringBuilder();\n        int wordStartIndex = 0;\n\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == ' ') {\n                // Process the current word\n                String word = s.substring(wordStartIndex, i);\n                result.append(orderedWord(word));\n                result.append(c); // Append the space character\n                wordStartIndex = i + 1;\n            }\n        }\n\n        // Process the last word in the string\n        if (wordStartIndex < s.length()) {\n            String lastWord = s.substring(wordStartIndex);\n            result.append(orderedWord(lastWord));\n        }\n\n        return result.toString();\n    }\n\n    private String orderedWord(String word) {\n        char[] chars = word.toCharArray();\n        Arrays.sort(chars);\n        return new String(chars);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.anti_shuffle(\"Hi\")); // Expected: \"Hi\"\n        System.out.println(solution.anti_shuffle(\"hello\")); // Expected: \"ehllo\"\n        System.out.println(solution.anti_shuffle(\"Hello World!!!\")); // Expected: \"Hello !!!Wdlor\"\n        System.out.println(solution.anti_shuffle(\"Programming is fun!\")); // Expected: \"Pamgimnig is fnu!\"\n    }\n}\n"}
{"task_id": "Java/87", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You are given a 2 dimensional data, as a nested lists,\n     * which is similar to matrix, however, unlike matrices,\n     * each row may contain a different number of columns.\n     * Given lst, and integer x, find integers x in the list,\n     * and return list of lists, [[x1, y1], [x2, y2] ...] such that\n     * each list is a coordinate - (row, columns), starting with 0.\n     * Sort coordinates initially by rows in ascending order.\n     * Also, sort coordinates of the row by columns in descending order.\n     *\n     * Examples:\n     * get_row([\n     *   [1,2,3,4,5,6],\n     *   [1,2,3,4,1,6],\n     *   [1,2,3,4,5,1]\n     * ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n     * get_row([], 1) == []\n     * get_row([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j).equals(x)) {\n                    result.add(Arrays.asList(i, j));\n                }\n            }\n        }\n\n        // Sort by rows in ascending order\n        Collections.sort(result, new Comparator<List<Integer>>() {\n            @Override\n            public int compare(List<Integer> o1, List<Integer> o2) {\n                return o1.get(0).compareTo(o2.get(0));\n            }\n        });\n\n        // For each row, sort coordinates by columns in descending order\n        for (List<Integer> coord : result) {\n            if (coord.size() > 1) { // Ensure the list has at least two elements\n                Collections.sort(coord.subList(1, coord.size()), Collections.reverseOrder());\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<List<Integer>> lst1 = Arrays.asList(\n            Arrays.asList(1, 2, 3, 4, 5, 6),\n            Arrays.asList(1, 2, 3, 4, 1, 6),\n            Arrays.asList(1, 2, 3, 4, 5, 1)\n        );\n        System.out.println(solution.get_row(lst1, 1)); // Expected: [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n\n        List<List<Integer>> lst2 = new ArrayList<>();\n        System.out.println(solution.get_row(lst2, 1)); // Expected: []\n\n        List<List<Integer>> lst3 = Arrays.asList(\n            new ArrayList<>(),\n            Arrays.asList(1),\n            Arrays.asList(1, 2, 3)\n        );\n        System.out.println(solution.get_row(lst3, 3)); // Expected: [[2, 2]]\n    }\n}\n"}
{"task_id": "Java/88", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n\n    /**\n     * Given an array of non-negative integers, return a copy of the given array after sorting,\n     * you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n     * or sort it in descending order if the sum( first index value, last index value) is even.\n     *\n     * Note:\n     * * don't change the given array.\n     */\n    public List<Integer> sort_array(List<Integer> array) {\n        if (array == null || array.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        int sum = array.get(0) + array.get(array.size() - 1);\n        List<Integer> sortedArray = new ArrayList<>(array);\n\n        if (sum % 2 == 0) {\n            // Sort in descending order\n            sortedArray.sort(Collections.reverseOrder());\n        } else {\n            // Sort in ascending order\n            Collections.sort(sortedArray);\n        }\n\n        return sortedArray;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sort_array(Arrays.asList())); // []\n        System.out.println(solution.sort_array(Arrays.asList(5))); // [5]\n        System.out.println(solution.sort_array(Arrays.asList(2, 4, 3, 0, 1, 5))); // [0, 1, 2, 3, 4, 5]\n        System.out.println(solution.sort_array(Arrays.asList(2, 4, 3, 0, 1, 5, 6))); // [6, 5, 4, 3, 2, 1, 0]\n    }\n}\n"}
{"task_id": "Java/89", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Create a function encrypt that takes a string as an argument and\n     * returns a string encrypted with the alphabet being rotated.\n     * The alphabet should be rotated in a manner such that the letters\n     * shift down by two multiplied to two places.\n     * For example:\n     * encrypt(\"hi\") returns \"lm\"\n     * encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n     * encrypt(\"gf\") returns \"kj\"\n     * encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        StringBuilder encrypted = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                char base = Character.isUpperCase(c) ? 'A' : 'a';\n                int offset = ((c - base + 4) % 26);\n                encrypted.append((char) (base + offset));\n            } else {\n                encrypted.append(c);\n            }\n        }\n        return encrypted.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.encrypt(\"hi\"));       // Should print \"lm\"\n        System.out.println(solution.encrypt(\"asdfghjkl\")); // Should print \"ewhjklnop\"\n        System.out.println(solution.encrypt(\"gf\"));       // Should print \"kj\"\n        System.out.println(solution.encrypt(\"et\"));       // Should print \"ix\"\n\n        // Additional test cases\n        System.out.println(solution.encrypt(\"Hello, World!\")); // Should print \"Lipps, Asvph!\"\n        System.out.println(solution.encrypt(\"Zebra123\"));     // Should print \"Difve123\"\n    }\n}\n"}
{"task_id": "Java/90", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given a list of integers.\n     * Write a function next_smallest() that returns the 2nd smallest element of the list.\n     * Return null if there is no such element.\n     *\n     * @param lst The input list of integers\n     * @return Optional containing the 2nd smallest integer, or Optional.empty() if not available\n     */\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        // Remove duplicates and sort the list\n        Set<Integer> uniqueElements = new TreeSet<>(lst);\n        \n        // If there are less than 2 elements after removing duplicates, return Optional.empty()\n        if (uniqueElements.size() < 2) {\n            return Optional.empty();\n        }\n        \n        // Return the second element in the sorted set\n        Integer[] array = uniqueElements.toArray(new Integer[0]);\n        return Optional.of(array[1]);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.next_smallest(Arrays.asList(1, 2, 3, 4, 5))); // Expected: Optional[2]\n        System.out.println(solution.next_smallest(Arrays.asList(5, 1, 4, 3, 2))); // Expected: Optional[2]\n        System.out.println(solution.next_smallest(Arrays.asList()));             // Expected: Optional.empty\n        System.out.println(solution.next_smallest(Arrays.asList(1, 1)));         // Expected: Optional.empty\n        System.out.println(solution.next_smallest(Arrays.asList(5, 4, 3, 2, 1))); // Expected: Optional[2]\n    }\n}\n"}
{"task_id": "Java/91", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You'll be given a string of words, and your task is to count the number\n     * of boredoms. A boredom is a sentence that starts with the word \"I\".\n     * Sentences are delimited by '.', '?' or '!'.\n     *\n     * For example:\n     * >>> is_bored(\"Hello world\")\n     * 0\n     * >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n     * 1\n     */\n    public int is_bored(String S) {\n        if (S == null || S.isEmpty()) return 0;\n\n        String[] sentences = S.split(\"[.?!]\");\n        int boredomCount = 0;\n\n        for (String sentence : sentences) {\n            // Trim leading and trailing spaces to handle cases like \" I love this weather\"\n            String trimmedSentence = sentence.trim();\n            if (!trimmedSentence.isEmpty() && trimmedSentence.startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n\n        return boredomCount;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.is_bored(\"Hello world\")); // Expected output: 0\n        System.out.println(solution.is_bored(\"The sky is blue. The sun is shining. I love this weather\")); // Expected output: 1\n        System.out.println(solution.is_bored(\"I am bored. Are you? Yes, I am!\")); // Expected output: 2\n        System.out.println(solution.is_bored(\"No boring sentences here.\")); // Expected output: 0\n        System.out.println(solution.is_bored(\"I love Java. I also like Python. I enjoy coding.\")); // Expected output: 3\n    }\n}\n"}
{"task_id": "Java/92", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Create a function that takes 3 numbers.\n     * Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n     * Returns false in any other cases.\n     *\n     * Examples\n     * any_int(5, 2, 7) -> true\n     * any_int(3, 2, 2) -> false\n     * any_int(3, -2, 1) -> true\n     * any_int(3.6, -2.2, 2) -> false\n     */\n    public boolean any_int(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int a = (Integer) x;\n            int b = (Integer) y;\n            int c = (Integer) z;\n\n            return a == b + c || b == a + c || c == a + b;\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.any_int(5, 2, 7));   // true\n        System.out.println(solution.any_int(3, 2, 2));   // false\n        System.out.println(solution.any_int(3, -2, 1));  // true\n        System.out.println(solution.any_int(3.6, -2.2, 2)); // false (should return false)\n    }\n}\n"}
{"task_id": "Java/93", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Write a function that takes a message, and encodes in such a way that it swaps case of all letters,\n     * replaces all vowels in the message with the letter that appears 2 places ahead of that vowel in the\n     * English alphabet.\n     *\n     * Examples:\n     * >>> encode(\"test\")\n     * \"TGST\"\n     * >>> encode(\"This is a message\")\n     * \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        StringBuilder encodedMessage = new StringBuilder();\n        \n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                // Swap case\n                char swappedCaseChar = Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c);\n                \n                // Replace vowels with the letter 2 places ahead in the alphabet\n                switch (swappedCaseChar) {\n                    case 'A':\n                        encodedMessage.append('C');\n                        break;\n                    case 'E':\n                        encodedMessage.append('G');\n                        break;\n                    case 'I':\n                        encodedMessage.append('K');\n                        break;\n                    case 'O':\n                        encodedMessage.append('Q');\n                        break;\n                    case 'U':\n                        encodedMessage.append('W');\n                        break;\n                    case 'a':\n                        encodedMessage.append('c');\n                        break;\n                    case 'e':\n                        encodedMessage.append('g');\n                        break;\n                    case 'i':\n                        encodedMessage.append('k');\n                        break;\n                    case 'o':\n                        encodedMessage.append('q');\n                        break;\n                    case 'u':\n                        encodedMessage.append('w');\n                        break;\n                    default:\n                        // If it's not a vowel, just append the swapped case character\n                        encodedMessage.append(swappedCaseChar);\n                }\n            } else {\n                // Non-letter characters are appended as is\n                encodedMessage.append(c);\n            }\n        }\n        \n        return encodedMessage.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.encode(\"test\"));  // Expected: \"TGST\"\n        System.out.println(solution.encode(\"This is a message\"));  // Expected: \"tHKS KS C MGSSCGG\"\n        System.out.println(solution.encode(\"Hello World!\"));  // Expected: \"hKLLQ wOrld!\"\n    }\n}\n"}
{"task_id": "Java/94", "generation": "import java.util.List;\n\nclass Solution {\n    /**\n     * You are given a list of integers.\n     * You need to find the largest prime value and return the sum of its digits.\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        if (lst == null || lst.isEmpty()) {\n            return 0;\n        }\n\n        int maxPrime = -1;\n\n        for (int num : lst) {\n            if (isPrime(num)) {\n                maxPrime = Math.max(maxPrime, num);\n            }\n        }\n\n        if (maxPrime == -1) {\n            return 0;\n        }\n\n        return sumOfDigits(maxPrime);\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> lst1 = Arrays.asList(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3);\n        System.out.println(solution.skjkasdkd(lst1)); // Output: 10\n\n        List<Integer> lst2 = Arrays.asList(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1);\n        System.out.println(solution.skjkasdkd(lst2)); // Output: 25\n\n        List<Integer> lst3 = Arrays.asList(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3);\n        System.out.println(solution.skjkasdkd(lst3)); // Output: 13\n\n        List<Integer> lst4 = Arrays.asList(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6);\n        System.out.println(solution.skjkasdkd(lst4)); // Output: 11\n\n        List<Integer> lst5 = Arrays.asList(0, 81, 12, 3, 1, 21);\n        System.out.println(solution.skjkasdkd(lst5)); // Output: 3\n\n        List<Integer> lst6 = Arrays.asList(0, 8, 1, 2, 1, 7);\n        System.out.println(solution.skjkasdkd(lst6)); // Output: 7\n    }\n}\n"}
{"task_id": "Java/95", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a map, return True if all keys are strings and all keys are in lower case or in upper case, else return False.\n     * The function should return False is the given map is empty.\n     */\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        boolean allLowerCase = true;\n        boolean allUpperCase = true;\n\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String strKey = (String) key;\n            if (!strKey.equals(strKey.toLowerCase())) {\n                allLowerCase = false;\n            }\n            if (!strKey.equals(strKey.toUpperCase())) {\n                allUpperCase = false;\n            }\n        }\n\n        return allLowerCase || allUpperCase;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.check_dict_case(Map.of(\"a\", \"apple\", \"b\", \"banana\"))); // True\n        System.out.println(solution.check_dict_case(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"banana\"))); // False\n        System.out.println(solution.check_dict_case(Map.of(\"a\", \"apple\", 8, \"banana\", \"a\", \"apple\"))); // False\n        System.out.println(solution.check_dict_case(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\"))); // False\n        System.out.println(solution.check_dict_case(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))); // True\n    }\n}\n"}
{"task_id": "Java/96", "generation": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Solution {\n\n    /**\n     * Implement a function that takes an non-negative integer and returns an array of the first n\n     * integers that are prime numbers and less than n.\n     *\n     * @param n The upper limit (non-inclusive) to find prime numbers up to.\n     * @return A List containing prime numbers less than n.\n     */\n    public List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<>();\n        \n        for (int i = 2; i < n && primes.size() < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        \n        return primes;\n    }\n\n    /**\n     * Helper method to check if a number is prime.\n     *\n     * @param num The number to check.\n     * @return true if the number is prime, false otherwise.\n     */\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.count_up_to(5));   // Output: [2, 3]\n        System.out.println(solution.count_up_to(11));  // Output: [2, 3, 5, 7]\n        System.out.println(solution.count_up_to(0));   // Output: []\n        System.out.println(solution.count_up_to(20));  // Output: [2, 3, 5, 7, 11, 13, 17, 19]\n        System.out.println(solution.count_up_to(1));   // Output: []\n        System.out.println(solution.count_up_to(18));  // Output: [2, 3, 5, 7, 11, 13, 17]\n    }\n}\n"}
{"task_id": "Java/97", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Complete the function that takes two integers and returns\n     * the product of their unit digits.\n     * Assume the input is always valid.\n     * Examples:\n     * multiply(148, 412) should return 16.\n     * multiply(19, 28) should return 72.\n     * multiply(2020, 1851) should return 0.\n     * multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        // Extract the unit digits of both numbers\n        int unitDigitA = Math.abs(a % 10);\n        int unitDigitB = Math.abs(b % 10);\n\n        // Return the product of the unit digits\n        return unitDigitA * unitDigitB;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.multiply(148, 412)); // Expected output: 16\n        System.out.println(solution.multiply(19, 28));   // Expected output: 72\n        System.out.println(solution.multiply(2020, 1851)); // Expected output: 0\n        System.out.println(solution.multiply(14, -15));  // Expected output: 20\n    }\n}\n"}
{"task_id": "Java/98", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given a string s, count the number of uppercase vowels in even indices.\n     *\n     * For example:\n     * count_upper(\"aBCdEf\") returns 1\n     * count_upper(\"abcdefg\") returns 0\n     * count_upper(\"dBBE\") returns 0\n     */\n    public int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) { // Iterate over even indices\n            char c = s.charAt(i);\n            if (isUppercaseVowel(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isUppercaseVowel(char c) {\n        return c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U';\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.count_upper(\"aBCdEf\")); // Expected output: 1\n        System.out.println(solution.count_upper(\"abcdefg\")); // Expected output: 0\n        System.out.println(solution.count_upper(\"dBBE\")); // Expected output: 0\n        System.out.println(solution.count_upper(\"AeIoUc\")); // Expected output: 3\n        System.out.println(solution.count_upper(\"zYxWvUt\")); // Expected output: 2\n    }\n}\n"}
{"task_id": "Java/99", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Create a function that takes a value (string) representing a number\n     * and returns the closest integer to it. If the number is equidistant\n     * from two integers, round it away from zero.\n     *\n     * Examples:\n     * >>> closest_integer(\"10\")\n     * 10\n     * >>> closest_integer(\"15.3\")\n     * 15\n     * >>> closest_integer(\"14.5\")\n     * 15\n     * >>> closest_integer(\"-14.5\")\n     * -15\n     */\n    public int closest_integer(String value) {\n        double num = Double.parseDouble(value);\n        double floorValue = Math.floor(num);\n        double ceilValue = Math.ceil(num);\n\n        if (num - floorValue == 0.5 || ceilValue - num == 0.5) {\n            return (int)(num > 0 ? ceilValue : floorValue);\n        } else {\n            return (int)Math.round(num);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.closest_integer(\"10\"));   // Output: 10\n        System.out.println(solution.closest_integer(\"15.3\")); // Output: 15\n        System.out.println(solution.closest_integer(\"14.5\")); // Output: 15\n        System.out.println(solution.closest_integer(\"-14.5\"));// Output: -15\n        System.out.println(solution.closest_integer(\"0.5\"));  // Output: 1\n        System.out.println(solution.closest_integer(\"-0.5\")); // Output: -1\n    }\n}\n"}
{"task_id": "Java/100", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a positive integer n, you have to make a pile of n levels of stones.\n     * The first level has n stones.\n     * The number of stones in the next level is:\n     * - the next odd number if n is odd.\n     * - the next even number if n is even.\n     * Return the number of stones in each level in a list, where element at index\n     * i represents the number of stones in the level (i+1).\n     *\n     * Examples:\n     * >>> make_a_pile(3)\n     * [3, 5, 7]\n     */\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> result = new ArrayList<>();\n        int currentStones = n;\n        \n        for (int i = 0; i < n; i++) {\n            result.add(currentStones);\n            // Determine the next number of stones\n            if (currentStones % 2 == 0) {\n                currentStones += 2; // Next even number\n            } else {\n                currentStones += 2; // Next odd number\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.make_a_pile(3)); // Expected: [3, 5, 7]\n        System.out.println(solution.make_a_pile(4)); // Expected: [4, 6, 8, 10]\n        System.out.println(solution.make_a_pile(1)); // Expected: [1, 3]\n    }\n}\n"}
{"task_id": "Java/101", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You will be given a string of words separated by commas or spaces. Your task is\n     * to split the string into words and return an array of the words.\n     *\n     * For example:\n     * words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n     * words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six])\n     */\n    public List<String> words_string(String s) {\n        // Split the string by commas and spaces\n        String[] splitArray = s.split(\"[,\\\\s]+\");\n        return Arrays.asList(splitArray);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<String> result1 = solution.words_string(\"Hi, my name is John\");\n        System.out.println(result1.equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\")) ? \"Test 1 Passed\" : \"Test 1 Failed\");\n\n        List<String> result2 = solution.words_string(\"One, two, three, four, five, six\");\n        System.out.println(result2.equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\")) ? \"Test 2 Passed\" : \"Test 2 Failed\");\n\n        List<String> result3 = solution.words_string(\"Hello,world this is a test\");\n        System.out.println(result3.equals(Arrays.asList(\"Hello\", \"world\", \"this\", \"is\", \"a\", \"test\")) ? \"Test 3 Passed\" : \"Test 3 Failed\");\n\n        List<String> result4 = solution.words_string(\"Another,example,with,multiple,commas\");\n        System.out.println(result4.equals(Arrays.asList(\"Another\", \"example\", \"with\", \"multiple\", \"commas\")) ? \"Test 4 Passed\" : \"Test 4 Failed\");\n    }\n}\n"}
{"task_id": "Java/102", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * This function takes two positive numbers x and y and returns the\n     * biggest even integer number that is in the range [x, y] inclusive. If\n     * there's no such number, then the function should return -1.\n     *\n     * For example:\n     * choose_num(12, 15) = 14\n     * choose_num(13, 12) = -1\n     */\n    public int choose_num(int x, int y) {\n        // If the range is invalid or there's no even number in the range\n        if (x > y || (x % 2 != 0 && y % 2 != 0)) {\n            return -1;\n        }\n\n        // Find the biggest even number in the range [x, y]\n        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                return i;\n            }\n        }\n\n        // If no even number is found\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.choose_num(12, 15)); // Expected output: 14\n        System.out.println(solution.choose_num(13, 12)); // Expected output: -1\n        System.out.println(solution.choose_num(10, 20)); // Expected output: 20\n        System.out.println(solution.choose_num(17, 19)); // Expected output: -1\n        System.out.println(solution.choose_num(8, 8));   // Expected output: 8\n    }\n}\n"}
{"task_id": "Java/103", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given two positive integers n and m, and your task is to compute the\n     * average of the integers from n through m (including n and m).\n     * Round the answer to the nearest integer and convert that to binary.\n     * If n is greater than m, return -1.\n     * Example:\n     * rounded_avg(1, 5) => \"11\"\n     * rounded_avg(7, 5) => -1\n     * rounded_avg(10, 20) => \"1111\"\n     * rounded_avg(20, 33) => \"11011\"\n     */\n    public Object rounded_avg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        \n        long sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        \n        double average = Math.round((double) sum / (m - n + 1));\n        String binary = Long.toBinaryString((long) average);\n        \n        return binary;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.rounded_avg(1, 5));   // Expected output: \"11\"\n        System.out.println(solution.rounded_avg(7, 5));   // Expected output: -1\n        System.out.println(solution.rounded_avg(10, 20)); // Expected output: \"1111\"\n        System.out.println(solution.rounded_avg(20, 33)); // Expected output: \"11011\"\n    }\n}\n"}
{"task_id": "Java/104", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given a list of positive integers x. return a sorted list of all\n     * elements that hasn't any even digit.\n     *\n     * Note: Returned list should be sorted in increasing order.\n     *\n     * For example:\n     * >>> unique_digits(Arrays.asList(15, 33, 1422, 1))\n     * [1, 15, 33]\n     * >>> unique_digits(Arrays.asList(152, 323, 1422, 10))\n     * []\n     */\n    public List<Integer> unique_digits(List<Integer> x) {\n        return x.stream()\n                .filter(this::hasNoEvenDigits)\n                .sorted()\n                .collect(Collectors.toList());\n    }\n\n    private boolean hasNoEvenDigits(int number) {\n        while (number > 0) {\n            int digit = number % 10;\n            if (digit % 2 == 0) {\n                return false;\n            }\n            number /= 10;\n        }\n        return true;\n    }\n}\n\npublic class TestSolution {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> list1 = Arrays.asList(15, 33, 1422, 1);\n        System.out.println(\"Test Case 1: \" + solution.unique_digits(list1)); // Expected: [1, 15, 33]\n\n        // Test case 2\n        List<Integer> list2 = Arrays.asList(152, 323, 1422, 10);\n        System.out.println(\"Test Case 2: \" + solution.unique_digits(list2)); // Expected: []\n\n        // Test case 3\n        List<Integer> list3 = Arrays.asList(7, 89, 35, 123);\n        System.out.println(\"Test Case 3: \" + solution.unique_digits(list3)); // Expected: [35, 7, 89]\n\n        // Test case 4\n        List<Integer> list4 = Arrays.asList(20, 46, 88, 135);\n        System.out.println(\"Test Case 4: \" + solution.unique_digits(list4)); // Expected: [135]\n    }\n}\n"}
{"task_id": "Java/105", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n     * reverse the resulting array, and then replace each digit by its corresponding name from\n     * \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n     *\n     * @param arr input list of integers\n     * @return a list of strings representing the names of the digits in reverse sorted order\n     */\n    public List<String> by_length(List<Integer> arr) {\n        // Filter out numbers not between 1 and 9 inclusive\n        List<Integer> filtered = arr.stream()\n                                     .filter(num -> num >= 1 && num <= 9)\n                                     .sorted()\n                                     .collect(Collectors.toList());\n        \n        // Reverse the list\n        Collections.reverse(filtered);\n        \n        // Map each digit to its corresponding name\n        return filtered.stream()\n                       .map(digit -> switch (digit) {\n                           case 1 -> \"One\";\n                           case 2 -> \"Two\";\n                           case 3 -> \"Three\";\n                           case 4 -> \"Four\";\n                           case 5 -> \"Five\";\n                           case 6 -> \"Six\";\n                           case 7 -> \"Seven\";\n                           case 8 -> \"Eight\";\n                           case 9 -> \"Nine\";\n                           default -> \"\";\n                       })\n                       .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.by_length(Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3))); // [Eight, Five, Four, Three, Two, Two, One, One]\n        System.out.println(solution.by_length(Arrays.asList())); // []\n        System.out.println(solution.by_length(Arrays.asList(1, -1, 55))); // [One]\n        System.out.println(solution.by_length(Arrays.asList(9, 7, 3, 2, 4, 8, 6, 5, 1))); // [Nine, Eight, Seven, Six, Five, Four, Three, Two, One]\n    }\n}\n"}
{"task_id": "Java/106", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Implement the function f that takes n as a parameter,\n     * and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n     * or the sum of numbers from 1 to i otherwise.\n     * i starts from 1.\n     * the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n     * Example:\n     * f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                // Calculate factorial of even index\n                int factorial = calculateFactorial(i);\n                result.add(factorial);\n            } else {\n                // Calculate sum from 1 to odd index\n                int sum = calculateSum(i);\n                result.add(sum);\n            }\n        }\n        \n        return result;\n    }\n\n    private int calculateFactorial(int n) {\n        if (n == 0 || n == 1) {\n            return 1;\n        }\n        int factorial = 1;\n        for (int i = 2; i <= n; i++) {\n            factorial *= i;\n        }\n        return factorial;\n    }\n\n    private int calculateSum(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.f(5));  // Expected output: [1, 2, 6, 24, 15]\n        System.out.println(solution.f(3));  // Expected output: [1, 2, 6]\n        System.out.println(solution.f(0));  // Expected output: []\n    }\n}\n"}
{"task_id": "Java/107", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a positive integer n, return a tuple that has the number of even and odd\n     * integer palindromes that fall within the range(1, n), inclusive.\n     *\n     * @param n The upper limit (inclusive) to check for palindromic numbers.\n     * @return A List containing two integers: the first is the count of even palindromes,\n     *         and the second is the count of odd palindromes.\n     */\n    public List<Integer> even_odd_palindrome(int n) {\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        return Arrays.asList(evenCount, oddCount);\n    }\n\n    /**\n     * Helper method to check if a number is a palindrome.\n     *\n     * @param num The number to check.\n     * @return true if the number is a palindrome, false otherwise.\n     */\n    private boolean isPalindrome(int num) {\n        String str = Integer.toString(num);\n        int left = 0;\n        int right = str.length() - 1;\n\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.even_odd_palindrome(3));  // Output: [1, 2]\n        System.out.println(solution.even_odd_palindrome(12)); // Output: [4, 6]\n        System.out.println(solution.even_odd_palindrome(10)); // Output: [2, 5]\n    }\n}\n"}
{"task_id": "Java/108", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Write a function count_nums which takes an array of integers and returns\n     * the number of elements which has a sum of digits > 0.\n     * If a number is negative, then its first signed digit will be negative:\n     * e.g. -123 has signed digits -1, 2, and 3.\n     */\n    public int count_nums(List<Integer> arr) {\n        int count = 0;\n        for (int num : arr) {\n            if (sumOfDigits(num) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private int sumOfDigits(int num) {\n        boolean isNegative = num < 0;\n        int sum = 0;\n        while (num != 0) {\n            int digit = Math.abs(num % 10);\n            if (isNegative && sum == 0 && digit != 0) {\n                sum -= digit;\n            } else {\n                sum += digit;\n            }\n            num /= 10;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.count_nums(Arrays.asList())); // Expected output: 0\n        System.out.println(solution.count_nums(Arrays.asList(-1, 11, -11))); // Expected output: 1\n        System.out.println(solution.count_nums(Arrays.asList(1, 1, 2))); // Expected output: 3\n        System.out.println(solution.count_nums(Arrays.asList(-100, 5, -999, 1234))); // Expected output: 3\n    }\n}\n"}
{"task_id": "Java/109", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N]. The\n     * numbers in the array will be randomly ordered. Your task is to determine if\n     * it is possible to get an array sorted in non-decreasing order by performing\n     * the following operation on the given array:\n     *      You are allowed to perform right shift operation any number of times.\n     *\n     * One right shift operation means shifting all elements of the array by one\n     * position in the right direction. The last element of the array will be moved to\n     * the starting position in the array i.e. 0th index.\n     *\n     * If it is possible to obtain the sorted array by performing the above operation\n     * then return true else return False.\n     * If the given array is empty then return true.\n     *\n     * Note: The given list is guaranteed to have unique elements.\n     */\n    public boolean move_one_ball(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        int n = arr.size();\n        for (int i = 0; i < n - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                // Check if the array can be sorted by a single right shift\n                List<Integer> shiftedArr = new ArrayList<>(arr.subList(i + 1, n));\n                shiftedArr.addAll(arr.subList(0, i + 1));\n                boolean isSorted = true;\n                for (int j = 0; j < n - 1; j++) {\n                    if (shiftedArr.get(j) > shiftedArr.get(j + 1)) {\n                        isSorted = false;\n                        break;\n                    }\n                }\n                return isSorted;\n            }\n        }\n\n        // If no out-of-order pair found, the array is already sorted\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.move_one_ball(Arrays.asList(3, 4, 5, 1, 2))); // true\n        System.out.println(solution.move_one_ball(Arrays.asList(3, 5, 4, 1, 2))); // false\n        System.out.println(solution.move_one_ball(Arrays.asList()));             // true\n        System.out.println(solution.move_one_ball(Arrays.asList(1, 2, 3, 4, 5))); // true\n        System.out.println(solution.move_one_ball(Arrays.asList(2, 1, 3, 4, 5))); // false (requires more than one shift)\n    }\n}\n"}
{"task_id": "Java/110", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * In this problem, you will implement a function that takes two lists of numbers,\n     * and determines whether it is possible to perform an exchange of elements\n     * between them to make lst1 a list of only even numbers.\n     * There is no limit on the number of exchanged elements between lst1 and lst2.\n     * If it is possible to exchange elements between the lst1 and lst2 to make\n     * all the elements of lst1 to be even, return \"YES\".\n     * Otherwise, return \"NO\".\n     * For example:\n     * exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n     * exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n     * It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Count odd numbers in lst1 and even numbers in lst2\n        int oddCount = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCount++;\n            }\n        }\n\n        int evenCount = 0;\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCount++;\n            }\n        }\n\n        // If there are enough even numbers in lst2 to replace all odd numbers in lst1, return \"YES\"\n        return oddCount <= evenCount ? \"YES\" : \"NO\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4))); // Expected: YES\n        System.out.println(solution.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4))); // Expected: NO\n        System.out.println(solution.exchange(Arrays.asList(1, 3, 5, 7), Arrays.asList(2, 4, 6, 8))); // Expected: YES\n        System.out.println(solution.exchange(Arrays.asList(1, 3, 5, 7), Arrays.asList(1, 3, 5, 7))); // Expected: NO\n    }\n}\n"}
{"task_id": "Java/111", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given a string representing a space separated lowercase letters, return a dictionary\n     of the letter with the most repetition and containing the corresponding count.\n     If several letters have the same occurrence, return all of them.\n\n     Example:\n     histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n     histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n     histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n     histogram(\"b b b b a\") == {\"b\": 4}\n     histogram(\"\") == {}\n      */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> letterCount = new HashMap<>();\n        String[] letters = test.split(\" \");\n        \n        for (String letter : letters) {\n            if (!letter.isEmpty()) { // Ignore empty strings\n                letterCount.put(letter, letterCount.getOrDefault(letter, 0) + 1);\n            }\n        }\n\n        int maxCount = Collections.max(letterCount.values());\n        Map<String, Integer> result = new HashMap<>();\n        \n        for (Map.Entry<String, Integer> entry : letterCount.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.histogram(\"a b c\")); // {\"a\": 1, \"b\": 1, \"c\": 1}\n        System.out.println(solution.histogram(\"a b b a\")); // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"a b c a b\")); // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"b b b b a\")); // {\"b\": 4}\n        System.out.println(solution.histogram(\"\")); // {}\n    }\n}\n"}
{"task_id": "Java/112", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Task\n     * We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n     * then check if the result string is palindrome.\n     * A string is called palindrome if it reads the same backward as forward.\n     * You should return a tuple containing the result string and true/false for the check.\n     * Example\n     * For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n     * For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n     * For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverse_delete(String s, String c) {\n        Set<Character> charsToRemove = new HashSet<>();\n        for (char ch : c.toCharArray()) {\n            charsToRemove.add(ch);\n        }\n\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!charsToRemove.contains(ch)) {\n                sb.append(ch);\n            }\n        }\n\n        String resultString = sb.toString();\n        boolean isPalindrome = isPalindrome(resultString);\n\n        return Arrays.asList(resultString, isPalindrome);\n    }\n\n    private boolean isPalindrome(String str) {\n        int left = 0;\n        int right = str.length() - 1;\n\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.reverse_delete(\"abcde\", \"ae\"));  // Expected: [bcd, false]\n        System.out.println(solution.reverse_delete(\"abcdef\", \"b\"));  // Expected: [acdef, false]\n        System.out.println(solution.reverse_delete(\"abcdedcba\", \"ab\"));  // Expected: [cdedc, true]\n    }\n}\n"}
{"task_id": "Java/113", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given a list of strings, where each string consists of only digits,\n     * return a list. Each element i of the output should be \"the number of odd elements in the\n     * string i of the input.\" where all the i's should be replaced by the number\n     * of odd digits in the i\"th string of the input.\n     *\n     * @param lst The input list of strings consisting only of digits.\n     * @return A list of formatted strings indicating the count of odd elements in each input string.\n     */\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String str : lst) {\n            int oddCount = 0;\n            for (char c : str.toCharArray()) {\n                if ((c - '0') % 2 != 0) {\n                    oddCount++;\n                }\n            }\n            String formattedStr = \"the number of odd elements \" + oddCount + \"n the str\" + oddCount + \"ng \" + oddCount + \" of the \" + oddCount + \"nput.\";\n            result.add(formattedStr);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<String> test1 = Arrays.asList(\"1234567\");\n        System.out.println(solution.odd_count(test1));  // Expected: [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\n        List<String> test2 = Arrays.asList(\"3\", \"11111111\");\n        System.out.println(solution.odd_count(test2));  // Expected: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    }\n}\n"}
{"task_id": "Java/114", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given an array of integers nums, find the minimum sum of any non-empty sub-array\n     * of nums.\n     *\n     * Example:\n     * minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n     * minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        if (nums == null || nums.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list cannot be null or empty\");\n        }\n        \n        int currentMin = nums.get(0);\n        int globalMin = nums.get(0);\n\n        for (int i = 1; i < nums.size(); i++) {\n            currentMin = Math.min(nums.get(i), currentMin + nums.get(i));\n            globalMin = Math.min(globalMin, currentMin);\n        }\n\n        return globalMin;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4))); // Expected output: 1\n        System.out.println(solution.minSubArraySum(Arrays.asList(-1, -2, -3)));       // Expected output: -6\n        System.out.println(solution.minSubArraySum(Arrays.asList(1, 2, 3, -6, 1)));   // Expected output: -6\n        System.out.println(solution.minSubArraySum(Arrays.asList(-1, -1, -2, 1)));    // Expected output: -4\n        System.out.println(solution.minSubArraySum(Arrays.asList(1, 2, 3, 4, 5)));    // Expected output: 1\n    }\n}\n"}
{"task_id": "Java/115", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given a rectangular grid of wells. Each row represents a single well,\n     * and each 1 in a row represents a single unit of water.\n     * Each well has a corresponding bucket that can be used to extract water from it,\n     * and all buckets have the same capacity. Can't use buckets from other wells to extract water from one well.\n     * Your task is to use the buckets to empty the wells.\n     * Output the number of times you need to lower the buckets.\n     *\n     * Example 1:\n     * Input:\n     *      grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n     *      bucket_capacity : 1\n     * Output: 6\n     *\n     * Example 2:\n     * Input:\n     *      grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n     *      bucket_capacity : 2\n     * Output: 5\n     *\n     * Example 3:\n     * Input:\n     *      grid : [[0,0,0], [0,0,0]]\n     *      bucket_capacity : 5\n     * Output: 0\n     */\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        int totalDrops = 0;\n        for (List<Integer> well : grid) {\n            int waterUnits = 0;\n            for (int unit : well) {\n                waterUnits += unit;\n            }\n            totalDrops += Math.ceil((double) waterUnits / capacity);\n        }\n        return totalDrops;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test Case 1\n        List<List<Integer>> grid1 = Arrays.asList(\n                Arrays.asList(0, 0, 1, 0),\n                Arrays.asList(0, 1, 0, 0),\n                Arrays.asList(1, 1, 1, 1)\n        );\n        int capacity1 = 1;\n        System.out.println(\"Test Case 1: \" + solution.max_fill(grid1, capacity1)); // Expected output: 6\n\n        // Test Case 2\n        List<List<Integer>> grid2 = Arrays.asList(\n                Arrays.asList(0, 0, 1, 1),\n                Arrays.asList(0, 0, 0, 0),\n                Arrays.asList(1, 1, 1, 1),\n                Arrays.asList(0, 1, 1, 1)\n        );\n        int capacity2 = 2;\n        System.out.println(\"Test Case 2: \" + solution.max_fill(grid2, capacity2)); // Expected output: 5\n\n        // Test Case 3\n        List<List<Integer>> grid3 = Arrays.asList(\n                Arrays.asList(0, 0, 0),\n                Arrays.asList(0, 0, 0)\n        );\n        int capacity3 = 5;\n        System.out.println(\"Test Case 3: \" + solution.max_fill(grid3, capacity3)); // Expected output: 0\n    }\n}\n"}
{"task_id": "Java/116", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * In this Kata, you have to sort an array of integers according to\n     * number of ones in their binary representation in ascending order.\n     * For similar number of ones, sort based on decimal value.\n     *\n     * It must be implemented like this:\n     * >>> sort_array(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 4, 3, 5))\n     * >>> sort_array(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-4, -2, -6, -5, -3))\n     * >>> sort_array(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 4, 3))\n     */\n    public List<Integer> sort_array(List<Integer> arr) {\n        return arr.stream()\n                  .sorted(Comparator.comparingInt(this::countOnes)\n                                    .thenComparingInt(i -> i))\n                  .collect(Collectors.toList());\n    }\n\n    private int countOnes(int num) {\n        if (num < 0) {\n            num = ~num + 1; // Convert negative number to its positive equivalent\n        }\n        int onesCount = 0;\n        while (num > 0) {\n            onesCount += num & 1;\n            num >>= 1;\n        }\n        return onesCount;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(1, 5, 2, 3, 4);\n        System.out.println(\"Test Case 1: \" + solution.sort_array(test1).equals(Arrays.asList(1, 2, 4, 3, 5)));\n\n        List<Integer> test2 = Arrays.asList(-2, -3, -4, -5, -6);\n        System.out.println(\"Test Case 2: \" + solution.sort_array(test2).equals(Arrays.asList(-4, -2, -6, -5, -3)));\n\n        List<Integer> test3 = Arrays.asList(1, 0, 2, 3, 4);\n        System.out.println(\"Test Case 3: \" + solution.sort_array(test3).equals(Arrays.asList(0, 1, 2, 4, 3)));\n    }\n}\n"}
{"task_id": "Java/117", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given a string s and a natural number n, you have been tasked to implement\n     * a function that returns a list of all words from string s that contain exactly\n     * n consonants, in order these words appear in the string s.\n     * If the string s is empty then the function should return an empty list.\n     * Note: you may assume the input string contains only letters and spaces.\n     * Examples:\n     * select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n     * select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n     * select_words(\"simple white space\", 2) ==> []\n     * select_words(\"Hello world\", 4) ==> [\"world\"]\n     * select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> select_words(String s, int n) {\n        if (s == null || s.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        String[] words = s.split(\"\\\\s+\");\n        List<String> result = new ArrayList<>();\n\n        for (String word : words) {\n            long consonantCount = word.toLowerCase().chars()\n                    .filter(c -> \"bcdfghjklmnpqrstvwxyz\".indexOf(c) != -1)\n                    .count();\n\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.select_words(\"Mary had a little lamb\", 4)); // [\"little\"]\n        System.out.println(solution.select_words(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\n        System.out.println(solution.select_words(\"simple white space\", 2));     // []\n        System.out.println(solution.select_words(\"Hello world\", 4));            // [\"world\"]\n        System.out.println(solution.select_words(\"Uncle sam\", 3));              // [\"Uncle\"]\n    }\n}\n"}
{"task_id": "Java/118", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You are given a word. Your task is to find the closest vowel that stands between\n     * two consonants from the right side of the word (case sensitive).\n     *\n     * Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n     * find any vowel met the above condition.\n     *\n     * You may assume that the given string contains English letter only.\n     */\n    public String get_closest_vowel(String word) {\n        // Convert the input to a character array for easier manipulation\n        char[] chars = word.toCharArray();\n        \n        // Iterate from right to left, looking for vowels between consonants\n        for (int i = chars.length - 2; i > 0; i--) {\n            if (isVowel(chars[i]) && isConsonant(chars[i-1]) && isConsonant(chars[i+1])) {\n                return String.valueOf(chars[i]);\n            }\n        }\n        \n        // If no vowel found, return an empty string\n        return \"\";\n    }\n\n    private boolean isVowel(char c) {\n        return \"AEIOUaeiou\".indexOf(c) != -1;\n    }\n\n    private boolean isConsonant(char c) {\n        return !isVowel(c);\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.get_closest_vowel(\"yogurt\"));  // Output: \"u\"\n        System.out.println(solution.get_closest_vowel(\"FULL\"));    // Output: \"U\"\n        System.out.println(solution.get_closest_vowel(\"quick\"));   // Output: \"\"\n        System.out.println(solution.get_closest_vowel(\"ab\"));      // Output: \"\"\n        System.out.println(solution.get_closest_vowel(\"aBcDeFgHiJkLmNoPqRsTuVwXyZ\"));  // Output: \"u\"\n    }\n}\n"}
{"task_id": "Java/119", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given a list of two strings, both strings consist of open\n     * parentheses \"(\" or close parentheses \")\" only.\n     * Your job is to check if it is possible to concatenate the two strings in\n     * some order, that the resulting string will be good.\n     * A string S is considered to be good if and only if all parentheses in S\n     * are balanced. For example: the string \"(())()\" is good, while the string\n     * \"())\" is not.\n     * Return \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\n     Examples:\n     match_parens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n     match_parens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String match_parens(List<String> lst) {\n        // Check if the first string can be made good by itself\n        if (isGood(lst.get(0))) return \"Yes\";\n        \n        // Check if the second string can be made good by itself\n        if (isGood(lst.get(1))) return \"Yes\";\n\n        // Try concatenating in both possible orders and check for a good result\n        String combined1 = lst.get(0) + lst.get(1);\n        String combined2 = lst.get(1) + lst.get(0);\n\n        if (isGood(combined1) || isGood(combined2)) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n\n    // Helper method to check if a string has balanced parentheses\n    private boolean isGood(String s) {\n        int balance = 0;\n        for (char c : s.toCharArray()) {\n            if (c == '(') {\n                balance++;\n            } else if (c == ')') {\n                balance--;\n            }\n            // If balance goes negative, it means there are more closing parentheses\n            if (balance < 0) return false;\n        }\n        // If balance is zero, all parentheses are balanced\n        return balance == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.match_parens(Arrays.asList(\"()(\", \")\"))); // Expected: Yes\n        System.out.println(solution.match_parens(Arrays.asList(\")\", \")\")));   // Expected: No\n        System.out.println(solution.match_parens(Arrays.asList(\"(())\", \"()\"))); // Expected: Yes\n        System.out.println(solution.match_parens(Arrays.asList(\"(()\", \"())\"))); // Expected: Yes\n        System.out.println(solution.match_parens(Arrays.asList(\"(\", \"(\")));    // Expected: No\n    }\n}\n"}
{"task_id": "Java/120", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     Given an array arr of integers and a positive integer k, return a sorted list\n     of length k with the maximum k numbers in arr, in ascending order.\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Sort the array in descending order\n        Collections.sort(arr, Collections.reverseOrder());\n        \n        // Create a new list to store the top k elements\n        List<Integer> result = new ArrayList<>();\n        \n        // Add the first k elements from the sorted array to the result list\n        for (int i = 0; i < Math.min(k, arr.size()); i++) {\n            result.add(arr.get(i));\n        }\n        \n        // Sort the result list in ascending order before returning\n        Collections.sort(result);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> arr1 = Arrays.asList(-3, -4, 5);\n        int k1 = 3;\n        System.out.println(\"Test Case 1: \" + solution.maximum(arr1, k1)); // Expected: [-4, -3, 5]\n\n        // Test case 2\n        List<Integer> arr2 = Arrays.asList(4, -4, 4);\n        int k2 = 2;\n        System.out.println(\"Test Case 2: \" + solution.maximum(arr2, k2)); // Expected: [4, 4]\n\n        // Test case 3\n        List<Integer> arr3 = Arrays.asList(-3, 2, 1, 2, -1, -2, 1);\n        int k3 = 1;\n        System.out.println(\"Test Case 3: \" + solution.maximum(arr3, k3)); // Expected: [2]\n    }\n}\n"}
{"task_id": "Java/121", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n     *\n     * Examples:\n     * solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n     * solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n     * solution(Arrays.asList(30, 13, 24, 321)) ==> 0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.solution(Arrays.asList(5, 8, 7, 1))); // Expected output: 12\n        System.out.println(solution.solution(Arrays.asList(3, 3, 3, 3, 3))); // Expected output: 9\n        System.out.println(solution.solution(Arrays.asList(30, 13, 24, 321))); // Expected output: 0\n    }\n}\n"}
{"task_id": "Java/122", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given a non-empty array of integers arr and an integer k, return\n     the sum of the elements with at most two digits from the first k elements of arr.\n     \n     Example:\n     \n         Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n         Output: 24 # sum of 21 + 3\n     \n     Constraints:\n         1. 1 <= len(arr) <= 100\n         2. 1 <= k <= len(arr)\n      */\n    public int add_elements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < Math.min(k, arr.size()); i++) {\n            if (arr.get(i).toString().length() <= 2) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> arr1 = Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9);\n        int k1 = 4;\n        System.out.println(\"Test Case 1: \" + solution.add_elements(arr1, k1)); // Expected output: 24\n\n        // Test case 2\n        List<Integer> arr2 = Arrays.asList(10, 20, 30, 40, 50);\n        int k2 = 3;\n        System.out.println(\"Test Case 2: \" + solution.add_elements(arr2, k2)); // Expected output: 60\n\n        // Test case 3\n        List<Integer> arr3 = Arrays.asList(1, 2, 3, 4, 5);\n        int k3 = 5;\n        System.out.println(\"Test Case 3: \" + solution.add_elements(arr3, k3)); // Expected output: 15\n\n        // Test case 4\n        List<Integer> arr4 = Arrays.asList(100, 200, 300);\n        int k4 = 2;\n        System.out.println(\"Test Case 4: \" + solution.add_elements(arr4, k4)); // Expected output: 0\n\n        // Test case 5\n        List<Integer> arr5 = Arrays.asList(1, 11, 111, 1111);\n        int k5 = 3;\n        System.out.println(\"Test Case 5: \" + solution.add_elements(arr5, k5)); // Expected output: 12\n\n    }\n}\n"}
{"task_id": "Java/123", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n     *\n     * @param n The starting positive integer for the Collatz sequence.\n     * @return A List of Integer containing the odd numbers in the Collatz sequence, sorted in increasing order.\n     */\n    public List<Integer> get_odd_collatz(int n) {\n        List<Integer> result = new ArrayList<>();\n        while (n != 1) {\n            if (n % 2 == 1) { // Check if n is odd\n                result.add(n);\n            }\n            n = n % 2 == 0 ? n / 2 : 3 * n + 1; // Apply Collatz rules\n        }\n        result.add(1); // Add the final term, which is always 1\n        Collections.sort(result); // Sort the list in increasing order\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.get_odd_collatz(5)); // Expected: [1, 5]\n        System.out.println(solution.get_odd_collatz(7)); // Expected: [1, 7, 11, 22]\n        System.out.println(solution.get_odd_collatz(10)); // Expected: [1, 5, 13]\n        System.out.println(solution.get_odd_collatz(1)); // Expected: [1]\n    }\n}\n"}
{"task_id": "Java/124", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You have to write a function which validates a given date string and\n     * returns true if the date is valid otherwise false.\n     * The date is valid if all of the following rules are satisfied:\n     * 1. The date string is not empty.\n     * 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n     * 3. The months should not be less than 1 or higher than 12.\n     * 4. The date should be in the format: mm-dd-yyyy\n     *\n     * for example:\n     * valid_date(\"03-11-2000\") => true\n     * valid_date(\"15-01-2012\") => false\n     * valid_date(\"04-0-2040\") => false\n     * valid_date(\"06-04-2020\") => true\n     * valid_date(\"06/04/2020\") => false\n     */\n    public boolean valid_date(String date) {\n        if (date == null || date.isEmpty()) return false;\n\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) return false;\n\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\n        if (month < 1 || month > 12) return false;\n        if (day < 1 || day > 31) return false;\n\n        // Check for months with 30 days\n        if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) return false;\n\n        // Check for February and leap years\n        if (month == 2) {\n            if (day > 29) return false;\n            if (day == 29 && !isLeapYear(year)) return false;\n        }\n\n        return true;\n    }\n\n    private boolean isLeapYear(int year) {\n        return (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.valid_date(\"03-11-2000\")); // true\n        System.out.println(solution.valid_date(\"15-01-2012\")); // false\n        System.out.println(solution.valid_date(\"04-0-2040\"));  // false\n        System.out.println(solution.valid_date(\"06-04-2020\")); // true\n        System.out.println(solution.valid_date(\"06/04/2020\")); // false\n    }\n}\n"}
{"task_id": "Java/125", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n     should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n     alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n     Examples:\n     split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\n     split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]\n     split_words(\"abcdef\") == 3\n     */\n    public Object split_words(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\"\\\\s+\"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && ((c - 'a') % 2 == 1)) {\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.split_words(\"Hello world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.split_words(\"Hello,world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.split_words(\"abcdef\"));      // 3\n\n        // Additional test cases\n        System.out.println(solution.split_words(\"a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z\")); // 13\n        System.out.println(solution.split_words(\"A quick, brown fox!\")); // [\"A\", \"quick,\", \"brown\", \"fox!\"]\n        System.out.println(solution.split_words(\"noSpacesOrCommas\")); // 5\n    }\n}\n"}
{"task_id": "Java/126", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a list of numbers, return whether or not they are sorted in ascending order.\n     * If the number appears more than twice, return false. Assume no negative numbers and only integers.\n     *\n     * Examples:\n     * is_sorted(Arrays.asList(5)) -> true\n     * is_sorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n     * is_sorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n     * is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n     * is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n     * is_sorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n     * is_sorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n     * is_sorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean is_sorted(List<Integer> lst) {\n        if (lst == null || lst.size() <= 1) {\n            return true;\n        }\n\n        int count = 1; // To keep track of consecutive duplicates\n\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i).equals(lst.get(i - 1))) {\n                count++;\n                if (count > 2) {\n                    return false;\n                }\n            } else {\n                count = 1;\n            }\n\n            if (lst.get(i) < lst.get(i - 1)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.is_sorted(Arrays.asList(5))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 3, 4, 5))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 3, 2, 4, 5))); // false\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7))); // false\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 2, 3, 3, 4))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 2, 2, 3, 4))); // false\n    }\n}\n"}
{"task_id": "Java/127", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You are given two intervals,\n     * where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n     * The given intervals are closed which means that the interval (start, end)\n     * includes both start and end.\n     * For each given interval, it is assumed that its start is less or equal its end.\n     * Your task is to determine whether the length of intersection of these two\n     * intervals is a prime number.\n     * Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n     * which its length is 1, which not a prime number.\n     * If the length of the intersection is a prime number, return \"YES\",\n     * otherwise, return \"NO\".\n     * If the two intervals don't intersect, return \"NO\".\n     *\n     * @param interval1 The first interval as a list of two integers [start1, end1].\n     * @param interval2 The second interval as a list of two integers [start2, end2].\n     * @return \"YES\" if the length of intersection is a prime number, otherwise \"NO\".\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n\n        // Find the maximum of the two starts and minimum of the two ends\n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n\n        // Check if there is an intersection\n        if (intersectionStart > intersectionEnd) {\n            return \"NO\";\n        }\n\n        // Calculate the length of the intersection\n        int intersectionLength = intersectionEnd - intersectionStart + 1;\n\n        // Check if the length is a prime number\n        if (isPrime(intersectionLength)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    /**\n     * Helper method to check if a number is prime.\n     *\n     * @param num The number to check.\n     * @return true if the number is prime, false otherwise.\n     */\n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.intersection(Arrays.asList(1, 2), Arrays.asList(2, 3))); // NO\n        System.out.println(solution.intersection(Arrays.asList(-1, 1), Arrays.asList(0, 4))); // NO\n        System.out.println(solution.intersection(Arrays.asList(-3, -1), Arrays.asList(-5, 5))); // YES\n    }\n}\n"}
{"task_id": "Java/128", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given an array arr of integers and you need to return\n     * sum of magnitudes of integers multiplied by product of all signs\n     * of each number in the array, represented by 1, -1 or 0.\n     * Note: return None for empty arr.\n     *\n     * Example:\n     * >>> prod_signs(Arrays.asList(1, 2, 2, -4)) == -9\n     * >>> prod_signs(Arrays.asList(0, 1)) == 0\n     * >>> prod_signs(Arrays.asList()) == Optional.empty()\n     */\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int sumOfMagnitudes = 0;\n        int productOfSigns = 1;\n\n        for (Integer num : arr) {\n            sumOfMagnitudes += Math.abs(num);\n            if (num == 0) {\n                productOfSigns = 0;\n                break;\n            } else if (num < 0) {\n                productOfSigns *= -1;\n            }\n        }\n\n        return Optional.of(sumOfMagnitudes * productOfSigns);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.prod_signs(Arrays.asList(1, 2, 2, -4))); // Expected output: Optional[-9]\n        System.out.println(solution.prod_signs(Arrays.asList(0, 1)));        // Expected output: Optional[0]\n        System.out.println(solution.prod_signs(Arrays.asList()));           // Expected output: Optional.empty\n    }\n}\n"}
{"task_id": "Java/129", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n     each cell of the grid contains a value. Every integer in the range [1, N * N]\n     inclusive appears exactly once on the cells of the grid.\n\n     You have to find the minimum path of length k in the grid. You can start\n     from any cell, and in each step you can move to any of the neighbor cells,\n     in other words, you can go to cells which share an edge with your current\n     cell.\n     Please note that a path of length k means visiting exactly k cells (not\n     necessarily distinct).\n     You CANNOT go off the grid.\n     A path A (of length k) is considered less than a path B (of length k) if\n     after making the ordered lists of the values on the cells that A and B go\n     through (let's call them lst_A and lst_B), lst_A is lexicographically less\n     than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n     such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n     lst_A[j] = lst_B[j].\n     It is guaranteed that the answer is unique.\n     Return an ordered list of the values on the cells that the minimum path go through.\n\n     Examples:\n\n         Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n         Output: [1, 2, 1]\n\n         Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n         Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                pq.offer(new int[]{grid.get(i).get(j), i, j});\n            }\n        }\n\n        List<Integer> path = new ArrayList<>();\n        while (!pq.isEmpty() && k > 0) {\n            int[] curr = pq.poll();\n            path.add(curr[0]);\n            if (k == 1) break;\n\n            // Add neighbors to the priority queue\n            for (int[] dir : new int[][]{{-1, 0}, {1, 0}, {0, -1}, {0, 1}}) {\n                int x = curr[1] + dir[0];\n                int y = curr[2] + dir[1];\n                if (x >= 0 && x < n && y >= 0 && y < n) {\n                    pq.offer(new int[]{grid.get(x).get(y), x, y});\n                }\n            }\n\n            k--;\n        }\n\n        return path;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<List<Integer>> grid1 = Arrays.asList(\n            Arrays.asList(1, 2, 3),\n            Arrays.asList(4, 5, 6),\n            Arrays.asList(7, 8, 9)\n        );\n        int k1 = 3;\n        System.out.println(solution.minPath(grid1, k1)); // Output: [1, 2, 1]\n\n        // Test case 2\n        List<List<Integer>> grid2 = Arrays.asList(\n            Arrays.asList(5, 9, 3),\n            Arrays.asList(4, 1, 6),\n            Arrays.asList(7, 8, 2)\n        );\n        int k2 = 1;\n        System.out.println(solution.minPath(grid2, k2)); // Output: [1]\n    }\n}\n"}
{"task_id": "Java/130", "generation": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Solution {\n    /**\n     * Generates the first n + 1 numbers of the Tribonacci sequence.\n     *\n     * @param n A non-negative integer representing the length of the sequence.\n     * @return A list containing the first n + 1 numbers of the Tribonacci sequence.\n     */\n    public List<Integer> tri(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Input must be a non-negative integer.\");\n        }\n\n        List<Integer> result = new ArrayList<>();\n        // Base cases\n        if (n >= 0) result.add(3);\n        if (n >= 1) result.add(2); // tri(2) = 1 + (2 / 2) = 2\n\n        for (int i = 2; i <= n; i++) {\n            int nextValue;\n            if (i % 2 == 0) {\n                nextValue = 1 + i / 2;\n            } else {\n                nextValue = result.get(i - 1) + result.get(i - 2) + result.get(i);\n            }\n            result.add(nextValue);\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.tri(3)); // Expected: [3, 2, 8]\n        System.out.println(solution.tri(5)); // Expected: [3, 2, 8, 14, 27, 60]\n        System.out.println(solution.tri(0)); // Expected: [3]\n        System.out.println(solution.tri(1)); // Expected: [3, 2]\n    }\n}\n"}
{"task_id": "Java/131", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     Given a positive integer n, return the product of the odd digits.\n     Return 0 if all digits are even.\n     For example:\n     digits(1)  == 1\n     digits(4)  == 0\n     digits(235) == 15\n     */\n    public int digits(int n) {\n        int product = 1;\n        boolean hasOddDigit = false;\n\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n                hasOddDigit = true;\n            }\n            n /= 10;\n        }\n\n        return hasOddDigit ? product : 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.digits(1));   // Output: 1\n        System.out.println(solution.digits(4));   // Output: 0\n        System.out.println(solution.digits(235)); // Output: 15\n        System.out.println(solution.digits(2468)); // Output: 0\n        System.out.println(solution.digits(13579)); // Output: 945\n    }\n}\n"}
{"task_id": "Java/132", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Create a function that takes a string as input which contains only square brackets.\n     * The function should return true if and only if there is a valid subsequence of brackets\n     * where at least one bracket in the subsequence is nested.\n     *\n     * @param string the input string containing only square brackets\n     * @return true if there is a nested subsequence, false otherwise\n     */\n    public boolean is_nested(String string) {\n        int balance = 0;\n        boolean hasNested = false;\n\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                balance++;\n                if (balance > 1) {\n                    hasNested = true;\n                }\n            } else if (c == ']') {\n                balance--;\n                if (balance < 0) {\n                    return false; // Unbalanced brackets\n                }\n            }\n        }\n\n        return hasNested && balance == 0; // Ensure all brackets are balanced and there is at least one nested pair\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.is_nested(\"[[]]\")); // true\n        System.out.println(solution.is_nested(\"[]]]]]]][[[[[]\")); // false\n        System.out.println(solution.is_nested(\"[][]\")); // false\n        System.out.println(solution.is_nested(\"[]\")); // false\n        System.out.println(solution.is_nested(\"[[][]]\")); // true\n        System.out.println(solution.is_nested(\"[[]][[\")); // true\n    }\n}\n"}
{"task_id": "Java/133", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     You are given a list of numbers.\n     You need to return the sum of squared numbers in the given list,\n     round each element in the list to the upper int(Ceiling) first.\n     Examples:\n     For lst = [1,2,3] the output should be 14\n     For lst = [1,4,9] the output should be 98\n     For lst = [1,3,5,7] the output should be 84\n     For lst = [1.4,4.2,0] the output should be 29\n     For lst = [-2.4,1,1] the output should be 6\n      */\n    public int sum_squares(List<Double> lst) {\n        return lst.stream()\n                  .mapToDouble(num -> Math.ceil(num))\n                  .map(num -> num * num)\n                  .sum();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sum_squares(List.of(1.0, 2.0, 3.0))); // Should print 14\n        System.out.println(solution.sum_squares(List.of(1.0, 4.0, 9.0))); // Should print 98\n        System.out.println(solution.sum_squares(List.of(1.0, 3.0, 5.0, 7.0))); // Should print 84\n        System.out.println(solution.sum_squares(List.of(1.4, 4.2, 0.0))); // Should print 29\n        System.out.println(solution.sum_squares(List.of(-2.4, 1.0, 1.0))); // Should print 6\n    }\n}\n"}
{"task_id": "Java/134", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Create a function that returns true if the last character\n     * of a given string is an alphabetical character and is not\n     * a part of a word, and false otherwise.\n     * Note: \"word\" is a group of characters separated by space.\n     *\n     * Examples:\n     * check_if_last_char_is_a_letter(\"apple pie\") -> false\n     * check_if_last_char_is_a_letter(\"apple pi e\") -> true\n     * check_if_last_char_is_a_letter(\"apple pi e \") -> false\n     * check_if_last_char_is_a_letter(\"\") -> false\n     */\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        if (txt == null || txt.isEmpty()) {\n            return false;\n        }\n\n        char lastChar = txt.charAt(txt.length() - 1);\n        \n        // Check if the last character is a letter and not part of a word\n        return Character.isLetter(lastChar) && !Character.isWhitespace(txt.charAt(txt.length() - 2));\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.check_if_last_char_is_a_letter(\"apple pie\"));   // false\n        System.out.println(solution.check_if_last_char_is_a_letter(\"apple pi e\"));  // true\n        System.out.println(solution.check_if_last_char_is_a_letter(\"apple pi e \")); // false\n        System.out.println(solution.check_if_last_char_is_a_letter(\"\"));            // false\n        System.out.println(solution.check_if_last_char_is_a_letter(\"a b c d e f g h i j k l m n o p q r s t u v w x y z \")); // false\n        System.out.println(solution.check_if_last_char_is_a_letter(\"z\"));           // true\n    }\n}\n"}
{"task_id": "Java/135", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Create a function which returns the largest index of an element which\n     * is not greater than or equal to the element immediately preceding it. If\n     * no such element exists then return -1. The given array will not contain\n     * duplicate values.\n     *\n     * Examples:\n     * can_arrange(Arrays.asList(1,2,4,3,5)) = 3\n     * can_arrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int can_arrange(List<Integer> arr) {\n        if (arr == null || arr.size() < 2) {\n            return -1;\n        }\n\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.can_arrange(Arrays.asList(1, 2, 4, 3, 5))); // Expected output: 3\n        System.out.println(solution.can_arrange(Arrays.asList(1, 2, 3)));       // Expected output: -1\n        System.out.println(solution.can_arrange(Arrays.asList(5, 4, 3, 2, 1))); // Expected output: 0\n        System.out.println(solution.can_arrange(Arrays.asList(1, 3, 5, 7, 6))); // Expected output: 3\n    }\n}\n"}
{"task_id": "Java/136", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Create a function that returns a tuple (a, b), where 'a' is\n     * the largest of negative integers, and 'b' is the smallest\n     * of positive integers in a list.\n     * If there is no negative or positive integers, return them as None.\n     *\n     * Examples:\n     * largest_smallest_integers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n     * largest_smallest_integers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n     * largest_smallest_integers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Arrays.asList(Optional.empty(), Optional.empty());\n        }\n\n        Optional<Integer> smallestPositive = lst.stream()\n                .filter(n -> n > 0)\n                .min(Integer::compare);\n\n        Optional<Integer> largestNegative = lst.stream()\n                .filter(n -> n < 0)\n                .max(Integer::compare);\n\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(2, 4, 1, 3, 5, 7))); // (Optional.empty(), Optional.of(1))\n        System.out.println(solution.largest_smallest_integers(Arrays.asList()));                // (Optional.empty(), Optional.empty())\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(0)));               // (Optional.empty(), Optional.empty())\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(-2, -4, -1, -3)));  // (Optional.of(-1), Optional.empty())\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(2, -4, 1, -3, 5))); // (Optional.empty(), Optional.of(1))\n    }\n}\n"}
{"task_id": "Java/137", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Create a function that takes integers, floats, or strings representing\n     * real numbers, and returns the larger variable in its given variable type.\n     * Return None if the values are equal.\n     * Note: If a real number is represented as a string, the floating point might be . or ,\n     *\n     * compare_one(1, 2.5) -> Optional.of(2.5)\n     * compare_one(1, \"2,3\") -> Optional.of(\"2,3\")\n     * compare_one(\"5,1\", \"6\") -> Optional.of(\"6\")\n     * compare_one(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compare_one(Object a, Object b) {\n        double numA = parseNumber(a);\n        double numB = parseNumber(b);\n\n        if (numA == numB) {\n            return Optional.empty();\n        } else if (numA > numB) {\n            return Optional.of(a);\n        } else {\n            return Optional.of(b);\n        }\n    }\n\n    private double parseNumber(Object value) {\n        if (value instanceof Integer) {\n            return ((Integer) value).doubleValue();\n        } else if (value instanceof Float) {\n            return ((Float) value).doubleValue();\n        } else if (value instanceof String) {\n            String strValue = (String) value;\n            // Replace comma with dot for parsing\n            strValue = strValue.replace(',', '.');\n            try {\n                return Double.parseDouble(strValue);\n            } catch (NumberFormatException e) {\n                throw new IllegalArgumentException(\"Invalid number format: \" + strValue, e);\n            }\n        } else {\n            throw new IllegalArgumentException(\"Unsupported type: \" + value.getClass().getName());\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.compare_one(1, 2.5)); // Optional[2.5]\n        System.out.println(solution.compare_one(1, \"2,3\")); // Optional[2,3]\n        System.out.println(solution.compare_one(\"5,1\", \"6\")); // Optional[6]\n        System.out.println(solution.compare_one(\"1\", 1)); // Optional.empty\n    }\n}\n"}
{"task_id": "Java/138", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n     * Example:\n     * is_equal_to_sum_even(4) == false\n     * is_equal_to_sum_even(6) == false\n     * is_equal_to_sum_even(8) == true\n     */\n    public boolean is_equal_to_sum_even(int n) {\n        // The smallest sum of 4 positive even numbers is 2 + 2 + 2 + 2 = 8.\n        if (n < 8 || n % 2 != 0) {\n            return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"is_equal_to_sum_even(4): \" + solution.is_equal_to_sum_even(4)); // false\n        System.out.println(\"is_equal_to_sum_even(6): \" + solution.is_equal_to_sum_even(6)); // false\n        System.out.println(\"is_equal_to_sum_even(8): \" + solution.is_equal_to_sum_even(8)); // true\n        System.out.println(\"is_equal_to_sum_even(10): \" + solution.is_equal_to_sum_even(10)); // true\n        System.out.println(\"is_equal_to_sum_even(12): \" + solution.is_equal_to_sum_even(12)); // true\n        System.out.println(\"is_equal_to_sum_even(14): \" + solution.is_equal_to_sum_even(14)); // true\n        System.out.println(\"is_equal_to_sum_even(16): \" + solution.is_equal_to_sum_even(16)); // true\n        System.out.println(\"is_equal_to_sum_even(7): \" + solution.is_equal_to_sum_even(7)); // false\n    }\n}\n"}
{"task_id": "Java/139", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * The Brazilian factorial is defined as:\n     * brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n     * where n > 0\n     *\n     * For example:\n     * >>> special_factorial(4)\n     * 288\n     *\n     * The function will receive an integer as input and should return the special factorial of this integer.\n     */\n    public long special_factorial(int n) {\n        if (n == 0 || n == 1) {\n            return 1;\n        }\n        \n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    private long factorial(int num) {\n        if (num == 0 || num == 1) {\n            return 1;\n        }\n        \n        long fact = 1;\n        for (int i = 2; i <= num; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"special_factorial(4): \" + solution.special_factorial(4)); // Expected: 288\n        System.out.println(\"special_factorial(3): \" + solution.special_factorial(3)); // Expected: 12\n        System.out.println(\"special_factorial(5): \" + solution.special_factorial(5)); // Expected: 34560\n        System.out.println(\"special_factorial(1): \" + solution.special_factorial(1)); // Expected: 1\n    }\n}\n"}
{"task_id": "Java/140", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a string text, replace all spaces in it with underscores,\n     * and if a string has more than 2 consecutive spaces,\n     * then replace all consecutive spaces with -\n     *\n     * @param text the input string to process\n     * @return the processed string\n     */\n    public String fix_spaces(String text) {\n        StringBuilder result = new StringBuilder();\n        int spaceCount = 0;\n\n        for (char c : text.toCharArray()) {\n            if (c == ' ') {\n                spaceCount++;\n                if (spaceCount > 2) {\n                    // Replace more than 2 consecutive spaces with '-'\n                    if (result.length() > 0 && result.charAt(result.length() - 1) != '-') {\n                        result.append('-');\n                    }\n                } else {\n                    // Add a single underscore for each space\n                    result.append('_');\n                }\n            } else {\n                spaceCount = 0;\n                result.append(c);\n            }\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.fix_spaces(\"Example\"));       // Output: Example\n        System.out.println(solution.fix_spaces(\"Example 1\"));     // Output: Example_1\n        System.out.println(solution.fix_spaces(\" Example 2\"));    // Output: _Example_2\n        System.out.println(solution.fix_spaces(\" Example   3\"));  // Output: _Example-3\n        System.out.println(solution.fix_spaces(\"  Leading spaces\"));  // Output: __Leading_spaces\n        System.out.println(solution.fix_spaces(\"Trailing spaces  \"));  // Output: Trailing_spaces--\n    }\n}\n"}
{"task_id": "Java/141", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Create a function which takes a string representing a file's name, and returns\n     * \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n     * A file's name is considered to be valid if and only if all the following conditions\n     * are met:\n     * - There should not be more than three digits ('0'-'9') in the file's name.\n     * - The file's name contains exactly one dot '.'\n     * - The substring before the dot should not be empty, and it starts with a letter from\n     *   the latin alphapet ('a'-'z' and 'A'-'Z').\n     * - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n     * Examples:\n     * file_name_check(\"example.txt\") # => \"Yes\"\n     * file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String file_name_check(String file_name) {\n        // Check for exactly one dot\n        int dotCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (c == '.') {\n                dotCount++;\n            }\n        }\n        if (dotCount != 1) return \"No\";\n\n        // Split the filename into two parts: before and after the dot\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length != 2) return \"No\"; // Should have exactly one dot\n\n        // Check for empty part before the dot\n        if (parts[0].isEmpty()) return \"No\";\n\n        // Check if the first character is a letter\n        char firstChar = parts[0].charAt(0);\n        if (!Character.isLetter(firstChar)) return \"No\";\n\n        // Check for more than three digits in the file name\n        int digitCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n        }\n        if (digitCount > 3) return \"No\";\n\n        // Check the extension part after the dot\n        String ext = parts[1];\n        if (!ext.equals(\"txt\") && !ext.equals(\"exe\") && !ext.equals(\"dll\")) return \"No\";\n\n        return \"Yes\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.file_name_check(\"example.txt\"));  // Expected: Yes\n        System.out.println(solution.file_name_check(\"1example.dll\")); // Expected: No (starts with a digit)\n        System.out.println(solution.file_name_check(\".txt\"));         // Expected: No (empty part before the dot)\n        System.out.println(solution.file_name_check(\"example.exe\"));  // Expected: Yes\n        System.out.println(solution.file_name_check(\"example123.dll\"));// Expected: Yes\n        System.out.println(solution.file_name_check(\"example4567.dll\"));// Expected: No (more than three digits)\n    }\n}\n"}
{"task_id": "Java/142", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n     Examples:\n     For lst = [1,2,3] the output should be 6\n     For lst = []  the output should be 0\n     For lst = [-1,-5,2,-1,-5]  the output should be -126\n      */\n    public int sum_squares(List<Integer> lst) {\n        if (lst == null || lst.isEmpty()) {\n            return 0;\n        }\n\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int value = lst.get(i);\n            if ((i + 1) % 3 == 0) {\n                sum += Math.pow(value, 2);\n            } else if ((i + 1) % 4 == 0 && (i + 1) % 3 != 0) {\n                sum += Math.pow(value, 3);\n            }\n        }\n\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sum_squares(Arrays.asList(1, 2, 3))); // Expected output: 6\n        System.out.println(solution.sum_squares(Arrays.asList()));       // Expected output: 0\n        System.out.println(solution.sum_squares(Arrays.asList(-1, -5, 2, -1, -5))); // Expected output: -126\n\n        // Additional test cases\n        System.out.println(solution.sum_squares(Arrays.asList(4, 8, 12, 16, 20))); // Expected output: 3792 (4^2 + 12^2 + 16^3)\n        System.out.println(solution.sum_squares(Arrays.asList(-3, -6, -9, -12, -15, -18))); // Expected output: -108 (-9^2 + -12^3)\n    }\n}\n"}
{"task_id": "Java/143", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given a string representing a sentence,\n     * the sentence contains some words separated by a space,\n     * and you have to return a string that contains the words from the original sentence,\n     * whose lengths are prime numbers,\n     * the order of the words in the new string should be the same as the original one.\n     *\n     * Example 1:\n     * Input: sentence = \"This is a test\"\n     * Output: \"is\"\n     *\n     * Example 2:\n     * Input: sentence = \"lets go for swimming\"\n     * Output: \"go for\"\n     *\n     * Constraints:\n     * * 1 <= len(sentence) <= 100\n     * * sentence contains only letters\n     */\n    public String words_in_sentence(String sentence) {\n        List<String> words = Arrays.asList(sentence.split(\" \"));\n        StringBuilder result = new StringBuilder();\n        \n        for (String word : words) {\n            if (isPrime(word.length())) {\n                if (result.length() > 0) {\n                    result.append(\" \");\n                }\n                result.append(word);\n            }\n        }\n        \n        return result.toString();\n    }\n\n    private boolean isPrime(int number) {\n        if (number <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= number; i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.words_in_sentence(\"This is a test\")); // Output: \"is\"\n        System.out.println(solution.words_in_sentence(\"lets go for swimming\")); // Output: \"go for\"\n        System.out.println(solution.words_in_sentence(\"one two three four five six seven eight nine ten\")); // Output: \"three five seven\"\n    }\n}\n"}
{"task_id": "Java/144", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Your task is to implement a function that will simplify the expression\n     * x * n. The function returns true if x * n evaluates to a whole number and false\n     * otherwise. Both x and n, are string representation of a fraction, and have the following format,\n     * <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n     *\n     * You can assume that x, and n are valid fractions, and do not have zero as denominator.\n     */\n    public boolean simplify(String x, String n) {\n        // Split the strings into numerator and denominator\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n\n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n\n        // Simplify the expression (x * n) / 1\n        int resultNumerator = xNumerator * nNumerator;\n        int resultDenominator = xDenominator * nDenominator;\n\n        // Check if the result is a whole number\n        return resultNumerator % resultDenominator == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.simplify(\"1/5\", \"5/1\")); // true\n        System.out.println(solution.simplify(\"1/6\", \"2/1\")); // false\n        System.out.println(solution.simplify(\"7/10\", \"10/2\")); // false\n        System.out.println(solution.simplify(\"3/4\", \"4/3\")); // true\n        System.out.println(solution.simplify(\"5/8\", \"8/5\")); // true\n        System.out.println(solution.simplify(\"9/16\", \"16/9\")); // true\n    }\n}\n"}
{"task_id": "Java/145", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Write a function which sorts the given list of integers in ascending order according to the sum of their digits.\n     * Note: if there are several items with similar sum of their digits, order them based on their index in original list.\n     * If an integer is negative, then its first digit will be negative:\n     * e.g. -123 has digits -1, 2, and 3.\n     *\n     * For example:\n     * >>> order_by_points(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n     * >>> order_by_points(Arrays.asList()) == []\n     */\n    public List<Integer> order_by_points(List<Integer> nums) {\n        return nums.stream()\n                   .sorted(Comparator.comparingInt(Solution::digitSum)\n                                     .thenComparingInt(nums::indexOf))\n                   .collect(Collectors.toList());\n    }\n\n    private static int digitSum(Integer num) {\n        if (num == 0) return 0;\n        boolean isNegative = num < 0;\n        int sum = 0;\n        String numStr = Integer.toString(num);\n        for (int i = isNegative ? 1 : 0; i < numStr.length(); i++) {\n            sum += Character.getNumericValue(numStr.charAt(i));\n        }\n        return isNegative ? -sum : sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(1, 11, -1, -11, -12);\n        System.out.println(\"Test Case 1: \" + solution.order_by_points(test1)); // Expected: [-1, -11, 1, -12, 11]\n\n        List<Integer> test2 = Arrays.asList();\n        System.out.println(\"Test Case 2: \" + solution.order_by_points(test2)); // Expected: []\n\n        List<Integer> test3 = Arrays.asList(-987654321, 123456789, -100, 100);\n        System.out.println(\"Test Case 3: \" + solution.order_by_points(test3)); // Expected: [-100, 100, -987654321, 123456789]\n    }\n}\n"}
{"task_id": "Java/146", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function that takes an array of numbers as input and returns\n     * the number of elements in the array that are greater than 10 and both\n     * first and last digits of a number are odd (1, 3, 5, 7, 9).\n     * For example:\n     * specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n     * specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10 && isFirstAndLastDigitOdd(num)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isFirstAndLastDigitOdd(int num) {\n        String strNum = Integer.toString(Math.abs(num));\n        int firstDigit = Character.digit(strNum.charAt(0), 10);\n        int lastDigit = Character.digit(strNum.charAt(strNum.length() - 1), 10);\n\n        return (firstDigit % 2 != 0) && (lastDigit % 2 != 0);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.specialFilter(Arrays.asList(15, -73, 14, -15))); // Expected output: 1\n        System.out.println(solution.specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109))); // Expected output: 2\n        System.out.println(solution.specialFilter(Arrays.asList(-73, 14, 15, -15, 33, 45, 21, 109))); // Expected output: 3\n    }\n}\n"}
{"task_id": "Java/147", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You are given a positive integer n. You have to create an integer array a of length n.\n     * For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n     * Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n     * and a[i] + a[j] + a[k] is a multiple of 3.\n     *\n     * Example :\n     * Input: n = 5\n     * Output: 1\n     * Explanation:\n     * a = [1, 3, 7, 13, 21]\n     * The only valid triple is (1, 7, 13).\n     */\n    public int get_max_triples(int n) {\n        List<Integer> a = new ArrayList<>();\n        \n        // Generate the array a\n        for (int i = 1; i <= n; i++) {\n            a.add(i * i - i + 1);\n        }\n        \n        int count = 0;\n        \n        // Iterate through all possible triples (i, j, k) where i < j < k\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a.get(i) + a.get(j) + a.get(k)) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.get_max_triples(5)); // Expected output: 1\n        System.out.println(solution.get_max_triples(6)); // Expected output: 2\n        System.out.println(solution.get_max_triples(7)); // Expected output: 3\n    }\n}\n"}
{"task_id": "Java/148", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * There are eight planets in our solar system: the closerst to the Sun\n     * is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n     * Uranus, Neptune.\n     * Write a function that takes two planet names as strings planet1 and planet2.\n     * The function should return a list containing all planets whose orbits are\n     * located between the orbit of planet1 and the orbit of planet2, sorted by\n     * the proximity to the sun.\n     * The function should return an empty list if planet1 or planet2\n     * are not correct planet names.\n     * Examples:\n     * bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n     * bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n     * bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        \n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n\n        if (index1 == -1 || index2 == -1) {\n            return new ArrayList<>();\n        }\n\n        if (index1 > index2) {\n            // Swap indices to ensure index1 is always less than index2\n            int temp = index1;\n            index1 = index2;\n            index2 = temp;\n        }\n\n        List<String> result = planets.subList(index1 + 1, index2);\n        return new ArrayList<>(result);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.bf(\"Jupiter\", \"Neptune\")); // [\"Saturn\", \"Uranus\"]\n        System.out.println(solution.bf(\"Earth\", \"Mercury\"));   // [\"Venus\"]\n        System.out.println(solution.bf(\"Mercury\", \"Uranus\"));  // [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n\n        // Test with invalid planet names\n        System.out.println(solution.bf(\"Pluto\", \"Neptune\"));   // []\n    }\n}\n"}
{"task_id": "Java/149", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Write a function that accepts a list of strings as a parameter,\n     * deletes the strings that have odd lengths from it,\n     * and returns the resulted list with a sorted order.\n     * The list is always a list of strings and never an array of numbers,\n     * and it may contain duplicates.\n     * The order of the list should be ascending by length of each word, and you\n     * should return the list sorted by that rule.\n     * If two words have the same length, sort the list alphabetically.\n     * The function should return a list of strings in sorted order.\n     * You may assume that all words will have the same length.\n     * For example:\n     * assert sorted_list_sum(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n     * assert sorted_list_sum(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> sorted_list_sum(List<String> lst) {\n        // Remove strings with odd lengths\n        lst.removeIf(s -> s.length() % 2 != 0);\n\n        // Sort the list by length, then alphabetically if lengths are equal\n        Collections.sort(lst, (s1, s2) -> {\n            int lenCompare = Integer.compare(s1.length(), s2.length());\n            return lenCompare == 0 ? s1.compareTo(s2) : lenCompare;\n        });\n\n        return lst;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<String> test1 = Arrays.asList(\"aa\", \"a\", \"aaa\");\n        System.out.println(solution.sorted_list_sum(test1)); // Expected: [aa]\n\n        List<String> test2 = Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\");\n        System.out.println(solution.sorted_list_sum(test2)); // Expected: [ab, cd]\n\n        List<String> test3 = Arrays.asList(\"hello\", \"world\", \"hi\", \"bye\");\n        System.out.println(solution.sorted_list_sum(test3)); // Expected: [hi, bye]\n    }\n}\n"}
{"task_id": "Java/150", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * A simple program which should return the value of x if n is\n     * a prime number and should return the value of y otherwise.\n     *\n     * Examples:\n     * for x_or_y(7, 34, 12) == 34\n     * for x_or_y(15, 8, 5) == 5\n     */\n    public int x_or_y(int n, int x, int y) {\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    /**\n     * Helper method to check if a number is prime.\n     *\n     * @param num the number to check\n     * @return true if the number is prime, false otherwise\n     */\n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.x_or_y(7, 34, 12)); // Expected output: 34 (since 7 is prime)\n        System.out.println(solution.x_or_y(15, 8, 5));  // Expected output: 5 (since 15 is not prime)\n        System.out.println(solution.x_or_y(2, 10, 20)); // Expected output: 10 (since 2 is prime)\n        System.out.println(solution.x_or_y(4, 30, 40)); // Expected output: 40 (since 4 is not prime)\n    }\n}\n"}
{"task_id": "Java/151", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given a list of numbers, return the sum of squares of the numbers\n     in the list that are odd. Ignore numbers that are negative or not integers.\n     */\n    public int double_the_difference(List<Object> lst) {\n        int result = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                if (num > 0 && num % 2 != 0) {\n                    result += num * num;\n                }\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.double_the_difference(Arrays.asList(1, 3, 2, 0))); // Expected output: 10\n        System.out.println(solution.double_the_difference(Arrays.asList(-1, -2, 0))); // Expected output: 0\n        System.out.println(solution.double_the_difference(Arrays.asList(9, -2)));      // Expected output: 81\n        System.out.println(solution.double_the_difference(Arrays.asList(0)));          // Expected output: 0\n        System.out.println(solution.double_the_difference(new ArrayList<>()));         // Expected output: 0\n    }\n}\n"}
{"task_id": "Java/152", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Compares the game scores with the guesses and returns an array of how far off each guess was.\n     *\n     * @param game  A list of integers representing the actual game scores.\n     * @param guess A list of integers representing the guessed scores.\n     * @return A list of integers where each element is the absolute difference between the guess and the score, or 0 if they are equal.\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            result.add(diff);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1Game = Arrays.asList(1, 2, 3, 4, 5, 1);\n        List<Integer> test1Guess = Arrays.asList(1, 2, 3, 4, 2, -2);\n        System.out.println(solution.compare(test1Game, test1Guess)); // Expected: [0, 0, 0, 0, 3, 3]\n\n        List<Integer> test2Game = Arrays.asList(0, 5, 0, 0, 0, 4);\n        List<Integer> test2Guess = Arrays.asList(4, 1, 1, 0, 0, -2);\n        System.out.println(solution.compare(test2Game, test2Guess)); // Expected: [4, 4, 1, 0, 0, 6]\n    }\n}\n"}
{"task_id": "Java/153", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You will be given the name of a class (a string) and a list of extensions.\n     * The extensions are to be used to load additional classes to the class. The\n     * strength of the extension is as follows: Let CAP be the number of the uppercase\n     * letters in the extension's name, and let SM be the number of lowercase letters\n     * in the extension's name, the strength is given by the fraction CAP - SM.\n     * You should find the strongest extension and return a string in this\n     * format: ClassName.Strongest_Extension.\n     * If there are two or more extensions with the same strength, you should\n     * choose the one that comes first in the list.\n     * For example, if you are given \"Slices\" as the class and a list of the\n     * extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n     * return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n     * (its strength is -1).\n     * Example:\n     * for Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        int maxStrength = Integer.MIN_VALUE;\n        String strongestExtension = \"\";\n        \n        for (String extension : extensions) {\n            int cap = 0, sm = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n                } else if (Character.isLowerCase(c)) {\n                    sm++;\n                }\n            }\n            \n            int strength = cap - sm;\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n        \n        return class_name + \".\" + strongestExtension;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.Strongest_Extension(\"Slices\", Arrays.asList(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"))); // Should print: Slices.SErviNGSliCes\n        System.out.println(solution.Strongest_Extension(\"my_class\", Arrays.asList(\"AA\", \"Be\", \"CC\"))); // Should print: my_class.AA\n        System.out.println(solution.Strongest_Extension(\"DataProcessor\", Arrays.asList(\"dataIO\", \"DATAIO\", \"dataio\"))); // Should print: DataProcessor.DATAIO\n    }\n}\n"}
{"task_id": "Java/154", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word.\n     * cycpattern_check(\"abcd\",\"abd\") => false\n     * cycpattern_check(\"hello\",\"ell\") => true\n     * cycpattern_check(\"whassup\",\"psus\") => false\n     * cycpattern_check(\"abab\",\"baa\") => true\n     * cycpattern_check(\"efef\",\"eeff\") => false\n     * cycpattern_check(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpattern_check(String a, String b) {\n        if (b.length() > a.length()) {\n            return false;\n        }\n        \n        // Generate all rotations of the second word\n        for (int i = 0; i < b.length(); i++) {\n            String rotated = rotateString(b, i);\n            if (a.contains(rotated)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private String rotateString(String s, int k) {\n        int n = s.length();\n        k = k % n; // In case the rotation is greater than the length of the string\n        return s.substring(n - k) + s.substring(0, n - k);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.cycpattern_check(\"abcd\", \"abd\")); // false\n        System.out.println(solution.cycpattern_check(\"hello\", \"ell\")); // true\n        System.out.println(solution.cycpattern_check(\"whassup\", \"psus\")); // false\n        System.out.println(solution.cycpattern_check(\"abab\", \"baa\")); // true\n        System.out.println(solution.cycpattern_check(\"efef\", \"eeff\")); // false\n        System.out.println(solution.cycpattern_check(\"himenss\", \"simen\")); // true\n    }\n}\n"}
{"task_id": "Java/155", "generation": "import java.util.List;\n\nclass Solution {\n\n    /**\n     * Given an integer, return a tuple that has the number of even and odd digits respectively.\n     *\n     * Example:\n     * even_odd_count(-12) ==> (1, 1)\n     * even_odd_count(123) ==> (1, 2)\n     */\n    public List<Integer> even_odd_count(int num) {\n        int evenCount = 0;\n        int oddCount = 0;\n\n        // Handle negative numbers\n        if (num < 0) {\n            num = -num; // Make the number positive for digit extraction\n        }\n\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num /= 10;\n        }\n\n        return List.of(evenCount, oddCount);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"even_odd_count(-12): \" + solution.even_odd_count(-12)); // Expected: [1, 1]\n        System.out.println(\"even_odd_count(123): \" + solution.even_odd_count(123)); // Expected: [1, 2]\n        System.out.println(\"even_odd_count(0): \" + solution.even_odd_count(0));     // Expected: [1, 0]\n        System.out.println(\"even_odd_count(1111): \" + solution.even_odd_count(1111)); // Expected: [0, 4]\n        System.out.println(\"even_odd_count(-987654321): \" + solution.even_odd_count(-987654321)); // Expected: [4, 5]\n    }\n}\n"}
{"task_id": "Java/156", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     Given a positive integer, obtain its roman numeral equivalent as a string,\n     and return it in lowercase.\n     Restrictions: 1 <= num <= 1000\n\n     Examples:\n     >>> int_to_mini_roman(19) == \"xix\"\n     >>> int_to_mini_roman(152) == \"clii\"\n     >>> int_to_mini_roman(426) == \"cdxxvi\"\n     */\n    public String int_to_mini_roman(int number) {\n        if (number < 1 || number > 1000) {\n            throw new IllegalArgumentException(\"Number must be between 1 and 1000\");\n        }\n\n        StringBuilder roman = new StringBuilder();\n        Map<Integer, String> romanMap = new HashMap<>();\n        romanMap.put(1000, \"m\");\n        romanMap.put(900, \"cm\");\n        romanMap.put(500, \"d\");\n        romanMap.put(400, \"cd\");\n        romanMap.put(100, \"c\");\n        romanMap.put(90, \"xc\");\n        romanMap.put(50, \"l\");\n        romanMap.put(40, \"xl\");\n        romanMap.put(10, \"x\");\n        romanMap.put(9, \"ix\");\n        romanMap.put(5, \"v\");\n        romanMap.put(4, \"iv\");\n        romanMap.put(1, \"i\");\n\n        for (Map.Entry<Integer, String> entry : romanMap.entrySet()) {\n            while (number >= entry.getKey()) {\n                roman.append(entry.getValue());\n                number -= entry.getKey();\n            }\n        }\n\n        return roman.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.int_to_mini_roman(19));  // Expected: \"xix\"\n        System.out.println(solution.int_to_mini_roman(152)); // Expected: \"clii\"\n        System.out.println(solution.int_to_mini_roman(426)); // Expected: \"cdxxvi\"\n\n        // Additional test cases\n        System.out.println(solution.int_to_mini_roman(399)); // Expected: \"cccxcix\"\n        System.out.println(solution.int_to_mini_roman(583)); // Expected: \"dlxxxiii\"\n        System.out.println(solution.int_to_mini_roman(1000)); // Expected: \"m\"\n    }\n}\n"}
{"task_id": "Java/157", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given the lengths of the three sides of a triangle. Return true if the three\n     * sides form a right-angled triangle, false otherwise.\n     * A right-angled triangle is a triangle in which one angle is a right angle or 90 degrees.\n     * Example:\n     * right_angle_triangle(3, 4, 5) == true\n     * right_angle_triangle(1, 2, 3) == false\n     */\n    public boolean right_angle_triangle(int a, int b, int c) {\n        // Sort the sides to ensure the longest side is last\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        \n        // Check if the square of the longest side equals the sum of squares of other two sides\n        return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) == Math.pow(sides[2], 2);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.right_angle_triangle(3, 4, 5)); // true\n        System.out.println(solution.right_angle_triangle(1, 2, 3)); // false\n        System.out.println(solution.right_angle_triangle(5, 12, 13)); // true\n        System.out.println(solution.right_angle_triangle(6, 8, 10)); // true\n        System.out.println(solution.right_angle_triangle(7, 10, 12)); // false\n    }\n}\n"}
{"task_id": "Java/158", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function that accepts a list of strings.\n     * The list contains different words. Return the word with maximum number\n     * of unique characters. If multiple strings have maximum number of unique\n     * characters, return the one which comes first in lexicographical order.\n     *\n     * find_max([\"name\", \"of\", \"string\"]) == \"string\"\n     * find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n     * find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\n     */\n    public String find_max(List<String> words) {\n        if (words == null || words.isEmpty()) {\n            return \"\";\n        }\n\n        // Sort the list lexicographically\n        Collections.sort(words);\n\n        String maxWord = \"\";\n        int maxUniqueChars = 0;\n\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n\n            if (uniqueChars.size() > maxUniqueChars) {\n                maxUniqueChars = uniqueChars.size();\n                maxWord = word;\n            }\n        }\n\n        return maxWord;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.find_max(Arrays.asList(\"name\", \"of\", \"string\"))); // Output: string\n        System.out.println(solution.find_max(Arrays.asList(\"name\", \"enam\", \"game\"))); // Output: enam\n        System.out.println(solution.find_max(Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\")));  // Output: aaaaaaa\n        System.out.println(solution.find_max(new ArrayList<>()));                     // Output: (empty string)\n        System.out.println(solution.find_max(Arrays.asList(\"abc\", \"defg\", \"hijk\")));  // Output: defg\n    }\n}\n"}
{"task_id": "Java/159", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * You're a hungry rabbit, and you already have eaten a certain number of carrots,\n     * but now you need to eat more carrots to complete the day's meals.\n     * return an array of [ total number of eaten carrots after your meals,\n     *                     the number of carrots left after your meals ]\n     * if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n     *\n     * Example:\n     * * eat(5, 6, 10) -> [11, 4]\n     * * eat(4, 8, 9) -> [12, 1]\n     * * eat(1, 10, 10) -> [11, 0]\n     * * eat(2, 11, 5) -> [7, 0]\n     *\n     * Variables:\n     * @number : integer\n     *        the number of carrots that you have eaten.\n     * @need : integer\n     *        the number of carrots that you need to eat.\n     * @remaining : integer\n     *        the number of remaining carrots thet exist in stock\n     *\n     * Constrain:\n     * * 0 <= number <= 1000\n     * * 0 <= need <= 1000\n     * * 0 <= remaining <= 1000\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        // Calculate the total number of carrots to be eaten\n        int totalToEat = Math.min(need, remaining);\n        \n        // Update the number of carrots eaten and remaining\n        int newNumberEaten = number + totalToEat;\n        int newRemainingCarrots = remaining - totalToEat;\n\n        return Arrays.asList(newNumberEaten, newRemainingCarrots);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.eat(5, 6, 10)); // Expected: [11, 4]\n        System.out.println(solution.eat(4, 8, 9));  // Expected: [12, 1]\n        System.out.println(solution.eat(1, 10, 10)); // Expected: [11, 0]\n        System.out.println(solution.eat(2, 11, 5));  // Expected: [7, 0]\n    }\n}\n"}
{"task_id": "Java/160", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given two lists operator, and operand. The first list has basic algebra operations,\n     * and the second list is a list of integers. Use the two given lists to build the algebric\n     * expression and return the evaluation of this expression.\n     *\n     * @param operator List of strings representing the operators: \"+\", \"-\", \"*\", \"/\", \"**\"\n     * @param operand  List of integers\n     * @return The result of evaluating the algebraic expression\n     */\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        if (operator.isEmpty() || operand.size() < 2) {\n            throw new IllegalArgumentException(\"Invalid input: operator list must not be empty and operand list must have at least two elements.\");\n        }\n\n        int result = operand.get(0);\n\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int nextOperand = operand.get(i + 1);\n\n            switch (op) {\n                case \"+\":\n                    result += nextOperand;\n                    break;\n                case \"-\":\n                    result -= nextOperand;\n                    break;\n                case \"*\":\n                    result *= nextOperand;\n                    break;\n                case \"/\":\n                    if (nextOperand == 0) {\n                        throw new ArithmeticException(\"Division by zero is not allowed.\");\n                    }\n                    result /= nextOperand;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, nextOperand);\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid operator: \" + op);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<String> operators1 = Arrays.asList(\"+\", \"*\", \"-\");\n        List<Integer> operands1 = Arrays.asList(2, 3, 4, 5);\n        System.out.println(solution.do_algebra(operators1, operands1)); // Output: 9\n\n        List<String> operators2 = Arrays.asList(\"/\", \"+\", \"**\");\n        List<Integer> operands2 = Arrays.asList(8, 2, 3, 2);\n        System.out.println(solution.do_algebra(operators2, operands2)); // Output: 64\n\n        List<String> operators3 = Arrays.asList(\"-\", \"*\", \"/\");\n        List<Integer> operands3 = Arrays.asList(10, 5, 2, 2);\n        System.out.println(solution.do_algebra(operators3, operands3)); // Output: -25\n    }\n}\n"}
{"task_id": "Java/161", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * You are given a string s.\n     * if s[i] is a letter, reverse its case from lower to upper or vise versa,\n     * otherwise keep it as it is.\n     * If the string contains no letters, reverse the string.\n     * The function should return the resulted string.\n     * Examples\n     * solve(\"1234\") = \"4321\"\n     * solve(\"ab\") = \"AB\"\n     * solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        if (s == null || s.isEmpty()) {\n            return s;\n        }\n\n        boolean containsLetters = false;\n        StringBuilder result = new StringBuilder();\n\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                containsLetters = true;\n                result.append(Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c));\n            } else {\n                result.append(c);\n            }\n        }\n\n        return containsLetters ? result.toString() : new StringBuilder(s).reverse().toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.solve(\"1234\"));  // Expected: \"4321\"\n        System.out.println(solution.solve(\"ab\"));    // Expected: \"AB\"\n        System.out.println(solution.solve(\"#a@C\"));  // Expected: \"#A@c\"\n        System.out.println(solution.solve(\"\"));      // Expected: \"\"\n        System.out.println(solution.solve(\"123!@#\")); // Expected: \"#@!321\"\n        System.out.println(solution.solve(\"Hello World!\")); // Expected: \"hELLO wORLD!\"\n    }\n}\n"}
{"task_id": "Java/162", "generation": "import java.math.BigInteger;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Optional;\n\nclass Solution {\n    /**\n     Given a string \"text\", return its md5 hash equivalent string with length being 32.\n     If \"text\" is an empty string, return Optional.empty().\n     */\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n        byte[] hashBytes = digest.digest(text.getBytes());\n\n        BigInteger number = new BigInteger(1, hashBytes);\n        String hashtext = number.toString(16);\n\n        // Make sure the hash is 32 characters long\n        while (hashtext.length() < 32) {\n            hashtext = \"0\" + hashtext;\n        }\n\n        return Optional.of(hashtext);\n    }\n}\n\npublic class TestSolution {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"MD5 of 'Hello world': \" + solution.string_to_md5(\"Hello world\").orElse(\"None\"));\n        System.out.println(\"MD5 of '': \" + solution.string_to_md5(\"\").orElse(\"None\"));\n\n        try {\n            Optional<String> result = solution.string_to_md5(\"Hello world\");\n            if (result.isPresent()) {\n                System.out.println(\"MD5 hash: \" + result.get());\n            } else {\n                System.out.println(\"Input was an empty string.\");\n            }\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n\n        try {\n            Optional<String> result = solution.string_to_md5(\"\");\n            if (result.isPresent()) {\n                System.out.println(\"MD5 hash: \" + result.get());\n            } else {\n                System.out.println(\"Input was an empty string.\");\n            }\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n    }\n}\n"}
{"task_id": "Java/163", "generation": "import java.util.List;\n\nclass Solution {\n\n    /**\n     * Given two positive integers a and b, return the even digits between a\n     * and b, in ascending order.\n     *\n     * @param a the lower bound (inclusive)\n     * @param b the upper bound (inclusive)\n     * @return a List of Integer containing even digits between a and b\n     */\n    public List<Integer> generate_integers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        \n        // Ensure a is less than or equal to b for simplicity in iteration\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        \n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0 && i < 10) {\n                result.add(i);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"generate_integers(2, 8): \" + solution.generate_integers(2, 8)); // [2, 4, 6, 8]\n        System.out.println(\"generate_integers(8, 2): \" + solution.generate_integers(8, 2)); // [2, 4, 6, 8]\n        System.out.println(\"generate_integers(10, 14): \" + solution.generate_integers(10, 14)); // []\n        System.out.println(\"generate_integers(1, 5): \" + solution.generate_integers(1, 5)); // [2, 4]\n        System.out.println(\"generate_integers(3, 7): \" + solution.generate_integers(3, 7)); // [4, 6]\n    }\n}\n"}
