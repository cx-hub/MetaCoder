{"task_id": "Java/0", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n     * \n     * @param numbers List of double numbers.\n     * @param threshold The threshold value.\n     * @return true if any two numbers are closer than the threshold, otherwise false.\n     */\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        // Sort the list to make it easier to find close elements\n        Collections.sort(numbers);\n        \n        // Iterate through the sorted list and check the difference between consecutive elements\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (diff < threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Double> test1 = Arrays.asList(1.0, 2.0, 3.0);\n        double threshold1 = 0.5;\n        System.out.println(\"Test Case 1: \" + solution.has_close_elements(test1, threshold1)); // Expected: false\n\n        List<Double> test2 = Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0);\n        double threshold2 = 0.3;\n        System.out.println(\"Test Case 2: \" + solution.has_close_elements(test2, threshold2)); // Expected: true\n\n        List<Double> test3 = Arrays.asList(1.0, 1.4, 1.8, 2.2, 2.6);\n        double threshold3 = 0.4;\n        System.out.println(\"Test Case 3: \" + solution.has_close_elements(test3, threshold3)); // Expected: true\n\n        List<Double> test4 = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        double threshold4 = 1.0;\n        System.out.println(\"Test Case 4: \" + solution.has_close_elements(test4, threshold4)); // Expected: false\n    }\n}\n"}
{"task_id": "Java/1", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Separates groups of nested parentheses into separate strings.\n     * Each group is balanced and not nested within each other.\n     * Spaces in the input string are ignored.\n     *\n     * @param paren_string The input string containing groups of nested parentheses.\n     * @return A list of separated groups of nested parentheses.\n     */\n    public List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        StringBuilder currentGroup = new StringBuilder();\n        int balance = 0;\n\n        for (char c : paren_string.replaceAll(\"\\\\s+\", \"\").toCharArray()) {\n            if (c == '(') {\n                balance++;\n            } else if (c == ')') {\n                balance--;\n            }\n            currentGroup.append(c);\n\n            if (balance == 0 && currentGroup.length() > 0) {\n                result.add(currentGroup.toString());\n                currentGroup.setLength(0); // Clear the StringBuilder\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        String test1 = \"( ) (( )) (( )( ))\";\n        String test2 = \"((())) (()) ()\";\n        String test3 = \"(()(()))\";\n\n        System.out.println(\"Test 1: \" + solution.separate_paren_groups(test1));\n        System.out.println(\"Test 2: \" + solution.separate_paren_groups(test2));\n        System.out.println(\"Test 3: \" + solution.separate_paren_groups(test3));\n    }\n}\n"}
{"task_id": "Java/2", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n     */\n    public double truncate_number(double number) {\n        return number - Math.floor(number);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        double[] testNumbers = {3.5, 4.75, 0.99, 123.456, 1.0, 0.0};\n        double[] expectedResults = {0.5, 0.75, 0.99, 0.456, 0.0, 0.0};\n\n        for (int i = 0; i < testNumbers.length; i++) {\n            double result = solution.truncate_number(testNumbers[i]);\n            System.out.println(\"Test case \" + (i + 1) + \": Input = \" + testNumbers[i] + \", Expected = \" + expectedResults[i] + \", Result = \" + result);\n            if (Math.abs(result - expectedResults[i]) < 1e-9) {\n                System.out.println(\"Test case \" + (i + 1) + \" passed.\");\n            } else {\n                System.out.println(\"Test case \" + (i + 1) + \" failed.\");\n            }\n        }\n    }\n}\n"}
{"task_id": "Java/3", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero(Arrays.asList(1, 2, 3))\n    false\n    >>> below_zero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(1, 2, 3);\n        List<Integer> test2 = Arrays.asList(1, 2, -4, 5);\n        List<Integer> test3 = Arrays.asList(-1, 1, -1, 1);\n        List<Integer> test4 = Arrays.asList(10, -5, -3, -2);\n\n        System.out.println(\"Test 1: \" + solution.below_zero(test1)); // Expected: false\n        System.out.println(\"Test 2: \" + solution.below_zero(test2)); // Expected: true\n        System.out.println(\"Test 3: \" + solution.below_zero(test3)); // Expected: true\n        System.out.println(\"Test 4: \" + solution.below_zero(test4)); // Expected: false\n    }\n}\n"}
{"task_id": "Java/4", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * For a given list of input numbers, calculate Mean Absolute Deviation\n     * around the mean of this dataset.\n     * Mean Absolute Deviation is the average absolute difference between each\n     * element and a centerpoint (mean in this case):\n     * MAD = average | x - x_mean |\n     *\n     * @param numbers List of Double values\n     * @return Mean Absolute Deviation\n     */\n    public double mean_absolute_deviation(List<Double> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            throw new IllegalArgumentException(\"List must not be null or empty\");\n        }\n\n        double sum = 0.0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n\n        double madSum = 0.0;\n        for (double num : numbers) {\n            madSum += Math.abs(num - mean);\n        }\n        return madSum / numbers.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Double> test1 = Arrays.asList(1.0, 2.0, 3.0, 4.0);\n        List<Double> test2 = Arrays.asList(5.0, 7.0, 9.0, 11.0);\n        List<Double> test3 = Arrays.asList(1.5, 2.5, 3.5, 4.5);\n\n        System.out.println(\"MAD of [1.0, 2.0, 3.0, 4.0]: \" + solution.mean_absolute_deviation(test1)); // Expected: 1.0\n        System.out.println(\"MAD of [5.0, 7.0, 9.0, 11.0]: \" + solution.mean_absolute_deviation(test2)); // Expected: 2.0\n        System.out.println(\"MAD of [1.5, 2.5, 3.5, 4.5]: \" + solution.mean_absolute_deviation(test3)); // Expected: 1.0\n    }\n}\n"}
{"task_id": "Java/5", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Insert a number 'delimiter' between every two consecutive elements of input list `numbers'.\n     * \n     * @param numbers The list of integers.\n     * @param delimiter The delimiter to insert.\n     * @return A new list with the delimiter inserted between consecutive elements.\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        if (numbers == null || numbers.isEmpty()) {\n            return numbers;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: Empty list\n        List<Integer> test1 = solution.intersperse(new ArrayList<>(), 4);\n        System.out.println(\"Test Case 1: \" + test1); // Expected: []\n\n        // Test case 2: Non-empty list\n        List<Integer> test2 = solution.intersperse(Arrays.asList(1, 2, 3), 4);\n        System.out.println(\"Test Case 2: \" + test2); // Expected: [1, 4, 2, 4, 3]\n\n        // Test case 3: Single element list\n        List<Integer> test3 = solution.intersperse(Arrays.asList(5), 4);\n        System.out.println(\"Test Case 3: \" + test3); // Expected: [5]\n\n        // Test case 4: List with multiple elements\n        List<Integer> test4 = solution.intersperse(Arrays.asList(1, 3, 5, 7, 9), 0);\n        System.out.println(\"Test Case 4: \" + test4); // Expected: [1, 0, 3, 0, 5, 0, 7, 0, 9]\n    }\n}\n"}
{"task_id": "Java/6", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * This function takes a string containing multiple groups of nested parentheses separated by spaces.\n     * It returns a list of integers representing the deepest level of nesting for each group.\n     * \n     * @param paren_string The input string containing groups of nested parentheses.\n     * @return A list of integers representing the deepest level of nesting for each group.\n     */\n    public List<Integer> parse_nested_parens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        String[] groups = paren_string.split(\" \");\n        \n        for (String group : groups) {\n            int maxDepth = 0;\n            int currentDepth = 0;\n            \n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentDepth++;\n                    maxDepth = Math.max(maxDepth, currentDepth);\n                } else if (c == ')') {\n                    currentDepth--;\n                }\n            }\n            \n            result.add(maxDepth);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String testInput = \"(()()) ((())) () ((())()())\";\n        List<Integer> result = solution.parse_nested_parens(testInput);\n        \n        System.out.println(result); // Expected output: [2, 3, 1, 3]\n    }\n}\n"}
{"task_id": "Java/7", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Filter an input list of strings only for ones that contain a given substring.\n     *\n     * @param strings   the list of strings to filter\n     * @param substring the substring to filter by\n     * @return a list of strings that contain the given substring\n     */\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> filteredList = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredList.add(str);\n            }\n        }\n        return filteredList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: Empty list\n        List<String> test1 = List.of();\n        String substring1 = \"a\";\n        System.out.println(\"Test Case 1: \" + solution.filter_by_substring(test1, substring1));\n\n        // Test case 2: List with multiple strings\n        List<String> test2 = Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\");\n        String substring2 = \"a\";\n        System.out.println(\"Test Case 2: \" + solution.filter_by_substring(test2, substring2));\n    }\n}\n"}
{"task_id": "Java/8", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product(List.of())\n    [0, 1]\n    >>> sum_product(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sum_product(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n\n        return Arrays.asList(sum, product);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: Empty list\n        List<Integer> result1 = solution.sum_product(List.of());\n        System.out.println(\"Test case 1: \" + result1); // Expected output: [0, 1]\n\n        // Test case 2: List with elements\n        List<Integer> result2 = solution.sum_product(Arrays.asList(1, 2, 3, 4));\n        System.out.println(\"Test case 2: \" + result2); // Expected output: [10, 24]\n\n        // Test case 3: List with a single element\n        List<Integer> result3 = solution.sum_product(Arrays.asList(5));\n        System.out.println(\"Test case 3: \" + result3); // Expected output: [5, 5]\n\n        // Test case 4: List with negative elements\n        List<Integer> result4 = solution.sum_product(Arrays.asList(-1, -2, -3, -4));\n        System.out.println(\"Test case 4: \" + result4); // Expected output: [-10, 24]\n\n        // Test case 5: List with zero\n        List<Integer> result5 = solution.sum_product(Arrays.asList(0, 1, 2, 3));\n        System.out.println(\"Test case 5: \" + result5); // Expected output: [6, 0]\n    }\n}\n"}
{"task_id": "Java/9", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * From a given list of integers, generate a list of rolling maximum element found until given moment\n     * in the sequence.\n     * \n     * @param numbers The list of integers.\n     * @return A list of rolling maximum elements.\n     */\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        if (numbers == null || numbers.isEmpty()) {\n            return result;\n        }\n        \n        int maxSoFar = numbers.get(0);\n        for (int num : numbers) {\n            maxSoFar = Math.max(maxSoFar, num);\n            result.add(maxSoFar);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1\n        List<Integer> test1 = Arrays.asList(1, 2, 3, 2, 3, 4, 2);\n        System.out.println(\"Test Case 1: \" + solution.rolling_max(test1));\n        // Expected output: [1, 2, 3, 3, 3, 4, 4]\n\n        // Test case 2\n        List<Integer> test2 = Arrays.asList(5, 3, 6, 7, 2, 8, 1);\n        System.out.println(\"Test Case 2: \" + solution.rolling_max(test2));\n        // Expected output: [5, 5, 6, 7, 7, 8, 8]\n\n        // Test case 3\n        List<Integer> test3 = Arrays.asList(10, 9, 8, 7, 6, 5, 4);\n        System.out.println(\"Test Case 3: \" + solution.rolling_max(test3));\n        // Expected output: [10, 10, 10, 10, 10, 10, 10]\n\n        // Test case 4\n        List<Integer> test4 = Arrays.asList(1, 1, 1, 1, 1, 1, 1);\n        System.out.println(\"Test Case 4: \" + solution.rolling_max(test4));\n        // Expected output: [1, 1, 1, 1, 1, 1, 1]\n\n        // Test case 5\n        List<Integer> test5 = Arrays.asList();\n        System.out.println(\"Test Case 5: \" + solution.rolling_max(test5));\n        // Expected output: []\n    }\n}\n"}
{"task_id": "Java/10", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    /**\n     * Find the shortest palindrome that begins with a supplied string.\n     * Algorithm idea is simple:\n     * - Find the longest postfix of supplied string that is a palindrome.\n     * - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n     * \n     * @param string The input string\n     * @return The shortest palindrome that begins with the supplied string\n     */\n    public String make_palindrome(String string) {\n        if (string == null || string.isEmpty()) {\n            return string;\n        }\n\n        int len = string.length();\n        int i = len;\n\n        while (i > 0 && !isPalindrome(string.substring(0, i))) {\n            i--;\n        }\n\n        String nonPalindromePrefix = string.substring(i);\n        String reversedNonPalindromePrefix = new StringBuilder(nonPalindromePrefix).reverse().toString();\n\n        return string + reversedNonPalindromePrefix;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.make_palindrome(\"\"));      // Output: \"\"\n        System.out.println(solution.make_palindrome(\"cat\"));   // Output: \"catac\"\n        System.out.println(solution.make_palindrome(\"cata\"));  // Output: \"catac\"\n        System.out.println(solution.make_palindrome(\"race\"));  // Output: \"racecar\"\n        System.out.println(solution.make_palindrome(\"aacecaaa\"));// Output: \"aacecaaa\"\n    }\n}\n"}
{"task_id": "Java/11", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n     */\n    public String string_xor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        \n        // Ensure both strings are of the same length\n        int maxLength = Math.max(a.length(), b.length());\n        a = String.format(\"%\" + maxLength + \"s\", a).replace(' ', '0');\n        b = String.format(\"%\" + maxLength + \"s\", b).replace(' ', '0');\n        \n        for (int i = 0; i < maxLength; i++) {\n            // XOR the current bits\n            char bitA = a.charAt(i);\n            char bitB = b.charAt(i);\n            char xorResult = (bitA == bitB) ? '0' : '1';\n            result.append(xorResult);\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.string_xor(\"010\", \"110\")); // Expected: \"100\"\n        System.out.println(solution.string_xor(\"10101\", \"00111\")); // Expected: \"10010\"\n        System.out.println(solution.string_xor(\"1111\", \"0000\")); // Expected: \"1111\"\n        System.out.println(solution.string_xor(\"1\", \"1\")); // Expected: \"0\"\n        System.out.println(solution.string_xor(\"0\", \"0\")); // Expected: \"0\"\n        System.out.println(solution.string_xor(\"10101010\", \"11110000\")); // Expected: \"01011010\"\n    }\n}\n"}
{"task_id": "Java/12", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longestString = strings.get(0);\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n        return Optional.of(longestString);\n    }\n\n    // Test cases\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: Empty list\n        System.out.println(\"Test case 1: \" + solution.longest(List.of())); // Expected: Optional.empty\n\n        // Test case 2: List with single character strings\n        System.out.println(\"Test case 2: \" + solution.longest(Arrays.asList(\"a\", \"b\", \"c\"))); // Expected: Optional[a]\n\n        // Test case 3: List with varying lengths\n        System.out.println(\"Test case 3: \" + solution.longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))); // Expected: Optional[ccc]\n\n        // Test case 4: List with multiple longest strings\n        System.out.println(\"Test case 4: \" + solution.longest(Arrays.asList(\"aaa\", \"bbb\", \"ccc\"))); // Expected: Optional[aaa]\n\n        // Test case 5: List with one string\n        System.out.println(\"Test case 5: \" + solution.longest(Arrays.asList(\"single\"))); // Expected: Optional[single]\n    }\n}\n"}
{"task_id": "Java/13", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return the greatest common divisor of two integers a and b\n     * \n     * @param a the first integer\n     * @param b the second integer\n     * @return the greatest common divisor of a and b\n     */\n    public int greatest_common_divisor(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.greatest_common_divisor(3, 5)); // Expected output: 1\n        System.out.println(solution.greatest_common_divisor(25, 15)); // Expected output: 5\n        System.out.println(solution.greatest_common_divisor(100, 80)); // Expected output: 20\n        System.out.println(solution.greatest_common_divisor(7, 13)); // Expected output: 1\n        System.out.println(solution.greatest_common_divisor(14, 28)); // Expected output: 14\n    }\n}\n"}
{"task_id": "Java/14", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Return list of all prefixes from shortest to longest of the input string\n     * @param string The input string\n     * @return A list of all prefixes from shortest to longest\n     */\n    public List<String> all_prefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1\n        String testString1 = \"abc\";\n        List<String> result1 = solution.all_prefixes(testString1);\n        System.out.println(\"Test Case 1: \" + result1);\n        // Expected output: [a, ab, abc]\n\n        // Test case 2\n        String testString2 = \"hello\";\n        List<String> result2 = solution.all_prefixes(testString2);\n        System.out.println(\"Test Case 2: \" + result2);\n        // Expected output: [h, he, hel, hell, hello]\n\n        // Test case 3\n        String testString3 = \"\";\n        List<String> result3 = solution.all_prefixes(testString3);\n        System.out.println(\"Test Case 3: \" + result3);\n        // Expected output: []\n\n        // Test case 4\n        String testString4 = \"a\";\n        List<String> result4 = solution.all_prefixes(testString4);\n        System.out.println(\"Test Case 4: \" + result4);\n        // Expected output: [a]\n    }\n}\n"}
{"task_id": "Java/15", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String string_sequence(int n) {\n        if (n < 0) {\n            return \"\";\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            if (i < n) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.string_sequence(0)); // Expected: \"0\"\n        System.out.println(solution.string_sequence(5)); // Expected: \"0 1 2 3 4 5\"\n        System.out.println(solution.string_sequence(10)); // Expected: \"0 1 2 3 4 5 6 7 8 9 10\"\n        System.out.println(solution.string_sequence(-1)); // Expected: \"\"\n    }\n}\n"}
{"task_id": "Java/16", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a string, find out how many distinct characters (regardless of case) does it consist of.\n     *\n     * @param string The input string.\n     * @return The number of distinct characters in the string, ignoring case.\n     */\n    public int count_distinct_characters(String string) {\n        // Convert the string to lower case to ignore case sensitivity\n        string = string.toLowerCase();\n        \n        // Use a HashSet to store unique characters\n        Set<Character> uniqueChars = new HashSet<>();\n        \n        // Iterate through the string and add each character to the set\n        for (char c : string.toCharArray()) {\n            uniqueChars.add(c);\n        }\n        \n        // The size of the set represents the number of unique characters\n        return uniqueChars.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.count_distinct_characters(\"xyzXYZ\")); // Expected output: 3\n        System.out.println(solution.count_distinct_characters(\"Jerry\"));  // Expected output: 4\n        System.out.println(solution.count_distinct_characters(\"HelloWorld\")); // Expected output: 7\n        System.out.println(solution.count_distinct_characters(\"AaBbCcDdEeFfGg\")); // Expected output: 7\n        System.out.println(solution.count_distinct_characters(\"\")); // Expected output: 0\n    }\n}\n"}
{"task_id": "Java/17", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    note last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quarter note, lasts one beat\n\n    Example:\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parse_music(String string) {\n        List<Integer> result = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        \n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    result.add(4);\n                    break;\n                case \"o|\":\n                    result.add(2);\n                    break;\n                case \".|\":\n                    result.add(1);\n                    break;\n                default:\n                    // Handle unexpected notes if necessary\n                    throw new IllegalArgumentException(\"Unknown note: \" + note);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        String test1 = \"o o| .| o| o| .| .| .| .| o o\";\n        List<Integer> expected1 = Arrays.asList(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4);\n        System.out.println(\"Test 1: \" + (solution.parse_music(test1).equals(expected1) ? \"Passed\" : \"Failed\"));\n\n        String test2 = \"o| .| o| .| o| .| o| .| o| .| o| .|\";\n        List<Integer> expected2 = Arrays.asList(2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1);\n        System.out.println(\"Test 2: \" + (solution.parse_music(test2).equals(expected2) ? \"Passed\" : \"Failed\"));\n\n        String test3 = \"o o o o\";\n        List<Integer> expected3 = Arrays.asList(4, 4, 4, 4);\n        System.out.println(\"Test 3: \" + (solution.parse_music(test3).equals(expected3) ? \"Passed\" : \"Failed\"));\n\n        String test4 = \".| .| .| .|\";\n        List<Integer> expected4 = Arrays.asList(1, 1, 1, 1);\n        System.out.println(\"Test 4: \" + (solution.parse_music(test4).equals(expected4) ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/18", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Find how many times a given substring can be found in the original string. Count overlapping cases.\n     * \n     * @param string The original string.\n     * @param substring The substring to find.\n     * @return The number of times the substring appears in the original string, including overlaps.\n     */\n    public int how_many_times(String string, String substring) {\n        if (substring.isEmpty() || string.length() < substring.length()) {\n            return 0;\n        }\n\n        int count = 0;\n        int index = 0;\n\n        while ((index = string.indexOf(substring, index)) != -1) {\n            count++;\n            index++; // Move to the next character to allow for overlapping matches\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.how_many_times(\"\", \"a\")); // Expected output: 0\n        System.out.println(solution.how_many_times(\"aaa\", \"a\")); // Expected output: 3\n        System.out.println(solution.how_many_times(\"aaaa\", \"aa\")); // Expected output: 3\n        System.out.println(solution.how_many_times(\"abababa\", \"aba\")); // Expected output: 3\n        System.out.println(solution.how_many_times(\"testtest\", \"test\")); // Expected output: 2\n    }\n}\n"}
{"task_id": "Java/19", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Sorts a space-delimited string of numberals from 'zero' to 'nine'.\n     * Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n     * Returns the string with numbers sorted from smallest to largest.\n     * \n     * @param numbers A space-delimited string of numberals.\n     * @return A string with the numberals sorted from smallest to largest.\n     */\n    public String sort_numbers(String numbers) {\n        Map<String, Integer> numberMap = new HashMap<>();\n        numberMap.put(\"zero\", 0);\n        numberMap.put(\"one\", 1);\n        numberMap.put(\"two\", 2);\n        numberMap.put(\"three\", 3);\n        numberMap.put(\"four\", 4);\n        numberMap.put(\"five\", 5);\n        numberMap.put(\"six\", 6);\n        numberMap.put(\"seven\", 7);\n        numberMap.put(\"eight\", 8);\n        numberMap.put(\"nine\", 9);\n\n        String[] numberArray = numbers.split(\" \");\n        Arrays.sort(numberArray, Comparator.comparingInt(numberMap::get));\n\n        return String.join(\" \", numberArray);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        String test1 = \"three one five\";\n        String test2 = \"nine eight seven\";\n        String test3 = \"zero four two six\";\n        String test4 = \"one one one\";\n\n        System.out.println(solution.sort_numbers(test1)); // Expected: \"one three five\"\n        System.out.println(solution.sort_numbers(test2)); // Expected: \"seven eight nine\"\n        System.out.println(solution.sort_numbers(test3)); // Expected: \"zero two four six\"\n        System.out.println(solution.sort_numbers(test4)); // Expected: \"one one one\"\n    }\n}\n"}
{"task_id": "Java/20", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n     * other and return them in order (smaller number, larger number).\n     *\n     * @param numbers List of Double values\n     * @return A List containing the two closest numbers in ascending order\n     */\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements.\");\n        }\n\n        // Sort the list to make finding the closest pair easier\n        Collections.sort(numbers);\n\n        double minDiff = Double.MAX_VALUE;\n        List<Double> closestPair = new ArrayList<>();\n\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = numbers.get(i + 1) - numbers.get(i);\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair.clear();\n                closestPair.add(numbers.get(i));\n                closestPair.add(numbers.get(i + 1));\n            }\n        }\n\n        return closestPair;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Double> test1 = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n        List<Double> test2 = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);\n\n        System.out.println(\"Test Case 1: \" + solution.find_closest_elements(test1)); // Expected: [2.0, 2.2]\n        System.out.println(\"Test Case 2: \" + solution.find_closest_elements(test2)); // Expected: [2.0, 2.0]\n    }\n}\n"}
{"task_id": "Java/21", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n     * such that the smallest number will become 0 and the largest will become 1.\n     *\n     * @param numbers The list of numbers to be rescaled.\n     * @return A new list of numbers rescaled to the unit interval [0, 1].\n     */\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements.\");\n        }\n\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n\n        List<Double> rescaledNumbers = new ArrayList<>();\n        for (double num : numbers) {\n            double rescaledValue = (num - min) / (max - min);\n            rescaledNumbers.add(rescaledValue);\n        }\n\n        return rescaledNumbers;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        List<Double> rescaledNumbers = solution.rescale_to_unit(numbers);\n\n        System.out.println(\"Original numbers: \" + numbers);\n        System.out.println(\"Rescaled numbers: \" + rescaledNumbers);\n    }\n}\n"}
{"task_id": "Java/22", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Filter given list of any values only for integers.\n     * \n     * @param values The list of objects to be filtered.\n     * @return A list containing only the integer values from the input list.\n     */\n    public List<Integer> filter_integers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Object> test1 = Arrays.asList('a', 3.14, 5);\n        System.out.println(\"Test Case 1: \" + solution.filter_integers(test1)); // Expected: [5]\n\n        // Test case 2\n        List<Object> test2 = Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of());\n        System.out.println(\"Test Case 2: \" + solution.filter_integers(test2)); // Expected: [1, 2, 3]\n\n        // Test case 3\n        List<Object> test3 = Arrays.asList(10, \"hello\", 20, 30.5, 'b', 40);\n        System.out.println(\"Test Case 3: \" + solution.filter_integers(test3)); // Expected: [10, 20, 40]\n\n        // Test case 4\n        List<Object> test4 = Arrays.asList();\n        System.out.println(\"Test Case 4: \" + solution.filter_integers(test4)); // Expected: []\n\n        // Test case 5\n        List<Object> test5 = Arrays.asList(\"one\", \"two\", \"three\");\n        System.out.println(\"Test Case 5: \" + solution.filter_integers(test5)); // Expected: []\n    }\n}\n"}
{"task_id": "Java/23", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return length of given string\n     * >>> strlen(\"\")\n     * 0\n     * >>> strlen(\"abc\")\n     * 3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        String test1 = \"\";\n        String test2 = \"abc\";\n        String test3 = \"Hello, World!\";\n        String test4 = \"1234567890\";\n\n        // Running tests\n        System.out.println(\"Test 1: Expected: 0, Actual: \" + solution.strlen(test1));\n        System.out.println(\"Test 2: Expected: 3, Actual: \" + solution.strlen(test2));\n        System.out.println(\"Test 3: Expected: 13, Actual: \" + solution.strlen(test3));\n        System.out.println(\"Test 4: Expected: 10, Actual: \" + solution.strlen(test4));\n    }\n}\n"}
{"task_id": "Java/24", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * For a given number n, find the largest number that divides n evenly, smaller than n.\n     *\n     * @param n the number to find the largest divisor for\n     * @return the largest divisor of n that is smaller than n\n     */\n    public int largest_divisor(int n) {\n        for (int i = n / 2; i >= 1; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1; // If no divisor is found, return 1 (every number is divisible by 1)\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Largest divisor of 15: \" + solution.largest_divisor(15)); // Expected output: 5\n        System.out.println(\"Largest divisor of 28: \" + solution.largest_divisor(28)); // Expected output: 14\n        System.out.println(\"Largest divisor of 17: \" + solution.largest_divisor(17)); // Expected output: 1 (17 is prime)\n        System.out.println(\"Largest divisor of 100: \" + solution.largest_divisor(100)); // Expected output: 50\n    }\n}\n"}
{"task_id": "Java/25", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Return list of prime factors of given integer in the order from smallest to largest.\n     * Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n     * Input number should be equal to the product of all factors.\n     * \n     * @param n The integer to factorize.\n     * @return A list of prime factors.\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.factorize(8));   // Expected output: [2, 2, 2]\n        System.out.println(solution.factorize(25));  // Expected output: [5, 5]\n        System.out.println(solution.factorize(70));  // Expected output: [2, 5, 7]\n        System.out.println(solution.factorize(100)); // Expected output: [2, 2, 5, 5]\n        System.out.println(solution.factorize(13));  // Expected output: [13]\n    }\n}\n"}
{"task_id": "Java/26", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n     * From a list of integers, remove all elements that occur more than once.\n     * Keep order of elements left the same as in the input.\n     * \n     * @param numbers The list of integers to process.\n     * @return A new list with duplicates removed.\n     */\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        Map<Integer, Integer> frequencyMap = new LinkedHashMap<>();\n        \n        // Count the frequency of each number\n        for (int num : numbers) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        // Filter out numbers that occur more than once\n        return frequencyMap.entrySet().stream()\n                .filter(entry -> entry.getValue() == 1)\n                .map(Map.Entry::getKey)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case\n        List<Integer> input = Arrays.asList(1, 2, 3, 2, 4);\n        List<Integer> result = solution.remove_duplicates(input);\n        \n        // Expected output: [1, 3, 4]\n        System.out.println(result);\n    }\n}\n"}
{"task_id": "Java/27", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"Hello\")\n    \"hELLO\"\n     */\n    public String flip_case(String string) {\n        StringBuilder result = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                result.append(Character.toLowerCase(c));\n            } else {\n                result.append(Character.toUpperCase(c));\n            }\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.flip_case(\"Hello\")); // Expected: \"hELLO\"\n        System.out.println(solution.flip_case(\"Java\"));  // Expected: \"jAVA\"\n        System.out.println(solution.flip_case(\"1234\"));  // Expected: \"1234\"\n        System.out.println(solution.flip_case(\"AbCdEf\")); // Expected: \"aBcDeF\"\n        System.out.println(solution.flip_case(\"\"));      // Expected: \"\"\n    }\n}\n"}
{"task_id": "Java/28", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Concatenate list of strings into a single string\n     * \n     * @param strings List of strings to be concatenated\n     * @return A single string resulting from concatenating all the strings in the list\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder result = new StringBuilder();\n        for (String str : strings) {\n            result.append(str);\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: Empty list\n        List<String> emptyList = new ArrayList<>();\n        System.out.println(\"Test Case 1: \" + (solution.concatenate(emptyList).equals(\"\") ? \"Passed\" : \"Failed\"));\n\n        // Test case 2: Non-empty list\n        List<String> nonEmptyList = Arrays.asList(\"a\", \"b\", \"c\");\n        System.out.println(\"Test Case 2: \" + (solution.concatenate(nonEmptyList).equals(\"abc\") ? \"Passed\" : \"Failed\"));\n\n        // Test case 3: List with spaces and special characters\n        List<String> specialList = Arrays.asList(\"hello\", \" \", \"world\", \"!\", \"123\");\n        System.out.println(\"Test Case 3: \" + (solution.concatenate(specialList).equals(\"hello world!123\") ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/29", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix(List.of(), \"a\")\n    []\n    >>> filter_by_prefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: Empty list\n        List<String> test1 = solution.filter_by_prefix(List.of(), \"a\");\n        System.out.println(\"Test 1: \" + test1); // Expected: []\n\n        // Test case 2: Non-empty list\n        List<String> test2 = solution.filter_by_prefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\");\n        System.out.println(\"Test 2: \" + test2); // Expected: [abc, array]\n\n        // Test case 3: No matches\n        List<String> test3 = solution.filter_by_prefix(Arrays.asList(\"bcd\", \"cde\", \"def\"), \"a\");\n        System.out.println(\"Test 3: \" + test3); // Expected: []\n\n        // Test case 4: Multiple matches\n        List<String> test4 = solution.filter_by_prefix(Arrays.asList(\"apple\", \"application\", \"banana\", \"apricot\"), \"app\");\n        System.out.println(\"Test 4: \" + test4); // Expected: [apple, application, apricot]\n    }\n}\n"}
{"task_id": "Java/30", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> get_positive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> get_positive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> get_positive(List<Integer> l) {\n        return l.stream()\n                .filter(x -> x > 0)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> test1 = Arrays.asList(-1, 2, -4, 5, 6);\n        List<Integer> result1 = solution.get_positive(test1);\n        System.out.println(\"Test 1: \" + result1); // Expected: [2, 5, 6]\n\n        // Test case 2\n        List<Integer> test2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n        List<Integer> result2 = solution.get_positive(test2);\n        System.out.println(\"Test 2: \" + result2); // Expected: [5, 3, 2, 3, 9, 123, 1]\n    }\n}\n"}
{"task_id": "Java/31", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    false\n    >>> is_prime(101)\n    true\n    >>> is_prime(11)\n    true\n    >>> is_prime(13441)\n    true\n    >>> is_prime(61)\n    true\n    >>> is_prime(4)\n    false\n    >>> is_prime(1)\n    false\n     */\n    public boolean is_prime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.is_prime(6));      // Expected: false\n        System.out.println(solution.is_prime(101));    // Expected: true\n        System.out.println(solution.is_prime(11));     // Expected: true\n        System.out.println(solution.is_prime(13441));  // Expected: true\n        System.out.println(solution.is_prime(61));     // Expected: true\n        System.out.println(solution.is_prime(4));      // Expected: false\n        System.out.println(solution.is_prime(1));      // Expected: false\n    }\n}\n"}
{"task_id": "Java/32", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Evaluates polynomial with coefficients xs at point x.\n     * return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n\n    /**\n     * xs are coefficients of a polynomial.\n     * find_zero finds x such that poly(x) = 0.\n     * find_zero returns only one zero point, even if there are many.\n     * Moreover, find_zero only takes list xs having an even number of coefficients\n     * and the largest non-zero coefficient as it guarantees a solution.\n     * \n     * @param xs List of polynomial coefficients.\n     * @return A zero point of the polynomial.\n     */\n    public double find_zero(List<Double> xs) {\n        if (xs == null || xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"List must have an even number of coefficients.\");\n        }\n\n        // Using the Newton-Raphson method to find a root\n        double x0 = 0.0;\n        double epsilon = 1e-7;\n        double x1 = x0 - poly(xs, x0) / derivative(xs, x0);\n\n        while (Math.abs(x1 - x0) > epsilon) {\n            x0 = x1;\n            x1 = x0 - poly(xs, x0) / derivative(xs, x0);\n        }\n\n        return x1;\n    }\n\n    /**\n     * Computes the derivative of the polynomial.\n     * \n     * @param xs List of polynomial coefficients.\n     * @return List of coefficients of the derivative polynomial.\n     */\n    private List<Double> derivative(List<Double> xs) {\n        List<Double> derivativeCoeffs = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            derivativeCoeffs.add(i * xs.get(i));\n        }\n        return derivativeCoeffs;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Double> test1 = Arrays.asList(1.0, 2.0); // f(x) = 1 + 2x\n        List<Double> test2 = Arrays.asList(-6.0, 11.0, -6.0, 1.0); // f(x) = -6 + 11x - 6x^2 + x^3\n\n        System.out.println(\"Test 1: \" + solution.find_zero(test1)); // Expected: -0.5\n        System.out.println(\"Test 2: \" + solution.find_zero(test2)); // Expected: 1.0\n    }\n}\n"}
{"task_id": "Java/33", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted in ascending order.\n    >>> sort_third(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sort_third(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sort_third(List<Integer> l) {\n        List<Integer> sortedIndices = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if ((i + 1) % 3 == 0) {\n                sortedIndices.add(l.get(i));\n            }\n        }\n        \n        Collections.sort(sortedIndices);\n        \n        List<Integer> result = new ArrayList<>(l);\n        int sortedIndex = 0;\n        for (int i = 0; i < result.size(); i++) {\n            if ((i + 1) % 3 == 0) {\n                result.set(i, sortedIndices.get(sortedIndex++));\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        List<Integer> test1 = Arrays.asList(1, 2, 3);\n        List<Integer> test2 = Arrays.asList(5, 6, 3, 4, 8, 9, 2);\n        \n        System.out.println(\"Test 1: \" + solution.sort_third(test1)); // Expected: [1, 2, 3]\n        System.out.println(\"Test 2: \" + solution.sort_third(test2)); // Expected: [2, 6, 3, 4, 8, 9, 5]\n    }\n}\n"}
{"task_id": "Java/34", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Return sorted unique elements in a list\n     * \n     * @param l the input list of integers\n     * @return a list containing the sorted unique elements\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> set = new HashSet<>(l);\n        List<Integer> result = new ArrayList<>(set);\n        Collections.sort(result);\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case\n        List<Integer> input = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        List<Integer> output = solution.unique(input);\n        \n        // Expected output: [0, 2, 3, 5, 9, 123]\n        System.out.println(output);\n    }\n}\n"}
{"task_id": "Java/35", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Return maximum element in the list.\n     * \n     * @param l List of integers\n     * @return The maximum element in the list\n     */\n    public int max_element(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List must not be null or empty\");\n        }\n        \n        int max = l.get(0);\n        for (int num : l) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(1, 2, 3);\n        System.out.println(solution.max_element(test1)); // Expected output: 3\n\n        List<Integer> test2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n        System.out.println(solution.max_element(test2)); // Expected output: 123\n\n        List<Integer> test3 = Arrays.asList(-1, -2, -3, -4, -5);\n        System.out.println(solution.max_element(test3)); // Expected output: -1\n\n        List<Integer> test4 = Arrays.asList(100);\n        System.out.println(solution.max_element(test4)); // Expected output: 100\n\n        try {\n            List<Integer> test5 = Arrays.asList();\n            System.out.println(solution.max_element(test5)); // Expected to throw IllegalArgumentException\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage()); // Expected output: List must not be null or empty\n        }\n\n        try {\n            List<Integer> test6 = null;\n            System.out.println(solution.max_element(test6)); // Expected to throw IllegalArgumentException\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage()); // Expected output: List must not be null or empty\n        }\n    }\n}\n"}
{"task_id": "Java/36", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n     * \n     * @param n The upper limit (exclusive).\n     * @return The count of digit 7 appearances.\n     */\n    public int fizz_buzz(int n) {\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String numStr = Integer.toString(i);\n                for (int j = 0; j < numStr.length(); j++) {\n                    if (numStr.charAt(j) == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.fizz_buzz(50)); // Expected output: 0\n        System.out.println(solution.fizz_buzz(78)); // Expected output: 2\n        System.out.println(solution.fizz_buzz(79)); // Expected output: 3\n    }\n}\n"}
{"task_id": "Java/37", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * This function takes a list l and returns a list l' such that\n     * l' is identical to l in the odd indices, while its values at the even indices are equal\n     * to the values of the even indices of l, but sorted.\n     * \n     * Examples:\n     * >>> sort_even(Arrays.asList(1, 2, 3))\n     * [1, 2, 3]\n     * >>> sort_even(Arrays.asList(5, 6, 3, 4))\n     * [3, 6, 5, 4]\n     */\n    public List<Integer> sort_even(List<Integer> l) {\n        List<Integer> evenIndicesValues = new ArrayList<>();\n        \n        // Collect values at even indices\n        for (int i = 0; i < l.size(); i += 2) {\n            evenIndicesValues.add(l.get(i));\n        }\n        \n        // Sort the collected values\n        Collections.sort(evenIndicesValues);\n        \n        // Create the result list\n        List<Integer> result = new ArrayList<>(l.size());\n        int evenIndex = 0;\n        \n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(evenIndicesValues.get(evenIndex++));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        List<Integer> test1 = Arrays.asList(1, 2, 3);\n        List<Integer> test2 = Arrays.asList(5, 6, 3, 4);\n        List<Integer> test3 = Arrays.asList(7, 8, 9, 10, 11, 12);\n        List<Integer> test4 = Arrays.asList(4, 1, 2, 3);\n        \n        System.out.println(\"Test 1: \" + solution.sort_even(test1)); // Expected: [1, 2, 3]\n        System.out.println(\"Test 2: \" + solution.sort_even(test2)); // Expected: [3, 6, 5, 4]\n        System.out.println(\"Test 3: \" + solution.sort_even(test3)); // Expected: [7, 8, 9, 10, 11, 12]\n        System.out.println(\"Test 4: \" + solution.sort_even(test4)); // Expected: [2, 1, 4, 3]\n    }\n}\n"}
{"task_id": "Java/38", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Encodes the string by cycling groups of three characters.\n     * @param s The input string to be encoded.\n     * @return The encoded string.\n     */\n    public String encodeCyclic(String s) {\n        // Split string into groups of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // Cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n     * Decodes the string that was encoded with the encodeCyclic function.\n     * @param s The input string to be decoded.\n     * @return The decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // Split string into groups of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // Reverse the cycling for each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        String[] testStrings = {\n            \"hello\",\n            \"world\",\n            \"java\",\n            \"programming\",\n            \"abc\",\n            \"ab\"\n        };\n\n        for (String test : testStrings) {\n            String encoded = solution.encodeCyclic(test);\n            String decoded = solution.decodeCyclic(encoded);\n\n            System.out.println(\"Original: \" + test);\n            System.out.println(\"Encoded: \" + encoded);\n            System.out.println(\"Decoded: \" + decoded);\n            System.out.println();\n        }\n    }\n}\n"}
{"task_id": "Java/39", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * prime_fib returns the n-th number that is both a Fibonacci number and a prime number.\n     * \n     * @param n The position of the number in the sequence of prime Fibonacci numbers.\n     * @return The n-th prime Fibonacci number.\n     */\n    public int prime_fib(int n) {\n        int count = 0;\n        int fib1 = 0;\n        int fib2 = 1;\n        while (true) {\n            int nextFib = fib1 + fib2;\n            if (isPrime(nextFib)) {\n                count++;\n                if (count == n) {\n                    return nextFib;\n                }\n            }\n            fib1 = fib2;\n            fib2 = nextFib;\n        }\n    }\n\n    /**\n     * isPrime checks if a number is prime.\n     * \n     * @param num The number to check.\n     * @return true if the number is prime, false otherwise.\n     */\n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        if (num <= 3) return true;\n        if (num % 2 == 0 || num % 3 == 0) return false;\n        for (int i = 5; i * i <= num; i += 6) {\n            if (num % i == 0 || num % (i + 2) == 0) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.prime_fib(1)); // Expected output: 2\n        System.out.println(solution.prime_fib(2)); // Expected output: 3\n        System.out.println(solution.prime_fib(3)); // Expected output: 5\n        System.out.println(solution.prime_fib(4)); // Expected output: 13\n        System.out.println(solution.prime_fib(5)); // Expected output: 89\n    }\n}\n"}
{"task_id": "Java/40", "generation": "import java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass Solution {\n    /**\n     * triples_sum_to_zero takes a list of integers as an input.\n     * It returns true if there are three distinct elements in the list that\n     * sum to zero, and false otherwise.\n     */\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        if (l == null || l.size() < 3) {\n            return false;\n        }\n\n        Collections.sort(l);\n        for (int i = 0; i < l.size() - 2; i++) {\n            int left = i + 1;\n            int right = l.size() - 1;\n\n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        return false;\n    }\n\n    // Test cases using JUnit\n    @Test\n    public void testTriplesSumToZero() {\n        Solution solution = new Solution();\n\n        assertFalse(solution.triples_sum_to_zero(Arrays.asList(1, 3, 5, 0)));\n        assertTrue(solution.triples_sum_to_zero(Arrays.asList(1, 3, -2, 1)));\n        assertFalse(solution.triples_sum_to_zero(Arrays.asList(1, 2, 3, 7)));\n        assertTrue(solution.triples_sum_to_zero(Arrays.asList(2, 4, -5, 3, 9, 7)));\n        assertFalse(solution.triples_sum_to_zero(Arrays.asList(1)));\n    }\n}\n"}
{"task_id": "Java/41", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int car_race_collision(int n) {\n        // Each car going left to right will eventually collide with each car going right to left.\n        // Therefore, the total number of collisions is n * n.\n        return n * n;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        int[] testCases = {0, 1, 2, 5, 10};\n\n        for (int n : testCases) {\n            int collisions = solution.car_race_collision(n);\n            System.out.println(\"Number of collisions for \" + n + \" cars: \" + collisions);\n        }\n    }\n}\n"}
{"task_id": "Java/42", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n     * Return list with elements incremented by 1.\n     * \n     * @param l The input list of integers.\n     * @return A new list with each element incremented by 1.\n     */\n    public List<Integer> incr_list(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(1, 2, 3);\n        List<Integer> result1 = solution.incr_list(test1);\n        System.out.println(\"Test Case 1: \" + result1); // Expected: [2, 3, 4]\n\n        List<Integer> test2 = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        List<Integer> result2 = solution.incr_list(test2);\n        System.out.println(\"Test Case 2: \" + result2); // Expected: [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    }\n}\n"}
{"task_id": "Java/43", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * pairs_sum_to_zero takes a list of integers as an input.\n     * It returns true if there are two distinct elements in the list that\n     * sum to zero, and false otherwise.\n     */\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        Set<Integer> seen = new HashSet<>();\n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1, 3, -2, 1))); // false\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(2, 4, -5, 3, 5, 7))); // true\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1))); // false\n    }\n}\n"}
{"task_id": "Java/44", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Change numerical base of input number x to base.\n     * Return string representation after the conversion.\n     * Base numbers are less than 10.\n     * \n     * @param x the number to convert\n     * @param base the new base (less than 10)\n     * @return the string representation of the number in the new base\n     */\n    public String change_base(int x, int base) {\n        if (base < 2 || base > 9) {\n            throw new IllegalArgumentException(\"Base must be between 2 and 9\");\n        }\n        \n        StringBuilder result = new StringBuilder();\n        while (x > 0) {\n            result.insert(0, x % base);\n            x /= base;\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.change_base(8, 3));  // Expected output: \"22\"\n        System.out.println(solution.change_base(8, 2));  // Expected output: \"1000\"\n        System.out.println(solution.change_base(7, 2));  // Expected output: \"111\"\n        System.out.println(solution.change_base(15, 4)); // Expected output: \"33\"\n        System.out.println(solution.change_base(25, 5)); // Expected output: \"100\"\n    }\n}\n"}
{"task_id": "Java/45", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n     */\n    public double triangle_area(double a, double h) {\n        return 0.5 * a * h;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        double side1 = 5;\n        double height1 = 3;\n        double expectedArea1 = 7.5;\n        double result1 = solution.triangle_area(side1, height1);\n        System.out.println(\"Test Case 1: Expected Area = \" + expectedArea1 + \", Actual Area = \" + result1);\n\n        double side2 = 10;\n        double height2 = 4;\n        double expectedArea2 = 20.0;\n        double result2 = solution.triangle_area(side2, height2);\n        System.out.println(\"Test Case 2: Expected Area = \" + expectedArea2 + \", Actual Area = \" + result2);\n\n        double side3 = 7;\n        double height3 = 2.5;\n        double expectedArea3 = 8.75;\n        double result3 = solution.triangle_area(side3, height3);\n        System.out.println(\"Test Case 3: Expected Area = \" + expectedArea3 + \", Actual Area = \" + result3);\n    }\n}\n"}
{"task_id": "Java/46", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0 || n == 1 || n == 3) return 0;\n        if (n == 2) return 2;\n\n        int[] dp = new int[n + 1];\n        dp[0] = 0;\n        dp[1] = 0;\n        dp[2] = 2;\n        dp[3] = 0;\n\n        for (int i = 4; i <= n; i++) {\n            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4];\n        }\n\n        return dp[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.fib4(5)); // Expected output: 4\n        System.out.println(solution.fib4(6)); // Expected output: 8\n        System.out.println(solution.fib4(7)); // Expected output: 14\n        System.out.println(solution.fib4(0)); // Expected output: 0\n        System.out.println(solution.fib4(1)); // Expected output: 0\n        System.out.println(solution.fib4(2)); // Expected output: 2\n        System.out.println(solution.fib4(3)); // Expected output: 0\n        System.out.println(solution.fib4(10)); // Expected output: 88\n    }\n}\n"}
{"task_id": "Java/47", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Return median of elements in the list l.\n     * \n     * @param l the list of integers\n     * @return the median value\n     */\n    public double median(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List must not be null or empty\");\n        }\n\n        List<Integer> sortedList = new ArrayList<>(l);\n        Collections.sort(sortedList);\n\n        int size = sortedList.size();\n        if (size % 2 == 1) {\n            return sortedList.get(size / 2);\n        } else {\n            return (sortedList.get(size / 2 - 1) + sortedList.get(size / 2)) / 2.0;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(3, 1, 2, 4, 5);\n        List<Integer> test2 = Arrays.asList(-10, 4, 6, 1000, 10, 20);\n\n        System.out.println(\"Median of \" + test1 + \" is: \" + solution.median(test1)); // Expected: 3\n        System.out.println(\"Median of \" + test2 + \" is: \" + solution.median(test2)); // Expected: 8.0\n    }\n}\n"}
{"task_id": "Java/48", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Checks if given string is a palindrome\n     * \n     * @param text The string to check\n     * @return true if the string is a palindrome, false otherwise\n     */\n    public boolean is_palindrome(String text) {\n        int left = 0;\n        int right = text.length() - 1;\n        \n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.is_palindrome(\"\"));      // true\n        System.out.println(solution.is_palindrome(\"aba\"));   // true\n        System.out.println(solution.is_palindrome(\"aaaaa\")); // true\n        System.out.println(solution.is_palindrome(\"zbcd\"));  // false\n    }\n}\n"}
{"task_id": "Java/49", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return 2^n modulo p (beaware of numerics).\n     * \n     * @param n the exponent\n     * @param p the modulus\n     * @return 2^n % p\n     */\n    public int modp(int n, int p) {\n        // Using modular exponentiation to avoid overflow\n        int result = 1;\n        int base = 2;\n\n        while (n > 0) {\n            if (n % 2 == 1) {\n                result = (result * base) % p;\n            }\n            base = (base * base) % p;\n            n = n / 2;\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.modp(3, 5));    // Expected output: 3\n        System.out.println(solution.modp(1101, 101)); // Expected output: 2\n        System.out.println(solution.modp(0, 101));   // Expected output: 1\n        System.out.println(solution.modp(3, 11));    // Expected output: 8\n        System.out.println(solution.modp(100, 101)); // Expected output: 1\n    }\n}\n"}
{"task_id": "Java/50", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Encodes a string by shifting every character by 5 in the alphabet.\n     * @param s The input string to be encoded.\n     * @return The encoded string.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (Character.isLetter(ch)) {\n                char base = Character.isUpperCase(ch) ? 'A' : 'a';\n                sb.append((char) (base + ((ch - base + 5) % 26)));\n            } else {\n                sb.append(ch);\n            }\n        }\n        return sb.toString();\n    }\n\n    /**\n     * Decodes a string that was encoded using the encodeShift function.\n     * @param s The encoded string to be decoded.\n     * @return The decoded string.\n     */\n    public String decode_shift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (Character.isLetter(ch)) {\n                char base = Character.isUpperCase(ch) ? 'A' : 'a';\n                sb.append((char) (base + ((ch - base - 5 + 26) % 26)));\n            } else {\n                sb.append(ch);\n            }\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        String original1 = \"Hello, World!\";\n        String encoded1 = solution.encodeShift(original1);\n        String decoded1 = solution.decode_shift(encoded1);\n\n        System.out.println(\"Original: \" + original1);\n        System.out.println(\"Encoded: \" + encoded1);\n        System.out.println(\"Decoded: \" + decoded1);\n\n        String original2 = \"Java Programming\";\n        String encoded2 = solution.encodeShift(original2);\n        String decoded2 = solution.decode_shift(encoded2);\n\n        System.out.println(\"Original: \" + original2);\n        System.out.println(\"Encoded: \" + encoded2);\n        System.out.println(\"Decoded: \" + decoded2);\n    }\n}\n"}
{"task_id": "Java/51", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * remove_vowels is a function that takes a string and returns a string without vowels.\n     * \n     * @param text The input string from which vowels will be removed.\n     * @return A new string with all vowels removed.\n     */\n    public String remove_vowels(String text) {\n        // Define a set of vowels for easy lookup\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        \n        // Use StringBuilder to build the result string\n        StringBuilder result = new StringBuilder();\n        \n        // Iterate through each character in the input string\n        for (char c : text.toCharArray()) {\n            // If the character is not a vowel, append it to the result\n            if (!vowels.contains(c)) {\n                result.append(c);\n            }\n        }\n        \n        // Return the result string\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.remove_vowels(\"\")); // Expected: \"\"\n        System.out.println(solution.remove_vowels(\"abcdef\\nghijklm\")); // Expected: \"bcdf\\nghjklm\"\n        System.out.println(solution.remove_vowels(\"abcdef\")); // Expected: \"bcdf\"\n        System.out.println(solution.remove_vowels(\"aaaaa\")); // Expected: \"\"\n        System.out.println(solution.remove_vowels(\"aaBAA\")); // Expected: \"B\"\n        System.out.println(solution.remove_vowels(\"zbcd\")); // Expected: \"zbcd\"\n    }\n}\n"}
{"task_id": "Java/52", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Return true if all numbers in the list l are below threshold t.\n     * \n     * @param l the list of integers to check\n     * @param t the threshold value\n     * @return true if all numbers in the list are below the threshold, otherwise false\n     */\n    public boolean below_threshold(List<Integer> l, int t) {\n        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> testList1 = Arrays.asList(1, 2, 4, 10);\n        int threshold1 = 100;\n        System.out.println(\"Test Case 1: \" + solution.below_threshold(testList1, threshold1)); // Expected: true\n\n        List<Integer> testList2 = Arrays.asList(1, 20, 4, 10);\n        int threshold2 = 5;\n        System.out.println(\"Test Case 2: \" + solution.below_threshold(testList2, threshold2)); // Expected: false\n\n        List<Integer> testList3 = Arrays.asList(3, 6, 9, 12);\n        int threshold3 = 15;\n        System.out.println(\"Test Case 3: \" + solution.below_threshold(testList3, threshold3)); // Expected: true\n\n        List<Integer> testList4 = Arrays.asList(100, 200, 300);\n        int threshold4 = 50;\n        System.out.println(\"Test Case 4: \" + solution.below_threshold(testList4, threshold4)); // Expected: false\n    }\n}\n"}
{"task_id": "Java/53", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Add two numbers x and y\n     * \n     * @param x the first number\n     * @param y the second number\n     * @return the sum of x and y\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}\n\nclass TestSolution {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Test Case 1: add(2, 3)\");\n        System.out.println(\"Expected: 5\");\n        System.out.println(\"Actual: \" + solution.add(2, 3));\n        System.out.println();\n\n        System.out.println(\"Test Case 2: add(5, 7)\");\n        System.out.println(\"Expected: 12\");\n        System.out.println(\"Actual: \" + solution.add(5, 7));\n        System.out.println();\n    }\n}\n"}
{"task_id": "Java/54", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Check if two words have the same kind of characters.\n    */\n    public boolean same_chars(String s0, String s1) {\n        Set<Character> set0 = new HashSet<>();\n        Set<Character> set1 = new HashSet<>();\n\n        for (char c : s0.toCharArray()) {\n            set0.add(c);\n        }\n\n        for (char c : s1.toCharArray()) {\n            set1.add(c);\n        }\n\n        return set0.equals(set1);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // true\n        System.out.println(solution.same_chars(\"abcd\", \"dddddddabc\")); // true\n        System.out.println(solution.same_chars(\"dddddddabc\", \"abcd\")); // true\n        System.out.println(solution.same_chars(\"eabcd\", \"dddddddabc\")); // false\n        System.out.println(solution.same_chars(\"abcd\", \"dddddddabce\")); // false\n        System.out.println(solution.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // false\n    }\n}\n"}
{"task_id": "Java/55", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return n-th Fibonacci number.\n     * \n     * @param n The position in the Fibonacci sequence.\n     * @return The n-th Fibonacci number.\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0, b = 1, c;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.fib(10)); // Expected output: 55\n        System.out.println(solution.fib(1));  // Expected output: 1\n        System.out.println(solution.fib(8));  // Expected output: 21\n        System.out.println(solution.fib(0));  // Expected output: 0\n        System.out.println(solution.fib(5));  // Expected output: 5\n    }\n}\n"}
{"task_id": "Java/56", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Checks if the given string of brackets is correctly bracketed.\n     * \n     * @param brackets A string consisting of '<' and '>'.\n     * @return true if every opening bracket has a corresponding closing bracket, false otherwise.\n     */\n    public boolean correct_bracketing(String brackets) {\n        int balance = 0;\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                balance++;\n            } else if (c == '>') {\n                balance--;\n            }\n            if (balance < 0) {\n                // If balance is negative, it means there's a closing bracket without an opening one\n                return false;\n            }\n        }\n        return balance == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.correct_bracketing(\"<\")); // Expected: false\n        System.out.println(solution.correct_bracketing(\"<>\")); // Expected: true\n        System.out.println(solution.correct_bracketing(\"<<><>>\")); // Expected: true\n        System.out.println(solution.correct_bracketing(\"><<>\")); // Expected: false\n    }\n}\n"}
{"task_id": "Java/57", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Returns true if the list elements are monotonically increasing or decreasing.\n     * \n     * @param l The list of integers to check.\n     * @return true if the list is monotonically increasing or decreasing, false otherwise.\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l == null || l.size() <= 1) {\n            return true;\n        }\n\n        boolean increasing = true;\n        boolean decreasing = true;\n\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n        }\n\n        return increasing || decreasing;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(1, 2, 4, 20);\n        List<Integer> test2 = Arrays.asList(1, 20, 4, 10);\n        List<Integer> test3 = Arrays.asList(4, 1, 0, -10);\n\n        System.out.println(\"Test 1: \" + solution.monotonic(test1)); // Expected: true\n        System.out.println(\"Test 2: \" + solution.monotonic(test2)); // Expected: false\n        System.out.println(\"Test 3: \" + solution.monotonic(test3)); // Expected: true\n    }\n}\n"}
{"task_id": "Java/58", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Return sorted unique common elements for two lists.\n     * \n     * @param l1 The first list of integers.\n     * @param l2 The second list of integers.\n     * @return A sorted list of unique common elements.\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        \n        // Retain only the elements that are present in both sets\n        set1.retainAll(set2);\n        \n        // Convert the set to a list and sort it\n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> l1 = Arrays.asList(1, 4, 3, 34, 653, 2, 5);\n        List<Integer> l2 = Arrays.asList(5, 7, 1, 5, 9, 653, 121);\n        System.out.println(solution.common(l1, l2)); // Expected output: [1, 5, 653]\n\n        // Test case 2\n        List<Integer> l3 = Arrays.asList(5, 3, 2, 8);\n        List<Integer> l4 = Arrays.asList(3, 2);\n        System.out.println(solution.common(l3, l4)); // Expected output: [2, 3]\n    }\n}\n"}
{"task_id": "Java/59", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Return the largest prime factor of n. Assume n > 1 and is not a prime.\n     * \n     * @param n The number to find the largest prime factor of.\n     * @return The largest prime factor of n.\n     */\n    public int largest_prime_factor(int n) {\n        int largestFactor = -1;\n        \n        // Divide n by 2 to remove all even factors\n        while (n % 2 == 0) {\n            largestFactor = 2;\n            n /= 2;\n        }\n        \n        // n must be odd at this point, so we can skip one element (Note i = i + 2)\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            // While i divides n, print i and divide n\n            while (n % i == 0) {\n                largestFactor = i;\n                n /= i;\n            }\n        }\n        \n        // This condition is to handle the case when n is a prime number greater than 2\n        if (n > 2) {\n            largestFactor = n;\n        }\n        \n        return largestFactor;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.largest_prime_factor(13195)); // Expected output: 29\n        System.out.println(solution.largest_prime_factor(2048));  // Expected output: 2\n        System.out.println(solution.largest_prime_factor(600851475143)); // Expected output: 6857 (Note: This will not work as expected because 600851475143 exceeds the range of int)\n    }\n}\n"}
{"task_id": "Java/60", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * sum_to_n is a function that sums numbers from 1 to n.\n     * \n     * Examples:\n     * >>> sum_to_n(30)\n     * 465\n     * >>> sum_to_n(100)\n     * 5050\n     * >>> sum_to_n(5)\n     * 15\n     * >>> sum_to_n(10)\n     * 55\n     * >>> sum_to_n(1)\n     * 1\n     */\n    public int sum_to_n(int n) {\n        return (n * (n + 1)) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Sum to 30: \" + solution.sum_to_n(30)); // Expected: 465\n        System.out.println(\"Sum to 100: \" + solution.sum_to_n(100)); // Expected: 5050\n        System.out.println(\"Sum to 5: \" + solution.sum_to_n(5)); // Expected: 15\n        System.out.println(\"Sum to 10: \" + solution.sum_to_n(10)); // Expected: 55\n        System.out.println(\"Sum to 1: \" + solution.sum_to_n(1)); // Expected: 1\n    }\n}\n"}
{"task_id": "Java/61", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Checks if the given string of brackets is correctly bracketed.\n     * \n     * @param brackets A string containing only '(' and ')'.\n     * @return true if every opening bracket has a corresponding closing bracket, false otherwise.\n     */\n    public boolean correct_bracketing(String brackets) {\n        int balance = 0;\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                balance++;\n            } else if (c == ')') {\n                balance--;\n            }\n            if (balance < 0) {\n                // Found a closing bracket without a matching opening bracket\n                return false;\n            }\n        }\n        return balance == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.correct_bracketing(\"(\"));       // Expected: false\n        System.out.println(solution.correct_bracketing(\"()\"));      // Expected: true\n        System.out.println(solution.correct_bracketing(\"(()())\"));  // Expected: true\n        System.out.println(solution.correct_bracketing(\")(()\"));    // Expected: false\n    }\n}\n"}
{"task_id": "Java/62", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * xs represent coefficients of a polynomial.\n     * xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     * Return derivative of this polynomial in the same form.\n     * \n     * Example:\n     * >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n     * [1, 4, 12, 20]\n     * >>> derivative(Arrays.asList(1, 2, 3))\n     * [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> test1 = Arrays.asList(3, 1, 2, 4, 5);\n        System.out.println(\"Input: \" + test1);\n        System.out.println(\"Output: \" + solution.derivative(test1));\n\n        // Test case 2\n        List<Integer> test2 = Arrays.asList(1, 2, 3);\n        System.out.println(\"Input: \" + test2);\n        System.out.println(\"Output: \" + solution.derivative(test2));\n\n        // Test case 3\n        List<Integer> test3 = Arrays.asList(0, 0, 5, 0, 10);\n        System.out.println(\"Input: \" + test3);\n        System.out.println(\"Output: \" + solution.derivative(test3));\n    }\n}\n"}
{"task_id": "Java/63", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0 || n == 1) return 0;\n        if (n == 2) return 1;\n\n        int[] dp = new int[n + 1];\n        dp[0] = 0;\n        dp[1] = 0;\n        dp[2] = 1;\n\n        for (int i = 3; i <= n; i++) {\n            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];\n        }\n\n        return dp[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.fibfib(1)); // Expected output: 0\n        System.out.println(solution.fibfib(5)); // Expected output: 4\n        System.out.println(solution.fibfib(8)); // Expected output: 24\n        System.out.println(solution.fibfib(10)); // Expected output: 81\n    }\n}\n"}
{"task_id": "Java/64", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Write a function vowels_count which takes a string representing\n     * a word as input and returns the number of vowels in the string.\n     * Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n     * vowel, but only when it is at the end of the given word.\n     *\n     * Example:\n     * >>> vowels_count(\"abcde\")\n     * 2\n     * >>> vowels_count(\"ACEDY\")\n     * 3\n     */\n    public int vowels_count(String s) {\n        if (s == null || s.isEmpty()) {\n            return 0;\n        }\n\n        int count = 0;\n        String lowerCaseString = s.toLowerCase();\n\n        for (int i = 0; i < lowerCaseString.length(); i++) {\n            char c = lowerCaseString.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n\n        // Check if the last character is 'y'\n        if (lowerCaseString.endsWith(\"y\")) {\n            count++;\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.vowels_count(\"abcde\")); // Expected output: 2\n        System.out.println(solution.vowels_count(\"ACEDY\")); // Expected output: 3\n        System.out.println(solution.vowels_count(\"rhythm\")); // Expected output: 0\n        System.out.println(solution.vowels_count(\"SYZYGY\")); // Expected output: 1\n        System.out.println(solution.vowels_count(\"\")); // Expected output: 0\n        System.out.println(solution.vowels_count(\"aeiou\")); // Expected output: 5\n    }\n}\n"}
{"task_id": "Java/65", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Circular shift the digits of the integer x, shift the digits right by shift\n     * and return the result as a string.\n     * If shift > number of digits, return digits reversed.\n     * \n     * @param x the integer to be shifted\n     * @param shift the number of positions to shift the digits\n     * @return the resulting string after circular shift\n     */\n    public String circular_shift(int x, int shift) {\n        String numStr = Integer.toString(x);\n        int len = numStr.length();\n        \n        // If shift is greater than the number of digits, reverse the string\n        if (shift >= len) {\n            return new StringBuilder(numStr).reverse().toString();\n        }\n        \n        // Perform the circular shift\n        shift = shift % len; // In case shift is larger than the length\n        String shifted = numStr.substring(len - shift) + numStr.substring(0, len - shift);\n        return shifted;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n\n        // Test cases\n        System.out.println(sol.circular_shift(12, 1)); // Expected: \"21\"\n        System.out.println(sol.circular_shift(12, 2)); // Expected: \"12\"\n        System.out.println(sol.circular_shift(12345, 2)); // Expected: \"45123\"\n        System.out.println(sol.circular_shift(12345, 5)); // Expected: \"54321\" (reversed)\n        System.out.println(sol.circular_shift(12345, 7)); // Expected: \"34512\" (7 % 5 = 2, so shift by 2)\n    }\n}\n"}
{"task_id": "Java/66", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.digitSum(\"\")); // Expected output: 0\n        System.out.println(solution.digitSum(\"abAB\")); // Expected output: 131\n        System.out.println(solution.digitSum(\"abcCd\")); // Expected output: 67\n        System.out.println(solution.digitSum(\"helloE\")); // Expected output: 69\n        System.out.println(solution.digitSum(\"woArBld\")); // Expected output: 131\n        System.out.println(solution.digitSum(\"aAaaaXa\")); // Expected output: 153\n    }\n}\n"}
{"task_id": "Java/67", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Calculates the number of mangoes in the basket based on the given string and total number of fruits.\n     * \n     * @param s The string representing the number of apples and oranges.\n     * @param n The total number of fruits in the basket.\n     * @return The number of mangoes in the basket.\n     */\n    public int fruit_distribution(String s, int n) {\n        // Split the input string to extract the numbers\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[3]);\n        \n        // Calculate the number of mangoes\n        int mangoes = n - (apples + oranges);\n        return mangoes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.fruit_distribution(\"5 apples and 6 oranges\", 19)); // Expected output: 8\n        System.out.println(solution.fruit_distribution(\"0 apples and 1 oranges\", 3));  // Expected output: 2\n        System.out.println(solution.fruit_distribution(\"2 apples and 3 oranges\", 100)); // Expected output: 95\n        System.out.println(solution.fruit_distribution(\"100 apples and 1 oranges\", 120)); // Expected output: 19\n    }\n}\n"}
{"task_id": "Java/68", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Plucks the node with the smallest even value from the array.\n     * If multiple nodes have the same smallest even value, returns the one with the smallest index.\n     * If no even values are found or the array is empty, returns an empty list.\n     *\n     * @param arr the list of non-negative integers representing the tree branch\n     * @return a list containing the smallest even value and its index, or an empty list if no such value exists\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        int minEvenValue = Integer.MAX_VALUE;\n        int minIndex = -1;\n\n        for (int i = 0; i < arr.size(); i++) {\n            int value = arr.get(i);\n            if (value % 2 == 0 && value < minEvenValue) {\n                minEvenValue = value;\n                minIndex = i;\n            }\n        }\n\n        if (minIndex == -1) {\n            return new ArrayList<>();\n        } else {\n            return Arrays.asList(minEvenValue, minIndex);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(4, 2, 3);\n        List<Integer> test2 = Arrays.asList(1, 2, 3);\n        List<Integer> test3 = new ArrayList<>();\n        List<Integer> test4 = Arrays.asList(5, 0, 3, 0, 4, 2);\n\n        System.out.println(solution.pluck(test1)); // Output: [2, 1]\n        System.out.println(solution.pluck(test2)); // Output: [2, 1]\n        System.out.println(solution.pluck(test3)); // Output: []\n        System.out.println(solution.pluck(test4)); // Output: [0, 1]\n    }\n}\n"}
{"task_id": "Java/69", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Finds the greatest integer greater than zero whose frequency is greater than or equal to its value.\n     * @param lst List of positive integers.\n     * @return The greatest integer meeting the criteria, or -1 if no such integer exists.\n     */\n    public int search(List<Integer> lst) {\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        // Count the frequency of each integer\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        // Find the greatest integer that meets the criteria\n        int result = -1;\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int num = entry.getKey();\n            int freq = entry.getValue();\n            if (num <= freq && num > result) {\n                result = num;\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(4, 1, 2, 2, 3, 1);\n        List<Integer> test2 = Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4);\n        List<Integer> test3 = Arrays.asList(5, 5, 4, 4, 4);\n\n        System.out.println(solution.search(test1)); // Expected output: 2\n        System.out.println(solution.search(test2)); // Expected output: 3\n        System.out.println(solution.search(test3)); // Expected output: -1\n    }\n}\n"}
{"task_id": "Java/70", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given list of integers, return list in strange order.\n     * Strange sorting, is when you start with the minimum value,\n     * then maximum of the remaining integers, then minimum and so on.\n     *\n     * Examples:\n     * strange_sort_list(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n     * strange_sort_list(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n     * strange_sort_list(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        while (!lst.isEmpty()) {\n            // Add the minimum value\n            int min = Collections.min(lst);\n            result.add(min);\n            lst.remove(Integer.valueOf(min));\n\n            if (!lst.isEmpty()) {\n                // Add the maximum value\n                int max = Collections.max(lst);\n                result.add(max);\n                lst.remove(Integer.valueOf(max));\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(1, 2, 3, 4);\n        List<Integer> expected1 = Arrays.asList(1, 4, 2, 3);\n        System.out.println(\"Test Case 1: \" + (solution.strange_sort_list(test1).equals(expected1) ? \"Passed\" : \"Failed\"));\n\n        List<Integer> test2 = Arrays.asList(5, 5, 5, 5);\n        List<Integer> expected2 = Arrays.asList(5, 5, 5, 5);\n        System.out.println(\"Test Case 2: \" + (solution.strange_sort_list(test2).equals(expected2) ? \"Passed\" : \"Failed\"));\n\n        List<Integer> test3 = Arrays.asList();\n        List<Integer> expected3 = Arrays.asList();\n        System.out.println(\"Test Case 3: \" + (solution.strange_sort_list(test3).equals(expected3) ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/71", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n     */\n    public double triangle_area(double a, double b, double c) {\n        // Check if the sides form a valid triangle\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n\n        // Calculate the semi-perimeter\n        double s = (a + b + c) / 2;\n\n        // Calculate the area using Heron's formula\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\n        // Round the area to 2 decimal points\n        return Math.round(area * 100.0) / 100.0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.triangle_area(3, 4, 5));  // Expected output: 6.00\n        System.out.println(solution.triangle_area(1, 2, 10)); // Expected output: -1\n        System.out.println(solution.triangle_area(7, 10, 5)); // Expected output: 16.25\n        System.out.println(solution.triangle_area(1, 1, 1));  // Expected output: 0.43\n        System.out.println(solution.triangle_area(2, 2, 3));  // Expected output: 1.98\n    }\n}\n"}
{"task_id": "Java/72", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Returns true if the object q will fly, and false otherwise.\n     * The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n     *\n     * @param q the list of integers representing the object\n     * @param w the maximum possible weight\n     * @return true if the object will fly, false otherwise\n     */\n    public boolean will_it_fly(List<Integer> q, int w) {\n        // Check if the list is a palindrome\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (!q.get(i).equals(q.get(q.size() - 1 - i))) {\n                return false;\n            }\n        }\n\n        // Calculate the sum of the elements\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n\n        // Check if the sum is less than or equal to the maximum weight\n        return sum <= w;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.will_it_fly(Arrays.asList(1, 2), 5)); // false\n        System.out.println(solution.will_it_fly(Arrays.asList(3, 2, 3), 1)); // false\n        System.out.println(solution.will_it_fly(Arrays.asList(3, 2, 3), 9)); // true\n        System.out.println(solution.will_it_fly(Arrays.asList(3), 5)); // true\n    }\n}\n"}
{"task_id": "Java/73", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given an array arr of integers, find the minimum number of elements that\n     * need to be changed to make the array palindromic. A palindromic array is an array that\n     * is read the same backwards and forwards. In one change, you can change one element to any other element.\n     *\n     * @param arr the list of integers\n     * @return the minimum number of changes required to make the array palindromic\n     */\n    public int smallest_change(List<Integer> arr) {\n        int n = arr.size();\n        int changes = 0;\n        \n        for (int i = 0; i < n / 2; i++) {\n            if (!arr.get(i).equals(arr.get(n - 1 - i))) {\n                changes++;\n            }\n        }\n        \n        return changes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6);\n        List<Integer> test2 = Arrays.asList(1, 2, 3, 4, 3, 2, 2);\n        List<Integer> test3 = Arrays.asList(1, 2, 3, 2, 1);\n\n        System.out.println(\"Test Case 1: Expected: 4, Actual: \" + solution.smallest_change(test1));\n        System.out.println(\"Test Case 2: Expected: 1, Actual: \" + solution.smallest_change(test2));\n        System.out.println(\"Test Case 3: Expected: 0, Actual: \" + solution.smallest_change(test3));\n    }\n}\n"}
{"task_id": "Java/74", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match(Arrays.asList(), Arrays.asList()) -> []\n    total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    total_match(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        int count1 = lst1.stream().mapToInt(String::length).sum();\n        int count2 = lst2.stream().mapToInt(String::length).sum();\n\n        if (count1 <= count2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.total_match(Arrays.asList(), Arrays.asList())); // []\n        System.out.println(solution.total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\"))); // [\"hI\", \"Hi\"]\n        System.out.println(solution.total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\"))); // [\"hi\", \"admin\"]\n        System.out.println(solution.total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\"))); // [\"hI\", \"hi\", \"hi\"]\n        System.out.println(solution.total_match(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"))); // [\"4\"]\n    }\n}\n"}
{"task_id": "Java/75", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that the prime number is less than 100.\n    Example:\n    is_multiply_prime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean is_multiply_prime(int a) {\n        if (a < 2) return false;\n\n        List<Integer> primes = generatePrimesLessThan100();\n        int count = 0;\n\n        for (int prime : primes) {\n            while (a % prime == 0) {\n                a /= prime;\n                count++;\n            }\n            if (count > 3) break; // Early exit if more than 3 prime factors\n        }\n\n        return count == 3 && a == 1;\n    }\n\n    private List<Integer> generatePrimesLessThan100() {\n        List<Integer> primes = new ArrayList<>();\n        boolean[] isPrime = new boolean[100];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = isPrime[1] = false;\n\n        for (int i = 2; i < 100; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n                for (int j = i * i; j < 100; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n\n        return primes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.is_multiply_prime(30)); // true\n        System.out.println(solution.is_multiply_prime(60)); // true\n        System.out.println(solution.is_multiply_prime(100)); // false\n        System.out.println(solution.is_multiply_prime(7)); // false\n        System.out.println(solution.is_multiply_prime(210)); // true\n        System.out.println(solution.is_multiply_prime(2)); // false\n        System.out.println(solution.is_multiply_prime(1)); // false\n        System.out.println(solution.is_multiply_prime(8)); // false\n    }\n}\n"}
{"task_id": "Java/76", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n     */\n    public boolean is_simple_power(int x, int n) {\n        if (n == 1) {\n            return x == 1;\n        }\n        if (x <= 0 || n <= 0) {\n            return false;\n        }\n        double logResult = Math.log(x) / Math.log(n);\n        return Math.abs(logResult - Math.round(logResult)) < 1e-10;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.is_simple_power(1, 4)); // true\n        System.out.println(solution.is_simple_power(2, 2)); // true\n        System.out.println(solution.is_simple_power(8, 2)); // true\n        System.out.println(solution.is_simple_power(3, 2)); // false\n        System.out.println(solution.is_simple_power(3, 1)); // false\n        System.out.println(solution.is_simple_power(5, 3)); // false\n        System.out.println(solution.is_simple_power(16, 2)); // true\n        System.out.println(solution.is_simple_power(27, 3)); // true\n        System.out.println(solution.is_simple_power(1, 1)); // true\n        System.out.println(solution.is_simple_power(0, 2)); // false\n        System.out.println(solution.is_simple_power(-1, 2)); // false\n        System.out.println(solution.is_simple_power(2, -2)); // false\n    }\n}\n"}
{"task_id": "Java/77", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        // Calculate the cube root of the absolute value of a\n        double cubeRoot = Math.cbrt(Math.abs(a));\n        \n        // Check if the cube root is an integer\n        return Math.floor(cubeRoot) == cubeRoot;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.iscube(1));    // true\n        System.out.println(solution.iscube(2));    // false\n        System.out.println(solution.iscube(-1));   // true\n        System.out.println(solution.iscube(64));   // true\n        System.out.println(solution.iscube(0));    // true\n        System.out.println(solution.iscube(180));  // false\n    }\n}\n"}
{"task_id": "Java/78", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hex_key(String num) {\n        // Set of prime hexadecimal digits\n        Set<Character> primeHexDigits = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        int count = 0;\n        for (char c : num.toCharArray()) {\n            if (primeHexDigits.contains(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.hex_key(\"AB\")); // Output: 1\n        System.out.println(solution.hex_key(\"1077E\")); // Output: 2\n        System.out.println(solution.hex_key(\"ABED1A33\")); // Output: 4\n        System.out.println(solution.hex_key(\"123456789ABCDEF0\")); // Output: 6\n        System.out.println(solution.hex_key(\"2020\")); // Output: 2\n        System.out.println(solution.hex_key(\"\")); // Output: 0\n    }\n}\n"}
{"task_id": "Java/79", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   // returns \"db1111db\"\n    decimal_to_binary(32)   // returns \"db100000db\"\n     */\n    public String decimal_to_binary(int decimal) {\n        if (decimal == 0) {\n            return \"db0db\";\n        }\n        StringBuilder binary = new StringBuilder();\n        while (decimal > 0) {\n            binary.insert(0, decimal % 2);\n            decimal /= 2;\n        }\n        return \"db\" + binary.toString() + \"db\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.decimal_to_binary(15));  // Expected output: \"db1111db\"\n        System.out.println(solution.decimal_to_binary(32));  // Expected output: \"db100000db\"\n        System.out.println(solution.decimal_to_binary(0));   // Expected output: \"db0db\"\n        System.out.println(solution.decimal_to_binary(1));   // Expected output: \"db1db\"\n        System.out.println(solution.decimal_to_binary(255)); // Expected output: \"db11111111db\"\n    }\n}\n"}
{"task_id": "Java/80", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Checks if the given string is happy.\n     * A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n     *\n     * @param s the input string\n     * @return true if the string is happy, false otherwise\n     */\n    public boolean is_happy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n\n        for (int i = 0; i <= s.length() - 3; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.is_happy(\"a\"));      // false\n        System.out.println(solution.is_happy(\"aa\"));     // false\n        System.out.println(solution.is_happy(\"abcd\"));   // true\n        System.out.println(solution.is_happy(\"aabb\"));   // false\n        System.out.println(solution.is_happy(\"adb\"));    // true\n        System.out.println(solution.is_happy(\"xyy\"));    // false\n    }\n}\n"}
{"task_id": "Java/81", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Converts a list of numerical GPAs to their corresponding letter grades.\n     *\n     * @param grades A list of GPAs (double values).\n     * @return A list of letter grades (String values).\n     */\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double gpa : grades) {\n            if (gpa == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        List<Double> grades1 = Arrays.asList(4.0, 3.0, 1.7, 2.0, 3.5);\n        List<String> expected1 = Arrays.asList(\"A+\", \"B\", \"C-\", \"C\", \"A-\");\n        System.out.println(\"Test Case 1: \" + (solution.numerical_letter_grade(grades1).equals(expected1) ? \"Passed\" : \"Failed\"));\n\n        List<Double> grades2 = Arrays.asList(3.8, 2.5, 1.2, 0.5, 4.0);\n        List<String> expected2 = Arrays.asList(\"A\", \"B-\", \"D+\", \"D-\", \"A+\");\n        System.out.println(\"Test Case 2: \" + (solution.numerical_letter_grade(grades2).equals(expected2) ? \"Passed\" : \"Failed\"));\n\n        List<Double> grades3 = Arrays.asList(3.4, 2.8, 1.6, 0.8, 0.0);\n        List<String> expected3 = Arrays.asList(\"A-\", \"B\", \"C\", \"D\", \"E\");\n        System.out.println(\"Test Case 3: \" + (solution.numerical_letter_grade(grades3).equals(expected3) ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/82", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    prime_length(\"Hello\") == true\n    prime_length(\"abcdcba\") == true\n    prime_length(\"kittens\") == true\n    prime_length(\"orange\") == false\n     */\n    public boolean prime_length(String string) {\n        int length = string.length();\n        return isPrime(length);\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.prime_length(\"Hello\"));    // true\n        System.out.println(solution.prime_length(\"abcdcba\"));  // true\n        System.out.println(solution.prime_length(\"kittens\"));   // true\n        System.out.println(solution.prime_length(\"orange\"));    // false\n        System.out.println(solution.prime_length(\"a\"));         // false\n        System.out.println(solution.prime_length(\"ab\"));        // true\n        System.out.println(solution.prime_length(\"abc\"));       // true\n        System.out.println(solution.prime_length(\"abcd\"));      // false\n    }\n}\n"}
{"task_id": "Java/83", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int starts_one_ends(int n) {\n        if (n == 1) {\n            return 1; // Only one 1-digit number starts or ends with 1\n        }\n        \n        // For n-digit numbers, there are 9^(n-1) numbers that start with 1\n        // and 9^(n-1) numbers that end with 1.\n        // However, we need to subtract the overlap (numbers that start and end with 1)\n        // which is 9^(n-2).\n        int total = 2 * (int) Math.pow(9, n - 1) - (int) Math.pow(9, n - 2);\n        return total;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.starts_one_ends(1)); // Expected output: 1\n        System.out.println(solution.starts_one_ends(2)); // Expected output: 18\n        System.out.println(solution.starts_one_ends(3)); // Expected output: 162\n        System.out.println(solution.starts_one_ends(4)); // Expected output: 1458\n        System.out.println(solution.starts_one_ends(5)); // Expected output: 13122\n    }\n}\n"}
{"task_id": "Java/84", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return in binary the total sum of its digits.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        int sum = 0;\n        while (N > 0) {\n            sum += N % 10;\n            N /= 10;\n        }\n        return Integer.toBinaryString(sum);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.solve(1000)); // Expected output: \"1\"\n        System.out.println(solution.solve(150));  // Expected output: \"110\"\n        System.out.println(solution.solve(147));  // Expected output: \"1100\"\n        System.out.println(solution.solve(0));    // Expected output: \"0\"\n        System.out.println(solution.solve(9999)); // Expected output: \"11110001111\"\n    }\n}\n"}
{"task_id": "Java/85", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a non-empty list of integers lst, add the even elements that are at odd indices.\n     *\n     * @param lst List of integers\n     * @return The sum of even elements at odd indices\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) { // Start from index 1 and increment by 2 to check odd indices\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(4, 2, 6, 7);\n        List<Integer> test2 = Arrays.asList(1, 3, 5, 7, 9);\n        List<Integer> test3 = Arrays.asList(2, 4, 6, 8, 10);\n        List<Integer> test4 = Arrays.asList(1, 2, 3, 4, 5, 6);\n\n        System.out.println(\"Test 1: \" + solution.add(test1)); // Expected output: 2\n        System.out.println(\"Test 2: \" + solution.add(test2)); // Expected output: 0\n        System.out.println(\"Test 3: \" + solution.add(test3)); // Expected output: 12\n        System.out.println(\"Test 4: \" + solution.add(test4)); // Expected output: 6\n    }\n}\n"}
{"task_id": "Java/86", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle(\"Hi\") returns \"Hi\"\n    anti_shuffle(\"hello\") returns \"ehllo\"\n    anti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String anti_shuffle(String s) {\n        // Split the string into words\n        String[] words = s.split(\" \");\n        StringBuilder result = new StringBuilder();\n\n        for (String word : words) {\n            // Convert the word to a character array\n            char[] chars = word.toCharArray();\n            // Sort the character array\n            Arrays.sort(chars);\n            // Append the sorted word to the result\n            result.append(new String(chars)).append(\" \");\n        }\n\n        // Remove the trailing space\n        return result.toString().trim();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.anti_shuffle(\"Hi\")); // Should print \"Hi\"\n        System.out.println(solution.anti_shuffle(\"hello\")); // Should print \"ehllo\"\n        System.out.println(solution.anti_shuffle(\"Hello World!!!\")); // Should print \"Hello !!!Wdlor\"\n        System.out.println(solution.anti_shuffle(\"Keep calm and code on\")); // Should print \"Keep aclm adn cdeo no\"\n        System.out.println(solution.anti_shuffle(\"Java Programming\")); // Should print \"Jaa avagimnoprrP\"\n    }\n}\n"}
{"task_id": "Java/87", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Finds all occurrences of an integer x in a 2D list and returns their coordinates.\n     * The coordinates are sorted first by rows in ascending order and then by columns in descending order.\n     *\n     * @param lst The 2D list to search through.\n     * @param x The integer to find.\n     * @return A list of lists containing the coordinates of x.\n     */\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    result.add(Arrays.asList(i, j));\n                }\n            }\n        }\n        \n        // Sort by row in ascending order and then by column in descending order\n        result.sort((a, b) -> {\n            if (!a.get(0).equals(b.get(0))) {\n                return a.get(0) - b.get(0);\n            } else {\n                return b.get(1) - a.get(1);\n            }\n        });\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1\n        List<List<Integer>> lst1 = Arrays.asList(\n            Arrays.asList(1, 2, 3, 4, 5, 6),\n            Arrays.asList(1, 2, 3, 4, 1, 6),\n            Arrays.asList(1, 2, 3, 4, 5, 1)\n        );\n        int x1 = 1;\n        System.out.println(\"Test Case 1: \" + solution.get_row(lst1, x1));\n        // Expected output: [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n\n        // Test case 2\n        List<List<Integer>> lst2 = new ArrayList<>();\n        int x2 = 1;\n        System.out.println(\"Test Case 2: \" + solution.get_row(lst2, x2));\n        // Expected output: []\n\n        // Test case 3\n        List<List<Integer>> lst3 = Arrays.asList(\n            new ArrayList<>(),\n            Arrays.asList(1),\n            Arrays.asList(1, 2, 3)\n        );\n        int x3 = 3;\n        System.out.println(\"Test Case 3: \" + solution.get_row(lst3, x3));\n        // Expected output: [[2, 2]]\n    }\n}\n"}
{"task_id": "Java/88", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given an array of non-negative integers, return a copy of the given array after sorting,\n     * you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n     * or sort it in descending order if the sum( first index value, last index value) is even.\n     *\n     * @param array The input list of non-negative integers.\n     * @return A new list sorted based on the specified conditions.\n     */\n    public List<Integer> sort_array(List<Integer> array) {\n        if (array == null || array.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        List<Integer> result = new ArrayList<>(array);\n        int firstValue = array.get(0);\n        int lastValue = array.get(array.size() - 1);\n        int sum = firstValue + lastValue;\n\n        if (sum % 2 == 0) {\n            // Sort in descending order\n            result.sort(Comparator.reverseOrder());\n        } else {\n            // Sort in ascending order\n            result.sort(Comparator.naturalOrder());\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sort_array(new ArrayList<>(List.of()))); // []\n        System.out.println(solution.sort_array(new ArrayList<>(List.of(5)))); // [5]\n        System.out.println(solution.sort_array(new ArrayList<>(List.of(2, 4, 3, 0, 1, 5)))); // [0, 1, 2, 3, 4, 5]\n        System.out.println(solution.sort_array(new ArrayList<>(List.of(2, 4, 3, 0, 1, 5, 6)))); // [6, 5, 4, 3, 2, 1, 0]\n    }\n}\n"}
{"task_id": "Java/89", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Encrypts a given string by rotating each letter in the alphabet by 4 places.\n     * \n     * @param s The input string to be encrypted.\n     * @return The encrypted string.\n     */\n    public String encrypt(String s) {\n        StringBuilder encrypted = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                char base = Character.isUpperCase(c) ? 'A' : 'a';\n                char shifted = (char) ((c - base + 4) % 26 + base);\n                encrypted.append(shifted);\n            } else {\n                encrypted.append(c);\n            }\n        }\n        return encrypted.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.encrypt(\"hi\")); // Should print \"lm\"\n        System.out.println(solution.encrypt(\"asdfghjkl\")); // Should print \"ewhjklnop\"\n        System.out.println(solution.encrypt(\"gf\")); // Should print \"kj\"\n        System.out.println(solution.encrypt(\"et\")); // Should print \"ix\"\n        System.out.println(solution.encrypt(\"Hello, World!\")); // Should print \"Lipps, Asvph!\"\n    }\n}\n"}
{"task_id": "Java/90", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n     * Returns the 2nd smallest element of the list.\n     * If there is no such element, returns Optional.empty().\n     *\n     * @param lst the list of integers\n     * @return the 2nd smallest element or Optional.empty()\n     */\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        // Remove duplicates and sort the list\n        List<Integer> sortedList = lst.stream().distinct().sorted().collect(Collectors.toList());\n        \n        // Check if there are at least 2 unique elements\n        if (sortedList.size() < 2) {\n            return Optional.empty();\n        }\n        \n        // Return the 2nd smallest element\n        return Optional.of(sortedList.get(1));\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.next_smallest(Arrays.asList(1, 2, 3, 4, 5))); // Optional[2]\n        System.out.println(solution.next_smallest(Arrays.asList(5, 1, 4, 3, 2))); // Optional[2]\n        System.out.println(solution.next_smallest(Arrays.asList())); // Optional.empty\n        System.out.println(solution.next_smallest(Arrays.asList(1, 1))); // Optional.empty\n        System.out.println(solution.next_smallest(Arrays.asList(2, 2, 3, 3, 4))); // Optional[3]\n    }\n}\n"}
{"task_id": "Java/91", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int is_bored(String S) {\n        // Split the input string into sentences using regex for '.', '?' or '!'\n        String[] sentences = S.split(\"[.?!]\");\n        \n        int boredomCount = 0;\n        \n        // Iterate through each sentence\n        for (String sentence : sentences) {\n            // Trim leading and trailing whitespace\n            String trimmedSentence = sentence.trim();\n            \n            // Check if the sentence starts with \"I\"\n            if (trimmedSentence.startsWith(\"I \")) {\n                boredomCount++;\n            }\n        }\n        \n        return boredomCount;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.is_bored(\"Hello world\")); // Expected output: 0\n        System.out.println(solution.is_bored(\"The sky is blue. The sun is shining. I love this weather\")); // Expected output: 1\n        System.out.println(solution.is_bored(\"I am bored. I really am. What about you?\")); // Expected output: 2\n        System.out.println(solution.is_bored(\"It's a beautiful day. I think I'll go for a walk.\")); // Expected output: 1\n        System.out.println(solution.is_bored(\"No sentences starting with I here.\")); // Expected output: 0\n    }\n}\n"}
{"task_id": "Java/92", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Create a function that takes 3 numbers.\n     * Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n     * Returns false in any other cases.\n     *\n     * Examples\n     * any_int(5, 2, 7) -> true\n     * any_int(3, 2, 2) -> false\n     * any_int(3, -2, 1) -> true\n     * any_int(3.6, -2.2, 2) -> false\n     */\n    public boolean any_int(Object x, Object y, Object z) {\n        // Check if all inputs are integers\n        if (!(x instanceof Integer) || !(y instanceof Integer) || !(z instanceof Integer)) {\n            return false;\n        }\n\n        int a = (Integer) x;\n        int b = (Integer) y;\n        int c = (Integer) z;\n\n        // Check if any number is the sum of the other two\n        return (a == b + c) || (b == a + c) || (c == a + b);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.any_int(5, 2, 7)); // true\n        System.out.println(solution.any_int(3, 2, 2)); // false\n        System.out.println(solution.any_int(3, -2, 1)); // true\n        System.out.println(solution.any_int(3.6, -2.2, 2)); // false\n    }\n}\n"}
{"task_id": "Java/93", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        StringBuilder encodedMessage = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                // Swap case\n                char swappedCase = Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c);\n                // Check if it's a vowel and replace it\n                char encodedChar = encodeVowel(swappedCase);\n                encodedMessage.append(encodedChar);\n            } else {\n                // Non-letter characters remain unchanged\n                encodedMessage.append(c);\n            }\n        }\n        return encodedMessage.toString();\n    }\n\n    private char encodeVowel(char c) {\n        switch (Character.toLowerCase(c)) {\n            case 'a': return 'C';\n            case 'e': return 'G';\n            case 'i': return 'K';\n            case 'o': return 'Q';\n            case 'u': return 'W';\n            default: return c;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.encode(\"test\")); // Expected: \"TGST\"\n        System.out.println(solution.encode(\"This is a message\")); // Expected: \"tHKS KS C MGSSCGG\"\n        System.out.println(solution.encode(\"Hello World\")); // Expected: \"hKLLQ wQRLD\"\n        System.out.println(solution.encode(\"Java Programming\")); // Expected: \"jCVc rPGRKMMKNG\"\n    }\n}\n"}
{"task_id": "Java/94", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Finds the largest prime value in the list and returns the sum of its digits.\n     *\n     * @param lst The list of integers.\n     * @return The sum of the digits of the largest prime number in the list.\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int maxPrime = -1;\n        \n        // Find the largest prime number in the list\n        for (int num : lst) {\n            if (isPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n        \n        // Calculate the sum of the digits of the largest prime number\n        int sumOfDigits = 0;\n        while (maxPrime > 0) {\n            sumOfDigits += maxPrime % 10;\n            maxPrime /= 10;\n        }\n        \n        return sumOfDigits;\n    }\n\n    /**\n     * Checks if a number is prime.\n     *\n     * @param num The number to check.\n     * @return true if the number is prime, false otherwise.\n     */\n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        if (num == 2) return true;\n        if (num % 2 == 0) return false;\n        for (int i = 3; i <= Math.sqrt(num); i += 2) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        List<Integer> lst1 = Arrays.asList(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3);\n        List<Integer> lst2 = Arrays.asList(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1);\n        List<Integer> lst3 = Arrays.asList(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3);\n        List<Integer> lst4 = Arrays.asList(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6);\n        List<Integer> lst5 = Arrays.asList(0, 81, 12, 3, 1, 21);\n        List<Integer> lst6 = Arrays.asList(0, 8, 1, 2, 1, 7);\n\n        System.out.println(solution.skjkasdkd(lst1)); // Output: 10\n        System.out.println(solution.skjkasdkd(lst2)); // Output: 25\n        System.out.println(solution.skjkasdkd(lst3)); // Output: 13\n        System.out.println(solution.skjkasdkd(lst4)); // Output: 11\n        System.out.println(solution.skjkasdkd(lst5)); // Output: 3\n        System.out.println(solution.skjkasdkd(lst6)); // Output: 7\n    }\n}\n"}
{"task_id": "Java/95", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a map, return True if all keys are strings and all keys are in lower case or in upper case, else return False.\n     * The function should return False if the given map is empty.\n     * Examples:\n     * check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n     * check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n     * check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n     * check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n     * check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        boolean allLowerCase = true;\n        boolean allUpperCase = true;\n\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String strKey = (String) key;\n            if (!strKey.equals(strKey.toLowerCase())) {\n                allLowerCase = false;\n            }\n            if (!strKey.equals(strKey.toUpperCase())) {\n                allUpperCase = false;\n            }\n        }\n\n        return allLowerCase || allUpperCase;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        Map<Object, Object> test1 = new HashMap<>();\n        test1.put(\"a\", \"apple\");\n        test1.put(\"b\", \"banana\");\n        System.out.println(solution.check_dict_case(test1)); // Expected: true\n\n        Map<Object, Object> test2 = new HashMap<>();\n        test2.put(\"a\", \"apple\");\n        test2.put(\"A\", \"banana\");\n        test2.put(\"B\", \"banana\");\n        System.out.println(solution.check_dict_case(test2)); // Expected: false\n\n        Map<Object, Object> test3 = new HashMap<>();\n        test3.put(\"a\", \"apple\");\n        test3.put(8, \"banana\");\n        test3.put(\"a\", \"apple\");\n        System.out.println(solution.check_dict_case(test3)); // Expected: false\n\n        Map<Object, Object> test4 = new HashMap<>();\n        test4.put(\"Name\", \"John\");\n        test4.put(\"Age\", \"36\");\n        test4.put(\"City\", \"Houston\");\n        System.out.println(solution.check_dict_case(test4)); // Expected: false\n\n        Map<Object, Object> test5 = new HashMap<>();\n        test5.put(\"STATE\", \"NC\");\n        test5.put(\"ZIP\", \"12345\");\n        System.out.println(solution.check_dict_case(test5)); // Expected: true\n\n        Map<Object, Object> test6 = new HashMap<>();\n        System.out.println(solution.check_dict_case(test6)); // Expected: false\n    }\n}\n"}
{"task_id": "Java/96", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Implement a function that takes a non-negative integer and returns an array of the first n\n     * integers that are prime numbers and less than n.\n     * \n     * Examples:\n     * count_up_to(5) => [2, 3]\n     * count_up_to(11) => [2, 3, 5, 7]\n     * count_up_to(0) => []\n     * count_up_to(20) => [2, 3, 5, 7, 11, 13, 17, 19]\n     * count_up_to(1) => []\n     * count_up_to(18) => [2, 3, 5, 7, 11, 13, 17]\n     */\n    public List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.count_up_to(5));   // [2, 3]\n        System.out.println(solution.count_up_to(11));  // [2, 3, 5, 7]\n        System.out.println(solution.count_up_to(0));   // []\n        System.out.println(solution.count_up_to(20));  // [2, 3, 5, 7, 11, 13, 17, 19]\n        System.out.println(solution.count_up_to(1));   // []\n        System.out.println(solution.count_up_to(18));  // [2, 3, 5, 7, 11, 13, 17]\n    }\n}\n"}
{"task_id": "Java/97", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        // Extract the unit digit of both numbers\n        int unitDigitA = Math.abs(a % 10);\n        int unitDigitB = Math.abs(b % 10);\n        \n        // Return the product of the unit digits\n        return unitDigitA * unitDigitB;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.multiply(148, 412)); // Expected output: 16\n        System.out.println(solution.multiply(19, 28));   // Expected output: 72\n        System.out.println(solution.multiply(2020, 1851)); // Expected output: 0\n        System.out.println(solution.multiply(14, -15)); // Expected output: 20\n    }\n}\n"}
{"task_id": "Java/98", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper(\"aBCdEf\") returns 1\n    count_upper(\"abcdefg\") returns 0\n    count_upper(\"dBBE\") returns 0\n     */    \n    public int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (isUppercaseVowel(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isUppercaseVowel(char c) {\n        return c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U';\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.count_upper(\"aBCdEf\")); // Expected output: 1\n        System.out.println(solution.count_upper(\"abcdefg\")); // Expected output: 0\n        System.out.println(solution.count_upper(\"dBBE\")); // Expected output: 0\n        System.out.println(solution.count_upper(\"aEiOuA\")); // Expected output: 3\n        System.out.println(solution.count_upper(\"QwErTy\")); // Expected output: 1\n    }\n}\n"}
{"task_id": "Java/99", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int closest_integer(String value) {\n        double num = Double.parseDouble(value);\n        double fractionalPart = num % 1;\n        \n        if (Math.abs(fractionalPart) == 0.5) {\n            if (num > 0) {\n                return (int) Math.ceil(num);\n            } else {\n                return (int) Math.floor(num);\n            }\n        } else {\n            return (int) Math.round(num);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.closest_integer(\"10\"));      // Expected output: 10\n        System.out.println(solution.closest_integer(\"15.3\"));    // Expected output: 15\n        System.out.println(solution.closest_integer(\"14.5\"));    // Expected output: 15\n        System.out.println(solution.closest_integer(\"-14.5\"));   // Expected output: -15\n        System.out.println(solution.closest_integer(\"14.1\"));    // Expected output: 14\n        System.out.println(solution.closest_integer(\"-14.1\"));   // Expected output: -14\n        System.out.println(solution.closest_integer(\"14.9\"));    // Expected output: 15\n        System.out.println(solution.closest_integer(\"-14.9\"));   // Expected output: -15\n    }\n}\n"}
{"task_id": "Java/100", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a positive integer n, you have to make a pile of n levels of stones.\n     * The first level has n stones.\n     * The number of stones in the next level is:\n     * - the next odd number if n is odd.\n     * - the next even number if n is even.\n     * Return the number of stones in each level in a list, where element at index\n     * i represents the number of stones in the level (i+1).\n     *\n     * Examples:\n     * >>> make_a_pile(3)\n     * [3, 5, 7]\n     */\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> result = new ArrayList<>();\n        int current = n;\n        for (int i = 0; i < n; i++) {\n            result.add(current);\n            if (current % 2 == 0) {\n                current += 2; // next even number\n            } else {\n                current += 2; // next odd number\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.make_a_pile(3)); // Expected: [3, 5, 7]\n        System.out.println(solution.make_a_pile(4)); // Expected: [4, 6, 8, 10]\n        System.out.println(solution.make_a_pile(1)); // Expected: [1]\n        System.out.println(solution.make_a_pile(5)); // Expected: [5, 7, 9, 11, 13]\n    }\n}\n"}
{"task_id": "Java/101", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Splits a string of words separated by commas or spaces into a list of words.\n     * \n     * @param s The input string.\n     * @return A list of words.\n     */\n    public List<String> words_string(String s) {\n        // Split the string using a regular expression that matches both commas and spaces\n        String[] wordsArray = s.split(\"[,\\\\s]+\");\n        // Convert the array to a list and return it\n        return Arrays.asList(wordsArray);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        String test1 = \"Hi, my name is John\";\n        String test2 = \"One, two, three, four, five, six\";\n\n        // Expected results\n        List<String> expected1 = Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\");\n        List<String> expected2 = Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\");\n\n        // Run tests\n        List<String> result1 = solution.words_string(test1);\n        List<String> result2 = solution.words_string(test2);\n\n        // Check if the results match the expected values\n        boolean test1Passed = result1.equals(expected1);\n        boolean test2Passed = result2.equals(expected2);\n\n        // Print test results\n        System.out.println(\"Test 1 passed: \" + test1Passed);\n        System.out.println(\"Test 2 passed: \" + test2Passed);\n    }\n}\n"}
{"task_id": "Java/102", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n     */\n    public int choose_num(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        \n        // Start from the upper bound and move downwards to find the largest even number\n        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                return i;\n            }\n        }\n        \n        return -1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.choose_num(12, 15)); // Expected output: 14\n        System.out.println(solution.choose_num(13, 12)); // Expected output: -1\n        System.out.println(solution.choose_num(8, 10));  // Expected output: 10\n        System.out.println(solution.choose_num(1, 1));   // Expected output: -1\n        System.out.println(solution.choose_num(5, 7));   // Expected output: 6\n        System.out.println(solution.choose_num(21, 29)); // Expected output: 28\n    }\n}\n"}
{"task_id": "Java/103", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"1111\"\n    rounded_avg(20, 33) => \"11011\"\n     */\n    public Object rounded_avg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        \n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        \n        int count = m - n + 1;\n        int average = Math.round((float) sum / count);\n        return Integer.toBinaryString(average);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.rounded_avg(1, 5));   // Expected output: \"11\"\n        System.out.println(solution.rounded_avg(7, 5));   // Expected output: -1\n        System.out.println(solution.rounded_avg(10, 20)); // Expected output: \"1111\"\n        System.out.println(solution.rounded_avg(20, 33)); // Expected output: \"11011\"\n    }\n}\n"}
{"task_id": "Java/104", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> unique_digits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> unique_digits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (Integer num : x) {\n            if (hasNoEvenDigits(num)) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        return result;\n    }\n\n    private boolean hasNoEvenDigits(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return false;\n            }\n            num /= 10;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> test1 = Arrays.asList(15, 33, 1422, 1);\n        System.out.println(\"Test Case 1: \" + solution.unique_digits(test1)); // Expected: [1, 15, 33]\n\n        // Test case 2\n        List<Integer> test2 = Arrays.asList(152, 323, 1422, 10);\n        System.out.println(\"Test Case 2: \" + solution.unique_digits(test2)); // Expected: []\n\n        // Test case 3\n        List<Integer> test3 = Arrays.asList(123, 456, 789, 135);\n        System.out.println(\"Test Case 3: \" + solution.unique_digits(test3)); // Expected: [135, 789]\n\n        // Test case 4\n        List<Integer> test4 = Arrays.asList(111, 222, 333, 444);\n        System.out.println(\"Test Case 4: \" + solution.unique_digits(test4)); // Expected: [111, 333]\n    }\n}\n"}
{"task_id": "Java/105", "generation": "import java.util.*;\n\nclass Solution {\n    private static final String[] DIGIT_NAMES = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n\n    /**\n     * Sorts the integers between 1 and 9, reverses the sorted array, and replaces each digit by its corresponding name.\n     *\n     * @param arr The input list of integers.\n     * @return A list of strings representing the names of the digits.\n     */\n    public List<String> by_length(List<Integer> arr) {\n        // Filter out numbers not in the range 1-9\n        List<Integer> filteredList = arr.stream()\n                                        .filter(num -> num >= 1 && num <= 9)\n                                        .sorted()\n                                        .collect(Collectors.toList());\n\n        // Reverse the sorted list\n        Collections.reverse(filteredList);\n\n        // Replace each digit by its corresponding name\n        List<String> result = new ArrayList<>();\n        for (int num : filteredList) {\n            result.add(DIGIT_NAMES[num - 1]);\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> arr1 = Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3);\n        System.out.println(solution.by_length(arr1)); // Expected: [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n        // Test case 2\n        List<Integer> arr2 = new ArrayList<>();\n        System.out.println(solution.by_length(arr2)); // Expected: []\n\n        // Test case 3\n        List<Integer> arr3 = Arrays.asList(1, -1, 55);\n        System.out.println(solution.by_length(arr3)); // Expected: [\"One\"]\n    }\n}\n"}
{"task_id": "Java/106", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sumTo(i));\n            }\n        }\n        return result;\n    }\n\n    private int factorial(int num) {\n        int result = 1;\n        for (int i = 1; i <= num; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    private int sumTo(int num) {\n        return (num * (num + 1)) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 5;\n        List<Integer> result = solution.f(n);\n        System.out.println(\"Result: \" + result);\n        // Expected output: [1, 2, 6, 24, 15]\n    }\n}\n"}
{"task_id": "Java/107", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> even_odd_palindrome(int n) {\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        return Arrays.asList(evenCount, oddCount);\n    }\n\n    private boolean isPalindrome(int num) {\n        String str = Integer.toString(num);\n        int left = 0;\n        int right = str.length() - 1;\n\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.even_odd_palindrome(3)); // Output: [1, 2]\n        System.out.println(solution.even_odd_palindrome(12)); // Output: [4, 6]\n        System.out.println(solution.even_odd_palindrome(100)); // Output: [9, 46]\n    }\n}\n"}
{"task_id": "Java/108", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Counts the number of elements in the list whose sum of digits is greater than 0.\n     * If a number is negative, its first signed digit will be negative.\n     *\n     * @param arr List of integers\n     * @return The count of numbers with a sum of digits > 0\n     */\n    public int count_nums(List<Integer> arr) {\n        int count = 0;\n        for (Integer num : arr) {\n            if (sumOfDigits(num) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private int sumOfDigits(int num) {\n        boolean isNegative = num < 0;\n        num = Math.abs(num);\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        if (isNegative) {\n            sum -= 2 * (num % 10); // Adjust the first digit to be negative\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.count_nums(Arrays.asList())); // Expected: 0\n        System.out.println(solution.count_nums(Arrays.asList(-1, 11, -11))); // Expected: 1\n        System.out.println(solution.count_nums(Arrays.asList(1, 1, 2))); // Expected: 3\n        System.out.println(solution.count_nums(Arrays.asList(-123, 456, -789))); // Expected: 1\n        System.out.println(solution.count_nums(Arrays.asList(-1, -2, -3, 4, 5))); // Expected: 3\n    }\n}\n"}
{"task_id": "Java/109", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N]. The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    move_one_ball(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean move_one_ball(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        int n = arr.size();\n        int count = 0;\n\n        for (int i = 1; i < n; i++) {\n            if (arr.get(i - 1) > arr.get(i)) {\n                count++;\n            }\n        }\n\n        if (arr.get(n - 1) > arr.get(0)) {\n            count++;\n        }\n\n        return count <= 1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.move_one_ball(Arrays.asList(3, 4, 5, 1, 2))); // true\n        System.out.println(solution.move_one_ball(Arrays.asList(3, 5, 4, 1, 2))); // false\n        System.out.println(solution.move_one_ball(Arrays.asList(1, 2, 3, 4, 5))); // true\n        System.out.println(solution.move_one_ball(Arrays.asList())); // true\n        System.out.println(solution.move_one_ball(Arrays.asList(2, 1))); // true\n        System.out.println(solution.move_one_ball(Arrays.asList(5, 1, 2, 3, 4))); // true\n        System.out.println(solution.move_one_ball(Arrays.asList(1, 3, 2))); // false\n    }\n}\n"}
{"task_id": "Java/110", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Determines if it's possible to exchange elements between two lists to make the first list contain only even numbers.\n     * @param lst1 The first list of integers.\n     * @param lst2 The second list of integers.\n     * @return \"YES\" if it's possible to make all elements in lst1 even by exchanging elements with lst2, otherwise \"NO\".\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Count the number of odd numbers in lst1\n        long oddCountLst1 = lst1.stream().filter(num -> num % 2 != 0).count();\n        \n        // Count the number of even numbers in lst2\n        long evenCountLst2 = lst2.stream().filter(num -> num % 2 == 0).count();\n        \n        // If there are enough even numbers in lst2 to replace all odd numbers in lst1, return \"YES\"\n        return evenCountLst2 >= oddCountLst1 ? \"YES\" : \"NO\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> lst1_1 = Arrays.asList(1, 2, 3, 4);\n        List<Integer> lst2_1 = Arrays.asList(1, 2, 3, 4);\n        System.out.println(solution.exchange(lst1_1, lst2_1)); // Expected: \"YES\"\n\n        List<Integer> lst1_2 = Arrays.asList(1, 2, 3, 4);\n        List<Integer> lst2_2 = Arrays.asList(1, 5, 3, 4);\n        System.out.println(solution.exchange(lst1_2, lst2_2)); // Expected: \"NO\"\n\n        List<Integer> lst1_3 = Arrays.asList(2, 4, 6, 8);\n        List<Integer> lst2_3 = Arrays.asList(1, 3, 5, 7);\n        System.out.println(solution.exchange(lst1_3, lst2_3)); // Expected: \"YES\"\n\n        List<Integer> lst1_4 = Arrays.asList(1, 3, 5, 7);\n        List<Integer> lst2_4 = Arrays.asList(2, 4, 6, 8);\n        System.out.println(solution.exchange(lst1_4, lst2_4)); // Expected: \"YES\"\n\n        List<Integer> lst1_5 = Arrays.asList(1, 3, 5, 7);\n        List<Integer> lst2_5 = Arrays.asList(1, 3, 5, 7);\n        System.out.println(solution.exchange(lst1_5, lst2_5)); // Expected: \"NO\"\n    }\n}\n"}
{"task_id": "Java/111", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> frequencyMap = new HashMap<>();\n        String[] words = test.split(\"\\\\s+\");\n\n        for (String word : words) {\n            if (!word.isEmpty()) {\n                frequencyMap.put(word, frequencyMap.getOrDefault(word, 0) + 1);\n            }\n        }\n\n        int maxCount = 0;\n        for (int count : frequencyMap.values()) {\n            if (count > maxCount) {\n                maxCount = count;\n            }\n        }\n\n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : frequencyMap.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.histogram(\"a b c\")); // {\"a\": 1, \"b\": 1, \"c\": 1}\n        System.out.println(solution.histogram(\"a b b a\")); // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"a b c a b\")); // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"b b b b a\")); // {\"b\": 4}\n        System.out.println(solution.histogram(\"\")); // {}\n    }\n}\n"}
{"task_id": "Java/112", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Task\n     * We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n     * then check if the result string is palindrome.\n     * A string is called palindrome if it reads the same backward as forward.\n     * You should return a tuple containing the result string and true/false for the check.\n     * \n     * Example\n     * For s = \"abcde\", c = \"ae\", the result should be (\"bcd\", false)\n     * For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\", false)\n     * For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\", true)\n     */\n    public List<Object> reverse_delete(String s, String c) {\n        StringBuilder result = new StringBuilder();\n        \n        // Create a set of characters to delete\n        Set<Character> charsToDelete = new HashSet<>();\n        for (char ch : c.toCharArray()) {\n            charsToDelete.add(ch);\n        }\n        \n        // Build the result string by excluding characters in charsToDelete\n        for (char ch : s.toCharArray()) {\n            if (!charsToDelete.contains(ch)) {\n                result.append(ch);\n            }\n        }\n        \n        // Check if the result string is a palindrome\n        String resultStr = result.toString();\n        String reversedStr = result.reverse().toString();\n        boolean isPalindrome = resultStr.equals(reversedStr);\n        \n        return Arrays.asList(resultStr, isPalindrome);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.reverse_delete(\"abcde\", \"ae\")); // Expected: [bcd, false]\n        System.out.println(solution.reverse_delete(\"abcdef\", \"b\")); // Expected: [acdef, false]\n        System.out.println(solution.reverse_delete(\"abcdedcba\", \"ab\")); // Expected: [cdedc, true]\n        System.out.println(solution.reverse_delete(\"radar\", \"r\")); // Expected: [ada, true]\n        System.out.println(solution.reverse_delete(\"hello\", \"l\")); // Expected: [heo, false]\n    }\n}\n"}
{"task_id": "Java/113", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given a list of strings, where each string consists of only digits, return a list.\n     * Each element i of the output should be \"the number of odd elements in the\n     * string i of the input.\" where all the i's should be replaced by the number\n     * of odd digits in the i\"th string of the input.\n     *\n     * @param lst List of strings containing only digits.\n     * @return List of strings with the count of odd digits.\n     */\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            int oddCount = 0;\n            for (char c : s.toCharArray()) {\n                if ((c - '0') % 2 != 0) {\n                    oddCount++;\n                }\n            }\n            String output = \"the number of odd elements \" + oddCount + \"n the str\" + oddCount + \"ng \" + oddCount + \" of the \" + oddCount + \"nput.\";\n            result.add(output);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<String> test1 = Arrays.asList(\"1234567\");\n        List<String> result1 = solution.odd_count(test1);\n        System.out.println(result1); // Expected: [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\n        // Test case 2\n        List<String> test2 = Arrays.asList(\"3\", \"11111111\");\n        List<String> result2 = solution.odd_count(test2);\n        System.out.println(result2); // Expected: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    }\n}\n"}
{"task_id": "Java/114", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Finds the minimum sum of any non-empty sub-array of nums.\n     *\n     * @param nums The list of integers.\n     * @return The minimum sum of any non-empty sub-array.\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        if (nums == null || nums.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list cannot be null or empty\");\n        }\n\n        int minSum = nums.get(0);\n        int currentSum = nums.get(0);\n\n        for (int i = 1; i < nums.size(); i++) {\n            currentSum = Math.min(nums.get(i), currentSum + nums.get(i));\n            minSum = Math.min(minSum, currentSum);\n        }\n\n        return minSum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(2, 3, 4, 1, 2, 4);\n        List<Integer> test2 = Arrays.asList(-1, -2, -3);\n        List<Integer> test3 = Arrays.asList(1, 2, 3, -6, 4, 5);\n        List<Integer> test4 = Arrays.asList(1);\n        List<Integer> test5 = Arrays.asList(-1, 2, -3, 4, -5);\n\n        System.out.println(\"Test Case 1: \" + solution.minSubArraySum(test1)); // Expected: 1\n        System.out.println(\"Test Case 2: \" + solution.minSubArraySum(test2)); // Expected: -6\n        System.out.println(\"Test Case 3: \" + solution.minSubArraySum(test3)); // Expected: -6\n        System.out.println(\"Test Case 4: \" + solution.minSubArraySum(test4)); // Expected: 1\n        System.out.println(\"Test Case 5: \" + solution.minSubArraySum(test5)); // Expected: -5\n    }\n}\n"}
{"task_id": "Java/115", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Calculates the minimum number of times buckets need to be lowered to empty the wells.\n     *\n     * @param grid The rectangular grid representing the wells.\n     * @param capacity The capacity of each bucket.\n     * @return The number of times buckets need to be lowered.\n     */\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        int totalWater = 0;\n        for (List<Integer> row : grid) {\n            for (int cell : row) {\n                totalWater += cell;\n            }\n        }\n        return (int) Math.ceil((double) totalWater / capacity);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test Case 1\n        List<List<Integer>> grid1 = Arrays.asList(\n            Arrays.asList(0, 0, 1, 0),\n            Arrays.asList(0, 1, 0, 0),\n            Arrays.asList(1, 1, 1, 1)\n        );\n        int capacity1 = 1;\n        System.out.println(\"Test Case 1: Expected: 6, Actual: \" + solution.max_fill(grid1, capacity1));\n\n        // Test Case 2\n        List<List<Integer>> grid2 = Arrays.asList(\n            Arrays.asList(0, 0, 1, 1),\n            Arrays.asList(0, 0, 0, 0),\n            Arrays.asList(1, 1, 1, 1),\n            Arrays.asList(0, 1, 1, 1)\n        );\n        int capacity2 = 2;\n        System.out.println(\"Test Case 2: Expected: 5, Actual: \" + solution.max_fill(grid2, capacity2));\n\n        // Test Case 3\n        List<List<Integer>> grid3 = Arrays.asList(\n            Arrays.asList(0, 0, 0),\n            Arrays.asList(0, 0, 0)\n        );\n        int capacity3 = 5;\n        System.out.println(\"Test Case 3: Expected: 0, Actual: \" + solution.max_fill(grid3, capacity3));\n    }\n}\n"}
{"task_id": "Java/116", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sort_array(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 4, 3, 5))\n    >>> sort_array(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-4, -2, -6, -5, -3))\n    >>> sort_array(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 4, 3))\n     */\n    public List<Integer> sort_array(List<Integer> arr) {\n        arr.sort((a, b) -> {\n            int countA = Integer.bitCount(a);\n            int countB = Integer.bitCount(b);\n            if (countA != countB) {\n                return countA - countB;\n            } else {\n                return a - b;\n            }\n        });\n        return arr;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sort_array(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 4, 3, 5))); // true\n        System.out.println(solution.sort_array(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-4, -2, -6, -5, -3))); // true\n        System.out.println(solution.sort_array(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 4, 3))); // true\n    }\n}\n"}
{"task_id": "Java/117", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given a string s and a natural number n, this function returns a list of all words from string s that contain exactly\n     * n consonants, in the order these words appear in the string s.\n     * If the string s is empty then the function should return an empty list.\n     * Note: you may assume the input string contains only letters and spaces.\n     * \n     * @param s The input string.\n     * @param n The number of consonants each word must contain.\n     * @return A list of words containing exactly n consonants.\n     */\n    public List<String> select_words(String s, int n) {\n        if (s == null || s.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        String[] words = s.split(\"\\\\s+\");\n        List<String> result = new ArrayList<>();\n\n        for (String word : words) {\n            if (countConsonants(word) == n) {\n                result.add(word);\n            }\n        }\n\n        return result;\n    }\n\n    private int countConsonants(String word) {\n        int count = 0;\n        for (char c : word.toCharArray()) {\n            if (isConsonant(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isConsonant(char c) {\n        return !isVowel(c) && Character.isLetter(c);\n    }\n\n    private boolean isVowel(char c) {\n        return \"AEIOUaeiou\".indexOf(c) != -1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.select_words(\"Mary had a little lamb\", 4)); // [\"little\"]\n        System.out.println(solution.select_words(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\n        System.out.println(solution.select_words(\"simple white space\", 2));     // []\n        System.out.println(solution.select_words(\"Hello world\", 4));            // [\"world\"]\n        System.out.println(solution.select_words(\"Uncle sam\", 3));              // [\"Uncle\"]\n        System.out.println(solution.select_words(\"\", 3));                       // []\n    }\n}\n"}
{"task_id": "Java/118", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n     */\n    public String get_closest_vowel(String word) {\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        \n        for (int i = word.length() - 2; i > 0; i--) {\n            char currentChar = word.charAt(i);\n            char prevChar = word.charAt(i - 1);\n            char nextChar = word.charAt(i + 1);\n            \n            if (vowels.contains(currentChar) && !vowels.contains(prevChar) && !vowels.contains(nextChar)) {\n                return String.valueOf(currentChar);\n            }\n        }\n        \n        return \"\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.get_closest_vowel(\"yogurt\")); // Expected: \"u\"\n        System.out.println(solution.get_closest_vowel(\"FULL\"));   // Expected: \"U\"\n        System.out.println(solution.get_closest_vowel(\"quick\"));  // Expected: \"\"\n        System.out.println(solution.get_closest_vowel(\"ab\"));     // Expected: \"\"\n        System.out.println(solution.get_closest_vowel(\"rhythm\")); // Expected: \"\"\n        System.out.println(solution.get_closest_vowel(\"AeIoU\"));  // Expected: \"\"\n        System.out.println(solution.get_closest_vowel(\"bAc\"));    // Expected: \"A\"\n    }\n}\n"}
{"task_id": "Java/119", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    match_parens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    match_parens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String match_parens(List<String> lst) {\n        // Check if concatenating in one order results in a balanced string\n        if (isBalanced(lst.get(0) + lst.get(1))) {\n            return \"Yes\";\n        }\n        // Check if concatenating in the reverse order results in a balanced string\n        if (isBalanced(lst.get(1) + lst.get(0))) {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n\n    private boolean isBalanced(String s) {\n        int balance = 0;\n        for (char c : s.toCharArray()) {\n            if (c == '(') {\n                balance++;\n            } else if (c == ')') {\n                balance--;\n                if (balance < 0) {\n                    return false; // Early exit if balance goes negative\n                }\n            }\n        }\n        return balance == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<String> test1 = Arrays.asList(\"()(\", \")\");\n        List<String> test2 = Arrays.asList(\")\", \")\");\n        List<String> test3 = Arrays.asList(\"(()\", \"())\");\n        List<String> test4 = Arrays.asList(\"(\", \")\");\n\n        System.out.println(solution.match_parens(test1)); // Expected: \"Yes\"\n        System.out.println(solution.match_parens(test2)); // Expected: \"No\"\n        System.out.println(solution.match_parens(test3)); // Expected: \"Yes\"\n        System.out.println(solution.match_parens(test4)); // Expected: \"Yes\"\n    }\n}\n"}
{"task_id": "Java/120", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr, in ascending order.\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Sort the array in descending order\n        Collections.sort(arr, Collections.reverseOrder());\n        \n        // Create a new list to store the top k elements\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n        }\n        \n        // Sort the result list in ascending order\n        Collections.sort(result);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> arr1 = Arrays.asList(-3, -4, 5);\n        int k1 = 3;\n        System.out.println(\"Test Case 1: \" + solution.maximum(arr1, k1)); // Output: [-4, -3, 5]\n\n        // Test case 2\n        List<Integer> arr2 = Arrays.asList(4, -4, 4);\n        int k2 = 2;\n        System.out.println(\"Test Case 2: \" + solution.maximum(arr2, k2)); // Output: [4, 4]\n\n        // Test case 3\n        List<Integer> arr3 = Arrays.asList(-3, 2, 1, 2, -1, -2, 1);\n        int k3 = 1;\n        System.out.println(\"Test Case 3: \" + solution.maximum(arr3, k3)); // Output: [2]\n\n        // Test case 4\n        List<Integer> arr4 = Arrays.asList(1, 2, 3, 4, 5);\n        int k4 = 0;\n        System.out.println(\"Test Case 4: \" + solution.maximum(arr4, k4)); // Output: []\n\n        // Test case 5\n        List<Integer> arr5 = Arrays.asList(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\n        int k5 = 5;\n        System.out.println(\"Test Case 5: \" + solution.maximum(arr5, k5)); // Output: [6, 7, 8, 9, 10]\n    }\n}\n"}
{"task_id": "Java/121", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n     *\n     * @param lst The list of integers.\n     * @return The sum of all odd elements at even positions.\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        // Iterate through the list, starting from index 0 (even position)\n        for (int i = 0; i < lst.size(); i += 2) {\n            int element = lst.get(i);\n            // Check if the element is odd\n            if (element % 2 != 0) {\n                sum += element;\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(5, 8, 7, 1);\n        List<Integer> test2 = Arrays.asList(3, 3, 3, 3, 3);\n        List<Integer> test3 = Arrays.asList(30, 13, 24, 321);\n\n        System.out.println(sol.solution(test1)); // Expected output: 12\n        System.out.println(sol.solution(test2)); // Expected output: 9\n        System.out.println(sol.solution(test3)); // Expected output: 0\n    }\n}\n"}
{"task_id": "Java/122", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a non-empty array of integers arr and an integer k, return\n     * the sum of the elements with at most two digits from the first k elements of arr.\n     *\n     * @param arr the input list of integers\n     * @param k the number of elements to consider from the start of the list\n     * @return the sum of elements with at most two digits from the first k elements\n     */\n    public int add_elements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) >= -99 && arr.get(i) <= 99) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> arr1 = Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9);\n        int k1 = 4;\n        System.out.println(\"Test Case 1: Expected output: 24, Actual output: \" + solution.add_elements(arr1, k1));\n\n        // Test case 2\n        List<Integer> arr2 = Arrays.asList(10, 20, 30, 40, 50);\n        int k2 = 5;\n        System.out.println(\"Test Case 2: Expected output: 150, Actual output: \" + solution.add_elements(arr2, k2));\n\n        // Test case 3\n        List<Integer> arr3 = Arrays.asList(-1, -2, -3, -4, -5);\n        int k3 = 3;\n        System.out.println(\"Test Case 3: Expected output: -6, Actual output: \" + solution.add_elements(arr3, k3));\n\n        // Test case 4\n        List<Integer> arr4 = Arrays.asList(100, 200, 300, 400, 500);\n        int k4 = 5;\n        System.out.println(\"Test Case 4: Expected output: 0, Actual output: \" + solution.add_elements(arr4, k4));\n\n        // Test case 5\n        List<Integer> arr5 = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n        int k5 = 10;\n        System.out.println(\"Test Case 5: Expected output: 55, Actual output: \" + solution.add_elements(arr5, k5));\n    }\n}\n"}
{"task_id": "Java/123", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n     *\n     * The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n     * as follows: start with any positive integer n. Then each term is obtained from the\n     * previous term as follows: if the previous term is even, the next term is one half of\n     * the previous term. If the previous term is odd, the next term is 3 times the previous\n     * term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n     *\n     * Note:\n     * 1. Collatz(1) is [1].\n     * 2. returned list sorted in increasing order.\n     *\n     * For example:\n     * get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> get_odd_collatz(int n) {\n        Set<Integer> oddNumbers = new HashSet<>();\n        \n        while (n != 1) {\n            if (n % 2 == 1) {\n                oddNumbers.add(n);\n            }\n            n = (n % 2 == 0) ? n / 2 : 3 * n + 1;\n        }\n        oddNumbers.add(1); // Always add 1 as it's part of the sequence\n        \n        List<Integer> result = new ArrayList<>(oddNumbers);\n        Collections.sort(result);\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.get_odd_collatz(5)); // Expected: [1, 5]\n        System.out.println(solution.get_odd_collatz(7)); // Expected: [1, 7, 11, 17, 21, 85]\n        System.out.println(solution.get_odd_collatz(1)); // Expected: [1]\n        System.out.println(solution.get_odd_collatz(10)); // Expected: [1, 5]\n    }\n}\n"}
{"task_id": "Java/124", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Validates a given date string and returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. \n       And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. \n       And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n    */\n    public boolean valid_date(String date) {\n        // Check if the date string is empty\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        // Split the date string by '-'\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n            return false;\n        }\n\n        // Parse the month, day, and year\n        int month, day, year;\n        try {\n            month = Integer.parseInt(parts[0]);\n            day = Integer.parseInt(parts[1]);\n            year = Integer.parseInt(parts[2]);\n        } catch (NumberFormatException e) {\n            return false;\n        }\n\n        // Validate the month\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        // Validate the day based on the month\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) {\n            return false;\n        }\n        if (month == 2 && day > 29) {\n            return false;\n        }\n\n        // If all checks pass, the date is valid\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.valid_date(\"03-11-2000\")); // true\n        System.out.println(solution.valid_date(\"15-01-2012\")); // false\n        System.out.println(solution.valid_date(\"04-0-2040\"));  // false\n        System.out.println(solution.valid_date(\"06-04-2020\")); // true\n        System.out.println(solution.valid_date(\"06/04/2020\")); // false\n        System.out.println(solution.valid_date(\"02-29-2020\")); // true (leap year)\n        System.out.println(solution.valid_date(\"02-29-2021\")); // false (not a leap year)\n    }\n}\n"}
{"task_id": "Java/125", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n     */\n    public Object split_words(String txt) {\n        // Check for whitespace\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\"\\\\s+\"));\n        }\n        // Check for commas\n        else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        }\n        // Count lower-case letters with odd order in the alphabet\n        else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && ((c - 'a') % 2 == 1)) {\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.split_words(\"Hello world!\")); // Should print: [Hello, world!]\n        System.out.println(solution.split_words(\"Hello,world!\"));  // Should print: [Hello, world!]\n        System.out.println(solution.split_words(\"abcdef\"));        // Should print: 3\n    }\n}\n"}
{"task_id": "Java/126", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a list of numbers, return whether or not they are sorted\n     * in ascending order. If a number appears more than twice, return false. Assume no negative numbers and only integers.\n     *\n     * @param lst List of integers to check\n     * @return true if the list is sorted in ascending order and no number appears more than twice, false otherwise\n     */\n    public boolean is_sorted(List<Integer> lst) {\n        if (lst == null || lst.size() <= 1) {\n            return true;\n        }\n\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (int i = 0; i < lst.size() - 1; i++) {\n            int current = lst.get(i);\n            int next = lst.get(i + 1);\n\n            // Check if the list is sorted in ascending order\n            if (current > next) {\n                return false;\n            }\n\n            // Count occurrences of each number\n            countMap.put(current, countMap.getOrDefault(current, 0) + 1);\n            if (i == lst.size() - 2) {\n                countMap.put(next, countMap.getOrDefault(next, 0) + 1);\n            }\n        }\n\n        // Check if any number appears more than twice\n        for (int count : countMap.values()) {\n            if (count > 2) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.is_sorted(Arrays.asList(5))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 3, 4, 5))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 3, 2, 4, 5))); // false\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7))); // false\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 2, 3, 3, 4))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 2, 2, 3, 4))); // false\n    }\n}\n"}
{"task_id": "Java/127", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Determines if the length of the intersection of two intervals is a prime number.\n     * @param interval1 The first interval as a List of two integers.\n     * @param interval2 The second interval as a List of two integers.\n     * @return \"YES\" if the length of the intersection is a prime number, otherwise \"NO\".\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n\n        // Calculate the intersection\n        int startMax = Math.max(start1, start2);\n        int endMin = Math.min(end1, end2);\n\n        // Check if there is no intersection\n        if (startMax > endMin) {\n            return \"NO\";\n        }\n\n        // Calculate the length of the intersection\n        int intersectionLength = endMin - startMax + 1;\n\n        // Check if the length is a prime number\n        if (isPrime(intersectionLength)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    /**\n     * Checks if a number is prime.\n     * @param n The number to check.\n     * @return true if the number is prime, false otherwise.\n     */\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.intersection(Arrays.asList(1, 2), Arrays.asList(2, 3))); // NO\n        System.out.println(solution.intersection(Arrays.asList(-1, 1), Arrays.asList(0, 4))); // NO\n        System.out.println(solution.intersection(Arrays.asList(-3, -1), Arrays.asList(-5, 5))); // YES\n        System.out.println(solution.intersection(Arrays.asList(1, 5), Arrays.asList(6, 10))); // NO\n        System.out.println(solution.intersection(Arrays.asList(1, 4), Arrays.asList(2, 6))); // YES\n    }\n}\n"}
{"task_id": "Java/128", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given an array arr of integers, returns the sum of magnitudes of integers\n     * multiplied by the product of all signs of each number in the array, represented by 1, -1 or 0.\n     * Note: return None for empty arr.\n     *\n     * @param arr List of integers\n     * @return Optional<Integer> representing the result\n     */\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int signProduct = 1;\n        int magnitudeSum = 0;\n\n        for (int num : arr) {\n            if (num == 0) {\n                signProduct = 0;\n                break;\n            }\n            signProduct *= (num > 0) ? 1 : -1;\n            magnitudeSum += Math.abs(num);\n        }\n\n        return Optional.of(signProduct * magnitudeSum);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.prod_signs(Arrays.asList(1, 2, 2, -4))); // Expected: Optional[-9]\n        System.out.println(solution.prod_signs(Arrays.asList(0, 1)));        // Expected: Optional[0]\n        System.out.println(solution.prod_signs(Arrays.asList()));            // Expected: Optional.empty\n        System.out.println(solution.prod_signs(Arrays.asList(-1, -2, -3)));  // Expected: Optional[6]\n        System.out.println(solution.prod_signs(Arrays.asList(1, 1, 1, 1)));  // Expected: Optional[4]\n    }\n}\n"}
{"task_id": "Java/129", "generation": "import java.util.*;\n\nclass Solution {\n    private static final int[][] DIRECTIONS = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        PriorityQueue<Path> pq = new PriorityQueue<>((a, b) -> {\n            for (int i = 0; i < Math.min(a.path.size(), b.path.size()); i++) {\n                if (!a.path.get(i).equals(b.path.get(i))) {\n                    return a.path.get(i) - b.path.get(i);\n                }\n            }\n            return a.path.size() - b.path.size();\n        });\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                pq.offer(new Path(new ArrayList<>(List.of(grid.get(i).get(j))), i, j));\n            }\n        }\n\n        while (!pq.isEmpty()) {\n            Path current = pq.poll();\n            if (current.path.size() == k) {\n                return current.path;\n            }\n            for (int[] dir : DIRECTIONS) {\n                int ni = current.i + dir[0];\n                int nj = current.j + dir[1];\n                if (ni >= 0 && ni < n && nj >= 0 && nj < n) {\n                    List<Integer> newPath = new ArrayList<>(current.path);\n                    newPath.add(grid.get(ni).get(nj));\n                    pq.offer(new Path(newPath, ni, nj));\n                }\n            }\n        }\n\n        return new ArrayList<>();\n    }\n\n    private static class Path {\n        List<Integer> path;\n        int i, j;\n\n        Path(List<Integer> path, int i, int j) {\n            this.path = path;\n            this.i = i;\n            this.j = j;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<List<Integer>> grid1 = Arrays.asList(\n            Arrays.asList(1, 2, 3),\n            Arrays.asList(4, 5, 6),\n            Arrays.asList(7, 8, 9)\n        );\n        int k1 = 3;\n        System.out.println(solution.minPath(grid1, k1)); // Output: [1, 2, 1]\n\n        // Test case 2\n        List<List<Integer>> grid2 = Arrays.asList(\n            Arrays.asList(5, 9, 3),\n            Arrays.asList(4, 1, 6),\n            Arrays.asList(7, 8, 2)\n        );\n        int k2 = 1;\n        System.out.println(solution.minPath(grid2, k2)); // Output: [1]\n    }\n}\n"}
{"task_id": "Java/130", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n + 1; i++) {\n            result.add(computeTri(i));\n        }\n        return result;\n    }\n\n    private int computeTri(int n) {\n        if (n == 1) {\n            return 3;\n        } else if (n % 2 == 0) {\n            return 1 + n / 2;\n        } else {\n            return computeTri(n - 1) + computeTri(n - 2) + computeTri(n + 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.tri(3)); // Expected: [1, 3, 2, 8]\n        System.out.println(solution.tri(4)); // Expected: [1, 3, 2, 8, 3]\n        System.out.println(solution.tri(5)); // Expected: [1, 3, 2, 8, 3, 14]\n    }\n}\n"}
{"task_id": "Java/131", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int product = 1;\n        boolean hasOdd = false;\n        \n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n                hasOdd = true;\n            }\n            n /= 10;\n        }\n        \n        return hasOdd ? product : 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.digits(1));    // Expected output: 1\n        System.out.println(solution.digits(4));    // Expected output: 0\n        System.out.println(solution.digits(235));  // Expected output: 15\n        System.out.println(solution.digits(2468)); // Expected output: 0\n        System.out.println(solution.digits(13579)); // Expected output: 945\n    }\n}\n"}
{"task_id": "Java/132", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Checks if there is a valid subsequence of brackets where at least one bracket in the subsequence is nested.\n     *\n     * @param string The input string containing only square brackets.\n     * @return true if there is a valid nested subsequence, false otherwise.\n     */\n    public boolean is_nested(String string) {\n        int maxDepth = 0;\n        int currentDepth = 0;\n\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                currentDepth++;\n                maxDepth = Math.max(maxDepth, currentDepth);\n            } else if (c == ']') {\n                currentDepth--;\n                if (currentDepth < 0) {\n                    // If currentDepth goes negative, it means there are more closing brackets than opening ones\n                    return false;\n                }\n            }\n        }\n\n        // Check if there was any nesting and if the string is balanced\n        return maxDepth > 1 && currentDepth == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.is_nested(\"[[]]\")); // true\n        System.out.println(solution.is_nested(\"[]]]]]]][[[[[]\")); // false\n        System.out.println(solution.is_nested(\"[][]\")); // false\n        System.out.println(solution.is_nested(\"[]\")); // false\n        System.out.println(solution.is_nested(\"[[][]]\")); // true\n        System.out.println(solution.is_nested(\"[[]][[\")); // true\n    }\n}\n"}
{"task_id": "Java/133", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given a list of numbers, returns the sum of squared numbers in the given list,\n     * rounding each element in the list to the upper int (Ceiling) first.\n     *\n     * @param lst List of double values.\n     * @return The sum of squared ceiling values.\n     */\n    public int sum_squares(List<Double> lst) {\n        int sum = 0;\n        for (double num : lst) {\n            int ceilNum = (int) Math.ceil(num);\n            sum += ceilNum * ceilNum;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Double> lst1 = Arrays.asList(1.0, 2.0, 3.0);\n        List<Double> lst2 = Arrays.asList(1.0, 4.0, 9.0);\n        List<Double> lst3 = Arrays.asList(1.0, 3.0, 5.0, 7.0);\n        List<Double> lst4 = Arrays.asList(1.4, 4.2, 0.0);\n        List<Double> lst5 = Arrays.asList(-2.4, 1.0, 1.0);\n\n        System.out.println(solution.sum_squares(lst1)); // Output: 14\n        System.out.println(solution.sum_squares(lst2)); // Output: 98\n        System.out.println(solution.sum_squares(lst3)); // Output: 84\n        System.out.println(solution.sum_squares(lst4)); // Output: 29\n        System.out.println(solution.sum_squares(lst5)); // Output: 6\n    }\n}\n"}
{"task_id": "Java/134", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Create a function that returns true if the last character\n     * of a given string is an alphabetical character and is not\n     * a part of a word, and false otherwise.\n     * Note: \"word\" is a group of characters separated by space.\n     *\n     * Examples:\n     * check_if_last_char_is_a_letter(\"apple pie\") -> false\n     * check_if_last_char_is_a_letter(\"apple pi e\") -> true\n     * check_if_last_char_is_a_letter(\"apple pi e \") -> false\n     * check_if_last_char_is_a_letter(\"\") -> false\n     */\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        if (txt == null || txt.isEmpty()) {\n            return false;\n        }\n\n        int lastCharIndex = txt.length() - 1;\n        char lastChar = txt.charAt(lastCharIndex);\n\n        // Check if the last character is an alphabetical character\n        if (Character.isLetter(lastChar)) {\n            // Check if the last character is not part of a word\n            if (lastCharIndex == 0 || txt.charAt(lastCharIndex - 1) == ' ') {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.check_if_last_char_is_a_letter(\"apple pie\")); // false\n        System.out.println(solution.check_if_last_char_is_a_letter(\"apple pi e\")); // true\n        System.out.println(solution.check_if_last_char_is_a_letter(\"apple pi e \")); // false\n        System.out.println(solution.check_if_last_char_is_a_letter(\"\")); // false\n        System.out.println(solution.check_if_last_char_is_a_letter(\"a\")); // true\n        System.out.println(solution.check_if_last_char_is_a_letter(\" a\")); // true\n        System.out.println(solution.check_if_last_char_is_a_letter(\"a \")); // false\n    }\n}\n"}
{"task_id": "Java/135", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Returns the largest index of an element which is not greater than or equal to the element immediately preceding it.\n     * If no such element exists, returns -1.\n     * \n     * @param arr The input list of integers.\n     * @return The largest index of the element that violates the condition, or -1 if no such element exists.\n     */\n    public int can_arrange(List<Integer> arr) {\n        int maxIndex = -1;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                maxIndex = i;\n            }\n        }\n        return maxIndex;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(1, 2, 4, 3, 5);\n        List<Integer> test2 = Arrays.asList(1, 2, 3);\n        List<Integer> test3 = Arrays.asList(5, 4, 3, 2, 1);\n        List<Integer> test4 = Arrays.asList(1, 3, 2, 4, 6);\n\n        System.out.println(\"Test Case 1: \" + solution.can_arrange(test1)); // Expected output: 3\n        System.out.println(\"Test Case 2: \" + solution.can_arrange(test2)); // Expected output: -1\n        System.out.println(\"Test Case 3: \" + solution.can_arrange(test3)); // Expected output: 4\n        System.out.println(\"Test Case 4: \" + solution.can_arrange(test4)); // Expected output: 2\n    }\n}\n"}
{"task_id": "Java/136", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Create a function that returns a tuple (a, b), where 'a' is\n     * the largest of negative integers, and 'b' is the smallest\n     * of positive integers in a list.\n     * If there is no negative or positive integers, return them as None.\n     *\n     * Examples:\n     * largest_smallest_integers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n     * largest_smallest_integers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n     * largest_smallest_integers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        Optional<Integer> largestNegative = lst.stream()\n                .filter(n -> n < 0)\n                .max(Integer::compare);\n\n        Optional<Integer> smallestPositive = lst.stream()\n                .filter(n -> n > 0)\n                .min(Integer::compare);\n\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(2, 4, 1, 3, 5, 7);\n        List<Integer> test2 = Arrays.asList();\n        List<Integer> test3 = Arrays.asList(0);\n        List<Integer> test4 = Arrays.asList(-1, -3, -5, -2, 2, 4, 1, 3, 5, 7);\n\n        // Expected: (Optional.empty(), Optional.of(1))\n        System.out.println(solution.largest_smallest_integers(test1));\n\n        // Expected: (Optional.empty(), Optional.empty())\n        System.out.println(solution.largest_smallest_integers(test2));\n\n        // Expected: (Optional.empty(), Optional.empty())\n        System.out.println(solution.largest_smallest_integers(test3));\n\n        // Expected: (Optional.of(-1), Optional.of(1))\n        System.out.println(solution.largest_smallest_integers(test4));\n    }\n}\n"}
{"task_id": "Java/137", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Create a function that takes integers, floats, or strings representing\n     * real numbers, and returns the larger variable in its given variable type.\n     * Return None if the values are equal.\n     * Note: If a real number is represented as a string, the floating point might be . or ,\n     *\n     * @param a First value to compare\n     * @param b Second value to compare\n     * @return The larger value wrapped in an Optional, or Optional.empty() if they are equal\n     */\n    public Optional<Object> compare_one(Object a, Object b) {\n        double valA = convertToDouble(a);\n        double valB = convertToDouble(b);\n\n        if (valA == valB) {\n            return Optional.empty();\n        } else if (valA > valB) {\n            return Optional.of(a);\n        } else {\n            return Optional.of(b);\n        }\n    }\n\n    private double convertToDouble(Object obj) {\n        if (obj instanceof String) {\n            String str = (String) obj;\n            str = str.replace(',', '.');\n            return Double.parseDouble(str);\n        } else if (obj instanceof Integer) {\n            return ((Integer) obj).doubleValue();\n        } else if (obj instanceof Double) {\n            return (Double) obj;\n        } else {\n            throw new IllegalArgumentException(\"Unsupported type: \" + obj.getClass().getName());\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.compare_one(1, 2.5)); // Expected: Optional[2.5]\n        System.out.println(solution.compare_one(1, \"2,3\")); // Expected: Optional[2,3]\n        System.out.println(solution.compare_one(\"5,1\", \"6\")); // Expected: Optional[6]\n        System.out.println(solution.compare_one(\"1\", 1)); // Expected: Optional.empty\n    }\n}\n"}
{"task_id": "Java/138", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers.\n     * \n     * @param n The number to evaluate.\n     * @return true if n can be written as the sum of exactly 4 positive even numbers, false otherwise.\n     */\n    public boolean is_equal_to_sum_even(int n) {\n        // The smallest sum of 4 positive even numbers is 2 + 2 + 2 + 2 = 8\n        // Any number less than 8 cannot be written as the sum of 4 positive even numbers\n        if (n < 8) {\n            return false;\n        }\n        \n        // If n is even and greater than or equal to 8, it can always be written as the sum of 4 even numbers\n        return n % 2 == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        int[] testNumbers = {4, 6, 8, 10, 12, 14, 16};\n        \n        for (int num : testNumbers) {\n            System.out.println(\"is_equal_to_sum_even(\" + num + \") == \" + solution.is_equal_to_sum_even(num));\n        }\n    }\n}\n"}
{"task_id": "Java/139", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long special_factorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    private long factorial(int k) {\n        long fact = 1;\n        for (int i = 1; i <= k; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(\"Special Factorial of 4: \" + solution.special_factorial(4)); // Expected: 288\n        System.out.println(\"Special Factorial of 5: \" + solution.special_factorial(5)); // Expected: 34560\n        System.out.println(\"Special Factorial of 3: \" + solution.special_factorial(3)); // Expected: 12\n        System.out.println(\"Special Factorial of 1: \" + solution.special_factorial(1)); // Expected: 1\n    }\n}\n"}
{"task_id": "Java/140", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fix_spaces(String text) {\n        // Replace more than 2 consecutive spaces with \"-\"\n        text = text.replaceAll(\" {3,}\", \"-\");\n        // Replace remaining single and double spaces with \"_\"\n        text = text.replaceAll(\" \", \"_\");\n        return text;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.fix_spaces(\"Example\")); // Expected: \"Example\"\n        System.out.println(solution.fix_spaces(\"Example 1\")); // Expected: \"Example_1\"\n        System.out.println(solution.fix_spaces(\" Example 2\")); // Expected: \"_Example_2\"\n        System.out.println(solution.fix_spaces(\" Example   3\")); // Expected: \"_Example-3\"\n        System.out.println(solution.fix_spaces(\"This  is   a    test\")); // Expected: \"This_is_a-test\"\n    }\n}\n"}
{"task_id": "Java/141", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String file_name_check(String file_name) {\n        // Check if the file name contains exactly one dot\n        int dotCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (c == '.') dotCount++;\n        }\n        if (dotCount != 1) return \"No\";\n\n        // Split the file name into name and extension\n        String[] parts = file_name.split(\"\\\\.\");\n        String namePart = parts[0];\n        String extensionPart = parts[1];\n\n        // Check if the name part starts with a letter and is not empty\n        if (namePart.isEmpty() || !Character.isLetter(namePart.charAt(0))) return \"No\";\n\n        // Check if there are more than three digits in the name part\n        long digitCount = namePart.chars().filter(Character::isDigit).count();\n        if (digitCount > 3) return \"No\";\n\n        // Check if the extension part is one of the allowed extensions\n        Set<String> validExtensions = new HashSet<>(Arrays.asList(\"txt\", \"exe\", \"dll\"));\n        if (!validExtensions.contains(extensionPart)) return \"No\";\n\n        // If all checks pass, the file name is valid\n        return \"Yes\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.file_name_check(\"example.txt\")); // => \"Yes\"\n        System.out.println(solution.file_name_check(\"1example.dll\")); // => \"No\"\n        System.out.println(solution.file_name_check(\"file123.txt\")); // => \"Yes\"\n        System.out.println(solution.file_name_check(\"file1234.txt\")); // => \"No\"\n        System.out.println(solution.file_name_check(\"file.exe\")); // => \"Yes\"\n        System.out.println(solution.file_name_check(\".dll\")); // => \"No\"\n        System.out.println(solution.file_name_check(\"file.dlll\")); // => \"No\"\n        System.out.println(solution.file_name_check(\"file..txt\")); // => \"No\"\n        System.out.println(solution.file_name_check(\"file.txt.exe\")); // => \"No\"\n    }\n}\n"}
{"task_id": "Java/142", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n     * multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n     * change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n     *\n     * Examples:\n     * For lst = [1,2,3] the output should be 6\n     * For lst = []  the output should be 0\n     * For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sum_squares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (i % 3 == 0) {\n                sum += num * num; // Square the number if index is a multiple of 3\n            } else if (i % 4 == 0) {\n                sum += num * num * num; // Cube the number if index is a multiple of 4 and not a multiple of 3\n            } else {\n                sum += num; // Add the number as is\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> lst1 = Arrays.asList(1, 2, 3);\n        List<Integer> lst2 = Arrays.asList();\n        List<Integer> lst3 = Arrays.asList(-1, -5, 2, -1, -5);\n\n        System.out.println(\"Test Case 1: \" + solution.sum_squares(lst1)); // Expected output: 6\n        System.out.println(\"Test Case 2: \" + solution.sum_squares(lst2)); // Expected output: 0\n        System.out.println(\"Test Case 3: \" + solution.sum_squares(lst3)); // Expected output: -126\n    }\n}\n"}
{"task_id": "Java/143", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String words_in_sentence(String sentence) {\n        // Split the sentence into words\n        String[] words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                if (result.length() > 0) {\n                    result.append(\" \");\n                }\n                result.append(word);\n            }\n        }\n\n        return result.toString();\n    }\n\n    // Helper method to check if a number is prime\n    private boolean isPrime(int n) {\n        if (n <= 1) return false;\n        if (n <= 3) return true;\n        if (n % 2 == 0 || n % 3 == 0) return false;\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        String test1 = \"This is a test\";\n        String expected1 = \"is\";\n        System.out.println(\"Test 1: \" + (solution.words_in_sentence(test1).equals(expected1) ? \"Passed\" : \"Failed\"));\n\n        String test2 = \"lets go for swimming\";\n        String expected2 = \"go for\";\n        System.out.println(\"Test 2: \" + (solution.words_in_sentence(test2).equals(expected2) ? \"Passed\" : \"Failed\"));\n\n        String test3 = \"I love programming\";\n        String expected3 = \"I\";\n        System.out.println(\"Test 3: \" + (solution.words_in_sentence(test3).equals(expected3) ? \"Passed\" : \"Failed\"));\n\n        String test4 = \"Java is fun\";\n        String expected4 = \"is\";\n        System.out.println(\"Test 4: \" + (solution.words_in_sentence(test4).equals(expected4) ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/144", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Simplifies the expression x * n and returns true if the result is a whole number, false otherwise.\n     * Both x and n are string representations of fractions in the format <numerator>/<denominator>.\n     *\n     * @param x The first fraction as a string.\n     * @param n The second fraction as a string.\n     * @return true if x * n evaluates to a whole number, false otherwise.\n     */\n    public boolean simplify(String x, String n) {\n        // Split the fractions into numerator and denominator\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n\n        // Parse the numerators and denominators\n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n\n        // Calculate the product of the fractions\n        int productNumerator = xNumerator * nNumerator;\n        int productDenominator = xDenominator * nDenominator;\n\n        // Check if the product is a whole number\n        return productNumerator % productDenominator == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.simplify(\"1/5\", \"5/1\")); // true\n        System.out.println(solution.simplify(\"1/6\", \"2/1\")); // false\n        System.out.println(solution.simplify(\"7/10\", \"10/2\")); // false\n        System.out.println(solution.simplify(\"3/4\", \"4/3\")); // true\n        System.out.println(solution.simplify(\"2/3\", \"3/2\")); // true\n    }\n}\n"}
{"task_id": "Java/145", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Sorts the given list of integers in ascending order according to the sum of their digits.\n     * If there are several items with similar sum of their digits, order them based on their index in original list.\n     * If an integer is negative, then its first digit will be negative: e.g. -123 has digits -1, 2, and 3.\n     *\n     * @param nums The list of integers to be sorted.\n     * @return A new list of integers sorted according to the rules described.\n     */\n    public List<Integer> order_by_points(List<Integer> nums) {\n        return nums.stream()\n                .sorted(Comparator.comparingInt(Solution::sumOfDigits)\n                        .thenComparingInt(nums::indexOf))\n                .collect(Collectors.toList());\n    }\n\n    private static int sumOfDigits(int num) {\n        boolean isNegative = num < 0;\n        int sum = 0;\n        while (num != 0) {\n            int digit = num % 10;\n            if (isNegative && num < 0 && sum == 0) {\n                sum += digit; // First digit is negative\n            } else {\n                sum += Math.abs(digit);\n            }\n            num /= 10;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(1, 11, -1, -11, -12);\n        List<Integer> result1 = solution.order_by_points(test1);\n        System.out.println(\"Test 1: \" + result1); // Expected: [-1, -11, 1, -12, 11]\n\n        List<Integer> test2 = Arrays.asList();\n        List<Integer> result2 = solution.order_by_points(test2);\n        System.out.println(\"Test 2: \" + result2); // Expected: []\n\n        List<Integer> test3 = Arrays.asList(-1, -2, -3, -4, -5);\n        List<Integer> result3 = solution.order_by_points(test3);\n        System.out.println(\"Test 3: \" + result3); // Expected: [-1, -2, -3, -4, -5]\n\n        List<Integer> test4 = Arrays.asList(10, 21, 32, 43, 54);\n        List<Integer> result4 = solution.order_by_points(test4);\n        System.out.println(\"Test 4: \" + result4); // Expected: [10, 21, 32, 43, 54]\n    }\n}\n"}
{"task_id": "Java/146", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Write a function that takes an array of numbers as input and returns\n     * the number of elements in the array that are greater than 10 and both\n     * first and last digits of a number are odd (1, 3, 5, 7, 9).\n     * For example:\n     * specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n     * specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10 && isFirstAndLastDigitOdd(num)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isFirstAndLastDigitOdd(int num) {\n        String numStr = String.valueOf(Math.abs(num));\n        char firstDigit = numStr.charAt(0);\n        char lastDigit = numStr.charAt(numStr.length() - 1);\n        return isOdd(firstDigit) && isOdd(lastDigit);\n    }\n\n    private boolean isOdd(char digit) {\n        return digit == '1' || digit == '3' || digit == '5' || digit == '7' || digit == '9';\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(15, -73, 14, -15);\n        List<Integer> test2 = Arrays.asList(33, -2, -3, 45, 21, 109);\n        List<Integer> test3 = Arrays.asList(11, 13, 15, 17, 19);\n        List<Integer> test4 = Arrays.asList(-11, -13, -15, -17, -19);\n        List<Integer> test5 = Arrays.asList(10, 20, 30, 40, 50);\n\n        System.out.println(\"Test 1: \" + solution.specialFilter(test1)); // Expected: 1\n        System.out.println(\"Test 2: \" + solution.specialFilter(test2)); // Expected: 2\n        System.out.println(\"Test 3: \" + solution.specialFilter(test3)); // Expected: 5\n        System.out.println(\"Test 4: \" + solution.specialFilter(test4)); // Expected: 0\n        System.out.println(\"Test 5: \" + solution.specialFilter(test5)); // Expected: 0\n    }\n}\n"}
{"task_id": "Java/147", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a positive integer n, creates an integer array a of length n.\n     * For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n     * Returns the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n     * and a[i] + a[j] + a[k] is a multiple of 3.\n     *\n     * @param n the length of the array\n     * @return the number of valid triples\n     */\n    public int get_max_triples(int n) {\n        int[] a = new int[n];\n        for (int i = 1; i <= n; i++) {\n            a[i - 1] = i * i - i + 1;\n        }\n\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        int n1 = 5;\n        System.out.println(\"Input: \" + n1);\n        System.out.println(\"Output: \" + solution.get_max_triples(n1)); // Expected output: 1\n\n        int n2 = 6;\n        System.out.println(\"Input: \" + n2);\n        System.out.println(\"Output: \" + solution.get_max_triples(n2)); // Expected output: 4\n\n        int n3 = 7;\n        System.out.println(\"Input: \" + n3);\n        System.out.println(\"Output: \" + solution.get_max_triples(n3)); // Expected output: 10\n\n        int n4 = 8;\n        System.out.println(\"Input: \" + n4);\n        System.out.println(\"Output: \" + solution.get_max_triples(n4)); // Expected output: 20\n    }\n}\n"}
{"task_id": "Java/148", "generation": "import java.util.*;\n\nclass Solution {\n    private static final List<String> PLANETS = Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    );\n\n    /**\n     * Returns a list of planets whose orbits are located between the orbit of planet1 and the orbit of planet2.\n     * @param planet1 The name of the first planet.\n     * @param planet2 The name of the second planet.\n     * @return A list of planets between planet1 and planet2, sorted by proximity to the sun.\n     */\n    public List<String> bf(String planet1, String planet2) {\n        if (!PLANETS.contains(planet1) || !PLANETS.contains(planet2)) {\n            return Collections.emptyList();\n        }\n\n        int index1 = PLANETS.indexOf(planet1);\n        int index2 = PLANETS.indexOf(planet2);\n\n        if (index1 > index2) {\n            // Ensure index1 is always less than index2\n            int temp = index1;\n            index1 = index2;\n            index2 = temp;\n        }\n\n        List<String> result = new ArrayList<>();\n        for (int i = index1 + 1; i < index2; i++) {\n            result.add(PLANETS.get(i));\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.bf(\"Jupiter\", \"Neptune\")); // [\"Saturn\", \"Uranus\"]\n        System.out.println(solution.bf(\"Earth\", \"Mercury\"));   // [\"Venus\"]\n        System.out.println(solution.bf(\"Mercury\", \"Uranus\")); // [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n        System.out.println(solution.bf(\"Pluto\", \"Mars\"));      // []\n        System.out.println(solution.bf(\"Saturn\", \"Venus\"));    // [\"Earth\", \"Mars\", \"Jupiter\"]\n    }\n}\n"}
{"task_id": "Java/149", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Accepts a list of strings, deletes the strings that have odd lengths,\n     * and returns the resulted list with a sorted order.\n     * The list is always a list of strings and never an array of numbers,\n     * and it may contain duplicates.\n     * The order of the list should be ascending by length of each word, and you\n     * should return the list sorted by that rule.\n     * If two words have the same length, sort the list alphabetically.\n     * The function should return a list of strings in sorted order.\n     * \n     * @param lst The list of strings to process.\n     * @return A sorted list of strings with even lengths.\n     */\n    public List<String> sorted_list_sum(List<String> lst) {\n        // Filter out strings with odd lengths\n        List<String> filteredList = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                filteredList.add(s);\n            }\n        }\n\n        // Sort the list first by length, then alphabetically\n        filteredList.sort((a, b) -> {\n            if (a.length() != b.length()) {\n                return a.length() - b.length();\n            } else {\n                return a.compareTo(b);\n            }\n        });\n\n        return filteredList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<String> test1 = Arrays.asList(\"aa\", \"a\", \"aaa\");\n        List<String> result1 = solution.sorted_list_sum(test1);\n        System.out.println(result1); // Expected: [\"aa\"]\n\n        List<String> test2 = Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\");\n        List<String> result2 = solution.sorted_list_sum(test2);\n        System.out.println(result2); // Expected: [\"ab\", \"cd\"]\n\n        List<String> test3 = Arrays.asList(\"hello\", \"world\", \"hi\", \"bye\", \"see\");\n        List<String> result3 = solution.sorted_list_sum(test3);\n        System.out.println(result3); // Expected: [\"hi\", \"see\"]\n\n        List<String> test4 = Arrays.asList(\"one\", \"two\", \"three\", \"four\", \"five\");\n        List<String> result4 = solution.sorted_list_sum(test4);\n        System.out.println(result4); // Expected: [\"two\", \"four\"]\n    }\n}\n"}
{"task_id": "Java/150", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n     */\n    public int x_or_y(int n, int x, int y) {\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.x_or_y(7, 34, 12)); // Should print 34\n        System.out.println(solution.x_or_y(15, 8, 5));  // Should print 5\n        System.out.println(solution.x_or_y(2, 10, 20)); // Should print 10\n        System.out.println(solution.x_or_y(4, 15, 25)); // Should print 25\n        System.out.println(solution.x_or_y(13, 7, 14)); // Should print 7\n    }\n}\n"}
{"task_id": "Java/151", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given a list of numbers, return the sum of squares of the numbers\n     * in the list that are odd. Ignore numbers that are negative or not integers.\n     *\n     * double_the_difference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n     * double_the_difference(Arrays.asList(-1, -2, 0)) == 0\n     * double_the_difference(Arrays.asList(9, -2)) == 81\n     * double_the_difference(Arrays.asList(0)) == 0\n     *\n     * If the input list is empty, return 0.\n     */\n    public int double_the_difference(List<Object> lst) {\n        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                if (num > 0 && num % 2 != 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.double_the_difference(Arrays.asList(1, 3, 2, 0))); // Expected output: 10\n        System.out.println(solution.double_the_difference(Arrays.asList(-1, -2, 0)));   // Expected output: 0\n        System.out.println(solution.double_the_difference(Arrays.asList(9, -2)));       // Expected output: 81\n        System.out.println(solution.double_the_difference(Arrays.asList(0)));           // Expected output: 0\n        System.out.println(solution.double_the_difference(Arrays.asList()));            // Expected output: 0\n        System.out.println(solution.double_the_difference(Arrays.asList(1, 2, 3, 4, 5))); // Expected output: 35\n    }\n}\n"}
{"task_id": "Java/152", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Determines how far off each guess was compared to the actual scores.\n     * @param game A list of actual scores.\n     * @param guess A list of guessed scores.\n     * @return A list of integers representing the absolute differences between the actual scores and the guesses.\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            result.add(diff);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> game1 = Arrays.asList(1, 2, 3, 4, 5, 1);\n        List<Integer> guess1 = Arrays.asList(1, 2, 3, 4, 2, -2);\n        List<Integer> result1 = solution.compare(game1, guess1);\n        System.out.println(\"Test Case 1: \" + result1); // Expected: [0, 0, 0, 0, 3, 3]\n\n        // Test case 2\n        List<Integer> game2 = Arrays.asList(0, 5, 0, 0, 0, 4);\n        List<Integer> guess2 = Arrays.asList(4, 1, 1, 0, 0, -2);\n        List<Integer> result2 = solution.compare(game2, guess2);\n        System.out.println(\"Test Case 2: \" + result2); // Expected: [4, 4, 1, 0, 0, 6]\n    }\n}\n"}
{"task_id": "Java/153", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Finds the strongest extension for a given class name and list of extensions.\n     * The strength of an extension is calculated as the difference between the number\n     * of uppercase letters (CAP) and the number of lowercase letters (SM) in its name.\n     * If multiple extensions have the same strength, the first one in the list is chosen.\n     *\n     * @param class_name The name of the class.\n     * @param extensions A list of extension names.\n     * @return A string in the format \"ClassName.Strongest_Extension\".\n     */\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        String strongestExtension = \"\";\n        int maxStrength = Integer.MIN_VALUE;\n\n        for (String extension : extensions) {\n            int cap = 0;\n            int sm = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n                } else if (Character.isLowerCase(c)) {\n                    sm++;\n                }\n            }\n            int strength = cap - sm;\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return class_name + \".\" + strongestExtension;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<String> extensions1 = Arrays.asList(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\");\n        System.out.println(solution.Strongest_Extension(\"Slices\", extensions1)); // Expected: Slices.SErviNGSliCes\n\n        List<String> extensions2 = Arrays.asList(\"AA\", \"Be\", \"CC\");\n        System.out.println(solution.Strongest_Extension(\"my_class\", extensions2)); // Expected: my_class.AA\n\n        List<String> extensions3 = Arrays.asList(\"ABc\", \"DEF\", \"GhiJ\");\n        System.out.println(solution.Strongest_Extension(\"ExampleClass\", extensions3)); // Expected: ExampleClass.DEF\n\n        List<String> extensions4 = Arrays.asList(\"One\", \"Two\", \"Three\");\n        System.out.println(solution.Strongest_Extension(\"Test\", extensions4)); // Expected: Test.One\n    }\n}\n"}
{"task_id": "Java/154", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Checks if the second word or any of its rotations is a substring in the first word.\n     * \n     * @param a The first word.\n     * @param b The second word.\n     * @return true if the second word or any of its rotations is a substring in the first word, false otherwise.\n     */\n    public boolean cycpattern_check(String a, String b) {\n        // Concatenate the first word with itself to handle rotations\n        String doubledA = a + a;\n        // Check if the second word is a substring of the concatenated string\n        return doubledA.contains(b);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.cycpattern_check(\"abcd\", \"abd\")); // false\n        System.out.println(solution.cycpattern_check(\"hello\", \"ell\")); // true\n        System.out.println(solution.cycpattern_check(\"whassup\", \"psus\")); // false\n        System.out.println(solution.cycpattern_check(\"abab\", \"baa\")); // true\n        System.out.println(solution.cycpattern_check(\"efef\", \"eeff\")); // false\n        System.out.println(solution.cycpattern_check(\"himenss\", \"simen\")); // true\n    }\n}\n"}
{"task_id": "Java/155", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given an integer, return a list that has the number of even and odd digits respectively.\n     *\n     * Example:\n     * even_odd_count(-12) ==> [1, 1]\n     * even_odd_count(123) ==> [1, 2]\n     */\n    public List<Integer> even_odd_count(int num) {\n        // Convert the number to its absolute value to handle negative numbers\n        num = Math.abs(num);\n        \n        int evenCount = 0;\n        int oddCount = 0;\n        \n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num /= 10;\n        }\n        \n        return Arrays.asList(evenCount, oddCount);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.even_odd_count(-12)); // Expected output: [1, 1]\n        System.out.println(solution.even_odd_count(123)); // Expected output: [1, 2]\n        System.out.println(solution.even_odd_count(0));   // Expected output: [1, 0]\n        System.out.println(solution.even_odd_count(1111)); // Expected output: [0, 4]\n        System.out.println(solution.even_odd_count(2222)); // Expected output: [4, 0]\n    }\n}\n"}
{"task_id": "Java/156", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == \"xix\"\n    >>> int_to_mini_roman(152) == \"clii\"\n    >>> int_to_mini_roman(426) == \"cdxxvi\"\n     */\n    public String int_to_mini_roman(int number) {\n        // Define the Roman numeral mappings\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] numerals = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\n        StringBuilder roman = new StringBuilder();\n\n        for (int i = 0; i < values.length; i++) {\n            while (number >= values[i]) {\n                roman.append(numerals[i]);\n                number -= values[i];\n            }\n        }\n\n        return roman.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.int_to_mini_roman(19));  // Output: xix\n        System.out.println(solution.int_to_mini_roman(152)); // Output: clii\n        System.out.println(solution.int_to_mini_roman(426)); // Output: cdxxvi\n    }\n}\n"}
{"task_id": "Java/157", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == true\n    right_angle_triangle(1, 2, 3) == false\n     */\n    public boolean right_angle_triangle(int a, int b, int c) {\n        // Sort the sides to ensure c is the longest side\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        \n        // Check if the square of the longest side is equal to the sum of the squares of the other two sides\n        return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) == Math.pow(sides[2], 2);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.right_angle_triangle(3, 4, 5)); // Expected: true\n        System.out.println(solution.right_angle_triangle(1, 2, 3)); // Expected: false\n        System.out.println(solution.right_angle_triangle(5, 12, 13)); // Expected: true\n        System.out.println(solution.right_angle_triangle(6, 8, 10)); // Expected: true\n        System.out.println(solution.right_angle_triangle(7, 10, 12)); // Expected: false\n    }\n}\n"}
{"task_id": "Java/158", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Finds the word with the maximum number of unique characters.\n     * If multiple words have the same maximum number of unique characters,\n     * returns the one that comes first in lexicographical order.\n     *\n     * @param words List of strings to be evaluated.\n     * @return The word with the maximum number of unique characters.\n     */\n    public String find_max(List<String> words) {\n        if (words == null || words.isEmpty()) {\n            return \"\";\n        }\n\n        String maxWord = \"\";\n        int maxUniqueCount = 0;\n\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n\n            int uniqueCount = uniqueChars.size();\n            if (uniqueCount > maxUniqueCount || (uniqueCount == maxUniqueCount && word.compareTo(maxWord) < 0)) {\n                maxUniqueCount = uniqueCount;\n                maxWord = word;\n            }\n        }\n\n        return maxWord;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<String> test1 = Arrays.asList(\"name\", \"of\", \"string\");\n        System.out.println(solution.find_max(test1)); // Output: \"string\"\n\n        List<String> test2 = Arrays.asList(\"name\", \"enam\", \"game\");\n        System.out.println(solution.find_max(test2)); // Output: \"enam\"\n\n        List<String> test3 = Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\");\n        System.out.println(solution.find_max(test3)); // Output: \"aaaaaaa\"\n\n        List<String> test4 = Arrays.asList(\"apple\", \"banana\", \"cherry\");\n        System.out.println(solution.find_max(test4)); // Output: \"banana\"\n\n        List<String> test5 = Arrays.asList(\"a\", \"b\", \"c\");\n        System.out.println(solution.find_max(test5)); // Output: \"a\"\n    }\n}\n"}
{"task_id": "Java/159", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Calculates the total number of carrots eaten and the number of carrots left after eating.\n     *\n     * @param number   the number of carrots that you have already eaten.\n     * @param need     the number of carrots that you need to eat.\n     * @param remaining the number of remaining carrots available.\n     * @return a List containing two integers: the total number of carrots eaten and the number of carrots left.\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        int totalEaten = number + Math.min(need, remaining);\n        int carrotsLeft = remaining - Math.min(need, remaining);\n        return Arrays.asList(totalEaten, carrotsLeft);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.eat(5, 6, 10)); // Expected: [11, 4]\n        System.out.println(solution.eat(4, 8, 9));  // Expected: [12, 1]\n        System.out.println(solution.eat(1, 10, 10)); // Expected: [11, 0]\n        System.out.println(solution.eat(2, 11, 5));  // Expected: [7, 0]\n    }\n}\n"}
{"task_id": "Java/160", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        Deque<Integer> stack = new ArrayDeque<>();\n        \n        for (int i = 0; i < operand.size(); i++) {\n            stack.push(operand.get(i));\n            if (i < operator.size()) {\n                String op = operator.get(i);\n                if (op.equals(\"*\") || op.equals(\"/\") || op.equals(\"**\")) {\n                    int b = stack.pop();\n                    int a = stack.pop();\n                    int result = applyOperation(a, b, op);\n                    stack.push(result);\n                }\n            }\n        }\n\n        while (operator.size() > 0) {\n            String op = operator.remove(0);\n            int b = stack.pop();\n            int a = stack.pop();\n            int result = applyOperation(a, b, op);\n            stack.push(result);\n        }\n\n        return stack.pop();\n    }\n\n    private int applyOperation(int a, int b, String op) {\n        switch (op) {\n            case \"+\":\n                return a + b;\n            case \"-\":\n                return a - b;\n            case \"*\":\n                return a * b;\n            case \"/\":\n                return a / b;\n            case \"**\":\n                return (int) Math.pow(a, b);\n            default:\n                throw new IllegalArgumentException(\"Invalid operator: \" + op);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<String> operators1 = Arrays.asList(\"+\", \"*\", \"-\");\n        List<Integer> operands1 = Arrays.asList(2, 3, 4, 5);\n        System.out.println(\"Test Case 1: \" + solution.do_algebra(operators1, operands1)); // Output: 9\n\n        // Test case 2\n        List<String> operators2 = Arrays.asList(\"-\", \"/\", \"**\");\n        List<Integer> operands2 = Arrays.asList(10, 5, 2, 3);\n        System.out.println(\"Test Case 2: \" + solution.do_algebra(operators2, operands2)); // Output: 7\n\n        // Test case 3\n        List<String> operators3 = Arrays.asList(\"*\", \"+\", \"/\");\n        List<Integer> operands3 = Arrays.asList(1, 2, 3, 4);\n        System.out.println(\"Test Case 3: \" + solution.do_algebra(operators3, operands3)); // Output: 2\n    }\n}\n"}
{"task_id": "Java/161", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Given a string s, if s[i] is a letter, reverse its case from lower to upper or vice versa,\n     * otherwise keep it as it is. If the string contains no letters, reverse the string.\n     * \n     * @param s the input string\n     * @return the resulted string\n     */\n    public String solve(String s) {\n        boolean hasLetters = false;\n        StringBuilder result = new StringBuilder();\n\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                hasLetters = true;\n                if (Character.isLowerCase(c)) {\n                    result.append(Character.toUpperCase(c));\n                } else {\n                    result.append(Character.toLowerCase(c));\n                }\n            } else {\n                result.append(c);\n            }\n        }\n\n        if (!hasLetters) {\n            result.reverse();\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.solve(\"1234\")); // Expected: \"4321\"\n        System.out.println(solution.solve(\"ab\"));   // Expected: \"AB\"\n        System.out.println(solution.solve(\"#a@C\")); // Expected: \"#A@c\"\n    }\n}\n"}
{"task_id": "Java/162", "generation": "import java.math.BigInteger;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Optional;\n\nclass Solution {\n    /**\n     * Given a string \"text\", return its md5 hash equivalent string with length being 32.\n     * If \"text\" is an empty string, return Optional.empty().\n     *\n     * @param text The input string to convert to MD5 hash.\n     * @return An Optional containing the MD5 hash of the input string, or Optional.empty() if the input is an empty string.\n     * @throws NoSuchAlgorithmException If the MD5 algorithm is not available.\n     */\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] messageDigest = md.digest(text.getBytes());\n        BigInteger no = new BigInteger(1, messageDigest);\n        String hashtext = no.toString(16);\n        \n        // Add leading zeros to make it 32 characters long\n        while (hashtext.length() < 32) {\n            hashtext = \"0\" + hashtext;\n        }\n        \n        return Optional.of(hashtext);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        try {\n            System.out.println(\"Test Case 1: 'Hello world'\");\n            Optional<String> result1 = solution.string_to_md5(\"Hello world\");\n            System.out.println(\"Expected: 3e25960a79dbc69b674cd4ec67a72c62\");\n            System.out.println(\"Actual: \" + result1.orElse(\"N/A\"));\n            System.out.println();\n\n            System.out.println(\"Test Case 2: '' (empty string)\");\n            Optional<String> result2 = solution.string_to_md5(\"\");\n            System.out.println(\"Expected: Optional.empty()\");\n            System.out.println(\"Actual: \" + result2.orElse(\"N/A\"));\n            System.out.println();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n    }\n}\n"}
{"task_id": "Java/163", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given two positive integers a and b, return the even digits between a\n     * and b, in ascending order. Please note that the even digits refer to even numbers less than 10.\n     *\n     * @param a the first integer\n     * @param b the second integer\n     * @return a list of even digits between a and b in ascending order\n     */\n    public List<Integer> generate_integers(int a, int b) {\n        // Ensure a is always less than or equal to b\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = Math.max(a, 0); i <= Math.min(b, 9); i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.generate_integers(2, 8)); // Expected: [2, 4, 6, 8]\n        System.out.println(solution.generate_integers(8, 2)); // Expected: [2, 4, 6, 8]\n        System.out.println(solution.generate_integers(10, 14)); // Expected: []\n        System.out.println(solution.generate_integers(5, 5)); // Expected: []\n        System.out.println(solution.generate_integers(1, 3)); // Expected: [2]\n    }\n}\n"}
