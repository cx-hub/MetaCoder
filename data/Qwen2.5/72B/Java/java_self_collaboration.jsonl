{"task_id": "Java/0", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> has_close_elements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> has_close_elements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        // Step 1: Input Validation\n        if (numbers == null || numbers.isEmpty()) {\n            return false;\n        }\n        if (threshold < 0) {\n            throw new IllegalArgumentException(\"Threshold must be non-negative\");\n        }\n\n        // Step 2: Sorting the List\n        Collections.sort(numbers);\n\n        // Step 3: Comparison of Adjacent Elements\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (diff < threshold) {\n                return true;\n            }\n        }\n\n        // Step 4: Return Result\n        return false;\n    }\n}\n"}
{"task_id": "Java/1", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separate_paren_groups(String paren_string) {\n        // Step 1: Remove spaces from the input string\n        String noSpaceString = removeSpaces(paren_string);\n\n        // Step 2: Initialize variables\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        StringBuilder currentGroup = new StringBuilder();\n\n        // Step 3: Traverse the string to identify and separate groups\n        for (char c : noSpaceString.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n                currentGroup.append(c);\n            } else if (c == ')') {\n                stack.pop();\n                currentGroup.append(c);\n                if (stack.isEmpty()) {\n                    result.add(currentGroup.toString());\n                    currentGroup.setLength(0); // Reset for the next group\n                }\n            }\n        }\n\n        // Step 4: Return the list of separated groups\n        return result;\n    }\n\n    // Helper method to remove spaces from the input string\n    private String removeSpaces(String input) {\n        return input.replaceAll(\" \", \"\");\n    }\n}\n"}
{"task_id": "Java/2", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n     */\n    public double truncate_number(double number) {\n        if (number <= 0) {\n            throw new IllegalArgumentException(\"Number must be positive.\");\n        }\n\n        double integerPart = Math.floor(number);\n        double decimalPart = number - integerPart;\n\n        return decimalPart;\n    }\n}\n"}
{"task_id": "Java/3", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return true. Otherwise it should return false.\n    >>> below_zero(Arrays.asList(1, 2, 3))\n    false\n    >>> below_zero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n\n        for (int operation : operations) {\n            balance += operation;\n\n            if (balance < 0) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n"}
{"task_id": "Java/4", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * For a given list of input numbers, calculate Mean Absolute Deviation\n     * around the mean of this dataset.\n     * Mean Absolute Deviation is the average absolute difference between each\n     * element and a centerpoint (mean in this case):\n     * MAD = average | x - x_mean |\n     * \n     * @param numbers List of Double values\n     * @return Mean Absolute Deviation\n     */\n    public double mean_absolute_deviation(List<Double> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list must not be null or empty\");\n        }\n\n        // Step 1: Calculate the mean\n        double sum = 0.0;\n        for (double number : numbers) {\n            sum += number;\n        }\n        double mean = sum / numbers.size();\n\n        // Step 2: Calculate the absolute differences\n        double sumOfAbsoluteDifferences = 0.0;\n        for (double number : numbers) {\n            double absoluteDifference = Math.abs(number - mean);\n            sumOfAbsoluteDifferences += absoluteDifference;\n        }\n\n        // Step 3: Calculate the Mean Absolute Deviation\n        double mad = sumOfAbsoluteDifferences / numbers.size();\n\n        // Step 4: Return the result\n        return mad;\n    }\n}\n"}
{"task_id": "Java/5", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Insert a number 'delimiter' between every two consecutive elements of input list `numbers'.\n     * \n     * @param numbers The input list of integers.\n     * @param delimiter The integer to be inserted between consecutive elements.\n     * @return A new list with the delimiter inserted between consecutive elements.\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        // Step 1: Check for empty input list\n        if (numbers.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        // Step 2: Initialize the result list\n        List<Integer> result = new ArrayList<>();\n\n        // Step 3: Iterate through the input list\n        for (int i = 0; i < numbers.size(); i++) {\n            // Add the current element to the result list\n            result.add(numbers.get(i));\n\n            // Add the delimiter if the current element is not the last one\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n\n        // Step 4: Return the result list\n        return result;\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.intersperse(List.of(), 4)); // Output: []\n        System.out.println(solution.intersperse(Arrays.asList(1, 2, 3), 4)); // Output: [1, 4, 2, 4, 3]\n    }\n}\n"}
{"task_id": "Java/6", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parse_nested_parens(String paren_string) {\n        // Step 1: Split the input string into groups\n        String[] groups = paren_string.split(\" \");\n        \n        // Step 2: Initialize the results list\n        List<Integer> results = new ArrayList<>();\n        \n        // Step 3: Process each group\n        for (String group : groups) {\n            int currentDepth = 0;\n            int maxDepth = 0;\n            \n            // Step 3.1: Traverse each character in the group\n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentDepth++;\n                    if (currentDepth > maxDepth) {\n                        maxDepth = currentDepth;\n                    }\n                } else if (c == ')') {\n                    currentDepth--;\n                }\n            }\n            \n            // Step 3.2: Add the maximum depth to the results list\n            results.add(maxDepth);\n        }\n        \n        // Step 4: Return the results\n        return results;\n    }\n}\n"}
{"task_id": "Java/7", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Filter an input list of strings only for ones that contain given substring\n     * \n     * @param strings the list of strings to filter\n     * @param substring the substring to filter by\n     * @return a new list containing only the strings that contain the specified substring\n     */\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        if (strings == null || strings.isEmpty()) {\n            return Collections.emptyList();\n        }\n        if (substring == null || substring.isEmpty()) {\n            return new ArrayList<>(strings);\n        }\n\n        List<String> filteredStrings = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredStrings.add(str);\n            }\n        }\n\n        return filteredStrings;\n    }\n\n    // Test cases\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.filter_by_substring(List.of(), \"a\")); // []\n        System.out.println(solution.filter_by_substring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")); // [abc, bacd, array]\n    }\n}\n"}
{"task_id": "Java/8", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product(List.of())\n    [0, 1]\n    >>> sum_product(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sum_product(List<Integer> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            return Arrays.asList(0, 1);\n        }\n\n        int sum = 0;\n        int product = 1;\n\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n\n        return Arrays.asList(sum, product);\n    }\n}\n"}
{"task_id": "Java/9", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        // Input Validation\n        if (numbers == null || numbers.isEmpty()) {\n            return new ArrayList<>();\n        }\n        \n        // Initialization\n        int currentMax = numbers.get(0);\n        List<Integer> rollingMaxList = new ArrayList<>();\n        rollingMaxList.add(currentMax);\n        \n        // Processing the List\n        for (int i = 1; i < numbers.size(); i++) {\n            int num = numbers.get(i);\n            if (num > currentMax) {\n                currentMax = num;\n            }\n            rollingMaxList.add(currentMax);\n        }\n        \n        // Output\n        return rollingMaxList;\n    }\n}\n"}
{"task_id": "Java/10", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n     */\n    public String make_palindrome(String string) {\n        int len = string.length();\n        int i;\n        for (i = len; i >= 0; i--) {\n            if (isPalindrome(string.substring(i))) {\n                break;\n            }\n        }\n        String prefix = string.substring(0, i);\n        String reversedPrefix = new StringBuilder(prefix).reverse().toString();\n        return string + reversedPrefix;\n    }\n}\n"}
{"task_id": "Java/11", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n     */\n    public String string_xor(String a, String b) {\n        // Step 1: Validate input strings\n        if (!isValidBinaryString(a) || !isValidBinaryString(b)) {\n            throw new IllegalArgumentException(\"Input strings must contain only 1s and 0s.\");\n        }\n        \n        // Step 2: Ensure both strings are of equal length\n        a = padString(a, b.length());\n        b = padString(b, a.length());\n        \n        // Step 3: Perform binary XOR\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            char charA = a.charAt(i);\n            char charB = b.charAt(i);\n            if (charA == charB) {\n                result.append('0');\n            } else {\n                result.append('1');\n            }\n        }\n        \n        // Step 4: Return the result\n        return result.toString();\n    }\n\n    private boolean isValidBinaryString(String s) {\n        for (char c : s.toCharArray()) {\n            if (c != '0' && c != '1') {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private String padString(String s, int length) {\n        while (s.length() < length) {\n            s = \"0\" + s;\n        }\n        return s;\n    }\n}\n"}
{"task_id": "Java/12", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longestString = null;\n        int maxLength = 0;\n\n        for (String str : strings) {\n            int length = str.length();\n            if (length > maxLength) {\n                longestString = str;\n                maxLength = length;\n            }\n        }\n\n        return Optional.ofNullable(longestString);\n    }\n}\n"}
{"task_id": "Java/13", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n     */\n    public int greatest_common_divisor(int a, int b) {\n        if (a == 0 && b == 0) {\n            throw new IllegalArgumentException(\"Both numbers cannot be zero.\");\n        }\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}\n"}
{"task_id": "Java/14", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> all_prefixes(String string) {\n        // Input Validation\n        if (string == null) {\n            throw new IllegalArgumentException(\"Input string cannot be null\");\n        }\n        if (string.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        // Prefix Generation\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            String prefix = string.substring(0, i);\n            prefixes.add(prefix);\n        }\n\n        // Output Formatting\n        return prefixes;\n    }\n}\n"}
{"task_id": "Java/15", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String string_sequence(int n) {\n        // Step 1: Initialize the sequence\n        List<Integer> numberList = new ArrayList<>();\n\n        // Step 2: Populate the sequence\n        for (int i = 0; i <= n; i++) {\n            numberList.add(i);\n        }\n\n        // Step 3: Convert to string\n        List<String> stringList = new ArrayList<>();\n        for (Integer number : numberList) {\n            stringList.add(String.valueOf(number));\n        }\n\n        // Step 4: Join the strings\n        String result = String.join(\" \", stringList);\n\n        // Step 5: Return the result\n        return result;\n    }\n}\n"}
{"task_id": "Java/16", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given a string, find out how many distinct characters (regardless of case) does it consist of\n     * \n     * @param string The input string\n     * @return The number of distinct characters in the string, ignoring case sensitivity\n     */\n    public int count_distinct_characters(String string) {\n        // Step 1: Input Validation\n        if (string == null || string.isEmpty()) {\n            return 0;\n        }\n\n        // Step 2: Case Conversion\n        String lowerCaseString = string.toLowerCase();\n\n        // Step 3: Character Extraction and Deduplication\n        Set<Character> uniqueChars = new HashSet<>();\n        for (char c : lowerCaseString.toCharArray()) {\n            uniqueChars.add(c);\n        }\n\n        // Step 4: Count the Distinct Characters\n        return uniqueChars.size();\n    }\n}\n"}
{"task_id": "Java/17", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Parses a string representing musical notes in a special ASCII format and returns a list of integers\n     * corresponding to how many beats each note lasts.\n     *\n     * @param string The input string representing musical notes.\n     * @return A list of integers indicating the duration of each note in beats.\n     */\n    public List<Integer> parse_music(String string) {\n        // Define the mapping of note symbols to their durations\n        Map<String, Integer> noteDurations = new HashMap<>();\n        noteDurations.put(\"o\", 4);\n        noteDurations.put(\"o|\", 2);\n        noteDurations.put(\".|\", 1);\n\n        // Split the input string into individual notes\n        String[] notes = string.split(\"\\\\s+\");\n\n        // Parse and calculate the durations\n        List<Integer> durations = new ArrayList<>();\n        for (String note : notes) {\n            if (noteDurations.containsKey(note)) {\n                durations.add(noteDurations.get(note));\n            } else {\n                // Handle invalid notes if necessary\n                throw new IllegalArgumentException(\"Invalid note: \" + note);\n            }\n        }\n\n        // Return the list of durations\n        return durations;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"o o| .| o| o| .| .| .| .| o o\";\n        List<Integer> result = solution.parse_music(input);\n        System.out.println(result); // Expected output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    }\n}\n"}
{"task_id": "Java/18", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlapping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n     */\n    public int how_many_times(String string, String substring) {\n        // Input validation\n        if (string == null || substring == null) {\n            throw new IllegalArgumentException(\"Input string and substring cannot be null\");\n        }\n        if (substring.isEmpty()) {\n            return 0;\n        }\n\n        // Initialize variables\n        int count = 0;\n        int stringLength = string.length();\n        int substringLength = substring.length();\n\n        // Sliding window search\n        for (int i = 0; i <= stringLength - substringLength; i++) {\n            if (string.substring(i, i + substringLength).equals(substring)) {\n                count++;\n            }\n        }\n\n        // Return the result\n        return count;\n    }\n}\n"}
{"task_id": "Java/19", "generation": "import java.util.*;\n\nclass Solution {\n    // Static map to associate numerals with their integer values\n    private static final Map<String, Integer> NUMERAL_MAP = new HashMap<>();\n    static {\n        NUMERAL_MAP.put(\"zero\", 0);\n        NUMERAL_MAP.put(\"one\", 1);\n        NUMERAL_MAP.put(\"two\", 2);\n        NUMERAL_MAP.put(\"three\", 3);\n        NUMERAL_MAP.put(\"four\", 4);\n        NUMERAL_MAP.put(\"five\", 5);\n        NUMERAL_MAP.put(\"six\", 6);\n        NUMERAL_MAP.put(\"seven\", 7);\n        NUMERAL_MAP.put(\"eight\", 8);\n        NUMERAL_MAP.put(\"nine\", 9);\n    }\n\n    public String sort_numbers(String numbers) {\n        // Step 1: Parse the input string\n        String[] numberals = numbers.split(\" \");\n\n        // Step 2: Convert numberals to digits\n        int[] digits = new int[numberals.length];\n        for (int i = 0; i < numberals.length; i++) {\n            digits[i] = NUMERAL_MAP.get(numberals[i]);\n        }\n\n        // Step 3: Sort the digits\n        Arrays.sort(digits);\n\n        // Step 4: Convert digits back to numberals\n        String[] sortedNumberals = new String[digits.length];\n        for (int i = 0; i < digits.length; i++) {\n            for (Map.Entry<String, Integer> entry : NUMERAL_MAP.entrySet()) {\n                if (entry.getValue() == digits[i]) {\n                    sortedNumberals[i] = entry.getKey();\n                    break;\n                }\n            }\n        }\n\n        // Step 5: Construct the output string\n        return String.join(\" \", sortedNumberals);\n    }\n}\n"}
{"task_id": "Java/20", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"Input list must contain at least two elements.\");\n        }\n\n        Collections.sort(numbers);\n\n        double minDifference = Double.MAX_VALUE;\n        List<Double> closestPair = new ArrayList<>();\n\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double currentDifference = numbers.get(i + 1) - numbers.get(i);\n            if (currentDifference < minDifference) {\n                minDifference = currentDifference;\n                closestPair.clear();\n                closestPair.add(numbers.get(i));\n                closestPair.add(numbers.get(i + 1));\n            }\n        }\n\n        return closestPair;\n    }\n}\n"}
{"task_id": "Java/21", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given list of numbers (of at least two elements), apply a linear transform to that list,\n     * such that the smallest number will become 0 and the largest will become 1.\n     *\n     * @param numbers List of double values.\n     * @return List of transformed double values.\n     */\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements.\");\n        }\n\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        double range = max - min;\n\n        List<Double> transformedList = new ArrayList<>();\n        for (double num : numbers) {\n            double transformedValue = (num - min) / range;\n            transformedList.add(transformedValue);\n        }\n\n        return transformedList;\n    }\n}\n"}
{"task_id": "Java/22", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Filter given list of any values only for integers\n     * \n     * @param values the list of objects to filter\n     * @return a list containing only the integer values\n     */\n    public List<Integer> filter_integers(List<Object> values) {\n        if (values == null || values.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n\n        return result;\n    }\n\n    // Test cases\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.filter_integers(Arrays.asList('a', 3.14, 5))); // [5]\n        System.out.println(solution.filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))); // [1, 2, 3]\n    }\n}\n"}
{"task_id": "Java/23", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        // Step 2: Handle null input\n        if (string == null) {\n            throw new IllegalArgumentException(\"Input string cannot be null\");\n        }\n\n        // Step 3: Calculate string length\n        int length = string.length();\n\n        // Step 4: Return the length\n        return length;\n    }\n}\n"}
{"task_id": "Java/24", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * For a given number n, find the largest number that divides n evenly, smaller than n.\n     * \n     * @param n the number to find the largest divisor for\n     * @return the largest divisor of n that is smaller than n\n     */\n    public int largest_divisor(int n) {\n        // Step 1: Input Validation\n        if (n <= 1) {\n            throw new IllegalArgumentException(\"Input must be a positive integer greater than 1.\");\n        }\n\n        // Step 2: Generate Potential Divisors and Check Divisibility\n        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n\n        // Step 3: Handle Edge Cases\n        throw new RuntimeException(\"No valid divisor found, which should not happen.\");\n    }\n}\n"}
{"task_id": "Java/25", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        \n        // Step 2: Find the smallest prime factor\n        for (int factor = 2; n > 1; factor++) {\n            while (n % factor == 0) {\n                factors.add(factor);\n                n /= factor;\n            }\n        }\n        \n        // Step 4: Add the remaining prime number if any\n        if (n > 1) {\n            factors.add(n);\n        }\n        \n        // Step 5: Return the list of prime factors\n        return factors;\n    }\n}\n"}
{"task_id": "Java/26", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates(Arrays.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        // Step 1: Initialize data structures\n        Map<Integer, Integer> countMap = new HashMap<>();\n        List<Integer> result = new ArrayList<>();\n\n        // Step 2: Count occurrences\n        for (Integer number : numbers) {\n            countMap.put(number, countMap.getOrDefault(number, 0) + 1);\n        }\n\n        // Step 3: Filter unique elements\n        for (Integer number : numbers) {\n            if (countMap.get(number) == 1) {\n                result.add(number);\n            }\n        }\n\n        // Step 4: Return the result\n        return result;\n    }\n}\n"}
{"task_id": "Java/27", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Flips the case of each character in the given string.\n     * Uppercase characters are converted to lowercase and vice versa.\n     * Non-alphabetic characters remain unchanged.\n     *\n     * @param string The input string to be processed.\n     * @return A new string with flipped case characters.\n     */\n    public String flip_case(String string) {\n        if (string == null) {\n            return null;\n        }\n\n        StringBuilder result = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                result.append(Character.toLowerCase(c));\n            } else if (Character.isLowerCase(c)) {\n                result.append(Character.toUpperCase(c));\n            } else {\n                result.append(c);\n            }\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.flip_case(\"Hello\")); // Output: hELLO\n    }\n}\n"}
{"task_id": "Java/28", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        if (strings.isEmpty()) {\n            return \"\";\n        }\n        \n        StringBuilder result = new StringBuilder();\n        for (String str : strings) {\n            result.append(str);\n        }\n        \n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/29", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n     * Filter an input list of strings only for ones that start with a given prefix.\n     * \n     * @param strings The list of strings to filter.\n     * @param prefix The prefix to filter the strings by.\n     * @return A new list containing only the strings that start with the given prefix.\n     */\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        if (strings == null || prefix == null || prefix.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        List<String> filteredList = strings.stream()\n            .filter(s -> s.startsWith(prefix))\n            .collect(Collectors.toList());\n\n        return filteredList;\n    }\n}\n"}
{"task_id": "Java/30", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> get_positive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> get_positive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> get_positive(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        List<Integer> positiveNumbers = l.stream()\n                                         .filter(num -> num > 0)\n                                         .collect(Collectors.toList());\n\n        return positiveNumbers;\n    }\n}\n"}
{"task_id": "Java/31", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    false\n    >>> is_prime(101)\n    true\n    >>> is_prime(11)\n    true\n    >>> is_prime(13441)\n    true\n    >>> is_prime(61)\n    true\n    >>> is_prime(4)\n    false\n    >>> is_prime(1)\n    false\n     */\n    public boolean is_prime(int n) {\n        // Handle edge cases\n        if (n < 2) {\n            return false;\n        }\n\n        // Check for divisibility\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n\n        // Return true if no divisors are found\n        return true;\n    }\n}\n"}
{"task_id": "Java/32", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> find_zero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> find_zero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double find_zero(List<Double> xs) {\n        // Step 1: Validate the input\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"The list must have an even number of coefficients.\");\n        }\n\n        // Step 2: Implement the bisection method\n        double a = -10; // Initial lower bound\n        double b = 10;  // Initial upper bound\n        double tolerance = 1e-6; // Tolerance for the zero point\n        double c;\n\n        while ((b - a) / 2.0 > tolerance) {\n            c = (a + b) / 2.0;\n            if (poly(xs, c) == 0) {\n                return c;\n            } else if (poly(xs, a) * poly(xs, c) < 0) {\n                b = c;\n            } else {\n                a = c;\n            }\n        }\n\n        return (a + b) / 2.0;\n    }\n}\n"}
{"task_id": "Java/33", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted in ascending order.\n    >>> sort_third(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sort_third(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sort_third(List<Integer> l) {\n        // Step 1: Initialize the result list\n        List<Integer> result = new ArrayList<>(l);\n        \n        // Step 2: Identify and extract elements at indices divisible by 3\n        List<Integer> indicesToSort = new ArrayList<>();\n        List<Integer> elementsToSort = new ArrayList<>();\n        \n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                indicesToSort.add(i);\n                elementsToSort.add(l.get(i));\n            }\n        }\n        \n        // Step 3: Sort the extracted elements\n        Collections.sort(elementsToSort);\n        \n        // Step 4: Replace elements in the result list\n        for (int i = 0; i < indicesToSort.size(); i++) {\n            result.set(indicesToSort.get(i), elementsToSort.get(i));\n        }\n        \n        // Step 5: Return the result list\n        return result;\n    }\n}\n"}
{"task_id": "Java/34", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Return sorted unique elements in a list\n     * @param l the input list of integers\n     * @return a new list containing only the unique elements from the input list, sorted in ascending order\n     */\n    public List<Integer> unique(List<Integer> l) {\n        // Step 1: Input Validation\n        if (l == null || l.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        // Step 2: Remove Duplicates\n        Set<Integer> uniqueSet = new HashSet<>(l);\n\n        // Step 3: Convert to List\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n\n        // Step 4: Sort the List\n        Collections.sort(uniqueList);\n\n        // Step 5: Return the Result\n        return uniqueList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> input = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        List<Integer> result = solution.unique(input);\n        System.out.println(result); // Output: [0, 2, 3, 5, 9, 123]\n    }\n}\n"}
{"task_id": "Java/35", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> max_element(Arrays.asList(1, 2, 3))\n    3\n    >>> max_element(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int max_element(List<Integer> l) {\n        if (l == null) {\n            throw new IllegalArgumentException(\"Input list cannot be null\");\n        }\n        if (l.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list cannot be empty\");\n        }\n\n        int maxValue = Integer.MIN_VALUE;\n        for (int num : l) {\n            if (num > maxValue) {\n                maxValue = num;\n            }\n        }\n\n        return maxValue;\n    }\n}\n"}
{"task_id": "Java/36", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n     */\n    public int fizz_buzz(int n) {\n        int totalSevens = 0;\n\n        // Iterate through the range of numbers\n        for (int i = 1; i < n; i++) {\n            // Check if the number is divisible by 11 or 13\n            if (i % 11 == 0 || i % 13 == 0) {\n                // Convert the number to a string and count the occurrences of '7'\n                String numberStr = Integer.toString(i);\n                for (int j = 0; j < numberStr.length(); j++) {\n                    if (numberStr.charAt(j) == '7') {\n                        totalSevens++;\n                    }\n                }\n            }\n        }\n\n        // Return the total count of '7'\n        return totalSevens;\n    }\n}\n"}
{"task_id": "Java/37", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sort_even(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sort_even(List<Integer> l) {\n        // Step 1: Initialize variables\n        List<Integer> evenIndicesElements = new ArrayList<>();\n        List<Integer> result = new ArrayList<>();\n\n        // Step 2: Extract even indices elements\n        for (int i = 0; i < l.size(); i += 2) {\n            evenIndicesElements.add(l.get(i));\n        }\n\n        // Step 3: Sort even indices elements\n        Collections.sort(evenIndicesElements);\n\n        // Step 4: Reconstruct the list\n        int evenIndex = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(evenIndicesElements.get(evenIndex++));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n\n        // Step 5: Return the result\n        return result;\n    }\n}\n"}
{"task_id": "Java/38", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decode_cyclic(String s) {\n        List<String> groups = new ArrayList<>();\n        // split string to groups. Each of length 3.\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group in the reverse direction. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n"}
{"task_id": "Java/39", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n     */\n    public int prime_fib(int n) {\n        int count = 0;\n        int fib1 = 0, fib2 = 1;\n        while (true) {\n            int fibNext = fib1 + fib2;\n            if (isPrime(fibNext)) {\n                count++;\n                if (count == n) {\n                    return fibNext;\n                }\n            }\n            fib1 = fib2;\n            fib2 = fibNext;\n        }\n    }\n\n    private boolean isPrime(int number) {\n        if (number <= 1) return false;\n        if (number == 2) return true;\n        if (number % 2 == 0) return false;\n        for (int i = 3; i * i <= number; i += 2) {\n            if (number % i == 0) return false;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/40", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triples_sum_to_zero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triples_sum_to_zero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triples_sum_to_zero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triples_sum_to_zero(Arrays.asList(1))\n    false\n     */\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        // Step 1: Input Validation\n        if (l == null || l.size() < 3) {\n            return false;\n        }\n\n        // Step 2: Sort the List\n        Collections.sort(l);\n\n        // Step 3: Find Triplets\n        for (int i = 0; i < l.size() - 2; i++) {\n            // Skip duplicate elements\n            if (i > 0 && l.get(i).equals(l.get(i - 1))) {\n                continue;\n            }\n\n            int left = i + 1;\n            int right = l.size() - 1;\n\n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n\n        // Step 4: Return Result\n        return false;\n    }\n}\n"}
{"task_id": "Java/41", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int car_race_collision(int n) {\n        // Step 1: Input Validation\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Number of cars must be a non-negative integer.\");\n        }\n        \n        // Step 2: Calculate Collisions\n        int collisions = n * n;\n        \n        // Step 3: Return the Result\n        return collisions;\n    }\n}\n"}
{"task_id": "Java/42", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n     * Return list with elements incremented by 1.\n     * \n     * @param l the input list of integers\n     * @return a new list with each element incremented by 1\n     */\n    public List<Integer> incr_list(List<Integer> l) {\n        if (l == null) {\n            throw new IllegalArgumentException(\"Input list cannot be null\");\n        }\n        if (l.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        List<Integer> result = l.stream()\n                               .map(n -> n + 1)\n                               .collect(Collectors.toList());\n\n        return result;\n    }\n\n    // Test cases\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.incr_list(Arrays.asList(1, 2, 3))); // [2, 3, 4]\n        System.out.println(solution.incr_list(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))); // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n        System.out.println(solution.incr_list(new ArrayList<>())); // []\n        try {\n            System.out.println(solution.incr_list(null)); // Should throw IllegalArgumentException\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n"}
{"task_id": "Java/43", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairs_sum_to_zero(Arrays.asList(1))\n    false\n     */\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        // Handle edge cases\n        if (l == null || l.size() < 2) {\n            return false;\n        }\n\n        // Initialize a set to keep track of seen elements\n        Set<Integer> seen = new HashSet<>();\n\n        // Iterate through the list\n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n\n        // Return false if no pairs sum to zero\n        return false;\n    }\n}\n"}
{"task_id": "Java/44", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\n    >>> change_base(7, 2)\n    \"111\"\n     */\n    public String change_base(int x, int base) {\n        // Input Validation\n        if (base < 2 || base > 9) {\n            throw new IllegalArgumentException(\"Base must be between 2 and 9.\");\n        }\n        if (x < 0) {\n            throw new IllegalArgumentException(\"Number must be non-negative.\");\n        }\n\n        // Conversion Algorithm\n        List<Integer> digits = new ArrayList<>();\n        while (x > 0) {\n            digits.add(x % base);\n            x /= base;\n        }\n        Collections.reverse(digits);\n\n        // Result Formatting\n        StringBuilder result = new StringBuilder();\n        for (int digit : digits) {\n            result.append(digit);\n        }\n\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/45", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Calculates the area of a triangle given its base and height.\n     * \n     * @param a the base of the triangle\n     * @param h the height of the triangle\n     * @return the area of the triangle\n     * @throws IllegalArgumentException if either a or h is negative\n     */\n    public double triangle_area(double a, double h) {\n        // Step 1: Input Validation\n        if (a < 0 || h < 0) {\n            throw new IllegalArgumentException(\"Base and height must be non-negative.\");\n        }\n\n        // Step 2: Area Calculation\n        double area = 0.5 * a * h;\n\n        // Step 3: Return the Result\n        return area;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        try {\n            double area = solution.triangle_area(5, 3);\n            System.out.println(\"The area of the triangle is: \" + area);\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n"}
{"task_id": "Java/46", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        // Base cases\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n == 3) return 0;\n\n        // Initialize the first four values\n        int a = 0, b = 0, c = 2, d = 0;\n\n        // Iterative computation\n        for (int i = 4; i <= n; i++) {\n            int next = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n            d = next;\n        }\n\n        // Return the result\n        return d;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fib4(5)); // Output: 4\n        System.out.println(solution.fib4(6)); // Output: 8\n        System.out.println(solution.fib4(7)); // Output: 14\n    }\n}\n"}
{"task_id": "Java/47", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Return median of elements in the list l.\n     * >>> median(Arrays.asList(3, 1, 2, 4, 5))\n     * 3\n     * >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n     * 8.0\n     */\n    public double median(List<Integer> l) {\n        if (l == null) {\n            throw new IllegalArgumentException(\"Input list cannot be null\");\n        }\n        if (l.isEmpty()) {\n            return Double.NaN; // or throw an exception\n        }\n\n        Collections.sort(l);\n\n        int size = l.size();\n        if (size % 2 == 1) {\n            // Odd number of elements\n            return l.get(size / 2);\n        } else {\n            // Even number of elements\n            return (l.get(size / 2 - 1) + l.get(size / 2)) / 2.0;\n        }\n    }\n}\n"}
{"task_id": "Java/48", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n     */\n    public boolean is_palindrome(String text) {\n        if (text == null) {\n            throw new IllegalArgumentException(\"Input string cannot be null\");\n        }\n        if (text.isEmpty()) {\n            return true;\n        }\n\n        String normalizedText = text.toLowerCase();\n\n        int left = 0;\n        int right = normalizedText.length() - 1;\n\n        while (left < right) {\n            if (normalizedText.charAt(left) != normalizedText.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/49", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        if (p <= 0) {\n            throw new IllegalArgumentException(\"p must be a positive integer\");\n        }\n        if (n == 0) {\n            return 1; // 2^0 mod p is always 1\n        }\n        return powerMod(2, n, p);\n    }\n\n    private int powerMod(int base, int exponent, int modulus) {\n        int result = 1;\n        base = base % modulus;\n        while (exponent > 0) {\n            if ((exponent & 1) == 1) {\n                result = (result * base) % modulus;\n            }\n            exponent >>= 1;\n            base = (base * base) % modulus;\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/50", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (Character.isLetter(ch)) {\n                char base = Character.isUpperCase(ch) ? 'A' : 'a';\n                sb.append((char) (base + ((ch - base + 5) % 26)));\n            } else {\n                sb.append(ch);\n            }\n        }\n        return sb.toString();\n    }\n\n    /**\n     * Takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (Character.isLetter(ch)) {\n                char base = Character.isUpperCase(ch) ? 'A' : 'a';\n                sb.append((char) (base + ((ch - base - 5 + 26) % 26)));\n            } else {\n                sb.append(ch);\n            }\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/51", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * remove_vowels is a function that takes a string and returns a new string without vowels.\n     * @param text The input string.\n     * @return A new string with all vowels removed.\n     */\n    public String remove_vowels(String text) {\n        // Initialize a set of vowels\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        \n        // Initialize a StringBuilder to build the result string\n        StringBuilder result = new StringBuilder();\n        \n        // Iterate through each character in the input string\n        for (char c : text.toCharArray()) {\n            // Check if the character is a vowel\n            if (!vowels.contains(c)) {\n                // Append non-vowel characters to the result string\n                result.append(c);\n            }\n        }\n        \n        // Return the result string\n        return result.toString();\n    }\n\n    // Test the function\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.remove_vowels(\"\")); // Expected: \"\"\n        System.out.println(solution.remove_vowels(\"abcdef\\nghijklm\")); // Expected: \"bcdf\\nghjklm\"\n        System.out.println(solution.remove_vowels(\"abcdef\")); // Expected: \"bcdf\"\n        System.out.println(solution.remove_vowels(\"aaaaa\")); // Expected: \"\"\n        System.out.println(solution.remove_vowels(\"aaBAA\")); // Expected: \"B\"\n        System.out.println(solution.remove_vowels(\"zbcd\")); // Expected: \"zbcd\"\n    }\n}\n"}
{"task_id": "Java/52", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Return True if all numbers in the list l are below threshold t.\n     * \n     * @param l the list of integers\n     * @param t the threshold\n     * @return true if all numbers in the list are below the threshold, false otherwise\n     */\n    public boolean below_threshold(List<Integer> l, int t) {\n        // Step 1: Input Validation\n        if (l == null) {\n            throw new IllegalArgumentException(\"List cannot be null\");\n        }\n\n        // Step 2: Iterate Through the List\n        for (Integer num : l) {\n            // Step 3: Check Each Element\n            if (num >= t) {\n                // Step 4: Return the Result\n                return false;\n            }\n        }\n\n        // Step 5: Return the Result\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.below_threshold(Arrays.asList(1, 2, 4, 10), 100)); // true\n        System.out.println(solution.below_threshold(Arrays.asList(1, 20, 4, 10), 5)); // false\n    }\n}\n"}
{"task_id": "Java/53", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        int sum = x + y;\n        return sum;\n    }\n}\n"}
{"task_id": "Java/54", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Check if two words have the same kind of characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean same_chars(String s0, String s1) {\n        // Input validation\n        if (s0 == null || s1 == null || s0.isEmpty() || s1.isEmpty()) {\n            return false;\n        }\n\n        // Character set extraction\n        Set<Character> set0 = new HashSet<>();\n        for (char c : s0.toCharArray()) {\n            set0.add(c);\n        }\n\n        Set<Character> set1 = new HashSet<>();\n        for (char c : s1.toCharArray()) {\n            set1.add(c);\n        }\n\n        // Set comparison\n        return set0.equals(set1);\n    }\n}\n"}
{"task_id": "Java/55", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Input must be a non-negative integer.\");\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 0, b = 1, c;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}\n"}
{"task_id": "Java/56", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n     */\n    public boolean correct_bracketing(String brackets) {\n        if (brackets == null || brackets.isEmpty()) {\n            return false;\n        }\n\n        for (char c : brackets.toCharArray()) {\n            if (c != '<' && c != '>') {\n                return false;\n            }\n        }\n\n        int counter = 0;\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                counter++;\n            } else if (c == '>') {\n                counter--;\n                if (counter < 0) {\n                    return false;\n                }\n            }\n        }\n\n        return counter == 0;\n    }\n}\n"}
{"task_id": "Java/57", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l == null || l.size() < 2) {\n            return true; // A list with less than 2 elements is trivially monotonic\n        }\n\n        boolean isIncreasing = true;\n        boolean isDecreasing = true;\n\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n                isIncreasing = false;\n            }\n            if (l.get(i) > l.get(i - 1)) {\n                isDecreasing = false;\n            }\n        }\n\n        return isIncreasing || isDecreasing;\n    }\n}\n"}
{"task_id": "Java/58", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        // Input validation\n        if (l1 == null || l2 == null) {\n            throw new IllegalArgumentException(\"Input lists cannot be null\");\n        }\n        if (l1.isEmpty() || l2.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        // Find common elements\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> commonElements = new HashSet<>();\n        for (Integer num : l2) {\n            if (set1.contains(num)) {\n                commonElements.add(num);\n            }\n        }\n\n        // Sort the result\n        List<Integer> sortedCommonElements = new ArrayList<>(commonElements);\n        Collections.sort(sortedCommonElements);\n\n        // Return the result\n        return sortedCommonElements;\n    }\n}\n"}
{"task_id": "Java/59", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n     */\n    public int largest_prime_factor(int n) {\n        // Start with the smallest prime factor\n        int factor = 2;\n        while (factor * factor <= n) {\n            if (n % factor == 0) {\n                n /= factor;\n            } else {\n                factor++;\n            }\n        }\n        return n;\n    }\n\n    // Test cases\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.largest_prime_factor(13195)); // Output: 29\n        System.out.println(solution.largest_prime_factor(2048));  // Output: 2\n        // Note: The number 600851475143 is too large for an int, so it is commented out.\n        // System.out.println(solution.largest_prime_factor(600851475143)); // This will cause an error\n    }\n}\n"}
{"task_id": "Java/60", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n     */\n    public int sum_to_n(int n) {\n        if (n < 1) {\n            throw new IllegalArgumentException(\"n must be at least 1\");\n        }\n        long result = ((long) n * (n + 1)) / 2;\n        if (result > Integer.MAX_VALUE) {\n            throw new ArithmeticException(\"Result exceeds the maximum value for int\");\n        }\n        return (int) result;\n    }\n}\n"}
{"task_id": "Java/61", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n     */\n    public boolean correct_bracketing(String brackets) {\n        // Input Validation\n        if (brackets == null || brackets.isEmpty()) {\n            return false;\n        }\n        \n        for (char c : brackets.toCharArray()) {\n            if (c != '(' && c != ')') {\n                return false;\n            }\n        }\n\n        // Bracket Counting\n        int counter = 0;\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                counter++;\n            } else if (c == ')') {\n                counter--;\n                if (counter < 0) {\n                    return false; // Early exit if unbalanced\n                }\n            }\n        }\n\n        // Final Check\n        return counter == 0;\n    }\n}\n"}
{"task_id": "Java/62", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * xs represent coefficients of a polynomial.\n     * xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     * Return derivative of this polynomial in the same form.\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        // Step 1: Input Validation\n        if (xs == null || xs.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        // Step 2: Initialize the Result List\n        List<Integer> result = new ArrayList<>();\n\n        // Step 3: Calculate the Derivative Coefficients\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n\n        // Step 4: Return the Result\n        return result;\n    }\n}\n"}
{"task_id": "Java/63", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        // Handle base cases\n        if (n == 0 || n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n\n        // Initialize the dp array\n        int[] dp = new int[n + 1];\n        dp[0] = 0;\n        dp[1] = 0;\n        dp[2] = 1;\n\n        // Compute the sequence using dynamic programming\n        for (int i = 3; i <= n; i++) {\n            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];\n        }\n\n        // Return the result\n        return dp[n];\n    }\n}\n"}
{"task_id": "Java/64", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n     */\n    public int vowels_count(String s) {\n        // Step 1: Initialize the set of vowels\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u'));\n        \n        // Step 2: Check if 'y' is at the end of the word\n        if (s.length() > 0 && (s.charAt(s.length() - 1) == 'y' || s.charAt(s.length() - 1) == 'Y')) {\n            vowels.add('y');\n        }\n        \n        // Step 3: Convert the string to lowercase\n        s = s.toLowerCase();\n        \n        // Step 4: Count the vowels\n        int count = 0;\n        for (char c : s.toCharArray()) {\n            if (vowels.contains(c)) {\n                count++;\n            }\n        }\n        \n        // Step 5: Return the result\n        return count;\n    }\n}\n"}
{"task_id": "Java/65", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n     */\n    public String circular_shift(int x, int shift) {\n        // Step 1: Convert x to a string\n        String xStr = Integer.toString(x);\n        \n        // Step 2: Count the number of digits\n        int numDigits = xStr.length();\n        \n        // Step 3: Check if shift is greater than the number of digits\n        if (shift > numDigits) {\n            // Reverse the string and return\n            return new StringBuilder(xStr).reverse().toString();\n        }\n        \n        // Step 4: Calculate the effective shift\n        int effectiveShift = shift % numDigits;\n        \n        // Step 5: Perform the circular shift\n        String lastPart = xStr.substring(numDigits - effectiveShift);\n        String firstPart = xStr.substring(0, numDigits - effectiveShift);\n        String result = lastPart + firstPart;\n        \n        // Step 6: Return the result\n        return result;\n    }\n}\n"}
{"task_id": "Java/66", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        if (s == null || s.isEmpty()) {\n            return 0;\n        }\n\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n\n        return sum;\n    }\n}\n"}
{"task_id": "Java/67", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for example:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\", 3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\n     */\n    public int fruit_distribution(String s, int n) {\n        // Extract the number of apples and oranges using regular expressions\n        int apples = Integer.parseInt(s.replaceAll(\".*?([0-9]+) apples.*\", \"$1\"));\n        int oranges = Integer.parseInt(s.replaceAll(\".*?([0-9]+) oranges.*\", \"$1\"));\n\n        // Calculate the number of mangoes\n        int mangoes = n - apples - oranges;\n\n        // Return the result\n        return mangoes;\n    }\n}\n"}
{"task_id": "Java/68", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smallest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        // Step 1: Input Validation\n        if (arr.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        // Step 2: Initialization\n        Integer smallestEvenValue = null;\n        Integer smallestIndex = null;\n\n        // Step 3: Iteration and Comparison\n        for (int i = 0; i < arr.size(); i++) {\n            int currentElement = arr.get(i);\n            if (currentElement % 2 == 0) { // Check if the element is even\n                if (smallestEvenValue == null || currentElement < smallestEvenValue) {\n                    smallestEvenValue = currentElement;\n                    smallestIndex = i;\n                }\n            }\n        }\n\n        // Step 4: Result Construction\n        if (smallestEvenValue == null) {\n            return new ArrayList<>();\n        } else {\n            return Arrays.asList(smallestEvenValue, smallestIndex);\n        }\n    }\n}\n"}
{"task_id": "Java/69", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        // Step 1: Initialize Data Structures\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n\n        // Step 2: Calculate Frequencies\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n\n        // Step 3: Filter and Find the Greatest Integer\n        int result = -1;\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int num = entry.getKey();\n            int freq = entry.getValue();\n            if (num <= freq && num > result) {\n                result = num;\n            }\n        }\n\n        // Step 4: Return the Result\n        return result;\n    }\n}\n"}
{"task_id": "Java/70", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strange_sort_list(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strange_sort_list(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        // Step 1: Input Validation\n        if (lst.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        // Step 2: Handle Lists with Identical Elements\n        boolean allIdentical = true;\n        int firstElement = lst.get(0);\n        for (int num : lst) {\n            if (num != firstElement) {\n                allIdentical = false;\n                break;\n            }\n        }\n        if (allIdentical) {\n            return lst;\n        }\n\n        // Step 3: Sorting\n        List<Integer> sortedList = new ArrayList<>(lst);\n        Collections.sort(sortedList);\n\n        // Step 4: Constructing the Strange Order List\n        List<Integer> result = new ArrayList<>();\n        while (!sortedList.isEmpty()) {\n            // Add the minimum value\n            result.add(sortedList.remove(0));\n            // If the list is not empty, add the maximum value\n            if (!sortedList.isEmpty()) {\n                result.add(sortedList.remove(sortedList.size() - 1));\n            }\n        }\n\n        // Step 5: Return the Result\n        return result;\n    }\n}\n"}
{"task_id": "Java/71", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n     */\n    public double triangle_area(double a, double b, double c) {\n        if (isValidTriangle(a, b, c)) {\n            double area = calculateArea(a, b, c);\n            return Math.round(area * 100.0) / 100.0; // Round to 2 decimal points\n        } else {\n            return -1;\n        }\n    }\n\n    private boolean isValidTriangle(double a, double b, double c) {\n        return a > 0 && b > 0 && c > 0 && (a + b > c) && (a + c > b) && (b + c > a);\n    }\n\n    private double calculateArea(double a, double b, double c) {\n        double s = (a + b + c) / 2;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n}\n"}
{"task_id": "Java/72", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean will_it_fly(List<Integer> q, int w) {\n        if (!isPalindromic(q)) {\n            return false;\n        }\n        int sum = calculateSum(q);\n        return sum <= w;\n    }\n\n    private boolean isPalindromic(List<Integer> q) {\n        int left = 0;\n        int right = q.size() - 1;\n        while (left < right) {\n            if (!q.get(left).equals(q.get(right))) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    private int calculateSum(List<Integer> q) {\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/73", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Given an array arr of integers, find the minimum number of elements that\n     * need to be changed to make the array palindromic. A palindromic array is an array that\n     * is read the same backwards and forwards. In one change, you can change one element to any other element.\n     *\n     * @param arr the input list of integers\n     * @return the minimum number of changes required to make the array palindromic\n     */\n    public int smallest_change(List<Integer> arr) {\n        int changes = 0;\n        int n = arr.size();\n\n        // Iterate through the first half of the array\n        for (int i = 0; i < n / 2; i++) {\n            // Compare elements at i and n-i-1\n            if (!arr.get(i).equals(arr.get(n - i - 1))) {\n                changes++;\n            }\n        }\n\n        return changes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.smallest_change(Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6))); // Output: 4\n        System.out.println(solution.smallest_change(Arrays.asList(1, 2, 3, 4, 3, 2, 2))); // Output: 1\n        System.out.println(solution.smallest_change(Arrays.asList(1, 2, 3, 2, 1))); // Output: 0\n    }\n}\n"}
{"task_id": "Java/74", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match(Arrays.asList(), Arrays.asList()) -> []\n    total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    total_match(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        // Calculate total characters in lst1\n        int totalChars1 = calculateTotalChars(lst1);\n        \n        // Calculate total characters in lst2\n        int totalChars2 = calculateTotalChars(lst2);\n        \n        // Compare and return the appropriate list\n        if (totalChars1 <= totalChars2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n\n    // Helper method to calculate the total number of characters in a list\n    private int calculateTotalChars(List<String> lst) {\n        int totalChars = 0;\n        for (String str : lst) {\n            totalChars += str.length();\n        }\n        return totalChars;\n    }\n}\n"}
{"task_id": "Java/75", "generation": "import java.util.*;\n\nclass Solution {\n    // Method to generate all prime numbers less than 100\n    private List<Integer> generatePrimes() {\n        List<Integer> primes = new ArrayList<>();\n        boolean[] isPrime = new boolean[100];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = false; // 0 is not a prime number\n        isPrime[1] = false; // 1 is not a prime number\n\n        for (int i = 2; i < 100; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n                for (int j = i * i; j < 100; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n        return primes;\n    }\n\n    // Method to check if the given number is the product of exactly 3 prime numbers\n    public boolean is_multiply_prime(int a) {\n        List<Integer> primes = generatePrimes();\n        int n = primes.size();\n\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                for (int k = j; k < n; k++) {\n                    if (primes.get(i) * primes.get(j) * primes.get(k) == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/76", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n     */\n    public boolean is_simple_power(int x, int n) {\n        // Input validation\n        if (n == 0) {\n            return x == 0;\n        }\n        if (n == 1) {\n            return x == 1;\n        }\n        if (x < 1) {\n            return false;\n        }\n\n        // Iterative check for simple power\n        int current = 1;\n        while (current <= x) {\n            if (current == x) {\n                return true;\n            }\n            current *= n;\n        }\n\n        // Return the result\n        return false;\n    }\n}\n"}
{"task_id": "Java/77", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        // Calculate the cube root of the absolute value of 'a'\n        double cubeRoot = Math.cbrt(Math.abs(a));\n\n        // Check if the cube root is an integer\n        double roundedCubeRoot = Math.round(cubeRoot);\n\n        // Return true if the cube root is an integer, false otherwise\n        return cubeRoot == roundedCubeRoot;\n    }\n}\n"}
{"task_id": "Java/78", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hex_key(String num) {\n        // Step 1: Initialize the set of prime hexadecimal digits\n        Set<Character> primeHexDigits = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        // Step 2: Initialize the counter\n        int count = 0;\n        \n        // Step 3: Iterate through the input string\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            \n            // Step 4: Check if the character is a prime hexadecimal digit\n            if (primeHexDigits.contains(c)) {\n                count++;\n            }\n        }\n        \n        // Step 5: Return the count\n        return count;\n    }\n}\n"}
{"task_id": "Java/79", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   // returns \"db1111db\"\n    decimal_to_binary(32)   // returns \"db100000db\"\n     */\n    public String decimal_to_binary(int decimal) {\n        // Step 1: Input Validation\n        if (decimal < 0) {\n            throw new IllegalArgumentException(\"Input must be a non-negative integer.\");\n        }\n\n        // Step 2: Decimal to Binary Conversion\n        String binary = Integer.toBinaryString(decimal);\n\n        // Step 3: String Formatting\n        String result = \"db\" + binary + \"db\";\n\n        // Step 4: Return the Result\n        return result;\n    }\n}\n"}
{"task_id": "Java/80", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => false\n    is_happy(aa) => false\n    is_happy(abcd) => true\n    is_happy(aabb) => false\n    is_happy(adb) => true\n    is_happy(xyy) => false\n     */\n    public boolean is_happy(String s) {\n        // Step 1: Input Validation\n        if (s == null || s.isEmpty()) {\n            return false;\n        }\n\n        // Step 2: Length Check\n        if (s.length() < 3) {\n            return false;\n        }\n\n        // Step 3: Consecutive Character Check\n        for (int i = 0; i <= s.length() - 3; i++) {\n            char c1 = s.charAt(i);\n            char c2 = s.charAt(i + 1);\n            char c3 = s.charAt(i + 2);\n\n            if (c1 == c2 || c1 == c3 || c2 == c3) {\n                return false;\n            }\n        }\n\n        // Step 4: Return Result\n        return true;\n    }\n}\n"}
{"task_id": "Java/81", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numerical_letter_grade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        if (grades == null || grades.isEmpty()) {\n            return Collections.emptyList();\n        }\n        \n        for (Double gpa : grades) {\n            if (gpa < 0.0 || gpa > 4.0) {\n                throw new IllegalArgumentException(\"Invalid GPA: \" + gpa);\n            }\n        }\n\n        List<String> letterGrades = new ArrayList<>();\n        for (Double gpa : grades) {\n            String letterGrade = getLetterGrade(gpa);\n            letterGrades.add(letterGrade);\n        }\n\n        return letterGrades;\n    }\n\n    private String getLetterGrade(double gpa) {\n        if (gpa == 4.0) return \"A+\";\n        else if (gpa > 3.7) return \"A\";\n        else if (gpa > 3.3) return \"A-\";\n        else if (gpa > 3.0) return \"B+\";\n        else if (gpa > 2.7) return \"B\";\n        else if (gpa > 2.3) return \"B-\";\n        else if (gpa > 2.0) return \"C+\";\n        else if (gpa > 1.7) return \"C\";\n        else if (gpa > 1.3) return \"C-\";\n        else if (gpa > 1.0) return \"D+\";\n        else if (gpa > 0.7) return \"D\";\n        else if (gpa > 0.0) return \"D-\";\n        else return \"E\";\n    }\n}\n"}
{"task_id": "Java/82", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    prime_length(\"Hello\") == true\n    prime_length(\"abcdcba\") == true\n    prime_length(\"kittens\") == true\n    prime_length(\"orange\") == false\n     */\n    \n    // Step 1: Calculate the length of the string\n    private int getLength(String string) {\n        return string.length();\n    }\n    \n    // Step 2: Check if a number is prime\n    private boolean isPrime(int number) {\n        if (number <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(number); i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    // Step 3: Combine the methods in the main function\n    public boolean prime_length(String string) {\n        int length = getLength(string);\n        return isPrime(length);\n    }\n}\n"}
{"task_id": "Java/83", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int starts_one_ends(int n) {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\");\n        }\n\n        // Count of n-digit numbers starting with 1\n        int countStartsWithOne = (int) Math.pow(10, n - 1);\n\n        // Count of n-digit numbers ending with 1\n        int countEndsWithOne = (n == 1) ? 1 : 9 * (int) Math.pow(10, n - 2);\n\n        // Count of n-digit numbers starting and ending with 1\n        int countStartsAndEndsWithOne = (n == 1) ? 1 : (int) Math.pow(10, n - 2);\n\n        // Combine the counts\n        int totalCount = countStartsWithOne + countEndsWithOne - countStartsAndEndsWithOne;\n\n        return totalCount;\n    }\n}\n"}
{"task_id": "Java/84", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return in binary the total sum of its digits.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        // Step 1: Input Validation\n        if (N < 0 || N > 10000) {\n            throw new IllegalArgumentException(\"N must be between 0 and 10000\");\n        }\n\n        // Step 2: Sum of Digits Calculation\n        int sum = 0;\n        while (N > 0) {\n            sum += N % 10;\n            N /= 10;\n        }\n\n        // Step 3: Binary Conversion\n        String binarySum = Integer.toBinaryString(sum);\n\n        // Step 4: Output the Result\n        return binarySum;\n    }\n}\n"}
{"task_id": "Java/85", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int element = lst.get(i);\n            // Check if the index is odd and the element is even\n            if (i % 2 != 0 && element % 2 == 0) {\n                sum += element;\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/86", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle(\"Hi\") returns \"Hi\"\n    anti_shuffle(\"hello\") returns \"ehllo\"\n    anti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String anti_shuffle(String s) {\n        // Step 1: Input Validation\n        if (s == null || s.isEmpty()) {\n            return s;\n        }\n\n        // Step 2: Split the String into Words\n        String[] words = s.split(\"(?<=\\\\s)|(?=\\\\s)\");\n\n        // Step 3: Sort Each Word\n        for (int i = 0; i < words.length; i++) {\n            char[] chars = words[i].toCharArray();\n            Arrays.sort(chars);\n            words[i] = new String(chars);\n        }\n\n        // Step 4: Reconstruct the String\n        StringBuilder result = new StringBuilder();\n        for (String word : words) {\n            result.append(word);\n        }\n\n        // Step 5: Return the Result\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.anti_shuffle(\"Hi\")); // Output: \"Hi\"\n        System.out.println(solution.anti_shuffle(\"hello\")); // Output: \"ehllo\"\n        System.out.println(solution.anti_shuffle(\"Hello World!!!\")); // Output: \"Hello !!!Wdlor\"\n    }\n}\n"}
{"task_id": "Java/87", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        List<List<Integer>> coordinates = new ArrayList<>();\n\n        // Traverse the 2D list to find all occurrences of x\n        for (int row = 0; row < lst.size(); row++) {\n            for (int col = 0; col < lst.get(row).size(); col++) {\n                if (lst.get(row).get(col) == x) {\n                    coordinates.add(Arrays.asList(row, col));\n                }\n            }\n        }\n\n        // Sort the coordinates\n        Collections.sort(coordinates, new Comparator<List<Integer>>() {\n            @Override\n            public int compare(List<Integer> o1, List<Integer> o2) {\n                int rowCompare = o1.get(0).compareTo(o2.get(0));\n                if (rowCompare == 0) {\n                    return o2.get(1).compareTo(o1.get(1)); // Descending order for columns\n                }\n                return rowCompare; // Ascending order for rows\n            }\n        });\n\n        return coordinates;\n    }\n}\n"}
{"task_id": "Java/88", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array(Arrays.asList()) => []\n    * sort_array(Arrays.asList(5)) => [5]\n    * sort_array(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sort_array(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sort_array(List<Integer> array) {\n        // Step 1: Handle edge cases\n        if (array.isEmpty()) {\n            return new ArrayList<>();\n        }\n        if (array.size() == 1) {\n            return new ArrayList<>(array);\n        }\n\n        // Step 2: Compute the sum of the first and last elements\n        int firstElement = array.get(0);\n        int lastElement = array.get(array.size() - 1);\n        int sum = firstElement + lastElement;\n\n        // Step 3: Determine the sorting direction\n        boolean isAscending = (sum % 2 != 0);\n\n        // Step 4: Create a copy of the input list\n        List<Integer> sortedArray = new ArrayList<>(array);\n\n        // Step 5: Sort the copied list\n        if (isAscending) {\n            Collections.sort(sortedArray);\n        } else {\n            Collections.sort(sortedArray, Collections.reverseOrder());\n        }\n\n        // Step 6: Return the sorted list\n        return sortedArray;\n    }\n}\n"}
{"task_id": "Java/89", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        StringBuilder encrypted = new StringBuilder();\n\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                // Determine if the character is uppercase or lowercase\n                int base = Character.isUpperCase(c) ? 'A' : 'a';\n                // Rotate the character by 8 places\n                char rotatedChar = (char) ((c - base + 8) % 26 + base);\n                encrypted.append(rotatedChar);\n            } else {\n                // Non-alphabetic characters remain unchanged\n                encrypted.append(c);\n            }\n        }\n\n        return encrypted.toString();\n    }\n}\n"}
{"task_id": "Java/90", "generation": "import java.util.*;\nimport java.util.Optional;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    next_smallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    next_smallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    next_smallest(Arrays.asList()) == Optional.empty\n    next_smallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        // Input Validation\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n\n        Set<Integer> uniqueElements = new HashSet<>(lst);\n        if (uniqueElements.size() < 2) {\n            return Optional.empty();\n        }\n\n        // Finding the Second Smallest Element\n        int firstSmallest = Integer.MAX_VALUE;\n        int secondSmallest = Integer.MAX_VALUE;\n\n        for (int num : lst) {\n            if (num < firstSmallest) {\n                secondSmallest = firstSmallest;\n                firstSmallest = num;\n            } else if (num < secondSmallest && num != firstSmallest) {\n                secondSmallest = num;\n            }\n        }\n\n        // Return the Result\n        if (secondSmallest == Integer.MAX_VALUE) {\n            return Optional.empty();\n        } else {\n            return Optional.of(secondSmallest);\n        }\n    }\n}\n"}
{"task_id": "Java/91", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int is_bored(String S) {\n        // Step 2: Sentence Tokenization\n        String[] sentences = S.split(\"[.?!]\");\n        \n        // Step 3: Initialize counter\n        int boredomCount = 0;\n        \n        // Step 4: Sentence Filtering and Counting\n        for (String sentence : sentences) {\n            // Trim leading and trailing whitespace\n            String trimmedSentence = sentence.trim();\n            \n            // Check if the sentence starts with \"I\"\n            if (trimmedSentence.startsWith(\"I \")) {\n                boredomCount++;\n            }\n        }\n        \n        // Step 5: Return the result\n        return boredomCount;\n    }\n\n    // Test cases\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.is_bored(\"Hello world\")); // Output: 0\n        System.out.println(solution.is_bored(\"The sky is blue. The sun is shining. I love this weather\")); // Output: 1\n        System.out.println(solution.is_bored(\"I am happy. I am bored. Are you bored? I think so.\")); // Output: 3\n    }\n}\n"}
{"task_id": "Java/92", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) -> true\n\n    any_int(3, 2, 2) -> false\n\n    any_int(3, -2, 1) -> true\n\n    any_int(3.6, -2.2, 2) -> false\n     */\n    public boolean any_int(Object x, Object y, Object z) {\n        double num1 = ((Number) x).doubleValue();\n        double num2 = ((Number) y).doubleValue();\n        double num3 = ((Number) z).doubleValue();\n\n        if (!isInt(num1) || !isInt(num2) || !isInt(num3)) {\n            return false;\n        }\n\n        if (num1 + num2 == num3 || num1 + num3 == num2 || num2 + num3 == num1) {\n            return true;\n        }\n\n        return false;\n    }\n\n    private boolean isInt(double num) {\n        return num == Math.floor(num) && !Double.isInfinite(num);\n    }\n}\n"}
{"task_id": "Java/93", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        StringBuilder encodedMessage = new StringBuilder();\n        String vowels = \"aeiouAEIOU\";\n        String vowelReplacements = \"cgikmoCGIKMO\";\n\n        for (char ch : message.toCharArray()) {\n            char transformedChar = ch;\n\n            // Case Swapping\n            if (Character.isUpperCase(ch)) {\n                transformedChar = Character.toLowerCase(ch);\n            } else if (Character.isLowerCase(ch)) {\n                transformedChar = Character.toUpperCase(ch);\n            }\n\n            // Vowel Replacement\n            int index = vowels.indexOf(transformedChar);\n            if (index != -1) {\n                transformedChar = vowelReplacements.charAt(index);\n            }\n\n            encodedMessage.append(transformedChar);\n        }\n\n        return encodedMessage.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.encode(\"test\")); // Output: TGST\n        System.out.println(solution.encode(\"This is a message\")); // Output: tHKS KS C MGSSCGG\n    }\n}\n"}
{"task_id": "Java/94", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int largestPrime = findLargestPrime(lst);\n        return sumDigits(largestPrime);\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    private int findLargestPrime(List<Integer> lst) {\n        int largestPrime = Integer.MIN_VALUE;\n        for (int num : lst) {\n            if (isPrime(num) && num > largestPrime) {\n                largestPrime = num;\n            }\n        }\n        return largestPrime;\n    }\n\n    private int sumDigits(int num) {\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/95", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings and all keys are in lower case or in upper case, else return False.\n    The function should return False if the given map is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        // Step 1: Initialize variables\n        boolean allLowerCase = true;\n        boolean allUpperCase = true;\n\n        // Step 2: Check if the map is empty\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        // Step 3: Iterate through the map\n        for (Object key : dict.keySet()) {\n            // Check if the key is a string\n            if (!(key instanceof String)) {\n                return false;\n            }\n\n            String strKey = (String) key;\n\n            // Check if the key is in lowercase\n            if (!strKey.equals(strKey.toLowerCase())) {\n                allLowerCase = false;\n            }\n\n            // Check if the key is in uppercase\n            if (!strKey.equals(strKey.toUpperCase())) {\n                allUpperCase = false;\n            }\n        }\n\n        // Step 4: Determine the final result\n        return allLowerCase || allUpperCase;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.check_dict_case(new HashMap<>(Map.of(\"a\", \"apple\", \"b\", \"banana\")))); // True\n        System.out.println(solution.check_dict_case(new HashMap<>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"banana\")))); // False\n        System.out.println(solution.check_dict_case(new HashMap<>(Map.of(\"a\", \"apple\", 8, \"banana\", \"a\", \"apple\")))); // False\n        System.out.println(solution.check_dict_case(new HashMap<>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))); // False\n        System.out.println(solution.check_dict_case(new HashMap<>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))); // True\n    }\n}\n"}
{"task_id": "Java/96", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Implement a function that takes a non-negative integer and returns an array of the first n\n     * integers that are prime numbers and less than n.\n     * for example:\n     * count_up_to(5) => [2,3]\n     * count_up_to(11) => [2,3,5,7]\n     * count_up_to(0) => []\n     * count_up_to(20) => [2,3,5,7,11,13,17,19]\n     * count_up_to(1) => []\n     * count_up_to(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> count_up_to(int n) {\n        // Input validation\n        if (n < 2) {\n            return new ArrayList<>();\n        }\n\n        // Helper function to check if a number is prime\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n\n        return primes;\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/97", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14, -15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        // Extract unit digits\n        int unitDigitA = a % 10;\n        int unitDigitB = b % 10;\n\n        // Calculate product\n        int product = unitDigitA * unitDigitB;\n\n        // Return result\n        return product;\n    }\n}\n"}
{"task_id": "Java/98", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper(\"aBCdEf\") returns 1\n    count_upper(\"abcdefg\") returns 0\n    count_upper(\"dBBE\") returns 0\n     */    \n    public int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/99", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int closest_integer(String value) {\n        try {\n            double number = Double.parseDouble(value);\n            double floorValue = Math.floor(number);\n            double ceilValue = Math.ceil(number);\n            double fractionalPart = number - floorValue;\n\n            if (fractionalPart == 0.5 || fractionalPart == -0.5) {\n                // Round away from zero\n                return (number > 0) ? (int) ceilValue : (int) floorValue;\n            } else {\n                // Round to the nearest integer\n                return (int) Math.round(number);\n            }\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Invalid input: \" + value);\n        }\n    }\n}\n"}
{"task_id": "Java/100", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> stonesList = new ArrayList<>();\n        int currentStones = n;\n\n        for (int i = 0; i < n; i++) {\n            stonesList.add(currentStones);\n            currentStones += 2;\n        }\n\n        return stonesList;\n    }\n}\n"}
{"task_id": "Java/101", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n     * Splits a string of words separated by commas or spaces into a list of words.\n     *\n     * @param s the input string\n     * @return a list of words\n     */\n    public List<String> words_string(String s) {\n        // Step 1: Input Validation\n        if (s == null || s.trim().isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        // Step 2: String Splitting\n        String[] wordsArray = s.split(\"[,\\\\s]+\");\n\n        // Step 3: Result Construction\n        List<String> wordsList = Arrays.asList(wordsArray);\n        return wordsList;\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.words_string(\"Hi, my name is John\")); // Output: [Hi, my, name, is, John]\n        System.out.println(solution.words_string(\"One, two, three, four, five, six\")); // Output: [One, two, three, four, five, six]\n    }\n}\n"}
{"task_id": "Java/102", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n     */\n    public int choose_num(int x, int y) {\n        // Step 1: Input Validation\n        if (x < 0 || y < 0) {\n            throw new IllegalArgumentException(\"Both x and y must be positive integers.\");\n        }\n\n        // Step 2: Range Check\n        if (x > y) {\n            return -1;\n        }\n\n        // Step 3: Finding the Largest Even Number\n        int maxEven = -1;\n        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                maxEven = i;\n                break;\n            }\n        }\n\n        // Step 4: Return the Result\n        return maxEven;\n    }\n}\n"}
{"task_id": "Java/103", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"1111\"\n    rounded_avg(20, 33) => \"11011\"\n     */\n    public Object rounded_avg(int n, int m) {\n        // Step 1: Input Validation\n        if (n > m) {\n            return -1;\n        }\n\n        // Step 2: Sum and Count Calculation\n        int sum = 0;\n        int count = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n            count++;\n        }\n\n        // Step 3: Average Calculation\n        double average = (double) sum / count;\n\n        // Step 4: Rounding\n        int roundedAverage = (int) Math.round(average);\n\n        // Step 5: Binary Conversion\n        String binaryRepresentation = Integer.toBinaryString(roundedAverage);\n\n        // Step 6: Return the Result\n        return binaryRepresentation;\n    }\n}\n"}
{"task_id": "Java/104", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> unique_digits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> unique_digits(List<Integer> x) {\n        if (x == null || x.isEmpty()) {\n            return new ArrayList<>();\n        }\n        \n        for (Integer num : x) {\n            if (num <= 0) {\n                throw new IllegalArgumentException(\"All elements must be positive integers.\");\n            }\n        }\n\n        List<Integer> filteredList = new ArrayList<>();\n        for (Integer num : x) {\n            if (!containsEvenDigit(num)) {\n                filteredList.add(num);\n            }\n        }\n\n        Collections.sort(filteredList);\n\n        return filteredList;\n    }\n\n    private boolean containsEvenDigit(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return true;\n            }\n            num /= 10;\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/105", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> by_length(List<Integer> arr) {\n        // Step 1: Input Validation\n        if (arr.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        // Step 2: Filtering\n        List<Integer> filteredList = new ArrayList<>();\n        for (int num : arr) {\n            if (num >= 1 && num <= 9) {\n                filteredList.add(num);\n            }\n        }\n\n        // Step 3: Sorting\n        Collections.sort(filteredList);\n\n        // Step 4: Reversing\n        Collections.reverse(filteredList);\n\n        // Step 5: Mapping\n        Map<Integer, String> digitToNameMap = new HashMap<>();\n        digitToNameMap.put(1, \"One\");\n        digitToNameMap.put(2, \"Two\");\n        digitToNameMap.put(3, \"Three\");\n        digitToNameMap.put(4, \"Four\");\n        digitToNameMap.put(5, \"Five\");\n        digitToNameMap.put(6, \"Six\");\n        digitToNameMap.put(7, \"Seven\");\n        digitToNameMap.put(8, \"Eight\");\n        digitToNameMap.put(9, \"Nine\");\n\n        List<String> result = new ArrayList<>();\n        for (int num : filteredList) {\n            result.add(digitToNameMap.get(num));\n        }\n\n        // Step 6: Return the Result\n        return result;\n    }\n}\n"}
{"task_id": "Java/106", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sum(i));\n            }\n        }\n        return result;\n    }\n\n    private int factorial(int i) {\n        if (i == 0 || i == 1) {\n            return 1;\n        }\n        int result = 1;\n        for (int j = 2; j <= i; j++) {\n            result *= j;\n        }\n        return result;\n    }\n\n    private int sum(int i) {\n        return (i * (i + 1)) / 2;\n    }\n}\n"}
{"task_id": "Java/107", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> even_odd_palindrome(int n) {\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n\n    private boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0;\n        int right = str.length() - 1;\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/108", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums(Arrays.asList()) == 0\n    >>> count_nums(Arrays.asList(-1, 11, -11)) == 1\n    >>> count_nums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int count_nums(List<Integer> arr) {\n        int count = 0;\n        for (int num : arr) {\n            int sum = 0;\n            String numStr = Integer.toString(num);\n            boolean isNegative = num < 0;\n            for (int i = 0; i < numStr.length(); i++) {\n                char c = numStr.charAt(i);\n                if (isNegative && i == 0) {\n                    sum += Character.getNumericValue(c) * -1;\n                } else {\n                    sum += Character.getNumericValue(c);\n                }\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.count_nums(Arrays.asList())); // Output: 0\n        System.out.println(solution.count_nums(Arrays.asList(-1, 11, -11))); // Output: 1\n        System.out.println(solution.count_nums(Arrays.asList(1, 1, 2))); // Output: 3\n    }\n}\n"}
{"task_id": "Java/109", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    move_one_ball(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean move_one_ball(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        int n = arr.size();\n        int breakPoint = -1;\n\n        for (int i = 0; i < n - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                if (breakPoint == -1) {\n                    breakPoint = i + 1;\n                } else {\n                    // More than one breakpoint found, cannot be sorted by right shifts\n                    return false;\n                }\n            }\n        }\n\n        if (breakPoint == -1) {\n            // Array is already sorted\n            return true;\n        }\n\n        List<Integer> shiftedArr = new ArrayList<>(arr.subList(breakPoint, n));\n        shiftedArr.addAll(arr.subList(0, breakPoint));\n\n        for (int i = 0; i < n - 1; i++) {\n            if (shiftedArr.get(i) > shiftedArr.get(i + 1)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/110", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Initialize counters\n        int oddCountInLst1 = 0;\n        int evenCountInLst2 = 0;\n\n        // Count odd numbers in lst1\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCountInLst1++;\n            }\n        }\n\n        // Count even numbers in lst2\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCountInLst2++;\n            }\n        }\n\n        // Determine feasibility of exchange\n        if (evenCountInLst2 >= oddCountInLst1) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}\n"}
{"task_id": "Java/111", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        // Step 1: Input Validation\n        if (test.isEmpty()) {\n            return new HashMap<>();\n        }\n\n        // Step 2: Frequency Counting\n        String[] letters = test.split(\" \");\n        Map<String, Integer> frequencyMap = new HashMap<>();\n        for (String letter : letters) {\n            if (!letter.isEmpty()) {\n                frequencyMap.put(letter, frequencyMap.getOrDefault(letter, 0) + 1);\n            }\n        }\n\n        // Step 3: Determine Maximum Frequency\n        int maxFrequency = 0;\n        for (int frequency : frequencyMap.values()) {\n            if (frequency > maxFrequency) {\n                maxFrequency = frequency;\n            }\n        }\n\n        // Step 4: Filter Letters with Maximum Frequency\n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : frequencyMap.entrySet()) {\n            if (entry.getValue() == maxFrequency) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n\n        // Step 5: Return the Result\n        return result;\n    }\n}\n"}
{"task_id": "Java/112", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverse_delete(String s, String c) {\n        // Step 1: Initialize Variables\n        Set<Character> charSet = new HashSet<>();\n        for (char ch : c.toCharArray()) {\n            charSet.add(ch);\n        }\n        StringBuilder resultBuilder = new StringBuilder();\n\n        // Step 2: Remove Characters\n        for (char ch : s.toCharArray()) {\n            if (!charSet.contains(ch)) {\n                resultBuilder.append(ch);\n            }\n        }\n        String resultString = resultBuilder.toString();\n\n        // Step 3: Palindrome Check\n        boolean isPalindrome = true;\n        for (int i = 0; i < resultString.length() / 2; i++) {\n            if (resultString.charAt(i) != resultString.charAt(resultString.length() - 1 - i)) {\n                isPalindrome = false;\n                break;\n            }\n        }\n\n        // Step 4: Construct Result\n        List<Object> result = new ArrayList<>();\n        result.add(resultString);\n        result.add(isPalindrome);\n        return result;\n    }\n}\n"}
{"task_id": "Java/113", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> odd_count(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        \n        for (String s : lst) {\n            int oddCount = 0;\n            for (char c : s.toCharArray()) {\n                if (c == '1' || c == '3' || c == '5' || c == '7' || c == '9') {\n                    oddCount++;\n                }\n            }\n            String output = \"the number of odd elements \" + oddCount + \"n the str\" + oddCount + \"ng \" + oddCount + \" of the \" + oddCount + \"nput.\";\n            result.add(output);\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/114", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        // Input validation\n        if (nums == null || nums.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list cannot be null or empty\");\n        }\n\n        // Initialization\n        int currentMinSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n\n        // Iterate through the array\n        for (int num : nums) {\n            currentSum += num;\n            if (currentSum < currentMinSum) {\n                currentMinSum = currentSum;\n            }\n            if (currentSum > 0) {\n                currentSum = 0;\n            }\n        }\n\n        // Return the result\n        return currentMinSum;\n    }\n}\n"}
{"task_id": "Java/115", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity. Can't use buckets from other wells to extract water from one well.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        int totalLowerings = 0;\n\n        for (List<Integer> well : grid) {\n            int totalUnits = 0;\n            for (int unit : well) {\n                totalUnits += unit;\n            }\n\n            int loweringsForWell = (int) Math.ceil((double) totalUnits / capacity);\n            totalLowerings += loweringsForWell;\n        }\n\n        return totalLowerings;\n    }\n}\n"}
{"task_id": "Java/116", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sort_array(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 4, 3, 5))\n    >>> sort_array(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-4, -2, -6, -5, -3))\n    >>> sort_array(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 4, 3))\n     */\n    public List<Integer> sort_array(List<Integer> arr) {\n        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int ones1 = countOnes(o1);\n                int ones2 = countOnes(o2);\n                if (ones1 != ones2) {\n                    return Integer.compare(ones1, ones2);\n                } else {\n                    return Integer.compare(o1, o2);\n                }\n            }\n        });\n        return arr;\n    }\n\n    private int countOnes(int num) {\n        return Integer.bitCount(num);\n    }\n}\n"}
{"task_id": "Java/117", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> select_words(String s, int n) {\n        // Step 1: Split the string into words\n        String[] words = s.split(\"\\\\s+\");\n\n        // Step 2: Initialize a list to store the result\n        List<String> result = new ArrayList<>();\n\n        // Step 3: Iterate through each word and filter based on consonant count\n        for (String word : words) {\n            if (countConsonants(word) == n) {\n                result.add(word);\n            }\n        }\n\n        // Step 4: Return the result\n        return result;\n    }\n\n    // Helper function to count consonants in a word\n    private int countConsonants(String word) {\n        int count = 0;\n        for (char c : word.toCharArray()) {\n            if (isConsonant(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    // Helper function to check if a character is a consonant\n    private boolean isConsonant(char c) {\n        return !isVowel(c) && Character.isLetter(c);\n    }\n\n    // Helper function to check if a character is a vowel\n    private boolean isVowel(char c) {\n        return \"AEIOUaeiou\".indexOf(c) != -1;\n    }\n}\n"}
{"task_id": "Java/118", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n     */\n    public String get_closest_vowel(String word) {\n        // Define the set of vowels\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        \n        // Initialize variables\n        char lastConsonant = '\\0';\n        String result = \"\";\n        \n        // Traverse the word from right to left\n        for (int i = word.length() - 1; i >= 0; i--) {\n            char currentChar = word.charAt(i);\n            \n            // Skip the last character if it is a vowel\n            if (i == word.length() - 1 && vowels.contains(currentChar)) {\n                continue;\n            }\n            \n            // Check if the current character is a vowel\n            if (vowels.contains(currentChar)) {\n                // Check if the last seen character was a consonant and the next character is also a consonant\n                if (lastConsonant != '\\0' && (i > 0 && !vowels.contains(word.charAt(i - 1)))) {\n                    result = String.valueOf(currentChar);\n                    break;\n                }\n            } else {\n                // Update the last seen consonant\n                lastConsonant = currentChar;\n            }\n        }\n        \n        // Return the result\n        return result;\n    }\n}\n"}
{"task_id": "Java/119", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    match_parens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    match_parens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String match_parens(List<String> lst) {\n        // Concatenate the two strings in both possible orders\n        String concat1 = lst.get(0) + lst.get(1);\n        String concat2 = lst.get(1) + lst.get(0);\n\n        // Check if either concatenated string is balanced\n        if (isBalanced(concat1) || isBalanced(concat2)) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n\n    // Helper function to check if a string is balanced\n    private boolean isBalanced(String s) {\n        int balance = 0;\n        for (char c : s.toCharArray()) {\n            if (c == '(') balance++;\n            else if (c == ')') balance--;\n            if (balance < 0) return false; // Early exit if unbalanced\n        }\n        return balance == 0;\n    }\n}\n"}
{"task_id": "Java/120", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr, in ascending order.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Step 1: Input Validation\n        if (arr == null || arr.isEmpty()) {\n            throw new IllegalArgumentException(\"Array must not be null or empty.\");\n        }\n        if (k < 0 || k > arr.size()) {\n            throw new IllegalArgumentException(\"k must be within the range [0, \" + arr.size() + \"].\");\n        }\n\n        // Step 2: Extract the Maximum k Numbers\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n        maxHeap.addAll(arr);\n        List<Integer> topK = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            topK.add(maxHeap.poll());\n        }\n\n        // Step 3: Sort the Extracted Numbers\n        Collections.sort(topK);\n\n        // Step 4: Return the Result\n        return topK;\n    }\n}\n"}
{"task_id": "Java/121", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==> 0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/122", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int add_elements(List<Integer> arr, int k) {\n        // Step 1: Extract the first k elements\n        List<Integer> firstKElements = arr.subList(0, k);\n\n        // Step 2: Filter elements with at most two digits\n        List<Integer> filteredElements = new ArrayList<>();\n        for (int num : firstKElements) {\n            if (num >= 0 && num <= 99) {\n                filteredElements.add(num);\n            }\n        }\n\n        // Step 3: Sum the filtered elements\n        int sum = 0;\n        for (int num : filteredElements) {\n            sum += num;\n        }\n\n        // Step 4: Return the result\n        return sum;\n    }\n}\n"}
{"task_id": "Java/123", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> get_odd_collatz(int n) {\n        // Step 1: Generate the Collatz sequence\n        List<Integer> sequence = generate_collatz_sequence(n);\n        \n        // Step 2: Extract the odd numbers\n        List<Integer> oddNumbers = extract_odd_numbers(sequence);\n        \n        // Step 3: Sort the odd numbers\n        sort_odd_numbers(oddNumbers);\n        \n        // Step 4: Return the sorted list of odd numbers\n        return oddNumbers;\n    }\n\n    private List<Integer> generate_collatz_sequence(int n) {\n        List<Integer> sequence = new ArrayList<>();\n        while (n != 1) {\n            sequence.add(n);\n            if (n % 2 == 0) {\n                n /= 2;\n            } else {\n                n = 3 * n + 1;\n            }\n        }\n        sequence.add(1); // Add the final 1 to the sequence\n        return sequence;\n    }\n\n    private List<Integer> extract_odd_numbers(List<Integer> sequence) {\n        List<Integer> oddNumbers = new ArrayList<>();\n        for (int num : sequence) {\n            if (num % 2 != 0) {\n                oddNumbers.add(num);\n            }\n        }\n        return oddNumbers;\n    }\n\n    private void sort_odd_numbers(List<Integer> oddNumbers) {\n        Collections.sort(oddNumbers);\n    }\n}\n"}
{"task_id": "Java/124", "generation": "import java.util.regex.Pattern;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    valid_date(\"03-11-2000\") => true\n    valid_date(\"15-01-2012\") => false\n    valid_date(\"04-0-2040\") => false\n    valid_date(\"06-04-2020\") => true\n    valid_date(\"06/04/2020\") => false\n     */\n    public boolean valid_date(String date) {\n        // Step 1: Check if the date string is not empty\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        // Step 2: Validate the format using regular expression\n        String regex = \"^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(\\\\d{4})$\";\n        if (!Pattern.matches(regex, date)) {\n            return false;\n        }\n\n        // Step 3: Split the date string to extract month, day, and year\n        String[] parts = date.split(\"-\");\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\n        // Step 4: Validate the month\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        // Step 5: Validate the day based on the month\n        switch (month) {\n            case 1:\n            case 3:\n            case 5:\n            case 7:\n            case 8:\n            case 10:\n            case 12:\n                if (day < 1 || day > 31) {\n                    return false;\n                }\n                break;\n            case 4:\n            case 6:\n            case 9:\n            case 11:\n                if (day < 1 || day > 30) {\n                    return false;\n                }\n                break;\n            case 2:\n                if (day < 1 || day > 29) {\n                    return false;\n                }\n                break;\n        }\n\n        // Step 6: All validations passed\n        return true;\n    }\n}\n"}
{"task_id": "Java/125", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n     */\n    public Object split_words(String txt) {\n        // Step 1: Input Validation\n        if (txt == null) {\n            throw new IllegalArgumentException(\"Input must be a non-null string\");\n        }\n\n        // Step 2: Check for Whitespace\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\"\\\\s+\"));\n        }\n\n        // Step 3: Check for Commas\n        if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        }\n\n        // Step 4: Count Lowercase Letters with Odd Order\n        int count = 0;\n        for (char c : txt.toCharArray()) {\n            if (Character.isLowerCase(c) && ((c - 'a') % 2 == 1)) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n}\n"}
{"task_id": "Java/126", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If the a number appears more than twice, return false. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted(Arrays.asList(5)) -> true\n    is_sorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    is_sorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    is_sorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    is_sorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    is_sorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean is_sorted(List<Integer> lst) {\n        // Handle edge cases\n        if (lst.isEmpty() || lst.size() == 1) {\n            return true;\n        }\n\n        // Initialize variables\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        int previousNumber = -1;\n\n        // Iterate through the list\n        for (int currentNumber : lst) {\n            // Update frequency map\n            frequencyMap.put(currentNumber, frequencyMap.getOrDefault(currentNumber, 0) + 1);\n\n            // Check if the current number appears more than twice\n            if (frequencyMap.get(currentNumber) > 2) {\n                return false;\n            }\n\n            // Check if the list is sorted in ascending order\n            if (previousNumber != -1 && currentNumber < previousNumber) {\n                return false;\n            }\n\n            // Update previous number\n            previousNumber = currentNumber;\n        }\n\n        // Return true if all conditions are met\n        return true;\n    }\n}\n"}
{"task_id": "Java/127", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if (interval1 == null || interval2 == null || interval1.size() != 2 || interval2.size() != 2) {\n            throw new IllegalArgumentException(\"Invalid intervals\");\n        }\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        if (start1 > end1 || start2 > end2) {\n            throw new IllegalArgumentException(\"Invalid intervals\");\n        }\n\n        int maxStart = Math.max(start1, start2);\n        int minEnd = Math.min(end1, end2);\n        if (maxStart > minEnd) {\n            return \"NO\";\n        }\n\n        int intersectionLength = minEnd - maxStart + 1;\n\n        if (isPrime(intersectionLength)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/128", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prod_signs(Arrays.asList(0, 1)) == 0\n    >>> prod_signs(Arrays.asList()) == None\n     */\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        // Step 1: Input Validation\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        // Step 2: Sum of Magnitudes\n        int sumOfMagnitudes = 0;\n        for (int num : arr) {\n            sumOfMagnitudes += Math.abs(num);\n        }\n\n        // Step 3: Product of Signs\n        int productOfSigns = 1;\n        for (int num : arr) {\n            if (num == 0) {\n                productOfSigns = 0;\n                break;\n            } else if (num < 0) {\n                productOfSigns *= -1;\n            }\n        }\n\n        // Step 4: Compute and Return the Result\n        int result = sumOfMagnitudes * productOfSigns;\n        return Optional.of(result);\n    }\n}\n"}
{"task_id": "Java/129", "generation": "import java.util.*;\n\nclass Solution {\n    private List<List<Integer>> grid;\n    private int N;\n    private int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        this.grid = grid;\n        N = grid.size();\n        List<Integer> bestPath = new ArrayList<>();\n        List<Integer> path = new ArrayList<>();\n\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < N; j++) {\n                path.add(grid.get(i).get(j));\n                dfs(i, j, path, k, bestPath);\n                path.clear();\n            }\n        }\n\n        return bestPath;\n    }\n\n    private boolean is_valid_move(int x, int y) {\n        return x >= 0 && x < N && y >= 0 && y < N;\n    }\n\n    private void dfs(int x, int y, List<Integer> path, int k, List<Integer> bestPath) {\n        if (path.size() == k) {\n            if (bestPath.isEmpty() || is_lexicographically_smaller(path, bestPath)) {\n                bestPath.clear();\n                bestPath.addAll(path);\n            }\n            return;\n        }\n\n        for (int[] dir : directions) {\n            int newX = x + dir[0];\n            int newY = y + dir[1];\n            if (is_valid_move(newX, newY)) {\n                path.add(grid.get(newX).get(newY));\n                dfs(newX, newY, path, k, bestPath);\n                path.remove(path.size() - 1);\n            }\n        }\n    }\n\n    private boolean is_lexicographically_smaller(List<Integer> path1, List<Integer> path2) {\n        for (int i = 0; i < path1.size(); i++) {\n            if (path1.get(i) < path2.get(i)) return true;\n            if (path1.get(i) > path2.get(i)) return false;\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/130", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        Map<Integer, Integer> memo = new HashMap<>();\n        \n        for (int i = 0; i <= n; i++) {\n            result.add(triHelper(i, memo));\n        }\n        \n        return result;\n    }\n\n    private int triHelper(int n, Map<Integer, Integer> memo) {\n        if (memo.containsKey(n)) {\n            return memo.get(n);\n        }\n        \n        if (n == 1) {\n            memo.put(n, 3);\n            return 3;\n        }\n        \n        if (n % 2 == 0) {\n            int value = 1 + n / 2;\n            memo.put(n, value);\n            return value;\n        } else {\n            int value = triHelper(n - 1, memo) + triHelper(n - 2, memo) + triHelper(n + 1, memo);\n            memo.put(n, value);\n            return value;\n        }\n    }\n}\n"}
{"task_id": "Java/131", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        // Convert the integer to a string\n        String numStr = Integer.toString(n);\n        \n        // Initialize variables\n        int product = 1;\n        boolean hasOddDigit = false;\n        \n        // Iterate through each digit\n        for (char c : numStr.toCharArray()) {\n            int digit = Character.getNumericValue(c);\n            \n            // Check if the digit is odd\n            if (digit % 2 != 0) {\n                product *= digit;\n                hasOddDigit = true;\n            }\n        }\n        \n        // Return the result\n        if (hasOddDigit) {\n            return product;\n        } else {\n            return 0;\n        }\n    }\n}\n"}
{"task_id": "Java/132", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    is_nested(\"[[]]\") -> true\n    is_nested(\"[]]]]]]][[[[[]\") -> false\n    is_nested(\"[][]\") -> false\n    is_nested(\"[]\") -> false\n    is_nested(\"[[][]]\") -> true\n    is_nested(\"[[]][[\") -> true\n     */\n    public boolean is_nested(String string) {\n        // Step 1: Validate the input string\n        for (char c : string.toCharArray()) {\n            if (c != '[' && c != ']') {\n                return false;\n            }\n        }\n\n        // Step 2: Initialize data structures\n        Stack<Character> stack = new Stack<>();\n        boolean hasNested = false;\n\n        // Step 3: Iterate through the string\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty()) {\n                    return false; // Invalid sequence\n                }\n                stack.pop();\n                if (!stack.isEmpty()) {\n                    hasNested = true;\n                }\n            }\n        }\n\n        // Step 4: Final check\n        return hasNested && stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/133", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sum_squares(List<Double> lst) {\n        if (lst == null || lst.isEmpty()) {\n            return 0;\n        }\n\n        int sum = 0;\n        for (Double num : lst) {\n            int roundedNum = (int) Math.ceil(num);\n            int squaredNum = roundedNum * roundedNum;\n            sum += squaredNum;\n        }\n\n        return sum;\n    }\n}\n"}
{"task_id": "Java/134", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") -> false\n    check_if_last_char_is_a_letter(\"apple pi e\") -> true\n    check_if_last_char_is_a_letter(\"apple pi e \") -> false\n    check_if_last_char_is_a_letter(\"\") -> false\n     */\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        // Step 1: Handle the empty string case\n        if (txt.isEmpty()) {\n            return false;\n        }\n\n        // Step 2: Extract the last character\n        char lastChar = txt.charAt(txt.length() - 1);\n\n        // Step 3: Check if the last character is a letter\n        if (!Character.isLetter(lastChar)) {\n            return false;\n        }\n\n        // Step 4: Check if the last character is not part of a word\n        if (txt.length() == 1 || txt.charAt(txt.length() - 2) == ' ') {\n            return true;\n        }\n\n        // Step 5: Combine the checks\n        return false;\n    }\n}\n"}
{"task_id": "Java/135", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange(Arrays.asList(1,2,4,3,5)) = 3\n    can_arrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int can_arrange(List<Integer> arr) {\n        // Initialize the largest index to -1\n        int largestIndex = -1;\n\n        // Iterate through the list starting from the second element\n        for (int i = 1; i < arr.size(); i++) {\n            // Check if the current element is less than the preceding element\n            if (arr.get(i) < arr.get(i - 1)) {\n                // Update the largest index\n                largestIndex = i;\n            }\n        }\n\n        // Return the largest index\n        return largestIndex;\n    }\n}\n"}
{"task_id": "Java/136", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largest_smallest_integers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largest_smallest_integers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        // Step 1: Initialize variables\n        List<Integer> negativeIntegers = new ArrayList<>();\n        List<Integer> positiveIntegers = new ArrayList<>();\n\n        // Step 2: Filter the input list\n        for (Integer num : lst) {\n            if (num < 0) {\n                negativeIntegers.add(num);\n            } else if (num > 0) {\n                positiveIntegers.add(num);\n            }\n        }\n\n        // Step 3: Find the largest negative integer\n        Optional<Integer> largestNegative = negativeIntegers.isEmpty() ? Optional.empty() : Optional.of(Collections.max(negativeIntegers));\n\n        // Step 4: Find the smallest positive integer\n        Optional<Integer> smallestPositive = positiveIntegers.isEmpty() ? Optional.empty() : Optional.of(Collections.min(positiveIntegers));\n\n        // Step 5: Return the results\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n}\n"}
{"task_id": "Java/137", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) -> Optional.of(2.5)\n    compare_one(1, \"2,3\") -> Optional.of(\"2,3\")\n    compare_one(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compare_one(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compare_one(Object a, Object b) {\n        if (!(a instanceof Integer || a instanceof Double || a instanceof String) ||\n            !(b instanceof Integer || b instanceof Double || b instanceof String)) {\n            throw new IllegalArgumentException(\"Invalid input types\");\n        }\n\n        double numA = convertToDouble(a);\n        double numB = convertToDouble(b);\n\n        if (numA == numB) {\n            return Optional.empty();\n        } else if (numA > numB) {\n            return Optional.of(a);\n        } else {\n            return Optional.of(b);\n        }\n    }\n\n    private double convertToDouble(Object obj) {\n        if (obj instanceof String) {\n            String str = ((String) obj).replace(',', '.');\n            return Double.parseDouble(str);\n        } else if (obj instanceof Integer) {\n            return ((Integer) obj).doubleValue();\n        } else if (obj instanceof Double) {\n            return (Double) obj;\n        } else {\n            throw new IllegalArgumentException(\"Invalid input type\");\n        }\n    }\n}\n"}
{"task_id": "Java/138", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == false\n    is_equal_to_sum_even(6) == false\n    is_equal_to_sum_even(8) == true\n     */\n    public boolean is_equal_to_sum_even(int n) {\n        // Step 1: Initial check\n        if (n < 8) {\n            return false;\n        }\n\n        // Step 2: Calculate and check\n        int remainder = n - 8;\n        return remainder % 4 == 0;\n    }\n}\n"}
{"task_id": "Java/139", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long special_factorial(int n) {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"Input must be a positive integer greater than 0\");\n        }\n\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    private long factorial(int k) {\n        if (k == 0 || k == 1) {\n            return 1;\n        }\n        long result = 1;\n        for (int i = 2; i <= k; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.special_factorial(1)); // Expected output: 1\n        System.out.println(solution.special_factorial(2)); // Expected output: 2\n        System.out.println(solution.special_factorial(3)); // Expected output: 12\n        System.out.println(solution.special_factorial(4)); // Expected output: 288\n        System.out.println(solution.special_factorial(5)); // Expected output: 34560\n\n        // Edge case\n        try {\n            System.out.println(solution.special_factorial(0)); // Should throw an exception\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n"}
{"task_id": "Java/140", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fix_spaces(String text) {\n        StringBuilder result = new StringBuilder();\n        int consecutiveSpaces = 0;\n\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c == ' ') {\n                consecutiveSpaces++;\n            } else {\n                if (consecutiveSpaces > 2) {\n                    result.append('-');\n                } else if (consecutiveSpaces > 0) {\n                    for (int j = 0; j < consecutiveSpaces; j++) {\n                        result.append('_');\n                    }\n                }\n                consecutiveSpaces = 0;\n                result.append(c);\n            }\n        }\n\n        // Handle trailing spaces\n        if (consecutiveSpaces > 2) {\n            result.append('-');\n        } else if (consecutiveSpaces > 0) {\n            for (int j = 0; j < consecutiveSpaces; j++) {\n                result.append('_');\n            }\n        }\n\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/141", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String file_name_check(String file_name) {\n        // Step 1: Input Validation\n        if (file_name == null || file_name.isEmpty()) {\n            return \"No\";\n        }\n\n        // Step 2: Dot Check\n        String[] parts = file_name.split(\"\\\\.\", -1);\n        if (parts.length != 2) {\n            return \"No\";\n        }\n\n        // Step 3: Substring Before Dot\n        String namePart = parts[0];\n        if (namePart.isEmpty() || !Character.isLetter(namePart.charAt(0))) {\n            return \"No\";\n        }\n        long digitCount = namePart.chars().filter(Character::isDigit).count();\n        if (digitCount > 3) {\n            return \"No\";\n        }\n\n        // Step 4: Substring After Dot\n        String extensionPart = parts[1];\n        List<String> validExtensions = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        if (!validExtensions.contains(extensionPart)) {\n            return \"No\";\n        }\n\n        // Step 5: Final Check\n        return \"Yes\";\n    }\n}\n"}
{"task_id": "Java/142", "generation": "import java.util.List;\n\nclass Solution {\n    /**\n     * This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n     * multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n     * change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n     *\n     * @param lst the list of integers\n     * @return the sum of the transformed list\n     */\n    public int sum_squares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (i % 3 == 0) {\n                sum += num * num;\n            } else if (i % 4 == 0) {\n                sum += num * num * num;\n            } else {\n                sum += num;\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/143", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String words_in_sentence(String sentence) {\n        // Step 1: Split the sentence into words\n        String[] words = sentence.split(\" \");\n        \n        // Step 2: Helper method to check if a number is prime\n        List<String> primeLengthWords = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                primeLengthWords.add(word);\n            }\n        }\n        \n        // Step 4: Reconstruct the sentence\n        String result = String.join(\" \", primeLengthWords);\n        \n        // Step 5: Return the result\n        return result;\n    }\n\n    // Helper method to check if a number is prime\n    private boolean isPrime(int n) {\n        if (n <= 1) return false;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/144", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Step 1: Parse the input strings\n        String[] partsX = x.split(\"/\");\n        String[] partsN = n.split(\"/\");\n        \n        int numeratorX = Integer.parseInt(partsX[0]);\n        int denominatorX = Integer.parseInt(partsX[1]);\n        \n        int numeratorN = Integer.parseInt(partsN[0]);\n        int denominatorN = Integer.parseInt(partsN[1]);\n        \n        // Step 2: Multiply the fractions\n        int newNumerator = numeratorX * numeratorN;\n        int newDenominator = denominatorX * denominatorN;\n        \n        // Step 3: Check if the resulting fraction is a whole number\n        return newNumerator % newDenominator == 0;\n    }\n}\n"}
{"task_id": "Java/145", "generation": "import java.util.*;\n\nclass NumberWithIndex {\n    int num;\n    int originalIndex;\n    int digitSum;\n\n    public NumberWithIndex(int num, int originalIndex, int digitSum) {\n        this.num = num;\n        this.originalIndex = originalIndex;\n        this.digitSum = digitSum;\n    }\n}\n\nclass Solution {\n    // Helper method to calculate the sum of digits\n    private int digitSum(int num) {\n        boolean isNegative = num < 0;\n        num = Math.abs(num);\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        if (isNegative) {\n            sum = sum - 2 * (sum % 10); // Adjust the sum to account for the negative first digit\n        }\n        return sum;\n    }\n\n    // Main method to sort the list\n    public List<Integer> order_by_points(List<Integer> nums) {\n        List<NumberWithIndex> numberList = new ArrayList<>();\n        \n        // Create a list of NumberWithIndex objects\n        for (int i = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n            int sum = digitSum(num);\n            numberList.add(new NumberWithIndex(num, i, sum));\n        }\n        \n        // Sort the list based on digit sum and original index\n        Collections.sort(numberList, (a, b) -> {\n            if (a.digitSum != b.digitSum) {\n                return a.digitSum - b.digitSum;\n            } else {\n                return a.originalIndex - b.originalIndex;\n            }\n        });\n        \n        // Extract and return the sorted integers\n        List<Integer> sortedNums = new ArrayList<>();\n        for (NumberWithIndex nwi : numberList) {\n            sortedNums.add(nwi.num);\n        }\n        \n        return sortedNums;\n    }\n}\n"}
{"task_id": "Java/146", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (isGreaterThanTen(num) && areBothDigitsOdd(getFirstDigit(num), getLastDigit(num))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isGreaterThanTen(int num) {\n        return num > 10;\n    }\n\n    private int getFirstDigit(int num) {\n        num = Math.abs(num); // Ensure the number is positive\n        while (num >= 10) {\n            num /= 10;\n        }\n        return num;\n    }\n\n    private int getLastDigit(int num) {\n        return Math.abs(num) % 10; // Ensure the number is positive\n    }\n\n    private boolean areBothDigitsOdd(int firstDigit, int lastDigit) {\n        return firstDigit % 2 != 0 && lastDigit % 2 != 0;\n    }\n}\n"}
{"task_id": "Java/147", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int get_max_triples(int n) {\n        // Step 1: Initialize the array\n        int[] a = new int[n];\n        for (int i = 1; i <= n; i++) {\n            a[i - 1] = i * i - i + 1;\n        }\n\n        // Step 2: Initialize the counter\n        int count = 0;\n\n        // Step 3: Iterate through all possible triples\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    // Step 4: Check if the sum is a multiple of 3\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n\n        // Step 5: Return the result\n        return count;\n    }\n}\n"}
{"task_id": "Java/148", "generation": "import java.util.*;\n\nclass Solution {\n    private static final List<String> PLANETS = Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    );\n\n    public List<String> bf(String planet1, String planet2) {\n        // Validate planet names\n        if (!PLANETS.contains(planet1) || !PLANETS.contains(planet2)) {\n            return Collections.emptyList();\n        }\n\n        // Find the positions of the planets\n        int index1 = PLANETS.indexOf(planet1);\n        int index2 = PLANETS.indexOf(planet2);\n\n        // Ensure index1 is less than index2\n        if (index1 > index2) {\n            int temp = index1;\n            index1 = index2;\n            index2 = temp;\n        }\n\n        // Extract planets between the two given planets\n        List<String> result = new ArrayList<>();\n        for (int i = index1 + 1; i < index2; i++) {\n            result.add(PLANETS.get(i));\n        }\n\n        // Return the result\n        return result;\n    }\n}\n"}
{"task_id": "Java/149", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert sorted_list_sum(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert sorted_list_sum(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> sorted_list_sum(List<String> lst) {\n        // Step 1: Filter out odd-length strings\n        List<String> filteredList = lst.stream()\n            .filter(s -> s.length() % 2 == 0)\n            .collect(Collectors.toList());\n\n        // Step 2: Sort the list\n        Collections.sort(filteredList, (a, b) -> {\n            if (a.length() != b.length()) {\n                return a.length() - b.length();\n            } else {\n                return a.compareTo(b);\n            }\n        });\n\n        // Step 3: Return the sorted list\n        return filteredList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sorted_list_sum(Arrays.asList(\"aa\", \"a\", \"aaa\"))); // Output: [\"aa\"]\n        System.out.println(solution.sorted_list_sum(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\"))); // Output: [\"ab\", \"cd\"]\n    }\n}\n"}
{"task_id": "Java/150", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n     */\n    public int x_or_y(int n, int x, int y) {\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/151", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    double_the_difference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    double_the_difference(Arrays.asList(-1, -2, 0)) == 0\n    double_the_difference(Arrays.asList(9, -2)) == 81\n    double_the_difference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int double_the_difference(List<Object> lst) {\n        // Step 1: Convert and filter the list\n        List<Integer> filteredList = lst.stream()\n            .filter(obj -> obj instanceof Integer)\n            .map(obj -> (Integer) obj)\n            .filter(num -> num >= 0)\n            .collect(Collectors.toList());\n\n        // Step 2: Identify and square odd numbers\n        int sumOfSquares = filteredList.stream()\n            .filter(num -> num % 2 != 0)\n            .mapToInt(num -> num * num)\n            .sum();\n\n        // Step 3: Return the result\n        return sumOfSquares;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.double_the_difference(Arrays.asList(1, 3, 2, 0))); // Output: 10\n        System.out.println(solution.double_the_difference(Arrays.asList(-1, -2, 0))); // Output: 0\n        System.out.println(solution.double_the_difference(Arrays.asList(9, -2))); // Output: 81\n        System.out.println(solution.double_the_difference(Arrays.asList(0))); // Output: 0\n    }\n}\n"}
{"task_id": "Java/152", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        // Step 1: Input Validation\n        if (game == null || guess == null) {\n            throw new IllegalArgumentException(\"Input lists cannot be null.\");\n        }\n        if (game.size() != guess.size()) {\n            throw new IllegalArgumentException(\"Input lists must have the same length.\");\n        }\n\n        // Step 2: Initialize the Result List\n        List<Integer> result = new ArrayList<>();\n\n        // Step 3: Iterate and Calculate Differences\n        for (int i = 0; i < game.size(); i++) {\n            int score = game.get(i);\n            int guessedScore = guess.get(i);\n            int difference = Math.abs(score - guessedScore);\n            result.add(difference);\n        }\n\n        // Step 4: Return the Result\n        return result;\n    }\n}\n"}
{"task_id": "Java/153", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.Strongest_Extension.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        String strongestExtension = \"\";\n        int maxStrength = Integer.MIN_VALUE;\n\n        for (String extension : extensions) {\n            int cap = 0;\n            int sm = 0;\n\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n                } else if (Character.isLowerCase(c)) {\n                    sm++;\n                }\n            }\n\n            int strength = cap - sm;\n\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return class_name + \".\" + strongestExtension;\n    }\n}\n"}
{"task_id": "Java/154", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => false\n    cycpattern_check(\"hello\",\"ell\") => true\n    cycpattern_check(\"whassup\",\"psus\") => false\n    cycpattern_check(\"abab\",\"baa\") => true\n    cycpattern_check(\"efef\",\"eeff\") => false\n    cycpattern_check(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpattern_check(String a, String b) {\n        List<String> rotations = generateRotations(b);\n        for (String rotation : rotations) {\n            if (a.contains(rotation)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private List<String> generateRotations(String b) {\n        List<String> rotations = new ArrayList<>();\n        int len = b.length();\n        for (int i = 0; i < len; i++) {\n            String rotation = b.substring(i) + b.substring(0, i);\n            rotations.add(rotation);\n        }\n        return rotations;\n    }\n}\n"}
{"task_id": "Java/155", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n     */\n    public List<Integer> even_odd_count(int num) {\n        // Handle negative numbers\n        num = Math.abs(num);\n        \n        // Convert integer to string\n        String numStr = String.valueOf(num);\n        \n        // Initialize counters\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        // Iterate over digits\n        for (char c : numStr.toCharArray()) {\n            int digit = Character.getNumericValue(c);\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        \n        // Return the result\n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n}\n"}
{"task_id": "Java/156", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == \"xix\"\n    >>> int_to_mini_roman(152) == \"clii\"\n    >>> int_to_mini_roman(426) == \"cdxxvi\"\n     */\n    public String int_to_mini_roman(int number) {\n        if (number < 1 || number > 1000) {\n            throw new IllegalArgumentException(\"Number must be between 1 and 1000\");\n        }\n\n        StringBuilder roman = new StringBuilder();\n        for (int[] mapping : romanNumerals) {\n            while (number >= mapping[0]) {\n                number -= mapping[0];\n                roman.append((char) mapping[1]);\n                if (mapping.length > 2) {\n                    roman.append((char) mapping[2]);\n                }\n            }\n        }\n\n        return roman.toString().toLowerCase();\n    }\n\n    private static final List<int[]> romanNumerals = Arrays.asList(\n        new int[]{1000, 'M'},\n        new int[]{900, 'C', 'M'},\n        new int[]{500, 'D'},\n        new int[]{400, 'C', 'D'},\n        new int[]{100, 'C'},\n        new int[]{90, 'X', 'C'},\n        new int[]{50, 'L'},\n        new int[]{40, 'X', 'L'},\n        new int[]{10, 'X'},\n        new int[]{9, 'I', 'X'},\n        new int[]{5, 'V'},\n        new int[]{4, 'I', 'V'},\n        new int[]{1, 'I'}\n    );\n}\n"}
{"task_id": "Java/157", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == true\n    right_angle_triangle(1, 2, 3) == false\n     */\n    public boolean right_angle_triangle(int a, int b, int c) {\n        // Input validation\n        if (a <= 0 || b <= 0 || c <= 0) {\n            return false;\n        }\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return false;\n        }\n\n        // Identify the hypotenuse\n        int maxSide = Math.max(a, Math.max(b, c));\n        int side1, side2;\n        if (maxSide == a) {\n            side1 = b;\n            side2 = c;\n        } else if (maxSide == b) {\n            side1 = a;\n            side2 = c;\n        } else {\n            side1 = a;\n            side2 = b;\n        }\n\n        // Check the Pythagorean theorem\n        int hypotenuseSquare = maxSide * maxSide;\n        int otherSidesSquareSum = side1 * side1 + side2 * side2;\n\n        return hypotenuseSquare == otherSidesSquareSum;\n    }\n}\n"}
{"task_id": "Java/158", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\n     */\n    public String find_max(List<String> words) {\n        if (words == null || words.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list cannot be null or empty\");\n        }\n\n        int maxUniqueChars = 0;\n        List<String> candidates = new ArrayList<>();\n\n        for (String word : words) {\n            int uniqueChars = countUniqueCharacters(word);\n            if (uniqueChars > maxUniqueChars) {\n                maxUniqueChars = uniqueChars;\n                candidates.clear();\n                candidates.add(word);\n            } else if (uniqueChars == maxUniqueChars) {\n                candidates.add(word);\n            }\n        }\n\n        Collections.sort(candidates);\n        return candidates.get(0);\n    }\n\n    private int countUniqueCharacters(String word) {\n        Set<Character> uniqueChars = new HashSet<>();\n        for (char c : word.toCharArray()) {\n            uniqueChars.add(c);\n        }\n        return uniqueChars.size();\n    }\n}\n"}
{"task_id": "Java/159", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        // Input validation\n        if (number < 0 || number > 1000 || need < 0 || need > 1000 || remaining < 0 || remaining > 1000) {\n            throw new IllegalArgumentException(\"Input values must be between 0 and 1000.\");\n        }\n\n        // Calculate the total number of carrots eaten\n        int totalEaten = number + Math.min(need, remaining);\n\n        // Calculate the number of carrots left\n        int carrotsLeft = remaining - Math.min(need, remaining);\n\n        // Return the result\n        return Arrays.asList(totalEaten, carrotsLeft);\n    }\n}\n"}
{"task_id": "Java/160", "generation": "import java.util.*;\nimport java.lang.*;\nimport javax.script.ScriptEngineManager;\nimport javax.script.ScriptEngine;\nimport javax.script.ScriptException;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebraic\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        if (!validateInputs(operator, operand)) {\n            throw new IllegalArgumentException(\"Invalid input\");\n        }\n\n        String expression = constructExpression(operator, operand);\n        return evaluateExpression(expression);\n    }\n\n    private boolean validateInputs(List<String> operator, List<Integer> operand) {\n        // Check lengths\n        if (operator.size() != operand.size() - 1) {\n            return false;\n        }\n\n        // Validate operators\n        Set<String> validOperators = new HashSet<>(Arrays.asList(\"+\", \"-\", \"*\", \"/\", \"**\"));\n        for (String op : operator) {\n            if (!validOperators.contains(op)) {\n                return false;\n            }\n        }\n\n        // Validate operands\n        for (int num : operand) {\n            if (num < 0) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private String constructExpression(List<String> operator, List<Integer> operand) {\n        StringBuilder expression = new StringBuilder();\n        for (int i = 0; i < operand.size() - 1; i++) {\n            expression.append(operand.get(i)).append(\" \").append(operator.get(i)).append(\" \");\n        }\n        expression.append(operand.get(operand.size() - 1));\n        return expression.toString();\n    }\n\n    private int evaluateExpression(String expression) {\n        // Use a scripting engine to evaluate the expression\n        ScriptEngineManager manager = new ScriptEngineManager();\n        ScriptEngine engine = manager.getEngineByName(\"JavaScript\");\n        try {\n            return (int) engine.eval(expression);\n        } catch (ScriptException e) {\n            throw new RuntimeException(\"Error evaluating expression: \" + expression, e);\n        }\n    }\n}\n"}
{"task_id": "Java/161", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        StringBuilder result = new StringBuilder();\n        boolean hasLetters = false;\n\n        // Iterate through the string\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                // Reverse the case of the letter\n                if (Character.isLowerCase(c)) {\n                    result.append(Character.toUpperCase(c));\n                } else {\n                    result.append(Character.toLowerCase(c));\n                }\n                hasLetters = true;\n            } else {\n                // Append non-letter characters as is\n                result.append(c);\n            }\n        }\n\n        // Check if no letters were found\n        if (!hasLetters) {\n            result.reverse();\n        }\n\n        // Return the resulting string\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/162", "generation": "import java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Optional;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] messageDigest = md.digest(text.getBytes());\n\n        StringBuilder hexString = new StringBuilder();\n        for (byte b : messageDigest) {\n            String hex = Integer.toHexString(0xff & b);\n            if (hex.length() == 1) {\n                hexString.append('0');\n            }\n            hexString.append(hex);\n        }\n\n        return Optional.of(hexString.toString());\n    }\n}\n"}
{"task_id": "Java/163", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order. Please note that the even digits refer to even numbers less than 10.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n     */\n    public List<Integer> generate_integers(int a, int b) {\n        // Step 1: Input Validation\n        if (a < 0 || b < 0) {\n            throw new IllegalArgumentException(\"Both a and b must be positive integers.\");\n        }\n        \n        // Step 2: Swap if a > b\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n\n        // Step 3: Define Even Digits\n        List<Integer> evenDigits = Arrays.asList(0, 2, 4, 6, 8);\n\n        // Step 4: Filter Even Digits within the Range\n        List<Integer> result = new ArrayList<>();\n        for (int digit : evenDigits) {\n            if (digit >= a && digit <= b) {\n                result.add(digit);\n            }\n        }\n\n        // Step 5: Return the Result\n        return result;\n    }\n}\n"}
