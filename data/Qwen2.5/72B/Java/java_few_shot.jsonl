{"task_id": "Java/0", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/1", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        int balance = 0;\n        StringBuilder currentGroup = new StringBuilder();\n        \n        for (char c : paren_string.replaceAll(\" \", \"\").toCharArray()) {\n            if (c == '(') {\n                balance++;\n            } else if (c == ')') {\n                balance--;\n            }\n            currentGroup.append(c);\n            \n            if (balance == 0) {\n                result.add(currentGroup.toString());\n                currentGroup.setLength(0); // Clear the StringBuilder\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/2", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double truncate_number(double number) {\n        double integerPart = (double) (int) number;\n        return number - integerPart;\n    }\n}\n"}
{"task_id": "Java/3", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/4", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double mean_absolute_deviation(List<Double> numbers) {\n        double sum = 0.0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n\n        double madSum = 0.0;\n        for (double num : numbers) {\n            madSum += Math.abs(num - mean);\n        }\n        return madSum / numbers.size();\n    }\n}\n"}
{"task_id": "Java/5", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        if (numbers.isEmpty()) {\n            return result;\n        }\n        \n        for (int i = 0; i < numbers.size() - 1; i++) {\n            result.add(numbers.get(i));\n            result.add(delimiter);\n        }\n        result.add(numbers.get(numbers.size() - 1));\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/6", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> parse_nested_parens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        String[] groups = paren_string.split(\" \");\n        \n        for (String group : groups) {\n            int maxDepth = 0;\n            int currentDepth = 0;\n            \n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentDepth++;\n                    maxDepth = Math.max(maxDepth, currentDepth);\n                } else if (c == ')') {\n                    currentDepth--;\n                }\n            }\n            \n            result.add(maxDepth);\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/7", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> filteredStrings = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredStrings.add(str);\n            }\n        }\n        return filteredStrings;\n    }\n}\n"}
{"task_id": "Java/8", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sum_product(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(sum);\n        result.add(product);\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/9", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        if (numbers.isEmpty()) {\n            return result;\n        }\n        \n        int maxSoFar = numbers.get(0);\n        for (int num : numbers) {\n            if (num > maxSoFar) {\n                maxSoFar = num;\n            }\n            result.add(maxSoFar);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/10", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    */\n    public String make_palindrome(String string) {\n        if (string == null || string.isEmpty()) {\n            return string;\n        }\n\n        int len = string.length();\n        int i = len;\n\n        while (i > 0 && !isPalindrome(string.substring(0, i))) {\n            i--;\n        }\n\n        String nonPalindromePrefix = string.substring(i);\n        String reversedNonPalindromePrefix = new StringBuilder(nonPalindromePrefix).reverse().toString();\n\n        return string + reversedNonPalindromePrefix;\n    }\n}\n"}
{"task_id": "Java/11", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String string_xor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            // XOR the characters and append to result\n            char xorChar = (a.charAt(i) == b.charAt(i)) ? '0' : '1';\n            result.append(xorChar);\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/12", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longestString = strings.get(0);\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n        return Optional.of(longestString);\n    }\n}\n"}
{"task_id": "Java/13", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int greatest_common_divisor(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}\n"}
{"task_id": "Java/14", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> all_prefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n}\n"}
{"task_id": "Java/15", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String string_sequence(int n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            if (i < n) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/16", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int count_distinct_characters(String string) {\n        Set<Character> distinctChars = new HashSet<>();\n        for (char c : string.toLowerCase().toCharArray()) {\n            distinctChars.add(c);\n        }\n        return distinctChars.size();\n    }\n}\n"}
{"task_id": "Java/17", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> parse_music(String string) {\n        List<Integer> beats = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        \n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    beats.add(4);\n                    break;\n                case \"o|\":\n                    beats.add(2);\n                    break;\n                case \".|\":\n                    beats.add(1);\n                    break;\n                default:\n                    // Handle unexpected notes if necessary\n                    break;\n            }\n        }\n        return beats;\n    }\n}\n"}
{"task_id": "Java/18", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int how_many_times(String string, String substring) {\n        if (substring.isEmpty()) {\n            return 0;\n        }\n\n        int count = 0;\n        int index = 0;\n\n        while ((index = string.indexOf(substring, index)) != -1) {\n            count++;\n            index++; // Move to the next character to allow overlapping\n        }\n\n        return count;\n    }\n}\n"}
{"task_id": "Java/19", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String sort_numbers(String numbers) {\n        Map<String, Integer> numberMap = new HashMap<>();\n        numberMap.put(\"zero\", 0);\n        numberMap.put(\"one\", 1);\n        numberMap.put(\"two\", 2);\n        numberMap.put(\"three\", 3);\n        numberMap.put(\"four\", 4);\n        numberMap.put(\"five\", 5);\n        numberMap.put(\"six\", 6);\n        numberMap.put(\"seven\", 7);\n        numberMap.put(\"eight\", 8);\n        numberMap.put(\"nine\", 9);\n\n        String[] numberArray = numbers.split(\" \");\n        Arrays.sort(numberArray, Comparator.comparingInt(numberMap::get));\n\n        return String.join(\" \", numberArray);\n    }\n}\n"}
{"task_id": "Java/20", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        // Sort the list to make finding the closest elements easier\n        Collections.sort(numbers);\n        \n        // Initialize variables to store the closest pair and their distance\n        List<Double> closestPair = new ArrayList<>();\n        double minDistance = Double.MAX_VALUE;\n        \n        // Iterate through the sorted list to find the closest pair\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double currentDistance = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (currentDistance < minDistance) {\n                minDistance = currentDistance;\n                closestPair.clear();\n                closestPair.add(numbers.get(i));\n                closestPair.add(numbers.get(i + 1));\n            }\n        }\n        \n        return closestPair;\n    }\n}\n"}
{"task_id": "Java/21", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        List<Double> scaledNumbers = new ArrayList<>();\n\n        for (double num : numbers) {\n            double scaledValue = (num - min) / (max - min);\n            scaledNumbers.add(scaledValue);\n        }\n\n        return scaledNumbers;\n    }\n}\n"}
{"task_id": "Java/22", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> filter_integers(List<Object> values) {\n        List<Integer> filteredIntegers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                filteredIntegers.add((Integer) value);\n            }\n        }\n        return filteredIntegers;\n    }\n}\n"}
{"task_id": "Java/23", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int strlen(String string) {\n        return string.length();\n    }\n}\n"}
{"task_id": "Java/24", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largest_divisor(int n) {\n        for (int i = n / 2; i >= 1; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1; // Every number is divisible by 1\n    }\n}\n"}
{"task_id": "Java/25", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int factor = 2; factor * factor <= n; factor++) {\n            while (n % factor == 0) {\n                factors.add(factor);\n                n /= factor;\n            }\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}\n"}
{"task_id": "Java/26", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        Map<Integer, Integer> frequencyMap = new LinkedHashMap<>();\n        \n        // Count the frequency of each element\n        for (int num : numbers) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        // Filter out elements that occur more than once\n        List<Integer> result = numbers.stream()\n                                      .filter(num -> frequencyMap.get(num) == 1)\n                                      .collect(Collectors.toList());\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/27", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String flip_case(String string) {\n        StringBuilder flippedString = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                flippedString.append(Character.toLowerCase(c));\n            } else {\n                flippedString.append(Character.toUpperCase(c));\n            }\n        }\n        return flippedString.toString();\n    }\n}\n"}
{"task_id": "Java/28", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String concatenate(List<String> strings) {\n        StringBuilder result = new StringBuilder();\n        for (String str : strings) {\n            result.append(str);\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/29", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/30", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> get_positive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/31", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_prime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2 || n == 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/32", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> find_zero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> find_zero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double find_zero(List<Double> xs) {\n        // Using the bisection method to find a root\n        double a = -1000; // Start with a large negative value\n        double b = 1000;  // Start with a large positive value\n        double tolerance = 1e-7; // Tolerance level for convergence\n\n        // Ensure the function values at a and b have opposite signs\n        while (poly(xs, a) * poly(xs, b) > 0) {\n            a /= 2;\n            b *= 2;\n        }\n\n        // Bisection method\n        while ((b - a) / 2.0 > tolerance) {\n            double c = (a + b) / 2.0;\n            if (poly(xs, c) == 0) {\n                return c;\n            } else if (poly(xs, a) * poly(xs, c) < 0) {\n                b = c;\n            } else {\n                a = c;\n            }\n        }\n\n        return (a + b) / 2.0;\n    }\n}\n"}
{"task_id": "Java/33", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_third(List<Integer> l) {\n        List<Integer> sortedIndices = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if ((i + 1) % 3 == 0) {\n                sortedIndices.add(l.get(i));\n            }\n        }\n        sortedIndices.sort(Comparator.naturalOrder());\n\n        List<Integer> result = new ArrayList<>(l);\n        int sortedIndex = 0;\n        for (int i = 0; i < result.size(); i++) {\n            if ((i + 1) % 3 == 0) {\n                result.set(i, sortedIndices.get(sortedIndex++));\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/34", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> set = new HashSet<>(l);\n        List<Integer> result = new ArrayList<>(set);\n        Collections.sort(result);\n        return result;\n    }\n}\n"}
{"task_id": "Java/35", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int max_element(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be null or empty\");\n        }\n        int max = l.get(0);\n        for (int num : l) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n}\n"}
{"task_id": "Java/36", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fizz_buzz(int n) {\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String numStr = Integer.toString(i);\n                for (int j = 0; j < numStr.length(); j++) {\n                    if (numStr.charAt(j) == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/37", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_even(List<Integer> l) {\n        List<Integer> evenIndicesValues = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 2) {\n            evenIndicesValues.add(l.get(i));\n        }\n        Collections.sort(evenIndicesValues);\n\n        List<Integer> result = new ArrayList<>(l);\n        for (int i = 0, j = 0; i < result.size(); i += 2, j++) {\n            result.set(i, evenIndicesValues.get(j));\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/38", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decode_cyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n"}
{"task_id": "Java/39", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int prime_fib(int n) {\n        int count = 0;\n        int fib1 = 1;\n        int fib2 = 1;\n        int fib = 1;\n\n        while (true) {\n            if (isPrime(fib)) {\n                count++;\n                if (count == n) {\n                    return fib;\n                }\n            }\n            fib = fib1 + fib2;\n            fib1 = fib2;\n            fib2 = fib;\n        }\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        if (num <= 3) return true;\n        if (num % 2 == 0 || num % 3 == 0) return false;\n        for (int i = 5; i * i <= num; i += 6) {\n            if (num % i == 0 || num % (i + 2) == 0) return false;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/40", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        if (l.size() < 3) {\n            return false;\n        }\n        \n        Collections.sort(l);\n        \n        for (int i = 0; i < l.size() - 2; i++) {\n            int left = i + 1;\n            int right = l.size() - 1;\n            \n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                \n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        \n        return false;\n    }\n}\n"}
{"task_id": "Java/41", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int car_race_collision(int n) {\n        // Since each car going left to right will eventually collide with each car going right to left,\n        // the total number of collisions is simply the product of the number of cars in each direction.\n        return n * n;\n    }\n}\n"}
{"task_id": "Java/42", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> incr_list(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/43", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        Set<Integer> seen = new HashSet<>();\n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/44", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String change_base(int x, int base) {\n        StringBuilder result = new StringBuilder();\n        while (x > 0) {\n            int remainder = x % base;\n            result.insert(0, remainder);\n            x /= base;\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/45", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangle_area(double a, double h) {\n        return 0.5 * a * h;\n    }\n}\n"}
{"task_id": "Java/46", "generation": "import java.util.*;\n\nclass Solution {\n    public int fib4(int n) {\n        if (n == 0 || n == 1 || n == 3) return 0;\n        if (n == 2) return 2;\n\n        int[] dp = new int[n + 1];\n        dp[0] = 0;\n        dp[1] = 0;\n        dp[2] = 2;\n        dp[3] = 0;\n\n        for (int i = 4; i <= n; i++) {\n            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4];\n        }\n\n        return dp[n];\n    }\n}\n"}
{"task_id": "Java/47", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            // If even number of elements, return the average of the two middle elements\n            return (l.get(size / 2 - 1) + l.get(size / 2)) / 2.0;\n        } else {\n            // If odd number of elements, return the middle element\n            return l.get(size / 2);\n        }\n    }\n}\n"}
{"task_id": "Java/48", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_palindrome(String text) {\n        int left = 0;\n        int right = text.length() - 1;\n        \n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/49", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int modp(int n, int p) {\n        // Calculate 2^n using bitwise shift\n        long result = 1L << n;\n        // Take modulo p\n        return (int)(result % p);\n    }\n}\n"}
{"task_id": "Java/50", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decode_shift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26)));\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/51", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String remove_vowels(String text) {\n        return text.replaceAll(\"[aeiouAEIOU]\", \"\");\n    }\n}\n"}
{"task_id": "Java/52", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean below_threshold(List<Integer> l, int t) {\n        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/53", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add(int x, int y) {\n        return x + y;\n    }\n}\n"}
{"task_id": "Java/54", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean same_chars(String s0, String s1) {\n        Set<Character> set0 = new HashSet<>();\n        Set<Character> set1 = new HashSet<>();\n\n        for (char c : s0.toCharArray()) {\n            set0.add(c);\n        }\n\n        for (char c : s1.toCharArray()) {\n            set1.add(c);\n        }\n\n        return set0.equals(set1);\n    }\n}\n"}
{"task_id": "Java/55", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0, b = 1, c;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}\n"}
{"task_id": "Java/56", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correct_bracketing(String brackets) {\n        int balance = 0;\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                balance++;\n            } else if (c == '>') {\n                balance--;\n            }\n            if (balance < 0) {\n                return false; // Found a closing bracket without a matching opening bracket\n            }\n        }\n        return balance == 0; // All opening brackets have matching closing brackets\n    }\n}\n"}
{"task_id": "Java/57", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean monotonic(List<Integer> l) {\n        boolean increasing = true;\n        boolean decreasing = true;\n\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n        }\n\n        return increasing || decreasing;\n    }\n}\n"}
{"task_id": "Java/58", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        \n        set1.retainAll(set2); // Retain only elements that are present in both sets\n        \n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result); // Sort the result list\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/59", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largest_prime_factor(int n) {\n        int maxPrime = -1;\n\n        // Divide n by 2 to remove all even factors\n        while (n % 2 == 0) {\n            maxPrime = 2;\n            n /= 2;\n        }\n\n        // n must be odd at this point, so we can skip one element (Note i = i + 2)\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            // While i divides n, remove i and set maxPrime to i\n            while (n % i == 0) {\n                maxPrime = i;\n                n /= i;\n            }\n        }\n\n        // This condition is to handle the case when n is a prime number greater than 2\n        if (n > 2) {\n            maxPrime = n;\n        }\n\n        return maxPrime;\n    }\n}\n"}
{"task_id": "Java/60", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_to_n(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/61", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correct_bracketing(String brackets) {\n        int balance = 0;\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                balance++;\n            } else if (c == ')') {\n                balance--;\n            }\n            if (balance < 0) {\n                return false; // A closing bracket appears before a matching opening bracket\n            }\n        }\n        return balance == 0; // All opening brackets have a corresponding closing bracket\n    }\n}\n"}
{"task_id": "Java/62", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/63", "generation": "import java.util.*;\n\nclass Solution {\n    public int fibfib(int n) {\n        if (n == 0 || n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n\n        int[] dp = new int[n + 1];\n        dp[0] = 0;\n        dp[1] = 0;\n        dp[2] = 1;\n\n        for (int i = 3; i <= n; i++) {\n            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];\n        }\n\n        return dp[n];\n    }\n}\n"}
{"task_id": "Java/64", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int vowels_count(String s) {\n        int count = 0;\n        String vowels = \"aeiouAEIOU\";\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (vowels.indexOf(c) != -1) {\n                count++;\n            }\n        }\n        if (s.endsWith(\"y\") || s.endsWith(\"Y\")) {\n            count++;\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/65", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String circular_shift(int x, int shift) {\n        String numStr = Integer.toString(x);\n        int len = numStr.length();\n        \n        // If shift is greater than the number of digits, reverse the string\n        if (shift >= len) {\n            return new StringBuilder(numStr).reverse().toString();\n        }\n        \n        // Perform the circular shift\n        shift = shift % len; // In case shift is larger than the length\n        String shifted = numStr.substring(len - shift) + numStr.substring(0, len - shift);\n        \n        return shifted;\n    }\n}\n"}
{"task_id": "Java/66", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digitSum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/67", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruit_distribution(String s, int n) {\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[3]);\n        return n - apples - oranges;\n    }\n}\n"}
{"task_id": "Java/68", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return result;\n        }\n\n        int smallestEvenValue = Integer.MAX_VALUE;\n        int smallestIndex = -1;\n\n        for (int i = 0; i < arr.size(); i++) {\n            int value = arr.get(i);\n            if (value % 2 == 0 && value <= smallestEvenValue) {\n                if (value < smallestEvenValue || (value == smallestEvenValue && i < smallestIndex)) {\n                    smallestEvenValue = value;\n                    smallestIndex = i;\n                }\n            }\n        }\n\n        if (smallestIndex != -1) {\n            result.add(smallestEvenValue);\n            result.add(smallestIndex);\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/69", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int search(List<Integer> lst) {\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        // Count the frequency of each integer\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        // Find the greatest integer with a frequency >= its value\n        int result = -1;\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int num = entry.getKey();\n            int freq = entry.getValue();\n            if (freq >= num && num > result) {\n                result = num;\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/70", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> sortedList = new ArrayList<>();\n        while (!lst.isEmpty()) {\n            // Find and remove the minimum value\n            Integer min = Collections.min(lst);\n            lst.remove(min);\n            sortedList.add(min);\n            \n            // If the list is empty after removing the min, break the loop\n            if (lst.isEmpty()) {\n                break;\n            }\n            \n            // Find and remove the maximum value\n            Integer max = Collections.max(lst);\n            lst.remove(max);\n            sortedList.add(max);\n        }\n        return sortedList;\n    }\n}\n"}
{"task_id": "Java/71", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangle_area(double a, double b, double c) {\n        // Check if the sides form a valid triangle\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n\n        // Calculate the semi-perimeter\n        double s = (a + b + c) / 2;\n\n        // Calculate the area using Heron's formula\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\n        // Round the area to 2 decimal places\n        return Math.round(area * 100.0) / 100.0;\n    }\n}\n"}
{"task_id": "Java/72", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean will_it_fly(List<Integer> q, int w) {\n        // Check if the list is a palindrome\n        boolean isBalanced = true;\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (!q.get(i).equals(q.get(q.size() - 1 - i))) {\n                isBalanced = false;\n                break;\n            }\n        }\n\n        // Calculate the sum of the elements\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n\n        // Check if the sum is less than or equal to the maximum weight and if the list is balanced\n        return isBalanced && sum <= w;\n    }\n}\n"}
{"task_id": "Java/73", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int smallest_change(List<Integer> arr) {\n        int n = arr.size();\n        int changes = 0;\n\n        for (int i = 0; i < n / 2; i++) {\n            if (!arr.get(i).equals(arr.get(n - 1 - i))) {\n                changes++;\n            }\n        }\n\n        return changes;\n    }\n}\n"}
{"task_id": "Java/74", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        int sum1 = lst1.stream().mapToInt(String::length).sum();\n        int sum2 = lst2.stream().mapToInt(String::length).sum();\n\n        if (sum1 <= sum2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n"}
{"task_id": "Java/75", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    private static final List<Integer> primes = Arrays.asList(\n        2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97\n    );\n\n    public boolean is_multiply_prime(int a) {\n        if (a < 2) return false;\n\n        int count = 0;\n        for (int prime : primes) {\n            if (prime > a) break;\n            while (a % prime == 0) {\n                a /= prime;\n                count++;\n            }\n            if (count > 3) return false;\n        }\n\n        return count == 3 && a == 1;\n    }\n}\n"}
{"task_id": "Java/76", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_simple_power(int x, int n) {\n        if (n == 1) {\n            return x == 1;\n        }\n        if (x == 1) {\n            return n == 1;\n        }\n        if (x < 1 || n < 1) {\n            return false;\n        }\n        \n        int power = 1;\n        while (power < x) {\n            power *= n;\n        }\n        return power == x;\n    }\n}\n"}
{"task_id": "Java/77", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean iscube(int a) {\n        if (a == 0) return true;\n        int absA = Math.abs(a);\n        int root = (int) Math.round(Math.cbrt(absA));\n        return root * root * root == absA;\n    }\n}\n"}
{"task_id": "Java/78", "generation": "import java.util.*;\n\nclass Solution {\n    public int hex_key(String num) {\n        Set<Character> primeHexDigits = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        int count = 0;\n        \n        for (char c : num.toCharArray()) {\n            if (primeHexDigits.contains(c)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/79", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String decimal_to_binary(int decimal) {\n        if (decimal == 0) {\n            return \"db0db\";\n        }\n        StringBuilder binary = new StringBuilder();\n        while (decimal > 0) {\n            binary.insert(0, decimal % 2);\n            decimal /= 2;\n        }\n        return \"db\" + binary.toString() + \"db\";\n    }\n}\n"}
{"task_id": "Java/80", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_happy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n        \n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/81", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double gpa : grades) {\n            if (gpa == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}\n"}
{"task_id": "Java/82", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean prime_length(String string) {\n        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= length; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/83", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int starts_one_ends(int n) {\n        if (n == 1) {\n            return 1; // Only one 1-digit number starts or ends with 1\n        }\n        \n        // For n-digit numbers, there are 9^(n-1) numbers that start with 1\n        // and 9^(n-1) numbers that end with 1.\n        // However, we need to subtract the overlap (numbers that start and end with 1)\n        // which is 9^(n-2).\n        int countStartsWithOne = (int) Math.pow(9, n - 1);\n        int countEndsWithOne = (int) Math.pow(9, n - 1);\n        int countBothStartAndEndWithOne = (int) Math.pow(9, n - 2);\n        \n        return countStartsWithOne + countEndsWithOne - countBothStartAndEndWithOne;\n    }\n}\n"}
{"task_id": "Java/84", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(int N) {\n        int sum = 0;\n        while (N > 0) {\n            sum += N % 10;\n            N /= 10;\n        }\n        return Integer.toBinaryString(sum);\n    }\n}\n"}
{"task_id": "Java/85", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/86", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String anti_shuffle(String s) {\n        StringBuilder result = new StringBuilder();\n        String[] words = s.split(\" \");\n        \n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            result.append(new String(chars)).append(\" \");\n        }\n        \n        // Remove the trailing space\n        return result.toString().trim();\n    }\n}\n"}
{"task_id": "Java/87", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    List<Integer> coordinate = new ArrayList<>();\n                    coordinate.add(i);\n                    coordinate.add(j);\n                    result.add(coordinate);\n                }\n            }\n        }\n        \n        // Sort by rows in ascending order\n        result.sort((a, b) -> a.get(0).compareTo(b.get(0)));\n        \n        // Sort columns in descending order within each row\n        for (int i = 0; i < result.size() - 1; i++) {\n            if (result.get(i).get(0).equals(result.get(i + 1).get(0))) {\n                Collections.sort(result.subList(i, i + 2), (a, b) -> b.get(1).compareTo(a.get(1)));\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/88", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> array) {\n        List<Integer> result = new ArrayList<>(array);\n        if (result.isEmpty() || result.size() == 1) {\n            return result;\n        }\n\n        int firstValue = result.get(0);\n        int lastValue = result.get(result.size() - 1);\n        int sum = firstValue + lastValue;\n\n        if (sum % 2 == 0) {\n            result.sort(Comparator.reverseOrder());\n        } else {\n            result.sort(Comparator.naturalOrder());\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/89", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encrypt(String s) {\n        StringBuilder encrypted = new StringBuilder();\n        int shift = 2 * 2; // Shift by 4 places\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                char base = Character.isUpperCase(c) ? 'A' : 'a';\n                char shiftedChar = (char) ((c - base + shift) % 26 + base);\n                encrypted.append(shiftedChar);\n            } else {\n                encrypted.append(c);\n            }\n        }\n        return encrypted.toString();\n    }\n}\n"}
{"task_id": "Java/90", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        if (lst == null || lst.size() < 2) {\n            return Optional.empty();\n        }\n\n        TreeSet<Integer> set = new TreeSet<>(lst);\n        Integer first = set.pollFirst();\n        Integer second = set.pollFirst();\n\n        if (first != null && second != null && !first.equals(second)) {\n            return Optional.of(second);\n        } else if (set.size() > 0) {\n            return Optional.of(set.first());\n        }\n\n        return Optional.empty();\n    }\n}\n"}
{"task_id": "Java/91", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int is_bored(String S) {\n        String[] sentences = S.split(\"[.?!]\");\n        int count = 0;\n        for (String sentence : sentences) {\n            String trimmedSentence = sentence.trim();\n            if (trimmedSentence.startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/92", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean any_int(Object x, Object y, Object z) {\n        // Check if all inputs are integers\n        if (!(x instanceof Integer) || !(y instanceof Integer) || !(z instanceof Integer)) {\n            return false;\n        }\n\n        // Cast objects to integers\n        int a = (Integer) x;\n        int b = (Integer) y;\n        int c = (Integer) z;\n\n        // Check if any number is equal to the sum of the other two\n        return (a == b + c) || (b == a + c) || (c == a + b);\n    }\n}\n"}
{"task_id": "Java/93", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encode(String message) {\n        StringBuilder encodedMessage = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            char encodedChar = c;\n            // Swap case\n            if (Character.isLowerCase(c)) {\n                encodedChar = Character.toUpperCase(c);\n            } else if (Character.isUpperCase(c)) {\n                encodedChar = Character.toLowerCase(c);\n            }\n\n            // Replace vowels\n            if (isVowel(encodedChar)) {\n                encodedChar = replaceVowel(encodedChar);\n            }\n\n            encodedMessage.append(encodedChar);\n        }\n        return encodedMessage.toString();\n    }\n\n    private boolean isVowel(char c) {\n        return \"AEIOUaeiou\".indexOf(c) != -1;\n    }\n\n    private char replaceVowel(char c) {\n        switch (c) {\n            case 'A': return 'C';\n            case 'E': return 'G';\n            case 'I': return 'K';\n            case 'O': return 'Q';\n            case 'U': return 'W';\n            case 'a': return 'c';\n            case 'e': return 'g';\n            case 'i': return 'k';\n            case 'o': return 'q';\n            case 'u': return 'w';\n            default: return c;\n        }\n    }\n}\n"}
{"task_id": "Java/94", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int skjkasdkd(List<Integer> lst) {\n        int maxPrime = Integer.MIN_VALUE;\n\n        // Iterate through the list to find the largest prime number\n        for (int num : lst) {\n            if (isPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n\n        // Calculate the sum of the digits of the largest prime number\n        int sumOfDigits = 0;\n        while (maxPrime > 0) {\n            sumOfDigits += maxPrime % 10;\n            maxPrime /= 10;\n        }\n\n        return sumOfDigits;\n    }\n\n    // Helper method to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        if (num == 2) return true;\n        if (num % 2 == 0) return false;\n        for (int i = 3; i <= Math.sqrt(num); i += 2) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/95", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        boolean allLowerCase = true;\n        boolean allUpperCase = true;\n\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n\n            String strKey = (String) key;\n            if (!strKey.equals(strKey.toLowerCase())) {\n                allLowerCase = false;\n            }\n            if (!strKey.equals(strKey.toUpperCase())) {\n                allUpperCase = false;\n            }\n        }\n\n        return allLowerCase || allUpperCase;\n    }\n}\n"}
{"task_id": "Java/96", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/97", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int multiply(int a, int b) {\n        // Extract the unit digit of both numbers\n        int unitDigitA = Math.abs(a % 10);\n        int unitDigitB = Math.abs(b % 10);\n\n        // Return the product of the unit digits\n        return unitDigitA * unitDigitB;\n    }\n}\n"}
{"task_id": "Java/98", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/99", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int closest_integer(String value) {\n        double num = Double.parseDouble(value);\n        double fractionalPart = num % 1;\n        \n        if (num > 0) {\n            if (fractionalPart < 0.5) {\n                return (int) Math.floor(num);\n            } else if (fractionalPart > 0.5) {\n                return (int) Math.ceil(num);\n            } else {\n                return (int) Math.ceil(num);\n            }\n        } else {\n            if (fractionalPart > -0.5) {\n                return (int) Math.ceil(num);\n            } else if (fractionalPart < -0.5) {\n                return (int) Math.floor(num);\n            } else {\n                return (int) Math.floor(num);\n            }\n        }\n    }\n}\n"}
{"task_id": "Java/100", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        int currentStones = n;\n        for (int i = 0; i < n; i++) {\n            pile.add(currentStones);\n            if (n % 2 == 0) {\n                currentStones += 2; // Next even number\n            } else {\n                currentStones += 2; // Next odd number\n            }\n        }\n        return pile;\n    }\n}\n"}
{"task_id": "Java/101", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> words_string(String s) {\n        // Replace commas with spaces to unify the delimiter\n        String normalizedString = s.replace(',', ' ');\n        // Split the string by spaces\n        String[] wordsArray = normalizedString.split(\"\\\\s+\");\n        // Convert the array to a list and return\n        return Arrays.asList(wordsArray);\n    }\n}\n"}
{"task_id": "Java/102", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int choose_num(int x, int y) {\n        // Ensure x is less than or equal to y\n        if (x > y) {\n            return -1;\n        }\n\n        // Start from the largest number in the range and move downwards\n        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                return i;\n            }\n        }\n\n        // If no even number is found, return -1\n        return -1;\n    }\n}\n"}
{"task_id": "Java/103", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object rounded_avg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        \n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        \n        int count = m - n + 1;\n        int average = Math.round((float) sum / count);\n        \n        return Integer.toBinaryString(average);\n    }\n}\n"}
{"task_id": "Java/104", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> unique_digits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (Integer num : x) {\n            if (hasNoEvenDigit(num)) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        return result;\n    }\n\n    private boolean hasNoEvenDigit(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return false;\n            }\n            num /= 10;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/105", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> by_length(List<Integer> arr) {\n        String[] digitNames = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        List<Integer> filteredAndSorted = arr.stream()\n                                             .filter(num -> num >= 1 && num <= 9)\n                                             .sorted()\n                                             .collect(Collectors.toList());\n        Collections.reverse(filteredAndSorted);\n\n        List<String> result = new ArrayList<>();\n        for (Integer num : filteredAndSorted) {\n            result.add(digitNames[num - 1]);\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/106", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sumToI(i));\n            }\n        }\n        return result;\n    }\n\n    private int factorial(int num) {\n        int result = 1;\n        for (int i = 1; i <= num; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    private int sumToI(int num) {\n        return (num * (num + 1)) / 2;\n    }\n}\n"}
{"task_id": "Java/107", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> even_odd_palindrome(int n) {\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        return Arrays.asList(evenCount, oddCount);\n    }\n\n    private boolean isPalindrome(int number) {\n        String numStr = String.valueOf(number);\n        int left = 0;\n        int right = numStr.length() - 1;\n\n        while (left < right) {\n            if (numStr.charAt(left) != numStr.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/108", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int count_nums(List<Integer> arr) {\n        int count = 0;\n        for (Integer num : arr) {\n            if (sumOfDigits(num) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        boolean isNegative = num < 0;\n        while (num != 0) {\n            int digit = num % 10;\n            if (isNegative && num < 0 && sum == 0) {\n                sum += digit; // Add the first negative digit as is\n            } else {\n                sum += Math.abs(digit); // Add the absolute value of the digit\n            }\n            num /= 10;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/109", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean moveOneBall(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        // Find the index where the array should start to be in non-decreasing order\n        int n = arr.size();\n        int startIndex = -1;\n        for (int i = 0; i < n - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                if (startIndex != -1) {\n                    // More than one place where the order is broken\n                    return false;\n                }\n                startIndex = i + 1;\n            }\n        }\n\n        // If no break in order, the array is already sorted\n        if (startIndex == -1) {\n            return true;\n        }\n\n        // Check if the array is sorted after the identified start index\n        for (int i = startIndex; i < n - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                return false;\n            }\n        }\n\n        // Check if the last element is less than or equal to the first element\n        return arr.get(n - 1) <= arr.get(0);\n    }\n}\n"}
{"task_id": "Java/110", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Count the number of odd elements in lst1\n        long oddCountLst1 = lst1.stream().filter(num -> num % 2 != 0).count();\n        \n        // Count the number of even elements in lst2\n        long evenCountLst2 = lst2.stream().filter(num -> num % 2 == 0).count();\n        \n        // If there are enough even elements in lst2 to replace all odd elements in lst1, return \"YES\"\n        if (oddCountLst1 <= evenCountLst2) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}\n"}
{"task_id": "Java/111", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> frequencyMap = new HashMap<>();\n        String[] letters = test.split(\" \");\n        \n        // Count the frequency of each letter\n        for (String letter : letters) {\n            if (!letter.isEmpty()) {\n                frequencyMap.put(letter, frequencyMap.getOrDefault(letter, 0) + 1);\n            }\n        }\n        \n        // Find the maximum frequency\n        int maxFrequency = 0;\n        for (int freq : frequencyMap.values()) {\n            if (freq > maxFrequency) {\n                maxFrequency = freq;\n            }\n        }\n        \n        // Filter the map to keep only the letters with the maximum frequency\n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : frequencyMap.entrySet()) {\n            if (entry.getValue() == maxFrequency) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/112", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Object> reverse_delete(String s, String c) {\n        StringBuilder result = new StringBuilder();\n        \n        // Remove all characters in s that are present in c\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                result.append(ch);\n            }\n        }\n        \n        String resultStr = result.toString();\n        String reversedStr = result.reverse().toString();\n        \n        // Check if the result string is a palindrome\n        boolean isPalindrome = resultStr.equals(reversedStr);\n        \n        List<Object> output = new ArrayList<>();\n        output.add(resultStr);\n        output.add(isPalindrome);\n        \n        return output;\n    }\n}\n"}
{"task_id": "Java/113", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            int oddCount = 0;\n            for (char c : s.toCharArray()) {\n                if ((c - '0') % 2 != 0) {\n                    oddCount++;\n                }\n            }\n            String formattedString = \"the number of odd elements \" + oddCount + \"n the str\" + oddCount + \"ng \" + oddCount + \" of the \" + oddCount + \"nput.\";\n            result.add(formattedString);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/114", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int minSubArraySum(List<Integer> nums) {\n        if (nums == null || nums.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list cannot be null or empty\");\n        }\n\n        int minSum = nums.get(0);\n        int currentSum = nums.get(0);\n\n        for (int i = 1; i < nums.size(); i++) {\n            currentSum = Math.min(nums.get(i), currentSum + nums.get(i));\n            minSum = Math.min(minSum, currentSum);\n        }\n\n        return minSum;\n    }\n}\n"}
{"task_id": "Java/115", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        int totalDrops = 0;\n        for (List<Integer> well : grid) {\n            int waterUnits = 0;\n            for (int unit : well) {\n                waterUnits += unit;\n            }\n            totalDrops += (int) Math.ceil((double) waterUnits / capacity);\n        }\n        return totalDrops;\n    }\n}\n"}
{"task_id": "Java/116", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> arr) {\n        arr.sort((a, b) -> {\n            int countA = Integer.bitCount(a);\n            int countB = Integer.bitCount(b);\n            if (countA == countB) {\n                return a - b;\n            }\n            return countA - countB;\n        });\n        return arr;\n    }\n}\n"}
{"task_id": "Java/117", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> select_words(String s, int n) {\n        List<String> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n        \n        for (String word : words) {\n            if (countConsonants(word) == n) {\n                result.add(word);\n            }\n        }\n        \n        return result;\n    }\n    \n    private int countConsonants(String word) {\n        int count = 0;\n        for (char c : word.toCharArray()) {\n            if (\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\".indexOf(c) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/118", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String get_closest_vowel(String word) {\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        \n        for (int i = word.length() - 2; i > 0; i--) {\n            if (!vowels.contains(word.charAt(i - 1)) && vowels.contains(word.charAt(i)) && !vowels.contains(word.charAt(i + 1))) {\n                return String.valueOf(word.charAt(i));\n            }\n        }\n        return \"\";\n    }\n}\n"}
{"task_id": "Java/119", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String match_parens(List<String> lst) {\n        String first = lst.get(0);\n        String second = lst.get(1);\n        \n        // Check concatenation in both orders\n        if (isBalanced(first + second) || isBalanced(second + first)) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n\n    private boolean isBalanced(String s) {\n        int balance = 0;\n        for (char c : s.toCharArray()) {\n            if (c == '(') {\n                balance++;\n            } else if (c == ')') {\n                balance--;\n            }\n            if (balance < 0) {\n                return false;\n            }\n        }\n        return balance == 0;\n    }\n}\n"}
{"task_id": "Java/120", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Sort the array in descending order\n        arr.sort(Collections.reverseOrder());\n        \n        // Create a list to store the result\n        List<Integer> result = new ArrayList<>();\n        \n        // Add the first k elements to the result list\n        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n        }\n        \n        // Sort the result list in ascending order\n        result.sort(Collections.naturalOrder());\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/121", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            int num = lst.get(i);\n            if (num % 2 != 0) {\n                sum += num;\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/122", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add_elements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            int num = arr.get(i);\n            if (num >= -99 && num <= 99) {\n                sum += num;\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/123", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> get_odd_collatz(int n) {\n        Set<Integer> oddNumbers = new HashSet<>();\n        \n        while (n != 1) {\n            if (n % 2 == 1) {\n                oddNumbers.add(n);\n            }\n            n = (n % 2 == 0) ? n / 2 : 3 * n + 1;\n        }\n        oddNumbers.add(1); // Always add 1 as it is part of the sequence\n        \n        List<Integer> sortedOddNumbers = new ArrayList<>(oddNumbers);\n        Collections.sort(sortedOddNumbers);\n        \n        return sortedOddNumbers;\n    }\n}\n"}
{"task_id": "Java/124", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean valid_date(String date) {\n        // Check if the date string is empty\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        // Define the date format\n        String dateFormat = \"^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(\\\\d{4})$\";\n\n        // Create a Pattern object\n        Pattern pattern = Pattern.compile(dateFormat);\n\n        // Create a Matcher object\n        Matcher matcher = pattern.matcher(date);\n\n        // Check if the date matches the format\n        if (!matcher.matches()) {\n            return false;\n        }\n\n        // Extract the month, day, and year from the date string\n        String[] parts = date.split(\"-\");\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\n        // Validate the number of days based on the month\n        if (month == 2) {\n            if (day > 29) {\n                return false;\n            }\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30) {\n                return false;\n            }\n        } else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            if (day > 31) {\n                return false;\n            }\n        }\n\n        // If all checks pass, the date is valid\n        return true;\n    }\n}\n"}
{"task_id": "Java/125", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object split_words(String txt) {\n        // Check if there are whitespaces in the string\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        }\n        // Check if there are commas in the string\n        else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        }\n        // If no whitespaces or commas, count the number of lowercase letters with odd order\n        else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && ((c - 'a') % 2 == 1)) {\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n}\n"}
{"task_id": "Java/126", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_sorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        for (int i = 1; i < lst.size(); i++) {\n            // Check if the current element is less than the previous element\n            if (lst.get(i) < lst.get(i - 1)) {\n                return false;\n            }\n\n            // Update the frequency map\n            frequencyMap.put(lst.get(i), frequencyMap.getOrDefault(lst.get(i), 0) + 1);\n\n            // Check if any element appears more than twice\n            if (frequencyMap.get(lst.get(i)) > 2) {\n                return false;\n            }\n        }\n\n        // Check the first element separately\n        frequencyMap.put(lst.get(0), frequencyMap.getOrDefault(lst.get(0), 0) + 1);\n        if (frequencyMap.get(lst.get(0)) > 2) {\n            return false;\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/127", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n\n        // Calculate the intersection\n        int start = Math.max(start1, start2);\n        int end = Math.min(end1, end2);\n\n        // Check if there is no intersection\n        if (start > end) {\n            return \"NO\";\n        }\n\n        // Calculate the length of the intersection\n        int length = end - start + 1;\n\n        // Check if the length is a prime number\n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/128", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int sumOfMagnitudes = 0;\n        int productOfSigns = 1;\n\n        for (int num : arr) {\n            sumOfMagnitudes += Math.abs(num);\n            if (num == 0) {\n                productOfSigns = 0;\n                break;\n            } else if (num < 0) {\n                productOfSigns *= -1;\n            }\n        }\n\n        return Optional.of(sumOfMagnitudes * productOfSigns);\n    }\n}\n"}
{"task_id": "Java/129", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    private static final int[] directions = {0, 1, 0, -1, 0};\n\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int N = grid.size();\n        PriorityQueue<Path> pq = new PriorityQueue<>((a, b) -> {\n            for (int i = 0; i < k; i++) {\n                if (a.path.get(i) != b.path.get(i)) {\n                    return a.path.get(i) - b.path.get(i);\n                }\n            }\n            return 0;\n        });\n\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < N; j++) {\n                pq.offer(new Path(i, j, new ArrayList<>(List.of(grid.get(i).get(j)))));\n            }\n        }\n\n        while (!pq.isEmpty()) {\n            Path current = pq.poll();\n            if (current.path.size() == k) {\n                return current.path;\n            }\n            for (int d = 0; d < 4; d++) {\n                int ni = current.i + directions[d];\n                int nj = current.j + directions[d + 1];\n                if (ni >= 0 && ni < N && nj >= 0 && nj < N) {\n                    List<Integer> newPath = new ArrayList<>(current.path);\n                    newPath.add(grid.get(ni).get(nj));\n                    pq.offer(new Path(ni, nj, newPath));\n                }\n            }\n        }\n\n        return new ArrayList<>();\n    }\n\n    private static class Path {\n        int i, j;\n        List<Integer> path;\n\n        Path(int i, int j, List<Integer> path) {\n            this.i = i;\n            this.j = j;\n            this.path = path;\n        }\n    }\n}\n"}
{"task_id": "Java/130", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n + 1; i++) {\n            result.add(triRecursive(i));\n        }\n        return result;\n    }\n\n    private int triRecursive(int n) {\n        if (n == 1) {\n            return 3;\n        } else if (n % 2 == 0) {\n            return 1 + n / 2;\n        } else {\n            return triRecursive(n - 1) + triRecursive(n - 2) + triRecursive(n + 1);\n        }\n    }\n}\n"}
{"task_id": "Java/131", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digits(int n) {\n        int product = 1;\n        boolean hasOdd = false;\n        \n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n                hasOdd = true;\n            }\n            n /= 10;\n        }\n        \n        return hasOdd ? product : 0;\n    }\n}\n"}
{"task_id": "Java/132", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean is_nested(String string) {\n        Stack<Character> stack = new Stack<>();\n        boolean nestedFound = false;\n\n        for (char ch : string.toCharArray()) {\n            if (ch == '[') {\n                if (!stack.isEmpty()) {\n                    nestedFound = true;\n                }\n                stack.push(ch);\n            } else if (ch == ']') {\n                if (stack.isEmpty()) {\n                    return false; // Unmatched closing bracket\n                }\n                stack.pop();\n            }\n        }\n\n        return nestedFound && stack.isEmpty(); // Ensure all brackets are matched\n    }\n}\n"}
{"task_id": "Java/133", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_squares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            int ceilValue = (int) Math.ceil(num);\n            sum += ceilValue * ceilValue;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/134", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        if (txt == null || txt.isEmpty()) {\n            return false;\n        }\n\n        // Trim the string to remove trailing spaces\n        txt = txt.trim();\n\n        // Check if the last character is a letter and not part of a word\n        char lastChar = txt.charAt(txt.length() - 1);\n        return Character.isLetter(lastChar) && (txt.length() == 1 || !Character.isLetterOrDigit(txt.charAt(txt.length() - 2)));\n    }\n}\n"}
{"task_id": "Java/135", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int can_arrange(List<Integer> arr) {\n        int largestIndex = -1;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                largestIndex = i;\n            }\n        }\n        return largestIndex;\n    }\n}\n"}
{"task_id": "Java/136", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        Optional<Integer> largestNegative = lst.stream()\n                                               .filter(x -> x < 0)\n                                               .max(Integer::compare);\n        Optional<Integer> smallestPositive = lst.stream()\n                                                .filter(x -> x > 0)\n                                                .min(Integer::compare);\n\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n}\n"}
{"task_id": "Java/137", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Object> compare_one(Object a, Object b) {\n        double numA = convertToDouble(a);\n        double numB = convertToDouble(b);\n\n        if (numA == numB) {\n            return Optional.empty();\n        } else if (numA > numB) {\n            return Optional.of(a);\n        } else {\n            return Optional.of(b);\n        }\n    }\n\n    private double convertToDouble(Object value) {\n        if (value instanceof String) {\n            String strValue = (String) value;\n            strValue = strValue.replace(',', '.');\n            return Double.parseDouble(strValue);\n        } else if (value instanceof Integer) {\n            return ((Integer) value).doubleValue();\n        } else if (value instanceof Double) {\n            return (Double) value;\n        } else {\n            throw new IllegalArgumentException(\"Unsupported type\");\n        }\n    }\n}\n"}
{"task_id": "Java/138", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_equal_to_sum_even(int n) {\n        // The smallest sum of 4 positive even numbers is 2 + 2 + 2 + 2 = 8\n        // Any number less than 8 cannot be expressed as the sum of 4 positive even numbers\n        if (n < 8) {\n            return false;\n        }\n        // If n is even and greater than or equal to 8, it can always be expressed as the sum of 4 even numbers\n        return n % 2 == 0;\n    }\n}\n"}
{"task_id": "Java/139", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public long special_factorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    private long factorial(int k) {\n        long fact = 1;\n        for (int i = 1; i <= k; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n}\n"}
{"task_id": "Java/140", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String fix_spaces(String text) {\n        // Replace more than 2 consecutive spaces with \"-\"\n        text = text.replaceAll(\" {3,}\", \"-\");\n        // Replace remaining single spaces with \"_\"\n        text = text.replaceAll(\" \", \"_\");\n        return text;\n    }\n}\n"}
{"task_id": "Java/141", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String file_name_check(String file_name) {\n        // Define the valid extensions\n        Set<String> validExtensions = new HashSet<>(Arrays.asList(\"txt\", \"exe\", \"dll\"));\n        \n        // Split the file name by the dot\n        String[] parts = file_name.split(\"\\\\.\", -1);\n        \n        // Check if there is exactly one dot\n        if (parts.length != 2) {\n            return \"No\";\n        }\n        \n        // Extract the name and extension parts\n        String namePart = parts[0];\n        String extensionPart = parts[1];\n        \n        // Check if the name part starts with a letter and contains no more than three digits\n        if (!Character.isLetter(namePart.charAt(0)) || !namePart.matches(\"[a-zA-Z][a-zA-Z0-9]{0,2}\")) {\n            return \"No\";\n        }\n        \n        // Check if the extension part is valid\n        if (!validExtensions.contains(extensionPart)) {\n            return \"No\";\n        }\n        \n        return \"Yes\";\n    }\n}\n"}
{"task_id": "Java/142", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_squares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/143", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String words_in_sentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n        \n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.append(word).append(\" \");\n            }\n        }\n        \n        if (result.length() > 0) {\n            result.setLength(result.length() - 1); // Remove the trailing space\n        }\n        \n        return result.toString();\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/144", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean simplify(String x, String n) {\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n        \n        long xNumerator = Long.parseLong(xParts[0]);\n        long xDenominator = Long.parseLong(xParts[1]);\n        long nNumerator = Long.parseLong(nParts[0]);\n        long nDenominator = Long.parseLong(nParts[1]);\n        \n        // Simplify the expression x * n\n        long resultNumerator = xNumerator * nNumerator;\n        long resultDenominator = xDenominator * nDenominator;\n        \n        // Check if the result is a whole number\n        return resultNumerator % resultDenominator == 0;\n    }\n}\n"}
{"task_id": "Java/145", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> order_by_points(List<Integer> nums) {\n        nums.sort((a, b) -> {\n            int sumA = sumOfDigits(a);\n            int sumB = sumOfDigits(b);\n            if (sumA != sumB) {\n                return Integer.compare(sumA, sumB);\n            } else {\n                return Integer.compare(nums.indexOf(a), nums.indexOf(b));\n            }\n        });\n        return nums;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        boolean isNegative = num < 0;\n        while (num != 0) {\n            int digit = num % 10;\n            if (isNegative && num < 0 && sum == 0) {\n                digit *= -1;\n            }\n            sum += digit;\n            num /= 10;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/146", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (Integer num : nums) {\n            if (num > 10 && isFirstAndLastDigitOdd(num)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isFirstAndLastDigitOdd(int num) {\n        String numStr = String.valueOf(Math.abs(num));\n        int firstDigit = Character.getNumericValue(numStr.charAt(0));\n        int lastDigit = Character.getNumericValue(numStr.charAt(numStr.length() - 1));\n        return firstDigit % 2 != 0 && lastDigit % 2 != 0;\n    }\n}\n"}
{"task_id": "Java/147", "generation": "import java.util.*;\n\nclass Solution {\n    public int get_max_triples(int n) {\n        int[] a = new int[n];\n        for (int i = 1; i <= n; i++) {\n            a[i - 1] = i * i - i + 1;\n        }\n\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/148", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    private static final List<String> PLANETS = Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    );\n\n    public List<String> bf(String planet1, String planet2) {\n        if (!PLANETS.contains(planet1) || !PLANETS.contains(planet2)) {\n            return Collections.emptyList();\n        }\n\n        int index1 = PLANETS.indexOf(planet1);\n        int index2 = PLANETS.indexOf(planet2);\n\n        if (index1 > index2) {\n            // Ensure index1 is always less than index2\n            int temp = index1;\n            index1 = index2;\n            index2 = temp;\n        }\n\n        List<String> result = new ArrayList<>();\n        for (int i = index1 + 1; i < index2; i++) {\n            result.add(PLANETS.get(i));\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/149", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> sorted_list_sum(List<String> lst) {\n        // Remove strings with odd lengths\n        lst.removeIf(s -> s.length() % 2 != 0);\n        \n        // Sort the list first by length, then alphabetically\n        lst.sort((a, b) -> {\n            if (a.length() != b.length()) {\n                return a.length() - b.length();\n            } else {\n                return a.compareTo(b);\n            }\n        });\n        \n        return lst;\n    }\n}\n"}
{"task_id": "Java/150", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int x_or_y(int n, int x, int y) {\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/151", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int double_the_difference(List<Object> lst) {\n        int sumOfSquares = 0;\n        for (Object item : lst) {\n            if (item instanceof Integer) {\n                int num = (Integer) item;\n                if (num > 0 && num % 2 != 0) {\n                    sumOfSquares += num * num;\n                }\n            }\n        }\n        return sumOfSquares;\n    }\n}\n"}
{"task_id": "Java/152", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> differences = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            differences.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return differences;\n    }\n}\n"}
{"task_id": "Java/153", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        String strongestExtension = \"\";\n        int maxStrength = Integer.MIN_VALUE;\n\n        for (String extension : extensions) {\n            int cap = 0, sm = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n                } else if (Character.isLowerCase(c)) {\n                    sm++;\n                }\n            }\n            int strength = cap - sm;\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return class_name + \".\" + strongestExtension;\n    }\n}\n"}
{"task_id": "Java/154", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean cycpattern_check(String a, String b) {\n        // Concatenate string a with itself to handle rotations\n        String doubledA = a + a;\n        // Check if b is a substring of the concatenated string\n        return doubledA.contains(b);\n    }\n}\n"}
{"task_id": "Java/155", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> even_odd_count(int num) {\n        num = Math.abs(num); // Ensure the number is positive\n        int evenCount = 0, oddCount = 0;\n\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num /= 10;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n}\n"}
{"task_id": "Java/156", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String int_to_mini_roman(int number) {\n        LinkedHashMap<Integer, String> romanMap = new LinkedHashMap<>();\n        romanMap.put(1000, \"m\");\n        romanMap.put(900, \"cm\");\n        romanMap.put(500, \"d\");\n        romanMap.put(400, \"cd\");\n        romanMap.put(100, \"c\");\n        romanMap.put(90, \"xc\");\n        romanMap.put(50, \"l\");\n        romanMap.put(40, \"xl\");\n        romanMap.put(10, \"x\");\n        romanMap.put(9, \"ix\");\n        romanMap.put(5, \"v\");\n        romanMap.put(4, \"iv\");\n        romanMap.put(1, \"i\");\n\n        StringBuilder roman = new StringBuilder();\n\n        for (Map.Entry<Integer, String> entry : romanMap.entrySet()) {\n            while (number >= entry.getKey()) {\n                roman.append(entry.getValue());\n                number -= entry.getKey();\n            }\n        }\n\n        return roman.toString();\n    }\n}\n"}
{"task_id": "Java/157", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean right_angle_triangle(int a, int b, int c) {\n        // Sort the sides to ensure c is the longest side\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        \n        // Check if the square of the longest side is equal to the sum of the squares of the other two sides\n        return Math.pow(sides[2], 2) == Math.pow(sides[0], 2) + Math.pow(sides[1], 2);\n    }\n}\n"}
{"task_id": "Java/158", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String find_max(List<String> words) {\n        String maxWord = \"\";\n        int maxUniqueChars = 0;\n\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n\n            int currentUniqueChars = uniqueChars.size();\n            if (currentUniqueChars > maxUniqueChars || (currentUniqueChars == maxUniqueChars && word.compareTo(maxWord) < 0)) {\n                maxWord = word;\n                maxUniqueChars = currentUniqueChars;\n            }\n        }\n\n        return maxWord;\n    }\n}\n"}
{"task_id": "Java/159", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> eat(int number, int need, int remaining) {\n        int totalEaten = number + Math.min(need, remaining);\n        int carrotsLeft = Math.max(remaining - need, 0);\n        return Arrays.asList(totalEaten, carrotsLeft);\n    }\n}\n"}
{"task_id": "Java/160", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        Deque<Integer> stack = new ArrayDeque<>();\n        \n        // Push the first operand onto the stack\n        stack.push(operand.get(0));\n        \n        // Iterate through the operators and operands\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int nextOperand = operand.get(i + 1);\n            \n            switch (op) {\n                case \"+\":\n                    stack.push(stack.pop() + nextOperand);\n                    break;\n                case \"-\":\n                    stack.push(stack.pop() - nextOperand);\n                    break;\n                case \"*\":\n                    stack.push(stack.pop() * nextOperand);\n                    break;\n                case \"/\":\n                    stack.push(stack.pop() / nextOperand);\n                    break;\n                case \"**\":\n                    stack.push((int) Math.pow(stack.pop(), nextOperand));\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Unsupported operation: \" + op);\n            }\n        }\n        \n        return stack.pop();\n    }\n}\n"}
{"task_id": "Java/161", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(String s) {\n        boolean hasLetters = false;\n        StringBuilder result = new StringBuilder();\n\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                hasLetters = true;\n                if (Character.isLowerCase(c)) {\n                    result.append(Character.toUpperCase(c));\n                } else {\n                    result.append(Character.toLowerCase(c));\n                }\n            } else {\n                result.append(c);\n            }\n        }\n\n        if (!hasLetters) {\n            result = new StringBuilder(result.toString()).reverse();\n        }\n\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/162", "generation": "import java.math.BigInteger;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Optional;\n\nclass Solution {\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] messageDigest = md.digest(text.getBytes());\n        BigInteger no = new BigInteger(1, messageDigest);\n        String hashtext = no.toString(16);\n\n        // Add leading zeros to make it 32 characters long\n        while (hashtext.length() < 32) {\n            hashtext = \"0\" + hashtext;\n        }\n\n        return Optional.of(hashtext);\n    }\n}\n"}
{"task_id": "Java/163", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> generate_integers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        int start = Math.min(a, b);\n        int end = Math.max(a, b);\n\n        for (int i = start; i <= end; i++) {\n            if (i % 2 == 0 && i < 10) {\n                result.add(i);\n            }\n        }\n\n        return result;\n    }\n}\n"}
