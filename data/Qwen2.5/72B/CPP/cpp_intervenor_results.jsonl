{"task_id": "CPP/10", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\nusing namespace std;\n\nbool is_palindrome(const string& str) {\n    // Test if the given string is a palindrome\n    string reversed_str(str.rbegin(), str.rend());\n    return str == reversed_str;\n}\n\nstring make_palindrome(const string& str) {\n    int n = str.length();\n    for (int i = 0; i < n; ++i) {\n        // Check if the suffix starting from index i is a palindrome\n        if (is_palindrome(str.substr(i))) {\n            // If it is, append the reverse of the prefix (from 0 to i-1) to the end\n            string prefix = str.substr(0, i);\n            reverse(prefix.begin(), prefix.end());\n            return str + prefix;\n        }\n    }\n    // If no palindromic suffix is found, the entire string is already a palindrome\n    return str;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (make_palindrome(\"\") == \"\");\n    assert (make_palindrome(\"x\") == \"x\");\n     assert (make_palindrome(\"xyz\") == \"xyzyx\");\n     assert (make_palindrome(\"xyx\") == \"xyx\") ;\n     assert (make_palindrome(\"jerry\") == \"jerryrrej\");\n}\n\n\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/6", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<int> parse_nested_parens(string paren_string) {\n    vector<int> result;\n    stringstream ss(paren_string);\n    string group;\n\n    while (getline(ss, group, ' ')) {\n        int max_depth = 0;\n        int current_depth = 0;\n\n        for (char c : group) {\n            if (c == '(') {\n                current_depth++;\n                max_depth = max(max_depth, current_depth);\n            } else if (c == ')') {\n                current_depth--;\n            }\n        }\n\n        result.push_back(max_depth);\n    }\n\n    return result;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_nested_parens(\"(()()) ((())) () ((())()())\"),{2, 3, 1, 3}));\n     assert (issame(parse_nested_parens(\"() (()) ((())) (((())))\") , {1, 2, 3, 4}));\n    assert (issame(parse_nested_parens(\"(()(())((())))\") ,{4}));\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/3", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nbool below_zero(const vector<int>& operations) {\n    int balance = 0; // Start with zero balance\n\n    for (int op : operations) {\n        balance += op; // Update the balance with each operation\n        if (balance < 0) {\n            return true; // Return true if balance falls below zero\n        }\n    }\n\n    return false; // Return false if balance never falls below zero\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_zero({}) == false);\n    assert (below_zero({1, 2, -3, 1, 2, -3}) == false);\n    assert (below_zero({1, 2, -4, 5, 6}) == true);\n    assert (below_zero({1, -1, 2, -2, 5, -5, 4, -4}) == false);\n    assert (below_zero({1, -1, 2, -2, 5, -5, 4, -5}) == true);\n    assert (below_zero({1, -2, 2, -2, 5, -5, 4, -4}) == true);\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/14", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> all_prefixes(const string& str) {\n    vector<string> prefixes;\n    for (size_t i = 1; i <= str.size(); ++i) {\n        prefixes.push_back(str.substr(0, i));\n    }\n    return prefixes;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(all_prefixes(\"\"),{}));\n    assert (issame(all_prefixes(\"asdfgh\") ,{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}));\n     assert (issame(all_prefixes(\"WWW\") ,{\"W\", \"WW\", \"WWW\"}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/5", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <vector>\nusing namespace std;\n\nvector<int> intersperse(vector<int> numbers, int delimiter) {\n    // If the input vector is empty or has only one element, return it as is.\n    if (numbers.size() <= 1) {\n        return numbers;\n    }\n\n    vector<int> result;\n    // Iterate through the input vector and insert the delimiter between elements.\n    for (size_t i = 0; i < numbers.size() - 1; ++i) {\n        result.push_back(numbers[i]);\n        result.push_back(delimiter);\n    }\n    // Add the last element without a following delimiter.\n    result.push_back(numbers.back());\n\n    return result;\n}\n\n// Example usage\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(intersperse({}, 7), {}));\n    \n    assert (issame(intersperse({5, 6, 3, 2}, 8),{5, 8, 6, 8, 3, 8, 2}));\n    assert (issame(intersperse({2, 2, 2}, 2),{2, 2, 2, 2, 2}));\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/1", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <string>\n#include <stack>\nusing namespace std;\n\nvector<string> separate_paren_groups(string paren_string) {\n    // Remove spaces from the input string\n    paren_string.erase(remove(paren_string.begin(), paren_string.end(), ' '), paren_string.end());\n\n    vector<string> result;\n    stack<char> s;\n    string temp = \"\";\n\n    for (char c : paren_string) {\n        if (c == '(') {\n            s.push(c);\n            temp += c;\n        } else if (c == ')') {\n            s.pop();\n            temp += c;\n            if (s.empty()) {\n                result.push_back(temp);\n                temp = \"\";\n            }\n        }\n    }\n\n    return result;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){  \n    assert (issame(separate_paren_groups(\"(()()) ((())) () ((())()())\"),{\"(()())\", \"((()))\", \"()\", \"((())()())\"}));\n    assert (issame(separate_paren_groups(\"() (()) ((())) (((())))\"), {\"()\", \"(())\", \"((()))\", \"(((())))\" }));\n    assert (issame(separate_paren_groups(\"(()(())((())))\") ,{ \"(()(())((())))\" }));\n    assert (issame(separate_paren_groups(\"( ) (( )) (( )( ))\") ,{\"()\", \"(())\", \"(()())\"}));\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/13", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\nusing namespace std;\n\nint greatest_common_divisor(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (greatest_common_divisor(3, 7) == 1);\n     assert (greatest_common_divisor(10, 15) == 5);\n      assert (greatest_common_divisor(49, 14) == 7);\n     assert (greatest_common_divisor(144, 60) == 12);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/4", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <numeric> // for std::accumulate\n\nusing namespace std;\n\nfloat mean_absolute_deviation(vector<float> numbers) {\n    if (numbers.empty()) return 0.0f; // Handle empty vector case\n\n    // Step 1: Calculate the mean of the dataset\n    float sum = accumulate(numbers.begin(), numbers.end(), 0.0f);\n    float mean = sum / numbers.size();\n\n    // Step 2: Compute the absolute differences between each element and the mean\n    float total_abs_diff = 0.0f;\n    for (float num : numbers) {\n        total_abs_diff += abs(num - mean);\n    }\n\n    // Step 3: Calculate the average of these absolute differences\n    float mad = total_abs_diff / numbers.size();\n\n    return mad;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0}) - 2.0/3.0) < 1e-4);\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0}) - 1.0) < 1e-4);\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0, 5.0}) - 6.0/5.0) < 1e-4);\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/2", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nfloat truncate_number(float number) {\n    // Extract the integer part of the number\n    int integer_part = static_cast<int>(number);\n    \n    // Subtract the integer part from the original number to get the decimal part\n    float decimal_part = number - integer_part;\n    \n    return decimal_part;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n assert (truncate_number(3.5) == 0.5); \n assert (abs(truncate_number(1.33) - 0.33) < 1e-4);\n  assert (abs(truncate_number(123.456) - 0.456) < 1e-4);\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/9", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<int> rolling_max(const vector<int>& numbers) {\n    vector<int> result;\n    if (numbers.empty()) return result; // Handle empty input\n\n    int current_max = numbers[0];\n    for (int num : numbers) {\n        if (num > current_max) {\n            current_max = num;\n        }\n        result.push_back(current_max);\n    }\n\n    return result;\n}\n\n// Function to test the rolling_max function\nvoid test_rolling_max() {\n    vector<int> input = {1, 2, 3, 2, 3, 4, 2};\n    vector<int> expected_output = {1, 2, 3, 3, 3, 4, 4};\n    vector<int> output = rolling_max(input);\n\n    if (output == expected_output) {\n        cout << \"Test passed.\" << endl;\n    } else {\n        cout << \"Test failed.\" << endl;\n    }\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(rolling_max({}),{}));\n    assert (issame(rolling_max({1, 2, 3, 4}) , {1, 2, 3, 4}));\n     assert (issame(rolling_max({4, 3, 2, 1}),{4, 4, 4, 4}));\n      assert (issame(rolling_max({3, 2, 3, 100, 3}) ,{3, 3, 3, 100, 100}));\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/11", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\nusing namespace std;\n\nstring string_xor(string a, string b) {\n    string result = \"\";\n    // Ensure both strings are of the same length\n    if (a.length() != b.length()) {\n        return \"Error: Strings must be of the same length\";\n    }\n\n    // Perform XOR operation for each bit\n    for (size_t i = 0; i < a.length(); ++i) {\n        // XOR the bits and append to the result string\n        if (a[i] == b[i]) {\n            result += '0';\n        } else {\n            result += '1';\n        }\n    }\n\n    return result;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_xor(\"111000\", \"101010\") == \"010010\");\n     assert (string_xor(\"1\", \"1\") == \"0\");\n    assert (string_xor(\"0101\", \"0000\") == \"0101\");\n\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/7", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> filter_by_substring(vector<string> strings, string substring) {\n    vector<string> filtered_strings;\n    for (const auto& str : strings) {\n        // Check if the current string contains the substring\n        if (str.find(substring) != string::npos) {\n            filtered_strings.push_back(str);\n        }\n    }\n    return filtered_strings;\n}\n\n// Function to test the filter_by_substring function\nvoid test_filter_by_substring() {\n    vector<string> test1 = {};\n    vector<string> result1 = filter_by_substring(test1, \"a\");\n    cout << \"Test 1: \";\n    for (const auto& str : result1) {\n        cout << str << \" \";\n    }\n    cout << endl;\n\n    vector<string> test2 = {\"abc\", \"bacd\", \"cde\", \"vector\"};\n    vector<string> result2 = filter_by_substring(test2, \"a\");\n    cout << \"Test 2: \";\n    for (const auto& str : result2) {\n        cout << str << \" \";\n    }\n    cout << endl;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_substring({}, \"john\"),{}));\n     assert (issame(filter_by_substring({\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), {\"xxx\", \"xxxAAA\", \"xxx\"}));\n    assert (issame(filter_by_substring({\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"),{\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"}));\n     assert (issame(filter_by_substring({\"grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\") ,{\"grunt\", \"prune\"}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/8", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvector<int> sum_product(const vector<int>& numbers) {\n    int sum = 0;\n    int product = 1;\n\n    for (int num : numbers) {\n        sum += num;\n        product *= num;\n    }\n\n    return {sum, product};\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sum_product({}) ,{0, 1}));\n    assert (issame(sum_product({1, 1, 1}), {3, 1}));\n    assert (issame(sum_product({100, 0}),{100, 0}));\n     assert (issame(sum_product({3, 5, 7}) , {3 + 5 + 7, 3 * 5 * 7}));\n      assert (issame(sum_product({10}) ,{10, 10}));\n}\n\n\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/0", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <algorithm> // for sort\n\nusing namespace std;\n\nbool has_close_elements(vector<float> numbers, float threshold) {\n    // Sort the vector\n    sort(numbers.begin(), numbers.end());\n    \n    // Check the difference between consecutive elements\n    for (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] - numbers[i - 1] < threshold) {\n            return true;\n        }\n    }\n    \n    return false;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    vector<float> a={1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    assert (has_close_elements(a, 0.3)==true);\n    assert (has_close_elements(a, 0.05) == false);\n\n    assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95) == true);\n    assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8) ==false);\n    assert (has_close_elements({1.0, 2.0, 3.0, 4.0, 5.0}, 2.0) == true);\n    assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0) == true);\n    assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5) == false);\n    \n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/12", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring longest(vector<string> strings) {\n    if (strings.empty()) {\n        return \"\"; // Return an empty string if the input vector is empty\n    }\n\n    string longest_str = strings[0]; // Initialize with the first string\n\n    for (const string& str : strings) {\n        if (str.length() > longest_str.length()) {\n            longest_str = str; // Update the longest string if a longer one is found\n        }\n    }\n\n    return longest_str;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (longest({}) == \"\");\n    assert (longest({\"x\", \"y\", \"z\"}) == \"x\");\n    assert (longest({\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"}) == \"zzzz\");\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/15", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <sstream> // For std::ostringstream\n\nstring string_sequence(int n) {\n    std::ostringstream oss;\n    for (int i = 0; i <= n; ++i) {\n        if (i > 0) {\n            oss << \" \"; // Add a space before each number except the first one\n        }\n        oss << i;\n    }\n    return oss.str();\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_sequence(0) == \"0\");\n    assert (string_sequence(3) == \"0 1 2 3\");\n     assert (string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/16", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <set>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nint count_distinct_characters(string str) {\n    // Convert the string to lowercase to make the comparison case-insensitive\n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    \n    // Use a set to store unique characters\n    set<char> unique_chars(str.begin(), str.end());\n    \n    // The size of the set is the number of distinct characters\n    return unique_chars.size();\n}\n\n// Function to test the solution\nvoid test() {\n    cout << count_distinct_characters(\"xyzXYZ\") << endl; // Output: 3\n    cout << count_distinct_characters(\"Jerry\") << endl;  // Output: 4\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_distinct_characters(\"\") == 0);\n    assert (count_distinct_characters(\"abcde\") == 5);\n    assert (count_distinct_characters(\"abcdecadeCADE\") == 5);\n    assert (count_distinct_characters(\"aaaaAAAAaaaa\") == 1);\n    assert (count_distinct_characters(\"Jerry jERRY JeRRRY\") == 5);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/18", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\nusing namespace std;\n\nint how_many_times(const string& str, const string& substring) {\n    if (substring.empty()) return 0; // If the substring is empty, return 0\n\n    int count = 0;\n    size_t pos = 0;\n\n    // Loop through the string to find all occurrences of the substring\n    while ((pos = str.find(substring, pos)) != string::npos) {\n        count++;\n        pos++; // Move to the next character to allow for overlapping matches\n    }\n\n    return count;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (how_many_times(\"\", \"x\") == 0);\n    assert (how_many_times(\"xyxyxyx\", \"x\") == 4);\n     assert (how_many_times(\"cacacacac\", \"cac\") == 4);\n    assert (how_many_times(\"john doe\", \"john\") == 1);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/19", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <sstream>\n#include <vector>\n#include <map>\n#include <algorithm>\nusing namespace std;\n\n// Function to sort the numbers represented as words\nstring sort_numbers(string numbers) {\n    // Map to associate each word with its numerical value\n    map<string, int> number_map = {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n\n    // Vector to store the numerical values\n    vector<int> nums;\n\n    // Convert the input string into a stream\n    stringstream ss(numbers);\n    string word;\n\n    // Read each word and convert it to its numerical value\n    while (ss >> word) {\n        nums.push_back(number_map[word]);\n    }\n\n    // Sort the numerical values\n    sort(nums.begin(), nums.end());\n\n    // Convert the sorted numerical values back to words\n    string result;\n    for (int num : nums) {\n        for (const auto& pair : number_map) {\n            if (pair.second == num) {\n                result += pair.first + \" \";\n                break;\n            }\n        }\n    }\n\n    // Remove the trailing space\n    if (!result.empty()) {\n        result.pop_back();\n    }\n\n    return result;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sort_numbers(\"\") == \"\");\n    assert (sort_numbers(\"three\") == \"three\");\n    assert (sort_numbers(\"three five nine\") == \"three five nine\");\n     assert (sort_numbers(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n      assert (sort_numbers(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/24", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\nusing namespace std;\n\nint largest_divisor(int n) {\n    // Start from n-1 and go down to 1\n    for (int i = n - 1; i > 0; --i) {\n        if (n % i == 0) {\n            return i; // Found the largest divisor\n        }\n    }\n    return 1; // If no divisor is found, return 1 (though this case should not occur for n > 1)\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_divisor(3) == 1);\n    assert (largest_divisor(7) == 1);\n    assert (largest_divisor(10) == 5);\n    assert (largest_divisor(100) == 50);\n    assert (largest_divisor(49) == 7);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/17", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <vector>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<int> parse_music(string music_string) {\n    vector<int> beats;\n    stringstream ss(music_string);\n    string note;\n\n    while (getline(ss, note, ' ')) {\n        if (note == \"o\") {\n            beats.push_back(4); // Whole note\n        } else if (note == \"o|\") {\n            beats.push_back(2); // Half note\n        } else if (note == \".|\") {\n            beats.push_back(1); // Quarter note\n        }\n    }\n\n    return beats;\n}\n\n// Example usage\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_music(\"\") , {}));\n     assert (issame(parse_music(\"o o o o\") ,{4, 4, 4, 4}));\n      assert (issame(parse_music(\".| .| .| .|\") , {1, 1, 1, 1}));\n assert (issame(parse_music(\"o| o| .| .| o o o o\") , {2, 2, 1, 1, 4, 4, 4, 4}));\n  assert (issame(parse_music(\"o| .| o| .| o o| o o|\") , {2, 1, 2, 1, 4, 2, 4, 2}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/21", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<float> rescale_to_unit(vector<float> numbers) {\n    if (numbers.size() < 2) {\n        throw invalid_argument(\"Vector must contain at least two elements.\");\n    }\n\n    // Find the minimum and maximum values in the vector\n    float min_val = *min_element(numbers.begin(), numbers.end());\n    float max_val = *max_element(numbers.begin(), numbers.end());\n\n    // Compute the range\n    float range = max_val - min_val;\n\n    // Apply the linear transformation\n    vector<float> rescaled_numbers;\n    for (float num : numbers) {\n        rescaled_numbers.push_back((num - min_val) / range);\n    }\n\n    return rescaled_numbers;\n}\n\n// Function to print the vector\nvoid print_vector(const vector<float>& vec) {\n    for (float val : vec) {\n        cout << val << \" \";\n    }\n    cout << endl;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(rescale_to_unit({2.0, 49.9}) , {0.0, 1.0}));\n     assert (issame(rescale_to_unit({100.0, 49.9}) ,{1.0, 0.0})); \n     assert (issame(rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0}) , {0.0, 0.25, 0.5, 0.75, 1.0}));\n    assert (issame(rescale_to_unit({2.0, 1.0, 5.0, 3.0, 4.0}) , {0.25, 0.0, 1.0, 0.5, 0.75}));\n     assert (issame(rescale_to_unit({12.0, 11.0, 15.0, 13.0, 14.0}) ,{0.25, 0.0, 1.0, 0.5, 0.75}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/20", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\nvector<float> find_closest_elements(vector<float> numbers) {\n    // Ensure the vector has at least two elements\n    if (numbers.size() < 2) {\n        throw invalid_argument(\"The vector must contain at least two elements.\");\n    }\n\n    // Sort the vector\n    sort(numbers.begin(), numbers.end());\n\n    // Initialize variables to store the closest pair and the minimum difference\n    float min_diff = numeric_limits<float>::max();\n    vector<float> closest_pair(2);\n\n    // Iterate through the sorted vector to find the closest pair\n    for (size_t i = 0; i < numbers.size() - 1; ++i) {\n        float diff = abs(numbers[i] - numbers[i + 1]);\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair[0] = numbers[i];\n            closest_pair[1] = numbers[i + 1];\n        }\n    }\n\n    return closest_pair;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(find_closest_elements({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}) , {3.9, 4.0}));\n    assert (issame(find_closest_elements({1.0, 2.0, 5.9, 4.0, 5.0}) , {5.0, 5.9} ));\n    assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}) ,{2.0, 2.2}));\n     assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}) ,{2.0, 2.0}));\n      assert (issame(find_closest_elements({1.1, 2.2, 3.1, 4.1, 5.1}) , {2.2, 3.1}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/28", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring concatenate(const vector<string>& strings) {\n    string result;\n    for (const auto& str : strings) {\n        result += str;\n    }\n    return result;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (concatenate({}) == \"\");\n     assert (concatenate({\"x\", \"y\", \"z\"}) == \"xyz\");\n    assert (concatenate({\"x\", \"y\", \"z\", \"w\", \"k\"}) == \"xyzwk\");\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/26", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nvector<int> remove_duplicates(vector<int> numbers) {\n    // Create an unordered_map to count occurrences of each number\n    unordered_map<int, int> count;\n    for (int num : numbers) {\n        count[num]++;\n    }\n\n    // Create a new vector to store the result\n    vector<int> result;\n    for (int num : numbers) {\n        // Add the number to the result if it occurs exactly once\n        if (count[num] == 1) {\n            result.push_back(num);\n        }\n    }\n\n    return result;\n}\n\n// Function to test the remove_duplicates function\nvoid test_remove_duplicates() {\n    vector<int> input = {1, 2, 3, 2, 4};\n    vector<int> expected_output = {1, 3, 4};\n    vector<int> output = remove_duplicates(input);\n\n    // Check if the output matches the expected output\n    if (output == expected_output) {\n        cout << \"Test passed.\" << endl;\n    } else {\n        cout << \"Test failed.\" << endl;\n    }\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(remove_duplicates({}) , {}));\n     assert (issame(remove_duplicates({1, 2, 3, 4}) , {1, 2, 3, 4}));\n      assert (issame(remove_duplicates({1, 2, 3, 2, 4, 3, 5}) , {1, 4, 5}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/25", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<int> factorize(int n) {\n    vector<int> factors;\n    // Check for number of 2s in n\n    while (n % 2 == 0) {\n        factors.push_back(2);\n        n = n / 2;\n    }\n    // n must be odd at this point, so we can skip one element (Note i = i + 2)\n    for (int i = 3; i * i <= n; i += 2) {\n        // While i divides n, append i and divide n\n        while (n % i == 0) {\n            factors.push_back(i);\n            n = n / i;\n        }\n    }\n    // This condition is to check if n is a prime number greater than 2\n    if (n > 2) {\n        factors.push_back(n);\n    }\n    return factors;\n}\n\n// Function to print the vector\nvoid printFactors(const vector<int>& factors) {\n    cout << \"{\";\n    for (size_t i = 0; i < factors.size(); ++i) {\n        cout << factors[i];\n        if (i != factors.size() - 1) {\n            cout << \", \";\n        }\n    }\n    cout << \"}\" << endl;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(factorize(2) , {2}));\n    assert (issame(factorize(4) , {2, 2}));\n    assert (issame(factorize(8) , {2, 2, 2}));\n     assert (issame(factorize(3 * 19) , {3, 19}));\n    assert (issame(factorize(3 * 19 * 3 * 19) , {3, 3, 19, 19})); \n    assert (issame(factorize(3 * 19 * 3 * 19 * 3 * 19) , {3, 3, 3, 19, 19, 19})); \n    assert (issame(factorize(3 * 19 * 19 * 19) , {3, 19, 19, 19})); \n    assert (issame(factorize(3 * 2 * 3) , {2, 3, 3}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/27", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\nusing namespace std;\n\nstring flip_case(string str) {\n    for (char &c : str) {\n        if (islower(c)) {\n            c = toupper(c);\n        } else if (isupper(c)) {\n            c = tolower(c);\n        }\n    }\n    return str;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (flip_case(\"\") == \"\");\n    assert (flip_case(\"Hello!\") == \"hELLO!\");\n    assert (flip_case(\"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/23", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <iostream>\n#include <string>\n\n// Function to return the length of a given string\nint string_length(const std::string& str) {\n    return str.size();  // or str.length()\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (strlen(\"\") == 0);\n    assert (strlen(\"x\") == 1);\n     assert (strlen(\"asdasnakj\") == 9);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/22", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <iostream>\n#include <vector>\n#include <string>\n#include <boost/any.hpp>\n#include <list>\n\ntypedef std::list<boost::any> list_any;\n\nstd::vector<int> filter_integers(const list_any& values) {\n    std::vector<int> result;\n    for (const auto& value : values) {\n        if (value.type() == typeid(int)) {\n            result.push_back(boost::any_cast<int>(value));\n        }\n    }\n    return result;\n}\n\n// Function to test the filter_integers function\nvoid test_filter_integers() {\n    list_any test1 = {\"a\", 3.14, 5};\n    list_any test2 = {1, 2, 3, \"abc\", {}, {}};\n\n    std::vector<int> result1 = filter_integers(test1);\n    std::vector<int> expected1 = {5};\n    assert(result1 == expected1);\n\n    std::vector<int> result2 = filter_integers(test2);\n    std::vector<int> expected2 = {1, 2, 3};\n    assert(result2 == expected2);\n\n    std::cout << \"All tests passed!\" << std::endl;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_integers({}),{}));\n\n    assert (issame(filter_integers({4,  {},23.2, 9, string(\"adasd\")}) ,{4, 9}));\n    assert (issame(filter_integers({3, 'c', 3, 3, 'a', 'b'}) ,{3, 3, 3}));\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/29", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> filter_by_prefix(vector<string> strings, string prefix) {\n    vector<string> filtered_strings;\n    for (const auto& str : strings) {\n        if (str.substr(0, prefix.length()) == prefix) {\n            filtered_strings.push_back(str);\n        }\n    }\n    return filtered_strings;\n}\n\n// Function to test the filter_by_prefix function\nvoid test_filter_by_prefix() {\n    vector<string> test1 = {};\n    vector<string> result1 = filter_by_prefix(test1, \"a\");\n    cout << \"Test 1: \";\n    for (const auto& str : result1) {\n        cout << str << \" \";\n    }\n    cout << endl;\n\n    vector<string> test2 = {\"abc\", \"bcd\", \"cde\", \"vector\"};\n    vector<string> result2 = filter_by_prefix(test2, \"a\");\n    cout << \"Test 2: \";\n    for (const auto& str : result2) {\n        cout << str << \" \";\n    }\n    cout << endl;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_prefix({}, \"john\") , {}));\n    assert (issame(filter_by_prefix({\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\") , {\"xxx\", \"xxxAAA\", \"xxx\"}));\n\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/32", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <limits>\n\nusing namespace std;\n\ndouble poly(const vector<double>& xs, double x) {\n    double sum = 0;\n    for (size_t i = 0; i < xs.size(); ++i) {\n        sum += xs[i] * pow(x, i);\n    }\n    return sum;\n}\n\ndouble poly_derivative(const vector<double>& xs, double x) {\n    double sum = 0;\n    for (size_t i = 1; i < xs.size(); ++i) {\n        sum += i * xs[i] * pow(x, i - 1);\n    }\n    return sum;\n}\n\ndouble find_zero(const vector<double>& xs) {\n    // Initial guess\n    double x = 0.0;\n    double epsilon = 1e-10; // Tolerance for convergence\n    int max_iterations = 1000; // Maximum number of iterations\n\n    for (int i = 0; i < max_iterations; ++i) {\n        double f_x = poly(xs, x);\n        double f_prime_x = poly_derivative(xs, x);\n\n        if (fabs(f_prime_x) < epsilon) {\n            // Avoid division by zero\n            break;\n        }\n\n        double next_x = x - f_x / f_prime_x;\n\n        if (fabs(next_x - x) < epsilon) {\n            return next_x;\n        }\n\n        x = next_x;\n    }\n\n    // If no convergence within max_iterations, return the last value of x\n    return x;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n   \n    double solution;\n    int ncoeff;\n    for (int i=0;i<100;i++)\n    {\n        ncoeff = 2 * (1+rand()%4);\n        vector<double> coeffs = {};\n        for (int j=0;j<ncoeff;j++)\n        {\n            double coeff = -10+rand()%21;\n            if (coeff == 0) coeff = 1;\n            coeffs.push_back(coeff);\n        }\n        \n        solution = find_zero(coeffs);\n        assert (abs(poly(coeffs, solution))< 1e-3);\n    }\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/33", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> sort_third(vector<int> l) {\n    // Step 1: Extract elements at indices divisible by three\n    vector<int> to_sort;\n    for (int i = 2; i < l.size(); i += 3) {\n        to_sort.push_back(l[i]);\n    }\n\n    // Step 2: Sort the extracted elements\n    sort(to_sort.begin(), to_sort.end());\n\n    // Step 3: Place the sorted elements back into their original positions\n    int sort_index = 0;\n    for (int i = 2; i < l.size(); i += 3) {\n        l[i] = to_sort[sort_index++];\n    }\n\n    return l;\n}\n\n// Function to test the implementation\nvoid test_sort_third() {\n    vector<int> test1 = {1, 2, 3};\n    vector<int> expected1 = {1, 2, 3};\n    assert(sort_third(test1) == expected1);\n\n    vector<int> test2 = {5, 6, 3, 4, 8, 9, 2};\n    vector<int> expected2 = {2, 6, 3, 4, 8, 9, 5};\n    assert(sort_third(test2) == expected2);\n\n    cout << \"All tests passed!\" << endl;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_third({1, 2, 3}) , sort_third({1, 2, 3})));\n    assert (issame(sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}) , sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})));\n    assert (issame(sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}) , sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10})));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2}) , {2, 6, 3, 4, 8, 9, 5}));\n    assert (issame(sort_third({5, 8, 3, 4, 6, 9, 2}) , {2, 8, 3, 4, 6, 9, 5}));\n    assert (issame(sort_third({5, 6, 9, 4, 8, 3, 2}) , {2, 6, 9, 4, 8, 3, 5}));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2, 1}) , {2, 6, 3, 4, 8, 9, 5, 1}));\n}\n", "result": "failed: a.out: test.cpp:67: int main(): Assertion `issame(sort_third({5, 6, 3, 4, 8, 9, 2}) , {2, 6, 3, 4, 8, 9, 5})' failed.\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/30", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<float> get_positive(vector<float> l) {\n    vector<float> result;\n    for (float num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n\n// Function to print the vector\nvoid print_vector(const vector<float>& vec) {\n    cout << \"{\";\n    for (size_t i = 0; i < vec.size(); ++i) {\n        cout << vec[i];\n        if (i < vec.size() - 1) {\n            cout << \", \";\n        }\n    }\n    cout << \"}\" << endl;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_positive({-1, -2, 4, 5, 6}) , {4, 5, 6} ));\n    assert (issame(get_positive({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}) , {5, 3, 2, 3, 3, 9, 123, 1}));\n     assert (issame(get_positive({-1, -2}) , {} ));\n     assert (issame(get_positive({}) , {}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/35", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <limits>\nusing namespace std;\n\nfloat max_element(vector<float> l) {\n    if (l.empty()) {\n        // Handle the case where the vector is empty\n        return numeric_limits<float>::lowest(); // Return the lowest possible float value\n    }\n\n    float max_val = l[0]; // Initialize max_val with the first element of the vector\n    for (size_t i = 1; i < l.size(); ++i) {\n        if (l[i] > max_val) {\n            max_val = l[i];\n        }\n    }\n    return max_val;\n}\n\n// Function to test the max_element function\nvoid test_max_element() {\n    cout << \"Test Case 1: \";\n    cout << (max_element({1, 2, 3}) == 3 ? \"Passed\" : \"Failed\") << endl;\n\n    cout << \"Test Case 2: \";\n    cout << (max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}) == 123 ? \"Passed\" : \"Failed\") << endl;\n\n    cout << \"Test Case 3: \";\n    cout << (max_element({-1, -2, -3, -4, -5}) == -1 ? \"Passed\" : \"Failed\") << endl;\n\n    cout << \"Test Case 4: \";\n    cout << (max_element({}) == numeric_limits<float>::lowest() ? \"Passed\" : \"Failed\") << endl;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(max_element({1, 2, 3})- 3)<1e-4);\n    assert (abs(max_element({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})- 124)<1e-4);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/36", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <iostream>\n#include <string>\n\nint count_sevens(int num) {\n    int count = 0;\n    while (num > 0) {\n        if (num % 10 == 7) {\n            count++;\n        }\n        num /= 10;\n    }\n    return count;\n}\n\nint fizz_buzz(int n) {\n    int count = 0;\n    for (int i = 1; i < n; ++i) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count += count_sevens(i);\n        }\n    }\n    return count;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fizz_buzz(50) == 0);\n    assert (fizz_buzz(78) == 2);\n    assert (fizz_buzz(79) == 3);\n    assert (fizz_buzz(100) == 3);\n    assert (fizz_buzz(200) == 6);\n    assert (fizz_buzz(4000) == 192);\n    assert (fizz_buzz(10000) == 639);\n    assert (fizz_buzz(100000) == 8026);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/42", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<int> incr_list(vector<int> l) {\n    for (size_t i = 0; i < l.size(); ++i) {\n        l[i] += 1;\n    }\n    return l;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(incr_list({}) , {}));\n    assert (issame(incr_list({3, 2, 1}) , {4, 3, 2}));\n    assert (issame(incr_list({5, 2, 5, 2, 3, 3, 9, 0, 123}) , {6, 3, 6, 3, 4, 4, 10, 1, 124}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/39", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <iostream>\n#include <vector>\n#include <cmath>\n\n// Function to check if a number is prime\nbool is_prime(int num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 == 0 || num % 3 == 0) return false;\n    for (int i = 5; i * i <= num; i += 6) {\n        if (num % i == 0 || num % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\n// Function to generate the n-th prime Fibonacci number\nint prime_fib(int n) {\n    int count = 0;\n    int a = 0, b = 1;\n    while (true) {\n        int fib = a + b;\n        a = b;\n        b = fib;\n        if (is_prime(fib)) {\n            count++;\n            if (count == n) {\n                return fib;\n            }\n        }\n    }\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_fib(1) == 2);\n    assert (prime_fib(2) == 3);\n    assert (prime_fib(3) == 5);\n    assert (prime_fib(4) == 13);\n    assert (prime_fib(5) == 89);\n    assert (prime_fib(6) == 233);\n    assert (prime_fib(7) == 1597);\n    assert (prime_fib(8) == 28657);\n    assert (prime_fib(9) == 514229);\n    assert (prime_fib(10) == 433494437);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/34", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> unique(vector<int> l) {\n    // Step 1: Sort the vector\n    sort(l.begin(), l.end());\n    \n    // Step 2: Remove consecutive duplicates\n    auto new_end = unique(l.begin(), l.end());\n    \n    // Step 3: Resize the vector to remove the extra elements\n    l.erase(new_end, l.end());\n    \n    return l;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique({5, 3, 5, 2, 3, 3, 9, 0, 123}) , {0, 2, 3, 5, 9, 123}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/31", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <iostream>\n#include <cmath>\n\nbool is_prime(long long n) {\n    // Handle special cases\n    if (n <= 1) return false; // 0 and 1 are not prime numbers\n    if (n == 2 || n == 3) return true; // 2 and 3 are prime numbers\n    if (n % 2 == 0 || n % 3 == 0) return false; // Eliminate multiples of 2 and 3\n\n    // Check for factors from 5 to sqrt(n)\n    for (long long i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n\n    return true;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_prime(6) == false);\n    assert (is_prime(101) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(13441) == true);\n    assert (is_prime(61) == true);\n    assert (is_prime(4) == false);\n    assert (is_prime(1) == false);\n    assert (is_prime(5) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(17) == true);\n    assert (is_prime(5 * 17) == false);\n    assert (is_prime(11 * 7) == false);\n    assert (is_prime(13441 * 19) == false);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/37", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<float> sort_even(vector<float> l) {\n    // Step 1: Extract elements at even indices\n    vector<float> even_elements;\n    for (size_t i = 0; i < l.size(); i += 2) {\n        even_elements.push_back(l[i]);\n    }\n\n    // Step 2: Sort the extracted elements\n    sort(even_elements.begin(), even_elements.end());\n\n    // Step 3: Place the sorted elements back into their original positions\n    for (size_t i = 0, j = 0; i < l.size(); i += 2, ++j) {\n        l[i] = even_elements[j];\n    }\n\n    return l;\n}\n\n// Function to test the sort_even function\nvoid test_sort_even() {\n    vector<float> test1 = {1, 2, 3};\n    vector<float> expected1 = {1, 2, 3};\n    assert(sort_even(test1) == expected1);\n\n    vector<float> test2 = {5, 6, 3, 4};\n    vector<float> expected2 = {3, 6, 5, 4};\n    assert(sort_even(test2) == expected2);\n\n    vector<float> test3 = {8, 1, 4, 3, 2, 5};\n    vector<float> expected3 = {2, 1, 4, 3, 8, 5};\n    assert(sort_even(test3) == expected3);\n\n    cout << \"All tests passed!\" << endl;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_even({1, 2, 3}), {1, 2, 3}));\n    assert (issame(sort_even({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}) , {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123}));\n    assert (issame(sort_even({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}) , {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/38", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\nusing namespace std;\n\nstring encode_cyclic(string s) { \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l = s.length();\n    int num = (l + 2) / 3;\n    string x, output;\n    for (int i = 0; i * 3 < l; i++) {\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        x = s.substr(i * 3, 3);\n        if (x.length() == 3) x = x.substr(1) + x[0];\n        output += x;\n    }\n    return output;\n}\n\nstring decode_cyclic(string s) { \n    // takes as input string encoded with encode_cyclic function. Returns decoded string.\n    int l = s.length();\n    int num = (l + 2) / 3;\n    string x, output;\n    for (int i = 0; i * 3 < l; i++) {\n        // reverse the cycle operation\n        x = s.substr(i * 3, 3);\n        if (x.length() == 3) x = x[2] + x.substr(0, 2);\n        output += x;\n    }\n    return output;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    \n    for (int i=0;i<100;i++)\n    {\n        int l=10+rand()%11;\n        string str=\"\";\n        for (int j=0;j<l;j++)\n        {\n            char chr=97+rand()%26;\n            str+=chr;\n        }\n\n        string encoded_str = encode_cyclic(str);\n        assert (decode_cyclic(encoded_str) == str);\n    }\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/41", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\nusing namespace std;\n\nint car_race_collision(int n) {\n    // Each car moving left to right will collide with each car moving right to left.\n    // Therefore, the total number of collisions is n * n.\n    return n * n;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (car_race_collision(2) == 4);\n    assert (car_race_collision(3) == 9);\n    assert (car_race_collision(4) == 16);\n    assert (car_race_collision(8) == 64);\n    assert (car_race_collision(10) == 100);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/40", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nbool triples_sum_to_zero(std::vector<int> l) {\n    // Sort the vector to use the two-pointer technique\n    std::sort(l.begin(), l.end());\n\n    // Iterate through the vector\n    for (int i = 0; i < l.size() - 2; ++i) {\n        // Skip duplicate elements to avoid counting the same triplet multiple times\n        if (i > 0 && l[i] == l[i - 1]) continue;\n\n        int left = i + 1;\n        int right = l.size() - 1;\n\n        while (left < right) {\n            int sum = l[i] + l[left] + l[right];\n\n            if (sum == 0) {\n                return true;\n            } else if (sum < 0) {\n                // Move the left pointer to the right to increase the sum\n                ++left;\n            } else {\n                // Move the right pointer to the left to decrease the sum\n                --right;\n            }\n\n            // Skip duplicate elements for the left and right pointers\n            while (left < right && l[left] == l[left - 1]) ++left;\n            while (left < right && l[right] == l[right + 1]) --right;\n        }\n    }\n\n    return false;\n}\n\n// Test cases\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (triples_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (triples_sum_to_zero({1, 3, 5, -1}) == false);\n    assert (triples_sum_to_zero({1, 3, -2, 1}) == true);\n    assert (triples_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (triples_sum_to_zero({1, 2, 5, 7}) == false);\n    assert (triples_sum_to_zero({2, 4, -5, 3, 9, 7}) == true);\n    assert (triples_sum_to_zero({1}) == false);\n    assert (triples_sum_to_zero({1, 3, 5, -100}) == false);\n    assert (triples_sum_to_zero({100, 3, 5, -100}) == false);\n}\n", "result": "failed: ", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/44", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nstring change_base(int x, int base) {\n    if (base < 2 || base > 9) {\n        throw invalid_argument(\"Base must be between 2 and 9\");\n    }\n\n    string result = \"\";\n    while (x > 0) {\n        int remainder = x % base;\n        result += to_string(remainder);\n        x /= base;\n    }\n\n    // Reverse the result since we built it backwards\n    reverse(result.begin(), result.end());\n\n    return result;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (change_base(8, 3) == \"22\");\n    assert (change_base(9, 3) == \"100\");\n    assert (change_base(234, 2) == \"11101010\");\n    assert (change_base(16, 2) == \"10000\");\n    assert (change_base(8, 2) == \"1000\");\n    assert (change_base(7, 2) == \"111\");\n    for (int x=2;x<8;x++)\n        assert (change_base(x, x + 1) == to_string(x));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/43", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <unordered_set>\n\nusing namespace std;\n\nbool pairs_sum_to_zero(vector<int> l) {\n    unordered_set<int> seen;\n\n    for (int num : l) {\n        if (seen.find(-num) != seen.end()) {\n            return true; // Found a pair that sums to zero\n        }\n        seen.insert(num);\n    }\n\n    return false; // No such pair found\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (pairs_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (pairs_sum_to_zero({1, 3, -2, 1}) == false);\n    assert (pairs_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (pairs_sum_to_zero({2, 4, -5, 3, 5, 7}) == true);\n    assert (pairs_sum_to_zero({1}) == false);\n    assert (pairs_sum_to_zero({-3, 9, -1, 3, 2, 30}) == true);\n    assert (pairs_sum_to_zero({-3, 9, -1, 3, 2, 31}) == true);\n    assert (pairs_sum_to_zero({-3, 9, -1, 4, 2, 30}) == false);\n    assert (pairs_sum_to_zero({-3, 9, -1, 4, 2, 31}) == false);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/45", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <iostream>\n\n// Function to calculate the area of a triangle given its base and height\nfloat triangle_area(float base, float height) {\n    return 0.5 * base * height;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(5, 3) - 7.5)<1e-4);\n    assert (abs(triangle_area(2, 2) - 2.0)<1e-4);\n    assert (abs(triangle_area(10, 8) - 40.0)<1e-4);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/46", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\nusing namespace std;\n\nint fib4(int n) {\n    // Base cases\n    if (n == 0 || n == 1 || n == 3) return 0;\n    if (n == 2) return 2;\n\n    // Initialize the first four elements of the sequence\n    int a = 0, b = 0, c = 2, d = 0;\n\n    // Compute the n-th element iteratively\n    for (int i = 4; i <= n; ++i) {\n        int next = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = next;\n    }\n\n    return d;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib4(5) == 4);\n    assert (fib4(8) == 28);\n    assert (fib4(10) == 104);\n    assert (fib4(12) == 386);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/47", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <algorithm> // for sort\n\nusing namespace std;\n\nfloat median(vector<float> l) {\n    // Step 1: Sort the vector\n    sort(l.begin(), l.end());\n\n    int n = l.size();\n    \n    // Step 2: Check if the number of elements is odd or even\n    if (n % 2 == 0) {\n        // Step 3: If even, return the average of the two middle elements\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    } else {\n        // Step 4: If odd, return the middle element\n        return l[n / 2];\n    }\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(median({3, 1, 2, 4, 5}) - 3)<1e-4);\n    assert (abs(median({-10, 4, 6, 1000, 10, 20}) -8.0)<1e-4);\n    assert (abs(median({5}) - 5)<1e-4);\n    assert (abs(median({6, 5}) - 5.5)<1e-4);\n    assert (abs(median({8, 1, 3, 9, 9, 2, 7}) - 7)<1e-4 );\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/49", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\nusing namespace std;\n\n// Function to compute 2^n % p using modular exponentiation\nint modp(int n, int p) {\n    int result = 1; // Initialize result\n    int base = 2;   // Base value\n\n    while (n > 0) {\n        // If n is odd, multiply base with result\n        if (n & 1)\n            result = (result * base) % p;\n\n        // Now n must be even\n        n = n >> 1; // Divide n by 2\n        base = (base * base) % p; // Square the base\n    }\n\n    return result;\n}\n\n// Main function to test the modp function\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (modp(3, 5) == 3);\n    assert (modp(1101, 101) == 2);\n    assert (modp(0, 101) == 1);\n    assert (modp(3, 11) == 8);\n    assert (modp(100, 101) == 1);\n    assert (modp(30, 5) == 4);\n    assert (modp(31, 5) == 3);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/50", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\nusing namespace std;\n\nstring encode_shift(string s) {\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    for (int i = 0; i < s.length(); i++) {\n        int w = ((int)s[i] + 5 - (int)'a') % 26 + (int)'a';\n        out += (char)w;\n    }\n    return out;\n}\n\nstring decode_shift(string s) {\n    // takes as input string encoded with encode_shift function. Returns decoded string.\n    string out;\n    for (int i = 0; i < s.length(); i++) {\n        int w = ((int)s[i] - 5 - (int)'a' + 26) % 26 + (int)'a';  // Ensure the result is within the valid range\n        out += (char)w;\n    }\n    return out;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    \n    for (int i=0;i<100;i++)\n    {\n        int l=10+rand()%11;\n        string str=\"\";\n        for (int j=0;j<l;j++)\n        {\n            char chr=97+rand()%26;\n            str+=chr;\n        }\n\n        string encoded_str = encode_shift(str);\n        assert (decode_shift(encoded_str) == str);\n    }\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/48", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\nusing namespace std;\n\nbool is_palindrome(string text) {\n    int left = 0;\n    int right = text.length() - 1;\n\n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_palindrome(\"\") == true);\n    assert (is_palindrome(\"aba\") == true);\n    assert (is_palindrome(\"aaaaa\") == true);\n    assert (is_palindrome(\"zbcd\") == false);\n    assert (is_palindrome(\"xywyx\") == true);\n    assert (is_palindrome(\"xywyz\") == false);\n    assert (is_palindrome(\"xywzx\") == false);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/53", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\nusing namespace std;\n\nint add(int x, int y) {\n    return x + y;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add(0, 1) == 1);\n    assert (add(1, 0) == 1);\n    assert (add(2, 3) == 5);\n    assert (add(5, 7) == 12);\n    assert (add(7, 5) == 12);\n    for (int i=0;i<100;i+=1)\n    {\n        int x=rand()%1000;\n        int y=rand()%1000;\n        assert (add(x, y) == x + y);\n    }\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/52", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nbool below_threshold(vector<int> l, int t) {\n    for (int num : l) {\n        if (num >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_threshold({1, 2, 4, 10}, 100));\n    assert (not(below_threshold({1, 20, 4, 10}, 5)));\n    assert (below_threshold({1, 20, 4, 10}, 21));\n    assert (below_threshold({1, 20, 4, 10}, 22));\n    assert (below_threshold({1, 8, 4, 10}, 11));\n    assert (not(below_threshold({1, 8, 4, 10}, 10)));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/51", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\n#include <cctype> // for tolower function\n\nusing namespace std;\n\nstring remove_vowels(string text) {\n    string result = \"\";\n    for (char c : text) {\n        char lower_c = tolower(c); // Convert to lowercase to simplify the check\n        if (lower_c != 'a' && lower_c != 'e' && lower_c != 'i' && lower_c != 'o' && lower_c != 'u') {\n            result += c; // Add non-vowel characters to the result\n        }\n    }\n    return result;\n}\n\n// Function to test the remove_vowels function\nvoid test_remove_vowels() {\n    cout << (remove_vowels(\"\") == \"\") << endl;\n    cout << (remove_vowels(\"abcdef\\nghijklm\") == \"bcdf\\nghjklm\") << endl;\n    cout << (remove_vowels(\"abcdef\") == \"bcdf\") << endl;\n    cout << (remove_vowels(\"aaaaa\") == \"\") << endl;\n    cout << (remove_vowels(\"aaBAA\") == \"B\") << endl;\n    cout << (remove_vowels(\"zbcd\") == \"zbcd\") << endl;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (remove_vowels(\"\") == \"\");\n    assert (remove_vowels(\"abcdef\\nghijklm\") == \"bcdf\\nghjklm\");\n    assert (remove_vowels(\"fedcba\") == \"fdcb\");\n    assert (remove_vowels(\"eeeee\") == \"\");\n    assert (remove_vowels(\"acBAA\") == \"cB\");\n    assert (remove_vowels(\"EcBOO\") == \"cB\");\n    assert (remove_vowels(\"ybcd\") == \"ybcd\");\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/54", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\n#include <set>\nusing namespace std;\n\nbool same_chars(const string& s0, const string& s1) {\n    // Create sets to store unique characters from each string\n    set<char> set0(s0.begin(), s0.end());\n    set<char> set1(s1.begin(), s1.end());\n\n    // Compare the sets\n    return set0 == set1;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert (same_chars(\"abcd\", \"dddddddabc\") == true);\n    assert (same_chars(\"dddddddabc\", \"abcd\") == true);\n    assert (same_chars(\"eabcd\", \"dddddddabc\") == false);\n    assert (same_chars(\"abcd\", \"dddddddabcf\") == false);\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert (same_chars(\"aabb\", \"aaccc\") == false);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/55", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\nusing namespace std;\n\nint fib(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    int a = 0, b = 1, c;\n    for (int i = 2; i <= n; ++i) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib(10) == 55);\n    assert (fib(1) == 1);\n    assert (fib(8) == 21);\n    assert (fib(11) == 89);\n    assert (fib(12) == 144);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/56", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\nusing namespace std;\n\nbool correct_bracketing(const string& brackets) {\n    int counter = 0;\n    \n    for (char ch : brackets) {\n        if (ch == '<') {\n            counter++;\n        } else if (ch == '>') {\n            counter--;\n            if (counter < 0) {\n                return false; // More closing brackets than opening ones\n            }\n        }\n    }\n    \n    return counter == 0; // All opening brackets must be closed\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"<>\"));\n    assert (correct_bracketing(\"<<><>>\"));\n    assert (correct_bracketing(\"<><><<><>><>\"));\n    assert (correct_bracketing(\"<><><<<><><>><>><<><><<>>>\"));\n    assert (not (correct_bracketing(\"<<<><>>>>\")));\n    assert (not (correct_bracketing(\"><<>\")));\n    assert (not (correct_bracketing(\"<\")));\n    assert (not (correct_bracketing(\"<<<<\")));\n    assert (not (correct_bracketing(\">\")));\n    assert (not (correct_bracketing(\"<<>\")));\n    assert (not (correct_bracketing(\"<><><<><>><>><<>\")));\n    assert (not (correct_bracketing(\"<><><<><>><>>><>\")));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/57", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nbool monotonic(vector<float> l) {\n    // If the vector is empty or has only one element, it is trivially monotonic\n    if (l.size() <= 1) {\n        return true;\n    }\n\n    // Determine the initial trend\n    bool increasing = l[1] >= l[0];\n    bool decreasing = l[1] <= l[0];\n\n    // If the vector has exactly two elements, it is trivially monotonic\n    if (l.size() == 2) {\n        return true;\n    }\n\n    // Check the rest of the elements\n    for (size_t i = 2; i < l.size(); ++i) {\n        if (increasing && l[i] < l[i - 1]) {\n            return false;\n        }\n        if (decreasing && l[i] > l[i - 1]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (monotonic({1, 2, 4, 10}) == true);\n    assert (monotonic({1, 2, 4, 20}) == true);\n    assert (monotonic({1, 20, 4, 10}) == false);\n    assert (monotonic({4, 1, 0, -10}) == true);\n    assert (monotonic({4, 1, 1, 0}) == true);\n    assert (monotonic({1, 2, 3, 2, 5, 60}) == false);\n    assert (monotonic({1, 2, 3, 4, 5, 60}) == true);\n    assert (monotonic({9, 9, 9, 9}) == true);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/58", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> common(vector<int> l1, vector<int> l2) {\n    // Step 1: Sort both vectors\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n\n    vector<int> result;\n    int i = 0, j = 0;\n\n    // Step 2: Use two pointers to find common elements\n    while (i < l1.size() && j < l2.size()) {\n        if (l1[i] == l2[j]) {\n            // Step 3: Add to result if it's not already in the result\n            if (result.empty() || result.back() != l1[i]) {\n                result.push_back(l1[i]);\n            }\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n\n    return result;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}) , {1, 5, 653}));\n    assert (issame(common({5, 3, 2, 8}, {3, 2}) , {2, 3}));\n    assert (issame(common({4, 3, 2, 8}, {3, 2, 4}) , {2, 3, 4}));\n    assert (issame(common({4, 3, 2, 8}, {}) , {}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/59", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <iostream>\n#include <cmath>\n\nint largest_prime_factor(int n) {\n    int max_prime = -1;\n\n    // Step 1: Remove all factors of 2\n    while (n % 2 == 0) {\n        max_prime = 2;\n        n /= 2;\n    }\n\n    // Step 2: Check for odd factors from 3 onwards\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n            max_prime = i;\n            n /= i;\n        }\n    }\n\n    // Step 3: If n is a prime number greater than 2\n    if (n > 2) {\n        max_prime = n;\n    }\n\n    return max_prime;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_prime_factor(15) == 5);\n    assert (largest_prime_factor(27) == 3);\n    assert (largest_prime_factor(63) == 7);\n    assert (largest_prime_factor(330) == 11);\n    assert (largest_prime_factor(13195) == 29);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/60", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <iostream>\n\nint sum_to_n(int n) {\n    return (n * (n + 1)) / 2;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_to_n(1) == 1);\n    assert (sum_to_n(6) == 21);\n    assert (sum_to_n(11) == 66);\n    assert (sum_to_n(30) == 465);\n    assert (sum_to_n(100) == 5050);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/63", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <iostream>\n#include <vector>\n\nint fibfib(int n) {\n    if (n == 0 || n == 1) return 0;\n    if (n == 2) return 1;\n\n    // Initialize a vector to store the FibFib values up to n\n    std::vector<int> dp(n + 1, 0);\n    dp[0] = 0;\n    dp[1] = 0;\n    dp[2] = 1;\n\n    // Compute the FibFib values iteratively\n    for (int i = 3; i <= n; ++i) {\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];\n    }\n\n    return dp[n];\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fibfib(2) == 1);\n    assert (fibfib(1) == 0);\n    assert (fibfib(5) == 4);\n    assert (fibfib(8) == 24);\n    assert (fibfib(10) == 81);\n    assert (fibfib(12) == 274);\n    assert (fibfib(14) == 927);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/62", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<float> derivative(const vector<float>& xs) {\n    vector<float> result;\n    for (size_t i = 1; i < xs.size(); ++i) {\n        result.push_back(i * xs[i]);\n    }\n    return result;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(derivative({3, 1, 2, 4, 5}) , {1, 4, 12, 20}));\n    assert (issame(derivative({1, 2, 3}) , {2, 6}));\n    assert (issame(derivative({3, 2, 1}) , {2, 2}));\n    assert (issame(derivative({3, 2, 1, 0, 4}) , {2, 2, 0, 16}));\n    assert (issame(derivative({1}) , {}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/64", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\n#include <cctype> // for tolower function\n\nusing namespace std;\n\nint vowels_count(const string& s) {\n    int count = 0;\n    for (size_t i = 0; i < s.length(); ++i) {\n        char c = tolower(s[i]); // Convert character to lowercase to handle both uppercase and lowercase\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n        // Check if 'y' is at the end of the word\n        if (c == 'y' && i == s.length() - 1) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (vowels_count(\"abcde\") == 2);\n    assert (vowels_count(\"Alone\") == 3);\n    assert (vowels_count(\"key\") == 2);\n    assert (vowels_count(\"bye\") == 1);\n    assert (vowels_count(\"keY\") == 2);\n    assert (vowels_count(\"bYe\") == 1);\n    assert (vowels_count(\"ACEDY\") == 3);\n   \n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/61", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\n#include <stack>\nusing namespace std;\n\nbool correct_bracketing(string brackets) {\n    stack<char> s;\n    \n    for (char c : brackets) {\n        if (c == '(') {\n            s.push(c);\n        } else if (c == ')') {\n            if (s.empty()) {\n                return false; // No matching opening bracket\n            }\n            s.pop();\n        }\n    }\n    \n    return s.empty(); // True if all opening brackets have been matched\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"()\"));\n    assert (correct_bracketing(\"(()())\"));\n    assert (correct_bracketing(\"()()(()())()\"));\n    assert (correct_bracketing(\"()()((()()())())(()()(()))\"));\n    assert (not (correct_bracketing(\"((()())))\")));\n    assert (not (correct_bracketing(\")(()\")));\n    assert (not (correct_bracketing(\"(\")));\n    assert (not (correct_bracketing(\"((((\")));\n    assert (not (correct_bracketing(\")\")));\n    assert (not (correct_bracketing(\"(()\")));\n    assert (not (correct_bracketing(\"()()(()())())(()\")));\n    assert (not (correct_bracketing(\"()()(()())()))()\")));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/66", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\nusing namespace std;\n\nint digitSum(string s) {\n    int sum = 0;\n    for (char c : s) {\n        if (isupper(c)) {\n            sum += static_cast<int>(c);\n        }\n    }\n    return sum;\n}\n\n// Function to test the digitSum function\nvoid testDigitSum() {\n    cout << \"digitSum(\\\"\\\") => \" << digitSum(\"\") << endl; // Expected: 0\n    cout << \"digitSum(\\\"abAB\\\") => \" << digitSum(\"abAB\") << endl; // Expected: 131\n    cout << \"digitSum(\\\"abcCd\\\") => \" << digitSum(\"abcCd\") << endl; // Expected: 67\n    cout << \"digitSum(\\\"helloE\\\") => \" << digitSum(\"helloE\") << endl; // Expected: 69\n    cout << \"digitSum(\\\"woArBld\\\") => \" << digitSum(\"woArBld\") << endl; // Expected: 131\n    cout << \"digitSum(\\\"aAaaaXa\\\") => \" << digitSum(\"aAaaaXa\") << endl; // Expected: 153\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digitSum(\"\") == 0);\n    assert (digitSum(\"abAB\") == 131);\n    assert (digitSum(\"abcCd\") == 67);\n    assert (digitSum(\"helloE\") == 69);\n    assert (digitSum(\"woArBld\") == 131);\n    assert (digitSum(\"aAaaaXa\") == 153);\n    assert (digitSum(\" How are yOu?\") == 151);\n    assert (digitSum(\"You arE Very Smart\") == 327);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/65", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\n#include <algorithm> // for std::reverse\n\nusing namespace std;\n\nstring circular_shift(int x, int shift) {\n    // Convert the integer to a string\n    string s = to_string(x);\n    int n = s.length();\n\n    // If shift is greater than the number of digits, reverse the string\n    if (shift >= n) {\n        reverse(s.begin(), s.end());\n        return s;\n    }\n\n    // Perform the circular shift\n    // Move the last 'shift' digits to the front\n    rotate(s.rbegin(), s.rbegin() + shift, s.rend());\n\n    return s;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (circular_shift(100, 2) == \"001\");\n    assert (circular_shift(12, 2) == \"12\");\n    assert (circular_shift(97, 8) == \"79\");\n    assert (circular_shift(12, 1) == \"21\");\n    assert (circular_shift(11, 101) == \"11\");\n}\n", "result": "failed: a.out: test.cpp:44: int main(): Assertion `circular_shift(12, 2) == \"12\"' failed.\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/67", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nint fruit_distribution(string s, int n) {\n    // Create a stringstream from the input string\n    stringstream ss(s);\n    string temp;\n    int apples = 0, oranges = 0;\n\n    // Parse the string to extract the number of apples and oranges\n    while (ss >> temp) {\n        if (temp == \"apples\" && !ss.eof()) {\n            ss >> temp; // Read the number before \"apples\"\n            apples = stoi(temp);\n        } else if (temp == \"oranges\" && !ss.eof()) {\n            ss >> temp; // Read the number before \"oranges\"\n            oranges = stoi(temp);\n        }\n    }\n\n    // Calculate the number of mangoes\n    int mangoes = n - apples - oranges;\n\n    return mangoes;\n}\n\n// Function to test the solution\nvoid test_fruit_distribution() {\n    cout << fruit_distribution(\"5 apples and 6 oranges\", 19) << endl; // Expected output: 8\n    cout << fruit_distribution(\"0 apples and 1 oranges\", 3) << endl; // Expected output: 2\n    cout << fruit_distribution(\"2 apples and 3 oranges\", 100) << endl; // Expected output: 95\n    cout << fruit_distribution(\"100 apples and 1 oranges\", 120) << endl; // Expected output: 19\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fruit_distribution(\"5 apples and 6 oranges\",19) == 8);\n    assert (fruit_distribution(\"5 apples and 6 oranges\",21) == 10);\n    assert (fruit_distribution(\"0 apples and 1 oranges\",3) == 2);\n    assert (fruit_distribution(\"1 apples and 0 oranges\",3) == 2);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",100) == 95);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",5) == 0);\n    assert (fruit_distribution(\"1 apples and 100 oranges\",120) == 19);\n}\n", "result": "failed: terminate called after throwing an instance of 'std::invalid_argument'\n  what():  stoi\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/68", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <vector>\n#include <climits>\nusing namespace std;\n\nvector<int> pluck(vector<int> arr) {\n    int minEvenValue = INT_MAX;\n    int minIndex = -1;\n\n    for (int i = 0; i < arr.size(); ++i) {\n        if (arr[i] % 2 == 0 && arr[i] < minEvenValue) {\n            minEvenValue = arr[i];\n            minIndex = i;\n        }\n    }\n\n    if (minIndex == -1) {\n        return {}; // Return an empty vector if no even value is found\n    } else {\n        return {minEvenValue, minIndex};\n    }\n}\n\n// Example usage:\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(pluck({4,2,3}) , {2, 1}));\n    assert (issame(pluck({1,2,3}) , {2, 1}));\n    assert (issame(pluck({}) , {}));\n    assert (issame(pluck({5, 0, 3, 0, 4, 2}) , {0, 1}));\n    assert (issame(pluck({1, 2, 3, 0, 5, 3}) , {0, 3}));\n    assert (issame(pluck({5, 4, 8, 4 ,8}) , {4, 1}));\n    assert (issame(pluck({7, 6, 7, 1}) , {6, 1}));\n    assert (issame(pluck({7, 9, 7, 1}) , {}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/72", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <vector>\n#include <numeric> // For std::accumulate\n\nusing namespace std;\n\nbool will_it_fly(vector<int> q, int w) {\n    // Check if the vector is palindromic\n    for (size_t i = 0; i < q.size() / 2; ++i) {\n        if (q[i] != q[q.size() - 1 - i]) {\n            return false; // Not palindromic\n        }\n    }\n\n    // Calculate the sum of the elements in the vector\n    int sum = accumulate(q.begin(), q.end(), 0);\n\n    // Check if the sum is less than or equal to the maximum weight\n    return sum <= w;\n}\n\n// Example usage\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (will_it_fly({3, 2, 3}, 9)==true);\n    assert (will_it_fly({1, 2}, 5) == false);\n    assert (will_it_fly({3}, 5) == true);\n    assert (will_it_fly({3, 2, 3}, 1) == false);\n    assert (will_it_fly({1, 2, 3}, 6) ==false);\n    assert (will_it_fly({5}, 5) == true);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/71", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <cmath>\n#include <iomanip>\n\nusing namespace std;\n\nfloat triangle_area(float a, float b, float c) {\n    // Check if the sides form a valid triangle\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1.0f;\n    }\n\n    // Calculate the semi-perimeter\n    float s = (a + b + c) / 2.0f;\n\n    // Calculate the area using Heron's formula\n    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n\n    // Round the area to 2 decimal places\n    return round(area * 100.0f) / 100.0f;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(3, 4, 5)-6.00)<0.01);\n    assert (abs(triangle_area(1, 2, 10) +1)<0.01);\n    assert (abs(triangle_area(4, 8, 5) -8.18)<0.01);\n    assert (abs(triangle_area(2, 2, 2) -1.73)<0.01);\n    assert (abs(triangle_area(1, 2, 3) +1)<0.01);\n    assert (abs(triangle_area(10, 5, 7) - 16.25)<0.01);\n    assert (abs(triangle_area(2, 6, 3) +1)<0.01);\n    assert (abs(triangle_area(1, 1, 1) -0.43)<0.01);\n    assert (abs(triangle_area(2, 2, 10) +1)<0.01);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/69", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <algorithm>\n\nusing namespace std;\n\nint search(vector<int> lst) {\n    // Step 1: Count the frequency of each integer\n    unordered_map<int, int> freq;\n    for (int num : lst) {\n        freq[num]++;\n    }\n\n    // Step 2: Find the maximum integer that satisfies the condition\n    int result = -1;\n    for (const auto& pair : freq) {\n        if (pair.first <= pair.second) {\n            result = max(result, pair.first);\n        }\n    }\n\n    return result;\n}\n\n// Function to test the solution\nvoid test() {\n    cout << search({4, 1, 2, 2, 3, 1}) << \" == 2\" << endl;\n    cout << search({1, 2, 2, 3, 3, 3, 4, 4, 4}) << \" == 3\" << endl;\n    cout << search({5, 5, 4, 4, 4}) << \" == -1\" << endl;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (search({5, 5, 5, 5, 1}) == 1);\n    assert (search({4, 1, 4, 1, 4, 4}) == 4);\n    assert (search({3, 3}) == -1);\n    assert (search({8, 8, 8, 8, 8, 8, 8, 8}) == 8);\n    assert (search({2, 3, 3, 2, 2}) == 2);\n    assert (search({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}) == 1);\n    assert (search({3, 2, 8, 2}) == 2);\n    assert (search({6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}) == 1);\n    assert (search({8, 8, 3, 6, 5, 6, 4}) == -1);\n    assert (search({6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}) == 1);\n    assert (search({1, 9, 10, 1, 3}) == 1);\n    assert (search({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}) == 5);\n    assert (search({1}) == 1);\n    assert (search({8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}) == 4);\n    assert (search({2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}) == 2);\n    assert (search({1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}) == 1);\n    assert (search({9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}) == 4);\n    assert (search({2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}) == 4);\n    assert (search({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}) == 2);\n    assert (search({5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}) == -1);\n    assert (search({10}) == -1);\n    assert (search({9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}) == 2);\n    assert (search({5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}) == 1);\n    assert (search({7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}) == 1);\n    assert (search({3, 10, 10, 9, 2}) == -1);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/73", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint smallest_change(vector<int> arr) {\n    int n = arr.size();\n    int changes = 0;\n\n    // Compare elements from the start and end of the vector\n    for (int i = 0; i < n / 2; ++i) {\n        if (arr[i] != arr[n - 1 - i]) {\n            ++changes;\n        }\n    }\n\n    return changes;\n}\n\n// Example usage\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (smallest_change({1,2,3,5,4,7,9,6}) == 4);\n    assert (smallest_change({1, 2, 3, 4, 3, 2, 2}) == 1);\n    assert (smallest_change({1, 4, 2}) == 1);\n    assert (smallest_change({1, 4, 4, 2}) == 1);\n    assert (smallest_change({1, 2, 3, 2, 1}) == 0);\n    assert (smallest_change({3, 1, 1, 3}) == 0);\n    assert (smallest_change({1}) == 0);\n    assert (smallest_change({0, 1}) == 1);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/75", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <cmath>\n\nusing namespace std;\n\n// Function to generate all prime numbers less than 100\nvector<int> generate_primes() {\n    vector<int> primes;\n    bool is_prime[100] = {false};\n    \n    for (int i = 2; i < 100; ++i) {\n        if (!is_prime[i]) {\n            primes.push_back(i);\n            for (int j = i * i; j < 100; j += i) {\n                is_prime[j] = true;\n            }\n        }\n    }\n    return primes;\n}\n\n// Function to check if the given number is the product of exactly three primes\nbool is_multiply_prime(int a) {\n    vector<int> primes = generate_primes();\n    \n    for (size_t i = 0; i < primes.size(); ++i) {\n        for (size_t j = i; j < primes.size(); ++j) {\n            for (size_t k = j; k < primes.size(); ++k) {\n                if (primes[i] * primes[j] * primes[k] == a) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_multiply_prime(5) == false);\n    assert (is_multiply_prime(30) == true);\n    assert (is_multiply_prime(8) == true);\n    assert (is_multiply_prime(10) == false);\n    assert (is_multiply_prime(125) == true);\n    assert (is_multiply_prime(3 * 5 * 7) == true);\n    assert (is_multiply_prime(3 * 6 * 7) == false);\n    assert (is_multiply_prime(9 * 9 * 9) == false);\n    assert (is_multiply_prime(11 * 9 * 9) == false);\n    assert (is_multiply_prime(11 * 13 * 7) == true);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/74", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> total_match(vector<string> lst1, vector<string> lst2) {\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n\n    // Calculate the total number of characters in lst1\n    for (const string& str : lst1) {\n        total_chars_lst1 += str.length();\n    }\n\n    // Calculate the total number of characters in lst2\n    for (const string& str : lst2) {\n        total_chars_lst2 += str.length();\n    }\n\n    // Compare the total number of characters and return the appropriate vector\n    if (total_chars_lst1 <= total_chars_lst2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\n// Example usage\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(total_match({}, {}) , {}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\"}) , {\"hi\", \"hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) , {\"4\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) , {\"hI\", \"Hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) , {\"hI\", \"hi\", \"hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hii\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({}, {\"this\"}) , {}));\n    assert (issame(total_match({\"this\"}, {}) , {}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/70", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> strange_sort_list(vector<int> lst) {\n    // Sort the list to easily access min and max values\n    sort(lst.begin(), lst.end());\n    \n    vector<int> result;\n    int left = 0;  // Start index\n    int right = lst.size() - 1;  // End index\n    \n    while (left <= right) {\n        if (left == right) {\n            // If only one element left, add it to the result\n            result.push_back(lst[left]);\n        } else {\n            // Add the smallest and largest remaining elements\n            result.push_back(lst[left]);\n            result.push_back(lst[right]);\n        }\n        left++;\n        right--;\n    }\n    \n    return result;\n}\n\n// Example usage\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(strange_sort_list({1, 2, 3, 4}) , {1, 4, 2, 3}));\n    assert (issame(strange_sort_list({5, 6, 7, 8, 9}) , {5, 9, 6, 8, 7}));\n    assert (issame(strange_sort_list({1, 2, 3, 4, 5}) , {1, 5, 2, 4, 3}));\n    assert (issame(strange_sort_list({5, 6, 7, 8, 9, 1}) , {1, 9, 5, 8, 6, 7}));\n    assert (issame(strange_sort_list({5, 5, 5, 5}) , {5, 5, 5, 5}));\n    assert (issame(strange_sort_list({}) , {}));\n    assert (issame(strange_sort_list({1,2,3,4,5,6,7,8}) , {1, 8, 2, 7, 3, 6, 4, 5}));\n    assert (issame(strange_sort_list({0,2,2,2,5,5,-5,-5}) , {-5, 5, -5, 5, 0, 2, 2, 2}));\n    assert (issame(strange_sort_list({111111}) , {111111}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/77", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <iostream>\n#include <cmath>\n\nbool iscube(int a) {\n    // Calculate the cube root of 'a'\n    double cubeRoot = cbrt(a);\n    \n    // Round the cube root to the nearest integer\n    int nearestInt = static_cast<int>(round(cubeRoot));\n    \n    // Check if the cube of the nearest integer equals 'a'\n    return (nearestInt * nearestInt * nearestInt == a);\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (iscube(1) == true);\n    assert (iscube(2) == false);\n    assert (iscube(-1) == true);\n    assert (iscube(64) == true);\n    assert (iscube(180) == false);\n    assert (iscube(1000) == true);\n    assert (iscube(0) == true);\n    assert (iscube(1729) == false);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/76", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <iostream>\n#include <cmath>\n\nbool is_simple_power(int x, int n) {\n    // Handle edge cases\n    if (n == 1) {\n        return x == 1; // Only 1^0 = 1\n    }\n    if (x == 1) {\n        return n == 1; // Only 1^k = 1 for any k\n    }\n    if (n <= 0 || x <= 0) {\n        return false; // Negative numbers and zero are not considered\n    }\n\n    // Calculate the logarithm to find the potential exponent\n    double exponent = log(x) / log(n);\n\n    // Check if the exponent is an integer\n    return floor(exponent) == exponent;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_simple_power(1, 4)== true);\n    assert (is_simple_power(2, 2)==true);\n    assert (is_simple_power(8, 2)==true);\n    assert (is_simple_power(3, 2)==false);\n    assert (is_simple_power(3, 1)==false);\n    assert (is_simple_power(5, 3)==false);\n    assert (is_simple_power(16, 2)== true);\n    assert (is_simple_power(143214, 16)== false);\n    assert (is_simple_power(4, 2)==true);\n    assert (is_simple_power(9, 3)==true);\n    assert (is_simple_power(16, 4)==true);\n    assert (is_simple_power(24, 2)==false);\n    assert (is_simple_power(128, 4)==false);\n    assert (is_simple_power(12, 6)==false);\n    assert (is_simple_power(1, 1)==true);\n    assert (is_simple_power(1, 12)==true);\n}\n", "result": "failed: a.out: test.cpp:43: int main(): Assertion `is_simple_power(1, 4)== true' failed.\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/80", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\nusing namespace std;\n\nbool is_happy(const string& s) {\n    // Check if the length of the string is less than 3\n    if (s.length() < 3) {\n        return false;\n    }\n\n    // Iterate through the string and check every 3 consecutive characters\n    for (size_t i = 0; i < s.length() - 2; ++i) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n\n    // If all sets of 3 consecutive characters are distinct, the string is happy\n    return true;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_happy(\"a\") == false );\n    assert (is_happy(\"aa\") == false );\n    assert (is_happy(\"abcd\") == true );\n    assert (is_happy(\"aabb\") == false );\n    assert (is_happy(\"adb\") == true );\n    assert (is_happy(\"xyy\") == false );\n    assert (is_happy(\"iopaxpoi\") == true );\n    assert (is_happy(\"iopaxioi\") == false );\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/79", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\n#include <bitset>\n\nusing namespace std;\n\nstring decimal_to_binary(int decimal) {\n    if (decimal == 0) {\n        return \"db0db\";\n    }\n\n    string binary = \"\";\n    while (decimal > 0) {\n        binary = to_string(decimal % 2) + binary;\n        decimal /= 2;\n    }\n\n    return \"db\" + binary + \"db\";\n}\n\n// Function to test the conversion\nvoid test_decimal_to_binary() {\n    cout << \"decimal_to_binary(15) -> \" << decimal_to_binary(15) << endl; // Should print \"db1111db\"\n    cout << \"decimal_to_binary(32) -> \" << decimal_to_binary(32) << endl; // Should print \"db100000db\"\n    cout << \"decimal_to_binary(0) -> \" << decimal_to_binary(0) << endl;   // Should print \"db0db\"\n    cout << \"decimal_to_binary(1) -> \" << decimal_to_binary(1) << endl;   // Should print \"db1db\"\n    cout << \"decimal_to_binary(2) -> \" << decimal_to_binary(2) << endl;   // Should print \"db10db\"\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (decimal_to_binary(0) == \"db0db\");\n    assert (decimal_to_binary(32) == \"db100000db\");\n    assert (decimal_to_binary(103) == \"db1100111db\");\n    assert (decimal_to_binary(15) == \"db1111db\");\n\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/78", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\n#include <unordered_set>\n\nusing namespace std;\n\nint hex_key(string num) {\n    // Define the set of prime hexadecimal digits\n    unordered_set<char> prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'};\n    \n    int count = 0;\n    \n    // Iterate through each character in the input string\n    for (char c : num) {\n        // Check if the character is a prime hexadecimal digit\n        if (prime_hex_digits.find(c) != prime_hex_digits.end()) {\n            count++;\n        }\n    }\n    \n    return count;\n}\n\n// Function to test the hex_key function\nvoid test_hex_key() {\n    cout << hex_key(\"AB\") << \" (Expected: 1)\" << endl;\n    cout << hex_key(\"1077E\") << \" (Expected: 2)\" << endl;\n    cout << hex_key(\"ABED1A33\") << \" (Expected: 4)\" << endl;\n    cout << hex_key(\"123456789ABCDEF0\") << \" (Expected: 6)\" << endl;\n    cout << hex_key(\"2020\") << \" (Expected: 2)\" << endl;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (hex_key(\"AB\") == 1      );\n    assert (hex_key(\"1077E\") == 2 );\n    assert (hex_key(\"ABED1A33\") == 4     );\n    assert (hex_key(\"2020\") == 2 );\n    assert (hex_key(\"123456789ABCDEF0\") == 6      );\n    assert (hex_key(\"112233445566778899AABBCCDDEEFF00\") == 12 );\n    assert (hex_key(\"\") == 0);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/82", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\nusing namespace std;\n\n// Function to check if a number is prime\nbool is_prime(int n) {\n    if (n <= 1) return false; // 0 and 1 are not prime numbers\n    if (n <= 3) return true;  // 2 and 3 are prime numbers\n\n    // This is checked so that we can skip middle five numbers in below loop\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n\n    return true;\n}\n\n// Function to check if the length of the string is prime\nbool prime_length(const string& str) {\n    int length = str.length();\n    return is_prime(length);\n}\n\n// Main function to test the prime_length function\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_length(\"Hello\") == true);\n    assert (prime_length(\"abcdcba\") == true);\n    assert (prime_length(\"kittens\") == true);\n    assert (prime_length(\"orange\") == false);\n    assert (prime_length(\"wow\") == true);\n    assert (prime_length(\"world\") == true);\n    assert (prime_length(\"MadaM\") == true);\n    assert (prime_length(\"Wow\") == true);\n    assert (prime_length(\"\") == false);\n    assert (prime_length(\"HI\") == true);\n    assert (prime_length(\"go\") == true);\n    assert (prime_length(\"gogo\") == false);\n    assert (prime_length(\"aaaaaaaaaaaaaaa\") == false);\n    assert (prime_length(\"Madam\") == true);\n    assert (prime_length(\"M\") == false);\n    assert (prime_length(\"0\") == false);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/81", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> numerical_letter_grade(vector<float> grades) {\n    vector<string> letter_grades;\n    \n    for (float gpa : grades) {\n        if (gpa == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (gpa > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (gpa > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (gpa > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (gpa > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (gpa > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (gpa > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (gpa > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (gpa > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (gpa > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (gpa > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (gpa > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else if (gpa == 0.0) {\n            letter_grades.push_back(\"E\");\n        }\n    }\n    \n    return letter_grades;\n}\n\n// Example usage\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(numerical_letter_grade({4.0, 3, 1.7, 2, 3.5}) , {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}));\n    assert (issame(numerical_letter_grade({1.2}) , {\"D+\"}));\n    assert (issame(numerical_letter_grade({0.5}) , {\"D-\"}));\n    assert (issame(numerical_letter_grade({0.0}) , {\"E\"}));\n    assert (issame(numerical_letter_grade({1, 0.3, 1.5, 2.8, 3.3}) , {\"D\", \"D-\", \"C-\", \"B\", \"B+\"}));\n    assert (issame(numerical_letter_grade({0, 0.7}) , {\"E\", \"D-\"}));\n    \n}\n", "result": "failed: a.out: test.cpp:69: int main(): Assertion `issame(numerical_letter_grade({4.0, 3, 1.7, 2, 3.5}) , {\"A+\", \"B\", \"C-\", \"C\", \"A-\"})' failed.\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/83", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <iostream>\n#include <cmath>\n\nint starts_one_ends(int n) {\n    if (n == 1) {\n        return 1; // Only one 1-digit number starts or ends with 1, which is 1 itself.\n    }\n    \n    long long count_start_with_1 = pow(10, n - 1);\n    long long count_end_with_1 = 9 * pow(10, n - 2);\n    long long count_both_start_and_end_with_1 = pow(10, n - 2);\n    \n    long long total_count = count_start_with_1 + count_end_with_1 - count_both_start_and_end_with_1;\n    \n    return total_count;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (starts_one_ends(1) == 1);\n    assert (starts_one_ends(2) == 18);\n    assert (starts_one_ends(3) == 180);\n    assert (starts_one_ends(4) == 1800);\n    assert (starts_one_ends(5) == 18000);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/86", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include <sstream>\n\nusing namespace std;\n\nstring anti_shuffle(string s) {\n    stringstream ss(s);\n    string word, result;\n    bool first = true;\n\n    while (ss >> word) {\n        // Sort the characters in the word\n        sort(word.begin(), word.end());\n        \n        // Append the sorted word to the result\n        if (!first) {\n            result += \" \";  // Add a space before the next word\n        }\n        result += word;\n        first = false;\n    }\n\n    // Handle trailing spaces\n    size_t last_char = s.find_last_not_of(\" \");\n    if (last_char != string::npos) {\n        result += s.substr(last_char + 1);\n    }\n\n    return result;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (anti_shuffle(\"Hi\") == \"Hi\");\n    assert (anti_shuffle(\"hello\") == \"ehllo\");\n    assert (anti_shuffle(\"number\") == \"bemnru\");\n    assert (anti_shuffle(\"abcd\") == \"abcd\");\n    assert (anti_shuffle(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert (anti_shuffle(\"\") == \"\");\n    assert (anti_shuffle(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/84", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\n#include <bitset>\n\nusing namespace std;\n\nstring solve(int N) {\n    int sum = 0;\n    \n    // Step 1: Calculate the sum of the digits\n    while (N > 0) {\n        sum += N % 10;\n        N /= 10;\n    }\n    \n    // Step 2: Convert the sum to binary\n    string binarySum = bitset<14>(sum).to_string(); // 14 bits are enough for sum up to 9*4=36 (since 10000 has 4 digits)\n    \n    // Step 3: Remove leading zeros\n    size_t firstOne = binarySum.find('1');\n    if (firstOne != string::npos) {\n        binarySum = binarySum.substr(firstOne);\n    } else {\n        binarySum = \"0\"; // If the sum is 0, the binary representation is \"0\"\n    }\n    \n    return binarySum;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(1000) == \"1\");\n    assert (solve(150) == \"110\");\n    assert (solve(147) == \"1100\");\n    assert (solve(333) == \"1001\");\n    assert (solve(963) == \"10010\");\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/85", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nint add(vector<int> lst) {\n    int sum = 0;\n    // Iterate through the vector\n    for (int i = 0; i < lst.size(); ++i) {\n        // Check if the index is odd and the element is even\n        if (i % 2 != 0 && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\n// Function to test the add function\nvoid test() {\n    vector<int> test1 = {4, 2, 6, 7};\n    cout << \"Test 1: \" << (add(test1) == 2 ? \"Passed\" : \"Failed\") << endl;\n\n    vector<int> test2 = {1, 3, 5, 7};\n    cout << \"Test 2: \" << (add(test2) == 0 ? \"Passed\" : \"Failed\") << endl;\n\n    vector<int> test3 = {2, 4, 6, 8, 10};\n    cout << \"Test 3: \" << (add(test3) == 12 ? \"Passed\" : \"Failed\") << endl;\n\n    vector<int> test4 = {0, 1, 2, 3, 4, 5, 6};\n    cout << \"Test 4: \" << (add(test4) == 6 ? \"Passed\" : \"Failed\") << endl;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add({4, 88}) == 88);\n    assert (add({4, 5, 6, 7, 2, 122}) == 122);\n    assert (add({4, 0, 6, 7}) == 0);\n    assert (add({4, 4, 6, 8}) == 12);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/89", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\nusing namespace std;\n\nstring encrypt(string s) {\n    for (char &c : s) {\n        if (isalpha(c)) {\n            char base = islower(c) ? 'a' : 'A';\n            c = base + (c - base + 4) % 26;\n        }\n    }\n    return s;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encrypt(\"hi\") == \"lm\");\n    assert (encrypt(\"asdfghjkl\") == \"ewhjklnop\");\n    assert (encrypt(\"gf\") == \"kj\");\n    assert (encrypt(\"et\") == \"ix\");\n    assert (encrypt(\"faewfawefaewg\")==\"jeiajeaijeiak\");\n    assert (encrypt(\"hellomyfriend\")==\"lippsqcjvmirh\");\n    assert (encrypt(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")==\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert (encrypt(\"a\")==\"e\");\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/87", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\n// Function to compare two coordinates for sorting\nbool compare(const vector<int>& a, const vector<int>& b) {\n    if (a[0] == b[0]) {\n        // If the row is the same, sort by column in descending order\n        return a[1] > b[1];\n    }\n    // Otherwise, sort by row in ascending order\n    return a[0] < b[0];\n}\n\nvector<vector<int>> get_row(vector<vector<int>> lst, int x) {\n    vector<vector<int>> result;\n\n    // Iterate through each row and column to find the value x\n    for (int i = 0; i < lst.size(); ++i) {\n        for (int j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                result.push_back({i, j});\n            }\n        }\n    }\n\n    // Sort the result based on the custom comparator\n    sort(result.begin(), result.end(), compare);\n\n    return result;\n}\n\n// Example usage\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}}, 1) , {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}));\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6}}, 2) , {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}}));\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,1,3,4,5,6},\n        {1,2,1,4,5,6},\n        {1,2,3,1,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}\n    }, 1) , {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}}));\n    assert (issame(get_row({}, 1) , {}));\n    assert (issame(get_row({{1}}, 2) , {}));\n    assert (issame(get_row({{}, {1}, {1, 2, 3}}, 3) , {{2, 2}}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/91", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\n#include <sstream>\nusing namespace std;\n\nint is_bored(const string& S) {\n    int count = 0;\n    stringstream ss(S);\n    string sentence;\n    \n    // Split the string into sentences using delimiters\n    while (getline(ss, sentence, '.')) {\n        // Further split the sentence by '?' and '!'\n        stringstream ss_sentence(sentence);\n        string sub_sentence;\n        while (getline(ss_sentence, sub_sentence, '?')) {\n            stringstream ss_sub_sentence(sub_sentence);\n            while (getline(ss_sub_sentence, sub_sentence, '!')) {\n                // Trim leading spaces\n                size_t start = sub_sentence.find_first_not_of(\" \");\n                if (start == string::npos) continue; // Skip empty sentences\n                sub_sentence = sub_sentence.substr(start);\n                \n                // Check if the sentence starts with \"I\"\n                if (sub_sentence.substr(0, 2) == \"I \") {\n                    count++;\n                } else if (sub_sentence == \"I\") {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\n// Test cases\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_bored(\"Hello world\") == 0);\n    assert (is_bored(\"Is the sky blue?\") == 0);\n    assert (is_bored(\"I love It !\") == 1);\n    assert (is_bored(\"bIt\") == 0);\n    assert (is_bored(\"I feel good today. I will be productive. will kill It\") == 2);\n    assert (is_bored(\"You and I are going for a walk\") == 0);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/88", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> sort_array(vector<int> array) {\n    // Create a copy of the original vector to avoid modifying it\n    vector<int> sorted_array = array;\n\n    // Check if the vector is empty or has only one element\n    if (array.empty() || array.size() == 1) {\n        return sorted_array;\n    }\n\n    // Calculate the sum of the first and last elements\n    int sum = array.front() + array.back();\n\n    // Determine the sorting order based on the sum\n    if (sum % 2 == 0) {\n        // Sort in descending order if the sum is even\n        sort(sorted_array.begin(), sorted_array.end(), greater<int>());\n    } else {\n        // Sort in ascending order if the sum is odd\n        sort(sorted_array.begin(), sorted_array.end());\n    }\n\n    return sorted_array;\n}\n\n// Example usage\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({5}) , {5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5}) , {0, 1, 2, 3, 4, 5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5, 6}) , {6, 5, 4, 3, 2, 1, 0}));\n    assert (issame(sort_array({2, 1}) , {1, 2}));\n    assert (issame(sort_array({15, 42, 87, 32 ,11, 0}) , {0, 11, 15, 32, 42, 87}));\n    assert (issame(sort_array({21, 14, 23, 11}) , {23, 21, 14, 11}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/94", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <vector>\n#include <cmath>\nusing namespace std;\n\n// Helper function to check if a number is prime\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\n// Function to find the largest prime and return the sum of its digits\nint skjkasdkd(vector<int> lst) {\n    int largestPrime = -1;\n    \n    // Find the largest prime in the list\n    for (int num : lst) {\n        if (isPrime(num) && num > largestPrime) {\n            largestPrime = num;\n        }\n    }\n    \n    // If no prime number is found, return 0\n    if (largestPrime == -1) return 0;\n    \n    // Calculate the sum of the digits of the largest prime\n    int sumOfDigits = 0;\n    while (largestPrime > 0) {\n        sumOfDigits += largestPrime % 10;\n        largestPrime /= 10;\n    }\n    \n    return sumOfDigits;\n}\n\n// Example usage\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}) == 10);\n    assert (skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}) == 25);\n    assert (skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}) == 13);\n    assert (skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}) == 11);\n    assert (skjkasdkd({0,81,12,3,1,21}) == 3);\n    assert (skjkasdkd({0,8,1,2,1,7}) == 7);\n    assert (skjkasdkd({8191}) == 19);\n    assert (skjkasdkd({8191, 123456, 127, 7}) == 19);\n    assert (skjkasdkd({127, 97, 8192}) == 10);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/92", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <iostream>\n#include <cmath>\n\nbool any_int(float a, float b, float c) {\n    // Check if all numbers are integers\n    if (std::floor(a) == a && std::floor(b) == b && std::floor(c) == c) {\n        // Check if any one number is the sum of the other two\n        if (a == b + c || b == a + c || c == a + b) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (any_int(2, 3, 1)==true);\n    assert (any_int(2.5, 2, 3)==false);\n    assert (any_int(1.5, 5, 3.5)==false);\n    assert (any_int(2, 6, 2)==false);\n    assert (any_int(4, 2, 2)==true);\n    assert (any_int(2.2, 2.2, 2.2)==false);\n    assert (any_int(-4, 6, 2)==true);\n    assert (any_int(2,1,1)==true);\n    assert (any_int(3,4,7)==true);\n    assert (any_int(3.01,4,7)==false);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/93", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\n#include <cctype> // for tolower, toupper, and isalpha functions\n\nusing namespace std;\n\n// Function to encode the message\nstring encode(string message) {\n    for (char &c : message) {\n        // Swap case\n        if (islower(c)) {\n            c = toupper(c);\n        } else if (isupper(c)) {\n            c = tolower(c);\n        }\n\n        // Replace vowels with the letter 2 places ahead\n        switch (tolower(c)) {\n            case 'a': c = 'C'; break;\n            case 'e': c = 'G'; break;\n            case 'i': c = 'K'; break;\n            case 'o': c = 'Q'; break;\n            case 'u': c = 'W'; break;\n            default: break; // Do nothing for non-vowels\n        }\n    }\n    return message;\n}\n\n// Function to test the encode function\nvoid test_encode() {\n    cout << encode(\"test\") << endl; // Expected: \"TGST\"\n    cout << encode(\"This is a message\") << endl; // Expected: \"tHKS KS C MGSSCGG\"\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encode(\"TEST\") == \"tgst\");\n    assert (encode(\"Mudasir\") == \"mWDCSKR\");\n    assert (encode(\"YES\") == \"ygs\");\n    assert (encode(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert (encode(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\n", "result": "failed: a.out: test.cpp:55: int main(): Assertion `encode(\"TEST\") == \"tgst\"' failed.\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/90", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <vector>\n#include <algorithm>\n#include <climits> // For INT_MAX\n#include <iostream>\n\n// Function declaration\nint next_smallest(const std::vector<int>& lst);\n\nint next_smallest(const std::vector<int>& lst) {\n    if (lst.size() < 2) {\n        return INT_MAX; // Not enough elements to find the second smallest\n    }\n\n    int smallest = INT_MAX;\n    int second_smallest = INT_MAX;\n\n    for (int num : lst) {\n        if (num < smallest) {\n            second_smallest = smallest;\n            smallest = num;\n        } else if (num < second_smallest && num != smallest) {\n            second_smallest = num;\n        }\n    }\n\n    if (second_smallest == INT_MAX) {\n        return INT_MAX; // No second smallest element found\n    }\n\n    return second_smallest;\n}\n\n// Example usage\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (next_smallest({1, 2, 3, 4, 5}) == 2);\n    assert (next_smallest({5, 1, 4, 3, 2}) == 2);\n    assert (next_smallest({}) == -1);\n    assert (next_smallest({1, 1}) == -1);\n    assert (next_smallest({1,1,1,1,0}) == 1);\n    assert (next_smallest({-35, 34, 12, -45}) == -35);\n}\n", "result": "failed: a.out: test.cpp:54: int main(): Assertion `next_smallest({}) == -1' failed.\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/95", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\n#include <map>\n#include <cctype> // for islower and isupper functions\n\nusing namespace std;\n\nbool check_dict_case(map<string, string> dict) {\n    if (dict.empty()) {\n        return false;\n    }\n\n    bool all_lower = true;\n    bool all_upper = true;\n\n    for (const auto& pair : dict) {\n        const string& key = pair.first;\n\n        for (char ch : key) {\n            if (!islower(ch)) {\n                all_lower = false;\n            }\n            if (!isupper(ch)) {\n                all_upper = false;\n            }\n        }\n\n        // If neither all_lower nor all_upper is true, we can break early\n        if (!all_lower && !all_upper) {\n            return false;\n        }\n    }\n\n    // If we reach here, either all keys are lowercase or all keys are uppercase\n    return true;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"b\",\"banana\"}}) == true);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) == false);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}}) == false);\n    assert (check_dict_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) == false);\n    assert (check_dict_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) == true  );\n    assert (check_dict_case({{\"fruit\",\"Orange\"}, {\"taste\",\"Sweet\"} }) == true  );\n    assert (check_dict_case({}) == false);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/96", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\nusing namespace std;\n\n// Function to check if a number is prime\nbool is_prime(int num) {\n    if (num <= 1) return false;\n    if (num == 2) return true;\n    if (num % 2 == 0) return false;\n    for (int i = 3; i * i <= num; i += 2) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\n// Function to return a vector of prime numbers less than n\nvector<int> count_up_to(int n) {\n    vector<int> primes;\n    for (int i = 2; i < n; ++i) {\n        if (is_prime(i)) {\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n\n// Main function to test the count_up_to function\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(count_up_to(5) , {2,3}));\n    assert (issame(count_up_to(6) , {2,3,5}));\n    assert (issame(count_up_to(7) , {2,3,5}));\n    assert (issame(count_up_to(10) , {2,3,5,7}));\n    assert (issame(count_up_to(0) , {}));\n    assert (issame(count_up_to(22) , {2,3,5,7,11,13,17,19}));\n    assert (issame(count_up_to(1) , {}));\n    assert (issame(count_up_to(18) , {2,3,5,7,11,13,17}));\n    assert (issame(count_up_to(47) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43}));\n    assert (issame(count_up_to(101) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/98", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\nusing namespace std;\n\nint count_upper(const string& s) {\n    int count = 0;\n    for (size_t i = 0; i < s.length(); i += 2) {\n        char c = s[i];\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_upper(\"aBCdEf\")  == 1);\n    assert (count_upper(\"abcdefg\") == 0);\n    assert (count_upper(\"dBBE\") == 0);\n    assert (count_upper(\"B\")  == 0);\n    assert (count_upper(\"U\")  == 1);\n    assert (count_upper(\"\") == 0);\n    assert (count_upper(\"EEEE\") == 2);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/97", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\nusing namespace std;\n\nint multiply(int a, int b) {\n    // Extract the unit digit of both numbers\n    int unitDigitA = abs(a) % 10;\n    int unitDigitB = abs(b) % 10;\n    \n    // Return the product of the unit digits\n    return unitDigitA * unitDigitB;\n}\n\n// Function to test the multiply function\nvoid test() {\n    cout << \"Test 1: \" << (multiply(148, 412) == 16 ? \"Passed\" : \"Failed\") << endl;\n    cout << \"Test 2: \" << (multiply(19, 28) == 72 ? \"Passed\" : \"Failed\") << endl;\n    cout << \"Test 3: \" << (multiply(2020, 1851) == 0 ? \"Passed\" : \"Failed\") << endl;\n    cout << \"Test 4: \" << (multiply(14, -15) == 20 ? \"Passed\" : \"Failed\") << endl;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (multiply(148, 412) == 16                   );\n    assert (multiply(19, 28) == 72       );\n    assert (multiply(2020, 1851) == 0);\n    assert (multiply(14,-15) == 20   );\n    assert (multiply(76, 67) == 42    );\n    assert (multiply(17, 27) == 49    );\n    assert (multiply(0, 1) == 0);\n    assert (multiply(0, 0) == 0);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/100", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <vector>\nusing namespace std;\n\nvector<int> make_a_pile(int n) {\n    vector<int> pile;\n    int current_stones = n;\n    \n    for (int i = 0; i < n; ++i) {\n        pile.push_back(current_stones);\n        // Determine the next number of stones\n        if (current_stones % 2 == 0) {\n            current_stones += 2; // Next even number\n        } else {\n            current_stones += 2; // Next odd number\n        }\n    }\n    \n    return pile;\n}\n\n// Example usage\n#include <iostream>\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(make_a_pile(3) , {3, 5, 7}));\n    assert (issame(make_a_pile(4) , {4,6,8,10}));\n    assert (issame(make_a_pile(5) , {5, 7, 9, 11, 13}));\n    assert (issame(make_a_pile(6) , {6, 8, 10, 12, 14, 16}));\n    assert (issame(make_a_pile(8) , {8, 10, 12, 14, 16, 18, 20, 22}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/102", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\nusing namespace std;\n\nint choose_num(int x, int y) {\n    // Ensure x is less than or equal to y\n    if (x > y) {\n        return -1;\n    }\n\n    // Start from y and move downwards to find the largest even number\n    for (int i = y; i >= x; --i) {\n        if (i % 2 == 0) {\n            return i;\n        }\n    }\n\n    // If no even number is found, return -1\n    return -1;\n}\n\n// Function to test the choose_num function\nvoid test_choose_num() {\n    cout << \"choose_num(12, 15) = \" << choose_num(12, 15) << \" (Expected: 14)\" << endl;\n    cout << \"choose_num(13, 12) = \" << choose_num(13, 12) << \" (Expected: -1)\" << endl;\n    cout << \"choose_num(8, 10) = \" << choose_num(8, 10) << \" (Expected: 10)\" << endl;\n    cout << \"choose_num(5, 7) = \" << choose_num(5, 7) << \" (Expected: 6)\" << endl;\n    cout << \"choose_num(1, 1) = \" << choose_num(1, 1) << \" (Expected: -1)\" << endl;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (choose_num(12, 15) == 14);\n    assert (choose_num(13, 12) == -1);\n    assert (choose_num(33, 12354) == 12354);\n    assert (choose_num(5234, 5233) == -1);\n    assert (choose_num(6, 29) == 28);\n    assert (choose_num(27, 10) == -1);\n    assert (choose_num(7, 7) == -1);\n    assert (choose_num(546, 546) == 546);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/101", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <cctype>\n\nusing namespace std;\n\nvector<string> words_string(const string& s) {\n    vector<string> words;\n    string word;\n    istringstream stream(s);\n\n    while (getline(stream, word, ',')) { // Split by commas first\n        istringstream subStream(word);\n        while (subStream >> word) { // Then split by spaces\n            words.push_back(word);\n        }\n    }\n\n    return words;\n}\n\n// Function to test the words_string function\nvoid test_words_string() {\n    vector<string> result1 = words_string(\"Hi, my name is John\");\n    vector<string> expected1 = {\"Hi\", \"my\", \"name\", \"is\", \"John\"};\n    assert(result1 == expected1);\n\n    vector<string> result2 = words_string(\"One, two, three, four, five, six\");\n    vector<string> expected2 = {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"};\n    assert(result2 == expected2);\n\n    cout << \"All tests passed!\" << endl;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(words_string(\"Hi, my name is John\") , {\"Hi\", \"my\", \"name\", \"is\", \"John\"}));\n    assert (issame(words_string(\"One, two, three, four, five, six\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n    assert (issame(words_string(\"Hi, my name\") , {\"Hi\", \"my\", \"name\"}));\n    assert (issame(words_string(\"One,, two, three, four, five, six,\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n    assert (issame(words_string(\"\") , {}));\n    assert (issame(words_string(\"ahmed     , gamal\") , {\"ahmed\", \"gamal\"}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/99", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <iostream>\n#include <cmath>\n#include <string>\n#include <sstream>\n\nint closest_integer(const std::string& value) {\n    // Convert the string to a double\n    std::istringstream iss(value);\n    double num;\n    if (!(iss >> num)) {\n        throw std::invalid_argument(\"Invalid input: not a valid number\");\n    }\n\n    // Determine the closest integer\n    double fractional_part = num - static_cast<long>(num);\n    if (fractional_part == 0.5 || fractional_part == -0.5) {\n        // Rounding away from zero\n        return (num > 0) ? static_cast<int>(ceil(num)) : static_cast<int>(floor(num));\n    } else {\n        // Standard rounding\n        return static_cast<int>(round(num));\n    }\n}\n\n// Function to test the closest_integer function\nvoid test_closest_integer() {\n    std::cout << closest_integer(\"10\") << std::endl;     // Output: 10\n    std::cout << closest_integer(\"15.3\") << std::endl;   // Output: 15\n    std::cout << closest_integer(\"14.5\") << std::endl;   // Output: 15\n    std::cout << closest_integer(\"-14.5\") << std::endl;  // Output: -15\n    std::cout << closest_integer(\"14.1\") << std::endl;   // Output: 14\n    std::cout << closest_integer(\"-14.1\") << std::endl;  // Output: -14\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (closest_integer(\"10\") == 10);\n    assert (closest_integer(\"14.5\") == 15);\n    assert (closest_integer(\"-15.5\") == -16);\n    assert (closest_integer(\"15.3\") == 15);\n    assert (closest_integer(\"0\") == 0);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/105", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nvector<string> by_length(vector<int> arr) {\n    // Define the mapping from digits to words\n    const vector<string> digitWords = {\n        \"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    };\n\n    // Filter out numbers that are not between 1 and 9\n    vector<int> filteredArr;\n    for (int num : arr) {\n        if (num >= 1 && num <= 9) {\n            filteredArr.push_back(num);\n        }\n    }\n\n    // Sort the filtered array\n    sort(filteredArr.begin(), filteredArr.end());\n\n    // Reverse the sorted array\n    reverse(filteredArr.begin(), filteredArr.end());\n\n    // Convert the numbers to their corresponding words\n    vector<string> result;\n    for (int num : filteredArr) {\n        result.push_back(digitWords[num]);\n    }\n\n    return result;\n}\n\n// Example usage\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(by_length({2, 1, 1, 4, 5, 8, 2, 3}) , {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}));\n    assert (issame(by_length({}) , {}));\n    assert (issame(by_length({1, -1 , 55}) , {\"One\"}));\n    assert (issame(by_length({1, -1, 3, 2}) , {\"Three\", \"Two\", \"One\"}));\n    assert (issame(by_length({9, 4, 8}) , {\"Nine\", \"Eight\", \"Four\"}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/106", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\n// Helper function to calculate factorial\nint factorial(int num) {\n    int result = 1;\n    for (int i = 1; i <= num; ++i) {\n        result *= i;\n    }\n    return result;\n}\n\n// Helper function to calculate the sum of numbers from 1 to num\nint sumTo(int num) {\n    return (num * (num + 1)) / 2;\n}\n\n// Main function f\nvector<int> f(int n) {\n    vector<int> result(n);\n    for (int i = 1; i <= n; ++i) {\n        if (i % 2 == 0) {\n            // If i is even, store the factorial of i\n            result[i - 1] = factorial(i);\n        } else {\n            // If i is odd, store the sum of numbers from 1 to i\n            result[i - 1] = sumTo(i);\n        }\n    }\n    return result;\n}\n\n// Function to test the implementation\nvoid test() {\n    vector<int> result = f(5);\n    for (int val : result) {\n        cout << val << \" \";\n    }\n    cout << endl;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(f(5) , {1, 2, 6, 24, 15}));\n    assert (issame(f(7) , {1, 2, 6, 24, 15, 720, 28}));\n    assert (issame(f(1) , {1}));\n    assert (issame(f(3) , {1, 2, 6}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/104", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n// Function to check if a number has any even digit\nbool has_even_digit(int num) {\n    while (num > 0) {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            return true;\n        }\n        num /= 10;\n    }\n    return false;\n}\n\n// Function to filter and sort the vector\nvector<int> unique_digits(vector<int> x) {\n    vector<int> result;\n    \n    // Filter out numbers with even digits\n    for (int num : x) {\n        if (!has_even_digit(num)) {\n            result.push_back(num);\n        }\n    }\n    \n    // Sort the result vector\n    sort(result.begin(), result.end());\n    \n    return result;\n}\n\n// Function to test the unique_digits function\nvoid test_unique_digits() {\n    vector<int> test1 = {15, 33, 1422, 1};\n    vector<int> expected1 = {1, 15, 33};\n    assert(unique_digits(test1) == expected1);\n\n    vector<int> test2 = {152, 323, 1422, 10};\n    vector<int> expected2 = {};\n    assert(unique_digits(test2) == expected2);\n\n    cout << \"All tests passed!\" << endl;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique_digits({15, 33, 1422, 1}) , {1, 15, 33}));\n    assert (issame(unique_digits({152, 323, 1422, 10}) , {}));\n    assert (issame(unique_digits({12345, 2033, 111, 151}) , {111, 151}));\n    assert (issame(unique_digits({135, 103, 31}) , {31, 135}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/107", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\n// Function to check if a number is a palindrome\nbool is_palindrome(int num) {\n    string str_num = to_string(num);\n    int left = 0, right = str_num.length() - 1;\n    while (left < right) {\n        if (str_num[left] != str_num[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n\n// Function to count even and odd palindromes in the range [1, n]\nvector<int> even_odd_palindrome(int n) {\n    int even_count = 0, odd_count = 0;\n    \n    for (int i = 1; i <= n; ++i) {\n        if (is_palindrome(i)) {\n            if (i % 2 == 0) {\n                even_count++;\n            } else {\n                odd_count++;\n            }\n        }\n    }\n    \n    return {even_count, odd_count};\n}\n\n// Function to test the solution\nvoid test_even_odd_palindrome() {\n    vector<int> result1 = even_odd_palindrome(3);\n    cout << \"Test 1: Expected (1, 2), Got (\" << result1[0] << \", \" << result1[1] << \")\" << endl;\n\n    vector<int> result2 = even_odd_palindrome(12);\n    cout << \"Test 2: Expected (4, 6), Got (\" << result2[0] << \", \" << result2[1] << \")\" << endl;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_palindrome(123) , {8, 13}));\n    assert (issame(even_odd_palindrome(12) , {4, 6}));\n    assert (issame(even_odd_palindrome(3) , {1, 2}));\n    assert (issame(even_odd_palindrome(63) , {6, 8}));\n    assert (issame(even_odd_palindrome(25) , {5, 6}));\n    assert (issame(even_odd_palindrome(19) , {4, 6}));\n    assert (issame(even_odd_palindrome(9) , {4, 5}));\n    assert (issame(even_odd_palindrome(1) , {0, 1}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/103", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\n#include <cmath>\n\nusing namespace std;\n\nstring rounded_avg(int n, int m) {\n    // Step 1: Check if n is greater than m\n    if (n > m) {\n        return \"-1\";\n    }\n\n    // Step 2: Calculate the sum of all integers from n to m\n    long long sum = ((long long)m * (m + 1) / 2) - ((long long)(n - 1) * n / 2);\n\n    // Step 3: Compute the average\n    int count = m - n + 1;\n    double average = static_cast<double>(sum) / count;\n\n    // Step 4: Round the average to the nearest integer (rounding down if there's a tie)\n    int rounded_avg = floor(average + 0.5);\n\n    // Step 5: Convert the rounded average to binary\n    string binary = \"\";\n    while (rounded_avg > 0) {\n        binary = to_string(rounded_avg % 2) + binary;\n        rounded_avg /= 2;\n    }\n\n    return binary.empty() ? \"0\" : binary;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (rounded_avg(1, 5) == \"11\");\n    assert (rounded_avg(7, 13) == \"1010\");\n    assert (rounded_avg(964,977) == \"1111001010\");\n    assert (rounded_avg(996,997) == \"1111100100\");\n    assert (rounded_avg(560,851) == \"1011000001\");  \n    assert (rounded_avg(185,546) == \"101101101\");\n    assert (rounded_avg(362,496) == \"110101101\");\n    assert (rounded_avg(350,902) == \"1001110010\");\n    assert (rounded_avg(197,233) == \"11010111\");\n    assert (rounded_avg(7, 5) == \"-1\");\n    assert (rounded_avg(5, 1) == \"-1\");\n    assert (rounded_avg(5, 5) == \"101\");\n}\n", "result": "failed: a.out: test.cpp:53: int main(): Assertion `rounded_avg(964,977) == \"1111001010\"' failed.\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/109", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nbool move_one_ball(vector<int> arr) {\n    // If the vector is empty, return true\n    if (arr.empty()) {\n        return true;\n    }\n\n    int n = arr.size();\n    int count = 0; // To count the number of discontinuities\n\n    // Check for discontinuities\n    for (int i = 1; i < n; ++i) {\n        if (arr[i - 1] > arr[i]) {\n            count++;\n            // If more than one discontinuity is found, return false\n            if (count > 1) {\n                return false;\n            }\n        }\n    }\n\n    // Check the boundary condition\n    if (arr[n - 1] > arr[0]) {\n        count++;\n    }\n\n    // If there is at most one discontinuity, return true\n    return count <= 1;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (move_one_ball({3, 4, 5, 1, 2})==true);\n    assert (move_one_ball({3, 5, 10, 1, 2})==true);\n    assert (move_one_ball({4, 3, 1, 2})==false);\n    assert (move_one_ball({3, 5, 4, 1, 2})==false);\n    assert (move_one_ball({})==true);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/111", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\n#include <map>\n#include <sstream>\n#include <vector>\n\nusing namespace std;\n\nmap<char, int> histogram(const string& test) {\n    map<char, int> freqMap;\n    stringstream ss(test);\n    char ch;\n\n    // Count the frequency of each character\n    while (ss >> ch) {\n        freqMap[ch]++;\n    }\n\n    // Find the maximum frequency\n    int maxFreq = 0;\n    for (const auto& pair : freqMap) {\n        if (pair.second > maxFreq) {\n            maxFreq = pair.second;\n        }\n    }\n\n    // Create a result map with only the characters that have the maximum frequency\n    map<char, int> result;\n    for (const auto& pair : freqMap) {\n        if (pair.second == maxFreq) {\n            result.insert(pair);\n        }\n    }\n\n    return result;\n}\n\n// Function to test the histogram function\nvoid testHistogram() {\n    auto check = [](const string& input, const map<char, int>& expected) {\n        map<char, int> result = histogram(input);\n        if (result == expected) {\n            cout << \"Test passed: \" << input << endl;\n        } else {\n            cout << \"Test failed: \" << input << endl;\n            cout << \"Expected: \";\n            for (const auto& pair : expected) {\n                cout << \"{\" << pair.first << \", \" << pair.second << \"} \";\n            }\n            cout << \"\\nGot: \";\n            for (const auto& pair : result) {\n                cout << \"{\" << pair.first << \", \" << pair.second << \"} \";\n            }\n            cout << endl;\n        }\n    };\n\n    check(\"a b c\", {{'a', 1}, {'b', 1}, {'c', 1}});\n    check(\"a b b a\", {{'a', 2}, {'b', 2}});\n    check(\"a b c a b\", {{'a', 2}, {'b', 2}});\n    check(\"b b b b a\", {{'b', 4}});\n    check(\"\", {});\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\nint main(){\n    assert (issame(histogram(\"a b b a\") , {{'a',2},{'b', 2}}));\n    assert (issame(histogram(\"a b c a b\") , {{'a', 2},{'b', 2}}));\n    assert (issame(histogram(\"a b c d g\") , {{'a', 1}, {'b', 1}, {'c', 1}, {'d', 1}, {'g', 1}}));\n    assert (issame(histogram(\"r t g\") , {{'r', 1},{'t', 1},{'g', 1}}));\n    assert (issame(histogram(\"b b b b a\") , {{'b', 4}}));\n    assert (issame(histogram(\"r t g\") , {{'r', 1},{'t', 1},{'g', 1}}));\n    assert (issame(histogram(\"\") , {}));\n    assert (issame(histogram(\"a\") , {{'a', 1}}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/108", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <vector>\n#include <cmath>\nusing namespace std;\n\n// Function to calculate the sum of digits of a number\nint sum_of_digits(int num) {\n    int sum = 0;\n    bool is_negative = num < 0;\n    while (num != 0) {\n        int digit = num % 10;\n        if (is_negative && num < 0) {\n            digit = -digit; // Make the first digit negative\n            is_negative = false; // Only the first digit should be negative\n        }\n        sum += digit;\n        num /= 10;\n    }\n    return sum;\n}\n\n// Function to count the number of elements with a sum of digits > 0\nint count_nums(vector<int> n) {\n    int count = 0;\n    for (int num : n) {\n        if (sum_of_digits(num) > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n// Example usage\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_nums({}) == 0);\n    assert (count_nums({-1, -2, 0}) == 0);\n    assert (count_nums({1, 1, 2, -2, 3, 4, 5}) == 6);\n    assert (count_nums({1, 6, 9, -6, 0, 1, 5}) == 5);\n    assert (count_nums({1, 100, 98, -7, 1, -1}) == 4);\n    assert (count_nums({12, 23, 34, -45, -56, 0}) == 5);\n    assert (count_nums({-0, 1}) == 1);\n    assert (count_nums({1}) == 1);\n}\n", "result": "failed: a.out: test.cpp:53: int main(): Assertion `count_nums({-1, -2, 0}) == 0' failed.\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/110", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring exchange(vector<int> lst1, vector<int> lst2) {\n    int oddCount = 0;\n    int evenCount = 0;\n\n    // Count the number of odd elements in lst1\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            oddCount++;\n        }\n    }\n\n    // Count the number of even elements in lst2\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            evenCount++;\n        }\n    }\n\n    // Check if it is possible to exchange\n    if (oddCount <= evenCount) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (exchange({1, 2, 3, 4}, {1, 2, 3, 4}) == \"YES\");\n    assert (exchange({1, 2, 3, 4}, {1, 5, 3, 4}) == \"NO\");\n    assert (exchange({1, 2, 3, 4}, {2, 1, 4, 3}) == \"YES\" );\n    assert (exchange({5, 7, 3}, {2, 6, 4}) == \"YES\");\n    assert (exchange({5, 7, 3}, {2, 6, 3}) == \"NO\" );\n    assert (exchange({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}) == \"NO\");\n    assert (exchange({100, 200}, {200, 200}) == \"YES\");\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/112", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\n// Function to check if a string is a palindrome\nbool isPalindrome(const string& str) {\n    int left = 0, right = str.size() - 1;\n    while (left < right) {\n        if (str[left] != str[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n\n// Function to remove characters from s that are present in c and check if the result is a palindrome\nvector<string> reverse_delete(string s, string c) {\n    // Remove characters from s that are present in c\n    for (char ch : c) {\n        s.erase(remove(s.begin(), s.end(), ch), s.end());\n    }\n\n    // Check if the resulting string is a palindrome\n    bool isPal = isPalindrome(s);\n\n    // Prepare the result vector\n    vector<string> result;\n    result.push_back(s);\n    result.push_back(isPal ? \"True\" : \"False\");\n\n    return result;\n}\n\n// Main function to test the reverse_delete function\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(reverse_delete(\"abcde\",\"ae\") , {\"bcd\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdef\", \"b\") , {\"acdef\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"ab\") , {\"cdedc\",\"True\"}));\n    assert (issame(reverse_delete(\"dwik\",\"w\") , {\"dik\",\"False\"}));\n    assert (issame(reverse_delete(\"a\",\"a\") , {\"\",\"True\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"\") , {\"abcdedcba\",\"True\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"v\") , {\"abcdedcba\",\"True\"}));\n    assert (issame(reverse_delete(\"vabba\",\"v\") , {\"abba\",\"True\"}));\n    assert (issame(reverse_delete(\"mamma\", \"mia\") , {\"\", \"True\"}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/113", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> odd_count(vector<string> lst) {\n    vector<string> result;\n    for (const auto& s : lst) {\n        int odd_count = 0;\n        for (char c : s) {\n            if ((c - '0') % 2 != 0) {\n                odd_count++;\n            }\n        }\n        string output = \"the number of odd elements \" + to_string(odd_count) + \n                        \"n the str\" + to_string(odd_count) + \"ng \" + to_string(odd_count) + \n                        \" of the \" + to_string(odd_count) + \"nput.\";\n        result.push_back(output);\n    }\n    return result;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(odd_count({\"1234567\"}) , {\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}));\n    assert (issame(odd_count({\"3\",\"11111111\"}) , {\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}));\n    assert (issame(odd_count({\"271\", \"137\", \"314\"}) , {\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\",\n        \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\"\n    }));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/117", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <climits>\n#include <cstring>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cctype> // for isalpha and tolower\n#include <cassert> // for assert\n\nusing namespace std;\n\n// Function to check if a character is a consonant\nbool is_consonant(char c) {\n    c = tolower(c);\n    return isalpha(c) && c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u';\n}\n\n// Function to split the string into words\nvector<string> split_string(const string& s) {\n    vector<string> words;\n    string word;\n    for (char c : s) {\n        if (c == ' ') {\n            if (!word.empty()) {\n                words.push_back(word);\n                word.clear();\n            }\n        } else {\n            word += c;\n        }\n    }\n    if (!word.empty()) {\n        words.push_back(word);\n    }\n    return words;\n}\n\n// Function to count consonants in a word\nint count_consonants(const string& word) {\n    int count = 0;\n    for (char c : word) {\n        if (is_consonant(c)) {\n            count++;\n        }\n    }\n    return count;\n}\n\n// Main function to select words with exactly n consonants\nvector<string> select_words(const string& s, int n) {\n    vector<string> words = split_string(s);\n    vector<string> result;\n    for (const string& word : words) {\n        if (count_consonants(word) == n) {\n            result.push_back(word);\n        }\n    }\n    return result;\n}\n\n// Function to test the select_words function\nvoid test_select_words() {\n    vector<string> result1 = select_words(\"Mary had a little lamb\", 4);\n    assert((result1 == vector<string>{\"little\"}));\n\n    vector<string> result2 = select_words(\"Mary had a little lamb\", 3);\n    assert((result2 == vector<string>{\"Mary\", \"lamb\"}));\n\n    vector<string> result3 = select_words(\"simple white space\", 2);\n    assert((result3 == vector<string>{}));\n\n    vector<string> result4 = select_words(\"Hello world\", 4);\n    assert((result4 == vector<string>{\"world\"}));\n\n    vector<string> result5 = select_words(\"Uncle sam\", 3);\n    assert((result5 == vector<string>{\"Uncle\"}));\n\n    cout << \"All tests passed!\" << endl;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(select_words(\"Mary had a little lamb\", 4) , {\"little\"}   ));\n    assert (issame(select_words(\"Mary had a little lamb\", 3) , {\"Mary\", \"lamb\"} ));\n    assert (issame(select_words(\"simple white space\", 2) , {}     ));\n    assert (issame(select_words(\"Hello world\", 4) , {\"world\"}  ));\n    assert (issame(select_words(\"Uncle sam\", 3) , {\"Uncle\"}));\n    assert (issame(select_words(\"\", 4) , {}));\n    assert (issame(select_words(\"a b c d e f\", 1) , {\"b\", \"c\", \"d\", \"f\"}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/115", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <vector>\n#include <cmath>\nusing namespace std;\n\nint max_fill(vector<vector<int>> grid, int capacity) {\n    int total_operations = 0;\n    \n    // Iterate through each well (row in the grid)\n    for (const auto& well : grid) {\n        int water_units = 0;\n        \n        // Calculate the total water units in the current well\n        for (int unit : well) {\n            water_units += unit;\n        }\n        \n        // Calculate the number of times the bucket needs to be lowered for this well\n        int operations = ceil(static_cast<double>(water_units) / capacity);\n        \n        // Add the operations for this well to the total\n        total_operations += operations;\n    }\n    \n    return total_operations;\n}\n\n// Example usage\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (max_fill({{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}, 1) == 6);\n    assert (max_fill({{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}, 2) == 5);\n    assert (max_fill({{0,0,0}, {0,0,0}}, 5) == 0);\n    assert (max_fill({{1,1,1,1}, {1,1,1,1}}, 2) == 4);\n    assert (max_fill({{1,1,1,1}, {1,1,1,1}}, 9) == 2);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/114", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <vector>\n#include <climits>\nusing namespace std;\n\nlong long minSubArraySum(vector<long long> nums) {\n    long long minSum = LLONG_MAX; // Initialize minSum to the largest possible value\n    long long currentSum = 0;      // Initialize currentSum to 0\n\n    for (long long num : nums) {\n        currentSum += num; // Add the current number to the currentSum\n        if (currentSum < minSum) {\n            minSum = currentSum; // Update minSum if currentSum is smaller\n        }\n        if (currentSum > 0) {\n            currentSum = 0; // Reset currentSum to 0 if it becomes positive\n        }\n    }\n\n    return minSum;\n}\n\n// Example usage\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (minSubArraySum({2, 3, 4, 1, 2, 4}) == 1);\n    assert (minSubArraySum({-1, -2, -3}) == -6);\n    assert (minSubArraySum({-1, -2, -3, 2, -10}) == -14);\n    assert (minSubArraySum({-9999999999999999}) == -9999999999999999);\n    assert (minSubArraySum({0, 10, 20, 1000000}) == 0);\n    assert (minSubArraySum({-1, -2, -3, 10, -5}) == -6);\n    assert (minSubArraySum({100, -1, -2, -3, 10, -5}) == -6);\n    assert (minSubArraySum({10, 11, 13, 8, 3, 4}) == 3);\n    assert (minSubArraySum({100, -33, 32, -1, 0, -2}) == -33);\n    assert (minSubArraySum({-10}) == -10);\n    assert (minSubArraySum({7}) == 7);\n    assert (minSubArraySum({1, -1}) == -1);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/116", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <bitset>\n\nusing namespace std;\n\n// Function to count the number of ones in the binary representation of an integer\nint count_ones(int n) {\n    return bitset<32>(n).count();\n}\n\n// Custom comparator for sorting\nbool custom_compare(int a, int b) {\n    int count_a = count_ones(a);\n    int count_b = count_ones(b);\n    \n    if (count_a == count_b) {\n        return a < b; // If the number of ones is the same, sort by decimal value\n    }\n    return count_a < count_b; // Otherwise, sort by the number of ones\n}\n\nvector<int> sort_array(vector<int> arr) {\n    // Sort the array using the custom comparator\n    sort(arr.begin(), arr.end(), custom_compare);\n    return arr;\n}\n\n// Function to test the solution\nvoid test() {\n    vector<int> test1 = {1, 5, 2, 3, 4};\n    vector<int> expected1 = {1, 2, 4, 3, 5};\n    assert(sort_array(test1) == expected1);\n\n    vector<int> test2 = {-2, -3, -4, -5, -6};\n    vector<int> expected2 = {-4, -2, -6, -5, -3};\n    assert(sort_array(test2) == expected2);\n\n    vector<int> test3 = {1, 0, 2, 3, 4};\n    vector<int> expected3 = {0, 1, 2, 4, 3};\n    assert(sort_array(test3) == expected3);\n\n    cout << \"All tests passed!\" << endl;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({1,5,2,3,4}) , {1, 2, 4, 3, 5}));\n    assert (issame(sort_array({-2,-3,-4,-5,-6}) , {-4, -2, -6, -5, -3}));\n    assert (issame(sort_array({1,0,2,3,4}) , {0, 1, 2, 4, 3}));\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({2,5,77,4,5,3,5,7,2,3,4}) , {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77}));\n    assert (issame(sort_array({3,6,44,12,32,5}) , {32, 3, 5, 6, 12, 44}));\n    assert (issame(sort_array({2,4,8,16,32}) , {2, 4, 8, 16, 32}));\n    assert (issame(sort_array({2,4,8,16,32}) , {2, 4, 8, 16, 32}));\n}\n", "result": "failed: a.out: test.cpp:73: int main(): Assertion `issame(sort_array({-2,-3,-4,-5,-6}) , {-4, -2, -6, -5, -3})' failed.\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/118", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\nusing namespace std;\n\n// Function to check if a character is a vowel\nbool is_vowel(char c) {\n    return c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ||\n           c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n}\n\n// Function to check if a character is a consonant\nbool is_consonant(char c) {\n    return !is_vowel(c) && isalpha(c);\n}\n\nstring get_closest_vowel(string word) {\n    int n = word.length();\n    \n    // Iterate from the right side of the word\n    for (int i = n - 2; i > 0; --i) {\n        if (is_vowel(word[i]) && is_consonant(word[i - 1]) && is_consonant(word[i + 1])) {\n            return string(1, word[i]);\n        }\n    }\n    \n    // If no such vowel is found, return an empty string\n    return \"\";\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_closest_vowel(\"yogurt\") == \"u\");\n    assert (get_closest_vowel(\"full\") == \"u\");\n    assert (get_closest_vowel(\"easy\") == \"\");\n    assert (get_closest_vowel(\"eAsy\") == \"\");\n    assert (get_closest_vowel(\"ali\") == \"\");\n    assert (get_closest_vowel(\"bad\") == \"a\");\n    assert (get_closest_vowel(\"most\") ==\"o\");\n    assert (get_closest_vowel(\"ab\") == \"\");\n    assert (get_closest_vowel(\"ba\") == \"\");\n    assert (get_closest_vowel(\"quick\") == \"\");\n    assert (get_closest_vowel(\"anime\") == \"i\");\n    assert (get_closest_vowel(\"Asia\") == \"\");\n    assert (get_closest_vowel(\"Above\") == \"o\");\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/119", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring match_parens(vector<string> lst) {\n    // Count the number of open and close parentheses in each string\n    int open1 = 0, close1 = 0;\n    for (char c : lst[0]) {\n        if (c == '(') open1++;\n        else close1++;\n    }\n\n    int open2 = 0, close2 = 0;\n    for (char c : lst[1]) {\n        if (c == '(') open2++;\n        else close2++;\n    }\n\n    // Check if concatenating in one order results in a balanced string\n    bool firstOrderBalanced = (open1 >= close1 && open2 >= close2 && open1 + open2 == close1 + close2);\n    bool secondOrderBalanced = (open2 >= close2 && open1 >= close1 && open1 + open2 == close1 + close2);\n\n    // Return \"Yes\" if either order is balanced, otherwise \"No\"\n    if (firstOrderBalanced || secondOrderBalanced) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\n// Example usage\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (match_parens({\"()(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \")\"}) == \"No\");\n    assert (match_parens({\"(()(())\", \"())())\"}) == \"No\");\n    assert (match_parens({\")())\", \"(()()(\"}) == \"Yes\");\n    assert (match_parens({\"(())))\", \"(()())((\"}) == \"Yes\");\n    assert (match_parens({\"()\", \"())\"}) == \"No\");\n    assert (match_parens({\"(()(\", \"()))()\"}) == \"Yes\");\n    assert (match_parens({\"((((\", \"((())\"}) == \"No\");\n    assert (match_parens({\")(()\", \"(()(\"}) == \"No\");\n    assert (match_parens({\")(\", \")(\"}) == \"No\");\n    assert (match_parens({\"(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \"(\"}) == \"Yes\" );\n}\n", "result": "failed: a.out: test.cpp:51: int main(): Assertion `match_parens({\"()(\", \")\"}) == \"Yes\"' failed.\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/121", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <vector>\nusing namespace std;\n\nint solution(vector<int> lst) {\n    int sum = 0;\n    // Iterate through the vector, considering only even indices\n    for (size_t i = 0; i < lst.size(); i += 2) {\n        // Check if the element at the even index is odd\n        if (lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\n// Example usage\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solution({5, 8, 7, 1})    == 12);\n    assert (solution({3, 3, 3, 3, 3}) == 9);\n    assert (solution({30, 13, 24, 321}) == 0);\n    assert (solution({5, 9}) == 5);\n    assert (solution({2, 4, 8}) == 0);\n    assert (solution({30, 13, 23, 32}) == 23);\n    assert (solution({3, 13, 2, 9}) == 3);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/120", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> maximum(vector<int> arr, int k) {\n    // Step 1: Sort the array in descending order\n    sort(arr.begin(), arr.end(), greater<int>());\n\n    // Step 2: Extract the first k elements\n    vector<int> result(arr.begin(), arr.begin() + k);\n\n    // Step 3: Sort the extracted elements in ascending order\n    sort(result.begin(), result.end());\n\n    // Step 4: Return the result\n    return result;\n}\n\n// Function to test the solution\nvoid test() {\n    vector<int> arr1 = {-3, -4, 5};\n    int k1 = 3;\n    vector<int> result1 = maximum(arr1, k1);\n    for (int num : result1) {\n        cout << num << \" \";\n    }\n    cout << endl;\n\n    vector<int> arr2 = {4, -4, 4};\n    int k2 = 2;\n    vector<int> result2 = maximum(arr2, k2);\n    for (int num : result2) {\n        cout << num << \" \";\n    }\n    cout << endl;\n\n    vector<int> arr3 = {-3, 2, 1, 2, -1, -2, 1};\n    int k3 = 1;\n    vector<int> result3 = maximum(arr3, k3);\n    for (int num : result3) {\n        cout << num << \" \";\n    }\n    cout << endl;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(maximum({-3, -4, 5}, 3) , {-4, -3, 5}));\n    assert (issame(maximum({4, -4, 4}, 2) , {4, 4}));\n    assert (issame(maximum({-3, 2, 1, 2, -1, -2, 1}, 1) , {2}));\n    assert (issame(maximum({123, -123, 20, 0 , 1, 2, -3}, 3) , {2, 20, 123}));\n    assert (issame(maximum({-123, 20, 0 , 1, 2, -3}, 4) , {0, 1, 2, 20}));\n    assert (issame(maximum({5, 15, 0, 3, -13, -8, 0}, 7) , {-13, -8, 0, 0, 3, 5, 15}));\n    assert (issame(maximum({-1, 0, 2, 5, 3, -10}, 2) , {3, 5}));\n    assert (issame(maximum({1, 0, 5, -7}, 1) , {5}));\n    assert (issame(maximum({4, -4}, 2) , {-4, 4}));\n    assert (issame(maximum({-10, 10}, 2) , {-10, 10}));\n    assert (issame(maximum({1, 2, 3, -23, 243, -400, 0}, 0) , {}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/123", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> get_odd_collatz(int n) {\n    vector<int> sequence;\n    while (n != 1) {\n        sequence.push_back(n);\n        if (n % 2 == 0) {\n            n /= 2;\n        } else {\n            n = 3 * n + 1;\n        }\n    }\n    sequence.push_back(1); // The sequence always ends with 1\n\n    // Filter out the odd numbers\n    vector<int> odd_numbers;\n    for (int num : sequence) {\n        if (num % 2 != 0) {\n            odd_numbers.push_back(num);\n        }\n    }\n\n    // Sort the odd numbers\n    sort(odd_numbers.begin(), odd_numbers.end());\n\n    return odd_numbers;\n}\n\n// Example usage\n#include <iostream>\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_odd_collatz(14) , {1, 5, 7, 11, 13, 17}));\n    assert (issame(get_odd_collatz(5) , {1, 5}));\n    assert (issame(get_odd_collatz(12) , {1, 3, 5}));\n    assert (issame(get_odd_collatz(1) , {1}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/122", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nint add_elements(vector<int> arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k; ++i) {\n        // Check if the current element has at most two digits\n        if (arr[i] >= -99 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\n// Function to test the solution\nvoid test_add_elements() {\n    vector<int> arr = {111, 21, 3, 4000, 5, 6, 7, 8, 9};\n    int k = 4;\n    int result = add_elements(arr, k);\n    cout << \"Output: \" << result << endl; // Expected output: 24\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add_elements({1,-2,-3,41,57,76,87,88,99}, 3) == -4);\n    assert (add_elements({111,121,3,4000,5,6}, 2) == 0);\n    assert (add_elements({11,21,3,90,5,6,7,8,9}, 4) == 125);\n    assert (add_elements({111,21,3,4000,5,6,7,8,9}, 4) == 24);\n    assert (add_elements({1}, 1) == 1);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/124", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\n#include <sstream>\n#include <vector>\n\nusing namespace std;\n\nbool is_leap_year(int year) {\n    return (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));\n}\n\nbool valid_date(const string& date) {\n    // Check if the date string is empty\n    if (date.empty()) {\n        return false;\n    }\n\n    // Parse the date string\n    vector<int> parts(3);\n    stringstream ss(date);\n    string part;\n    int i = 0;\n    while (getline(ss, part, '-')) {\n        if (i >= 3) {\n            return false; // More than three parts\n        }\n        try {\n            parts[i] = stoi(part);\n        } catch (const invalid_argument&) {\n            return false; // Invalid conversion\n        }\n        i++;\n    }\n\n    // Check if we have exactly three parts\n    if (i != 3) {\n        return false;\n    }\n\n    int month = parts[0];\n    int day = parts[1];\n    int year = parts[2];\n\n    // Validate the month\n    if (month < 1 || month > 12) {\n        return false;\n    }\n\n    // Validate the day based on the month\n    if (day < 1) {\n        return false;\n    }\n\n    switch (month) {\n        case 1: case 3: case 5: case 7: case 8: case 10: case 12:\n            if (day > 31) return false;\n            break;\n        case 4: case 6: case 9: case 11:\n            if (day > 30) return false;\n            break;\n        case 2:\n            if (is_leap_year(year)) {\n                if (day > 29) return false;\n            } else {\n                if (day > 28) return false;\n            }\n            break;\n    }\n\n    return true;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (valid_date(\"03-11-2000\") == true);\n    assert (valid_date(\"15-01-2012\") == false);\n    assert (valid_date(\"04-0-2040\") == false);\n    assert (valid_date(\"06-04-2020\") == true);\n    assert (valid_date(\"01-01-2007\") == true);\n    assert (valid_date(\"03-32-2011\") == false);\n    assert (valid_date(\"\") == false);\n    assert (valid_date(\"04-31-3000\") == false);\n    assert (valid_date(\"06-06-2005\") == true);\n    assert (valid_date(\"21-31-2000\") == false);\n    assert (valid_date(\"04-12-2003\") == true);\n    assert (valid_date(\"04122003\") == false);\n    assert (valid_date(\"20030412\") == false);\n    assert (valid_date(\"2003-04\") == false);\n    assert (valid_date(\"2003-04-12\") == false);\n    assert (valid_date(\"04-2003\") == false);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/125", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <climits>\n#include <cstring>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <cassert>  // Include the <cassert> header\n#include <cstdlib>  // Include the <cstdlib> header for std::exit\n\nusing namespace std;\n\nvector<string> split_words(const string& txt) {\n    // Check for whitespace\n    if (txt.find(' ') != string::npos) {\n        stringstream ss(txt);\n        vector<string> result;\n        string word;\n        while (ss >> word) {\n            result.push_back(word);\n        }\n        return result;\n    }\n\n    // Check for commas\n    if (txt.find(',') != string::npos) {\n        stringstream ss(txt);\n        vector<string> result;\n        string segment;\n        while (getline(ss, segment, ',')) {\n            result.push_back(segment);\n        }\n        return result;\n    }\n\n    // Count lowercase letters with odd order\n    int count = 0;\n    for (char c : txt) {\n        if (islower(c) && ((c - 'a') % 2 == 1)) {\n            count++;\n        }\n    }\n\n    return {to_string(count)};\n}\n\n// Function to test the solution\nvoid test_split_words() {\n    vector<string> result1 = split_words(\"Hello world!\");\n    if (!(result1 == vector<string>{\"Hello\", \"world!\"})) {\n        cerr << \"Test 1 failed: result1 does not match expected output.\" << endl;\n        exit(EXIT_FAILURE);  // Terminate the program\n    }\n\n    vector<string> result2 = split_words(\"Hello,world!\");\n    if (!(result2 == vector<string>{\"Hello\", \"world!\"})) {\n        cerr << \"Test 2 failed: result2 does not match expected output.\" << endl;\n        exit(EXIT_FAILURE);  // Terminate the program\n    }\n\n    vector<string> result3 = split_words(\"abcdef\");\n    if (!(result3 == vector<string>{\"3\"})) {\n        cerr << \"Test 3 failed: result3 does not match expected output.\" << endl;\n        exit(EXIT_FAILURE);  // Terminate the program\n    }\n\n    cout << \"All tests passed!\" << endl;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(split_words(\"Hello world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello,world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello world,!\") , {\"Hello\",\"world,!\"}));\n    assert (issame(split_words(\"Hello,Hello,world !\") , {\"Hello,Hello,world\",\"!\"}));\n    assert (issame(split_words(\"abcdef\") , {\"3\"}));\n    assert (issame(split_words(\"aaabb\") , {\"2\"}));\n    assert (issame(split_words(\"aaaBb\") , {\"1\"}));\n    assert (issame(split_words(\"\") ,{\"0\"}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/126", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nbool is_sorted(vector<int> lst) {\n    // Check if the list is empty or has one element, it's trivially sorted\n    if (lst.size() <= 1) {\n        return true;\n    }\n\n    // Initialize variables to track the current number and its count\n    int current = lst[0];\n    int count = 1;\n\n    // Iterate through the list starting from the second element\n    for (size_t i = 1; i < lst.size(); ++i) {\n        if (lst[i] == current) {\n            // Increment the count if the current number is the same as the previous one\n            count++;\n            // If the count exceeds 2, return false\n            if (count > 2) {\n                return false;\n            }\n        } else {\n            // Reset the count and update the current number\n            current = lst[i];\n            count = 1;\n        }\n\n        // Check if the current number is less than the previous one\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n\n    // If all checks pass, the list is sorted and no number appears more than twice\n    return true;\n}\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_sorted({5}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5}) == false);\n    assert (is_sorted({1, 2, 3, 4, 5, 6}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5, 6, 7}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5, 6, 7}) == false);\n    assert (is_sorted({}) == true);\n    assert (is_sorted({1}) == true);\n    assert (is_sorted({3, 2, 1}) == false);\n    assert (is_sorted({1, 2, 2, 2, 3, 4}) == false);\n    assert (is_sorted({1, 2, 3, 3, 3, 4}) == false);\n    assert (is_sorted({1, 2, 2, 3, 3, 4}) == true);\n    assert (is_sorted({1, 2, 3, 4}) == true);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/128", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <vector>\n#include <cmath>\nusing namespace std;\n\nint prod_signs(vector<int> arr) {\n    if (arr.empty()) {\n        return -32768;\n    }\n\n    int sum_of_magnitudes = 0;\n    int product_of_signs = 1;\n\n    for (int num : arr) {\n        if (num == 0) {\n            product_of_signs = 0;\n            break;\n        }\n        sum_of_magnitudes += abs(num);\n        product_of_signs *= (num > 0) ? 1 : -1;\n    }\n\n    return sum_of_magnitudes * product_of_signs;\n}\n\n// Example usage\n#include <iostream>\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prod_signs({1, 2, 2, -4}) == -9);\n    assert (prod_signs({0, 1}) == 0);\n    assert (prod_signs({1, 1, 1, 2, 3, -1, 1}) == -10);\n    assert (prod_signs({}) == -32768);\n    assert (prod_signs({2, 4,1, 2, -1, -1, 9}) == 20);\n    assert (prod_signs({-1, 1, -1, 1}) == 4);\n    assert (prod_signs({-1, 1, 1, 1}) == -4);\n    assert (prod_signs({-1, 1, 1, 0}) == 0);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/127", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\n// Function to check if a number is prime\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\n// Function to determine the intersection of two intervals\nstring intersection(vector<int> interval1, vector<int> interval2) {\n    int start1 = interval1[0], end1 = interval1[1];\n    int start2 = interval2[0], end2 = interval2[1];\n\n    // Find the intersection\n    int startMax = max(start1, start2);\n    int endMin = min(end1, end2);\n\n    // If there is no intersection\n    if (startMax > endMin) {\n        return \"NO\";\n    }\n\n    // Calculate the length of the intersection\n    int intersectionLength = endMin - startMax + 1;\n\n    // Check if the length is a prime number\n    if (isPrime(intersectionLength)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\n// Example usage\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (intersection({1, 2}, {2, 3}) == \"NO\");\n    assert (intersection({-1, 1}, {0, 4}) == \"NO\");\n    assert (intersection({-3, -1}, {-5, 5}) == \"YES\");\n    assert (intersection({-2, 2}, {-4, 0}) == \"YES\");\n    assert (intersection({-11, 2}, {-1, -1}) == \"NO\");\n    assert (intersection({1, 2}, {3, 5}) == \"NO\");\n    assert (intersection({1, 2}, {1, 2}) == \"NO\");\n    assert (intersection({-2, -2}, {-3, -2}) == \"NO\");\n}\n", "result": "failed: a.out: test.cpp:63: int main(): Assertion `intersection({-1, 1}, {0, 4}) == \"NO\"' failed.\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/131", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\nusing namespace std;\n\nint digits(int n) {\n    int product = 1;\n    bool hasOdd = false; // Flag to check if there is at least one odd digit\n\n    while (n > 0) {\n        int digit = n % 10; // Extract the last digit\n        if (digit % 2 != 0) { // Check if the digit is odd\n            product *= digit;\n            hasOdd = true;\n        }\n        n /= 10; // Remove the last digit\n    }\n\n    return hasOdd ? product : 0;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digits(5) == 5);\n    assert (digits(54) == 5);\n    assert (digits(120) ==1);\n    assert (digits(5014) == 5);\n    assert (digits(98765) == 315);\n    assert (digits(5576543) == 2625);\n    assert (digits(2468) == 0);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/130", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<int> tri(int n) {\n    // Base case initialization\n    vector<int> result(n + 1, 0);\n    if (n >= 0) result[0] = 1; // tri(0) is not explicitly defined, but we can assume it to be 1 for consistency\n    if (n >= 1) result[1] = 3;\n    \n    // Compute the Tribonacci sequence up to n\n    for (int i = 2; i <= n; ++i) {\n        if (i % 2 == 0) {\n            result[i] = 1 + i / 2;\n        } else {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    \n    return result;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(tri(3) , {1, 3, 2, 8}));\n    assert (issame(tri(4) , {1, 3, 2, 8, 3}));\n    assert (issame(tri(5) , {1, 3, 2, 8, 3, 15}));\n    assert (issame(tri(6) , {1, 3, 2, 8, 3, 15, 4}));\n    assert (issame(tri(7) , {1, 3, 2, 8, 3, 15, 4, 24}));\n    assert (issame(tri(8) , {1, 3, 2, 8, 3, 15, 4, 24, 5}));\n    assert (issame(tri(9) , {1, 3, 2, 8, 3, 15, 4, 24, 5, 35}));\n    assert (issame(tri(20) , {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11}));\n    assert (issame(tri(0) , {1}));\n    assert (issame(tri(1) , {1, 3}));\n}\n", "result": "failed: a.out: test.cpp:50: int main(): Assertion `issame(tri(3) , {1, 3, 2, 8})' failed.\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/135", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nint can_arrange(vector<int> arr) {\n    // Start from the second last element and move backwards\n    for (int i = arr.size() - 1; i > 0; --i) {\n        if (arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    // If no such element is found, return -1\n    return -1;\n}\n\n// Function to test the can_arrange function\nvoid test_can_arrange() {\n    vector<int> test1 = {1, 2, 4, 3, 5};\n    vector<int> test2 = {1, 2, 3};\n    vector<int> test3 = {5, 4, 3, 2, 1};\n    vector<int> test4 = {1, 3, 2, 4, 5};\n\n    cout << \"can_arrange({1, 2, 4, 3, 5}) = \" << can_arrange(test1) << \" (Expected: 3)\" << endl;\n    cout << \"can_arrange({1, 2, 3}) = \" << can_arrange(test2) << \" (Expected: -1)\" << endl;\n    cout << \"can_arrange({5, 4, 3, 2, 1}) = \" << can_arrange(test3) << \" (Expected: 1)\" << endl;\n    cout << \"can_arrange({1, 3, 2, 4, 5}) = \" << can_arrange(test4) << \" (Expected: 2)\" << endl;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (can_arrange({1,2,4,3,5})==3);\n    assert (can_arrange({1,2,4,5})==-1);\n    assert (can_arrange({1,4,2,5,6,7,8,9,10})==2);\n    assert (can_arrange({4,8,5,7,3})==4);\n    assert (can_arrange({})==-1);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/134", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\n#include <cctype> // for isalpha function\n\nusing namespace std;\n\nbool check_if_last_char_is_a_letter(const string& txt) {\n    if (txt.empty()) {\n        return false;\n    }\n\n    // Get the last character of the string\n    char last_char = txt[txt.size() - 1];\n\n    // Check if the last character is an alphabetical character\n    if (isalpha(last_char)) {\n        // Check if the last character is not part of a word\n        if (txt.size() == 1 || !isalpha(txt[txt.size() - 2])) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_if_last_char_is_a_letter(\"apple\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e\") == true);\n    assert (check_if_last_char_is_a_letter(\"eeeee\") == false);\n    assert (check_if_last_char_is_a_letter(\"A\") == true);\n    assert (check_if_last_char_is_a_letter(\"Pumpkin pie \") == false);\n    assert (check_if_last_char_is_a_letter(\"Pumpkin pie 1\") == false);\n    assert (check_if_last_char_is_a_letter(\"\") == false);\n    assert (check_if_last_char_is_a_letter(\"eeeee e \") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pie\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e \") == false);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/136", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <vector>\n#include <limits>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> largest_smallest_integers(vector<int> lst) {\n    int largest_negative = numeric_limits<int>::min();\n    int smallest_positive = numeric_limits<int>::max();\n\n    for (int num : lst) {\n        if (num < 0) {\n            largest_negative = max(largest_negative, num);\n        } else if (num > 0) {\n            smallest_positive = min(smallest_positive, num);\n        }\n    }\n\n    // If no negative or positive integers were found, set them to 0\n    if (largest_negative == numeric_limits<int>::min()) {\n        largest_negative = 0;\n    }\n    if (smallest_positive == numeric_limits<int>::max()) {\n        smallest_positive = 0;\n    }\n\n    return {largest_negative, smallest_positive};\n}\n\n// Example usage\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7}) , {0, 1}));\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7, 0}) , {0, 1}));\n    assert (issame(largest_smallest_integers({1, 3, 2, 4, 5, 6, -2}) , {-2, 1}));\n    assert (issame(largest_smallest_integers({4, 5, 3, 6, 2, 7, -7}) , {-7, 2}));\n    assert (issame(largest_smallest_integers({7, 3, 8, 4, 9, 2, 5, -9}) , {-9, 2}));\n    assert (issame(largest_smallest_integers({}) , {0, 0}));\n    assert (issame(largest_smallest_integers({0}) , {0, 0}));\n    assert (issame(largest_smallest_integers({-1, -3, -5, -6}) , {-1, 0}));\n    assert (issame(largest_smallest_integers({-1, -3, -5, -6, 0}) , {-1, 0}));\n    assert (issame(largest_smallest_integers({-6, -4, -4, -3, 1}) , {-3, 1}));\n    assert (issame(largest_smallest_integers({-6, -4, -4, -3, -100, 1}) , {-3, 1}));\n\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/129", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <cmath>\n#include <cstdlib>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <tuple>\n#include <functional>\n\nusing namespace std;\n\n// Custom comparator for the priority queue\nstruct PathComparator {\n    bool operator()(const tuple<vector<int>, int, int>& a, const tuple<vector<int>, int, int>& b) {\n        return get<0>(a) > get<0>(b);\n    }\n};\n\nvector<int> minPath(const vector<vector<int>>& grid, int k) {\n    int N = grid.size();\n    priority_queue<tuple<vector<int>, int, int>, vector<tuple<vector<int>, int, int>>, PathComparator> pq;\n\n    // Initialize the priority queue with all possible starting points\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            pq.push({{grid[i][j]}, i, j});\n        }\n    }\n\n    // Directions for moving to neighboring cells\n    vector<pair<int, int>> directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n\n    while (!pq.empty()) {\n        auto [path, row, col] = pq.top();\n        pq.pop();\n\n        // If the path length is k, return the path\n        if (path.size() == k) {\n            return path;\n        }\n\n        // Expand the path by moving to all possible neighboring cells\n        for (auto& [dr, dc] : directions) {\n            int newRow = row + dr;\n            int newCol = col + dc;\n\n            // Check if the new position is within the grid boundaries\n            if (newRow >= 0 && newRow < N && newCol >= 0 && newCol < N) {\n                vector<int> newPath = path;\n                newPath.push_back(grid[newRow][newCol]);\n                pq.push({newPath, newRow, newCol});\n            }\n        }\n    }\n\n    // This line should never be reached if the input is valid\n    return {};\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3) , {1, 2, 1}));\n    assert (issame(minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1) , {1}));\n    assert (issame(minPath({{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}, 4) , {1, 2, 1, 2}));\n    assert (issame(minPath({{6, 4, 13, 10}, {5, 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}}, 7) , {1, 10, 1, 10, 1, 10, 1}));\n    assert (issame(minPath({{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3, 10, 11, 16}}, 5) , {1, 7, 1, 7, 1}));\n    assert (issame(minPath({{11, 8, 7, 2}, {5, 16, 14, 4}, {9, 3, 15, 6}, {12, 13, 10, 1}}, 9) , {1, 6, 1, 6, 1, 6, 1, 6, 1}));\n    assert (issame(minPath({{12, 13, 10, 1}, {9, 3, 15, 6}, {5, 16, 14, 4}, {11, 8, 7, 2}}, 12) , {1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6}));\n    assert (issame(minPath({{2, 7, 4}, {3, 1, 5}, {6, 8, 9}}, 8) , {1, 3, 1, 3, 1, 3, 1, 3}));\n    assert (issame(minPath({{6, 1, 5}, {3, 8, 9}, {2, 7, 4}}, 8) , {1, 5, 1, 5, 1, 5, 1, 5}));\n    assert (issame(minPath({{1, 2}, {3, 4}}, 10) , {1, 2, 1, 2, 1, 2, 1, 2, 1, 2}));\n    assert (issame(minPath({{1, 3}, {3, 2}}, 10) , {1, 3, 1, 3, 1, 3, 1, 3, 1, 3}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/133", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <cmath>\n\nusing namespace std;\n\nint sum_squares(vector<float> lst) {\n    int sum = 0;\n    for (float num : lst) {\n        int ceil_num = ceil(num);  // Round to the upper integer\n        sum += ceil_num * ceil_num;  // Square and add to sum\n    }\n    return sum;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3})==14);\n    assert (sum_squares({1.0,2,3})==14);\n    assert (sum_squares({1,3,5,7})==84);\n    assert (sum_squares({1.4,4.2,0})==29);\n    assert (sum_squares({-2.4,1,1})==6);\n    assert (sum_squares({100,1,15,2})==10230);\n    assert (sum_squares({10000,10000})==200000000);\n    assert (sum_squares({-1.4,4.6,6.3})==75);\n    assert (sum_squares({-1.4,17.9,18.9,19.9})==1086);\n    assert (sum_squares({0})==0);\n    assert (sum_squares({-1})==1);\n    assert (sum_squares({-1,1,0})==2);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/132", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\n#include <stack>\nusing namespace std;\n\nbool is_nested(const string& str) {\n    stack<char> s;\n    bool has_nested = false;\n\n    for (char ch : str) {\n        if (ch == '[') {\n            s.push(ch);\n        } else if (ch == ']') {\n            if (!s.empty()) {\n                s.pop();\n                // Check if there is still an opening bracket in the stack\n                if (!s.empty()) {\n                    has_nested = true;\n                }\n            }\n        }\n    }\n\n    return has_nested;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_nested(\"[[]]\") == true);\n    assert (is_nested(\"[]]]]]]][[[[[]\") == false);\n    assert (is_nested(\"[][]\") == false);\n    assert (is_nested((\"[]\")) == false);\n    assert (is_nested(\"[[[[]]]]\") == true);\n    assert (is_nested(\"[]]]]]]]]]]\") == false);\n    assert (is_nested(\"[][][[]]\") == true);\n    assert (is_nested(\"[[]\") == false);\n    assert (is_nested(\"[]]\") == false);\n    assert (is_nested(\"[[]][[\") == true);\n    assert (is_nested(\"[[][]]\") == true);\n    assert (is_nested(\"\") == false);\n    assert (is_nested(\"[[[[[[[[\") == false);\n    assert (is_nested(\"]]]]]]]]\") == false);\n}\n", "result": "failed: a.out: test.cpp:47: int main(): Assertion `is_nested(\"[]]]]]]][[[[[]\") == false' failed.\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/138", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\nusing namespace std;\n\nbool is_equal_to_sum_even(int n) {\n    // Check if n is even and at least 8\n    return (n % 2 == 0) && (n >= 8);\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_equal_to_sum_even(4) == false);\n    assert (is_equal_to_sum_even(6) == false);\n    assert (is_equal_to_sum_even(8) == true);\n    assert (is_equal_to_sum_even(10) == true);\n    assert (is_equal_to_sum_even(11) == false);\n    assert (is_equal_to_sum_even(12) == true);\n    assert (is_equal_to_sum_even(13) == false);\n    assert (is_equal_to_sum_even(16) == true);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/139", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\nusing namespace std;\n\n// Helper function to compute the factorial of a single number\nlong long factorial(int num) {\n    if (num == 0 || num == 1) {\n        return 1;\n    }\n    long long result = 1;\n    for (int i = 2; i <= num; ++i) {\n        result *= i;\n    }\n    return result;\n}\n\n// Function to compute the Brazilian factorial\nlong long special_factorial(int n) {\n    long long result = 1;\n    for (int i = 1; i <= n; ++i) {\n        result *= factorial(i);\n    }\n    return result;\n}\n\n// Main function to test the special_factorial function\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (special_factorial(4) == 288);\n    assert (special_factorial(5) == 34560);\n    assert (special_factorial(7) == 125411328000);\n    assert (special_factorial(1) == 1);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/137", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <iostream>\n#include <string>\n#include <boost/any.hpp>\n#include <sstream>\n\n// Function to convert a string to a float, handling both '.' and ','\nfloat stringToFloat(const std::string& str) {\n    std::string temp = str;\n    std::replace(temp.begin(), temp.end(), ',', '.');\n    return std::stof(temp);\n}\n\n// Function to compare two values of any type\nboost::any compare_one(boost::any a, boost::any b) {\n    float valA, valB;\n\n    // Extract and convert the first value\n    if (a.type() == typeid(int)) {\n        valA = boost::any_cast<int>(a);\n    } else if (a.type() == typeid(float)) {\n        valA = boost::any_cast<float>(a);\n    } else if (a.type() == typeid(std::string)) {\n        valA = stringToFloat(boost::any_cast<std::string>(a));\n    } else {\n        throw std::runtime_error(\"Unsupported type for a\");\n    }\n\n    // Extract and convert the second value\n    if (b.type() == typeid(int)) {\n        valB = boost::any_cast<int>(b);\n    } else if (b.type() == typeid(float)) {\n        valB = boost::any_cast<float>(b);\n    } else if (b.type() == typeid(std::string)) {\n        valB = stringToFloat(boost::any_cast<std::string>(b));\n    } else {\n        throw std::runtime_error(\"Unsupported type for b\");\n    }\n\n    // Compare the values\n    if (valA > valB) {\n        return a;\n    } else if (valB > valA) {\n        return b;\n    } else {\n        return std::string(\"None\");\n    }\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (boost::any_cast<int>(compare_one(1, 2)) == 2);\n    assert (boost::any_cast<double>(compare_one(1, 2.5))== 2.5);\n    assert (boost::any_cast<int>(compare_one(2, 3)) == 3);\n    assert (boost::any_cast<int>(compare_one(5, 6)) == 6);\n    assert (boost::any_cast<string>(compare_one(1, string(\"2,3\")))== \"2,3\");\n    assert (boost::any_cast<string>(compare_one(string(\"5,1\"), string(\"6\"))) == \"6\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), string(\"2\"))) == \"2\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), 1)) == \"None\");\n}\n", "result": "failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Unsupported type for b\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/140", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\nusing namespace std;\n\nstring fix_spaces(string text) {\n    string result;\n    int space_count = 0;\n\n    for (char ch : text) {\n        if (ch == ' ') {\n            space_count++;\n        } else {\n            if (space_count > 2) {\n                result += '-';\n            } else if (space_count > 0) {\n                result.append(space_count, '_');\n            }\n            space_count = 0;\n            result += ch;\n        }\n    }\n\n    // Handle trailing spaces\n    if (space_count > 2) {\n        result += '-';\n    } else if (space_count > 0) {\n        result.append(space_count, '_');\n    }\n\n    return result;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fix_spaces(\"Example\") == \"Example\");\n    assert (fix_spaces(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert (fix_spaces(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert (fix_spaces(\"Exa   mple\") == \"Exa-mple\");\n    assert (fix_spaces(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/142", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <vector>\nusing namespace std;\n\nint sum_squares(vector<int> lst) {\n    int sum = 0;\n    \n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 3 == 0) {\n            // Square the entry if the index is a multiple of 3\n            sum += lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            // Cube the entry if the index is a multiple of 4 and not a multiple of 3\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            // Add the entry as it is if the index is neither a multiple of 3 nor 4\n            sum += lst[i];\n        }\n    }\n    \n    return sum;\n}\n\n// Example usage\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3}) == 6);\n    assert (sum_squares({1,4,9}) == 14);\n    assert (sum_squares({}) == 0);\n    assert (sum_squares({1,1,1,1,1,1,1,1,1}) == 9);\n    assert (sum_squares({-1,-1,-1,-1,-1,-1,-1,-1,-1}) == -3);\n    assert (sum_squares({0}) == 0);\n    assert (sum_squares({-1,-5,2,-1,-5}) == -126);\n    assert (sum_squares({-56,-99,1,0,-2}) == 3030);\n    assert (sum_squares({-1,0,0,0,0,0,0,0,-1}) == 0);\n    assert (sum_squares({-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}) == -14196);\n    assert (sum_squares({-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}) == -1448);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/141", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\n#include <cctype>\n#include <algorithm>\n\nusing namespace std;\n\nstring file_name_check(string file_name) {\n    // Check for exactly one dot\n    size_t dot_pos = file_name.find('.');\n    if (dot_pos == string::npos || file_name.find('.', dot_pos + 1) != string::npos) {\n        return \"No\";\n    }\n\n    // Extract the prefix and suffix\n    string prefix = file_name.substr(0, dot_pos);\n    string suffix = file_name.substr(dot_pos + 1);\n\n    // Check if the prefix is non-empty and starts with a letter\n    if (prefix.empty() || !isalpha(prefix[0])) {\n        return \"No\";\n    }\n\n    // Check if the prefix contains more than three digits\n    int digit_count = count_if(prefix.begin(), prefix.end(), ::isdigit);\n    if (digit_count > 3) {\n        return \"No\";\n    }\n\n    // Check if the suffix is one of the allowed extensions\n    if (suffix != \"txt\" && suffix != \"exe\" && suffix != \"dll\") {\n        return \"No\";\n    }\n\n    // If all checks pass, the file name is valid\n    return \"Yes\";\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (file_name_check(\"example.txt\") == \"Yes\");\n    assert (file_name_check(\"1example.dll\") == \"No\");\n    assert (file_name_check(\"s1sdf3.asd\") == \"No\");\n    assert (file_name_check(\"K.dll\") == \"Yes\");\n    assert (file_name_check(\"MY16FILE3.exe\") == \"Yes\");\n    assert (file_name_check(\"His12FILE94.exe\") == \"No\");\n    assert (file_name_check(\"_Y.txt\") == \"No\");\n    assert (file_name_check(\"?aREYA.exe\") == \"No\");\n    assert (file_name_check(\"/this_is_valid.dll\") == \"No\");\n    assert (file_name_check(\"this_is_valid.wow\") == \"No\");\n    assert (file_name_check(\"this_is_valid.txt\") == \"Yes\");\n    assert (file_name_check(\"this_is_valid.txtexe\") == \"No\");\n    assert (file_name_check(\"#this2_i4s_5valid.ten\") == \"No\");\n    assert (file_name_check(\"@this1_is6_valid.exe\") == \"No\");\n    assert (file_name_check(\"this_is_12valid.6exe4.txt\") == \"No\");\n    assert (file_name_check(\"all.exe.txt\") == \"No\");\n    assert (file_name_check(\"I563_No.exe\") == \"Yes\");\n    assert (file_name_check(\"Is3youfault.txt\") == \"Yes\");\n    assert (file_name_check(\"no_one#knows.dll\") == \"Yes\");\n    assert (file_name_check(\"1I563_Yes3.exe\") == \"No\");\n    assert (file_name_check(\"I563_Yes3.txtt\") == \"No\");\n    assert (file_name_check(\"final..txt\") == \"No\");\n    assert (file_name_check(\"final132\") == \"No\");\n    assert (file_name_check(\"_f4indsartal132.\") == \"No\");\n    assert (file_name_check(\".txt\") == \"No\");\n    assert (file_name_check(\"s.\") == \"No\");\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/144", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\n// Function to parse a fraction string into numerator and denominator\nvoid parseFraction(const string& fraction, int& numerator, int& denominator) {\n    stringstream ss(fraction);\n    char slash;\n    ss >> numerator >> slash >> denominator;\n}\n\n// Function to simplify the expression x * n\nbool simplify(const string& x, const string& n) {\n    int x_num, x_den, n_num, n_den;\n\n    // Parse the fractions\n    parseFraction(x, x_num, x_den);\n    parseFraction(n, n_num, n_den);\n\n    // Perform the multiplication\n    int result_num = x_num * n_num;\n    int result_den = x_den * n_den;\n\n    // Check if the result is a whole number\n    return (result_num % result_den == 0);\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/6\", \"2/1\") == false);\n    assert (simplify(\"5/1\", \"3/1\") == true);\n    assert (simplify(\"7/10\", \"10/2\") == false);\n    assert (simplify(\"2/10\", \"50/10\") == true);\n    assert (simplify(\"7/2\", \"4/2\") == true);\n    assert (simplify(\"11/6\", \"6/1\") == true);\n    assert (simplify(\"2/3\", \"5/2\") == false);\n    assert (simplify(\"5/2\", \"3/5\") == false);\n    assert (simplify(\"2/4\", \"8/4\") == true);\n    assert (simplify(\"2/4\", \"4/2\") == true);\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/5\", \"1/5\") == false);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/143", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <sstream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\n// Function to check if a number is prime\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\n// Function to process the sentence and return words with prime lengths\nstring words_in_sentence(string sentence) {\n    stringstream ss(sentence);\n    string word;\n    string result;\n    while (ss >> word) {\n        if (isPrime(word.length())) {\n            if (!result.empty()) result += \" \";\n            result += word;\n        }\n    }\n    return result;\n}\n\n// Main function to test the solution\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (words_in_sentence(\"This is a test\") == \"is\");\n    assert (words_in_sentence(\"lets go for swimming\") == \"go for\");\n    assert (words_in_sentence(\"there is no place available here\") == \"there is no place\");\n    assert (words_in_sentence(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert (words_in_sentence(\"go for it\") == \"go for it\");\n    assert (words_in_sentence(\"here\") == \"\");\n    assert (words_in_sentence(\"here is\") == \"is\");\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/146", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cmath>\n\nusing namespace std;\n\n// Function to check if a digit is odd\nbool isOdd(int digit) {\n    return digit % 2 != 0;\n}\n\n// Function to get the first digit of a number\nint getFirstDigit(int num) {\n    while (num >= 10) {\n        num /= 10;\n    }\n    return num;\n}\n\n// Function to get the last digit of a number\nint getLastDigit(int num) {\n    return abs(num) % 10;\n}\n\n// Function to count numbers that meet the criteria\nint specialFilter(vector<int> nums) {\n    int count = 0;\n    for (int num : nums) {\n        if (num > 10 && isOdd(getFirstDigit(num)) && isOdd(getLastDigit(num))) {\n            count++;\n        }\n    }\n    return count;\n}\n\n// Main function to test the specialFilter function\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (specialFilter({5, -2, 1, -5}) == 0  );\n    assert (specialFilter({15, -73, 14, -15}) == 1);\n    assert (specialFilter({33, -2, -3, 45, 21, 109}) == 2);\n    assert (specialFilter({43, -12, 93, 125, 121, 109}) == 4);\n    assert (specialFilter({71, -2, -33, 75, 21, 19}) == 3);\n    assert (specialFilter({1}) == 0              );\n    assert (specialFilter({}) == 0                   );\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/149", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\n// Function to filter and sort the vector of strings\nvector<string> sorted_list_sum(vector<string> lst) {\n    // Step 1: Remove strings with odd lengths\n    lst.erase(remove_if(lst.begin(), lst.end(), [](const string& s) {\n        return s.length() % 2 != 0;\n    }), lst.end());\n\n    // Step 2: Sort the vector by length and then alphabetically\n    sort(lst.begin(), lst.end(), [](const string& a, const string& b) {\n        if (a.length() == b.length()) {\n            return a < b; // Alphabetical sorting for strings of the same length\n        }\n        return a.length() < b.length(); // Length-based sorting\n    });\n\n    return lst;\n}\n\n// Function to test the implementation\nvoid test() {\n    assert((sorted_list_sum({\"aa\", \"a\", \"aaa\"}) == vector<string>{\"aa\"}));\n    assert((sorted_list_sum({\"ab\", \"a\", \"aaa\", \"cd\"}) == vector<string>{\"ab\", \"cd\"}));\n    assert((sorted_list_sum({\"hello\", \"world\", \"hi\", \"bye\"}) == vector<string>{\"bye\", \"hi\"}));\n    cout << \"All tests passed!\" << endl;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sorted_list_sum({\"aa\", \"a\", \"aaa\"}) , {\"aa\"}));\n    assert (issame(sorted_list_sum({\"school\", \"AI\", \"asdf\", \"b\"}) , {\"AI\", \"asdf\", \"school\"}));\n    assert (issame(sorted_list_sum({\"d\", \"b\", \"c\", \"a\"}) , {}));\n    assert (issame(sorted_list_sum({\"d\", \"dcba\", \"abcd\", \"a\"}) , {\"abcd\", \"dcba\"}));\n    assert (issame(sorted_list_sum({\"AI\", \"ai\", \"au\"}) , {\"AI\", \"ai\", \"au\"}));\n    assert (issame(sorted_list_sum({\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}) , {}));\n    assert (issame(sorted_list_sum({\"aaaa\", \"bbbb\", \"dd\", \"cc\"}) , {\"cc\", \"dd\", \"aaaa\", \"bbbb\"}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/147", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nint get_max_triples(int n) {\n    vector<int> a(n);\n    vector<int> remainder_count(3, 0);\n\n    // Generate the vector a and count the remainders\n    for (int i = 1; i <= n; ++i) {\n        a[i-1] = i * i - i + 1;\n        int remainder = a[i-1] % 3;\n        remainder_count[remainder]++;\n    }\n\n    // Count the number of valid triples\n    long long count = 0;\n\n    // Case 1: (0, 0, 0)\n    count += (long long)remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2) / 6;\n\n    // Case 2: (1, 1, 1)\n    count += (long long)remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2) / 6;\n\n    // Case 3: (2, 2, 2)\n    count += (long long)remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2) / 6;\n\n    // Case 4: (0, 1, 2)\n    count += (long long)remainder_count[0] * remainder_count[1] * remainder_count[2];\n\n    return count;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_max_triples(5) == 1);\n    assert (get_max_triples(6) == 4);\n    assert (get_max_triples(10) == 36);\n    assert (get_max_triples(100) == 53361);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/150", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\nusing namespace std;\n\n// Function to check if a number is prime\nbool is_prime(int n) {\n    if (n <= 1) return false; // 0 and 1 are not prime numbers\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\n// Function to return x if n is prime, otherwise return y\nint x_or_y(int n, int x, int y) {\n    if (is_prime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n\n// Main function to test the x_or_y function\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (x_or_y(7, 34, 12) == 34);\n    assert (x_or_y(15, 8, 5) == 5);\n    assert (x_or_y(3, 33, 5212) == 33);\n    assert (x_or_y(1259, 3, 52) == 3);\n    assert (x_or_y(7919, -1, 12) == -1);\n    assert (x_or_y(3609, 1245, 583) == 583);\n    assert (x_or_y(91, 56, 129) == 129);\n    assert (x_or_y(6, 34, 1234) == 1234);\n    assert (x_or_y(1, 2, 0) == 0);\n    assert (x_or_y(2, 2, 0) == 2);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/145", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <iostream>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <vector>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\n// Function to calculate the sum of digits of a number\nint sum_of_digits(int num) {\n    int sum = 0;\n    bool is_negative = num < 0;\n    num = abs(num);\n    \n    while (num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    \n    if (is_negative) {\n        sum = -sum + 2 * (num % 10); // Adjust the sum to account for the negative sign\n    }\n    \n    return sum;\n}\n\n// Function to sort the vector based on the sum of digits\nvector<int> order_by_points(vector<int> nums) {\n    // Pair each number with its index\n    vector<pair<int, int>> indexed_nums;\n    for (int i = 0; i < nums.size(); ++i) {\n        indexed_nums.push_back({sum_of_digits(nums[i]), i});\n    }\n    \n    // Sort the pairs based on the sum of digits, and by index if sums are equal\n    sort(indexed_nums.begin(), indexed_nums.end());\n    \n    // Extract the sorted numbers\n    vector<int> sorted_nums;\n    for (const auto& p : indexed_nums) {\n        sorted_nums.push_back(nums[p.second]);\n    }\n    \n    return sorted_nums;\n}\n\n// Example usage\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(order_by_points({1, 11, -1, -11, -12}) , {-1, -11, 1, -12, 11}));\n    assert (issame(order_by_points({1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46}) , {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457}));\n    assert (issame(order_by_points({}) , {}));\n    assert (issame(order_by_points({1, -11, -32, 43, 54, -98, 2, -3}) , {-3, -32, -98, -11, 1, 2, 43, 54}));\n    assert (issame(order_by_points({1,2,3,4,5,6,7,8,9,10,11}) , {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}));\n    assert (issame(order_by_points({0,6,6,-76,-21,23,4}) , {-76, -21, 0, 4, 23, 6, 6}));\n    \n}\n", "result": "failed: a.out: test.cpp:71: int main(): Assertion `issame(order_by_points({1, 11, -1, -11, -12}) , {-1, -11, 1, -12, 11})' failed.\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/151", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <vector>\n#include <cmath>\n#include <iostream>\n\nusing namespace std;\n\nlong long double_the_difference(vector<float> lst) {\n    long long sum = 0;\n    for (float num : lst) {\n        // Check if the number is a positive integer\n        if (num > 0 && floor(num) == num) {\n            int int_num = static_cast<int>(num);\n            // Check if the number is odd\n            if (int_num % 2 != 0) {\n                sum += int_num * int_num;\n            }\n        }\n    }\n    return sum;\n}\n\n// Function to test the implementation\nvoid test_double_the_difference() {\n    cout << (double_the_difference({1, 3, 2, 0}) == 10) << endl; // 1 + 9 + 0 + 0 = 10\n    cout << (double_the_difference({-1, -2, 0}) == 0) << endl;   // 0\n    cout << (double_the_difference({9, -2}) == 81) << endl;      // 81\n    cout << (double_the_difference({0}) == 0) << endl;           // 0\n    cout << (double_the_difference({}) == 0) << endl;            // 0\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (double_the_difference({}) == 0);\n    assert (double_the_difference({5, 4}) == 25);\n    assert (double_the_difference({0.1, 0.2, 0.3}) == 0 );\n    assert (double_the_difference({-10, -20, -30}) == 0 );\n    assert (double_the_difference({-1, -2, 8}) == 0);\n    assert (double_the_difference({0.2, 3, 5}) == 34);\n    \n    \n    long long odd_sum=0;\n    vector<float> lst={};\n\n    for (int i=-99;i<100;i+=2)\n    {\n        lst.push_back(i+0.0);\n        if (i>0 and i%2==1) odd_sum+=i*i;\n    }\n  \n    assert (double_the_difference(lst) == odd_sum );\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/148", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> bf(string planet1, string planet2) {\n    // List of planets in order of their proximity to the Sun\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    \n    // Find the indices of the given planets\n    int index1 = -1, index2 = -1;\n    for (int i = 0; i < planets.size(); ++i) {\n        if (planets[i] == planet1) index1 = i;\n        if (planets[i] == planet2) index2 = i;\n    }\n    \n    // If either planet is not found, return an empty vector\n    if (index1 == -1 || index2 == -1) return {};\n    \n    // Ensure index1 is less than index2\n    if (index1 > index2) swap(index1, index2);\n    \n    // Collect the planets between the two indices\n    vector<string> result;\n    for (int i = index1 + 1; i < index2; ++i) {\n        result.push_back(planets[i]);\n    }\n    \n    return result;\n}\n\n// Function to test the bf function\nvoid test_bf() {\n    vector<string> result;\n    \n    result = bf(\"Jupiter\", \"Neptune\");\n    for (const auto& planet : result) cout << planet << \" \";\n    cout << endl; // Output: Saturn Uranus\n    \n    result = bf(\"Earth\", \"Mercury\");\n    for (const auto& planet : result) cout << planet << \" \";\n    cout << endl; // Output: Venus\n    \n    result = bf(\"Mercury\", \"Uranus\");\n    for (const auto& planet : result) cout << planet << \" \";\n    cout << endl; // Output: Venus Earth Mars Jupiter Saturn\n    \n    result = bf(\"Pluto\", \"Mars\"); // Pluto is not a valid planet name\n    for (const auto& planet : result) cout << planet << \" \";\n    cout << endl; // Output: (empty)\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(bf(\"Jupiter\", \"Neptune\") , {\"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Mercury\") , {\"Venus\",}));\n    assert (issame(bf(\"Mercury\", \"Uranus\") , {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}));\n    assert (issame(bf(\"Neptune\", \"Venus\") , {\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Earth\") , {}));\n    assert (issame(bf(\"Mars\", \"Earth\") , {}));\n    assert (issame(bf(\"Jupiter\", \"Makemake\") , {}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/152", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <cmath> // For std::abs\n\nusing namespace std;\n\nvector<int> compare(vector<int> game, vector<int> guess) {\n    vector<int> result;\n    for (size_t i = 0; i < game.size(); ++i) {\n        int difference = abs(game[i] - guess[i]);\n        result.push_back(difference);\n    }\n    return result;\n}\n\n// Function to test the compare function\nvoid test_compare() {\n    vector<int> result1 = compare({1, 2, 3, 4, 5, 1}, {1, 2, 3, 4, 2, -2});\n    vector<int> expected1 = {0, 0, 0, 0, 3, 3};\n    assert(result1 == expected1);\n\n    vector<int> result2 = compare({0, 5, 0, 0, 0, 4}, {4, 1, 1, 0, 0, -2});\n    vector<int> expected2 = {4, 4, 1, 0, 0, 6};\n    assert(result2 == expected2);\n\n    cout << \"All tests passed!\" << endl;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,5,0,0,0,4},{4,1,1,0,0,-2}),{4,4,1,0,0,6}));\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,0,0,0,0,0},{0,0,0,0,0,0}),{0,0,0,0,0,0}));\n    assert (issame(compare({1,2,3},{-1,-2,-3}),{2,4,6}));\n    assert (issame(compare({1,2,3,5},{-1,2,3,4}),{2,0,0,1}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/153", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\n// Function to calculate the strength of an extension\nint calculateStrength(const string& extension) {\n    int cap = 0, sm = 0;\n    for (char c : extension) {\n        if (isupper(c)) cap++;\n        else if (islower(c)) sm++;\n    }\n    return cap - sm;\n}\n\n// Function to find the strongest extension\nstring Strongest_Extension(string class_name, vector<string> extensions) {\n    string strongest_extension = \"\";\n    int max_strength = INT_MIN;\n\n    for (const string& extension : extensions) {\n        int strength = calculateStrength(extension);\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n\n    return class_name + \".\" + strongest_extension;\n}\n\n// Main function to test the solution\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (Strongest_Extension(\"Watashi\", {\"tEN\", \"niNE\", \"eIGHt8OKe\"}) == \"Watashi.eIGHt8OKe\");\n    assert (Strongest_Extension(\"Boku123\", {\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}) == \"Boku123.YEs.WeCaNe\");\n    assert (Strongest_Extension(\"__YESIMHERE\", {\"t\", \"eMptY\", \"(nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}) == \"__YESIMHERE.NuLl__\");\n    assert (Strongest_Extension(\"K\", {\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}) == \"K.TAR\");\n    assert (Strongest_Extension(\"__HAHA\", {\"Tab\", \"123\", \"781345\", \"-_-\"}) == \"__HAHA.123\");\n    assert (Strongest_Extension(\"YameRore\", {\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}) == \"YameRore.okIWILL123\");\n    assert (Strongest_Extension(\"finNNalLLly\", {\"Die\", \"NowW\", \"Wow\", \"WoW\"}) == \"finNNalLLly.WoW\");\n    assert (Strongest_Extension(\"_\", {\"Bb\", \"91245\"}) == \"_.Bb\");\n    assert (Strongest_Extension(\"Sp\", {\"671235\", \"Bb\"}) == \"Sp.671235\");\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/157", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <iostream>\n#include <cmath>\n\nbool right_angle_triangle(float a, float b, float c) {\n    // First, find the longest side (hypotenuse)\n    float max_side = fmax(a, fmax(b, c));\n    \n    // Then, identify the other two sides\n    float side1, side2;\n    if (max_side == a) {\n        side1 = b;\n        side2 = c;\n    } else if (max_side == b) {\n        side1 = a;\n        side2 = c;\n    } else {\n        side1 = a;\n        side2 = b;\n    }\n    \n    // Apply the Pythagorean theorem\n    return std::abs(max_side * max_side - (side1 * side1 + side2 * side2)) < 1e-6;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (right_angle_triangle(3, 4, 5) == true);\n    assert (right_angle_triangle(1, 2, 3) == false);\n    assert (right_angle_triangle(10, 6, 8) == true);\n    assert (right_angle_triangle(2, 2, 2) == false);\n    assert (right_angle_triangle(7, 24, 25) == true);\n    assert (right_angle_triangle(10, 5, 7) == false);\n    assert (right_angle_triangle(5, 12, 13) == true);\n    assert (right_angle_triangle(15, 8, 17) == true);\n    assert (right_angle_triangle(48, 55, 73) == true);\n    assert (right_angle_triangle(1, 1, 1) == false);\n    assert (right_angle_triangle(2, 2, 10) == false);\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/154", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\nusing namespace std;\n\nbool cycpattern_check(const string& a, const string& b) {\n    // Concatenate the first string with itself\n    string doubled_a = a + a;\n    \n    // Check if the second string is a substring of the concatenated string\n    return doubled_a.find(b) != string::npos;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert  (cycpattern_check(\"xyzw\",\"xyw\") == false );\n    assert  (cycpattern_check(\"yello\",\"ell\") == true );\n    assert  (cycpattern_check(\"whattup\",\"ptut\") == false );\n    assert  (cycpattern_check(\"efef\",\"fee\") == true );\n    assert  (cycpattern_check(\"abab\",\"aabb\") == false );\n    assert  (cycpattern_check(\"winemtt\",\"tinem\") == true );\n}\n", "result": "failed: a.out: test.cpp:35: int main(): Assertion `cycpattern_check(\"efef\",\"fee\") == true' failed.\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/155", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <cmath>\n#include <string>\n#include <vector>\nusing namespace std;\n\nvector<int> even_odd_count(int num) {\n    // Convert the number to its absolute value to handle negative numbers\n    num = abs(num);\n    \n    // Convert the number to a string to iterate over each digit\n    string num_str = to_string(num);\n    \n    // Initialize counters for even and odd digits\n    int even_count = 0;\n    int odd_count = 0;\n    \n    // Iterate through each character in the string\n    for (char digit : num_str) {\n        // Convert the character to an integer\n        int digit_int = digit - '0';\n        \n        // Check if the digit is even or odd\n        if (digit_int % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    \n    // Return a vector containing the counts of even and odd digits\n    return {even_count, odd_count};\n}\n\n// Function to test the even_odd_count function\nvoid test_even_odd_count() {\n    vector<int> result1 = even_odd_count(-12);\n    cout << \"even_odd_count(-12) ==> {\" << result1[0] << \", \" << result1[1] << \"}\" << endl;\n    \n    vector<int> result2 = even_odd_count(123);\n    cout << \"even_odd_count(123) ==> {\" << result2[0] << \", \" << result2[1] << \"}\" << endl;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_count(7) , {0, 1}));\n    assert (issame(even_odd_count(-78) , {1, 1}));\n    assert (issame(even_odd_count(3452) , {2, 2}));\n    assert (issame(even_odd_count(346211) , {3, 3}));\n    assert (issame(even_odd_count(-345821) , {3, 3}));\n    assert (issame(even_odd_count(-2) , {1, 0}));\n    assert (issame(even_odd_count(-45347) , {2, 3}));\n    assert (issame(even_odd_count(0) , {1, 0}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/156", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring int_to_mini_roman(int number) {\n    // Define the mapping of integers to Roman numerals\n    vector<pair<int, string>> roman_map = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"},\n        {100, \"c\"}, {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"},\n        {10, \"x\"}, {9, \"ix\"}, {5, \"v\"}, {4, \"iv\"}, {1, \"i\"}\n    };\n\n    string result = \"\";\n\n    // Iterate through the roman_map to construct the Roman numeral\n    for (const auto &p : roman_map) {\n        while (number >= p.first) {\n            result += p.second;\n            number -= p.first;\n        }\n    }\n\n    return result;\n}\n\n// Function to test the correctness of the solution\nvoid test() {\n    cout << (int_to_mini_roman(19) == \"xix\") << endl;\n    cout << (int_to_mini_roman(152) == \"clii\") << endl;\n    cout << (int_to_mini_roman(426) == \"cdxxvi\") << endl;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (int_to_mini_roman(19) == \"xix\");\n    assert (int_to_mini_roman(152) == \"clii\");\n    assert (int_to_mini_roman(251) == \"ccli\");\n    assert (int_to_mini_roman(426) == \"cdxxvi\");\n    assert (int_to_mini_roman(500) == \"d\");\n    assert (int_to_mini_roman(1) == \"i\");\n    assert (int_to_mini_roman(4) == \"iv\");\n    assert (int_to_mini_roman(43) == \"xliii\");\n    assert (int_to_mini_roman(90) == \"xc\");\n    assert (int_to_mini_roman(94) == \"xciv\");\n    assert (int_to_mini_roman(532) == \"dxxxii\");\n    assert (int_to_mini_roman(900) == \"cm\");\n    assert (int_to_mini_roman(994) == \"cmxciv\");\n    assert (int_to_mini_roman(1000) == \"m\");\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/161", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <string>\nusing namespace std;\n\nstring solve(string s) {\n    bool hasLetter = false;\n    for (char c : s) {\n        if (isalpha(c)) {\n            hasLetter = true;\n            break;\n        }\n    }\n\n    if (hasLetter) {\n        for (char &c : s) {\n            if (islower(c)) {\n                c = toupper(c);\n            } else if (isupper(c)) {\n                c = tolower(c);\n            }\n        }\n    } else {\n        reverse(s.begin(), s.end());\n    }\n\n    return s;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(\"AsDf\") == \"aSdF\");\n    assert (solve(\"1234\") == \"4321\");\n    assert (solve(\"ab\") == \"AB\");\n    assert (solve(\"#a@C\") == \"#A@c\");\n    assert (solve(\"#AsdfW^45\") == \"#aSDFw^45\");\n    assert (solve(\"#6@2\") == \"2@6#\");\n    assert (solve(\"#$a^D\") == \"#$A^d\");\n    assert (solve(\"#ccc\") == \"#CCC\");\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/159", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvector<int> eat(int number, int need, int remaining) {\n    // Calculate the total number of carrots eaten after the meal\n    int total_eaten = number + min(need, remaining);\n    \n    // Calculate the number of carrots left after the meal\n    int carrots_left = max(0, remaining - need);\n    \n    // Return the results as a vector\n    return {total_eaten, carrots_left};\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(eat(5, 6, 10) , {11, 4}));\n    assert (issame(eat(4, 8, 9) , {12, 1}));\n    assert (issame(eat(1, 10, 10) , {11, 0}));\n    assert (issame(eat(2, 11, 5) , {7, 0}));\n    \n    assert (issame(eat(4, 5, 7) , {9, 2}));\n    assert (issame(eat(4, 5, 1) , {5, 0}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/162", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <iostream>\n#include <string>\n#include <openssl/md5.h>\n\n// Function to convert bytes to a hex string\nstd::string bytes_to_hex_string(const unsigned char* bytes, size_t length) {\n    std::stringstream hexStream;\n    hexStream << std::hex << std::setfill('0');\n    for (size_t i = 0; i < length; ++i) {\n        hexStream << std::setw(2) << static_cast<int>(bytes[i]);\n    }\n    return hexStream.str();\n}\n\nstd::string string_to_md5(const std::string& text) {\n    if (text.empty()) {\n        return \"None\";\n    }\n\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5_CTX context;\n\n    // Initialize the MD5 context\n    MD5_Init(&context);\n\n    // Update the context with the input text\n    MD5_Update(&context, text.c_str(), text.length());\n\n    // Finalize the MD5 hash\n    MD5_Final(digest, &context);\n\n    // Convert the hash to a hex string\n    return bytes_to_hex_string(digest, MD5_DIGEST_LENGTH);\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert (string_to_md5(\"\") == \"None\");\n    assert (string_to_md5(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert (string_to_md5(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/158", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <set>\n\nusing namespace std;\n\nstring find_max(vector<string> words) {\n    string max_word = \"\";\n    int max_unique_chars = 0;\n\n    for (const auto& word : words) {\n        set<char> unique_chars(word.begin(), word.end());\n        int num_unique_chars = unique_chars.size();\n\n        if (num_unique_chars > max_unique_chars || \n            (num_unique_chars == max_unique_chars && word < max_word)) {\n            max_unique_chars = num_unique_chars;\n            max_word = word;\n        }\n    }\n\n    return max_word;\n}\n\n// Function to test the find_max function\nvoid test_find_max() {\n    assert(find_max({\"name\", \"of\", \"string\"}) == \"string\");\n    assert(find_max({\"name\", \"enam\", \"game\"}) == \"enam\");\n    assert(find_max({\"aaaaaaa\", \"bb\", \"cc\"}) == \"aaaaaaa\");\n    cout << \"All tests passed successfully!\" << endl;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert ((find_max({\"name\", \"of\", \"string\"}) == \"string\"));\n    assert ((find_max({\"name\", \"enam\", \"game\"}) == \"enam\"));\n    assert ((find_max({\"aaaaaaa\", \"bb\", \"cc\"}) == \"aaaaaaa\"));\n    assert ((find_max({\"abc\", \"cba\"}) == \"abc\"));\n    assert ((find_max({\"play\", \"this\", \"game\", \"of\",\"footbott\"}) == \"footbott\"));\n    assert ((find_max({\"we\", \"are\", \"gonna\", \"rock\"}) == \"gonna\"));\n    assert ((find_max({\"we\", \"are\", \"a\", \"mad\", \"nation\"}) == \"nation\"));\n    assert ((find_max({\"this\", \"is\", \"a\", \"prrk\"}) == \"this\"));\n    assert ((find_max({\"b\"}) == \"b\"));\n    assert ((find_max({\"play\", \"play\", \"play\"}) == \"play\"));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/160", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\nusing namespace std;\n\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cmath>\n\nint do_algebra(std::vector<std::string> operato, std::vector<int> operand) {\n    int result = operand[0]; // Initialize result with the first operand\n\n    for (size_t i = 0; i < operato.size(); ++i) {\n        if (operato[i] == \"+\") {\n            result += operand[i + 1];\n        } else if (operato[i] == \"-\") {\n            result -= operand[i + 1];\n        } else if (operato[i] == \"*\") {\n            result *= operand[i + 1];\n        } else if (operato[i] == \"//\") {\n            result /= operand[i + 1]; // Floor division in C++ is the default behavior for integer division\n        } else if (operato[i] == \"**\") {\n            result = std::pow(result, operand[i + 1]);\n        }\n    }\n\n    return result;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (do_algebra({\"**\", \"*\", \"+\"}, {2, 3, 4, 5}) == 37);\n    assert (do_algebra({\"+\", \"*\", \"-\"}, {2, 3, 4, 5}) == 9);\n    assert (do_algebra({\"//\", \"*\"}, {7, 3, 4}) == 8);\n}\n", "result": "failed: a.out: test.cpp:45: int main(): Assertion `do_algebra({\"+\", \"*\", \"-\"}, {2, 3, 4, 5}) == 9' failed.\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/163", "completion_id": 0, "test_code": "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <string>\n#include <climits>\n#include <cstring>\n#include <cassert>\n#include <bitset>\n#include <functional>\n#include <cmath>\n#include <cstdlib>\n#include <queue>\n#include <bits/stdc++.h>\n\n#include <iostream>\n#include <vector>\n#include <algorithm> // for std::swap\n\nusing namespace std;\n\nvector<int> generate_integers(int a, int b) {\n    // Ensure a is less than or equal to b\n    if (a > b) {\n        swap(a, b);\n    }\n\n    // List of even digits\n    vector<int> even_digits = {0, 2, 4, 6, 8};\n    vector<int> result;\n\n    // Check each even digit and add it to the result if it is within the range [a, b]\n    for (int digit : even_digits) {\n        if (digit >= a && digit <= b) {\n            result.push_back(digit);\n        }\n    }\n\n    return result;\n}\n\n// Function to test the generate_integers function\nvoid test_generate_integers() {\n    vector<int> result1 = generate_integers(2, 8);\n    vector<int> expected1 = {2, 4, 6, 8};\n    cout << \"Test 1: \" << (result1 == expected1 ? \"Passed\" : \"Failed\") << endl;\n\n    vector<int> result2 = generate_integers(8, 2);\n    vector<int> expected2 = {2, 4, 6, 8};\n    cout << \"Test 2: \" << (result2 == expected2 ? \"Passed\" : \"Failed\") << endl;\n\n    vector<int> result3 = generate_integers(10, 14);\n    vector<int> expected3 = {};\n    cout << \"Test 3: \" << (result3 == expected3 ? \"Passed\" : \"Failed\") << endl;\n}\n\n\n#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(generate_integers(2, 10) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(10, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(132, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(17,89) , {}));\n}\n", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
