{"task_id": "Java/0", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/1", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        int balance = 0;\n        StringBuilder currentGroup = new StringBuilder();\n\n        for (char ch : paren_string.toCharArray()) {\n            if (ch == ' ') {\n                continue; // Ignore spaces\n            }\n            currentGroup.append(ch);\n            if (ch == '(') {\n                balance++;\n            } else if (ch == ')') {\n                balance--;\n            }\n            if (balance == 0) {\n                result.add(currentGroup.toString());\n                currentGroup.setLength(0); // Reset for the next group\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/2", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double truncate_number(double number) {\n        int integerPart = (int) number;\n        return number - integerPart;\n    }\n}\n"}
{"task_id": "Java/3", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/4", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double mean_absolute_deviation(List<Double> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be null or empty\");\n        }\n\n        double mean = 0.0;\n        for (double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n\n        double mad = 0.0;\n        for (double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n\n        return mad;\n    }\n}\n"}
{"task_id": "Java/5", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/6", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> parse_nested_parens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        String[] groups = paren_string.split(\" \");\n        \n        for (String group : groups) {\n            int maxDepth = 0;\n            int currentDepth = 0;\n            \n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentDepth++;\n                    maxDepth = Math.max(maxDepth, currentDepth);\n                } else if (c == ')') {\n                    currentDepth--;\n                }\n            }\n            \n            result.add(maxDepth);\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/7", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> filteredList = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredList.add(str);\n            }\n        }\n        return filteredList;\n    }\n}\n"}
{"task_id": "Java/8", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sum_product(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        \n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        \n        if (numbers.isEmpty()) {\n            sum = 0;\n            product = 1;\n        }\n        \n        return Arrays.asList(sum, product);\n    }\n}\n"}
{"task_id": "Java/9", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        if (numbers.isEmpty()) {\n            return result;\n        }\n        \n        int maxSoFar = Integer.MIN_VALUE;\n        for (int num : numbers) {\n            if (num > maxSoFar) {\n                maxSoFar = num;\n            }\n            result.add(maxSoFar);\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/10", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    public String make_palindrome(String string) {\n        if (string.isEmpty()) {\n            return \"\";\n        }\n\n        int n = string.length();\n        for (int i = 0; i < n; i++) {\n            if (isPalindrome(string.substring(i))) {\n                String prefix = string.substring(0, i);\n                String reversedPrefix = new StringBuilder(prefix).reverse().toString();\n                return string + reversedPrefix;\n            }\n        }\n        return string + new StringBuilder(string).reverse().toString();\n    }\n}\n"}
{"task_id": "Java/11", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String string_xor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        int length = Math.min(a.length(), b.length());\n        \n        for (int i = 0; i < length; i++) {\n            if (a.charAt(i) != b.charAt(i)) {\n                result.append('1');\n            } else {\n                result.append('0');\n            }\n        }\n        \n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/12", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        String longestString = strings.get(0);\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n        \n        return Optional.of(longestString);\n    }\n}\n"}
{"task_id": "Java/13", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int greatest_common_divisor(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}\n"}
{"task_id": "Java/14", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> all_prefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n}\n"}
{"task_id": "Java/15", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String string_sequence(int n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            if (i < n) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/16", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int count_distinct_characters(String string) {\n        Set<Character> distinctChars = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            distinctChars.add(Character.toLowerCase(c));\n        }\n        return distinctChars.size();\n    }\n}\n"}
{"task_id": "Java/17", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> parse_music(String string) {\n        List<Integer> beats = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        \n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    beats.add(4);\n                    break;\n                case \"o|\":\n                    beats.add(2);\n                    break;\n                case \".|\":\n                    beats.add(1);\n                    break;\n                default:\n                    // Handle unexpected input if necessary\n                    break;\n            }\n        }\n        \n        return beats;\n    }\n}\n"}
{"task_id": "Java/18", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int how_many_times(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while ((index = string.indexOf(substring, index)) != -1) {\n            count++;\n            index++;\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/19", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String sort_numbers(String numbers) {\n        // Define a map for the string representation of numbers to their integer values\n        Map<String, Integer> numMap = new HashMap<>();\n        numMap.put(\"zero\", 0);\n        numMap.put(\"one\", 1);\n        numMap.put(\"two\", 2);\n        numMap.put(\"three\", 3);\n        numMap.put(\"four\", 4);\n        numMap.put(\"five\", 5);\n        numMap.put(\"six\", 6);\n        numMap.put(\"seven\", 7);\n        numMap.put(\"eight\", 8);\n        numMap.put(\"nine\", 9);\n\n        // Split the input string by spaces\n        String[] numStrings = numbers.split(\" \");\n\n        // Create a list of pairs (number string, integer value)\n        List<Map.Entry<String, Integer>> numList = new ArrayList<>();\n        for (String numStr : numStrings) {\n            numList.add(new AbstractMap.SimpleEntry<>(numStr, numMap.get(numStr)));\n        }\n\n        // Sort the list by the integer value\n        numList.sort(Map.Entry.comparingByValue());\n\n        // Build the result string\n        StringBuilder sortedNumbers = new StringBuilder();\n        for (Map.Entry<String, Integer> entry : numList) {\n            if (sortedNumbers.length() > 0) {\n                sortedNumbers.append(\" \");\n            }\n            sortedNumbers.append(entry.getKey());\n        }\n\n        return sortedNumbers.toString();\n    }\n}\n"}
{"task_id": "Java/20", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        List<Double> closest_pair = new ArrayList<>();\n        closest_pair.add(numbers.get(0));\n        closest_pair.add(numbers.get(1));\n        double min_distance = Math.abs(numbers.get(1) - numbers.get(0));\n        \n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double current_distance = Math.abs(numbers.get(i) - numbers.get(j));\n                if (current_distance < min_distance) {\n                    closest_pair.clear();\n                    closest_pair.add(numbers.get(i));\n                    closest_pair.add(numbers.get(j));\n                    min_distance = current_distance;\n                }\n            }\n        }\n        \n        Collections.sort(closest_pair);\n        return closest_pair;\n    }\n}\n"}
{"task_id": "Java/21", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        if (numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements.\");\n        }\n\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n\n        List<Double> rescaledList = new ArrayList<>();\n        for (double number : numbers) {\n            double rescaledValue = (number - min) / (max - min);\n            rescaledList.add(rescaledValue);\n        }\n\n        return rescaledList;\n    }\n}\n"}
{"task_id": "Java/22", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> filter_integers(List<Object> values) {\n        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n}\n"}
{"task_id": "Java/23", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int strlen(String string) {\n        return string.length();\n    }\n}\n"}
{"task_id": "Java/24", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largest_divisor(int n) {\n        for (int i = n / 2; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1; // In case n is 1, the largest divisor is 1 itself.\n    }\n}\n"}
{"task_id": "Java/25", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors;\n    }\n}\n"}
{"task_id": "Java/26", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        for (Integer num : numbers) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        return numbers.stream()\n                      .filter(num -> frequencyMap.get(num) == 1)\n                      .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/27", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String flip_case(String string) {\n        StringBuilder flippedString = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                flippedString.append(Character.toUpperCase(c));\n            } else if (Character.isUpperCase(c)) {\n                flippedString.append(Character.toLowerCase(c));\n            } else {\n                flippedString.append(c);\n            }\n        }\n        return flippedString.toString();\n    }\n}\n"}
{"task_id": "Java/28", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String concatenate(List<String> strings) {\n        StringBuilder result = new StringBuilder();\n        for (String str : strings) {\n            result.append(str);\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/29", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/30", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> get_positive(List<Integer> l) {\n        return l.stream()\n                .filter(n -> n > 0)\n                .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/31", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_prime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/32", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double find_zero(List<Double> xs) {\n        // Ensure the list has an even number of coefficients\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"The list must have an even number of coefficients.\");\n        }\n        \n        // Find the interval where the polynomial changes sign\n        double a = -1.0;\n        double b = 1.0;\n        while (poly(xs, a) * poly(xs, b) > 0) {\n            a *= 2;\n            b *= 2;\n        }\n        \n        // Use binary search to find the zero point\n        double tolerance = 1e-10;\n        while (b - a > tolerance) {\n            double mid = (a + b) / 2;\n            if (poly(xs, mid) * poly(xs, a) > 0) {\n                a = mid;\n            } else {\n                b = mid;\n            }\n        }\n        \n        return (a + b) / 2;\n    }\n}\n"}
{"task_id": "Java/33", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_third(List<Integer> l) {\n        List<Integer> result = new ArrayList<>(l);\n        List<Integer> toSort = new ArrayList<>();\n        \n        // Collect elements at indices divisible by three\n        for (int i = 2; i < l.size(); i += 3) {\n            toSort.add(l.get(i));\n        }\n        \n        // Sort the collected elements\n        Collections.sort(toSort);\n        \n        // Replace the elements at indices divisible by three with sorted values\n        int index = 0;\n        for (int i = 2; i < l.size(); i += 3) {\n            result.set(i, toSort.get(index++));\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/34", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> uniqueSet = new HashSet<>(l);\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n        Collections.sort(uniqueList);\n        return uniqueList;\n    }\n}\n"}
{"task_id": "Java/35", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int max_element(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be null or empty\");\n        }\n        int max = l.get(0);\n        for (int num : l) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n}\n"}
{"task_id": "Java/36", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fizz_buzz(int n) {\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                int temp = i;\n                while (temp > 0) {\n                    if (temp % 10 == 7) {\n                        count++;\n                    }\n                    temp /= 10;\n                }\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/37", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_even(List<Integer> l) {\n        List<Integer> result = new ArrayList<>(l);\n        List<Integer> evenIndexValues = new ArrayList<>();\n        \n        // Collect values at even indices\n        for (int i = 0; i < l.size(); i += 2) {\n            evenIndexValues.add(l.get(i));\n        }\n        \n        // Sort the collected values\n        Collections.sort(evenIndexValues);\n        \n        // Replace the values at even indices with the sorted values\n        int evenIndex = 0;\n        for (int i = 0; i < l.size(); i += 2) {\n            result.set(i, evenIndexValues.get(evenIndex++));\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/38", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse the cycling in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n"}
{"task_id": "Java/39", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int prime_fib(int n) {\n        int count = 0;\n        int a = 0, b = 1;\n        while (true) {\n            int temp = a + b;\n            a = b;\n            b = temp;\n            if (isPrime(b)) {\n                count++;\n                if (count == n) {\n                    return b;\n                }\n            }\n        }\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        if (num == 2) return true;\n        if (num % 2 == 0) return false;\n        for (int i = 3; i <= Math.sqrt(num); i += 2) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/40", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        if (l.size() < 3) {\n            return false;\n        }\n        \n        Collections.sort(l);\n        \n        for (int i = 0; i < l.size() - 2; i++) {\n            int left = i + 1;\n            int right = l.size() - 1;\n            \n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        \n        return false;\n    }\n}\n"}
{"task_id": "Java/41", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int car_race_collision(int n) {\n        // Each right-to-left car will collide with each left-to-right car exactly once.\n        // Therefore, the number of collisions is simply the product of the number of cars in each direction.\n        return n * n;\n    }\n}\n"}
{"task_id": "Java/42", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> incr_list(List<Integer> l) {\n        return l.stream()\n                .map(i -> i + 1)\n                .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/43", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        Set<Integer> seen = new HashSet<>();\n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/44", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String change_base(int x, int base) {\n        if (x == 0) {\n            return \"0\";\n        }\n        \n        StringBuilder result = new StringBuilder();\n        while (x > 0) {\n            result.append(x % base);\n            x /= base;\n        }\n        \n        return result.reverse().toString();\n    }\n}\n"}
{"task_id": "Java/45", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangle_area(double a, double h) {\n        return 0.5 * a * h;\n    }\n}\n"}
{"task_id": "Java/46", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib4(int n) {\n        if (n == 0 || n == 1 || n == 3) return 0;\n        if (n == 2) return 2;\n\n        int[] fib4Array = new int[n + 1];\n        fib4Array[0] = 0;\n        fib4Array[1] = 0;\n        fib4Array[2] = 2;\n        fib4Array[3] = 0;\n\n        for (int i = 4; i <= n; i++) {\n            fib4Array[i] = fib4Array[i - 1] + fib4Array[i - 2] + fib4Array[i - 3] + fib4Array[i - 4];\n        }\n\n        return fib4Array[n];\n    }\n}\n"}
{"task_id": "Java/47", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            return (l.get(size / 2 - 1) + l.get(size / 2)) / 2.0;\n        } else {\n            return l.get(size / 2);\n        }\n    }\n}\n"}
{"task_id": "Java/48", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_palindrome(String text) {\n        int left = 0;\n        int right = text.length() - 1;\n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/49", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int modp(int n, int p) {\n        if (n == 0) {\n            return 1;\n        }\n        long result = 1;\n        long base = 2;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                result = (result * base) % p;\n            }\n            base = (base * base) % p;\n            n /= 2;\n        }\n        return (int) result;\n    }\n}\n"}
{"task_id": "Java/50", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public String decode_shift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26)));\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/51", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String remove_vowels(String text) {\n        if (text == null) {\n            return null;\n        }\n        StringBuilder result = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (!isVowel(c)) {\n                result.append(c);\n            }\n        }\n        return result.toString();\n    }\n\n    private boolean isVowel(char c) {\n        c = Character.toLowerCase(c);\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n}\n"}
{"task_id": "Java/52", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean below_threshold(List<Integer> l, int t) {\n        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/53", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add(int x, int y) {\n        return x + y;\n    }\n}\n"}
{"task_id": "Java/54", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean same_chars(String s0, String s1) {\n        Map<Character, Integer> charCount0 = new HashMap<>();\n        Map<Character, Integer> charCount1 = new HashMap<>();\n\n        for (char c : s0.toCharArray()) {\n            charCount0.put(c, charCount0.getOrDefault(c, 0) + 1);\n        }\n\n        for (char c : s1.toCharArray()) {\n            charCount1.put(c, charCount1.getOrDefault(c, 0) + 1);\n        }\n\n        return charCount0.equals(charCount1);\n    }\n}\n"}
{"task_id": "Java/55", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0, b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a + b;\n            a = b;\n            b = temp;\n        }\n        return b;\n    }\n}\n"}
{"task_id": "Java/56", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correct_bracketing(String brackets) {\n        int count = 0;\n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '<') {\n                count++;\n            } else if (bracket == '>') {\n                count--;\n            }\n            if (count < 0) {\n                return false;\n            }\n        }\n        return count == 0;\n    }\n}\n"}
{"task_id": "Java/57", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean monotonic(List<Integer> l) {\n        boolean increasing = true;\n        boolean decreasing = true;\n        \n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n        }\n        \n        return increasing || decreasing;\n    }\n}\n"}
{"task_id": "Java/58", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        set1.retainAll(set2);\n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result);\n        return result;\n    }\n}\n"}
{"task_id": "Java/59", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largest_prime_factor(int n) {\n        int largestFactor = 1;\n        \n        // Check for the number of 2s that divide n\n        while (n % 2 == 0) {\n            largestFactor = 2;\n            n /= 2;\n        }\n        \n        // n must be odd at this point, so we can skip even numbers\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                largestFactor = i;\n                n /= i;\n            }\n        }\n        \n        // This condition is to check if n is a prime number greater than 2\n        if (n > 2) {\n            largestFactor = n;\n        }\n        \n        return largestFactor;\n    }\n}\n"}
{"task_id": "Java/60", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_to_n(int n) {\n        return n * (n + 1) / 2;\n    }\n}\n"}
{"task_id": "Java/61", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correct_bracketing(String brackets) {\n        int count = 0;\n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '(') {\n                count++;\n            } else if (bracket == ')') {\n                count--;\n                if (count < 0) {\n                    return false;\n                }\n            }\n        }\n        return count == 0;\n    }\n}\n"}
{"task_id": "Java/62", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> derivativeCoefficients = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            derivativeCoefficients.add(xs.get(i) * i);\n        }\n        return derivativeCoefficients;\n    }\n}\n"}
{"task_id": "Java/63", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fibfib(int n) {\n        if (n == 0 || n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        \n        int[] fibfibArray = new int[n + 1];\n        fibfibArray[0] = 0;\n        fibfibArray[1] = 0;\n        fibfibArray[2] = 1;\n        \n        for (int i = 3; i <= n; i++) {\n            fibfibArray[i] = fibfibArray[i - 1] + fibfibArray[i - 2] + fibfibArray[i - 3];\n        }\n        \n        return fibfibArray[n];\n    }\n}\n"}
{"task_id": "Java/64", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int vowels_count(String s) {\n        s = s.toLowerCase();\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        if (s.endsWith(\"y\")) {\n            count++;\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/65", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String circular_shift(int x, int shift) {\n        String numStr = Integer.toString(x);\n        int length = numStr.length();\n        \n        if (shift >= length) {\n            return new StringBuilder(numStr).reverse().toString();\n        }\n        \n        String shiftedStr = numStr.substring(length - shift) + numStr.substring(0, length - shift);\n        return shiftedStr;\n    }\n}\n"}
{"task_id": "Java/66", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digitSum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/67", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruit_distribution(String s, int n) {\n        // Split the string by spaces\n        String[] parts = s.split(\" \");\n        \n        // Extract the number of apples and oranges\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[2]);\n        \n        // Calculate the number of mangoes\n        int mangoes = n - apples - oranges;\n        \n        return mangoes;\n    }\n}\n"}
{"task_id": "Java/68", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return result;\n        }\n\n        int smallestEven = Integer.MAX_VALUE;\n        int smallestIndex = -1;\n\n        for (int i = 0; i < arr.size(); i++) {\n            int value = arr.get(i);\n            if (value % 2 == 0 && value < smallestEven) {\n                smallestEven = value;\n                smallestIndex = i;\n            }\n        }\n\n        if (smallestIndex != -1) {\n            result.add(smallestEven);\n            result.add(smallestIndex);\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/69", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int search(List<Integer> lst) {\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        // Count the frequency of each integer in the list\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        int maxValidNumber = -1;\n        \n        // Iterate through the frequency map to find the greatest valid number\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int number = entry.getKey();\n            int frequency = entry.getValue();\n            \n            if (frequency >= number && number > maxValidNumber) {\n                maxValidNumber = number;\n            }\n        }\n        \n        return maxValidNumber;\n    }\n}\n"}
{"task_id": "Java/70", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        List<Integer> sortedList = new ArrayList<>(lst);\n        Collections.sort(sortedList);\n        \n        int minIndex = 0;\n        int maxIndex = sortedList.size() - 1;\n        \n        while (minIndex <= maxIndex) {\n            if (minIndex <= maxIndex) {\n                result.add(sortedList.get(minIndex));\n                minIndex++;\n            }\n            if (minIndex <= maxIndex) {\n                result.add(sortedList.get(maxIndex));\n                maxIndex--;\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/71", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangle_area(double a, double b, double c) {\n        // Check if the sides can form a valid triangle\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        \n        // Calculate the semi-perimeter\n        double s = (a + b + c) / 2;\n        \n        // Calculate the area using Heron's formula\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        \n        // Round the area to 2 decimal points\n        return Math.round(area * 100.0) / 100.0;\n    }\n}\n"}
{"task_id": "Java/72", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean will_it_fly(List<Integer> q, int w) {\n        // Check if the list is palindromic\n        boolean isPalindromic = true;\n        int n = q.size();\n        for (int i = 0; i < n / 2; i++) {\n            if (!q.get(i).equals(q.get(n - i - 1))) {\n                isPalindromic = false;\n                break;\n            }\n        }\n\n        // Calculate the sum of the elements\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n\n        // Check if the sum is less than or equal to the maximum possible weight\n        return isPalindromic && sum <= w;\n    }\n}\n"}
{"task_id": "Java/73", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int smallest_change(List<Integer> arr) {\n        int n = arr.size();\n        int changes = 0;\n        \n        for (int i = 0; i < n / 2; i++) {\n            if (!arr.get(i).equals(arr.get(n - i - 1))) {\n                changes++;\n            }\n        }\n        \n        return changes;\n    }\n}\n"}
{"task_id": "Java/74", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        int totalCharsLst1 = lst1.stream().mapToInt(String::length).sum();\n        int totalCharsLst2 = lst2.stream().mapToInt(String::length).sum();\n\n        if (totalCharsLst1 <= totalCharsLst2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n"}
{"task_id": "Java/75", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_multiply_prime(int a) {\n        // Helper function to check if a number is prime\n        boolean[] isPrime = new boolean[100];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = isPrime[1] = false; // 0 and 1 are not prime numbers\n\n        for (int i = 2; i * i < 100; i++) {\n            if (isPrime[i]) {\n                for (int j = i * i; j < 100; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n\n        // Check if the number can be expressed as a product of three primes\n        for (int i = 2; i < 100; i++) {\n            if (isPrime[i]) {\n                for (int j = i; j < 100; j++) {\n                    if (isPrime[j]) {\n                        int k = a / (i * j);\n                        if (k < 100 && isPrime[k] && i * j * k == a) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/76", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_simple_power(int x, int n) {\n        if (n <= 1) {\n            return x == 1;\n        }\n        int power = 1;\n        while (power < x) {\n            power *= n;\n        }\n        return power == x;\n    }\n}\n"}
{"task_id": "Java/77", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean iscube(int a) {\n        if (a < 0) {\n            a = -a;\n        }\n        int cubeRoot = (int) Math.cbrt(a);\n        return cubeRoot * cubeRoot * cubeRoot == a;\n    }\n}\n"}
{"task_id": "Java/78", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int hex_key(String num) {\n        // Define the prime hexadecimal digits\n        Set<Character> primeHexDigits = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        // Initialize the count of prime digits\n        int count = 0;\n        \n        // Iterate through each character in the input string\n        for (char c : num.toCharArray()) {\n            // If the character is a prime hexadecimal digit, increment the count\n            if (primeHexDigits.contains(c)) {\n                count++;\n            }\n        }\n        \n        // Return the count of prime hexadecimal digits\n        return count;\n    }\n}\n"}
{"task_id": "Java/79", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String decimal_to_binary(int decimal) {\n        String binary = Integer.toBinaryString(decimal);\n        return \"db\" + binary + \"db\";\n    }\n}\n"}
{"task_id": "Java/80", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_happy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n        \n        for (int i = 0; i <= s.length() - 3; i++) {\n            char first = s.charAt(i);\n            char second = s.charAt(i + 1);\n            char third = s.charAt(i + 2);\n            \n            if (first == second || second == third || first == third) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/81", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (double grade : grades) {\n            if (grade == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}\n"}
{"task_id": "Java/82", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean prime_length(String string) {\n        int length = string.length();\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/83", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int starts_one_ends(int n) {\n        // There are 2^(n-1) numbers that start with 1 and 2^(n-1) numbers that end with 1\n        // However, the number 1 followed by (n-1) zeros is counted in both sets, so we subtract 1\n        return (int) (Math.pow(2, n - 1) + Math.pow(2, n - 1) - 1);\n    }\n}\n"}
{"task_id": "Java/84", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(int N) {\n        int sumOfDigits = 0;\n        while (N > 0) {\n            sumOfDigits += N % 10;\n            N /= 10;\n        }\n        return Integer.toBinaryString(sumOfDigits);\n    }\n}\n"}
{"task_id": "Java/85", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/86", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String anti_shuffle(String s) {\n        String[] words = s.split(\" \");\n        StringBuilder result = new StringBuilder();\n        \n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            result.append(new String(chars)).append(\" \");\n        }\n        \n        return result.toString().trim();\n    }\n}\n"}
{"task_id": "Java/87", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    result.add(Arrays.asList(i, j));\n                }\n            }\n        }\n        \n        // Sort by rows in ascending order\n        result.sort((a, b) -> a.get(0) - b.get(0));\n        \n        // Sort coordinates of the same row by columns in descending order\n        for (int i = 0; i < result.size(); i++) {\n            for (int j = i + 1; j < result.size(); j++) {\n                if (result.get(i).get(0).equals(result.get(j).get(0))) {\n                    if (result.get(i).get(1) < result.get(j).get(1)) {\n                        Collections.swap(result, i, j);\n                    }\n                }\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/88", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> array) {\n        if (array.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        int first = array.get(0);\n        int last = array.get(array.size() - 1);\n        boolean isSumEven = (first + last) % 2 == 0;\n\n        List<Integer> sortedArray = new ArrayList<>(array);\n        if (isSumEven) {\n            sortedArray.sort(Collections.reverseOrder());\n        } else {\n            Collections.sort(sortedArray);\n        }\n\n        return sortedArray;\n    }\n}\n"}
{"task_id": "Java/89", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encrypt(String s) {\n        StringBuilder encrypted = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            int shift = (c - 'a' + 2 * 2) % 26;\n            encrypted.append((char) ('a' + shift));\n        }\n        return encrypted.toString();\n    }\n}\n"}
{"task_id": "Java/90", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\n        int smallest = Integer.MAX_VALUE;\n        int secondSmallest = Integer.MAX_VALUE;\n        boolean foundSecondSmallest = false;\n\n        for (int num : lst) {\n            if (num < smallest) {\n                secondSmallest = smallest;\n                smallest = num;\n            } else if (num > smallest && num < secondSmallest) {\n                secondSmallest = num;\n                foundSecondSmallest = true;\n            }\n        }\n\n        return foundSecondSmallest ? Optional.of(secondSmallest) : Optional.empty();\n    }\n}\n"}
{"task_id": "Java/91", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int is_bored(String S) {\n        String[] sentences = S.split(\"[.!?]\");\n        int boredomCount = 0;\n        \n        for (String sentence : sentences) {\n            sentence = sentence.trim();\n            if (sentence.startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n        \n        return boredomCount;\n    }\n}\n"}
{"task_id": "Java/92", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean any_int(Object x, Object y, Object z) {\n        if (!(x instanceof Integer) || !(y instanceof Integer) || !(z instanceof Integer)) {\n            return false;\n        }\n\n        int a = (Integer) x;\n        int b = (Integer) y;\n        int c = (Integer) z;\n\n        return (a == b + c) || (b == a + c) || (c == a + b);\n    }\n}\n"}
{"task_id": "Java/93", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encode(String message) {\n        StringBuilder encodedMessage = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (\"aeiouAEIOU\".indexOf(c) != -1) {\n                    char newChar = (char) (c + 2);\n                    if ((Character.isLowerCase(c) && newChar > 'z') || (Character.isUpperCase(c) && newChar > 'Z')) {\n                        newChar -= 26;\n                    }\n                    encodedMessage.append(newChar);\n                } else {\n                    encodedMessage.append(Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c));\n                }\n            } else {\n                encodedMessage.append(c);\n            }\n        }\n        return encodedMessage.toString();\n    }\n}\n"}
{"task_id": "Java/94", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int skjkasdkd(List<Integer> lst) {\n        int largestPrime = -1;\n        \n        // Find the largest prime number in the list\n        for (int num : lst) {\n            if (isPrime(num) && num > largestPrime) {\n                largestPrime = num;\n            }\n        }\n        \n        // If no prime number is found, return 0\n        if (largestPrime == -1) {\n            return 0;\n        }\n        \n        // Calculate the sum of the digits of the largest prime number\n        int sumOfDigits = 0;\n        while (largestPrime > 0) {\n            sumOfDigits += largestPrime % 10;\n            largestPrime /= 10;\n        }\n        \n        return sumOfDigits;\n    }\n    \n    // Helper method to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/95", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        \n        boolean allLower = true;\n        boolean allUpper = true;\n        \n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            \n            String strKey = (String) key;\n            if (!strKey.equals(strKey.toLowerCase())) {\n                allLower = false;\n            }\n            if (!strKey.equals(strKey.toUpperCase())) {\n                allUpper = false;\n            }\n            \n            if (!allLower && !allUpper) {\n                return false;\n            }\n        }\n        \n        return allLower || allUpper;\n    }\n}\n"}
{"task_id": "Java/96", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<>();\n        if (n <= 2) {\n            return primes;\n        }\n        \n        boolean[] isPrime = new boolean[n];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = isPrime[1] = false; // 0 and 1 are not prime numbers\n        \n        for (int i = 2; i < n; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n                for (int j = 2 * i; j < n; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n        \n        return primes;\n    }\n}\n"}
{"task_id": "Java/97", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int multiply(int a, int b) {\n        int unitDigitA = Math.abs(a) % 10;\n        int unitDigitB = Math.abs(b) % 10;\n        return unitDigitA * unitDigitB;\n    }\n}\n"}
{"task_id": "Java/98", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int count_upper(String s) {\n        int count = 0;\n        Set<Character> vowels = new HashSet<>(Arrays.asList('A', 'E', 'I', 'O', 'U'));\n        \n        for (int i = 0; i < s.length(); i += 2) {\n            if (vowels.contains(s.charAt(i))) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/99", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int closest_integer(String value) {\n        double number = Double.parseDouble(value);\n        int roundedNumber = (int) Math.round(number);\n        return roundedNumber;\n    }\n}\n"}
{"task_id": "Java/100", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        int currentLevel = n;\n        \n        for (int i = 0; i < n; i++) {\n            pile.add(currentLevel);\n            if (currentLevel % 2 == 0) {\n                currentLevel += 2; // Next even number\n            } else {\n                currentLevel += 2; // Next odd number\n            }\n        }\n        \n        return pile;\n    }\n}\n"}
{"task_id": "Java/101", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> words_string(String s) {\n        // Split the string by both commas and spaces\n        String[] words = s.split(\"[,\\\\s]+\");\n        return Arrays.asList(words);\n    }\n}\n"}
{"task_id": "Java/102", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int choose_num(int x, int y) {\n        // Ensure x is less than or equal to y\n        if (x > y) {\n            return -1;\n        }\n        \n        // Adjust x to be the smallest even number greater than or equal to x\n        if (x % 2 != 0) {\n            x += 1;\n        }\n        \n        // Adjust y to be the largest even number less than or equal to y\n        if (y % 2 != 0) {\n            y -= 1;\n        }\n        \n        // If the range [x, y] contains any even numbers, return the largest one\n        if (x <= y) {\n            return y;\n        }\n        \n        // If no even numbers are in the range, return -1\n        return -1;\n    }\n}\n"}
{"task_id": "Java/103", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object rounded_avg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        \n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        \n        int count = m - n + 1;\n        int average = (int) Math.round((double) sum / count);\n        return Integer.toBinaryString(average);\n    }\n}\n"}
{"task_id": "Java/104", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> unique_digits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int num : x) {\n            if (hasOnlyOddDigits(num)) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        return result;\n    }\n    \n    private boolean hasOnlyOddDigits(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return false;\n            }\n            num /= 10;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/105", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> by_length(List<Integer> arr) {\n        // Filter and sort the valid numbers between 1 and 9\n        List<Integer> validNumbers = new ArrayList<>();\n        for (int num : arr) {\n            if (num >= 1 && num <= 9) {\n                validNumbers.add(num);\n            }\n        }\n        Collections.sort(validNumbers);\n\n        // Reverse the sorted list\n        Collections.reverse(validNumbers);\n\n        // Map the numbers to their corresponding names\n        List<String> result = new ArrayList<>();\n        for (int num : validNumbers) {\n            result.add(getNumberName(num));\n        }\n\n        return result;\n    }\n\n    private String getNumberName(int num) {\n        switch (num) {\n            case 1: return \"One\";\n            case 2: return \"Two\";\n            case 3: return \"Three\";\n            case 4: return \"Four\";\n            case 5: return \"Five\";\n            case 6: return \"Six\";\n            case 7: return \"Seven\";\n            case 8: return \"Eight\";\n            case 9: return \"Nine\";\n            default: return \"\";\n        }\n    }\n}\n"}
{"task_id": "Java/106", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sumOfNumbers(i));\n            }\n        }\n        return result;\n    }\n\n    private int factorial(int num) {\n        int fact = 1;\n        for (int i = 1; i <= num; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n\n    private int sumOfNumbers(int num) {\n        return num * (num + 1) / 2;\n    }\n}\n"}
{"task_id": "Java/107", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> even_odd_palindrome(int n) {\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n\n    private boolean isPalindrome(int num) {\n        String str = Integer.toString(num);\n        int len = str.length();\n        for (int i = 0; i < len / 2; i++) {\n            if (str.charAt(i) != str.charAt(len - i - 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/108", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int count_nums(List<Integer> arr) {\n        int count = 0;\n        for (int num : arr) {\n            int sum = 0;\n            int absNum = Math.abs(num);\n            while (absNum > 0) {\n                sum += absNum % 10;\n                absNum /= 10;\n            }\n            if (num < 0) {\n                sum = -sum;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/109", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean move_one_ball(List<Integer> arr) {\n        if (arr.isEmpty()) return true;\n\n        int n = arr.size();\n        int shifts = 0;\n\n        // Find the number of shifts needed to make the array sorted\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i) > arr.get((i + 1) % n)) {\n                shifts++;\n            }\n        }\n\n        // If there is more than one break point, it's not possible to sort the array\n        return shifts <= 1;\n    }\n}\n"}
{"task_id": "Java/110", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Count the number of odd elements in lst1\n        int oddCount = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCount++;\n            }\n        }\n\n        // Count the number of even elements in lst2\n        int evenCount = 0;\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCount++;\n            }\n        }\n\n        // If the number of odd elements in lst1 is less than or equal to\n        // the number of even elements in lst2, then it is possible to make lst1 all even\n        if (oddCount <= evenCount) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}\n"}
{"task_id": "Java/111", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> letterCount = new HashMap<>();\n        if (test.isEmpty()) {\n            return letterCount;\n        }\n\n        String[] letters = test.split(\" \");\n        for (String letter : letters) {\n            letterCount.put(letter, letterCount.getOrDefault(letter, 0) + 1);\n        }\n\n        int maxCount = Collections.max(letterCount.values());\n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : letterCount.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/112", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Object> reverse_delete(String s, String c) {\n        StringBuilder result = new StringBuilder();\n        Set<Character> charsToDelete = new HashSet<>();\n        \n        // Add characters to be deleted to a set for O(1) lookup\n        for (char ch : c.toCharArray()) {\n            charsToDelete.add(ch);\n        }\n        \n        // Build the result string by excluding characters in charsToDelete\n        for (char ch : s.toCharArray()) {\n            if (!charsToDelete.contains(ch)) {\n                result.append(ch);\n            }\n        }\n        \n        // Check if the result string is a palindrome\n        boolean isPalindrome = true;\n        int len = result.length();\n        for (int i = 0; i < len / 2; i++) {\n            if (result.charAt(i) != result.charAt(len - 1 - i)) {\n                isPalindrome = false;\n                break;\n            }\n        }\n        \n        // Return the result as a list containing the result string and the palindrome check\n        List<Object> resultList = new ArrayList<>();\n        resultList.add(result.toString());\n        resultList.add(isPalindrome);\n        return resultList;\n    }\n}\n"}
{"task_id": "Java/113", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int oddCount = 0;\n            \n            for (char ch : str.toCharArray()) {\n                if (Character.getNumericValue(ch) % 2 != 0) {\n                    oddCount++;\n                }\n            }\n            \n            result.add(\"the number of odd elements \" + oddCount + \"n the str\" + (i + 1) + \"ng \" + (i + 1) + \" of the \" + (i + 1) + \"nput.\");\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/114", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int minSubArraySum(List<Integer> nums) {\n        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n\n        for (int num : nums) {\n            currentSum += num;\n            if (currentSum < minSum) {\n                minSum = currentSum;\n            }\n            if (currentSum > 0) {\n                currentSum = 0;\n            }\n        }\n\n        return minSum;\n    }\n}\n"}
{"task_id": "Java/115", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        int totalBucketsNeeded = 0;\n        \n        for (List<Integer> well : grid) {\n            int waterUnits = 0;\n            for (int unit : well) {\n                if (unit == 1) {\n                    waterUnits++;\n                }\n            }\n            if (waterUnits > 0) {\n                totalBucketsNeeded += (int) Math.ceil((double) waterUnits / capacity);\n            }\n        }\n        \n        return totalBucketsNeeded;\n    }\n}\n"}
{"task_id": "Java/116", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> arr) {\n        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int countA = Integer.bitCount(Math.abs(a));\n                int countB = Integer.bitCount(Math.abs(b));\n                if (countA == countB) {\n                    return Integer.compare(a, b);\n                }\n                return Integer.compare(countA, countB);\n            }\n        });\n        return arr;\n    }\n}\n"}
{"task_id": "Java/117", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> select_words(String s, int n) {\n        List<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int consonantCount = 0;\n            for (char c : word.toCharArray()) {\n                if (isConsonant(c)) {\n                    consonantCount++;\n                }\n            }\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n\n    private boolean isConsonant(char c) {\n        c = Character.toLowerCase(c);\n        return \"bcdfghjklmnpqrstvwxyz\".indexOf(c) != -1;\n    }\n}\n"}
{"task_id": "Java/118", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String get_closest_vowel(String word) {\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        Set<Character> consonants = new HashSet<>(Arrays.asList('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z',\n                                                                'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'));\n        \n        for (int i = word.length() - 2; i > 0; i--) {\n            if (vowels.contains(word.charAt(i)) && consonants.contains(word.charAt(i + 1)) && consonants.contains(word.charAt(i - 1))) {\n                return String.valueOf(word.charAt(i));\n            }\n        }\n        return \"\";\n    }\n}\n"}
{"task_id": "Java/119", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String match_parens(List<String> lst) {\n        int balance1 = 0, balance2 = 0;\n        for (char c : lst.get(0).toCharArray()) {\n            if (c == '(') balance1++;\n            else balance1--;\n        }\n        for (char c : lst.get(1).toCharArray()) {\n            if (c == '(') balance2++;\n            else balance2--;\n        }\n        \n        // Check if the total balance can be zero\n        if (balance1 + balance2 == 0 && balance1 >= 0 && balance2 >= 0) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}\n"}
{"task_id": "Java/120", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Convert the list to a max heap\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n        maxHeap.addAll(arr);\n\n        // Extract the top k elements from the max heap\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            result.add(maxHeap.poll());\n        }\n\n        // Sort the result list in ascending order\n        Collections.sort(result);\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/121", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/122", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add_elements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) >= 10 && arr.get(i) <= 99) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/123", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> get_odd_collatz(int n) {\n        List<Integer> oddNumbers = new ArrayList<>();\n        while (n != 1) {\n            if (n % 2 != 0) {\n                oddNumbers.add(n);\n            }\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n        }\n        oddNumbers.add(1); // Adding the last number in the sequence which is always 1\n        Collections.sort(oddNumbers);\n        return oddNumbers;\n    }\n}\n"}
{"task_id": "Java/124", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean valid_date(String date) {\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n            return false;\n        }\n\n        int month, day, year;\n        try {\n            month = Integer.parseInt(parts[0]);\n            day = Integer.parseInt(parts[1]);\n            year = Integer.parseInt(parts[2]);\n        } catch (NumberFormatException e) {\n            return false;\n        }\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        if (day < 1) {\n            return false;\n        }\n\n        switch (month) {\n            case 1: case 3: case 5: case 7: case 8: case 10: case 12:\n                if (day > 31) {\n                    return false;\n                }\n                break;\n            case 4: case 6: case 9: case 11:\n                if (day > 30) {\n                    return false;\n                }\n                break;\n            case 2:\n                if (day > 29) {\n                    return false;\n                }\n                break;\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/125", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object split_words(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 != 0) {\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n}\n"}
{"task_id": "Java/126", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_sorted(List<Integer> lst) {\n        if (lst.size() <= 1) return true;\n        \n        Map<Integer, Integer> frequency = new HashMap<>();\n        for (int num : lst) {\n            frequency.put(num, frequency.getOrDefault(num, 0) + 1);\n            if (frequency.get(num) > 2) return false;\n        }\n        \n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < lst.get(i - 1)) return false;\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/127", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n\n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n\n        if (intersectionStart > intersectionEnd) {\n            return \"NO\";\n        }\n\n        int intersectionLength = intersectionEnd - intersectionStart + 1;\n\n        if (isPrime(intersectionLength)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/128", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int signProduct = 1;\n        int sumMagnitudes = 0;\n\n        for (int num : arr) {\n            if (num > 0) {\n                signProduct *= 1;\n            } else if (num < 0) {\n                signProduct *= -1;\n            } else {\n                signProduct *= 0;\n            }\n            sumMagnitudes += Math.abs(num);\n        }\n\n        return Optional.of(signProduct * sumMagnitudes);\n    }\n}\n"}
{"task_id": "Java/129", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        List<Integer> result = new ArrayList<>();\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> {\n            for (int i = 0; i < a.length; i++) {\n                if (a[i] != b[i]) return a[i] - b[i];\n            }\n            return 0;\n        });\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                pq.offer(new int[]{grid.get(i).get(j), i, j});\n            }\n        }\n\n        while (!pq.isEmpty()) {\n            int[] current = pq.poll();\n            int value = current[0];\n            int x = current[1];\n            int y = current[2];\n            List<Integer> path = new ArrayList<>();\n            path.add(value);\n            boolean[][] visited = new boolean[n][n];\n            visited[x][y] = true;\n            dfs(grid, k, x, y, path, visited, directions, pq);\n            if (path.size() == k) {\n                result = path;\n                break;\n            }\n        }\n\n        return result;\n    }\n\n    private void dfs(List<List<Integer>> grid, int k, int x, int y, List<Integer> path, boolean[][] visited, int[][] directions, PriorityQueue<int[]> pq) {\n        if (path.size() == k) return;\n        for (int[] dir : directions) {\n            int newX = x + dir[0];\n            int newY = y + dir[1];\n            if (newX >= 0 && newX < grid.size() && newY >= 0 && newY < grid.size() && !visited[newX][newY]) {\n                visited[newX][newY] = true;\n                path.add(grid.get(newX).get(newY));\n                dfs(grid, k, newX, newY, path, visited, directions, pq);\n                if (path.size() == k) return;\n                path.remove(path.size() - 1);\n                visited[newX][newY] = false;\n            }\n        }\n    }\n}\n"}
{"task_id": "Java/130", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n        List<Integer> tribonacciSequence = new ArrayList<>();\n        if (n < 0) {\n            return tribonacciSequence; // Return empty list for invalid input\n        }\n\n        // Initialize the first two elements of the sequence\n        tribonacciSequence.add(1);\n        tribonacciSequence.add(3);\n\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                tribonacciSequence.add(1 + i / 2);\n            } else {\n                int nextValue = tribonacciSequence.get(i - 1) + tribonacciSequence.get(i - 2) + tribonacciSequence.get(i + 1);\n                tribonacciSequence.add(nextValue);\n            }\n        }\n\n        return tribonacciSequence;\n    }\n}\n"}
{"task_id": "Java/131", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digits(int n) {\n        int product = 1;\n        boolean hasOdd = false;\n        \n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n                hasOdd = true;\n            }\n            n /= 10;\n        }\n        \n        return hasOdd ? product : 0;\n    }\n}\n"}
{"task_id": "Java/132", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_nested(String string) {\n        Stack<Character> stack = new Stack<>();\n        boolean hasNested = false;\n\n        for (char ch : string.toCharArray()) {\n            if (ch == '[') {\n                stack.push(ch);\n            } else if (ch == ']') {\n                if (!stack.isEmpty() && stack.peek() == '[') {\n                    stack.pop();\n                    if (!stack.isEmpty()) {\n                        hasNested = true;\n                    }\n                } else {\n                    stack.push(ch);\n                }\n            }\n        }\n\n        return hasNested;\n    }\n}\n"}
{"task_id": "Java/133", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_squares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            int ceilingNum = (int) Math.ceil(num);\n            sum += ceilingNum * ceilingNum;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/134", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        if (txt.isEmpty()) {\n            return false;\n        }\n        \n        char lastChar = txt.charAt(txt.length() - 1);\n        if (!Character.isLetter(lastChar)) {\n            return false;\n        }\n        \n        int lastSpaceIndex = txt.lastIndexOf(' ');\n        if (lastSpaceIndex == -1) {\n            return false;\n        }\n        \n        String lastWord = txt.substring(lastSpaceIndex + 1);\n        return lastWord.length() == 1;\n    }\n}\n"}
{"task_id": "Java/135", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int can_arrange(List<Integer> arr) {\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}\n"}
{"task_id": "Java/136", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        Optional<Integer> largestNegative = Optional.empty();\n        Optional<Integer> smallestPositive = Optional.empty();\n\n        for (Integer num : lst) {\n            if (num < 0) {\n                if (!largestNegative.isPresent() || num > largestNegative.get()) {\n                    largestNegative = Optional.of(num);\n                }\n            } else if (num > 0) {\n                if (!smallestPositive.isPresent() || num < smallestPositive.get()) {\n                    smallestPositive = Optional.of(num);\n                }\n            }\n        }\n\n        List<Optional<Integer>> result = new ArrayList<>();\n        result.add(largestNegative);\n        result.add(smallestPositive);\n        return result;\n    }\n}\n"}
{"task_id": "Java/137", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Object> compare_one(Object a, Object b) {\n        // Convert both objects to strings and normalize the decimal separator\n        String strA = a.toString().replace(\",\", \".\");\n        String strB = b.toString().replace(\",\", \".\");\n\n        // Parse the strings to doubles\n        Double doubleA = Double.parseDouble(strA);\n        Double doubleB = Double.parseDouble(strB);\n\n        // Compare the doubles\n        if (doubleA > doubleB) {\n            return Optional.of(a);\n        } else if (doubleB > doubleA) {\n            return Optional.of(b);\n        } else {\n            return Optional.empty();\n        }\n    }\n}\n"}
{"task_id": "Java/138", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_equal_to_sum_even(int n) {\n        // A number can be written as the sum of exactly 4 positive even numbers if and only if it is at least 8 and even.\n        return n >= 8 && n % 2 == 0;\n    }\n}\n"}
{"task_id": "Java/139", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public long special_factorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    private long factorial(int num) {\n        long fact = 1;\n        for (int i = 1; i <= num; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n}\n"}
{"task_id": "Java/140", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String fix_spaces(String text) {\n        StringBuilder result = new StringBuilder();\n        int i = 0;\n        while (i < text.length()) {\n            if (text.charAt(i) == ' ') {\n                int start = i;\n                while (i < text.length() && text.charAt(i) == ' ') {\n                    i++;\n                }\n                int end = i;\n                if (end - start > 2) {\n                    result.append('-');\n                } else {\n                    for (int j = start; j < end; j++) {\n                        result.append('_');\n                    }\n                }\n            } else {\n                result.append(text.charAt(i));\n                i++;\n            }\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/141", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String file_name_check(String file_name) {\n        // Check if there are more than three digits\n        int digitCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n                if (digitCount > 3) {\n                    return \"No\";\n                }\n            }\n        }\n\n        // Check if there is exactly one dot\n        int dotIndex = file_name.indexOf('.');\n        if (dotIndex == -1 || dotIndex != file_name.lastIndexOf('.')) {\n            return \"No\";\n        }\n\n        // Check if the substring before the dot is not empty and starts with a latin letter\n        String namePart = file_name.substring(0, dotIndex);\n        if (namePart.isEmpty() || !Character.isLetter(namePart.charAt(0))) {\n            return \"No\";\n        }\n\n        // Check if the substring after the dot is one of the allowed extensions\n        String extension = file_name.substring(dotIndex + 1);\n        List<String> allowedExtensions = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        if (!allowedExtensions.contains(extension)) {\n            return \"No\";\n        }\n\n        return \"Yes\";\n    }\n}\n"}
{"task_id": "Java/142", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_squares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += Math.pow(lst.get(i), 2);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                sum += Math.pow(lst.get(i), 3);\n            } else {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/143", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String words_in_sentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n        \n        for (String word : words) {\n            if (isPrime(word.length())) {\n                if (result.length() > 0) {\n                    result.append(\" \");\n                }\n                result.append(word);\n            }\n        }\n        \n        return result.toString();\n    }\n    \n    private boolean isPrime(int n) {\n        if (n <= 1) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/144", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean simplify(String x, String n) {\n        // Parse the fractions\n        String[] partsX = x.split(\"/\");\n        int numeratorX = Integer.parseInt(partsX[0]);\n        int denominatorX = Integer.parseInt(partsX[1]);\n        \n        String[] partsN = n.split(\"/\");\n        int numeratorN = Integer.parseInt(partsN[0]);\n        int denominatorN = Integer.parseInt(partsN[1]);\n        \n        // Calculate the product of the fractions\n        int numeratorProduct = numeratorX * numeratorN;\n        int denominatorProduct = denominatorX * denominatorN;\n        \n        // Check if the product is a whole number\n        return numeratorProduct % denominatorProduct == 0;\n    }\n}\n"}
{"task_id": "Java/145", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> order_by_points(List<Integer> nums) {\n        Collections.sort(nums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int sumA = sumOfDigits(a);\n                int sumB = sumOfDigits(b);\n                return sumA != sumB ? Integer.compare(sumA, sumB) : Integer.compare(nums.indexOf(a), nums.indexOf(b));\n            }\n        });\n        return nums;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        num = Math.abs(num);\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/146", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10) {\n                String numStr = String.valueOf(Math.abs(num));\n                char firstDigit = numStr.charAt(0);\n                char lastDigit = numStr.charAt(numStr.length() - 1);\n                if (isOddDigit(firstDigit) && isOddDigit(lastDigit)) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    private boolean isOddDigit(char digit) {\n        int digitValue = Character.getNumericValue(digit);\n        return digitValue % 2 != 0;\n    }\n}\n"}
{"task_id": "Java/147", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int get_max_triples(int n) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = (i + 1) * (i + 1) - (i + 1) + 1;\n        }\n\n        int count = 0;\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/148", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> bf(String planet1, String planet2) {\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        List<String> result = new ArrayList<>();\n        \n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        \n        if (index1 == -1 || index2 == -1) {\n            return result; // Return empty list if either planet name is incorrect\n        }\n        \n        int start = Math.min(index1, index2);\n        int end = Math.max(index1, index2);\n        \n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/149", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> sorted_list_sum(List<String> lst) {\n        // Filter out strings with odd lengths\n        List<String> filteredList = new ArrayList<>();\n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                filteredList.add(str);\n            }\n        }\n\n        // Sort the filtered list first by length, then alphabetically\n        Collections.sort(filteredList, new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                if (s1.length() != s2.length()) {\n                    return s1.length() - s2.length();\n                } else {\n                    return s1.compareTo(s2);\n                }\n            }\n        });\n\n        return filteredList;\n    }\n}\n"}
{"task_id": "Java/150", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int x_or_y(int n, int x, int y) {\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/151", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int double_the_difference(List<Object> lst) {\n        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                if (num > 0 && num % 2 != 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/152", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            int difference = Math.abs(game.get(i) - guess.get(i));\n            result.add(difference);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/153", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        String strongestExtension = \"\";\n        int maxStrength = Integer.MIN_VALUE;\n\n        for (String extension : extensions) {\n            int cap = 0;\n            int sm = 0;\n\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n                } else if (Character.isLowerCase(c)) {\n                    sm++;\n                }\n            }\n\n            int strength = cap - sm;\n\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return class_name + \".\" + strongestExtension;\n    }\n}\n"}
{"task_id": "Java/154", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean cycpattern_check(String a, String b) {\n        if (b.length() > a.length()) {\n            return false;\n        }\n        \n        String doubleA = a + a;\n        return doubleA.contains(b);\n    }\n}\n"}
{"task_id": "Java/155", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> even_odd_count(int num) {\n        num = Math.abs(num); // Handle negative numbers\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num /= 10;\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n}\n"}
{"task_id": "Java/156", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String int_to_mini_roman(int number) {\n        // Define the Roman numeral symbols and their corresponding values\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] symbols = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        \n        StringBuilder roman = new StringBuilder();\n        \n        // Iterate through each value and symbol\n        for (int i = 0; i < values.length; i++) {\n            // Append the symbol while the number is greater than or equal to the value\n            while (number >= values[i]) {\n                roman.append(symbols[i]);\n                number -= values[i];\n            }\n        }\n        \n        // Convert the result to lowercase and return\n        return roman.toString();\n    }\n}\n"}
{"task_id": "Java/157", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean right_angle_triangle(int a, int b, int c) {\n        // Sort the sides to ensure a <= b <= c\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        \n        // Check the Pythagorean theorem\n        return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n    }\n}\n"}
{"task_id": "Java/158", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String find_max(List<String> words) {\n        String maxWord = \"\";\n        int maxUniqueChars = 0;\n\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            int uniqueCount = uniqueChars.size();\n\n            if (uniqueCount > maxUniqueChars || (uniqueCount == maxUniqueChars && word.compareTo(maxWord) < 0)) {\n                maxWord = word;\n                maxUniqueChars = uniqueCount;\n            }\n        }\n\n        return maxWord;\n    }\n}\n"}
{"task_id": "Java/159", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> eat(int number, int need, int remaining) {\n        int totalEaten = number + need;\n        int carrotsLeft = Math.max(remaining - need, 0);\n        return Arrays.asList(totalEaten, carrotsLeft);\n    }\n}\n"}
{"task_id": "Java/160", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        int result = operand.get(0);\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int nextOperand = operand.get(i + 1);\n            switch (op) {\n                case \"+\":\n                    result += nextOperand;\n                    break;\n                case \"-\":\n                    result -= nextOperand;\n                    break;\n                case \"*\":\n                    result *= nextOperand;\n                    break;\n                case \"/\":\n                    result /= nextOperand;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, nextOperand);\n                    break;\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/161", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(String s) {\n        StringBuilder result = new StringBuilder();\n        boolean hasLetter = false;\n\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                hasLetter = true;\n                if (Character.isUpperCase(c)) {\n                    result.append(Character.toLowerCase(c));\n                } else {\n                    result.append(Character.toUpperCase(c));\n                }\n            } else {\n                result.append(c);\n            }\n        }\n\n        if (!hasLetter) {\n            return result.reverse().toString();\n        }\n\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/162", "generation": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] messageDigest = md.digest(text.getBytes());\n        BigInteger no = new BigInteger(1, messageDigest);\n        String hashtext = no.toString(16);\n        \n        while (hashtext.length() < 32) {\n            hashtext = \"0\" + hashtext;\n        }\n        \n        return Optional.of(hashtext);\n    }\n}\n"}
{"task_id": "Java/163", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> generate_integers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        int start = Math.min(a, b);\n        int end = Math.max(a, b);\n        \n        for (int i = start; i <= end; i++) {\n            if (i % 2 == 0 && i < 10) {\n                result.add(i);\n            }\n        }\n        \n        Collections.sort(result);\n        return result;\n    }\n}\n"}
{"task_id": "Java/0", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/1", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        StringBuilder currentGroup = new StringBuilder();\n        int balance = 0;\n\n        for (char ch : paren_string.toCharArray()) {\n            if (ch == ' ') {\n                continue; // Ignore spaces\n            }\n            currentGroup.append(ch);\n            if (ch == '(') {\n                balance++;\n            } else if (ch == ')') {\n                balance--;\n            }\n            if (balance == 0) {\n                result.add(currentGroup.toString());\n                currentGroup.setLength(0); // Reset for the next group\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/2", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double truncate_number(double number) {\n        return number - Math.floor(number);\n    }\n}\n"}
{"task_id": "Java/3", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/4", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double mean_absolute_deviation(List<Double> numbers) {\n        if (numbers.isEmpty()) {\n            return 0.0;\n        }\n\n        double mean = 0.0;\n        for (double num : numbers) {\n            mean += num;\n        }\n        mean /= numbers.size();\n\n        double mad = 0.0;\n        for (double num : numbers) {\n            mad += Math.abs(num - mean);\n        }\n        mad /= numbers.size();\n\n        return mad;\n    }\n}\n"}
{"task_id": "Java/5", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/6", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> parse_nested_parens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        String[] groups = paren_string.split(\" \");\n        \n        for (String group : groups) {\n            int maxDepth = 0;\n            int currentDepth = 0;\n            \n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentDepth++;\n                    maxDepth = Math.max(maxDepth, currentDepth);\n                } else if (c == ')') {\n                    currentDepth--;\n                }\n            }\n            \n            result.add(maxDepth);\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/7", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> filteredList = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredList.add(str);\n            }\n        }\n        return filteredList;\n    }\n}\n"}
{"task_id": "Java/8", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sum_product(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        \n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        \n        if (numbers.isEmpty()) {\n            sum = 0;\n            product = 1;\n        }\n        \n        return Arrays.asList(sum, product);\n    }\n}\n"}
{"task_id": "Java/9", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        if (numbers.isEmpty()) {\n            return result;\n        }\n        \n        int maxSoFar = Integer.MIN_VALUE;\n        for (int num : numbers) {\n            if (num > maxSoFar) {\n                maxSoFar = num;\n            }\n            result.add(maxSoFar);\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/10", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    public String make_palindrome(String string) {\n        if (string.isEmpty()) {\n            return \"\";\n        }\n\n        int n = string.length();\n        for (int i = 0; i < n; i++) {\n            if (isPalindrome(string.substring(i))) {\n                String prefix = new StringBuilder(string.substring(0, i)).reverse().toString();\n                return string + prefix;\n            }\n        }\n        return string + new StringBuilder(string).reverse().toString();\n    }\n}\n"}
{"task_id": "Java/11", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String string_xor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        int length = Math.min(a.length(), b.length());\n        \n        for (int i = 0; i < length; i++) {\n            if (a.charAt(i) != b.charAt(i)) {\n                result.append('1');\n            } else {\n                result.append('0');\n            }\n        }\n        \n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/12", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        String longestString = strings.get(0);\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n        \n        return Optional.of(longestString);\n    }\n}\n"}
{"task_id": "Java/13", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int greatest_common_divisor(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}\n"}
{"task_id": "Java/14", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> all_prefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n}\n"}
{"task_id": "Java/15", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String string_sequence(int n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            if (i < n) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/16", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int count_distinct_characters(String string) {\n        Set<Character> distinctChars = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            distinctChars.add(Character.toLowerCase(c));\n        }\n        return distinctChars.size();\n    }\n}\n"}
{"task_id": "Java/17", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> parse_music(String string) {\n        List<Integer> beats = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        \n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    beats.add(4);\n                    break;\n                case \"o|\":\n                    beats.add(2);\n                    break;\n                case \".|\":\n                    beats.add(1);\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid note: \" + note);\n            }\n        }\n        \n        return beats;\n    }\n}\n"}
{"task_id": "Java/18", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int how_many_times(String string, String substring) {\n        int count = 0;\n        int subLength = substring.length();\n        for (int i = 0; i <= string.length() - subLength; i++) {\n            if (string.substring(i, i + subLength).equals(substring)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/19", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String sort_numbers(String numbers) {\n        // Define a map for the string representation of numbers to their integer values\n        Map<String, Integer> numMap = new HashMap<>();\n        numMap.put(\"zero\", 0);\n        numMap.put(\"one\", 1);\n        numMap.put(\"two\", 2);\n        numMap.put(\"three\", 3);\n        numMap.put(\"four\", 4);\n        numMap.put(\"five\", 5);\n        numMap.put(\"six\", 6);\n        numMap.put(\"seven\", 7);\n        numMap.put(\"eight\", 8);\n        numMap.put(\"nine\", 9);\n\n        // Split the input string by spaces\n        String[] numStrings = numbers.split(\" \");\n\n        // Create a list of pairs (number string, integer value)\n        List<Map.Entry<String, Integer>> numList = new ArrayList<>();\n        for (String numStr : numStrings) {\n            numList.add(new AbstractMap.SimpleEntry<>(numStr, numMap.get(numStr)));\n        }\n\n        // Sort the list based on the integer values\n        numList.sort(Map.Entry.comparingByValue());\n\n        // Build the result string from the sorted list\n        StringBuilder sortedNumbers = new StringBuilder();\n        for (Map.Entry<String, Integer> entry : numList) {\n            sortedNumbers.append(entry.getKey()).append(\" \");\n        }\n\n        // Remove the trailing space and return the result\n        return sortedNumbers.toString().trim();\n    }\n}\n"}
{"task_id": "Java/20", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        List<Double> closest_pair = new ArrayList<>();\n        closest_pair.add(numbers.get(0));\n        closest_pair.add(numbers.get(1));\n        double distance = Math.abs(numbers.get(1) - numbers.get(0));\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < distance) {\n                    closest_pair.clear();\n                    closest_pair.add(numbers.get(i));\n                    closest_pair.add(numbers.get(j));\n                    distance = Math.abs(numbers.get(i) - numbers.get(j));\n                }\n            }\n        }\n        Collections.sort(closest_pair);\n        return closest_pair;\n    }\n}\n"}
{"task_id": "Java/21", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        if (numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements.\");\n        }\n\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n\n        List<Double> rescaledList = new ArrayList<>();\n        for (double number : numbers) {\n            double rescaledValue = (number - min) / (max - min);\n            rescaledList.add(rescaledValue);\n        }\n\n        return rescaledList;\n    }\n}\n"}
{"task_id": "Java/22", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> filter_integers(List<Object> values) {\n        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n}\n"}
{"task_id": "Java/23", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int strlen(String string) {\n        return string.length();\n    }\n}\n"}
{"task_id": "Java/24", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largest_divisor(int n) {\n        for (int i = n / 2; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1; // In case n is 1, the largest divisor is 1.\n    }\n}\n"}
{"task_id": "Java/25", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors;\n    }\n}\n"}
{"task_id": "Java/26", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        for (Integer num : numbers) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        return numbers.stream()\n                      .filter(num -> frequencyMap.get(num) == 1)\n                      .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/27", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String flip_case(String string) {\n        StringBuilder flippedString = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                flippedString.append(Character.toUpperCase(c));\n            } else if (Character.isUpperCase(c)) {\n                flippedString.append(Character.toLowerCase(c));\n            } else {\n                flippedString.append(c);\n            }\n        }\n        return flippedString.toString();\n    }\n}\n"}
{"task_id": "Java/28", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String concatenate(List<String> strings) {\n        StringBuilder result = new StringBuilder();\n        for (String str : strings) {\n            result.append(str);\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/29", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/30", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> get_positive(List<Integer> l) {\n        return l.stream()\n                .filter(n -> n > 0)\n                .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/31", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_prime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/32", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double find_zero(List<Double> xs) {\n        // Ensure the list has an even number of coefficients\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"The list must have an even number of coefficients.\");\n        }\n        \n        // Find the interval where the polynomial changes sign\n        double a = -1000; // Start with a large negative number\n        double b = 1000;  // Start with a large positive number\n        double fa = poly(xs, a);\n        double fb = poly(xs, b);\n        \n        // Ensure the polynomial changes sign in the interval [a, b]\n        if (fa * fb > 0) {\n            throw new IllegalArgumentException(\"The polynomial does not change sign in the interval.\");\n        }\n        \n        // Use binary search to find the zero\n        double tolerance = 1e-7;\n        while ((b - a) > tolerance) {\n            double c = (a + b) / 2;\n            double fc = poly(xs, c);\n            if (Math.abs(fc) < tolerance) {\n                return c;\n            }\n            if (fa * fc < 0) {\n                b = c;\n                fb = fc;\n            } else {\n                a = c;\n                fa = fc;\n            }\n        }\n        \n        return (a + b) / 2;\n    }\n}\n"}
{"task_id": "Java/33", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_third(List<Integer> l) {\n        List<Integer> result = new ArrayList<>(l);\n        List<Integer> toSort = new ArrayList<>();\n        \n        // Collect elements at indices divisible by three\n        for (int i = 2; i < l.size(); i += 3) {\n            toSort.add(l.get(i));\n        }\n        \n        // Sort the collected elements\n        Collections.sort(toSort);\n        \n        // Replace the elements in the result list with the sorted elements\n        int index = 0;\n        for (int i = 2; i < l.size(); i += 3) {\n            result.set(i, toSort.get(index++));\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/34", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> uniqueSet = new HashSet<>(l);\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n        Collections.sort(uniqueList);\n        return uniqueList;\n    }\n}\n"}
{"task_id": "Java/35", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int max_element(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be null or empty\");\n        }\n        int max = l.get(0);\n        for (int num : l) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n}\n"}
{"task_id": "Java/36", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fizz_buzz(int n) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String numStr = Integer.toString(i);\n                for (char c : numStr.toCharArray()) {\n                    if (c == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/37", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_even(List<Integer> l) {\n        List<Integer> result = new ArrayList<>(l);\n        List<Integer> evenIndexValues = new ArrayList<>();\n        \n        // Collect values at even indices\n        for (int i = 0; i < l.size(); i += 2) {\n            evenIndexValues.add(l.get(i));\n        }\n        \n        // Sort the collected values\n        Collections.sort(evenIndexValues);\n        \n        // Replace the values at even indices with the sorted values\n        int evenIndex = 0;\n        for (int i = 0; i < l.size(); i += 2) {\n            result.set(i, evenIndexValues.get(evenIndex++));\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/38", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse the cycling in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n"}
{"task_id": "Java/39", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int prime_fib(int n) {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\");\n        }\n        \n        int count = 0;\n        int a = 0, b = 1;\n        \n        while (true) {\n            int temp = a + b;\n            a = b;\n            b = temp;\n            \n            if (isPrime(b)) {\n                count++;\n                if (count == n) {\n                    return b;\n                }\n            }\n        }\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        if (num == 2) {\n            return true;\n        }\n        if (num % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(num); i += 2) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/40", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        if (l.size() < 3) {\n            return false;\n        }\n        \n        Collections.sort(l);\n        \n        for (int i = 0; i < l.size() - 2; i++) {\n            int left = i + 1;\n            int right = l.size() - 1;\n            \n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        \n        return false;\n    }\n}\n"}
{"task_id": "Java/41", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int car_race_collision(int n) {\n        // Each right-to-left car will collide with each left-to-right car exactly once.\n        // Therefore, the number of collisions is simply the product of the number of cars in each direction.\n        return n * n;\n    }\n}\n"}
{"task_id": "Java/42", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> incr_list(List<Integer> l) {\n        return l.stream()\n                .map(i -> i + 1)\n                .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/43", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        Set<Integer> seen = new HashSet<>();\n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/44", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String change_base(int x, int base) {\n        if (x == 0) {\n            return \"0\";\n        }\n        \n        StringBuilder result = new StringBuilder();\n        while (x > 0) {\n            int remainder = x % base;\n            result.append(remainder);\n            x /= base;\n        }\n        \n        return result.reverse().toString();\n    }\n}\n"}
{"task_id": "Java/45", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangle_area(double a, double h) {\n        return 0.5 * a * h;\n    }\n}\n"}
{"task_id": "Java/46", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib4(int n) {\n        if (n == 0 || n == 1 || n == 3) return 0;\n        if (n == 2) return 2;\n\n        int[] fib4Array = new int[n + 1];\n        fib4Array[0] = 0;\n        fib4Array[1] = 0;\n        fib4Array[2] = 2;\n        fib4Array[3] = 0;\n\n        for (int i = 4; i <= n; i++) {\n            fib4Array[i] = fib4Array[i - 1] + fib4Array[i - 2] + fib4Array[i - 3] + fib4Array[i - 4];\n        }\n\n        return fib4Array[n];\n    }\n}\n"}
{"task_id": "Java/47", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            return (l.get(size / 2 - 1) + l.get(size / 2)) / 2.0;\n        } else {\n            return l.get(size / 2);\n        }\n    }\n}\n"}
{"task_id": "Java/48", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_palindrome(String text) {\n        int left = 0;\n        int right = text.length() - 1;\n        \n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/49", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int modp(int n, int p) {\n        if (n == 0) {\n            return 1;\n        }\n        long result = 1;\n        long base = 2;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                result = (result * base) % p;\n            }\n            base = (base * base) % p;\n            n /= 2;\n        }\n        return (int) result;\n    }\n}\n"}
{"task_id": "Java/50", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public String decode_shift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26)));\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/51", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String remove_vowels(String text) {\n        if (text == null) {\n            return null;\n        }\n        StringBuilder result = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (!isVowel(c)) {\n                result.append(c);\n            }\n        }\n        return result.toString();\n    }\n\n    private boolean isVowel(char c) {\n        c = Character.toLowerCase(c);\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n}\n"}
{"task_id": "Java/52", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean below_threshold(List<Integer> l, int t) {\n        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/53", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add(int x, int y) {\n        return x + y;\n    }\n}\n"}
{"task_id": "Java/54", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean same_chars(String s0, String s1) {\n        Map<Character, Integer> charCount0 = new HashMap<>();\n        Map<Character, Integer> charCount1 = new HashMap<>();\n\n        for (char c : s0.toCharArray()) {\n            charCount0.put(c, charCount0.getOrDefault(c, 0) + 1);\n        }\n\n        for (char c : s1.toCharArray()) {\n            charCount1.put(c, charCount1.getOrDefault(c, 0) + 1);\n        }\n\n        return charCount0.equals(charCount1);\n    }\n}\n"}
{"task_id": "Java/55", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0, b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a + b;\n            a = b;\n            b = temp;\n        }\n        return b;\n    }\n}\n"}
{"task_id": "Java/56", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correct_bracketing(String brackets) {\n        int count = 0;\n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '<') {\n                count++;\n            } else if (bracket == '>') {\n                count--;\n                if (count < 0) {\n                    return false;\n                }\n            }\n        }\n        return count == 0;\n    }\n}\n"}
{"task_id": "Java/57", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean monotonic(List<Integer> l) {\n        boolean increasing = true;\n        boolean decreasing = true;\n        \n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n        }\n        \n        return increasing || decreasing;\n    }\n}\n"}
{"task_id": "Java/58", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        set1.retainAll(set2);\n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result);\n        return result;\n    }\n}\n"}
{"task_id": "Java/59", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largest_prime_factor(int n) {\n        int largestPrime = -1;\n        \n        // Divide by 2 to remove all even factors\n        while (n % 2 == 0) {\n            largestPrime = 2;\n            n /= 2;\n        }\n        \n        // Check for odd factors from 3 onwards\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                largestPrime = i;\n                n /= i;\n            }\n        }\n        \n        // If n is still greater than 2, then n itself is a prime factor\n        if (n > 2) {\n            largestPrime = n;\n        }\n        \n        return largestPrime;\n    }\n}\n"}
{"task_id": "Java/60", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_to_n(int n) {\n        return n * (n + 1) / 2;\n    }\n}\n"}
{"task_id": "Java/61", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correct_bracketing(String brackets) {\n        int count = 0;\n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '(') {\n                count++;\n            } else if (bracket == ')') {\n                count--;\n                if (count < 0) {\n                    return false;\n                }\n            }\n        }\n        return count == 0;\n    }\n}\n"}
{"task_id": "Java/62", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> derivativeCoefficients = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            derivativeCoefficients.add(xs.get(i) * i);\n        }\n        return derivativeCoefficients;\n    }\n}\n"}
{"task_id": "Java/63", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fibfib(int n) {\n        if (n == 0 || n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        \n        int[] fibfibArray = new int[n + 1];\n        fibfibArray[0] = 0;\n        fibfibArray[1] = 0;\n        fibfibArray[2] = 1;\n        \n        for (int i = 3; i <= n; i++) {\n            fibfibArray[i] = fibfibArray[i - 1] + fibfibArray[i - 2] + fibfibArray[i - 3];\n        }\n        \n        return fibfibArray[n];\n    }\n}\n"}
{"task_id": "Java/64", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int vowels_count(String s) {\n        s = s.toLowerCase();\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            } else if (i == s.length() - 1 && c == 'y') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/65", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String circular_shift(int x, int shift) {\n        String numStr = Integer.toString(x);\n        int length = numStr.length();\n        \n        if (shift >= length) {\n            return new StringBuilder(numStr).reverse().toString();\n        }\n        \n        String shiftedStr = numStr.substring(length - shift) + numStr.substring(0, length - shift);\n        return shiftedStr;\n    }\n}\n"}
{"task_id": "Java/66", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digitSum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/67", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruit_distribution(String s, int n) {\n        // Split the string by spaces\n        String[] parts = s.split(\" \");\n        \n        // Extract the number of apples and oranges\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[2]);\n        \n        // Calculate the number of mangoes\n        int mangoes = n - apples - oranges;\n        \n        return mangoes;\n    }\n}\n"}
{"task_id": "Java/68", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        int smallestEven = Integer.MAX_VALUE;\n        int smallestIndex = -1;\n\n        for (int i = 0; i < arr.size(); i++) {\n            int value = arr.get(i);\n            if (value % 2 == 0 && value < smallestEven) {\n                smallestEven = value;\n                smallestIndex = i;\n            }\n        }\n\n        if (smallestIndex != -1) {\n            result.add(smallestEven);\n            result.add(smallestIndex);\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/69", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int search(List<Integer> lst) {\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        // Count the frequency of each integer in the list\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        int maxValidNumber = -1;\n        \n        // Iterate through the frequency map to find the greatest valid number\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int num = entry.getKey();\n            int freq = entry.getValue();\n            \n            if (freq >= num && num > maxValidNumber) {\n                maxValidNumber = num;\n            }\n        }\n        \n        return maxValidNumber;\n    }\n}\n"}
{"task_id": "Java/70", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        List<Integer> sortedList = new ArrayList<>(lst);\n        Collections.sort(sortedList);\n        \n        int i = 0;\n        int j = sortedList.size() - 1;\n        \n        while (i <= j) {\n            if (i <= j) {\n                result.add(sortedList.get(i));\n                i++;\n            }\n            if (i <= j) {\n                result.add(sortedList.get(j));\n                j--;\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/71", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangle_area(double a, double b, double c) {\n        // Check if the sides can form a valid triangle\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        \n        // Calculate the semi-perimeter\n        double s = (a + b + c) / 2;\n        \n        // Calculate the area using Heron's formula\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        \n        // Round the area to 2 decimal points\n        return Math.round(area * 100.0) / 100.0;\n    }\n}\n"}
{"task_id": "Java/72", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean will_it_fly(List<Integer> q, int w) {\n        // Check if the list is palindromic\n        boolean isPalindromic = true;\n        int n = q.size();\n        for (int i = 0; i < n / 2; i++) {\n            if (!q.get(i).equals(q.get(n - i - 1))) {\n                isPalindromic = false;\n                break;\n            }\n        }\n\n        // Calculate the sum of the elements\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n\n        // Check if the sum is less than or equal to the maximum possible weight\n        return isPalindromic && sum <= w;\n    }\n}\n"}
{"task_id": "Java/73", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int smallest_change(List<Integer> arr) {\n        int n = arr.size();\n        int changes = 0;\n        \n        for (int i = 0; i < n / 2; i++) {\n            if (!arr.get(i).equals(arr.get(n - i - 1))) {\n                changes++;\n            }\n        }\n        \n        return changes;\n    }\n}\n"}
{"task_id": "Java/74", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        int totalChars1 = lst1.stream().mapToInt(String::length).sum();\n        int totalChars2 = lst2.stream().mapToInt(String::length).sum();\n        \n        if (totalChars1 <= totalChars2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n"}
{"task_id": "Java/75", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_multiply_prime(int a) {\n        // Helper function to check if a number is prime\n        boolean[] isPrime = new boolean[100];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = isPrime[1] = false; // 0 and 1 are not prime numbers\n\n        for (int i = 2; i * i < 100; i++) {\n            if (isPrime[i]) {\n                for (int j = i * i; j < 100; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n\n        // Check if the number can be expressed as a product of three primes\n        for (int i = 2; i < 100; i++) {\n            if (isPrime[i]) {\n                for (int j = i; j < 100; j++) {\n                    if (isPrime[j]) {\n                        int k = a / (i * j);\n                        if (k < 100 && isPrime[k] && i * j * k == a) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/76", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_simple_power(int x, int n) {\n        if (n == 1) {\n            return x == 1;\n        }\n        int power = 1;\n        while (power < x) {\n            power *= n;\n        }\n        return power == x;\n    }\n}\n"}
{"task_id": "Java/77", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean iscube(int a) {\n        if (a < 0) {\n            a = -a;\n        }\n        int cubeRoot = (int) Math.cbrt(a);\n        return cubeRoot * cubeRoot * cubeRoot == a;\n    }\n}\n"}
{"task_id": "Java/78", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int hex_key(String num) {\n        // Define the prime hexadecimal digits\n        Set<Character> primeHexDigits = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        // Initialize the count of prime digits\n        int count = 0;\n        \n        // Iterate through each character in the input string\n        for (char c : num.toCharArray()) {\n            // If the character is a prime hexadecimal digit, increment the count\n            if (primeHexDigits.contains(c)) {\n                count++;\n            }\n        }\n        \n        // Return the count of prime hexadecimal digits\n        return count;\n    }\n}\n"}
{"task_id": "Java/79", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String decimal_to_binary(int decimal) {\n        String binary = Integer.toBinaryString(decimal);\n        return \"db\" + binary + \"db\";\n    }\n}\n"}
{"task_id": "Java/80", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_happy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n        \n        for (int i = 0; i < s.length() - 2; i++) {\n            char first = s.charAt(i);\n            char second = s.charAt(i + 1);\n            char third = s.charAt(i + 2);\n            \n            if (first == second || second == third || first == third) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/81", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (double grade : grades) {\n            if (grade == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}\n"}
{"task_id": "Java/82", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean prime_length(String string) {\n        int length = string.length();\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/83", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int starts_one_ends(int n) {\n        // There are 2^(n-1) numbers that start with 1 and 2^(n-1) numbers that end with 1\n        // However, the number 1 followed by (n-1) zeros is counted in both sets, so we subtract 1\n        return (int) (Math.pow(2, n-1) + Math.pow(2, n-1) - 1);\n    }\n}\n"}
{"task_id": "Java/84", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(int N) {\n        int sum = 0;\n        while (N > 0) {\n            sum += N % 10;\n            N /= 10;\n        }\n        return Integer.toBinaryString(sum);\n    }\n}\n"}
{"task_id": "Java/85", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/86", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String anti_shuffle(String s) {\n        String[] words = s.split(\" \");\n        StringBuilder result = new StringBuilder();\n        \n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            result.append(new String(chars)).append(\" \");\n        }\n        \n        return result.toString().trim();\n    }\n}\n"}
{"task_id": "Java/87", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    result.add(Arrays.asList(i, j));\n                }\n            }\n        }\n        \n        // Sort by rows in ascending order\n        result.sort((a, b) -> a.get(0) - b.get(0));\n        \n        // Sort coordinates of the same row by columns in descending order\n        for (int i = 0; i < result.size(); i++) {\n            for (int j = i + 1; j < result.size(); j++) {\n                if (result.get(i).get(0).equals(result.get(j).get(0))) {\n                    if (result.get(i).get(1) < result.get(j).get(1)) {\n                        Collections.swap(result, i, j);\n                    }\n                }\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/88", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> array) {\n        if (array.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        int first = array.get(0);\n        int last = array.get(array.size() - 1);\n        boolean isSumEven = (first + last) % 2 == 0;\n\n        List<Integer> sortedArray = new ArrayList<>(array);\n        if (isSumEven) {\n            sortedArray.sort(Collections.reverseOrder());\n        } else {\n            Collections.sort(sortedArray);\n        }\n\n        return sortedArray;\n    }\n}\n"}
{"task_id": "Java/89", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encrypt(String s) {\n        StringBuilder encrypted = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            int shift = (c - 'a' + 2 * 2) % 26;\n            encrypted.append((char) ('a' + shift));\n        }\n        return encrypted.toString();\n    }\n}\n"}
{"task_id": "Java/90", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\n        int smallest = Integer.MAX_VALUE;\n        int secondSmallest = Integer.MAX_VALUE;\n        boolean foundSecondSmallest = false;\n\n        for (int num : lst) {\n            if (num < smallest) {\n                secondSmallest = smallest;\n                smallest = num;\n            } else if (num > smallest && num < secondSmallest) {\n                secondSmallest = num;\n                foundSecondSmallest = true;\n            }\n        }\n\n        return foundSecondSmallest ? Optional.of(secondSmallest) : Optional.empty();\n    }\n}\n"}
{"task_id": "Java/91", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int is_bored(String S) {\n        String[] sentences = S.split(\"[.!?]\");\n        int boredomCount = 0;\n        \n        for (String sentence : sentences) {\n            sentence = sentence.trim();\n            if (sentence.startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n        \n        return boredomCount;\n    }\n}\n"}
{"task_id": "Java/92", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean any_int(Object x, Object y, Object z) {\n        if (!(x instanceof Integer) || !(y instanceof Integer) || !(z instanceof Integer)) {\n            return false;\n        }\n        \n        int a = (Integer) x;\n        int b = (Integer) y;\n        int c = (Integer) z;\n        \n        return (a == b + c) || (b == a + c) || (c == a + b);\n    }\n}\n"}
{"task_id": "Java/93", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encode(String message) {\n        StringBuilder encodedMessage = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (\"aeiouAEIOU\".indexOf(c) != -1) {\n                    char newChar = (char) (c + 2);\n                    if ((Character.isLowerCase(c) && newChar > 'z') || (Character.isUpperCase(c) && newChar > 'Z')) {\n                        newChar -= 26;\n                    }\n                    encodedMessage.append(newChar);\n                } else {\n                    encodedMessage.append(Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c));\n                }\n            } else {\n                encodedMessage.append(c);\n            }\n        }\n        return encodedMessage.toString();\n    }\n}\n"}
{"task_id": "Java/94", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int skjkasdkd(List<Integer> lst) {\n        int largestPrime = -1;\n        \n        // Helper function to check if a number is prime\n        boolean isPrime(int num) {\n            if (num <= 1) return false;\n            for (int i = 2; i <= Math.sqrt(num); i++) {\n                if (num % i == 0) return false;\n            }\n            return true;\n        }\n        \n        // Find the largest prime in the list\n        for (int num : lst) {\n            if (isPrime(num) && num > largestPrime) {\n                largestPrime = num;\n            }\n        }\n        \n        // If no prime found, return 0\n        if (largestPrime == -1) return 0;\n        \n        // Calculate the sum of digits of the largest prime\n        int sumOfDigits = 0;\n        while (largestPrime > 0) {\n            sumOfDigits += largestPrime % 10;\n            largestPrime /= 10;\n        }\n        \n        return sumOfDigits;\n    }\n}\n"}
{"task_id": "Java/95", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        \n        boolean allLower = true;\n        boolean allUpper = true;\n        \n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            \n            String strKey = (String) key;\n            if (!strKey.equals(strKey.toLowerCase())) {\n                allLower = false;\n            }\n            if (!strKey.equals(strKey.toUpperCase())) {\n                allUpper = false;\n            }\n            \n            if (!allLower && !allUpper) {\n                return false;\n            }\n        }\n        \n        return allLower || allUpper;\n    }\n}\n"}
{"task_id": "Java/96", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<>();\n        if (n <= 2) {\n            return primes;\n        }\n        \n        boolean[] isPrime = new boolean[n];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = isPrime[1] = false; // 0 and 1 are not prime numbers\n        \n        for (int i = 2; i < n; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n                for (int j = 2 * i; j < n; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n        \n        return primes;\n    }\n}\n"}
{"task_id": "Java/97", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int multiply(int a, int b) {\n        int unitDigitA = Math.abs(a) % 10;\n        int unitDigitB = Math.abs(b) % 10;\n        return unitDigitA * unitDigitB;\n    }\n}\n"}
{"task_id": "Java/98", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int count_upper(String s) {\n        int count = 0;\n        Set<Character> vowels = new HashSet<>(Arrays.asList('A', 'E', 'I', 'O', 'U'));\n        \n        for (int i = 0; i < s.length(); i += 2) {\n            if (vowels.contains(s.charAt(i))) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/99", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int closest_integer(String value) {\n        double number = Double.parseDouble(value);\n        int roundedNumber = (int) Math.round(number);\n        return roundedNumber;\n    }\n}\n"}
{"task_id": "Java/100", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        int currentLevel = n;\n        \n        for (int i = 0; i < n; i++) {\n            pile.add(currentLevel);\n            if (currentLevel % 2 == 0) {\n                currentLevel += 2; // Next even number\n            } else {\n                currentLevel += 2; // Next odd number\n            }\n        }\n        \n        return pile;\n    }\n}\n"}
{"task_id": "Java/101", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> words_string(String s) {\n        // Split the string by both commas and spaces\n        String[] words = s.split(\"[,\\\\s]+\");\n        return Arrays.asList(words);\n    }\n}\n"}
{"task_id": "Java/102", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int choose_num(int x, int y) {\n        // Ensure x is less than or equal to y\n        if (x > y) {\n            return -1;\n        }\n        \n        // Find the biggest even number in the range [x, y]\n        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                return i;\n            }\n        }\n        \n        // If no even number is found, return -1\n        return -1;\n    }\n}\n"}
{"task_id": "Java/103", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object rounded_avg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        \n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        \n        int count = m - n + 1;\n        int average = (int) Math.round((double) sum / count);\n        return Integer.toBinaryString(average);\n    }\n}\n"}
{"task_id": "Java/104", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> unique_digits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int num : x) {\n            if (!containsEvenDigit(num)) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        return result;\n    }\n    \n    private boolean containsEvenDigit(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return true;\n            }\n            num /= 10;\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/105", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> by_length(List<Integer> arr) {\n        // Filter and sort the valid numbers between 1 and 9\n        List<Integer> validNumbers = new ArrayList<>();\n        for (int num : arr) {\n            if (num >= 1 && num <= 9) {\n                validNumbers.add(num);\n            }\n        }\n        Collections.sort(validNumbers);\n\n        // Reverse the sorted list\n        Collections.reverse(validNumbers);\n\n        // Map the numbers to their corresponding names\n        List<String> result = new ArrayList<>();\n        for (int num : validNumbers) {\n            result.add(getNumberName(num));\n        }\n\n        return result;\n    }\n\n    private String getNumberName(int num) {\n        switch (num) {\n            case 1: return \"One\";\n            case 2: return \"Two\";\n            case 3: return \"Three\";\n            case 4: return \"Four\";\n            case 5: return \"Five\";\n            case 6: return \"Six\";\n            case 7: return \"Seven\";\n            case 8: return \"Eight\";\n            case 9: return \"Nine\";\n            default: return \"\";\n        }\n    }\n}\n"}
{"task_id": "Java/106", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sumOfNumbers(i));\n            }\n        }\n        return result;\n    }\n\n    private int factorial(int num) {\n        int fact = 1;\n        for (int i = 1; i <= num; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n\n    private int sumOfNumbers(int num) {\n        int sum = 0;\n        for (int i = 1; i <= num; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/107", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> even_odd_palindrome(int n) {\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n    \n    private boolean isPalindrome(int num) {\n        String str = Integer.toString(num);\n        int len = str.length();\n        for (int i = 0; i < len / 2; i++) {\n            if (str.charAt(i) != str.charAt(len - i - 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/108", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int count_nums(List<Integer> arr) {\n        int count = 0;\n        for (int num : arr) {\n            int sum = 0;\n            int absNum = Math.abs(num);\n            while (absNum > 0) {\n                sum += absNum % 10;\n                absNum /= 10;\n            }\n            if (num < 0) {\n                sum = -sum;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/109", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean move_one_ball(List<Integer> arr) {\n        if (arr.isEmpty()) return true;\n\n        int n = arr.size();\n        int shifts = 0;\n\n        // Find the number of shifts needed to make the array sorted\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i) > arr.get((i + 1) % n)) {\n                shifts++;\n            }\n        }\n\n        // If more than one shift is needed, it's not possible to sort the array\n        return shifts <= 1;\n    }\n}\n"}
{"task_id": "Java/110", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Count the number of odd elements in lst1\n        int oddCount = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCount++;\n            }\n        }\n\n        // Count the number of even elements in lst2\n        int evenCount = 0;\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCount++;\n            }\n        }\n\n        // If the number of odd elements in lst1 is less than or equal to\n        // the number of even elements in lst2, then it is possible to exchange\n        // elements to make lst1 all even.\n        if (oddCount <= evenCount) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}\n"}
{"task_id": "Java/111", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> letterCount = new HashMap<>();\n        if (test.isEmpty()) {\n            return letterCount;\n        }\n\n        String[] letters = test.split(\" \");\n        for (String letter : letters) {\n            letterCount.put(letter, letterCount.getOrDefault(letter, 0) + 1);\n        }\n\n        int maxCount = Collections.max(letterCount.values());\n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : letterCount.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/112", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Object> reverse_delete(String s, String c) {\n        StringBuilder result = new StringBuilder();\n        Set<Character> charsToDelete = new HashSet<>();\n        \n        for (char ch : c.toCharArray()) {\n            charsToDelete.add(ch);\n        }\n        \n        for (char ch : s.toCharArray()) {\n            if (!charsToDelete.contains(ch)) {\n                result.append(ch);\n            }\n        }\n        \n        String resultStr = result.toString();\n        boolean isPalindrome = resultStr.equals(new StringBuilder(resultStr).reverse().toString());\n        \n        List<Object> resultList = new ArrayList<>();\n        resultList.add(resultStr);\n        resultList.add(isPalindrome);\n        \n        return resultList;\n    }\n}\n"}
{"task_id": "Java/113", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int oddCount = 0;\n            \n            for (char ch : str.toCharArray()) {\n                if (Character.getNumericValue(ch) % 2 != 0) {\n                    oddCount++;\n                }\n            }\n            \n            result.add(\"the number of odd elements \" + oddCount + \"n the str\" + (i + 1) + \"ng \" + (i + 1) + \" of the \" + (i + 1) + \"nput.\");\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/114", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int minSubArraySum(List<Integer> nums) {\n        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n        \n        for (int num : nums) {\n            currentSum += num;\n            if (currentSum < minSum) {\n                minSum = currentSum;\n            }\n            if (currentSum > 0) {\n                currentSum = 0;\n            }\n        }\n        \n        return minSum;\n    }\n}\n"}
{"task_id": "Java/115", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        int totalBucketsNeeded = 0;\n        \n        for (List<Integer> row : grid) {\n            int waterUnits = 0;\n            for (int unit : row) {\n                if (unit == 1) {\n                    waterUnits++;\n                }\n            }\n            if (waterUnits > 0) {\n                totalBucketsNeeded += (waterUnits + capacity - 1) / capacity; // Equivalent to Math.ceil(waterUnits / (double)capacity)\n            }\n        }\n        \n        return totalBucketsNeeded;\n    }\n}\n"}
{"task_id": "Java/116", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> arr) {\n        arr.sort((a, b) -> {\n            int countA = Integer.bitCount(Math.abs(a));\n            int countB = Integer.bitCount(Math.abs(b));\n            if (countA == countB) {\n                return Integer.compare(a, b);\n            }\n            return Integer.compare(countA, countB);\n        });\n        return arr;\n    }\n}\n"}
{"task_id": "Java/117", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> select_words(String s, int n) {\n        List<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int consonantCount = 0;\n            for (char c : word.toCharArray()) {\n                if (isConsonant(c)) {\n                    consonantCount++;\n                }\n            }\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n\n    private boolean isConsonant(char c) {\n        c = Character.toLowerCase(c);\n        return \"bcdfghjklmnpqrstvwxyz\".indexOf(c) != -1;\n    }\n}\n"}
{"task_id": "Java/118", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String get_closest_vowel(String word) {\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        Set<Character> consonants = new HashSet<>(Arrays.asList('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z',\n                                                              'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'));\n        \n        for (int i = word.length() - 2; i > 0; i--) {\n            if (vowels.contains(word.charAt(i)) && consonants.contains(word.charAt(i - 1)) && consonants.contains(word.charAt(i + 1))) {\n                return String.valueOf(word.charAt(i));\n            }\n        }\n        return \"\";\n    }\n}\n"}
{"task_id": "Java/119", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String match_parens(List<String> lst) {\n        int balance1 = 0, balance2 = 0;\n        \n        // Calculate the balance for the first string\n        for (char c : lst.get(0).toCharArray()) {\n            if (c == '(') {\n                balance1++;\n            } else {\n                balance1--;\n            }\n        }\n        \n        // Calculate the balance for the second string\n        for (char c : lst.get(1).toCharArray()) {\n            if (c == '(') {\n                balance2++;\n            } else {\n                balance2--;\n            }\n        }\n        \n        // Check if the total balance is zero and if the minimum balance is non-negative\n        int totalBalance = balance1 + balance2;\n        int minBalance = Math.min(balance1, balance1 + balance2);\n        \n        if (totalBalance == 0 && minBalance >= 0) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}\n"}
{"task_id": "Java/120", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Sort the array in descending order\n        Collections.sort(arr, Collections.reverseOrder());\n        \n        // Take the first k elements\n        List<Integer> maxElements = new ArrayList<>(arr.subList(0, k));\n        \n        // Sort the k elements in ascending order\n        Collections.sort(maxElements);\n        \n        return maxElements;\n    }\n}\n"}
{"task_id": "Java/121", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/122", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add_elements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) >= 10 && arr.get(i) <= 99) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/123", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> get_odd_collatz(int n) {\n        List<Integer> oddNumbers = new ArrayList<>();\n        while (n != 1) {\n            if (n % 2 != 0) {\n                oddNumbers.add(n);\n            }\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n        }\n        oddNumbers.add(1); // Adding the final 1 in the sequence\n        Collections.sort(oddNumbers);\n        return oddNumbers;\n    }\n}\n"}
{"task_id": "Java/124", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean valid_date(String date) {\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n            return false;\n        }\n\n        int month, day, year;\n        try {\n            month = Integer.parseInt(parts[0]);\n            day = Integer.parseInt(parts[1]);\n            year = Integer.parseInt(parts[2]);\n        } catch (NumberFormatException e) {\n            return false;\n        }\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        if (day < 1) {\n            return false;\n        }\n\n        switch (month) {\n            case 1: case 3: case 5: case 7: case 8: case 10: case 12:\n                if (day > 31) {\n                    return false;\n                }\n                break;\n            case 4: case 6: case 9: case 11:\n                if (day > 30) {\n                    return false;\n                }\n                break;\n            case 2:\n                if (day > 29) {\n                    return false;\n                }\n                break;\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/125", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object split_words(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 != 0) {\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n}\n"}
{"task_id": "Java/126", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_sorted(List<Integer> lst) {\n        if (lst.size() <= 1) return true;\n        \n        Map<Integer, Integer> frequency = new HashMap<>();\n        for (int num : lst) {\n            frequency.put(num, frequency.getOrDefault(num, 0) + 1);\n            if (frequency.get(num) > 2) return false;\n        }\n        \n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < lst.get(i - 1)) return false;\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/127", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        \n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n        \n        if (intersectionStart > intersectionEnd) {\n            return \"NO\";\n        }\n        \n        int intersectionLength = intersectionEnd - intersectionStart + 1;\n        \n        if (isPrime(intersectionLength)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n    \n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/128", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int signProduct = 1;\n        int sumMagnitudes = 0;\n\n        for (int num : arr) {\n            if (num > 0) {\n                signProduct *= 1;\n            } else if (num < 0) {\n                signProduct *= -1;\n            } else {\n                signProduct *= 0;\n            }\n            sumMagnitudes += Math.abs(num);\n        }\n\n        return Optional.of(signProduct * sumMagnitudes);\n    }\n}\n"}
{"task_id": "Java/129", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        List<Integer> result = new ArrayList<>();\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> {\n            for (int i = 0; i < a.length; i++) {\n                if (a[i] != b[i]) return a[i] - b[i];\n            }\n            return 0;\n        });\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                pq.offer(new int[]{grid.get(i).get(j), i, j});\n            }\n        }\n\n        while (!pq.isEmpty()) {\n            int[] current = pq.poll();\n            int value = current[0];\n            int x = current[1];\n            int y = current[2];\n            List<Integer> path = new ArrayList<>();\n            path.add(value);\n            boolean[][] visited = new boolean[n][n];\n            visited[x][y] = true;\n            dfs(grid, x, y, k, path, visited, directions, pq);\n            if (path.size() == k) {\n                result = path;\n                break;\n            }\n        }\n\n        return result;\n    }\n\n    private void dfs(List<List<Integer>> grid, int x, int y, int k, List<Integer> path, boolean[][] visited, int[][] directions, PriorityQueue<int[]> pq) {\n        if (path.size() == k) return;\n        for (int[] dir : directions) {\n            int newX = x + dir[0];\n            int newY = y + dir[1];\n            if (newX >= 0 && newX < grid.size() && newY >= 0 && newY < grid.size() && !visited[newX][newY]) {\n                visited[newX][newY] = true;\n                path.add(grid.get(newX).get(newY));\n                dfs(grid, newX, newY, k, path, visited, directions, pq);\n                if (path.size() == k) return;\n                path.remove(path.size() - 1);\n                visited[newX][newY] = false;\n            }\n        }\n    }\n}\n"}
{"task_id": "Java/130", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n        List<Integer> tribonacciSequence = new ArrayList<>();\n        if (n < 0) {\n            return tribonacciSequence; // Return empty list for negative input\n        }\n\n        // Initialize the first two values of the sequence\n        tribonacciSequence.add(1);\n        tribonacciSequence.add(3);\n\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                tribonacciSequence.add(1 + i / 2);\n            } else {\n                int nextValue = tribonacciSequence.get(i - 1) + tribonacciSequence.get(i - 2) + tribonacciSequence.get(i + 1);\n                tribonacciSequence.add(nextValue);\n            }\n        }\n\n        return tribonacciSequence;\n    }\n}\n"}
{"task_id": "Java/131", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digits(int n) {\n        int product = 0;\n        boolean hasOdd = false;\n        \n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                if (!hasOdd) {\n                    product = 1; // Initialize product if it's the first odd digit\n                    hasOdd = true;\n                }\n                product *= digit;\n            }\n            n /= 10;\n        }\n        \n        return product;\n    }\n}\n"}
{"task_id": "Java/132", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_nested(String string) {\n        Stack<Character> stack = new Stack<>();\n        boolean hasNested = false;\n\n        for (char ch : string.toCharArray()) {\n            if (ch == '[') {\n                stack.push(ch);\n            } else if (ch == ']') {\n                if (!stack.isEmpty() && stack.peek() == '[') {\n                    stack.pop();\n                    if (!stack.isEmpty()) {\n                        hasNested = true;\n                    }\n                } else {\n                    stack.push(ch);\n                }\n            }\n        }\n\n        return hasNested;\n    }\n}\n"}
{"task_id": "Java/133", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_squares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            int ceilingNum = (int) Math.ceil(num);\n            sum += ceilingNum * ceilingNum;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/134", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        if (txt.isEmpty()) {\n            return false;\n        }\n        \n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar)) {\n            // Check if the last character is not part of a word\n            if (txt.length() == 1 || txt.charAt(txt.length() - 2) == ' ') {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/135", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int can_arrange(List<Integer> arr) {\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}\n"}
{"task_id": "Java/136", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        Optional<Integer> largestNegative = Optional.empty();\n        Optional<Integer> smallestPositive = Optional.empty();\n\n        for (Integer num : lst) {\n            if (num < 0) {\n                if (!largestNegative.isPresent() || num > largestNegative.get()) {\n                    largestNegative = Optional.of(num);\n                }\n            } else if (num > 0) {\n                if (!smallestPositive.isPresent() || num < smallestPositive.get()) {\n                    smallestPositive = Optional.of(num);\n                }\n            }\n        }\n\n        List<Optional<Integer>> result = new ArrayList<>();\n        result.add(largestNegative);\n        result.add(smallestPositive);\n        return result;\n    }\n}\n"}
{"task_id": "Java/137", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Object> compare_one(Object a, Object b) {\n        // Convert both objects to strings for consistent comparison\n        String strA = a.toString().replace(\",\", \".\");\n        String strB = b.toString().replace(\",\", \".\");\n\n        // Parse the strings to doubles for numerical comparison\n        Double doubleA = Double.parseDouble(strA);\n        Double doubleB = Double.parseDouble(strB);\n\n        // Compare the parsed doubles\n        if (doubleA > doubleB) {\n            return Optional.of(a);\n        } else if (doubleB > doubleA) {\n            return Optional.of(b);\n        } else {\n            return Optional.empty();\n        }\n    }\n}\n"}
{"task_id": "Java/138", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_equal_to_sum_even(int n) {\n        // A number can be written as the sum of exactly 4 positive even numbers if and only if it is at least 8 and even.\n        return n >= 8 && n % 2 == 0;\n    }\n}\n"}
{"task_id": "Java/139", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public long special_factorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    private long factorial(int num) {\n        long fact = 1;\n        for (int i = 1; i <= num; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n}\n"}
{"task_id": "Java/140", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String fix_spaces(String text) {\n        StringBuilder result = new StringBuilder();\n        int i = 0;\n        while (i < text.length()) {\n            if (text.charAt(i) == ' ') {\n                int start = i;\n                while (i < text.length() && text.charAt(i) == ' ') {\n                    i++;\n                }\n                int end = i;\n                if (end - start > 2) {\n                    result.append('-');\n                } else {\n                    for (int j = start; j < end; j++) {\n                        result.append('_');\n                    }\n                }\n            } else {\n                result.append(text.charAt(i));\n                i++;\n            }\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/141", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String file_name_check(String file_name) {\n        // Check if there are more than three digits\n        int digitCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n                if (digitCount > 3) {\n                    return \"No\";\n                }\n            }\n        }\n\n        // Check if there is exactly one dot\n        int dotIndex = file_name.indexOf('.');\n        if (dotIndex == -1 || dotIndex != file_name.lastIndexOf('.')) {\n            return \"No\";\n        }\n\n        // Check if the substring before the dot is not empty and starts with a latin letter\n        String namePart = file_name.substring(0, dotIndex);\n        if (namePart.isEmpty() || !Character.isLetter(namePart.charAt(0))) {\n            return \"No\";\n        }\n\n        // Check if the substring after the dot is one of the allowed extensions\n        String extension = file_name.substring(dotIndex + 1);\n        List<String> allowedExtensions = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        if (!allowedExtensions.contains(extension)) {\n            return \"No\";\n        }\n\n        return \"Yes\";\n    }\n}\n"}
{"task_id": "Java/142", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_squares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                lst.set(i, lst.get(i) * lst.get(i));\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                lst.set(i, lst.get(i) * lst.get(i) * lst.get(i));\n            }\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/143", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String words_in_sentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n        \n        for (String word : words) {\n            if (isPrime(word.length())) {\n                if (result.length() > 0) {\n                    result.append(\" \");\n                }\n                result.append(word);\n            }\n        }\n        \n        return result.toString();\n    }\n    \n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/144", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean simplify(String x, String n) {\n        // Parse the fractions\n        String[] partsX = x.split(\"/\");\n        int numeratorX = Integer.parseInt(partsX[0]);\n        int denominatorX = Integer.parseInt(partsX[1]);\n        \n        String[] partsN = n.split(\"/\");\n        int numeratorN = Integer.parseInt(partsN[0]);\n        int denominatorN = Integer.parseInt(partsN[1]);\n        \n        // Calculate the product of the fractions\n        int numeratorProduct = numeratorX * numeratorN;\n        int denominatorProduct = denominatorX * denominatorN;\n        \n        // Check if the product is a whole number\n        return numeratorProduct % denominatorProduct == 0;\n    }\n}\n"}
{"task_id": "Java/145", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> order_by_points(List<Integer> nums) {\n        Collections.sort(nums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int sumA = sumOfDigits(a);\n                int sumB = sumOfDigits(b);\n                return Integer.compare(sumA, sumB);\n            }\n        });\n        return nums;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        num = Math.abs(num);\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/146", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10) {\n                int firstDigit = Integer.parseInt(Integer.toString(Math.abs(num)).substring(0, 1));\n                int lastDigit = Math.abs(num) % 10;\n                if (isOdd(firstDigit) && isOdd(lastDigit)) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    private boolean isOdd(int digit) {\n        return digit % 2 != 0;\n    }\n}\n"}
{"task_id": "Java/147", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int get_max_triples(int n) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = (i + 1) * (i + 1) - (i + 1) + 1;\n        }\n\n        int count = 0;\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/148", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> bf(String planet1, String planet2) {\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        List<String> result = new ArrayList<>();\n        \n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        \n        if (index1 == -1 || index2 == -1) {\n            return result; // Return empty list if either planet name is incorrect\n        }\n        \n        int start = Math.min(index1, index2);\n        int end = Math.max(index1, index2);\n        \n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/149", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> sorted_list_sum(List<String> lst) {\n        // Filter out strings with odd lengths\n        List<String> filteredList = new ArrayList<>();\n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                filteredList.add(str);\n            }\n        }\n\n        // Sort the filtered list first by length, then alphabetically\n        Collections.sort(filteredList, new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                if (s1.length() != s2.length()) {\n                    return s1.length() - s2.length();\n                } else {\n                    return s1.compareTo(s2);\n                }\n            }\n        });\n\n        return filteredList;\n    }\n}\n"}
{"task_id": "Java/150", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int x_or_y(int n, int x, int y) {\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/151", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int double_the_difference(List<Object> lst) {\n        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                if (num > 0 && num % 2 != 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/152", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            int difference = Math.abs(game.get(i) - guess.get(i));\n            result.add(difference);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/153", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        String strongestExtension = \"\";\n        int maxStrength = Integer.MIN_VALUE;\n        \n        for (String extension : extensions) {\n            int cap = 0;\n            int sm = 0;\n            \n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n                } else if (Character.isLowerCase(c)) {\n                    sm++;\n                }\n            }\n            \n            int strength = cap - sm;\n            \n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n        \n        return class_name + \".\" + strongestExtension;\n    }\n}\n"}
{"task_id": "Java/154", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean cycpattern_check(String a, String b) {\n        if (b.length() > a.length()) {\n            return false;\n        }\n        \n        String doubleA = a + a;\n        return doubleA.contains(b);\n    }\n}\n"}
{"task_id": "Java/155", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> even_odd_count(int num) {\n        num = Math.abs(num); // Handle negative numbers\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num /= 10;\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n}\n"}
{"task_id": "Java/156", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String int_to_mini_roman(int number) {\n        // Define the Roman numeral symbols and their corresponding values\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] symbols = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        \n        StringBuilder roman = new StringBuilder();\n        \n        // Iterate through the values and symbols\n        for (int i = 0; i < values.length; i++) {\n            // Append the symbol while the number is greater than or equal to the value\n            while (number >= values[i]) {\n                roman.append(symbols[i]);\n                number -= values[i];\n            }\n        }\n        \n        return roman.toString();\n    }\n}\n"}
{"task_id": "Java/157", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean right_angle_triangle(int a, int b, int c) {\n        // Sort the sides to ensure a <= b <= c\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        \n        // Check the Pythagorean theorem\n        return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n    }\n}\n"}
{"task_id": "Java/158", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String find_max(List<String> words) {\n        String maxWord = \"\";\n        int maxUniqueChars = 0;\n\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            int uniqueCount = uniqueChars.size();\n            if (uniqueCount > maxUniqueChars || (uniqueCount == maxUniqueChars && word.compareTo(maxWord) < 0)) {\n                maxWord = word;\n                maxUniqueChars = uniqueCount;\n            }\n        }\n\n        return maxWord;\n    }\n}\n"}
{"task_id": "Java/159", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> eat(int number, int need, int remaining) {\n        int totalEaten = number + need;\n        int carrotsLeft = Math.max(remaining - need, 0);\n        return Arrays.asList(totalEaten, carrotsLeft);\n    }\n}\n"}
{"task_id": "Java/160", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        int result = operand.get(0);\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int nextOperand = operand.get(i + 1);\n            switch (op) {\n                case \"+\":\n                    result += nextOperand;\n                    break;\n                case \"-\":\n                    result -= nextOperand;\n                    break;\n                case \"*\":\n                    result *= nextOperand;\n                    break;\n                case \"/\":\n                    result /= nextOperand;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, nextOperand);\n                    break;\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/161", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(String s) {\n        StringBuilder result = new StringBuilder();\n        boolean containsLetter = false;\n\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                containsLetter = true;\n                if (Character.isUpperCase(c)) {\n                    result.append(Character.toLowerCase(c));\n                } else {\n                    result.append(Character.toUpperCase(c));\n                }\n            } else {\n                result.append(c);\n            }\n        }\n\n        if (!containsLetter) {\n            return result.reverse().toString();\n        }\n\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/162", "generation": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] messageDigest = md.digest(text.getBytes());\n        BigInteger no = new BigInteger(1, messageDigest);\n        String hashtext = no.toString(16);\n        \n        while (hashtext.length() < 32) {\n            hashtext = \"0\" + hashtext;\n        }\n        \n        return Optional.of(hashtext);\n    }\n}\n"}
{"task_id": "Java/163", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> generate_integers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        int start = Math.min(a, b);\n        int end = Math.max(a, b);\n        \n        for (int i = start; i <= end; i++) {\n            if (i % 2 == 0 && i < 10) {\n                result.add(i);\n            }\n        }\n        \n        Collections.sort(result);\n        return result;\n    }\n}\n"}
{"task_id": "Java/0", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/1", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        StringBuilder currentGroup = new StringBuilder();\n        int balance = 0;\n\n        for (char ch : paren_string.toCharArray()) {\n            if (ch == ' ') {\n                continue; // Ignore spaces\n            }\n            currentGroup.append(ch);\n            if (ch == '(') {\n                balance++;\n            } else if (ch == ')') {\n                balance--;\n            }\n            if (balance == 0) {\n                result.add(currentGroup.toString());\n                currentGroup.setLength(0); // Reset for the next group\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/2", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double truncate_number(double number) {\n        int integerPart = (int) number;\n        return number - integerPart;\n    }\n}\n"}
{"task_id": "Java/3", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/4", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double mean_absolute_deviation(List<Double> numbers) {\n        if (numbers.isEmpty()) {\n            return 0.0;\n        }\n\n        double mean = 0.0;\n        for (double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n\n        double mad = 0.0;\n        for (double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n\n        return mad;\n    }\n}\n"}
{"task_id": "Java/5", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/6", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> parse_nested_parens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        String[] groups = paren_string.split(\" \");\n        \n        for (String group : groups) {\n            int maxDepth = 0;\n            int currentDepth = 0;\n            \n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentDepth++;\n                    maxDepth = Math.max(maxDepth, currentDepth);\n                } else if (c == ')') {\n                    currentDepth--;\n                }\n            }\n            \n            result.add(maxDepth);\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/7", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> filteredList = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredList.add(str);\n            }\n        }\n        return filteredList;\n    }\n}\n"}
{"task_id": "Java/8", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sum_product(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        \n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        \n        if (numbers.isEmpty()) {\n            sum = 0;\n            product = 1;\n        }\n        \n        return Arrays.asList(sum, product);\n    }\n}\n"}
{"task_id": "Java/9", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        if (numbers.isEmpty()) {\n            return result;\n        }\n        \n        int maxSoFar = Integer.MIN_VALUE;\n        for (int num : numbers) {\n            if (num > maxSoFar) {\n                maxSoFar = num;\n            }\n            result.add(maxSoFar);\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/10", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    public String make_palindrome(String string) {\n        if (string.isEmpty()) {\n            return \"\";\n        }\n\n        int n = string.length();\n        for (int i = 0; i < n; i++) {\n            if (isPalindrome(string.substring(i))) {\n                String prefix = new StringBuilder(string.substring(0, i)).reverse().toString();\n                return string + prefix;\n            }\n        }\n        return string + new StringBuilder(string).reverse().toString();\n    }\n}\n"}
{"task_id": "Java/11", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String string_xor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        int length = Math.min(a.length(), b.length());\n        \n        for (int i = 0; i < length; i++) {\n            if (a.charAt(i) != b.charAt(i)) {\n                result.append('1');\n            } else {\n                result.append('0');\n            }\n        }\n        \n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/12", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        String longestString = strings.get(0);\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n        \n        return Optional.of(longestString);\n    }\n}\n"}
{"task_id": "Java/13", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int greatest_common_divisor(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}\n"}
{"task_id": "Java/14", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> all_prefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n}\n"}
{"task_id": "Java/15", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String string_sequence(int n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            if (i < n) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/16", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int count_distinct_characters(String string) {\n        Set<Character> distinctChars = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            distinctChars.add(Character.toLowerCase(c));\n        }\n        return distinctChars.size();\n    }\n}\n"}
{"task_id": "Java/17", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> parse_music(String string) {\n        List<Integer> beats = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        \n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    beats.add(4);\n                    break;\n                case \"o|\":\n                    beats.add(2);\n                    break;\n                case \".|\":\n                    beats.add(1);\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid note: \" + note);\n            }\n        }\n        \n        return beats;\n    }\n}\n"}
{"task_id": "Java/18", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int how_many_times(String string, String substring) {\n        int count = 0;\n        int subLength = substring.length();\n        for (int i = 0; i <= string.length() - subLength; i++) {\n            if (string.substring(i, i + subLength).equals(substring)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/19", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String sort_numbers(String numbers) {\n        // Define a map for the string representation of numbers to their integer values\n        Map<String, Integer> numMap = new HashMap<>();\n        numMap.put(\"zero\", 0);\n        numMap.put(\"one\", 1);\n        numMap.put(\"two\", 2);\n        numMap.put(\"three\", 3);\n        numMap.put(\"four\", 4);\n        numMap.put(\"five\", 5);\n        numMap.put(\"six\", 6);\n        numMap.put(\"seven\", 7);\n        numMap.put(\"eight\", 8);\n        numMap.put(\"nine\", 9);\n\n        // Split the input string by spaces\n        String[] numStrings = numbers.split(\" \");\n\n        // Create a list of pairs (number string, integer value)\n        List<Map.Entry<String, Integer>> numList = new ArrayList<>();\n        for (String numStr : numStrings) {\n            numList.add(new AbstractMap.SimpleEntry<>(numStr, numMap.get(numStr)));\n        }\n\n        // Sort the list based on the integer values\n        numList.sort(Map.Entry.comparingByValue());\n\n        // Build the result string from the sorted list\n        StringBuilder sortedNumbers = new StringBuilder();\n        for (Map.Entry<String, Integer> entry : numList) {\n            sortedNumbers.append(entry.getKey()).append(\" \");\n        }\n\n        // Remove the trailing space and return the result\n        return sortedNumbers.toString().trim();\n    }\n}\n"}
{"task_id": "Java/20", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        List<Double> closest_pair = new ArrayList<>();\n        closest_pair.add(numbers.get(0));\n        closest_pair.add(numbers.get(1));\n        double min_distance = Math.abs(numbers.get(1) - numbers.get(0));\n        \n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double current_distance = Math.abs(numbers.get(i) - numbers.get(j));\n                if (current_distance < min_distance) {\n                    closest_pair.clear();\n                    closest_pair.add(numbers.get(i));\n                    closest_pair.add(numbers.get(j));\n                    min_distance = current_distance;\n                }\n            }\n        }\n        \n        Collections.sort(closest_pair);\n        return closest_pair;\n    }\n}\n"}
{"task_id": "Java/21", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        if (numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements.\");\n        }\n\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n\n        List<Double> rescaledList = new ArrayList<>();\n        for (Double number : numbers) {\n            double rescaledValue = (number - min) / (max - min);\n            rescaledList.add(rescaledValue);\n        }\n\n        return rescaledList;\n    }\n}\n"}
{"task_id": "Java/22", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> filter_integers(List<Object> values) {\n        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n}\n"}
{"task_id": "Java/23", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int strlen(String string) {\n        return string.length();\n    }\n}\n"}
{"task_id": "Java/24", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largest_divisor(int n) {\n        for (int i = n / 2; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1; // In case n is 1, the largest divisor is 1 itself.\n    }\n}\n"}
{"task_id": "Java/25", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors;\n    }\n}\n"}
{"task_id": "Java/26", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        for (Integer num : numbers) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        return numbers.stream()\n                      .filter(num -> frequencyMap.get(num) == 1)\n                      .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/27", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String flip_case(String string) {\n        StringBuilder flippedString = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                flippedString.append(Character.toUpperCase(c));\n            } else if (Character.isUpperCase(c)) {\n                flippedString.append(Character.toLowerCase(c));\n            } else {\n                flippedString.append(c);\n            }\n        }\n        return flippedString.toString();\n    }\n}\n"}
{"task_id": "Java/28", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String concatenate(List<String> strings) {\n        StringBuilder result = new StringBuilder();\n        for (String str : strings) {\n            result.append(str);\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/29", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/30", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> get_positive(List<Integer> l) {\n        return l.stream()\n                .filter(n -> n > 0)\n                .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/31", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_prime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/32", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double find_zero(List<Double> xs) {\n        // Ensure the list has an even number of coefficients\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"The list must have an even number of coefficients.\");\n        }\n        \n        // Find the interval where the polynomial changes sign\n        double a = -1.0;\n        double b = 1.0;\n        while (poly(xs, a) * poly(xs, b) > 0) {\n            a *= 2;\n            b *= 2;\n        }\n        \n        // Use binary search to find the root within the interval\n        double tolerance = 1e-10;\n        while (b - a > tolerance) {\n            double mid = (a + b) / 2;\n            if (poly(xs, mid) * poly(xs, a) > 0) {\n                a = mid;\n            } else {\n                b = mid;\n            }\n        }\n        \n        return (a + b) / 2;\n    }\n}\n"}
{"task_id": "Java/33", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_third(List<Integer> l) {\n        List<Integer> result = new ArrayList<>(l);\n        List<Integer> toSort = new ArrayList<>();\n        \n        // Collect elements at indices divisible by three\n        for (int i = 2; i < l.size(); i += 3) {\n            toSort.add(l.get(i));\n        }\n        \n        // Sort the collected elements\n        Collections.sort(toSort);\n        \n        // Replace the elements in the result list with sorted elements\n        int index = 0;\n        for (int i = 2; i < l.size(); i += 3) {\n            result.set(i, toSort.get(index++));\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/34", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> uniqueSet = new HashSet<>(l);\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n        Collections.sort(uniqueList);\n        return uniqueList;\n    }\n}\n"}
{"task_id": "Java/35", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int max_element(List<Integer> l) {\n        int max = l.get(0);\n        for (int num : l) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n}\n"}
{"task_id": "Java/36", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fizz_buzz(int n) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String numStr = String.valueOf(i);\n                for (char c : numStr.toCharArray()) {\n                    if (c == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/37", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_even(List<Integer> l) {\n        List<Integer> result = new ArrayList<>(l);\n        List<Integer> evenIndexValues = new ArrayList<>();\n        \n        // Collect values at even indices\n        for (int i = 0; i < l.size(); i += 2) {\n            evenIndexValues.add(l.get(i));\n        }\n        \n        // Sort the collected values\n        Collections.sort(evenIndexValues);\n        \n        // Replace the values at even indices with the sorted values\n        int evenIndex = 0;\n        for (int i = 0; i < l.size(); i += 2) {\n            result.set(i, evenIndexValues.get(evenIndex++));\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/38", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse the cycling in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n"}
{"task_id": "Java/39", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int prime_fib(int n) {\n        int count = 0;\n        int a = 0, b = 1;\n        while (true) {\n            int temp = a + b;\n            a = b;\n            b = temp;\n            if (isPrime(b)) {\n                count++;\n                if (count == n) {\n                    return b;\n                }\n            }\n        }\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        if (num == 2) return true;\n        if (num % 2 == 0) return false;\n        for (int i = 3; i <= Math.sqrt(num); i += 2) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/40", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        if (l.size() < 3) {\n            return false;\n        }\n        \n        Collections.sort(l);\n        \n        for (int i = 0; i < l.size() - 2; i++) {\n            int left = i + 1;\n            int right = l.size() - 1;\n            \n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        \n        return false;\n    }\n}\n"}
{"task_id": "Java/41", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int car_race_collision(int n) {\n        // Each left-to-right car will collide with each right-to-left car exactly once.\n        // Therefore, the number of collisions is simply the product of the number of cars in each direction.\n        return n * n;\n    }\n}\n"}
{"task_id": "Java/42", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> incr_list(List<Integer> l) {\n        return l.stream()\n                .map(i -> i + 1)\n                .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/43", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        Set<Integer> seen = new HashSet<>();\n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/44", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String change_base(int x, int base) {\n        if (x == 0) {\n            return \"0\";\n        }\n        \n        StringBuilder result = new StringBuilder();\n        while (x > 0) {\n            int remainder = x % base;\n            result.append(remainder);\n            x /= base;\n        }\n        \n        return result.reverse().toString();\n    }\n}\n"}
{"task_id": "Java/45", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangle_area(double a, double h) {\n        return 0.5 * a * h;\n    }\n}\n"}
{"task_id": "Java/46", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib4(int n) {\n        if (n == 0 || n == 1 || n == 3) return 0;\n        if (n == 2) return 2;\n\n        int[] fib4Array = new int[n + 1];\n        fib4Array[0] = 0;\n        fib4Array[1] = 0;\n        fib4Array[2] = 2;\n        fib4Array[3] = 0;\n\n        for (int i = 4; i <= n; i++) {\n            fib4Array[i] = fib4Array[i - 1] + fib4Array[i - 2] + fib4Array[i - 3] + fib4Array[i - 4];\n        }\n\n        return fib4Array[n];\n    }\n}\n"}
{"task_id": "Java/47", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            return (l.get(size / 2 - 1) + l.get(size / 2)) / 2.0;\n        } else {\n            return l.get(size / 2);\n        }\n    }\n}\n"}
{"task_id": "Java/48", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_palindrome(String text) {\n        int left = 0;\n        int right = text.length() - 1;\n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/49", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int modp(int n, int p) {\n        if (n == 0) {\n            return 1;\n        }\n        long result = 1;\n        long base = 2;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                result = (result * base) % p;\n            }\n            base = (base * base) % p;\n            n /= 2;\n        }\n        return (int) result;\n    }\n}\n"}
{"task_id": "Java/50", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public String decode_shift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26)));\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/51", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String remove_vowels(String text) {\n        if (text == null) {\n            return null;\n        }\n        StringBuilder result = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (!isVowel(c)) {\n                result.append(c);\n            }\n        }\n        return result.toString();\n    }\n\n    private boolean isVowel(char c) {\n        c = Character.toLowerCase(c);\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n}\n"}
{"task_id": "Java/52", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean below_threshold(List<Integer> l, int t) {\n        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/53", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add(int x, int y) {\n        return x + y;\n    }\n}\n"}
{"task_id": "Java/54", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean same_chars(String s0, String s1) {\n        Map<Character, Integer> charCount0 = new HashMap<>();\n        Map<Character, Integer> charCount1 = new HashMap<>();\n\n        for (char c : s0.toCharArray()) {\n            charCount0.put(c, charCount0.getOrDefault(c, 0) + 1);\n        }\n\n        for (char c : s1.toCharArray()) {\n            charCount1.put(c, charCount1.getOrDefault(c, 0) + 1);\n        }\n\n        return charCount0.equals(charCount1);\n    }\n}\n"}
{"task_id": "Java/55", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0, b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a + b;\n            a = b;\n            b = temp;\n        }\n        return b;\n    }\n}\n"}
{"task_id": "Java/56", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correct_bracketing(String brackets) {\n        int count = 0;\n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '<') {\n                count++;\n            } else if (bracket == '>') {\n                count--;\n            }\n            if (count < 0) {\n                return false;\n            }\n        }\n        return count == 0;\n    }\n}\n"}
{"task_id": "Java/57", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean monotonic(List<Integer> l) {\n        boolean increasing = true;\n        boolean decreasing = true;\n        \n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n        }\n        \n        return increasing || decreasing;\n    }\n}\n"}
{"task_id": "Java/58", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        set1.retainAll(set2);\n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result);\n        return result;\n    }\n}\n"}
{"task_id": "Java/59", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largest_prime_factor(int n) {\n        int largestPrime = 2;\n        \n        // Check for the smallest prime factor 2\n        while (n % 2 == 0) {\n            n /= 2;\n            largestPrime = 2;\n        }\n        \n        // Check for odd factors from 3 to sqrt(n)\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                n /= i;\n                largestPrime = i;\n            }\n        }\n        \n        // If n is still greater than 2, then it must be prime\n        if (n > 2) {\n            largestPrime = n;\n        }\n        \n        return largestPrime;\n    }\n}\n"}
{"task_id": "Java/60", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_to_n(int n) {\n        return n * (n + 1) / 2;\n    }\n}\n"}
{"task_id": "Java/61", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correct_bracketing(String brackets) {\n        int count = 0;\n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '(') {\n                count++;\n            } else if (bracket == ')') {\n                count--;\n                if (count < 0) {\n                    return false;\n                }\n            }\n        }\n        return count == 0;\n    }\n}\n"}
{"task_id": "Java/62", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> derivativeCoefficients = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            derivativeCoefficients.add(xs.get(i) * i);\n        }\n        return derivativeCoefficients;\n    }\n}\n"}
{"task_id": "Java/63", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fibfib(int n) {\n        if (n == 0 || n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        \n        int[] fibfibArray = new int[n + 1];\n        fibfibArray[0] = 0;\n        fibfibArray[1] = 0;\n        fibfibArray[2] = 1;\n        \n        for (int i = 3; i <= n; i++) {\n            fibfibArray[i] = fibfibArray[i - 1] + fibfibArray[i - 2] + fibfibArray[i - 3];\n        }\n        \n        return fibfibArray[n];\n    }\n}\n"}
{"task_id": "Java/64", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int vowels_count(String s) {\n        s = s.toLowerCase();\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        if (s.endsWith(\"y\")) {\n            count++;\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/65", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String circular_shift(int x, int shift) {\n        String numStr = Integer.toString(x);\n        int length = numStr.length();\n        \n        if (shift >= length) {\n            return new StringBuilder(numStr).reverse().toString();\n        }\n        \n        String shiftedStr = numStr.substring(length - shift) + numStr.substring(0, length - shift);\n        return shiftedStr;\n    }\n}\n"}
{"task_id": "Java/66", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digitSum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/67", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruit_distribution(String s, int n) {\n        // Split the string by spaces\n        String[] parts = s.split(\" \");\n        \n        // Extract the number of apples and oranges\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[2]);\n        \n        // Calculate the number of mangoes\n        int mangoes = n - apples - oranges;\n        \n        return mangoes;\n    }\n}\n"}
{"task_id": "Java/68", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        int smallestEven = Integer.MAX_VALUE;\n        int smallestIndex = -1;\n\n        for (int i = 0; i < arr.size(); i++) {\n            int value = arr.get(i);\n            if (value % 2 == 0 && value < smallestEven) {\n                smallestEven = value;\n                smallestIndex = i;\n            }\n        }\n\n        if (smallestIndex != -1) {\n            result.add(smallestEven);\n            result.add(smallestIndex);\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/69", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int search(List<Integer> lst) {\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        // Count the frequency of each integer in the list\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        int maxValidNumber = -1;\n        \n        // Iterate through the frequency map to find the greatest valid number\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int number = entry.getKey();\n            int frequency = entry.getValue();\n            \n            if (frequency >= number && number > maxValidNumber) {\n                maxValidNumber = number;\n            }\n        }\n        \n        return maxValidNumber;\n    }\n}\n"}
{"task_id": "Java/70", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        List<Integer> sortedList = new ArrayList<>(lst);\n        Collections.sort(sortedList);\n        \n        int i = 0;\n        int j = sortedList.size() - 1;\n        \n        while (i <= j) {\n            if (i <= j) {\n                result.add(sortedList.get(i));\n                i++;\n            }\n            if (i <= j) {\n                result.add(sortedList.get(j));\n                j--;\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/71", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangle_area(double a, double b, double c) {\n        // Check if the sides can form a valid triangle\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        \n        // Calculate the semi-perimeter\n        double s = (a + b + c) / 2;\n        \n        // Calculate the area using Heron's formula\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        \n        // Round the area to 2 decimal points\n        return Math.round(area * 100.0) / 100.0;\n    }\n}\n"}
{"task_id": "Java/72", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean will_it_fly(List<Integer> q, int w) {\n        // Check if the list is palindromic\n        boolean isPalindromic = true;\n        int n = q.size();\n        for (int i = 0; i < n / 2; i++) {\n            if (!q.get(i).equals(q.get(n - i - 1))) {\n                isPalindromic = false;\n                break;\n            }\n        }\n\n        // Calculate the sum of the elements\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n\n        // Check if the sum is less than or equal to the maximum possible weight\n        return isPalindromic && sum <= w;\n    }\n}\n"}
{"task_id": "Java/73", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int smallest_change(List<Integer> arr) {\n        int n = arr.size();\n        int changes = 0;\n        \n        for (int i = 0; i < n / 2; i++) {\n            if (!arr.get(i).equals(arr.get(n - i - 1))) {\n                changes++;\n            }\n        }\n        \n        return changes;\n    }\n}\n"}
{"task_id": "Java/74", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        int totalChars1 = lst1.stream().mapToInt(String::length).sum();\n        int totalChars2 = lst2.stream().mapToInt(String::length).sum();\n        \n        if (totalChars1 <= totalChars2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n"}
{"task_id": "Java/75", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_multiply_prime(int a) {\n        // Generate all prime numbers less than 100\n        List<Integer> primes = generatePrimes(100);\n        \n        // Check all combinations of three primes\n        for (int i = 0; i < primes.size(); i++) {\n            for (int j = i; j < primes.size(); j++) {\n                for (int k = j; k < primes.size(); k++) {\n                    if (primes.get(i) * primes.get(j) * primes.get(k) == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    // Helper method to generate all prime numbers less than n\n    private List<Integer> generatePrimes(int n) {\n        boolean[] isPrime = new boolean[n];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = isPrime[1] = false; // 0 and 1 are not prime numbers\n\n        for (int i = 2; i * i < n; i++) {\n            if (isPrime[i]) {\n                for (int j = i * i; j < n; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n}\n"}
{"task_id": "Java/76", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_simple_power(int x, int n) {\n        if (n <= 1) {\n            return false; // n must be greater than 1 for the power to be meaningful\n        }\n        int power = 1;\n        while (power < x) {\n            power *= n;\n        }\n        return power == x;\n    }\n}\n"}
{"task_id": "Java/77", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean iscube(int a) {\n        if (a < 0) {\n            a = -a;\n        }\n        int cubeRoot = (int) Math.cbrt(a);\n        return cubeRoot * cubeRoot * cubeRoot == a;\n    }\n}\n"}
{"task_id": "Java/78", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int hex_key(String num) {\n        // Define the prime hexadecimal digits\n        Set<Character> primeHexDigits = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        // Initialize the count of prime digits\n        int count = 0;\n        \n        // Iterate through each character in the input string\n        for (char c : num.toCharArray()) {\n            // If the character is a prime hexadecimal digit, increment the count\n            if (primeHexDigits.contains(c)) {\n                count++;\n            }\n        }\n        \n        // Return the count of prime hexadecimal digits\n        return count;\n    }\n}\n"}
{"task_id": "Java/79", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String decimal_to_binary(int decimal) {\n        String binary = Integer.toBinaryString(decimal);\n        return \"db\" + binary + \"db\";\n    }\n}\n"}
{"task_id": "Java/80", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_happy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n        \n        for (int i = 0; i < s.length() - 2; i++) {\n            char first = s.charAt(i);\n            char second = s.charAt(i + 1);\n            char third = s.charAt(i + 2);\n            \n            if (first == second || first == third || second == third) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/81", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (double grade : grades) {\n            if (grade == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}\n"}
{"task_id": "Java/82", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean prime_length(String string) {\n        int length = string.length();\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/83", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int starts_one_ends(int n) {\n        // There are 2^(n-1) numbers that start with 1\n        // There are 2^(n-1) numbers that end with 1\n        // We subtract 1 because the number \"1\" is counted twice (once as starting with 1 and once as ending with 1)\n        return (int) (Math.pow(2, n - 1) + Math.pow(2, n - 1) - 1);\n    }\n}\n"}
{"task_id": "Java/84", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(int N) {\n        int sumOfDigits = 0;\n        while (N > 0) {\n            sumOfDigits += N % 10;\n            N /= 10;\n        }\n        return Integer.toBinaryString(sumOfDigits);\n    }\n}\n"}
{"task_id": "Java/85", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/86", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String anti_shuffle(String s) {\n        String[] words = s.split(\" \");\n        StringBuilder result = new StringBuilder();\n        \n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            result.append(new String(chars)).append(\" \");\n        }\n        \n        return result.toString().trim();\n    }\n}\n"}
{"task_id": "Java/87", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    result.add(Arrays.asList(i, j));\n                }\n            }\n        }\n        \n        // Sort by rows in ascending order\n        result.sort((a, b) -> a.get(0) - b.get(0));\n        \n        // Sort coordinates of the same row by columns in descending order\n        for (int i = 0; i < result.size() - 1; i++) {\n            if (result.get(i).get(0).equals(result.get(i + 1).get(0))) {\n                int j = i;\n                while (j >= 0 && result.get(j).get(0).equals(result.get(i + 1).get(0)) && result.get(j).get(1) < result.get(i + 1).get(1)) {\n                    Collections.swap(result, j, j + 1);\n                    j--;\n                }\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/88", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> array) {\n        if (array.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        int first = array.get(0);\n        int last = array.get(array.size() - 1);\n        boolean isSumEven = (first + last) % 2 == 0;\n\n        List<Integer> sortedArray = new ArrayList<>(array);\n        if (isSumEven) {\n            sortedArray.sort(Collections.reverseOrder());\n        } else {\n            Collections.sort(sortedArray);\n        }\n\n        return sortedArray;\n    }\n}\n"}
{"task_id": "Java/89", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encrypt(String s) {\n        StringBuilder encrypted = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            int shift = (c - 'a' + 2 * 2) % 26;\n            encrypted.append((char) ('a' + shift));\n        }\n        return encrypted.toString();\n    }\n}\n"}
{"task_id": "Java/90", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\n        int smallest = Integer.MAX_VALUE;\n        int secondSmallest = Integer.MAX_VALUE;\n        boolean foundSecondSmallest = false;\n\n        for (int num : lst) {\n            if (num < smallest) {\n                secondSmallest = smallest;\n                smallest = num;\n            } else if (num > smallest && num < secondSmallest) {\n                secondSmallest = num;\n                foundSecondSmallest = true;\n            }\n        }\n\n        return foundSecondSmallest ? Optional.of(secondSmallest) : Optional.empty();\n    }\n}\n"}
{"task_id": "Java/91", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int is_bored(String S) {\n        String[] sentences = S.split(\"[.!?]\");\n        int boredomCount = 0;\n        \n        for (String sentence : sentences) {\n            sentence = sentence.trim();\n            if (sentence.startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n        \n        return boredomCount;\n    }\n}\n"}
{"task_id": "Java/92", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean any_int(Object x, Object y, Object z) {\n        if (!(x instanceof Integer) || !(y instanceof Integer) || !(z instanceof Integer)) {\n            return false;\n        }\n\n        int a = (Integer) x;\n        int b = (Integer) y;\n        int c = (Integer) z;\n\n        return (a == b + c) || (b == a + c) || (c == a + b);\n    }\n}\n"}
{"task_id": "Java/93", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encode(String message) {\n        StringBuilder encodedMessage = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (\"aeiouAEIOU\".indexOf(c) != -1) {\n                    char newChar = (char) (c + 2);\n                    if ((Character.isLowerCase(c) && newChar > 'z') || (Character.isUpperCase(c) && newChar > 'Z')) {\n                        newChar -= 26;\n                    }\n                    encodedMessage.append(newChar);\n                } else {\n                    encodedMessage.append(Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c));\n                }\n            } else {\n                encodedMessage.append(c);\n            }\n        }\n        return encodedMessage.toString();\n    }\n}\n"}
{"task_id": "Java/94", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int skjkasdkd(List<Integer> lst) {\n        int largestPrime = -1;\n        \n        // Helper function to check if a number is prime\n        boolean isPrime(int num) {\n            if (num <= 1) return false;\n            for (int i = 2; i <= Math.sqrt(num); i++) {\n                if (num % i == 0) return false;\n            }\n            return true;\n        }\n        \n        // Find the largest prime in the list\n        for (int num : lst) {\n            if (isPrime(num) && num > largestPrime) {\n                largestPrime = num;\n            }\n        }\n        \n        // If no prime found, return 0\n        if (largestPrime == -1) return 0;\n        \n        // Calculate the sum of digits of the largest prime\n        int sumOfDigits = 0;\n        while (largestPrime > 0) {\n            sumOfDigits += largestPrime % 10;\n            largestPrime /= 10;\n        }\n        \n        return sumOfDigits;\n    }\n}\n"}
{"task_id": "Java/95", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        \n        boolean allLower = true;\n        boolean allUpper = true;\n        \n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            \n            String strKey = (String) key;\n            if (!strKey.equals(strKey.toLowerCase())) {\n                allLower = false;\n            }\n            if (!strKey.equals(strKey.toUpperCase())) {\n                allUpper = false;\n            }\n            \n            if (!allLower && !allUpper) {\n                return false;\n            }\n        }\n        \n        return allLower || allUpper;\n    }\n}\n"}
{"task_id": "Java/96", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<>();\n        if (n <= 2) {\n            return primes;\n        }\n        \n        boolean[] isPrime = new boolean[n];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = isPrime[1] = false; // 0 and 1 are not prime numbers\n        \n        for (int i = 2; i < n; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n                for (int j = 2 * i; j < n; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n        \n        return primes;\n    }\n}\n"}
{"task_id": "Java/97", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int multiply(int a, int b) {\n        int unitDigitA = Math.abs(a) % 10;\n        int unitDigitB = Math.abs(b) % 10;\n        return unitDigitA * unitDigitB;\n    }\n}\n"}
{"task_id": "Java/98", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int count_upper(String s) {\n        int count = 0;\n        Set<Character> vowels = new HashSet<>(Arrays.asList('A', 'E', 'I', 'O', 'U'));\n        \n        for (int i = 0; i < s.length(); i += 2) {\n            if (vowels.contains(s.charAt(i))) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/99", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int closest_integer(String value) {\n        double number = Double.parseDouble(value);\n        int roundedNumber = (int) Math.round(number);\n        \n        // Check if the number is exactly halfway between two integers\n        if (Math.abs(number - roundedNumber) == 0.5) {\n            if (number > 0) {\n                return roundedNumber + 1;\n            } else {\n                return roundedNumber - 1;\n            }\n        }\n        \n        return roundedNumber;\n    }\n}\n"}
{"task_id": "Java/100", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        int currentLevel = n;\n        \n        for (int i = 0; i < n; i++) {\n            pile.add(currentLevel);\n            if (currentLevel % 2 == 0) {\n                currentLevel += 2; // Next even number\n            } else {\n                currentLevel += 2; // Next odd number\n            }\n        }\n        \n        return pile;\n    }\n}\n"}
{"task_id": "Java/101", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> words_string(String s) {\n        // Split the string by both commas and spaces\n        String[] words = s.split(\"[,\\\\s]+\");\n        // Convert the array to a list and return it\n        return Arrays.asList(words);\n    }\n}\n"}
{"task_id": "Java/102", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int choose_num(int x, int y) {\n        // Ensure x is less than or equal to y\n        if (x > y) {\n            return -1;\n        }\n        \n        // Find the biggest even number in the range [x, y]\n        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                return i;\n            }\n        }\n        \n        // If no even number is found, return -1\n        return -1;\n    }\n}\n"}
{"task_id": "Java/103", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object rounded_avg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        \n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        \n        int count = m - n + 1;\n        int average = (int) Math.round((double) sum / count);\n        return Integer.toBinaryString(average);\n    }\n}\n"}
{"task_id": "Java/104", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> unique_digits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int num : x) {\n            if (!containsEvenDigit(num)) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        return result;\n    }\n    \n    private boolean containsEvenDigit(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return true;\n            }\n            num /= 10;\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/105", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> by_length(List<Integer> arr) {\n        // Filter and sort the valid numbers between 1 and 9\n        List<Integer> validNumbers = new ArrayList<>();\n        for (int num : arr) {\n            if (num >= 1 && num <= 9) {\n                validNumbers.add(num);\n            }\n        }\n        Collections.sort(validNumbers);\n\n        // Reverse the sorted list\n        Collections.reverse(validNumbers);\n\n        // Map the numbers to their corresponding names\n        List<String> result = new ArrayList<>();\n        for (int num : validNumbers) {\n            result.add(getNumberName(num));\n        }\n\n        return result;\n    }\n\n    private String getNumberName(int num) {\n        switch (num) {\n            case 1: return \"One\";\n            case 2: return \"Two\";\n            case 3: return \"Three\";\n            case 4: return \"Four\";\n            case 5: return \"Five\";\n            case 6: return \"Six\";\n            case 7: return \"Seven\";\n            case 8: return \"Eight\";\n            case 9: return \"Nine\";\n            default: return \"\";\n        }\n    }\n}\n"}
{"task_id": "Java/106", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sum(i));\n            }\n        }\n        return result;\n    }\n\n    private int factorial(int num) {\n        int fact = 1;\n        for (int i = 1; i <= num; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n\n    private int sum(int num) {\n        int sum = 0;\n        for (int i = 1; i <= num; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/107", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> even_odd_palindrome(int n) {\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n    \n    private boolean isPalindrome(int num) {\n        String str = Integer.toString(num);\n        int len = str.length();\n        for (int i = 0; i < len / 2; i++) {\n            if (str.charAt(i) != str.charAt(len - i - 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/108", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int count_nums(List<Integer> arr) {\n        int count = 0;\n        for (int num : arr) {\n            int sum = 0;\n            int absNum = Math.abs(num);\n            while (absNum > 0) {\n                sum += absNum % 10;\n                absNum /= 10;\n            }\n            if (num < 0) {\n                sum = -sum;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/109", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean move_one_ball(List<Integer> arr) {\n        if (arr.isEmpty()) return true;\n\n        int n = arr.size();\n        int shifts = 0;\n\n        // Find the number of shifts needed to make the array sorted\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i) > arr.get((i + 1) % n)) {\n                shifts++;\n            }\n        }\n\n        // If more than one shift is needed, it's not possible to sort the array\n        return shifts <= 1;\n    }\n}\n"}
{"task_id": "Java/110", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int oddCountInLst1 = 0;\n        int evenCountInLst2 = 0;\n\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCountInLst1++;\n            }\n        }\n\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCountInLst2++;\n            }\n        }\n\n        if (oddCountInLst1 <= evenCountInLst2) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}\n"}
{"task_id": "Java/111", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> letterCount = new HashMap<>();\n        if (test.isEmpty()) {\n            return letterCount;\n        }\n\n        String[] letters = test.split(\" \");\n        for (String letter : letters) {\n            letterCount.put(letter, letterCount.getOrDefault(letter, 0) + 1);\n        }\n\n        int maxCount = Collections.max(letterCount.values());\n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : letterCount.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/112", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Object> reverse_delete(String s, String c) {\n        StringBuilder result = new StringBuilder();\n        Set<Character> charsToDelete = new HashSet<>();\n        \n        for (char ch : c.toCharArray()) {\n            charsToDelete.add(ch);\n        }\n        \n        for (char ch : s.toCharArray()) {\n            if (!charsToDelete.contains(ch)) {\n                result.append(ch);\n            }\n        }\n        \n        String resultString = result.toString();\n        boolean isPalindrome = isPalindrome(resultString);\n        \n        List<Object> resultList = new ArrayList<>();\n        resultList.add(resultString);\n        resultList.add(isPalindrome);\n        \n        return resultList;\n    }\n    \n    private boolean isPalindrome(String str) {\n        int left = 0;\n        int right = str.length() - 1;\n        \n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/113", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int oddCount = 0;\n            \n            for (char c : str.toCharArray()) {\n                if (Character.getNumericValue(c) % 2 != 0) {\n                    oddCount++;\n                }\n            }\n            \n            result.add(\"the number of odd elements \" + oddCount + \"n the str\" + oddCount + \"ng \" + oddCount + \" of the \" + oddCount + \"nput.\");\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/114", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int minSubArraySum(List<Integer> nums) {\n        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n\n        for (int num : nums) {\n            currentSum += num;\n            if (currentSum < minSum) {\n                minSum = currentSum;\n            }\n            if (currentSum > 0) {\n                currentSum = 0;\n            }\n        }\n\n        return minSum;\n    }\n}\n"}
{"task_id": "Java/115", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        int totalOperations = 0;\n        \n        for (List<Integer> well : grid) {\n            int waterUnits = 0;\n            for (int unit : well) {\n                if (unit == 1) {\n                    waterUnits++;\n                }\n            }\n            if (waterUnits > 0) {\n                totalOperations += (int) Math.ceil((double) waterUnits / capacity);\n            }\n        }\n        \n        return totalOperations;\n    }\n}\n"}
{"task_id": "Java/116", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> arr) {\n        arr.sort((a, b) -> {\n            int countA = Integer.bitCount(Math.abs(a));\n            int countB = Integer.bitCount(Math.abs(b));\n            if (countA == countB) {\n                return Integer.compare(a, b);\n            }\n            return Integer.compare(countA, countB);\n        });\n        return arr;\n    }\n}\n"}
{"task_id": "Java/117", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> select_words(String s, int n) {\n        List<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int consonantCount = 0;\n            for (char c : word.toCharArray()) {\n                if (isConsonant(c)) {\n                    consonantCount++;\n                }\n            }\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n\n    private boolean isConsonant(char c) {\n        c = Character.toLowerCase(c);\n        return \"bcdfghjklmnpqrstvwxyz\".indexOf(c) != -1;\n    }\n}\n"}
{"task_id": "Java/118", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String get_closest_vowel(String word) {\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        Set<Character> consonants = new HashSet<>(Arrays.asList('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z',\n                                                              'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'));\n        \n        for (int i = word.length() - 2; i > 0; i--) {\n            if (vowels.contains(word.charAt(i)) && consonants.contains(word.charAt(i - 1)) && consonants.contains(word.charAt(i + 1))) {\n                return String.valueOf(word.charAt(i));\n            }\n        }\n        return \"\";\n    }\n}\n"}
{"task_id": "Java/119", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String match_parens(List<String> lst) {\n        int balance1 = 0, balance2 = 0;\n        for (char c : lst.get(0).toCharArray()) {\n            if (c == '(') balance1++;\n            else balance1--;\n        }\n        for (char c : lst.get(1).toCharArray()) {\n            if (c == '(') balance2++;\n            else balance2--;\n        }\n        int totalBalance = balance1 + balance2;\n        if (totalBalance == 0 && balance1 <= 0 && balance2 >= 0) {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n}\n"}
{"task_id": "Java/120", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Sort the array in descending order\n        Collections.sort(arr, Collections.reverseOrder());\n        \n        // Take the first k elements\n        List<Integer> maxKNumbers = new ArrayList<>(arr.subList(0, k));\n        \n        // Sort the k elements in ascending order\n        Collections.sort(maxKNumbers);\n        \n        return maxKNumbers;\n    }\n}\n"}
{"task_id": "Java/121", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/122", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add_elements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) >= 10 && arr.get(i) <= 99) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/123", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> get_odd_collatz(int n) {\n        List<Integer> oddNumbers = new ArrayList<>();\n        while (n != 1) {\n            if (n % 2 != 0) {\n                oddNumbers.add(n);\n            }\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n        }\n        oddNumbers.add(1); // Adding the last number in the sequence which is always 1\n        Collections.sort(oddNumbers);\n        return oddNumbers;\n    }\n}\n"}
{"task_id": "Java/124", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean valid_date(String date) {\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n            return false;\n        }\n\n        int month, day, year;\n        try {\n            month = Integer.parseInt(parts[0]);\n            day = Integer.parseInt(parts[1]);\n            year = Integer.parseInt(parts[2]);\n        } catch (NumberFormatException e) {\n            return false;\n        }\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        if (day < 1) {\n            return false;\n        }\n\n        switch (month) {\n            case 1: case 3: case 5: case 7: case 8: case 10: case 12:\n                if (day > 31) {\n                    return false;\n                }\n                break;\n            case 4: case 6: case 9: case 11:\n                if (day > 30) {\n                    return false;\n                }\n                break;\n            case 2:\n                if (day > 29) {\n                    return false;\n                }\n                break;\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/125", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object split_words(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 != 0) {\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n}\n"}
{"task_id": "Java/126", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_sorted(List<Integer> lst) {\n        if (lst.size() <= 1) return true;\n\n        Map<Integer, Integer> frequency = new HashMap<>();\n        for (int num : lst) {\n            frequency.put(num, frequency.getOrDefault(num, 0) + 1);\n            if (frequency.get(num) > 2) return false;\n        }\n\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < lst.get(i - 1)) return false;\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/127", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n\n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n\n        if (intersectionStart > intersectionEnd) {\n            return \"NO\";\n        }\n\n        int intersectionLength = intersectionEnd - intersectionStart + 1;\n\n        if (isPrime(intersectionLength)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/128", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int productOfSigns = 1;\n        int sumOfMagnitudes = 0;\n\n        for (int num : arr) {\n            if (num > 0) {\n                productOfSigns *= 1;\n            } else if (num < 0) {\n                productOfSigns *= -1;\n            } else {\n                productOfSigns = 0;\n                break;\n            }\n            sumOfMagnitudes += Math.abs(num);\n        }\n\n        return Optional.of(productOfSigns * sumOfMagnitudes);\n    }\n}\n"}
{"task_id": "Java/129", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n        List<Integer> result = new ArrayList<>();\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> {\n            for (int i = 0; i < a.length; i++) {\n                if (a[i] != b[i]) return a[i] - b[i];\n            }\n            return 0;\n        });\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                pq.offer(new int[]{grid.get(i).get(j), i, j});\n            }\n        }\n\n        while (!pq.isEmpty()) {\n            int[] current = pq.poll();\n            int value = current[0];\n            int x = current[1];\n            int y = current[2];\n            List<Integer> path = new ArrayList<>();\n            path.add(value);\n            boolean[][] visited = new boolean[n][n];\n            visited[x][y] = true;\n            dfs(grid, x, y, k, path, visited, directions, pq);\n            if (path.size() == k) {\n                result = path;\n                break;\n            }\n        }\n\n        return result;\n    }\n\n    private void dfs(List<List<Integer>> grid, int x, int y, int k, List<Integer> path, boolean[][] visited, int[][] directions, PriorityQueue<int[]> pq) {\n        if (path.size() == k) return;\n        for (int[] dir : directions) {\n            int newX = x + dir[0];\n            int newY = y + dir[1];\n            if (newX >= 0 && newX < grid.size() && newY >= 0 && newY < grid.size() && !visited[newX][newY]) {\n                visited[newX][newY] = true;\n                path.add(grid.get(newX).get(newY));\n                dfs(grid, newX, newY, k, path, visited, directions, pq);\n                if (path.size() == k) return;\n                path.remove(path.size() - 1);\n                visited[newX][newY] = false;\n            }\n        }\n    }\n}\n"}
{"task_id": "Java/130", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n        List<Integer> tribonacciSequence = new ArrayList<>();\n        if (n < 0) {\n            return tribonacciSequence; // Return empty list for invalid input\n        }\n\n        // Initialize the first two values of the sequence\n        tribonacciSequence.add(1);\n        tribonacciSequence.add(3);\n\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                tribonacciSequence.add(1 + i / 2);\n            } else {\n                int nextValue = tribonacciSequence.get(i - 1) + tribonacciSequence.get(i - 2) + tribonacciSequence.get(i + 1);\n                tribonacciSequence.add(nextValue);\n            }\n        }\n\n        return tribonacciSequence;\n    }\n}\n"}
{"task_id": "Java/131", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digits(int n) {\n        int product = 1;\n        boolean hasOdd = false;\n        \n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n                hasOdd = true;\n            }\n            n /= 10;\n        }\n        \n        return hasOdd ? product : 0;\n    }\n}\n"}
{"task_id": "Java/132", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_nested(String string) {\n        Stack<Character> stack = new Stack<>();\n        boolean hasNested = false;\n\n        for (char ch : string.toCharArray()) {\n            if (ch == '[') {\n                stack.push(ch);\n            } else if (ch == ']') {\n                if (!stack.isEmpty() && stack.peek() == '[') {\n                    stack.pop();\n                    if (!stack.isEmpty()) {\n                        hasNested = true;\n                    }\n                } else {\n                    stack.push(ch);\n                }\n            }\n        }\n\n        return hasNested;\n    }\n}\n"}
{"task_id": "Java/133", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_squares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            int ceilingNum = (int) Math.ceil(num);\n            sum += ceilingNum * ceilingNum;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/134", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        if (txt.isEmpty()) {\n            return false;\n        }\n        \n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar)) {\n            // Check if the last character is not part of a word\n            if (txt.length() == 1 || txt.charAt(txt.length() - 2) == ' ') {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/135", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int can_arrange(List<Integer> arr) {\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}\n"}
{"task_id": "Java/136", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        Optional<Integer> largestNegative = Optional.empty();\n        Optional<Integer> smallestPositive = Optional.empty();\n\n        for (Integer num : lst) {\n            if (num < 0) {\n                if (!largestNegative.isPresent() || num > largestNegative.get()) {\n                    largestNegative = Optional.of(num);\n                }\n            } else if (num > 0) {\n                if (!smallestPositive.isPresent() || num < smallestPositive.get()) {\n                    smallestPositive = Optional.of(num);\n                }\n            }\n        }\n\n        List<Optional<Integer>> result = new ArrayList<>();\n        result.add(largestNegative);\n        result.add(smallestPositive);\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/137", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Object> compare_one(Object a, Object b) {\n        // Convert both objects to strings and normalize the decimal separator\n        String strA = a.toString().replace(\",\", \".\");\n        String strB = b.toString().replace(\",\", \".\");\n\n        // Parse the strings to double for comparison\n        double doubleA = Double.parseDouble(strA);\n        double doubleB = Double.parseDouble(strB);\n\n        // Compare the parsed doubles\n        if (doubleA > doubleB) {\n            return Optional.of(a);\n        } else if (doubleB > doubleA) {\n            return Optional.of(b);\n        } else {\n            return Optional.empty();\n        }\n    }\n}\n"}
{"task_id": "Java/138", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_equal_to_sum_even(int n) {\n        // A number can be written as the sum of exactly 4 positive even numbers if and only if it is at least 8 and even.\n        return n >= 8 && n % 2 == 0;\n    }\n}\n"}
{"task_id": "Java/139", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public long special_factorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    private long factorial(int num) {\n        long fact = 1;\n        for (int i = 1; i <= num; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n}\n"}
{"task_id": "Java/140", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String fix_spaces(String text) {\n        StringBuilder result = new StringBuilder();\n        int i = 0;\n        while (i < text.length()) {\n            if (text.charAt(i) == ' ') {\n                int start = i;\n                while (i < text.length() && text.charAt(i) == ' ') {\n                    i++;\n                }\n                int end = i;\n                if (end - start > 2) {\n                    result.append('-');\n                } else {\n                    for (int j = start; j < end; j++) {\n                        result.append('_');\n                    }\n                }\n            } else {\n                result.append(text.charAt(i));\n                i++;\n            }\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/141", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String file_name_check(String file_name) {\n        // Check if there are more than three digits\n        int digitCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n                if (digitCount > 3) {\n                    return \"No\";\n                }\n            }\n        }\n\n        // Check if there is exactly one dot\n        int dotIndex = file_name.indexOf('.');\n        if (dotIndex == -1 || dotIndex != file_name.lastIndexOf('.')) {\n            return \"No\";\n        }\n\n        // Check if the substring before the dot is not empty and starts with a latin letter\n        String namePart = file_name.substring(0, dotIndex);\n        if (namePart.isEmpty() || !Character.isLetter(namePart.charAt(0))) {\n            return \"No\";\n        }\n\n        // Check if the substring after the dot is one of the allowed extensions\n        String extension = file_name.substring(dotIndex + 1);\n        List<String> allowedExtensions = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        if (!allowedExtensions.contains(extension)) {\n            return \"No\";\n        }\n\n        return \"Yes\";\n    }\n}\n"}
{"task_id": "Java/142", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_squares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                lst.set(i, lst.get(i) * lst.get(i));\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                lst.set(i, lst.get(i) * lst.get(i) * lst.get(i));\n            }\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/143", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String words_in_sentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n        \n        for (String word : words) {\n            if (isPrime(word.length())) {\n                if (result.length() > 0) {\n                    result.append(\" \");\n                }\n                result.append(word);\n            }\n        }\n        \n        return result.toString();\n    }\n    \n    private boolean isPrime(int n) {\n        if (n <= 1) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/144", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean simplify(String x, String n) {\n        // Parse the fractions\n        String[] partsX = x.split(\"/\");\n        String[] partsN = n.split(\"/\");\n        \n        int numeratorX = Integer.parseInt(partsX[0]);\n        int denominatorX = Integer.parseInt(partsX[1]);\n        int numeratorN = Integer.parseInt(partsN[0]);\n        int denominatorN = Integer.parseInt(partsN[1]);\n        \n        // Calculate the product of the fractions\n        int numeratorProduct = numeratorX * numeratorN;\n        int denominatorProduct = denominatorX * denominatorN;\n        \n        // Check if the product is a whole number\n        return numeratorProduct % denominatorProduct == 0;\n    }\n}\n"}
{"task_id": "Java/145", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> order_by_points(List<Integer> nums) {\n        Collections.sort(nums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int sumA = sumOfDigits(a);\n                int sumB = sumOfDigits(b);\n                return sumA - sumB;\n            }\n        });\n        return nums;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        num = Math.abs(num);\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/146", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10) {\n                String numStr = String.valueOf(Math.abs(num));\n                char firstDigit = numStr.charAt(0);\n                char lastDigit = numStr.charAt(numStr.length() - 1);\n                if (isOddDigit(firstDigit) && isOddDigit(lastDigit)) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    private boolean isOddDigit(char digit) {\n        int digitValue = Character.getNumericValue(digit);\n        return digitValue % 2 != 0;\n    }\n}\n"}
{"task_id": "Java/147", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int get_max_triples(int n) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = (i + 1) * (i + 1) - (i + 1) + 1;\n        }\n\n        int count = 0;\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n\n        return count;\n    }\n}\n"}
{"task_id": "Java/148", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> bf(String planet1, String planet2) {\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        List<String> result = new ArrayList<>();\n        \n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        \n        if (index1 == -1 || index2 == -1) {\n            return result; // Return empty list if either planet name is incorrect\n        }\n        \n        int start = Math.min(index1, index2);\n        int end = Math.max(index1, index2);\n        \n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/149", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> sorted_list_sum(List<String> lst) {\n        // Filter out strings with odd lengths\n        List<String> filteredList = new ArrayList<>();\n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                filteredList.add(str);\n            }\n        }\n\n        // Sort the filtered list first by length, then alphabetically\n        Collections.sort(filteredList, new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                if (s1.length() != s2.length()) {\n                    return s1.length() - s2.length();\n                } else {\n                    return s1.compareTo(s2);\n                }\n            }\n        });\n\n        return filteredList;\n    }\n}\n"}
{"task_id": "Java/150", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int x_or_y(int n, int x, int y) {\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/151", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int double_the_difference(List<Object> lst) {\n        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                if (num > 0 && num % 2 != 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/152", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            int difference = Math.abs(game.get(i) - guess.get(i));\n            result.add(difference);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/153", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        String strongestExtension = \"\";\n        int maxStrength = Integer.MIN_VALUE;\n        \n        for (String extension : extensions) {\n            int cap = 0;\n            int sm = 0;\n            \n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n                } else if (Character.isLowerCase(c)) {\n                    sm++;\n                }\n            }\n            \n            int strength = cap - sm;\n            \n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n        \n        return class_name + \".\" + strongestExtension;\n    }\n}\n"}
{"task_id": "Java/154", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean cycpattern_check(String a, String b) {\n        if (b.length() > a.length()) {\n            return false;\n        }\n        \n        String doubleA = a + a;\n        return doubleA.contains(b);\n    }\n}\n"}
{"task_id": "Java/155", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> even_odd_count(int num) {\n        int evenCount = 0;\n        int oddCount = 0;\n        num = Math.abs(num); // Handle negative numbers\n        \n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num /= 10;\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n}\n"}
{"task_id": "Java/156", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String int_to_mini_roman(int number) {\n        // Define the Roman numeral symbols and their corresponding values\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] symbols = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        \n        StringBuilder roman = new StringBuilder();\n        \n        // Iterate through the values and symbols arrays\n        for (int i = 0; i < values.length; i++) {\n            // Append the symbol while the number is greater than or equal to the value\n            while (number >= values[i]) {\n                roman.append(symbols[i]);\n                number -= values[i];\n            }\n        }\n        \n        // Convert the result to lowercase and return\n        return roman.toString();\n    }\n}\n"}
{"task_id": "Java/157", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean right_angle_triangle(int a, int b, int c) {\n        // Sort the sides to ensure a <= b <= c\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        \n        // Check the Pythagorean theorem\n        return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n    }\n}\n"}
{"task_id": "Java/158", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String find_max(List<String> words) {\n        String maxWord = \"\";\n        int maxUniqueChars = 0;\n\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            int uniqueCount = uniqueChars.size();\n            if (uniqueCount > maxUniqueChars || (uniqueCount == maxUniqueChars && word.compareTo(maxWord) < 0)) {\n                maxWord = word;\n                maxUniqueChars = uniqueCount;\n            }\n        }\n\n        return maxWord;\n    }\n}\n"}
{"task_id": "Java/159", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> eat(int number, int need, int remaining) {\n        int totalEaten = number + Math.min(need, remaining);\n        int carrotsLeft = Math.max(0, remaining - need);\n        return Arrays.asList(totalEaten, carrotsLeft);\n    }\n}\n"}
{"task_id": "Java/160", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        int result = operand.get(0);\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int nextOperand = operand.get(i + 1);\n            switch (op) {\n                case \"+\":\n                    result += nextOperand;\n                    break;\n                case \"-\":\n                    result -= nextOperand;\n                    break;\n                case \"*\":\n                    result *= nextOperand;\n                    break;\n                case \"/\":\n                    result /= nextOperand;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, nextOperand);\n                    break;\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/161", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(String s) {\n        StringBuilder result = new StringBuilder();\n        boolean hasLetter = false;\n\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                hasLetter = true;\n                if (Character.isUpperCase(c)) {\n                    result.append(Character.toLowerCase(c));\n                } else {\n                    result.append(Character.toUpperCase(c));\n                }\n            } else {\n                result.append(c);\n            }\n        }\n\n        if (!hasLetter) {\n            return result.reverse().toString();\n        }\n\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/162", "generation": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] messageDigest = md.digest(text.getBytes());\n        BigInteger no = new BigInteger(1, messageDigest);\n        String hashtext = no.toString(16);\n        \n        while (hashtext.length() < 32) {\n            hashtext = \"0\" + hashtext;\n        }\n        \n        return Optional.of(hashtext);\n    }\n}\n"}
{"task_id": "Java/163", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> generate_integers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        int start = Math.min(a, b);\n        int end = Math.max(a, b);\n        \n        for (int i = start; i <= end; i++) {\n            if (i % 2 == 0 && i < 10) {\n                result.add(i);\n            }\n        }\n        \n        Collections.sort(result);\n        return result;\n    }\n}\n"}
{"task_id": "Java/0", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/1", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        StringBuilder currentGroup = new StringBuilder();\n        int balance = 0;\n\n        for (char ch : paren_string.toCharArray()) {\n            if (ch == ' ') {\n                continue; // Ignore spaces\n            }\n            currentGroup.append(ch);\n            if (ch == '(') {\n                balance++;\n            } else if (ch == ')') {\n                balance--;\n            }\n            if (balance == 0) {\n                result.add(currentGroup.toString());\n                currentGroup.setLength(0); // Reset for the next group\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/2", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double truncate_number(double number) {\n        return number - Math.floor(number);\n    }\n}\n"}
{"task_id": "Java/3", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/4", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double mean_absolute_deviation(List<Double> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be null or empty\");\n        }\n\n        double mean = 0.0;\n        for (double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n\n        double mad = 0.0;\n        for (double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n\n        return mad;\n    }\n}\n"}
{"task_id": "Java/5", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/6", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> parse_nested_parens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        String[] groups = paren_string.split(\" \");\n        \n        for (String group : groups) {\n            int maxDepth = 0;\n            int currentDepth = 0;\n            \n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentDepth++;\n                    maxDepth = Math.max(maxDepth, currentDepth);\n                } else if (c == ')') {\n                    currentDepth--;\n                }\n            }\n            \n            result.add(maxDepth);\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/7", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> filteredList = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredList.add(str);\n            }\n        }\n        return filteredList;\n    }\n}\n"}
{"task_id": "Java/8", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sum_product(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        \n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        \n        if (numbers.isEmpty()) {\n            sum = 0;\n            product = 1;\n        }\n        \n        return Arrays.asList(sum, product);\n    }\n}\n"}
{"task_id": "Java/9", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        if (numbers.isEmpty()) {\n            return result;\n        }\n        \n        int maxSoFar = Integer.MIN_VALUE;\n        for (int num : numbers) {\n            if (num > maxSoFar) {\n                maxSoFar = num;\n            }\n            result.add(maxSoFar);\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/10", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    public String make_palindrome(String string) {\n        if (string.isEmpty()) {\n            return \"\";\n        }\n\n        int n = string.length();\n        for (int i = 0; i < n; i++) {\n            if (isPalindrome(string.substring(i))) {\n                String prefix = string.substring(0, i);\n                String reversedPrefix = new StringBuilder(prefix).reverse().toString();\n                return string + reversedPrefix;\n            }\n        }\n        return string + new StringBuilder(string).reverse().toString();\n    }\n}\n"}
{"task_id": "Java/11", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String string_xor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        int length = Math.min(a.length(), b.length());\n        \n        for (int i = 0; i < length; i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append('0');\n            } else {\n                result.append('1');\n            }\n        }\n        \n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/12", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        String longestString = strings.get(0);\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n        \n        return Optional.of(longestString);\n    }\n}\n"}
{"task_id": "Java/13", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int greatest_common_divisor(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}\n"}
{"task_id": "Java/14", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> all_prefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n}\n"}
{"task_id": "Java/15", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String string_sequence(int n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            if (i < n) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/16", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int count_distinct_characters(String string) {\n        Set<Character> distinctChars = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            distinctChars.add(Character.toLowerCase(c));\n        }\n        return distinctChars.size();\n    }\n}\n"}
{"task_id": "Java/17", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> parse_music(String string) {\n        List<Integer> beats = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        \n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    beats.add(4);\n                    break;\n                case \"o|\":\n                    beats.add(2);\n                    break;\n                case \".|\":\n                    beats.add(1);\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid note: \" + note);\n            }\n        }\n        \n        return beats;\n    }\n}\n"}
{"task_id": "Java/18", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int how_many_times(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while ((index = string.indexOf(substring, index)) != -1) {\n            count++;\n            index++;\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/19", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String sort_numbers(String numbers) {\n        // Define a map for the string representation of numbers to their integer values\n        Map<String, Integer> numMap = new HashMap<>();\n        numMap.put(\"zero\", 0);\n        numMap.put(\"one\", 1);\n        numMap.put(\"two\", 2);\n        numMap.put(\"three\", 3);\n        numMap.put(\"four\", 4);\n        numMap.put(\"five\", 5);\n        numMap.put(\"six\", 6);\n        numMap.put(\"seven\", 7);\n        numMap.put(\"eight\", 8);\n        numMap.put(\"nine\", 9);\n\n        // Split the input string by spaces\n        String[] numStrings = numbers.split(\" \");\n\n        // Create a list of pairs (number string, integer value)\n        List<Map.Entry<String, Integer>> numList = new ArrayList<>();\n        for (String numStr : numStrings) {\n            numList.add(Map.entry(numStr, numMap.get(numStr)));\n        }\n\n        // Sort the list based on the integer values\n        numList.sort(Map.Entry.comparingByValue());\n\n        // Build the result string from the sorted list\n        StringBuilder sortedNumbers = new StringBuilder();\n        for (Map.Entry<String, Integer> entry : numList) {\n            sortedNumbers.append(entry.getKey()).append(\" \");\n        }\n\n        // Remove the trailing space and return the result\n        return sortedNumbers.toString().trim();\n    }\n}\n"}
{"task_id": "Java/20", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        List<Double> closest_pair = new ArrayList<>();\n        closest_pair.add(numbers.get(0));\n        closest_pair.add(numbers.get(1));\n        double min_distance = Math.abs(numbers.get(1) - numbers.get(0));\n        \n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double distance = Math.abs(numbers.get(i) - numbers.get(j));\n                if (distance < min_distance) {\n                    closest_pair.clear();\n                    closest_pair.add(numbers.get(i));\n                    closest_pair.add(numbers.get(j));\n                    min_distance = distance;\n                }\n            }\n        }\n        \n        Collections.sort(closest_pair);\n        return closest_pair;\n    }\n}\n"}
{"task_id": "Java/21", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        if (numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements\");\n        }\n\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        double range = max - min;\n\n        List<Double> rescaledList = new ArrayList<>();\n        for (Double number : numbers) {\n            rescaledList.add((number - min) / range);\n        }\n\n        return rescaledList;\n    }\n}\n"}
{"task_id": "Java/22", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> filter_integers(List<Object> values) {\n        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n}\n"}
{"task_id": "Java/23", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int strlen(String string) {\n        return string.length();\n    }\n}\n"}
{"task_id": "Java/24", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largest_divisor(int n) {\n        for (int i = n / 2; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1; // In case n is 1, the largest divisor is 1.\n    }\n}\n"}
{"task_id": "Java/25", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors;\n    }\n}\n"}
{"task_id": "Java/26", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        for (Integer num : numbers) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        return numbers.stream()\n                      .filter(num -> frequencyMap.get(num) == 1)\n                      .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/27", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String flip_case(String string) {\n        StringBuilder flippedString = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                flippedString.append(Character.toUpperCase(c));\n            } else if (Character.isUpperCase(c)) {\n                flippedString.append(Character.toLowerCase(c));\n            } else {\n                flippedString.append(c);\n            }\n        }\n        return flippedString.toString();\n    }\n}\n"}
{"task_id": "Java/28", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String concatenate(List<String> strings) {\n        StringBuilder result = new StringBuilder();\n        for (String str : strings) {\n            result.append(str);\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/29", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/30", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> get_positive(List<Integer> l) {\n        return l.stream()\n                .filter(n -> n > 0)\n                .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/31", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_prime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/32", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double find_zero(List<Double> xs) {\n        // Ensure the list has an even number of coefficients\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"The list must have an even number of coefficients.\");\n        }\n        \n        // Find the interval where the polynomial changes sign\n        double a = -1.0;\n        double b = 1.0;\n        while (poly(xs, a) * poly(xs, b) > 0) {\n            a *= 2;\n            b *= 2;\n        }\n        \n        // Use binary search to find the root within the interval\n        double tolerance = 1e-10;\n        while (b - a > tolerance) {\n            double mid = (a + b) / 2;\n            if (poly(xs, mid) * poly(xs, a) > 0) {\n                a = mid;\n            } else {\n                b = mid;\n            }\n        }\n        \n        return (a + b) / 2;\n    }\n}\n"}
{"task_id": "Java/33", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_third(List<Integer> l) {\n        List<Integer> result = new ArrayList<>(l);\n        List<Integer> toSort = new ArrayList<>();\n        \n        // Collect elements at indices divisible by three\n        for (int i = 2; i < l.size(); i += 3) {\n            toSort.add(l.get(i));\n        }\n        \n        // Sort the collected elements\n        Collections.sort(toSort);\n        \n        // Replace the elements in the result list with sorted elements\n        int index = 0;\n        for (int i = 2; i < l.size(); i += 3) {\n            result.set(i, toSort.get(index++));\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/34", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> uniqueSet = new HashSet<>(l);\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n        Collections.sort(uniqueList);\n        return uniqueList;\n    }\n}\n"}
{"task_id": "Java/35", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int max_element(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be null or empty\");\n        }\n        int max = l.get(0);\n        for (int num : l) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n}\n"}
{"task_id": "Java/36", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fizz_buzz(int n) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String numStr = Integer.toString(i);\n                for (char c : numStr.toCharArray()) {\n                    if (c == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/37", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_even(List<Integer> l) {\n        List<Integer> result = new ArrayList<>(l);\n        List<Integer> evenIndexValues = new ArrayList<>();\n        \n        // Collect values at even indices\n        for (int i = 0; i < l.size(); i += 2) {\n            evenIndexValues.add(l.get(i));\n        }\n        \n        // Sort the collected values\n        Collections.sort(evenIndexValues);\n        \n        // Replace the values at even indices in the result list with the sorted values\n        int evenIndex = 0;\n        for (int i = 0; i < l.size(); i += 2) {\n            result.set(i, evenIndexValues.get(evenIndex++));\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/38", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse the cycling in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n"}
{"task_id": "Java/39", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int prime_fib(int n) {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\");\n        }\n        \n        int count = 0;\n        int fib1 = 1, fib2 = 1;\n        \n        while (true) {\n            int nextFib = fib1 + fib2;\n            fib1 = fib2;\n            fib2 = nextFib;\n            \n            if (isPrime(nextFib)) {\n                count++;\n                if (count == n) {\n                    return nextFib;\n                }\n            }\n        }\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        if (num == 2) {\n            return true;\n        }\n        if (num % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(num); i += 2) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/40", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        if (l.size() < 3) {\n            return false;\n        }\n        \n        Collections.sort(l);\n        \n        for (int i = 0; i < l.size() - 2; i++) {\n            int left = i + 1;\n            int right = l.size() - 1;\n            \n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        \n        return false;\n    }\n}\n"}
{"task_id": "Java/41", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int car_race_collision(int n) {\n        // Each left-to-right car will collide with each right-to-left car exactly once.\n        // Therefore, the total number of collisions is the product of the number of cars\n        // moving in each direction.\n        return n * n;\n    }\n}\n"}
{"task_id": "Java/42", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> incr_list(List<Integer> l) {\n        return l.stream()\n                .map(i -> i + 1)\n                .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/43", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        Set<Integer> seen = new HashSet<>();\n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/44", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String change_base(int x, int base) {\n        if (x == 0) {\n            return \"0\";\n        }\n        \n        StringBuilder result = new StringBuilder();\n        while (x > 0) {\n            int remainder = x % base;\n            result.append(remainder);\n            x /= base;\n        }\n        \n        return result.reverse().toString();\n    }\n}\n"}
{"task_id": "Java/45", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangle_area(double a, double h) {\n        return 0.5 * a * h;\n    }\n}\n"}
{"task_id": "Java/46", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib4(int n) {\n        if (n == 0 || n == 1 || n == 3) {\n            return 0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n\n        int[] fib4Array = new int[n + 1];\n        fib4Array[0] = 0;\n        fib4Array[1] = 0;\n        fib4Array[2] = 2;\n        fib4Array[3] = 0;\n\n        for (int i = 4; i <= n; i++) {\n            fib4Array[i] = fib4Array[i - 1] + fib4Array[i - 2] + fib4Array[i - 3] + fib4Array[i - 4];\n        }\n\n        return fib4Array[n];\n    }\n}\n"}
{"task_id": "Java/47", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            return (l.get(size / 2 - 1) + l.get(size / 2)) / 2.0;\n        } else {\n            return l.get(size / 2);\n        }\n    }\n}\n"}
{"task_id": "Java/48", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_palindrome(String text) {\n        int left = 0;\n        int right = text.length() - 1;\n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/49", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int modp(int n, int p) {\n        if (n == 0) {\n            return 1;\n        }\n        long result = 1;\n        long base = 2;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                result = (result * base) % p;\n            }\n            base = (base * base) % p;\n            n /= 2;\n        }\n        return (int) result;\n    }\n}\n"}
{"task_id": "Java/50", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public String decode_shift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26)));\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/51", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String remove_vowels(String text) {\n        if (text == null) {\n            return null;\n        }\n        StringBuilder result = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (\"aeiouAEIOU\".indexOf(c) == -1) {\n                result.append(c);\n            }\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/52", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean below_threshold(List<Integer> l, int t) {\n        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/53", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add(int x, int y) {\n        return x + y;\n    }\n}\n"}
{"task_id": "Java/54", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean same_chars(String s0, String s1) {\n        Map<Character, Integer> charCount0 = new HashMap<>();\n        Map<Character, Integer> charCount1 = new HashMap<>();\n\n        for (char c : s0.toCharArray()) {\n            charCount0.put(c, charCount0.getOrDefault(c, 0) + 1);\n        }\n\n        for (char c : s1.toCharArray()) {\n            charCount1.put(c, charCount1.getOrDefault(c, 0) + 1);\n        }\n\n        return charCount0.equals(charCount1);\n    }\n}\n"}
{"task_id": "Java/55", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0, b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a + b;\n            a = b;\n            b = temp;\n        }\n        return b;\n    }\n}\n"}
{"task_id": "Java/56", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correct_bracketing(String brackets) {\n        int count = 0;\n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '<') {\n                count++;\n            } else if (bracket == '>') {\n                count--;\n                if (count < 0) {\n                    return false;\n                }\n            }\n        }\n        return count == 0;\n    }\n}\n"}
{"task_id": "Java/57", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean monotonic(List<Integer> l) {\n        boolean increasing = true;\n        boolean decreasing = true;\n        \n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n        }\n        \n        return increasing || decreasing;\n    }\n}\n"}
{"task_id": "Java/58", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        set1.retainAll(set2);\n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result);\n        return result;\n    }\n}\n"}
{"task_id": "Java/59", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largest_prime_factor(int n) {\n        int largestPrime = 2;\n        \n        // Check for the smallest prime factor 2\n        while (n % 2 == 0) {\n            largestPrime = 2;\n            n /= 2;\n        }\n        \n        // Check for odd factors from 3 to sqrt(n)\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                largestPrime = i;\n                n /= i;\n            }\n        }\n        \n        // If n is still greater than 2, then n itself is a prime number\n        if (n > 2) {\n            largestPrime = n;\n        }\n        \n        return largestPrime;\n    }\n}\n"}
{"task_id": "Java/60", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_to_n(int n) {\n        return n * (n + 1) / 2;\n    }\n}\n"}
{"task_id": "Java/61", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correct_bracketing(String brackets) {\n        int count = 0;\n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '(') {\n                count++;\n            } else if (bracket == ')') {\n                count--;\n                if (count < 0) {\n                    return false;\n                }\n            }\n        }\n        return count == 0;\n    }\n}\n"}
{"task_id": "Java/62", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> derivativeCoefficients = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            derivativeCoefficients.add(xs.get(i) * i);\n        }\n        return derivativeCoefficients;\n    }\n}\n"}
{"task_id": "Java/63", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fibfib(int n) {\n        if (n == 0 || n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        \n        int[] fibfibArray = new int[n + 1];\n        fibfibArray[0] = 0;\n        fibfibArray[1] = 0;\n        fibfibArray[2] = 1;\n        \n        for (int i = 3; i <= n; i++) {\n            fibfibArray[i] = fibfibArray[i - 1] + fibfibArray[i - 2] + fibfibArray[i - 3];\n        }\n        \n        return fibfibArray[n];\n    }\n}\n"}
{"task_id": "Java/64", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int vowels_count(String s) {\n        s = s.toLowerCase();\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            } else if (i == s.length() - 1 && c == 'y') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/65", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String circular_shift(int x, int shift) {\n        String numStr = Integer.toString(x);\n        int length = numStr.length();\n        \n        if (shift >= length) {\n            return new StringBuilder(numStr).reverse().toString();\n        }\n        \n        String shiftedStr = numStr.substring(length - shift) + numStr.substring(0, length - shift);\n        return shiftedStr;\n    }\n}\n"}
{"task_id": "Java/66", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digitSum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/67", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruit_distribution(String s, int n) {\n        // Split the string by spaces\n        String[] parts = s.split(\" \");\n        \n        // Extract the number of apples and oranges\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[2]);\n        \n        // Calculate the number of mangoes\n        int mangoes = n - apples - oranges;\n        \n        return mangoes;\n    }\n}\n"}
{"task_id": "Java/68", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        int minEvenValue = Integer.MAX_VALUE;\n        int minIndex = -1;\n\n        for (int i = 0; i < arr.size(); i++) {\n            int value = arr.get(i);\n            if (value % 2 == 0 && value < minEvenValue) {\n                minEvenValue = value;\n                minIndex = i;\n            }\n        }\n\n        if (minIndex != -1) {\n            result.add(minEvenValue);\n            result.add(minIndex);\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/69", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int search(List<Integer> lst) {\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        // Count the frequency of each integer in the list\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        int maxValidNumber = -1;\n        \n        // Iterate through the frequency map to find the greatest valid number\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int number = entry.getKey();\n            int frequency = entry.getValue();\n            \n            if (frequency >= number && number > maxValidNumber) {\n                maxValidNumber = number;\n            }\n        }\n        \n        return maxValidNumber;\n    }\n}\n"}
{"task_id": "Java/70", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        List<Integer> sortedList = new ArrayList<>(lst);\n        Collections.sort(sortedList);\n        \n        int i = 0;\n        int j = sortedList.size() - 1;\n        \n        while (i <= j) {\n            if (i <= j) {\n                result.add(sortedList.get(i));\n                i++;\n            }\n            if (i <= j) {\n                result.add(sortedList.get(j));\n                j--;\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/71", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangle_area(double a, double b, double c) {\n        // Check if the sides can form a valid triangle\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        \n        // Calculate the semi-perimeter\n        double s = (a + b + c) / 2;\n        \n        // Calculate the area using Heron's formula\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        \n        // Round the area to 2 decimal points\n        return Math.round(area * 100.0) / 100.0;\n    }\n}\n"}
{"task_id": "Java/72", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean will_it_fly(List<Integer> q, int w) {\n        // Check if the list is palindromic\n        boolean isPalindromic = true;\n        int n = q.size();\n        for (int i = 0; i < n / 2; i++) {\n            if (!q.get(i).equals(q.get(n - i - 1))) {\n                isPalindromic = false;\n                break;\n            }\n        }\n\n        // Calculate the sum of the elements\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n\n        // Check if the sum is less than or equal to the maximum possible weight\n        return isPalindromic && sum <= w;\n    }\n}\n"}
{"task_id": "Java/73", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int smallest_change(List<Integer> arr) {\n        int n = arr.size();\n        int changes = 0;\n        \n        for (int i = 0; i < n / 2; i++) {\n            if (!arr.get(i).equals(arr.get(n - i - 1))) {\n                changes++;\n            }\n        }\n        \n        return changes;\n    }\n}\n"}
{"task_id": "Java/74", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        int totalChars1 = lst1.stream().mapToInt(String::length).sum();\n        int totalChars2 = lst2.stream().mapToInt(String::length).sum();\n\n        if (totalChars1 <= totalChars2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n"}
{"task_id": "Java/75", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_multiply_prime(int a) {\n        // Helper function to check if a number is prime\n        boolean[] isPrime = new boolean[100];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = isPrime[1] = false; // 0 and 1 are not prime numbers\n\n        for (int i = 2; i * i < 100; i++) {\n            if (isPrime[i]) {\n                for (int j = i * i; j < 100; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n\n        // Check if the number can be expressed as a product of three primes\n        for (int i = 2; i < 100; i++) {\n            if (isPrime[i]) {\n                for (int j = i; j < 100; j++) {\n                    if (isPrime[j]) {\n                        int k = a / (i * j);\n                        if (k < 100 && isPrime[k] && i * j * k == a) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/76", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_simple_power(int x, int n) {\n        if (n == 1) {\n            return x == 1;\n        }\n        int power = 1;\n        while (power < x) {\n            power *= n;\n        }\n        return power == x;\n    }\n}\n"}
{"task_id": "Java/77", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean iscube(int a) {\n        if (a < 0) {\n            a = -a;\n        }\n        int cubeRoot = (int) Math.cbrt(a);\n        return cubeRoot * cubeRoot * cubeRoot == a;\n    }\n}\n"}
{"task_id": "Java/78", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int hex_key(String num) {\n        // Define the set of prime hexadecimal digits\n        Set<Character> primeHexDigits = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        // Initialize the count of prime digits\n        int count = 0;\n        \n        // Iterate through each character in the input string\n        for (char c : num.toCharArray()) {\n            // If the character is a prime hexadecimal digit, increment the count\n            if (primeHexDigits.contains(c)) {\n                count++;\n            }\n        }\n        \n        // Return the count of prime hexadecimal digits\n        return count;\n    }\n}\n"}
{"task_id": "Java/79", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String decimal_to_binary(int decimal) {\n        String binary = Integer.toBinaryString(decimal);\n        return \"db\" + binary + \"db\";\n    }\n}\n"}
{"task_id": "Java/80", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_happy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/81", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (double grade : grades) {\n            if (grade == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}\n"}
{"task_id": "Java/82", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean prime_length(String string) {\n        int length = string.length();\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/83", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int starts_one_ends(int n) {\n        // There are 2^(n-1) numbers that start with 1\n        // There are 2^(n-1) numbers that end with 1\n        // We subtract 1 because the number \"1\" is counted twice (once as starting with 1 and once as ending with 1)\n        return (int) (Math.pow(2, n - 1) + Math.pow(2, n - 1) - 1);\n    }\n}\n"}
{"task_id": "Java/84", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(int N) {\n        int sumOfDigits = 0;\n        while (N > 0) {\n            sumOfDigits += N % 10;\n            N /= 10;\n        }\n        return Integer.toBinaryString(sumOfDigits);\n    }\n}\n"}
{"task_id": "Java/85", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/86", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String anti_shuffle(String s) {\n        String[] words = s.split(\" \");\n        StringBuilder result = new StringBuilder();\n        \n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            result.append(new String(chars)).append(\" \");\n        }\n        \n        return result.toString().trim();\n    }\n}\n"}
{"task_id": "Java/87", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    result.add(Arrays.asList(i, j));\n                }\n            }\n        }\n        \n        // Sort by rows in ascending order\n        result.sort((a, b) -> a.get(0).compareTo(b.get(0)));\n        \n        // Sort coordinates of the same row by columns in descending order\n        for (int i = 0; i < result.size() - 1; i++) {\n            if (result.get(i).get(0).equals(result.get(i + 1).get(0))) {\n                int j = i;\n                while (j >= 0 && result.get(j).get(0).equals(result.get(i + 1).get(0)) && result.get(j).get(1) < result.get(i + 1).get(1)) {\n                    Collections.swap(result, j, j + 1);\n                    j--;\n                }\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/88", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> array) {\n        if (array.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        int first = array.get(0);\n        int last = array.get(array.size() - 1);\n        boolean isSumEven = (first + last) % 2 == 0;\n\n        List<Integer> sortedArray = new ArrayList<>(array);\n        if (isSumEven) {\n            sortedArray.sort(Collections.reverseOrder());\n        } else {\n            Collections.sort(sortedArray);\n        }\n\n        return sortedArray;\n    }\n}\n"}
{"task_id": "Java/89", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encrypt(String s) {\n        StringBuilder encrypted = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            int shift = (c - 'a' + 2 * 2) % 26;\n            encrypted.append((char) ('a' + shift));\n        }\n        return encrypted.toString();\n    }\n}\n"}
{"task_id": "Java/90", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\n        Set<Integer> uniqueElements = new HashSet<>(lst);\n        if (uniqueElements.size() < 2) {\n            return Optional.empty();\n        }\n\n        List<Integer> sortedList = new ArrayList<>(uniqueElements);\n        Collections.sort(sortedList);\n\n        return Optional.of(sortedList.get(1));\n    }\n}\n"}
{"task_id": "Java/91", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int is_bored(String S) {\n        String[] sentences = S.split(\"[.!?]\");\n        int boredomCount = 0;\n        \n        for (String sentence : sentences) {\n            sentence = sentence.trim();\n            if (sentence.startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n        \n        return boredomCount;\n    }\n}\n"}
{"task_id": "Java/92", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean any_int(Object x, Object y, Object z) {\n        if (!(x instanceof Integer) || !(y instanceof Integer) || !(z instanceof Integer)) {\n            return false;\n        }\n        \n        int a = (Integer) x;\n        int b = (Integer) y;\n        int c = (Integer) z;\n        \n        return (a == b + c) || (b == a + c) || (c == a + b);\n    }\n}\n"}
{"task_id": "Java/93", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encode(String message) {\n        StringBuilder encodedMessage = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (\"aeiouAEIOU\".indexOf(c) != -1) {\n                    char newChar = (char) (c + 2);\n                    if ((Character.isLowerCase(c) && newChar > 'z') || (Character.isUpperCase(c) && newChar > 'Z')) {\n                        newChar -= 26;\n                    }\n                    encodedMessage.append(newChar);\n                } else {\n                    encodedMessage.append(Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c));\n                }\n            } else {\n                encodedMessage.append(c);\n            }\n        }\n        return encodedMessage.toString();\n    }\n}\n"}
{"task_id": "Java/94", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int skjkasdkd(List<Integer> lst) {\n        int largestPrime = -1;\n        \n        // Helper function to check if a number is prime\n        boolean isPrime(int num) {\n            if (num <= 1) return false;\n            for (int i = 2; i <= Math.sqrt(num); i++) {\n                if (num % i == 0) return false;\n            }\n            return true;\n        }\n        \n        // Find the largest prime in the list\n        for (int num : lst) {\n            if (isPrime(num) && num > largestPrime) {\n                largestPrime = num;\n            }\n        }\n        \n        // If no prime found, return 0\n        if (largestPrime == -1) return 0;\n        \n        // Calculate the sum of digits of the largest prime\n        int sumOfDigits = 0;\n        while (largestPrime > 0) {\n            sumOfDigits += largestPrime % 10;\n            largestPrime /= 10;\n        }\n        \n        return sumOfDigits;\n    }\n}\n"}
{"task_id": "Java/95", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        \n        boolean allLower = true;\n        boolean allUpper = true;\n        \n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            \n            String strKey = (String) key;\n            if (!strKey.equals(strKey.toLowerCase())) {\n                allLower = false;\n            }\n            if (!strKey.equals(strKey.toUpperCase())) {\n                allUpper = false;\n            }\n            \n            if (!allLower && !allUpper) {\n                return false;\n            }\n        }\n        \n        return allLower || allUpper;\n    }\n}\n"}
{"task_id": "Java/96", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<>();\n        if (n <= 2) {\n            return primes;\n        }\n        \n        boolean[] isPrime = new boolean[n];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = isPrime[1] = false; // 0 and 1 are not prime numbers\n        \n        for (int i = 2; i < n; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n                for (int j = 2 * i; j < n; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n        \n        return primes;\n    }\n}\n"}
{"task_id": "Java/97", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int multiply(int a, int b) {\n        int unitDigitA = Math.abs(a) % 10;\n        int unitDigitB = Math.abs(b) % 10;\n        return unitDigitA * unitDigitB;\n    }\n}\n"}
{"task_id": "Java/98", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int count_upper(String s) {\n        int count = 0;\n        Set<Character> vowels = new HashSet<>(Arrays.asList('A', 'E', 'I', 'O', 'U'));\n        \n        for (int i = 0; i < s.length(); i += 2) {\n            if (vowels.contains(s.charAt(i))) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/99", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int closest_integer(String value) {\n        double number = Double.parseDouble(value);\n        int roundedNumber = (int) Math.round(number);\n        return roundedNumber;\n    }\n}\n"}
{"task_id": "Java/100", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        int currentLevel = n;\n        \n        for (int i = 0; i < n; i++) {\n            pile.add(currentLevel);\n            if (currentLevel % 2 == 0) {\n                currentLevel += 2; // Next even number\n            } else {\n                currentLevel += 2; // Next odd number\n            }\n        }\n        \n        return pile;\n    }\n}\n"}
{"task_id": "Java/101", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> words_string(String s) {\n        // Split the string by both commas and spaces\n        String[] words = s.split(\"[,\\\\s]+\");\n        return Arrays.asList(words);\n    }\n}\n"}
{"task_id": "Java/102", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int choose_num(int x, int y) {\n        // Ensure x is less than or equal to y\n        if (x > y) {\n            return -1;\n        }\n        \n        // Adjust x to be the smallest even number greater than or equal to x\n        if (x % 2 != 0) {\n            x += 1;\n        }\n        \n        // Adjust y to be the largest even number less than or equal to y\n        if (y % 2 != 0) {\n            y -= 1;\n        }\n        \n        // If x is greater than y after adjustments, return -1\n        if (x > y) {\n            return -1;\n        }\n        \n        // Return the largest even number in the range [x, y]\n        return y;\n    }\n}\n"}
{"task_id": "Java/103", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object rounded_avg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        \n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        \n        int count = m - n + 1;\n        int average = sum / count;\n        int roundedAverage = Math.round((float) sum / count);\n        \n        return Integer.toBinaryString(roundedAverage);\n    }\n}\n"}
{"task_id": "Java/104", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> unique_digits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int num : x) {\n            if (hasOnlyOddDigits(num)) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        return result;\n    }\n    \n    private boolean hasOnlyOddDigits(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return false;\n            }\n            num /= 10;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/105", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> by_length(List<Integer> arr) {\n        // Filter and sort the valid numbers between 1 and 9\n        List<Integer> validNumbers = new ArrayList<>();\n        for (int num : arr) {\n            if (num >= 1 && num <= 9) {\n                validNumbers.add(num);\n            }\n        }\n        Collections.sort(validNumbers);\n\n        // Reverse the sorted list\n        Collections.reverse(validNumbers);\n\n        // Map the numbers to their corresponding names\n        List<String> result = new ArrayList<>();\n        for (int num : validNumbers) {\n            result.add(getNumberName(num));\n        }\n\n        return result;\n    }\n\n    private String getNumberName(int num) {\n        switch (num) {\n            case 1: return \"One\";\n            case 2: return \"Two\";\n            case 3: return \"Three\";\n            case 4: return \"Four\";\n            case 5: return \"Five\";\n            case 6: return \"Six\";\n            case 7: return \"Seven\";\n            case 8: return \"Eight\";\n            case 9: return \"Nine\";\n            default: return \"\";\n        }\n    }\n}\n"}
{"task_id": "Java/106", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sumOfNumbers(i));\n            }\n        }\n        return result;\n    }\n\n    private int factorial(int num) {\n        int fact = 1;\n        for (int i = 1; i <= num; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n\n    private int sumOfNumbers(int num) {\n        return num * (num + 1) / 2;\n    }\n}\n"}
{"task_id": "Java/107", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> even_odd_palindrome(int n) {\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n    \n    private boolean isPalindrome(int num) {\n        String str = Integer.toString(num);\n        int len = str.length();\n        for (int i = 0; i < len / 2; i++) {\n            if (str.charAt(i) != str.charAt(len - i - 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/108", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int count_nums(List<Integer> arr) {\n        int count = 0;\n        for (int num : arr) {\n            int sum = 0;\n            int absNum = Math.abs(num);\n            while (absNum > 0) {\n                sum += absNum % 10;\n                absNum /= 10;\n            }\n            if (num < 0) {\n                sum = -sum;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/109", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean move_one_ball(List<Integer> arr) {\n        if (arr.isEmpty()) return true;\n\n        int n = arr.size();\n        int rotations = 0;\n\n        // Find the number of rotations needed to make the array sorted\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i) > arr.get((i + 1) % n)) {\n                rotations++;\n            }\n        }\n\n        // If there is more than one break point, it's not possible to sort the array\n        return rotations <= 1;\n    }\n}\n"}
{"task_id": "Java/110", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int oddCountInLst1 = 0;\n        int evenCountInLst2 = 0;\n\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCountInLst1++;\n            }\n        }\n\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCountInLst2++;\n            }\n        }\n\n        if (oddCountInLst1 <= evenCountInLst2) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}\n"}
{"task_id": "Java/111", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> letterCount = new HashMap<>();\n        if (test.isEmpty()) {\n            return letterCount;\n        }\n\n        String[] letters = test.split(\" \");\n        for (String letter : letters) {\n            letterCount.put(letter, letterCount.getOrDefault(letter, 0) + 1);\n        }\n\n        int maxCount = Collections.max(letterCount.values());\n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : letterCount.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/112", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Object> reverse_delete(String s, String c) {\n        StringBuilder result = new StringBuilder();\n        Set<Character> charsToDelete = new HashSet<>();\n        \n        // Add characters to be deleted to a set for O(1) lookup\n        for (char ch : c.toCharArray()) {\n            charsToDelete.add(ch);\n        }\n        \n        // Build the result string by excluding characters in charsToDelete\n        for (char ch : s.toCharArray()) {\n            if (!charsToDelete.contains(ch)) {\n                result.append(ch);\n            }\n        }\n        \n        // Check if the result string is a palindrome\n        boolean isPalindrome = true;\n        int len = result.length();\n        for (int i = 0; i < len / 2; i++) {\n            if (result.charAt(i) != result.charAt(len - 1 - i)) {\n                isPalindrome = false;\n                break;\n            }\n        }\n        \n        // Return the result as a list containing the result string and the palindrome check\n        List<Object> resultList = new ArrayList<>();\n        resultList.add(result.toString());\n        resultList.add(isPalindrome);\n        return resultList;\n    }\n}\n"}
{"task_id": "Java/113", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int oddCount = 0;\n            \n            for (char ch : str.toCharArray()) {\n                if (Character.getNumericValue(ch) % 2 != 0) {\n                    oddCount++;\n                }\n            }\n            \n            result.add(\"the number of odd elements \" + oddCount + \"n the str\" + oddCount + \"ng \" + oddCount + \" of the \" + oddCount + \"nput.\");\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/114", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int minSubArraySum(List<Integer> nums) {\n        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n        \n        for (int num : nums) {\n            currentSum += num;\n            if (currentSum < minSum) {\n                minSum = currentSum;\n            }\n            if (currentSum > 0) {\n                currentSum = 0;\n            }\n        }\n        \n        return minSum;\n    }\n}\n"}
{"task_id": "Java/115", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        int totalBucketsNeeded = 0;\n\n        for (List<Integer> row : grid) {\n            int waterUnits = 0;\n            for (int unit : row) {\n                if (unit == 1) {\n                    waterUnits++;\n                }\n            }\n            if (waterUnits > 0) {\n                totalBucketsNeeded += (int) Math.ceil((double) waterUnits / capacity);\n            }\n        }\n\n        return totalBucketsNeeded;\n    }\n}\n"}
{"task_id": "Java/116", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> arr) {\n        arr.sort((a, b) -> {\n            int countA = Integer.bitCount(Math.abs(a));\n            int countB = Integer.bitCount(Math.abs(b));\n            if (countA == countB) {\n                return Integer.compare(a, b);\n            }\n            return Integer.compare(countA, countB);\n        });\n        return arr;\n    }\n}\n"}
{"task_id": "Java/117", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> select_words(String s, int n) {\n        List<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        \n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int consonantCount = 0;\n            for (char c : word.toCharArray()) {\n                if (isConsonant(c)) {\n                    consonantCount++;\n                }\n            }\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        \n        return result;\n    }\n    \n    private boolean isConsonant(char c) {\n        c = Character.toLowerCase(c);\n        return \"bcdfghjklmnpqrstvwxyz\".indexOf(c) != -1;\n    }\n}\n"}
{"task_id": "Java/118", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String get_closest_vowel(String word) {\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        int n = word.length();\n        for (int i = n - 2; i > 0; i--) {\n            if (vowels.contains(word.charAt(i))) {\n                boolean leftConsonant = !vowels.contains(word.charAt(i - 1));\n                boolean rightConsonant = !vowels.contains(word.charAt(i + 1));\n                if (leftConsonant && rightConsonant) {\n                    return String.valueOf(word.charAt(i));\n                }\n            }\n        }\n        return \"\";\n    }\n}\n"}
{"task_id": "Java/119", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String match_parens(List<String> lst) {\n        int openCount1 = 0, closeCount1 = 0;\n        int openCount2 = 0, closeCount2 = 0;\n\n        // Count open and close parentheses in the first string\n        for (char c : lst.get(0).toCharArray()) {\n            if (c == '(') {\n                openCount1++;\n            } else {\n                closeCount1++;\n            }\n        }\n\n        // Count open and close parentheses in the second string\n        for (char c : lst.get(1).toCharArray()) {\n            if (c == '(') {\n                openCount2++;\n            } else {\n                closeCount2++;\n            }\n        }\n\n        // Check if we can balance the parentheses\n        if (Math.abs(openCount1 - closeCount1) == Math.abs(openCount2 - closeCount2)) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}\n"}
{"task_id": "Java/120", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Sort the array in descending order\n        Collections.sort(arr, Collections.reverseOrder());\n        \n        // Take the first k elements\n        List<Integer> maxK = arr.subList(0, k);\n        \n        // Sort the k elements in ascending order\n        Collections.sort(maxK);\n        \n        return maxK;\n    }\n}\n"}
{"task_id": "Java/121", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/122", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add_elements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) >= 10 && arr.get(i) <= 99) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/123", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> get_odd_collatz(int n) {\n        List<Integer> oddNumbers = new ArrayList<>();\n        while (n != 1) {\n            if (n % 2 != 0) {\n                oddNumbers.add(n);\n            }\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n        }\n        oddNumbers.add(1); // Adding the last number in the sequence which is always 1\n        Collections.sort(oddNumbers);\n        return oddNumbers;\n    }\n}\n"}
{"task_id": "Java/124", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean valid_date(String date) {\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n            return false;\n        }\n\n        int month, day, year;\n        try {\n            month = Integer.parseInt(parts[0]);\n            day = Integer.parseInt(parts[1]);\n            year = Integer.parseInt(parts[2]);\n        } catch (NumberFormatException e) {\n            return false;\n        }\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        if (day < 1) {\n            return false;\n        }\n\n        switch (month) {\n            case 1: case 3: case 5: case 7: case 8: case 10: case 12:\n                if (day > 31) {\n                    return false;\n                }\n                break;\n            case 4: case 6: case 9: case 11:\n                if (day > 30) {\n                    return false;\n                }\n                break;\n            case 2:\n                if (day > 29) {\n                    return false;\n                }\n                break;\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/125", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object split_words(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 != 0) {\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n}\n"}
{"task_id": "Java/126", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_sorted(List<Integer> lst) {\n        if (lst.size() <= 1) return true;\n\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n            if (frequencyMap.get(num) > 2) return false;\n        }\n\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < lst.get(i - 1)) return false;\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/127", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n\n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n\n        if (intersectionStart > intersectionEnd) {\n            return \"NO\";\n        }\n\n        int intersectionLength = intersectionEnd - intersectionStart + 1;\n\n        if (isPrime(intersectionLength)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/128", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int signProduct = 1;\n        int sumMagnitudes = 0;\n\n        for (int num : arr) {\n            if (num > 0) {\n                signProduct *= 1;\n            } else if (num < 0) {\n                signProduct *= -1;\n            } else {\n                signProduct *= 0;\n            }\n            sumMagnitudes += Math.abs(num);\n        }\n\n        return Optional.of(sumMagnitudes * signProduct);\n    }\n}\n"}
{"task_id": "Java/129", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        List<Integer> result = new ArrayList<>();\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> {\n            for (int i = 0; i < a.length; i++) {\n                if (a[i] != b[i]) return a[i] - b[i];\n            }\n            return 0;\n        });\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                pq.offer(new int[]{grid.get(i).get(j), i, j});\n            }\n        }\n\n        while (!pq.isEmpty()) {\n            int[] current = pq.poll();\n            int value = current[0];\n            int x = current[1];\n            int y = current[2];\n            List<Integer> path = new ArrayList<>();\n            path.add(value);\n            boolean[][] visited = new boolean[n][n];\n            visited[x][y] = true;\n            dfs(grid, k, x, y, path, visited, directions, pq);\n            if (path.size() == k) {\n                result = path;\n                break;\n            }\n        }\n\n        return result;\n    }\n\n    private void dfs(List<List<Integer>> grid, int k, int x, int y, List<Integer> path, boolean[][] visited, int[][] directions, PriorityQueue<int[]> pq) {\n        if (path.size() == k) return;\n        for (int[] dir : directions) {\n            int newX = x + dir[0];\n            int newY = y + dir[1];\n            if (newX >= 0 && newX < grid.size() && newY >= 0 && newY < grid.size() && !visited[newX][newY]) {\n                visited[newX][newY] = true;\n                path.add(grid.get(newX).get(newY));\n                dfs(grid, k, newX, newY, path, visited, directions, pq);\n                if (path.size() == k) return;\n                path.remove(path.size() - 1);\n                visited[newX][newY] = false;\n            }\n        }\n    }\n}\n"}
{"task_id": "Java/130", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n        List<Integer> tribonacciSequence = new ArrayList<>();\n        if (n < 0) {\n            return tribonacciSequence; // Return empty list for negative input\n        }\n\n        // Initialize the first two values of the sequence\n        tribonacciSequence.add(1);\n        tribonacciSequence.add(3);\n\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                tribonacciSequence.add(1 + i / 2);\n            } else {\n                int value = tribonacciSequence.get(i - 1) + tribonacciSequence.get(i - 2) + tribonacciSequence.get(i + 1);\n                tribonacciSequence.add(value);\n            }\n        }\n\n        return tribonacciSequence;\n    }\n}\n"}
{"task_id": "Java/131", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digits(int n) {\n        int product = 0;\n        boolean hasOdd = false;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                if (!hasOdd) {\n                    product = 1; // Initialize product if it's the first odd digit\n                    hasOdd = true;\n                }\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return product;\n    }\n}\n"}
{"task_id": "Java/132", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_nested(String string) {\n        Stack<Character> stack = new Stack<>();\n        boolean hasNested = false;\n\n        for (char ch : string.toCharArray()) {\n            if (ch == '[') {\n                stack.push(ch);\n            } else if (ch == ']') {\n                if (!stack.isEmpty() && stack.peek() == '[') {\n                    stack.pop();\n                    if (!stack.isEmpty()) {\n                        hasNested = true;\n                    }\n                } else {\n                    stack.push(ch);\n                }\n            }\n        }\n\n        return hasNested;\n    }\n}\n"}
{"task_id": "Java/133", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_squares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            int ceilingNum = (int) Math.ceil(num);\n            sum += ceilingNum * ceilingNum;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/134", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        if (txt.isEmpty()) {\n            return false;\n        }\n        \n        int lastIndex = txt.length() - 1;\n        char lastChar = txt.charAt(lastIndex);\n        \n        if (Character.isLetter(lastChar)) {\n            if (lastIndex == 0 || txt.charAt(lastIndex - 1) == ' ') {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n}\n"}
{"task_id": "Java/135", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int can_arrange(List<Integer> arr) {\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}\n"}
{"task_id": "Java/136", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        Optional<Integer> largestNegative = Optional.empty();\n        Optional<Integer> smallestPositive = Optional.empty();\n\n        for (Integer num : lst) {\n            if (num < 0) {\n                if (!largestNegative.isPresent() || num > largestNegative.get()) {\n                    largestNegative = Optional.of(num);\n                }\n            } else if (num > 0) {\n                if (!smallestPositive.isPresent() || num < smallestPositive.get()) {\n                    smallestPositive = Optional.of(num);\n                }\n            }\n        }\n\n        List<Optional<Integer>> result = new ArrayList<>();\n        result.add(largestNegative);\n        result.add(smallestPositive);\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/137", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Object> compare_one(Object a, Object b) {\n        // Normalize the input to handle different representations\n        double numA = normalize(a);\n        double numB = normalize(b);\n\n        // Compare the normalized values\n        if (numA > numB) {\n            return Optional.of(a);\n        } else if (numB > numA) {\n            return Optional.of(b);\n        } else {\n            return Optional.empty();\n        }\n    }\n\n    private double normalize(Object obj) {\n        if (obj instanceof Integer) {\n            return (Integer) obj;\n        } else if (obj instanceof Double) {\n            return (Double) obj;\n        } else if (obj instanceof String) {\n            String str = (String) obj;\n            str = str.replace(',', '.'); // Normalize the decimal separator\n            return Double.parseDouble(str);\n        }\n        throw new IllegalArgumentException(\"Unsupported type\");\n    }\n}\n"}
{"task_id": "Java/138", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_equal_to_sum_even(int n) {\n        // A number can be written as the sum of exactly 4 positive even numbers if and only if it is at least 8 and even.\n        return n >= 8 && n % 2 == 0;\n    }\n}\n"}
{"task_id": "Java/139", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public long special_factorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    private long factorial(int num) {\n        long fact = 1;\n        for (int i = 1; i <= num; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n}\n"}
{"task_id": "Java/140", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String fix_spaces(String text) {\n        StringBuilder result = new StringBuilder();\n        int i = 0;\n        while (i < text.length()) {\n            if (text.charAt(i) == ' ') {\n                int start = i;\n                while (i < text.length() && text.charAt(i) == ' ') {\n                    i++;\n                }\n                int end = i;\n                if (end - start > 2) {\n                    result.append('-');\n                } else {\n                    for (int j = start; j < end; j++) {\n                        result.append('_');\n                    }\n                }\n            } else {\n                result.append(text.charAt(i));\n                i++;\n            }\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/141", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String file_name_check(String file_name) {\n        int dotIndex = file_name.indexOf('.');\n        if (dotIndex == -1 || dotIndex == 0 || dotIndex != file_name.lastIndexOf('.')) {\n            return \"No\";\n        }\n\n        String beforeDot = file_name.substring(0, dotIndex);\n        String afterDot = file_name.substring(dotIndex + 1);\n\n        if (!beforeDot.matches(\"[a-zA-Z][a-zA-Z0-9]*\") || beforeDot.replaceAll(\"[0-9]\", \"\").length() < beforeDot.length() - 3) {\n            return \"No\";\n        }\n\n        if (!afterDot.matches(\"txt|exe|dll\")) {\n            return \"No\";\n        }\n\n        return \"Yes\";\n    }\n}\n"}
{"task_id": "Java/142", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_squares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                lst.set(i, lst.get(i) * lst.get(i));\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                lst.set(i, lst.get(i) * lst.get(i) * lst.get(i));\n            }\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/143", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String words_in_sentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n        \n        for (String word : words) {\n            if (isPrime(word.length())) {\n                if (result.length() > 0) {\n                    result.append(\" \");\n                }\n                result.append(word);\n            }\n        }\n        \n        return result.toString();\n    }\n    \n    private boolean isPrime(int n) {\n        if (n <= 1) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/144", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean simplify(String x, String n) {\n        // Parse the fractions\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n        \n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n        \n        // Calculate the product of the fractions\n        int productNumerator = xNumerator * nNumerator;\n        int productDenominator = xDenominator * nDenominator;\n        \n        // Check if the product is a whole number\n        return productNumerator % productDenominator == 0;\n    }\n}\n"}
{"task_id": "Java/145", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> order_by_points(List<Integer> nums) {\n        Collections.sort(nums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int sumA = sumOfDigits(a);\n                int sumB = sumOfDigits(b);\n                return sumA - sumB;\n            }\n        });\n        return nums;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        num = Math.abs(num);\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/146", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10) {\n                int firstDigit = Integer.parseInt(Integer.toString(Math.abs(num)).substring(0, 1));\n                int lastDigit = Math.abs(num) % 10;\n                if (isOdd(firstDigit) && isOdd(lastDigit)) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    private boolean isOdd(int digit) {\n        return digit % 2 != 0;\n    }\n}\n"}
{"task_id": "Java/147", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int get_max_triples(int n) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = (i + 1) * (i + 1) - (i + 1) + 1;\n        }\n\n        int count = 0;\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/148", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> bf(String planet1, String planet2) {\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        List<String> result = new ArrayList<>();\n        \n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        \n        if (index1 == -1 || index2 == -1) {\n            return result; // Return empty list if either planet name is incorrect\n        }\n        \n        int start = Math.min(index1, index2);\n        int end = Math.max(index1, index2);\n        \n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/149", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> sorted_list_sum(List<String> lst) {\n        // Filter out strings with odd lengths\n        List<String> filteredList = new ArrayList<>();\n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                filteredList.add(str);\n            }\n        }\n        \n        // Sort the filtered list first by length, then alphabetically\n        Collections.sort(filteredList, new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                if (s1.length() != s2.length()) {\n                    return s1.length() - s2.length();\n                } else {\n                    return s1.compareTo(s2);\n                }\n            }\n        });\n        \n        return filteredList;\n    }\n}\n"}
{"task_id": "Java/150", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int x_or_y(int n, int x, int y) {\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/151", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int double_the_difference(List<Object> lst) {\n        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                if (num > 0 && num % 2 != 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/152", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            int difference = Math.abs(game.get(i) - guess.get(i));\n            result.add(difference);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/153", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        String strongestExtension = \"\";\n        int maxStrength = Integer.MIN_VALUE;\n        \n        for (String extension : extensions) {\n            int cap = 0;\n            int sm = 0;\n            \n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n                } else if (Character.isLowerCase(c)) {\n                    sm++;\n                }\n            }\n            \n            int strength = cap - sm;\n            \n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n        \n        return class_name + \".\" + strongestExtension;\n    }\n}\n"}
{"task_id": "Java/154", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean cycpattern_check(String a, String b) {\n        if (b.length() > a.length()) {\n            return false;\n        }\n        \n        String doubleA = a + a;\n        return doubleA.contains(b);\n    }\n}\n"}
{"task_id": "Java/155", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> even_odd_count(int num) {\n        num = Math.abs(num); // Handle negative numbers\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num /= 10;\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n}\n"}
{"task_id": "Java/156", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String int_to_mini_roman(int number) {\n        // Define the Roman numeral symbols and their corresponding values\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] symbols = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        \n        StringBuilder roman = new StringBuilder();\n        \n        // Iterate through the values and symbols\n        for (int i = 0; i < values.length; i++) {\n            // Append the symbol while the number is greater than or equal to the value\n            while (number >= values[i]) {\n                roman.append(symbols[i]);\n                number -= values[i];\n            }\n        }\n        \n        // Convert the result to lowercase and return\n        return roman.toString();\n    }\n}\n"}
{"task_id": "Java/157", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean right_angle_triangle(int a, int b, int c) {\n        // Sort the sides to ensure a <= b <= c\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        \n        // Check the Pythagorean theorem\n        return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n    }\n}\n"}
{"task_id": "Java/158", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String find_max(List<String> words) {\n        String maxWord = \"\";\n        int maxUniqueChars = 0;\n\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            int uniqueCount = uniqueChars.size();\n\n            if (uniqueCount > maxUniqueChars || (uniqueCount == maxUniqueChars && word.compareTo(maxWord) < 0)) {\n                maxWord = word;\n                maxUniqueChars = uniqueCount;\n            }\n        }\n\n        return maxWord;\n    }\n}\n"}
{"task_id": "Java/159", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> eat(int number, int need, int remaining) {\n        int totalEaten = number + Math.min(need, remaining);\n        int remainingCarrots = Math.max(0, remaining - need);\n        return Arrays.asList(totalEaten, remainingCarrots);\n    }\n}\n"}
{"task_id": "Java/160", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        // Initialize the result with the first operand\n        int result = operand.get(0);\n        \n        // Iterate through the operators and operands to build the expression\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int nextOperand = operand.get(i + 1);\n            \n            // Perform the operation based on the operator\n            switch (op) {\n                case \"+\":\n                    result += nextOperand;\n                    break;\n                case \"-\":\n                    result -= nextOperand;\n                    break;\n                case \"*\":\n                    result *= nextOperand;\n                    break;\n                case \"/\":\n                    result /= nextOperand;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, nextOperand);\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid operator: \" + op);\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/161", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(String s) {\n        StringBuilder result = new StringBuilder();\n        boolean hasLetter = false;\n        \n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                hasLetter = true;\n                if (Character.isUpperCase(c)) {\n                    result.append(Character.toLowerCase(c));\n                } else {\n                    result.append(Character.toUpperCase(c));\n                }\n            } else {\n                result.append(c);\n            }\n        }\n        \n        if (!hasLetter) {\n            return result.reverse().toString();\n        }\n        \n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/162", "generation": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] messageDigest = md.digest(text.getBytes());\n        BigInteger no = new BigInteger(1, messageDigest);\n        String hashtext = no.toString(16);\n        \n        while (hashtext.length() < 32) {\n            hashtext = \"0\" + hashtext;\n        }\n        \n        return Optional.of(hashtext);\n    }\n}\n"}
{"task_id": "Java/163", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> generate_integers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        int start = Math.min(a, b);\n        int end = Math.max(a, b);\n        \n        for (int i = start; i <= end; i++) {\n            if (i % 2 == 0 && i < 10) {\n                result.add(i);\n            }\n        }\n        \n        Collections.sort(result);\n        return result;\n    }\n}\n"}
{"task_id": "Java/0", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/1", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        StringBuilder currentGroup = new StringBuilder();\n        int balance = 0;\n\n        for (char ch : paren_string.toCharArray()) {\n            if (ch == ' ') {\n                continue; // Ignore spaces\n            }\n            currentGroup.append(ch);\n            if (ch == '(') {\n                balance++;\n            } else if (ch == ')') {\n                balance--;\n            }\n            if (balance == 0) {\n                result.add(currentGroup.toString());\n                currentGroup.setLength(0); // Reset for the next group\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/2", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double truncate_number(double number) {\n        return number - Math.floor(number);\n    }\n}\n"}
{"task_id": "Java/3", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/4", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double mean_absolute_deviation(List<Double> numbers) {\n        if (numbers.isEmpty()) {\n            return 0.0;\n        }\n\n        double mean = 0.0;\n        for (double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n\n        double mad = 0.0;\n        for (double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n\n        return mad;\n    }\n}\n"}
{"task_id": "Java/5", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/6", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> parse_nested_parens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        String[] groups = paren_string.split(\" \");\n        \n        for (String group : groups) {\n            int maxDepth = 0;\n            int currentDepth = 0;\n            \n            for (char ch : group.toCharArray()) {\n                if (ch == '(') {\n                    currentDepth++;\n                    maxDepth = Math.max(maxDepth, currentDepth);\n                } else if (ch == ')') {\n                    currentDepth--;\n                }\n            }\n            \n            result.add(maxDepth);\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/7", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> filteredList = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredList.add(str);\n            }\n        }\n        return filteredList;\n    }\n}\n"}
{"task_id": "Java/8", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sum_product(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        \n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        \n        if (numbers.isEmpty()) {\n            sum = 0;\n            product = 1;\n        }\n        \n        return Arrays.asList(sum, product);\n    }\n}\n"}
{"task_id": "Java/9", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        if (numbers.isEmpty()) {\n            return result;\n        }\n        \n        int currentMax = numbers.get(0);\n        result.add(currentMax);\n        \n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > currentMax) {\n                currentMax = numbers.get(i);\n            }\n            result.add(currentMax);\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/10", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    public String make_palindrome(String string) {\n        if (string.isEmpty()) {\n            return \"\";\n        }\n\n        int n = string.length();\n        for (int i = 0; i < n; i++) {\n            if (isPalindrome(string.substring(i))) {\n                String prefix = new StringBuilder(string.substring(0, i)).reverse().toString();\n                return string + prefix;\n            }\n        }\n        return string + new StringBuilder(string).reverse().toString();\n    }\n}\n"}
{"task_id": "Java/11", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String string_xor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        int length = Math.max(a.length(), b.length());\n        \n        // Pad the shorter string with leading zeros\n        while (a.length() < length) {\n            a = \"0\" + a;\n        }\n        while (b.length() < length) {\n            b = \"0\" + b;\n        }\n        \n        for (int i = 0; i < length; i++) {\n            char charA = a.charAt(i);\n            char charB = b.charAt(i);\n            if (charA != charB) {\n                result.append(\"1\");\n            } else {\n                result.append(\"0\");\n            }\n        }\n        \n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/12", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        String longestString = strings.get(0);\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n        \n        return Optional.of(longestString);\n    }\n}\n"}
{"task_id": "Java/13", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int greatest_common_divisor(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}\n"}
{"task_id": "Java/14", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> all_prefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n}\n"}
{"task_id": "Java/15", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String string_sequence(int n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            if (i < n) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/16", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int count_distinct_characters(String string) {\n        Set<Character> distinctChars = new HashSet<>();\n        for (char c : string.toLowerCase().toCharArray()) {\n            distinctChars.add(c);\n        }\n        return distinctChars.size();\n    }\n}\n"}
{"task_id": "Java/17", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> parse_music(String string) {\n        List<Integer> beats = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    beats.add(4);\n                    break;\n                case \"o|\":\n                    beats.add(2);\n                    break;\n                case \".|\":\n                    beats.add(1);\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid note: \" + note);\n            }\n        }\n        return beats;\n    }\n}\n"}
{"task_id": "Java/18", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int how_many_times(String string, String substring) {\n        int count = 0;\n        int subLength = substring.length();\n        for (int i = 0; i <= string.length() - subLength; i++) {\n            if (string.substring(i, i + subLength).equals(substring)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/19", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String sort_numbers(String numbers) {\n        // Define a map for the string representation of numbers to their integer values\n        Map<String, Integer> numMap = new HashMap<>();\n        numMap.put(\"zero\", 0);\n        numMap.put(\"one\", 1);\n        numMap.put(\"two\", 2);\n        numMap.put(\"three\", 3);\n        numMap.put(\"four\", 4);\n        numMap.put(\"five\", 5);\n        numMap.put(\"six\", 6);\n        numMap.put(\"seven\", 7);\n        numMap.put(\"eight\", 8);\n        numMap.put(\"nine\", 9);\n\n        // Split the input string into words\n        String[] numWords = numbers.split(\" \");\n\n        // Sort the words based on their integer values using the map\n        Arrays.sort(numWords, (a, b) -> numMap.get(a) - numMap.get(b));\n\n        // Join the sorted words back into a single string\n        return String.join(\" \", numWords);\n    }\n}\n"}
{"task_id": "Java/20", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        List<Double> closest_pair = new ArrayList<>();\n        closest_pair.add(numbers.get(0));\n        closest_pair.add(numbers.get(1));\n        double min_distance = Math.abs(numbers.get(1) - numbers.get(0));\n        \n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double current_distance = Math.abs(numbers.get(i) - numbers.get(j));\n                if (current_distance < min_distance) {\n                    closest_pair.clear();\n                    closest_pair.add(numbers.get(i));\n                    closest_pair.add(numbers.get(j));\n                    min_distance = current_distance;\n                }\n            }\n        }\n        \n        Collections.sort(closest_pair);\n        return closest_pair;\n    }\n}\n"}
{"task_id": "Java/21", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        if (numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements.\");\n        }\n\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n\n        List<Double> rescaledList = new ArrayList<>();\n        for (double num : numbers) {\n            rescaledList.add((num - min) / (max - min));\n        }\n\n        return rescaledList;\n    }\n}\n"}
{"task_id": "Java/22", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> filter_integers(List<Object> values) {\n        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n}\n"}
{"task_id": "Java/23", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int strlen(String string) {\n        return string.length();\n    }\n}\n"}
{"task_id": "Java/24", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largest_divisor(int n) {\n        for (int i = n / 2; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1; // In case n is 1, the largest divisor is 1.\n    }\n}\n"}
{"task_id": "Java/25", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors;\n    }\n}\n"}
{"task_id": "Java/26", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        for (Integer num : numbers) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        return numbers.stream()\n                      .filter(num -> frequencyMap.get(num) == 1)\n                      .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/27", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String flip_case(String string) {\n        StringBuilder flippedString = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                flippedString.append(Character.toUpperCase(c));\n            } else if (Character.isUpperCase(c)) {\n                flippedString.append(Character.toLowerCase(c));\n            } else {\n                flippedString.append(c);\n            }\n        }\n        return flippedString.toString();\n    }\n}\n"}
{"task_id": "Java/28", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String concatenate(List<String> strings) {\n        StringBuilder result = new StringBuilder();\n        for (String str : strings) {\n            result.append(str);\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/29", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/30", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> get_positive(List<Integer> l) {\n        return l.stream()\n                .filter(n -> n > 0)\n                .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/31", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_prime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/32", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double find_zero(List<Double> xs) {\n        // Ensure the list has an even number of coefficients\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"The list must have an even number of coefficients.\");\n        }\n        \n        // Find the interval where the polynomial changes sign\n        double a = -1.0;\n        double b = 1.0;\n        while (poly(xs, a) * poly(xs, b) > 0) {\n            a *= 2;\n            b *= 2;\n        }\n        \n        // Use binary search to find the zero point\n        double tolerance = 1e-10;\n        while (b - a > tolerance) {\n            double mid = (a + b) / 2;\n            if (poly(xs, mid) * poly(xs, a) > 0) {\n                a = mid;\n            } else {\n                b = mid;\n            }\n        }\n        \n        return (a + b) / 2;\n    }\n}\n"}
{"task_id": "Java/33", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_third(List<Integer> l) {\n        List<Integer> result = new ArrayList<>(l);\n        List<Integer> toSort = new ArrayList<>();\n        \n        // Collect elements at indices divisible by three\n        for (int i = 2; i < l.size(); i += 3) {\n            toSort.add(l.get(i));\n        }\n        \n        // Sort the collected elements\n        Collections.sort(toSort);\n        \n        // Replace the elements in the result list with sorted elements\n        int index = 0;\n        for (int i = 2; i < l.size(); i += 3) {\n            result.set(i, toSort.get(index++));\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/34", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> uniqueSet = new HashSet<>(l);\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n        Collections.sort(uniqueList);\n        return uniqueList;\n    }\n}\n"}
{"task_id": "Java/35", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int max_element(List<Integer> l) {\n        int max = l.get(0);\n        for (int num : l) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n}\n"}
{"task_id": "Java/36", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fizz_buzz(int n) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String numStr = Integer.toString(i);\n                for (char c : numStr.toCharArray()) {\n                    if (c == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/37", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_even(List<Integer> l) {\n        List<Integer> result = new ArrayList<>(l);\n        List<Integer> evenIndexValues = new ArrayList<>();\n        \n        // Collect values at even indices\n        for (int i = 0; i < l.size(); i += 2) {\n            evenIndexValues.add(l.get(i));\n        }\n        \n        // Sort the collected values\n        Collections.sort(evenIndexValues);\n        \n        // Replace the values at even indices in the result list with the sorted values\n        int evenIndex = 0;\n        for (int i = 0; i < l.size(); i += 2) {\n            result.set(i, evenIndexValues.get(evenIndex++));\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/38", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse the cycling in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n"}
{"task_id": "Java/39", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int prime_fib(int n) {\n        int count = 0;\n        int a = 0, b = 1;\n        while (true) {\n            int temp = a + b;\n            a = b;\n            b = temp;\n            if (isPrime(b)) {\n                count++;\n                if (count == n) {\n                    return b;\n                }\n            }\n        }\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        if (num == 2) return true;\n        if (num % 2 == 0) return false;\n        for (int i = 3; i <= Math.sqrt(num); i += 2) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/40", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        if (l.size() < 3) {\n            return false;\n        }\n        \n        Collections.sort(l);\n        \n        for (int i = 0; i < l.size() - 2; i++) {\n            int left = i + 1;\n            int right = l.size() - 1;\n            \n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        \n        return false;\n    }\n}\n"}
{"task_id": "Java/41", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int car_race_collision(int n) {\n        // Each left-to-right car will collide with each right-to-left car exactly once.\n        // Therefore, the number of collisions is simply the product of the number of cars in each direction.\n        return n * n;\n    }\n}\n"}
{"task_id": "Java/42", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> incr_list(List<Integer> l) {\n        return l.stream()\n                .map(i -> i + 1)\n                .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/43", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        Set<Integer> seen = new HashSet<>();\n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/44", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String change_base(int x, int base) {\n        if (x == 0) {\n            return \"0\";\n        }\n        \n        StringBuilder result = new StringBuilder();\n        while (x > 0) {\n            result.append(x % base);\n            x /= base;\n        }\n        \n        return result.reverse().toString();\n    }\n}\n"}
{"task_id": "Java/45", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangle_area(double a, double h) {\n        return 0.5 * a * h;\n    }\n}\n"}
{"task_id": "Java/46", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib4(int n) {\n        if (n == 0 || n == 1 || n == 3) return 0;\n        if (n == 2) return 2;\n\n        int[] fib4Array = new int[n + 1];\n        fib4Array[0] = 0;\n        fib4Array[1] = 0;\n        fib4Array[2] = 2;\n        fib4Array[3] = 0;\n\n        for (int i = 4; i <= n; i++) {\n            fib4Array[i] = fib4Array[i - 1] + fib4Array[i - 2] + fib4Array[i - 3] + fib4Array[i - 4];\n        }\n\n        return fib4Array[n];\n    }\n}\n"}
{"task_id": "Java/47", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            return (l.get(size / 2 - 1) + l.get(size / 2)) / 2.0;\n        } else {\n            return l.get(size / 2);\n        }\n    }\n}\n"}
{"task_id": "Java/48", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_palindrome(String text) {\n        int left = 0;\n        int right = text.length() - 1;\n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/49", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int modp(int n, int p) {\n        if (n == 0) {\n            return 1;\n        }\n        long result = 1;\n        long base = 2;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                result = (result * base) % p;\n            }\n            base = (base * base) % p;\n            n /= 2;\n        }\n        return (int) result;\n    }\n}\n"}
{"task_id": "Java/50", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public String decode_shift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26)));\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/51", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String remove_vowels(String text) {\n        if (text == null) {\n            return null;\n        }\n        StringBuilder result = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (!isVowel(c)) {\n                result.append(c);\n            }\n        }\n        return result.toString();\n    }\n\n    private boolean isVowel(char c) {\n        c = Character.toLowerCase(c);\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n}\n"}
{"task_id": "Java/52", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean below_threshold(List<Integer> l, int t) {\n        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/53", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add(int x, int y) {\n        return x + y;\n    }\n}\n"}
{"task_id": "Java/54", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean same_chars(String s0, String s1) {\n        Map<Character, Integer> charCount0 = new HashMap<>();\n        Map<Character, Integer> charCount1 = new HashMap<>();\n\n        for (char c : s0.toCharArray()) {\n            charCount0.put(c, charCount0.getOrDefault(c, 0) + 1);\n        }\n\n        for (char c : s1.toCharArray()) {\n            charCount1.put(c, charCount1.getOrDefault(c, 0) + 1);\n        }\n\n        return charCount0.equals(charCount1);\n    }\n}\n"}
{"task_id": "Java/55", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0, b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a + b;\n            a = b;\n            b = temp;\n        }\n        return b;\n    }\n}\n"}
{"task_id": "Java/56", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correct_bracketing(String brackets) {\n        int count = 0;\n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '<') {\n                count++;\n            } else if (bracket == '>') {\n                count--;\n                if (count < 0) {\n                    return false;\n                }\n            }\n        }\n        return count == 0;\n    }\n}\n"}
{"task_id": "Java/57", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean monotonic(List<Integer> l) {\n        boolean increasing = true;\n        boolean decreasing = true;\n        \n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n        }\n        \n        return increasing || decreasing;\n    }\n}\n"}
{"task_id": "Java/58", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        set1.retainAll(set2);\n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result);\n        return result;\n    }\n}\n"}
{"task_id": "Java/59", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largest_prime_factor(int n) {\n        int largestPrime = -1;\n        \n        // Divide by 2 to remove all factors of 2\n        while (n % 2 == 0) {\n            largestPrime = 2;\n            n /= 2;\n        }\n        \n        // Check for odd factors from 3 to sqrt(n)\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                largestPrime = i;\n                n /= i;\n            }\n        }\n        \n        // If n is still greater than 2, then n itself is a prime factor\n        if (n > 2) {\n            largestPrime = n;\n        }\n        \n        return largestPrime;\n    }\n}\n"}
{"task_id": "Java/60", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_to_n(int n) {\n        return n * (n + 1) / 2;\n    }\n}\n"}
{"task_id": "Java/61", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correct_bracketing(String brackets) {\n        int count = 0;\n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '(') {\n                count++;\n            } else if (bracket == ')') {\n                count--;\n                if (count < 0) {\n                    return false;\n                }\n            }\n        }\n        return count == 0;\n    }\n}\n"}
{"task_id": "Java/62", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> derivativeCoefficients = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            derivativeCoefficients.add(xs.get(i) * i);\n        }\n        return derivativeCoefficients;\n    }\n}\n"}
{"task_id": "Java/63", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fibfib(int n) {\n        if (n == 0 || n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        \n        int[] fibfibArray = new int[n + 1];\n        fibfibArray[0] = 0;\n        fibfibArray[1] = 0;\n        fibfibArray[2] = 1;\n        \n        for (int i = 3; i <= n; i++) {\n            fibfibArray[i] = fibfibArray[i - 1] + fibfibArray[i - 2] + fibfibArray[i - 3];\n        }\n        \n        return fibfibArray[n];\n    }\n}\n"}
{"task_id": "Java/64", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int vowels_count(String s) {\n        s = s.toLowerCase();\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        if (s.endsWith(\"y\")) {\n            count++;\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/65", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String circular_shift(int x, int shift) {\n        String numStr = Integer.toString(x);\n        int length = numStr.length();\n        \n        if (shift >= length) {\n            return new StringBuilder(numStr).reverse().toString();\n        }\n        \n        String shiftedStr = numStr.substring(length - shift) + numStr.substring(0, length - shift);\n        return shiftedStr;\n    }\n}\n"}
{"task_id": "Java/66", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digitSum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/67", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruit_distribution(String s, int n) {\n        // Split the string by spaces\n        String[] parts = s.split(\" \");\n        \n        // Extract the number of apples and oranges\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[2]);\n        \n        // Calculate the number of mangoes\n        int mangoes = n - apples - oranges;\n        \n        return mangoes;\n    }\n}\n"}
{"task_id": "Java/68", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        int smallestEven = Integer.MAX_VALUE;\n        int smallestIndex = -1;\n\n        for (int i = 0; i < arr.size(); i++) {\n            int value = arr.get(i);\n            if (value % 2 == 0 && value < smallestEven) {\n                smallestEven = value;\n                smallestIndex = i;\n            }\n        }\n\n        if (smallestIndex != -1) {\n            result.add(smallestEven);\n            result.add(smallestIndex);\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/69", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int search(List<Integer> lst) {\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        // Count the frequency of each integer in the list\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        int maxValidNumber = -1;\n        \n        // Iterate through the frequency map to find the greatest valid number\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int number = entry.getKey();\n            int frequency = entry.getValue();\n            \n            if (frequency >= number && number > maxValidNumber) {\n                maxValidNumber = number;\n            }\n        }\n        \n        return maxValidNumber;\n    }\n}\n"}
{"task_id": "Java/70", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        List<Integer> sortedList = new ArrayList<>(lst);\n        Collections.sort(sortedList);\n        \n        int i = 0;\n        int j = sortedList.size() - 1;\n        \n        while (i <= j) {\n            if (i <= j) {\n                result.add(sortedList.get(i));\n                i++;\n            }\n            if (i <= j) {\n                result.add(sortedList.get(j));\n                j--;\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/71", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangle_area(double a, double b, double c) {\n        // Check if the sides can form a valid triangle\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        \n        // Calculate the semi-perimeter\n        double s = (a + b + c) / 2;\n        \n        // Calculate the area using Heron's formula\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        \n        // Round the area to 2 decimal points\n        return Math.round(area * 100.0) / 100.0;\n    }\n}\n"}
{"task_id": "Java/72", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean will_it_fly(List<Integer> q, int w) {\n        // Check if the list is palindromic\n        boolean isPalindromic = true;\n        int n = q.size();\n        for (int i = 0; i < n / 2; i++) {\n            if (!q.get(i).equals(q.get(n - i - 1))) {\n                isPalindromic = false;\n                break;\n            }\n        }\n\n        // Calculate the sum of the elements\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n\n        // Check if the sum is less than or equal to the maximum possible weight\n        return isPalindromic && sum <= w;\n    }\n}\n"}
{"task_id": "Java/73", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int smallest_change(List<Integer> arr) {\n        int n = arr.size();\n        int changes = 0;\n        \n        for (int i = 0; i < n / 2; i++) {\n            if (!arr.get(i).equals(arr.get(n - i - 1))) {\n                changes++;\n            }\n        }\n        \n        return changes;\n    }\n}\n"}
{"task_id": "Java/74", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        int count1 = lst1.stream().mapToInt(String::length).sum();\n        int count2 = lst2.stream().mapToInt(String::length).sum();\n        \n        if (count1 <= count2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n"}
{"task_id": "Java/75", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_multiply_prime(int a) {\n        // Helper function to check if a number is prime\n        boolean[] isPrime = new boolean[100];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = isPrime[1] = false; // 0 and 1 are not prime numbers\n\n        for (int i = 2; i * i < 100; i++) {\n            if (isPrime[i]) {\n                for (int j = i * i; j < 100; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n\n        // Check if the number can be expressed as a product of three primes\n        for (int i = 2; i < 100; i++) {\n            if (isPrime[i]) {\n                for (int j = i; j < 100; j++) {\n                    if (isPrime[j]) {\n                        int k = a / (i * j);\n                        if (k < 100 && isPrime[k] && i * j * k == a) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/76", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_simple_power(int x, int n) {\n        if (n <= 1) {\n            return x == 1;\n        }\n        int power = 1;\n        while (power < x) {\n            power *= n;\n        }\n        return power == x;\n    }\n}\n"}
{"task_id": "Java/77", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean iscube(int a) {\n        if (a < 0) {\n            a = -a;\n        }\n        int cubeRoot = (int) Math.cbrt(a);\n        return cubeRoot * cubeRoot * cubeRoot == a;\n    }\n}\n"}
{"task_id": "Java/78", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int hex_key(String num) {\n        // Define the prime hexadecimal digits\n        Set<Character> primeHexDigits = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        // Initialize the count of prime digits\n        int count = 0;\n        \n        // Iterate through each character in the input string\n        for (char c : num.toCharArray()) {\n            // Check if the character is a prime hexadecimal digit\n            if (primeHexDigits.contains(c)) {\n                count++;\n            }\n        }\n        \n        // Return the count of prime hexadecimal digits\n        return count;\n    }\n}\n"}
{"task_id": "Java/79", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String decimal_to_binary(int decimal) {\n        String binary = Integer.toBinaryString(decimal);\n        return \"db\" + binary + \"db\";\n    }\n}\n"}
{"task_id": "Java/80", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_happy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/81", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (double gpa : grades) {\n            if (gpa == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}\n"}
{"task_id": "Java/82", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean prime_length(String string) {\n        int length = string.length();\n        if (length < 2) return false;\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) return false;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/83", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int starts_one_ends(int n) {\n        // There are 10 possible digits for each position (0-9)\n        // For n-digit numbers, there are 10^(n-1) possible numbers\n        // We need to count numbers that start or end with 1\n        \n        // Numbers starting with 1: 1 followed by (n-1) digits\n        int startWithOne = (int) Math.pow(10, n - 1);\n        \n        // Numbers ending with 1: 1 preceded by (n-1) digits\n        int endWithOne = (int) Math.pow(10, n - 1);\n        \n        // Numbers starting and ending with 1: 1 followed by (n-2) digits and ending with 1\n        int startAndEndWithOne = (n > 1) ? (int) Math.pow(10, n - 2) : 0;\n        \n        // Use inclusion-exclusion principle to avoid double counting\n        return startWithOne + endWithOne - startAndEndWithOne;\n    }\n}\n"}
{"task_id": "Java/84", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(int N) {\n        int sumOfDigits = 0;\n        while (N > 0) {\n            sumOfDigits += N % 10;\n            N /= 10;\n        }\n        return Integer.toBinaryString(sumOfDigits);\n    }\n}\n"}
{"task_id": "Java/85", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/86", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String anti_shuffle(String s) {\n        String[] words = s.split(\" \");\n        StringBuilder result = new StringBuilder();\n        \n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            result.append(new String(chars)).append(\" \");\n        }\n        \n        return result.toString().trim();\n    }\n}\n"}
{"task_id": "Java/87", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    result.add(Arrays.asList(i, j));\n                }\n            }\n        }\n        \n        // Sort by rows in ascending order\n        result.sort((a, b) -> a.get(0) - b.get(0));\n        \n        // Sort coordinates of the same row by columns in descending order\n        for (int i = 0; i < result.size() - 1; i++) {\n            if (result.get(i).get(0).equals(result.get(i + 1).get(0))) {\n                int j = i;\n                while (j < result.size() - 1 && result.get(j).get(0).equals(result.get(j + 1).get(0))) {\n                    j++;\n                }\n                result.subList(i, j + 1).sort((a, b) -> b.get(1) - a.get(1));\n                i = j;\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/88", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> array) {\n        if (array.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        int first = array.get(0);\n        int last = array.get(array.size() - 1);\n        boolean isSumEven = (first + last) % 2 == 0;\n\n        List<Integer> sortedArray = new ArrayList<>(array);\n        if (isSumEven) {\n            sortedArray.sort(Collections.reverseOrder());\n        } else {\n            Collections.sort(sortedArray);\n        }\n\n        return sortedArray;\n    }\n}\n"}
{"task_id": "Java/89", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encrypt(String s) {\n        StringBuilder encrypted = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            int shift = (c - 'a' + 2 * 2) % 26;\n            encrypted.append((char) ('a' + shift));\n        }\n        return encrypted.toString();\n    }\n}\n"}
{"task_id": "Java/90", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\n        int smallest = Integer.MAX_VALUE;\n        int secondSmallest = Integer.MAX_VALUE;\n        boolean foundSecondSmallest = false;\n\n        for (int num : lst) {\n            if (num < smallest) {\n                secondSmallest = smallest;\n                smallest = num;\n            } else if (num > smallest && num < secondSmallest) {\n                secondSmallest = num;\n                foundSecondSmallest = true;\n            }\n        }\n\n        return foundSecondSmallest ? Optional.of(secondSmallest) : Optional.empty();\n    }\n}\n"}
{"task_id": "Java/91", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int is_bored(String S) {\n        String[] sentences = S.split(\"[.!?]\");\n        int boredomCount = 0;\n        \n        for (String sentence : sentences) {\n            sentence = sentence.trim();\n            if (sentence.startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n        \n        return boredomCount;\n    }\n}\n"}
{"task_id": "Java/92", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean any_int(Object x, Object y, Object z) {\n        if (!(x instanceof Integer) || !(y instanceof Integer) || !(z instanceof Integer)) {\n            return false;\n        }\n        \n        int a = (Integer) x;\n        int b = (Integer) y;\n        int c = (Integer) z;\n        \n        return (a == b + c) || (b == a + c) || (c == a + b);\n    }\n}\n"}
{"task_id": "Java/93", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encode(String message) {\n        StringBuilder encodedMessage = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (\"aeiouAEIOU\".indexOf(c) != -1) {\n                    char newChar = (char) (c + 2);\n                    if ((Character.isLowerCase(c) && newChar > 'z') || (Character.isUpperCase(c) && newChar > 'Z')) {\n                        newChar -= 26;\n                    }\n                    encodedMessage.append(newChar);\n                } else {\n                    encodedMessage.append(Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c));\n                }\n            } else {\n                encodedMessage.append(c);\n            }\n        }\n        return encodedMessage.toString();\n    }\n}\n"}
{"task_id": "Java/94", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int skjkasdkd(List<Integer> lst) {\n        int largestPrime = -1;\n        \n        // Helper function to check if a number is prime\n        boolean isPrime(int num) {\n            if (num <= 1) return false;\n            for (int i = 2; i <= Math.sqrt(num); i++) {\n                if (num % i == 0) return false;\n            }\n            return true;\n        }\n        \n        // Find the largest prime in the list\n        for (int num : lst) {\n            if (isPrime(num) && num > largestPrime) {\n                largestPrime = num;\n            }\n        }\n        \n        // If no prime found, return 0\n        if (largestPrime == -1) return 0;\n        \n        // Calculate the sum of the digits of the largest prime\n        int sumOfDigits = 0;\n        while (largestPrime > 0) {\n            sumOfDigits += largestPrime % 10;\n            largestPrime /= 10;\n        }\n        \n        return sumOfDigits;\n    }\n}\n"}
{"task_id": "Java/95", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        \n        boolean allLower = true;\n        boolean allUpper = true;\n        \n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            \n            String strKey = (String) key;\n            if (!strKey.equals(strKey.toLowerCase())) {\n                allLower = false;\n            }\n            if (!strKey.equals(strKey.toUpperCase())) {\n                allUpper = false;\n            }\n            \n            if (!allLower && !allUpper) {\n                return false;\n            }\n        }\n        \n        return allLower || allUpper;\n    }\n}\n"}
{"task_id": "Java/96", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<>();\n        if (n <= 2) {\n            return primes;\n        }\n        \n        boolean[] isPrime = new boolean[n];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = isPrime[1] = false; // 0 and 1 are not prime numbers\n        \n        for (int i = 2; i < n; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n                for (int j = 2 * i; j < n; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n        \n        return primes;\n    }\n}\n"}
{"task_id": "Java/97", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int multiply(int a, int b) {\n        int unitDigitA = Math.abs(a) % 10;\n        int unitDigitB = Math.abs(b) % 10;\n        return unitDigitA * unitDigitB;\n    }\n}\n"}
{"task_id": "Java/98", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int count_upper(String s) {\n        int count = 0;\n        Set<Character> vowels = new HashSet<>(Arrays.asList('A', 'E', 'I', 'O', 'U'));\n        \n        for (int i = 0; i < s.length(); i += 2) {\n            if (vowels.contains(s.charAt(i))) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/99", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int closest_integer(String value) {\n        double number = Double.parseDouble(value);\n        int roundedNumber = (int) Math.round(number);\n        \n        // Check if the number is exactly halfway between two integers\n        if (Math.abs(number - roundedNumber) == 0.5) {\n            if (number > 0) {\n                return roundedNumber + 1;\n            } else {\n                return roundedNumber - 1;\n            }\n        }\n        \n        return roundedNumber;\n    }\n}\n"}
{"task_id": "Java/100", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        int currentLevel = n;\n        \n        for (int i = 0; i < n; i++) {\n            pile.add(currentLevel);\n            if (currentLevel % 2 == 0) {\n                currentLevel += 2; // Next even number\n            } else {\n                currentLevel += 2; // Next odd number\n            }\n        }\n        \n        return pile;\n    }\n}\n"}
{"task_id": "Java/101", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> words_string(String s) {\n        // Split the string by both commas and spaces\n        String[] words = s.split(\"[,\\\\s]+\");\n        return Arrays.asList(words);\n    }\n}\n"}
{"task_id": "Java/102", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int choose_num(int x, int y) {\n        // Ensure x is less than or equal to y\n        if (x > y) {\n            return -1;\n        }\n        \n        // Adjust x to be the smallest even number greater than or equal to x\n        if (x % 2 != 0) {\n            x += 1;\n        }\n        \n        // Adjust y to be the largest even number less than or equal to y\n        if (y % 2 != 0) {\n            y -= 1;\n        }\n        \n        // If x is greater than y after adjustments, return -1\n        if (x > y) {\n            return -1;\n        }\n        \n        // Return the largest even number in the range [x, y]\n        return y;\n    }\n}\n"}
{"task_id": "Java/103", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object rounded_avg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        \n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        \n        int count = m - n + 1;\n        int average = (int) Math.round((double) sum / count);\n        return Integer.toBinaryString(average);\n    }\n}\n"}
{"task_id": "Java/104", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> unique_digits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int num : x) {\n            if (hasOnlyOddDigits(num)) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        return result;\n    }\n    \n    private boolean hasOnlyOddDigits(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return false;\n            }\n            num /= 10;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/105", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> by_length(List<Integer> arr) {\n        // Filter and sort the valid numbers between 1 and 9\n        List<Integer> validNumbers = new ArrayList<>();\n        for (int num : arr) {\n            if (num >= 1 && num <= 9) {\n                validNumbers.add(num);\n            }\n        }\n        Collections.sort(validNumbers);\n\n        // Reverse the sorted list\n        Collections.reverse(validNumbers);\n\n        // Map the numbers to their corresponding names\n        List<String> result = new ArrayList<>();\n        for (int num : validNumbers) {\n            switch (num) {\n                case 1:\n                    result.add(\"One\");\n                    break;\n                case 2:\n                    result.add(\"Two\");\n                    break;\n                case 3:\n                    result.add(\"Three\");\n                    break;\n                case 4:\n                    result.add(\"Four\");\n                    break;\n                case 5:\n                    result.add(\"Five\");\n                    break;\n                case 6:\n                    result.add(\"Six\");\n                    break;\n                case 7:\n                    result.add(\"Seven\");\n                    break;\n                case 8:\n                    result.add(\"Eight\");\n                    break;\n                case 9:\n                    result.add(\"Nine\");\n                    break;\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/106", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sum(i));\n            }\n        }\n        return result;\n    }\n\n    private int factorial(int num) {\n        int fact = 1;\n        for (int i = 1; i <= num; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n\n    private int sum(int num) {\n        int sum = 0;\n        for (int i = 1; i <= num; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/107", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> even_odd_palindrome(int n) {\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n    \n    private boolean isPalindrome(int num) {\n        String str = Integer.toString(num);\n        int len = str.length();\n        for (int i = 0; i < len / 2; i++) {\n            if (str.charAt(i) != str.charAt(len - i - 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/108", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int count_nums(List<Integer> arr) {\n        int count = 0;\n        for (int num : arr) {\n            int sum = 0;\n            int absNum = Math.abs(num);\n            while (absNum > 0) {\n                sum += absNum % 10;\n                absNum /= 10;\n            }\n            if (num < 0) {\n                sum = -sum;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/109", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean move_one_ball(List<Integer> arr) {\n        if (arr.isEmpty()) return true;\n\n        int n = arr.size();\n        int shifts = 0;\n\n        // Find the number of shifts needed to make the array sorted\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i) > arr.get((i + 1) % n)) {\n                shifts++;\n            }\n        }\n\n        // If more than one shift is needed, it's not possible to sort the array\n        return shifts <= 1;\n    }\n}\n"}
{"task_id": "Java/110", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Count the number of odd elements in lst1\n        int oddCount = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCount++;\n            }\n        }\n        \n        // Count the number of even elements in lst2\n        int evenCount = 0;\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCount++;\n            }\n        }\n        \n        // If the number of odd elements in lst1 is less than or equal to the number of even elements in lst2, return \"YES\"\n        if (oddCount <= evenCount) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}\n"}
{"task_id": "Java/111", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> letterCount = new HashMap<>();\n        if (test.isEmpty()) {\n            return letterCount;\n        }\n\n        String[] letters = test.split(\" \");\n        for (String letter : letters) {\n            letterCount.put(letter, letterCount.getOrDefault(letter, 0) + 1);\n        }\n\n        int maxCount = Collections.max(letterCount.values());\n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : letterCount.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/112", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Object> reverse_delete(String s, String c) {\n        StringBuilder result = new StringBuilder();\n        Set<Character> charsToDelete = new HashSet<>();\n        \n        for (char ch : c.toCharArray()) {\n            charsToDelete.add(ch);\n        }\n        \n        for (char ch : s.toCharArray()) {\n            if (!charsToDelete.contains(ch)) {\n                result.append(ch);\n            }\n        }\n        \n        String resultStr = result.toString();\n        boolean isPalindrome = isPalindrome(resultStr);\n        \n        List<Object> resultList = new ArrayList<>();\n        resultList.add(resultStr);\n        resultList.add(isPalindrome);\n        \n        return resultList;\n    }\n    \n    private boolean isPalindrome(String str) {\n        int left = 0;\n        int right = str.length() - 1;\n        \n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/113", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int oddCount = 0;\n            \n            for (char ch : str.toCharArray()) {\n                if (Character.getNumericValue(ch) % 2 != 0) {\n                    oddCount++;\n                }\n            }\n            \n            String output = String.format(\"the number of odd elements %dn the str%dng %d of the %dnput.\", oddCount, oddCount, oddCount, oddCount);\n            result.add(output);\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/114", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int minSubArraySum(List<Integer> nums) {\n        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n\n        for (int num : nums) {\n            currentSum += num;\n            if (currentSum < minSum) {\n                minSum = currentSum;\n            }\n            if (currentSum > 0) {\n                currentSum = 0;\n            }\n        }\n\n        return minSum;\n    }\n}\n"}
{"task_id": "Java/115", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        int totalBucketsNeeded = 0;\n        \n        for (List<Integer> well : grid) {\n            int waterUnits = 0;\n            for (int unit : well) {\n                if (unit == 1) {\n                    waterUnits++;\n                }\n            }\n            totalBucketsNeeded += (waterUnits + capacity - 1) / capacity; // Equivalent to Math.ceil(waterUnits / (double)capacity)\n        }\n        \n        return totalBucketsNeeded;\n    }\n}\n"}
{"task_id": "Java/116", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> arr) {\n        arr.sort((a, b) -> {\n            int countA = Integer.bitCount(Math.abs(a));\n            int countB = Integer.bitCount(Math.abs(b));\n            if (countA == countB) {\n                return Integer.compare(a, b);\n            }\n            return Integer.compare(countA, countB);\n        });\n        return arr;\n    }\n}\n"}
{"task_id": "Java/117", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> select_words(String s, int n) {\n        List<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int consonantCount = 0;\n            for (char c : word.toCharArray()) {\n                if (isConsonant(c)) {\n                    consonantCount++;\n                }\n            }\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n\n    private boolean isConsonant(char c) {\n        c = Character.toLowerCase(c);\n        return \"bcdfghjklmnpqrstvwxyz\".indexOf(c) != -1;\n    }\n}\n"}
{"task_id": "Java/118", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String get_closest_vowel(String word) {\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        Set<Character> consonants = new HashSet<>(Arrays.asList('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z',\n                                                                'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'));\n        \n        for (int i = word.length() - 2; i > 0; i--) {\n            if (vowels.contains(word.charAt(i)) && consonants.contains(word.charAt(i - 1)) && consonants.contains(word.charAt(i + 1))) {\n                return String.valueOf(word.charAt(i));\n            }\n        }\n        return \"\";\n    }\n}\n"}
{"task_id": "Java/119", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String match_parens(List<String> lst) {\n        int openCount1 = 0, closeCount1 = 0;\n        int openCount2 = 0, closeCount2 = 0;\n\n        // Count open and close parentheses in the first string\n        for (char c : lst.get(0).toCharArray()) {\n            if (c == '(') {\n                openCount1++;\n            } else {\n                closeCount1++;\n            }\n        }\n\n        // Count open and close parentheses in the second string\n        for (char c : lst.get(1).toCharArray()) {\n            if (c == '(') {\n                openCount2++;\n            } else {\n                closeCount2++;\n            }\n        }\n\n        // Check if we can balance the parentheses\n        if (Math.abs(openCount1 - closeCount1) == Math.abs(openCount2 - closeCount2)) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}\n"}
{"task_id": "Java/120", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Sort the array in descending order\n        Collections.sort(arr, Collections.reverseOrder());\n        \n        // Take the first k elements\n        List<Integer> result = new ArrayList<>(arr.subList(0, k));\n        \n        // Sort the result in ascending order\n        Collections.sort(result);\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/121", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/122", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add_elements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) >= 10 && arr.get(i) <= 99) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/123", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> get_odd_collatz(int n) {\n        List<Integer> oddNumbers = new ArrayList<>();\n        while (n != 1) {\n            if (n % 2 != 0) {\n                oddNumbers.add(n);\n            }\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n        }\n        oddNumbers.add(1); // Adding the last number in the sequence which is always 1\n        Collections.sort(oddNumbers);\n        return oddNumbers;\n    }\n}\n"}
{"task_id": "Java/124", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean valid_date(String date) {\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n            return false;\n        }\n\n        int month, day, year;\n        try {\n            month = Integer.parseInt(parts[0]);\n            day = Integer.parseInt(parts[1]);\n            year = Integer.parseInt(parts[2]);\n        } catch (NumberFormatException e) {\n            return false;\n        }\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        if (day < 1) {\n            return false;\n        }\n\n        switch (month) {\n            case 1: case 3: case 5: case 7: case 8: case 10: case 12:\n                if (day > 31) {\n                    return false;\n                }\n                break;\n            case 4: case 6: case 9: case 11:\n                if (day > 30) {\n                    return false;\n                }\n                break;\n            case 2:\n                if (day > 29) {\n                    return false;\n                }\n                break;\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/125", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object split_words(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 != 0) {\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n}\n"}
{"task_id": "Java/126", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_sorted(List<Integer> lst) {\n        if (lst.size() <= 1) return true;\n\n        Map<Integer, Integer> frequency = new HashMap<>();\n        for (int num : lst) {\n            frequency.put(num, frequency.getOrDefault(num, 0) + 1);\n            if (frequency.get(num) > 2) return false;\n        }\n\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < lst.get(i - 1)) return false;\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/127", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        \n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n        \n        if (intersectionStart > intersectionEnd) {\n            return \"NO\";\n        }\n        \n        int intersectionLength = intersectionEnd - intersectionStart + 1;\n        \n        if (isPrime(intersectionLength)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n    \n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/128", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int productOfSigns = 1;\n        int sumOfMagnitudes = 0;\n\n        for (int num : arr) {\n            if (num > 0) {\n                productOfSigns *= 1;\n            } else if (num < 0) {\n                productOfSigns *= -1;\n            } else {\n                productOfSigns = 0;\n                break;\n            }\n            sumOfMagnitudes += Math.abs(num);\n        }\n\n        return Optional.of(sumOfMagnitudes * productOfSigns);\n    }\n}\n"}
{"task_id": "Java/129", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n        List<Integer> result = new ArrayList<>();\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> {\n            for (int i = 0; i < a.length; i++) {\n                if (a[i] != b[i]) return a[i] - b[i];\n            }\n            return 0;\n        });\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                pq.offer(new int[]{grid.get(i).get(j), i, j});\n            }\n        }\n\n        while (!pq.isEmpty()) {\n            int[] current = pq.poll();\n            int value = current[0];\n            int x = current[1];\n            int y = current[2];\n            List<Integer> path = new ArrayList<>();\n            path.add(value);\n            boolean[][] visited = new boolean[n][n];\n            visited[x][y] = true;\n            dfs(grid, x, y, k, path, visited, directions, pq);\n            if (path.size() == k) {\n                result = path;\n                break;\n            }\n        }\n\n        return result;\n    }\n\n    private void dfs(List<List<Integer>> grid, int x, int y, int k, List<Integer> path, boolean[][] visited, int[][] directions, PriorityQueue<int[]> pq) {\n        if (path.size() == k) return;\n        for (int[] dir : directions) {\n            int newX = x + dir[0];\n            int newY = y + dir[1];\n            if (newX >= 0 && newX < grid.size() && newY >= 0 && newY < grid.size() && !visited[newX][newY]) {\n                visited[newX][newY] = true;\n                path.add(grid.get(newX).get(newY));\n                dfs(grid, newX, newY, k, path, visited, directions, pq);\n                if (path.size() == k) return;\n                path.remove(path.size() - 1);\n                visited[newX][newY] = false;\n            }\n        }\n    }\n}\n"}
{"task_id": "Java/130", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n        List<Integer> tribonacciSequence = new ArrayList<>();\n        if (n < 0) {\n            return tribonacciSequence; // Return empty list for invalid input\n        }\n\n        // Initialize the first two values of the sequence\n        tribonacciSequence.add(1);\n        tribonacciSequence.add(3);\n\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                tribonacciSequence.add(1 + i / 2);\n            } else {\n                int nextValue = tribonacciSequence.get(i - 1) + tribonacciSequence.get(i - 2) + tribonacciSequence.get(i + 1);\n                tribonacciSequence.add(nextValue);\n            }\n        }\n\n        return tribonacciSequence;\n    }\n}\n"}
{"task_id": "Java/131", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digits(int n) {\n        int product = 0;\n        boolean hasOdd = false;\n        \n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                if (!hasOdd) {\n                    product = 1; // Initialize product if it's the first odd digit\n                    hasOdd = true;\n                }\n                product *= digit;\n            }\n            n /= 10;\n        }\n        \n        return product;\n    }\n}\n"}
{"task_id": "Java/132", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_nested(String string) {\n        Stack<Character> stack = new Stack<>();\n        boolean hasNested = false;\n\n        for (char ch : string.toCharArray()) {\n            if (ch == '[') {\n                stack.push(ch);\n            } else if (ch == ']') {\n                if (!stack.isEmpty() && stack.peek() == '[') {\n                    stack.pop();\n                    if (!stack.isEmpty()) {\n                        hasNested = true;\n                    }\n                } else {\n                    stack.push(ch);\n                }\n            }\n        }\n\n        return hasNested;\n    }\n}\n"}
{"task_id": "Java/133", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_squares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            int ceilingNum = (int) Math.ceil(num);\n            sum += ceilingNum * ceilingNum;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/134", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        if (txt.isEmpty()) {\n            return false;\n        }\n        \n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar)) {\n            // Check if the last character is not part of a word\n            if (txt.length() == 1 || txt.charAt(txt.length() - 2) == ' ') {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/135", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int can_arrange(List<Integer> arr) {\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}\n"}
{"task_id": "Java/136", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        Optional<Integer> largestNegative = Optional.empty();\n        Optional<Integer> smallestPositive = Optional.empty();\n\n        for (Integer num : lst) {\n            if (num < 0) {\n                if (!largestNegative.isPresent() || num > largestNegative.get()) {\n                    largestNegative = Optional.of(num);\n                }\n            } else if (num > 0) {\n                if (!smallestPositive.isPresent() || num < smallestPositive.get()) {\n                    smallestPositive = Optional.of(num);\n                }\n            }\n        }\n\n        List<Optional<Integer>> result = new ArrayList<>();\n        result.add(largestNegative);\n        result.add(smallestPositive);\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/137", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Object> compare_one(Object a, Object b) {\n        // Convert both objects to strings and normalize the decimal separator\n        String strA = a.toString().replace(\",\", \".\");\n        String strB = b.toString().replace(\",\", \".\");\n\n        // Parse the strings to doubles\n        double doubleA = Double.parseDouble(strA);\n        double doubleB = Double.parseDouble(strB);\n\n        // Compare the doubles\n        if (doubleA > doubleB) {\n            return Optional.of(a);\n        } else if (doubleB > doubleA) {\n            return Optional.of(b);\n        } else {\n            return Optional.empty();\n        }\n    }\n}\n"}
{"task_id": "Java/138", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_equal_to_sum_even(int n) {\n        // A number can be written as the sum of exactly 4 positive even numbers if and only if it is at least 8 and even.\n        return n >= 8 && n % 2 == 0;\n    }\n}\n"}
{"task_id": "Java/139", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public long special_factorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    private long factorial(int num) {\n        long fact = 1;\n        for (int i = 1; i <= num; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n}\n"}
{"task_id": "Java/140", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String fix_spaces(String text) {\n        StringBuilder result = new StringBuilder();\n        int i = 0;\n        while (i < text.length()) {\n            if (text.charAt(i) == ' ') {\n                int start = i;\n                while (i < text.length() && text.charAt(i) == ' ') {\n                    i++;\n                }\n                int end = i;\n                if (end - start > 2) {\n                    result.append('-');\n                } else {\n                    for (int j = start; j < end; j++) {\n                        result.append('_');\n                    }\n                }\n            } else {\n                result.append(text.charAt(i));\n                i++;\n            }\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/141", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String file_name_check(String file_name) {\n        // Check if there are more than three digits\n        int digitCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n                if (digitCount > 3) {\n                    return \"No\";\n                }\n            }\n        }\n\n        // Check if there is exactly one dot\n        int dotIndex = file_name.indexOf('.');\n        if (dotIndex == -1 || dotIndex != file_name.lastIndexOf('.')) {\n            return \"No\";\n        }\n\n        // Check if the substring before the dot is not empty and starts with a latin letter\n        String namePart = file_name.substring(0, dotIndex);\n        if (namePart.isEmpty() || !Character.isLetter(namePart.charAt(0))) {\n            return \"No\";\n        }\n\n        // Check if the substring after the dot is one of [\"txt\", \"exe\", \"dll\"]\n        String extension = file_name.substring(dotIndex + 1);\n        if (!Arrays.asList(\"txt\", \"exe\", \"dll\").contains(extension)) {\n            return \"No\";\n        }\n\n        return \"Yes\";\n    }\n}\n"}
{"task_id": "Java/142", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_squares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                lst.set(i, lst.get(i) * lst.get(i));\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                lst.set(i, lst.get(i) * lst.get(i) * lst.get(i));\n            }\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/143", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String words_in_sentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n        \n        for (String word : words) {\n            if (isPrime(word.length())) {\n                if (result.length() > 0) {\n                    result.append(\" \");\n                }\n                result.append(word);\n            }\n        }\n        \n        return result.toString();\n    }\n    \n    private boolean isPrime(int n) {\n        if (n <= 1) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/144", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean simplify(String x, String n) {\n        // Parse the fractions\n        String[] partsX = x.split(\"/\");\n        int numeratorX = Integer.parseInt(partsX[0]);\n        int denominatorX = Integer.parseInt(partsX[1]);\n        \n        String[] partsN = n.split(\"/\");\n        int numeratorN = Integer.parseInt(partsN[0]);\n        int denominatorN = Integer.parseInt(partsN[1]);\n        \n        // Calculate the product of the fractions\n        int numeratorProduct = numeratorX * numeratorN;\n        int denominatorProduct = denominatorX * denominatorN;\n        \n        // Check if the product is a whole number\n        return numeratorProduct % denominatorProduct == 0;\n    }\n}\n"}
{"task_id": "Java/145", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> order_by_points(List<Integer> nums) {\n        Collections.sort(nums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int sumA = sumOfDigits(a);\n                int sumB = sumOfDigits(b);\n                return sumA - sumB;\n            }\n        });\n        return nums;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        num = Math.abs(num);\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/146", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10) {\n                int firstDigit = Integer.parseInt(Integer.toString(Math.abs(num)).substring(0, 1));\n                int lastDigit = Math.abs(num) % 10;\n                if (isOdd(firstDigit) && isOdd(lastDigit)) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    private boolean isOdd(int digit) {\n        return digit % 2 != 0;\n    }\n}\n"}
{"task_id": "Java/147", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int get_max_triples(int n) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = (i + 1) * (i + 1) - (i + 1) + 1;\n        }\n\n        int count = 0;\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/148", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> bf(String planet1, String planet2) {\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        List<String> result = new ArrayList<>();\n        \n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        \n        if (index1 == -1 || index2 == -1) {\n            return result; // Return empty list if either planet name is incorrect\n        }\n        \n        int start = Math.min(index1, index2);\n        int end = Math.max(index1, index2);\n        \n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/149", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> sorted_list_sum(List<String> lst) {\n        // Filter out strings with odd lengths\n        List<String> filteredList = new ArrayList<>();\n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                filteredList.add(str);\n            }\n        }\n\n        // Sort the filtered list first by length, then alphabetically\n        Collections.sort(filteredList, new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                if (s1.length() != s2.length()) {\n                    return s1.length() - s2.length();\n                } else {\n                    return s1.compareTo(s2);\n                }\n            }\n        });\n\n        return filteredList;\n    }\n}\n"}
{"task_id": "Java/150", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int x_or_y(int n, int x, int y) {\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/151", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int double_the_difference(List<Object> lst) {\n        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                if (num > 0 && num % 2 != 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/152", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            int difference = Math.abs(game.get(i) - guess.get(i));\n            result.add(difference);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/153", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        String strongestExtension = \"\";\n        int maxStrength = Integer.MIN_VALUE;\n        \n        for (String extension : extensions) {\n            int cap = 0;\n            int sm = 0;\n            \n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n                } else if (Character.isLowerCase(c)) {\n                    sm++;\n                }\n            }\n            \n            int strength = cap - sm;\n            \n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n        \n        return class_name + \".\" + strongestExtension;\n    }\n}\n"}
{"task_id": "Java/154", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean cycpattern_check(String a, String b) {\n        if (b.length() > a.length()) {\n            return false;\n        }\n        \n        String doubleA = a + a;\n        return doubleA.contains(b);\n    }\n}\n"}
{"task_id": "Java/155", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> even_odd_count(int num) {\n        num = Math.abs(num); // Convert negative number to positive for processing\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num /= 10;\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n}\n"}
{"task_id": "Java/156", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String int_to_mini_roman(int number) {\n        // Define the Roman numeral symbols and their corresponding values\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] symbols = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        \n        StringBuilder roman = new StringBuilder();\n        \n        // Iterate through the values and symbols arrays\n        for (int i = 0; i < values.length; i++) {\n            // Append the symbol while the number is greater than or equal to the value\n            while (number >= values[i]) {\n                roman.append(symbols[i]);\n                number -= values[i];\n            }\n        }\n        \n        // Convert the result to lowercase and return\n        return roman.toString();\n    }\n}\n"}
{"task_id": "Java/157", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean right_angle_triangle(int a, int b, int c) {\n        // Sort the sides to ensure a <= b <= c\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        \n        // Check the Pythagorean theorem\n        return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n    }\n}\n"}
{"task_id": "Java/158", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String find_max(List<String> words) {\n        String maxWord = \"\";\n        int maxUniqueChars = 0;\n\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            int uniqueCount = uniqueChars.size();\n\n            if (uniqueCount > maxUniqueChars || (uniqueCount == maxUniqueChars && word.compareTo(maxWord) < 0)) {\n                maxWord = word;\n                maxUniqueChars = uniqueCount;\n            }\n        }\n\n        return maxWord;\n    }\n}\n"}
{"task_id": "Java/159", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> eat(int number, int need, int remaining) {\n        int totalEaten = number + Math.min(need, remaining);\n        int remainingCarrots = Math.max(0, remaining - need);\n        return Arrays.asList(totalEaten, remainingCarrots);\n    }\n}\n"}
{"task_id": "Java/160", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        int result = operand.get(0);\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int nextOperand = operand.get(i + 1);\n            switch (op) {\n                case \"+\":\n                    result += nextOperand;\n                    break;\n                case \"-\":\n                    result -= nextOperand;\n                    break;\n                case \"*\":\n                    result *= nextOperand;\n                    break;\n                case \"/\":\n                    result /= nextOperand;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, nextOperand);\n                    break;\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/161", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(String s) {\n        StringBuilder result = new StringBuilder();\n        boolean hasLetter = false;\n\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                hasLetter = true;\n                if (Character.isUpperCase(c)) {\n                    result.append(Character.toLowerCase(c));\n                } else {\n                    result.append(Character.toUpperCase(c));\n                }\n            } else {\n                result.append(c);\n            }\n        }\n\n        if (!hasLetter) {\n            return result.reverse().toString();\n        }\n\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/162", "generation": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] messageDigest = md.digest(text.getBytes());\n        BigInteger no = new BigInteger(1, messageDigest);\n        String hashtext = no.toString(16);\n        \n        while (hashtext.length() < 32) {\n            hashtext = \"0\" + hashtext;\n        }\n        \n        return Optional.of(hashtext);\n    }\n}\n"}
{"task_id": "Java/163", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> generate_integers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        int start = Math.min(a, b);\n        int end = Math.max(a, b);\n        \n        for (int i = start; i <= end; i++) {\n            if (i % 2 == 0 && i < 10) {\n                result.add(i);\n            }\n        }\n        \n        Collections.sort(result);\n        return result;\n    }\n}\n"}
