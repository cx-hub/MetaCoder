{"task_id": "Java/0", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean has_close_elements(List<Double> numbers, double threshold) {\n           for (int i = 0; i < numbers.size(); i++) {\n               for (int j = i + 1; j < numbers.size(); j++) {\n                   if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                       return true;\n                   }\n               }\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/1", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<String> separate_paren_groups(String paren_string) {\n           List<String> result = new ArrayList<>();\n           StringBuilder currentGroup = new StringBuilder();\n           int balance = 0;\n\n           for (char ch : paren_string.toCharArray()) {\n               if (ch == ' ') {\n                   continue;\n               }\n               currentGroup.append(ch);\n               if (ch == '(') {\n                   balance++;\n               } else if (ch == ')') {\n                   balance--;\n                   if (balance == 0) {\n                       result.add(currentGroup.toString());\n                       currentGroup.setLength(0); // Reset the current group\n                   }\n               }\n           }\n\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/2", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public double truncate_number(double number) {\n           double integer_part = Math.floor(number);\n           double decimal_part = number - integer_part;\n           return decimal_part;\n       }\n   }\n   "}
{"task_id": "Java/3", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean below_zero(List<Integer> operations) {\n           int balance = 0;\n           for (int operation : operations) {\n               balance += operation;\n               if (balance < 0) {\n                   return true;\n               }\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/4", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public double mean_absolute_deviation(List<Double> numbers) {\n           double mean = calculate_mean(numbers);\n           double sum_of_absolute_differences = 0;\n           for (double number : numbers) {\n               sum_of_absolute_differences += Math.abs(number - mean);\n           }\n           return sum_of_absolute_differences / numbers.size();\n       }\n\n       private double calculate_mean(List<Double> numbers) {\n           double sum = 0;\n           for (double number : numbers) {\n               sum += number;\n           }\n           return sum / numbers.size();\n       }\n   }\n   "}
{"task_id": "Java/5", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n           List<Integer> result = new ArrayList<>();\n           for (int i = 0; i < numbers.size() - 1; i++) {\n               result.add(numbers.get(i));\n               result.add(delimiter);\n           }\n           if (!numbers.isEmpty()) {\n               result.add(numbers.get(numbers.size() - 1));\n           }\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/6", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> parse_nested_parens(String paren_string) {\n           List<Integer> result = new ArrayList<>();\n           String[] groups = paren_string.split(\" \");\n           \n           for (String group : groups) {\n               Stack<Character> stack = new Stack<>();\n               int max_depth = 0;\n               int current_depth = 0;\n               \n               for (char ch : group.toCharArray()) {\n                   if (ch == '(') {\n                       stack.push(ch);\n                       current_depth++;\n                   } else if (ch == ')') {\n                       stack.pop();\n                       current_depth--;\n                       if (current_depth > max_depth) {\n                           max_depth = current_depth;\n                       }\n                   }\n               }\n               \n               result.add(max_depth);\n           }\n           \n           return result;\n       }\n   }\n   "}
{"task_id": "Java/7", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                result.add(str);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/8", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sum_product(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        \n        if (numbers.isEmpty()) {\n            return Arrays.asList(0, 1);\n        }\n        \n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        \n        return Arrays.asList(sum, product);\n    }\n}\n"}
{"task_id": "Java/9", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> rolling_max(List<Integer> numbers) {\n           List<Integer> result = new ArrayList<>();\n           int currentMax = Integer.MIN_VALUE;\n           \n           for (int num : numbers) {\n               if (num > currentMax) {\n                   currentMax = num;\n               }\n               result.add(currentMax);\n           }\n           \n           return result;\n       }\n   }\n   "}
{"task_id": "Java/10", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       // Helper function to check if a string is a palindrome\n       public boolean isPalindrome(String string) {\n           int i = 0;\n           int j = string.length() - 1;\n           while (i < j) {\n               if (string.charAt(i) != string.charAt(j)) {\n                   return false;\n               }\n               i++;\n               j--;\n           }\n           return true;\n       }\n\n       // Function to find the shortest palindrome that begins with a supplied string\n       public String make_palindrome(String string) {\n           if (string.isEmpty()) {\n               return \"\";\n           }\n\n           int n = string.length();\n           int longestPalindromicSuffixIndex = 0;\n\n           // Find the longest palindromic suffix\n           for (int i = 0; i < n; i++) {\n               if (isPalindrome(string.substring(i))) {\n                   longestPalindromicSuffixIndex = i;\n                   break;\n               }\n           }\n\n           // If no palindromic suffix found, append reverse of entire string\n           if (longestPalindromicSuffixIndex == 0) {\n               return string + new StringBuilder(string).reverse().toString();\n           }\n\n           // Append reverse of the prefix (before the palindromic suffix) to the end\n           String prefix = string.substring(0, longestPalindromicSuffixIndex);\n           return string + new StringBuilder(prefix).reverse().toString();\n       }\n   }\n   "}
{"task_id": "Java/11", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String string_xor(String a, String b) {\n           StringBuilder result = new StringBuilder();\n           int length = Math.min(a.length(), b.length());\n           \n           for (int i = 0; i < length; i++) {\n               char charA = a.charAt(i);\n               char charB = b.charAt(i);\n               \n               if (charA == '0' && charB == '0') {\n                   result.append('0');\n               } else if (charA == '0' && charB == '1') {\n                   result.append('1');\n               } else if (charA == '1' && charB == '0') {\n                   result.append('1');\n               } else if (charA == '1' && charB == '1') {\n                   result.append('0');\n               }\n           }\n           \n           return result.toString();\n       }\n   }\n   "}
{"task_id": "Java/12", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public Optional<String> longest(List<String> strings) {\n           if (strings.isEmpty()) {\n               return Optional.empty();\n           }\n           \n           String longestString = strings.get(0);\n           for (int i = 1; i < strings.size(); i++) {\n               if (strings.get(i).length() > longestString.length()) {\n                   longestString = strings.get(i);\n               }\n           }\n           \n           return Optional.of(longestString);\n       }\n   }\n   "}
{"task_id": "Java/13", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int greatest_common_divisor(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}\n"}
{"task_id": "Java/14", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<String> all_prefixes(String string) {\n           List<String> prefixes = new ArrayList<>();\n           for (int i = 1; i <= string.length(); i++) {\n               prefixes.add(string.substring(0, i));\n           }\n           return prefixes;\n       }\n   }\n   "}
{"task_id": "Java/15", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String string_sequence(int n) {\n        // Initialize a StringBuilder to build the result string\n        StringBuilder result = new StringBuilder();\n        \n        // Loop from 0 to n (inclusive)\n        for (int i = 0; i <= n; i++) {\n            // Append the current number followed by a space\n            result.append(i).append(\" \");\n        }\n        \n        // Remove the trailing space\n        if (result.length() > 0) {\n            result.setLength(result.length() - 1);\n        }\n        \n        // Convert the StringBuilder to a string and return it\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/16", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int count_distinct_characters(String string) {\n        // Convert the string to lowercase to handle case insensitivity\n        String lowerCaseString = string.toLowerCase();\n        \n        // Create a Set to store distinct characters\n        Set<Character> distinctCharacters = new HashSet<>();\n        \n        // Iterate through the string and add each character to the Set\n        for (char c : lowerCaseString.toCharArray()) {\n            distinctCharacters.add(c);\n        }\n        \n        // The size of the Set is the count of distinct characters\n        return distinctCharacters.size();\n    }\n}\n"}
{"task_id": "Java/17", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> parse_music(String string) {\n           List<Integer> beatCounts = new ArrayList<>();\n           String[] notes = string.split(\" \");\n           \n           for (String note : notes) {\n               if (note.equals(\"o\")) {\n                   beatCounts.add(4);\n               } else if (note.equals(\"o|\")) {\n                   beatCounts.add(2);\n               } else if (note.equals(\".|\")) {\n                   beatCounts.add(1);\n               }\n           }\n           \n           return beatCounts;\n       }\n   }\n   "}
{"task_id": "Java/18", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int how_many_times(String string, String substring) {\n        if (substring.isEmpty() || string.isEmpty()) {\n            return 0;\n        }\n        \n        int count = 0;\n        int substringLength = substring.length();\n        int stringLength = string.length();\n        \n        for (int i = 0; i <= stringLength - substringLength; i++) {\n            if (string.substring(i, i + substringLength).equals(substring)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/19", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String sort_numbers(String numbers) {\n           // Mapping from word to number\n           Map<String, Integer> wordToNumber = new HashMap<>();\n           wordToNumber.put(\"zero\", 0);\n           wordToNumber.put(\"one\", 1);\n           wordToNumber.put(\"two\", 2);\n           wordToNumber.put(\"three\", 3);\n           wordToNumber.put(\"four\", 4);\n           wordToNumber.put(\"five\", 5);\n           wordToNumber.put(\"six\", 6);\n           wordToNumber.put(\"seven\", 7);\n           wordToNumber.put(\"eight\", 8);\n           wordToNumber.put(\"nine\", 9);\n\n           // Mapping from number to word\n           Map<Integer, String> numberToWord = new HashMap<>();\n           for (Map.Entry<String, Integer> entry : wordToNumber.entrySet()) {\n               numberToWord.put(entry.getValue(), entry.getKey());\n           }\n\n           // Split the input string into words\n           String[] words = numbers.split(\" \");\n\n           // Convert words to numbers\n           List<Integer> nums = new ArrayList<>();\n           for (String word : words) {\n               nums.add(wordToNumber.get(word));\n           }\n\n           // Sort the numbers\n           Collections.sort(nums);\n\n           // Convert sorted numbers back to words\n           List<String> sortedWords = new ArrayList<>();\n           for (int num : nums) {\n               sortedWords.add(numberToWord.get(num));\n           }\n\n           // Join the sorted words into a single string\n           return String.join(\" \", sortedWords);\n       }\n   }\n   "}
{"task_id": "Java/20", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Double> find_closest_elements(List<Double> numbers) {\n           List<Double> closest_pair = new ArrayList<>();\n           closest_pair.add(numbers.get(0));\n           closest_pair.add(numbers.get(1));\n           double distance = Math.abs(numbers.get(1) - numbers.get(0));\n           \n           for (int i = 0; i < numbers.size(); i++) {\n               for (int j = i + 1; j < numbers.size(); j++) {\n                   double current_distance = Math.abs(numbers.get(i) - numbers.get(j));\n                   if (current_distance < distance) {\n                       closest_pair.clear();\n                       closest_pair.add(numbers.get(i));\n                       closest_pair.add(numbers.get(j));\n                       distance = current_distance;\n                   }\n               }\n           }\n           \n           Collections.sort(closest_pair);\n           return closest_pair;\n       }\n   }\n   "}
{"task_id": "Java/21", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Double> rescale_to_unit(List<Double> numbers) {\n           // Find the minimum and maximum values in the list\n           double min_value = Collections.min(numbers);\n           double max_value = Collections.max(numbers);\n           double range = max_value - min_value;\n           \n           // Create a new list to store the transformed values\n           List<Double> transformed_list = new ArrayList<>();\n           \n           // Transform each number in the list\n           for (double number : numbers) {\n               double new_value = (number - min_value) / range;\n               transformed_list.add(new_value);\n           }\n           \n           // Return the transformed list\n           return transformed_list;\n       }\n   }\n   "}
{"task_id": "Java/22", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> filter_integers(List<Object> values) {\n           List<Integer> integers = new ArrayList<>();\n           for (Object value : values) {\n               if (value instanceof Integer) {\n                   integers.add((Integer) value);\n               }\n           }\n           return integers;\n       }\n   }\n   "}
{"task_id": "Java/23", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int strlen(String string) {\n        return string.length();\n    }\n}\n"}
{"task_id": "Java/24", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int largest_divisor(int n) {\n           if (n <= 1) {\n               return 0;  // Edge case: no divisors for numbers less than or equal to 1\n           }\n           for (int i = n / 2; i > 0; i--) {\n               if (n % i == 0) {\n                   return i;\n               }\n           }\n           return 1;  // Default case: 1 is always a divisor\n       }\n   }\n   "}
{"task_id": "Java/25", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        \n        while (i * i <= n) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n            i++;\n        }\n        \n        if (n > 1) {\n            factors.add(n);\n        }\n        \n        return factors;\n    }\n}\n"}
{"task_id": "Java/26", "generation": "   import java.util.*;\n   import java.lang.*;\n   import java.util.stream.Collectors;\n\n   class Solution {\n       public List<Integer> remove_duplicates(List<Integer> numbers) {\n           Set<Integer> seen = new HashSet<>();\n           List<Integer> result = new ArrayList<>();\n           \n           for (Integer num : numbers) {\n               if (!seen.contains(num)) {\n                   seen.add(num);\n                   result.add(num);\n               }\n           }\n           \n           return result;\n       }\n   }\n   "}
{"task_id": "Java/27", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String flip_case(String string) {\n           StringBuilder result = new StringBuilder();\n           for (char ch : string.toCharArray()) {\n               if (Character.isLowerCase(ch)) {\n                   result.append(Character.toUpperCase(ch));\n               } else if (Character.isUpperCase(ch)) {\n                   result.append(Character.toLowerCase(ch));\n               } else {\n                   result.append(ch); // If it's neither, just append as is\n               }\n           }\n           return result.toString();\n       }\n   }\n   "}
{"task_id": "Java/28", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String concatenate(List<String> strings) {\n        // Initialize a StringBuilder to efficiently concatenate strings\n        StringBuilder concatenatedString = new StringBuilder();\n        \n        // Loop through each string in the list and append it to the StringBuilder\n        for (String str : strings) {\n            concatenatedString.append(str);\n        }\n        \n        // Convert the StringBuilder to a String and return it\n        return concatenatedString.toString();\n    }\n}\n"}
{"task_id": "Java/29", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/30", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> get_positive(List<Integer> l) {\n        // Convert the list to a stream and filter out non-positive numbers\n        return l.stream()\n                .filter(n -> n > 0)  // Keep only positive numbers\n                .collect(Collectors.toList());  // Collect the results into a list\n    }\n}\n"}
{"task_id": "Java/31", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean is_prime(int n) {\n           if (n <= 1) {\n               return false;\n           }\n           if (n == 2) {\n               return true;\n           }\n           if (n % 2 == 0) {\n               return false;\n           }\n           for (int i = 3; i <= Math.sqrt(n); i += 2) {\n               if (n % i == 0) {\n                   return false;\n               }\n           }\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/32", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    // Evaluates polynomial with coefficients xs at point x.\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    // Finds a zero of the polynomial using the Bisection Method.\n    public double find_zero(List<Double> xs) {\n        // Initial bounds for the Bisection Method\n        double a = -100.0; // Arbitrary lower bound\n        double b = 100.0;  // Arbitrary upper bound\n        \n        // Ensure a and b have opposite signs\n        while (poly(xs, a) * poly(xs, b) > 0) {\n            a *= 2;\n            b *= 2;\n        }\n        \n        // Bisection Method\n        double tolerance = 1e-7; // Tolerance for convergence\n        while (Math.abs(b - a) > tolerance) {\n            double c = (a + b) / 2;\n            double fc = poly(xs, c);\n            \n            if (Math.abs(fc) < tolerance) {\n                return c; // Found a zero\n            }\n            \n            if (poly(xs, a) * fc < 0) {\n                b = c;\n            } else {\n                a = c;\n            }\n        }\n        \n        return (a + b) / 2; // Return the midpoint as the zero\n    }\n}\n"}
{"task_id": "Java/33", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> sort_third(List<Integer> l) {\n           List<Integer> sorted_values = new ArrayList<>();\n           // Collect values at indices divisible by three\n           for (int i = 0; i < l.size(); i++) {\n               if (i % 3 == 0) {\n                   sorted_values.add(l.get(i));\n               }\n           }\n           // Sort the collected values\n           Collections.sort(sorted_values);\n           // Replace values at indices divisible by three with sorted values\n           int sorted_index = 0;\n           for (int i = 0; i < l.size(); i++) {\n               if (i % 3 == 0) {\n                   l.set(i, sorted_values.get(sorted_index));\n                   sorted_index++;\n               }\n           }\n           return l;\n       }\n   }\n   "}
{"task_id": "Java/34", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> unique(List<Integer> l) {\n        // Step 1: Initialize a Set to store unique elements\n        Set<Integer> uniqueSet = new HashSet<>();\n        \n        // Step 2: Iterate through the input list and add elements to the set\n        for (Integer num : l) {\n            uniqueSet.add(num);\n        }\n        \n        // Step 3: Convert the set to a list\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n        \n        // Step 4: Sort the list\n        Collections.sort(uniqueList);\n        \n        // Step 5: Return the sorted list\n        return uniqueList;\n    }\n}\n"}
{"task_id": "Java/35", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int max_element(List<Integer> l) {\n           int max_val = l.get(0); // Initialize max_val with the first element\n           for (int i = 1; i < l.size(); i++) { // Start from the second element\n               if (l.get(i) > max_val) {\n                   max_val = l.get(i); // Update max_val if a larger element is found\n               }\n           }\n           return max_val; // Return the maximum value found\n       }\n   }\n   "}
{"task_id": "Java/36", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int fizz_buzz(int n) {\n           int count = 0;\n           for (int i = 0; i < n; i++) {\n               if (i % 11 == 0 || i % 13 == 0) {\n                   String numStr = Integer.toString(i);\n                   for (char c : numStr.toCharArray()) {\n                       if (c == '7') {\n                           count++;\n                       }\n                   }\n               }\n           }\n           return count;\n       }\n   }\n   "}
{"task_id": "Java/37", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> sort_even(List<Integer> l) {\n           List<Integer> even_values = new ArrayList<>();\n           for (int i = 0; i < l.size(); i += 2) {\n               even_values.add(l.get(i));\n           }\n           Collections.sort(even_values);\n           List<Integer> result = new ArrayList<>(Collections.nCopies(l.size(), 0));\n           int even_index = 0;\n           for (int i = 0; i < l.size(); i++) {\n               if (i % 2 == 0) {\n                   result.set(i, even_values.get(even_index++));\n               } else {\n                   result.set(i, l.get(i));\n               }\n           }\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/38", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public String decode_cyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse the cycling in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n"}
{"task_id": "Java/39", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean isPrime(int number) {\n           if (number <= 1) {\n               return false;\n           }\n           for (int i = 2; i <= Math.sqrt(number); i++) {\n               if (number % i == 0) {\n                   return false;\n               }\n           }\n           return true;\n       }\n\n       public int prime_fib(int n) {\n           if (n <= 0) {\n               return -1;  // Invalid input\n           }\n           int count = 0;\n           int a = 0, b = 1;\n           while (count < n) {\n               int temp = a + b;\n               a = b;\n               b = temp;\n               if (isPrime(b)) {\n                   count++;\n               }\n           }\n           return b;\n       }\n   }\n   "}
{"task_id": "Java/40", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        // Sort the list to optimize the search process\n        Collections.sort(l);\n        \n        // Iterate through each element as the potential first element of the triplet\n        for (int i = 0; i < l.size() - 2; i++) {\n            // Use two pointers to find the other two elements that sum with the first element to zero\n            int left = i + 1;\n            int right = l.size() - 1;\n            \n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                \n                if (sum == 0) {\n                    // Found a triplet that sums to zero\n                    return true;\n                } else if (sum < 0) {\n                    // If sum is less than zero, move the left pointer to increase the sum\n                    left++;\n                } else {\n                    // If sum is greater than zero, move the right pointer to decrease the sum\n                    right--;\n                }\n            }\n        }\n        \n        // No such triplet found\n        return false;\n    }\n}\n"}
{"task_id": "Java/41", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int car_race_collision(int n) {\n           return n * n;\n       }\n   }\n   "}
{"task_id": "Java/42", "generation": "   import java.util.*;\n   import java.lang.*;\n   import java.util.stream.Collectors;\n\n   class Solution {\n       public List<Integer> incr_list(List<Integer> l) {\n           // Using Java Streams for a functional approach\n           return l.stream()\n                   .map(num -> num + 1)\n                   .collect(Collectors.toList());\n       }\n   }\n   "}
{"task_id": "Java/43", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean pairs_sum_to_zero(List<Integer> l) {\n           Set<Integer> seen = new HashSet<>();\n           for (int number : l) {\n               if (seen.contains(-number)) {\n                   return true;\n               }\n               seen.add(number);\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/44", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String change_base(int x, int base) {\n        if (x == 0) {\n            return \"0\";\n        }\n        \n        StringBuilder result = new StringBuilder();\n        \n        while (x > 0) {\n            int remainder = x % base;\n            result.insert(0, remainder);\n            x = x / base;\n        }\n        \n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/45", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangle_area(double a, double h) {\n        // Calculate the area using the formula\n        double area = 0.5 * a * h;\n        // Return the calculated area\n        return area;\n    }\n}\n"}
{"task_id": "Java/46", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib4(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Input must be a non-negative integer.\");\n        }\n        if (n == 0 || n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 0;\n        }\n\n        int[] fib4_values = {0, 0, 2, 0};\n\n        for (int i = 4; i <= n; i++) {\n            int next_value = fib4_values[0] + fib4_values[1] + fib4_values[2] + fib4_values[3];\n            fib4_values[i % 4] = next_value;\n        }\n\n        return fib4_values[n % 4];\n    }\n}\n"}
{"task_id": "Java/47", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public double median(List<Integer> l) {\n           // Sort the list\n           Collections.sort(l);\n           \n           // Get the length of the list\n           int length = l.size();\n           \n           // Check if the length is odd or even\n           if (length % 2 != 0) {\n               // If odd, return the middle element\n               return l.get(length / 2);\n           } else {\n               // If even, return the average of the two middle elements\n               int mid1 = l.get(length / 2 - 1);\n               int mid2 = l.get(length / 2);\n               return (mid1 + mid2) / 2.0;\n           }\n       }\n   }\n   "}
{"task_id": "Java/48", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean is_palindrome(String text) {\n           int left = 0;\n           int right = text.length() - 1;\n           \n           while (left < right) {\n               if (text.charAt(left) != text.charAt(right)) {\n                   return false;\n               }\n               left++;\n               right--;\n           }\n           \n           return true;\n       }\n   }\n   "}
{"task_id": "Java/49", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int modp(int n, int p) {\n           if (n == 0) {\n               return 1;\n           }\n           if (p == 1) {\n               return 0;\n           }\n           \n           int result = 1;\n           int base = 2;\n           \n           while (n > 0) {\n               if (n % 2 == 1) {\n                   result = (result * base) % p;\n               }\n               base = (base * base) % p;\n               n = n / 2;\n           }\n           \n           return result;\n       }\n   }\n   "}
{"task_id": "Java/50", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String encodeShift(String s) {\n           StringBuilder sb = new StringBuilder();\n           for (char ch : s.toCharArray()) {\n               sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n           }\n           return sb.toString();\n       }\n\n       public String decode_shift(String s) {\n           StringBuilder sb = new StringBuilder();\n           for (char ch : s.toCharArray()) {\n               char decodedChar = (char) ('a' + ((ch - 5 - 'a' + 26) % 26));\n               sb.append(decodedChar);\n           }\n           return sb.toString();\n       }\n   }\n   "}
{"task_id": "Java/51", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String remove_vowels(String text) {\n           StringBuilder result = new StringBuilder();\n           Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n           \n           for (char ch : text.toCharArray()) {\n               if (!vowels.contains(ch)) {\n                   result.append(ch);\n               }\n           }\n           \n           return result.toString();\n       }\n   }\n   "}
{"task_id": "Java/52", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean below_threshold(List<Integer> l, int t) {\n           for (int number : l) {\n               if (number >= t) {\n                   return false;\n               }\n           }\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/53", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}\n"}
{"task_id": "Java/54", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean same_chars(String s0, String s1) {\n        // Create frequency maps for both strings\n        Map<Character, Integer> freqMap0 = new HashMap<>();\n        Map<Character, Integer> freqMap1 = new HashMap<>();\n        \n        // Populate the frequency map for s0\n        for (char c : s0.toCharArray()) {\n            freqMap0.put(c, freqMap0.getOrDefault(c, 0) + 1);\n        }\n        \n        // Populate the frequency map for s1\n        for (char c : s1.toCharArray()) {\n            freqMap1.put(c, freqMap1.getOrDefault(c, 0) + 1);\n        }\n        \n        // Compare the two frequency maps\n        return freqMap0.equals(freqMap1);\n    }\n}\n"}
{"task_id": "Java/55", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n\n        int a = 0; // F(0)\n        int b = 1; // F(1)\n        int fib = 0;\n\n        for (int i = 2; i <= n; i++) {\n            fib = a + b;\n            a = b;\n            b = fib;\n        }\n\n        return fib;\n    }\n}\n"}
{"task_id": "Java/56", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean correct_bracketing(String brackets) {\n           Stack<Character> stack = new Stack<>();\n           for (char ch : brackets.toCharArray()) {\n               if (ch == '<') {\n                   stack.push(ch);\n               } else if (ch == '>') {\n                   if (stack.isEmpty()) {\n                       return false;\n                   } else {\n                       stack.pop();\n                   }\n               }\n           }\n           return stack.isEmpty();\n       }\n   }\n   "}
{"task_id": "Java/57", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean monotonic(List<Integer> l) {\n           if (l.size() <= 1) {\n               return true;\n           }\n           \n           boolean increasing = true;\n           boolean decreasing = true;\n           \n           for (int i = 0; i < l.size() - 1; i++) {\n               if (l.get(i) > l.get(i + 1)) {\n                   increasing = false;\n               }\n               if (l.get(i) < l.get(i + 1)) {\n                   decreasing = false;\n               }\n               \n               if (!increasing && !decreasing) {\n                   return false;\n               }\n           }\n           \n           return true;\n       }\n   }\n   "}
{"task_id": "Java/58", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n           Set<Integer> set = new HashSet<>(l1);\n           List<Integer> result = new ArrayList<>();\n           \n           for (Integer num : l2) {\n               if (set.contains(num)) {\n                   result.add(num);\n                   set.remove(num); // Ensure uniqueness\n               }\n           }\n           \n           Collections.sort(result);\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/59", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largest_prime_factor(int n) {\n        int largest_prime = 2;\n        int current_factor = 2;\n        \n        while (n > 1) {\n            while (n % current_factor == 0) {\n                largest_prime = current_factor;\n                n = n / current_factor;\n            }\n            current_factor += 1;\n        }\n        \n        return largest_prime;\n    }\n}\n"}
{"task_id": "Java/60", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_to_n(int n) {\n        // Using the formula to calculate the sum of first n natural numbers\n        return n * (n + 1) / 2;\n    }\n}\n"}
{"task_id": "Java/61", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean correct_bracketing(String brackets) {\n           Stack<Character> stack = new Stack<>();\n           for (char ch : brackets.toCharArray()) {\n               if (ch == '(') {\n                   stack.push(ch);\n               } else if (ch == ')') {\n                   if (stack.isEmpty() || stack.peek() != '(') {\n                       return false;\n                   }\n                   stack.pop();\n               }\n           }\n           return stack.isEmpty();\n       }\n   }\n   "}
{"task_id": "Java/62", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> derivative = new ArrayList<>();\n        \n        // Start from the second element (index 1)\n        for (int i = 1; i < xs.size(); i++) {\n            derivative.add(xs.get(i) * i);\n        }\n        \n        return derivative;\n    }\n}\n"}
{"task_id": "Java/63", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fibfib(int n) {\n        if (n == 0 || n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n\n        int[] fibfibArray = new int[n + 1];\n        fibfibArray[0] = 0;\n        fibfibArray[1] = 0;\n        fibfibArray[2] = 1;\n\n        for (int i = 3; i <= n; i++) {\n            fibfibArray[i] = fibfibArray[i - 1] + fibfibArray[i - 2] + fibfibArray[i - 3];\n        }\n\n        return fibfibArray[n];\n    }\n}\n"}
{"task_id": "Java/64", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int vowels_count(String s) {\n           int count = 0;\n           s = s.toLowerCase();\n           for (int i = 0; i < s.length(); i++) {\n               char c = s.charAt(i);\n               if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                   count++;\n               }\n           }\n           if (s.endsWith(\"y\")) {\n               count++;\n           }\n           return count;\n       }\n   }\n   "}
{"task_id": "Java/65", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String circular_shift(int x, int shift) {\n           String str_x = Integer.toString(x);\n           int num_digits = str_x.length();\n           \n           if (shift > num_digits) {\n               // Reverse the string\n               StringBuilder reversed = new StringBuilder(str_x).reverse();\n               return reversed.toString();\n           } else {\n               // Calculate effective shift\n               int effective_shift = shift % num_digits;\n               \n               // Split the string into two parts\n               String part1 = str_x.substring(num_digits - effective_shift);\n               String part2 = str_x.substring(0, num_digits - effective_shift);\n               \n               // Concatenate part1 and part2\n               return part1 + part2;\n           }\n       }\n   }\n   "}
{"task_id": "Java/66", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int digitSum(String s) {\n           int sum = 0;\n           for (char c : s.toCharArray()) {\n               if (Character.isUpperCase(c)) {\n                   sum += (int) c;\n               }\n           }\n           return sum;\n       }\n   }\n   "}
{"task_id": "Java/67", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruit_distribution(String s, int n) {\n        // Split the string by spaces\n        String[] parts = s.split(\" \");\n        \n        // Extract the number of apples and oranges\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[2]);\n        \n        // Calculate the number of mangoes\n        int mangoes = n - apples - oranges;\n        \n        return mangoes;\n    }\n}\n"}
{"task_id": "Java/68", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> pluck(List<Integer> arr) {\n           int smallestEvenValue = Integer.MAX_VALUE;\n           int smallestIndex = -1;\n\n           for (int i = 0; i < arr.size(); i++) {\n               int currentValue = arr.get(i);\n               if (currentValue % 2 == 0 && currentValue < smallestEvenValue) {\n                   smallestEvenValue = currentValue;\n                   smallestIndex = i;\n               }\n           }\n\n           if (smallestEvenValue == Integer.MAX_VALUE) {\n               return new ArrayList<>();\n           } else {\n               return Arrays.asList(smallestEvenValue, smallestIndex);\n           }\n       }\n   }\n   "}
{"task_id": "Java/69", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int search(List<Integer> lst) {\n        // Step 1: Create a HashMap to store the frequency of each integer\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        // Step 2: Populate the HashMap\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        // Step 3: Initialize the result to -1 (default if no such integer is found)\n        int result = -1;\n        \n        // Step 4: Iterate through the HashMap to find the greatest integer that meets the criteria\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int num = entry.getKey();\n            int freq = entry.getValue();\n            if (freq >= num && num > result) {\n                result = num;\n            }\n        }\n        \n        // Step 5: Return the result\n        return result;\n    }\n}\n"}
{"task_id": "Java/70", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        // Sort the list to easily access min and max values\n        Collections.sort(lst);\n        \n        // Initialize pointers and result list\n        int start = 0;\n        int end = lst.size() - 1;\n        List<Integer> result = new ArrayList<>();\n        \n        // While start is less than or equal to end\n        while (start <= end) {\n            // Add the element at start\n            result.add(lst.get(start));\n            // If start is not equal to end, add the element at end\n            if (start != end) {\n                result.add(lst.get(end));\n            }\n            // Move pointers\n            start++;\n            end--;\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/71", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public double triangle_area(double a, double b, double c) {\n           if (!is_valid_triangle(a, b, c)) {\n               return -1;\n           }\n           double s = (a + b + c) / 2;\n           double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n           return Math.round(area * 100.0) / 100.0;\n       }\n\n       private boolean is_valid_triangle(double a, double b, double c) {\n           return a + b > c && a + c > b && b + c > a;\n       }\n   }\n   "}
{"task_id": "Java/72", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean will_it_fly(List<Integer> q, int w) {\n        // Check if the list is empty\n        if (q.isEmpty()) {\n            return false;\n        }\n\n        // Calculate the sum of the elements in q\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n\n        // Check if the sum is greater than the maximum possible weight\n        if (sum > w) {\n            return false;\n        }\n\n        // Create a reversed version of q\n        List<Integer> reversedQ = new ArrayList<>(q);\n        Collections.reverse(reversedQ);\n\n        // Check if q is palindromic\n        return q.equals(reversedQ);\n    }\n}\n"}
{"task_id": "Java/73", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int smallest_change(List<Integer> arr) {\n           int left = 0;\n           int right = arr.size() - 1;\n           int change_count = 0;\n\n           while (left < right) {\n               if (!arr.get(left).equals(arr.get(right))) {\n                   change_count++;\n               }\n               left++;\n               right--;\n           }\n\n           return change_count;\n       }\n   }\n   "}
{"task_id": "Java/74", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<String> total_match(List<String> lst1, List<String> lst2) {\n           int total_chars_lst1 = 0;\n           int total_chars_lst2 = 0;\n           \n           // Calculate total characters in lst1\n           for (String str : lst1) {\n               total_chars_lst1 += str.length();\n           }\n           \n           // Calculate total characters in lst2\n           for (String str : lst2) {\n               total_chars_lst2 += str.length();\n           }\n           \n           // Compare totals and return the appropriate list\n           if (total_chars_lst1 <= total_chars_lst2) {\n               return lst1;\n           } else {\n               return lst2;\n           }\n       }\n   }\n   "}
{"task_id": "Java/75", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean is_multiply_prime(int a) {\n           List<Integer> primes = generatePrimesLessThan100();\n           for (int i = 0; i < primes.size(); i++) {\n               for (int j = i; j < primes.size(); j++) {\n                   for (int k = j; k < primes.size(); k++) {\n                       if (primes.get(i) * primes.get(j) * primes.get(k) == a) {\n                           return true;\n                       }\n                   }\n               }\n           }\n           return false;\n       }\n\n       private List<Integer> generatePrimesLessThan100() {\n           List<Integer> primes = new ArrayList<>();\n           for (int i = 2; i < 100; i++) {\n               if (is_prime(i)) {\n                   primes.add(i);\n               }\n           }\n           return primes;\n       }\n\n       private boolean is_prime(int n) {\n           if (n <= 1) {\n               return false;\n           }\n           for (int i = 2; i <= Math.sqrt(n); i++) {\n               if (n % i == 0) {\n                   return false;\n               }\n           }\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/76", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean is_simple_power(int x, int n) {\n           if (n == 1) {\n               return x == 1;\n           }\n           int power = 1;\n           while (power < x) {\n               power *= n;\n               if (power == x) {\n                   return true;\n               }\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/77", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean iscube(int a) {\n           if (a == 0) {\n               return true;\n           }\n           int n = 0;\n           while (n * n * n <= Math.abs(a)) {\n               if (n * n * n == a || n * n * n == -a) {\n                   return true;\n               }\n               n++;\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/78", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int hex_key(String num) {\n        // List of prime hexadecimal digits in decimal form\n        Set<Integer> primeHexDigits = new HashSet<>(Arrays.asList(2, 3, 5, 7, 11, 13));\n        \n        // Initialize the counter\n        int count = 0;\n        \n        // Iterate through each character in the string\n        for (char ch : num.toCharArray()) {\n            int decimalValue;\n            \n            // Convert the character to its decimal equivalent\n            if (ch >= '0' && ch <= '9') {\n                decimalValue = ch - '0';\n            } else if (ch >= 'A' && ch <= 'F') {\n                decimalValue = ch - 'A' + 10;\n            } else {\n                continue; // Skip invalid characters (though the problem guarantees valid input)\n            }\n            \n            // Check if the decimal value is a prime number\n            if (primeHexDigits.contains(decimalValue)) {\n                count++;\n            }\n        }\n        \n        // Return the count of prime hexadecimal digits\n        return count;\n    }\n}\n"}
{"task_id": "Java/79", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String decimal_to_binary(int decimal) {\n        // Convert decimal to binary string\n        String binaryString = Integer.toBinaryString(decimal);\n        \n        // Format the binary string with 'db' at the beginning and end\n        String formattedBinaryString = \"db\" + binaryString + \"db\";\n        \n        // Return the formatted string\n        return formattedBinaryString;\n    }\n}\n"}
{"task_id": "Java/80", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean is_happy(String s) {\n           // Check if the length of the string is less than 3\n           if (s.length() < 3) {\n               return false;\n           }\n           \n           // Iterate through the string and check every set of 3 consecutive characters\n           for (int i = 0; i <= s.length() - 3; i++) {\n               char first = s.charAt(i);\n               char second = s.charAt(i + 1);\n               char third = s.charAt(i + 2);\n               \n               // Check if any of the 3 consecutive characters are the same\n               if (first == second || first == third || second == third) {\n                   return false;\n               }\n           }\n           \n           // If all sets of 3 consecutive characters are distinct, return true\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/81", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        \n        for (Double gpa : grades) {\n            if (gpa == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        \n        return letterGrades;\n    }\n}\n"}
{"task_id": "Java/82", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean prime_length(String string) {\n           int length = string.length();\n           if (length <= 1) {\n               return false;\n           }\n           for (int i = 2; i <= Math.sqrt(length); i++) {\n               if (length % i == 0) {\n                   return false;\n               }\n           }\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/83", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int starts_one_ends(int n) {\n        // If n is 1, the only number is '1'\n        if (n == 1) {\n            return 1;\n        }\n        \n        // Calculate the number of n-digit numbers\n        int total_n_digit_numbers = (int) Math.pow(10, n);\n        \n        // Calculate the number of n-digit numbers that start with '1'\n        int start_with_one = (int) Math.pow(10, n - 1);\n        \n        // Calculate the number of n-digit numbers that end with '1'\n        int end_with_one = (int) Math.pow(10, n - 1);\n        \n        // Total count is the sum of both\n        return start_with_one + end_with_one;\n    }\n}\n"}
{"task_id": "Java/84", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(int N) {\n        // Initialize sum to 0\n        int sum = 0;\n        \n        // Convert N to string to iterate through each digit\n        String NStr = Integer.toString(N);\n        \n        // Loop through each character in the string representation of N\n        for (char ch : NStr.toCharArray()) {\n            // Convert character to integer and add to sum\n            sum += Character.getNumericValue(ch);\n        }\n        \n        // Convert sum to binary string\n        String binarySum = Integer.toBinaryString(sum);\n        \n        // Return the binary string\n        return binarySum;\n    }\n}\n"}
{"task_id": "Java/85", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int add(List<Integer> lst) {\n           int sum = 0;\n           for (int i = 0; i < lst.size(); i++) {\n               if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                   sum += lst.get(i);\n               }\n           }\n           return sum;\n       }\n   }\n   "}
{"task_id": "Java/86", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String anti_shuffle(String s) {\n           // Split the string into words\n           String[] words = s.split(\" \");\n           \n           // Process each word\n           for (int i = 0; i < words.length; i++) {\n               // Convert word to char array, sort it, and convert back to string\n               char[] chars = words[i].toCharArray();\n               Arrays.sort(chars);\n               words[i] = new String(chars);\n           }\n           \n           // Join the sorted words with spaces\n           return String.join(\" \", words);\n       }\n   }\n   "}
{"task_id": "Java/87", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n           List<List<Integer>> coordinates = new ArrayList<>();\n           \n           // Iterate through each row and each element to find occurrences of x\n           for (int i = 0; i < lst.size(); i++) {\n               List<Integer> row = lst.get(i);\n               for (int j = 0; j < row.size(); j++) {\n                   if (row.get(j) == x) {\n                       coordinates.add(Arrays.asList(i, j));\n                   }\n               }\n           }\n           \n           // Sort coordinates first by row (ascending) and then by column (descending) within the same row\n           coordinates.sort((a, b) -> {\n               if (a.get(0).equals(b.get(0))) {\n                   return b.get(1).compareTo(a.get(1));\n               }\n               return a.get(0).compareTo(b.get(0));\n           });\n           \n           return coordinates;\n       }\n   }\n   "}
{"task_id": "Java/88", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> sort_array(List<Integer> array) {\n           if (array.isEmpty()) {\n               return new ArrayList<>();\n           }\n           \n           int first = array.get(0);\n           int last = array.get(array.size() - 1);\n           int sum = first + last;\n           \n           List<Integer> copy = new ArrayList<>(array);\n           \n           if (sum % 2 != 0) {\n               // Sum is odd, sort in ascending order\n               Collections.sort(copy);\n           } else {\n               // Sum is even, sort in descending order\n               Collections.sort(copy, Collections.reverseOrder());\n           }\n           \n           return copy;\n       }\n   }\n   "}
{"task_id": "Java/89", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String encrypt(String s) {\n           StringBuilder result = new StringBuilder();\n           for (char c : s.toCharArray()) {\n               if (Character.isLowerCase(c)) {\n                   char new_char = (char) ((c + 4 - 'a') % 26 + 'a');\n                   result.append(new_char);\n               } else if (Character.isUpperCase(c)) {\n                   char new_char = (char) ((c + 4 - 'A') % 26 + 'A');\n                   result.append(new_char);\n               } else {\n                   result.append(c);\n               }\n           }\n           return result.toString();\n       }\n   }\n   "}
{"task_id": "Java/90", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        // Convert list to set to remove duplicates\n        Set<Integer> uniqueElements = new HashSet<>(lst);\n        \n        // Convert set back to list\n        List<Integer> uniqueList = new ArrayList<>(uniqueElements);\n        \n        // Sort the list\n        Collections.sort(uniqueList);\n        \n        // Check if there are at least 2 unique elements\n        if (uniqueList.size() >= 2) {\n            return Optional.of(uniqueList.get(1)); // Return the 2nd smallest element\n        } else {\n            return Optional.empty(); // Return empty if there is no 2nd smallest element\n        }\n    }\n}\n"}
{"task_id": "Java/91", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int is_bored(String S) {\n        // Split the string into sentences using delimiters '.', '?', and '!'\n        String[] sentences = S.split(\"[.?!]\");\n        \n        // Initialize a counter for boredoms\n        int boredomCount = 0;\n        \n        // Iterate through each sentence\n        for (String sentence : sentences) {\n            // Trim any leading or trailing whitespace\n            sentence = sentence.trim();\n            \n            // Check if the sentence starts with \"I\"\n            if (sentence.startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n        \n        // Return the count of boredoms\n        return boredomCount;\n    }\n}\n"}
{"task_id": "Java/92", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean any_int(Object x, Object y, Object z) {\n           // Check if all three objects are instances of Integer\n           if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n               // Convert objects to integers\n               int intX = (Integer) x;\n               int intY = (Integer) y;\n               int intZ = (Integer) z;\n               \n               // Check if any one of the integers is equal to the sum of the other two\n               if (intX == intY + intZ || intY == intX + intZ || intZ == intX + intY) {\n                   return true;\n               }\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/93", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String encode(String message) {\n           Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n           StringBuilder result = new StringBuilder();\n           \n           for (char ch : message.toCharArray()) {\n               if (vowels.contains(ch)) {\n                   ch = getNextLetter(ch, 2);\n               }\n               ch = swapCase(ch);\n               result.append(ch);\n           }\n           \n           return result.toString();\n       }\n       \n       private char getNextLetter(char ch, int steps) {\n           int base = Character.isLowerCase(ch) ? 'a' : 'A';\n           return (char) ((ch - base + steps) % 26 + base);\n       }\n       \n       private char swapCase(char ch) {\n           if (Character.isLowerCase(ch)) {\n               return Character.toUpperCase(ch);\n           } else {\n               return Character.toLowerCase(ch);\n           }\n       }\n   }\n   "}
{"task_id": "Java/94", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean isPrime(int number) {\n           if (number <= 1) {\n               return false;\n           }\n           for (int i = 2; i <= Math.sqrt(number); i++) {\n               if (number % i == 0) {\n                   return false;\n               }\n           }\n           return true;\n       }\n\n       public int sumOfDigits(int number) {\n           int sum = 0;\n           while (number > 0) {\n               sum += number % 10;\n               number /= 10;\n           }\n           return sum;\n       }\n\n       public int skjkasdkd(List<Integer> lst) {\n           int largestPrime = -1;\n           for (int number : lst) {\n               if (isPrime(number) && number > largestPrime) {\n                   largestPrime = number;\n               }\n           }\n           if (largestPrime == -1) {\n               return 0;\n           }\n           return sumOfDigits(largestPrime);\n       }\n   }\n   "}
{"task_id": "Java/95", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean check_dict_case(Map<Object, Object> dict) {\n           if (dict.isEmpty()) {\n               return false;\n           }\n           for (Object key : dict.keySet()) {\n               if (!(key instanceof String)) {\n                   return false;\n               }\n               String strKey = (String) key;\n               if (!strKey.equals(strKey.toLowerCase()) && !strKey.equals(strKey.toUpperCase())) {\n                   return false;\n               }\n           }\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/96", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<>();\n        if (n < 2) {\n            return primes;\n        }\n\n        boolean[] isPrime = new boolean[n];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = isPrime[1] = false; // 0 and 1 are not prime numbers\n\n        for (int i = 2; i * i < n; i++) {\n            if (isPrime[i]) {\n                for (int j = i * i; j < n; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n\n        for (int i = 2; i < n; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n            }\n        }\n\n        return primes;\n    }\n}\n"}
{"task_id": "Java/97", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int multiply(int a, int b) {\n           int unit_digit_a = Math.abs(a) % 10;\n           int unit_digit_b = Math.abs(b) % 10;\n           return unit_digit_a * unit_digit_b;\n       }\n   }\n   "}
{"task_id": "Java/98", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int count_upper(String s) {\n           int count = 0;\n           for (int i = 0; i < s.length(); i += 2) {\n               char ch = s.charAt(i);\n               if (ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U') {\n                   count++;\n               }\n           }\n           return count;\n       }\n   }\n   "}
{"task_id": "Java/99", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int closest_integer(String value) {\n           double number = Double.parseDouble(value);\n           double fractionalPart = number - Math.floor(number);\n\n           if (fractionalPart == 0.5) {\n               if (number > 0) {\n                   return (int) Math.ceil(number);\n               } else {\n                   return (int) Math.floor(number);\n               }\n           } else {\n               return (int) Math.round(number);\n           }\n       }\n   }\n   "}
{"task_id": "Java/100", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> make_a_pile(int n) {\n           List<Integer> pile = new ArrayList<>();\n           int currentStones = n;\n           for (int i = 0; i < n; i++) {\n               pile.add(currentStones);\n               currentStones += 2; // Increment by 2 for both odd and even n\n           }\n           return pile;\n       }\n   }\n   "}
{"task_id": "Java/101", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> words_string(String s) {\n        // Define the delimiters as a regular expression (commas or spaces)\n        String[] words = s.split(\",|\\\\s+\");\n        \n        // Convert the array to a list\n        List<String> wordList = new ArrayList<>(Arrays.asList(words));\n        \n        // Return the list of words\n        return wordList;\n    }\n}\n"}
{"task_id": "Java/102", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int choose_num(int x, int y) {\n           // Ensure x is less than or equal to y\n           if (x > y) {\n               return -1;\n           }\n           \n           // Iterate from y down to x\n           for (int i = y; i >= x; i--) {\n               // Check if the number is even\n               if (i % 2 == 0) {\n                   return i;\n               }\n           }\n           \n           // If no even number is found, return -1\n           return -1;\n       }\n   }\n   "}
{"task_id": "Java/103", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public Object rounded_avg(int n, int m) {\n           if (n > m) {\n               return -1;\n           }\n           \n           int sum = 0;\n           int count = m - n + 1;\n           \n           for (int i = n; i <= m; i++) {\n               sum += i;\n           }\n           \n           double average = (double) sum / count;\n           int rounded_average = (int) Math.round(average);\n           String binary_representation = Integer.toBinaryString(rounded_average);\n           \n           return binary_representation;\n       }\n   }\n   "}
{"task_id": "Java/104", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> unique_digits(List<Integer> x) {\n           List<Integer> result = new ArrayList<>();\n           \n           for (int num : x) {\n               if (!containsEvenDigit(num)) {\n                   result.add(num);\n               }\n           }\n           \n           Collections.sort(result);\n           return result;\n       }\n       \n       private boolean containsEvenDigit(int num) {\n           while (num > 0) {\n               int digit = num % 10;\n               if (digit % 2 == 0) {\n                   return true;\n               }\n               num /= 10;\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/105", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<String> by_length(List<Integer> arr) {\n           // List to store valid numbers between 1 and 9\n           List<Integer> validNumbers = new ArrayList<>();\n           \n           // Iterate through the input array and filter valid numbers\n           for (int num : arr) {\n               if (num >= 1 && num <= 9) {\n                   validNumbers.add(num);\n               }\n           }\n           \n           // Sort the valid numbers\n           Collections.sort(validNumbers);\n           \n           // Reverse the sorted list\n           Collections.reverse(validNumbers);\n           \n           // List to store the result\n           List<String> result = new ArrayList<>();\n           \n           // Map each number to its corresponding name\n           Map<Integer, String> numberToName = new HashMap<>();\n           numberToName.put(1, \"One\");\n           numberToName.put(2, \"Two\");\n           numberToName.put(3, \"Three\");\n           numberToName.put(4, \"Four\");\n           numberToName.put(5, \"Five\");\n           numberToName.put(6, \"Six\");\n           numberToName.put(7, \"Seven\");\n           numberToName.put(8, \"Eight\");\n           numberToName.put(9, \"Nine\");\n           \n           // Iterate through the reversed list and add corresponding names to the result\n           for (int num : validNumbers) {\n               result.add(numberToName.get(num));\n           }\n           \n           return result;\n       }\n   }\n   "}
{"task_id": "Java/106", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> f(int n) {\n           List<Integer> result = new ArrayList<>();\n           \n           for (int i = 1; i <= n; i++) {\n               if (i % 2 == 0) {\n                   // Calculate factorial of i\n                   int factorial = 1;\n                   for (int j = 1; j <= i; j++) {\n                       factorial *= j;\n                   }\n                   result.add(factorial);\n               } else {\n                   // Calculate sum of numbers from 1 to i\n                   int sum = 0;\n                   for (int j = 1; j <= i; j++) {\n                       sum += j;\n                   }\n                   result.add(sum);\n               }\n           }\n           \n           return result;\n       }\n   }\n   "}
{"task_id": "Java/107", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> even_odd_palindrome(int n) {\n           int even_count = 0;\n           int odd_count = 0;\n\n           for (int i = 1; i <= n; i++) {\n               String str = Integer.toString(i);\n               String reversedStr = new StringBuilder(str).reverse().toString();\n\n               if (str.equals(reversedStr)) {\n                   if (i % 2 == 0) {\n                       even_count++;\n                   } else {\n                       odd_count++;\n                   }\n               }\n           }\n\n           List<Integer> result = new ArrayList<>();\n           result.add(even_count);\n           result.add(odd_count);\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/108", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int count_nums(List<Integer> arr) {\n           int count = 0;\n           for (int num : arr) {\n               int sum = 0;\n               boolean is_negative = num < 0;\n               num = Math.abs(num);\n               while (num > 0) {\n                   int digit = num % 10;\n                   if (is_negative) {\n                       sum -= digit;\n                   } else {\n                       sum += digit;\n                   }\n                   num /= 10;\n               }\n               if (sum > 0) {\n                   count++;\n               }\n           }\n           return count;\n       }\n   }\n   "}
{"task_id": "Java/109", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean move_one_ball(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        int n = arr.size();\n        int rotationIndex = -1;\n\n        // Find the rotation point\n        for (int i = 0; i < n - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                rotationIndex = i;\n                break;\n            }\n        }\n\n        // If no rotation point found, the array is already sorted\n        if (rotationIndex == -1) {\n            return true;\n        }\n\n        // Check if the subarrays are sorted\n        for (int i = rotationIndex + 1; i < n - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                return false;\n            }\n        }\n\n        // Check if the last element of the first part is <= the first element of the second part\n        return arr.get(n - 1) <= arr.get(0);\n    }\n}\n"}
{"task_id": "Java/110", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String exchange(List<Integer> lst1, List<Integer> lst2) {\n           int count_odd_in_lst1 = 0;\n           int count_even_in_lst2 = 0;\n           \n           for (int num : lst1) {\n               if (num % 2 != 0) {\n                   count_odd_in_lst1++;\n               }\n           }\n           \n           for (int num : lst2) {\n               if (num % 2 == 0) {\n                   count_even_in_lst2++;\n               }\n           }\n           \n           if (count_even_in_lst2 >= count_odd_in_lst1) {\n               return \"YES\";\n           } else {\n               return \"NO\";\n           }\n       }\n   }\n   "}
{"task_id": "Java/111", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public Map<String, Integer> histogram(String test) {\n           if (test.isEmpty()) {\n               return new HashMap<>();\n           }\n\n           Map<String, Integer> letterCounts = new HashMap<>();\n           String[] letters = test.split(\" \");\n\n           for (String letter : letters) {\n               letterCounts.put(letter, letterCounts.getOrDefault(letter, 0) + 1);\n           }\n\n           int maxCount = Collections.max(letterCounts.values());\n           Map<String, Integer> result = new HashMap<>();\n\n           for (Map.Entry<String, Integer> entry : letterCounts.entrySet()) {\n               if (entry.getValue() == maxCount) {\n                   result.put(entry.getKey(), entry.getValue());\n               }\n           }\n\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/112", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Object> reverse_delete(String s, String c) {\n           // Create a set from characters in c\n           Set<Character> charSet = new HashSet<>();\n           for (char ch : c.toCharArray()) {\n               charSet.add(ch);\n           }\n\n           // Initialize an empty result string\n           StringBuilder result = new StringBuilder();\n\n           // Iterate through s and build the result string\n           for (char ch : s.toCharArray()) {\n               if (!charSet.contains(ch)) {\n                   result.append(ch);\n               }\n           }\n\n           // Check if the result string is a palindrome\n           String resultStr = result.toString();\n           String reversedStr = new StringBuilder(resultStr).reverse().toString();\n           boolean isPalindrome = resultStr.equals(reversedStr);\n\n           // Return the result string and the palindrome check result\n           List<Object> resultList = new ArrayList<>();\n           resultList.add(resultStr);\n           resultList.add(isPalindrome);\n           return resultList;\n       }\n   }\n   "}
{"task_id": "Java/113", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int oddCount = 0;\n            \n            // Count the number of odd digits in the string\n            for (char ch : str.toCharArray()) {\n                if (Character.getNumericValue(ch) % 2 != 0) {\n                    oddCount++;\n                }\n            }\n            \n            // Construct the output string\n            String output = String.format(\"the number of odd elements %dn the str%dng %d of the %dnput.\", oddCount, oddCount, oddCount, oddCount);\n            result.add(output);\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/114", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int minSubArraySum(List<Integer> nums) {\n        // Edge case: if the list is empty, return 0\n        if (nums == null || nums.size() == 0) {\n            return 0;\n        }\n\n        // Initialize variables\n        int min_ending_here = nums.get(0);\n        int min_so_far = nums.get(0);\n\n        // Iterate through the list starting from the second element\n        for (int i = 1; i < nums.size(); i++) {\n            int current = nums.get(i);\n            // Update min_ending_here\n            min_ending_here = Math.min(current, min_ending_here + current);\n            // Update min_so_far\n            min_so_far = Math.min(min_so_far, min_ending_here);\n        }\n\n        // Return the minimum sub-array sum found\n        return min_so_far;\n    }\n}\n"}
{"task_id": "Java/115", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int max_fill(List<List<Integer>> grid, int capacity) {\n           int total_lowers = 0;\n           for (List<Integer> row : grid) {\n               int water_units = 0;\n               for (int unit : row) {\n                   if (unit == 1) {\n                       water_units++;\n                   }\n               }\n               int lowers_needed = (int) Math.ceil((double) water_units / capacity);\n               total_lowers += lowers_needed;\n           }\n           return total_lowers;\n       }\n   }\n   "}
{"task_id": "Java/116", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> arr) {\n        // Custom comparator to sort based on number of ones in binary representation\n        Comparator<Integer> customComparator = new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                // Count number of ones in binary representation\n                int countOnesA = Integer.bitCount(a);\n                int countOnesB = Integer.bitCount(b);\n                \n                // Compare based on number of ones\n                if (countOnesA != countOnesB) {\n                    return countOnesA - countOnesB;\n                }\n                \n                // If number of ones is the same, compare based on decimal value\n                return a - b;\n            }\n        };\n        \n        // Sort the array using the custom comparator\n        Collections.sort(arr, customComparator);\n        \n        return arr;\n    }\n}\n"}
{"task_id": "Java/117", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<String> select_words(String s, int n) {\n           // Return an empty list if the input string is empty\n           if (s.isEmpty()) {\n               return new ArrayList<>();\n           }\n\n           // Initialize the result list\n           List<String> result = new ArrayList<>();\n\n           // Split the string into words\n           String[] words = s.split(\" \");\n\n           // Define a set of vowels for consonant checking\n           Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n\n           // Iterate through each word\n           for (String word : words) {\n               int consonantCount = 0;\n\n               // Count the number of consonants in the word\n               for (char c : word.toCharArray()) {\n                   if (!vowels.contains(c) && Character.isLetter(c)) {\n                       consonantCount++;\n                   }\n               }\n\n               // If the word has exactly n consonants, add it to the result list\n               if (consonantCount == n) {\n                   result.add(word);\n               }\n           }\n\n           // Return the result list\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/118", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String get_closest_vowel(String word) {\n           Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n           Set<Character> consonants = new HashSet<>(Arrays.asList('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z', 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'));\n           \n           for (int i = word.length() - 1; i > 0; i--) {\n               if (vowels.contains(word.charAt(i))) {\n                   if (i < word.length() - 1 && consonants.contains(word.charAt(i - 1)) && consonants.contains(word.charAt(i + 1))) {\n                       return String.valueOf(word.charAt(i));\n                   }\n               }\n           }\n           return \"\";\n       }\n   }\n   "}
{"task_id": "Java/119", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String match_parens(List<String> lst) {\n        // Initialize counters for open and close parentheses\n        int open1 = 0, close1 = 0, open2 = 0, close2 = 0;\n        \n        // Count parentheses in the first string\n        for (char c : lst.get(0).toCharArray()) {\n            if (c == '(') open1++;\n            else close1++;\n        }\n        \n        // Count parentheses in the second string\n        for (char c : lst.get(1).toCharArray()) {\n            if (c == '(') open2++;\n            else close2++;\n        }\n        \n        // Total open and close parentheses\n        int totalOpen = open1 + open2;\n        int totalClose = close1 + close2;\n        \n        // Check if the total number of open parentheses equals the total number of close parentheses\n        if (totalOpen == totalClose) {\n            return \"Yes\";\n        }\n        \n        // Check if the difference can be balanced by swapping the order of concatenation\n        if (Math.abs(totalOpen - totalClose) == Math.abs(open1 - close1) + Math.abs(open2 - close2)) {\n            return \"Yes\";\n        }\n        \n        // If neither condition is met, return \"No\"\n        return \"No\";\n    }\n}\n"}
{"task_id": "Java/120", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Initialize a max-heap\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n        \n        // Add all elements of the array to the max-heap\n        for (int num : arr) {\n            maxHeap.add(num);\n        }\n        \n        // Extract the top k elements from the max-heap\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            result.add(maxHeap.poll());\n        }\n        \n        // Sort the extracted elements in ascending order\n        Collections.sort(result);\n        \n        // Return the sorted list\n        return result;\n    }\n}\n"}
{"task_id": "Java/121", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int solution(List<Integer> lst) {\n           int sum = 0;\n           for (int i = 0; i < lst.size(); i++) {\n               if (i % 2 == 0) { // Check if the position is even\n                   if (lst.get(i) % 2 != 0) { // Check if the element is odd\n                       sum += lst.get(i);\n                   }\n               }\n           }\n           return sum;\n       }\n   }\n   "}
{"task_id": "Java/122", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int add_elements(List<Integer> arr, int k) {\n           int sum = 0;\n           for (int i = 0; i < k; i++) {\n               int num = arr.get(i);\n               if (num >= 0 && num <= 99) {\n                   sum += num;\n               }\n           }\n           return sum;\n       }\n   }\n   "}
{"task_id": "Java/123", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> get_odd_collatz(int n) {\n        List<Integer> odd_numbers = new ArrayList<>();\n        \n        while (n != 1) {\n            if (n % 2 != 0) { // Check if n is odd\n                odd_numbers.add(n);\n            }\n            if (n % 2 == 0) { // If n is even\n                n = n / 2;\n            } else { // If n is odd\n                n = 3 * n + 1;\n            }\n        }\n        \n        // Add 1 to the list since it is always the last number in the sequence\n        odd_numbers.add(1);\n        \n        // Sort the list in increasing order\n        Collections.sort(odd_numbers);\n        \n        return odd_numbers;\n    }\n}\n"}
{"task_id": "Java/124", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean valid_date(String date) {\n           if (date.isEmpty()) {\n               return false;\n           }\n           \n           // Check if the date matches the format \"mm-dd-yyyy\"\n           if (!date.matches(\"\\\\d{2}-\\\\d{2}-\\\\d{4}\")) {\n               return false;\n           }\n           \n           // Split the date into month, day, and year\n           String[] parts = date.split(\"-\");\n           int month = Integer.parseInt(parts[0]);\n           int day = Integer.parseInt(parts[1]);\n           int year = Integer.parseInt(parts[2]);\n           \n           // Validate month\n           if (month < 1 || month > 12) {\n               return false;\n           }\n           \n           // Validate day based on month\n           int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n           if (month == 2) { // February\n               if (isLeapYear(year)) {\n                   if (day < 1 || day > 29) {\n                       return false;\n                   }\n               } else {\n                   if (day < 1 || day > 28) {\n                       return false;\n                   }\n               }\n           } else {\n               if (day < 1 || day > daysInMonth[month - 1]) {\n                   return false;\n               }\n           }\n           \n           return true;\n       }\n       \n       private boolean isLeapYear(int year) {\n           if (year % 4 == 0) {\n               if (year % 100 == 0) {\n                   if (year % 400 == 0) {\n                       return true;\n                   } else {\n                       return false;\n                   }\n               } else {\n                   return true;\n               }\n           } else {\n               return false;\n           }\n       }\n   }\n   "}
{"task_id": "Java/125", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object split_words(String txt) {\n        // Check for whitespace\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\"\\\\s+\"));\n        }\n        // Check for commas\n        else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        }\n        // Count lowercase letters with odd positions in the alphabet\n        else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c)) {\n                    int position = c - 'a';\n                    if (position % 2 == 1) {\n                        count++;\n                    }\n                }\n            }\n            return count;\n        }\n    }\n}\n"}
{"task_id": "Java/126", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_sorted(List<Integer> lst) {\n        // Edge case: if the list has only one element, it is trivially sorted\n        if (lst.size() <= 1) {\n            return true;\n        }\n\n        // Map to count occurrences of each number\n        Map<Integer, Integer> countMap = new HashMap<>();\n\n        // Iterate through the list\n        for (int i = 0; i < lst.size() - 1; i++) {\n            int current = lst.get(i);\n            int next = lst.get(i + 1);\n\n            // Check if the list is not sorted\n            if (current > next) {\n                return false;\n            }\n\n            // Update the count of the current number\n            countMap.put(current, countMap.getOrDefault(current, 0) + 1);\n\n            // Check if the count exceeds 2\n            if (countMap.get(current) > 2) {\n                return false;\n            }\n        }\n\n        // Update the count of the last element\n        int lastElement = lst.get(lst.size() - 1);\n        countMap.put(lastElement, countMap.getOrDefault(lastElement, 0) + 1);\n\n        // Check if the count of the last element exceeds 2\n        if (countMap.get(lastElement) > 2) {\n            return false;\n        }\n\n        // If all checks pass, the list is sorted and valid\n        return true;\n    }\n}\n"}
{"task_id": "Java/127", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String intersection(List<Integer> interval1, List<Integer> interval2) {\n           int start1 = interval1.get(0);\n           int end1 = interval1.get(1);\n           int start2 = interval2.get(0);\n           int end2 = interval2.get(1);\n           \n           int intersectionStart = Math.max(start1, start2);\n           int intersectionEnd = Math.min(end1, end2);\n           \n           if (intersectionStart > intersectionEnd) {\n               return \"NO\";\n           }\n           \n           int intersectionLength = intersectionEnd - intersectionStart + 1;\n           \n           if (isPrime(intersectionLength)) {\n               return \"YES\";\n           } else {\n               return \"NO\";\n           }\n       }\n       \n       private boolean isPrime(int n) {\n           if (n <= 1) {\n               return false;\n           }\n           for (int i = 2; i <= Math.sqrt(n); i++) {\n               if (n % i == 0) {\n                   return false;\n               }\n           }\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/128", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public Optional<Integer> prod_signs(List<Integer> arr) {\n           if (arr.isEmpty()) {\n               return Optional.empty();\n           }\n\n           int sum_of_magnitudes = 0;\n           int sign_product = 1;\n\n           for (int num : arr) {\n               sum_of_magnitudes += Math.abs(num);\n               if (num == 0) {\n                   sign_product = 0;\n                   break;\n               } else if (num < 0) {\n                   sign_product *= -1;\n               }\n           }\n\n           if (sign_product == 0) {\n               return Optional.of(0);\n           } else {\n               return Optional.of(sum_of_magnitudes * sign_product);\n           }\n       }\n   }\n   "}
{"task_id": "Java/129", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int N = grid.size();\n        List<Integer> bestPath = null;\n        \n        // Directions for moving up, down, left, right\n        int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n        \n        // Queue for BFS\n        Queue<List<Object>> queue = new LinkedList<>();\n        \n        // Start BFS from each cell\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < N; j++) {\n                List<Integer> initialPath = new ArrayList<>();\n                initialPath.add(grid.get(i).get(j));\n                queue.add(Arrays.asList(i, j, initialPath));\n            }\n        }\n        \n        while (!queue.isEmpty()) {\n            List<Object> current = queue.poll();\n            int x = (int) current.get(0);\n            int y = (int) current.get(1);\n            List<Integer> path = (List<Integer>) current.get(2);\n            \n            // If path length is k, compare and update bestPath\n            if (path.size() == k) {\n                if (bestPath == null || isLexicographicallySmaller(path, bestPath)) {\n                    bestPath = new ArrayList<>(path);\n                }\n                continue;\n            }\n            \n            // Explore neighbors\n            for (int[] dir : directions) {\n                int newX = x + dir[0];\n                int newY = y + dir[1];\n                \n                if (newX >= 0 && newX < N && newY >= 0 && newY < N) {\n                    List<Integer> newPath = new ArrayList<>(path);\n                    newPath.add(grid.get(newX).get(newY));\n                    queue.add(Arrays.asList(newX, newY, newPath));\n                }\n            }\n        }\n        \n        return bestPath;\n    }\n    \n    private boolean isLexicographicallySmaller(List<Integer> path1, List<Integer> path2) {\n        for (int i = 0; i < path1.size(); i++) {\n            if (path1.get(i) < path2.get(i)) {\n                return true;\n            } else if (path1.get(i) > path2.get(i)) {\n                return false;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/130", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n        List<Integer> tribonacciSequence = new ArrayList<>();\n        \n        // Base cases\n        tribonacciSequence.add(1); // tri(0) = 1\n        tribonacciSequence.add(3); // tri(1) = 3\n        \n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                // Even index\n                tribonacciSequence.add(1 + i / 2);\n            } else {\n                // Odd index\n                int prev = tribonacciSequence.get(i - 1);\n                int prevPrev = tribonacciSequence.get(i - 2);\n                int next = tribonacciSequence.get(i + 1);\n                tribonacciSequence.add(prev + prevPrev + next);\n            }\n        }\n        \n        return tribonacciSequence;\n    }\n}\n"}
{"task_id": "Java/131", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digits(int n) {\n        String numStr = Integer.toString(n);\n        int product = 1;\n        boolean oddFound = false;\n        \n        for (char ch : numStr.toCharArray()) {\n            int digit = Character.getNumericValue(ch);\n            if (digit % 2 != 0) {\n                product *= digit;\n                oddFound = true;\n            }\n        }\n        \n        if (!oddFound) {\n            return 0;\n        }\n        \n        return product;\n    }\n}\n"}
{"task_id": "Java/132", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean is_nested(String string) {\n           Stack<Character> stack = new Stack<>();\n           for (char ch : string.toCharArray()) {\n               if (ch == '[') {\n                   stack.push(ch);\n               } else if (ch == ']') {\n                   if (!stack.isEmpty() && stack.peek() == '[') {\n                       stack.pop();\n                       if (!stack.isEmpty() && stack.peek() == '[') {\n                           return true;\n                       }\n                   } else {\n                       stack.push(ch);\n                   }\n               }\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/133", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int sum_squares(List<Double> lst) {\n           int sum = 0;\n           for (Double num : lst) {\n               int roundedNum = (int) Math.ceil(num);\n               sum += roundedNum * roundedNum;\n           }\n           return sum;\n       }\n   }\n   "}
{"task_id": "Java/134", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean check_if_last_char_is_a_letter(String txt) {\n           if (txt.isEmpty()) {\n               return false;\n           }\n\n           char last_char = txt.charAt(txt.length() - 1);\n           if (Character.isLetter(last_char)) {\n               if (txt.length() == 1 || txt.charAt(txt.length() - 2) == ' ') {\n                   return true;\n               } else {\n                   return false;\n               }\n           } else {\n               return false;\n           }\n       }\n   }\n   "}
{"task_id": "Java/135", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int can_arrange(List<Integer> arr) {\n           int maxIndex = -1;\n           for (int i = 1; i < arr.size(); i++) {\n               if (arr.get(i) < arr.get(i - 1)) {\n                   maxIndex = i;\n               }\n           }\n           return maxIndex;\n       }\n   }\n   "}
{"task_id": "Java/136", "generation": "import java.util.*;\nimport java.util.Optional;\n\nclass Solution {\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        Optional<Integer> largestNegative = Optional.empty();\n        Optional<Integer> smallestPositive = Optional.empty();\n\n        for (Integer num : lst) {\n            if (num < 0) {\n                if (!largestNegative.isPresent() || num > largestNegative.get()) {\n                    largestNegative = Optional.of(num);\n                }\n            } else if (num > 0) {\n                if (!smallestPositive.isPresent() || num < smallestPositive.get()) {\n                    smallestPositive = Optional.of(num);\n                }\n            }\n        }\n\n        List<Optional<Integer>> result = new ArrayList<>();\n        result.add(largestNegative);\n        result.add(smallestPositive);\n        return result;\n    }\n}\n"}
{"task_id": "Java/137", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public Optional<Object> compare_one(Object a, Object b) {\n           // Convert both objects to double for comparison\n           double valA = convertToDouble(a);\n           double valB = convertToDouble(b);\n\n           // Compare the values\n           if (valA > valB) {\n               return Optional.of(a);\n           } else if (valB > valA) {\n               return Optional.of(b);\n           } else {\n               return Optional.empty();\n           }\n       }\n\n       private double convertToDouble(Object obj) {\n           if (obj instanceof String) {\n               String str = (String) obj;\n               // Replace ',' with '.' for consistent parsing\n               str = str.replace(',', '.');\n               return Double.parseDouble(str);\n           } else if (obj instanceof Number) {\n               return ((Number) obj).doubleValue();\n           } else {\n               throw new IllegalArgumentException(\"Unsupported type\");\n           }\n       }\n   }\n   "}
{"task_id": "Java/138", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_equal_to_sum_even(int n) {\n        // Check if n is even\n        if (n % 2 != 0) {\n            return false;\n        }\n        \n        // Check if n is at least 8\n        if (n < 8) {\n            return false;\n        }\n        \n        // Check if n - 8 is even\n        return (n - 8) % 2 == 0;\n    }\n}\n"}
{"task_id": "Java/139", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public long special_factorial(int n) {\n           long result = 1;\n           for (int i = 1; i <= n; i++) {\n               result *= factorial(i);\n           }\n           return result;\n       }\n\n       private long factorial(int n) {\n           if (n == 0 || n == 1) {\n               return 1;\n           }\n           long result = 1;\n           for (int i = 1; i <= n; i++) {\n               result *= i;\n           }\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/140", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String fix_spaces(String text) {\n           StringBuilder result = new StringBuilder();\n           int spaceCount = 0;\n\n           for (char c : text.toCharArray()) {\n               if (c == ' ') {\n                   spaceCount++;\n               } else {\n                   if (spaceCount > 2) {\n                       result.append('-');\n                   } else if (spaceCount > 0) {\n                       for (int i = 0; i < spaceCount; i++) {\n                           result.append('_');\n                       }\n                   }\n                   result.append(c);\n                   spaceCount = 0;\n               }\n           }\n\n           if (spaceCount > 2) {\n               result.append('-');\n           } else if (spaceCount > 0) {\n               for (int i = 0; i < spaceCount; i++) {\n                   result.append('_');\n               }\n           }\n\n           return result.toString();\n       }\n   }\n   "}
{"task_id": "Java/141", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String file_name_check(String file_name) {\n           // Check if there is exactly one dot\n           int dotCount = file_name.length() - file_name.replace(\".\", \"\").length();\n           if (dotCount != 1) {\n               return \"No\";\n           }\n\n           // Split the file name into before_dot and after_dot\n           String[] parts = file_name.split(\"\\\\.\");\n           String before_dot = parts[0];\n           String after_dot = parts[1];\n\n           // Check if before_dot is not empty and starts with a Latin alphabet letter\n           if (before_dot.isEmpty() || !Character.isLetter(before_dot.charAt(0))) {\n               return \"No\";\n           }\n\n           // Count digits in before_dot\n           int digitCount = 0;\n           for (char c : before_dot.toCharArray()) {\n               if (Character.isDigit(c)) {\n                   digitCount++;\n               }\n           }\n           if (digitCount > 3) {\n               return \"No\";\n           }\n\n           // Check if after_dot is one of [\"txt\", \"exe\", \"dll\"]\n           List<String> allowedExtensions = Arrays.asList(\"txt\", \"exe\", \"dll\");\n           if (!allowedExtensions.contains(after_dot)) {\n               return \"No\";\n           }\n\n           return \"Yes\";\n       }\n   }\n   "}
{"task_id": "Java/142", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int sum_squares(List<Integer> lst) {\n           int sum = 0;\n           for (int i = 0; i < lst.size(); i++) {\n               int value = lst.get(i);\n               if (i % 3 == 0) {\n                   value = value * value; // Square the value\n               } else if (i % 4 == 0 && i % 3 != 0) {\n                   value = value * value * value; // Cube the value\n               }\n               sum += value;\n           }\n           return sum;\n       }\n   }\n   "}
{"task_id": "Java/143", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String words_in_sentence(String sentence) {\n           String[] words = sentence.split(\" \");\n           List<String> primeWords = new ArrayList<>();\n           \n           for (String word : words) {\n               if (isPrime(word.length())) {\n                   primeWords.add(word);\n               }\n           }\n           \n           return String.join(\" \", primeWords);\n       }\n       \n       private boolean isPrime(int n) {\n           if (n <= 1) {\n               return false;\n           }\n           for (int i = 2; i <= Math.sqrt(n); i++) {\n               if (n % i == 0) {\n                   return false;\n               }\n           }\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/144", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean simplify(String x, String n) {\n           // Split the fractions to get numerators and denominators\n           String[] partsX = x.split(\"/\");\n           String[] partsN = n.split(\"/\");\n           \n           int numerator1 = Integer.parseInt(partsX[0]);\n           int denominator1 = Integer.parseInt(partsX[1]);\n           int numerator2 = Integer.parseInt(partsN[0]);\n           int denominator2 = Integer.parseInt(partsN[1]);\n           \n           // Calculate the product of numerators and denominators\n           int numerator_product = numerator1 * numerator2;\n           int denominator_product = denominator1 * denominator2;\n           \n           // Check if the resulting fraction is a whole number\n           return numerator_product % denominator_product == 0;\n       }\n   }\n   "}
{"task_id": "Java/145", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> order_by_points(List<Integer> nums) {\n        // Custom comparator to sort based on digit sum\n        Comparator<Integer> digitSumComparator = new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int sumA = sumOfDigits(a);\n                int sumB = sumOfDigits(b);\n                return Integer.compare(sumA, sumB);\n            }\n        };\n\n        // Sort the list using the custom comparator\n        Collections.sort(nums, digitSumComparator);\n\n        return nums;\n    }\n\n    // Helper function to calculate the sum of digits of a number\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        boolean isNegative = num < 0;\n        num = Math.abs(num);\n\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n\n        return isNegative ? -sum : sum;\n    }\n}\n"}
{"task_id": "Java/146", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int specialFilter(List<Integer> nums) {\n           int count = 0;\n           for (int num : nums) {\n               if (num > 10) {\n                   String numStr = Integer.toString(Math.abs(num));\n                   char firstDigit = numStr.charAt(0);\n                   char lastDigit = numStr.charAt(numStr.length() - 1);\n                   if (isOddDigit(firstDigit) && isOddDigit(lastDigit)) {\n                       count++;\n                   }\n               }\n           }\n           return count;\n       }\n\n       private boolean isOddDigit(char digit) {\n           int digitValue = Character.getNumericValue(digit);\n           return digitValue % 2 != 0;\n       }\n   }\n   "}
{"task_id": "Java/147", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int get_max_triples(int n) {\n           int[] a = new int[n];\n           for (int i = 0; i < n; i++) {\n               a[i] = (i + 1) * (i + 1) - (i + 1) + 1;\n           }\n           int count = 0;\n           for (int i = 0; i < n - 2; i++) {\n               for (int j = i + 1; j < n - 1; j++) {\n                   for (int k = j + 1; k < n; k++) {\n                       if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                           count++;\n                       }\n                   }\n               }\n           }\n           return count;\n       }\n   }\n   "}
{"task_id": "Java/148", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<String> bf(String planet1, String planet2) {\n           // List of planets in order of proximity to the Sun\n           List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n           \n           // Check if both planets are valid\n           if (!planets.contains(planet1) || !planets.contains(planet2)) {\n               return new ArrayList<>();\n           }\n           \n           // Find the indices of the given planets\n           int index1 = planets.indexOf(planet1);\n           int index2 = planets.indexOf(planet2);\n           \n           // Ensure index1 is less than index2\n           if (index1 > index2) {\n               int temp = index1;\n               index1 = index2;\n               index2 = temp;\n           }\n           \n           // Extract the sublist of planets between these indices (excluding planet1 and planet2)\n           List<String> result = new ArrayList<>();\n           for (int i = index1 + 1; i < index2; i++) {\n               result.add(planets.get(i));\n           }\n           \n           return result;\n       }\n   }\n   "}
{"task_id": "Java/149", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<String> sorted_list_sum(List<String> lst) {\n        // Filter out strings with odd lengths\n        List<String> filteredList = lst.stream()\n                                       .filter(s -> s.length() % 2 == 0)\n                                       .collect(Collectors.toList());\n        \n        // Sort the filtered list by length and then alphabetically\n        filteredList.sort((s1, s2) -> {\n            int lengthComparison = Integer.compare(s1.length(), s2.length());\n            if (lengthComparison != 0) {\n                return lengthComparison;\n            } else {\n                return s1.compareTo(s2);\n            }\n        });\n        \n        return filteredList;\n    }\n}\n"}
{"task_id": "Java/150", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int x_or_y(int n, int x, int y) {\n        // Handle edge case for numbers less than 2\n        if (n < 2) {\n            return y;\n        }\n        \n        // Check for divisors from 2 to the square root of n\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return y; // n is not a prime number\n            }\n        }\n        \n        // If no divisors found, n is a prime number\n        return x;\n    }\n}\n"}
{"task_id": "Java/151", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int double_the_difference(List<Object> lst) {\n        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                if (num > 0 && num % 2 != 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/152", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i).equals(guess.get(i))) {\n                result.add(0);\n            } else {\n                result.add(Math.abs(game.get(i) - guess.get(i)));\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/153", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String Strongest_Extension(String class_name, List<String> extensions) {\n           String strongest_extension = extensions.get(0);\n           int max_strength = calculateStrength(extensions.get(0));\n\n           for (int i = 1; i < extensions.size(); i++) {\n               String current_extension = extensions.get(i);\n               int current_strength = calculateStrength(current_extension);\n\n               if (current_strength > max_strength) {\n                   strongest_extension = current_extension;\n                   max_strength = current_strength;\n               }\n           }\n\n           return class_name + \".\" + strongest_extension;\n       }\n\n       private int calculateStrength(String extension) {\n           int CAP = 0;\n           int SM = 0;\n\n           for (char c : extension.toCharArray()) {\n               if (Character.isUpperCase(c)) {\n                   CAP++;\n               } else if (Character.isLowerCase(c)) {\n                   SM++;\n               }\n           }\n\n           return CAP - SM;\n       }\n   }\n   "}
{"task_id": "Java/154", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean cycpattern_check(String a, String b) {\n        boolean found = false;\n        int lenB = b.length();\n        \n        // If b is longer than a, it can't be a substring\n        if (lenB > a.length()) {\n            return false;\n        }\n        \n        // Generate all rotations of b\n        for (int i = 0; i < lenB; i++) {\n            String rotation = b.substring(i) + b.substring(0, i);\n            if (a.contains(rotation)) {\n                found = true;\n                break;\n            }\n        }\n        \n        return found;\n    }\n}\n"}
{"task_id": "Java/155", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> even_odd_count(int num) {\n           // Handle negative numbers\n           if (num < 0) {\n               num = -num;\n           }\n           \n           // Convert the number to a string to iterate through each digit\n           String numStr = Integer.toString(num);\n           \n           // Initialize counters\n           int evenCount = 0;\n           int oddCount = 0;\n           \n           // Iterate through each digit\n           for (char digitChar : numStr.toCharArray()) {\n               int digit = Character.getNumericValue(digitChar);\n               if (digit % 2 == 0) {\n                   evenCount++;\n               } else {\n                   oddCount++;\n               }\n           }\n           \n           // Return the counts as a list\n           List<Integer> result = new ArrayList<>();\n           result.add(evenCount);\n           result.add(oddCount);\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/156", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String int_to_mini_roman(int number) {\n        // Mapping of integer values to their corresponding Roman numeral symbols\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] symbols = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        \n        StringBuilder result = new StringBuilder();\n        \n        // Iterate through the values and symbols\n        for (int i = 0; i < values.length; i++) {\n            while (number >= values[i]) {\n                number -= values[i];\n                result.append(symbols[i]);\n            }\n        }\n        \n        // Convert the result to lowercase\n        return result.toString().toLowerCase();\n    }\n}\n"}
{"task_id": "Java/157", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean right_angle_triangle(int a, int b, int c) {\n           if (a > b && a > c) {\n               return a * a == b * b + c * c;\n           } else if (b > a && b > c) {\n               return b * b == a * a + c * c;\n           } else {\n               return c * c == a * a + b * b;\n           }\n       }\n   }\n   "}
{"task_id": "Java/158", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String find_max(List<String> words) {\n           int max_unique_count = 0;\n           String result_word = \"\";\n\n           for (String word : words) {\n               Set<Character> unique_chars = new HashSet<>();\n               for (char c : word.toCharArray()) {\n                   unique_chars.add(c);\n               }\n               int unique_count = unique_chars.size();\n\n               if (unique_count > max_unique_count) {\n                   max_unique_count = unique_count;\n                   result_word = word;\n               } else if (unique_count == max_unique_count) {\n                   if (result_word.isEmpty() || word.compareTo(result_word) < 0) {\n                       result_word = word;\n                   }\n               }\n           }\n\n           return result_word;\n       }\n   }\n   "}
{"task_id": "Java/159", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> eat(int number, int need, int remaining) {\n           int total_eaten = number + need;\n           if (total_eaten > remaining) {\n               total_eaten = remaining + number;\n               remaining = 0;\n           } else {\n               remaining -= need;\n           }\n           return Arrays.asList(total_eaten, remaining);\n       }\n   }\n   "}
{"task_id": "Java/160", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        // Initialize the result with the first operand\n        int result = operand.get(0);\n        \n        // Loop through the operator list\n        for (int i = 0; i < operator.size(); i++) {\n            // Get the current operator and the next operand\n            String op = operator.get(i);\n            int nextOperand = operand.get(i + 1);\n            \n            // Apply the corresponding operation\n            switch (op) {\n                case \"+\":\n                    result += nextOperand;\n                    break;\n                case \"-\":\n                    result -= nextOperand;\n                    break;\n                case \"*\":\n                    result *= nextOperand;\n                    break;\n                case \"/\":\n                    result /= nextOperand;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, nextOperand);\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid operator: \" + op);\n            }\n        }\n        \n        // Return the final result\n        return result;\n    }\n}\n"}
{"task_id": "Java/161", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String solve(String s) {\n           boolean hasLetter = false;\n           StringBuilder result = new StringBuilder();\n\n           for (char c : s.toCharArray()) {\n               if (Character.isLetter(c)) {\n                   hasLetter = true;\n                   if (Character.isUpperCase(c)) {\n                       result.append(Character.toLowerCase(c));\n                   } else {\n                       result.append(Character.toUpperCase(c));\n                   }\n               } else {\n                   result.append(c);\n               }\n           }\n\n           if (!hasLetter) {\n               return new StringBuilder(s).reverse().toString();\n           }\n\n           return result.toString();\n       }\n   }\n   "}
{"task_id": "Java/162", "generation": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        // Check if the input string is empty\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        // Create a MessageDigest instance for MD5\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n\n        // Convert the input string to bytes and update the digest\n        md.update(text.getBytes());\n\n        // Compute the hash and convert the resulting byte array to a hexadecimal string\n        byte[] digest = md.digest();\n        String md5Hash = String.format(\"%032x\", new BigInteger(1, digest));\n\n        // Return the hexadecimal string wrapped in Optional\n        return Optional.of(md5Hash);\n    }\n}\n"}
{"task_id": "Java/163", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> generate_integers(int a, int b) {\n           List<Integer> result = new ArrayList<>();\n           int min = Math.min(a, b);\n           int max = Math.max(a, b);\n           \n           for (int i = min; i <= max; i++) {\n               if (i % 2 == 0 && i < 10) {\n                   result.add(i);\n               }\n           }\n           \n           return result;\n       }\n   }\n   "}
{"task_id": "Java/0", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean has_close_elements(List<Double> numbers, double threshold) {\n           for (int i = 0; i < numbers.size(); i++) {\n               for (int j = i + 1; j < numbers.size(); j++) {\n                   if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                       return true;\n                   }\n               }\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/1", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<String> separate_paren_groups(String paren_string) {\n           List<String> result = new ArrayList<>();\n           StringBuilder currentGroup = new StringBuilder();\n           int balance = 0;\n\n           for (char ch : paren_string.toCharArray()) {\n               if (ch == ' ') {\n                   continue;\n               }\n               currentGroup.append(ch);\n               if (ch == '(') {\n                   balance++;\n               } else if (ch == ')') {\n                   balance--;\n                   if (balance == 0) {\n                       result.add(currentGroup.toString());\n                       currentGroup.setLength(0); // Reset the current group\n                   }\n               }\n           }\n\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/2", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public double truncate_number(double number) {\n           double integer_part = Math.floor(number);\n           double decimal_part = number - integer_part;\n           return decimal_part;\n       }\n   }\n   "}
{"task_id": "Java/3", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean below_zero(List<Integer> operations) {\n           int balance = 0;\n           for (int operation : operations) {\n               balance += operation;\n               if (balance < 0) {\n                   return true;\n               }\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/4", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public double mean_absolute_deviation(List<Double> numbers) {\n           // Calculate the mean of the dataset\n           double mean = calculateMean(numbers);\n           \n           // Calculate the sum of absolute differences\n           double sum_of_absolute_differences = 0;\n           for (double number : numbers) {\n               sum_of_absolute_differences += Math.abs(number - mean);\n           }\n           \n           // Calculate the Mean Absolute Deviation\n           double MAD = sum_of_absolute_differences / numbers.size();\n           \n           return MAD;\n       }\n       \n       private double calculateMean(List<Double> numbers) {\n           double sum = 0;\n           for (double number : numbers) {\n               sum += number;\n           }\n           return sum / numbers.size();\n       }\n   }\n   "}
{"task_id": "Java/5", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/6", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> parse_nested_parens(String paren_string) {\n           List<Integer> depths = new ArrayList<>();\n           String[] groups = paren_string.split(\" \");\n           \n           for (String group : groups) {\n               Stack<Character> paren_stack = new Stack<>();\n               int max_depth = 0;\n               int current_depth = 0;\n               \n               for (char ch : group.toCharArray()) {\n                   if (ch == '(') {\n                       paren_stack.push(ch);\n                       current_depth++;\n                       if (current_depth > max_depth) {\n                           max_depth = current_depth;\n                       }\n                   } else if (ch == ')') {\n                       paren_stack.pop();\n                       current_depth--;\n                   }\n               }\n               \n               depths.add(max_depth);\n           }\n           \n           return depths;\n       }\n   }\n   "}
{"task_id": "Java/7", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                result.add(str);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/8", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> sum_product(List<Integer> numbers) {\n           int sum = 0;\n           int product = 1;\n           \n           for (int number : numbers) {\n               sum += number;\n               product *= number;\n           }\n           \n           // Handle the case where the list is empty\n           if (numbers.isEmpty()) {\n               sum = 0;\n               product = 1;\n           }\n           \n           return Arrays.asList(sum, product);\n       }\n   }\n   "}
{"task_id": "Java/9", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> rolling_max(List<Integer> numbers) {\n           List<Integer> result = new ArrayList<>();\n           if (numbers.isEmpty()) {\n               return result;\n           }\n           \n           int current_max = numbers.get(0);\n           result.add(current_max);\n           \n           for (int i = 1; i < numbers.size(); i++) {\n               int num = numbers.get(i);\n               if (num > current_max) {\n                   current_max = num;\n               }\n               result.add(current_max);\n           }\n           \n           return result;\n       }\n   }\n   "}
{"task_id": "Java/10", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    // Helper function to check if a string is a palindrome\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    // Function to find the shortest palindrome that begins with a supplied string\n    public String make_palindrome(String string) {\n        if (string.isEmpty()) {\n            return \"\";\n        }\n\n        // Iterate from the end to find the longest palindromic suffix\n        for (int i = 0; i < string.length(); i++) {\n            String suffix = string.substring(i);\n            if (isPalindrome(suffix)) {\n                String prefix = string.substring(0, i);\n                String reverse_prefix = new StringBuilder(prefix).reverse().toString();\n                return string + reverse_prefix;\n            }\n        }\n\n        // If no palindromic suffix found, return the string + its reverse\n        return string + new StringBuilder(string).reverse().toString();\n    }\n}\n"}
{"task_id": "Java/11", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String string_xor(String a, String b) {\n           StringBuilder result = new StringBuilder();\n           int length = Math.min(a.length(), b.length());\n           \n           for (int i = 0; i < length; i++) {\n               char charA = a.charAt(i);\n               char charB = b.charAt(i);\n               char xorChar = (charA == charB) ? '0' : '1';\n               result.append(xorChar);\n           }\n           \n           return result.toString();\n       }\n   }\n   "}
{"task_id": "Java/12", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public Optional<String> longest(List<String> strings) {\n           if (strings.isEmpty()) {\n               return Optional.empty();\n           }\n           \n           String longestString = strings.get(0);\n           for (int i = 1; i < strings.size(); i++) {\n               if (strings.get(i).length() > longestString.length()) {\n                   longestString = strings.get(i);\n               }\n           }\n           \n           return Optional.of(longestString);\n       }\n   }\n   "}
{"task_id": "Java/13", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int greatest_common_divisor(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}\n"}
{"task_id": "Java/14", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<String> all_prefixes(String string) {\n           List<String> prefixes = new ArrayList<>();\n           for (int i = 1; i <= string.length(); i++) {\n               prefixes.add(string.substring(0, i));\n           }\n           return prefixes;\n       }\n   }\n   "}
{"task_id": "Java/15", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String string_sequence(int n) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            result.append(i).append(\" \");\n        }\n        return result.toString().trim();\n    }\n}\n"}
{"task_id": "Java/16", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int count_distinct_characters(String string) {\n           // Convert the string to lowercase\n           string = string.toLowerCase();\n           \n           // Create a Set to store distinct characters\n           Set<Character> distinctCharacters = new HashSet<>();\n           \n           // Iterate through the string and add each character to the Set\n           for (char c : string.toCharArray()) {\n               distinctCharacters.add(c);\n           }\n           \n           // Return the size of the Set, which is the count of distinct characters\n           return distinctCharacters.size();\n       }\n   }\n   "}
{"task_id": "Java/17", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> parse_music(String string) {\n        List<Integer> beats = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        \n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n                beats.add(4);\n            } else if (note.equals(\"o|\")) {\n                beats.add(2);\n            } else if (note.equals(\".|\")) {\n                beats.add(1);\n            }\n        }\n        \n        return beats;\n    }\n}\n"}
{"task_id": "Java/18", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int how_many_times(String string, String substring) {\n        if (substring.isEmpty()) {\n            return 0;\n        }\n        \n        int count = 0;\n        int substringLength = substring.length();\n        \n        for (int i = 0; i <= string.length() - substringLength; i++) {\n            if (string.substring(i, i + substringLength).equals(substring)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/19", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String sort_numbers(String numbers) {\n           // Define the map from number words to their corresponding numerical values\n           Map<String, Integer> numberMap = new HashMap<>();\n           numberMap.put(\"zero\", 0);\n           numberMap.put(\"one\", 1);\n           numberMap.put(\"two\", 2);\n           numberMap.put(\"three\", 3);\n           numberMap.put(\"four\", 4);\n           numberMap.put(\"five\", 5);\n           numberMap.put(\"six\", 6);\n           numberMap.put(\"seven\", 7);\n           numberMap.put(\"eight\", 8);\n           numberMap.put(\"nine\", 9);\n\n           // Split the input string into an array of number words\n           String[] numberWords = numbers.split(\" \");\n\n           // Sort the array of number words using a custom comparator\n           Arrays.sort(numberWords, (a, b) -> numberMap.get(a) - numberMap.get(b));\n\n           // Join the sorted array back into a single string with space delimiters\n           return String.join(\" \", numberWords);\n       }\n   }\n   "}
{"task_id": "Java/20", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Double> find_closest_elements(List<Double> numbers) {\n           List<Double> closest_pair = new ArrayList<>();\n           closest_pair.add(numbers.get(0));\n           closest_pair.add(numbers.get(1));\n           double distance = Math.abs(numbers.get(1) - numbers.get(0));\n\n           for (int i = 0; i < numbers.size(); i++) {\n               for (int j = i + 1; j < numbers.size(); j++) {\n                   double current_distance = Math.abs(numbers.get(i) - numbers.get(j));\n                   if (current_distance < distance) {\n                       closest_pair.clear();\n                       closest_pair.add(numbers.get(i));\n                       closest_pair.add(numbers.get(j));\n                       distance = current_distance;\n                   }\n               }\n           }\n\n           Collections.sort(closest_pair);\n           return closest_pair;\n       }\n   }\n   "}
{"task_id": "Java/21", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Double> rescale_to_unit(List<Double> numbers) {\n           // Find the minimum and maximum values in the list\n           double min_value = Collections.min(numbers);\n           double max_value = Collections.max(numbers);\n           \n           // Create a new list to store the transformed values\n           List<Double> transformed_numbers = new ArrayList<>();\n           \n           // Apply the linear transformation to each number\n           for (double number : numbers) {\n               double transformed_value = (number - min_value) / (max_value - min_value);\n               transformed_numbers.add(transformed_value);\n           }\n           \n           // Return the transformed list\n           return transformed_numbers;\n       }\n   }\n   "}
{"task_id": "Java/22", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> filter_integers(List<Object> values) {\n           List<Integer> integers = new ArrayList<>();\n           for (Object value : values) {\n               if (value instanceof Integer) {\n                   integers.add((Integer) value);\n               }\n           }\n           return integers;\n       }\n   }\n   "}
{"task_id": "Java/23", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int strlen(String string) {\n        return string.length();\n    }\n}\n"}
{"task_id": "Java/24", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int largest_divisor(int n) {\n           if (n <= 1) {\n               return 1;\n           }\n           for (int i = n / 2; i >= 1; i--) {\n               if (n % i == 0) {\n                   return i;\n               }\n           }\n           return 1; // This line should never be reached because 1 is always a divisor\n       }\n   }\n   "}
{"task_id": "Java/25", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> factorize(int n) {\n           List<Integer> result = new ArrayList<>();\n           int current_factor = 2;\n           while (n > 1) {\n               while (n % current_factor == 0) {\n                   result.add(current_factor);\n                   n /= current_factor;\n               }\n               current_factor++;\n           }\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/26", "generation": "   import java.util.*;\n   import java.lang.*;\n   import java.util.stream.Collectors;\n\n   class Solution {\n       public List<Integer> remove_duplicates(List<Integer> numbers) {\n           Set<Integer> seen = new HashSet<>();\n           List<Integer> result = new ArrayList<>();\n           \n           for (Integer num : numbers) {\n               if (!seen.contains(num)) {\n                   result.add(num);\n                   seen.add(num);\n               }\n           }\n           \n           return result;\n       }\n   }\n   "}
{"task_id": "Java/27", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String flip_case(String string) {\n           StringBuilder result = new StringBuilder();\n           for (char c : string.toCharArray()) {\n               if (Character.isLowerCase(c)) {\n                   result.append(Character.toUpperCase(c));\n               } else if (Character.isUpperCase(c)) {\n                   result.append(Character.toLowerCase(c));\n               } else {\n                   result.append(c); // In case the character is neither lowercase nor uppercase\n               }\n           }\n           return result.toString();\n       }\n   }\n   "}
{"task_id": "Java/28", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String concatenate(List<String> strings) {\n        // Using StringBuilder for efficient string concatenation\n        StringBuilder result = new StringBuilder();\n        \n        // Iterate through each string in the list and append to the result\n        for (String str : strings) {\n            result.append(str);\n        }\n        \n        // Convert StringBuilder to String and return\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/29", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/30", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> get_positive(List<Integer> l) {\n        // Convert the list to a stream and filter out positive numbers\n        return l.stream()\n                .filter(num -> num > 0)  // Filter only positive numbers\n                .collect(Collectors.toList());  // Collect the filtered numbers into a list\n    }\n}\n"}
{"task_id": "Java/31", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_prime(int n) {\n        // Special case: 1 is not a prime number\n        if (n <= 1) {\n            return false;\n        }\n        \n        // Check for divisors from 2 to sqrt(n)\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        \n        // If no divisors found, n is prime\n        return true;\n    }\n}\n"}
{"task_id": "Java/32", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    // Evaluates polynomial with coefficients xs at point x.\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    // Finds a zero of the polynomial using the Bisection Method.\n    public double find_zero(List<Double> xs) {\n        // Initial interval [a, b]\n        double a = -100.0; // Arbitrary starting point\n        double b = 100.0;  // Arbitrary ending point\n        \n        // Ensure poly(a) and poly(b) have opposite signs\n        while (poly(xs, a) * poly(xs, b) > 0) {\n            a -= 10.0;\n            b += 10.0;\n        }\n        \n        // Bisection Method\n        double tolerance = 1e-7; // Tolerance for convergence\n        while ((b - a) / 2 > tolerance) {\n            double c = (a + b) / 2;\n            double fc = poly(xs, c);\n            if (fc == 0) {\n                return c; // Exact root found\n            } else if (poly(xs, a) * fc < 0) {\n                b = c;\n            } else {\n                a = c;\n            }\n        }\n        \n        return (a + b) / 2; // Return the midpoint as the root\n    }\n}\n"}
{"task_id": "Java/33", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> sort_third(List<Integer> l) {\n           List<Integer> sorted_values = new ArrayList<>();\n           for (int i = 0; i < l.size(); i++) {\n               if (i % 3 == 0) {\n                   sorted_values.add(l.get(i));\n               }\n           }\n           Collections.sort(sorted_values);\n           int sorted_index = 0;\n           for (int i = 0; i < l.size(); i++) {\n               if (i % 3 == 0) {\n                   l.set(i, sorted_values.get(sorted_index));\n                   sorted_index++;\n               }\n           }\n           return l;\n       }\n   }\n   "}
{"task_id": "Java/34", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> unique(List<Integer> l) {\n        // Step 1: Create a HashSet to store unique elements\n        Set<Integer> uniqueSet = new HashSet<>(l);\n        \n        // Step 2: Convert the set back to a list\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n        \n        // Step 3: Sort the list\n        Collections.sort(uniqueList);\n        \n        // Step 4: Return the sorted list of unique elements\n        return uniqueList;\n    }\n}\n"}
{"task_id": "Java/35", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int max_element(List<Integer> l) {\n           int max_value = l.get(0);\n           for (int i = 1; i < l.size(); i++) {\n               if (l.get(i) > max_value) {\n                   max_value = l.get(i);\n               }\n           }\n           return max_value;\n       }\n   }\n   "}
{"task_id": "Java/36", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int fizz_buzz(int n) {\n           int count = 0;\n           for (int i = 0; i < n; i++) {\n               if (i % 11 == 0 || i % 13 == 0) {\n                   String numStr = Integer.toString(i);\n                   for (char c : numStr.toCharArray()) {\n                       if (c == '7') {\n                           count++;\n                       }\n                   }\n               }\n           }\n           return count;\n       }\n   }\n   "}
{"task_id": "Java/37", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> sort_even(List<Integer> l) {\n           List<Integer> lPrime = new ArrayList<>();\n           List<Integer> evenValues = new ArrayList<>();\n           \n           // Extract even indexed values\n           for (int i = 0; i < l.size(); i += 2) {\n               evenValues.add(l.get(i));\n           }\n           \n           // Sort the extracted even indexed values\n           Collections.sort(evenValues);\n           \n           // Reconstruct the new list l'\n           int evenIndex = 0;\n           for (int i = 0; i < l.size(); i++) {\n               if (i % 2 == 0) {\n                   lPrime.add(evenValues.get(evenIndex++));\n               } else {\n                   lPrime.add(l.get(i));\n               }\n           }\n           \n           return lPrime;\n       }\n   }\n   "}
{"task_id": "Java/38", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String decode_cyclic(String s) {\n           // Split string to groups. Each of length 3.\n           List<String> groups = new ArrayList<>();\n           for (int i = 0; i < s.length(); i += 3) {\n               groups.add(s.substring(i, Math.min(i + 3, s.length())));\n           }\n           // Reverse the cycling operation for each group.\n           for (int i = 0; i < groups.size(); i++) {\n               if (groups.get(i).length() == 3) {\n                   groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n               }\n           }\n           return String.join(\"\", groups);\n       }\n   }\n   "}
{"task_id": "Java/39", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int prime_fib(int n) {\n           if (n <= 0) {\n               return -1; // Invalid input\n           }\n           int count = 0;\n           int a = 0, b = 1;\n           while (count < n) {\n               int next_fib = a + b;\n               a = b;\n               b = next_fib;\n               if (is_prime(a)) {\n                   count++;\n               }\n           }\n           return a;\n       }\n\n       private boolean is_prime(int num) {\n           if (num <= 1) {\n               return false;\n           }\n           for (int i = 2; i <= Math.sqrt(num); i++) {\n               if (num % i == 0) {\n                   return false;\n               }\n           }\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/40", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        // Sort the list\n        Collections.sort(l);\n        \n        // Iterate through the list\n        for (int i = 0; i < l.size() - 2; i++) {\n            // Use two pointers to find the other two elements\n            int left = i + 1;\n            int right = l.size() - 1;\n            \n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                \n                if (sum == 0) {\n                    return true; // Found a triplet that sums to zero\n                } else if (sum < 0) {\n                    left++; // Move left pointer to the right\n                } else {\n                    right--; // Move right pointer to the left\n                }\n            }\n        }\n        \n        return false; // No triplet found that sums to zero\n    }\n}\n"}
{"task_id": "Java/41", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int car_race_collision(int n) {\n           return n * n;\n       }\n   }\n   "}
{"task_id": "Java/42", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> incr_list(List<Integer> l) {\n        // Using Java Streams for a functional approach\n        return l.stream()\n                .map(num -> num + 1)  // Increment each element by 1\n                .collect(Collectors.toList());  // Collect the results into a new list\n    }\n}\n"}
{"task_id": "Java/43", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean pairs_sum_to_zero(List<Integer> l) {\n           Set<Integer> seen = new HashSet<>();\n           for (int num : l) {\n               if (seen.contains(-num)) {\n                   return true;\n               }\n               seen.add(num);\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/44", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String change_base(int x, int base) {\n        if (x == 0) {\n            return \"0\";\n        }\n        \n        StringBuilder result = new StringBuilder();\n        \n        while (x > 0) {\n            int remainder = x % base;\n            result.insert(0, remainder);\n            x = x / base;\n        }\n        \n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/45", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangle_area(double a, double h) {\n        // Calculate the area using the formula (base * height) / 2\n        double area = (a * h) / 2;\n        // Return the calculated area\n        return area;\n    }\n}\n"}
{"task_id": "Java/46", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib4(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Input must be non-negative.\");\n        }\n        if (n == 0 || n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 0;\n        }\n\n        int[] fib4_values = {0, 0, 2, 0};\n\n        for (int i = 4; i <= n; i++) {\n            int next_value = fib4_values[0] + fib4_values[1] + fib4_values[2] + fib4_values[3];\n            fib4_values[i % 4] = next_value;\n        }\n\n        return fib4_values[n % 4];\n    }\n}\n"}
{"task_id": "Java/47", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public double median(List<Integer> l) {\n           // Sort the list\n           Collections.sort(l);\n           \n           // Get the length of the list\n           int length = l.size();\n           \n           // Check if the length is odd or even\n           if (length % 2 != 0) {\n               // If odd, return the middle element\n               return l.get(length / 2);\n           } else {\n               // If even, return the average of the two middle elements\n               int mid1 = l.get(length / 2 - 1);\n               int mid2 = l.get(length / 2);\n               return (mid1 + mid2) / 2.0;\n           }\n       }\n   }\n   "}
{"task_id": "Java/48", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean is_palindrome(String text) {\n           int left = 0;\n           int right = text.length() - 1;\n           \n           while (left < right) {\n               if (text.charAt(left) != text.charAt(right)) {\n                   return false;\n               }\n               left++;\n               right--;\n           }\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/49", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int modp(int n, int p) {\n        int result = 1;\n        int base = 2;\n        \n        while (n > 0) {\n            // If n is odd, multiply result by base and take modulo p\n            if (n % 2 == 1) {\n                result = (result * base) % p;\n            }\n            // Square the base and take modulo p\n            base = (base * base) % p;\n            // Divide n by 2\n            n = n / 2;\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/50", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public String decode_shift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            int originalChar = ch - 5;\n            if (originalChar < 'a') {\n                originalChar += 26;\n            }\n            sb.append((char) originalChar);\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/51", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String remove_vowels(String text) {\n           StringBuilder result = new StringBuilder();\n           Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n           \n           for (char ch : text.toCharArray()) {\n               if (!vowels.contains(ch)) {\n                   result.append(ch);\n               }\n           }\n           \n           return result.toString();\n       }\n   }\n   "}
{"task_id": "Java/52", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean below_threshold(List<Integer> l, int t) {\n           for (int number : l) {\n               if (number >= t) {\n                   return false;\n               }\n           }\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/53", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}\n"}
{"task_id": "Java/54", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean same_chars(String s0, String s1) {\n        // Create frequency maps for both strings\n        Map<Character, Integer> freqMap0 = new HashMap<>();\n        Map<Character, Integer> freqMap1 = new HashMap<>();\n        \n        // Populate the frequency map for s0\n        for (char c : s0.toCharArray()) {\n            freqMap0.put(c, freqMap0.getOrDefault(c, 0) + 1);\n        }\n        \n        // Populate the frequency map for s1\n        for (char c : s1.toCharArray()) {\n            freqMap1.put(c, freqMap1.getOrDefault(c, 0) + 1);\n        }\n        \n        // Compare the two frequency maps\n        return freqMap0.equals(freqMap1);\n    }\n}\n"}
{"task_id": "Java/55", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        \n        int a = 0;\n        int b = 1;\n        \n        for (int i = 2; i <= n; i++) {\n            int temp = b;\n            b = a + b;\n            a = temp;\n        }\n        \n        return b;\n    }\n}\n"}
{"task_id": "Java/56", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean correct_bracketing(String brackets) {\n           Stack<Character> stack = new Stack<>();\n           for (char ch : brackets.toCharArray()) {\n               if (ch == '<') {\n                   stack.push(ch);\n               } else if (ch == '>') {\n                   if (!stack.isEmpty() && stack.peek() == '<') {\n                       stack.pop();\n                   } else {\n                       return false;\n                   }\n               }\n           }\n           return stack.isEmpty();\n       }\n   }\n   "}
{"task_id": "Java/57", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean monotonic(List<Integer> l) {\n           boolean increasing = true;\n           boolean decreasing = true;\n           \n           for (int i = 0; i < l.size() - 1; i++) {\n               if (l.get(i) > l.get(i + 1)) {\n                   increasing = false;\n               }\n               if (l.get(i) < l.get(i + 1)) {\n                   decreasing = false;\n               }\n           }\n           \n           return increasing || decreasing;\n       }\n   }\n   "}
{"task_id": "Java/58", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n           // Create a Set from the first list to store unique elements\n           Set<Integer> set = new HashSet<>(l1);\n           // Create a list to store the common elements\n           List<Integer> result = new ArrayList<>();\n           \n           // Iterate through the second list\n           for (Integer num : l2) {\n               // If the element is in the Set, add it to the result list\n               if (set.contains(num)) {\n                   result.add(num);\n                   // Remove the element from the Set to ensure uniqueness\n                   set.remove(num);\n               }\n           }\n           \n           // Sort the result list\n           Collections.sort(result);\n           \n           // Return the sorted result list\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/59", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largest_prime_factor(int n) {\n        int largest_prime = 2;\n        int current_divisor = 2;\n        \n        while (n > 1) {\n            while (n % current_divisor == 0) {\n                largest_prime = current_divisor;\n                n = n / current_divisor;\n            }\n            current_divisor += 1;\n        }\n        \n        return largest_prime;\n    }\n}\n"}
{"task_id": "Java/60", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_to_n(int n) {\n        // Using the formula to calculate the sum of first n natural numbers\n        return n * (n + 1) / 2;\n    }\n}\n"}
{"task_id": "Java/61", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean correct_bracketing(String brackets) {\n           Stack<Character> stack = new Stack<>();\n           for (char ch : brackets.toCharArray()) {\n               if (ch == '(') {\n                   stack.push(ch);\n               } else if (ch == ')') {\n                   if (stack.isEmpty()) {\n                       return false;\n                   }\n                   stack.pop();\n               }\n           }\n           return stack.isEmpty();\n       }\n   }\n   "}
{"task_id": "Java/62", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> derivative = new ArrayList<>();\n        \n        // Start from the second element (index 1)\n        for (int i = 1; i < xs.size(); i++) {\n            derivative.add(xs.get(i) * i);\n        }\n        \n        return derivative;\n    }\n}\n"}
{"task_id": "Java/63", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fibfib(int n) {\n        if (n == 0 || n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n\n        int[] fibfibArray = new int[n + 1];\n        fibfibArray[0] = 0;\n        fibfibArray[1] = 0;\n        fibfibArray[2] = 1;\n\n        for (int i = 3; i <= n; i++) {\n            fibfibArray[i] = fibfibArray[i - 1] + fibfibArray[i - 2] + fibfibArray[i - 3];\n        }\n\n        return fibfibArray[n];\n    }\n}\n"}
{"task_id": "Java/64", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int vowels_count(String s) {\n           int count = 0;\n           s = s.toLowerCase(); // Convert to lowercase for case insensitivity\n           int length = s.length();\n\n           for (int i = 0; i < length; i++) {\n               char ch = s.charAt(i);\n               if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n                   count++;\n               } else if (ch == 'y' && i == length - 1) { // Check if 'y' is at the end\n                   count++;\n               }\n           }\n           return count;\n       }\n   }\n   "}
{"task_id": "Java/65", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String circular_shift(int x, int shift) {\n           String str_x = Integer.toString(x);\n           int num_digits = str_x.length();\n           \n           if (shift > num_digits) {\n               // Reverse the string\n               return new StringBuilder(str_x).reverse().toString();\n           } else {\n               // Calculate effective shift\n               shift = shift % num_digits;\n               // Split the string into two parts\n               String part1 = str_x.substring(0, num_digits - shift);\n               String part2 = str_x.substring(num_digits - shift);\n               // Rearrange the parts to form the shifted string\n               return part2 + part1;\n           }\n       }\n   }\n   "}
{"task_id": "Java/66", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int digitSum(String s) {\n           int sum = 0;\n           for (char c : s.toCharArray()) {\n               if (Character.isUpperCase(c)) {\n                   sum += (int) c;\n               }\n           }\n           return sum;\n       }\n   }\n   "}
{"task_id": "Java/67", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.regex.*;\n\nclass Solution {\n    public int fruit_distribution(String s, int n) {\n        // Regular expression to match numbers followed by \"apples\" or \"oranges\"\n        Pattern pattern = Pattern.compile(\"(\\\\d+) apples and (\\\\d+) oranges\");\n        Matcher matcher = pattern.matcher(s);\n        \n        if (matcher.find()) {\n            int apples = Integer.parseInt(matcher.group(1));\n            int oranges = Integer.parseInt(matcher.group(2));\n            return n - apples - oranges;\n        }\n        \n        // If the pattern does not match, return -1 (indicating an error)\n        return -1;\n    }\n}\n"}
{"task_id": "Java/68", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> pluck(List<Integer> arr) {\n           int smallestEvenValue = Integer.MAX_VALUE;\n           int smallestIndex = -1;\n\n           for (int i = 0; i < arr.size(); i++) {\n               int currentValue = arr.get(i);\n               if (currentValue % 2 == 0 && currentValue < smallestEvenValue) {\n                   smallestEvenValue = currentValue;\n                   smallestIndex = i;\n               }\n           }\n\n           if (smallestEvenValue == Integer.MAX_VALUE) {\n               return new ArrayList<>();\n           } else {\n               return Arrays.asList(smallestEvenValue, smallestIndex);\n           }\n       }\n   }\n   "}
{"task_id": "Java/69", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int search(List<Integer> lst) {\n           // Step 1: Initialize a HashMap to store frequency of each integer\n           Map<Integer, Integer> frequencyMap = new HashMap<>();\n           \n           // Step 2: Populate the HashMap with frequencies\n           for (int num : lst) {\n               frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n           }\n           \n           // Step 3: Initialize max_valid_integer to -1\n           int max_valid_integer = -1;\n           \n           // Step 4: Iterate through the HashMap to find the greatest valid integer\n           for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n               int num = entry.getKey();\n               int freq = entry.getValue();\n               if (freq >= num) {\n                   if (num > max_valid_integer) {\n                       max_valid_integer = num;\n                   }\n               }\n           }\n           \n           // Step 5: Return the result\n           return max_valid_integer;\n       }\n   }\n   "}
{"task_id": "Java/70", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        // Sort the list to easily access min and max values\n        Collections.sort(lst);\n        \n        // Initialize pointers\n        int start = 0;\n        int end = lst.size() - 1;\n        \n        // Result list\n        List<Integer> result = new ArrayList<>();\n        \n        // While start is less than or equal to end\n        while (start <= end) {\n            // Add the element at start\n            result.add(lst.get(start));\n            \n            // If start is not equal to end, add the element at end\n            if (start != end) {\n                result.add(lst.get(end));\n            }\n            \n            // Move pointers\n            start++;\n            end--;\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/71", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public double triangle_area(double a, double b, double c) {\n           if (!is_valid_triangle(a, b, c)) {\n               return -1;\n           }\n           double s = (a + b + c) / 2;\n           double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n           return Math.round(area * 100.0) / 100.0;\n       }\n\n       private boolean is_valid_triangle(double a, double b, double c) {\n           return a + b > c && a + c > b && b + c > a;\n       }\n   }\n   "}
{"task_id": "Java/72", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean will_it_fly(List<Integer> q, int w) {\n        // Check if the list is empty\n        if (q.isEmpty()) {\n            return false;\n        }\n\n        // Calculate the sum of the elements in q\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n\n        // Check if the sum is greater than the maximum possible weight\n        if (sum > w) {\n            return false;\n        }\n\n        // Create a reversed version of q\n        List<Integer> reversedQ = new ArrayList<>(q);\n        Collections.reverse(reversedQ);\n\n        // Check if q is palindromic\n        return q.equals(reversedQ);\n    }\n}\n"}
{"task_id": "Java/73", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int smallest_change(List<Integer> arr) {\n           int left = 0;\n           int right = arr.size() - 1;\n           int change_count = 0;\n\n           while (left < right) {\n               if (!arr.get(left).equals(arr.get(right))) {\n                   change_count++;\n               }\n               left++;\n               right--;\n           }\n\n           return change_count;\n       }\n   }\n   "}
{"task_id": "Java/74", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<String> total_match(List<String> lst1, List<String> lst2) {\n           int total_chars_lst1 = 0;\n           int total_chars_lst2 = 0;\n           \n           // Calculate total characters in lst1\n           for (String str : lst1) {\n               total_chars_lst1 += str.length();\n           }\n           \n           // Calculate total characters in lst2\n           for (String str : lst2) {\n               total_chars_lst2 += str.length();\n           }\n           \n           // Compare and return the appropriate list\n           if (total_chars_lst1 <= total_chars_lst2) {\n               return lst1;\n           } else {\n               return lst2;\n           }\n       }\n   }\n   "}
{"task_id": "Java/75", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean is_multiply_prime(int a) {\n           List<Integer> primes = generate_primes_less_than_100();\n           for (int i = 0; i < primes.size(); i++) {\n               for (int j = i + 1; j < primes.size(); j++) {\n                   for (int k = j + 1; k < primes.size(); k++) {\n                       if (primes.get(i) * primes.get(j) * primes.get(k) == a) {\n                           return true;\n                       }\n                   }\n               }\n           }\n           return false;\n       }\n\n       private List<Integer> generate_primes_less_than_100() {\n           List<Integer> primes = new ArrayList<>();\n           boolean[] isPrime = new boolean[100];\n           Arrays.fill(isPrime, true);\n           isPrime[0] = isPrime[1] = false;\n           for (int i = 2; i < 100; i++) {\n               if (isPrime[i]) {\n                   primes.add(i);\n                   for (int j = 2 * i; j < 100; j += i) {\n                       isPrime[j] = false;\n                   }\n               }\n           }\n           return primes;\n       }\n   }\n   "}
{"task_id": "Java/76", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean is_simple_power(int x, int n) {\n           if (n == 1) {\n               return x == 1;\n           }\n           if (x == 1) {\n               return true;\n           }\n           int power = 1;\n           while (power < x) {\n               power *= n;\n               if (power == x) {\n                   return true;\n               }\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/77", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean iscube(int a) {\n        // Handle the case where a is 0 separately\n        if (a == 0) return true;\n\n        // Determine the sign of a\n        int sign = (a > 0) ? 1 : -1;\n        a = Math.abs(a);\n\n        // Iterate to find if a is a perfect cube\n        for (int n = 0; n * n * n <= a; n++) {\n            if (n * n * n == a) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n"}
{"task_id": "Java/78", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int hex_key(String num) {\n           // Set of prime hexadecimal digits in decimal form\n           Set<Integer> primeHexDigits = new HashSet<>(Arrays.asList(2, 3, 5, 7, 11, 13));\n           \n           // Counter for prime digits\n           int count = 0;\n           \n           // Iterate through each character in the input string\n           for (char ch : num.toCharArray()) {\n               int decimalValue;\n               if (Character.isDigit(ch)) {\n                   decimalValue = ch - '0';\n               } else {\n                   decimalValue = 10 + (ch - 'A');\n               }\n               \n               // Check if the decimal value is a prime hexadecimal digit\n               if (primeHexDigits.contains(decimalValue)) {\n                   count++;\n               }\n           }\n           \n           return count;\n       }\n   }\n   "}
{"task_id": "Java/79", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String decimal_to_binary(int decimal) {\n        // Convert the decimal number to a binary string\n        String binaryString = Integer.toBinaryString(decimal);\n        \n        // Format the binary string by adding 'db' at the beginning and end\n        String formattedBinaryString = \"db\" + binaryString + \"db\";\n        \n        // Return the formatted string\n        return formattedBinaryString;\n    }\n}\n"}
{"task_id": "Java/80", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean is_happy(String s) {\n           // Check if the length of the string is less than 3\n           if (s.length() < 3) {\n               return false;\n           }\n           \n           // Iterate through the string and check every 3 consecutive characters\n           for (int i = 0; i <= s.length() - 3; i++) {\n               char first = s.charAt(i);\n               char second = s.charAt(i + 1);\n               char third = s.charAt(i + 2);\n               \n               // Check if any of the 3 consecutive characters are the same\n               if (first == second || first == third || second == third) {\n                   return false;\n               }\n           }\n           \n           // If all 3 consecutive characters are distinct, the string is happy\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/81", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        \n        for (Double gpa : grades) {\n            if (gpa == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        \n        return letterGrades;\n    }\n}\n"}
{"task_id": "Java/82", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean prime_length(String string) {\n           int length = string.length();\n           if (length <= 1) {\n               return false;\n           }\n           for (int i = 2; i <= Math.sqrt(length); i++) {\n               if (length % i == 0) {\n                   return false;\n               }\n           }\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/83", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int starts_one_ends(int n) {\n        // Base case: if n is 1, there is only one number '1'\n        if (n == 1) {\n            return 1;\n        }\n        \n        // Calculate the number of n-digit numbers that start with '1'\n        int startWithOne = (int) Math.pow(10, n - 1);\n        \n        // Calculate the number of n-digit numbers that end with '1'\n        int endWithOne = (int) Math.pow(10, n - 1);\n        \n        // Subtract the overlap (numbers that start and end with '1')\n        int overlap = 1; // Only one number like '111...1' (n-2 times)\n        \n        // Total count is the sum of startWithOne and endWithOne minus the overlap\n        return startWithOne + endWithOne - overlap;\n    }\n}\n"}
{"task_id": "Java/84", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(int N) {\n        // Step 1: Calculate the sum of digits of N\n        int sum = 0;\n        int temp = N;\n        while (temp > 0) {\n            sum += temp % 10;\n            temp /= 10;\n        }\n        \n        // Step 2: Convert the sum to a binary string\n        String binarySum = Integer.toBinaryString(sum);\n        \n        // Step 3: Return the binary string\n        return binarySum;\n    }\n}\n"}
{"task_id": "Java/85", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int add(List<Integer> lst) {\n           int sum = 0;\n           for (int i = 0; i < lst.size(); i++) {\n               if (i % 2 != 0) { // Check if index is odd\n                   if (lst.get(i) % 2 == 0) { // Check if element is even\n                       sum += lst.get(i);\n                   }\n               }\n           }\n           return sum;\n       }\n   }\n   "}
{"task_id": "Java/86", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String anti_shuffle(String s) {\n           // Split the string into words\n           String[] words = s.split(\" \");\n           \n           // Process each word\n           for (int i = 0; i < words.length; i++) {\n               // Convert word to char array, sort it, and convert back to string\n               char[] chars = words[i].toCharArray();\n               Arrays.sort(chars);\n               words[i] = new String(chars);\n           }\n           \n           // Join the sorted words with spaces\n           return String.join(\" \", words);\n       }\n   }\n   "}
{"task_id": "Java/87", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        List<List<Integer>> coordinates = new ArrayList<>();\n        \n        // Iterate through each row and each column to find occurrences of x\n        for (int row = 0; row < lst.size(); row++) {\n            for (int col = 0; col < lst.get(row).size(); col++) {\n                if (lst.get(row).get(col) == x) {\n                    coordinates.add(Arrays.asList(row, col));\n                }\n            }\n        }\n        \n        // Sort the coordinates\n        coordinates.sort((a, b) -> {\n            // First by row in ascending order\n            int rowComparison = a.get(0).compareTo(b.get(0));\n            if (rowComparison != 0) {\n                return rowComparison;\n            }\n            // For the same row, sort by column in descending order\n            return b.get(1).compareTo(a.get(1));\n        });\n        \n        return coordinates;\n    }\n}\n"}
{"task_id": "Java/88", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> sort_array(List<Integer> array) {\n           if (array.isEmpty()) {\n               return new ArrayList<>();\n           }\n\n           int first = array.get(0);\n           int last = array.get(array.size() - 1);\n           int sum = first + last;\n\n           List<Integer> sortedArray = new ArrayList<>(array);\n\n           if (sum % 2 != 0) {\n               // Sum is odd, sort in ascending order\n               Collections.sort(sortedArray);\n           } else {\n               // Sum is even, sort in descending order\n               Collections.sort(sortedArray, Collections.reverseOrder());\n           }\n\n           return sortedArray;\n       }\n   }\n   "}
{"task_id": "Java/89", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encrypt(String s) {\n        StringBuilder result = new StringBuilder();\n        int shift = 4; // 2 * 2\n\n        for (char c : s.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                // Shift within lowercase letters\n                char newChar = (char) ((c - 'a' + shift) % 26 + 'a');\n                result.append(newChar);\n            } else if (Character.isUpperCase(c)) {\n                // Shift within uppercase letters\n                char newChar = (char) ((c - 'A' + shift) % 26 + 'A');\n                result.append(newChar);\n            } else {\n                // Non-alphabetic characters remain unchanged\n                result.append(c);\n            }\n        }\n\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/90", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public Optional<Integer> next_smallest(List<Integer> lst) {\n           if (lst.isEmpty() || new HashSet<>(lst).size() < 2) {\n               return Optional.empty();\n           }\n           \n           Set<Integer> uniqueElements = new HashSet<>(lst);\n           List<Integer> sortedList = new ArrayList<>(uniqueElements);\n           Collections.sort(sortedList);\n           \n           if (sortedList.size() >= 2) {\n               return Optional.of(sortedList.get(1));\n           } else {\n               return Optional.empty();\n           }\n       }\n   }\n   "}
{"task_id": "Java/91", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int is_bored(String S) {\n           int boredomCount = 0;\n           String[] sentences = S.split(\"[.!?]\");\n           \n           for (String sentence : sentences) {\n               sentence = sentence.trim();\n               if (sentence.startsWith(\"I\")) {\n                   boredomCount++;\n               }\n           }\n           \n           return boredomCount;\n       }\n   }\n   "}
{"task_id": "Java/92", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean any_int(Object x, Object y, Object z) {\n           // Check if all three objects are instances of Integer\n           if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n               // Convert objects to integers\n               int intX = (Integer) x;\n               int intY = (Integer) y;\n               int intZ = (Integer) z;\n               \n               // Check if any one of the integers is equal to the sum of the other two\n               if (intX == intY + intZ || intY == intX + intZ || intZ == intX + intY) {\n                   return true;\n               }\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/93", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String encode(String message) {\n           StringBuilder encodedMessage = new StringBuilder();\n           Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n           Map<Character, Character> vowelReplacements = new HashMap<>();\n           vowelReplacements.put('a', 'c');\n           vowelReplacements.put('e', 'g');\n           vowelReplacements.put('i', 'k');\n           vowelReplacements.put('o', 'q');\n           vowelReplacements.put('u', 'w');\n           vowelReplacements.put('A', 'C');\n           vowelReplacements.put('E', 'G');\n           vowelReplacements.put('I', 'K');\n           vowelReplacements.put('O', 'Q');\n           vowelReplacements.put('U', 'W');\n\n           for (char ch : message.toCharArray()) {\n               if (vowels.contains(ch)) {\n                   char replacement = vowelReplacements.get(ch);\n                   encodedMessage.append(replacement);\n               } else {\n                   if (Character.isUpperCase(ch)) {\n                       encodedMessage.append(Character.toLowerCase(ch));\n                   } else {\n                       encodedMessage.append(Character.toUpperCase(ch));\n                   }\n               }\n           }\n\n           return encodedMessage.toString();\n       }\n   }\n   "}
{"task_id": "Java/94", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    // Function to check if a number is prime\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Function to calculate the sum of digits of a number\n    private int sumOfDigits(int n) {\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum;\n    }\n\n    // Main function to find the largest prime and return the sum of its digits\n    public int skjkasdkd(List<Integer> lst) {\n        int largestPrime = -1;\n        for (int number : lst) {\n            if (isPrime(number) && number > largestPrime) {\n                largestPrime = number;\n            }\n        }\n        if (largestPrime == -1) {\n            return 0;\n        }\n        return sumOfDigits(largestPrime);\n    }\n}\n"}
{"task_id": "Java/95", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean check_dict_case(Map<Object, Object> dict) {\n           if (dict.isEmpty()) {\n               return false;\n           }\n           for (Object key : dict.keySet()) {\n               if (!(key instanceof String)) {\n                   return false;\n               }\n               String strKey = (String) key;\n               if (!strKey.equals(strKey.toLowerCase()) && !strKey.equals(strKey.toUpperCase())) {\n                   return false;\n               }\n           }\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/96", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<>();\n        if (n < 2) {\n            return primes;\n        }\n\n        boolean[] isPrime = new boolean[n];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = isPrime[1] = false; // 0 and 1 are not prime numbers\n\n        for (int i = 2; i * i < n; i++) {\n            if (isPrime[i]) {\n                for (int j = i * i; j < n; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n\n        for (int i = 2; i < n; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n            }\n        }\n\n        return primes;\n    }\n}\n"}
{"task_id": "Java/97", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int multiply(int a, int b) {\n           int unit_digit_a = Math.abs(a) % 10;\n           int unit_digit_b = Math.abs(b) % 10;\n           return unit_digit_a * unit_digit_b;\n       }\n   }\n   "}
{"task_id": "Java/98", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int count_upper(String s) {\n           int count = 0;\n           Set<Character> vowels = new HashSet<>(Arrays.asList('A', 'E', 'I', 'O', 'U'));\n           \n           for (int i = 0; i < s.length(); i += 2) {\n               if (vowels.contains(s.charAt(i))) {\n                   count++;\n               }\n           }\n           \n           return count;\n       }\n   }\n   "}
{"task_id": "Java/99", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int closest_integer(String value) {\n        // Convert the string to a double\n        double number = Double.parseDouble(value);\n        \n        // Check if the number is exactly halfway between two integers\n        if (Math.abs(number % 1) == 0.5) {\n            // Round away from zero\n            if (number >= 0) {\n                return (int) Math.ceil(number);\n            } else {\n                return (int) Math.floor(number);\n            }\n        } else {\n            // Round to the nearest integer\n            return (int) Math.round(number);\n        }\n    }\n}\n"}
{"task_id": "Java/100", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> make_a_pile(int n) {\n           List<Integer> pile = new ArrayList<>();\n           int currentStones = n;\n           for (int i = 0; i < n; i++) {\n               pile.add(currentStones);\n               currentStones += 2; // Next level always increases by 2\n           }\n           return pile;\n       }\n   }\n   "}
{"task_id": "Java/101", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<String> words_string(String s) {\n           List<String> words = new ArrayList<>();\n           // Split the string by commas and spaces\n           String[] splitWords = s.split(\"[,\\\\s]+\");\n           // Trim each word and add to the list\n           for (String word : splitWords) {\n               words.add(word.trim());\n           }\n           return words;\n       }\n   }\n   "}
{"task_id": "Java/102", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int choose_num(int x, int y) {\n           // Ensure x is less than or equal to y\n           if (x > y) {\n               return -1;\n           }\n           \n           // Iterate from y down to x\n           for (int i = y; i >= x; i--) {\n               // Check if the number is even\n               if (i % 2 == 0) {\n                   return i;\n               }\n           }\n           \n           // If no even number is found, return -1\n           return -1;\n       }\n   }\n   "}
{"task_id": "Java/103", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public Object rounded_avg(int n, int m) {\n           if (n > m) {\n               return -1;\n           }\n           \n           int sum = 0;\n           int count = m - n + 1;\n           \n           for (int i = n; i <= m; i++) {\n               sum += i;\n           }\n           \n           double average = (double) sum / count;\n           int rounded_average = (int) Math.round(average);\n           String binary_representation = Integer.toBinaryString(rounded_average);\n           \n           return binary_representation;\n       }\n   }\n   "}
{"task_id": "Java/104", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> unique_digits(List<Integer> x) {\n           List<Integer> result = new ArrayList<>();\n           \n           for (int num : x) {\n               if (!containsEvenDigit(num)) {\n                   result.add(num);\n               }\n           }\n           \n           Collections.sort(result);\n           return result;\n       }\n       \n       private boolean containsEvenDigit(int num) {\n           while (num > 0) {\n               int digit = num % 10;\n               if (digit % 2 == 0) {\n                   return true;\n               }\n               num /= 10;\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/105", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<String> by_length(List<Integer> arr) {\n           // Initialize a list to store valid numbers\n           List<Integer> validNumbers = new ArrayList<>();\n           \n           // Iterate through the input array\n           for (int num : arr) {\n               if (num >= 1 && num <= 9) {\n                   validNumbers.add(num);\n               }\n           }\n           \n           // Sort the valid numbers list\n           Collections.sort(validNumbers);\n           \n           // Reverse the sorted list\n           Collections.reverse(validNumbers);\n           \n           // Initialize a map to store the number-to-name mapping\n           Map<Integer, String> numberToName = new HashMap<>();\n           numberToName.put(1, \"One\");\n           numberToName.put(2, \"Two\");\n           numberToName.put(3, \"Three\");\n           numberToName.put(4, \"Four\");\n           numberToName.put(5, \"Five\");\n           numberToName.put(6, \"Six\");\n           numberToName.put(7, \"Seven\");\n           numberToName.put(8, \"Eight\");\n           numberToName.put(9, \"Nine\");\n           \n           // Initialize an empty list to store the result\n           List<String> result = new ArrayList<>();\n           \n           // Iterate through the reversed list\n           for (int num : validNumbers) {\n               result.add(numberToName.get(num));\n           }\n           \n           // Return the result list\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/106", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> f(int n) {\n           List<Integer> result = new ArrayList<>();\n           for (int i = 1; i <= n; i++) {\n               if (i % 2 == 0) {\n                   result.add(factorial(i));\n               } else {\n                   result.add(sum(i));\n               }\n           }\n           return result;\n       }\n\n       private int factorial(int num) {\n           int fact = 1;\n           for (int i = 1; i <= num; i++) {\n               fact *= i;\n           }\n           return fact;\n       }\n\n       private int sum(int num) {\n           int sum = 0;\n           for (int i = 1; i <= num; i++) {\n               sum += i;\n           }\n           return sum;\n       }\n   }\n   "}
{"task_id": "Java/107", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> even_odd_palindrome(int n) {\n           int even_count = 0;\n           int odd_count = 0;\n\n           for (int i = 1; i <= n; i++) {\n               String numStr = Integer.toString(i);\n               String reversedStr = new StringBuilder(numStr).reverse().toString();\n\n               if (numStr.equals(reversedStr)) {\n                   if (i % 2 == 0) {\n                       even_count++;\n                   } else {\n                       odd_count++;\n                   }\n               }\n           }\n\n           List<Integer> result = new ArrayList<>();\n           result.add(even_count);\n           result.add(odd_count);\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/108", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int count_nums(List<Integer> arr) {\n           int count = 0;\n           for (int num : arr) {\n               int sum = 0;\n               String numStr = Integer.toString(num);\n               int sign = 1;\n               for (char ch : numStr.toCharArray()) {\n                   if (ch == '-') {\n                       sign = -1;\n                   } else {\n                       int digit = Character.getNumericValue(ch);\n                       sum += sign * digit;\n                       sign = 1; // Reset sign after processing the negative sign\n                   }\n               }\n               if (sum > 0) {\n                   count++;\n               }\n           }\n           return count;\n       }\n   }\n   "}
{"task_id": "Java/109", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean move_one_ball(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        int n = arr.size();\n        int pivot = -1;\n\n        // Find the pivot point where the array starts decreasing\n        for (int i = 0; i < n - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                pivot = i;\n                break;\n            }\n        }\n\n        // If no pivot is found, the array is already sorted\n        if (pivot == -1) {\n            return true;\n        }\n\n        // Check if the array can be sorted by rotating around the pivot\n        for (int i = pivot + 1; i < n - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                return false;\n            }\n        }\n\n        // Check if the last element is less than or equal to the first element\n        return arr.get(n - 1) <= arr.get(0);\n    }\n}\n"}
{"task_id": "Java/110", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String exchange(List<Integer> lst1, List<Integer> lst2) {\n           int count_odd_in_lst1 = 0;\n           int count_even_in_lst2 = 0;\n           \n           for (int num : lst1) {\n               if (num % 2 != 0) {\n                   count_odd_in_lst1++;\n               }\n           }\n           \n           for (int num : lst2) {\n               if (num % 2 == 0) {\n                   count_even_in_lst2++;\n               }\n           }\n           \n           if (count_even_in_lst2 >= count_odd_in_lst1) {\n               return \"YES\";\n           } else {\n               return \"NO\";\n           }\n       }\n   }\n   "}
{"task_id": "Java/111", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> counts = new HashMap<>();\n        String[] letters = test.split(\" \");\n        \n        for (String letter : letters) {\n            if (!letter.isEmpty()) {\n                counts.put(letter, counts.getOrDefault(letter, 0) + 1);\n            }\n        }\n        \n        int maxCount = 0;\n        for (int count : counts.values()) {\n            if (count > maxCount) {\n                maxCount = count;\n            }\n        }\n        \n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : counts.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/112", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Object> reverse_delete(String s, String c) {\n           // Create a set from characters in c\n           Set<Character> charSet = new HashSet<>();\n           for (char ch : c.toCharArray()) {\n               charSet.add(ch);\n           }\n\n           // Initialize an empty result string\n           StringBuilder result = new StringBuilder();\n\n           // Build the result string by excluding characters in charSet\n           for (char ch : s.toCharArray()) {\n               if (!charSet.contains(ch)) {\n                   result.append(ch);\n               }\n           }\n\n           // Check if the result string is a palindrome\n           String resultStr = result.toString();\n           String reversedStr = new StringBuilder(resultStr).reverse().toString();\n           boolean isPalindrome = resultStr.equals(reversedStr);\n\n           // Return the result string and the palindrome check result\n           List<Object> resultList = new ArrayList<>();\n           resultList.add(resultStr);\n           resultList.add(isPalindrome);\n           return resultList;\n       }\n   }\n   "}
{"task_id": "Java/113", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int oddCount = 0;\n            \n            // Count the number of odd digits in the string\n            for (char ch : str.toCharArray()) {\n                if (Character.getNumericValue(ch) % 2 != 0) {\n                    oddCount++;\n                }\n            }\n            \n            // Construct the output string\n            String output = String.format(\"the number of odd elements %dn the str%dng %d of the %dnput.\", oddCount, oddCount, oddCount, oddCount);\n            result.add(output);\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/114", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int minSubArraySum(List<Integer> nums) {\n        // Initialize minSum to a large value\n        int minSum = Integer.MAX_VALUE;\n        // Initialize currentSum to 0\n        int currentSum = 0;\n        \n        // Iterate through each element in the list\n        for (int num : nums) {\n            // Add the current element to currentSum\n            currentSum += num;\n            \n            // If currentSum is less than minSum, update minSum\n            if (currentSum < minSum) {\n                minSum = currentSum;\n            }\n            \n            // If currentSum becomes positive, reset it to 0\n            if (currentSum > 0) {\n                currentSum = 0;\n            }\n        }\n        \n        // Return the minimum sum found\n        return minSum;\n    }\n}\n"}
{"task_id": "Java/115", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int max_fill(List<List<Integer>> grid, int capacity) {\n           int total_lowers = 0;\n           for (List<Integer> row : grid) {\n               int water_units = 0;\n               for (int cell : row) {\n                   if (cell == 1) {\n                       water_units++;\n                   }\n               }\n               int lowers_needed = (int) Math.ceil((double) water_units / capacity);\n               total_lowers += lowers_needed;\n           }\n           return total_lowers;\n       }\n   }\n   "}
{"task_id": "Java/116", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> arr) {\n        // Custom comparator to sort based on number of ones in binary representation\n        Comparator<Integer> customComparator = new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int countOnesA = Integer.bitCount(a);\n                int countOnesB = Integer.bitCount(b);\n                \n                // Compare based on number of ones\n                if (countOnesA != countOnesB) {\n                    return countOnesA - countOnesB;\n                }\n                \n                // If number of ones is the same, compare based on decimal value\n                return a - b;\n            }\n        };\n        \n        // Sort the array using the custom comparator\n        Collections.sort(arr, customComparator);\n        \n        return arr;\n    }\n}\n"}
{"task_id": "Java/117", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<String> select_words(String s, int n) {\n           // Return an empty list if the input string is empty\n           if (s.isEmpty()) {\n               return new ArrayList<>();\n           }\n\n           // Initialize the result list\n           List<String> result = new ArrayList<>();\n\n           // Split the string into words\n           String[] words = s.split(\" \");\n\n           // Define a set of vowels for consonant checking\n           Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n\n           // Iterate through each word\n           for (String word : words) {\n               int consonantCount = 0;\n\n               // Count the number of consonants in the word\n               for (char c : word.toCharArray()) {\n                   if (!vowels.contains(c) && Character.isLetter(c)) {\n                       consonantCount++;\n                   }\n               }\n\n               // If the word has exactly n consonants, add it to the result list\n               if (consonantCount == n) {\n                   result.add(word);\n               }\n           }\n\n           // Return the result list\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/118", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String get_closest_vowel(String word) {\n           // Define the set of vowels\n           Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n           \n           // Initialize the result\n           String result = \"\";\n           \n           // Iterate through the word from right to left\n           for (int i = word.length() - 1; i > 0; i--) {\n               char currentChar = word.charAt(i);\n               \n               // Check if the current character is a vowel\n               if (vowels.contains(currentChar)) {\n                   // Check if the previous and next characters are consonants\n                   if (i > 0 && i < word.length() - 1) {\n                       char prevChar = word.charAt(i - 1);\n                       char nextChar = word.charAt(i + 1);\n                       \n                       if (!vowels.contains(prevChar) && !vowels.contains(nextChar)) {\n                           result = String.valueOf(currentChar);\n                           break;\n                       }\n                   }\n               }\n           }\n           \n           // Return the result\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/119", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String match_parens(List<String> lst) {\n           int open_count = 0;\n           int close_count = 0;\n\n           for (String str : lst) {\n               int local_open = 0;\n               int local_close = 0;\n\n               for (char ch : str.toCharArray()) {\n                   if (ch == '(') {\n                       local_open++;\n                   } else if (ch == ')') {\n                       if (local_open > 0) {\n                           local_open--;\n                       } else {\n                           local_close++;\n                       }\n                   }\n               }\n\n               open_count += local_open;\n               close_count += local_close;\n           }\n\n           if (open_count == close_count) {\n               return \"Yes\";\n           } else {\n               return \"No\";\n           }\n       }\n   }\n   "}
{"task_id": "Java/120", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Initialize a max-heap\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n        \n        // Add all elements of arr to the max-heap\n        for (int num : arr) {\n            maxHeap.add(num);\n        }\n        \n        // List to store the k largest elements\n        List<Integer> result = new ArrayList<>();\n        \n        // Extract the top k elements from the max-heap\n        for (int i = 0; i < k; i++) {\n            result.add(maxHeap.poll());\n        }\n        \n        // Sort the extracted elements in ascending order\n        Collections.sort(result);\n        \n        // Return the sorted list\n        return result;\n    }\n}\n"}
{"task_id": "Java/121", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int solution(List<Integer> lst) {\n           int sum = 0;\n           for (int i = 0; i < lst.size(); i++) {\n               if (i % 2 == 0) { // Check if the position is even\n                   if (lst.get(i) % 2 != 0) { // Check if the element is odd\n                       sum += lst.get(i);\n                   }\n               }\n           }\n           return sum;\n       }\n   }\n   "}
{"task_id": "Java/122", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int add_elements(List<Integer> arr, int k) {\n           int sum = 0;\n           for (int i = 0; i < k; i++) {\n               int num = arr.get(i);\n               if (num >= 0 && num <= 99) {\n                   sum += num;\n               }\n           }\n           return sum;\n       }\n   }\n   "}
{"task_id": "Java/123", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> get_odd_collatz(int n) {\n        List<Integer> odd_numbers = new ArrayList<>();\n        \n        while (n != 1) {\n            if (n % 2 != 0) { // Check if n is odd\n                odd_numbers.add(n);\n            }\n            if (n % 2 == 0) { // If n is even\n                n = n / 2;\n            } else { // If n is odd\n                n = 3 * n + 1;\n            }\n        }\n        \n        // Add the last number in the sequence which is always 1\n        odd_numbers.add(1);\n        \n        // Sort the list of odd numbers\n        Collections.sort(odd_numbers);\n        \n        return odd_numbers;\n    }\n}\n"}
{"task_id": "Java/124", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean valid_date(String date) {\n           if (date == null || date.isEmpty()) {\n               return false;\n           }\n           \n           // Check if the date matches the format \"mm-dd-yyyy\"\n           if (!date.matches(\"\\\\d{2}-\\\\d{2}-\\\\d{4}\")) {\n               return false;\n           }\n           \n           // Split the date into month, day, and year\n           String[] parts = date.split(\"-\");\n           int month = Integer.parseInt(parts[0]);\n           int day = Integer.parseInt(parts[1]);\n           int year = Integer.parseInt(parts[2]);\n           \n           // Validate month\n           if (month < 1 || month > 12) {\n               return false;\n           }\n           \n           // Validate day\n           if (day < 1 || day > 31) {\n               return false;\n           }\n           \n           // Validate days for specific months\n           if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) {\n               return false;\n           }\n           \n           // Validate days for February\n           if (month == 2) {\n               boolean isLeapYear = (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);\n               if (isLeapYear && day > 29) {\n                   return false;\n               }\n               if (!isLeapYear && day > 28) {\n                   return false;\n               }\n           }\n           \n           return true;\n       }\n   }\n   "}
{"task_id": "Java/125", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object split_words(String txt) {\n        // Check for whitespace\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\"\\\\s+\"));\n        }\n        // Check for commas\n        else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        }\n        // Count lowercase letters with odd order in the alphabet\n        else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c)) {\n                    if ((c - 'a') % 2 == 1) {\n                        count++;\n                    }\n                }\n            }\n            return count;\n        }\n    }\n}\n"}
{"task_id": "Java/126", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_sorted(List<Integer> lst) {\n        // Edge case: If the list has only one element, it is trivially sorted.\n        if (lst.size() <= 1) {\n            return true;\n        }\n\n        // Map to count occurrences of each number\n        Map<Integer, Integer> countMap = new HashMap<>();\n\n        for (int i = 0; i < lst.size() - 1; i++) {\n            int current = lst.get(i);\n            int next = lst.get(i + 1);\n\n            // Check if the list is not sorted\n            if (current > next) {\n                return false;\n            }\n\n            // Increment the count for the current number\n            countMap.put(current, countMap.getOrDefault(current, 0) + 1);\n\n            // Check if the count exceeds 2\n            if (countMap.get(current) > 2) {\n                return false;\n            }\n        }\n\n        // Check the last element\n        int last = lst.get(lst.size() - 1);\n        countMap.put(last, countMap.getOrDefault(last, 0) + 1);\n        if (countMap.get(last) > 2) {\n            return false;\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/127", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String intersection(List<Integer> interval1, List<Integer> interval2) {\n           int start1 = interval1.get(0);\n           int end1 = interval1.get(1);\n           int start2 = interval2.get(0);\n           int end2 = interval2.get(1);\n           \n           int intersectionStart = Math.max(start1, start2);\n           int intersectionEnd = Math.min(end1, end2);\n           \n           if (intersectionStart > intersectionEnd) {\n               return \"NO\";\n           }\n           \n           int intersectionLength = intersectionEnd - intersectionStart + 1;\n           \n           if (isPrime(intersectionLength)) {\n               return \"YES\";\n           } else {\n               return \"NO\";\n           }\n       }\n       \n       private boolean isPrime(int n) {\n           if (n <= 1) {\n               return false;\n           }\n           for (int i = 2; i <= Math.sqrt(n); i++) {\n               if (n % i == 0) {\n                   return false;\n               }\n           }\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/128", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public Optional<Integer> prod_signs(List<Integer> arr) {\n           if (arr.isEmpty()) {\n               return Optional.empty();\n           }\n\n           int sum_of_magnitudes = 0;\n           int product_of_signs = 1;\n\n           for (int num : arr) {\n               sum_of_magnitudes += Math.abs(num);\n               if (num == 0) {\n                   product_of_signs = 0;\n                   break;\n               } else if (num < 0) {\n                   product_of_signs *= -1;\n               }\n           }\n\n           return Optional.of(sum_of_magnitudes * product_of_signs);\n       }\n   }\n   "}
{"task_id": "Java/129", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int N = grid.size();\n        List<Integer> minPath = null;\n\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < N; j++) {\n                List<Integer> path = bfs(grid, i, j, k);\n                if (minPath == null || isLexicographicallySmaller(path, minPath)) {\n                    minPath = path;\n                }\n            }\n        }\n\n        return minPath;\n    }\n\n    private List<Integer> bfs(List<List<Integer>> grid, int startX, int startY, int k) {\n        int N = grid.size();\n        Queue<List<Integer>> queue = new LinkedList<>();\n        List<Integer> initialPath = new ArrayList<>();\n        initialPath.add(grid.get(startX).get(startY));\n        queue.add(initialPath);\n\n        while (!queue.isEmpty()) {\n            List<Integer> currentPath = queue.poll();\n            int pathLength = currentPath.size();\n\n            if (pathLength == k) {\n                return currentPath;\n            }\n\n            int lastX = startX;\n            int lastY = startY;\n            for (int i = 0; i < pathLength - 1; i++) {\n                lastX += (currentPath.get(i + 1) - currentPath.get(i)) / N;\n                lastY += (currentPath.get(i + 1) - currentPath.get(i)) % N;\n            }\n\n            int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n            for (int[] dir : directions) {\n                int newX = lastX + dir[0];\n                int newY = lastY + dir[1];\n\n                if (newX >= 0 && newX < N && newY >= 0 && newY < N) {\n                    List<Integer> newPath = new ArrayList<>(currentPath);\n                    newPath.add(grid.get(newX).get(newY));\n                    queue.add(newPath);\n                }\n            }\n        }\n\n        return new ArrayList<>();\n    }\n\n    private boolean isLexicographicallySmaller(List<Integer> path1, List<Integer> path2) {\n        for (int i = 0; i < path1.size(); i++) {\n            if (path1.get(i) < path2.get(i)) {\n                return true;\n            } else if (path1.get(i) > path2.get(i)) {\n                return false;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/130", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n        List<Integer> tribonacciSequence = new ArrayList<>();\n        \n        // Base cases\n        tribonacciSequence.add(1); // tri(0) = 1\n        tribonacciSequence.add(3); // tri(1) = 3\n        \n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                // If i is even\n                tribonacciSequence.add(1 + i / 2);\n            } else {\n                // If i is odd\n                int tri_i = tribonacciSequence.get(i - 1) + tribonacciSequence.get(i - 2) + tribonacciSequence.get(i + 1);\n                tribonacciSequence.add(tri_i);\n            }\n        }\n        \n        return tribonacciSequence;\n    }\n}\n"}
{"task_id": "Java/131", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digits(int n) {\n        int product = 1;\n        boolean foundOdd = false;\n\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n                foundOdd = true;\n            }\n            n /= 10;\n        }\n\n        if (!foundOdd) {\n            return 0;\n        } else {\n            return product;\n        }\n    }\n}\n"}
{"task_id": "Java/132", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_nested(String string) {\n        Stack<Character> stack = new Stack<>();\n        boolean hasNested = false;\n\n        for (char ch : string.toCharArray()) {\n            if (ch == '[') {\n                stack.push(ch);\n            } else if (ch == ']') {\n                if (!stack.isEmpty() && stack.peek() == '[') {\n                    stack.pop();\n                    if (!stack.isEmpty()) {\n                        hasNested = true;\n                    }\n                } else {\n                    stack.push(ch);\n                }\n            }\n        }\n\n        return stack.isEmpty() && hasNested;\n    }\n}\n"}
{"task_id": "Java/133", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int sum_squares(List<Double> lst) {\n           int sum = 0;\n           for (double num : lst) {\n               int roundedNum = (int) Math.ceil(num);\n               sum += roundedNum * roundedNum;\n           }\n           return sum;\n       }\n   }\n   "}
{"task_id": "Java/134", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        // If the string is empty, return false\n        if (txt.isEmpty()) {\n            return false;\n        }\n\n        // Get the last character of the string\n        char lastChar = txt.charAt(txt.length() - 1);\n\n        // Check if the last character is an alphabetical character\n        if (Character.isLetter(lastChar)) {\n            // Check if the last character is not part of a word\n            if (txt.length() == 1 || txt.charAt(txt.length() - 2) == ' ') {\n                return true;\n            }\n        }\n\n        // If the last character is not alphabetical or is part of a word, return false\n        return false;\n    }\n}\n"}
{"task_id": "Java/135", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int can_arrange(List<Integer> arr) {\n           int maxIndex = -1;\n           for (int i = 1; i < arr.size(); i++) {\n               if (arr.get(i) < arr.get(i - 1)) {\n                   maxIndex = i;\n               }\n           }\n           return maxIndex;\n       }\n   }\n   "}
{"task_id": "Java/136", "generation": "import java.util.*;\nimport java.util.Optional;\n\nclass Solution {\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        Optional<Integer> largestNegative = Optional.empty();\n        Optional<Integer> smallestPositive = Optional.empty();\n\n        for (Integer num : lst) {\n            if (num < 0) {\n                if (!largestNegative.isPresent() || num > largestNegative.get()) {\n                    largestNegative = Optional.of(num);\n                }\n            } else if (num > 0) {\n                if (!smallestPositive.isPresent() || num < smallestPositive.get()) {\n                    smallestPositive = Optional.of(num);\n                }\n            }\n        }\n\n        List<Optional<Integer>> result = new ArrayList<>();\n        result.add(largestNegative);\n        result.add(smallestPositive);\n        return result;\n    }\n}\n"}
{"task_id": "Java/137", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public Optional<Object> compare_one(Object a, Object b) {\n           double valA = convertToDouble(a);\n           double valB = convertToDouble(b);\n\n           if (valA == valB) {\n               return Optional.empty();\n           } else if (valA > valB) {\n               return Optional.of(a);\n           } else {\n               return Optional.of(b);\n           }\n       }\n\n       private double convertToDouble(Object obj) {\n           if (obj instanceof String) {\n               String str = (String) obj;\n               str = str.replace(',', '.'); // Standardize to . for parsing\n               return Double.parseDouble(str);\n           } else if (obj instanceof Number) {\n               return ((Number) obj).doubleValue();\n           } else {\n               throw new IllegalArgumentException(\"Unsupported type\");\n           }\n       }\n   }\n   "}
{"task_id": "Java/138", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_equal_to_sum_even(int n) {\n        // Check if n is even\n        if (n % 2 != 0) {\n            return false;\n        }\n        \n        // Check if n is at least 8\n        if (n < 8) {\n            return false;\n        }\n        \n        // Check if n can be expressed as 4 * k\n        return (n % 4 == 0);\n    }\n}\n"}
{"task_id": "Java/139", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public long special_factorial(int n) {\n           // List to store factorials\n           List<Long> factorials = new ArrayList<>();\n           \n           // Compute factorials from n down to 1\n           for (int i = n; i >= 1; i--) {\n               factorials.add(factorial(i));\n           }\n           \n           // Initialize result to 1\n           long result = 1;\n           \n           // Multiply all factorials together\n           for (long fact : factorials) {\n               result *= fact;\n           }\n           \n           return result;\n       }\n       \n       // Helper function to compute factorial of a number\n       private long factorial(int num) {\n           long fact = 1;\n           for (int i = 1; i <= num; i++) {\n               fact *= i;\n           }\n           return fact;\n       }\n   }\n   "}
{"task_id": "Java/140", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String fix_spaces(String text) {\n           StringBuilder result = new StringBuilder();\n           int spaceCount = 0;\n\n           for (char c : text.toCharArray()) {\n               if (c == ' ') {\n                   spaceCount++;\n               } else {\n                   if (spaceCount > 2) {\n                       result.append('-');\n                   } else if (spaceCount > 0) {\n                       for (int i = 0; i < spaceCount; i++) {\n                           result.append('_');\n                       }\n                   }\n                   result.append(c);\n                   spaceCount = 0;\n               }\n           }\n\n           if (spaceCount > 2) {\n               result.append('-');\n           } else if (spaceCount > 0) {\n               for (int i = 0; i < spaceCount; i++) {\n                   result.append('_');\n               }\n           }\n\n           return result.toString();\n       }\n   }\n   "}
{"task_id": "Java/141", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String file_name_check(String file_name) {\n        // Check if there is exactly one dot\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length != 2) {\n            return \"No\";\n        }\n\n        String beforeDot = parts[0];\n        String afterDot = parts[1];\n\n        // Check if the part before the dot is not empty and starts with a Latin alphabet letter\n        if (beforeDot.isEmpty() || !Character.isLetter(beforeDot.charAt(0))) {\n            return \"No\";\n        }\n\n        // Check if the part after the dot is one of [\"txt\", \"exe\", \"dll\"]\n        List<String> validExtensions = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        if (!validExtensions.contains(afterDot)) {\n            return \"No\";\n        }\n\n        // Count the digits in the file name\n        int digitCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n                if (digitCount > 3) {\n                    return \"No\";\n                }\n            }\n        }\n\n        // If all conditions are met, return \"Yes\"\n        return \"Yes\";\n    }\n}\n"}
{"task_id": "Java/142", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int sum_squares(List<Integer> lst) {\n           int sum = 0;\n           for (int i = 0; i < lst.size(); i++) {\n               int value = lst.get(i);\n               if (i % 3 == 0) {\n                   value = value * value; // Square the value\n               } else if (i % 4 == 0 && i % 3 != 0) {\n                   value = value * value * value; // Cube the value\n               }\n               sum += value;\n           }\n           return sum;\n       }\n   }\n   "}
{"task_id": "Java/143", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String words_in_sentence(String sentence) {\n           String[] words = sentence.split(\" \");\n           List<String> primeWords = new ArrayList<>();\n           \n           for (String word : words) {\n               if (isPrime(word.length())) {\n                   primeWords.add(word);\n               }\n           }\n           \n           return String.join(\" \", primeWords);\n       }\n       \n       private boolean isPrime(int n) {\n           if (n <= 1) {\n               return false;\n           }\n           for (int i = 2; i <= Math.sqrt(n); i++) {\n               if (n % i == 0) {\n                   return false;\n               }\n           }\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/144", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean simplify(String x, String n) {\n           // Parse the fractions\n           String[] partsX = x.split(\"/\");\n           int numerator1 = Integer.parseInt(partsX[0]);\n           int denominator1 = Integer.parseInt(partsX[1]);\n           \n           String[] partsN = n.split(\"/\");\n           int numerator2 = Integer.parseInt(partsN[0]);\n           int denominator2 = Integer.parseInt(partsN[1]);\n           \n           // Multiply numerators and denominators\n           int newNumerator = numerator1 * numerator2;\n           int newDenominator = denominator1 * denominator2;\n           \n           // Simplify the fraction\n           int gcd = gcd(newNumerator, newDenominator);\n           newNumerator /= gcd;\n           newDenominator /= gcd;\n           \n           // Check if the result is a whole number\n           return newDenominator == 1;\n       }\n       \n       // Helper method to find the greatest common divisor (GCD)\n       private int gcd(int a, int b) {\n           while (b != 0) {\n               int temp = b;\n               b = a % b;\n               a = temp;\n           }\n           return a;\n       }\n   }\n   "}
{"task_id": "Java/145", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> order_by_points(List<Integer> nums) {\n        // Custom comparator to sort based on the sum of digits\n        Comparator<Integer> digitSumComparator = new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int sumA = sumOfDigits(a);\n                int sumB = sumOfDigits(b);\n                return Integer.compare(sumA, sumB);\n            }\n        };\n\n        // Sort the list using the custom comparator\n        Collections.sort(nums, digitSumComparator);\n\n        return nums;\n    }\n\n    // Helper function to calculate the sum of digits of a number\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        boolean isNegative = num < 0;\n        num = Math.abs(num);\n\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n\n        return isNegative ? -sum : sum;\n    }\n}\n"}
{"task_id": "Java/146", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int specialFilter(List<Integer> nums) {\n           int count = 0;\n           for (int num : nums) {\n               if (num > 10) {\n                   String numStr = Integer.toString(Math.abs(num));\n                   int firstDigit = Character.getNumericValue(numStr.charAt(0));\n                   int lastDigit = Character.getNumericValue(numStr.charAt(numStr.length() - 1));\n                   if (isOdd(firstDigit) && isOdd(lastDigit)) {\n                       count++;\n                   }\n               }\n           }\n           return count;\n       }\n\n       private boolean isOdd(int digit) {\n           return digit % 2 != 0;\n       }\n   }\n   "}
{"task_id": "Java/147", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int get_max_triples(int n) {\n           int count = 0;\n           int[] a = new int[n];\n           \n           // Generate the array a\n           for (int i = 0; i < n; i++) {\n               a[i] = (i + 1) * (i + 1) - (i + 1) + 1;\n           }\n           \n           // Check all triples (a[i], a[j], a[k])\n           for (int i = 0; i < n - 2; i++) {\n               for (int j = i + 1; j < n - 1; j++) {\n                   for (int k = j + 1; k < n; k++) {\n                       if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                           count++;\n                       }\n                   }\n               }\n           }\n           \n           return count;\n       }\n   }\n   "}
{"task_id": "Java/148", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<String> bf(String planet1, String planet2) {\n           // List of planets in order of proximity to the Sun\n           List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n           \n           // Check if both planets are valid\n           if (!planets.contains(planet1) || !planets.contains(planet2)) {\n               return new ArrayList<>();\n           }\n           \n           // Find the indices of the planets\n           int index1 = planets.indexOf(planet1);\n           int index2 = planets.indexOf(planet2);\n           \n           // Ensure index1 is less than index2\n           if (index1 > index2) {\n               int temp = index1;\n               index1 = index2;\n               index2 = temp;\n           }\n           \n           // Extract the sublist between the indices (excluding the planets themselves)\n           List<String> result = new ArrayList<>();\n           for (int i = index1 + 1; i < index2; i++) {\n               result.add(planets.get(i));\n           }\n           \n           return result;\n       }\n   }\n   "}
{"task_id": "Java/149", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<String> sorted_list_sum(List<String> lst) {\n        // Filter out strings with odd lengths\n        List<String> filteredList = lst.stream()\n                                       .filter(s -> s.length() % 2 == 0)\n                                       .collect(Collectors.toList());\n        \n        // Sort the filtered list by length and then alphabetically\n        filteredList.sort(Comparator.comparingInt(String::length)\n                                    .thenComparing(Comparator.naturalOrder()));\n        \n        return filteredList;\n    }\n}\n"}
{"task_id": "Java/150", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int x_or_y(int n, int x, int y) {\n        // Handle the case where n is less than 2\n        if (n < 2) {\n            return y;\n        }\n        \n        // Check for factors from 2 to the square root of n\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return y; // n is not prime\n            }\n        }\n        \n        // If no factors were found, n is prime\n        return x;\n    }\n}\n"}
{"task_id": "Java/151", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int double_the_difference(List<Object> lst) {\n           int sum = 0;\n           for (Object obj : lst) {\n               if (obj instanceof Integer) {\n                   int num = (Integer) obj;\n                   if (num > 0 && num % 2 != 0) {\n                       sum += num * num;\n                   }\n               }\n           }\n           return sum;\n       }\n   }\n   "}
{"task_id": "Java/152", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i).equals(guess.get(i))) {\n                result.add(0);\n            } else {\n                result.add(Math.abs(game.get(i) - guess.get(i)));\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/153", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String Strongest_Extension(String class_name, List<String> extensions) {\n           String strongest_extension = extensions.get(0);\n           int max_strength = calculateStrength(extensions.get(0));\n\n           for (String extension : extensions) {\n               int strength = calculateStrength(extension);\n               if (strength > max_strength) {\n                   max_strength = strength;\n                   strongest_extension = extension;\n               }\n           }\n\n           return class_name + \".\" + strongest_extension;\n       }\n\n       private int calculateStrength(String extension) {\n           int CAP = 0;\n           int SM = 0;\n\n           for (char c : extension.toCharArray()) {\n               if (Character.isUpperCase(c)) {\n                   CAP++;\n               } else if (Character.isLowerCase(c)) {\n                   SM++;\n               }\n           }\n\n           return CAP - SM;\n       }\n   }\n   "}
{"task_id": "Java/154", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean cycpattern_check(String a, String b) {\n        // Concatenate b with itself to form all possible rotations\n        String rotatedB = b + b;\n        \n        // Check if a is a substring of rotatedB\n        return rotatedB.contains(a);\n    }\n}\n"}
{"task_id": "Java/155", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> even_odd_count(int num) {\n        // Initialize counters\n        int even_count = 0;\n        int odd_count = 0;\n        \n        // Convert the number to a string to iterate through each digit\n        String numStr = Integer.toString(Math.abs(num));\n        \n        // Iterate through each character in the string\n        for (char ch : numStr.toCharArray()) {\n            // Convert the character to an integer\n            int digit = Character.getNumericValue(ch);\n            \n            // Check if the digit is even or odd and increment the respective counter\n            if (digit % 2 == 0) {\n                even_count++;\n            } else {\n                odd_count++;\n            }\n        }\n        \n        // Return the result as a list\n        return Arrays.asList(even_count, odd_count);\n    }\n}\n"}
{"task_id": "Java/156", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String int_to_mini_roman(int number) {\n        // Mapping of integer values to their corresponding Roman numeral symbols\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] symbols = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        \n        StringBuilder result = new StringBuilder();\n        \n        // Iterate through the values and symbols\n        for (int i = 0; i < values.length; i++) {\n            while (number >= values[i]) {\n                number -= values[i];\n                result.append(symbols[i]);\n            }\n        }\n        \n        // Convert the result to lowercase\n        return result.toString().toLowerCase();\n    }\n}\n"}
{"task_id": "Java/157", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean right_angle_triangle(int a, int b, int c) {\n           if (a > b && a > c) {\n               return a * a == b * b + c * c;\n           } else if (b > a && b > c) {\n               return b * b == a * a + c * c;\n           } else {\n               return c * c == a * a + b * b;\n           }\n       }\n   }\n   "}
{"task_id": "Java/158", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String find_max(List<String> words) {\n           int max_unique_count = 0;\n           String result_word = \"\";\n\n           for (String word : words) {\n               Set<Character> unique_chars = new HashSet<>();\n               for (char c : word.toCharArray()) {\n                   unique_chars.add(c);\n               }\n               int unique_count = unique_chars.size();\n\n               if (unique_count > max_unique_count) {\n                   max_unique_count = unique_count;\n                   result_word = word;\n               } else if (unique_count == max_unique_count) {\n                   if (result_word.isEmpty() || word.compareTo(result_word) < 0) {\n                       result_word = word;\n                   }\n               }\n           }\n\n           return result_word;\n       }\n   }\n   "}
{"task_id": "Java/159", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> eat(int number, int need, int remaining) {\n           int totalEaten = number + need;\n           int carrotsLeft;\n           \n           if (remaining >= need) {\n               carrotsLeft = remaining - need;\n           } else {\n               totalEaten = number + remaining;\n               carrotsLeft = 0;\n           }\n           \n           return Arrays.asList(totalEaten, carrotsLeft);\n       }\n   }\n   "}
{"task_id": "Java/160", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int do_algebra(List<String> operator, List<Integer> operand) {\n           // Initialize result with the first operand\n           int result = operand.get(0);\n           \n           // Iterate through the operator list\n           for (int i = 0; i < operator.size(); i++) {\n               // Get the current operator and operand\n               String op = operator.get(i);\n               int nextOperand = operand.get(i + 1);\n               \n               // Apply the operator to the result and the next operand\n               switch (op) {\n                   case \"+\":\n                       result += nextOperand;\n                       break;\n                   case \"-\":\n                       result -= nextOperand;\n                       break;\n                   case \"*\":\n                       result *= nextOperand;\n                       break;\n                   case \"/\":\n                       result /= nextOperand;\n                       break;\n                   case \"**\":\n                       result = (int) Math.pow(result, nextOperand);\n                       break;\n                   default:\n                       throw new IllegalArgumentException(\"Invalid operator: \" + op);\n               }\n           }\n           \n           // Return the final result\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/161", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String solve(String s) {\n           boolean hasLetter = false;\n           StringBuilder result = new StringBuilder();\n\n           for (char c : s.toCharArray()) {\n               if (Character.isLetter(c)) {\n                   hasLetter = true;\n                   if (Character.isUpperCase(c)) {\n                       result.append(Character.toLowerCase(c));\n                   } else {\n                       result.append(Character.toUpperCase(c));\n                   }\n               } else {\n                   result.append(c);\n               }\n           }\n\n           if (!hasLetter) {\n               return new StringBuilder(s).reverse().toString();\n           }\n\n           return result.toString();\n       }\n   }\n   "}
{"task_id": "Java/162", "generation": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        // Check if the input string is empty\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        // Initialize MessageDigest instance for MD5\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        \n        // Compute the hash of the input string\n        byte[] messageDigest = md.digest(text.getBytes());\n        \n        // Convert the byte array to a hexadecimal string\n        StringBuilder hexString = new StringBuilder();\n        for (byte b : messageDigest) {\n            hexString.append(String.format(\"%02x\", b));\n        }\n        \n        // Return the hexadecimal string wrapped in Optional\n        return Optional.of(hexString.toString());\n    }\n}\n"}
{"task_id": "Java/163", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> generate_integers(int a, int b) {\n           List<Integer> result = new ArrayList<>();\n           int min = Math.min(a, b);\n           int max = Math.max(a, b);\n           \n           for (int i = min; i <= max; i++) {\n               if (i % 2 == 0 && i < 10) {\n                   result.add(i);\n               }\n           }\n           \n           return result;\n       }\n   }\n   "}
{"task_id": "Java/0", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean has_close_elements(List<Double> numbers, double threshold) {\n           for (int i = 0; i < numbers.size(); i++) {\n               for (int j = i + 1; j < numbers.size(); j++) {\n                   if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                       return true;\n                   }\n               }\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/1", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<String> separate_paren_groups(String paren_string) {\n           List<String> result = new ArrayList<>();\n           StringBuilder currentGroup = new StringBuilder();\n           int balance = 0;\n\n           for (char ch : paren_string.toCharArray()) {\n               if (ch == ' ') {\n                   continue;\n               }\n               currentGroup.append(ch);\n               if (ch == '(') {\n                   balance++;\n               } else if (ch == ')') {\n                   balance--;\n                   if (balance == 0) {\n                       result.add(currentGroup.toString());\n                       currentGroup.setLength(0); // Reset the buffer\n                   }\n               }\n           }\n\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/2", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public double truncate_number(double number) {\n           double integer_part = Math.floor(number);\n           double decimal_part = number - integer_part;\n           return decimal_part;\n       }\n   }\n   "}
{"task_id": "Java/3", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean below_zero(List<Integer> operations) {\n           int balance = 0;\n           for (int operation : operations) {\n               balance += operation;\n               if (balance < 0) {\n                   return true;\n               }\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/4", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public double mean_absolute_deviation(List<Double> numbers) {\n           // Calculate the mean of the dataset\n           double mean = 0;\n           for (double number : numbers) {\n               mean += number;\n           }\n           mean /= numbers.size();\n\n           // Calculate the sum of absolute differences\n           double sum_of_differences = 0;\n           for (double number : numbers) {\n               sum_of_differences += Math.abs(number - mean);\n           }\n\n           // Calculate and return the Mean Absolute Deviation\n           return sum_of_differences / numbers.size();\n       }\n   }\n   "}
{"task_id": "Java/5", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n           List<Integer> result = new ArrayList<>();\n           for (int i = 0; i < numbers.size() - 1; i++) {\n               result.add(numbers.get(i));\n               result.add(delimiter);\n           }\n           if (!numbers.isEmpty()) {\n               result.add(numbers.get(numbers.size() - 1));\n           }\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/6", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> parse_nested_parens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        String[] groups = paren_string.split(\" \");\n        \n        for (String group : groups) {\n            int currentLevel = 0;\n            int maxLevel = 0;\n            \n            for (char ch : group.toCharArray()) {\n                if (ch == '(') {\n                    currentLevel++;\n                    if (currentLevel > maxLevel) {\n                        maxLevel = currentLevel;\n                    }\n                } else if (ch == ')') {\n                    currentLevel--;\n                }\n            }\n            \n            result.add(maxLevel);\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/7", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                result.add(str);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/8", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> sum_product(List<Integer> numbers) {\n           int sum = 0;\n           int product = 1;\n           \n           for (int number : numbers) {\n               sum += number;\n               product *= number;\n           }\n           \n           // If the list is empty, sum and product should be 0 and 1 respectively\n           if (numbers.isEmpty()) {\n               sum = 0;\n               product = 1;\n           }\n           \n           return Arrays.asList(sum, product);\n       }\n   }\n   "}
{"task_id": "Java/9", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        if (numbers.isEmpty()) {\n            return result;\n        }\n        \n        int current_max = numbers.get(0);\n        result.add(current_max);\n        \n        for (int i = 1; i < numbers.size(); i++) {\n            int num = numbers.get(i);\n            if (num > current_max) {\n                current_max = num;\n            }\n            result.add(current_max);\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/10", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       // Helper function to check if a string is a palindrome\n       public boolean isPalindrome(String string) {\n           int i = 0;\n           int j = string.length() - 1;\n           while (i < j) {\n               if (string.charAt(i) != string.charAt(j)) {\n                   return false;\n               }\n               i++;\n               j--;\n           }\n           return true;\n       }\n\n       // Function to find the shortest palindrome that begins with a supplied string\n       public String make_palindrome(String string) {\n           if (string.isEmpty()) {\n               return \"\";\n           }\n\n           for (int i = 0; i < string.length(); i++) {\n               String suffix = string.substring(i);\n               if (isPalindrome(suffix)) {\n                   String prefix = string.substring(0, i);\n                   String reverse_prefix = new StringBuilder(prefix).reverse().toString();\n                   return string + reverse_prefix;\n               }\n           }\n\n           // If no palindromic suffix found, return the string with its reverse appended\n           return string + new StringBuilder(string).reverse().toString();\n       }\n   }\n   "}
{"task_id": "Java/11", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String string_xor(String a, String b) {\n           StringBuilder result = new StringBuilder();\n           int length = Math.min(a.length(), b.length());\n           \n           for (int i = 0; i < length; i++) {\n               char charA = a.charAt(i);\n               char charB = b.charAt(i);\n               char xorChar = (charA == charB) ? '0' : '1';\n               result.append(xorChar);\n           }\n           \n           return result.toString();\n       }\n   }\n   "}
{"task_id": "Java/12", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public Optional<String> longest(List<String> strings) {\n           if (strings.isEmpty()) {\n               return Optional.empty();\n           }\n           \n           String longestString = strings.get(0);\n           for (int i = 1; i < strings.size(); i++) {\n               if (strings.get(i).length() > longestString.length()) {\n                   longestString = strings.get(i);\n               }\n           }\n           \n           return Optional.of(longestString);\n       }\n   }\n   "}
{"task_id": "Java/13", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int greatest_common_divisor(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}\n"}
{"task_id": "Java/14", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<String> all_prefixes(String string) {\n           List<String> prefixes = new ArrayList<>();\n           for (int i = 1; i <= string.length(); i++) {\n               prefixes.add(string.substring(0, i));\n           }\n           return prefixes;\n       }\n   }\n   "}
{"task_id": "Java/15", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String string_sequence(int n) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            result.append(i).append(\" \");\n        }\n        return result.toString().trim();\n    }\n}\n"}
{"task_id": "Java/16", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int count_distinct_characters(String string) {\n           // Convert the string to lowercase to handle case insensitivity\n           string = string.toLowerCase();\n           \n           // Create a Set to store distinct characters\n           Set<Character> distinctCharacters = new HashSet<>();\n           \n           // Iterate through the string and add each character to the Set\n           for (char c : string.toCharArray()) {\n               distinctCharacters.add(c);\n           }\n           \n           // Return the size of the Set, which is the number of distinct characters\n           return distinctCharacters.size();\n       }\n   }\n   "}
{"task_id": "Java/17", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> parse_music(String string) {\n           List<Integer> beats = new ArrayList<>();\n           String[] notes = string.split(\" \");\n           \n           for (String note : notes) {\n               if (note.equals(\"o\")) {\n                   beats.add(4);\n               } else if (note.equals(\"o|\")) {\n                   beats.add(2);\n               } else if (note.equals(\".|\")) {\n                   beats.add(1);\n               }\n           }\n           \n           return beats;\n       }\n   }\n   "}
{"task_id": "Java/18", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int how_many_times(String string, String substring) {\n           if (substring.isEmpty()) {\n               return 0;\n           }\n           int count = 0;\n           int lengthOfString = string.length();\n           int lengthOfSubstring = substring.length();\n           for (int i = 0; i <= lengthOfString - lengthOfSubstring; i++) {\n               if (string.substring(i, i + lengthOfSubstring).equals(substring)) {\n                   count++;\n               }\n           }\n           return count;\n       }\n   }\n   "}
{"task_id": "Java/19", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String sort_numbers(String numbers) {\n           // Define the mapping from number words to their numerical values\n           Map<String, Integer> numberMap = new HashMap<>();\n           numberMap.put(\"zero\", 0);\n           numberMap.put(\"one\", 1);\n           numberMap.put(\"two\", 2);\n           numberMap.put(\"three\", 3);\n           numberMap.put(\"four\", 4);\n           numberMap.put(\"five\", 5);\n           numberMap.put(\"six\", 6);\n           numberMap.put(\"seven\", 7);\n           numberMap.put(\"eight\", 8);\n           numberMap.put(\"nine\", 9);\n\n           // Split the input string into an array of number words\n           String[] numberWords = numbers.split(\" \");\n\n           // Sort the array of number words using the map to determine their numerical values\n           Arrays.sort(numberWords, (a, b) -> numberMap.get(a) - numberMap.get(b));\n\n           // Join the sorted array back into a single string\n           return String.join(\" \", numberWords);\n       }\n   }\n   "}
{"task_id": "Java/20", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Double> find_closest_elements(List<Double> numbers) {\n           List<Double> closest_pair = new ArrayList<>();\n           closest_pair.add(numbers.get(0));\n           closest_pair.add(numbers.get(1));\n           double distance = Math.abs(numbers.get(1) - numbers.get(0));\n           \n           for (int i = 0; i < numbers.size(); i++) {\n               for (int j = i + 1; j < numbers.size(); j++) {\n                   double current_distance = Math.abs(numbers.get(i) - numbers.get(j));\n                   if (current_distance < distance) {\n                       closest_pair.clear();\n                       closest_pair.add(numbers.get(i));\n                       closest_pair.add(numbers.get(j));\n                       distance = current_distance;\n                   }\n               }\n           }\n           \n           Collections.sort(closest_pair);\n           return closest_pair;\n       }\n   }\n   "}
{"task_id": "Java/21", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Double> rescale_to_unit(List<Double> numbers) {\n           // Find the minimum and maximum values in the list\n           double min_value = Collections.min(numbers);\n           double max_value = Collections.max(numbers);\n           \n           // Create a new list to store the transformed values\n           List<Double> transformed_numbers = new ArrayList<>();\n           \n           // Apply the linear transformation to each number\n           for (double number : numbers) {\n               double transformed_value = (number - min_value) / (max_value - min_value);\n               transformed_numbers.add(transformed_value);\n           }\n           \n           // Return the transformed list\n           return transformed_numbers;\n       }\n   }\n   "}
{"task_id": "Java/22", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> filter_integers(List<Object> values) {\n           List<Integer> integers = new ArrayList<>();\n           for (Object value : values) {\n               if (value instanceof Integer) {\n                   integers.add((Integer) value);\n               }\n           }\n           return integers;\n       }\n   }\n   "}
{"task_id": "Java/23", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int strlen(String string) {\n        return string.length();\n    }\n}\n"}
{"task_id": "Java/24", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int largest_divisor(int n) {\n           if (n <= 1) {\n               return 0;  // Edge case: no divisors for numbers less than or equal to 1\n           }\n           for (int i = n / 2; i > 0; i--) {\n               if (n % i == 0) {\n                   return i;\n               }\n           }\n           return 1;  // Default case: 1 is always a divisor\n       }\n   }\n   "}
{"task_id": "Java/25", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while (n > 1) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n            i++;\n        }\n        return factors;\n    }\n}\n"}
{"task_id": "Java/26", "generation": "   import java.util.*;\n   import java.lang.*;\n   import java.util.stream.Collectors;\n\n   class Solution {\n       public List<Integer> remove_duplicates(List<Integer> numbers) {\n           Set<Integer> seen = new HashSet<>();\n           List<Integer> result = new ArrayList<>();\n           \n           for (Integer num : numbers) {\n               if (!seen.contains(num)) {\n                   seen.add(num);\n                   result.add(num);\n               }\n           }\n           \n           return result;\n       }\n   }\n   "}
{"task_id": "Java/27", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String flip_case(String string) {\n           StringBuilder result = new StringBuilder();\n           for (char ch : string.toCharArray()) {\n               if (Character.isLowerCase(ch)) {\n                   result.append(Character.toUpperCase(ch));\n               } else if (Character.isUpperCase(ch)) {\n                   result.append(Character.toLowerCase(ch));\n               } else {\n                   result.append(ch); // In case the character is neither lowercase nor uppercase\n               }\n           }\n           return result.toString();\n       }\n   }\n   "}
{"task_id": "Java/28", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String concatenate(List<String> strings) {\n           StringBuilder result = new StringBuilder();\n           for (String str : strings) {\n               result.append(str);\n           }\n           return result.toString();\n       }\n   }\n   "}
{"task_id": "Java/29", "generation": "   import java.util.*;\n   import java.util.stream.Collectors;\n\n   class Solution {\n       public List<String> filter_by_prefix(List<String> strings, String prefix) {\n           if (strings.isEmpty()) {\n               return Collections.emptyList();\n           }\n           return strings.stream()\n                         .filter(s -> s.startsWith(prefix))\n                         .collect(Collectors.toList());\n       }\n   }\n   "}
{"task_id": "Java/30", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> get_positive(List<Integer> l) {\n        // Convert the list to a stream and filter out non-positive numbers\n        return l.stream()\n                .filter(num -> num > 0)  // Keep only positive numbers\n                .collect(Collectors.toList());  // Collect the filtered numbers into a list\n    }\n}\n"}
{"task_id": "Java/31", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean is_prime(int n) {\n           if (n <= 1) {\n               return false;\n           }\n           if (n == 2) {\n               return true;\n           }\n           if (n % 2 == 0) {\n               return false;\n           }\n           for (int i = 3; i <= Math.sqrt(n); i += 2) {\n               if (n % i == 0) {\n                   return false;\n               }\n           }\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/32", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    // Evaluates polynomial with coefficients xs at point x.\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    // Finds a zero of the polynomial defined by coefficients xs.\n    public double find_zero(List<Double> xs) {\n        // Initial bounds for the bisection method\n        double a = -100.0; // Arbitrary lower bound\n        double b = 100.0;  // Arbitrary upper bound\n        \n        // Ensure the polynomial changes sign within the interval [a, b]\n        while (poly(xs, a) * poly(xs, b) > 0) {\n            a -= 10.0; // Expand the lower bound if necessary\n            b += 10.0; // Expand the upper bound if necessary\n        }\n        \n        // Bisection method\n        double tolerance = 1e-7; // Tolerance for the root\n        while (b - a > tolerance) {\n            double c = (a + b) / 2.0; // Midpoint\n            double fc = poly(xs, c);\n            \n            if (Math.abs(fc) < tolerance) {\n                return c; // Found a root\n            }\n            \n            if (poly(xs, a) * fc < 0) {\n                b = c; // Root is in the left half\n            } else {\n                a = c; // Root is in the right half\n            }\n        }\n        \n        return (a + b) / 2.0; // Return the midpoint as the root\n    }\n}\n"}
{"task_id": "Java/33", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> sort_third(List<Integer> l) {\n           List<Integer> sorted_values = new ArrayList<>();\n           List<Integer> result = new ArrayList<>();\n           \n           // Collect values at indices divisible by three\n           for (int i = 0; i < l.size(); i++) {\n               if (i % 3 == 0) {\n                   sorted_values.add(l.get(i));\n               }\n           }\n           \n           // Sort the collected values\n           Collections.sort(sorted_values);\n           \n           // Counter for sorted_values\n           int counter = 0;\n           \n           // Construct the result list\n           for (int i = 0; i < l.size(); i++) {\n               if (i % 3 == 0) {\n                   result.add(sorted_values.get(counter));\n                   counter++;\n               } else {\n                   result.add(l.get(i));\n               }\n           }\n           \n           return result;\n       }\n   }\n   "}
{"task_id": "Java/34", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> unique(List<Integer> l) {\n        // Step 1: Initialize a set to store unique elements\n        Set<Integer> uniqueSet = new HashSet<>();\n        \n        // Step 2: Iterate through each element in the input list and add to the set\n        for (Integer num : l) {\n            uniqueSet.add(num);\n        }\n        \n        // Step 3: Convert the set to a list\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n        \n        // Step 4: Sort the list\n        Collections.sort(uniqueList);\n        \n        // Step 5: Return the sorted list\n        return uniqueList;\n    }\n}\n"}
{"task_id": "Java/35", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int max_element(List<Integer> l) {\n           int max_value = l.get(0);\n           for (int i = 1; i < l.size(); i++) {\n               if (l.get(i) > max_value) {\n                   max_value = l.get(i);\n               }\n           }\n           return max_value;\n       }\n   }\n   "}
{"task_id": "Java/36", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int fizz_buzz(int n) {\n           int count = 0;\n           for (int i = 0; i < n; i++) {\n               if (i % 11 == 0 || i % 13 == 0) {\n                   String numStr = Integer.toString(i);\n                   for (char c : numStr.toCharArray()) {\n                       if (c == '7') {\n                           count++;\n                       }\n                   }\n               }\n           }\n           return count;\n       }\n   }\n   "}
{"task_id": "Java/37", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> sort_even(List<Integer> l) {\n           List<Integer> lPrime = new ArrayList<>();\n           List<Integer> evenValues = new ArrayList<>();\n           \n           // Extract even-indexed values\n           for (int i = 0; i < l.size(); i += 2) {\n               evenValues.add(l.get(i));\n           }\n           \n           // Sort the even-indexed values\n           Collections.sort(evenValues);\n           \n           // Reconstruct the new list l'\n           int evenIndex = 0;\n           for (int i = 0; i < l.size(); i++) {\n               if (i % 2 == 0) {\n                   lPrime.add(evenValues.get(evenIndex++));\n               } else {\n                   lPrime.add(l.get(i));\n               }\n           }\n           \n           return lPrime;\n       }\n   }\n   "}
{"task_id": "Java/38", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public String decode_cyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse the cycling in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n"}
{"task_id": "Java/39", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean isPrime(int number) {\n           if (number <= 1) {\n               return false;\n           }\n           for (int i = 2; i <= Math.sqrt(number); i++) {\n               if (number % i == 0) {\n                   return false;\n               }\n           }\n           return true;\n       }\n\n       public int prime_fib(int n) {\n           if (n <= 0) {\n               return -1;  // Invalid input\n           }\n           int count = 0;\n           int a = 0, b = 1;\n           while (count < n) {\n               int temp = a + b;\n               a = b;\n               b = temp;\n               if (isPrime(b)) {\n                   count++;\n               }\n           }\n           return b;\n       }\n   }\n   "}
{"task_id": "Java/40", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean triples_sum_to_zero(List<Integer> l) {\n           if (l.size() < 3) {\n               return false;\n           }\n           Collections.sort(l);\n           for (int i = 0; i < l.size() - 2; i++) {\n               int left = i + 1;\n               int right = l.size() - 1;\n               while (left < right) {\n                   int sum = l.get(i) + l.get(left) + l.get(right);\n                   if (sum == 0) {\n                       return true;\n                   } else if (sum < 0) {\n                       left++;\n                   } else {\n                       right--;\n                   }\n               }\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/41", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int car_race_collision(int n) {\n           return n * n;\n       }\n   }\n   "}
{"task_id": "Java/42", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> incr_list(List<Integer> l) {\n        // Using Java Streams for a functional approach\n        return l.stream()\n                .map(num -> num + 1)\n                .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/43", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean pairs_sum_to_zero(List<Integer> l) {\n           Set<Integer> seen = new HashSet<>();\n           for (int num : l) {\n               if (seen.contains(-num)) {\n                   return true;\n               }\n               seen.add(num);\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/44", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String change_base(int x, int base) {\n           if (x == 0) {\n               return \"0\";\n           }\n           \n           StringBuilder result = new StringBuilder();\n           while (x > 0) {\n               int remainder = x % base;\n               result.insert(0, remainder);\n               x = x / base;\n           }\n           \n           return result.toString();\n       }\n   }\n   "}
{"task_id": "Java/45", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangle_area(double a, double h) {\n        // Calculate the area using the formula (base * height) / 2\n        double area = (a * h) / 2;\n        // Return the calculated area\n        return area;\n    }\n}\n"}
{"task_id": "Java/46", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib4(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Input must be a non-negative integer.\");\n        }\n        if (n == 0 || n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 0;\n        }\n\n        int[] fib4_values = {0, 0, 2, 0};\n        for (int i = 4; i <= n; i++) {\n            int next_value = fib4_values[0] + fib4_values[1] + fib4_values[2] + fib4_values[3];\n            fib4_values[0] = fib4_values[1];\n            fib4_values[1] = fib4_values[2];\n            fib4_values[2] = fib4_values[3];\n            fib4_values[3] = next_value;\n        }\n        return fib4_values[3];\n    }\n}\n"}
{"task_id": "Java/47", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public double median(List<Integer> l) {\n           Collections.sort(l);\n           int n = l.size();\n           if (n % 2 != 0) {\n               return l.get(n / 2);\n           } else {\n               return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n           }\n       }\n   }\n   "}
{"task_id": "Java/48", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean is_palindrome(String text) {\n           int left = 0;\n           int right = text.length() - 1;\n           \n           while (left < right) {\n               if (text.charAt(left) != text.charAt(right)) {\n                   return false;\n               }\n               left++;\n               right--;\n           }\n           \n           return true;\n       }\n   }\n   "}
{"task_id": "Java/49", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int modp(int n, int p) {\n        if (n == 0) {\n            return 1;\n        }\n        \n        long result = 1;\n        long base = 2;\n        \n        while (n > 0) {\n            // If n is odd, multiply result by base and take modulo p\n            if (n % 2 == 1) {\n                result = (result * base) % p;\n            }\n            // Square the base and take modulo p\n            base = (base * base) % p;\n            // Divide n by 2\n            n = n / 2;\n        }\n        \n        return (int) result;\n    }\n}\n"}
{"task_id": "Java/50", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public String decode_shift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            // Calculate the original character by shifting back by 5 positions\n            char originalChar = (char) ('a' + ((ch - 5 - 'a' + 26) % 26));\n            sb.append(originalChar);\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/51", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String remove_vowels(String text) {\n           Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n           StringBuilder result = new StringBuilder();\n           \n           for (char c : text.toCharArray()) {\n               if (!vowels.contains(c)) {\n                   result.append(c);\n               }\n           }\n           \n           return result.toString();\n       }\n   }\n   "}
{"task_id": "Java/52", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean below_threshold(List<Integer> l, int t) {\n           for (int number : l) {\n               if (number >= t) {\n                   return false;\n               }\n           }\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/53", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add(int x, int y) {\n        return x + y;\n    }\n}\n"}
{"task_id": "Java/54", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean same_chars(String s0, String s1) {\n           if (s0.length() != s1.length()) {\n               return false;\n           }\n           \n           Map<Character, Integer> freqMap0 = new HashMap<>();\n           Map<Character, Integer> freqMap1 = new HashMap<>();\n           \n           // Populate frequency map for s0\n           for (char c : s0.toCharArray()) {\n               freqMap0.put(c, freqMap0.getOrDefault(c, 0) + 1);\n           }\n           \n           // Populate frequency map for s1\n           for (char c : s1.toCharArray()) {\n               freqMap1.put(c, freqMap1.getOrDefault(c, 0) + 1);\n           }\n           \n           // Compare frequency maps\n           return freqMap0.equals(freqMap1);\n       }\n   }\n   "}
{"task_id": "Java/55", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        \n        int a = 0;\n        int b = 1;\n        int fib = 0;\n        \n        for (int i = 2; i <= n; i++) {\n            fib = a + b;\n            a = b;\n            b = fib;\n        }\n        \n        return fib;\n    }\n}\n"}
{"task_id": "Java/56", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean correct_bracketing(String brackets) {\n           Stack<Character> stack = new Stack<>();\n           for (char ch : brackets.toCharArray()) {\n               if (ch == '<') {\n                   stack.push(ch);\n               } else if (ch == '>') {\n                   if (stack.isEmpty() || stack.pop() != '<') {\n                       return false;\n                   }\n               }\n           }\n           return stack.isEmpty();\n       }\n   }\n   "}
{"task_id": "Java/57", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean monotonic(List<Integer> l) {\n           if (l.size() <= 1) {\n               return true;\n           }\n           \n           boolean increasing = true;\n           boolean decreasing = true;\n           \n           for (int i = 0; i < l.size() - 1; i++) {\n               if (l.get(i) > l.get(i + 1)) {\n                   increasing = false;\n               }\n               if (l.get(i) < l.get(i + 1)) {\n                   decreasing = false;\n               }\n               \n               if (!increasing && !decreasing) {\n                   return false;\n               }\n           }\n           \n           return true;\n       }\n   }\n   "}
{"task_id": "Java/58", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n           Set<Integer> set = new HashSet<>(l1);\n           List<Integer> result = new ArrayList<>();\n           \n           for (Integer num : l2) {\n               if (set.contains(num)) {\n                   result.add(num);\n                   set.remove(num); // Ensure uniqueness\n               }\n           }\n           \n           Collections.sort(result);\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/59", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int largest_prime_factor(int n) {\n           int largest_prime = 2;\n           int current_number = n;\n           \n           // Divide out all factors of 2\n           while (current_number % 2 == 0) {\n               current_number /= 2;\n           }\n           \n           // Check for odd factors from 3 upwards\n           for (int i = 3; i <= Math.sqrt(current_number); i += 2) {\n               while (current_number % i == 0) {\n                   largest_prime = i;\n                   current_number /= i;\n               }\n           }\n           \n           // If current_number is still greater than 2, then it is a prime factor\n           if (current_number > 2) {\n               largest_prime = current_number;\n           }\n           \n           return largest_prime;\n       }\n   }\n   "}
{"task_id": "Java/60", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_to_n(int n) {\n        // Using the formula to calculate the sum of first n natural numbers\n        return n * (n + 1) / 2;\n    }\n}\n"}
{"task_id": "Java/61", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean correct_bracketing(String brackets) {\n           Stack<Character> stack = new Stack<>();\n           for (char ch : brackets.toCharArray()) {\n               if (ch == '(') {\n                   stack.push(ch);\n               } else if (ch == ')') {\n                   if (stack.isEmpty()) {\n                       return false;\n                   }\n                   stack.pop();\n               }\n           }\n           return stack.isEmpty();\n       }\n   }\n   "}
{"task_id": "Java/62", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> derivative(List<Integer> xs) {\n           List<Integer> derivativeCoefficients = new ArrayList<>();\n           \n           for (int i = 1; i < xs.size(); i++) {\n               derivativeCoefficients.add(xs.get(i) * i);\n           }\n           \n           return derivativeCoefficients;\n       }\n   }\n   "}
{"task_id": "Java/63", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fibfib(int n) {\n        if (n == 0 || n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n\n        int[] fibfibArray = new int[n + 1];\n        fibfibArray[0] = 0;\n        fibfibArray[1] = 0;\n        fibfibArray[2] = 1;\n\n        for (int i = 3; i <= n; i++) {\n            fibfibArray[i] = fibfibArray[i - 1] + fibfibArray[i - 2] + fibfibArray[i - 3];\n        }\n\n        return fibfibArray[n];\n    }\n}\n"}
{"task_id": "Java/64", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int vowels_count(String s) {\n           s = s.toLowerCase();\n           int count = 0;\n           Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u'));\n           \n           for (char c : s.toCharArray()) {\n               if (vowels.contains(c)) {\n                   count++;\n               }\n           }\n           \n           if (s.endsWith(\"y\")) {\n               count++;\n           }\n           \n           return count;\n       }\n   }\n   "}
{"task_id": "Java/65", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String circular_shift(int x, int shift) {\n           String str_x = Integer.toString(x);\n           int num_digits = str_x.length();\n           \n           if (shift > num_digits) {\n               // Reverse the string\n               return new StringBuilder(str_x).reverse().toString();\n           } else {\n               // Calculate effective shift\n               shift = shift % num_digits;\n               \n               // Split the string into two parts\n               String part1 = str_x.substring(0, num_digits - shift);\n               String part2 = str_x.substring(num_digits - shift);\n               \n               // Rearrange parts to perform circular shift\n               return part2 + part1;\n           }\n       }\n   }\n   "}
{"task_id": "Java/66", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int digitSum(String s) {\n           int sum = 0;\n           for (char c : s.toCharArray()) {\n               if (Character.isUpperCase(c)) {\n                   sum += (int) c;\n               }\n           }\n           return sum;\n       }\n   }\n   "}
{"task_id": "Java/67", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruit_distribution(String s, int n) {\n        // Split the input string by spaces\n        String[] parts = s.split(\" \");\n        \n        // Extract the number of apples and oranges\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[2]);\n        \n        // Calculate the number of mangoes\n        int mangoes = n - apples - oranges;\n        \n        return mangoes;\n    }\n}\n"}
{"task_id": "Java/68", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> pluck(List<Integer> arr) {\n           int smallestEvenValue = Integer.MAX_VALUE;\n           int smallestIndex = -1;\n\n           for (int i = 0; i < arr.size(); i++) {\n               int currentValue = arr.get(i);\n               if (currentValue % 2 == 0 && currentValue < smallestEvenValue) {\n                   smallestEvenValue = currentValue;\n                   smallestIndex = i;\n               }\n           }\n\n           if (smallestEvenValue == Integer.MAX_VALUE) {\n               return new ArrayList<>();\n           } else {\n               return Arrays.asList(smallestEvenValue, smallestIndex);\n           }\n       }\n   }\n   "}
{"task_id": "Java/69", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int search(List<Integer> lst) {\n           // Step 1: Initialize a HashMap to store frequency of each integer\n           Map<Integer, Integer> frequencyMap = new HashMap<>();\n           \n           // Step 2: Populate the HashMap with frequencies\n           for (int num : lst) {\n               frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n           }\n           \n           // Step 3: Initialize max_valid_integer to -1\n           int max_valid_integer = -1;\n           \n           // Step 4: Iterate through the HashMap to find the greatest valid integer\n           for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n               int num = entry.getKey();\n               int freq = entry.getValue();\n               if (freq >= num) {\n                   if (num > max_valid_integer) {\n                       max_valid_integer = num;\n                   }\n               }\n           }\n           \n           // Step 5: Return the result\n           return max_valid_integer;\n       }\n   }\n   "}
{"task_id": "Java/70", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> strange_sort_list(List<Integer> lst) {\n           if (lst.isEmpty()) {\n               return new ArrayList<>();\n           }\n           \n           Collections.sort(lst);\n           List<Integer> result = new ArrayList<>();\n           int start = 0;\n           int end = lst.size() - 1;\n           boolean toggle = true;\n           \n           while (start <= end) {\n               if (toggle) {\n                   result.add(lst.get(start));\n                   start++;\n               } else {\n                   result.add(lst.get(end));\n                   end--;\n               }\n               toggle = !toggle;\n           }\n           \n           return result;\n       }\n   }\n   "}
{"task_id": "Java/71", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public double triangle_area(double a, double b, double c) {\n           if (!is_valid_triangle(a, b, c)) {\n               return -1;\n           }\n           double s = (a + b + c) / 2;\n           double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n           return Math.round(area * 100.0) / 100.0;\n       }\n\n       private boolean is_valid_triangle(double a, double b, double c) {\n           return a + b > c && a + c > b && b + c > a;\n       }\n   }\n   "}
{"task_id": "Java/72", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean will_it_fly(List<Integer> q, int w) {\n        if (q.isEmpty()) {\n            return false;\n        }\n\n        // Calculate the sum of elements in q\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n\n        // Check if the sum is less than or equal to the maximum possible weight\n        if (sum > w) {\n            return false;\n        }\n\n        // Check if q is a palindromic list\n        List<Integer> reversedQ = new ArrayList<>(q);\n        Collections.reverse(reversedQ);\n        return q.equals(reversedQ);\n    }\n}\n"}
{"task_id": "Java/73", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int smallest_change(List<Integer> arr) {\n           int left = 0;\n           int right = arr.size() - 1;\n           int change_count = 0;\n\n           while (left < right) {\n               if (!arr.get(left).equals(arr.get(right))) {\n                   change_count++;\n               }\n               left++;\n               right--;\n           }\n\n           return change_count;\n       }\n   }\n   "}
{"task_id": "Java/74", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<String> total_match(List<String> lst1, List<String> lst2) {\n           int total_chars_lst1 = 0;\n           int total_chars_lst2 = 0;\n           \n           // Calculate total characters in lst1\n           for (String str : lst1) {\n               total_chars_lst1 += str.length();\n           }\n           \n           // Calculate total characters in lst2\n           for (String str : lst2) {\n               total_chars_lst2 += str.length();\n           }\n           \n           // Compare and return the appropriate list\n           if (total_chars_lst1 <= total_chars_lst2) {\n               return lst1;\n           } else {\n               return lst2;\n           }\n       }\n   }\n   "}
{"task_id": "Java/75", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean is_multiply_prime(int a) {\n           List<Integer> primes = generatePrimesLessThan100();\n           for (int i = 0; i < primes.size(); i++) {\n               for (int j = i + 1; j < primes.size(); j++) {\n                   for (int k = j + 1; k < primes.size(); k++) {\n                       if (primes.get(i) * primes.get(j) * primes.get(k) == a) {\n                           return true;\n                       }\n                   }\n               }\n           }\n           return false;\n       }\n\n       private List<Integer> generatePrimesLessThan100() {\n           List<Integer> primes = new ArrayList<>();\n           for (int i = 2; i < 100; i++) {\n               if (is_prime(i)) {\n                   primes.add(i);\n               }\n           }\n           return primes;\n       }\n\n       private boolean is_prime(int n) {\n           if (n <= 1) {\n               return false;\n           }\n           for (int i = 2; i <= Math.sqrt(n); i++) {\n               if (n % i == 0) {\n                   return false;\n               }\n           }\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/76", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean is_simple_power(int x, int n) {\n           if (n == 1) {\n               return x == 1;\n           }\n           int power = 1;\n           while (power < x) {\n               power *= n;\n           }\n           return power == x;\n       }\n   }\n   "}
{"task_id": "Java/77", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean iscube(int a) {\n           if (a == 0) {\n               return true;\n           }\n           int n = 0;\n           while (n * n * n <= Math.abs(a)) {\n               if (n * n * n == Math.abs(a)) {\n                   if (a >= 0 || n == 0) {\n                       return true;\n                   } else if (a < 0 && n != 0) {\n                       return true;\n                   }\n               }\n               n++;\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/78", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int hex_key(String num) {\n           // Set of prime hexadecimal digits in decimal form\n           Set<Integer> primeHexDigits = new HashSet<>(Arrays.asList(2, 3, 5, 7, 11, 13));\n           \n           // Counter for prime digits\n           int count = 0;\n           \n           // Iterate through each character in the input string\n           for (char ch : num.toCharArray()) {\n               int decimalValue;\n               if (ch >= '0' && ch <= '9') {\n                   decimalValue = ch - '0';\n               } else if (ch >= 'A' && ch <= 'F') {\n                   decimalValue = ch - 'A' + 10;\n               } else {\n                   continue; // Skip invalid characters (though the problem guarantees valid input)\n               }\n               \n               // Check if the decimal value is a prime hexadecimal digit\n               if (primeHexDigits.contains(decimalValue)) {\n                   count++;\n               }\n           }\n           \n           return count;\n       }\n   }\n   "}
{"task_id": "Java/79", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String decimal_to_binary(int decimal) {\n        // Convert the decimal number to a binary string\n        String binaryString = Integer.toBinaryString(decimal);\n        \n        // Prepend and append 'db' to the binary string\n        String result = \"db\" + binaryString + \"db\";\n        \n        // Return the modified string\n        return result;\n    }\n}\n"}
{"task_id": "Java/80", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean is_happy(String s) {\n           // Check if the length of the string is less than 3\n           if (s.length() < 3) {\n               return false;\n           }\n           \n           // Iterate through the string and check every set of 3 consecutive characters\n           for (int i = 0; i <= s.length() - 3; i++) {\n               char first = s.charAt(i);\n               char second = s.charAt(i + 1);\n               char third = s.charAt(i + 2);\n               \n               // Check if any of the 3 consecutive characters are the same\n               if (first == second || first == third || second == third) {\n                   return false;\n               }\n           }\n           \n           // If all sets of 3 consecutive characters are distinct, return true\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/81", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        \n        for (Double gpa : grades) {\n            if (gpa == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        \n        return letterGrades;\n    }\n}\n"}
{"task_id": "Java/82", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean prime_length(String string) {\n           int length = string.length();\n           if (length <= 1) {\n               return false;\n           }\n           for (int i = 2; i <= Math.sqrt(length); i++) {\n               if (length % i == 0) {\n                   return false;\n               }\n           }\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/83", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int starts_one_ends(int n) {\n        // Base case: if n is 1, there is only one number '1'\n        if (n == 1) {\n            return 1;\n        }\n        \n        // Calculate the number of n-digit numbers\n        int total_n_digit_numbers = (int) Math.pow(10, n);\n        \n        // Numbers starting with '1'\n        int starts_with_one = (int) Math.pow(10, n - 1);\n        \n        // Numbers ending with '1'\n        int ends_with_one = (int) Math.pow(10, n - 1);\n        \n        // Overlap (numbers that start and end with '1')\n        int overlap = 1; // Only '11' for n = 2, '111' for n = 3, etc.\n        \n        // Total count\n        int count = starts_with_one + ends_with_one - overlap;\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/84", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(int N) {\n        // Initialize sum to 0\n        int sum = 0;\n        \n        // Loop through each digit of N\n        while (N > 0) {\n            sum += N % 10;  // Add the last digit to sum\n            N /= 10;        // Remove the last digit from N\n        }\n        \n        // Convert sum to binary and return as string\n        return Integer.toBinaryString(sum);\n    }\n}\n"}
{"task_id": "Java/85", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int add(List<Integer> lst) {\n           int sum = 0;\n           for (int i = 0; i < lst.size(); i++) {\n               if (i % 2 == 1) { // Check if index is odd\n                   if (lst.get(i) % 2 == 0) { // Check if element is even\n                       sum += lst.get(i);\n                   }\n               }\n           }\n           return sum;\n       }\n   }\n   "}
{"task_id": "Java/86", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String anti_shuffle(String s) {\n           // Split the string into words\n           String[] words = s.split(\" \");\n           \n           // Process each word\n           for (int i = 0; i < words.length; i++) {\n               // Convert word to char array, sort it, and convert back to string\n               char[] chars = words[i].toCharArray();\n               Arrays.sort(chars);\n               words[i] = new String(chars);\n           }\n           \n           // Join the words back into a single string with spaces\n           return String.join(\" \", words);\n       }\n   }\n   "}
{"task_id": "Java/87", "generation": "   import java.util.*;\n\n   class Solution {\n       public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n           List<List<Integer>> coordinates = new ArrayList<>();\n           \n           // Iterate through each row and each column to find occurrences of x\n           for (int i = 0; i < lst.size(); i++) {\n               List<Integer> row = lst.get(i);\n               for (int j = 0; j < row.size(); j++) {\n                   if (row.get(j) == x) {\n                       coordinates.add(Arrays.asList(i, j));\n                   }\n               }\n           }\n           \n           // Sort the coordinates\n           coordinates.sort((a, b) -> {\n               int rowComparison = a.get(0).compareTo(b.get(0));\n               if (rowComparison != 0) {\n                   return rowComparison;\n               } else {\n                   return b.get(1).compareTo(a.get(1));\n               }\n           });\n           \n           return coordinates;\n       }\n   }\n   "}
{"task_id": "Java/88", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> sort_array(List<Integer> array) {\n           if (array.isEmpty()) {\n               return new ArrayList<>();\n           }\n           \n           int first = array.get(0);\n           int last = array.get(array.size() - 1);\n           int sum = first + last;\n           \n           List<Integer> copy = new ArrayList<>(array);\n           \n           if (sum % 2 != 0) {\n               // Sum is odd, sort in ascending order\n               Collections.sort(copy);\n           } else {\n               // Sum is even, sort in descending order\n               Collections.sort(copy, Collections.reverseOrder());\n           }\n           \n           return copy;\n       }\n   }\n   "}
{"task_id": "Java/89", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String encrypt(String s) {\n           StringBuilder result = new StringBuilder();\n           for (char c : s.toCharArray()) {\n               if (c >= 'a' && c <= 'z') {\n                   char new_char = (char) ((c + 4 - 'a') % 26 + 'a');\n                   result.append(new_char);\n               } else {\n                   result.append(c);\n               }\n           }\n           return result.toString();\n       }\n   }\n   "}
{"task_id": "Java/90", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public Optional<Integer> next_smallest(List<Integer> lst) {\n           if (lst.isEmpty() || new HashSet<>(lst).size() < 2) {\n               return Optional.empty();\n           }\n           \n           Set<Integer> uniqueElements = new HashSet<>(lst);\n           List<Integer> sortedList = new ArrayList<>(uniqueElements);\n           Collections.sort(sortedList);\n           \n           if (sortedList.size() < 2) {\n               return Optional.empty();\n           }\n           \n           return Optional.of(sortedList.get(1));\n       }\n   }\n   "}
{"task_id": "Java/91", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int is_bored(String S) {\n        // Split the string into sentences using delimiters\n        String[] sentences = S.split(\"[.!?]\");\n        \n        // Initialize a counter for boredoms\n        int boredomCount = 0;\n        \n        // Loop through each sentence\n        for (String sentence : sentences) {\n            // Trim the sentence to remove leading and trailing spaces\n            sentence = sentence.trim();\n            \n            // Check if the sentence starts with \"I\"\n            if (sentence.startsWith(\"I\")) {\n                // Increment the counter\n                boredomCount++;\n            }\n        }\n        \n        // Return the count of boredoms\n        return boredomCount;\n    }\n}\n"}
{"task_id": "Java/92", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean any_int(Object x, Object y, Object z) {\n           // Check if all three objects are instances of Integer\n           if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n               // Convert objects to integers\n               int intX = (Integer) x;\n               int intY = (Integer) y;\n               int intZ = (Integer) z;\n               \n               // Check if any one of the integers is equal to the sum of the other two\n               if (intX == intY + intZ || intY == intX + intZ || intZ == intX + intY) {\n                   return true;\n               }\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/93", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String encode(String message) {\n           StringBuilder result = new StringBuilder();\n           Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n           Map<Character, Character> vowelReplacements = new HashMap<>();\n           vowelReplacements.put('a', 'c');\n           vowelReplacements.put('e', 'g');\n           vowelReplacements.put('i', 'k');\n           vowelReplacements.put('o', 'q');\n           vowelReplacements.put('u', 'w');\n           vowelReplacements.put('A', 'C');\n           vowelReplacements.put('E', 'G');\n           vowelReplacements.put('I', 'K');\n           vowelReplacements.put('O', 'Q');\n           vowelReplacements.put('U', 'W');\n\n           for (char ch : message.toCharArray()) {\n               if (vowels.contains(ch)) {\n                   result.append(vowelReplacements.get(ch));\n               } else {\n                   if (Character.isUpperCase(ch)) {\n                       result.append(Character.toLowerCase(ch));\n                   } else {\n                       result.append(Character.toUpperCase(ch));\n                   }\n               }\n           }\n           return result.toString();\n       }\n   }\n   "}
{"task_id": "Java/94", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean isPrime(int n) {\n           if (n <= 1) {\n               return false;\n           }\n           for (int i = 2; i <= Math.sqrt(n); i++) {\n               if (n % i == 0) {\n                   return false;\n               }\n           }\n           return true;\n       }\n\n       public int sumOfDigits(int n) {\n           int sum = 0;\n           while (n > 0) {\n               sum += n % 10;\n               n /= 10;\n           }\n           return sum;\n       }\n\n       public int skjkasdkd(List<Integer> lst) {\n           int largestPrime = -1;\n           for (int number : lst) {\n               if (isPrime(number) && number > largestPrime) {\n                   largestPrime = number;\n               }\n           }\n           if (largestPrime == -1) {\n               return 0;\n           }\n           return sumOfDigits(largestPrime);\n       }\n   }\n   "}
{"task_id": "Java/95", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean check_dict_case(Map<Object, Object> dict) {\n           if (dict.isEmpty()) {\n               return false;\n           }\n           for (Object key : dict.keySet()) {\n               if (!(key instanceof String)) {\n                   return false;\n               }\n               String strKey = (String) key;\n               if (!strKey.equals(strKey.toLowerCase()) && !strKey.equals(strKey.toUpperCase())) {\n                   return false;\n               }\n           }\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/96", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<>();\n        if (n < 2) {\n            return primes;\n        }\n\n        boolean[] isPrime = new boolean[n];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = isPrime[1] = false; // 0 and 1 are not prime numbers\n\n        for (int i = 2; i * i < n; i++) {\n            if (isPrime[i]) {\n                for (int j = i * i; j < n; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n\n        for (int i = 2; i < n; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n            }\n        }\n\n        return primes;\n    }\n}\n"}
{"task_id": "Java/97", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int multiply(int a, int b) {\n           int unit_digit_a = Math.abs(a) % 10;\n           int unit_digit_b = Math.abs(b) % 10;\n           return unit_digit_a * unit_digit_b;\n       }\n   }\n   "}
{"task_id": "Java/98", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0) { // Check if index is even\n                char ch = s.charAt(i);\n                if (ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U') {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/99", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int closest_integer(String value) {\n           double number = Double.parseDouble(value);\n           int floor = (int) Math.floor(number);\n           int ceil = (int) Math.ceil(number);\n           \n           if (number - floor == 0.5) {\n               return number > 0 ? ceil : floor;\n           } else {\n               return (int) Math.round(number);\n           }\n       }\n   }\n   "}
{"task_id": "Java/100", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> make_a_pile(int n) {\n           List<Integer> pile = new ArrayList<>();\n           int currentStones = n;\n           \n           for (int i = 0; i < n; i++) {\n               pile.add(currentStones);\n               if (currentStones % 2 == 1) {\n                   currentStones += 2; // Next odd number\n               } else {\n                   currentStones += 2; // Next even number\n               }\n           }\n           \n           return pile;\n       }\n   }\n   "}
{"task_id": "Java/101", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> words_string(String s) {\n        // Split the string using the regular expression [,\\\\s]+\n        String[] wordsArray = s.split(\"[,\\\\s]+\");\n        \n        // Convert the array to a list\n        List<String> wordsList = Arrays.asList(wordsArray);\n        \n        // Return the list of words\n        return wordsList;\n    }\n}\n"}
{"task_id": "Java/102", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int choose_num(int x, int y) {\n           // Ensure x is less than or equal to y\n           if (x > y) {\n               return -1;\n           }\n           \n           // Iterate from y down to x\n           for (int i = y; i >= x; i--) {\n               // Check if the number is even\n               if (i % 2 == 0) {\n                   return i;\n               }\n           }\n           \n           // If no even number is found, return -1\n           return -1;\n       }\n   }\n   "}
{"task_id": "Java/103", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public Object rounded_avg(int n, int m) {\n           if (n > m) {\n               return -1;\n           }\n           \n           int sum = 0;\n           int count = m - n + 1;\n           \n           for (int i = n; i <= m; i++) {\n               sum += i;\n           }\n           \n           double average = (double) sum / count;\n           int rounded_average = (int) Math.round(average);\n           String binary_representation = Integer.toBinaryString(rounded_average);\n           \n           return binary_representation;\n       }\n   }\n   "}
{"task_id": "Java/104", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> unique_digits(List<Integer> x) {\n           List<Integer> result = new ArrayList<>();\n           for (int num : x) {\n               if (!containsEvenDigit(num)) {\n                   result.add(num);\n               }\n           }\n           Collections.sort(result);\n           return result;\n       }\n\n       private boolean containsEvenDigit(int number) {\n           while (number > 0) {\n               int digit = number % 10;\n               if (digit % 2 == 0) {\n                   return true;\n               }\n               number /= 10;\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/105", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<String> by_length(List<Integer> arr) {\n           // Initialize a list to store valid numbers\n           List<Integer> validNumbers = new ArrayList<>();\n           \n           // Iterate through the input array\n           for (int num : arr) {\n               if (num >= 1 && num <= 9) {\n                   validNumbers.add(num);\n               }\n           }\n           \n           // Sort the valid numbers list\n           Collections.sort(validNumbers);\n           \n           // Reverse the sorted list\n           Collections.reverse(validNumbers);\n           \n           // Initialize a map to store the number-to-name mapping\n           Map<Integer, String> numberToName = new HashMap<>();\n           numberToName.put(1, \"One\");\n           numberToName.put(2, \"Two\");\n           numberToName.put(3, \"Three\");\n           numberToName.put(4, \"Four\");\n           numberToName.put(5, \"Five\");\n           numberToName.put(6, \"Six\");\n           numberToName.put(7, \"Seven\");\n           numberToName.put(8, \"Eight\");\n           numberToName.put(9, \"Nine\");\n           \n           // Initialize an empty list to store the result\n           List<String> result = new ArrayList<>();\n           \n           // Iterate through the reversed list\n           for (int num : validNumbers) {\n               result.add(numberToName.get(num));\n           }\n           \n           // Return the result list\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/106", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> f(int n) {\n           List<Integer> result = new ArrayList<>();\n           for (int i = 1; i <= n; i++) {\n               if (i % 2 == 0) {\n                   // Calculate factorial of i\n                   int factorial = 1;\n                   for (int j = 1; j <= i; j++) {\n                       factorial *= j;\n                   }\n                   result.add(factorial);\n               } else {\n                   // Calculate sum of numbers from 1 to i\n                   int sum = 0;\n                   for (int j = 1; j <= i; j++) {\n                       sum += j;\n                   }\n                   result.add(sum);\n               }\n           }\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/107", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> even_odd_palindrome(int n) {\n           int even_count = 0;\n           int odd_count = 0;\n\n           for (int i = 1; i <= n; i++) {\n               if (isPalindrome(i)) {\n                   if (i % 2 == 0) {\n                       even_count++;\n                   } else {\n                       odd_count++;\n                   }\n               }\n           }\n\n           return Arrays.asList(even_count, odd_count);\n       }\n\n       private boolean isPalindrome(int number) {\n           String str = Integer.toString(number);\n           String reverseStr = new StringBuilder(str).reverse().toString();\n           return str.equals(reverseStr);\n       }\n   }\n   "}
{"task_id": "Java/108", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int count_nums(List<Integer> arr) {\n           int count = 0;\n           for (int number : arr) {\n               int sum_of_digits = 0;\n               int abs_number = Math.abs(number);\n               while (abs_number > 0) {\n                   int digit = abs_number % 10;\n                   if (number < 0 && abs_number == Math.abs(number)) {\n                       digit = -digit;\n                   }\n                   sum_of_digits += digit;\n                   abs_number /= 10;\n               }\n               if (sum_of_digits > 0) {\n                   count++;\n               }\n           }\n           return count;\n       }\n   }\n   "}
{"task_id": "Java/109", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean move_one_ball(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        int n = arr.size();\n        int rotationPoint = -1;\n\n        // Find the rotation point\n        for (int i = 0; i < n - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                rotationPoint = i + 1;\n                break;\n            }\n        }\n\n        // If no rotation point found, the array is already sorted\n        if (rotationPoint == -1) {\n            return true;\n        }\n\n        // Check if the array from rotationPoint to end is sorted\n        for (int i = rotationPoint; i < n - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                return false;\n            }\n        }\n\n        // Check if the last element of the first part is <= the first element of the second part\n        if (arr.get(n - 1) > arr.get(0)) {\n            return false;\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/110", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String exchange(List<Integer> lst1, List<Integer> lst2) {\n           int count_odd_in_lst1 = 0;\n           int count_even_in_lst2 = 0;\n           \n           for (int num : lst1) {\n               if (num % 2 != 0) {\n                   count_odd_in_lst1++;\n               }\n           }\n           \n           for (int num : lst2) {\n               if (num % 2 == 0) {\n                   count_even_in_lst2++;\n               }\n           }\n           \n           if (count_even_in_lst2 >= count_odd_in_lst1) {\n               return \"YES\";\n           } else {\n               return \"NO\";\n           }\n       }\n   }\n   "}
{"task_id": "Java/111", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public Map<String, Integer> histogram(String test) {\n           Map<String, Integer> counts = new HashMap<>();\n           String[] letters = test.split(\" \");\n           \n           for (String letter : letters) {\n               if (!letter.isEmpty()) {\n                   counts.put(letter, counts.getOrDefault(letter, 0) + 1);\n               }\n           }\n           \n           int maxCount = 0;\n           for (int count : counts.values()) {\n               if (count > maxCount) {\n                   maxCount = count;\n               }\n           }\n           \n           Map<String, Integer> result = new HashMap<>();\n           for (Map.Entry<String, Integer> entry : counts.entrySet()) {\n               if (entry.getValue() == maxCount) {\n                   result.put(entry.getKey(), entry.getValue());\n               }\n           }\n           \n           return result;\n       }\n   }\n   "}
{"task_id": "Java/112", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Object> reverse_delete(String s, String c) {\n           // Create a set from characters in c\n           Set<Character> charSet = new HashSet<>();\n           for (char ch : c.toCharArray()) {\n               charSet.add(ch);\n           }\n\n           // Initialize an empty result string\n           StringBuilder result = new StringBuilder();\n\n           // Iterate through s and build the result string\n           for (char ch : s.toCharArray()) {\n               if (!charSet.contains(ch)) {\n                   result.append(ch);\n               }\n           }\n\n           // Check if the result string is a palindrome\n           String resultStr = result.toString();\n           String reversedStr = new StringBuilder(resultStr).reverse().toString();\n           boolean isPalindrome = resultStr.equals(reversedStr);\n\n           // Return the result string and the palindrome check result\n           List<Object> resultList = new ArrayList<>();\n           resultList.add(resultStr);\n           resultList.add(isPalindrome);\n           return resultList;\n       }\n   }\n   "}
{"task_id": "Java/113", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<String> odd_count(List<String> lst) {\n           List<String> result = new ArrayList<>();\n           for (int i = 0; i < lst.size(); i++) {\n               String str = lst.get(i);\n               int oddCount = 0;\n               for (char ch : str.toCharArray()) {\n                   if (Character.getNumericValue(ch) % 2 != 0) {\n                       oddCount++;\n                   }\n               }\n               String output = String.format(\"the number of odd elements %dn the str%dng %d of the %dnput.\", oddCount, oddCount, oddCount, oddCount);\n               result.add(output);\n           }\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/114", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int minSubArraySum(List<Integer> nums) {\n        if (nums == null || nums.size() == 0) {\n            throw new IllegalArgumentException(\"List must contain at least one element\");\n        }\n\n        int min_ending_here = nums.get(0);\n        int min_so_far = nums.get(0);\n\n        for (int i = 1; i < nums.size(); i++) {\n            int current = nums.get(i);\n            min_ending_here = Math.min(current, min_ending_here + current);\n            min_so_far = Math.min(min_so_far, min_ending_here);\n        }\n\n        return min_so_far;\n    }\n}\n"}
{"task_id": "Java/115", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int max_fill(List<List<Integer>> grid, int capacity) {\n           int total_lowers = 0;\n           for (List<Integer> row : grid) {\n               int water_units = 0;\n               for (int unit : row) {\n                   if (unit == 1) {\n                       water_units++;\n                   }\n               }\n               int lowers_needed = (int) Math.ceil((double) water_units / capacity);\n               total_lowers += lowers_needed;\n           }\n           return total_lowers;\n       }\n   }\n   "}
{"task_id": "Java/116", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> arr) {\n        // Custom comparator to sort based on number of ones in binary representation\n        arr.sort((a, b) -> {\n            int countA = Integer.bitCount(a);\n            int countB = Integer.bitCount(b);\n            if (countA == countB) {\n                return Integer.compare(a, b);\n            }\n            return Integer.compare(countA, countB);\n        });\n        return arr;\n    }\n}\n"}
{"task_id": "Java/117", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<String> select_words(String s, int n) {\n           // Initialize the result list\n           List<String> result = new ArrayList<>();\n           \n           // Check if the string is empty\n           if (s.isEmpty()) {\n               return result;\n           }\n           \n           // Split the string into words\n           String[] words = s.split(\" \");\n           \n           // Define a set of vowels for consonant checking\n           Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n           \n           // Iterate through each word\n           for (String word : words) {\n               int consonantCount = 0;\n               \n               // Count consonants in the word\n               for (char c : word.toCharArray()) {\n                   if (!vowels.contains(c) && Character.isLetter(c)) {\n                       consonantCount++;\n                   }\n               }\n               \n               // If the word has exactly n consonants, add it to the result list\n               if (consonantCount == n) {\n                   result.add(word);\n               }\n           }\n           \n           // Return the result list\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/118", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String get_closest_vowel(String word) {\n           Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n           Set<Character> consonants = new HashSet<>(Arrays.asList('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z', 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'));\n           \n           for (int i = word.length() - 1; i > 0; i--) {\n               if (vowels.contains(word.charAt(i))) {\n                   if (i < word.length() - 1 && consonants.contains(word.charAt(i - 1)) && consonants.contains(word.charAt(i + 1))) {\n                       return String.valueOf(word.charAt(i));\n                   }\n               }\n           }\n           return \"\";\n       }\n   }\n   "}
{"task_id": "Java/119", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String match_parens(List<String> lst) {\n           int openCount1 = 0, closeCount1 = 0;\n           int openCount2 = 0, closeCount2 = 0;\n\n           // Count unmatched parentheses in the first string\n           for (char c : lst.get(0).toCharArray()) {\n               if (c == '(') {\n                   openCount1++;\n               } else {\n                   if (openCount1 > 0) {\n                       openCount1--;\n                   } else {\n                       closeCount1++;\n                   }\n               }\n           }\n\n           // Count unmatched parentheses in the second string\n           for (char c : lst.get(1).toCharArray()) {\n               if (c == '(') {\n                   openCount2++;\n               } else {\n                   if (openCount2 > 0) {\n                       openCount2--;\n                   } else {\n                       closeCount2++;\n                   }\n               }\n           }\n\n           // Check if we can balance the unmatched parentheses\n           if (openCount1 + openCount2 == closeCount1 + closeCount2) {\n               return \"Yes\";\n           } else {\n               return \"No\";\n           }\n       }\n   }\n   "}
{"task_id": "Java/120", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Initialize a max-heap\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n        \n        // Add all elements of arr to the max-heap\n        for (int num : arr) {\n            maxHeap.add(num);\n        }\n        \n        // List to store the k largest elements\n        List<Integer> result = new ArrayList<>();\n        \n        // Extract the top k elements from the max-heap\n        for (int i = 0; i < k; i++) {\n            result.add(maxHeap.poll());\n        }\n        \n        // Sort the extracted elements in ascending order\n        Collections.sort(result);\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/121", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int solution(List<Integer> lst) {\n           int sum = 0;\n           for (int i = 0; i < lst.size(); i++) {\n               if (i % 2 == 0) { // Check if the position is even\n                   if (lst.get(i) % 2 != 0) { // Check if the element is odd\n                       sum += lst.get(i);\n                   }\n               }\n           }\n           return sum;\n       }\n   }\n   "}
{"task_id": "Java/122", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int add_elements(List<Integer> arr, int k) {\n           int sum = 0;\n           for (int i = 0; i < k; i++) {\n               int num = arr.get(i);\n               if (num >= 0 && num <= 99) {\n                   sum += num;\n               }\n           }\n           return sum;\n       }\n   }\n   "}
{"task_id": "Java/123", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> get_odd_collatz(int n) {\n        List<Integer> odd_numbers = new ArrayList<>();\n        \n        while (n != 1) {\n            if (n % 2 != 0) { // Check if n is odd\n                odd_numbers.add(n);\n            }\n            if (n % 2 == 0) { // If n is even\n                n = n / 2;\n            } else { // If n is odd\n                n = 3 * n + 1;\n            }\n        }\n        \n        // Add the final 1 to the list\n        odd_numbers.add(1);\n        \n        // Sort the list in increasing order\n        Collections.sort(odd_numbers);\n        \n        return odd_numbers;\n    }\n}\n"}
{"task_id": "Java/124", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean valid_date(String date) {\n           if (date == null || date.isEmpty()) {\n               return false;\n           }\n           \n           // Check if the date matches the format \"mm-dd-yyyy\"\n           if (!date.matches(\"\\\\d{2}-\\\\d{2}-\\\\d{4}\")) {\n               return false;\n           }\n           \n           // Split the date into month, day, and year\n           String[] parts = date.split(\"-\");\n           int month = Integer.parseInt(parts[0]);\n           int day = Integer.parseInt(parts[1]);\n           int year = Integer.parseInt(parts[2]);\n           \n           // Validate month\n           if (month < 1 || month > 12) {\n               return false;\n           }\n           \n           // Validate day based on month\n           if (day < 1 || day > 31) {\n               return false;\n           }\n           \n           if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) {\n               return false;\n           }\n           \n           if (month == 2 && day > 29) {\n               return false;\n           }\n           \n           return true;\n       }\n   }\n   "}
{"task_id": "Java/125", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object split_words(String txt) {\n        // Check for whitespace\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\"\\\\s+\"));\n        }\n        \n        // Check for commas\n        if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        }\n        \n        // Count odd-positioned lowercase letters\n        int count = 0;\n        for (char c : txt.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                int position = c - 'a';\n                if (position % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/126", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_sorted(List<Integer> lst) {\n        if (lst.size() <= 1) return true; // A single element list is always sorted\n\n        Set<Integer> countSet = new HashSet<>();\n        for (int i = 0; i < lst.size() - 1; i++) {\n            int current = lst.get(i);\n            int next = lst.get(i + 1);\n\n            if (current > next) {\n                return false; // Not sorted in ascending order\n            }\n\n            if (countSet.contains(current)) {\n                if (countSet.contains(current + 1)) {\n                    return false; // Number appears more than twice\n                }\n                countSet.add(current + 1); // Increment the count\n            } else {\n                countSet.add(current);\n            }\n        }\n\n        // Check the last element\n        int last = lst.get(lst.size() - 1);\n        if (countSet.contains(last)) {\n            if (countSet.contains(last + 1)) {\n                return false; // Number appears more than twice\n            }\n            countSet.add(last + 1); // Increment the count\n        } else {\n            countSet.add(last);\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/127", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String intersection(List<Integer> interval1, List<Integer> interval2) {\n           int start1 = interval1.get(0);\n           int end1 = interval1.get(1);\n           int start2 = interval2.get(0);\n           int end2 = interval2.get(1);\n           \n           int intersectionStart = Math.max(start1, start2);\n           int intersectionEnd = Math.min(end1, end2);\n           \n           if (intersectionStart > intersectionEnd) {\n               return \"NO\";\n           }\n           \n           int intersectionLength = intersectionEnd - intersectionStart + 1;\n           \n           if (isPrime(intersectionLength)) {\n               return \"YES\";\n           } else {\n               return \"NO\";\n           }\n       }\n       \n       private boolean isPrime(int n) {\n           if (n <= 1) {\n               return false;\n           }\n           for (int i = 2; i <= Math.sqrt(n); i++) {\n               if (n % i == 0) {\n                   return false;\n               }\n           }\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/128", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public Optional<Integer> prod_signs(List<Integer> arr) {\n           if (arr.isEmpty()) {\n               return Optional.empty();\n           }\n\n           int sum_of_magnitudes = 0;\n           int product_of_signs = 1;\n\n           for (int num : arr) {\n               sum_of_magnitudes += Math.abs(num);\n               if (num == 0) {\n                   product_of_signs = 0;\n                   break;\n               } else if (num < 0) {\n                   product_of_signs *= -1;\n               }\n           }\n\n           return Optional.of(sum_of_magnitudes * product_of_signs);\n       }\n   }\n   "}
{"task_id": "Java/129", "generation": "   import java.util.*;\n\n   class Solution {\n       public List<Integer> minPath(List<List<Integer>> grid, int k) {\n           List<Integer> minPath = new ArrayList<>();\n           int minPathValue = Integer.MAX_VALUE;\n           int n = grid.size();\n\n           for (int i = 0; i < n; i++) {\n               for (int j = 0; j < n; j++) {\n                   List<Integer> currentPath = new ArrayList<>();\n                   currentPath.add(grid.get(i).get(j));\n                   dfs(grid, currentPath, i, j, k, minPath, minPathValue);\n               }\n           }\n\n           return minPath;\n       }\n\n       private void dfs(List<List<Integer>> grid, List<Integer> currentPath, int x, int y, int k, List<Integer> minPath, int minPathValue) {\n           if (currentPath.size() == k) {\n               if (isLexicographicallySmaller(currentPath, minPath)) {\n                   minPath.clear();\n                   minPath.addAll(currentPath);\n               }\n               return;\n           }\n\n           int n = grid.size();\n           int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n\n           for (int[] dir : directions) {\n               int newX = x + dir[0];\n               int newY = y + dir[1];\n\n               if (newX >= 0 && newX < n && newY >= 0 && newY < n) {\n                   currentPath.add(grid.get(newX).get(newY));\n                   dfs(grid, currentPath, newX, newY, k, minPath, minPathValue);\n                   currentPath.remove(currentPath.size() - 1);\n               }\n           }\n       }\n\n       private boolean isLexicographicallySmaller(List<Integer> path1, List<Integer> path2) {\n           if (path2.isEmpty()) return true;\n           for (int i = 0; i < path1.size(); i++) {\n               if (path1.get(i) < path2.get(i)) return true;\n               if (path1.get(i) > path2.get(i)) return false;\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/130", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> tri(int n) {\n           List<Integer> tribonacciSequence = new ArrayList<>();\n           tribonacciSequence.add(3); // tri(1) = 3\n\n           for (int i = 2; i <= n; i++) {\n               if (i % 2 == 0) {\n                   // If i is even\n                   tribonacciSequence.add(1 + i / 2);\n               } else {\n                   // If i is odd\n                   int tri_i_minus_1 = tribonacciSequence.get(i - 2); // tri(i - 1)\n                   int tri_i_minus_2 = tribonacciSequence.get(i - 3); // tri(i - 2)\n                   int tri_i_plus_1 = 1 + (i + 1) / 2; // tri(i + 1)\n                   tribonacciSequence.add(tri_i_minus_1 + tri_i_minus_2 + tri_i_plus_1);\n               }\n           }\n\n           return tribonacciSequence;\n       }\n   }\n   "}
{"task_id": "Java/131", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digits(int n) {\n        int product = 1;\n        boolean foundOdd = false;\n\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n                foundOdd = true;\n            }\n            n /= 10;\n        }\n\n        if (!foundOdd) {\n            return 0;\n        } else {\n            return product;\n        }\n    }\n}\n"}
{"task_id": "Java/132", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean is_nested(String string) {\n           Stack<Character> stack = new Stack<>();\n           for (char ch : string.toCharArray()) {\n               if (ch == '[') {\n                   stack.push(ch);\n               } else if (ch == ']') {\n                   if (!stack.isEmpty()) {\n                       stack.pop();\n                       if (stack.isEmpty()) {\n                           return true; // Found a nested pair\n                       }\n                   }\n               }\n           }\n           return false; // No nested pair found\n       }\n   }\n   "}
{"task_id": "Java/133", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int sum_squares(List<Double> lst) {\n           int sum = 0;\n           for (Double num : lst) {\n               int roundedNum = (int) Math.ceil(num);\n               sum += roundedNum * roundedNum;\n           }\n           return sum;\n       }\n   }\n   "}
{"task_id": "Java/134", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean check_if_last_char_is_a_letter(String txt) {\n           if (txt.isEmpty()) {\n               return false;\n           }\n           char last_char = txt.charAt(txt.length() - 1);\n           if (Character.isLetter(last_char)) {\n               if (txt.length() == 1 || txt.charAt(txt.length() - 2) == ' ') {\n                   return true;\n               }\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/135", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int can_arrange(List<Integer> arr) {\n           int maxIndex = -1;\n           for (int i = 1; i < arr.size(); i++) {\n               if (arr.get(i) < arr.get(i - 1)) {\n                   maxIndex = i;\n               }\n           }\n           return maxIndex;\n       }\n   }\n   "}
{"task_id": "Java/136", "generation": "import java.util.*;\nimport java.util.Optional;\n\nclass Solution {\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        Optional<Integer> largestNegative = Optional.empty();\n        Optional<Integer> smallestPositive = Optional.empty();\n\n        for (Integer num : lst) {\n            if (num < 0) {\n                if (!largestNegative.isPresent() || num > largestNegative.get()) {\n                    largestNegative = Optional.of(num);\n                }\n            } else if (num > 0) {\n                if (!smallestPositive.isPresent() || num < smallestPositive.get()) {\n                    smallestPositive = Optional.of(num);\n                }\n            }\n        }\n\n        List<Optional<Integer>> result = new ArrayList<>();\n        result.add(largestNegative);\n        result.add(smallestPositive);\n        return result;\n    }\n}\n"}
{"task_id": "Java/137", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public Optional<Object> compare_one(Object a, Object b) {\n           // Check if both objects are of the same type\n           if (a.getClass() == b.getClass()) {\n               if (a instanceof Comparable && b instanceof Comparable) {\n                   Comparable compA = (Comparable) a;\n                   Comparable compB = (Comparable) b;\n                   int comparison = compA.compareTo(compB);\n                   if (comparison > 0) {\n                       return Optional.of(a);\n                   } else if (comparison < 0) {\n                       return Optional.of(b);\n                   } else {\n                       return Optional.empty();\n                   }\n               }\n           }\n\n           // Convert both objects to double for comparison\n           double doubleA = convertToDouble(a);\n           double doubleB = convertToDouble(b);\n\n           // Compare the converted doubles\n           if (doubleA > doubleB) {\n               return Optional.of(a);\n           } else if (doubleB > doubleA) {\n               return Optional.of(b);\n           } else {\n               return Optional.empty();\n           }\n       }\n\n       private double convertToDouble(Object obj) {\n           if (obj instanceof Number) {\n               return ((Number) obj).doubleValue();\n           } else if (obj instanceof String) {\n               String str = (String) obj;\n               str = str.replace(',', '.');\n               return Double.parseDouble(str);\n           }\n           throw new IllegalArgumentException(\"Unsupported type: \" + obj.getClass());\n       }\n   }\n   "}
{"task_id": "Java/138", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_equal_to_sum_even(int n) {\n        // Check if n is even\n        if (n % 2 != 0) {\n            return false;\n        }\n        \n        // Check if n can be divided by 4\n        return n % 4 == 0;\n    }\n}\n"}
{"task_id": "Java/139", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public long special_factorial(int n) {\n           // List to store factorials\n           List<Long> factorials = new ArrayList<>();\n           \n           // Compute factorial for each number from 1 to n\n           for (int i = 1; i <= n; i++) {\n               factorials.add(factorial(i));\n           }\n           \n           // Initialize result to 1\n           long result = 1;\n           \n           // Multiply all factorials together\n           for (long fact : factorials) {\n               result *= fact;\n           }\n           \n           return result;\n       }\n       \n       // Helper function to compute factorial of a number\n       private long factorial(int num) {\n           long fact = 1;\n           for (int i = 1; i <= num; i++) {\n               fact *= i;\n           }\n           return fact;\n       }\n   }\n   "}
{"task_id": "Java/140", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String fix_spaces(String text) {\n           StringBuilder result = new StringBuilder();\n           int spaceCount = 0;\n\n           for (char c : text.toCharArray()) {\n               if (c == ' ') {\n                   spaceCount++;\n               } else {\n                   if (spaceCount > 2) {\n                       result.append('-');\n                   } else if (spaceCount > 0) {\n                       for (int i = 0; i < spaceCount; i++) {\n                           result.append('_');\n                       }\n                   }\n                   result.append(c);\n                   spaceCount = 0;\n               }\n           }\n\n           if (spaceCount > 2) {\n               result.append('-');\n           } else if (spaceCount > 0) {\n               for (int i = 0; i < spaceCount; i++) {\n                   result.append('_');\n               }\n           }\n\n           return result.toString();\n       }\n   }\n   "}
{"task_id": "Java/141", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String file_name_check(String file_name) {\n           // Check if there is exactly one dot\n           if (file_name.indexOf('.') == -1 || file_name.indexOf('.') != file_name.lastIndexOf('.')) {\n               return \"No\";\n           }\n           \n           // Split the file name into two parts\n           String[] parts = file_name.split(\"\\\\.\");\n           if (parts.length != 2) {\n               return \"No\";\n           }\n           \n           String before_dot = parts[0];\n           String after_dot = parts[1];\n           \n           // Check if before_dot is not empty and starts with a Latin alphabet letter\n           if (before_dot.isEmpty() || !Character.isLetter(before_dot.charAt(0))) {\n               return \"No\";\n           }\n           \n           // Check if after_dot is one of [\"txt\", \"exe\", \"dll\"]\n           List<String> validExtensions = Arrays.asList(\"txt\", \"exe\", \"dll\");\n           if (!validExtensions.contains(after_dot)) {\n               return \"No\";\n           }\n           \n           // Count the digits in before_dot\n           int digitCount = 0;\n           for (char c : before_dot.toCharArray()) {\n               if (Character.isDigit(c)) {\n                   digitCount++;\n               }\n           }\n           \n           // Check if there are more than three digits\n           if (digitCount > 3) {\n               return \"No\";\n           }\n           \n           return \"Yes\";\n       }\n   }\n   "}
{"task_id": "Java/142", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int sum_squares(List<Integer> lst) {\n           int sum = 0;\n           for (int i = 0; i < lst.size(); i++) {\n               int value = lst.get(i);\n               if (i % 3 == 0) {\n                   value = value * value; // Square the value\n               } else if (i % 4 == 0 && i % 3 != 0) {\n                   value = value * value * value; // Cube the value\n               }\n               sum += value;\n           }\n           return sum;\n       }\n   }\n   "}
{"task_id": "Java/143", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String words_in_sentence(String sentence) {\n           String[] words = sentence.split(\" \");\n           List<String> primeWords = new ArrayList<>();\n           \n           for (String word : words) {\n               if (isPrime(word.length())) {\n                   primeWords.add(word);\n               }\n           }\n           \n           return String.join(\" \", primeWords);\n       }\n       \n       private boolean isPrime(int n) {\n           if (n <= 1) {\n               return false;\n           }\n           for (int i = 2; i <= Math.sqrt(n); i++) {\n               if (n % i == 0) {\n                   return false;\n               }\n           }\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/144", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean simplify(String x, String n) {\n           // Extract numerators and denominators\n           String[] partsX = x.split(\"/\");\n           int numerator1 = Integer.parseInt(partsX[0]);\n           int denominator1 = Integer.parseInt(partsX[1]);\n           \n           String[] partsN = n.split(\"/\");\n           int numerator2 = Integer.parseInt(partsN[0]);\n           int denominator2 = Integer.parseInt(partsN[1]);\n           \n           // Calculate new numerator and denominator\n           int newNumerator = numerator1 * numerator2;\n           int newDenominator = denominator1 * denominator2;\n           \n           // Simplify the fraction\n           int gcd = gcd(newNumerator, newDenominator);\n           newNumerator /= gcd;\n           newDenominator /= gcd;\n           \n           // Check if the simplified fraction is a whole number\n           return newDenominator == 1;\n       }\n       \n       // Helper method to calculate the greatest common divisor (GCD)\n       private int gcd(int a, int b) {\n           while (b != 0) {\n               int temp = b;\n               b = a % b;\n               a = temp;\n           }\n           return a;\n       }\n   }\n   "}
{"task_id": "Java/145", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> order_by_points(List<Integer> nums) {\n        // Custom comparator to sort based on digit sum\n        Comparator<Integer> digitSumComparator = new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int sumA = sumOfDigits(a);\n                int sumB = sumOfDigits(b);\n                return Integer.compare(sumA, sumB);\n            }\n        };\n\n        // Sort the list using the custom comparator\n        Collections.sort(nums, digitSumComparator);\n\n        return nums;\n    }\n\n    // Method to calculate the sum of digits of a number\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        boolean isNegative = num < 0;\n        num = Math.abs(num);\n\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n\n        return isNegative ? -sum : sum;\n    }\n\n    // Example usage\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.order_by_points(Arrays.asList(1, 11, -1, -11, -12))); // [-1, -11, 1, -12, 11]\n        System.out.println(solution.order_by_points(Arrays.asList())); // []\n    }\n}\n"}
{"task_id": "Java/146", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int specialFilter(List<Integer> nums) {\n           int count = 0;\n           for (int num : nums) {\n               if (num > 10) {\n                   String numStr = Integer.toString(Math.abs(num));\n                   int firstDigit = Character.getNumericValue(numStr.charAt(0));\n                   int lastDigit = Character.getNumericValue(numStr.charAt(numStr.length() - 1));\n                   if (isOdd(firstDigit) && isOdd(lastDigit)) {\n                       count++;\n                   }\n               }\n           }\n           return count;\n       }\n\n       private boolean isOdd(int digit) {\n           return digit % 2 != 0;\n       }\n   }\n   "}
{"task_id": "Java/147", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int get_max_triples(int n) {\n           int[] a = new int[n];\n           for (int i = 0; i < n; i++) {\n               a[i] = (i + 1) * (i + 1) - (i + 1) + 1;\n           }\n           int count = 0;\n           for (int i = 0; i < n - 2; i++) {\n               for (int j = i + 1; j < n - 1; j++) {\n                   for (int k = j + 1; k < n; k++) {\n                       if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                           count++;\n                       }\n                   }\n               }\n           }\n           return count;\n       }\n   }\n   "}
{"task_id": "Java/148", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<String> bf(String planet1, String planet2) {\n           // List of planets in order of proximity to the Sun\n           List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n           \n           // Check if both planets are valid\n           if (!planets.contains(planet1) || !planets.contains(planet2)) {\n               return new ArrayList<>();\n           }\n           \n           // Find the indices of the given planets\n           int index1 = planets.indexOf(planet1);\n           int index2 = planets.indexOf(planet2);\n           \n           // Ensure index1 is less than index2\n           if (index1 > index2) {\n               int temp = index1;\n               index1 = index2;\n               index2 = temp;\n           }\n           \n           // Extract the planets between index1 and index2 (excluding planet1 and planet2)\n           List<String> result = new ArrayList<>();\n           for (int i = index1 + 1; i < index2; i++) {\n               result.add(planets.get(i));\n           }\n           \n           return result;\n       }\n   }\n   "}
{"task_id": "Java/149", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<String> sorted_list_sum(List<String> lst) {\n        // Filter out strings with odd lengths\n        List<String> filteredList = lst.stream()\n                                       .filter(s -> s.length() % 2 == 0)\n                                       .collect(Collectors.toList());\n        \n        // Sort the filtered list by length and then alphabetically\n        filteredList.sort(Comparator.comparingInt(String::length)\n                                    .thenComparing(Comparator.naturalOrder()));\n        \n        return filteredList;\n    }\n}\n"}
{"task_id": "Java/150", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int x_or_y(int n, int x, int y) {\n        // Edge case: 0 and 1 are not prime numbers\n        if (n <= 1) {\n            return y;\n        }\n        \n        // Check for prime\n        boolean isPrime = true;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        \n        // Return x if n is prime, otherwise return y\n        return isPrime ? x : y;\n    }\n}\n"}
{"task_id": "Java/151", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int double_the_difference(List<Object> lst) {\n           int sum = 0;\n           for (Object obj : lst) {\n               if (obj instanceof Integer) {\n                   int num = (Integer) obj;\n                   if (num > 0 && num % 2 != 0) {\n                       sum += num * num;\n                   }\n               }\n           }\n           return sum;\n       }\n   }\n   "}
{"task_id": "Java/152", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i).equals(guess.get(i))) {\n                result.add(0);\n            } else {\n                result.add(Math.abs(game.get(i) - guess.get(i)));\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/153", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String Strongest_Extension(String class_name, List<String> extensions) {\n           String strongest_extension = \"\";\n           int max_strength = Integer.MIN_VALUE;\n           \n           for (String extension : extensions) {\n               int strength = calculate_strength(extension);\n               if (strength > max_strength) {\n                   max_strength = strength;\n                   strongest_extension = extension;\n               }\n           }\n           \n           return class_name + \".\" + strongest_extension;\n       }\n       \n       private int calculate_strength(String extension) {\n           int CAP = 0;\n           int SM = 0;\n           \n           for (char c : extension.toCharArray()) {\n               if (Character.isUpperCase(c)) {\n                   CAP++;\n               } else if (Character.isLowerCase(c)) {\n                   SM++;\n               }\n           }\n           \n           return CAP - SM;\n       }\n   }\n   "}
{"task_id": "Java/154", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean cycpattern_check(String a, String b) {\n           if (b.length() > a.length()) {\n               return false;\n           }\n           String b_double = b + b;\n           for (int i = 0; i < b.length(); i++) {\n               String rotation = b_double.substring(i, i + b.length());\n               if (a.contains(rotation)) {\n                   return true;\n               }\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/155", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> even_odd_count(int num) {\n           if (num < 0) {\n               num = -num;\n           }\n           String numStr = Integer.toString(num);\n           int evenCount = 0;\n           int oddCount = 0;\n           for (char digitChar : numStr.toCharArray()) {\n               int digit = Character.getNumericValue(digitChar);\n               if (digit % 2 == 0) {\n                   evenCount++;\n               } else {\n                   oddCount++;\n               }\n           }\n           List<Integer> result = new ArrayList<>();\n           result.add(evenCount);\n           result.add(oddCount);\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/156", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String int_to_mini_roman(int number) {\n        // Mapping of integer values to their corresponding Roman numeral symbols\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] symbols = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        \n        StringBuilder result = new StringBuilder();\n        \n        // Iterate through the values and symbols\n        for (int i = 0; i < values.length; i++) {\n            while (number >= values[i]) {\n                number -= values[i];\n                result.append(symbols[i]);\n            }\n        }\n        \n        // Convert the result to lowercase\n        return result.toString().toLowerCase();\n    }\n}\n"}
{"task_id": "Java/157", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean right_angle_triangle(int a, int b, int c) {\n           if (a > b && a > c) {\n               return a * a == b * b + c * c;\n           } else if (b > a && b > c) {\n               return b * b == a * a + c * c;\n           } else {\n               return c * c == a * a + b * b;\n           }\n       }\n   }\n   "}
{"task_id": "Java/158", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String find_max(List<String> words) {\n           int max_unique_count = 0;\n           String result_word = \"\";\n\n           for (String word : words) {\n               Set<Character> unique_chars = new HashSet<>();\n               for (char c : word.toCharArray()) {\n                   unique_chars.add(c);\n               }\n               int unique_count = unique_chars.size();\n\n               if (unique_count > max_unique_count) {\n                   max_unique_count = unique_count;\n                   result_word = word;\n               } else if (unique_count == max_unique_count) {\n                   if (result_word.isEmpty() || word.compareTo(result_word) < 0) {\n                       result_word = word;\n                   }\n               }\n           }\n\n           return result_word;\n       }\n   }\n   "}
{"task_id": "Java/159", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> eat(int number, int need, int remaining) {\n           int totalEaten = number + need;\n           int carrotsLeft;\n           \n           if (remaining >= need) {\n               carrotsLeft = remaining - need;\n           } else {\n               totalEaten = number + remaining;\n               carrotsLeft = 0;\n           }\n           \n           return Arrays.asList(totalEaten, carrotsLeft);\n       }\n   }\n   "}
{"task_id": "Java/160", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int do_algebra(List<String> operator, List<Integer> operand) {\n           // Initialize result with the first operand\n           int result = operand.get(0);\n           \n           // Iterate through the operator list\n           for (int i = 0; i < operator.size(); i++) {\n               // Get the current operator and operand\n               String op = operator.get(i);\n               int nextOperand = operand.get(i + 1);\n               \n               // Apply the operator to the result and the next operand\n               switch (op) {\n                   case \"+\":\n                       result += nextOperand;\n                       break;\n                   case \"-\":\n                       result -= nextOperand;\n                       break;\n                   case \"*\":\n                       result *= nextOperand;\n                       break;\n                   case \"/\":\n                       result /= nextOperand;\n                       break;\n                   case \"**\":\n                       result = (int) Math.pow(result, nextOperand);\n                       break;\n                   default:\n                       throw new IllegalArgumentException(\"Invalid operator: \" + op);\n               }\n           }\n           \n           // Return the final result\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/161", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String solve(String s) {\n           boolean hasLetter = false;\n           StringBuilder result = new StringBuilder();\n\n           for (char c : s.toCharArray()) {\n               if (Character.isLetter(c)) {\n                   hasLetter = true;\n                   if (Character.isUpperCase(c)) {\n                       result.append(Character.toLowerCase(c));\n                   } else {\n                       result.append(Character.toUpperCase(c));\n                   }\n               } else {\n                   result.append(c);\n               }\n           }\n\n           if (!hasLetter) {\n               return new StringBuilder(s).reverse().toString();\n           }\n\n           return result.toString();\n       }\n   }\n   "}
{"task_id": "Java/162", "generation": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        // Check if the input string is empty\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        // Create a MessageDigest instance for MD5\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n\n        // Convert the input string to bytes and compute the hash\n        byte[] messageDigest = md.digest(text.getBytes());\n\n        // Convert the byte array to a hexadecimal string\n        StringBuilder hexString = new StringBuilder();\n        for (byte b : messageDigest) {\n            hexString.append(String.format(\"%02x\", b));\n        }\n\n        // Return the hexadecimal string wrapped in Optional\n        return Optional.of(hexString.toString());\n    }\n}\n"}
{"task_id": "Java/163", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> generate_integers(int a, int b) {\n           List<Integer> result = new ArrayList<>();\n           int min = Math.min(a, b);\n           int max = Math.max(a, b);\n           \n           for (int i = min; i <= max; i++) {\n               if (i % 2 == 0 && i < 10) {\n                   result.add(i);\n               }\n           }\n           \n           return result;\n       }\n   }\n   "}
{"task_id": "Java/0", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean has_close_elements(List<Double> numbers, double threshold) {\n           for (int i = 0; i < numbers.size(); i++) {\n               for (int j = i + 1; j < numbers.size(); j++) {\n                   if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                       return true;\n                   }\n               }\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/1", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<String> separate_paren_groups(String paren_string) {\n           List<String> result = new ArrayList<>();\n           StringBuilder currentGroup = new StringBuilder();\n           int balanceCounter = 0;\n\n           for (char ch : paren_string.toCharArray()) {\n               if (ch == ' ') {\n                   continue; // Ignore spaces\n               }\n               currentGroup.append(ch);\n               if (ch == '(') {\n                   balanceCounter++;\n               } else if (ch == ')') {\n                   balanceCounter--;\n                   if (balanceCounter == 0) {\n                       result.add(currentGroup.toString());\n                       currentGroup.setLength(0); // Reset for the next group\n                   }\n               }\n           }\n\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/2", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double truncate_number(double number) {\n        // Step 1: Compute the integer part\n        double integerPart = Math.floor(number);\n        \n        // Step 2: Compute the decimal part\n        double decimalPart = number - integerPart;\n        \n        // Step 3: Return the decimal part\n        return decimalPart;\n    }\n}\n"}
{"task_id": "Java/3", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean below_zero(List<Integer> operations) {\n           int balance = 0;\n           for (int operation : operations) {\n               balance += operation;\n               if (balance < 0) {\n                   return true;\n               }\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/4", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public double mean_absolute_deviation(List<Double> numbers) {\n           double mean = calculate_mean(numbers);\n           double sum_of_absolute_differences = 0;\n           for (double number : numbers) {\n               sum_of_absolute_differences += Math.abs(number - mean);\n           }\n           return sum_of_absolute_differences / numbers.size();\n       }\n\n       private double calculate_mean(List<Double> numbers) {\n           double sum = 0;\n           for (double number : numbers) {\n               sum += number;\n           }\n           return sum / numbers.size();\n       }\n   }\n   "}
{"task_id": "Java/5", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n           List<Integer> result = new ArrayList<>();\n           for (int i = 0; i < numbers.size(); i++) {\n               result.add(numbers.get(i));\n               if (i < numbers.size() - 1) {\n                   result.add(delimiter);\n               }\n           }\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/6", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> parse_nested_parens(String paren_string) {\n           List<Integer> result = new ArrayList<>();\n           String[] groups = paren_string.split(\" \");\n           \n           for (String group : groups) {\n               Stack<Character> stack = new Stack<>();\n               int max_depth = 0;\n               int current_depth = 0;\n               \n               for (char ch : group.toCharArray()) {\n                   if (ch == '(') {\n                       stack.push(ch);\n                       current_depth++;\n                   } else if (ch == ')') {\n                       stack.pop();\n                       current_depth--;\n                       if (current_depth > max_depth) {\n                           max_depth = current_depth;\n                       }\n                   }\n               }\n               \n               result.add(max_depth);\n           }\n           \n           return result;\n       }\n   }\n   "}
{"task_id": "Java/7", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> filteredList = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredList.add(str);\n            }\n        }\n        return filteredList;\n    }\n}\n"}
{"task_id": "Java/8", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sum_product(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        \n        if (numbers.isEmpty()) {\n            return Arrays.asList(0, 1);\n        }\n        \n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        \n        return Arrays.asList(sum, product);\n    }\n}\n"}
{"task_id": "Java/9", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> rolling_max(List<Integer> numbers) {\n           List<Integer> result = new ArrayList<>();\n           int currentMax = Integer.MIN_VALUE;\n           \n           for (int num : numbers) {\n               if (num > currentMax) {\n                   currentMax = num;\n               }\n               result.add(currentMax);\n           }\n           \n           return result;\n       }\n   }\n   "}
{"task_id": "Java/10", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    // Helper function to check if a string is a palindrome\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    // Function to find the shortest palindrome that begins with a supplied string\n    public String make_palindrome(String string) {\n        if (string.isEmpty()) {\n            return \"\";\n        }\n\n        // Iterate to find the longest palindromic suffix\n        for (int suffixLength = 1; suffixLength <= string.length(); suffixLength++) {\n            String suffix = string.substring(string.length() - suffixLength);\n            if (isPalindrome(suffix)) {\n                String prefix = string.substring(0, string.length() - suffixLength);\n                String reversePrefix = new StringBuilder(prefix).reverse().toString();\n                return string + reversePrefix;\n            }\n        }\n\n        // If no palindromic suffix found, return the string with its reverse appended\n        return string + new StringBuilder(string).reverse().toString();\n    }\n}\n"}
{"task_id": "Java/11", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String string_xor(String a, String b) {\n           StringBuilder result = new StringBuilder();\n           int length = Math.min(a.length(), b.length());\n           \n           for (int i = 0; i < length; i++) {\n               char charA = a.charAt(i);\n               char charB = b.charAt(i);\n               char xorChar = (charA == charB) ? '0' : '1';\n               result.append(xorChar);\n           }\n           \n           return result.toString();\n       }\n   }\n   "}
{"task_id": "Java/12", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public Optional<String> longest(List<String> strings) {\n           if (strings.isEmpty()) {\n               return Optional.empty();\n           }\n           \n           String longestString = strings.get(0);\n           for (int i = 1; i < strings.size(); i++) {\n               if (strings.get(i).length() > longestString.length()) {\n                   longestString = strings.get(i);\n               }\n           }\n           \n           return Optional.of(longestString);\n       }\n   }\n   "}
{"task_id": "Java/13", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int greatest_common_divisor(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}\n"}
{"task_id": "Java/14", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<String> all_prefixes(String string) {\n           List<String> prefixes = new ArrayList<>();\n           for (int i = 1; i <= string.length(); i++) {\n               prefixes.add(string.substring(0, i));\n           }\n           return prefixes;\n       }\n   }\n   "}
{"task_id": "Java/15", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String string_sequence(int n) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            result.append(i).append(\" \");\n        }\n        return result.toString().trim();\n    }\n}\n"}
{"task_id": "Java/16", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int count_distinct_characters(String string) {\n           // Convert the string to lowercase\n           string = string.toLowerCase();\n           \n           // Create a Set to store distinct characters\n           Set<Character> distinctCharacters = new HashSet<>();\n           \n           // Iterate through the string and add each character to the Set\n           for (char c : string.toCharArray()) {\n               distinctCharacters.add(c);\n           }\n           \n           // Return the size of the Set, which is the number of distinct characters\n           return distinctCharacters.size();\n       }\n   }\n   "}
{"task_id": "Java/17", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> parse_music(String string) {\n           List<Integer> beats = new ArrayList<>();\n           String[] notes = string.split(\" \");\n           for (String note : notes) {\n               if (note.equals(\"o\")) {\n                   beats.add(4);\n               } else if (note.equals(\"o|\")) {\n                   beats.add(2);\n               } else if (note.equals(\".|\")) {\n                   beats.add(1);\n               }\n           }\n           return beats;\n       }\n   }\n   "}
{"task_id": "Java/18", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int how_many_times(String string, String substring) {\n           if (substring.isEmpty()) {\n               return 0;\n           }\n           int count = 0;\n           int substringLength = substring.length();\n           for (int i = 0; i <= string.length() - substringLength; i++) {\n               if (string.substring(i, i + substringLength).equals(substring)) {\n                   count++;\n               }\n           }\n           return count;\n       }\n   }\n   "}
{"task_id": "Java/19", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String sort_numbers(String numbers) {\n           // Define the map from number words to their corresponding numerical values\n           Map<String, Integer> numberMap = new HashMap<>();\n           numberMap.put(\"zero\", 0);\n           numberMap.put(\"one\", 1);\n           numberMap.put(\"two\", 2);\n           numberMap.put(\"three\", 3);\n           numberMap.put(\"four\", 4);\n           numberMap.put(\"five\", 5);\n           numberMap.put(\"six\", 6);\n           numberMap.put(\"seven\", 7);\n           numberMap.put(\"eight\", 8);\n           numberMap.put(\"nine\", 9);\n\n           // Split the input string into an array of number words\n           String[] numberWords = numbers.split(\" \");\n\n           // Sort the array of number words using a custom comparator\n           Arrays.sort(numberWords, (a, b) -> numberMap.get(a) - numberMap.get(b));\n\n           // Join the sorted array back into a single string with space delimiters\n           return String.join(\" \", numberWords);\n       }\n   }\n   "}
{"task_id": "Java/20", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Double> find_closest_elements(List<Double> numbers) {\n           List<Double> closest_pair = new ArrayList<>();\n           closest_pair.add(numbers.get(0));\n           closest_pair.add(numbers.get(1));\n           double distance = Math.abs(numbers.get(1) - numbers.get(0));\n           \n           for (int i = 0; i < numbers.size(); i++) {\n               for (int j = i + 1; j < numbers.size(); j++) {\n                   double current_distance = Math.abs(numbers.get(i) - numbers.get(j));\n                   if (current_distance < distance) {\n                       closest_pair.clear();\n                       closest_pair.add(numbers.get(i));\n                       closest_pair.add(numbers.get(j));\n                       distance = current_distance;\n                   }\n               }\n           }\n           \n           Collections.sort(closest_pair);\n           return closest_pair;\n       }\n   }\n   "}
{"task_id": "Java/21", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Double> rescale_to_unit(List<Double> numbers) {\n           // Find the minimum and maximum values in the list\n           double min_value = Collections.min(numbers);\n           double max_value = Collections.max(numbers);\n           \n           // Create a new list to store the transformed values\n           List<Double> transformed_numbers = new ArrayList<>();\n           \n           // Apply the linear transformation to each number\n           for (double number : numbers) {\n               double transformed_value = (number - min_value) / (max_value - min_value);\n               transformed_numbers.add(transformed_value);\n           }\n           \n           // Return the transformed list\n           return transformed_numbers;\n       }\n   }\n   "}
{"task_id": "Java/22", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> filter_integers(List<Object> values) {\n           List<Integer> integers = new ArrayList<>();\n           for (Object value : values) {\n               if (value instanceof Integer) {\n                   integers.add((Integer) value);\n               }\n           }\n           return integers;\n       }\n   }\n   "}
{"task_id": "Java/23", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int strlen(String string) {\n        return string.length();\n    }\n}\n"}
{"task_id": "Java/24", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int largest_divisor(int n) {\n           for (int i = n - 1; i > 0; i--) {\n               if (n % i == 0) {\n                   return i;\n               }\n           }\n           return 1;  // In case no other divisor is found, 1 is the smallest divisor\n       }\n   }\n   "}
{"task_id": "Java/25", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> factorize(int n) {\n           List<Integer> factors = new ArrayList<>();\n           int current_factor = 2;\n           while (n > 1) {\n               while (n % current_factor == 0) {\n                   factors.add(current_factor);\n                   n /= current_factor;\n               }\n               current_factor++;\n           }\n           return factors;\n       }\n   }\n   "}
{"task_id": "Java/26", "generation": "   import java.util.*;\n   import java.lang.*;\n   import java.util.stream.Collectors;\n\n   class Solution {\n       public List<Integer> remove_duplicates(List<Integer> numbers) {\n           Set<Integer> seen = new HashSet<>();\n           List<Integer> result = new ArrayList<>();\n\n           for (Integer num : numbers) {\n               if (!seen.contains(num)) {\n                   seen.add(num);\n                   result.add(num);\n               } else {\n                   result.remove(num);\n               }\n           }\n\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/27", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String flip_case(String string) {\n           StringBuilder result = new StringBuilder();\n           for (char ch : string.toCharArray()) {\n               if (Character.isLowerCase(ch)) {\n                   result.append(Character.toUpperCase(ch));\n               } else if (Character.isUpperCase(ch)) {\n                   result.append(Character.toLowerCase(ch));\n               } else {\n                   result.append(ch); // If it's not a letter, just append as is\n               }\n           }\n           return result.toString();\n       }\n   }\n   "}
{"task_id": "Java/28", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String concatenate(List<String> strings) {\n        // Initialize an empty result string\n        StringBuilder result = new StringBuilder();\n        \n        // Iterate through each string in the list\n        for (String str : strings) {\n            // Append each string to the result string\n            result.append(str);\n        }\n        \n        // Return the result string\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/29", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/30", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> get_positive(List<Integer> l) {\n        // Convert the list to a stream and filter out positive numbers\n        return l.stream()\n                .filter(num -> num > 0)  // Filter only positive numbers\n                .collect(Collectors.toList());  // Collect the filtered numbers into a list\n    }\n}\n"}
{"task_id": "Java/31", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_prime(int n) {\n        // Special case: 1 is not a prime number\n        if (n < 2) {\n            return false;\n        }\n        \n        // Check for divisors from 2 to the square root of n\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        \n        // If no divisors are found, n is prime\n        return true;\n    }\n}\n"}
{"task_id": "Java/32", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    // Evaluates polynomial with coefficients xs at point x.\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    // Finds a zero point of the polynomial defined by coefficients xs.\n    public double find_zero(List<Double> xs) {\n        // Initial bounds for the bisection method\n        double a = -100.0; // Arbitrary lower bound\n        double b = 100.0;  // Arbitrary upper bound\n        double tolerance = 1e-7; // Tolerance for convergence\n        \n        // Ensure the initial bounds have opposite signs\n        while (poly(xs, a) * poly(xs, b) > 0) {\n            a -= 10.0; // Expand the lower bound if necessary\n            b += 10.0; // Expand the upper bound if necessary\n        }\n        \n        // Bisection method\n        while (Math.abs(b - a) > tolerance) {\n            double c = (a + b) / 2.0; // Midpoint\n            double fc = poly(xs, c);\n            \n            if (Math.abs(fc) < tolerance) {\n                return c; // Found a zero point\n            }\n            \n            if (poly(xs, a) * fc < 0) {\n                b = c; // Zero point is in the left half\n            } else {\n                a = c; // Zero point is in the right half\n            }\n        }\n        \n        return (a + b) / 2.0; // Return the midpoint as the zero point\n    }\n}\n"}
{"task_id": "Java/33", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> sort_third(List<Integer> l) {\n           List<Integer> sorted_values = new ArrayList<>();\n           for (int i = 0; i < l.size(); i++) {\n               if (i % 3 == 0) {\n                   sorted_values.add(l.get(i));\n               }\n           }\n           Collections.sort(sorted_values);\n           int sortedIndex = 0;\n           for (int i = 0; i < l.size(); i++) {\n               if (i % 3 == 0) {\n                   l.set(i, sorted_values.get(sortedIndex));\n                   sortedIndex++;\n               }\n           }\n           return l;\n       }\n   }\n   "}
{"task_id": "Java/34", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> unique(List<Integer> l) {\n        // Step 1: Initialize a Set to store unique elements\n        Set<Integer> uniqueSet = new HashSet<>();\n        \n        // Step 2: Iterate through the input list and add elements to the set\n        for (Integer num : l) {\n            uniqueSet.add(num);\n        }\n        \n        // Step 3: Convert the set to a list\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n        \n        // Step 4: Sort the list\n        Collections.sort(uniqueList);\n        \n        // Step 5: Return the sorted list\n        return uniqueList;\n    }\n}\n"}
{"task_id": "Java/35", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int max_element(List<Integer> l) {\n           int max_value = l.get(0);\n           for (int i = 1; i < l.size(); i++) {\n               if (l.get(i) > max_value) {\n                   max_value = l.get(i);\n               }\n           }\n           return max_value;\n       }\n   }\n   "}
{"task_id": "Java/36", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int fizz_buzz(int n) {\n           int count = 0;\n           for (int i = 0; i < n; i++) {\n               if (i % 11 == 0 || i % 13 == 0) {\n                   String numStr = Integer.toString(i);\n                   for (char c : numStr.toCharArray()) {\n                       if (c == '7') {\n                           count++;\n                       }\n                   }\n               }\n           }\n           return count;\n       }\n   }\n   "}
{"task_id": "Java/37", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> sort_even(List<Integer> l) {\n           List<Integer> lPrime = new ArrayList<>();\n           List<Integer> evenValues = new ArrayList<>();\n           \n           // Extract even indexed values\n           for (int i = 0; i < l.size(); i += 2) {\n               evenValues.add(l.get(i));\n           }\n           \n           // Sort the extracted even indexed values\n           Collections.sort(evenValues);\n           \n           // Reconstruct the new list l'\n           int evenIndex = 0;\n           for (int i = 0; i < l.size(); i++) {\n               if (i % 2 == 0) {\n                   lPrime.add(evenValues.get(evenIndex++));\n               } else {\n                   lPrime.add(l.get(i));\n               }\n           }\n           \n           return lPrime;\n       }\n   }\n   "}
{"task_id": "Java/38", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public String decode_cyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse the cycling in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n"}
{"task_id": "Java/39", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean isPrime(int number) {\n           if (number <= 1) {\n               return false;\n           }\n           for (int i = 2; i <= Math.sqrt(number); i++) {\n               if (number % i == 0) {\n                   return false;\n               }\n           }\n           return true;\n       }\n\n       public int prime_fib(int n) {\n           int count = 0;\n           int a = 0, b = 1;\n           while (count < n) {\n               int temp = a + b;\n               a = b;\n               b = temp;\n               if (isPrime(b)) {\n                   count++;\n               }\n           }\n           return b;\n       }\n   }\n   "}
{"task_id": "Java/40", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean triples_sum_to_zero(List<Integer> l) {\n           if (l.size() < 3) {\n               return false;\n           }\n           Collections.sort(l);\n           for (int i = 0; i < l.size() - 2; i++) {\n               int left = i + 1;\n               int right = l.size() - 1;\n               while (left < right) {\n                   int sum = l.get(i) + l.get(left) + l.get(right);\n                   if (sum == 0) {\n                       return true;\n                   } else if (sum < 0) {\n                       left++;\n                   } else {\n                       right--;\n                   }\n               }\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/41", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int car_race_collision(int n) {\n           return n * n;\n       }\n   }\n   "}
{"task_id": "Java/42", "generation": "   import java.util.*;\n   import java.util.stream.Collectors;\n\n   class Solution {\n       public List<Integer> incr_list(List<Integer> l) {\n           // Using Java Streams for a functional approach\n           return l.stream()\n                   .map(num -> num + 1)\n                   .collect(Collectors.toList());\n       }\n   }\n   "}
{"task_id": "Java/43", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean pairs_sum_to_zero(List<Integer> l) {\n           Set<Integer> seen = new HashSet<>();\n           for (int num : l) {\n               if (seen.contains(-num)) {\n                   return true;\n               }\n               seen.add(num);\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/44", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String change_base(int x, int base) {\n        if (x == 0) {\n            return \"0\";\n        }\n        \n        StringBuilder result = new StringBuilder();\n        \n        while (x > 0) {\n            int remainder = x % base;\n            result.insert(0, remainder);\n            x = x / base;\n        }\n        \n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/45", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangle_area(double a, double h) {\n        // Calculate the area using the formula 0.5 * base * height\n        double area = 0.5 * a * h;\n        // Return the calculated area\n        return area;\n    }\n}\n"}
{"task_id": "Java/46", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib4(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Input must be non-negative.\");\n        }\n        if (n == 0 || n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 0;\n        }\n\n        int[] fib4Values = {0, 0, 2, 0};\n\n        for (int i = 4; i <= n; i++) {\n            int nextValue = fib4Values[0] + fib4Values[1] + fib4Values[2] + fib4Values[3];\n            fib4Values[i % 4] = nextValue;\n        }\n\n        return fib4Values[n % 4];\n    }\n}\n"}
{"task_id": "Java/47", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public double median(List<Integer> l) {\n           // Sort the list\n           Collections.sort(l);\n           \n           // Get the length of the list\n           int length = l.size();\n           \n           // Check if the length is odd or even\n           if (length % 2 != 0) {\n               // If odd, return the middle element\n               return l.get(length / 2);\n           } else {\n               // If even, return the average of the two middle elements\n               int mid1 = l.get(length / 2 - 1);\n               int mid2 = l.get(length / 2);\n               return (mid1 + mid2) / 2.0;\n           }\n       }\n   }\n   "}
{"task_id": "Java/48", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean is_palindrome(String text) {\n           int left = 0;\n           int right = text.length() - 1;\n           while (left < right) {\n               if (text.charAt(left) != text.charAt(right)) {\n                   return false;\n               }\n               left++;\n               right--;\n           }\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/49", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int modp(int n, int p) {\n        int result = 1;\n        int base = 2;\n        \n        while (n > 0) {\n            // If n is odd, multiply result by base and take modulo p\n            if (n % 2 == 1) {\n                result = (result * base) % p;\n            }\n            // Square the base and take modulo p\n            base = (base * base) % p;\n            // Divide n by 2\n            n = n / 2;\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/50", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String encodeShift(String s) {\n           StringBuilder sb = new StringBuilder();\n           for (char ch : s.toCharArray()) {\n               sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n           }\n           return sb.toString();\n       }\n\n       public String decode_shift(String s) {\n           StringBuilder sb = new StringBuilder();\n           for (char ch : s.toCharArray()) {\n               char decodedChar = (char) ('a' + ((ch - 5 - 'a' + 26) % 26));\n               sb.append(decodedChar);\n           }\n           return sb.toString();\n       }\n   }\n   "}
{"task_id": "Java/51", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String remove_vowels(String text) {\n           StringBuilder result = new StringBuilder();\n           Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n           \n           for (char ch : text.toCharArray()) {\n               if (!vowels.contains(ch)) {\n                   result.append(ch);\n               }\n           }\n           \n           return result.toString();\n       }\n   }\n   "}
{"task_id": "Java/52", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean below_threshold(List<Integer> l, int t) {\n           for (int number : l) {\n               if (number >= t) {\n                   return false;\n               }\n           }\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/53", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add(int x, int y) {\n        return x + y;\n    }\n}\n"}
{"task_id": "Java/54", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean same_chars(String s0, String s1) {\n        // Create frequency maps for both strings\n        Map<Character, Integer> freqMap0 = new HashMap<>();\n        Map<Character, Integer> freqMap1 = new HashMap<>();\n        \n        // Populate the frequency map for s0\n        for (char c : s0.toCharArray()) {\n            freqMap0.put(c, freqMap0.getOrDefault(c, 0) + 1);\n        }\n        \n        // Populate the frequency map for s1\n        for (char c : s1.toCharArray()) {\n            freqMap1.put(c, freqMap1.getOrDefault(c, 0) + 1);\n        }\n        \n        // Compare the two frequency maps\n        return freqMap0.equals(freqMap1);\n    }\n}\n"}
{"task_id": "Java/55", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n\n        int a = 0; // F(0)\n        int b = 1; // F(1)\n        int fib = 0;\n\n        for (int i = 2; i <= n; i++) {\n            fib = a + b;\n            a = b;\n            b = fib;\n        }\n\n        return fib;\n    }\n}\n"}
{"task_id": "Java/56", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean correct_bracketing(String brackets) {\n           Stack<Character> stack = new Stack<>();\n           for (char ch : brackets.toCharArray()) {\n               if (ch == '<') {\n                   stack.push(ch);\n               } else if (ch == '>') {\n                   if (!stack.isEmpty() && stack.peek() == '<') {\n                       stack.pop();\n                   } else {\n                       return false;\n                   }\n               }\n           }\n           return stack.isEmpty();\n       }\n   }\n   "}
{"task_id": "Java/57", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean monotonic(List<Integer> l) {\n           if (l.size() <= 1) {\n               return true;\n           }\n           \n           boolean increasing = true;\n           boolean decreasing = true;\n           \n           for (int i = 0; i < l.size() - 1; i++) {\n               if (l.get(i) > l.get(i + 1)) {\n                   increasing = false;\n               }\n               if (l.get(i) < l.get(i + 1)) {\n                   decreasing = false;\n               }\n               \n               if (!increasing && !decreasing) {\n                   return false;\n               }\n           }\n           \n           return true;\n       }\n   }\n   "}
{"task_id": "Java/58", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n           Set<Integer> set = new HashSet<>(l1);\n           List<Integer> result = new ArrayList<>();\n           \n           for (Integer num : l2) {\n               if (set.contains(num)) {\n                   result.add(num);\n                   set.remove(num); // Ensure uniqueness\n               }\n           }\n           \n           Collections.sort(result);\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/59", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int largest_prime_factor(int n) {\n           int largest_prime = 2;\n           int current_factor = 2;\n           \n           while (n > 1) {\n               while (n % current_factor == 0) {\n                   largest_prime = current_factor;\n                   n = n / current_factor;\n               }\n               current_factor += 1;\n           }\n           \n           return largest_prime;\n       }\n   }\n   "}
{"task_id": "Java/60", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_to_n(int n) {\n        // Using the formula to calculate the sum of first n natural numbers\n        return n * (n + 1) / 2;\n    }\n}\n"}
{"task_id": "Java/61", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean correct_bracketing(String brackets) {\n           Stack<Character> stack = new Stack<>();\n           for (char ch : brackets.toCharArray()) {\n               if (ch == '(') {\n                   stack.push(ch);\n               } else if (ch == ')') {\n                   if (!stack.isEmpty() && stack.peek() == '(') {\n                       stack.pop();\n                   } else {\n                       return false;\n                   }\n               }\n           }\n           return stack.isEmpty();\n       }\n   }\n   "}
{"task_id": "Java/62", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> derivative = new ArrayList<>();\n        \n        // Start from the second element (index 1)\n        for (int i = 1; i < xs.size(); i++) {\n            derivative.add(xs.get(i) * i);\n        }\n        \n        return derivative;\n    }\n}\n"}
{"task_id": "Java/63", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fibfib(int n) {\n        // Base cases\n        if (n == 0 || n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n\n        // Array to store FibFib sequence values\n        int[] fibfibArray = new int[n + 1];\n        fibfibArray[0] = 0;\n        fibfibArray[1] = 0;\n        fibfibArray[2] = 1;\n\n        // Compute FibFib values for n >= 3\n        for (int i = 3; i <= n; i++) {\n            fibfibArray[i] = fibfibArray[i - 1] + fibfibArray[i - 2] + fibfibArray[i - 3];\n        }\n\n        // Return the n-th FibFib number\n        return fibfibArray[n];\n    }\n}\n"}
{"task_id": "Java/64", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int vowels_count(String s) {\n           int count = 0;\n           s = s.toLowerCase();\n           for (int i = 0; i < s.length(); i++) {\n               char c = s.charAt(i);\n               if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                   count++;\n               } else if (c == 'y' && i == s.length() - 1) {\n                   count++;\n               }\n           }\n           return count;\n       }\n   }\n   "}
{"task_id": "Java/65", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String circular_shift(int x, int shift) {\n           String str_x = Integer.toString(x);\n           int num_digits = str_x.length();\n           \n           if (shift > num_digits) {\n               // Reverse the string\n               StringBuilder reversed = new StringBuilder(str_x).reverse();\n               return reversed.toString();\n           } else {\n               // Calculate effective shift\n               int effective_shift = shift % num_digits;\n               \n               // Split the string into two parts\n               String part1 = str_x.substring(num_digits - effective_shift);\n               String part2 = str_x.substring(0, num_digits - effective_shift);\n               \n               // Concatenate part1 and part2\n               return part1 + part2;\n           }\n       }\n   }\n   "}
{"task_id": "Java/66", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int digitSum(String s) {\n           int sum = 0;\n           for (char c : s.toCharArray()) {\n               if (Character.isUpperCase(c)) {\n                   sum += (int) c;\n               }\n           }\n           return sum;\n       }\n   }\n   "}
{"task_id": "Java/67", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruit_distribution(String s, int n) {\n        // Split the string by spaces\n        String[] parts = s.split(\" \");\n        \n        // Extract the number of apples and oranges\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[2]);\n        \n        // Calculate the number of mangoes\n        int mangoes = n - apples - oranges;\n        \n        // Return the number of mangoes\n        return mangoes;\n    }\n}\n"}
{"task_id": "Java/68", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> pluck(List<Integer> arr) {\n           int smallest_even_value = Integer.MAX_VALUE;\n           int smallest_index = -1;\n\n           for (int i = 0; i < arr.size(); i++) {\n               int current_value = arr.get(i);\n               if (current_value % 2 == 0 && current_value < smallest_even_value) {\n                   smallest_even_value = current_value;\n                   smallest_index = i;\n               }\n           }\n\n           if (smallest_even_value == Integer.MAX_VALUE) {\n               return new ArrayList<>();\n           } else {\n               return Arrays.asList(smallest_even_value, smallest_index);\n           }\n       }\n   }\n   "}
{"task_id": "Java/69", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int search(List<Integer> lst) {\n        // Step 1: Create a HashMap to store the frequency of each integer\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        // Step 2: Populate the HashMap\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        // Step 3: Initialize the result to -1 (default if no such integer is found)\n        int result = -1;\n        \n        // Step 4: Iterate through the HashMap to find the greatest integer that meets the criteria\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int num = entry.getKey();\n            int freq = entry.getValue();\n            if (freq >= num && num > result) {\n                result = num;\n            }\n        }\n        \n        // Step 5: Return the result\n        return result;\n    }\n}\n"}
{"task_id": "Java/70", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        // Sort the list to easily access min and max values\n        Collections.sort(lst);\n        \n        // Initialize pointers and result list\n        int start = 0;\n        int end = lst.size() - 1;\n        List<Integer> result = new ArrayList<>();\n        \n        // While start is less than or equal to end\n        while (start <= end) {\n            // Add the element at start\n            result.add(lst.get(start));\n            // If start is not equal to end, add the element at end\n            if (start != end) {\n                result.add(lst.get(end));\n            }\n            // Move pointers\n            start++;\n            end--;\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/71", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public double triangle_area(double a, double b, double c) {\n           if (!is_valid_triangle(a, b, c)) {\n               return -1;\n           }\n           double s = (a + b + c) / 2;\n           double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n           return Math.round(area * 100.0) / 100.0;\n       }\n\n       private boolean is_valid_triangle(double a, double b, double c) {\n           return a + b > c && a + c > b && b + c > a;\n       }\n   }\n   "}
{"task_id": "Java/72", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean will_it_fly(List<Integer> q, int w) {\n        // Step 1: Check if the list is empty or has only one element\n        if (q.size() <= 1) {\n            return true;\n        }\n\n        // Step 2: Calculate the sum of the elements in q\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n\n        // Step 3: Check if the sum is less than or equal to w\n        if (sum > w) {\n            return false;\n        }\n\n        // Step 4: Reverse the list q and compare it with the original list\n        List<Integer> reversedQ = new ArrayList<>(q);\n        Collections.reverse(reversedQ);\n\n        // Step 5: Check if the list is palindromic\n        return q.equals(reversedQ);\n    }\n}\n"}
{"task_id": "Java/73", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int smallest_change(List<Integer> arr) {\n           int left = 0;\n           int right = arr.size() - 1;\n           int change_count = 0;\n\n           while (left < right) {\n               if (!arr.get(left).equals(arr.get(right))) {\n                   change_count++;\n               }\n               left++;\n               right--;\n           }\n\n           return change_count;\n       }\n   }\n   "}
{"task_id": "Java/74", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<String> total_match(List<String> lst1, List<String> lst2) {\n           int total_chars_lst1 = 0;\n           int total_chars_lst2 = 0;\n           \n           // Calculate total characters in lst1\n           for (String str : lst1) {\n               total_chars_lst1 += str.length();\n           }\n           \n           // Calculate total characters in lst2\n           for (String str : lst2) {\n               total_chars_lst2 += str.length();\n           }\n           \n           // Compare and return the appropriate list\n           if (total_chars_lst1 <= total_chars_lst2) {\n               return lst1;\n           } else {\n               return lst2;\n           }\n       }\n   }\n   "}
{"task_id": "Java/75", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean is_multiply_prime(int a) {\n           List<Integer> primes = generate_primes_less_than_100();\n           for (int i = 0; i < primes.size(); i++) {\n               for (int j = i + 1; j < primes.size(); j++) {\n                   for (int k = j + 1; k < primes.size(); k++) {\n                       if (primes.get(i) * primes.get(j) * primes.get(k) == a) {\n                           return true;\n                       }\n                   }\n               }\n           }\n           return false;\n       }\n\n       private List<Integer> generate_primes_less_than_100() {\n           List<Integer> primes = new ArrayList<>();\n           for (int number = 2; number < 100; number++) {\n               if (is_prime(number)) {\n                   primes.add(number);\n               }\n           }\n           return primes;\n       }\n\n       private boolean is_prime(int number) {\n           if (number < 2) {\n               return false;\n           }\n           for (int i = 2; i <= Math.sqrt(number); i++) {\n               if (number % i == 0) {\n                   return false;\n               }\n           }\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/76", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean is_simple_power(int x, int n) {\n           if (n == 1) {\n               return x == 1;\n           }\n           int k = 0;\n           int power = 1;\n           while (power <= x) {\n               if (power == x) {\n                   return true;\n               }\n               k++;\n               power = (int) Math.pow(n, k);\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/77", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean iscube(int a) {\n        // Handle the special case where a is 0\n        if (a == 0) return true;\n\n        // Determine the absolute value of a to handle negative numbers\n        int absA = Math.abs(a);\n\n        // Iterate through possible values of n\n        for (int n = 0; n * n * n <= absA; n++) {\n            if (n * n * n == absA) {\n                // If a is negative, ensure n is also negative\n                if (a < 0) {\n                    return n != 0; // n must be negative if a is negative\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/78", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int hex_key(String num) {\n           // Set of prime hexadecimal digits in decimal form\n           Set<Integer> primeHexDigits = new HashSet<>(Arrays.asList(2, 3, 5, 7, 11, 13));\n           \n           // Counter for prime digits\n           int primeCount = 0;\n           \n           // Iterate through each character in the input string\n           for (char ch : num.toCharArray()) {\n               int decimalValue;\n               if (ch >= '0' && ch <= '9') {\n                   decimalValue = ch - '0';\n               } else if (ch >= 'A' && ch <= 'F') {\n                   decimalValue = ch - 'A' + 10;\n               } else {\n                   continue; // Skip invalid characters (though the problem guarantees valid input)\n               }\n               \n               // Check if the decimal value is a prime hexadecimal digit\n               if (primeHexDigits.contains(decimalValue)) {\n                   primeCount++;\n               }\n           }\n           \n           return primeCount;\n       }\n   }\n   "}
{"task_id": "Java/79", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String decimal_to_binary(int decimal) {\n        // Convert decimal to binary string\n        String binaryString = Integer.toBinaryString(decimal);\n        \n        // Format the binary string with 'db' at the beginning and end\n        String formattedBinaryString = \"db\" + binaryString + \"db\";\n        \n        // Return the formatted string\n        return formattedBinaryString;\n    }\n}\n"}
{"task_id": "Java/80", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean is_happy(String s) {\n           // Check if the length of the string is less than 3\n           if (s.length() < 3) {\n               return false;\n           }\n           \n           // Iterate through the string and check every set of 3 consecutive characters\n           for (int i = 0; i <= s.length() - 3; i++) {\n               char first = s.charAt(i);\n               char second = s.charAt(i + 1);\n               char third = s.charAt(i + 2);\n               \n               // Check if any of the 3 consecutive characters are the same\n               if (first == second || first == third || second == third) {\n                   return false;\n               }\n           }\n           \n           // If all sets of 3 consecutive characters are distinct, return true\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/81", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        \n        for (Double gpa : grades) {\n            if (gpa == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        \n        return letterGrades;\n    }\n}\n"}
{"task_id": "Java/82", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean prime_length(String string) {\n           int length = string.length();\n           if (length <= 1) {\n               return false;\n           }\n           for (int i = 2; i <= Math.sqrt(length); i++) {\n               if (length % i == 0) {\n                   return false;\n               }\n           }\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/83", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int starts_one_ends(int n) {\n        // Total number of n-digit numbers\n        int total_n_digit_numbers = (int) Math.pow(10, n) - (int) Math.pow(10, n - 1);\n        \n        // Numbers that start with '1'\n        int starts_with_one = (int) Math.pow(10, n - 1);\n        \n        // Numbers that end with '1'\n        int ends_with_one = (int) Math.pow(10, n - 1);\n        \n        // Overlap (numbers that start and end with '1')\n        int overlap = n == 1 ? 1 : (int) Math.pow(10, n - 2);\n        \n        // Total count\n        int count = starts_with_one + ends_with_one - overlap;\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/84", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(int N) {\n        // Step 1: Calculate the sum of digits of N\n        int sum = 0;\n        int temp = N;\n        while (temp > 0) {\n            sum += temp % 10;\n            temp /= 10;\n        }\n        \n        // Step 2: Convert the sum to binary\n        String binarySum = Integer.toBinaryString(sum);\n        \n        // Step 3: Return the binary string\n        return binarySum;\n    }\n}\n"}
{"task_id": "Java/85", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int add(List<Integer> lst) {\n           int sum = 0;\n           for (int i = 0; i < lst.size(); i++) {\n               if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                   sum += lst.get(i);\n               }\n           }\n           return sum;\n       }\n   }\n   "}
{"task_id": "Java/86", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String anti_shuffle(String s) {\n           // Split the string into words\n           String[] words = s.split(\" \");\n           \n           // Process each word\n           for (int i = 0; i < words.length; i++) {\n               // Convert word to char array, sort it, and convert back to string\n               char[] chars = words[i].toCharArray();\n               Arrays.sort(chars);\n               words[i] = new String(chars);\n           }\n           \n           // Join the sorted words with spaces\n           return String.join(\" \", words);\n       }\n   }\n   "}
{"task_id": "Java/87", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n           List<List<Integer>> coordinates = new ArrayList<>();\n           \n           // Iterate through each row and each column to find occurrences of x\n           for (int i = 0; i < lst.size(); i++) {\n               List<Integer> row = lst.get(i);\n               for (int j = 0; j < row.size(); j++) {\n                   if (row.get(j) == x) {\n                       coordinates.add(Arrays.asList(i, j));\n                   }\n               }\n           }\n           \n           // Sort the coordinates\n           coordinates.sort((a, b) -> {\n               int rowComparison = a.get(0).compareTo(b.get(0));\n               if (rowComparison != 0) {\n                   return rowComparison;\n               } else {\n                   return b.get(1).compareTo(a.get(1));\n               }\n           });\n           \n           return coordinates;\n       }\n   }\n   "}
{"task_id": "Java/88", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> sort_array(List<Integer> array) {\n           if (array.isEmpty()) {\n               return new ArrayList<>();\n           }\n\n           int first = array.get(0);\n           int last = array.get(array.size() - 1);\n           int sum = first + last;\n\n           List<Integer> sortedArray = new ArrayList<>(array);\n\n           if (sum % 2 != 0) {\n               // Sum is odd, sort in ascending order\n               Collections.sort(sortedArray);\n           } else {\n               // Sum is even, sort in descending order\n               Collections.sort(sortedArray, Collections.reverseOrder());\n           }\n\n           return sortedArray;\n       }\n   }\n   "}
{"task_id": "Java/89", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String encrypt(String s) {\n           StringBuilder result = new StringBuilder();\n           for (char c : s.toCharArray()) {\n               if (Character.isLowerCase(c)) {\n                   char new_char = (char) ((c - 'a' + 4) % 26 + 'a');\n                   result.append(new_char);\n               } else {\n                   result.append(c);\n               }\n           }\n           return result.toString();\n       }\n   }\n   "}
{"task_id": "Java/90", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        // Convert list to set to remove duplicates\n        Set<Integer> uniqueElements = new HashSet<>(lst);\n        \n        // Check if there are at least 2 unique elements\n        if (uniqueElements.size() < 2) {\n            return Optional.empty();\n        }\n        \n        // Convert set to list and sort it\n        List<Integer> sortedList = new ArrayList<>(uniqueElements);\n        Collections.sort(sortedList);\n        \n        // Return the 2nd smallest element\n        return Optional.of(sortedList.get(1));\n    }\n}\n"}
{"task_id": "Java/91", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int is_bored(String S) {\n           int boredomCount = 0;\n           String[] sentences = S.split(\"[.!?]\");\n           for (String sentence : sentences) {\n               sentence = sentence.trim();\n               if (sentence.startsWith(\"I\")) {\n                   boredomCount++;\n               }\n           }\n           return boredomCount;\n       }\n   }\n   "}
{"task_id": "Java/92", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean any_int(Object x, Object y, Object z) {\n           // Check if all three objects are instances of Integer\n           if (!(x instanceof Integer) || !(y instanceof Integer) || !(z instanceof Integer)) {\n               return false;\n           }\n\n           // Convert objects to integers\n           int a = (Integer) x;\n           int b = (Integer) y;\n           int c = (Integer) z;\n\n           // Check if any of the integers is equal to the sum of the other two\n           if (a == b + c || b == a + c || c == a + b) {\n               return true;\n           }\n\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/93", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String encode(String message) {\n           StringBuilder result = new StringBuilder();\n           for (char ch : message.toCharArray()) {\n               if (isVowel(ch)) {\n                   ch = getNextLetter(ch);\n               }\n               ch = swapCase(ch);\n               result.append(ch);\n           }\n           return result.toString();\n       }\n\n       private boolean isVowel(char ch) {\n           return \"aeiouAEIOU\".indexOf(ch) != -1;\n       }\n\n       private char getNextLetter(char ch) {\n           char base = Character.isLowerCase(ch) ? 'a' : 'A';\n           int offset = (ch - base + 2) % 26;\n           return (char) (base + offset);\n       }\n\n       private char swapCase(char ch) {\n           if (Character.isUpperCase(ch)) {\n               return Character.toLowerCase(ch);\n           } else {\n               return Character.toUpperCase(ch);\n           }\n       }\n   }\n   "}
{"task_id": "Java/94", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean isPrime(int number) {\n           if (number <= 1) {\n               return false;\n           }\n           for (int i = 2; i <= Math.sqrt(number); i++) {\n               if (number % i == 0) {\n                   return false;\n               }\n           }\n           return true;\n       }\n\n       public int sumOfDigits(int number) {\n           int sum = 0;\n           while (number > 0) {\n               sum += number % 10;\n               number /= 10;\n           }\n           return sum;\n       }\n\n       public int skjkasdkd(List<Integer> lst) {\n           int largestPrime = -1;\n           for (int number : lst) {\n               if (isPrime(number) && number > largestPrime) {\n                   largestPrime = number;\n               }\n           }\n           if (largestPrime == -1) {\n               return 0;\n           }\n           return sumOfDigits(largestPrime);\n       }\n   }\n   "}
{"task_id": "Java/95", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean check_dict_case(Map<Object, Object> dict) {\n           if (dict.isEmpty()) {\n               return false;\n           }\n           for (Object key : dict.keySet()) {\n               if (!(key instanceof String)) {\n                   return false;\n               }\n               String strKey = (String) key;\n               if (!strKey.equals(strKey.toLowerCase()) && !strKey.equals(strKey.toUpperCase())) {\n                   return false;\n               }\n           }\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/96", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<>();\n        if (n < 2) {\n            return primes;\n        }\n\n        boolean[] isPrime = new boolean[n];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = isPrime[1] = false; // 0 and 1 are not prime numbers\n\n        for (int i = 2; i * i < n; i++) {\n            if (isPrime[i]) {\n                for (int j = i * i; j < n; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n\n        for (int i = 2; i < n; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n            }\n        }\n\n        return primes;\n    }\n}\n"}
{"task_id": "Java/97", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int multiply(int a, int b) {\n           // Step 1: Extract the unit digit of 'a'\n           int unit_digit_a = Math.abs(a) % 10;\n           // Step 2: Extract the unit digit of 'b'\n           int unit_digit_b = Math.abs(b) % 10;\n           // Step 3: Multiply the unit digits\n           int result = unit_digit_a * unit_digit_b;\n           // Step 4: Return the result\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/98", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int count_upper(String s) {\n           int count = 0;\n           Set<Character> vowels = new HashSet<>(Arrays.asList('A', 'E', 'I', 'O', 'U'));\n           \n           for (int i = 0; i < s.length(); i += 2) {\n               char ch = s.charAt(i);\n               if (vowels.contains(ch)) {\n                   count++;\n               }\n           }\n           \n           return count;\n       }\n   }\n   "}
{"task_id": "Java/99", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int closest_integer(String value) {\n        // Convert the string to a double\n        double number = Double.parseDouble(value);\n        \n        // Check if the number is exactly halfway between two integers\n        double fractionalPart = number - Math.floor(number);\n        if (fractionalPart == 0.5 || fractionalPart == -0.5) {\n            // Round away from zero\n            if (number > 0) {\n                return (int) Math.ceil(number);\n            } else {\n                return (int) Math.floor(number);\n            }\n        } else {\n            // Round to the nearest integer\n            return (int) Math.round(number);\n        }\n    }\n}\n"}
{"task_id": "Java/100", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        int currentStones = n;\n        \n        for (int i = 0; i < n; i++) {\n            pile.add(currentStones);\n            if (currentStones % 2 == 0) {\n                currentStones += 2; // Next even number\n            } else {\n                currentStones += 2; // Next odd number\n            }\n        }\n        \n        return pile;\n    }\n}\n"}
{"task_id": "Java/101", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> words_string(String s) {\n        // Initialize an empty list to store the words\n        List<String> words = new ArrayList<>();\n        \n        // Use regular expression to split the string by commas and spaces\n        String[] splitWords = s.split(\"[,\\\\s]+\");\n        \n        // Iterate through the split results and add non-empty strings to the list\n        for (String word : splitWords) {\n            if (!word.isEmpty()) {\n                words.add(word);\n            }\n        }\n        \n        // Return the list of words\n        return words;\n    }\n}\n"}
{"task_id": "Java/102", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int choose_num(int x, int y) {\n           // Ensure x is less than or equal to y\n           if (x > y) {\n               return -1;\n           }\n           \n           // Iterate from y down to x\n           for (int i = y; i >= x; i--) {\n               // Check if the number is even\n               if (i % 2 == 0) {\n                   return i;\n               }\n           }\n           \n           // If no even number is found, return -1\n           return -1;\n       }\n   }\n   "}
{"task_id": "Java/103", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public Object rounded_avg(int n, int m) {\n           if (n > m) {\n               return -1;\n           }\n           \n           int sum = 0;\n           int count = m - n + 1;\n           \n           for (int i = n; i <= m; i++) {\n               sum += i;\n           }\n           \n           double average = (double) sum / count;\n           int rounded_average = (int) Math.round(average);\n           String binary_string = Integer.toBinaryString(rounded_average);\n           \n           return binary_string;\n       }\n   }\n   "}
{"task_id": "Java/104", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> unique_digits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int number : x) {\n            if (!containsEvenDigit(number)) {\n                result.add(number);\n            }\n        }\n        \n        Collections.sort(result);\n        return result;\n    }\n    \n    private boolean containsEvenDigit(int number) {\n        while (number > 0) {\n            int digit = number % 10;\n            if (digit % 2 == 0) {\n                return true;\n            }\n            number /= 10;\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/105", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<String> by_length(List<Integer> arr) {\n           // List to store valid numbers between 1 and 9\n           List<Integer> validNumbers = new ArrayList<>();\n           \n           // Iterate through the input array and filter valid numbers\n           for (int num : arr) {\n               if (num >= 1 && num <= 9) {\n                   validNumbers.add(num);\n               }\n           }\n           \n           // Sort the valid numbers\n           Collections.sort(validNumbers);\n           \n           // Reverse the sorted list\n           Collections.reverse(validNumbers);\n           \n           // List to store the result\n           List<String> result = new ArrayList<>();\n           \n           // Map each number to its corresponding name\n           Map<Integer, String> numberToName = new HashMap<>();\n           numberToName.put(1, \"One\");\n           numberToName.put(2, \"Two\");\n           numberToName.put(3, \"Three\");\n           numberToName.put(4, \"Four\");\n           numberToName.put(5, \"Five\");\n           numberToName.put(6, \"Six\");\n           numberToName.put(7, \"Seven\");\n           numberToName.put(8, \"Eight\");\n           numberToName.put(9, \"Nine\");\n           \n           // Iterate through the reversed list and add corresponding names to the result\n           for (int num : validNumbers) {\n               result.add(numberToName.get(num));\n           }\n           \n           return result;\n       }\n   }\n   "}
{"task_id": "Java/106", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> f(int n) {\n           List<Integer> result = new ArrayList<>();\n           for (int i = 1; i <= n; i++) {\n               if (i % 2 == 0) {\n                   // Calculate factorial of i\n                   int factorial = 1;\n                   for (int j = 1; j <= i; j++) {\n                       factorial *= j;\n                   }\n                   result.add(factorial);\n               } else {\n                   // Calculate sum of numbers from 1 to i\n                   int sum = 0;\n                   for (int j = 1; j <= i; j++) {\n                       sum += j;\n                   }\n                   result.add(sum);\n               }\n           }\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/107", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> even_odd_palindrome(int n) {\n        int even_count = 0;\n        int odd_count = 0;\n        \n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even_count++;\n                } else {\n                    odd_count++;\n                }\n            }\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        result.add(even_count);\n        result.add(odd_count);\n        return result;\n    }\n    \n    private boolean isPalindrome(int number) {\n        String str = Integer.toString(number);\n        String reverseStr = new StringBuilder(str).reverse().toString();\n        return str.equals(reverseStr);\n    }\n}\n"}
{"task_id": "Java/108", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int count_nums(List<Integer> arr) {\n           int count = 0;\n           for (int number : arr) {\n               int sum_of_digits = 0;\n               int abs_number = Math.abs(number);\n               while (abs_number > 0) {\n                   int digit = abs_number % 10;\n                   if (number < 0 && abs_number == Math.abs(number)) {\n                       digit = -digit;\n                   }\n                   sum_of_digits += digit;\n                   abs_number /= 10;\n               }\n               if (sum_of_digits > 0) {\n                   count++;\n               }\n           }\n           return count;\n       }\n   }\n   "}
{"task_id": "Java/109", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean move_one_ball(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        int n = arr.size();\n        int rotationPoint = -1;\n\n        // Find the rotation point\n        for (int i = 0; i < n - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                rotationPoint = i + 1;\n                break;\n            }\n        }\n\n        // If no rotation point found, the array is already sorted\n        if (rotationPoint == -1) {\n            return true;\n        }\n\n        // Check if the array from rotationPoint to end is sorted\n        for (int i = rotationPoint; i < n - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                return false;\n            }\n        }\n\n        // Check if the last element of the first part is <= the first element of the second part\n        if (arr.get(n - 1) > arr.get(0)) {\n            return false;\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/110", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String exchange(List<Integer> lst1, List<Integer> lst2) {\n           int count_odd_lst1 = 0;\n           int count_even_lst2 = 0;\n           \n           // Count odd elements in lst1\n           for (int num : lst1) {\n               if (num % 2 != 0) {\n                   count_odd_lst1++;\n               }\n           }\n           \n           // Count even elements in lst2\n           for (int num : lst2) {\n               if (num % 2 == 0) {\n                   count_even_lst2++;\n               }\n           }\n           \n           // Determine if exchange is possible\n           if (count_odd_lst1 <= count_even_lst2) {\n               return \"YES\";\n           } else {\n               return \"NO\";\n           }\n       }\n   }\n   "}
{"task_id": "Java/111", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public Map<String, Integer> histogram(String test) {\n           if (test.isEmpty()) {\n               return new HashMap<>();\n           }\n\n           Map<String, Integer> letterCounts = new HashMap<>();\n           String[] letters = test.split(\" \");\n\n           for (String letter : letters) {\n               letterCounts.put(letter, letterCounts.getOrDefault(letter, 0) + 1);\n           }\n\n           int maxCount = Collections.max(letterCounts.values());\n           Map<String, Integer> result = new HashMap<>();\n\n           for (Map.Entry<String, Integer> entry : letterCounts.entrySet()) {\n               if (entry.getValue() == maxCount) {\n                   result.put(entry.getKey(), entry.getValue());\n               }\n           }\n\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/112", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Object> reverse_delete(String s, String c) {\n           // Create a set from characters in c\n           Set<Character> charSet = new HashSet<>();\n           for (char ch : c.toCharArray()) {\n               charSet.add(ch);\n           }\n\n           // Initialize an empty result string\n           StringBuilder result = new StringBuilder();\n\n           // Build the result string by excluding characters in charSet\n           for (char ch : s.toCharArray()) {\n               if (!charSet.contains(ch)) {\n                   result.append(ch);\n               }\n           }\n\n           // Check if the result string is a palindrome\n           String resultStr = result.toString();\n           String reversedStr = new StringBuilder(resultStr).reverse().toString();\n           boolean isPalindrome = resultStr.equals(reversedStr);\n\n           // Return the result string and the palindrome check result\n           List<Object> resultList = new ArrayList<>();\n           resultList.add(resultStr);\n           resultList.add(isPalindrome);\n           return resultList;\n       }\n   }\n   "}
{"task_id": "Java/113", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int oddCount = 0;\n            \n            // Count the number of odd digits in the string\n            for (char ch : str.toCharArray()) {\n                if (Character.getNumericValue(ch) % 2 != 0) {\n                    oddCount++;\n                }\n            }\n            \n            // Construct the result string\n            String resultStr = String.format(\"the number of odd elements %dn the str%dng %d of the %dnput.\", oddCount, oddCount, oddCount, oddCount);\n            result.add(resultStr);\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/114", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int minSubArraySum(List<Integer> nums) {\n        // Initialize minSum to a large value and currentSum to 0\n        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n        \n        // Iterate through each element in the array\n        for (int num : nums) {\n            // Update currentSum to be the minimum of the current element or the sum of currentSum and the current element\n            currentSum = Math.min(num, currentSum + num);\n            // Update minSum to be the minimum of minSum and currentSum\n            minSum = Math.min(minSum, currentSum);\n        }\n        \n        // Return the minimum sub-array sum found\n        return minSum;\n    }\n}\n"}
{"task_id": "Java/115", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int max_fill(List<List<Integer>> grid, int capacity) {\n           int total_lowers = 0;\n           for (List<Integer> row : grid) {\n               int water_units = 0;\n               for (int unit : row) {\n                   if (unit == 1) {\n                       water_units++;\n                   }\n               }\n               int lowers_needed = (int) Math.ceil((double) water_units / capacity);\n               total_lowers += lowers_needed;\n           }\n           return total_lowers;\n       }\n   }\n   "}
{"task_id": "Java/116", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> arr) {\n        // Custom comparator to sort based on number of ones in binary representation\n        Comparator<Integer> customComparator = new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int countOnesA = Integer.bitCount(a);\n                int countOnesB = Integer.bitCount(b);\n                \n                // Compare based on number of ones\n                if (countOnesA != countOnesB) {\n                    return countOnesA - countOnesB;\n                }\n                \n                // If number of ones is the same, compare based on decimal value\n                return a - b;\n            }\n        };\n        \n        // Sort the array using the custom comparator\n        Collections.sort(arr, customComparator);\n        \n        return arr;\n    }\n}\n"}
{"task_id": "Java/117", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<String> select_words(String s, int n) {\n           // Initialize the result list\n           List<String> result = new ArrayList<>();\n           \n           // Check if the string is empty\n           if (s.isEmpty()) {\n               return result;\n           }\n           \n           // Split the string into words\n           String[] words = s.split(\" \");\n           \n           // Define a set of vowels for consonant checking\n           Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n           \n           // Iterate through each word\n           for (String word : words) {\n               int consonantCount = 0;\n               \n               // Count consonants in the word\n               for (char c : word.toCharArray()) {\n                   if (!vowels.contains(c) && Character.isLetter(c)) {\n                       consonantCount++;\n                   }\n               }\n               \n               // Check if the consonant count matches n\n               if (consonantCount == n) {\n                   result.add(word);\n               }\n           }\n           \n           // Return the result list\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/118", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String get_closest_vowel(String word) {\n           // Define the set of vowels\n           Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n           \n           // Initialize the result\n           String result = \"\";\n           \n           // Iterate through the word from right to left\n           for (int i = word.length() - 1; i >= 0; i--) {\n               char currentChar = word.charAt(i);\n               \n               // Check if the current character is a vowel\n               if (vowels.contains(currentChar)) {\n                   // Check if it is between two consonants\n                   if (i > 0 && i < word.length() - 1) {\n                       char prevChar = word.charAt(i - 1);\n                       char nextChar = word.charAt(i + 1);\n                       \n                       // Check if both previous and next characters are consonants\n                       if (!vowels.contains(prevChar) && !vowels.contains(nextChar)) {\n                           result = String.valueOf(currentChar);\n                           break;\n                       }\n                   }\n               }\n           }\n           \n           // Return the result\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/119", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String match_parens(List<String> lst) {\n        int openCount1 = 0, closeCount1 = 0;\n        int openCount2 = 0, closeCount2 = 0;\n\n        // Count unmatched parentheses in the first string\n        for (char c : lst.get(0).toCharArray()) {\n            if (c == '(') {\n                openCount1++;\n            } else if (c == ')') {\n                if (openCount1 > 0) {\n                    openCount1--;\n                } else {\n                    closeCount1++;\n                }\n            }\n        }\n\n        // Count unmatched parentheses in the second string\n        for (char c : lst.get(1).toCharArray()) {\n            if (c == '(') {\n                openCount2++;\n            } else if (c == ')') {\n                if (openCount2 > 0) {\n                    openCount2--;\n                } else {\n                    closeCount2++;\n                }\n            }\n        }\n\n        // Check if we can balance the unmatched parentheses\n        if (openCount1 == closeCount2 && closeCount1 == openCount2) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}\n"}
{"task_id": "Java/120", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Initialize a max-heap\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n        \n        // Add all elements of the array to the max-heap\n        for (int num : arr) {\n            maxHeap.add(num);\n        }\n        \n        // Extract the top k elements from the max-heap\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            result.add(maxHeap.poll());\n        }\n        \n        // Sort the extracted elements in ascending order\n        Collections.sort(result);\n        \n        // Return the sorted list\n        return result;\n    }\n}\n"}
{"task_id": "Java/121", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int solution(List<Integer> lst) {\n           int sum = 0;\n           for (int i = 0; i < lst.size(); i++) {\n               if (i % 2 == 0) { // Check if the position is even\n                   if (lst.get(i) % 2 != 0) { // Check if the element is odd\n                       sum += lst.get(i);\n                   }\n               }\n           }\n           return sum;\n       }\n   }\n   "}
{"task_id": "Java/122", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int add_elements(List<Integer> arr, int k) {\n           int sum = 0;\n           for (int i = 0; i < k; i++) {\n               int num = arr.get(i);\n               if (num >= 0 && num <= 99) {\n                   sum += num;\n               }\n           }\n           return sum;\n       }\n   }\n   "}
{"task_id": "Java/123", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> get_odd_collatz(int n) {\n           List<Integer> odd_numbers = new ArrayList<>();\n           while (n != 1) {\n               if (n % 2 != 0) {\n                   odd_numbers.add(n);\n               }\n               if (n % 2 == 0) {\n                   n = n / 2;\n               } else {\n                   n = 3 * n + 1;\n               }\n           }\n           odd_numbers.add(1); // Adding 1 since it is always the end of the sequence\n           Collections.sort(odd_numbers);\n           return odd_numbers;\n       }\n   }\n   "}
{"task_id": "Java/124", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean valid_date(String date) {\n           if (date.isEmpty()) {\n               return false;\n           }\n           \n           // Check if the date matches the format \"mm-dd-yyyy\"\n           if (!date.matches(\"\\\\d{2}-\\\\d{2}-\\\\d{4}\")) {\n               return false;\n           }\n           \n           // Split the date into month, day, and year\n           String[] parts = date.split(\"-\");\n           int month = Integer.parseInt(parts[0]);\n           int day = Integer.parseInt(parts[1]);\n           int year = Integer.parseInt(parts[2]);\n           \n           // Validate month\n           if (month < 1 || month > 12) {\n               return false;\n           }\n           \n           // Validate day\n           if (day < 1 || day > 31) {\n               return false;\n           }\n           \n           // Validate days for specific months\n           if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) {\n               return false;\n           }\n           \n           // Validate days for February\n           if (month == 2) {\n               boolean isLeapYear = (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);\n               if (isLeapYear && day > 29) {\n                   return false;\n               }\n               if (!isLeapYear && day > 28) {\n                   return false;\n               }\n           }\n           \n           return true;\n       }\n   }\n   "}
{"task_id": "Java/125", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object split_words(String txt) {\n        // Check for whitespace\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\"\\\\s+\"));\n        }\n        \n        // Check for commas\n        if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        }\n        \n        // Count lowercase letters with odd order in the alphabet\n        int oddCount = 0;\n        for (char c : txt.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                int order = c - 'a';\n                if (order % 2 != 0) {\n                    oddCount++;\n                }\n            }\n        }\n        \n        return oddCount;\n    }\n}\n"}
{"task_id": "Java/126", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_sorted(List<Integer> lst) {\n        // Edge case: if the list has only one element, it is trivially sorted\n        if (lst.size() <= 1) {\n            return true;\n        }\n\n        // Map to count occurrences of each number\n        Map<Integer, Integer> countMap = new HashMap<>();\n\n        // Iterate through the list\n        for (int i = 0; i < lst.size() - 1; i++) {\n            int current = lst.get(i);\n            int next = lst.get(i + 1);\n\n            // Check if the list is not sorted\n            if (current > next) {\n                return false;\n            }\n\n            // Update the count of the current number\n            countMap.put(current, countMap.getOrDefault(current, 0) + 1);\n\n            // Check if the count exceeds 2\n            if (countMap.get(current) > 2) {\n                return false;\n            }\n        }\n\n        // Update the count of the last element\n        int last = lst.get(lst.size() - 1);\n        countMap.put(last, countMap.getOrDefault(last, 0) + 1);\n        if (countMap.get(last) > 2) {\n            return false;\n        }\n\n        // If all checks pass, the list is sorted and valid\n        return true;\n    }\n}\n"}
{"task_id": "Java/127", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String intersection(List<Integer> interval1, List<Integer> interval2) {\n           int start1 = interval1.get(0);\n           int end1 = interval1.get(1);\n           int start2 = interval2.get(0);\n           int end2 = interval2.get(1);\n           \n           int intersectionStart = Math.max(start1, start2);\n           int intersectionEnd = Math.min(end1, end2);\n           \n           if (intersectionStart > intersectionEnd) {\n               return \"NO\";\n           }\n           \n           int intersectionLength = intersectionEnd - intersectionStart + 1;\n           \n           if (isPrime(intersectionLength)) {\n               return \"YES\";\n           } else {\n               return \"NO\";\n           }\n       }\n       \n       private boolean isPrime(int n) {\n           if (n <= 1) {\n               return false;\n           }\n           for (int i = 2; i <= Math.sqrt(n); i++) {\n               if (n % i == 0) {\n                   return false;\n               }\n           }\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/128", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public Optional<Integer> prod_signs(List<Integer> arr) {\n           if (arr.isEmpty()) {\n               return Optional.empty();\n           }\n\n           int sum_of_magnitudes = 0;\n           int product_of_signs = 1;\n\n           for (int num : arr) {\n               sum_of_magnitudes += Math.abs(num);\n               if (num == 0) {\n                   product_of_signs = 0;\n                   break;\n               } else if (num < 0) {\n                   product_of_signs *= -1;\n               }\n           }\n\n           return Optional.of(sum_of_magnitudes * product_of_signs);\n       }\n   }\n   "}
{"task_id": "Java/129", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int N = grid.size();\n        PriorityQueue<List<Integer>> pq = new PriorityQueue<>(\n            (a, b) -> {\n                for (int i = 0; i < a.size(); i++) {\n                    if (a.get(i) < b.get(i)) return -1;\n                    if (a.get(i) > b.get(i)) return 1;\n                }\n                return 0;\n            }\n        );\n        \n        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        \n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < N; j++) {\n                Queue<List<Integer>> queue = new LinkedList<>();\n                List<Integer> initialPath = new ArrayList<>();\n                initialPath.add(grid.get(i).get(j));\n                queue.add(initialPath);\n                \n                while (!queue.isEmpty()) {\n                    List<Integer> currentPath = queue.poll();\n                    int pathLength = currentPath.size();\n                    \n                    if (pathLength == k) {\n                        pq.add(currentPath);\n                        continue;\n                    }\n                    \n                    int lastX = (pathLength - 1) / N;\n                    int lastY = (pathLength - 1) % N;\n                    \n                    for (int[] dir : directions) {\n                        int newX = lastX + dir[0];\n                        int newY = lastY + dir[1];\n                        \n                        if (newX >= 0 && newX < N && newY >= 0 && newY < N) {\n                            List<Integer> newPath = new ArrayList<>(currentPath);\n                            newPath.add(grid.get(newX).get(newY));\n                            queue.add(newPath);\n                        }\n                    }\n                }\n            }\n        }\n        \n        return pq.poll();\n    }\n}\n"}
{"task_id": "Java/130", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> tri(int n) {\n           List<Integer> tribonacciSequence = new ArrayList<>();\n           tribonacciSequence.add(3); // tri(1) = 3\n\n           for (int i = 2; i <= n; i++) {\n               if (i % 2 == 0) {\n                   // If i is even\n                   tribonacciSequence.add(1 + i / 2);\n               } else {\n                   // If i is odd\n                   int tri_i_minus_1 = tribonacciSequence.get(i - 2);\n                   int tri_i_minus_2 = tribonacciSequence.get(i - 3);\n                   int tri_i_plus_1 = 1 + (i + 1) / 2; // Compute tri(i + 1)\n                   int tri_i = tri_i_minus_1 + tri_i_minus_2 + tri_i_plus_1;\n                   tribonacciSequence.add(tri_i);\n               }\n           }\n\n           return tribonacciSequence;\n       }\n   }\n   "}
{"task_id": "Java/131", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int digits(int n) {\n           int product = 1;\n           boolean foundOdd = false;\n           String numStr = Integer.toString(n);\n           \n           for (char ch : numStr.toCharArray()) {\n               int digit = Character.getNumericValue(ch);\n               if (digit % 2 != 0) {\n                   product *= digit;\n                   foundOdd = true;\n               }\n           }\n           \n           if (!foundOdd) {\n               return 0;\n           }\n           \n           return product;\n       }\n   }\n   "}
{"task_id": "Java/132", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean is_nested(String string) {\n           Stack<Character> stack = new Stack<>();\n           for (char ch : string.toCharArray()) {\n               if (ch == '[') {\n                   stack.push(ch);\n               } else if (ch == ']') {\n                   if (!stack.isEmpty()) {\n                       stack.pop();\n                       if (stack.isEmpty()) {\n                           return true; // Found a nested bracket\n                       }\n                   } else {\n                       stack.clear(); // Invalid sequence, reset\n                   }\n               }\n           }\n           return false; // No nested brackets found\n       }\n   }\n   "}
{"task_id": "Java/133", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int sum_squares(List<Double> lst) {\n           int sum = 0;\n           for (Double num : lst) {\n               int roundedNum = (int) Math.ceil(num);\n               sum += roundedNum * roundedNum;\n           }\n           return sum;\n       }\n   }\n   "}
{"task_id": "Java/134", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean check_if_last_char_is_a_letter(String txt) {\n           if (txt.isEmpty()) {\n               return false;\n           }\n           char last_char = txt.charAt(txt.length() - 1);\n           if (Character.isLetter(last_char)) {\n               if (txt.length() == 1 || txt.charAt(txt.length() - 2) == ' ') {\n                   return true;\n               }\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/135", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int can_arrange(List<Integer> arr) {\n           int maxIndex = -1;\n           for (int i = 1; i < arr.size(); i++) {\n               if (arr.get(i) < arr.get(i - 1)) {\n                   maxIndex = i;\n               }\n           }\n           return maxIndex;\n       }\n   }\n   "}
{"task_id": "Java/136", "generation": "import java.util.*;\nimport java.util.Optional;\n\nclass Solution {\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        Optional<Integer> largestNegative = Optional.empty();\n        Optional<Integer> smallestPositive = Optional.empty();\n\n        for (Integer num : lst) {\n            if (num < 0) {\n                if (!largestNegative.isPresent() || num > largestNegative.get()) {\n                    largestNegative = Optional.of(num);\n                }\n            } else if (num > 0) {\n                if (!smallestPositive.isPresent() || num < smallestPositive.get()) {\n                    smallestPositive = Optional.of(num);\n                }\n            }\n        }\n\n        List<Optional<Integer>> result = new ArrayList<>();\n        result.add(largestNegative);\n        result.add(smallestPositive);\n        return result;\n    }\n}\n"}
{"task_id": "Java/137", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public Optional<Object> compare_one(Object a, Object b) {\n           // Convert both objects to double for comparison\n           double valA = convertToDouble(a);\n           double valB = convertToDouble(b);\n\n           // Compare the values\n           if (valA > valB) {\n               return Optional.of(a);\n           } else if (valB > valA) {\n               return Optional.of(b);\n           } else {\n               return Optional.empty();\n           }\n       }\n\n       private double convertToDouble(Object obj) {\n           if (obj instanceof String) {\n               // Replace ',' with '.' for string representations\n               String str = ((String) obj).replace(',', '.');\n               return Double.parseDouble(str);\n           } else if (obj instanceof Integer) {\n               return ((Integer) obj).doubleValue();\n           } else if (obj instanceof Double) {\n               return (Double) obj;\n           } else {\n               throw new IllegalArgumentException(\"Unsupported type\");\n           }\n       }\n   }\n   "}
{"task_id": "Java/138", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_equal_to_sum_even(int n) {\n        // Check if n is even\n        if (n % 2 != 0) {\n            return false;\n        }\n        \n        // Check if n is greater than or equal to 8\n        if (n < 8) {\n            return false;\n        }\n        \n        // Check if n can be divided into 4 even parts\n        // Since the smallest sum of 4 positive even numbers is 8, we can start from there\n        // We need to check if n can be expressed as 4 even numbers\n        // For example, if n = 8, then 8 = 2 + 2 + 2 + 2\n        // If n = 10, then 10 = 2 + 2 + 2 + 4\n        // If n = 12, then 12 = 2 + 2 + 4 + 4\n        // If n = 14, then 14 = 2 + 4 + 4 + 4\n        // If n = 16, then 16 = 4 + 4 + 4 + 4\n        // We can see that for any even number n >= 8, it can be expressed as the sum of 4 even numbers\n        // Therefore, if n is even and n >= 8, return true\n        return true;\n    }\n}\n"}
{"task_id": "Java/139", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public long special_factorial(int n) {\n           // List to store factorials\n           List<Long> factorials = new ArrayList<>();\n           \n           // Compute factorials from 1 to n and store them\n           for (int i = 1; i <= n; i++) {\n               factorials.add(factorial(i));\n           }\n           \n           // Initialize result to 1\n           long result = 1;\n           \n           // Multiply all factorials together\n           for (long fact : factorials) {\n               result *= fact;\n           }\n           \n           return result;\n       }\n       \n       // Helper function to compute factorial of a number\n       private long factorial(int num) {\n           long fact = 1;\n           for (int i = 1; i <= num; i++) {\n               fact *= i;\n           }\n           return fact;\n       }\n   }\n   "}
{"task_id": "Java/140", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String fix_spaces(String text) {\n           StringBuilder result = new StringBuilder();\n           int spaceCount = 0;\n\n           for (char c : text.toCharArray()) {\n               if (c == ' ') {\n                   spaceCount++;\n               } else {\n                   if (spaceCount > 2) {\n                       result.append('-');\n                   } else if (spaceCount > 0) {\n                       for (int i = 0; i < spaceCount; i++) {\n                           result.append('_');\n                       }\n                   }\n                   result.append(c);\n                   spaceCount = 0;\n               }\n           }\n\n           if (spaceCount > 2) {\n               result.append('-');\n           } else if (spaceCount > 0) {\n               for (int i = 0; i < spaceCount; i++) {\n                   result.append('_');\n               }\n           }\n\n           return result.toString();\n       }\n   }\n   "}
{"task_id": "Java/141", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String file_name_check(String file_name) {\n        // Check if there is exactly one dot\n        int dotIndex = file_name.indexOf('.');\n        if (dotIndex == -1 || dotIndex != file_name.lastIndexOf('.')) {\n            return \"No\";\n        }\n\n        // Split the file name into prefix and suffix\n        String prefix = file_name.substring(0, dotIndex);\n        String suffix = file_name.substring(dotIndex + 1);\n\n        // Check if the prefix is not empty and starts with a Latin alphabet letter\n        if (prefix.isEmpty() || !Character.isLetter(prefix.charAt(0))) {\n            return \"No\";\n        }\n\n        // Check if the suffix is one of [\"txt\", \"exe\", \"dll\"]\n        List<String> validSuffixes = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        if (!validSuffixes.contains(suffix)) {\n            return \"No\";\n        }\n\n        // Count the digits in the prefix\n        int digitCount = 0;\n        for (char c : prefix.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n                if (digitCount > 3) {\n                    return \"No\";\n                }\n            }\n        }\n\n        // If all conditions are met, return \"Yes\"\n        return \"Yes\";\n    }\n}\n"}
{"task_id": "Java/142", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int sum_squares(List<Integer> lst) {\n           int sum = 0;\n           for (int i = 0; i < lst.size(); i++) {\n               int value = lst.get(i);\n               if (i % 3 == 0) {\n                   value = value * value; // Square the value\n               } else if (i % 4 == 0 && i % 3 != 0) {\n                   value = value * value * value; // Cube the value\n               }\n               sum += value;\n           }\n           return sum;\n       }\n   }\n   "}
{"task_id": "Java/143", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String words_in_sentence(String sentence) {\n           String[] words = sentence.split(\" \");\n           List<String> primeWords = new ArrayList<>();\n           \n           for (String word : words) {\n               if (isPrime(word.length())) {\n                   primeWords.add(word);\n               }\n           }\n           \n           return String.join(\" \", primeWords);\n       }\n       \n       private boolean isPrime(int n) {\n           if (n <= 1) {\n               return false;\n           }\n           for (int i = 2; i <= Math.sqrt(n); i++) {\n               if (n % i == 0) {\n                   return false;\n               }\n           }\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/144", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean simplify(String x, String n) {\n           // Parse the fractions\n           String[] partsX = x.split(\"/\");\n           int numeratorX = Integer.parseInt(partsX[0]);\n           int denominatorX = Integer.parseInt(partsX[1]);\n           \n           String[] partsN = n.split(\"/\");\n           int numeratorN = Integer.parseInt(partsN[0]);\n           int denominatorN = Integer.parseInt(partsN[1]);\n           \n           // Calculate the product of the fractions\n           int numeratorProduct = numeratorX * numeratorN;\n           int denominatorProduct = denominatorX * denominatorN;\n           \n           // Simplify the resulting fraction\n           int gcd = gcd(numeratorProduct, denominatorProduct);\n           numeratorProduct /= gcd;\n           denominatorProduct /= gcd;\n           \n           // Check if the result is a whole number\n           return denominatorProduct == 1;\n       }\n       \n       // Helper method to calculate the greatest common divisor (GCD)\n       private int gcd(int a, int b) {\n           while (b != 0) {\n               int temp = b;\n               b = a % b;\n               a = temp;\n           }\n           return a;\n       }\n   }\n   "}
{"task_id": "Java/145", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> order_by_points(List<Integer> nums) {\n        // Custom comparator to sort based on the sum of digits\n        Comparator<Integer> digitSumComparator = new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int sumA = sumOfDigits(a);\n                int sumB = sumOfDigits(b);\n                return Integer.compare(sumA, sumB);\n            }\n        };\n\n        // Sort the list using the custom comparator\n        Collections.sort(nums, digitSumComparator);\n\n        return nums;\n    }\n\n    // Helper function to calculate the sum of digits of a number\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        boolean isNegative = num < 0;\n        num = Math.abs(num);\n\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n\n        return isNegative ? -sum : sum;\n    }\n\n    // Example usage\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.order_by_points(Arrays.asList(1, 11, -1, -11, -12))); // [-1, -11, 1, -12, 11]\n        System.out.println(solution.order_by_points(Arrays.asList())); // []\n    }\n}\n"}
{"task_id": "Java/146", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int specialFilter(List<Integer> nums) {\n           int count = 0;\n           for (int num : nums) {\n               if (num > 10) {\n                   String numStr = Integer.toString(Math.abs(num));\n                   int firstDigit = Character.getNumericValue(numStr.charAt(0));\n                   int lastDigit = Character.getNumericValue(numStr.charAt(numStr.length() - 1));\n                   if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n                       count++;\n                   }\n               }\n           }\n           return count;\n       }\n   }\n   "}
{"task_id": "Java/147", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int get_max_triples(int n) {\n           int[] a = new int[n];\n           for (int i = 0; i < n; i++) {\n               a[i] = (i + 1) * (i + 1) - (i + 1) + 1;\n           }\n           \n           int count = 0;\n           for (int i = 0; i < n - 2; i++) {\n               for (int j = i + 1; j < n - 1; j++) {\n                   for (int k = j + 1; k < n; k++) {\n                       if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                           count++;\n                       }\n                   }\n               }\n           }\n           \n           return count;\n       }\n   }\n   "}
{"task_id": "Java/148", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<String> bf(String planet1, String planet2) {\n           // List of planets in order of proximity to the Sun\n           List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n           \n           // Check if both planets are valid\n           if (!planets.contains(planet1) || !planets.contains(planet2)) {\n               return new ArrayList<>();\n           }\n           \n           // Find the indices of the given planets\n           int index1 = planets.indexOf(planet1);\n           int index2 = planets.indexOf(planet2);\n           \n           // Ensure index1 is less than index2\n           if (index1 > index2) {\n               int temp = index1;\n               index1 = index2;\n               index2 = temp;\n           }\n           \n           // Extract the sublist of planets between these indices (excluding planet1 and planet2)\n           List<String> result = new ArrayList<>();\n           for (int i = index1 + 1; i < index2; i++) {\n               result.add(planets.get(i));\n           }\n           \n           return result;\n       }\n   }\n   "}
{"task_id": "Java/149", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<String> sorted_list_sum(List<String> lst) {\n        // Filter out strings with odd lengths\n        List<String> filteredList = lst.stream()\n                                       .filter(s -> s.length() % 2 == 0)\n                                       .collect(Collectors.toList());\n        \n        // Sort the filtered list by length first, then alphabetically\n        filteredList.sort(Comparator.comparingInt(String::length)\n                                    .thenComparing(Comparator.naturalOrder()));\n        \n        return filteredList;\n    }\n}\n"}
{"task_id": "Java/150", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int x_or_y(int n, int x, int y) {\n        // Edge case: 0 and 1 are not prime numbers\n        if (n <= 1) {\n            return y;\n        }\n        \n        boolean isPrime = true;\n        int sqrtN = (int) Math.sqrt(n);\n        \n        for (int i = 2; i <= sqrtN; i++) {\n            if (n % i == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        \n        return isPrime ? x : y;\n    }\n}\n"}
{"task_id": "Java/151", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int double_the_difference(List<Object> lst) {\n           int sum = 0;\n           for (Object obj : lst) {\n               if (obj instanceof Integer) {\n                   int num = (Integer) obj;\n                   if (num > 0 && num % 2 != 0) {\n                       sum += num * num;\n                   }\n               }\n           }\n           return sum;\n       }\n   }\n   "}
{"task_id": "Java/152", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 0; i < game.size(); i++) {\n            int score = game.get(i);\n            int guessedScore = guess.get(i);\n            \n            if (score == guessedScore) {\n                result.add(0);\n            } else {\n                int difference = Math.abs(score - guessedScore);\n                result.add(difference);\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/153", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String Strongest_Extension(String class_name, List<String> extensions) {\n           String strongest_extension = \"\";\n           int max_strength = Integer.MIN_VALUE;\n           \n           for (String extension : extensions) {\n               int CAP = 0;\n               int SM = 0;\n               \n               for (char c : extension.toCharArray()) {\n                   if (Character.isUpperCase(c)) {\n                       CAP++;\n                   } else if (Character.isLowerCase(c)) {\n                       SM++;\n                   }\n               }\n               \n               int strength = CAP - SM;\n               \n               if (strength > max_strength) {\n                   max_strength = strength;\n                   strongest_extension = extension;\n               }\n           }\n           \n           return class_name + \".\" + strongest_extension;\n       }\n   }\n   "}
{"task_id": "Java/154", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean cycpattern_check(String a, String b) {\n           if (b.length() > a.length()) {\n               return false;\n           }\n           \n           String concatenated = b + b;\n           for (int i = 0; i < b.length(); i++) {\n               String rotation = concatenated.substring(i, i + b.length());\n               if (a.contains(rotation)) {\n                   return true;\n               }\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/155", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> even_odd_count(int num) {\n        int even_count = 0;\n        int odd_count = 0;\n        \n        // Convert num to absolute value to handle negative numbers\n        num = Math.abs(num);\n        \n        // Convert num to string to iterate through each digit\n        String numStr = Integer.toString(num);\n        \n        for (char ch : numStr.toCharArray()) {\n            int digit = Character.getNumericValue(ch);\n            if (digit % 2 == 0) {\n                even_count++;\n            } else {\n                odd_count++;\n            }\n        }\n        \n        // Return the counts as a list\n        return Arrays.asList(even_count, odd_count);\n    }\n}\n"}
{"task_id": "Java/156", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String int_to_mini_roman(int number) {\n           // Define the Roman numeral symbols and their corresponding values\n           int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n           String[] symbols = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n           \n           StringBuilder result = new StringBuilder();\n           \n           // Iterate through the values and symbols\n           for (int i = 0; i < values.length; i++) {\n               while (number >= values[i]) {\n                   number -= values[i];\n                   result.append(symbols[i]);\n               }\n           }\n           \n           // Convert the result to lowercase\n           return result.toString().toLowerCase();\n       }\n   }\n   "}
{"task_id": "Java/157", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean right_angle_triangle(int a, int b, int c) {\n           int hypotenuse, side1, side2;\n           \n           // Determine the hypotenuse (longest side)\n           if (a > b && a > c) {\n               hypotenuse = a;\n               side1 = b;\n               side2 = c;\n           } else if (b > a && b > c) {\n               hypotenuse = b;\n               side1 = a;\n               side2 = c;\n           } else {\n               hypotenuse = c;\n               side1 = a;\n               side2 = b;\n           }\n           \n           // Check the Pythagorean theorem\n           return hypotenuse * hypotenuse == side1 * side1 + side2 * side2;\n       }\n   }\n   "}
{"task_id": "Java/158", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String find_max(List<String> words) {\n           int max_unique_count = 0;\n           String result_word = \"\";\n\n           for (String word : words) {\n               Set<Character> unique_chars = new HashSet<>();\n               for (char c : word.toCharArray()) {\n                   unique_chars.add(c);\n               }\n               int unique_count = unique_chars.size();\n\n               if (unique_count > max_unique_count) {\n                   max_unique_count = unique_count;\n                   result_word = word;\n               } else if (unique_count == max_unique_count) {\n                   if (result_word.isEmpty() || word.compareTo(result_word) < 0) {\n                       result_word = word;\n                   }\n               }\n           }\n\n           return result_word;\n       }\n   }\n   "}
{"task_id": "Java/159", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> eat(int number, int need, int remaining) {\n        // Calculate the total number of carrots eaten after the meals\n        int totalEaten = number + need;\n        \n        // Calculate the number of carrots left after the meals\n        int carrotsLeft = Math.min(remaining, need);\n        \n        // If there are not enough remaining carrots, adjust the total eaten\n        if (carrotsLeft < need) {\n            totalEaten = number + carrotsLeft;\n        }\n        \n        // Calculate the remaining carrots after the meals\n        int remainingAfterMeals = remaining - carrotsLeft;\n        \n        // Return the result as a list\n        return Arrays.asList(totalEaten, remainingAfterMeals);\n    }\n}\n"}
{"task_id": "Java/160", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int do_algebra(List<String> operator, List<Integer> operand) {\n           // Initialize result with the first operand\n           int result = operand.get(0);\n           \n           // Iterate through the operator list and apply operations\n           for (int i = 0; i < operator.size(); i++) {\n               String op = operator.get(i);\n               int nextOperand = operand.get(i + 1);\n               \n               switch (op) {\n                   case \"+\":\n                       result += nextOperand;\n                       break;\n                   case \"-\":\n                       result -= nextOperand;\n                       break;\n                   case \"*\":\n                       result *= nextOperand;\n                       break;\n                   case \"/\":\n                       result /= nextOperand;\n                       break;\n                   case \"**\":\n                       result = (int) Math.pow(result, nextOperand);\n                       break;\n                   default:\n                       throw new IllegalArgumentException(\"Invalid operator: \" + op);\n               }\n           }\n           \n           // Return the final result\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/161", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String solve(String s) {\n           boolean hasLetters = false;\n           StringBuilder result = new StringBuilder();\n           \n           for (char c : s.toCharArray()) {\n               if (Character.isLetter(c)) {\n                   hasLetters = true;\n                   if (Character.isLowerCase(c)) {\n                       result.append(Character.toUpperCase(c));\n                   } else {\n                       result.append(Character.toLowerCase(c));\n                   }\n               } else {\n                   result.append(c);\n               }\n           }\n           \n           if (!hasLetters) {\n               result.reverse();\n           }\n           \n           return result.toString();\n       }\n   }\n   "}
{"task_id": "Java/162", "generation": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        // Check if the input string is empty\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        // Initialize MessageDigest instance for MD5\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        \n        // Compute the MD5 hash\n        byte[] messageDigest = md.digest(text.getBytes());\n        \n        // Convert the byte array to a hexadecimal string\n        BigInteger no = new BigInteger(1, messageDigest);\n        String hashtext = no.toString(16);\n        \n        // Pad the hexadecimal string with leading zeros if necessary\n        while (hashtext.length() < 32) {\n            hashtext = \"0\" + hashtext;\n        }\n        \n        // Return the hexadecimal string wrapped in Optional\n        return Optional.of(hashtext);\n    }\n}\n"}
{"task_id": "Java/163", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> generate_integers(int a, int b) {\n           List<Integer> result = new ArrayList<>();\n           int min = Math.min(a, b);\n           int max = Math.max(a, b);\n           \n           for (int i = min; i <= max; i++) {\n               if (i % 2 == 0 && i < 10) {\n                   result.add(i);\n               }\n           }\n           \n           return result;\n       }\n   }\n   "}
{"task_id": "Java/0", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean has_close_elements(List<Double> numbers, double threshold) {\n           for (int i = 0; i < numbers.size(); i++) {\n               for (int j = i + 1; j < numbers.size(); j++) {\n                   if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                       return true;\n                   }\n               }\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/1", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<String> separate_paren_groups(String paren_string) {\n           List<String> result = new ArrayList<>();\n           StringBuilder currentGroup = new StringBuilder();\n           int balanceCounter = 0;\n\n           for (char ch : paren_string.toCharArray()) {\n               if (ch == ' ') {\n                   continue;\n               }\n               currentGroup.append(ch);\n               if (ch == '(') {\n                   balanceCounter++;\n               } else if (ch == ')') {\n                   balanceCounter--;\n               }\n               if (balanceCounter == 0) {\n                   result.add(currentGroup.toString());\n                   currentGroup.setLength(0); // Reset the current group\n               }\n           }\n\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/2", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public double truncate_number(double number) {\n           double integer_part = Math.floor(number);\n           double decimal_part = number - integer_part;\n           return decimal_part;\n       }\n   }\n   "}
{"task_id": "Java/3", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean below_zero(List<Integer> operations) {\n           int balance = 0;\n           for (int operation : operations) {\n               balance += operation;\n               if (balance < 0) {\n                   return true;\n               }\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/4", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public double mean_absolute_deviation(List<Double> numbers) {\n           // Calculate the mean of the dataset\n           double mean = calculateMean(numbers);\n           \n           // Calculate the sum of absolute differences\n           double sumOfAbsoluteDifferences = 0;\n           for (double number : numbers) {\n               sumOfAbsoluteDifferences += Math.abs(number - mean);\n           }\n           \n           // Calculate the Mean Absolute Deviation\n           double MAD = sumOfAbsoluteDifferences / numbers.size();\n           \n           return MAD;\n       }\n       \n       private double calculateMean(List<Double> numbers) {\n           double sum = 0;\n           for (double number : numbers) {\n               sum += number;\n           }\n           return sum / numbers.size();\n       }\n   }\n   "}
{"task_id": "Java/5", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n           List<Integer> result = new ArrayList<>();\n           \n           for (int i = 0; i < numbers.size() - 1; i++) {\n               result.add(numbers.get(i));\n               result.add(delimiter);\n           }\n           \n           if (!numbers.isEmpty()) {\n               result.add(numbers.get(numbers.size() - 1));\n           }\n           \n           return result;\n       }\n   }\n   "}
{"task_id": "Java/6", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> parse_nested_parens(String paren_string) {\n           List<Integer> result = new ArrayList<>();\n           String[] groups = paren_string.split(\" \");\n           \n           for (String group : groups) {\n               Stack<Character> stack = new Stack<>();\n               int max_depth = 0;\n               int current_depth = 0;\n               \n               for (char ch : group.toCharArray()) {\n                   if (ch == '(') {\n                       stack.push(ch);\n                       current_depth++;\n                   } else if (ch == ')') {\n                       stack.pop();\n                       current_depth--;\n                       if (current_depth > max_depth) {\n                           max_depth = current_depth;\n                       }\n                   }\n               }\n               \n               result.add(max_depth);\n           }\n           \n           return result;\n       }\n   }\n   "}
{"task_id": "Java/7", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                result.add(str);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/8", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> sum_product(List<Integer> numbers) {\n           int sum = 0;\n           int product = 1;\n           \n           for (int number : numbers) {\n               sum += number;\n               product *= number;\n           }\n           \n           // If the list is empty, sum should be 0 and product should be 1\n           if (numbers.isEmpty()) {\n               sum = 0;\n               product = 1;\n           }\n           \n           return Arrays.asList(sum, product);\n       }\n   }\n   "}
{"task_id": "Java/9", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> rolling_max(List<Integer> numbers) {\n           List<Integer> result = new ArrayList<>();\n           if (numbers.isEmpty()) {\n               return result;\n           }\n           \n           int current_max = numbers.get(0);\n           result.add(current_max);\n           \n           for (int i = 1; i < numbers.size(); i++) {\n               int num = numbers.get(i);\n               if (num > current_max) {\n                   current_max = num;\n               }\n               result.add(current_max);\n           }\n           \n           return result;\n       }\n   }\n   "}
{"task_id": "Java/10", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    // Helper method to check if a string is a palindrome\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    // Method to find the shortest palindrome that begins with a supplied string\n    public String make_palindrome(String string) {\n        if (string.isEmpty()) {\n            return \"\";\n        }\n\n        int max_palindrome_length = 0;\n        int n = string.length();\n\n        // Find the longest palindromic suffix\n        for (int i = 0; i < n; i++) {\n            if (isPalindrome(string.substring(i))) {\n                max_palindrome_length = n - i;\n                break;\n            }\n        }\n\n        // Extract the prefix before the longest palindromic suffix\n        String prefix = string.substring(0, n - max_palindrome_length);\n\n        // Reverse the prefix and append it to the end of the string\n        String reversed_prefix = new StringBuilder(prefix).reverse().toString();\n        return string + reversed_prefix;\n    }\n}\n"}
{"task_id": "Java/11", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String string_xor(String a, String b) {\n           StringBuilder result = new StringBuilder();\n           int length = Math.min(a.length(), b.length());\n           for (int i = 0; i < length; i++) {\n               char charA = a.charAt(i);\n               char charB = b.charAt(i);\n               if (charA == '0' && charB == '0') {\n                   result.append('0');\n               } else if (charA == '0' && charB == '1') {\n                   result.append('1');\n               } else if (charA == '1' && charB == '0') {\n                   result.append('1');\n               } else if (charA == '1' && charB == '1') {\n                   result.append('0');\n               }\n           }\n           return result.toString();\n       }\n   }\n   "}
{"task_id": "Java/12", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public Optional<String> longest(List<String> strings) {\n           if (strings.isEmpty()) {\n               return Optional.empty();\n           }\n           String longestString = strings.get(0);\n           for (int i = 1; i < strings.size(); i++) {\n               if (strings.get(i).length() > longestString.length()) {\n                   longestString = strings.get(i);\n               }\n           }\n           return Optional.of(longestString);\n       }\n   }\n   "}
{"task_id": "Java/13", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int greatest_common_divisor(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}\n"}
{"task_id": "Java/14", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<String> all_prefixes(String string) {\n           List<String> prefixes = new ArrayList<>();\n           for (int i = 1; i <= string.length(); i++) {\n               prefixes.add(string.substring(0, i));\n           }\n           return prefixes;\n       }\n   }\n   "}
{"task_id": "Java/15", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String string_sequence(int n) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            result.append(i).append(\" \");\n        }\n        return result.toString().trim();\n    }\n}\n"}
{"task_id": "Java/16", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int count_distinct_characters(String string) {\n           Set<Character> distinctChars = new HashSet<>();\n           String lowerCaseString = string.toLowerCase();\n           for (char c : lowerCaseString.toCharArray()) {\n               distinctChars.add(c);\n           }\n           return distinctChars.size();\n       }\n   }\n   "}
{"task_id": "Java/17", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> parse_music(String string) {\n           List<Integer> beats = new ArrayList<>();\n           String[] notes = string.split(\" \");\n           \n           for (String note : notes) {\n               if (note.equals(\"o\")) {\n                   beats.add(4);\n               } else if (note.equals(\"o|\")) {\n                   beats.add(2);\n               } else if (note.equals(\".|\")) {\n                   beats.add(1);\n               }\n           }\n           \n           return beats;\n       }\n   }\n   "}
{"task_id": "Java/18", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int how_many_times(String string, String substring) {\n        // If either the string or the substring is empty, return 0\n        if (string.isEmpty() || substring.isEmpty()) {\n            return 0;\n        }\n\n        int count = 0;\n        int subLength = substring.length();\n\n        // Iterate through the string\n        for (int i = 0; i <= string.length() - subLength; i++) {\n            // Check if the substring matches starting from position i\n            if (string.substring(i, i + subLength).equals(substring)) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n}\n"}
{"task_id": "Java/19", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String sort_numbers(String numbers) {\n           // Map to associate number words with their numerical values\n           Map<String, Integer> numberMap = new HashMap<>();\n           numberMap.put(\"zero\", 0);\n           numberMap.put(\"one\", 1);\n           numberMap.put(\"two\", 2);\n           numberMap.put(\"three\", 3);\n           numberMap.put(\"four\", 4);\n           numberMap.put(\"five\", 5);\n           numberMap.put(\"six\", 6);\n           numberMap.put(\"seven\", 7);\n           numberMap.put(\"eight\", 8);\n           numberMap.put(\"nine\", 9);\n\n           // Split the input string into an array of number words\n           String[] numberWords = numbers.split(\" \");\n\n           // Sort the array of number words using the map for comparison\n           Arrays.sort(numberWords, (a, b) -> numberMap.get(a) - numberMap.get(b));\n\n           // Join the sorted array back into a single string\n           return String.join(\" \", numberWords);\n       }\n   }\n   "}
{"task_id": "Java/20", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Double> find_closest_elements(List<Double> numbers) {\n           List<Double> closest_pair = new ArrayList<>();\n           closest_pair.add(numbers.get(0));\n           closest_pair.add(numbers.get(1));\n           double distance = Math.abs(numbers.get(1) - numbers.get(0));\n\n           for (int i = 0; i < numbers.size(); i++) {\n               for (int j = i + 1; j < numbers.size(); j++) {\n                   double current_distance = Math.abs(numbers.get(i) - numbers.get(j));\n                   if (current_distance < distance) {\n                       distance = current_distance;\n                       closest_pair.clear();\n                       closest_pair.add(numbers.get(i));\n                       closest_pair.add(numbers.get(j));\n                   }\n               }\n           }\n\n           Collections.sort(closest_pair);\n           return closest_pair;\n       }\n   }\n   "}
{"task_id": "Java/21", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Double> rescale_to_unit(List<Double> numbers) {\n           // Find the minimum and maximum values in the list\n           double min_value = Collections.min(numbers);\n           double max_value = Collections.max(numbers);\n           \n           // Create a new list to store the transformed values\n           List<Double> transformed_numbers = new ArrayList<>();\n           \n           // Apply the linear transformation to each number\n           for (double number : numbers) {\n               double transformed_value = (number - min_value) / (max_value - min_value);\n               transformed_numbers.add(transformed_value);\n           }\n           \n           // Return the transformed list\n           return transformed_numbers;\n       }\n   }\n   "}
{"task_id": "Java/22", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> filter_integers(List<Object> values) {\n           List<Integer> integers = new ArrayList<>();\n           for (Object value : values) {\n               if (value instanceof Integer) {\n                   integers.add((Integer) value);\n               }\n           }\n           return integers;\n       }\n   }\n   "}
{"task_id": "Java/23", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int strlen(String string) {\n        return string.length();\n    }\n}\n"}
{"task_id": "Java/24", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int largest_divisor(int n) {\n           if (n == 1) {\n               return 1;\n           }\n           for (int i = n / 2; i > 0; i--) {\n               if (n % i == 0) {\n                   return i;\n               }\n           }\n           return 1; // This line should never be reached\n       }\n   }\n   "}
{"task_id": "Java/25", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int divisor = 2;\n        \n        while (n > 1) {\n            while (n % divisor == 0) {\n                factors.add(divisor);\n                n /= divisor;\n            }\n            divisor++;\n        }\n        \n        return factors;\n    }\n}\n"}
{"task_id": "Java/26", "generation": "   import java.util.*;\n   import java.lang.*;\n   import java.util.stream.Collectors;\n\n   class Solution {\n       public List<Integer> remove_duplicates(List<Integer> numbers) {\n           Set<Integer> seen = new HashSet<>();\n           List<Integer> result = new ArrayList<>();\n           \n           for (Integer num : numbers) {\n               if (!seen.contains(num)) {\n                   result.add(num);\n                   seen.add(num);\n               }\n           }\n           \n           return result;\n       }\n   }\n   "}
{"task_id": "Java/27", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String flip_case(String string) {\n           StringBuilder result = new StringBuilder();\n           for (char c : string.toCharArray()) {\n               if (Character.isLowerCase(c)) {\n                   result.append(Character.toUpperCase(c));\n               } else if (Character.isUpperCase(c)) {\n                   result.append(Character.toLowerCase(c));\n               } else {\n                   result.append(c); // If it's neither, just append as is\n               }\n           }\n           return result.toString();\n       }\n   }\n   "}
{"task_id": "Java/28", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String concatenate(List<String> strings) {\n        // Initialize an empty result string\n        StringBuilder result = new StringBuilder();\n        \n        // Iterate through each string in the list\n        for (String str : strings) {\n            // Append each string to the result string\n            result.append(str);\n        }\n        \n        // Return the result string\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/29", "generation": "   import java.util.*;\n   import java.util.stream.Collectors;\n\n   class Solution {\n       public List<String> filter_by_prefix(List<String> strings, String prefix) {\n           return strings.stream()\n                         .filter(s -> s.startsWith(prefix))\n                         .collect(Collectors.toList());\n       }\n   }\n   "}
{"task_id": "Java/30", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> get_positive(List<Integer> l) {\n        // Convert the list to a stream and filter out non-positive numbers\n        return l.stream()\n                .filter(num -> num > 0)  // Keep only positive numbers\n                .collect(Collectors.toList());  // Collect the results into a list\n    }\n}\n"}
{"task_id": "Java/31", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_prime(int n) {\n        // Special case: numbers less than 2 are not prime\n        if (n < 2) {\n            return false;\n        }\n        \n        // Check divisibility from 2 to the square root of n\n        int sqrt_n = (int) Math.sqrt(n);\n        for (int i = 2; i <= sqrt_n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        \n        // If no divisors found, n is prime\n        return true;\n    }\n}\n"}
{"task_id": "Java/32", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    // Evaluates polynomial with coefficients xs at point x.\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n\n    // Finds a zero of the polynomial defined by coefficients xs.\n    public double find_zero(List<Double> xs) {\n        // Initial interval [a, b]\n        double a = -100.0; // Start with a large negative number\n        double b = 100.0;  // Start with a large positive number\n        double tolerance = 1e-7; // Tolerance for convergence\n\n        while (b - a > tolerance) {\n            double c = (a + b) / 2;\n            double fc = poly(xs, c);\n\n            if (Math.abs(fc) < tolerance) {\n                return c; // Found a zero\n            }\n\n            double fa = poly(xs, a);\n            double fb = poly(xs, b);\n\n            if (fa * fc < 0) {\n                b = c; // Root is in the left half\n            } else {\n                a = c; // Root is in the right half\n            }\n        }\n\n        return (a + b) / 2; // Return the midpoint of the final interval\n    }\n}\n"}
{"task_id": "Java/33", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> sort_third(List<Integer> l) {\n           List<Integer> sorted_values = new ArrayList<>();\n           for (int i = 0; i < l.size(); i++) {\n               if (i % 3 == 0) {\n                   sorted_values.add(l.get(i));\n               }\n           }\n           Collections.sort(sorted_values);\n           int sortedIndex = 0;\n           for (int i = 0; i < l.size(); i++) {\n               if (i % 3 == 0) {\n                   l.set(i, sorted_values.get(sortedIndex));\n                   sortedIndex++;\n               }\n           }\n           return l;\n       }\n   }\n   "}
{"task_id": "Java/34", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> unique(List<Integer> l) {\n        // Step 1: Initialize a Set to store unique elements\n        Set<Integer> uniqueSet = new HashSet<>();\n        \n        // Step 2: Iterate through the input list and add elements to the Set\n        for (Integer num : l) {\n            uniqueSet.add(num);\n        }\n        \n        // Step 3: Convert the Set to a List\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n        \n        // Step 4: Sort the List\n        Collections.sort(uniqueList);\n        \n        // Step 5: Return the sorted List\n        return uniqueList;\n    }\n}\n"}
{"task_id": "Java/35", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int max_element(List<Integer> l) {\n           int max_value = l.get(0);\n           for (int i = 1; i < l.size(); i++) {\n               if (l.get(i) > max_value) {\n                   max_value = l.get(i);\n               }\n           }\n           return max_value;\n       }\n   }\n   "}
{"task_id": "Java/36", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int fizz_buzz(int n) {\n           int count = 0;\n           for (int i = 0; i < n; i++) {\n               if (i % 11 == 0 || i % 13 == 0) {\n                   String numStr = Integer.toString(i);\n                   for (char c : numStr.toCharArray()) {\n                       if (c == '7') {\n                           count++;\n                       }\n                   }\n               }\n           }\n           return count;\n       }\n   }\n   "}
{"task_id": "Java/37", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> sort_even(List<Integer> l) {\n           List<Integer> lPrime = new ArrayList<>();\n           List<Integer> evenValues = new ArrayList<>();\n           \n           // Extract even indexed values\n           for (int i = 0; i < l.size(); i += 2) {\n               evenValues.add(l.get(i));\n           }\n           \n           // Sort the even indexed values\n           Collections.sort(evenValues);\n           \n           // Reconstruct the new list\n           int evenIndex = 0;\n           for (int i = 0; i < l.size(); i++) {\n               if (i % 2 == 0) {\n                   lPrime.add(evenValues.get(evenIndex++));\n               } else {\n                   lPrime.add(l.get(i));\n               }\n           }\n           \n           return lPrime;\n       }\n   }\n   "}
{"task_id": "Java/38", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public String decode_cyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse the cycling in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n"}
{"task_id": "Java/39", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int prime_fib(int n) {\n           if (n <= 0) {\n               return -1; // Invalid input\n           }\n           int count = 0;\n           int a = 0, b = 1;\n           while (count < n) {\n               int next_fib = a + b;\n               a = b;\n               b = next_fib;\n               if (is_prime(next_fib)) {\n                   count++;\n               }\n           }\n           return b;\n       }\n\n       private boolean is_prime(int num) {\n           if (num <= 1) {\n               return false;\n           }\n           for (int i = 2; i <= Math.sqrt(num); i++) {\n               if (num % i == 0) {\n                   return false;\n               }\n           }\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/40", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean triples_sum_to_zero(List<Integer> l) {\n           if (l.size() < 3) {\n               return false;\n           }\n           Collections.sort(l);\n           for (int i = 0; i < l.size() - 2; i++) {\n               int left = i + 1;\n               int right = l.size() - 1;\n               while (left < right) {\n                   int sum = l.get(i) + l.get(left) + l.get(right);\n                   if (sum == 0) {\n                       return true;\n                   }\n                   if (sum < 0) {\n                       left++;\n                   } else {\n                       right--;\n                   }\n               }\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/41", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int car_race_collision(int n) {\n        // The number of collisions is simply n * n\n        return n * n;\n    }\n}\n"}
{"task_id": "Java/42", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> incr_list(List<Integer> l) {\n        // Using Java Streams for a functional approach\n        return l.stream()\n                .map(num -> num + 1)  // Increment each element by 1\n                .collect(Collectors.toList());  // Collect the results into a new list\n    }\n}\n"}
{"task_id": "Java/43", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean pairs_sum_to_zero(List<Integer> l) {\n           Set<Integer> seenNumbers = new HashSet<>();\n           for (int number : l) {\n               if (seenNumbers.contains(-number)) {\n                   return true;\n               }\n               seenNumbers.add(number);\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/44", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String change_base(int x, int base) {\n        if (x == 0) {\n            return \"0\";\n        }\n        \n        StringBuilder result = new StringBuilder();\n        \n        while (x > 0) {\n            int remainder = x % base;\n            result.insert(0, remainder);\n            x = x / base;\n        }\n        \n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/45", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangle_area(double a, double h) {\n        // Calculate the area using the formula (base * height) / 2\n        double area = (a * h) / 2;\n        // Return the calculated area\n        return area;\n    }\n}\n"}
{"task_id": "Java/46", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib4(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Input must be non-negative\");\n        }\n        if (n == 0 || n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 0;\n        }\n\n        int[] fib4_values = {0, 0, 2, 0};\n\n        for (int i = 4; i <= n; i++) {\n            int next_value = fib4_values[0] + fib4_values[1] + fib4_values[2] + fib4_values[3];\n            fib4_values[i % 4] = next_value;\n        }\n\n        return fib4_values[n % 4];\n    }\n}\n"}
{"task_id": "Java/47", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public double median(List<Integer> l) {\n           Collections.sort(l);\n           int n = l.size();\n           if (n % 2 != 0) {\n               return l.get(n / 2);\n           } else {\n               return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n           }\n       }\n   }\n   "}
{"task_id": "Java/48", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean is_palindrome(String text) {\n           int left = 0;\n           int right = text.length() - 1;\n           while (left < right) {\n               if (text.charAt(left) != text.charAt(right)) {\n                   return false;\n               }\n               left++;\n               right--;\n           }\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/49", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int modp(int n, int p) {\n           if (n == 0) {\n               return 1;\n           }\n           if (p == 1) {\n               return 0;\n           }\n           \n           int result = 1;\n           int base = 2;\n           \n           while (n > 0) {\n               if (n % 2 == 1) {\n                   result = (result * base) % p;\n               }\n               base = (base * base) % p;\n               n = n / 2;\n           }\n           \n           return result;\n       }\n   }\n   "}
{"task_id": "Java/50", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public String decode_shift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            // Calculate the original character by shifting back by 5 positions\n            char originalChar = (char) ('a' + ((ch - 5 - 'a' + 26) % 26));\n            sb.append(originalChar);\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/51", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String remove_vowels(String text) {\n           StringBuilder result = new StringBuilder();\n           Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n           \n           for (char ch : text.toCharArray()) {\n               if (!vowels.contains(ch)) {\n                   result.append(ch);\n               }\n           }\n           \n           return result.toString();\n       }\n   }\n   "}
{"task_id": "Java/52", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean below_threshold(List<Integer> l, int t) {\n           for (int number : l) {\n               if (number >= t) {\n                   return false;\n               }\n           }\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/53", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}\n"}
{"task_id": "Java/54", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean same_chars(String s0, String s1) {\n           if (s0.length() != s1.length()) {\n               return false;\n           }\n           \n           Map<Character, Integer> freqMap0 = new HashMap<>();\n           Map<Character, Integer> freqMap1 = new HashMap<>();\n           \n           for (char c : s0.toCharArray()) {\n               freqMap0.put(c, freqMap0.getOrDefault(c, 0) + 1);\n           }\n           \n           for (char c : s1.toCharArray()) {\n               freqMap1.put(c, freqMap1.getOrDefault(c, 0) + 1);\n           }\n           \n           return freqMap0.equals(freqMap1);\n       }\n   }\n   "}
{"task_id": "Java/55", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n\n        int a = 0; // F(0)\n        int b = 1; // F(1)\n        int result = 0;\n\n        for (int i = 2; i <= n; i++) {\n            result = a + b;\n            a = b;\n            b = result;\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/56", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean correct_bracketing(String brackets) {\n           Stack<Character> stack = new Stack<>();\n           for (char ch : brackets.toCharArray()) {\n               if (ch == '<') {\n                   stack.push(ch);\n               } else if (ch == '>') {\n                   if (stack.isEmpty() || stack.pop() != '<') {\n                       return false;\n                   }\n               }\n           }\n           return stack.isEmpty();\n       }\n   }\n   "}
{"task_id": "Java/57", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean monotonic(List<Integer> l) {\n           if (l.size() <= 1) {\n               return true;\n           }\n           \n           boolean increasing = true;\n           boolean decreasing = true;\n           \n           for (int i = 0; i < l.size() - 1; i++) {\n               if (l.get(i) > l.get(i + 1)) {\n                   increasing = false;\n               }\n               if (l.get(i) < l.get(i + 1)) {\n                   decreasing = false;\n               }\n               \n               if (!increasing && !decreasing) {\n                   return false;\n               }\n           }\n           \n           return true;\n       }\n   }\n   "}
{"task_id": "Java/58", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n           Set<Integer> set = new HashSet<>(l1);\n           List<Integer> result = new ArrayList<>();\n           \n           for (Integer num : l2) {\n               if (set.contains(num)) {\n                   result.add(num);\n                   set.remove(num); // Ensure uniqueness\n               }\n           }\n           \n           Collections.sort(result);\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/59", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int largest_prime_factor(int n) {\n           int largest_prime = 2;\n           int current_divisor = 2;\n           \n           while (n > 1) {\n               while (n % current_divisor == 0) {\n                   largest_prime = current_divisor;\n                   n = n / current_divisor;\n               }\n               current_divisor++;\n           }\n           \n           return largest_prime;\n       }\n   }\n   "}
{"task_id": "Java/60", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_to_n(int n) {\n        // Using the formula to calculate the sum of first n natural numbers\n        return n * (n + 1) / 2;\n    }\n}\n"}
{"task_id": "Java/61", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correct_bracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char ch : brackets.toCharArray()) {\n            if (ch == '(') {\n                stack.push(ch);\n            } else if (ch == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/62", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> derivative(List<Integer> xs) {\n           List<Integer> derivativeCoefficients = new ArrayList<>();\n           \n           // Start from the second coefficient (index 1)\n           for (int i = 1; i < xs.size(); i++) {\n               derivativeCoefficients.add(i * xs.get(i));\n           }\n           \n           return derivativeCoefficients;\n       }\n   }\n   "}
{"task_id": "Java/63", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fibfib(int n) {\n        // Base cases\n        if (n == 0 || n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n\n        // Initialize the first three FibFib numbers\n        int a = 0, b = 0, c = 1;\n        int result = 0;\n\n        // Compute the n-th FibFib number iteratively\n        for (int i = 3; i <= n; i++) {\n            result = a + b + c;\n            a = b;\n            b = c;\n            c = result;\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/64", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int vowels_count(String s) {\n           int count = 0;\n           s = s.toLowerCase(); // Convert to lowercase for case insensitivity\n           int length = s.length();\n\n           for (int i = 0; i < length; i++) {\n               char ch = s.charAt(i);\n               if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n                   count++;\n               } else if (ch == 'y' && i == length - 1) { // Check if 'y' is at the end\n                   count++;\n               }\n           }\n           return count;\n       }\n   }\n   "}
{"task_id": "Java/65", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String circular_shift(int x, int shift) {\n           String str_x = Integer.toString(x);\n           int num_digits = str_x.length();\n           \n           if (shift > num_digits) {\n               // Reverse the string\n               return new StringBuilder(str_x).reverse().toString();\n           } else {\n               // Calculate effective shift\n               shift = shift % num_digits;\n               \n               // Split the string into two parts\n               String part1 = str_x.substring(num_digits - shift);\n               String part2 = str_x.substring(0, num_digits - shift);\n               \n               // Concatenate part1 and part2\n               return part1 + part2;\n           }\n       }\n   }\n   "}
{"task_id": "Java/66", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int digitSum(String s) {\n           int sum = 0;\n           for (char c : s.toCharArray()) {\n               if (Character.isUpperCase(c)) {\n                   sum += (int) c;\n               }\n           }\n           return sum;\n       }\n   }\n   "}
{"task_id": "Java/67", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruit_distribution(String s, int n) {\n        // Split the string by spaces\n        String[] parts = s.split(\" \");\n        \n        // Initialize variables to store the number of apples and oranges\n        int apples = 0;\n        int oranges = 0;\n        \n        // Iterate through the parts to find the numbers\n        for (int i = 0; i < parts.length; i++) {\n            if (parts[i].equals(\"apples\")) {\n                apples = Integer.parseInt(parts[i - 1]);\n            } else if (parts[i].equals(\"oranges\")) {\n                oranges = Integer.parseInt(parts[i - 1]);\n            }\n        }\n        \n        // Calculate the number of mangoes\n        int mangoes = n - apples - oranges;\n        \n        // Return the result\n        return mangoes;\n    }\n}\n"}
{"task_id": "Java/68", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> pluck(List<Integer> arr) {\n           int smallestEvenValue = Integer.MAX_VALUE;\n           int smallestIndex = -1;\n\n           for (int i = 0; i < arr.size(); i++) {\n               int currentValue = arr.get(i);\n               if (currentValue % 2 == 0 && currentValue < smallestEvenValue) {\n                   smallestEvenValue = currentValue;\n                   smallestIndex = i;\n               }\n           }\n\n           if (smallestEvenValue == Integer.MAX_VALUE) {\n               return new ArrayList<>();\n           } else {\n               return Arrays.asList(smallestEvenValue, smallestIndex);\n           }\n       }\n   }\n   "}
{"task_id": "Java/69", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int search(List<Integer> lst) {\n        // Step 1: Create a HashMap to store the frequency of each integer\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        // Step 2: Populate the HashMap\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        // Step 3: Initialize the result to -1 (default if no such integer is found)\n        int result = -1;\n        \n        // Step 4: Iterate through the HashMap to find the greatest integer that meets the criteria\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int num = entry.getKey();\n            int freq = entry.getValue();\n            if (freq >= num && num > result) {\n                result = num;\n            }\n        }\n        \n        // Step 5: Return the result\n        return result;\n    }\n}\n"}
{"task_id": "Java/70", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> strange_sort_list(List<Integer> lst) {\n           if (lst.isEmpty()) {\n               return new ArrayList<>();\n           }\n           \n           Collections.sort(lst);\n           List<Integer> result = new ArrayList<>();\n           int start = 0;\n           int end = lst.size() - 1;\n           boolean toggle = true;\n           \n           while (start <= end) {\n               if (toggle) {\n                   result.add(lst.get(start));\n                   start++;\n               } else {\n                   result.add(lst.get(end));\n                   end--;\n               }\n               toggle = !toggle;\n           }\n           \n           return result;\n       }\n   }\n   "}
{"task_id": "Java/71", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public double triangle_area(double a, double b, double c) {\n           if (!is_valid_triangle(a, b, c)) {\n               return -1;\n           }\n           double s = (a + b + c) / 2;\n           double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n           return Math.round(area * 100.0) / 100.0;\n       }\n\n       private boolean is_valid_triangle(double a, double b, double c) {\n           return a + b > c && a + c > b && b + c > a;\n       }\n   }\n   "}
{"task_id": "Java/72", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean will_it_fly(List<Integer> q, int w) {\n        // Check if the list is a palindrome\n        List<Integer> reversedQ = new ArrayList<>(q);\n        Collections.reverse(reversedQ);\n        if (!q.equals(reversedQ)) {\n            return false;\n        }\n\n        // Calculate the sum of the elements in the list\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n\n        // Check if the sum is less than or equal to the maximum possible weight\n        return sum <= w;\n    }\n}\n"}
{"task_id": "Java/73", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int smallest_change(List<Integer> arr) {\n           int changes = 0;\n           int left = 0;\n           int right = arr.size() - 1;\n\n           while (left < right) {\n               if (!arr.get(left).equals(arr.get(right))) {\n                   changes++;\n               }\n               left++;\n               right--;\n           }\n\n           return changes;\n       }\n   }\n   "}
{"task_id": "Java/74", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<String> total_match(List<String> lst1, List<String> lst2) {\n           int total_chars_lst1 = 0;\n           int total_chars_lst2 = 0;\n           \n           // Calculate total characters in lst1\n           for (String str : lst1) {\n               total_chars_lst1 += str.length();\n           }\n           \n           // Calculate total characters in lst2\n           for (String str : lst2) {\n               total_chars_lst2 += str.length();\n           }\n           \n           // Compare and return the appropriate list\n           if (total_chars_lst1 <= total_chars_lst2) {\n               return lst1;\n           } else {\n               return lst2;\n           }\n       }\n   }\n   "}
{"task_id": "Java/75", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_multiply_prime(int a) {\n        List<Integer> primes = generate_primes_less_than_100();\n        for (int i = 0; i < primes.size(); i++) {\n            for (int j = i; j < primes.size(); j++) {\n                for (int k = j; k < primes.size(); k++) {\n                    if (primes.get(i) * primes.get(j) * primes.get(k) == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    private List<Integer> generate_primes_less_than_100() {\n        List<Integer> primes = new ArrayList<>();\n        for (int number = 2; number < 100; number++) {\n            if (is_prime(number)) {\n                primes.add(number);\n            }\n        }\n        return primes;\n    }\n\n    private boolean is_prime(int number) {\n        if (number < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(number); i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/76", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_simple_power(int x, int n) {\n        if (n == 1) {\n            return x == 1;\n        }\n        if (x == 1) {\n            return n != 0;\n        }\n        int power = 1;\n        while (power < x) {\n            power *= n;\n            if (power == x) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/77", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean iscube(int a) {\n        // Handle the special case where a is 0\n        if (a == 0) return true;\n\n        // Determine the absolute value of a to handle negative numbers\n        int absA = Math.abs(a);\n\n        // Iterate through possible values of n\n        for (int n = 0; n * n * n <= absA; n++) {\n            if (n * n * n == absA) {\n                // If a is negative, ensure n is also negative\n                if (a < 0) {\n                    return n != 0; // n must be negative if a is negative\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/78", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int hex_key(String num) {\n           // Set of prime hexadecimal digits in decimal form\n           Set<Integer> primeHexDigits = new HashSet<>(Arrays.asList(2, 3, 5, 7, 11, 13));\n           \n           // Counter for prime digits\n           int count = 0;\n           \n           // Iterate through each character in the input string\n           for (char c : num.toCharArray()) {\n               int decimalValue;\n               if (Character.isDigit(c)) {\n                   decimalValue = c - '0';\n               } else {\n                   decimalValue = 10 + (c - 'A');\n               }\n               \n               // Check if the decimal value is a prime hexadecimal digit\n               if (primeHexDigits.contains(decimalValue)) {\n                   count++;\n               }\n           }\n           \n           return count;\n       }\n   }\n   "}
{"task_id": "Java/79", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String decimal_to_binary(int decimal) {\n        // Convert the decimal number to a binary string\n        String binaryString = Integer.toBinaryString(decimal);\n        \n        // Format the binary string by adding 'db' at the beginning and end\n        String formattedBinaryString = \"db\" + binaryString + \"db\";\n        \n        // Return the formatted string\n        return formattedBinaryString;\n    }\n}\n"}
{"task_id": "Java/80", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean is_happy(String s) {\n           // Check if the length of the string is less than 3\n           if (s.length() < 3) {\n               return false;\n           }\n           \n           // Iterate through the string and check every set of 3 consecutive characters\n           for (int i = 0; i <= s.length() - 3; i++) {\n               char first = s.charAt(i);\n               char second = s.charAt(i + 1);\n               char third = s.charAt(i + 2);\n               \n               // Check if any of the 3 consecutive characters are the same\n               if (first == second || first == third || second == third) {\n                   return false;\n               }\n           }\n           \n           // If all sets of 3 consecutive characters are distinct, return true\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/81", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        \n        for (Double gpa : grades) {\n            if (gpa == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        \n        return letterGrades;\n    }\n}\n"}
{"task_id": "Java/82", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean prime_length(String string) {\n           int length = string.length();\n           if (length <= 1) {\n               return false;\n           }\n           for (int i = 2; i <= Math.sqrt(length); i++) {\n               if (length % i == 0) {\n                   return false;\n               }\n           }\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/83", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int starts_one_ends(int n) {\n        if (n == 1) {\n            return 1; // Only the number '1'\n        }\n        \n        // Count of numbers starting with '1'\n        int startWithOne = (int) Math.pow(10, n - 1);\n        \n        // Count of numbers ending with '1'\n        int endWithOne = 9 * (int) Math.pow(10, n - 2);\n        \n        // Total count\n        return startWithOne + endWithOne;\n    }\n}\n"}
{"task_id": "Java/84", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(int N) {\n        // Step 1: Calculate the sum of digits of N\n        int sum = 0;\n        while (N > 0) {\n            sum += N % 10;  // Add the last digit to sum\n            N /= 10;        // Remove the last digit from N\n        }\n        \n        // Step 2: Convert the sum to a binary string\n        String binarySum = Integer.toBinaryString(sum);\n        \n        // Step 3: Return the binary string\n        return binarySum;\n    }\n}\n"}
{"task_id": "Java/85", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int add(List<Integer> lst) {\n           int sum = 0;\n           for (int i = 0; i < lst.size(); i++) {\n               if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                   sum += lst.get(i);\n               }\n           }\n           return sum;\n       }\n   }\n   "}
{"task_id": "Java/86", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String anti_shuffle(String s) {\n           // Split the string into words\n           String[] words = s.split(\" \");\n           \n           // Process each word\n           for (int i = 0; i < words.length; i++) {\n               char[] chars = words[i].toCharArray();\n               Arrays.sort(chars);\n               words[i] = new String(chars);\n           }\n           \n           // Join the sorted words back into a single string\n           return String.join(\" \", words);\n       }\n   }\n   "}
{"task_id": "Java/87", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n           List<List<Integer>> coordinates = new ArrayList<>();\n           \n           // Iterate through each row and each element in the row\n           for (int i = 0; i < lst.size(); i++) {\n               List<Integer> row = lst.get(i);\n               for (int j = 0; j < row.size(); j++) {\n                   if (row.get(j) == x) {\n                       coordinates.add(Arrays.asList(i, j));\n                   }\n               }\n           }\n           \n           // Sort the coordinates list\n           coordinates.sort((a, b) -> {\n               int rowComparison = a.get(0).compareTo(b.get(0));\n               if (rowComparison != 0) {\n                   return rowComparison;\n               } else {\n                   return b.get(1).compareTo(a.get(1));\n               }\n           });\n           \n           return coordinates;\n       }\n   }\n   "}
{"task_id": "Java/88", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> sort_array(List<Integer> array) {\n           if (array.isEmpty()) {\n               return new ArrayList<>();\n           }\n           \n           int first = array.get(0);\n           int last = array.get(array.size() - 1);\n           int sum = first + last;\n           boolean isOdd = sum % 2 != 0;\n           \n           List<Integer> copy = new ArrayList<>(array);\n           \n           if (isOdd) {\n               Collections.sort(copy);\n           } else {\n               Collections.sort(copy, Collections.reverseOrder());\n           }\n           \n           return copy;\n       }\n   }\n   "}
{"task_id": "Java/89", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String encrypt(String s) {\n           StringBuilder result = new StringBuilder();\n           for (char c : s.toCharArray()) {\n               char new_char = (char) (c + 4);\n               if (new_char > 'z') {\n                   new_char = (char) (new_char - 26);\n               }\n               result.append(new_char);\n           }\n           return result.toString();\n       }\n   }\n   "}
{"task_id": "Java/90", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public Optional<Integer> next_smallest(List<Integer> lst) {\n           if (lst.size() < 2) {\n               return Optional.empty();\n           }\n           \n           Collections.sort(lst);\n           int smallest = lst.get(0);\n           Integer second_smallest = null;\n           \n           for (int i = 1; i < lst.size(); i++) {\n               if (lst.get(i) != smallest) {\n                   second_smallest = lst.get(i);\n                   break;\n               }\n           }\n           \n           if (second_smallest == null) {\n               return Optional.empty();\n           } else {\n               return Optional.of(second_smallest);\n           }\n       }\n   }\n   "}
{"task_id": "Java/91", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int is_bored(String S) {\n           int boredomCount = 0;\n           String[] sentences = S.split(\"[.!?]\");\n           for (String sentence : sentences) {\n               sentence = sentence.trim();\n               if (sentence.startsWith(\"I\")) {\n                   boredomCount++;\n               }\n           }\n           return boredomCount;\n       }\n   }\n   "}
{"task_id": "Java/92", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean any_int(Object x, Object y, Object z) {\n           // Check if all three objects are instances of Integer\n           if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n               // Convert objects to integers\n               int intX = (Integer) x;\n               int intY = (Integer) y;\n               int intZ = (Integer) z;\n               \n               // Check if any one of the integers is equal to the sum of the other two\n               if (intX == intY + intZ || intY == intX + intZ || intZ == intX + intY) {\n                   return true;\n               }\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/93", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String encode(String message) {\n           StringBuilder encodedMessage = new StringBuilder();\n           Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n           Map<Character, Character> vowelReplacement = new HashMap<Character, Character>() {{\n               put('a', 'c'); put('e', 'g'); put('i', 'k'); put('o', 'q'); put('u', 'w');\n               put('A', 'C'); put('E', 'G'); put('I', 'K'); put('O', 'Q'); put('U', 'W');\n           }};\n\n           for (char ch : message.toCharArray()) {\n               if (vowels.contains(ch)) {\n                   encodedMessage.append(vowelReplacement.get(ch));\n               } else {\n                   if (Character.isUpperCase(ch)) {\n                       encodedMessage.append(Character.toLowerCase(ch));\n                   } else {\n                       encodedMessage.append(Character.toUpperCase(ch));\n                   }\n               }\n           }\n\n           return encodedMessage.toString();\n       }\n   }\n   "}
{"task_id": "Java/94", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean isPrime(int number) {\n           if (number <= 1) {\n               return false;\n           }\n           for (int i = 2; i <= Math.sqrt(number); i++) {\n               if (number % i == 0) {\n                   return false;\n               }\n           }\n           return true;\n       }\n\n       public int sumOfDigits(int number) {\n           int sum = 0;\n           while (number > 0) {\n               sum += number % 10;\n               number /= 10;\n           }\n           return sum;\n       }\n\n       public int skjkasdkd(List<Integer> lst) {\n           int largestPrime = -1;\n           for (int number : lst) {\n               if (isPrime(number) && number > largestPrime) {\n                   largestPrime = number;\n               }\n           }\n           if (largestPrime == -1) {\n               return 0;\n           }\n           return sumOfDigits(largestPrime);\n       }\n   }\n   "}
{"task_id": "Java/95", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean check_dict_case(Map<Object, Object> dict) {\n           if (dict.isEmpty()) {\n               return false;\n           }\n           for (Object key : dict.keySet()) {\n               if (!(key instanceof String)) {\n                   return false;\n               }\n               String strKey = (String) key;\n               if (!strKey.equals(strKey.toLowerCase()) && !strKey.equals(strKey.toUpperCase())) {\n                   return false;\n               }\n           }\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/96", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<>();\n        if (n < 2) {\n            return primes;\n        }\n\n        boolean[] isPrime = new boolean[n];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = isPrime[1] = false; // 0 and 1 are not prime numbers\n\n        for (int i = 2; i * i < n; i++) {\n            if (isPrime[i]) {\n                for (int j = i * i; j < n; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n\n        for (int i = 2; i < n; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n            }\n        }\n\n        return primes;\n    }\n}\n"}
{"task_id": "Java/97", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int multiply(int a, int b) {\n           int unit_digit_a = Math.abs(a) % 10;\n           int unit_digit_b = Math.abs(b) % 10;\n           return unit_digit_a * unit_digit_b;\n       }\n   }\n   "}
{"task_id": "Java/98", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char ch = s.charAt(i);\n            if (ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/99", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int closest_integer(String value) {\n           double number = Double.parseDouble(value);\n           double fractionalPart = number - Math.floor(number);\n           \n           if (fractionalPart == 0.5) {\n               if (number > 0) {\n                   return (int) Math.ceil(number);\n               } else {\n                   return (int) Math.floor(number);\n               }\n           } else {\n               return (int) Math.round(number);\n           }\n       }\n   }\n   "}
{"task_id": "Java/100", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> make_a_pile(int n) {\n           List<Integer> pile = new ArrayList<>();\n           int currentStones = n;\n           for (int i = 0; i < n; i++) {\n               pile.add(currentStones);\n               currentStones += 2; // Next level always has 2 more stones\n           }\n           return pile;\n       }\n   }\n   "}
{"task_id": "Java/101", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> words_string(String s) {\n        // Define the regular expression pattern to match both commas and spaces\n        String pattern = \"[,\\\\s]+\";\n        \n        // Split the string using the pattern\n        String[] wordsArray = s.split(pattern);\n        \n        // Convert the array to a list\n        List<String> wordsList = Arrays.asList(wordsArray);\n        \n        // Return the list of words\n        return wordsList;\n    }\n}\n"}
{"task_id": "Java/102", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int choose_num(int x, int y) {\n           // Ensure x is less than or equal to y\n           if (x > y) {\n               return -1;\n           }\n           \n           // Iterate from y to x (inclusive)\n           for (int i = y; i >= x; i--) {\n               // Check if the number is even\n               if (i % 2 == 0) {\n                   return i;\n               }\n           }\n           \n           // If no even number is found, return -1\n           return -1;\n       }\n   }\n   "}
{"task_id": "Java/103", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public Object rounded_avg(int n, int m) {\n           if (n > m) {\n               return -1;\n           }\n           \n           int sum = 0;\n           int count = m - n + 1;\n           \n           for (int i = n; i <= m; i++) {\n               sum += i;\n           }\n           \n           double average = (double) sum / count;\n           int rounded_average = (int) Math.round(average);\n           String binary_representation = Integer.toBinaryString(rounded_average);\n           \n           return binary_representation;\n       }\n   }\n   "}
{"task_id": "Java/104", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> unique_digits(List<Integer> x) {\n           List<Integer> result = new ArrayList<>();\n           \n           for (int num : x) {\n               if (!containsEvenDigit(num)) {\n                   result.add(num);\n               }\n           }\n           \n           Collections.sort(result);\n           return result;\n       }\n       \n       private boolean containsEvenDigit(int num) {\n           while (num > 0) {\n               int digit = num % 10;\n               if (digit % 2 == 0) {\n                   return true;\n               }\n               num /= 10;\n           }\n           return false;\n       }\n   }\n   "}
{"task_id": "Java/105", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<String> by_length(List<Integer> arr) {\n           // List to store valid numbers between 1 and 9\n           List<Integer> validNumbers = new ArrayList<>();\n           \n           // Filter out numbers between 1 and 9\n           for (int num : arr) {\n               if (num >= 1 && num <= 9) {\n                   validNumbers.add(num);\n               }\n           }\n           \n           // Sort the valid numbers\n           Collections.sort(validNumbers);\n           \n           // Reverse the sorted list\n           Collections.reverse(validNumbers);\n           \n           // Map to store the number to name mapping\n           Map<Integer, String> numberToName = new HashMap<>();\n           numberToName.put(1, \"One\");\n           numberToName.put(2, \"Two\");\n           numberToName.put(3, \"Three\");\n           numberToName.put(4, \"Four\");\n           numberToName.put(5, \"Five\");\n           numberToName.put(6, \"Six\");\n           numberToName.put(7, \"Seven\");\n           numberToName.put(8, \"Eight\");\n           numberToName.put(9, \"Nine\");\n           \n           // List to store the result\n           List<String> result = new ArrayList<>();\n           \n           // Map each number to its corresponding name\n           for (int num : validNumbers) {\n               result.add(numberToName.get(num));\n           }\n           \n           return result;\n       }\n   }\n   "}
{"task_id": "Java/106", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> f(int n) {\n           List<Integer> result = new ArrayList<>();\n           \n           for (int i = 1; i <= n; i++) {\n               if (i % 2 == 0) {\n                   // Calculate factorial of i\n                   int factorial = 1;\n                   for (int j = 1; j <= i; j++) {\n                       factorial *= j;\n                   }\n                   result.add(factorial);\n               } else {\n                   // Calculate sum of numbers from 1 to i\n                   int sum = 0;\n                   for (int j = 1; j <= i; j++) {\n                       sum += j;\n                   }\n                   result.add(sum);\n               }\n           }\n           \n           return result;\n       }\n   }\n   "}
{"task_id": "Java/107", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> even_odd_palindrome(int n) {\n           int even_count = 0;\n           int odd_count = 0;\n\n           for (int i = 1; i <= n; i++) {\n               String numStr = Integer.toString(i);\n               String reversedStr = new StringBuilder(numStr).reverse().toString();\n\n               if (numStr.equals(reversedStr)) {\n                   if (i % 2 == 0) {\n                       even_count++;\n                   } else {\n                       odd_count++;\n                   }\n               }\n           }\n\n           List<Integer> result = new ArrayList<>();\n           result.add(even_count);\n           result.add(odd_count);\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/108", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int count_nums(List<Integer> arr) {\n           int count = 0;\n           for (int number : arr) {\n               int sum_of_digits = 0;\n               int abs_number = Math.abs(number);\n               while (abs_number > 0) {\n                   int digit = abs_number % 10;\n                   if (number < 0) {\n                       digit = -digit;\n                   }\n                   sum_of_digits += digit;\n                   abs_number /= 10;\n               }\n               if (sum_of_digits > 0) {\n                   count++;\n               }\n           }\n           return count;\n       }\n   }\n   "}
{"task_id": "Java/109", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean move_one_ball(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        int n = arr.size();\n        int pivot = -1;\n\n        // Find the pivot point where the array starts decreasing\n        for (int i = 0; i < n - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                pivot = i;\n                break;\n            }\n        }\n\n        // If no pivot is found, the array is already sorted\n        if (pivot == -1) {\n            return true;\n        }\n\n        // Check if the array can be sorted by rotating around the pivot\n        for (int i = pivot + 1; i < n - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                return false;\n            }\n        }\n\n        // Check if the last element is less than or equal to the first element\n        return arr.get(n - 1) <= arr.get(0);\n    }\n}\n"}
{"task_id": "Java/110", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String exchange(List<Integer> lst1, List<Integer> lst2) {\n           int count_odd_in_lst1 = 0;\n           int count_even_in_lst2 = 0;\n           \n           for (int num : lst1) {\n               if (num % 2 != 0) {\n                   count_odd_in_lst1++;\n               }\n           }\n           \n           for (int num : lst2) {\n               if (num % 2 == 0) {\n                   count_even_in_lst2++;\n               }\n           }\n           \n           if (count_odd_in_lst1 <= count_even_in_lst2) {\n               return \"YES\";\n           } else {\n               return \"NO\";\n           }\n       }\n   }\n   "}
{"task_id": "Java/111", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Map<String, Integer> histogram(String test) {\n        // If the input string is empty, return an empty map\n        if (test.isEmpty()) {\n            return new HashMap<>();\n        }\n        \n        // Create a HashMap to store the count of each letter\n        Map<String, Integer> letterCounts = new HashMap<>();\n        \n        // Split the input string by spaces to get individual letters\n        String[] letters = test.split(\" \");\n        \n        // Iterate through each letter and update the counts in the HashMap\n        for (String letter : letters) {\n            letterCounts.put(letter, letterCounts.getOrDefault(letter, 0) + 1);\n        }\n        \n        // Find the maximum count in the HashMap\n        int maxCount = Collections.max(letterCounts.values());\n        \n        // Create a result map to store letters with the maximum count\n        Map<String, Integer> result = new HashMap<>();\n        \n        // Iterate through the HashMap and add entries with the maximum count to the result map\n        for (Map.Entry<String, Integer> entry : letterCounts.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        // Return the result map\n        return result;\n    }\n}\n"}
{"task_id": "Java/112", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Object> reverse_delete(String s, String c) {\n           // Create a set from characters in c\n           Set<Character> charSet = new HashSet<>();\n           for (char ch : c.toCharArray()) {\n               charSet.add(ch);\n           }\n\n           // Initialize an empty result string\n           StringBuilder result = new StringBuilder();\n\n           // Iterate through s and build the result string\n           for (char ch : s.toCharArray()) {\n               if (!charSet.contains(ch)) {\n                   result.append(ch);\n               }\n           }\n\n           // Check if the result string is a palindrome\n           String resultStr = result.toString();\n           String reversedStr = new StringBuilder(resultStr).reverse().toString();\n           boolean isPalindrome = resultStr.equals(reversedStr);\n\n           // Return the result string and the palindrome check result\n           List<Object> resultList = new ArrayList<>();\n           resultList.add(resultStr);\n           resultList.add(isPalindrome);\n           return resultList;\n       }\n   }\n   "}
{"task_id": "Java/113", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int oddCount = 0;\n            \n            // Count the number of odd digits in the string\n            for (char ch : str.toCharArray()) {\n                if (Character.getNumericValue(ch) % 2 != 0) {\n                    oddCount++;\n                }\n            }\n            \n            // Construct the output string\n            String output = String.format(\"the number of odd elements %dn the str%dng %d of the %dnput.\", oddCount, oddCount, oddCount, oddCount);\n            result.add(output);\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/114", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int minSubArraySum(List<Integer> nums) {\n        // Initialize minSum to a large value\n        int minSum = Integer.MAX_VALUE;\n        // Initialize currentSum to 0\n        int currentSum = 0;\n        \n        // Iterate through each element in the array\n        for (int num : nums) {\n            // Add the current element to currentSum\n            currentSum += num;\n            \n            // If currentSum is less than minSum, update minSum\n            if (currentSum < minSum) {\n                minSum = currentSum;\n            }\n            \n            // If currentSum becomes positive, reset it to 0\n            if (currentSum > 0) {\n                currentSum = 0;\n            }\n        }\n        \n        // Return the minimum sum found\n        return minSum;\n    }\n}\n"}
{"task_id": "Java/115", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int max_fill(List<List<Integer>> grid, int capacity) {\n           int total_lowers = 0;\n           for (List<Integer> row : grid) {\n               int water_units = 0;\n               for (int unit : row) {\n                   if (unit == 1) {\n                       water_units++;\n                   }\n               }\n               int lowers_needed = (int) Math.ceil((double) water_units / capacity);\n               total_lowers += lowers_needed;\n           }\n           return total_lowers;\n       }\n   }\n   "}
{"task_id": "Java/116", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> arr) {\n        // Custom comparator to sort based on number of ones in binary representation\n        arr.sort((a, b) -> {\n            int countA = Integer.bitCount(a);\n            int countB = Integer.bitCount(b);\n            if (countA == countB) {\n                return Integer.compare(a, b);\n            }\n            return Integer.compare(countA, countB);\n        });\n        return arr;\n    }\n}\n"}
{"task_id": "Java/117", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<String> select_words(String s, int n) {\n           // Return an empty list if the input string is empty\n           if (s.isEmpty()) {\n               return new ArrayList<>();\n           }\n\n           // List to store the result words\n           List<String> result = new ArrayList<>();\n\n           // Split the string into words\n           String[] words = s.split(\" \");\n\n           // Iterate over each word\n           for (String word : words) {\n               // Count the number of consonants in the word\n               int consonantCount = countConsonants(word);\n\n               // If the count matches n, add the word to the result list\n               if (consonantCount == n) {\n                   result.add(word);\n               }\n           }\n\n           // Return the result list\n           return result;\n       }\n\n       // Helper function to count consonants in a word\n       private int countConsonants(String word) {\n           int count = 0;\n           for (char c : word.toCharArray()) {\n               if (isConsonant(c)) {\n                   count++;\n               }\n           }\n           return count;\n       }\n\n       // Helper function to check if a character is a consonant\n       private boolean isConsonant(char c) {\n           // Convert to lowercase to handle both uppercase and lowercase letters\n           c = Character.toLowerCase(c);\n           // Check if the character is a letter and not a vowel\n           return Character.isLetter(c) && \"aeiou\".indexOf(c) == -1;\n       }\n   }\n   "}
{"task_id": "Java/118", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String get_closest_vowel(String word) {\n           Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n           boolean betweenConsonants = false;\n           char closestVowel = '\\0';\n\n           for (int i = word.length() - 1; i >= 0; i--) {\n               char currentChar = word.charAt(i);\n               if (!vowels.contains(currentChar)) { // Consonant\n                   if (betweenConsonants && closestVowel != '\\0') {\n                       return String.valueOf(closestVowel);\n                   }\n                   betweenConsonants = true;\n               } else if (vowels.contains(currentChar) && betweenConsonants) { // Vowel\n                   closestVowel = currentChar;\n               }\n           }\n\n           return \"\";\n       }\n   }\n   "}
{"task_id": "Java/119", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String match_parens(List<String> lst) {\n           int open1 = 0, close1 = 0;\n           int open2 = 0, close2 = 0;\n           \n           // Count parentheses in the first string\n           for (char c : lst.get(0).toCharArray()) {\n               if (c == '(') {\n                   open1++;\n               } else if (c == ')') {\n                   close1++;\n               }\n           }\n           \n           // Count parentheses in the second string\n           for (char c : lst.get(1).toCharArray()) {\n               if (c == '(') {\n                   open2++;\n               } else if (c == ')') {\n                   close2++;\n               }\n           }\n           \n           // Calculate total open and close parentheses\n           int total_open = open1 + open2;\n           int total_close = close1 + close2;\n           \n           // Check if they can be balanced\n           if (total_open == total_close) {\n               return \"Yes\";\n           } else {\n               return \"No\";\n           }\n       }\n   }\n   "}
{"task_id": "Java/120", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Initialize a max-heap\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n        \n        // Add all elements of arr to the max-heap\n        for (int num : arr) {\n            maxHeap.add(num);\n        }\n        \n        // List to store the k largest elements\n        List<Integer> result = new ArrayList<>();\n        \n        // Extract the top k elements from the max-heap\n        for (int i = 0; i < k; i++) {\n            result.add(maxHeap.poll());\n        }\n        \n        // Sort the extracted elements in ascending order\n        Collections.sort(result);\n        \n        // Return the sorted list\n        return result;\n    }\n}\n"}
{"task_id": "Java/121", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int solution(List<Integer> lst) {\n           int sum = 0;\n           for (int i = 0; i < lst.size(); i++) {\n               if (i % 2 == 0) { // Check if index is even\n                   if (lst.get(i) % 2 != 0) { // Check if element is odd\n                       sum += lst.get(i);\n                   }\n               }\n           }\n           return sum;\n       }\n   }\n   "}
{"task_id": "Java/122", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int add_elements(List<Integer> arr, int k) {\n           int sum = 0;\n           for (int i = 0; i < k; i++) {\n               int num = arr.get(i);\n               if (num >= 0 && num <= 99) {\n                   sum += num;\n               }\n           }\n           return sum;\n       }\n   }\n   "}
{"task_id": "Java/123", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> get_odd_collatz(int n) {\n        List<Integer> odd_numbers = new ArrayList<>();\n        \n        while (n != 1) {\n            if (n % 2 != 0) { // Check if n is odd\n                odd_numbers.add(n);\n            }\n            if (n % 2 == 0) { // If n is even\n                n = n / 2;\n            } else { // If n is odd\n                n = 3 * n + 1;\n            }\n        }\n        \n        // Add 1 to the list since it is always the end of the sequence\n        odd_numbers.add(1);\n        \n        // Sort the list in increasing order\n        Collections.sort(odd_numbers);\n        \n        return odd_numbers;\n    }\n}\n"}
{"task_id": "Java/124", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean valid_date(String date) {\n           if (date.isEmpty()) {\n               return false;\n           }\n           \n           // Regular expression to check the format \"mm-dd-yyyy\"\n           if (!date.matches(\"\\\\d{2}-\\\\d{2}-\\\\d{4}\")) {\n               return false;\n           }\n           \n           // Split the date into month, day, and year\n           String[] parts = date.split(\"-\");\n           int month = Integer.parseInt(parts[0]);\n           int day = Integer.parseInt(parts[1]);\n           int year = Integer.parseInt(parts[2]);\n           \n           // Validate month\n           if (month < 1 || month > 12) {\n               return false;\n           }\n           \n           // Validate day based on month\n           if (day < 1 || day > 31) {\n               return false;\n           }\n           \n           if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) {\n               return false;\n           }\n           \n           if (month == 2 && day > 29) {\n               return false;\n           }\n           \n           return true;\n       }\n   }\n   "}
{"task_id": "Java/125", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public Object split_words(String txt) {\n           if (txt.contains(\" \")) {\n               return Arrays.asList(txt.split(\"\\\\s+\"));\n           } else if (txt.contains(\",\")) {\n               return Arrays.asList(txt.split(\",\"));\n           } else {\n               int count = 0;\n               for (char c : txt.toCharArray()) {\n                   if (Character.isLowerCase(c)) {\n                       if ((c - 'a') % 2 == 1) {\n                           count++;\n                       }\n                   }\n               }\n               return count;\n           }\n       }\n   }\n   "}
{"task_id": "Java/126", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_sorted(List<Integer> lst) {\n        // Edge case: if the list has only one element, it is trivially sorted\n        if (lst.size() <= 1) {\n            return true;\n        }\n\n        // Map to count occurrences of each number\n        Map<Integer, Integer> countMap = new HashMap<>();\n\n        // Iterate through the list\n        for (int i = 0; i < lst.size() - 1; i++) {\n            int current = lst.get(i);\n            int next = lst.get(i + 1);\n\n            // Check if the list is not sorted\n            if (current > next) {\n                return false;\n            }\n\n            // Update the count of the current number\n            countMap.put(current, countMap.getOrDefault(current, 0) + 1);\n\n            // Check if the count exceeds 2\n            if (countMap.get(current) > 2) {\n                return false;\n            }\n        }\n\n        // Update the count of the last element\n        int lastElement = lst.get(lst.size() - 1);\n        countMap.put(lastElement, countMap.getOrDefault(lastElement, 0) + 1);\n\n        // Check if the count of the last element exceeds 2\n        if (countMap.get(lastElement) > 2) {\n            return false;\n        }\n\n        // If all checks pass, the list is sorted and valid\n        return true;\n    }\n}\n"}
{"task_id": "Java/127", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String intersection(List<Integer> interval1, List<Integer> interval2) {\n           int start1 = interval1.get(0);\n           int end1 = interval1.get(1);\n           int start2 = interval2.get(0);\n           int end2 = interval2.get(1);\n           \n           int intersectionStart = Math.max(start1, start2);\n           int intersectionEnd = Math.min(end1, end2);\n           \n           if (intersectionStart > intersectionEnd) {\n               return \"NO\";\n           }\n           \n           int intersectionLength = intersectionEnd - intersectionStart + 1;\n           \n           if (isPrime(intersectionLength)) {\n               return \"YES\";\n           } else {\n               return \"NO\";\n           }\n       }\n       \n       private boolean isPrime(int n) {\n           if (n <= 1) {\n               return false;\n           }\n           for (int i = 2; i <= Math.sqrt(n); i++) {\n               if (n % i == 0) {\n                   return false;\n               }\n           }\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/128", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public Optional<Integer> prod_signs(List<Integer> arr) {\n           if (arr.isEmpty()) {\n               return Optional.empty();\n           }\n\n           int sum_of_magnitudes = 0;\n           int product_of_signs = 1;\n\n           for (int number : arr) {\n               sum_of_magnitudes += Math.abs(number);\n               if (number == 0) {\n                   product_of_signs = 0;\n                   break;\n               } else if (number < 0) {\n                   product_of_signs *= -1;\n               }\n           }\n\n           int result = sum_of_magnitudes * product_of_signs;\n           return Optional.of(result);\n       }\n   }\n   "}
{"task_id": "Java/129", "generation": "import java.util.*;\n\nclass Solution {\n    private List<Integer> minPath;\n    private int N;\n\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        N = grid.size();\n        minPath = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            minPath.add(Integer.MAX_VALUE);\n        }\n\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < N; j++) {\n                dfs(grid, i, j, new ArrayList<>(), k);\n            }\n        }\n\n        return minPath;\n    }\n\n    private void dfs(List<List<Integer>> grid, int x, int y, List<Integer> currentPath, int k) {\n        if (currentPath.size() == k) {\n            if (comparePaths(currentPath, minPath) < 0) {\n                minPath = new ArrayList<>(currentPath);\n            }\n            return;\n        }\n\n        currentPath.add(grid.get(x).get(y));\n\n        int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n        for (int[] dir : directions) {\n            int newX = x + dir[0];\n            int newY = y + dir[1];\n            if (newX >= 0 && newX < N && newY >= 0 && newY < N) {\n                dfs(grid, newX, newY, currentPath, k);\n            }\n        }\n\n        currentPath.remove(currentPath.size() - 1);\n    }\n\n    private int comparePaths(List<Integer> path1, List<Integer> path2) {\n        for (int i = 0; i < path1.size(); i++) {\n            if (path1.get(i) < path2.get(i)) {\n                return -1;\n            } else if (path1.get(i) > path2.get(i)) {\n                return 1;\n            }\n        }\n        return 0;\n    }\n}\n"}
{"task_id": "Java/130", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> tri(int n) {\n           List<Integer> tribonacciSequence = new ArrayList<>();\n           tribonacciSequence.add(3); // Base case tri(1) = 3\n\n           for (int i = 2; i <= n; i++) {\n               if (i % 2 == 0) {\n                   // If i is even\n                   tribonacciSequence.add(1 + i / 2);\n               } else {\n                   // If i is odd\n                   int tri_i_minus_1 = tribonacciSequence.get(i - 2);\n                   int tri_i_minus_2 = tribonacciSequence.get(i - 3);\n                   int tri_i_plus_1 = 1 + (i + 1) / 2; // Since i + 1 is even\n                   tribonacciSequence.add(tri_i_minus_1 + tri_i_minus_2 + tri_i_plus_1);\n               }\n           }\n\n           return tribonacciSequence;\n       }\n   }\n   "}
{"task_id": "Java/131", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digits(int n) {\n        int product = 1;\n        boolean foundOdd = false;\n\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n                foundOdd = true;\n            }\n            n /= 10;\n        }\n\n        if (!foundOdd) {\n            return 0;\n        } else {\n            return product;\n        }\n    }\n}\n"}
{"task_id": "Java/132", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean is_nested(String string) {\n           Stack<Character> stack = new Stack<>();\n           boolean nested_found = false;\n           \n           for (char ch : string.toCharArray()) {\n               if (ch == '[') {\n                   stack.push(ch);\n               } else if (ch == ']') {\n                   if (!stack.isEmpty()) {\n                       stack.pop();\n                       if (!stack.isEmpty()) {\n                           nested_found = true;\n                       }\n                   } else {\n                       return false; // Unmatched closing bracket\n                   }\n               }\n           }\n           \n           return nested_found;\n       }\n   }\n   "}
{"task_id": "Java/133", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int sum_squares(List<Double> lst) {\n           int sum = 0;\n           for (double num : lst) {\n               int roundedNum = (int) Math.ceil(num);\n               sum += roundedNum * roundedNum;\n           }\n           return sum;\n       }\n   }\n   "}
{"task_id": "Java/134", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean check_if_last_char_is_a_letter(String txt) {\n           if (txt.isEmpty()) {\n               return false;\n           }\n           \n           String[] words = txt.split(\" \");\n           String lastWord = words[words.length - 1];\n           \n           if (lastWord.length() == 1 && Character.isLetter(lastWord.charAt(0))) {\n               return true;\n           }\n           \n           return false;\n       }\n   }\n   "}
{"task_id": "Java/135", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int can_arrange(List<Integer> arr) {\n           int maxIndex = -1;\n           for (int i = 1; i < arr.size(); i++) {\n               if (arr.get(i) < arr.get(i - 1)) {\n                   maxIndex = i;\n               }\n           }\n           return maxIndex;\n       }\n   }\n   "}
{"task_id": "Java/136", "generation": "import java.util.*;\nimport java.util.Optional;\n\nclass Solution {\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        Optional<Integer> largestNegative = Optional.empty();\n        Optional<Integer> smallestPositive = Optional.empty();\n\n        for (Integer num : lst) {\n            if (num < 0) {\n                if (!largestNegative.isPresent() || num > largestNegative.get()) {\n                    largestNegative = Optional.of(num);\n                }\n            } else if (num > 0) {\n                if (!smallestPositive.isPresent() || num < smallestPositive.get()) {\n                    smallestPositive = Optional.of(num);\n                }\n            }\n        }\n\n        List<Optional<Integer>> result = new ArrayList<>();\n        result.add(largestNegative);\n        result.add(smallestPositive);\n        return result;\n    }\n}\n"}
{"task_id": "Java/137", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public Optional<Object> compare_one(Object a, Object b) {\n           double a_double = convertToDouble(a);\n           double b_double = convertToDouble(b);\n\n           if (a_double > b_double) {\n               return Optional.of(a);\n           } else if (b_double > a_double) {\n               return Optional.of(b);\n           } else {\n               return Optional.empty();\n           }\n       }\n\n       private double convertToDouble(Object obj) {\n           if (obj instanceof String) {\n               String str = (String) obj;\n               str = str.replace(',', '.');\n               return Double.parseDouble(str);\n           } else if (obj instanceof Number) {\n               return ((Number) obj).doubleValue();\n           } else {\n               throw new IllegalArgumentException(\"Unsupported type\");\n           }\n       }\n   }\n   "}
{"task_id": "Java/138", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_equal_to_sum_even(int n) {\n        // Check if n is even\n        if (n % 2 != 0) {\n            return false;\n        }\n        \n        // Check if n can be divided by 4\n        return n % 4 == 0;\n    }\n}\n"}
{"task_id": "Java/139", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public long special_factorial(int n) {\n        // List to store factorials\n        List<Long> factorials = new ArrayList<>();\n        \n        // Compute factorial for each number from n down to 1\n        for (int i = n; i >= 1; i--) {\n            factorials.add(factorial(i));\n        }\n        \n        // Multiply all factorials together\n        long result = 1;\n        for (long fact : factorials) {\n            result *= fact;\n        }\n        \n        return result;\n    }\n    \n    // Helper method to compute factorial of a number\n    private long factorial(int num) {\n        long fact = 1;\n        for (int i = 1; i <= num; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n}\n"}
{"task_id": "Java/140", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String fix_spaces(String text) {\n        StringBuilder result = new StringBuilder();\n        int spaceCount = 0;\n\n        for (char c : text.toCharArray()) {\n            if (c == ' ') {\n                spaceCount++;\n            } else {\n                if (spaceCount > 2) {\n                    result.append('-');\n                } else if (spaceCount > 0) {\n                    for (int i = 0; i < spaceCount; i++) {\n                        result.append('_');\n                    }\n                }\n                result.append(c);\n                spaceCount = 0;\n            }\n        }\n\n        if (spaceCount > 2) {\n            result.append('-');\n        } else if (spaceCount > 0) {\n            for (int i = 0; i < spaceCount; i++) {\n                result.append('_');\n            }\n        }\n\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/141", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String file_name_check(String file_name) {\n        // Split the file name into prefix and suffix\n        String[] parts = file_name.split(\"\\\\.\");\n        \n        // Check if there is exactly one dot\n        if (parts.length != 2) {\n            return \"No\";\n        }\n        \n        String prefix = parts[0];\n        String suffix = parts[1];\n        \n        // Check if the prefix is not empty and starts with a Latin alphabet letter\n        if (prefix.isEmpty() || !Character.isLetter(prefix.charAt(0))) {\n            return \"No\";\n        }\n        \n        // Check if the suffix is one of [\"txt\", \"exe\", \"dll\"]\n        List<String> validSuffixes = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        if (!validSuffixes.contains(suffix)) {\n            return \"No\";\n        }\n        \n        // Count the digits in the prefix\n        int digitCount = 0;\n        for (char c : prefix.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n        }\n        \n        // Check if there are no more than three digits\n        if (digitCount > 3) {\n            return \"No\";\n        }\n        \n        // If all conditions are met, return \"Yes\"\n        return \"Yes\";\n    }\n}\n"}
{"task_id": "Java/142", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int sum_squares(List<Integer> lst) {\n           int sum = 0;\n           for (int i = 0; i < lst.size(); i++) {\n               int element = lst.get(i);\n               if (i % 3 == 0) {\n                   element = element * element; // Square the element\n               } else if (i % 4 == 0 && i % 3 != 0) {\n                   element = element * element * element; // Cube the element\n               }\n               sum += element;\n           }\n           return sum;\n       }\n   }\n   "}
{"task_id": "Java/143", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String words_in_sentence(String sentence) {\n           String[] words = sentence.split(\" \");\n           List<String> primeWords = new ArrayList<>();\n           \n           for (String word : words) {\n               if (isPrime(word.length())) {\n                   primeWords.add(word);\n               }\n           }\n           \n           return String.join(\" \", primeWords);\n       }\n       \n       private boolean isPrime(int n) {\n           if (n <= 1) {\n               return false;\n           }\n           for (int i = 2; i <= Math.sqrt(n); i++) {\n               if (n % i == 0) {\n                   return false;\n               }\n           }\n           return true;\n       }\n   }\n   "}
{"task_id": "Java/144", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean simplify(String x, String n) {\n        // Parse the fractions\n        String[] partsX = x.split(\"/\");\n        int numerator1 = Integer.parseInt(partsX[0]);\n        int denominator1 = Integer.parseInt(partsX[1]);\n        \n        String[] partsN = n.split(\"/\");\n        int numerator2 = Integer.parseInt(partsN[0]);\n        int denominator2 = Integer.parseInt(partsN[1]);\n        \n        // Calculate the product of the fractions\n        int product_numerator = numerator1 * numerator2;\n        int product_denominator = denominator1 * denominator2;\n        \n        // Simplify the fraction\n        int gcd = gcd(product_numerator, product_denominator);\n        int simplified_numerator = product_numerator / gcd;\n        int simplified_denominator = product_denominator / gcd;\n        \n        // Check if the simplified fraction is a whole number\n        return simplified_denominator == 1;\n    }\n    \n    // Helper method to find the greatest common divisor (GCD)\n    private int gcd(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}\n"}
{"task_id": "Java/145", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> order_by_points(List<Integer> nums) {\n        // Custom comparator to sort based on digit sum\n        Comparator<Integer> digitSumComparator = new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int sumA = sumOfDigits(a);\n                int sumB = sumOfDigits(b);\n                return Integer.compare(sumA, sumB);\n            }\n        };\n\n        // Sort the list using the custom comparator\n        Collections.sort(nums, digitSumComparator);\n\n        return nums;\n    }\n\n    // Helper function to calculate the sum of digits of a number\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        boolean isNegative = num < 0;\n        num = Math.abs(num);\n\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n\n        return isNegative ? -sum : sum;\n    }\n\n    // Example usage\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.order_by_points(Arrays.asList(1, 11, -1, -11, -12))); // [-1, -11, 1, -12, 11]\n        System.out.println(solution.order_by_points(Arrays.asList())); // []\n    }\n}\n"}
{"task_id": "Java/146", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int specialFilter(List<Integer> nums) {\n           int count = 0;\n           for (int num : nums) {\n               if (num > 10) {\n                   String numStr = Integer.toString(Math.abs(num));\n                   char firstDigit = numStr.charAt(0);\n                   char lastDigit = numStr.charAt(numStr.length() - 1);\n                   if (isOddDigit(firstDigit) && isOddDigit(lastDigit)) {\n                       count++;\n                   }\n               }\n           }\n           return count;\n       }\n\n       private boolean isOddDigit(char digit) {\n           int digitValue = Character.getNumericValue(digit);\n           return digitValue % 2 != 0;\n       }\n   }\n   "}
{"task_id": "Java/147", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int get_max_triples(int n) {\n           int[] a = new int[n];\n           for (int i = 0; i < n; i++) {\n               a[i] = (i + 1) * (i + 1) - (i + 1) + 1;\n           }\n           int count = 0;\n           for (int i = 0; i < n - 2; i++) {\n               for (int j = i + 1; j < n - 1; j++) {\n                   for (int k = j + 1; k < n; k++) {\n                       if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                           count++;\n                       }\n                   }\n               }\n           }\n           return count;\n       }\n   }\n   "}
{"task_id": "Java/148", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<String> bf(String planet1, String planet2) {\n           // List of planets in order of proximity to the Sun\n           List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n           \n           // Check if both planets are valid\n           if (!planets.contains(planet1) || !planets.contains(planet2)) {\n               return new ArrayList<>();\n           }\n           \n           // Find the indices of the planets\n           int index1 = planets.indexOf(planet1);\n           int index2 = planets.indexOf(planet2);\n           \n           // Ensure index1 is less than index2\n           if (index1 > index2) {\n               int temp = index1;\n               index1 = index2;\n               index2 = temp;\n           }\n           \n           // Extract the sublist between the indices\n           List<String> result = new ArrayList<>();\n           for (int i = index1 + 1; i < index2; i++) {\n               result.add(planets.get(i));\n           }\n           \n           return result;\n       }\n   }\n   "}
{"task_id": "Java/149", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<String> sorted_list_sum(List<String> lst) {\n        // Filter out strings with odd lengths\n        List<String> filteredList = lst.stream()\n                                       .filter(s -> s.length() % 2 == 0)\n                                       .collect(Collectors.toList());\n        \n        // Sort the filtered list by length and then alphabetically\n        filteredList.sort(Comparator.comparingInt(String::length)\n                                    .thenComparing(Comparator.naturalOrder()));\n        \n        return filteredList;\n    }\n}\n"}
{"task_id": "Java/150", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int x_or_y(int n, int x, int y) {\n        // Edge case: 0 and 1 are not prime numbers\n        if (n <= 1) {\n            return y;\n        }\n        \n        // Check for prime\n        boolean isPrime = true;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        \n        // Return x if n is prime, otherwise return y\n        return isPrime ? x : y;\n    }\n}\n"}
{"task_id": "Java/151", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int double_the_difference(List<Object> lst) {\n           int sum = 0;\n           for (Object obj : lst) {\n               if (obj instanceof Integer) {\n                   int num = (Integer) obj;\n                   if (num >= 0 && num % 2 != 0) {\n                       sum += num * num;\n                   }\n               }\n           }\n           return sum;\n       }\n   }\n   "}
{"task_id": "Java/152", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            int difference = Math.abs(game.get(i) - guess.get(i));\n            result.add(difference);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/153", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String Strongest_Extension(String class_name, List<String> extensions) {\n           String strongest_extension = extensions.get(0);\n           int max_strength = calculateStrength(extensions.get(0));\n           \n           for (int i = 1; i < extensions.size(); i++) {\n               String current_extension = extensions.get(i);\n               int current_strength = calculateStrength(current_extension);\n               \n               if (current_strength > max_strength) {\n                   strongest_extension = current_extension;\n                   max_strength = current_strength;\n               }\n           }\n           \n           return class_name + \".\" + strongest_extension;\n       }\n       \n       private int calculateStrength(String extension) {\n           int CAP = 0;\n           int SM = 0;\n           \n           for (char c : extension.toCharArray()) {\n               if (Character.isUpperCase(c)) {\n                   CAP++;\n               } else if (Character.isLowerCase(c)) {\n                   SM++;\n               }\n           }\n           \n           return CAP - SM;\n       }\n   }\n   "}
{"task_id": "Java/154", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean cycpattern_check(String a, String b) {\n        // Concatenate b with itself to form b_rotated\n        String b_rotated = b + b;\n        \n        // Iterate through all possible substrings of b_rotated of length equal to b\n        for (int i = 0; i < b.length(); i++) {\n            String rotation = b_rotated.substring(i, i + b.length());\n            // Check if this rotation is a substring of a\n            if (a.contains(rotation)) {\n                return true;\n            }\n        }\n        \n        // If no rotation is found as a substring of a, return false\n        return false;\n    }\n}\n"}
{"task_id": "Java/155", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> even_odd_count(int num) {\n           if (num < 0) {\n               num = -num;\n           }\n           String numStr = Integer.toString(num);\n           int evenCount = 0;\n           int oddCount = 0;\n           for (char digitChar : numStr.toCharArray()) {\n               int digit = Character.getNumericValue(digitChar);\n               if (digit % 2 == 0) {\n                   evenCount++;\n               } else {\n                   oddCount++;\n               }\n           }\n           List<Integer> result = new ArrayList<>();\n           result.add(evenCount);\n           result.add(oddCount);\n           return result;\n       }\n   }\n   "}
{"task_id": "Java/156", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String int_to_mini_roman(int number) {\n        // Mapping of integer values to their corresponding Roman numeral strings\n        Map<Integer, String> romanMap = new LinkedHashMap<Integer, String>() {{\n            put(1000, \"M\");\n            put(900, \"CM\");\n            put(500, \"D\");\n            put(400, \"CD\");\n            put(100, \"C\");\n            put(90, \"XC\");\n            put(50, \"L\");\n            put(40, \"XL\");\n            put(10, \"X\");\n            put(9, \"IX\");\n            put(5, \"V\");\n            put(4, \"IV\");\n            put(1, \"I\");\n        }};\n\n        StringBuilder result = new StringBuilder();\n\n        // Iterate through the map in descending order of keys\n        for (Map.Entry<Integer, String> entry : romanMap.entrySet()) {\n            int value = entry.getKey();\n            String roman = entry.getValue();\n\n            // While the number is greater than or equal to the current value\n            while (number >= value) {\n                number -= value;\n                result.append(roman);\n            }\n        }\n\n        // Convert the result to lowercase\n        return result.toString().toLowerCase();\n    }\n}\n"}
{"task_id": "Java/157", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public boolean right_angle_triangle(int a, int b, int c) {\n           // Identify the longest side\n           if (a > b && a > c) {\n               return a * a == b * b + c * c;\n           } else if (b > a && b > c) {\n               return b * b == a * a + c * c;\n           } else {\n               return c * c == a * a + b * b;\n           }\n       }\n   }\n   "}
{"task_id": "Java/158", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String find_max(List<String> words) {\n           int max_unique_count = 0;\n           String result_word = \"\";\n\n           for (String word : words) {\n               Set<Character> unique_chars = new HashSet<>();\n               for (char c : word.toCharArray()) {\n                   unique_chars.add(c);\n               }\n               int unique_count = unique_chars.size();\n\n               if (unique_count > max_unique_count) {\n                   max_unique_count = unique_count;\n                   result_word = word;\n               } else if (unique_count == max_unique_count) {\n                   if (result_word.isEmpty() || word.compareTo(result_word) < 0) {\n                       result_word = word;\n                   }\n               }\n           }\n\n           return result_word;\n       }\n   }\n   "}
{"task_id": "Java/159", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> eat(int number, int need, int remaining) {\n           int totalEaten = number + Math.min(need, remaining);\n           int carrotsLeft = Math.max(remaining - need, 0);\n           return Arrays.asList(totalEaten, carrotsLeft);\n       }\n   }\n   "}
{"task_id": "Java/160", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public int do_algebra(List<String> operator, List<Integer> operand) {\n           // Initialize result with the first operand\n           int result = operand.get(0);\n           \n           // Iterate through the operator list and apply operations\n           for (int i = 0; i < operator.size(); i++) {\n               String op = operator.get(i);\n               int nextOperand = operand.get(i + 1);\n               \n               switch (op) {\n                   case \"+\":\n                       result += nextOperand;\n                       break;\n                   case \"-\":\n                       result -= nextOperand;\n                       break;\n                   case \"*\":\n                       result *= nextOperand;\n                       break;\n                   case \"/\":\n                       result /= nextOperand;\n                       break;\n                   case \"**\":\n                       result = (int) Math.pow(result, nextOperand);\n                       break;\n                   default:\n                       throw new IllegalArgumentException(\"Invalid operator: \" + op);\n               }\n           }\n           \n           return result;\n       }\n   }\n   "}
{"task_id": "Java/161", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public String solve(String s) {\n           boolean hasLetter = false;\n           StringBuilder result = new StringBuilder();\n\n           for (char c : s.toCharArray()) {\n               if (Character.isLetter(c)) {\n                   hasLetter = true;\n                   if (Character.isUpperCase(c)) {\n                       result.append(Character.toLowerCase(c));\n                   } else {\n                       result.append(Character.toUpperCase(c));\n                   }\n               } else {\n                   result.append(c);\n               }\n           }\n\n           if (!hasLetter) {\n               return new StringBuilder(s).reverse().toString();\n           }\n\n           return result.toString();\n       }\n   }\n   "}
{"task_id": "Java/162", "generation": "   import java.math.BigInteger;\n   import java.security.*;\n   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n           if (text.isEmpty()) {\n               return Optional.empty();\n           }\n           \n           // Initialize MessageDigest with MD5 algorithm\n           MessageDigest md = MessageDigest.getInstance(\"MD5\");\n           \n           // Compute the hash of the text\n           byte[] messageDigest = md.digest(text.getBytes());\n           \n           // Convert the byte array to a hexadecimal string\n           BigInteger no = new BigInteger(1, messageDigest);\n           String hashtext = no.toString(16);\n           \n           // Pad with leading zeros if necessary to ensure 32 characters\n           while (hashtext.length() < 32) {\n               hashtext = \"0\" + hashtext;\n           }\n           \n           // Return the hexadecimal string wrapped in Optional\n           return Optional.of(hashtext);\n       }\n   }\n   "}
{"task_id": "Java/163", "generation": "   import java.util.*;\n   import java.lang.*;\n\n   class Solution {\n       public List<Integer> generate_integers(int a, int b) {\n           List<Integer> result = new ArrayList<>();\n           int min = Math.min(a, b);\n           int max = Math.max(a, b);\n           \n           for (int i = min; i <= max; i++) {\n               if (i % 2 == 0 && i < 10) {\n                   result.add(i);\n               }\n           }\n           \n           return result;\n       }\n   }\n   "}
