{"task_id": "Java/0", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> has_close_elements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> has_close_elements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        // Step 1: Input Validation\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two numbers.\");\n        }\n\n        // Step 2: Comparison Logic\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (diff < threshold) {\n                    return true; // Found a pair closer than the threshold\n                }\n            }\n        }\n\n        // Step 3: Return Result\n        return false; // No pair found closer than the threshold\n    }\n}\n"}
{"task_id": "Java/1", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> separate_paren_groups(String paren_string) {\n        // Step 1: Remove spaces from the input string\n        paren_string = paren_string.replaceAll(\" \", \"\");\n        \n        List<String> result = new ArrayList<>();\n        StringBuilder currentGroup = new StringBuilder();\n        Stack<Character> stack = new Stack<>();\n        \n        // Step 2: Traverse the string to identify and validate groups\n        for (char ch : paren_string.toCharArray()) {\n            currentGroup.append(ch);\n            if (ch == '(') {\n                stack.push(ch);\n            } else if (ch == ')') {\n                if (!stack.isEmpty()) {\n                    stack.pop();\n                } else {\n                    // If we encounter a ')' without a matching '(', reset the current group\n                    currentGroup.setLength(0);\n                }\n            }\n            \n            // If the stack is empty, we have a balanced group\n            if (stack.isEmpty() && currentGroup.length() > 0) {\n                result.add(currentGroup.toString());\n                currentGroup.setLength(0); // Reset for the next group\n            }\n        }\n        \n        // Step 4: Return the list of extracted balanced groups\n        return result;\n    }\n}\n"}
{"task_id": "Java/2", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n     */\n    public double truncate_number(double number) {\n        // Step 1: Validate the input\n        if (number < 0) {\n            throw new IllegalArgumentException(\"Input must be a positive floating-point number.\");\n        }\n\n        // Step 2: Extract the integer part\n        int integerPart = (int) number;\n\n        // Step 3: Calculate the decimal part\n        double decimalPart = number - integerPart;\n\n        // Step 4: Return the decimal part\n        return decimalPart;\n    }\n}\n"}
{"task_id": "Java/3", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero(Arrays.asList(1, 2, 3))\n    false\n    >>> below_zero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean below_zero(List<Integer> operations) {\n        // Initialize the balance\n        int balance = 0;\n        \n        // Iterate through each operation\n        for (int operation : operations) {\n            // Update the balance\n            balance += operation;\n            \n            // Check if the balance has fallen below zero\n            if (balance < 0) {\n                return true;\n            }\n        }\n        \n        // If no balance fell below zero, return false\n        return false;\n    }\n}\n"}
{"task_id": "Java/4", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double mean_absolute_deviation(List<Double> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list cannot be null or empty\");\n        }\n\n        // Step 1: Calculate the Mean\n        double sum = 0.0;\n        for (double number : numbers) {\n            sum += number;\n        }\n        double mean = sum / numbers.size();\n\n        // Step 2: Calculate Absolute Deviations\n        double sumOfAbsoluteDeviations = 0.0;\n        for (double number : numbers) {\n            sumOfAbsoluteDeviations += Math.abs(number - mean);\n        }\n\n        // Step 3: Calculate the Mean of Absolute Deviations\n        double meanAbsoluteDeviation = sumOfAbsoluteDeviations / numbers.size();\n\n        // Step 4: Return the Result\n        return meanAbsoluteDeviation;\n    }\n}\n"}
{"task_id": "Java/5", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimiter' between every two consecutive elements of input list `numbers`\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        // Step 1: Handle edge cases\n        if (numbers == null || numbers.isEmpty()) {\n            return Collections.emptyList();\n        }\n        \n        // Step 2: Initialize the result list\n        List<Integer> result = new ArrayList<>();\n        \n        // Step 3: Iterate through the input list and insert the delimiter\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        \n        // Step 4: Return the result list\n        return result;\n    }\n}\n"}
{"task_id": "Java/6", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parse_nested_parens(String paren_string) {\n        // Step 1.1: Split the input string by spaces to get an array of individual groups of parentheses.\n        String[] groups = paren_string.split(\" \");\n        \n        // Step 1.2: Initialize an empty list to store the results for each group.\n        List<Integer> results = new ArrayList<>();\n        \n        // Step 2.1: Iterate over each group of parentheses.\n        for (String group : groups) {\n            int currentNestingLevel = 0;\n            int maxNestingLevel = 0;\n            \n            // Step 2.3: Traverse each character in the group.\n            for (char ch : group.toCharArray()) {\n                if (ch == '(') {\n                    // If the character is an opening parenthesis, increment the current nesting level.\n                    currentNestingLevel++;\n                    // Update the maximum nesting level if the current nesting level exceeds it.\n                    maxNestingLevel = Math.max(maxNestingLevel, currentNestingLevel);\n                } else if (ch == ')') {\n                    // If the character is a closing parenthesis, decrement the current nesting level.\n                    currentNestingLevel--;\n                }\n            }\n            \n            // Step 2.4: After processing the group, append the maximum nesting level to the results list.\n            results.add(maxNestingLevel);\n        }\n        \n        // Step 3.1: Return the results list containing the maximum nesting levels for each group.\n        return results;\n    }\n}\n"}
{"task_id": "Java/7", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring(List.of(), \"a\")\n    []\n    >>> filter_by_substring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        if (strings == null || substring == null) {\n            return Collections.emptyList();\n        }\n\n        List<String> result = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                result.add(str);\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/8", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> sum_product(List<Integer> numbers) {\n        if (numbers.isEmpty()) {\n            return Arrays.asList(0, 1);\n        }\n        \n        int sum = 0;\n        int product = 1;\n        \n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        \n        return Arrays.asList(sum, product);\n    }\n}\n"}
{"task_id": "Java/9", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        List<Integer> result = new ArrayList<>();\n        int currentMax = numbers.get(0);\n\n        for (int number : numbers) {\n            if (number > currentMax) {\n                currentMax = number;\n            }\n            result.add(currentMax);\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/10", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    /**\n    Find the longest suffix of the given string that is a palindrome.\n     */\n    private String longestPalindromicSuffix(String string) {\n        for (int i = 0; i < string.length(); i++) {\n            if (isPalindrome(string.substring(i))) {\n                return string.substring(i);\n            }\n        }\n        return \"\";\n    }\n\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n     */\n    public String make_palindrome(String string) {\n        if (string.isEmpty()) {\n            return \"\";\n        }\n\n        String longestSuffix = longestPalindromicSuffix(string);\n        String prefix = string.substring(0, string.length() - longestSuffix.length());\n        String reversedPrefix = new StringBuilder(prefix).reverse().toString();\n\n        return string + reversedPrefix;\n    }\n}\n"}
{"task_id": "Java/11", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n     */\n    public String string_xor(String a, String b) {\n        // Input validation\n        if (!a.matches(\"[01]+\") || !b.matches(\"[01]+\")) {\n            throw new IllegalArgumentException(\"Input strings must contain only '0's and '1's.\");\n        }\n        if (a.length() != b.length()) {\n            throw new IllegalArgumentException(\"Input strings must be of the same length.\");\n        }\n\n        // Initialize StringBuilder for result\n        StringBuilder result = new StringBuilder();\n\n        // Perform XOR operation\n        for (int i = 0; i < a.length(); i++) {\n            char bitA = a.charAt(i);\n            char bitB = b.charAt(i);\n            char xorBit = (bitA == bitB) ? '0' : '1';\n            result.append(xorBit);\n        }\n\n        // Return the result as a String\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/12", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longestString = null;\n        int maxLength = 0;\n\n        for (String str : strings) {\n            int currentLength = str.length();\n            if (currentLength > maxLength) {\n                longestString = str;\n                maxLength = currentLength;\n            }\n        }\n\n        return Optional.ofNullable(longestString);\n    }\n}\n"}
{"task_id": "Java/13", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n     */\n    public int greatest_common_divisor(int a, int b) {\n        // Handle negative numbers by taking their absolute values\n        a = Math.abs(a);\n        b = Math.abs(b);\n\n        // Euclidean Algorithm\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n\n        return a;\n    }\n}\n"}
{"task_id": "Java/14", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> all_prefixes(String string) {\n        // Step 1: Input Validation\n        if (string == null) {\n            throw new IllegalArgumentException(\"Input string cannot be null\");\n        }\n        if (string.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        // Step 2: Prefix Generation and Collection\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n\n        // Step 3: Return the Result\n        return prefixes;\n    }\n}\n"}
{"task_id": "Java/15", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String string_sequence(int n) {\n        // Step 1: Input Validation\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Input must be a non-negative integer.\");\n        }\n\n        // Step 2: Generating the Sequence\n        List<String> sequence = new ArrayList<>();\n        for (int i = 0; i <= n; i++) {\n            sequence.add(String.valueOf(i));\n        }\n\n        // Step 3: Formatting the Output\n        return String.join(\" \", sequence);\n    }\n}\n"}
{"task_id": "Java/16", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n     */\n    public int count_distinct_characters(String string) {\n        // Step 1: Normalize the string to lowercase\n        String normalizedString = string.toLowerCase();\n        \n        // Step 2: Use a Set to store unique characters\n        Set<Character> uniqueCharacters = new HashSet<>();\n        \n        // Step 3: Iterate through the normalized string and add characters to the Set\n        for (char c : normalizedString.toCharArray()) {\n            uniqueCharacters.add(c);\n        }\n        \n        // Step 4: Return the size of the Set as the number of distinct characters\n        return uniqueCharacters.size();\n    }\n}\n"}
{"task_id": "Java/17", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parse_music(String string) {\n        // Step 1: Parse the Input String\n        String[] notes = string.split(\" \");\n        \n        // Step 2: Classify Each Note and Step 3: Calculate Beat Durations\n        List<Integer> beats = new ArrayList<>();\n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    beats.add(4);\n                    break;\n                case \"o|\":\n                    beats.add(2);\n                    break;\n                case \".|\":\n                    beats.add(1);\n                    break;\n                default:\n                    // Handle unexpected note types (optional)\n                    throw new IllegalArgumentException(\"Unknown note type: \" + note);\n            }\n        }\n        \n        // Step 4: Generate the Output List\n        return beats;\n    }\n}\n"}
{"task_id": "Java/18", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlapping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n     */\n    public int how_many_times(String string, String substring) {\n        // Step 1: Input Validation\n        if (string == null || substring == null || substring.isEmpty()) {\n            return 0;\n        }\n\n        // Step 2: Initialize Variables\n        int count = 0;\n        int currentPosition = 0;\n\n        // Step 3: Iterate Through the Main String\n        while (currentPosition <= string.length() - substring.length()) {\n            // Check if the substring matches the current position\n            if (string.startsWith(substring, currentPosition)) {\n                count++;\n            }\n            // Move to the next position (for overlapping matches)\n            currentPosition++;\n        }\n\n        // Step 4: Return the Result\n        return count;\n    }\n}\n"}
{"task_id": "Java/19", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sort_numbers(String numbers) {\n        // Step 1: Create a mapping of number words to their corresponding numerical values\n        Map<String, Integer> wordToNumber = new HashMap<>();\n        wordToNumber.put(\"zero\", 0);\n        wordToNumber.put(\"one\", 1);\n        wordToNumber.put(\"two\", 2);\n        wordToNumber.put(\"three\", 3);\n        wordToNumber.put(\"four\", 4);\n        wordToNumber.put(\"five\", 5);\n        wordToNumber.put(\"six\", 6);\n        wordToNumber.put(\"seven\", 7);\n        wordToNumber.put(\"eight\", 8);\n        wordToNumber.put(\"nine\", 9);\n\n        // Step 2: Split the input string into an array of number words\n        String[] words = numbers.split(\" \");\n\n        // Step 3: Convert the array of number words into an array of numerical values\n        Integer[] numValues = new Integer[words.length];\n        for (int i = 0; i < words.length; i++) {\n            numValues[i] = wordToNumber.get(words[i]);\n        }\n\n        // Step 4: Sort the array of numerical values in ascending order\n        Arrays.sort(numValues);\n\n        // Step 5: Convert the sorted numerical values back into an array of number words\n        String[] sortedWords = new String[numValues.length];\n        for (int i = 0; i < numValues.length; i++) {\n            for (Map.Entry<String, Integer> entry : wordToNumber.entrySet()) {\n                if (entry.getValue().equals(numValues[i])) {\n                    sortedWords[i] = entry.getKey();\n                    break;\n                }\n            }\n        }\n\n        // Step 6: Join the sorted array of number words into a single space-delimited string\n        return String.join(\" \", sortedWords);\n    }\n}\n"}
{"task_id": "Java/20", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        // Step 1: Input Validation\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"The list must contain at least two numbers.\");\n        }\n        \n        // Step 2: Sorting the List\n        Collections.sort(numbers);\n        \n        // Step 3: Finding the Closest Pair\n        double minDifference = Double.MAX_VALUE;\n        List<Double> closestPair = new ArrayList<>();\n        \n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double difference = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (difference < minDifference) {\n                minDifference = difference;\n                closestPair = Arrays.asList(numbers.get(i), numbers.get(i + 1));\n            }\n        }\n        \n        // Step 4: Returning the Result\n        return closestPair;\n    }\n}\n"}
{"task_id": "Java/21", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        // Step 1: Input validation\n        if (numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements.\");\n        }\n\n        // Step 2: Find minimum and maximum values\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n\n        // Step 3: Compute range and handle edge case\n        double range = max - min;\n        if (range == 0) {\n            // All numbers are the same, return a list of zeros\n            return numbers.stream().map(num -> 0.0).collect(Collectors.toList());\n        }\n\n        // Step 4: Apply transformation\n        List<Double> transformedList = new ArrayList<>();\n        for (double num : numbers) {\n            double transformedValue = (num - min) / range;\n            transformedList.add(transformedValue);\n        }\n\n        // Step 5: Return the transformed list\n        return transformedList;\n    }\n}\n"}
{"task_id": "Java/22", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filter_integers(List<Object> values) {\n        // Step 1: Input Validation\n        if (values == null) {\n            return new ArrayList<>();\n        }\n\n        // Step 2: Iterate and Filter\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n\n        // Step 3: Return the Filtered List\n        return result;\n    }\n}\n"}
{"task_id": "Java/23", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        if (string == null) {\n            return 0;\n        }\n        return string.length();\n    }\n}\n"}
{"task_id": "Java/24", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n     */\n    public int largest_divisor(int n) {\n        // Step 1: Input Validation\n        if (n <= 1) {\n            return -1; // or throw an exception\n        }\n\n        // Step 2: Finding Divisors\n        for (int i = n - 1; i > 1; i--) {\n            if (n % i == 0) {\n                // Step 3: Selecting the Largest Divisor\n                return i;\n            }\n        }\n\n        // If no divisor is found (which should not happen for n > 1), return 1\n        return 1;\n    }\n}\n"}
{"task_id": "Java/25", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        \n        if (n < 2) {\n            return factors;\n        }\n        \n        int factor = 2;\n        while (n > 1) {\n            while (n % factor == 0) {\n                factors.add(factor);\n                n /= factor;\n            }\n            factor++;\n        }\n        \n        return factors;\n    }\n}\n"}
{"task_id": "Java/26", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        // Step 1: Count element frequencies\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        for (Integer num : numbers) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n\n        // Step 2 & 3: Identify non-duplicate elements and build the result list\n        List<Integer> result = new ArrayList<>();\n        for (Integer num : numbers) {\n            if (frequencyMap.get(num) == 1) {\n                result.add(num);\n            }\n        }\n\n        // Step 4: Return the result\n        return result;\n    }\n}\n"}
{"task_id": "Java/27", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"Hello\")\n    \"hELLO\"\n     */\n    public String flip_case(String string) {\n        // Step 1: Input Validation\n        if (string == null) {\n            return \"\"; // or throw an exception\n        }\n\n        // Step 2: Initialize StringBuilder\n        StringBuilder flippedString = new StringBuilder();\n\n        // Step 3: Iterate Through Characters\n        for (char c : string.toCharArray()) {\n            // Step 4: Character Case Check and Flip\n            if (Character.isUpperCase(c)) {\n                flippedString.append(Character.toLowerCase(c));\n            } else if (Character.isLowerCase(c)) {\n                flippedString.append(Character.toUpperCase(c));\n            } else {\n                // If the character is neither uppercase nor lowercase, append it as is\n                flippedString.append(c);\n            }\n        }\n\n        // Step 5: Return the Result\n        return flippedString.toString();\n    }\n}\n"}
{"task_id": "Java/28", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        if (strings.isEmpty()) {\n            return \"\";\n        }\n        \n        StringBuilder result = new StringBuilder();\n        for (String str : strings) {\n            result.append(str);\n        }\n        \n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/29", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix(List.of(), \"a\")\n    []\n    >>> filter_by_prefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        // Step 1: Input Validation\n        if (strings == null || prefix == null) {\n            return Collections.emptyList();\n        }\n\n        // Step 2: Filtering using Streams\n        return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/30", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> get_positive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> get_positive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> get_positive(List<Integer> l) {\n        // Step 1: Input Validation\n        if (l == null || l.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        // Step 2: Filtering Positive Numbers\n        List<Integer> positiveNumbers = l.stream()\n                                         .filter(num -> num > 0)\n                                         .collect(Collectors.toList());\n\n        // Step 3: Return the Result\n        return positiveNumbers;\n    }\n}\n"}
{"task_id": "Java/31", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    false\n    >>> is_prime(101)\n    true\n    >>> is_prime(11)\n    true\n    >>> is_prime(13441)\n    true\n    >>> is_prime(61)\n    true\n    >>> is_prime(4)\n    false\n    >>> is_prime(1)\n    false\n     */\n    public boolean is_prime(int n) {\n        // Step 1: Handle edge cases\n        if (n < 2) {\n            return false;\n        }\n        \n        // Step 2: Loop through potential divisors\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false; // n is divisible by i, so it's not prime\n            }\n        }\n        \n        // Step 3: If no divisors found, n is prime\n        return true;\n    }\n}\n"}
{"task_id": "Java/32", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> find_zero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> find_zero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double find_zero(List<Double> xs) {\n        // Validate input\n        if (xs.size() % 2 != 0 || xs.get(xs.size() - 1) == 0) {\n            throw new IllegalArgumentException(\"Input list must have an even number of coefficients and the largest non-zero coefficient at the end.\");\n        }\n        \n        // Use Newton-Raphson method to find a zero\n        double x0 = 0.0; // Initial guess\n        double tolerance = 1e-7;\n        int maxIterations = 1000;\n        \n        for (int i = 0; i < maxIterations; i++) {\n            double fx = poly(xs, x0);\n            double fpx = derivative(xs, x0);\n            \n            if (Math.abs(fx) < tolerance) {\n                return x0;\n            }\n            \n            x0 = x0 - fx / fpx;\n        }\n        \n        throw new RuntimeException(\"Failed to find a zero within the maximum number of iterations.\");\n    }\n    \n    private double derivative(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 1; i < xs.size(); i++) {\n            result += i * xs.get(i) * Math.pow(x, i - 1);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/33", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted in ascending order.\n    >>> sort_third(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sort_third(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sort_third(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        List<Integer> divisibleByThreeValues = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                divisibleByThreeValues.add(l.get(i));\n            }\n        }\n\n        Collections.sort(divisibleByThreeValues);\n\n        List<Integer> result = new ArrayList<>(l);\n        int sortedIndex = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.set(i, divisibleByThreeValues.get(sortedIndex++));\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/34", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        // Step 1: Input Validation\n        if (l == null) {\n            return new ArrayList<>(); // or throw an exception\n        }\n\n        // Step 2: Remove Duplicates\n        Set<Integer> uniqueSet = new HashSet<>(l);\n\n        // Step 3: Sort the Unique Elements\n        List<Integer> sortedUniqueList = new ArrayList<>(uniqueSet);\n        Collections.sort(sortedUniqueList);\n\n        // Step 4: Return the Result\n        return sortedUniqueList;\n    }\n}\n"}
{"task_id": "Java/35", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> max_element(Arrays.asList(1, 2, 3))\n    3\n    >>> max_element(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int max_element(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list cannot be null or empty\");\n        }\n        \n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        \n        return max;\n    }\n}\n"}
{"task_id": "Java/36", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n     */\n    public int fizz_buzz(int n) {\n        int count = 0;\n        \n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String numberStr = Integer.toString(i);\n                for (char c : numberStr.toCharArray()) {\n                    if (c == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/37", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sort_even(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sort_even(List<Integer> l) {\n        // Step 1: Extract values at even indices\n        List<Integer> evenValues = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 2) {\n            evenValues.add(l.get(i));\n        }\n        \n        // Step 2: Sort the extracted values\n        Collections.sort(evenValues);\n        \n        // Step 3: Reconstruct the list\n        List<Integer> newList = new ArrayList<>(l);\n        int evenIndex = 0;\n        for (int i = 0; i < l.size(); i += 2) {\n            newList.set(i, evenValues.get(evenIndex++));\n        }\n        \n        // Step 4: Return the result\n        return newList;\n    }\n}\n"}
{"task_id": "Java/38", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decode_cyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // uncycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n"}
{"task_id": "Java/39", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n     */\n    public int prime_fib(int n) {\n        if (n < 1) {\n            throw new IllegalArgumentException(\"n must be a positive integer\");\n        }\n\n        List<Integer> primeFibNumbers = new ArrayList<>();\n        int a = 1, b = 1;\n\n        while (primeFibNumbers.size() < n) {\n            int nextFib = a + b;\n            a = b;\n            b = nextFib;\n\n            if (isPrime(nextFib)) {\n                primeFibNumbers.add(nextFib);\n            }\n        }\n\n        return primeFibNumbers.get(n - 1);\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        if (num == 2) return true;\n        if (num % 2 == 0) return false;\n\n        for (int i = 3; i <= Math.sqrt(num); i += 2) {\n            if (num % i == 0) return false;\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/40", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triples_sum_to_zero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triples_sum_to_zero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triples_sum_to_zero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triples_sum_to_zero(Arrays.asList(1))\n    false\n     */\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        // Input Validation: Check if the list has at least three elements\n        if (l == null || l.size() < 3) {\n            return false;\n        }\n\n        // Sorting the List: Sort the list in ascending order\n        Collections.sort(l);\n\n        // Finding Triplets: Use a loop with two pointers to find triplets that sum to zero\n        for (int i = 0; i < l.size() - 2; i++) {\n            // Ensure the elements are distinct\n            if (i > 0 && l.get(i).equals(l.get(i - 1))) {\n                continue;\n            }\n\n            int left = i + 1;\n            int right = l.size() - 1;\n\n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n\n                if (sum == 0) {\n                    // Check if the elements are distinct\n                    if (left != i && right != i && left != right) {\n                        return true;\n                    }\n                    left++;\n                    right--;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n\n        // Returning the Result: If no valid triplet is found, return False\n        return false;\n    }\n}\n"}
{"task_id": "Java/41", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n     * Imagine a road that's a perfectly straight infinitely long line.\n     * n cars are driving left to right; simultaneously, a different set of n cars\n     * are driving right to left. The two sets of cars start out being very far from\n     * each other. All cars move in the same speed. Two cars are said to collide\n     * when a car that's moving left to right hits a car that's moving right to left.\n     * However, the cars are infinitely sturdy and strong; as a result, they continue moving\n     * in their trajectory as if they did not collide.\n     *\n     * This function outputs the number of such collisions.\n     */\n    public int car_race_collision(int n) {\n        return n * n;\n    }\n}\n"}
{"task_id": "Java/42", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incr_list(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incr_list(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incr_list(List<Integer> l) {\n        if (l == null) {\n            return Collections.emptyList();\n        }\n        \n        return l.stream()\n                .map(num -> num + 1)\n                .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/43", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairs_sum_to_zero(Arrays.asList(1))\n    false\n     */\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        if (l == null || l.size() < 2) {\n            return false;\n        }\n        \n        Set<Integer> seen = new HashSet<>();\n        \n        for (int num : l) {\n            int complement = -num;\n            if (seen.contains(complement)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        \n        return false;\n    }\n}\n"}
{"task_id": "Java/44", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\n    >>> change_base(7, 2)\n    \"111\"\n     */\n    public String change_base(int x, int base) {\n        if (base < 2 || base > 9) {\n            throw new IllegalArgumentException(\"Base must be between 2 and 9 inclusive.\");\n        }\n        \n        if (x == 0) {\n            return \"0\";\n        }\n        \n        StringBuilder result = new StringBuilder();\n        int number = Math.abs(x);\n        \n        while (number > 0) {\n            result.append(number % base);\n            number /= base;\n        }\n        \n        if (x < 0) {\n            result.append('-');\n        }\n        \n        return result.reverse().toString();\n    }\n}\n"}
{"task_id": "Java/45", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n     */\n    public double triangle_area(double a, double h) {\n        if (a <= 0 || h <= 0) {\n            throw new IllegalArgumentException(\"Base and height must be positive numbers.\");\n        }\n        double area = 0.5 * a * h;\n        return area;\n    }\n}\n"}
{"task_id": "Java/46", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        // Step 1: Initialize the array with the first four Fib4 values\n        int[] fib4Array = {0, 0, 2, 0};\n        \n        // Step 2: Handle edge cases\n        if (n < 4) {\n            return fib4Array[n];\n        }\n        \n        // Step 3: Iterate to compute the Fib4 sequence\n        for (int i = 4; i <= n; i++) {\n            int current = fib4Array[0] + fib4Array[1] + fib4Array[2] + fib4Array[3];\n            // Shift the array elements to the left\n            fib4Array[0] = fib4Array[1];\n            fib4Array[1] = fib4Array[2];\n            fib4Array[2] = fib4Array[3];\n            fib4Array[3] = current;\n        }\n        \n        // Step 4: Return the result\n        return fib4Array[3];\n    }\n}\n"}
{"task_id": "Java/47", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    8.0\n     */\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 1) {\n            return l.get(size / 2);\n        } else {\n            int mid1 = l.get(size / 2 - 1);\n            int mid2 = l.get(size / 2);\n            return (mid1 + mid2) / 2.0;\n        }\n    }\n}\n"}
{"task_id": "Java/48", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n     */\n    public boolean is_palindrome(String text) {\n        if (text == null) {\n            return false;\n        }\n        if (text.length() <= 1) {\n            return true;\n        }\n        String reversedText = new StringBuilder(text).reverse().toString();\n        return text.equals(reversedText);\n    }\n}\n"}
{"task_id": "Java/49", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        // Input validation\n        if (p <= 0) {\n            throw new IllegalArgumentException(\"Modulus p must be greater than 0\");\n        }\n        \n        // Special cases\n        if (n == 0) {\n            return 1;\n        }\n        if (p == 1) {\n            return 0;\n        }\n        \n        // Exponentiation by squaring\n        return exponentiationBySquaring(2, n, p);\n    }\n\n    private int exponentiationBySquaring(int base, int exponent, int modulus) {\n        long result = 1;\n        long baseLong = base % modulus;\n        \n        while (exponent > 0) {\n            if (exponent % 2 == 1) {\n                result = (result * baseLong) % modulus;\n            }\n            exponent = exponent >> 1;\n            baseLong = (baseLong * baseLong) % modulus;\n        }\n        \n        return (int) result;\n    }\n}\n"}
{"task_id": "Java/50", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (Character.isLowerCase(ch)) {\n                sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n            } else if (Character.isUpperCase(ch)) {\n                sb.append((char) ('A' + ((ch + 5 - 'A') % 26)));\n            } else {\n                sb.append(ch); // Non-alphabetic characters remain unchanged\n            }\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decode_shift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (Character.isLowerCase(ch)) {\n                sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26)));\n            } else if (Character.isUpperCase(ch)) {\n                sb.append((char) ('A' + ((ch - 5 - 'A' + 26) % 26)));\n            } else {\n                sb.append(ch); // Non-alphabetic characters remain unchanged\n            }\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/51", "generation": "import java.util.*;\n\nclass Solution {\n    public String remove_vowels(String text) {\n        // Step 1: Define vowels\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        \n        // Step 2: Initialize output string\n        StringBuilder result = new StringBuilder();\n        \n        // Step 3: Iterate through input string\n        for (char c : text.toCharArray()) {\n            // Step 4: Check if character is a vowel\n            if (!vowels.contains(c)) {\n                // Step 5: Build output string\n                result.append(c);\n            }\n        }\n        \n        // Step 6: Return output string\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/52", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> below_threshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean below_threshold(List<Integer> l, int t) {\n        if (l == null || l.isEmpty()) {\n            return false;\n        }\n        \n        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/53", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}\n"}
{"task_id": "Java/54", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same kind of characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean same_chars(String s0, String s1) {\n        // Step 1: Input validation\n        if (s0 == null || s1 == null) return false;\n        if (s0.isEmpty() && s1.isEmpty()) return true;\n        if (s0.isEmpty() || s1.isEmpty()) return false;\n\n        // Step 2: Count frequencies of characters in both strings\n        Map<Character, Integer> freq0 = countFrequencies(s0);\n        Map<Character, Integer> freq1 = countFrequencies(s1);\n\n        // Step 3: Compare the frequency maps\n        return freq0.equals(freq1);\n    }\n\n    private Map<Character, Integer> countFrequencies(String s) {\n        Map<Character, Integer> freqMap = new HashMap<>();\n        for (char c : s.toCharArray()) {\n            freqMap.put(c, freqMap.getOrDefault(c, 0) + 1);\n        }\n        return freqMap;\n    }\n}\n"}
{"task_id": "Java/55", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Input must be a non-negative integer.\");\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        \n        int a = 0;\n        int b = 1;\n        int result = 0;\n        \n        for (int i = 2; i <= n; i++) {\n            result = a + b;\n            a = b;\n            b = result;\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/56", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n     */\n    public boolean correct_bracketing(String brackets) {\n        // Input validation: Check if the input string contains only \"<\" and \">\"\n        if (!brackets.matches(\"[<>]+\")) {\n            throw new IllegalArgumentException(\"Input string must contain only '<' and '>' characters.\");\n        }\n\n        // Use a stack to keep track of unmatched opening brackets\n        Stack<Character> stack = new Stack<>();\n\n        // Iterate through each character in the input string\n        for (char ch : brackets.toCharArray()) {\n            if (ch == '<') {\n                // If the character is an opening bracket, push it onto the stack\n                stack.push(ch);\n            } else if (ch == '>') {\n                // If the character is a closing bracket, check if there is a corresponding opening bracket\n                if (stack.isEmpty() || stack.pop() != '<') {\n                    // If the stack is empty or the top of the stack is not an opening bracket, return false\n                    return false;\n                }\n            }\n        }\n\n        // After the iteration, check if the stack is empty\n        // If the stack is empty, all brackets are matched; otherwise, there are unmatched opening brackets\n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/57", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l == null || l.size() <= 1) {\n            return true; // A single element list is trivially monotonic\n        }\n\n        boolean isIncreasing = true;\n        boolean isDecreasing = true;\n\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1)) {\n                isIncreasing = false;\n            }\n            if (l.get(i) < l.get(i + 1)) {\n                isDecreasing = false;\n            }\n        }\n\n        return isIncreasing || isDecreasing;\n    }\n}\n"}
{"task_id": "Java/58", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        // Step 1: Input Validation\n        if (l1 == null || l2 == null) {\n            return Collections.emptyList();\n        }\n\n        // Step 2: Intersection Calculation\n        Set<Integer> set = new HashSet<>(l1);\n        List<Integer> commonElements = new ArrayList<>();\n        for (Integer num : l2) {\n            if (set.contains(num)) {\n                commonElements.add(num);\n                set.remove(num); // To ensure uniqueness\n            }\n        }\n\n        // Step 3: Sorting\n        Integer[] commonArray = commonElements.toArray(new Integer[0]);\n        Arrays.sort(commonArray);\n        return Arrays.asList(commonArray);\n    }\n}\n"}
{"task_id": "Java/59", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n     */\n    public int largest_prime_factor(int n) {\n        List<Integer> primeFactors = primeFactors(n);\n        return Collections.max(primeFactors);\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        if (num == 2) return true;\n        if (num % 2 == 0) return false;\n        for (int i = 3; i <= Math.sqrt(num); i += 2) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    private List<Integer> primeFactors(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n / i; i++) {\n            while (n % i == 0) {\n                if (isPrime(i)) {\n                    factors.add(i);\n                }\n                n /= i;\n            }\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}\n"}
{"task_id": "Java/60", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n     */\n    public int sum_to_n(int n) {\n        if (n < 1) {\n            throw new IllegalArgumentException(\"Input must be a positive integer.\");\n        }\n        return n * (n + 1) / 2;\n    }\n}\n"}
{"task_id": "Java/61", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n     */\n    public boolean correct_bracketing(String brackets) {\n        if (brackets == null) {\n            return false;\n        }\n        \n        Stack<Character> stack = new Stack<>();\n        \n        for (char ch : brackets.toCharArray()) {\n            if (ch == '(') {\n                stack.push(ch);\n            } else if (ch == ')') {\n                if (stack.isEmpty() || stack.pop() != '(') {\n                    return false;\n                }\n            } else {\n                return false; // Invalid character in the string\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/62", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        if (xs == null || xs.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list cannot be null or empty\");\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/63", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Input must be non-negative\");\n        }\n        \n        if (n == 0 || n == 1) {\n            return 0;\n        }\n        \n        if (n == 2) {\n            return 1;\n        }\n        \n        int[] memo = new int[n + 1];\n        memo[0] = 0;\n        memo[1] = 0;\n        memo[2] = 1;\n        \n        for (int i = 3; i <= n; i++) {\n            memo[i] = memo[i - 1] + memo[i - 2] + memo[i - 3];\n        }\n        \n        return memo[n];\n    }\n}\n"}
{"task_id": "Java/64", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n     */\n    public int vowels_count(String s) {\n        // Step 1: Input Validation\n        if (s == null || s.isEmpty()) {\n            return 0;\n        }\n\n        // Step 2: Convert to Lowercase\n        s = s.toLowerCase();\n\n        // Step 3: Initialize Counter\n        int count = 0;\n\n        // Step 4: Iterate Through the String\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            } else if (c == 'y' && i == s.length() - 1) {\n                count++;\n            }\n        }\n\n        // Step 5: Return the Result\n        return count;\n    }\n}\n"}
{"task_id": "Java/65", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n     */\n    public String circular_shift(int x, int shift) {\n        // Convert the integer x to a string to easily access individual digits\n        String xStr = String.valueOf(x);\n        \n        // Convert the string to a list of characters for easy manipulation\n        List<Character> digits = new ArrayList<>();\n        for (char c : xStr.toCharArray()) {\n            digits.add(c);\n        }\n        \n        // Calculate the number of digits in x\n        int numDigits = digits.size();\n        \n        // Check if the shift value is greater than the number of digits\n        if (shift >= numDigits) {\n            // If shift is greater than or equal to the number of digits, reverse the digits\n            Collections.reverse(digits);\n        } else {\n            // Calculate the effective shift by taking shift % number_of_digits\n            int effectiveShift = shift % numDigits;\n            \n            // Shift the digits to the right by the effective shift\n            Collections.rotate(digits, effectiveShift);\n        }\n        \n        // Convert the list of characters back to a string\n        StringBuilder sb = new StringBuilder();\n        for (char c : digits) {\n            sb.append(c);\n        }\n        \n        // Return the resulting string\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/66", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        \n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        \n        return sum;\n    }\n}\n"}
{"task_id": "Java/67", "generation": "import java.util.regex.*;\n\nclass Solution {\n    public int fruit_distribution(String s, int n) {\n        // Step 1: Extract the number of apples and oranges using regex\n        Pattern pattern = Pattern.compile(\"(\\\\d+) apples and (\\\\d+) oranges\");\n        Matcher matcher = pattern.matcher(s);\n        \n        if (matcher.find()) {\n            int apples = Integer.parseInt(matcher.group(1));\n            int oranges = Integer.parseInt(matcher.group(2));\n            \n            // Step 2: Calculate the number of mangoes\n            int mangoes = n - apples - oranges;\n            \n            // Step 3: Return the result\n            return mangoes;\n        } else {\n            // Handle the case where the input string format is incorrect\n            throw new IllegalArgumentException(\"Invalid input format\");\n        }\n    }\n}\n"}
{"task_id": "Java/68", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smallest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        int smallestEven = Integer.MAX_VALUE;\n        int smallestIndex = -1;\n\n        for (int i = 0; i < arr.size(); i++) {\n            int current = arr.get(i);\n            if (current % 2 == 0) {\n                if (current < smallestEven) {\n                    smallestEven = current;\n                    smallestIndex = i;\n                }\n            }\n        }\n\n        if (smallestIndex == -1) {\n            return new ArrayList<>();\n        }\n\n        return Arrays.asList(smallestEven, smallestIndex);\n    }\n}\n"}
{"task_id": "Java/69", "generation": "import java.util.*;\n\nclass Solution {\n    public int search(List<Integer> lst) {\n        // Step 1: Count the frequency of each integer\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n\n        // Step 2: Filter integers based on frequency\n        List<Integer> filteredList = new ArrayList<>();\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int num = entry.getKey();\n            int freq = entry.getValue();\n            if (freq >= num) {\n                filteredList.add(num);\n            }\n        }\n\n        // Step 3: Find the greatest integer from the filtered list\n        if (filteredList.isEmpty()) {\n            return -1;\n        } else {\n            return Collections.max(filteredList);\n        }\n    }\n}\n"}
{"task_id": "Java/70", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strange_sort_list(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strange_sort_list(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        if (lst == null || lst.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        Collections.sort(lst);\n        List<Integer> result = new ArrayList<>();\n        int left = 0;\n        int right = lst.size() - 1;\n\n        while (left <= right) {\n            if (left <= right) {\n                result.add(lst.get(left));\n                left++;\n            }\n            if (left <= right) {\n                result.add(lst.get(right));\n                right--;\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/71", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n     */\n    public double triangle_area(double a, double b, double c) {\n        // Step 1: Validation of Triangle Sides\n        if (!(a + b > c && a + c > b && b + c > a)) {\n            return -1;\n        }\n\n        // Step 2: Calculate the Semi-Perimeter\n        double s = (a + b + c) / 2;\n\n        // Step 3: Calculate the Area Using Heron's Formula\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\n        // Step 4: Round the Area to Two Decimal Places\n        area = Math.round(area * 100.0) / 100.0;\n\n        // Step 5: Return the Result\n        return area;\n    }\n}\n"}
{"task_id": "Java/72", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean will_it_fly(List<Integer> q, int w) {\n        if (q == null) {\n            return false;\n        }\n\n        return isPalindromic(q) && isSumWithinLimit(calculateSum(q), w);\n    }\n\n    private boolean isPalindromic(List<Integer> q) {\n        int left = 0;\n        int right = q.size() - 1;\n\n        while (left < right) {\n            if (!q.get(left).equals(q.get(right))) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n\n    private int calculateSum(List<Integer> q) {\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n        return sum;\n    }\n\n    private boolean isSumWithinLimit(int sum, int w) {\n        return sum <= w;\n    }\n}\n"}
{"task_id": "Java/73", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallest_change(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallest_change(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallest_change(List<Integer> arr) {\n        // Step 1: Input Validation\n        if (arr == null || arr.isEmpty()) {\n            throw new IllegalArgumentException(\"Input array cannot be null or empty\");\n        }\n\n        // Step 2: Initialize Counters\n        int changes = 0;\n        int n = arr.size();\n\n        // Step 3: Iterate Through the Array\n        for (int i = 0; i < n / 2; i++) {\n            if (arr.get(i) != arr.get(n - i - 1)) {\n                changes++;\n            }\n        }\n\n        // Step 4: Return the Result\n        return changes;\n    }\n}\n"}
{"task_id": "Java/74", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match(Arrays.asList(), Arrays.asList()) -> []\n    total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    total_match(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        int totalCharsLst1 = countTotalChars(lst1);\n        int totalCharsLst2 = countTotalChars(lst2);\n\n        if (totalCharsLst1 <= totalCharsLst2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n\n    private int countTotalChars(List<String> lst) {\n        int totalChars = 0;\n        for (String str : lst) {\n            totalChars += str.length();\n        }\n        return totalChars;\n    }\n}\n"}
{"task_id": "Java/75", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that the prime number is less than 100.\n    Example:\n    is_multiply_prime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean is_multiply_prime(int a) {\n        // Step 1: Generate primes less than 100\n        List<Integer> primes = generatePrimes(100);\n        \n        // Step 2: Prime factorization\n        for (int i = 0; i < primes.size(); i++) {\n            for (int j = i; j < primes.size(); j++) {\n                for (int k = j; k < primes.size(); k++) {\n                    int prime1 = primes.get(i);\n                    int prime2 = primes.get(j);\n                    int prime3 = primes.get(k);\n                    if (prime1 * prime2 * prime3 == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        \n        // Step 3: No valid combination found\n        return false;\n    }\n    \n    private List<Integer> generatePrimes(int limit) {\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < limit; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/76", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n     */\n    public boolean is_simple_power(int x, int n) {\n        // Input validation\n        if (x <= 0 || n <= 0) {\n            return false;\n        }\n        \n        // Special case handling\n        if (n == 1) {\n            return x == 1;\n        }\n        \n        if (x == 1) {\n            return n > 1;\n        }\n        \n        // Power calculation loop\n        int power = 1;\n        while (power < x) {\n            power *= n;\n            if (power == x) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n}\n"}
{"task_id": "Java/77", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        double cubeRoot = Math.cbrt(a);\n        int intCubeRoot = (int) cubeRoot;\n        if (Math.abs(cubeRoot - intCubeRoot) < 1e-10) {\n            if (intCubeRoot * intCubeRoot * intCubeRoot == a) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/78", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int hex_key(String num) {\n        // Step 1: Define the set of prime hexadecimal digits\n        Set<Character> primeHexDigits = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        // Step 2: Initialize the counter\n        int primeCount = 0;\n        \n        // Step 3: Iterate through the input string\n        for (char ch : num.toCharArray()) {\n            // Step 4: Check if the character is a prime hexadecimal digit\n            if (primeHexDigits.contains(ch)) {\n                primeCount++;\n            }\n        }\n        \n        // Step 5: Return the count\n        return primeCount;\n    }\n}\n"}
{"task_id": "Java/79", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   // returns \"db1111db\"\n    decimal_to_binary(32)   // returns \"db100000db\"\n     */\n    public String decimal_to_binary(int decimal) {\n        // Convert decimal to binary\n        String binary = Integer.toBinaryString(decimal);\n        \n        // Format the binary string\n        String formattedBinary = \"db\" + binary + \"db\";\n        \n        // Return the result\n        return formattedBinary;\n    }\n}\n"}
{"task_id": "Java/80", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => false\n    is_happy(aa) => false\n    is_happy(abcd) => true\n    is_happy(aabb) => false\n    is_happy(adb) => true\n    is_happy(xyy) => false\n     */\n    public boolean is_happy(String s) {\n        // Input validation\n        if (s == null || s.length() < 3) {\n            return false;\n        }\n\n        // Iterate through the string\n        for (int i = 0; i < s.length() - 2; i++) {\n            // Extract the substring of length 3\n            String substring = s.substring(i, i + 3);\n            \n            // Check if all characters in the substring are distinct\n            if (substring.charAt(0) == substring.charAt(1) ||\n                substring.charAt(0) == substring.charAt(2) ||\n                substring.charAt(1) == substring.charAt(2)) {\n                return false;\n            }\n        }\n\n        // If no non-distinct sets of 3 consecutive characters are found, return true\n        return true;\n    }\n}\n"}
{"task_id": "Java/81", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        // Step 1: Input Validation\n        if (grades == null) {\n            throw new IllegalArgumentException(\"Input list cannot be null\");\n        }\n        \n        // Step 2: Initialize the result list\n        List<String> letterGrades = new ArrayList<>();\n        \n        // Step 3: Iterate through the grades and map each to a letter grade\n        for (double gpa : grades) {\n            String letterGrade = mapGpaToLetterGrade(gpa);\n            letterGrades.add(letterGrade);\n        }\n        \n        // Step 4: Return the result list\n        return letterGrades;\n    }\n    \n    private String mapGpaToLetterGrade(double gpa) {\n        if (gpa == 4.0) return \"A+\";\n        else if (gpa > 3.7) return \"A\";\n        else if (gpa > 3.3) return \"A-\";\n        else if (gpa > 3.0) return \"B+\";\n        else if (gpa > 2.7) return \"B\";\n        else if (gpa > 2.3) return \"B-\";\n        else if (gpa > 2.0) return \"C+\";\n        else if (gpa > 1.7) return \"C\";\n        else if (gpa > 1.3) return \"C-\";\n        else if (gpa > 1.0) return \"D+\";\n        else if (gpa > 0.7) return \"D\";\n        else if (gpa > 0.0) return \"D-\";\n        else if (gpa == 0.0) return \"E\";\n        else throw new IllegalArgumentException(\"Invalid GPA: \" + gpa);\n    }\n}\n"}
{"task_id": "Java/82", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    prime_length(\"Hello\") == true\n    prime_length(\"abcdcba\") == true\n    prime_length(\"kittens\") == true\n    prime_length(\"orange\") == false\n     */\n    public boolean prime_length(String string) {\n        int length = string.length();\n        return isPrime(length);\n    }\n\n    private boolean isPrime(int number) {\n        if (number < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(number); i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/83", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int starts_one_ends(int n) {\n        // Step 1: Define the range of n-digit numbers\n        int min = (int) Math.pow(10, n - 1);\n        int max = (int) Math.pow(10, n) - 1;\n        \n        // Step 2: Count numbers starting with '1'\n        int countStartsWithOne = max / 10; // For n=3, this is 99 (100 to 199)\n        \n        // Step 3: Count numbers ending with '1'\n        int countEndsWithOne = (max - min + 1) / 10; // For n=3, this is 90 (101, 111, ..., 991)\n        \n        // Step 4: Count numbers that both start and end with '1'\n        int countBoth = 0;\n        for (int i = min; i <= max; i++) {\n            if (i / min == 1 && i % 10 == 1) {\n                countBoth++;\n            }\n        }\n        \n        // Step 5: Calculate the final count\n        int totalCount = countStartsWithOne + countEndsWithOne - countBoth;\n        \n        return totalCount;\n    }\n}\n"}
{"task_id": "Java/84", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return in binary the total sum of its digits.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        // Input validation\n        if (N < 0 || N > 10000) {\n            throw new IllegalArgumentException(\"N must be between 0 and 10000 inclusive.\");\n        }\n\n        // Sum of digits calculation\n        int sum = 0;\n        while (N > 0) {\n            sum += N % 10;\n            N /= 10;\n        }\n\n        // Binary conversion\n        return Integer.toBinaryString(sum);\n    }\n}\n"}
{"task_id": "Java/85", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 != 0 && lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/86", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle(\"Hi\") returns \"Hi\"\n    anti_shuffle(\"hello\") returns \"ehllo\"\n    anti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String anti_shuffle(String s) {\n        // Step 1: Input Parsing\n        String[] words = s.split(\" \");\n        List<String> sortedWords = new ArrayList<>();\n        \n        // Step 2: Character Sorting\n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            sortedWords.add(new String(chars));\n        }\n        \n        // Step 3: Reconstruction\n        StringBuilder result = new StringBuilder();\n        int wordIndex = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == ' ') {\n                result.append(' ');\n            } else {\n                result.append(sortedWords.get(wordIndex));\n                wordIndex++;\n                while (i < s.length() && s.charAt(i) != ' ') {\n                    i++;\n                }\n                i--; // Adjust for the loop increment\n            }\n        }\n        \n        // Step 4: Edge Cases Handling\n        if (s.isEmpty()) {\n            return \"\";\n        }\n        \n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/87", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        // Step 1: Initialize the result list\n        List<List<Integer>> result = new ArrayList<>();\n        \n        // Step 2: Iterate through the nested list\n        for (int row = 0; row < lst.size(); row++) {\n            for (int col = 0; col < lst.get(row).size(); col++) {\n                if (lst.get(row).get(col) == x) {\n                    result.add(Arrays.asList(row, col));\n                }\n            }\n        }\n        \n        // Step 3: Sort the coordinates\n        Collections.sort(result, (a, b) -> {\n            if (a.get(0).equals(b.get(0))) {\n                return b.get(1).compareTo(a.get(1)); // Descending order by column\n            }\n            return a.get(0).compareTo(b.get(0)); // Ascending order by row\n        });\n        \n        // Step 4: Return the sorted list\n        return result;\n    }\n}\n"}
{"task_id": "Java/88", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> array) {\n        // Step 1: Handle edge cases\n        if (array.isEmpty() || array.size() == 1) {\n            return new ArrayList<>(array);\n        }\n\n        // Step 2: Calculate the sum of the first and last elements\n        int firstElement = array.get(0);\n        int lastElement = array.get(array.size() - 1);\n        int sum = firstElement + lastElement;\n\n        // Step 3: Determine the sorting order based on the sum\n        boolean isAscending = (sum % 2 != 0);\n\n        // Step 4: Create a copy of the original list\n        List<Integer> copy = new ArrayList<>(array);\n\n        // Step 5: Sort the copy based on the determined order\n        if (isAscending) {\n            Collections.sort(copy);\n        } else {\n            Collections.sort(copy, Collections.reverseOrder());\n        }\n\n        // Step 6: Return the sorted copy\n        return copy;\n    }\n}\n"}
{"task_id": "Java/89", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        StringBuilder encrypted = new StringBuilder();\n        int shift = 4;\n\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                char base = Character.isLowerCase(c) ? 'a' : 'A';\n                char shiftedChar = (char) (base + (c - base + shift) % 26);\n                encrypted.append(shiftedChar);\n            } else {\n                encrypted.append(c);\n            }\n        }\n\n        return encrypted.toString();\n    }\n}\n"}
{"task_id": "Java/90", "generation": "import java.util.*;\n\nclass Solution {\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        // Step 1: Input Validation\n        if (lst == null) {\n            throw new IllegalArgumentException(\"Input list cannot be null\");\n        }\n        if (lst.isEmpty() || lst.size() < 2) {\n            return Optional.empty();\n        }\n\n        // Step 2: Finding the Smallest and Second Smallest Elements\n        Integer smallest = null;\n        Integer secondSmallest = null;\n\n        // Find the smallest element\n        for (Integer num : lst) {\n            if (smallest == null || num < smallest) {\n                smallest = num;\n            }\n        }\n\n        // Find the second smallest element\n        for (Integer num : lst) {\n            if (!num.equals(smallest)) {\n                if (secondSmallest == null || num < secondSmallest) {\n                    secondSmallest = num;\n                }\n            }\n        }\n\n        // Step 3: Returning the Result\n        return secondSmallest != null ? Optional.of(secondSmallest) : Optional.empty();\n    }\n}\n"}
{"task_id": "Java/91", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int is_bored(String S) {\n        // Step 1.2: Validate input\n        if (S == null || S.isEmpty()) {\n            return 0;\n        }\n\n        // Step 2.1: Split the string into sentences\n        String[] sentences = S.split(\"\\\\.|\\\\?|\\\\!\");\n\n        // Step 3.1: Initialize counter\n        int boredomCount = 0;\n\n        // Step 3.2: Iterate through sentences\n        for (String sentence : sentences) {\n            // Step 2.2: Trim whitespace\n            sentence = sentence.trim();\n\n            // Step 3.3: Check if sentence starts with \"I\"\n            if (sentence.startsWith(\"I\")) {\n                // Step 3.4: Increment counter\n                boredomCount++;\n            }\n        }\n\n        // Step 4.1: Return the count\n        return boredomCount;\n    }\n}\n"}
{"task_id": "Java/92", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) -> true\n\n    any_int(3, 2, 2) -> false\n\n    any_int(3, -2, 1) -> true\n\n    any_int(3.6, -2.2, 2) -> false\n     */\n    public boolean any_int(Object x, Object y, Object z) {\n        // Input Validation\n        if (!(x instanceof Integer) || !(y instanceof Integer) || !(z instanceof Integer)) {\n            return false;\n        }\n\n        // Cast to integers\n        int a = (Integer) x;\n        int b = (Integer) y;\n        int c = (Integer) z;\n\n        // Sum Calculation and Comparison\n        if (a == b + c || b == a + c || c == a + b) {\n            return true;\n        }\n\n        return false;\n    }\n}\n"}
{"task_id": "Java/93", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        StringBuilder encodedMessage = new StringBuilder();\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        \n        for (char c : message.toCharArray()) {\n            char swappedCaseChar = Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c);\n            \n            if (vowels.contains(swappedCaseChar)) {\n                char base = Character.isUpperCase(swappedCaseChar) ? 'A' : 'a';\n                swappedCaseChar = (char) (base + (swappedCaseChar - base + 2) % 26);\n            }\n            \n            encodedMessage.append(swappedCaseChar);\n        }\n        \n        return encodedMessage.toString();\n    }\n}\n"}
{"task_id": "Java/94", "generation": "import java.util.*;\n\nclass Solution {\n    public int skjkasdkd(List<Integer> lst) {\n        // Step 1: Filter prime numbers\n        List<Integer> primeNumbers = new ArrayList<>();\n        for (int num : lst) {\n            if (isPrime(num)) {\n                primeNumbers.add(num);\n            }\n        }\n        \n        // Step 2: Find the largest prime\n        int largestPrime = Integer.MIN_VALUE;\n        for (int prime : primeNumbers) {\n            if (prime > largestPrime) {\n                largestPrime = prime;\n            }\n        }\n        \n        // Step 3: Sum the digits of the largest prime\n        return sumOfDigits(largestPrime);\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n    \n    private int sumOfDigits(int num) {\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/95", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings and all keys are in lower case or  in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        boolean allLowerCase = true;\n        boolean allUpperCase = true;\n\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n\n            String strKey = (String) key;\n            if (!strKey.equals(strKey.toLowerCase())) {\n                allLowerCase = false;\n            }\n            if (!strKey.equals(strKey.toUpperCase())) {\n                allUpperCase = false;\n            }\n\n            if (!allLowerCase && !allUpperCase) {\n                return false;\n            }\n        }\n\n        return allLowerCase || allUpperCase;\n    }\n}\n"}
{"task_id": "Java/96", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> count_up_to(int n) {\n        if (n < 2) {\n            return new ArrayList<>();\n        }\n        \n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        \n        return primes;\n    }\n    \n    private boolean isPrime(int num) {\n        if (num < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/97", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int unitDigitA = Math.abs(a) % 10;\n        int unitDigitB = Math.abs(b) % 10;\n        return unitDigitA * unitDigitB;\n    }\n}\n"}
{"task_id": "Java/98", "generation": "import java.util.*;\n\nclass Solution {\n    public int count_upper(String s) {\n        // Step 1: Initialize variables\n        int count = 0;\n        Set<Character> uppercaseVowels = new HashSet<>(Arrays.asList('A', 'E', 'I', 'O', 'U'));\n        \n        // Step 2: Loop through the string at even indices\n        for (int i = 0; i < s.length(); i += 2) {\n            char currentChar = s.charAt(i);\n            \n            // Step 3: Check if the character is an uppercase vowel\n            if (uppercaseVowels.contains(currentChar)) {\n                count++;\n            }\n        }\n        \n        // Step 4: Return the count\n        return count;\n    }\n}\n"}
{"task_id": "Java/99", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int closest_integer(String value) {\n        try {\n            double doubleValue = Double.parseDouble(value);\n            long roundedValue = Math.round(doubleValue);\n            \n            if (doubleValue % 1 == 0.5) {\n                if (doubleValue > 0) {\n                    roundedValue = (long) Math.ceil(doubleValue);\n                } else {\n                    roundedValue = (long) Math.floor(doubleValue);\n                }\n            }\n            \n            return (int) roundedValue;\n        } catch (NumberFormatException e) {\n            // Handle invalid input, e.g., return 0 or throw a custom exception\n            return 0;\n        }\n    }\n}\n"}
{"task_id": "Java/100", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> stonesList = new ArrayList<>();\n        int currentStones = n;\n        \n        for (int i = 0; i < n; i++) {\n            stonesList.add(currentStones);\n            if (currentStones % 2 == 0) {\n                currentStones += 2; // Next even number\n            } else {\n                currentStones += 2; // Next odd number\n            }\n        }\n        \n        return stonesList;\n    }\n}\n"}
{"task_id": "Java/101", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> words_string(String s) {\n        // Step 1: Input Validation\n        if (s == null || s.isEmpty()) {\n            return Collections.emptyList();\n        }\n        \n        // Step 2: Tokenization using regular expression\n        String[] words = s.split(\"[,\\\\s]+\");\n        \n        // Step 3: Convert array to List\n        return Arrays.asList(words);\n    }\n}\n"}
{"task_id": "Java/102", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n     */\n    public int choose_num(int x, int y) {\n        // Input validation\n        if (x <= 0 || y <= 0 || x > y) {\n            return -1;\n        }\n\n        int largestEven = -1;\n\n        // Iterate through the range [x, y]\n        for (int i = x; i <= y; i++) {\n            // Check if the number is even\n            if (i % 2 == 0) {\n                // Update largestEven if the current even number is larger\n                if (largestEven == -1 || i > largestEven) {\n                    largestEven = i;\n                }\n            }\n        }\n\n        // Return the result\n        return largestEven;\n    }\n}\n"}
{"task_id": "Java/103", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"1111\"\n    rounded_avg(20, 33) => \"11011\"\n     */\n    public Object rounded_avg(int n, int m) {\n        // Step 1.1: Check if n is greater than m\n        if (n > m) {\n            // Step 1.2: If n > m, return -1\n            return -1;\n        }\n\n        // Step 2.1: Initialize a variable sum to 0\n        int sum = 0;\n\n        // Step 2.2: Iterate from n to m (inclusive), adding each integer to sum\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n\n        // Step 2.3: Calculate the count of integers from n to m (which is m - n + 1)\n        int count = m - n + 1;\n\n        // Step 2.4: Compute the average by dividing sum by the count\n        double average = (double) sum / count;\n\n        // Step 3.1: Use Math.round() to round the average to the nearest integer\n        int roundedAverage = (int) Math.round(average);\n\n        // Step 4.1: Convert the rounded integer to a binary string using Integer.toBinaryString()\n        String binaryString = Integer.toBinaryString(roundedAverage);\n\n        // Step 5.1: Return the binary string\n        return binaryString;\n    }\n}\n"}
{"task_id": "Java/104", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> unique_digits(List<Integer> x) {\n        if (x == null) {\n            return new ArrayList<>();\n        }\n\n        List<Integer> result = new ArrayList<>();\n\n        for (int num : x) {\n            if (!containsEvenDigit(num)) {\n                result.add(num);\n            }\n        }\n\n        Collections.sort(result);\n        return result;\n    }\n\n    private boolean containsEvenDigit(int num) {\n        String numStr = String.valueOf(num);\n        for (char digit : numStr.toCharArray()) {\n            if (digit == '0' || digit == '2' || digit == '4' || digit == '6' || digit == '8') {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/105", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> by_length(List<Integer> arr) {\n        // Step 1: Filter valid numbers\n        List<Integer> validNumbers = filterValidNumbers(arr);\n        \n        // Step 2: Sort the list\n        List<Integer> sortedList = sortList(validNumbers);\n        \n        // Step 3: Reverse the sorted list\n        List<Integer> reversedList = reverseList(sortedList);\n        \n        // Step 4: Map numbers to names\n        List<String> result = mapNumbersToNames(reversedList);\n        \n        // Step 5: Return the result\n        return result;\n    }\n    \n    private List<Integer> filterValidNumbers(List<Integer> arr) {\n        List<Integer> validNumbers = new ArrayList<>();\n        for (int num : arr) {\n            if (num >= 1 && num <= 9) {\n                validNumbers.add(num);\n            }\n        }\n        return validNumbers;\n    }\n    \n    private List<Integer> sortList(List<Integer> arr) {\n        Collections.sort(arr);\n        return arr;\n    }\n    \n    private List<Integer> reverseList(List<Integer> arr) {\n        Collections.reverse(arr);\n        return arr;\n    }\n    \n    private List<String> mapNumbersToNames(List<Integer> arr) {\n        Map<Integer, String> numberToName = new HashMap<>();\n        numberToName.put(1, \"One\");\n        numberToName.put(2, \"Two\");\n        numberToName.put(3, \"Three\");\n        numberToName.put(4, \"Four\");\n        numberToName.put(5, \"Five\");\n        numberToName.put(6, \"Six\");\n        numberToName.put(7, \"Seven\");\n        numberToName.put(8, \"Eight\");\n        numberToName.put(9, \"Nine\");\n        \n        List<String> result = new ArrayList<>();\n        for (int num : arr) {\n            result.add(numberToName.get(num));\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/106", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int factorial = 1;\n                for (int j = 1; j <= i; j++) {\n                    factorial *= j;\n                }\n                result.add(factorial);\n            } else {\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/107", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> even_odd_palindrome(int n) {\n        // Initialize counters\n        int even_count = 0;\n        int odd_count = 0;\n        \n        // Loop through numbers from 1 to n\n        for (int i = 1; i <= n; i++) {\n            // Check if the number is a palindrome\n            if (isPalindrome(i)) {\n                // Classify as even or odd and increment the respective counter\n                if (i % 2 == 0) {\n                    even_count++;\n                } else {\n                    odd_count++;\n                }\n            }\n        }\n        \n        // Return the result as a list\n        return Arrays.asList(even_count, odd_count);\n    }\n\n    // Helper method to check if a number is a palindrome\n    private boolean isPalindrome(int num) {\n        String str = Integer.toString(num);\n        String reverseStr = new StringBuilder(str).reverse().toString();\n        return str.equals(reverseStr);\n    }\n}\n"}
{"task_id": "Java/108", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums(Arrays.asList()) == 0\n    >>> count_nums(Arrays.asList(-1, 11, -11)) == 1\n    >>> count_nums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int count_nums(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return 0;\n        }\n        \n        int count = 0;\n        \n        for (int num : arr) {\n            int sumOfDigits = 0;\n            int temp = Math.abs(num);\n            while (temp > 0) {\n                sumOfDigits += temp % 10;\n                temp /= 10;\n            }\n            if (num < 0) {\n                sumOfDigits = -sumOfDigits;\n            }\n            \n            if (sumOfDigits > 0) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/109", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    move_one_ball(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean move_one_ball(List<Integer> arr) {\n        if (arr.isEmpty()) return true;\n        \n        List<Integer> sortedArr = new ArrayList<>(arr);\n        Collections.sort(sortedArr);\n        \n        int n = arr.size();\n        int rotationPoint = -1;\n        \n        // Find the rotation point\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i).equals(sortedArr.get(0))) {\n                rotationPoint = i;\n                break;\n            }\n        }\n        \n        // Check if the array can be sorted by right shifts\n        for (int i = 0; i < n; i++) {\n            if (!arr.get((rotationPoint + i) % n).equals(sortedArr.get(i))) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/110", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int oddCountInLst1 = 0;\n        int evenCountInLst2 = 0;\n\n        // Count odd elements in lst1\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCountInLst1++;\n            }\n        }\n\n        // Count even elements in lst2\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCountInLst2++;\n            }\n        }\n\n        // Determine if exchange is possible\n        if (evenCountInLst2 >= oddCountInLst1) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}\n"}
{"task_id": "Java/111", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        // Step 1.1: Split the input string by spaces to get an array of letters.\n        String[] letters = test.split(\" \");\n        \n        // Step 1.2: Initialize an empty HashMap<String, Integer> to store the frequency of each letter.\n        Map<String, Integer> frequencyMap = new HashMap<>();\n        \n        // Step 2.1: Iterate through the array of letters.\n        for (String letter : letters) {\n            // Step 2.2: For each letter, update its count in the HashMap.\n            frequencyMap.put(letter, frequencyMap.getOrDefault(letter, 0) + 1);\n        }\n        \n        // Step 3.1: Initialize a variable maxFrequency to 0.\n        int maxFrequency = 0;\n        \n        // Step 3.2: Iterate through the values in the HashMap to find the maximum frequency.\n        for (int frequency : frequencyMap.values()) {\n            if (frequency > maxFrequency) {\n                maxFrequency = frequency;\n            }\n        }\n        \n        // Step 4.1: Initialize an empty HashMap<String, Integer> to store the result.\n        Map<String, Integer> resultMap = new HashMap<>();\n        \n        // Step 4.2: Iterate through the entries in the HashMap.\n        for (Map.Entry<String, Integer> entry : frequencyMap.entrySet()) {\n            // Step 4.3: For each entry, if the frequency matches maxFrequency, add the letter and its frequency to the result map.\n            if (entry.getValue() == maxFrequency) {\n                resultMap.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        // Step 5.1: Return the result map containing the letters with the maximum frequency and their counts.\n        return resultMap;\n    }\n}\n"}
{"task_id": "Java/112", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Object> reverse_delete(String s, String c) {\n        // Step 1: Input Validation\n        if (s == null || c == null) {\n            throw new IllegalArgumentException(\"Input strings cannot be null\");\n        }\n\n        // Step 2: Character Deletion\n        StringBuilder filteredString = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                filteredString.append(ch);\n            }\n        }\n\n        // Step 3: Palindrome Check\n        String resultString = filteredString.toString();\n        String reversedString = new StringBuilder(resultString).reverse().toString();\n        boolean isPalindrome = resultString.equals(reversedString);\n\n        // Step 4: Result Packaging\n        List<Object> result = new ArrayList<>();\n        result.add(resultString);\n        result.add(isPalindrome);\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/113", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> odd_count(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int oddCount = countOddDigits(str);\n            String output = String.format(\"the number of odd elements %dn the str%dng %d of the %dnput.\", oddCount, oddCount, oddCount, oddCount);\n            result.add(output);\n        }\n        \n        return result;\n    }\n\n    private int countOddDigits(String str) {\n        int count = 0;\n        for (char c : str.toCharArray()) {\n            if ((c - '0') % 2 != 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/114", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        if (nums == null || nums.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list cannot be null or empty\");\n        }\n\n        int minSum = Integer.MAX_VALUE;\n\n        for (int i = 0; i < nums.size(); i++) {\n            int currentSum = 0;\n            for (int j = i; j < nums.size(); j++) {\n                currentSum += nums.get(j);\n                if (currentSum < minSum) {\n                    minSum = currentSum;\n                }\n            }\n        }\n\n        return minSum;\n    }\n}\n"}
{"task_id": "Java/115", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity. Can't use buckets from other wells to extract water from one well.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        // Validate the bucket capacity\n        if (capacity < 1 || capacity > 10) {\n            throw new IllegalArgumentException(\"Bucket capacity must be between 1 and 10.\");\n        }\n\n        int totalOperations = 0;\n\n        // Iterate through each row of the grid\n        for (List<Integer> row : grid) {\n            int waterUnits = 0;\n\n            // Count the number of water units (1s) in the current row\n            for (int cell : row) {\n                if (cell == 1) {\n                    waterUnits++;\n                }\n            }\n\n            // Calculate the number of times the bucket needs to be lowered\n            if (waterUnits > 0) {\n                totalOperations += (waterUnits / capacity);\n                if (waterUnits % capacity != 0) {\n                    totalOperations++;\n                }\n            }\n        }\n\n        return totalOperations;\n    }\n}\n"}
{"task_id": "Java/116", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sort_array(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 4, 3, 5))\n    >>> sort_array(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-4, -2, -6, -5, -3))\n    >>> sort_array(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 4, 3))\n     */\n    public List<Integer> sort_array(List<Integer> arr) {\n        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int countOnesA = countOnesInBinary(a);\n                int countOnesB = countOnesInBinary(b);\n                \n                if (countOnesA != countOnesB) {\n                    return Integer.compare(countOnesA, countOnesB);\n                } else {\n                    return Integer.compare(a, b);\n                }\n            }\n        });\n        \n        return arr;\n    }\n    \n    private int countOnesInBinary(int num) {\n        return Integer.bitCount(num);\n    }\n}\n"}
{"task_id": "Java/117", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> select_words(String s, int n) {\n        if (s.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        String[] words = s.split(\" \");\n        List<String> result = new ArrayList<>();\n\n        for (String word : words) {\n            if (countConsonants(word) == n) {\n                result.add(word);\n            }\n        }\n\n        return result;\n    }\n\n    private int countConsonants(String word) {\n        int count = 0;\n        for (char c : word.toLowerCase().toCharArray()) {\n            if (Character.isLetter(c) && \"aeiou\".indexOf(c) == -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/118", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n     */\n    public String get_closest_vowel(String word) {\n        // Step 1: Define vowels and consonants\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        Set<Character> consonants = new HashSet<>(Arrays.asList('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z', 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'));\n        \n        // Step 2: Initialize variables\n        char lastConsonant = '\\0';\n        String result = \"\";\n        \n        // Step 3: Traverse the word from right to left\n        for (int i = word.length() - 1; i >= 0; i--) {\n            char currentChar = word.charAt(i);\n            \n            // Step 4: Check for valid vowel\n            if (vowels.contains(currentChar)) {\n                if (lastConsonant != '\\0') {\n                    result = String.valueOf(currentChar);\n                    break;\n                }\n            } else if (consonants.contains(currentChar)) {\n                lastConsonant = currentChar;\n            }\n        }\n        \n        // Step 5: Return the result\n        return result;\n    }\n}\n"}
{"task_id": "Java/119", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    match_parens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    match_parens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String match_parens(List<String> lst) {\n        if (lst.size() != 2) {\n            return \"No\";\n        }\n\n        String str1 = lst.get(0);\n        String str2 = lst.get(1);\n\n        int open1 = 0, close1 = 0, open2 = 0, close2 = 0;\n\n        // Count parentheses in str1\n        for (char c : str1.toCharArray()) {\n            if (c == '(') {\n                open1++;\n            } else if (c == ')') {\n                close1++;\n            }\n        }\n\n        // Count parentheses in str2\n        for (char c : str2.toCharArray()) {\n            if (c == '(') {\n                open2++;\n            } else if (c == ')') {\n                close2++;\n            }\n        }\n\n        // Calculate net balances\n        int netBalance1 = open1 - close1;\n        int netBalance2 = open2 - close2;\n\n        // Check if the total net balance is zero and each string has a non-negative net balance\n        if (netBalance1 + netBalance2 == 0 && netBalance1 >= 0 && netBalance2 >= 0) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}\n"}
{"task_id": "Java/120", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr, in ascending order.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Input validation\n        if (arr == null || arr.isEmpty() || k < 0 || k > arr.size()) {\n            return new ArrayList<>();\n        }\n\n        // Use a min-heap to find the top k elements\n        PriorityQueue<Integer> minHeap = new PriorityQueue<>();\n        for (int num : arr) {\n            minHeap.offer(num);\n            if (minHeap.size() > k) {\n                minHeap.poll();\n            }\n        }\n\n        // Extract the top k elements from the min-heap\n        List<Integer> result = new ArrayList<>(minHeap);\n\n        // Sort the result in ascending order\n        Collections.sort(result);\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/121", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0; // Initialize sum to 0\n        \n        // Loop through the list\n        for (int i = 0; i < lst.size(); i++) {\n            // Check if the index is even\n            if (i % 2 == 0) {\n                // Check if the element at the even index is odd\n                if (lst.get(i) % 2 != 0) {\n                    // Add the odd element to the sum\n                    sum += lst.get(i);\n                }\n            }\n        }\n        \n        // Return the sum of odd elements at even positions\n        return sum;\n    }\n}\n"}
{"task_id": "Java/122", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int add_elements(List<Integer> arr, int k) {\n        // Input validation\n        if (arr == null || arr.size() < 1 || arr.size() > 100 || k < 1 || k > arr.size()) {\n            throw new IllegalArgumentException(\"Invalid input parameters\");\n        }\n\n        int sum = 0;\n\n        // Iterate through the first k elements\n        for (int i = 0; i < k; i++) {\n            int num = arr.get(i);\n            // Check if the number has at most two digits\n            if (num >= 0 && num <= 99) {\n                sum += num;\n            }\n        }\n\n        return sum;\n    }\n}\n"}
{"task_id": "Java/123", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> get_odd_collatz(int n) {\n        if (n == 1) {\n            return Collections.singletonList(1);\n        }\n\n        List<Integer> collatzSequence = new ArrayList<>();\n        List<Integer> oddNumbers = new ArrayList<>();\n\n        while (n != 1) {\n            collatzSequence.add(n);\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n        }\n        collatzSequence.add(1); // Add the final 1 to the sequence\n\n        for (int num : collatzSequence) {\n            if (num % 2 != 0) {\n                oddNumbers.add(num);\n            }\n        }\n\n        Collections.sort(oddNumbers);\n        return oddNumbers;\n    }\n}\n"}
{"task_id": "Java/124", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    valid_date(\"03-11-2000\") => true\n    valid_date(\"15-01-2012\") => false\n    valid_date(\"04-0-2040\") => false\n    valid_date(\"06-04-2020\") => true\n    valid_date(\"06/04/2020\") => false\n     */\n    public boolean valid_date(String date) {\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        // Regular expression to match the format mm-dd-yyyy\n        if (!date.matches(\"\\\\d{2}-\\\\d{2}-\\\\d{4}\")) {\n            return false;\n        }\n\n        // Extract month, day, and year from the date string\n        String[] parts = date.split(\"-\");\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\n        // Validate month\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        // Validate day based on the month\n        if (day < 1) {\n            return false;\n        }\n\n        switch (month) {\n            case 1: case 3: case 5: case 7: case 8: case 10: case 12:\n                if (day > 31) {\n                    return false;\n                }\n                break;\n            case 4: case 6: case 9: case 11:\n                if (day > 30) {\n                    return false;\n                }\n                break;\n            case 2:\n                if (isLeapYear(year)) {\n                    if (day > 29) {\n                        return false;\n                    }\n                } else {\n                    if (day > 28) {\n                        return false;\n                    }\n                }\n                break;\n        }\n\n        return true;\n    }\n\n    private boolean isLeapYear(int year) {\n        if (year % 4 == 0) {\n            if (year % 100 == 0) {\n                return year % 400 == 0;\n            }\n            return true;\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/125", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n     */\n    public Object split_words(String txt) {\n        if (txt == null) {\n            return null;\n        }\n\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\"\\\\s+\"));\n        }\n\n        if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        }\n\n        int count = 0;\n        for (char c : txt.toCharArray()) {\n            if (Character.isLowerCase(c) && (c - 'a') % 2 != 0) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n}\n"}
{"task_id": "Java/126", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean is_sorted(List<Integer> lst) {\n        // Step 1: Input Validation\n        if (lst == null) {\n            return false;\n        }\n\n        // Step 2: Check if the List is Sorted\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n        }\n\n        // Step 3: Check for Duplicate Elements\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (int num : lst) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n            if (countMap.get(num) > 2) {\n                return false;\n            }\n        }\n\n        // Step 4: Return the Final Result\n        return true;\n    }\n}\n"}
{"task_id": "Java/127", "generation": "import java.util.*;\n\nclass Solution {\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // Step 1: Validate input\n        if (interval1.size() != 2 || interval2.size() != 2) {\n            throw new IllegalArgumentException(\"Invalid interval format\");\n        }\n\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n\n        if (start1 > end1 || start2 > end2) {\n            throw new IllegalArgumentException(\"Invalid interval range\");\n        }\n\n        // Step 2: Calculate intersection\n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n\n        if (intersectionStart > intersectionEnd) {\n            return \"NO\"; // No intersection\n        }\n\n        // Step 3: Calculate intersection length\n        int intersectionLength = intersectionEnd - intersectionStart + 1;\n\n        if (intersectionLength == 0) {\n            return \"NO\"; // Intersection is a single point\n        }\n\n        // Step 4: Check if length is prime\n        if (isPrime(intersectionLength)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    // Helper function to check if a number is prime\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/128", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prod_signs(Arrays.asList(0, 1)) == 0\n    >>> prod_signs(Arrays.asList()) == None\n     */\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int signProduct = 1;\n        int sumOfMagnitudes = 0;\n\n        for (int num : arr) {\n            if (num == 0) {\n                signProduct = 0;\n                break;\n            } else if (num > 0) {\n                signProduct *= 1;\n            } else {\n                signProduct *= -1;\n            }\n            sumOfMagnitudes += Math.abs(num);\n        }\n\n        return Optional.of(sumOfMagnitudes * signProduct);\n    }\n}\n"}
{"task_id": "Java/129", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        List<Integer> minPath = null;\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                List<Integer> currentPath = new ArrayList<>();\n                currentPath.add(grid.get(i).get(j));\n                minPath = explorePath(grid, i, j, k, currentPath, minPath);\n            }\n        }\n        \n        return minPath;\n    }\n    \n    private List<Integer> explorePath(List<List<Integer>> grid, int x, int y, int k, List<Integer> currentPath, List<Integer> minPath) {\n        if (currentPath.size() == k) {\n            if (minPath == null || comparePaths(currentPath, minPath) < 0) {\n                return new ArrayList<>(currentPath);\n            }\n            return minPath;\n        }\n        \n        int n = grid.size();\n        int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n        \n        for (int[] dir : directions) {\n            int newX = x + dir[0];\n            int newY = y + dir[1];\n            \n            if (newX >= 0 && newX < n && newY >= 0 && newY < n) {\n                currentPath.add(grid.get(newX).get(newY));\n                minPath = explorePath(grid, newX, newY, k, currentPath, minPath);\n                currentPath.remove(currentPath.size() - 1);\n            }\n        }\n        \n        return minPath;\n    }\n    \n    private int comparePaths(List<Integer> path1, List<Integer> path2) {\n        for (int i = 0; i < path1.size(); i++) {\n            if (path1.get(i) < path2.get(i)) {\n                return -1;\n            } else if (path1.get(i) > path2.get(i)) {\n                return 1;\n            }\n        }\n        return 0;\n    }\n}\n"}
{"task_id": "Java/130", "generation": "import java.util.*;\n\nclass Solution {\n    // Memoization map to store computed values\n    private Map<Integer, Integer> memo = new HashMap<>();\n\n    // Recursive function to compute tri(n)\n    private int computeTri(int n) {\n        if (n == 1) return 3; // Base case\n        if (memo.containsKey(n)) return memo.get(n); // Return memoized value\n\n        int result;\n        if (n % 2 == 0) {\n            result = 1 + n / 2;\n        } else {\n            result = computeTri(n - 1) + computeTri(n - 2) + computeTri(n + 1);\n        }\n\n        memo.put(n, result); // Memoize the result\n        return result;\n    }\n\n    // Main function to generate the sequence\n    public List<Integer> tri(int n) {\n        List<Integer> sequence = new ArrayList<>();\n        for (int i = 0; i <= n; i++) {\n            sequence.add(computeTri(i));\n        }\n        return sequence;\n    }\n}\n"}
{"task_id": "Java/131", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        // Convert the integer to a string to extract digits\n        String numStr = Integer.toString(n);\n        \n        // Initialize product to 1 (neutral element for multiplication)\n        int product = 1;\n        boolean hasOddDigit = false;\n        \n        // Iterate over each character in the string\n        for (char ch : numStr.toCharArray()) {\n            int digit = ch - '0'; // Convert character to integer\n            \n            // Check if the digit is odd\n            if (digit % 2 == 1) {\n                product *= digit; // Multiply the product by the odd digit\n                hasOddDigit = true;\n            }\n        }\n        \n        // If no odd digits were found, return 0\n        if (!hasOddDigit) {\n            return 0;\n        }\n        \n        // Return the product of odd digits\n        return product;\n    }\n}\n"}
{"task_id": "Java/132", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    is_nested(\"[[]]\") -> true\n    is_nested(\"[]]]]]]][[[[[]\") -> false\n    is_nested(\"[][]\") -> false\n    is_nested(\"[]\") -> false\n    is_nested(\"[[][]]\") -> true\n    is_nested(\"[[]][[\") -> true\n     */\n    public boolean is_nested(String string) {\n        if (!string.matches(\"[\\\\[\\\\]]*\")) {\n            return false;\n        }\n\n        Stack<Character> stack = new Stack<>();\n        boolean hasNested = false;\n\n        for (char ch : string.toCharArray()) {\n            if (ch == '[') {\n                stack.push(ch);\n            } else if (ch == ']') {\n                if (!stack.isEmpty() && stack.peek() == '[') {\n                    stack.pop();\n                    if (stack.size() > 0) {\n                        hasNested = true;\n                    }\n                } else {\n                    stack.push(ch);\n                }\n            }\n        }\n\n        return hasNested;\n    }\n}\n"}
{"task_id": "Java/133", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sum_squares(List<Double> lst) {\n        int sum = 0;\n        \n        for (Double num : lst) {\n            // Step 3: Round to ceiling\n            double rounded = Math.ceil(num);\n            \n            // Step 4: Square the rounded value\n            double squared = rounded * rounded;\n            \n            // Step 5: Add to the sum\n            sum += squared;\n        }\n        \n        // Step 6: Return the sum as an integer\n        return sum;\n    }\n}\n"}
{"task_id": "Java/134", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") -> false\n    check_if_last_char_is_a_letter(\"apple pi e\") -> true\n    check_if_last_char_is_a_letter(\"apple pi e \") -> false\n    check_if_last_char_is_a_letter(\"\") -> false\n     */\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        // Step 1: Handle Empty String\n        if (txt.isEmpty()) {\n            return false;\n        }\n\n        // Step 2: Extract the Last Character\n        char lastChar = txt.charAt(txt.length() - 1);\n\n        // Step 3: Check if the Last Character is an Alphabetical Character\n        if (!Character.isLetter(lastChar)) {\n            return false;\n        }\n\n        // Step 4: Check if the Last Character is Part of a Word\n        String[] words = txt.split(\"\\\\s+\");\n        String lastWord = words[words.length - 1];\n\n        // If the last character is the last character of the last word and not followed by a space\n        if (lastChar == lastWord.charAt(lastWord.length() - 1)) {\n            return true;\n        }\n\n        return false;\n    }\n}\n"}
{"task_id": "Java/135", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange(Arrays.asList(1,2,4,3,5)) = 3\n    can_arrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int can_arrange(List<Integer> arr) {\n        // Input validation\n        if (arr == null || arr.isEmpty()) {\n            return -1;\n        }\n\n        // Initialize the largest index to -1\n        int largestIndex = -1;\n\n        // Iterate through the list starting from the second element\n        for (int i = 1; i < arr.size(); i++) {\n            // Compare the current element with the previous element\n            if (arr.get(i) < arr.get(i - 1)) {\n                // Update the largest index if the condition is met\n                largestIndex = i;\n            }\n        }\n\n        // Return the largest index where the condition is met, or -1 if none\n        return largestIndex;\n    }\n}\n"}
{"task_id": "Java/136", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largest_smallest_integers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largest_smallest_integers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        if (lst == null || lst.isEmpty()) {\n            return Arrays.asList(Optional.empty(), Optional.empty());\n        }\n\n        List<Integer> negatives = new ArrayList<>();\n        List<Integer> positives = new ArrayList<>();\n\n        for (Integer num : lst) {\n            if (num < 0) {\n                negatives.add(num);\n            } else if (num > 0) {\n                positives.add(num);\n            }\n        }\n\n        Optional<Integer> largestNegative = negatives.isEmpty() ? Optional.empty() : Optional.of(Collections.max(negatives));\n        Optional<Integer> smallestPositive = positives.isEmpty() ? Optional.empty() : Optional.of(Collections.min(positives));\n\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n}\n"}
{"task_id": "Java/137", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) -> Optional.of(2.5)\n    compare_one(1, \"2,3\") -> Optional.of(\"2,3\")\n    compare_one(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compare_one(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compare_one(Object a, Object b) {\n        // Step 1: Type Identification and Conversion\n        Float num1 = convertToFloat(a);\n        Float num2 = convertToFloat(b);\n\n        // Step 2: Comparison\n        if (num1 == null || num2 == null) {\n            return Optional.empty(); // Handle invalid inputs\n        }\n\n        if (num1.equals(num2)) {\n            return Optional.empty(); // Return Optional.empty() if values are equal\n        }\n\n        // Step 3: Return the Result\n        return Optional.of(num1 > num2 ? a : b);\n    }\n\n    private Float convertToFloat(Object obj) {\n        if (obj instanceof Integer) {\n            return ((Integer) obj).floatValue();\n        } else if (obj instanceof Float) {\n            return (Float) obj;\n        } else if (obj instanceof String) {\n            try {\n                String normalizedStr = ((String) obj).replace(',', '.');\n                return Float.parseFloat(normalizedStr);\n            } catch (NumberFormatException e) {\n                return null; // Handle invalid number strings\n            }\n        }\n        return null; // Handle unsupported types\n    }\n}\n"}
{"task_id": "Java/138", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == false\n    is_equal_to_sum_even(6) == false\n    is_equal_to_sum_even(8) == true\n     */\n    public boolean is_equal_to_sum_even(int n) {\n        // Check if n is less than the minimum sum of four positive even numbers\n        if (n < 8) {\n            return false;\n        }\n\n        // Iterate through all possible combinations of four positive even numbers\n        for (int a = 2; a <= n - 6; a += 2) {\n            for (int b = a; b <= n - a - 4; b += 2) {\n                for (int c = b; c <= n - a - b - 2; c += 2) {\n                    int d = n - a - b - c;\n                    if (d > 0 && d % 2 == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        // If no valid combination is found, return false\n        return false;\n    }\n}\n"}
{"task_id": "Java/139", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long special_factorial(int n) {\n        if (n <= 1) {\n            return 1;\n        }\n        \n        long result = 1;\n        for (int i = n; i > 0; i--) {\n            result *= factorial(i);\n        }\n        \n        return result;\n    }\n    \n    private long factorial(int k) {\n        if (k <= 1) {\n            return 1;\n        }\n        \n        long fact = 1;\n        for (int i = 2; i <= k; i++) {\n            fact *= i;\n        }\n        \n        return fact;\n    }\n}\n"}
{"task_id": "Java/140", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fix_spaces(String text) {\n        // Step 1: Replace single spaces with underscores\n        text = text.replace(\" \", \"_\");\n        \n        // Step 2: Replace sequences of more than 2 consecutive underscores with a hyphen\n        text = text.replaceAll(\"_{2,}\", \"-\");\n        \n        return text;\n    }\n}\n"}
{"task_id": "Java/141", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String file_name_check(String file_name) {\n        if (file_name == null || file_name.isEmpty()) {\n            return \"No\";\n        }\n\n        int digitCount = 0;\n        int dotCount = 0;\n\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n            if (c == '.') {\n                dotCount++;\n            }\n        }\n\n        if (digitCount > 3 || dotCount != 1) {\n            return \"No\";\n        }\n\n        int dotIndex = file_name.indexOf('.');\n        String beforeDot = file_name.substring(0, dotIndex);\n        String afterDot = file_name.substring(dotIndex + 1);\n\n        if (beforeDot.isEmpty() || !Character.isLetter(beforeDot.charAt(0))) {\n            return \"No\";\n        }\n\n        Set<String> allowedExtensions = new HashSet<>(Arrays.asList(\"txt\", \"exe\", \"dll\"));\n        if (!allowedExtensions.contains(afterDot)) {\n            return \"No\";\n        }\n\n        return \"Yes\";\n    }\n}\n"}
{"task_id": "Java/142", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sum_squares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int element = lst.get(i);\n            if (i % 3 == 0) {\n                element = element * element;\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                element = element * element * element;\n            }\n            sum += element;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/143", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String words_in_sentence(String sentence) {\n        // Step 1: Parse the Input Sentence\n        String[] words = sentence.split(\" \");\n        \n        // Step 2: Implement Prime Number Check Function\n        List<String> filteredWords = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                filteredWords.add(word);\n            }\n        }\n        \n        // Step 3: Reconstruct the Output String\n        return String.join(\" \", filteredWords);\n    }\n    \n    private boolean isPrime(int n) {\n        if (n <= 1) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/144", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Step 1: Parse the input strings\n        String[] partsX = x.split(\"/\");\n        String[] partsN = n.split(\"/\");\n        \n        int numX = Integer.parseInt(partsX[0]);\n        int denX = Integer.parseInt(partsX[1]);\n        int numN = Integer.parseInt(partsN[0]);\n        int denN = Integer.parseInt(partsN[1]);\n        \n        // Step 2: Multiply the fractions\n        int newNum = numX * numN;\n        int newDen = denX * denN;\n        \n        // Step 3: Simplify the resulting fraction\n        int gcd = gcd(newNum, newDen);\n        newNum /= gcd;\n        newDen /= gcd;\n        \n        // Step 4: Check if the resulting fraction is a whole number\n        return newDen == 1;\n    }\n\n    // Helper function to compute the GCD\n    private int gcd(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}\n"}
{"task_id": "Java/145", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> order_by_points(List<Integer> nums) {\n        if (nums.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        // Sort the list using a custom comparator\n        Collections.sort(nums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int sumA = sumOfDigits(a);\n                int sumB = sumOfDigits(b);\n                return Integer.compare(sumA, sumB);\n            }\n        });\n\n        return nums;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        String numStr = String.valueOf(num);\n        boolean isNegative = num < 0;\n\n        for (int i = 0; i < numStr.length(); i++) {\n            char ch = numStr.charAt(i);\n            if (i == 0 && isNegative) {\n                sum += Character.getNumericValue(ch);\n            } else {\n                sum += Math.abs(Character.getNumericValue(ch));\n            }\n        }\n\n        return sum;\n    }\n}\n"}
{"task_id": "Java/146", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        \n        for (int num : nums) {\n            if (num > 10) {\n                String numStr = String.valueOf(num);\n                int firstDigit = Character.getNumericValue(numStr.charAt(0));\n                int lastDigit = Character.getNumericValue(numStr.charAt(numStr.length() - 1));\n                \n                if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/147", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int get_max_triples(int n) {\n        // Generate the array a\n        int[] a = new int[n];\n        for (int i = 1; i <= n; i++) {\n            a[i - 1] = i * i - i + 1;\n        }\n\n        // Initialize the counter for valid triples\n        int count = 0;\n\n        // Iterate through all possible triples (a[i], a[j], a[k]) where i < j < k\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    // Check if the sum of the triple is a multiple of 3\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n\n        // Return the count of valid triples\n        return count;\n    }\n}\n"}
{"task_id": "Java/148", "generation": "import java.util.*;\n\nclass Solution {\n    private static final List<String> PLANETS = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\n    public List<String> bf(String planet1, String planet2) {\n        // Step 2: Validate Input\n        if (!PLANETS.contains(planet1) || !PLANETS.contains(planet2)) {\n            return Collections.emptyList();\n        }\n\n        // Step 3: Find Indices\n        int index1 = PLANETS.indexOf(planet1);\n        int index2 = PLANETS.indexOf(planet2);\n\n        // Step 4: Extract Sublist\n        int start = Math.min(index1, index2) + 1;\n        int end = Math.max(index1, index2);\n        List<String> result = new ArrayList<>(PLANETS.subList(start, end));\n\n        // Step 5: Return the Result\n        return result;\n    }\n}\n"}
{"task_id": "Java/149", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> sorted_list_sum(List<String> lst) {\n        // Step 1: Input Validation\n        if (lst == null || lst.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        // Step 2: Filtering Phase\n        List<String> evenLengthStrings = new ArrayList<>();\n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                evenLengthStrings.add(str);\n            }\n        }\n\n        // Step 3: Sorting Phase\n        Collections.sort(evenLengthStrings, new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                int lengthCompare = Integer.compare(s1.length(), s2.length());\n                if (lengthCompare != 0) {\n                    return lengthCompare;\n                }\n                return s1.compareTo(s2);\n            }\n        });\n\n        // Step 4: Return the Result\n        return evenLengthStrings;\n    }\n}\n"}
{"task_id": "Java/150", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n     */\n    public int x_or_y(int n, int x, int y) {\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/151", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    double_the_difference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    double_the_difference(Arrays.asList(-1, -2, 0)) == 0\n    double_the_difference(Arrays.asList(9, -2)) == 81\n    double_the_difference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int double_the_difference(List<Object> lst) {\n        // Edge case: If the list is empty, return 0\n        if (lst.isEmpty()) {\n            return 0;\n        }\n\n        int sumOfSquares = 0;\n\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                if (num > 0 && num % 2 != 0) {\n                    sumOfSquares += num * num;\n                }\n            }\n        }\n\n        return sumOfSquares;\n    }\n}\n"}
{"task_id": "Java/152", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        // Input Validation\n        if (game.size() != guess.size()) {\n            throw new IllegalArgumentException(\"The input lists must be of the same length.\");\n        }\n\n        // Initialization\n        List<Integer> result = new ArrayList<>();\n\n        // Comparison Loop\n        for (int i = 0; i < game.size(); i++) {\n            int gameScore = game.get(i);\n            int guessScore = guess.get(i);\n            if (gameScore == guessScore) {\n                result.add(0);\n            } else {\n                result.add(Math.abs(gameScore - guessScore));\n            }\n        }\n\n        // Return the Result\n        return result;\n    }\n}\n"}
{"task_id": "Java/153", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.Strongest_Extension.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        // Step 1: Initialize variables to track the strongest extension\n        String strongestExtension = \"\";\n        int maxStrength = Integer.MIN_VALUE;\n\n        // Step 2: Iterate through each extension to calculate its strength\n        for (String extension : extensions) {\n            int CAP = 0;\n            int SM = 0;\n\n            // Count uppercase and lowercase letters\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    CAP++;\n                } else if (Character.isLowerCase(c)) {\n                    SM++;\n                }\n            }\n\n            // Calculate strength\n            int strength = CAP - SM;\n\n            // Update the strongest extension if the current one is stronger\n            if (strength > maxStrength || (strength == maxStrength && extensions.indexOf(extension) < extensions.indexOf(strongestExtension))) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        // Step 3: Format and return the result\n        return class_name + \".\" + strongestExtension;\n    }\n}\n"}
{"task_id": "Java/154", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => false\n    cycpattern_check(\"hello\",\"ell\") => true\n    cycpattern_check(\"whassup\",\"psus\") => false\n    cycpattern_check(\"abab\",\"baa\") => true\n    cycpattern_check(\"efef\",\"eeff\") => false\n    cycpattern_check(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpattern_check(String a, String b) {\n        // Step 1: Input Validation\n        if (a == null || b == null) {\n            return false;\n        }\n\n        // Step 2: Generate all rotations of b\n        List<String> rotations = generateRotations(b);\n\n        // Step 3: Check if any rotation is a substring of a\n        for (String rotation : rotations) {\n            if (a.contains(rotation)) {\n                return true;\n            }\n        }\n\n        // Step 4: If no rotation is found, return false\n        return false;\n    }\n\n    // Helper method to generate all rotations of a string\n    private List<String> generateRotations(String b) {\n        List<String> rotations = new ArrayList<>();\n        int length = b.length();\n        for (int i = 0; i < length; i++) {\n            String rotation = b.substring(i) + b.substring(0, i);\n            rotations.add(rotation);\n        }\n        return rotations;\n    }\n}\n"}
{"task_id": "Java/155", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n     */\n    public List<Integer> even_odd_count(int num) {\n        // Convert the input integer to a string\n        String numStr = String.valueOf(num);\n        \n        // Initialize counters for even and odd digits\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        // Iterate through each character in the string representation of the number\n        for (char ch : numStr.toCharArray()) {\n            // Ignore the negative sign if present\n            if (ch == '-') {\n                continue;\n            }\n            \n            // Convert the character to an integer\n            int digit = Character.getNumericValue(ch);\n            \n            // Classify the digit as even or odd and update the counters\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        \n        // Create a list containing the counts of even and odd digits\n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        \n        // Return the result\n        return result;\n    }\n}\n"}
{"task_id": "Java/156", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == \"xix\"\n    >>> int_to_mini_roman(152) == \"clii\"\n    >>> int_to_mini_roman(426) == \"cdxxvi\"\n     */\n    public String int_to_mini_roman(int number) {\n        // Step 1: Define the Roman Numeral Mapping\n        List<Map.Entry<Integer, String>> romanMap = new ArrayList<>();\n        romanMap.add(new AbstractMap.SimpleEntry<>(1000, \"M\"));\n        romanMap.add(new AbstractMap.SimpleEntry<>(900, \"CM\"));\n        romanMap.add(new AbstractMap.SimpleEntry<>(500, \"D\"));\n        romanMap.add(new AbstractMap.SimpleEntry<>(400, \"CD\"));\n        romanMap.add(new AbstractMap.SimpleEntry<>(100, \"C\"));\n        romanMap.add(new AbstractMap.SimpleEntry<>(90, \"XC\"));\n        romanMap.add(new AbstractMap.SimpleEntry<>(50, \"L\"));\n        romanMap.add(new AbstractMap.SimpleEntry<>(40, \"XL\"));\n        romanMap.add(new AbstractMap.SimpleEntry<>(10, \"X\"));\n        romanMap.add(new AbstractMap.SimpleEntry<>(9, \"IX\"));\n        romanMap.add(new AbstractMap.SimpleEntry<>(5, \"V\"));\n        romanMap.add(new AbstractMap.SimpleEntry<>(4, \"IV\"));\n        romanMap.add(new AbstractMap.SimpleEntry<>(1, \"I\"));\n\n        // Step 2: Implement the Conversion Logic\n        StringBuilder result = new StringBuilder();\n        for (Map.Entry<Integer, String> entry : romanMap) {\n            while (number >= entry.getKey()) {\n                result.append(entry.getValue());\n                number -= entry.getKey();\n            }\n        }\n\n        // Step 3: Convert the Result to Lowercase\n        return result.toString().toLowerCase();\n    }\n}\n"}
{"task_id": "Java/157", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == true\n    right_angle_triangle(1, 2, 3) == false\n     */\n    public boolean right_angle_triangle(int a, int b, int c) {\n        // Step 1: Input Validation\n        if (!(a + b > c && a + c > b && b + c > a)) {\n            return false;\n        }\n\n        // Step 2: Identify the Hypotenuse\n        int hypotenuse = Math.max(a, Math.max(b, c));\n        int otherSide1, otherSide2;\n\n        if (hypotenuse == a) {\n            otherSide1 = b;\n            otherSide2 = c;\n        } else if (hypotenuse == b) {\n            otherSide1 = a;\n            otherSide2 = c;\n        } else {\n            otherSide1 = a;\n            otherSide2 = b;\n        }\n\n        // Step 3: Apply the Pythagorean Theorem\n        if (hypotenuse * hypotenuse == otherSide1 * otherSide1 + otherSide2 * otherSide2) {\n            return true;\n        }\n\n        // Step 4: Return the Result\n        return false;\n    }\n}\n"}
{"task_id": "Java/158", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\n     */\n    public String find_max(List<String> words) {\n        if (words == null || words.isEmpty()) {\n            return null; // or handle as per requirement\n        }\n\n        String maxUniqueWord = null;\n        int maxUniqueCount = 0;\n\n        for (String word : words) {\n            int uniqueCount = countUniqueCharacters(word);\n            if (uniqueCount > maxUniqueCount || \n                (uniqueCount == maxUniqueCount && (maxUniqueWord == null || word.compareTo(maxUniqueWord) < 0))) {\n                maxUniqueWord = word;\n                maxUniqueCount = uniqueCount;\n            }\n        }\n\n        return maxUniqueWord;\n    }\n\n    private int countUniqueCharacters(String word) {\n        Set<Character> uniqueChars = new HashSet<>();\n        for (char c : word.toCharArray()) {\n            uniqueChars.add(c);\n        }\n        return uniqueChars.size();\n    }\n}\n"}
{"task_id": "Java/159", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> eat(int number, int need, int remaining) {\n        // Input validation\n        if (number < 0 || number > 1000 || need < 0 || need > 1000 || remaining < 0 || remaining > 1000) {\n            throw new IllegalArgumentException(\"Input values must be between 0 and 1000.\");\n        }\n\n        // Calculate total carrots eaten\n        int totalEaten = number + need;\n        if (totalEaten > remaining) {\n            totalEaten = remaining;\n        }\n\n        // Calculate remaining carrots\n        int remainingCarrots = remaining - (totalEaten - number);\n\n        // Return the result\n        return Arrays.asList(totalEaten, remainingCarrots);\n    }\n}\n"}
{"task_id": "Java/160", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        // Input Validation\n        if (operator.size() != operand.size() - 1) {\n            throw new IllegalArgumentException(\"The length of operator list must be one less than the length of operand list.\");\n        }\n\n        // Expression Construction\n        StringBuilder expression = new StringBuilder();\n        for (int i = 0; i < operator.size(); i++) {\n            expression.append(operand.get(i)).append(\" \").append(operator.get(i)).append(\" \");\n        }\n        expression.append(operand.get(operand.size() - 1));\n\n        // Expression Evaluation\n        try {\n            return evaluateExpression(expression.toString());\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error evaluating expression: \" + e.getMessage());\n        }\n    }\n\n    private int evaluateExpression(String expression) throws Exception {\n        // Use ScriptEngine to evaluate the expression\n        javax.script.ScriptEngineManager mgr = new javax.script.ScriptEngineManager();\n        javax.script.ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n        Object result = engine.eval(expression.replace(\"**\", \"^\"));\n        return ((Number) result).intValue();\n    }\n}\n"}
{"task_id": "Java/161", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        if (s == null) {\n            throw new IllegalArgumentException(\"Input string cannot be null\");\n        }\n\n        StringBuilder result = new StringBuilder();\n        boolean hasLetters = false;\n\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                hasLetters = true;\n                if (Character.isLowerCase(c)) {\n                    result.append(Character.toUpperCase(c));\n                } else {\n                    result.append(Character.toLowerCase(c));\n                }\n            } else {\n                result.append(c);\n            }\n        }\n\n        if (!hasLetters) {\n            return result.reverse().toString();\n        }\n\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/162", "generation": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        // Step 1: Input Validation\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        // Step 2: MD5 Hash Calculation\n        MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n        byte[] hashBytes = digest.digest(text.getBytes());\n\n        // Step 3: Convert byte array to hexadecimal string\n        StringBuilder hexString = new StringBuilder();\n        for (byte b : hashBytes) {\n            hexString.append(String.format(\"%02x\", b));\n        }\n\n        // Step 4: Ensure the string is 32 characters long\n        if (hexString.length() != 32) {\n            throw new IllegalStateException(\"MD5 hash should be 32 characters long.\");\n        }\n\n        // Step 5: Return the result wrapped in an Optional\n        return Optional.of(hexString.toString());\n    }\n}\n"}
{"task_id": "Java/163", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order. Please note that the even digits refer to even numbers less than 10.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n     */\n    public List<Integer> generate_integers(int a, int b) {\n        // Input validation: Ensure a and b are positive integers\n        if (a <= 0 || b <= 0) {\n            return new ArrayList<>();\n        }\n\n        // Range determination: Ensure a is less than or equal to b\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n\n        // Initialize a set to store even digits (to avoid duplicates)\n        Set<Integer> evenDigits = new HashSet<>();\n\n        // Digit extraction and filtering\n        for (int num = a; num <= b; num++) {\n            int currentNum = num;\n            while (currentNum > 0) {\n                int digit = currentNum % 10;\n                if (digit % 2 == 0 && digit < 10) {\n                    evenDigits.add(digit);\n                }\n                currentNum /= 10;\n            }\n        }\n\n        // Convert the set to a list and sort it\n        List<Integer> result = new ArrayList<>(evenDigits);\n        Collections.sort(result);\n\n        // Output the result\n        return result;\n    }\n}\n"}
{"task_id": "Java/0", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> has_close_elements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> has_close_elements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        // Step 1: Input Validation\n        if (numbers == null || numbers.size() < 2 || threshold <= 0) {\n            return false; // or throw an exception\n        }\n\n        // Step 2: Pairwise Comparison\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (diff < threshold) {\n                    return true; // Found a pair closer than the threshold\n                }\n            }\n        }\n\n        // Step 3: Return Result\n        return false; // No pairs found closer than the threshold\n    }\n}\n"}
{"task_id": "Java/1", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separate_paren_groups(String paren_string) {\n        // Step 1: Remove spaces\n        paren_string = paren_string.replaceAll(\" \", \"\");\n        \n        // Step 2: Initialize variables\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        StringBuilder currentGroup = new StringBuilder();\n        \n        // Step 3: Traverse the string\n        for (char ch : paren_string.toCharArray()) {\n            if (ch == '(') {\n                stack.push(ch);\n            } else if (ch == ')') {\n                if (!stack.isEmpty() && stack.peek() == '(') {\n                    stack.pop();\n                }\n            }\n            currentGroup.append(ch);\n            \n            // Step 4: Check if a balanced group is formed\n            if (stack.isEmpty()) {\n                result.add(currentGroup.toString());\n                currentGroup.setLength(0); // Reset for the next group\n            }\n        }\n        \n        // Step 5: Return the result\n        return result;\n    }\n}\n"}
{"task_id": "Java/2", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n     */\n    public double truncate_number(double number) {\n        if (number < 0) {\n            throw new IllegalArgumentException(\"Input must be a positive floating point number.\");\n        }\n        \n        double integerPart = Math.floor(number);\n        double decimalPart = number - integerPart;\n        \n        return decimalPart;\n    }\n}\n"}
{"task_id": "Java/3", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero(Arrays.asList(1, 2, 3))\n    false\n    >>> below_zero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean below_zero(List<Integer> operations) {\n        // Initialize the balance\n        int balance = 0;\n        \n        // Iterate through each operation\n        for (int operation : operations) {\n            // Update the balance\n            balance += operation;\n            \n            // Check if the balance has fallen below zero\n            if (balance < 0) {\n                return true;\n            }\n        }\n        \n        // If no balance fell below zero, return false\n        return false;\n    }\n}\n"}
{"task_id": "Java/4", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double mean_absolute_deviation(List<Double> numbers) {\n        // Step 1: Calculate the mean\n        double sum = 0;\n        for (double number : numbers) {\n            sum += number;\n        }\n        double mean = sum / numbers.size();\n\n        // Step 2: Calculate absolute deviations\n        List<Double> absoluteDeviations = new ArrayList<>();\n        for (double number : numbers) {\n            double deviation = Math.abs(number - mean);\n            absoluteDeviations.add(deviation);\n        }\n\n        // Step 3: Calculate the mean of absolute deviations\n        double sumOfDeviations = 0;\n        for (double deviation : absoluteDeviations) {\n            sumOfDeviations += deviation;\n        }\n        double meanAbsoluteDeviation = sumOfDeviations / numbers.size();\n\n        // Step 4: Return the result\n        return meanAbsoluteDeviation;\n    }\n}\n"}
{"task_id": "Java/5", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimiter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        // Step 1: Handle empty list case\n        if (numbers.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        // Step 2: Initialize the result list\n        List<Integer> result = new ArrayList<>();\n\n        // Step 3: Iterate through the input list and insert the delimiter\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n\n        // Step 4: Return the result list\n        return result;\n    }\n}\n"}
{"task_id": "Java/6", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parse_nested_parens(String paren_string) {\n        // Step 1: Parse the Input String\n        String[] groups = paren_string.split(\" \");\n        List<Integer> result = new ArrayList<>();\n\n        // Step 2: Calculate the Maximum Nesting Level for Each Group\n        for (String group : groups) {\n            int currentLevel = 0;\n            int maxLevel = 0;\n\n            for (char ch : group.toCharArray()) {\n                if (ch == '(') {\n                    currentLevel++;\n                    if (currentLevel > maxLevel) {\n                        maxLevel = currentLevel;\n                    }\n                } else if (ch == ')') {\n                    currentLevel--;\n                }\n            }\n\n            // Step 3: Construct the Output List\n            result.add(maxLevel);\n        }\n\n        // Step 4: Return the Output List\n        return result;\n    }\n}\n"}
{"task_id": "Java/7", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring(List.of(), \"a\")\n    []\n    >>> filter_by_substring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        if (strings == null || substring == null) {\n            return Collections.emptyList();\n        }\n        \n        if (substring.isEmpty()) {\n            return new ArrayList<>(strings);\n        }\n        \n        List<String> result = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                result.add(str);\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/8", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> sum_product(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        \n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        \n        if (numbers.isEmpty()) {\n            sum = 0;\n            product = 1;\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        result.add(sum);\n        result.add(product);\n        return result;\n    }\n}\n"}
{"task_id": "Java/9", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        // Input validation\n        if (numbers == null || numbers.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list cannot be null or empty\");\n        }\n\n        // Initialize result list and currentMax\n        List<Integer> result = new ArrayList<>();\n        int currentMax = numbers.get(0); // Start with the first element\n\n        // Iterate through the list\n        for (int num : numbers) {\n            if (num > currentMax) {\n                currentMax = num;\n            }\n            result.add(currentMax);\n        }\n\n        // Return the result list\n        return result;\n    }\n}\n"}
{"task_id": "Java/10", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    /**\n    Helper method to find the longest palindromic suffix of a string\n     */\n    private String longestPalindromicSuffix(String string) {\n        for (int i = 0; i < string.length(); i++) {\n            String suffix = string.substring(i);\n            if (isPalindrome(suffix)) {\n                return suffix;\n            }\n        }\n        return \"\";\n    }\n\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n     */\n    public String make_palindrome(String string) {\n        if (string.isEmpty()) {\n            return \"\";\n        }\n\n        String longestSuffix = longestPalindromicSuffix(string);\n        int nonPalindromicPrefixLength = string.length() - longestSuffix.length();\n        String nonPalindromicPrefix = string.substring(0, nonPalindromicPrefixLength);\n        String reversedPrefix = new StringBuilder(nonPalindromicPrefix).reverse().toString();\n\n        return string + reversedPrefix;\n    }\n}\n"}
{"task_id": "Java/11", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n     */\n    public String string_xor(String a, String b) {\n        // Validate input\n        if (!a.matches(\"[01]+\") || !b.matches(\"[01]+\")) {\n            throw new IllegalArgumentException(\"Input strings must contain only '0's and '1's\");\n        }\n\n        // Normalize length\n        int maxLength = Math.max(a.length(), b.length());\n        a = String.format(\"%\" + maxLength + \"s\", a).replace(' ', '0');\n        b = String.format(\"%\" + maxLength + \"s\", b).replace(' ', '0');\n\n        // Perform XOR\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < maxLength; i++) {\n            char charA = a.charAt(i);\n            char charB = b.charAt(i);\n            char xorChar = (charA == charB) ? '0' : '1';\n            result.append(xorChar);\n        }\n\n        // Return the result\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/12", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        // Step 1: Input Validation\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        // Step 2: Initialization\n        String longestString = null;\n        int maxLength = 0;\n\n        // Step 3: Iteration and Comparison\n        for (String str : strings) {\n            if (str.length() > maxLength) {\n                longestString = str;\n                maxLength = str.length();\n            }\n            // If str.length() == maxLength, do nothing (keep the first longest string)\n        }\n\n        // Step 4: Return the Result\n        return Optional.ofNullable(longestString);\n    }\n}\n"}
{"task_id": "Java/13", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n     */\n    public int greatest_common_divisor(int a, int b) {\n        // Handle negative numbers by taking their absolute values\n        a = Math.abs(a);\n        b = Math.abs(b);\n\n        // Euclidean Algorithm\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n\n        return a;\n    }\n}\n"}
{"task_id": "Java/14", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> all_prefixes(String string) {\n        // Step 1: Input Validation\n        if (string == null) {\n            throw new IllegalArgumentException(\"Input string cannot be null\");\n        }\n        \n        List<String> prefixes = new ArrayList<>();\n        \n        // Step 2: Prefix Generation\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        \n        // Step 3: Ordering (Natural order due to loop)\n        \n        // Step 4: Return the Result\n        return prefixes;\n    }\n}\n"}
{"task_id": "Java/15", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String string_sequence(int n) {\n        // Step 2: Input Validation\n        if (n < 0) {\n            return \"\"; // or throw an exception\n        }\n\n        // Step 3: Generate the Sequence\n        List<Integer> sequence = new ArrayList<>();\n        for (int i = 0; i <= n; i++) {\n            sequence.add(i);\n        }\n\n        // Step 4: Convert Sequence to String\n        List<String> stringSequence = new ArrayList<>();\n        for (int num : sequence) {\n            stringSequence.add(String.valueOf(num));\n        }\n        String result = String.join(\" \", stringSequence);\n\n        // Step 5: Return the Result\n        return result;\n    }\n}\n"}
{"task_id": "Java/16", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n     */\n    public int count_distinct_characters(String string) {\n        // Step 1: Normalize the case\n        String normalizedString = string.toLowerCase();\n        \n        // Step 2: Initialize a Set to store distinct characters\n        Set<Character> distinctCharacters = new HashSet<>();\n        \n        // Step 3: Iterate through the string and add characters to the Set\n        for (char c : normalizedString.toCharArray()) {\n            distinctCharacters.add(c);\n        }\n        \n        // Step 4: Return the size of the Set\n        return distinctCharacters.size();\n    }\n}\n"}
{"task_id": "Java/17", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parse_music(String string) {\n        // Step 1.1: Read the input string\n        // Step 1.2: Split the input string by spaces to get an array of note representations\n        String[] notes = string.split(\" \");\n        \n        // Step 2.1: Initialize an empty list to store the beats\n        List<Integer> beats = new ArrayList<>();\n        \n        // Step 2.2: Iterate through the array of note representations\n        for (String note : notes) {\n            // Step 2.3: For each note representation, determine its corresponding number of beats based on the predefined rules\n            switch (note) {\n                case \"o\":\n                    beats.add(4); // whole note, lasts four beats\n                    break;\n                case \"o|\":\n                    beats.add(2); // half note, lasts two beats\n                    break;\n                case \".|\":\n                    beats.add(1); // quarter note, lasts one beat\n                    break;\n                default:\n                    // Handle unexpected input (optional)\n                    throw new IllegalArgumentException(\"Unexpected note format: \" + note);\n            }\n        }\n        \n        // Step 3.1: Return the list of beats as the final output\n        return beats;\n    }\n}\n"}
{"task_id": "Java/18", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlapping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n     */\n    public int how_many_times(String string, String substring) {\n        // Input validation\n        if (string == null || substring == null || substring.isEmpty()) {\n            return 0;\n        }\n\n        int count = 0;\n        int pos = 0;\n\n        // Loop through the original string\n        while ((pos = string.indexOf(substring, pos)) != -1) {\n            count++;\n            pos++; // Move forward by 1 to account for overlapping\n        }\n\n        return count;\n    }\n}\n"}
{"task_id": "Java/19", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sort_numbers(String numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            return \"\";\n        }\n\n        // Mapping of number words to their corresponding numerical values\n        Map<String, Integer> numberMap = new HashMap<>();\n        numberMap.put(\"zero\", 0);\n        numberMap.put(\"one\", 1);\n        numberMap.put(\"two\", 2);\n        numberMap.put(\"three\", 3);\n        numberMap.put(\"four\", 4);\n        numberMap.put(\"five\", 5);\n        numberMap.put(\"six\", 6);\n        numberMap.put(\"seven\", 7);\n        numberMap.put(\"eight\", 8);\n        numberMap.put(\"nine\", 9);\n\n        // Split the input string into individual number words\n        String[] numberWords = numbers.split(\" \");\n\n        // Convert the array of number words into an array of numerical values\n        Integer[] numericalValues = new Integer[numberWords.length];\n        for (int i = 0; i < numberWords.length; i++) {\n            numericalValues[i] = numberMap.get(numberWords[i]);\n        }\n\n        // Sort the array of numerical values\n        Arrays.sort(numericalValues);\n\n        // Convert the sorted numerical values back into their corresponding number words\n        String[] sortedNumberWords = new String[numericalValues.length];\n        for (int i = 0; i < numericalValues.length; i++) {\n            for (Map.Entry<String, Integer> entry : numberMap.entrySet()) {\n                if (entry.getValue().equals(numericalValues[i])) {\n                    sortedNumberWords[i] = entry.getKey();\n                    break;\n                }\n            }\n        }\n\n        // Join the sorted number words into a single space-delimited string\n        return String.join(\" \", sortedNumberWords);\n    }\n}\n"}
{"task_id": "Java/20", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        // Step 1: Input Validation\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements.\");\n        }\n        \n        // Step 2: Sorting the List\n        Collections.sort(numbers);\n        \n        // Step 3: Finding the Closest Pair\n        double minDifference = Double.MAX_VALUE;\n        List<Double> closestPair = new ArrayList<>();\n        \n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double difference = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (difference < minDifference) {\n                minDifference = difference;\n                closestPair = Arrays.asList(numbers.get(i), numbers.get(i + 1));\n            }\n        }\n        \n        // Step 4: Returning the Result\n        return closestPair;\n    }\n}\n"}
{"task_id": "Java/21", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        // Step 1: Input Validation\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements.\");\n        }\n\n        // Step 2: Find Minimum and Maximum Values\n        double min_value = numbers.get(0);\n        double max_value = numbers.get(0);\n        for (double num : numbers) {\n            if (num < min_value) {\n                min_value = num;\n            }\n            if (num > max_value) {\n                max_value = num;\n            }\n        }\n\n        // Step 3: Apply Linear Transformation\n        List<Double> transformed_list = new ArrayList<>();\n        for (double num : numbers) {\n            double transformed_value = (num - min_value) / (max_value - min_value);\n            transformed_list.add(transformed_value);\n        }\n\n        // Step 4: Return the Result\n        return transformed_list;\n    }\n}\n"}
{"task_id": "Java/22", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filter_integers(List<Object> values) {\n        if (values == null || values.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/23", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        if (string == null) {\n            throw new IllegalArgumentException(\"Input string cannot be null\");\n        }\n        return string.length();\n    }\n}\n"}
{"task_id": "Java/24", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n     */\n    public int largest_divisor(int n) {\n        // Step 1: Input Validation\n        if (n <= 1) {\n            throw new IllegalArgumentException(\"n must be greater than 1\");\n        }\n\n        // Step 2: Finding Divisors\n        List<Integer> divisors = new ArrayList<>();\n        for (int i = 1; i < n; i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n            }\n        }\n\n        // Step 3: Selecting the Largest Divisor\n        int largestDivisor = Collections.max(divisors);\n        return largestDivisor;\n    }\n}\n"}
{"task_id": "Java/25", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        \n        if (n < 2) {\n            return factors;\n        }\n        \n        for (int p = 2; p <= n; p++) {\n            while (n % p == 0) {\n                factors.add(p);\n                n /= p;\n            }\n        }\n        \n        return factors;\n    }\n}\n"}
{"task_id": "Java/26", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        // Step 1: Input Validation\n        if (numbers == null || numbers.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        // Step 2: Identify Duplicates\n        Set<Integer> seen = new HashSet<>();\n        Set<Integer> duplicates = new HashSet<>();\n        \n        for (Integer num : numbers) {\n            if (seen.contains(num)) {\n                duplicates.add(num);\n            } else {\n                seen.add(num);\n            }\n        }\n\n        // Step 3: Filter Out Duplicates\n        List<Integer> result = new ArrayList<>();\n        for (Integer num : numbers) {\n            if (!duplicates.contains(num)) {\n                result.add(num);\n            }\n        }\n\n        // Step 4: Return the Result\n        return result;\n    }\n}\n"}
{"task_id": "Java/27", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"Hello\")\n    \"hELLO\"\n     */\n    public String flip_case(String string) {\n        // Step 1: Input Validation\n        if (string == null) {\n            throw new IllegalArgumentException(\"Input string cannot be null\");\n        }\n\n        // Step 2: Initialize a StringBuilder\n        StringBuilder flippedString = new StringBuilder();\n\n        // Step 3: Iterate Through Each Character\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                // Step 3a: Flip Uppercase to Lowercase\n                flippedString.append(Character.toLowerCase(c));\n            } else if (Character.isLowerCase(c)) {\n                // Step 3b: Flip Lowercase to Uppercase\n                flippedString.append(Character.toUpperCase(c));\n            } else {\n                // Step 3c: Append Non-Alphabetic Characters as-is\n                flippedString.append(c);\n            }\n        }\n\n        // Step 4: Convert StringBuilder to String\n        String result = flippedString.toString();\n\n        // Step 5: Return the Result\n        return result;\n    }\n}\n"}
{"task_id": "Java/28", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        if (strings.isEmpty()) {\n            return \"\";\n        }\n        \n        StringBuilder result = new StringBuilder();\n        for (String str : strings) {\n            result.append(str);\n        }\n        \n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/29", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n     * Filter an input list of strings only for ones that start with a given prefix.\n     * \n     * @param strings The list of strings to filter.\n     * @param prefix  The prefix to filter by.\n     * @return A list of strings that start with the given prefix.\n     */\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        // Step 1: Input Validation\n        if (strings == null || prefix == null) {\n            return Collections.emptyList();\n        }\n\n        // Step 2: Filtering the List\n        return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/30", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> get_positive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> get_positive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> get_positive(List<Integer> l) {\n        // Step 1: Input Validation\n        if (l == null || l.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        // Step 2: Filtering Positive Numbers\n        List<Integer> positiveNumbers = l.stream()\n                                         .filter(num -> num > 0)\n                                         .collect(Collectors.toList());\n\n        // Step 3: Return the Result\n        return positiveNumbers;\n    }\n}\n"}
{"task_id": "Java/31", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    false\n    >>> is_prime(101)\n    true\n    >>> is_prime(11)\n    true\n    >>> is_prime(13441)\n    true\n    >>> is_prime(61)\n    true\n    >>> is_prime(4)\n    false\n    >>> is_prime(1)\n    false\n     */\n    public boolean is_prime(int n) {\n        // Handle edge cases\n        if (n < 2) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        // Check for even numbers greater than 2\n        if (n % 2 == 0) {\n            return false;\n        }\n        // Prime check for odd numbers\n        int sqrtN = (int) Math.sqrt(n);\n        for (int i = 3; i <= sqrtN; i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/32", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> find_zero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> find_zero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double find_zero(List<Double> xs) {\n        if (xs == null || xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"Input list must have an even number of coefficients.\");\n        }\n        \n        // Find the largest non-zero coefficient\n        double maxCoeff = 0;\n        for (double coeff : xs) {\n            if (Math.abs(coeff) > Math.abs(maxCoeff)) {\n                maxCoeff = coeff;\n            }\n        }\n        \n        if (maxCoeff == 0) {\n            throw new IllegalArgumentException(\"Input list must have at least one non-zero coefficient.\");\n        }\n        \n        // Use Newton-Raphson method to find the zero\n        double x0 = 0; // Initial guess\n        double tolerance = 1e-7;\n        int maxIterations = 1000;\n        \n        for (int i = 0; i < maxIterations; i++) {\n            double fx = poly(xs, x0);\n            double fpx = derivativePoly(xs, x0);\n            \n            if (Math.abs(fx) < tolerance) {\n                return x0;\n            }\n            \n            x0 = x0 - fx / fpx;\n        }\n        \n        throw new RuntimeException(\"Failed to find a zero within the maximum number of iterations.\");\n    }\n    \n    private double derivativePoly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 1; i < xs.size(); i++) {\n            result += xs.get(i) * i * Math.pow(x, i - 1);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/33", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted in ascending order.\n    >>> sort_third(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sort_third(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sort_third(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        List<Integer> divisibleByThreeIndices = new ArrayList<>();\n        List<Integer> elementsToSort = new ArrayList<>();\n\n        // Step 2: Identify and extract elements\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                divisibleByThreeIndices.add(i);\n                elementsToSort.add(l.get(i));\n            }\n        }\n\n        // Step 3: Sort the extracted elements\n        Collections.sort(elementsToSort);\n\n        // Step 4: Reconstruct the list\n        List<Integer> result = new ArrayList<>(l);\n        for (int i = 0; i < divisibleByThreeIndices.size(); i++) {\n            int index = divisibleByThreeIndices.get(i);\n            result.set(index, elementsToSort.get(i));\n        }\n\n        // Step 5: Return the result\n        return result;\n    }\n}\n"}
{"task_id": "Java/34", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        // Step 1: Input Validation\n        if (l == null) {\n            return new ArrayList<>(); // or throw an exception\n        }\n\n        // Step 2: Remove Duplicates\n        Set<Integer> uniqueSet = new HashSet<>(l);\n\n        // Step 3: Sort the Unique Elements\n        List<Integer> sortedUniqueList = new ArrayList<>(uniqueSet);\n        Collections.sort(sortedUniqueList);\n\n        // Step 4: Return the Result\n        return sortedUniqueList;\n    }\n}\n"}
{"task_id": "Java/35", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> max_element(Arrays.asList(1, 2, 3))\n    3\n    >>> max_element(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int max_element(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list cannot be null or empty\");\n        }\n\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n\n        return max;\n    }\n}\n"}
{"task_id": "Java/36", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n     */\n    public int fizz_buzz(int n) {\n        int totalCount = 0;\n        \n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                totalCount += countSevens(i);\n            }\n        }\n        \n        return totalCount;\n    }\n    \n    private int countSevens(int number) {\n        int count = 0;\n        String numStr = Integer.toString(number);\n        \n        for (char ch : numStr.toCharArray()) {\n            if (ch == '7') {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/37", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sort_even(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sort_even(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        List<Integer> evenIndexValues = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 2) {\n            evenIndexValues.add(l.get(i));\n        }\n\n        Collections.sort(evenIndexValues);\n\n        List<Integer> result = new ArrayList<>(l);\n        int evenIndex = 0;\n        for (int i = 0; i < l.size(); i += 2) {\n            result.set(i, evenIndexValues.get(evenIndex++));\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/38", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        if (s == null) {\n            throw new IllegalArgumentException(\"Input string cannot be null\");\n        }\n\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decode_cyclic(String s) {\n        if (s == null) {\n            throw new IllegalArgumentException(\"Input string cannot be null\");\n        }\n\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n\n        return String.join(\"\", groups);\n    }\n}\n"}
{"task_id": "Java/39", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n     */\n    public int prime_fib(int n) {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"Input must be a positive integer.\");\n        }\n\n        List<Integer> fibonacciNumbers = generateFibonacci(n);\n        List<Integer> primeFibonacciNumbers = filterPrimeFibonacci(fibonacciNumbers);\n\n        if (primeFibonacciNumbers.size() < n) {\n            throw new IllegalStateException(\"Not enough prime Fibonacci numbers found.\");\n        }\n\n        return primeFibonacciNumbers.get(n - 1);\n    }\n\n    private List<Integer> generateFibonacci(int limit) {\n        List<Integer> fibonacciNumbers = new ArrayList<>();\n        fibonacciNumbers.add(1);\n        fibonacciNumbers.add(1);\n\n        while (true) {\n            int nextFib = fibonacciNumbers.get(fibonacciNumbers.size() - 1) + fibonacciNumbers.get(fibonacciNumbers.size() - 2);\n            fibonacciNumbers.add(nextFib);\n\n            if (filterPrimeFibonacci(fibonacciNumbers).size() >= limit) {\n                break;\n            }\n        }\n\n        return fibonacciNumbers;\n    }\n\n    private boolean isPrime(int number) {\n        if (number < 2) {\n            return false;\n        }\n\n        for (int i = 2; i <= Math.sqrt(number); i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private List<Integer> filterPrimeFibonacci(List<Integer> fibonacciNumbers) {\n        List<Integer> primeFibonacciNumbers = new ArrayList<>();\n\n        for (int fib : fibonacciNumbers) {\n            if (isPrime(fib)) {\n                primeFibonacciNumbers.add(fib);\n            }\n        }\n\n        return primeFibonacciNumbers;\n    }\n}\n"}
{"task_id": "Java/40", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triples_sum_to_zero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triples_sum_to_zero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triples_sum_to_zero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triples_sum_to_zero(Arrays.asList(1))\n    false\n     */\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        // Input Validation: Check if the list has fewer than three elements\n        if (l == null || l.size() < 3) {\n            return false;\n        }\n\n        // Sorting the List: Sort the list in ascending order\n        Collections.sort(l);\n\n        // Finding Triplets: Iterate through the sorted list\n        int n = l.size();\n        for (int i = 0; i < n - 2; i++) {\n            // Initialize two pointers: left starting from i+1 and right starting from n-1\n            int left = i + 1;\n            int right = n - 1;\n\n            // Use two pointers to find pairs that sum with the element at i to zero\n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n\n                // If the sum is zero, return True\n                if (sum == 0) {\n                    return true;\n                }\n                // If the sum is less than zero, increment left to increase the sum\n                else if (sum < 0) {\n                    left++;\n                }\n                // If the sum is greater than zero, decrement right to decrease the sum\n                else {\n                    right--;\n                }\n            }\n        }\n\n        // Returning the Result: If no valid triplet is found, return False\n        return false;\n    }\n}\n"}
{"task_id": "Java/41", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int car_race_collision(int n) {\n        return n;\n    }\n}\n"}
{"task_id": "Java/42", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incr_list(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incr_list(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incr_list(List<Integer> l) {\n        if (l == null) {\n            return Collections.emptyList();\n        }\n        return l.stream()\n                .map(i -> i + 1)\n                .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/43", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairs_sum_to_zero(Arrays.asList(1))\n    false\n     */\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        if (l == null || l.size() < 2) {\n            return false;\n        }\n        \n        Set<Integer> seenElements = new HashSet<>();\n        \n        for (int num : l) {\n            int complement = -num;\n            if (seenElements.contains(complement)) {\n                return true;\n            }\n            seenElements.add(num);\n        }\n        \n        return false;\n    }\n}\n"}
{"task_id": "Java/44", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\n    >>> change_base(7, 2)\n    \"111\"\n     */\n    public String change_base(int x, int base) {\n        if (base < 2 || base >= 10) {\n            throw new IllegalArgumentException(\"Base must be between 2 and 9 inclusive.\");\n        }\n        \n        if (x == 0) {\n            return \"0\";\n        }\n        \n        StringBuilder result = new StringBuilder();\n        int number = Math.abs(x);\n        \n        while (number > 0) {\n            result.append(number % base);\n            number /= base;\n        }\n        \n        if (x < 0) {\n            result.append('-');\n        }\n        \n        return result.reverse().toString();\n    }\n}\n"}
{"task_id": "Java/45", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n     */\n    public double triangle_area(double a, double h) {\n        // Input validation\n        if (a <= 0 || h <= 0) {\n            throw new IllegalArgumentException(\"Base and height must be positive numbers.\");\n        }\n        \n        // Area calculation\n        double area = 0.5 * a * h;\n        \n        // Return the result\n        return area;\n    }\n}\n"}
{"task_id": "Java/46", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        // Base cases\n        if (n < 4) {\n            return new int[]{0, 0, 2, 0}[n];\n        }\n        \n        // Array to store Fib4 values\n        int[] fib4Values = new int[n + 1];\n        fib4Values[0] = 0;\n        fib4Values[1] = 0;\n        fib4Values[2] = 2;\n        fib4Values[3] = 0;\n        \n        // Iterative calculation\n        for (int i = 4; i <= n; i++) {\n            fib4Values[i] = fib4Values[i-1] + fib4Values[i-2] + fib4Values[i-3] + fib4Values[i-4];\n        }\n        \n        // Return the result\n        return fib4Values[n];\n    }\n}\n"}
{"task_id": "Java/47", "generation": "import java.util.*;\n\nclass Solution {\n    public double median(List<Integer> l) {\n        // Step 1: Input Validation\n        if (l.isEmpty()) {\n            return Double.NaN; // or throw new IllegalArgumentException(\"List is empty\");\n        }\n        \n        // Step 2: Sorting the List\n        Collections.sort(l);\n        \n        // Step 3: Calculating the Median\n        int size = l.size();\n        if (size % 2 != 0) {\n            // Odd number of elements\n            return l.get(size / 2);\n        } else {\n            // Even number of elements\n            int mid1 = l.get(size / 2 - 1);\n            int mid2 = l.get(size / 2);\n            return (mid1 + mid2) / 2.0;\n        }\n    }\n}\n"}
{"task_id": "Java/48", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n     */\n    public boolean is_palindrome(String text) {\n        // Handle edge cases\n        if (text == null || text.isEmpty()) {\n            return true;\n        }\n\n        // Two-pointer approach\n        int left = 0;\n        int right = text.length() - 1;\n\n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/49", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        // Step 1: Input Validation\n        if (p <= 0) {\n            throw new IllegalArgumentException(\"Modulus p must be a positive integer.\");\n        }\n        \n        // Step 2: Special Case Handling\n        if (n == 0) {\n            return 1;\n        }\n        if (p == 1) {\n            return 0;\n        }\n        \n        // Step 3: Exponentiation by Squaring\n        int result = 1;\n        int base = 2;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                result = (result * base) % p;\n            }\n            base = (base * base) % p;\n            n /= 2;\n        }\n        \n        // Step 4: Return the Result\n        return result;\n    }\n}\n"}
{"task_id": "Java/50", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (ch >= 'a' && ch <= 'z') {\n                sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n            } else if (ch >= 'A' && ch <= 'Z') {\n                sb.append((char) ('A' + ((ch + 5 - 'A') % 26)));\n            } else {\n                sb.append(ch); // Non-alphabetic characters remain unchanged\n            }\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decode_shift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (ch >= 'a' && ch <= 'z') {\n                sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26)));\n            } else if (ch >= 'A' && ch <= 'Z') {\n                sb.append((char) ('A' + ((ch - 5 - 'A' + 26) % 26)));\n            } else {\n                sb.append(ch); // Non-alphabetic characters remain unchanged\n            }\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/51", "generation": "import java.util.*;\n\nclass Solution {\n    public String remove_vowels(String text) {\n        // Step 1: Define the set of vowels\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        \n        // Step 2: Initialize a StringBuilder to build the result string\n        StringBuilder result = new StringBuilder();\n        \n        // Step 3: Iterate through each character in the input string\n        for (char c : text.toCharArray()) {\n            // Step 4: If the character is not a vowel, append it to the result\n            if (!vowels.contains(c)) {\n                result.append(c);\n            }\n        }\n        \n        // Step 5: Return the result string\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/52", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> below_threshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean below_threshold(List<Integer> l, int t) {\n        if (l == null) {\n            throw new IllegalArgumentException(\"Input list cannot be null\");\n        }\n        \n        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/53", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}\n"}
{"task_id": "Java/54", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same kind of characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean same_chars(String s0, String s1) {\n        // Step 1: Input Validation\n        if (s0 == null || s1 == null) return false;\n\n        // Step 2: Character Frequency Counting\n        HashMap<Character, Integer> freqMap0 = countFrequency(s0);\n        HashMap<Character, Integer> freqMap1 = countFrequency(s1);\n\n        // Step 3: Comparison of Character Frequencies\n        if (freqMap0.size() != freqMap1.size()) return false;\n        for (Character key : freqMap0.keySet()) {\n            if (!freqMap1.containsKey(key) || !freqMap0.get(key).equals(freqMap1.get(key))) {\n                return false;\n            }\n        }\n\n        // Step 4: Return Result\n        return true;\n    }\n\n    // Helper method to count character frequencies\n    private HashMap<Character, Integer> countFrequency(String s) {\n        HashMap<Character, Integer> freqMap = new HashMap<>();\n        for (char c : s.toCharArray()) {\n            freqMap.put(c, freqMap.getOrDefault(c, 0) + 1);\n        }\n        return freqMap;\n    }\n}\n"}
{"task_id": "Java/55", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Input must be non-negative.\");\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        \n        int a = 0;\n        int b = 1;\n        int result = 0;\n        \n        for (int i = 2; i <= n; i++) {\n            result = a + b;\n            a = b;\n            b = result;\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/56", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n     */\n    public boolean correct_bracketing(String brackets) {\n        // Input validation: Ensure the string contains only \"<\" and \">\"\n        if (!brackets.matches(\"[<>]+\")) {\n            return false;\n        }\n\n        // Initialize a stack to keep track of unmatched opening brackets\n        Stack<Character> stack = new Stack<>();\n\n        // Traverse the string character by character\n        for (char ch : brackets.toCharArray()) {\n            if (ch == '<') {\n                // If it is an opening bracket, push it onto the stack\n                stack.push(ch);\n            } else if (ch == '>') {\n                // If it is a closing bracket, check if there is a corresponding opening bracket\n                if (stack.isEmpty() || stack.pop() != '<') {\n                    return false;\n                }\n            }\n        }\n\n        // After processing the entire string, check if there are any unmatched opening brackets left\n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/57", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l == null || l.size() <= 1) {\n            return true;\n        }\n\n        boolean isIncreasing = true;\n        boolean isDecreasing = true;\n\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1)) {\n                isIncreasing = false;\n            }\n            if (l.get(i) < l.get(i + 1)) {\n                isDecreasing = false;\n            }\n        }\n\n        return isIncreasing || isDecreasing;\n    }\n}\n"}
{"task_id": "Java/58", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        // Step 1: Input Validation\n        if (l1 == null || l2 == null) {\n            return Collections.emptyList();\n        }\n        \n        // Step 2: Identify Common Elements\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> commonSet = new HashSet<>();\n        \n        for (Integer num : l2) {\n            if (set1.contains(num)) {\n                commonSet.add(num);\n            }\n        }\n        \n        // Step 3: Sort the Result\n        List<Integer> result = new ArrayList<>(commonSet);\n        Collections.sort(result);\n        \n        // Step 4: Return the Result\n        return result;\n    }\n}\n"}
{"task_id": "Java/59", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n     */\n    public int largest_prime_factor(int n) {\n        // Input validation\n        if (n <= 1) {\n            throw new IllegalArgumentException(\"n must be greater than 1\");\n        }\n\n        // List to store prime factors\n        List<Integer> primeFactors = new ArrayList<>();\n\n        // Start with the smallest prime factor\n        int factor = 2;\n\n        // Prime factorization loop\n        while (n > 1) {\n            while (n % factor == 0) {\n                primeFactors.add(factor);\n                n /= factor;\n            }\n            factor++;\n        }\n\n        // Find the largest prime factor\n        int largestPrimeFactor = Collections.max(primeFactors);\n\n        // Return the result\n        return largestPrimeFactor;\n    }\n}\n"}
{"task_id": "Java/60", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n     */\n    public int sum_to_n(int n) {\n        // Input validation\n        if (n <= 0) {\n            return 0; // or throw an exception\n        }\n        \n        // Sum calculation using mathematical formula\n        int sum = n * (n + 1) / 2;\n        \n        // Return the result\n        return sum;\n    }\n}\n"}
{"task_id": "Java/61", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n     */\n    public boolean correct_bracketing(String brackets) {\n        if (brackets == null) {\n            return false;\n        }\n        \n        Stack<Character> stack = new Stack<>();\n        \n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '(') {\n                stack.push(bracket);\n            } else if (bracket == ')') {\n                if (stack.isEmpty() || stack.pop() != '(') {\n                    return false;\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/62", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        if (xs == null || xs.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list must not be null or empty\");\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/63", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    private Map<Integer, Integer> memo = new HashMap<>();\n\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n < 0) throw new IllegalArgumentException(\"Input must be non-negative\");\n        if (n == 0 || n == 1) return 0;\n        if (n == 2) return 1;\n\n        if (memo.containsKey(n)) return memo.get(n);\n\n        int result = fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n        memo.put(n, result);\n        return result;\n    }\n}\n"}
{"task_id": "Java/64", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n     */\n    public int vowels_count(String s) {\n        // Convert the string to lowercase to handle case insensitivity\n        s = s.toLowerCase();\n        \n        // Initialize a counter to keep track of the number of vowels\n        int count = 0;\n        \n        // Loop through each character in the string\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            \n            // Check if the character is one of the vowels ('a', 'e', 'i', 'o', 'u')\n            if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n                count++;\n            }\n        }\n        \n        // Check if the last character of the string is 'y'\n        if (s.length() > 0 && s.charAt(s.length() - 1) == 'y') {\n            count++;\n        }\n        \n        // Return the final count of vowels\n        return count;\n    }\n}\n"}
{"task_id": "Java/65", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n     */\n    public String circular_shift(int x, int shift) {\n        String strX = Integer.toString(x);\n        int numDigits = strX.length();\n        \n        if (shift >= numDigits) {\n            return new StringBuilder(strX).reverse().toString();\n        }\n        \n        int effectiveShift = shift % numDigits;\n        String part1 = strX.substring(0, numDigits - effectiveShift);\n        String part2 = strX.substring(numDigits - effectiveShift);\n        \n        return part2 + part1;\n    }\n}\n"}
{"task_id": "Java/66", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0; // Initialize sum to 0\n        \n        // Loop through each character in the string\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i); // Get the current character\n            \n            // Check if the character is uppercase\n            if (Character.isUpperCase(ch)) {\n                // Convert the character to its ASCII code and add to sum\n                sum += (int) ch;\n            }\n        }\n        \n        // Return the final sum\n        return sum;\n    }\n}\n"}
{"task_id": "Java/67", "generation": "import java.util.regex.*;\n\nclass Solution {\n    public int fruit_distribution(String s, int n) {\n        // Step 1: Extract the number of apples and oranges\n        Pattern applePattern = Pattern.compile(\"(\\\\d+) apples\");\n        Matcher appleMatcher = applePattern.matcher(s);\n        int apples = 0;\n        if (appleMatcher.find()) {\n            apples = Integer.parseInt(appleMatcher.group(1));\n        }\n\n        Pattern orangePattern = Pattern.compile(\"(\\\\d+) oranges\");\n        Matcher orangeMatcher = orangePattern.matcher(s);\n        int oranges = 0;\n        if (orangeMatcher.find()) {\n            oranges = Integer.parseInt(orangeMatcher.group(1));\n        }\n\n        // Step 2: Calculate the number of mangoes\n        int mangoes = n - apples - oranges;\n\n        // Step 3: Return the result\n        return mangoes;\n    }\n}\n"}
{"task_id": "Java/68", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smallest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        // Step 1: Input Validation\n        if (arr.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        // Step 2: Initialize Variables\n        int smallestEven = Integer.MAX_VALUE;\n        int smallestIndex = -1;\n\n        // Step 3: Iterate Through the List\n        for (int i = 0; i < arr.size(); i++) {\n            int current = arr.get(i);\n            if (current % 2 == 0) { // Check if the current element is even\n                if (current < smallestEven) {\n                    smallestEven = current;\n                    smallestIndex = i;\n                } else if (current == smallestEven) {\n                    if (i < smallestIndex) {\n                        smallestIndex = i;\n                    }\n                }\n            }\n        }\n\n        // Step 4: Return the Result\n        if (smallestEven == Integer.MAX_VALUE) {\n            return new ArrayList<>();\n        } else {\n            return Arrays.asList(smallestEven, smallestIndex);\n        }\n    }\n}\n"}
{"task_id": "Java/69", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        // Step 1.1: Check if the list is empty\n        if (lst == null || lst.isEmpty()) {\n            return -1;\n        }\n        \n        // Step 1.2: Ensure all elements in the list are positive integers\n        for (int num : lst) {\n            if (num <= 0) {\n                return -1;\n            }\n        }\n        \n        // Step 2.1: Initialize a HashMap to store the frequency of each integer\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        // Step 2.2: Populate the HashMap with the count of each integer\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        // Step 3.1: Initialize a variable to store the greatest valid integer\n        int maxValidInteger = -1;\n        \n        // Step 3.2: Iterate through the entries of the HashMap\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int num = entry.getKey();\n            int freq = entry.getValue();\n            \n            // Check if the frequency of the integer is greater than or equal to the integer itself\n            if (freq >= num) {\n                // Update maxValidInteger if the current integer is greater\n                if (num > maxValidInteger) {\n                    maxValidInteger = num;\n                }\n            }\n        }\n        \n        // Step 4.1: After iterating through the HashMap, check the value of maxValidInteger\n        // Step 4.2: If maxValidInteger is still -1, return -1 (indicating no valid integer was found)\n        // Step 4.3: Otherwise, return maxValidInteger\n        return maxValidInteger;\n    }\n}\n"}
{"task_id": "Java/70", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strange_sort_list(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strange_sort_list(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        // Step 1: Input Validation\n        if (lst.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        // Step 2: Sort the List\n        Collections.sort(lst);\n\n        // Step 3: Initialize Result List\n        List<Integer> result = new ArrayList<>();\n\n        // Step 4: Iterate and Alternate\n        while (!lst.isEmpty()) {\n            // Add the minimum value\n            result.add(lst.remove(0));\n            \n            // Add the maximum value if it exists\n            if (!lst.isEmpty()) {\n                result.add(lst.remove(lst.size() - 1));\n            }\n        }\n\n        // Step 5: Return the Result\n        return result;\n    }\n}\n"}
{"task_id": "Java/71", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n     */\n    public double triangle_area(double a, double b, double c) {\n        // Validate if the sides form a valid triangle\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n\n        // Calculate the semi-perimeter\n        double s = (a + b + c) / 2;\n\n        // Calculate the area using Heron's formula\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\n        // Round the area to two decimal places\n        area = Math.round(area * 100.0) / 100.0;\n\n        return area;\n    }\n}\n"}
{"task_id": "Java/72", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean will_it_fly(List<Integer> q, int w) {\n        // Step 1: Input Validation\n        if (q == null) {\n            return false;\n        }\n\n        // Step 2: Check if the list is palindromic\n        boolean isPalindrome = isPalindromic(q);\n\n        // Step 3: Calculate the sum of the list elements\n        int sum = calculateSum(q);\n\n        // Step 4: Compare the sum with the maximum weight\n        boolean isWithinLimit = isSumWithinLimit(sum, w);\n\n        // Step 5: Combine the results\n        return isPalindrome && isWithinLimit;\n    }\n\n    private boolean isPalindromic(List<Integer> q) {\n        int left = 0;\n        int right = q.size() - 1;\n        while (left < right) {\n            if (!q.get(left).equals(q.get(right))) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    private int calculateSum(List<Integer> q) {\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n        return sum;\n    }\n\n    private boolean isSumWithinLimit(int sum, int w) {\n        return sum <= w;\n    }\n}\n"}
{"task_id": "Java/73", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallest_change(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallest_change(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallest_change(List<Integer> arr) {\n        // Step 1: Input Validation\n        if (arr == null || arr.isEmpty()) {\n            return 0;\n        }\n\n        // Step 2: Initialize Counters\n        int changes = 0;\n        int n = arr.size();\n\n        // Step 3: Iterate Through the Array\n        for (int i = 0; i < n / 2; i++) {\n            if (arr.get(i) != arr.get(n - i - 1)) {\n                changes++;\n            }\n        }\n\n        // Step 4: Return the Result\n        return changes;\n    }\n}\n"}
{"task_id": "Java/74", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match(Arrays.asList(), Arrays.asList()) -> []\n    total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    total_match(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        int totalCharsLst1 = countTotalChars(lst1);\n        int totalCharsLst2 = countTotalChars(lst2);\n        \n        if (totalCharsLst1 <= totalCharsLst2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n\n    private int countTotalChars(List<String> lst) {\n        int totalChars = 0;\n        for (String str : lst) {\n            totalChars += str.length();\n        }\n        return totalChars;\n    }\n}\n"}
{"task_id": "Java/75", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that the prime number is less then 100.\n    Example:\n    is_multiply_prime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean is_multiply_prime(int a) {\n        List<Integer> primes = generatePrimesLessThan100();\n        return checkCombinations(a, primes);\n    }\n\n    private List<Integer> generatePrimesLessThan100() {\n        boolean[] isPrime = new boolean[100];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = isPrime[1] = false; // 0 and 1 are not prime numbers\n\n        for (int i = 2; i * i < 100; i++) {\n            if (isPrime[i]) {\n                for (int j = i * i; j < 100; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < 100; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n            }\n        }\n\n        return primes;\n    }\n\n    private boolean checkCombinations(int number, List<Integer> primes) {\n        int n = primes.size();\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    int product = primes.get(i) * primes.get(j) * primes.get(k);\n                    if (product == number) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/76", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n     */\n    public boolean is_simple_power(int x, int n) {\n        // Input validation\n        if (x <= 0 || n <= 0) {\n            return false;\n        }\n        \n        // Special case handling\n        if (n == 1) {\n            return x == 1;\n        }\n        if (x == 1) {\n            return n > 1;\n        }\n        \n        // Power calculation loop\n        int power = 1;\n        while (power < x) {\n            power *= n;\n            if (power == x) {\n                return true;\n            }\n        }\n        \n        // Return result\n        return false;\n    }\n}\n"}
{"task_id": "Java/77", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        double cubeRoot = Math.cbrt(a);\n        int intCubeRoot = (int) cubeRoot;\n        if (intCubeRoot == cubeRoot) {\n            if (intCubeRoot * intCubeRoot * intCubeRoot == a) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/78", "generation": "import java.util.*;\n\nclass Solution {\n    public int hex_key(String num) {\n        // Step 1: Define the set of prime hexadecimal digits\n        Set<Character> primeHexDigits = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        // Step 2: Initialize the counter\n        int primeCount = 0;\n        \n        // Step 3: Iterate through the input string\n        for (char ch : num.toCharArray()) {\n            if (primeHexDigits.contains(ch)) {\n                primeCount++;\n            }\n        }\n        \n        // Step 4: Return the counter\n        return primeCount;\n    }\n}\n"}
{"task_id": "Java/79", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   // returns \"db1111db\"\n    decimal_to_binary(32)   // returns \"db100000db\"\n     */\n    public String decimal_to_binary(int decimal) {\n        // Step 1: Convert decimal to binary\n        String binary = \"\";\n        while (decimal > 0) {\n            binary = (decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        \n        // Step 2: Format the binary string with \"db\"\n        String formattedBinary = \"db\" + binary + \"db\";\n        \n        // Step 3: Return the formatted string\n        return formattedBinary;\n    }\n}\n"}
{"task_id": "Java/80", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => false\n    is_happy(aa) => false\n    is_happy(abcd) => true\n    is_happy(aabb) => false\n    is_happy(adb) => true\n    is_happy(xyy) => false\n     */\n    public boolean is_happy(String s) {\n        // Step 1: Check if the length of the string is less than 3\n        if (s.length() < 3) {\n            return false;\n        }\n\n        // Step 2: Iterate through the string\n        for (int i = 0; i < s.length() - 2; i++) {\n            // Step 3: Extract the substring of the next 3 characters\n            String substring = s.substring(i, i + 3);\n            \n            // Step 4: Check if all characters in the substring are distinct\n            if (!areCharactersDistinct(substring)) {\n                return false;\n            }\n        }\n\n        // Step 5: If all sets of 3 consecutive characters are distinct, return true\n        return true;\n    }\n\n    // Helper method to check if all characters in a string are distinct\n    private boolean areCharactersDistinct(String substring) {\n        Set<Character> charSet = new HashSet<>();\n        for (char c : substring.toCharArray()) {\n            charSet.add(c);\n        }\n        return charSet.size() == 3;\n    }\n}\n"}
{"task_id": "Java/81", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        // Step 1: Input Validation\n        if (grades == null) {\n            throw new IllegalArgumentException(\"Input list cannot be null\");\n        }\n\n        List<String> letterGrades = new ArrayList<>();\n\n        // Step 2: Process each GPA and map it to a letter grade\n        for (double gpa : grades) {\n            if (gpa < 0.0 || gpa > 4.0) {\n                throw new IllegalArgumentException(\"Invalid GPA value: \" + gpa);\n            }\n            String letterGrade = getLetterGrade(gpa);\n            letterGrades.add(letterGrade);\n        }\n\n        // Step 3: Return the list of letter grades\n        return letterGrades;\n    }\n\n    private String getLetterGrade(double gpa) {\n        if (gpa == 4.0) return \"A+\";\n        else if (gpa > 3.7) return \"A\";\n        else if (gpa > 3.3) return \"A-\";\n        else if (gpa > 3.0) return \"B+\";\n        else if (gpa > 2.7) return \"B\";\n        else if (gpa > 2.3) return \"B-\";\n        else if (gpa > 2.0) return \"C+\";\n        else if (gpa > 1.7) return \"C\";\n        else if (gpa > 1.3) return \"C-\";\n        else if (gpa > 1.0) return \"D+\";\n        else if (gpa > 0.7) return \"D\";\n        else if (gpa > 0.0) return \"D-\";\n        else return \"E\";\n    }\n}\n"}
{"task_id": "Java/82", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    prime_length(\"Hello\") == true\n    prime_length(\"abcdcba\") == true\n    prime_length(\"kittens\") == true\n    prime_length(\"orange\") == false\n     */\n    public boolean prime_length(String string) {\n        int length = string.length();\n        return isPrime(length);\n    }\n\n    private boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/83", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int starts_one_ends(int n) {\n        if (n == 1) {\n            return 1; // Only the number 1 itself\n        }\n        \n        int countStartsWithOne = (int) Math.pow(10, n - 1);\n        int countEndsWithOne = 9 * (int) Math.pow(10, n - 2);\n        int countStartsAndEndsWithOne = (int) Math.pow(10, n - 2);\n        \n        return countStartsWithOne + countEndsWithOne - countStartsAndEndsWithOne;\n    }\n}\n"}
{"task_id": "Java/84", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return in binary the total sum of its digits.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        // Step 1: Validate input\n        if (N < 0 || N > 10000) {\n            throw new IllegalArgumentException(\"N must be between 0 and 10000 inclusive.\");\n        }\n\n        // Step 2: Convert N to a string\n        String numStr = Integer.toString(N);\n\n        // Step 3: Sum the digits of the string\n        int sum = 0;\n        for (char digitChar : numStr.toCharArray()) {\n            sum += Character.getNumericValue(digitChar);\n        }\n\n        // Step 4: Convert the sum to a binary string\n        String binarySum = Integer.toBinaryString(sum);\n\n        // Step 5: Return the binary string as the final output\n        return binarySum;\n    }\n}\n"}
{"task_id": "Java/85", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        \n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 != 0 && lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        \n        return sum;\n    }\n}\n"}
{"task_id": "Java/86", "generation": "import java.util.*;\n\nclass Solution {\n    public String anti_shuffle(String s) {\n        // Step 1: Split the input string into words and spaces\n        String[] words = s.split(\" \");\n        List<String> sortedWords = new ArrayList<>();\n\n        // Step 2: Sort each word\n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            sortedWords.add(new String(chars));\n        }\n\n        // Step 3: Reconstruct the output string\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < words.length; i++) {\n            result.append(sortedWords.get(i));\n            if (i < words.length - 1) {\n                result.append(\" \");\n            }\n        }\n\n        // Step 4: Return the result\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/87", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        // Step 1: Initialize an empty list to store coordinates\n        List<List<Integer>> coordinates = new ArrayList<>();\n        \n        // Step 2: Iterate through the list to find occurrences of x\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    coordinates.add(Arrays.asList(i, j));\n                }\n            }\n        }\n        \n        // Step 3: Sort the coordinates\n        Collections.sort(coordinates, (a, b) -> {\n            if (a.get(0).equals(b.get(0))) {\n                return b.get(1).compareTo(a.get(1)); // Sort columns in descending order\n            }\n            return a.get(0).compareTo(b.get(0)); // Sort rows in ascending order\n        });\n        \n        // Step 4: Return the sorted list of coordinates\n        return coordinates;\n    }\n}\n"}
{"task_id": "Java/88", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array(Arrays.asList()) => []\n    * sort_array(Arrays.asList(5)) => [5]\n    * sort_array(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sort_array(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sort_array(List<Integer> array) {\n        if (array == null || array.isEmpty()) {\n            return Collections.emptyList();\n        }\n        \n        if (array.size() == 1) {\n            return new ArrayList<>(array);\n        }\n        \n        int firstElement = array.get(0);\n        int lastElement = array.get(array.size() - 1);\n        int sum = firstElement + lastElement;\n        boolean isOdd = (sum % 2 != 0);\n        \n        List<Integer> copy = new ArrayList<>(array);\n        if (isOdd) {\n            Collections.sort(copy);\n        } else {\n            Collections.sort(copy, Collections.reverseOrder());\n        }\n        \n        return copy;\n    }\n}\n"}
{"task_id": "Java/89", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        if (s.isEmpty()) {\n            return \"\";\n        }\n\n        StringBuilder encryptedString = new StringBuilder();\n\n        for (char c : s.toCharArray()) {\n            encryptedString.append(shiftCharacter(c, 4));\n        }\n\n        return encryptedString.toString();\n    }\n\n    private char shiftCharacter(char c, int shift) {\n        if (Character.isLowerCase(c)) {\n            return (char) ((c - 'a' + shift) % 26 + 'a');\n        } else if (Character.isUpperCase(c)) {\n            return (char) ((c - 'A' + shift) % 26 + 'A');\n        } else {\n            // Handle non-alphabetic characters if needed\n            return c;\n        }\n    }\n}\n"}
{"task_id": "Java/90", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    next_smallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    next_smallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    next_smallest(Arrays.asList()) == Optional.empty\n    next_smallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        // Step 1: Input Validation\n        if (lst == null || lst.isEmpty()) {\n            return Optional.empty();\n        }\n\n        // Step 2: Finding the Smallest Element\n        int smallest = lst.get(0);\n        for (int num : lst) {\n            if (num < smallest) {\n                smallest = num;\n            }\n        }\n\n        // Step 3: Finding the Second Smallest Element\n        Integer secondSmallest = null;\n        for (int num : lst) {\n            if (num > smallest) {\n                if (secondSmallest == null || num < secondSmallest) {\n                    secondSmallest = num;\n                }\n            }\n        }\n\n        // Step 4: Returning the Result\n        return (secondSmallest != null) ? Optional.of(secondSmallest) : Optional.empty();\n    }\n}\n"}
{"task_id": "Java/91", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int is_bored(String S) {\n        // Step 1: Split the input string into sentences\n        String[] sentences = S.split(\"[.!?]\\\\s*\");\n        \n        // Step 2: Initialize a counter for boredoms\n        int boredomCount = 0;\n        \n        // Step 3: Iterate through each sentence\n        for (String sentence : sentences) {\n            // Step 4: Check if the sentence starts with \"I\"\n            if (sentence.startsWith(\"I\")) {\n                // Step 5: Increment the boredom counter\n                boredomCount++;\n            }\n        }\n        \n        // Step 6: Return the count of boredoms\n        return boredomCount;\n    }\n}\n"}
{"task_id": "Java/92", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) -> true\n\n    any_int(3, 2, 2) -> false\n\n    any_int(3, -2, 1) -> true\n\n    any_int(3.6, -2.2, 2) -> false\n     */\n    public boolean any_int(Object x, Object y, Object z) {\n        // Step 1: Input Validation\n        if (!(x instanceof Integer) || !(y instanceof Integer) || !(z instanceof Integer)) {\n            return false;\n        }\n\n        // Step 2: Convert to integers\n        int intX = (int) x;\n        int intY = (int) y;\n        int intZ = (int) z;\n\n        // Step 3: Sum Calculation and Comparison\n        if (intX == intY + intZ || intY == intX + intZ || intZ == intX + intY) {\n            return true;\n        }\n\n        // Step 4: Return Result\n        return false;\n    }\n}\n"}
{"task_id": "Java/93", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        if (message == null) {\n            return \"\";\n        }\n\n        StringBuilder encodedMessage = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            char swappedCaseChar = swapCase(c);\n            char replacedVowelChar = replaceVowel(swappedCaseChar);\n            encodedMessage.append(replacedVowelChar);\n        }\n\n        return encodedMessage.toString();\n    }\n\n    private char swapCase(char c) {\n        if (Character.isUpperCase(c)) {\n            return Character.toLowerCase(c);\n        } else if (Character.isLowerCase(c)) {\n            return Character.toUpperCase(c);\n        } else {\n            return c;\n        }\n    }\n\n    private char replaceVowel(char c) {\n        switch (c) {\n            case 'a': return 'c';\n            case 'e': return 'g';\n            case 'i': return 'k';\n            case 'o': return 'q';\n            case 'u': return 'w';\n            case 'A': return 'C';\n            case 'E': return 'G';\n            case 'I': return 'K';\n            case 'O': return 'Q';\n            case 'U': return 'W';\n            default: return c;\n        }\n    }\n}\n"}
{"task_id": "Java/94", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        // Step 1: Filter prime numbers\n        List<Integer> primes = new ArrayList<>();\n        for (int num : lst) {\n            if (isPrime(num)) {\n                primes.add(num);\n            }\n        }\n        \n        // Step 2: Find the largest prime\n        int largestPrime = 0;\n        for (int prime : primes) {\n            if (prime > largestPrime) {\n                largestPrime = prime;\n            }\n        }\n        \n        // Step 3: Calculate the sum of digits of the largest prime\n        int sumOfDigits = sumOfDigits(largestPrime);\n        \n        // Step 4: Return the result\n        return sumOfDigits;\n    }\n    \n    // Helper function to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n    \n    // Helper function to calculate the sum of digits of a number\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/95", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings and all keys are in lower case or  in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        boolean allLower = true;\n        boolean allUpper = true;\n\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n\n            String strKey = (String) key;\n            if (!strKey.equals(strKey.toLowerCase())) {\n                allLower = false;\n            }\n            if (!strKey.equals(strKey.toUpperCase())) {\n                allUpper = false;\n            }\n\n            if (!allLower && !allUpper) {\n                return false;\n            }\n        }\n\n        return allLower || allUpper;\n    }\n}\n"}
{"task_id": "Java/96", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> count_up_to(int n) {\n        if (n < 2) {\n            return new ArrayList<>();\n        }\n        \n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        \n        return primes;\n    }\n    \n    private boolean isPrime(int num) {\n        if (num < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/97", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        // Step 1: Extract unit digits\n        int unitDigitA = Math.abs(a) % 10;\n        int unitDigitB = Math.abs(b) % 10;\n        \n        // Step 2: Compute the product of unit digits\n        int product = unitDigitA * unitDigitB;\n        \n        // Step 3: Return the product\n        return product;\n    }\n}\n"}
{"task_id": "Java/98", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper(\"aBCdEf\") returns 1\n    count_upper(\"abcdefg\") returns 0\n    count_upper(\"dBBE\") returns 0\n     */    \n    public int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char ch = s.charAt(i);\n            if (ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/99", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int closest_integer(String value) {\n        try {\n            // Step 1: Convert the string to a double\n            double doubleValue = Double.parseDouble(value);\n            \n            // Step 2: Round the double value to the nearest integer\n            long roundedValue = Math.round(doubleValue);\n            \n            // Step 3: Check for equidistant case and adjust if necessary\n            if (Math.abs(doubleValue - roundedValue) == 0.5) {\n                if (doubleValue > 0) {\n                    roundedValue = (long) (doubleValue + 0.5);\n                } else {\n                    roundedValue = (long) (doubleValue - 0.5);\n                }\n            }\n            \n            // Step 4: Return the final integer value\n            return (int) roundedValue;\n            \n        } catch (NumberFormatException e) {\n            // Handle invalid input (e.g., throw an exception or return a default value)\n            throw new IllegalArgumentException(\"Invalid input: \" + value);\n        }\n    }\n}\n"}
{"task_id": "Java/100", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        int currentStones = n;\n        \n        for (int i = 0; i < n; i++) {\n            pile.add(currentStones);\n            if (currentStones % 2 == 0) {\n                currentStones += 2;\n            } else {\n                currentStones += 2;\n            }\n        }\n        \n        return pile;\n    }\n}\n"}
{"task_id": "Java/101", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> words_string(String s) {\n        // Step 1: Input Validation\n        if (s == null || s.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        // Step 2: Define Separators and Split the String\n        String[] words = s.split(\"[,\\\\s]+\");\n\n        // Step 3: Trim and Filter Words\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            word = word.trim();\n            if (!word.isEmpty()) {\n                result.add(word);\n            }\n        }\n\n        // Step 4: Return the Result\n        return result;\n    }\n}\n"}
{"task_id": "Java/102", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n     */\n    public int choose_num(int x, int y) {\n        // Step 1: Input Validation\n        if (x <= 0 || y <= 0 || x > y) {\n            return -1;\n        }\n\n        // Step 2: Identify Even Numbers\n        int maxEven = -1;\n        for (int i = x; i <= y; i++) {\n            if (i % 2 == 0) {\n                if (maxEven == -1 || i > maxEven) {\n                    maxEven = i;\n                }\n            }\n        }\n\n        // Step 3: Return the Result\n        return maxEven;\n    }\n}\n"}
{"task_id": "Java/103", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"1111\"\n    rounded_avg(20, 33) => \"11011\"\n     */\n    public Object rounded_avg(int n, int m) {\n        // Step 1.1: Check if n is greater than m\n        if (n > m) {\n            // Step 1.2: If n > m, return -1\n            return -1;\n        }\n\n        // Step 2.1: Calculate the sum of integers from n to m (inclusive)\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n\n        // Step 2.2: Calculate the count of integers from n to m (inclusive)\n        int count = m - n + 1;\n\n        // Step 2.3: Compute the average by dividing the sum by the count\n        double average = (double) sum / count;\n\n        // Step 3.1: Round the computed average to the nearest integer using Math.round()\n        int roundedAverage = (int) Math.round(average);\n\n        // Step 4.1: Convert the rounded integer to its binary representation using Integer.toBinaryString()\n        String binaryString = Integer.toBinaryString(roundedAverage);\n\n        // Step 5.1: Return the binary string as the final result\n        return binaryString;\n    }\n}\n"}
{"task_id": "Java/104", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    // Helper function to check if a number contains any even digit\n    private boolean hasEvenDigit(int number) {\n        String numStr = String.valueOf(number);\n        for (char digit : numStr.toCharArray()) {\n            if (digit == '0' || digit == '2' || digit == '4' || digit == '6' || digit == '8') {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // Main function to filter and sort the list\n    public List<Integer> unique_digits(List<Integer> x) {\n        // Filter out numbers with even digits\n        List<Integer> filteredList = x.stream()\n                                      .filter(num -> !hasEvenDigit(num))\n                                      .collect(Collectors.toList());\n        \n        // Sort the filtered list\n        Collections.sort(filteredList);\n        \n        // Return the sorted list\n        return filteredList;\n    }\n}\n"}
{"task_id": "Java/105", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> by_length(List<Integer> arr) {\n        // Step 1: Filter and Validate Input\n        List<Integer> validNumbers = new ArrayList<>();\n        for (Integer num : arr) {\n            if (num >= 1 && num <= 9) {\n                validNumbers.add(num);\n            }\n        }\n\n        // Step 2: Sort the Validated Array\n        Collections.sort(validNumbers);\n\n        // Step 3: Reverse the Sorted Array\n        Collections.reverse(validNumbers);\n\n        // Step 4: Map Digits to Corresponding Names\n        Map<Integer, String> digitToName = new HashMap<>();\n        digitToName.put(1, \"One\");\n        digitToName.put(2, \"Two\");\n        digitToName.put(3, \"Three\");\n        digitToName.put(4, \"Four\");\n        digitToName.put(5, \"Five\");\n        digitToName.put(6, \"Six\");\n        digitToName.put(7, \"Seven\");\n        digitToName.put(8, \"Eight\");\n        digitToName.put(9, \"Nine\");\n\n        List<String> result = new ArrayList<>();\n        for (Integer num : validNumbers) {\n            result.add(digitToName.get(num));\n        }\n\n        // Step 5: Handle Edge Cases\n        // Edge cases are already handled by the filtering and mapping steps\n\n        // Step 6: Return the Result\n        return result;\n    }\n}\n"}
{"task_id": "Java/106", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int factorial = computeFactorial(i);\n                result.add(factorial);\n            } else {\n                int sum = computeSum(i);\n                result.add(sum);\n            }\n        }\n        \n        return result;\n    }\n    \n    private int computeFactorial(int num) {\n        int factorial = 1;\n        for (int j = 1; j <= num; j++) {\n            factorial *= j;\n        }\n        return factorial;\n    }\n    \n    private int computeSum(int num) {\n        int sum = 0;\n        for (int j = 1; j <= num; j++) {\n            sum += j;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/107", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> even_odd_palindrome(int n) {\n        // Input validation\n        if (n < 1 || n > 1000) {\n            throw new IllegalArgumentException(\"Input n must be between 1 and 1000.\");\n        }\n\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n\n    private boolean isPalindrome(int num) {\n        String str = Integer.toString(num);\n        String reversedStr = new StringBuilder(str).reverse().toString();\n        return str.equals(reversedStr);\n    }\n}\n"}
{"task_id": "Java/108", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums(Arrays.asList()) == 0\n    >>> count_nums(Arrays.asList(-1, 11, -11)) == 1\n    >>> count_nums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int count_nums(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return 0;\n        }\n\n        int count = 0;\n\n        for (int num : arr) {\n            int sum = 0;\n            int temp = num;\n\n            while (temp != 0) {\n                int digit = temp % 10;\n                sum += digit;\n                temp /= 10;\n            }\n\n            if (num < 0) {\n                sum = -sum;\n            }\n\n            if (sum > 0) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n}\n"}
{"task_id": "Java/109", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    move_one_ball(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean move_one_ball(List<Integer> arr) {\n        // Step 1: Input Validation\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        // Step 2: Sort the Array\n        List<Integer> sortedArr = new ArrayList<>(arr);\n        Collections.sort(sortedArr);\n\n        // Step 3: Find the Rotation Point\n        int n = arr.size();\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i).equals(sortedArr.get(0))) {\n                // Step 4: Check for Matching Rotation\n                boolean isSorted = true;\n                for (int j = 0; j < n; j++) {\n                    if (!arr.get((i + j) % n).equals(sortedArr.get(j))) {\n                        isSorted = false;\n                        break;\n                    }\n                }\n                if (isSorted) {\n                    return true;\n                }\n            }\n        }\n\n        // Step 5: Return the Result\n        return false;\n    }\n}\n"}
{"task_id": "Java/110", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Step 1: Input Validation\n        if (lst1.isEmpty() || lst2.isEmpty()) {\n            throw new IllegalArgumentException(\"Lists cannot be empty\");\n        }\n\n        // Step 2: Count Odd and Even Numbers\n        int oddCountInLst1 = 0;\n        int evenCountInLst2 = 0;\n\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCountInLst1++;\n            }\n        }\n\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCountInLst2++;\n            }\n        }\n\n        // Step 3: Compare Counts\n        if (evenCountInLst2 >= oddCountInLst1) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}\n"}
{"task_id": "Java/111", "generation": "import java.util.*;\n\nclass Solution {\n    public Map<String, Integer> histogram(String test) {\n        // Step 1: Input Validation and Parsing\n        if (test.isEmpty()) {\n            return new HashMap<>();\n        }\n        String[] letters = test.split(\" \");\n\n        // Step 2: Frequency Counting\n        Map<String, Integer> frequencyMap = new HashMap<>();\n        for (String letter : letters) {\n            frequencyMap.put(letter, frequencyMap.getOrDefault(letter, 0) + 1);\n        }\n\n        // Step 3: Determine Maximum Frequency\n        int maxFrequency = 0;\n        Map<String, Integer> resultMap = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : frequencyMap.entrySet()) {\n            int frequency = entry.getValue();\n            if (frequency > maxFrequency) {\n                maxFrequency = frequency;\n                resultMap.clear();\n                resultMap.put(entry.getKey(), frequency);\n            } else if (frequency == maxFrequency) {\n                resultMap.put(entry.getKey(), frequency);\n            }\n        }\n\n        // Step 4: Construct the Result\n        return resultMap;\n    }\n}\n"}
{"task_id": "Java/112", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverse_delete(String s, String c) {\n        // Step 1: Remove characters from s that are in c\n        Set<Character> charsToRemove = new HashSet<>();\n        for (char ch : c.toCharArray()) {\n            charsToRemove.add(ch);\n        }\n        \n        StringBuilder resultBuilder = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!charsToRemove.contains(ch)) {\n                resultBuilder.append(ch);\n            }\n        }\n        \n        String resultString = resultBuilder.toString();\n        \n        // Step 2: Check if the result string is a palindrome\n        boolean isPalindrome = resultString.equals(new StringBuilder(resultString).reverse().toString());\n        \n        // Step 3: Return the result as a tuple\n        List<Object> result = new ArrayList<>();\n        result.add(resultString);\n        result.add(isPalindrome);\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/113", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> odd_count(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        String template = \"the number of odd elements %dn the str%dng %d of the %dnput.\";\n        \n        for (String str : lst) {\n            int oddCount = 0;\n            for (char c : str.toCharArray()) {\n                if (isOddDigit(c)) {\n                    oddCount++;\n                }\n            }\n            String formattedString = String.format(template, oddCount, oddCount, oddCount, oddCount);\n            result.add(formattedString);\n        }\n        \n        return result;\n    }\n    \n    private boolean isOddDigit(char c) {\n        return c == '1' || c == '3' || c == '5' || c == '7' || c == '9';\n    }\n}\n"}
{"task_id": "Java/114", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n\n        for (int num : nums) {\n            currentSum = Math.min(num, currentSum + num);\n            minSum = Math.min(minSum, currentSum);\n        }\n\n        return minSum;\n    }\n}\n"}
{"task_id": "Java/115", "generation": "import java.util.*;\n\nclass Solution {\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        // Step 1: Input Validation\n        if (grid == null || grid.isEmpty()) {\n            return 0;\n        }\n\n        int totalExtractions = 0;\n\n        // Step 2: Water Extraction Calculation\n        for (List<Integer> row : grid) {\n            int waterUnits = Collections.frequency(row, 1);\n            int extractions = (int) Math.ceil((double) waterUnits / capacity);\n            totalExtractions += extractions;\n        }\n\n        // Step 3: Output the Result\n        return totalExtractions;\n    }\n}\n"}
{"task_id": "Java/116", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sort_array(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 4, 3, 5))\n    >>> sort_array(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-4, -2, -6, -5, -3))\n    >>> sort_array(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 4, 3))\n     */\n    public List<Integer> sort_array(List<Integer> arr) {\n        if (arr == null || arr.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        Collections.sort(arr, new BinaryOnesComparator());\n        return arr;\n    }\n\n    private static class BinaryOnesComparator implements Comparator<Integer> {\n        @Override\n        public int compare(Integer a, Integer b) {\n            int onesA = countOnesInBinary(a);\n            int onesB = countOnesInBinary(b);\n\n            if (onesA != onesB) {\n                return Integer.compare(onesA, onesB);\n            } else {\n                return Integer.compare(a, b);\n            }\n        }\n\n        private int countOnesInBinary(int num) {\n            int count = 0;\n            num = Math.abs(num); // Handle negative numbers by taking absolute value\n            while (num != 0) {\n                count += num & 1;\n                num >>>= 1;\n            }\n            return count;\n        }\n    }\n}\n"}
{"task_id": "Java/117", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> select_words(String s, int n) {\n        if (s.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        String[] words = s.split(\" \");\n        List<String> result = new ArrayList<>();\n\n        for (String word : words) {\n            if (countConsonants(word) == n) {\n                result.add(word);\n            }\n        }\n\n        return result;\n    }\n\n    private int countConsonants(String word) {\n        int count = 0;\n        for (char c : word.toLowerCase().toCharArray()) {\n            if (\"bcdfghjklmnpqrstvwxyz\".indexOf(c) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/118", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n     */\n    public String get_closest_vowel(String word) {\n        // Define vowels\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        \n        // Initialize variables\n        char lastConsonant = '\\0';\n        boolean foundConsonant = false;\n        \n        // Traverse the word from right to left\n        for (int i = word.length() - 1; i >= 0; i--) {\n            char ch = word.charAt(i);\n            \n            // Skip vowels at the end of the word\n            if (!foundConsonant && vowels.contains(ch)) {\n                continue;\n            }\n            \n            // Update last encountered consonant\n            if (!vowels.contains(ch)) {\n                lastConsonant = ch;\n                foundConsonant = true;\n            } else {\n                // Check if the vowel is between two consonants\n                if (foundConsonant && lastConsonant != '\\0') {\n                    return String.valueOf(ch);\n                }\n            }\n        }\n        \n        // No valid vowel found\n        return \"\";\n    }\n}\n"}
{"task_id": "Java/119", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    match_parens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    match_parens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String match_parens(List<String> lst) {\n        // Step 1: Count parentheses in each string\n        int open1 = countOpenParentheses(lst.get(0));\n        int close1 = countCloseParentheses(lst.get(0));\n        int open2 = countOpenParentheses(lst.get(1));\n        int close2 = countCloseParentheses(lst.get(1));\n\n        // Step 2: Initial validation\n        if (open1 + open2 != close1 + close2) {\n            return \"No\";\n        }\n\n        // Step 3: Concatenation and balance check\n        String concat1 = lst.get(0) + lst.get(1);\n        String concat2 = lst.get(1) + lst.get(0);\n\n        if (isBalanced(concat1) || isBalanced(concat2)) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n\n    // Helper methods\n    private int countOpenParentheses(String s) {\n        int count = 0;\n        for (char c : s.toCharArray()) {\n            if (c == '(') {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private int countCloseParentheses(String s) {\n        int count = 0;\n        for (char c : s.toCharArray()) {\n            if (c == ')') {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isBalanced(String s) {\n        int balance = 0;\n        for (char c : s.toCharArray()) {\n            if (c == '(') {\n                balance++;\n            } else if (c == ')') {\n                balance--;\n            }\n            if (balance < 0) {\n                return false;\n            }\n        }\n        return balance == 0;\n    }\n}\n"}
{"task_id": "Java/120", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr, in ascending order.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return new ArrayList<>();\n        }\n\n        // Use a min-heap to keep track of the top k elements\n        PriorityQueue<Integer> minHeap = new PriorityQueue<>();\n\n        for (int num : arr) {\n            minHeap.offer(num);\n            if (minHeap.size() > k) {\n                minHeap.poll();\n            }\n        }\n\n        // Extract the top k elements from the heap and sort them\n        List<Integer> result = new ArrayList<>(minHeap);\n        Collections.sort(result);\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/121", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        // Step 1: Input Validation\n        if (lst == null || lst.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be empty\");\n        }\n        \n        int sum = 0;\n        \n        // Step 2: Iterate Through the List\n        for (int i = 0; i < lst.size(); i++) {\n            // Step 3: Check Position and Value\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                // Step 4: Accumulate the Sum\n                sum += lst.get(i);\n            }\n        }\n        \n        // Step 5: Return the Result\n        return sum;\n    }\n}\n"}
{"task_id": "Java/122", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int add_elements(List<Integer> arr, int k) {\n        // Input validation\n        if (arr == null || arr.size() < 1 || arr.size() > 100 || k < 1 || k > arr.size()) {\n            throw new IllegalArgumentException(\"Invalid input parameters\");\n        }\n\n        int sum = 0;\n\n        // Iterate through the first k elements\n        for (int i = 0; i < k; i++) {\n            int num = arr.get(i);\n            // Check if the number has at most two digits\n            if (num >= 0 && num <= 99) {\n                sum += num;\n            }\n        }\n\n        return sum;\n    }\n}\n"}
{"task_id": "Java/123", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> get_odd_collatz(int n) {\n        List<Integer> oddNumbers = new ArrayList<>();\n        \n        // Handle the edge case where n is 1\n        if (n == 1) {\n            oddNumbers.add(1);\n            return oddNumbers;\n        }\n        \n        // Generate the Collatz sequence and collect odd numbers\n        while (n != 1) {\n            if (n % 2 == 1) {\n                oddNumbers.add(n);\n            }\n            n = (n % 2 == 0) ? n / 2 : 3 * n + 1;\n        }\n        \n        // Add the final 1 to the list\n        oddNumbers.add(1);\n        \n        // Sort the list of odd numbers (though it should already be sorted)\n        Collections.sort(oddNumbers);\n        \n        return oddNumbers;\n    }\n}\n"}
{"task_id": "Java/124", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    valid_date(\"03-11-2000\") => true\n    valid_date(\"15-01-2012\") => false\n    valid_date(\"04-0-2040\") => false\n    valid_date(\"06-04-2020\") => true\n    valid_date(\"06/04/2020\") => false\n     */\n    public boolean valid_date(String date) {\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        // Regular expression to match the format mm-dd-yyyy\n        if (!date.matches(\"\\\\d{2}-\\\\d{2}-\\\\d{4}\")) {\n            return false;\n        }\n\n        // Extract month, day, and year from the date string\n        String[] parts = date.split(\"-\");\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\n        // Validate month\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        // Validate day based on the month\n        if (day < 1) {\n            return false;\n        }\n\n        switch (month) {\n            case 1: case 3: case 5: case 7: case 8: case 10: case 12:\n                if (day > 31) {\n                    return false;\n                }\n                break;\n            case 4: case 6: case 9: case 11:\n                if (day > 30) {\n                    return false;\n                }\n                break;\n            case 2:\n                if (isLeapYear(year)) {\n                    if (day > 29) {\n                        return false;\n                    }\n                } else {\n                    if (day > 28) {\n                        return false;\n                    }\n                }\n                break;\n        }\n\n        return true;\n    }\n\n    private boolean isLeapYear(int year) {\n        if (year % 4 == 0) {\n            if (year % 100 == 0) {\n                return year % 400 == 0;\n            }\n            return true;\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/125", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n     */\n    public Object split_words(String txt) {\n        if (txt == null || txt.isEmpty()) {\n            return null;\n        }\n\n        // Check for whitespace\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\"\\\\s+\"));\n        }\n\n        // Check for commas\n        if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        }\n\n        // Count odd alphabet position letters\n        int count = 0;\n        for (char c : txt.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                int position = c - 'a';\n                if (position % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n\n        return count;\n    }\n}\n"}
{"task_id": "Java/126", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean is_sorted(List<Integer> lst) {\n        // Edge case: Empty list or single element list\n        if (lst.size() <= 1) {\n            return true;\n        }\n\n        // Check if the list is sorted in ascending order\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n        }\n\n        // Check for duplicate elements\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n\n        for (int count : frequencyMap.values()) {\n            if (count > 2) {\n                return false;\n            }\n        }\n\n        // If both checks pass, return true\n        return true;\n    }\n}\n"}
{"task_id": "Java/127", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // Step 1: Validate input\n        if (interval1.get(0) > interval1.get(1) || interval2.get(0) > interval2.get(1)) {\n            throw new IllegalArgumentException(\"Invalid intervals\");\n        }\n\n        // Step 2: Calculate intersection\n        int startIntersection = Math.max(interval1.get(0), interval2.get(0));\n        int endIntersection = Math.min(interval1.get(1), interval2.get(1));\n\n        if (startIntersection > endIntersection) {\n            return \"NO\"; // Intervals do not intersect\n        }\n\n        // Step 3: Calculate length of intersection\n        int lengthIntersection = endIntersection - startIntersection + 1;\n\n        if (lengthIntersection == 0) {\n            return \"NO\"; // Intersection is a single point\n        }\n\n        // Step 4: Check if length is prime\n        if (isPrime(lengthIntersection)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/128", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prod_signs(Arrays.asList(0, 1)) == 0\n    >>> prod_signs(Arrays.asList()) == None\n     */\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int signProduct = 1;\n        int sumOfMagnitudes = 0;\n\n        for (int num : arr) {\n            int sign = Integer.signum(num);\n            signProduct *= sign;\n            sumOfMagnitudes += Math.abs(num);\n        }\n\n        int result = sumOfMagnitudes * signProduct;\n        return Optional.of(result);\n    }\n}\n"}
{"task_id": "Java/129", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        // Step 1: Input Validation\n        int N = grid.size();\n        if (N < 2 || k <= 0) {\n            throw new IllegalArgumentException(\"Invalid input\");\n        }\n\n        // Step 2: Path Generation and Comparison\n        List<Integer> minPath = null;\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < N; j++) {\n                List<Integer> currentPath = generatePaths(grid, i, j, k);\n                if (minPath == null || isLexicographicallySmaller(currentPath, minPath)) {\n                    minPath = currentPath;\n                }\n            }\n        }\n\n        // Step 3: Return the Result\n        return minPath;\n    }\n\n    private List<Integer> generatePaths(List<List<Integer>> grid, int startX, int startY, int k) {\n        int N = grid.size();\n        List<Integer> minPath = null;\n        Queue<List<Integer>> queue = new LinkedList<>();\n        Queue<int[]> positions = new LinkedList<>();\n        queue.offer(new ArrayList<>(Collections.singletonList(grid.get(startX).get(startY))));\n        positions.offer(new int[]{startX, startY});\n\n        while (!queue.isEmpty()) {\n            List<Integer> currentPath = queue.poll();\n            int[] currentPos = positions.poll();\n            int currentX = currentPos[0];\n            int currentY = currentPos[1];\n\n            if (currentPath.size() == k) {\n                if (minPath == null || isLexicographicallySmaller(currentPath, minPath)) {\n                    minPath = currentPath;\n                }\n                continue;\n            }\n\n            int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n            for (int[] dir : directions) {\n                int newX = currentX + dir[0];\n                int newY = currentY + dir[1];\n                if (newX >= 0 && newX < N && newY >= 0 && newY < N) {\n                    List<Integer> newPath = new ArrayList<>(currentPath);\n                    newPath.add(grid.get(newX).get(newY));\n                    queue.offer(newPath);\n                    positions.offer(new int[]{newX, newY});\n                }\n            }\n        }\n\n        return minPath;\n    }\n\n    private boolean isLexicographicallySmaller(List<Integer> path1, List<Integer> path2) {\n        for (int i = 0; i < path1.size(); i++) {\n            if (path1.get(i) < path2.get(i)) {\n                return true;\n            } else if (path1.get(i) > path2.get(i)) {\n                return false;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/130", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> sequence = new ArrayList<>();\n        for (int i = 0; i <= n; i++) {\n            sequence.add(triHelper(i));\n        }\n        return sequence;\n    }\n\n    private int triHelper(int n) {\n        if (n == 1) {\n            return 3;\n        }\n        if (n % 2 == 0) {\n            return 1 + n / 2;\n        } else {\n            return triHelper(n - 1) + triHelper(n - 2) + triHelper(n + 1);\n        }\n    }\n}\n"}
{"task_id": "Java/131", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        String numStr = Integer.toString(n);\n        int product = 1;\n        boolean hasOddDigit = false;\n\n        for (char ch : numStr.toCharArray()) {\n            int digit = Character.getNumericValue(ch);\n            if (digit % 2 != 0) {\n                product *= digit;\n                hasOddDigit = true;\n            }\n        }\n\n        if (!hasOddDigit) {\n            return 0;\n        }\n\n        return product;\n    }\n}\n"}
{"task_id": "Java/132", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    is_nested(\"[[]]\") -> true\n    is_nested(\"[]]]]]]][[[[[]\") -> false\n    is_nested(\"[][]\") -> false\n    is_nested(\"[]\") -> false\n    is_nested(\"[[][]]\") -> true\n    is_nested(\"[[]][[\") -> true\n     */\n    public boolean is_nested(String string) {\n        Stack<Character> stack = new Stack<>();\n        boolean hasNested = false;\n\n        for (char ch : string.toCharArray()) {\n            if (ch == '[') {\n                stack.push(ch);\n            } else if (ch == ']') {\n                if (!stack.isEmpty() && stack.peek() == '[') {\n                    stack.pop();\n                    if (stack.size() > 0) {\n                        hasNested = true;\n                    }\n                } else {\n                    stack.push(ch);\n                }\n            }\n        }\n\n        return hasNested;\n    }\n}\n"}
{"task_id": "Java/133", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sum_squares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            double roundedNum = Math.ceil(num);\n            double squaredNum = Math.pow(roundedNum, 2);\n            sum += squaredNum;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/134", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") -> false\n    check_if_last_char_is_a_letter(\"apple pi e\") -> true\n    check_if_last_char_is_a_letter(\"apple pi e \") -> false\n    check_if_last_char_is_a_letter(\"\") -> false\n     */\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        if (txt.isEmpty()) {\n            return false;\n        }\n\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (!Character.isLetter(lastChar)) {\n            return false;\n        }\n\n        String[] words = txt.split(\" \");\n        String lastWord = words[words.length - 1];\n        if (lastChar == lastWord.charAt(lastWord.length() - 1)) {\n            return false;\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/135", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange(Arrays.asList(1,2,4,3,5)) = 3\n    can_arrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int can_arrange(List<Integer> arr) {\n        // Step 1: Input Validation\n        if (arr == null || arr.isEmpty()) {\n            return -1;\n        }\n\n        // Step 2: Initialization\n        int largestIndex = -1;\n\n        // Step 3: Iteration and Comparison\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                largestIndex = i;\n            }\n        }\n\n        // Step 4: Return the Result\n        return largestIndex;\n    }\n}\n"}
{"task_id": "Java/136", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        // Step 1: Input Validation\n        if (lst.isEmpty()) {\n            return Arrays.asList(Optional.empty(), Optional.empty());\n        }\n\n        // Step 2: Filtering the List\n        List<Integer> negatives = lst.stream().filter(i -> i < 0).collect(Collectors.toList());\n        List<Integer> positives = lst.stream().filter(i -> i > 0).collect(Collectors.toList());\n\n        // Step 3: Finding the Largest Negative Integer\n        Optional<Integer> largestNegative = negatives.isEmpty() ? Optional.empty() : Optional.of(Collections.max(negatives));\n\n        // Step 4: Finding the Smallest Positive Integer\n        Optional<Integer> smallestPositive = positives.isEmpty() ? Optional.empty() : Optional.of(Collections.min(positives));\n\n        // Step 5: Combining Results\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n}\n"}
{"task_id": "Java/137", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) -> Optional.of(2.5)\n    compare_one(1, \"2,3\") -> Optional.of(\"2,3\")\n    compare_one(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compare_one(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compare_one(Object a, Object b) {\n        // Step 1: Input Validation and Type Identification\n        Float valueA = convertToFloat(a);\n        Float valueB = convertToFloat(b);\n\n        // Step 2: Comparison of Numeric Values\n        if (valueA == null || valueB == null) {\n            return Optional.empty(); // Invalid input\n        }\n\n        if (valueA.equals(valueB)) {\n            return Optional.empty(); // Values are equal\n        } else if (valueA > valueB) {\n            return Optional.of(a); // Return original value of a\n        } else {\n            return Optional.of(b); // Return original value of b\n        }\n    }\n\n    private Float convertToFloat(Object obj) {\n        if (obj instanceof Integer) {\n            return ((Integer) obj).floatValue();\n        } else if (obj instanceof Float) {\n            return (Float) obj;\n        } else if (obj instanceof String) {\n            String str = (String) obj;\n            str = str.replace(',', '.'); // Handle different decimal separators\n            try {\n                return Float.parseFloat(str);\n            } catch (NumberFormatException e) {\n                return null; // Invalid number format\n            }\n        }\n        return null; // Unsupported type\n    }\n}\n"}
{"task_id": "Java/138", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == false\n    is_equal_to_sum_even(6) == false\n    is_equal_to_sum_even(8) == true\n     */\n    public boolean is_equal_to_sum_even(int n) {\n        // Step 1: Input validation\n        if (n < 8) {\n            return false;\n        }\n\n        // Step 2: Iterate through combinations\n        for (int a = 2; a <= n; a += 2) {\n            for (int b = a; b <= n - a; b += 2) {\n                for (int c = b; c <= n - a - b; c += 2) {\n                    int d = n - a - b - c;\n                    if (d > 0 && d % 2 == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        // Step 3: No combination found\n        return false;\n    }\n}\n"}
{"task_id": "Java/139", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long special_factorial(int n) {\n        if (n <= 1) {\n            return 1;\n        }\n        \n        long result = 1;\n        for (int i = n; i > 0; i--) {\n            result *= factorial(i);\n        }\n        \n        return result;\n    }\n    \n    private long factorial(int k) {\n        if (k <= 1) {\n            return 1;\n        }\n        \n        long fact = 1;\n        for (int i = 2; i <= k; i++) {\n            fact *= i;\n        }\n        \n        return fact;\n    }\n}\n"}
{"task_id": "Java/140", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fix_spaces(String text) {\n        if (text == null || text.isEmpty()) {\n            return text;\n        }\n\n        // Step 2: Replace single spaces with underscores\n        text = text.replace(\" \", \"_\");\n\n        // Step 3: Replace consecutive spaces with hyphen\n        text = text.replaceAll(\"_{3,}\", \"-\");\n\n        // Step 4: Handle leading and trailing spaces\n        if (text.startsWith(\"_\")) {\n            text = text.replaceFirst(\"_\", \"\");\n        }\n        if (text.endsWith(\"_\")) {\n            text = text.substring(0, text.length() - 1);\n        }\n\n        // Step 5: Return the modified string\n        return text;\n    }\n}\n"}
{"task_id": "Java/141", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String file_name_check(String file_name) {\n        if (file_name == null) {\n            return \"No\";\n        }\n\n        int digitCount = 0;\n        int dotCount = 0;\n        int dotIndex = -1;\n\n        for (int i = 0; i < file_name.length(); i++) {\n            char c = file_name.charAt(i);\n            if (Character.isDigit(c)) {\n                digitCount++;\n                if (digitCount > 3) {\n                    return \"No\";\n                }\n            } else if (c == '.') {\n                dotCount++;\n                if (dotCount > 1) {\n                    return \"No\";\n                }\n                dotIndex = i;\n            }\n        }\n\n        if (dotCount != 1 || dotIndex == 0) {\n            return \"No\";\n        }\n\n        String beforeDot = file_name.substring(0, dotIndex);\n        String afterDot = file_name.substring(dotIndex + 1);\n\n        if (!Character.isLetter(beforeDot.charAt(0))) {\n            return \"No\";\n        }\n\n        Set<String> validExtensions = new HashSet<>(Arrays.asList(\"txt\", \"exe\", \"dll\"));\n        if (!validExtensions.contains(afterDot)) {\n            return \"No\";\n        }\n\n        return \"Yes\";\n    }\n}\n"}
{"task_id": "Java/142", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sum_squares(List<Integer> lst) {\n        for (int i = 0; i < lst.size(); i++) {\n            int element = lst.get(i);\n            if (i % 3 == 0) {\n                lst.set(i, element * element); // Square the element\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                lst.set(i, element * element * element); // Cube the element\n            }\n            // If neither condition is met, the element remains unchanged\n        }\n        \n        int sum = 0;\n        for (int element : lst) {\n            sum += element;\n        }\n        \n        return sum;\n    }\n}\n"}
{"task_id": "Java/143", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String words_in_sentence(String sentence) {\n        // Step 1: Parse the Input Sentence\n        String[] words = sentence.split(\" \");\n        \n        // Step 2: Filter Words Based on Prime Lengths\n        List<String> filteredWords = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                filteredWords.add(word);\n            }\n        }\n        \n        // Step 3: Construct the Output String\n        return String.join(\" \", filteredWords);\n    }\n    \n    // Helper function to check if a number is prime\n    private boolean isPrime(int n) {\n        if (n <= 1) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/144", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Step 1: Parse the input strings\n        int[] fractionX = parseFraction(x);\n        int[] fractionN = parseFraction(n);\n        \n        // Step 2: Multiply the fractions\n        int newNumerator = fractionX[0] * fractionN[0];\n        int newDenominator = fractionX[1] * fractionN[1];\n        \n        // Step 3: Simplify the resulting fraction\n        int gcd = gcd(newNumerator, newDenominator);\n        newNumerator /= gcd;\n        newDenominator /= gcd;\n        \n        // Step 4: Check if the result is a whole number\n        return newDenominator == 1;\n    }\n\n    // Helper method to parse a fraction string\n    private int[] parseFraction(String fraction) {\n        String[] parts = fraction.split(\"/\");\n        int numerator = Integer.parseInt(parts[0]);\n        int denominator = Integer.parseInt(parts[1]);\n        return new int[]{numerator, denominator};\n    }\n\n    // Helper method to compute the GCD of two numbers\n    private int gcd(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}\n"}
{"task_id": "Java/145", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n    If an integer is negative, then its first digit will be negative:\n    e.g. -123 has digits -1, 2, and 3.\n\n    For example:\n    >>> order_by_points(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> order_by_points(Arrays.asList()) == []\n     */\n    public List<Integer> order_by_points(List<Integer> nums) {\n        // Create a list of tuples (index, number, digit sum)\n        List<int[]> tuples = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int number = nums.get(i);\n            int digitSum = calculateDigitSum(number);\n            tuples.add(new int[]{i, number, digitSum});\n        }\n\n        // Sort the list of tuples\n        tuples.sort((a, b) -> {\n            if (a[2] != b[2]) {\n                return Integer.compare(a[2], b[2]); // Primary sort by digit sum\n            } else {\n                return Integer.compare(a[0], b[0]); // Secondary sort by original index\n            }\n        });\n\n        // Extract the sorted numbers\n        List<Integer> sortedNums = new ArrayList<>();\n        for (int[] tuple : tuples) {\n            sortedNums.add(tuple[1]);\n        }\n\n        return sortedNums;\n    }\n\n    private int calculateDigitSum(int number) {\n        int sum = 0;\n        boolean isNegative = number < 0;\n        number = Math.abs(number);\n\n        while (number > 0) {\n            sum += number % 10;\n            number /= 10;\n        }\n\n        return isNegative ? -sum : sum;\n    }\n}\n"}
{"task_id": "Java/146", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        \n        for (int num : nums) {\n            if (num > 10) {\n                String numStr = String.valueOf(num);\n                int firstDigit = Character.getNumericValue(numStr.charAt(0));\n                int lastDigit = Character.getNumericValue(numStr.charAt(numStr.length() - 1));\n                \n                if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/147", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int get_max_triples(int n) {\n        int[] a = generateArray(n);\n        return countValidTriples(a);\n    }\n\n    private int[] generateArray(int n) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = (i + 1) * (i + 1) - (i + 1) + 1;\n        }\n        return a;\n    }\n\n    private int countValidTriples(int[] a) {\n        int count = 0;\n        int n = a.length;\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/148", "generation": "import java.util.*;\n\nclass Solution {\n    private static final List<String> PLANETS = Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    );\n\n    public List<String> bf(String planet1, String planet2) {\n        // Step 1: Validate input\n        if (!PLANETS.contains(planet1) || !PLANETS.contains(planet2)) {\n            return Collections.emptyList();\n        }\n\n        // Step 2: Find indices and ensure correct order\n        int index1 = PLANETS.indexOf(planet1);\n        int index2 = PLANETS.indexOf(planet2);\n        if (index1 >= index2) {\n            return Collections.emptyList();\n        }\n\n        // Step 3: Extract intermediate planets\n        return PLANETS.subList(index1 + 1, index2);\n    }\n}\n"}
{"task_id": "Java/149", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert sorted_list_sum(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert sorted_list_sum(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> sorted_list_sum(List<String> lst) {\n        // Step 1: Filter out strings with odd lengths\n        List<String> filteredList = lst.stream()\n                                       .filter(s -> s.length() % 2 == 0)\n                                       .collect(Collectors.toList());\n        \n        // Step 2: Sort the filtered list\n        Collections.sort(filteredList, Comparator.comparingInt(String::length)\n                                                 .thenComparing(Comparator.naturalOrder()));\n        \n        // Step 3: Return the sorted list\n        return filteredList;\n    }\n}\n"}
{"task_id": "Java/150", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n     */\n    public int x_or_y(int n, int x, int y) {\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/151", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    double_the_difference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    double_the_difference(Arrays.asList(-1, -2, 0)) == 0\n    double_the_difference(Arrays.asList(9, -2)) == 81\n    double_the_difference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int double_the_difference(List<Object> lst) {\n        // Step 1: Input Parsing and Validation\n        List<Integer> validOddNumbers = new ArrayList<>();\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                if (num > 0 && num % 2 == 1) {\n                    validOddNumbers.add(num);\n                }\n            }\n        }\n\n        // Step 2: Calculating the Sum of Squares\n        int sumOfSquares = 0;\n        for (int num : validOddNumbers) {\n            sumOfSquares += num * num;\n        }\n\n        // Step 3: Return the Result\n        return sumOfSquares;\n    }\n}\n"}
{"task_id": "Java/152", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        // Input Validation\n        if (game.size() != guess.size()) {\n            throw new IllegalArgumentException(\"The input lists must be of the same length.\");\n        }\n\n        // Initialization\n        List<Integer> result = new ArrayList<>();\n\n        // Comparison Loop\n        for (int i = 0; i < game.size(); i++) {\n            int gameScore = game.get(i);\n            int guessScore = guess.get(i);\n            if (gameScore == guessScore) {\n                result.add(0);\n            } else {\n                result.add(Math.abs(gameScore - guessScore));\n            }\n        }\n\n        // Return the Result\n        return result;\n    }\n}\n"}
{"task_id": "Java/153", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.Strongest_Extension.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        String strongestExtension = null;\n        int maxStrength = Integer.MIN_VALUE;\n\n        for (String extension : extensions) {\n            int CAP = 0;\n            int SM = 0;\n\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    CAP++;\n                } else if (Character.isLowerCase(c)) {\n                    SM++;\n                }\n            }\n\n            int strength = CAP - SM;\n\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return class_name + \".\" + strongestExtension;\n    }\n}\n"}
{"task_id": "Java/154", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => false\n    cycpattern_check(\"hello\",\"ell\") => true\n    cycpattern_check(\"whassup\",\"psus\") => false\n    cycpattern_check(\"abab\",\"baa\") => true\n    cycpattern_check(\"efef\",\"eeff\") => false\n    cycpattern_check(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpattern_check(String a, String b) {\n        // Step 1: Input Validation\n        if (a == null || b == null) {\n            return false;\n        }\n\n        // Step 2: Generate all rotations of b\n        List<String> rotations = generateRotations(b);\n\n        // Step 3: Check if any rotation is a substring of a\n        for (String rotation : rotations) {\n            if (a.contains(rotation)) {\n                return true;\n            }\n        }\n\n        // Step 4: If no rotation is found, return false\n        return false;\n    }\n\n    // Helper method to generate all rotations of a string\n    private List<String> generateRotations(String b) {\n        List<String> rotations = new ArrayList<>();\n        int length = b.length();\n        for (int i = 0; i < length; i++) {\n            String rotation = b.substring(i) + b.substring(0, i);\n            rotations.add(rotation);\n        }\n        return rotations;\n    }\n}\n"}
{"task_id": "Java/155", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n     */\n    public List<Integer> even_odd_count(int num) {\n        // Step 1: Handle negative numbers\n        num = Math.abs(num);\n        \n        // Step 2: Initialize counters\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        // Step 3: Extract digits and classify\n        String numStr = Integer.toString(num);\n        for (char digitChar : numStr.toCharArray()) {\n            int digit = Character.getNumericValue(digitChar);\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        \n        // Step 4: Return the result\n        return Arrays.asList(evenCount, oddCount);\n    }\n}\n"}
{"task_id": "Java/156", "generation": "import java.util.*;\n\nclass Solution {\n    // Step 1: Define the Roman Numeral Mapping\n    private static final Map<Integer, String> romanNumerals = new HashMap<>() {{\n        put(1000, \"M\"); put(900, \"CM\"); put(500, \"D\"); put(400, \"CD\");\n        put(100, \"C\"); put(90, \"XC\"); put(50, \"L\"); put(40, \"XL\");\n        put(10, \"X\"); put(9, \"IX\"); put(5, \"V\"); put(4, \"IV\");\n        put(1, \"I\");\n    }};\n\n    // Step 2: Implement the Conversion Logic\n    public String int_to_mini_roman(int number) {\n        if (number < 1 || number > 1000) {\n            throw new IllegalArgumentException(\"Number must be between 1 and 1000\");\n        }\n\n        StringBuilder roman = new StringBuilder();\n        for (Map.Entry<Integer, String> entry : romanNumerals.entrySet()) {\n            int value = entry.getKey();\n            String numeral = entry.getValue();\n            while (number >= value) {\n                roman.append(numeral);\n                number -= value;\n            }\n        }\n\n        // Step 3: Convert to Lowercase\n        return roman.toString().toLowerCase();\n    }\n}\n"}
{"task_id": "Java/157", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == true\n    right_angle_triangle(1, 2, 3) == false\n     */\n    public boolean right_angle_triangle(int a, int b, int c) {\n        // Step 1: Input Validation\n        if (!(a + b > c && a + c > b && b + c > a)) {\n            return false;\n        }\n\n        // Step 2: Identify the Hypotenuse\n        int maxSide = Math.max(a, Math.max(b, c));\n\n        // Step 3: Apply the Pythagorean Theorem\n        if (maxSide == a) {\n            return a * a == b * b + c * c;\n        } else if (maxSide == b) {\n            return b * b == a * a + c * c;\n        } else {\n            return c * c == a * a + b * b;\n        }\n    }\n}\n"}
{"task_id": "Java/158", "generation": "import java.util.*;\n\nclass Solution {\n    // Helper function to count unique characters in a string\n    private int countUniqueCharacters(String word) {\n        Set<Character> uniqueChars = new HashSet<>();\n        for (char c : word.toCharArray()) {\n            uniqueChars.add(c);\n        }\n        return uniqueChars.size();\n    }\n\n    // Main function to find the word with the maximum number of unique characters\n    public String find_max(List<String> words) {\n        int maxUniqueCount = 0;\n        String maxUniqueWord = null;\n\n        for (String word : words) {\n            int uniqueCount = countUniqueCharacters(word);\n            if (uniqueCount > maxUniqueCount) {\n                maxUniqueCount = uniqueCount;\n                maxUniqueWord = word;\n            } else if (uniqueCount == maxUniqueCount) {\n                if (maxUniqueWord == null || word.compareTo(maxUniqueWord) < 0) {\n                    maxUniqueWord = word;\n                }\n            }\n        }\n\n        return maxUniqueWord;\n    }\n}\n"}
{"task_id": "Java/159", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        // Input validation\n        if (number < 0 || number > 1000 || need < 0 || need > 1000 || remaining < 0 || remaining > 1000) {\n            throw new IllegalArgumentException(\"Input values must be within the range [0, 1000]\");\n        }\n\n        // Calculate total carrots eaten\n        int totalEaten = number + need;\n\n        // Determine carrots left\n        int carrotsLeft = Math.max(remaining - totalEaten, 0);\n\n        // Return the result\n        return Arrays.asList(totalEaten, carrotsLeft);\n    }\n}\n"}
{"task_id": "Java/160", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        // Step 1: Input Validation\n        if (operator.size() != operand.size() - 1) {\n            throw new IllegalArgumentException(\"Invalid input: operator list size must be one less than operand list size.\");\n        }\n        for (int num : operand) {\n            if (num < 0) {\n                throw new IllegalArgumentException(\"Invalid input: operand list must contain non-negative integers.\");\n            }\n        }\n\n        // Step 2: Expression Construction\n        StringBuilder expression = new StringBuilder();\n        for (int i = 0; i < operator.size(); i++) {\n            expression.append(operand.get(i)).append(\" \").append(operator.get(i)).append(\" \");\n        }\n        expression.append(operand.get(operand.size() - 1));\n\n        // Step 3: Expression Evaluation\n        try {\n            return evaluateExpression(expression.toString());\n        } catch (ArithmeticException e) {\n            throw new ArithmeticException(\"Division by zero error.\");\n        }\n    }\n\n    private int evaluateExpression(String expression) {\n        // Use a stack to evaluate the expression\n        Stack<Integer> operands = new Stack<>();\n        Stack<String> operators = new Stack<>();\n        String[] tokens = expression.split(\" \");\n\n        for (String token : tokens) {\n            if (isOperator(token)) {\n                while (!operators.isEmpty() && hasPrecedence(operators.peek(), token)) {\n                    operands.push(applyOperation(operators.pop(), operands.pop(), operands.pop()));\n                }\n                operators.push(token);\n            } else {\n                operands.push(Integer.parseInt(token));\n            }\n        }\n\n        while (!operators.isEmpty()) {\n            operands.push(applyOperation(operators.pop(), operands.pop(), operands.pop()));\n        }\n\n        return operands.pop();\n    }\n\n    private boolean isOperator(String token) {\n        return token.equals(\"+\") || token.equals(\"-\") || token.equals(\"*\") || token.equals(\"/\") || token.equals(\"**\");\n    }\n\n    private boolean hasPrecedence(String op1, String op2) {\n        if (op2.equals(\"**\")) return false;\n        if ((op1.equals(\"*\") || op1.equals(\"/\")) && (op2.equals(\"+\") || op2.equals(\"-\"))) return false;\n        return true;\n    }\n\n    private int applyOperation(String operator, int b, int a) {\n        switch (operator) {\n            case \"+\":\n                return a + b;\n            case \"-\":\n                return a - b;\n            case \"*\":\n                return a * b;\n            case \"/\":\n                if (b == 0) throw new ArithmeticException(\"Division by zero error.\");\n                return a / b;\n            case \"**\":\n                return (int) Math.pow(a, b);\n        }\n        return 0;\n    }\n}\n"}
{"task_id": "Java/161", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        StringBuilder result = new StringBuilder();\n        boolean hasLetters = false;\n\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                result.append(Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c));\n                hasLetters = true;\n            } else {\n                result.append(c);\n            }\n        }\n\n        if (!hasLetters) {\n            result.reverse();\n        }\n\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/162", "generation": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        // Step 1: Input Validation\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        // Step 2: MD5 Hash Calculation\n        MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n        byte[] hashBytes = digest.digest(text.getBytes());\n\n        // Step 3: Convert byte array to hexadecimal string\n        StringBuilder hexString = new StringBuilder();\n        for (byte b : hashBytes) {\n            hexString.append(String.format(\"%02x\", b));\n        }\n\n        // Step 4: Ensure the string is exactly 32 characters long\n        if (hexString.length() != 32) {\n            throw new IllegalStateException(\"MD5 hash should be 32 characters long.\");\n        }\n\n        // Step 5: Return the result wrapped in Optional\n        return Optional.of(hexString.toString());\n    }\n}\n"}
{"task_id": "Java/163", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order. Please note that the even digits refer to even numbers less than 10.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n     */\n    public List<Integer> generate_integers(int a, int b) {\n        // Input validation\n        if (a <= 0 || b <= 0) {\n            return Collections.emptyList();\n        }\n\n        // Determine the range\n        int start = Math.min(a, b);\n        int end = Math.max(a, b);\n\n        // Set to store unique even digits\n        Set<Integer> evenDigits = new HashSet<>();\n\n        // Iterate through the range\n        for (int i = start; i <= end; i++) {\n            int num = i;\n            // Extract digits\n            while (num > 0) {\n                int digit = num % 10;\n                // Filter even digits\n                if (digit % 2 == 0 && digit < 10) {\n                    evenDigits.add(digit);\n                }\n                num /= 10;\n            }\n        }\n\n        // Convert Set to List and sort\n        List<Integer> result = new ArrayList<>(evenDigits);\n        Collections.sort(result);\n\n        // Return the result\n        return result;\n    }\n}\n"}
{"task_id": "Java/0", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> has_close_elements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> has_close_elements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        // Step 1: Input Validation\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements.\");\n        }\n        if (threshold <= 0) {\n            throw new IllegalArgumentException(\"Threshold must be a positive number.\");\n        }\n\n        // Step 2: Pairwise Comparison\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true; // Step 3: Return true if a pair is found\n                }\n            }\n        }\n\n        // Step 3: Return false if no pairs are found\n        return false;\n    }\n}\n"}
{"task_id": "Java/1", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        \n        // Step 1: Remove spaces\n        paren_string = paren_string.replaceAll(\" \", \"\");\n        \n        // Step 2: Identify and validate groups\n        int i = 0;\n        while (i < paren_string.length()) {\n            if (paren_string.charAt(i) == '(') {\n                StringBuilder group = new StringBuilder();\n                Stack<Character> stack = new Stack<>();\n                int j = i;\n                \n                // Step 3: Validate and extract group\n                while (j < paren_string.length()) {\n                    group.append(paren_string.charAt(j));\n                    if (paren_string.charAt(j) == '(') {\n                        stack.push('(');\n                    } else if (paren_string.charAt(j) == ')') {\n                        if (!stack.isEmpty()) {\n                            stack.pop();\n                        } else {\n                            break; // Unbalanced group\n                        }\n                    }\n                    \n                    if (stack.isEmpty()) {\n                        result.add(group.toString());\n                        i = j + 1;\n                        break;\n                    }\n                    j++;\n                }\n            } else {\n                i++;\n            }\n        }\n        \n        // Step 4: Return the result list\n        return result;\n    }\n}\n"}
{"task_id": "Java/2", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n     */\n    public double truncate_number(double number) {\n        if (number < 0) {\n            throw new IllegalArgumentException(\"Input must be a positive floating-point number.\");\n        }\n        \n        double integerPart = Math.floor(number);\n        double decimalPart = number - integerPart;\n        \n        return decimalPart;\n    }\n}\n"}
{"task_id": "Java/3", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero(Arrays.asList(1, 2, 3))\n    false\n    >>> below_zero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean below_zero(List<Integer> operations) {\n        // Initialize the balance\n        int balance = 0;\n        \n        // Iterate through each operation\n        for (int operation : operations) {\n            // Update the balance\n            balance += operation;\n            \n            // Check if the balance has fallen below zero\n            if (balance < 0) {\n                return true;\n            }\n        }\n        \n        // If no balance fell below zero, return false\n        return false;\n    }\n}\n"}
{"task_id": "Java/4", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double mean_absolute_deviation(List<Double> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be null or empty\");\n        }\n\n        double sum = 0.0;\n        for (double number : numbers) {\n            sum += number;\n        }\n        double mean = sum / numbers.size();\n\n        double sumOfAbsoluteDeviations = 0.0;\n        for (double number : numbers) {\n            sumOfAbsoluteDeviations += Math.abs(number - mean);\n        }\n\n        return sumOfAbsoluteDeviations / numbers.size();\n    }\n}\n"}
{"task_id": "Java/5", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimiter' between every two consecutive elements of input list `numbers`\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        // Step 1: Handle edge case\n        if (numbers == null || numbers.isEmpty()) {\n            return new ArrayList<>();\n        }\n        \n        // Step 2: Initialize result list\n        List<Integer> result = new ArrayList<>();\n        \n        // Step 3: Iterate and insert delimiter\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        \n        // Step 4: Return the result list\n        return result;\n    }\n}\n"}
{"task_id": "Java/6", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parse_nested_parens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        String[] groups = paren_string.split(\" \");\n\n        for (String group : groups) {\n            int maxDepth = 0;\n            int currentDepth = 0;\n\n            for (char ch : group.toCharArray()) {\n                if (ch == '(') {\n                    currentDepth++;\n                    maxDepth = Math.max(maxDepth, currentDepth);\n                } else if (ch == ')') {\n                    currentDepth--;\n                }\n            }\n\n            result.add(maxDepth);\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/7", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring(List.of(), \"a\")\n    []\n    >>> filter_by_substring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        if (strings == null || substring == null) {\n            return Collections.emptyList();\n        }\n\n        List<String> result = new ArrayList<>();\n        for (String str : strings) {\n            if (str != null && str.contains(substring)) {\n                result.add(str);\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/8", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product(List.of())\n    [0, 1]\n    >>> sum_product(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sum_product(List<Integer> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            return Arrays.asList(0, 1);\n        }\n\n        int sum = 0;\n        int product = 1;\n\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n\n        return Arrays.asList(sum, product);\n    }\n}\n"}
{"task_id": "Java/9", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int currentMax = Integer.MIN_VALUE;\n\n        for (int number : numbers) {\n            if (number > currentMax) {\n                currentMax = number;\n            }\n            result.add(currentMax);\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/10", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n     */\n    public String make_palindrome(String string) {\n        if (string.isEmpty()) {\n            return string;\n        }\n\n        int n = string.length();\n        int longestPalindromicSuffixIndex = 0;\n\n        // Find the longest palindromic suffix\n        for (int i = 0; i < n; i++) {\n            if (isPalindrome(string.substring(i))) {\n                longestPalindromicSuffixIndex = i;\n                break;\n            }\n        }\n\n        // Determine the prefix\n        String prefix = string.substring(0, longestPalindromicSuffixIndex);\n\n        // Reverse the prefix and append it to the end of the original string\n        String reversedPrefix = new StringBuilder(prefix).reverse().toString();\n        return string + reversedPrefix;\n    }\n}\n"}
{"task_id": "Java/11", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n     */\n    public String string_xor(String a, String b) {\n        // Input validation\n        if (!a.matches(\"[01]+\") || !b.matches(\"[01]+\")) {\n            throw new IllegalArgumentException(\"Input strings must contain only '0's and '1's.\");\n        }\n        if (a.length() != b.length()) {\n            throw new IllegalArgumentException(\"Input strings must be of the same length.\");\n        }\n\n        // Initialize StringBuilder for result\n        StringBuilder result = new StringBuilder();\n\n        // Perform XOR operation\n        for (int i = 0; i < a.length(); i++) {\n            char bitA = a.charAt(i);\n            char bitB = b.charAt(i);\n            char xorBit = (bitA == bitB) ? '0' : '1';\n            result.append(xorBit);\n        }\n\n        // Return the result as a String\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/12", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longestString = null;\n        int maxLength = 0;\n\n        for (String str : strings) {\n            if (str.length() > maxLength) {\n                longestString = str;\n                maxLength = str.length();\n            }\n        }\n\n        return Optional.ofNullable(longestString);\n    }\n}\n"}
{"task_id": "Java/13", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n     */\n    public int greatest_common_divisor(int a, int b) {\n        // Ensure a and b are positive\n        a = Math.abs(a);\n        b = Math.abs(b);\n\n        // Euclidean Algorithm\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n\n        return a;\n    }\n}\n"}
{"task_id": "Java/14", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> all_prefixes(String string) {\n        if (string == null || string.isEmpty()) {\n            return Collections.emptyList();\n        }\n        \n        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        \n        return prefixes;\n    }\n}\n"}
{"task_id": "Java/15", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String string_sequence(int n) {\n        // Step 1: Input Validation\n        if (n < 0) {\n            return \"\"; // or throw new IllegalArgumentException(\"n must be non-negative\");\n        }\n\n        // Step 2: Generating the Sequence\n        List<Integer> sequence = new ArrayList<>();\n        for (int i = 0; i <= n; i++) {\n            sequence.add(i);\n        }\n\n        // Step 3: Formatting the Output\n        StringBuilder result = new StringBuilder();\n        for (int num : sequence) {\n            result.append(num).append(\" \");\n        }\n        if (result.length() > 0) {\n            result.setLength(result.length() - 1); // Remove the trailing space\n        }\n\n        // Step 4: Return the Result\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/16", "generation": "import java.util.*;\n\nclass Solution {\n    public int count_distinct_characters(String string) {\n        // Step 1: Input Validation\n        if (string == null) {\n            return 0; // or throw an exception\n        }\n        \n        // Step 2: Case Normalization\n        String normalizedString = string.toLowerCase();\n        \n        // Step 3: Character Collection\n        Set<Character> distinctCharacters = new HashSet<>();\n        for (char c : normalizedString.toCharArray()) {\n            distinctCharacters.add(c);\n        }\n        \n        // Step 4: Count Distinct Characters\n        return distinctCharacters.size();\n    }\n}\n"}
{"task_id": "Java/17", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parse_music(String string) {\n        // Step 1: Parse the Input String\n        String[] notes = string.split(\" \");\n        \n        // Step 2: Classify Each Note and Step 3: Calculate Beats for Each Note\n        List<Integer> beats = new ArrayList<>();\n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    beats.add(4);\n                    break;\n                case \"o|\":\n                    beats.add(2);\n                    break;\n                case \".|\":\n                    beats.add(1);\n                    break;\n                default:\n                    // Handle unexpected note types (optional)\n                    break;\n            }\n        }\n        \n        // Step 4: Generate the Output List and Step 5: Return the Output List\n        return beats;\n    }\n}\n"}
{"task_id": "Java/18", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlapping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n     */\n    public int how_many_times(String string, String substring) {\n        // Input validation\n        if (string == null || substring == null || string.isEmpty() || substring.isEmpty()) {\n            return 0;\n        }\n\n        int count = 0;\n        int currentPosition = 0;\n\n        // Iterate through the original string\n        while (currentPosition <= string.length() - substring.length()) {\n            if (string.startsWith(substring, currentPosition)) {\n                count++;\n            }\n            currentPosition++;\n        }\n\n        return count;\n    }\n}\n"}
{"task_id": "Java/19", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sort_numbers(String numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            return \"\";\n        }\n\n        // Mapping of number words to their corresponding numeric values\n        Map<String, Integer> numberMap = new HashMap<>();\n        numberMap.put(\"zero\", 0);\n        numberMap.put(\"one\", 1);\n        numberMap.put(\"two\", 2);\n        numberMap.put(\"three\", 3);\n        numberMap.put(\"four\", 4);\n        numberMap.put(\"five\", 5);\n        numberMap.put(\"six\", 6);\n        numberMap.put(\"seven\", 7);\n        numberMap.put(\"eight\", 8);\n        numberMap.put(\"nine\", 9);\n\n        // Split the input string into individual number words\n        String[] numberWords = numbers.split(\" \");\n\n        // Sort the number words based on their numeric values\n        Arrays.sort(numberWords, (a, b) -> numberMap.get(a) - numberMap.get(b));\n\n        // Join the sorted number words back into a single string\n        return String.join(\" \", numberWords);\n    }\n}\n"}
{"task_id": "Java/20", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        // Step 1: Input Validation\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"The list must contain at least two numbers.\");\n        }\n\n        // Step 2: Sorting the List\n        Collections.sort(numbers);\n\n        // Step 3: Finding the Closest Pair\n        double minDifference = Double.MAX_VALUE;\n        List<Double> closestPair = new ArrayList<>();\n\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (diff < minDifference) {\n                minDifference = diff;\n                closestPair.clear();\n                closestPair.add(numbers.get(i));\n                closestPair.add(numbers.get(i + 1));\n            }\n        }\n\n        // Step 4: Returning the Result\n        return closestPair;\n    }\n}\n"}
{"task_id": "Java/21", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        // Step 1: Input Validation\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements.\");\n        }\n\n        // Step 2: Find Minimum and Maximum Values\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n        for (double num : numbers) {\n            if (num < min) min = num;\n            if (num > max) max = num;\n        }\n\n        // Step 3: Apply Linear Transformation\n        List<Double> transformedList = new ArrayList<>();\n        for (double num : numbers) {\n            double new_value = (num - min) / (max - min);\n            transformedList.add(new_value);\n        }\n\n        // Step 4: Return the Result\n        return transformedList;\n    }\n}\n"}
{"task_id": "Java/22", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filter_integers(List<Object> values) {\n        if (values == null || values.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/23", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        // Handle edge case for null input\n        if (string == null) {\n            return 0;\n        }\n        \n        // Calculate and return the length of the string\n        return string.length();\n    }\n}\n"}
{"task_id": "Java/24", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n     */\n    public int largest_divisor(int n) {\n        // Step 1: Input Validation\n        if (n <= 1) {\n            return -1; // or throw an exception\n        }\n\n        // Step 2: Finding the Largest Divisor\n        int largestDivisor = 1;\n        for (int i = n / 2; i > 1; i--) {\n            if (n % i == 0) {\n                largestDivisor = i;\n                break;\n            }\n        }\n\n        // Step 3: Return the Result\n        return largestDivisor;\n    }\n}\n"}
{"task_id": "Java/25", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        \n        if (n < 2) {\n            return factors;\n        }\n        \n        int factor = 2;\n        while (n > 1) {\n            while (n % factor == 0) {\n                factors.add(factor);\n                n /= factor;\n            }\n            factor++;\n        }\n        \n        return factors;\n    }\n}\n"}
{"task_id": "Java/26", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        // Step 1: Input Validation\n        if (numbers == null || numbers.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        // Step 2: Count Element Occurrences\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (Integer num : numbers) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n        }\n\n        // Step 3 & 4: Identify Non-Duplicate Elements and Build the Result List\n        List<Integer> result = new ArrayList<>();\n        for (Integer num : numbers) {\n            if (countMap.get(num) == 1) {\n                result.add(num);\n            }\n        }\n\n        // Step 5: Return the Result\n        return result;\n    }\n}\n"}
{"task_id": "Java/27", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"Hello\")\n    \"hELLO\"\n     */\n    public String flip_case(String string) {\n        StringBuilder result = new StringBuilder();\n        \n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                result.append(Character.toLowerCase(c));\n            } else if (Character.isLowerCase(c)) {\n                result.append(Character.toUpperCase(c));\n            } else {\n                result.append(c);\n            }\n        }\n        \n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/28", "generation": "import java.util.*;\n\nclass Solution {\n    public String concatenate(List<String> strings) {\n        // Handle empty list\n        if (strings.isEmpty()) {\n            return \"\";\n        }\n\n        // Initialize StringBuilder\n        StringBuilder result = new StringBuilder();\n\n        // Iterate and concatenate\n        for (String str : strings) {\n            if (str != null) { // Handle null values\n                result.append(str);\n            }\n        }\n\n        // Convert StringBuilder to String and return\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/29", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix(List.of(), \"a\")\n    []\n    >>> filter_by_prefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        // Input validation\n        if (strings == null || prefix == null) {\n            return new ArrayList<>();\n        }\n\n        // Filtering using Java Streams (Optional)\n        return strings.stream()\n                      .filter(str -> str.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/30", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> get_positive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> get_positive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> get_positive(List<Integer> l) {\n        // Step 1: Input Validation\n        if (l == null || l.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        // Step 2: Filtering Positive Numbers\n        return l.stream()\n                .filter(x -> x > 0)\n                .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/31", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    false\n    >>> is_prime(101)\n    true\n    >>> is_prime(11)\n    true\n    >>> is_prime(13441)\n    true\n    >>> is_prime(61)\n    true\n    >>> is_prime(4)\n    false\n    >>> is_prime(1)\n    false\n     */\n    public boolean is_prime(int n) {\n        // Step 1.1: Input validation\n        if (n < 2) {\n            return false;\n        }\n        \n        // Step 2.1: Special case for the smallest prime number\n        if (n == 2) {\n            return true;\n        }\n        \n        // Step 2.2: Check if n is even and greater than 2\n        if (n % 2 == 0) {\n            return false;\n        }\n        \n        // Step 2.3: Loop from 3 to the square root of n, skipping even numbers\n        int sqrtN = (int) Math.sqrt(n);\n        for (int i = 3; i <= sqrtN; i += 2) {\n            // Step 2.4: Check divisibility\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        \n        // Step 2.5: If no divisors found, n is prime\n        return true;\n    }\n}\n"}
{"task_id": "Java/32", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> find_zero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> find_zero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double find_zero(List<Double> xs) {\n        // Validate input\n        if (xs.size() % 2 != 0 || xs.get(xs.size() - 1) == 0) {\n            throw new IllegalArgumentException(\"Input list must have an even number of coefficients and the largest coefficient must be non-zero.\");\n        }\n        \n        // Implement Bisection Method\n        double a = -100.0; // Initial lower bound\n        double b = 100.0;  // Initial upper bound\n        double tolerance = 1e-7; // Tolerance for convergence\n        \n        while ((b - a) > tolerance) {\n            double c = (a + b) / 2; // Midpoint\n            double fc = poly(xs, c);\n            \n            if (Math.abs(fc) < tolerance) {\n                return c; // Found the zero point\n            } else if (poly(xs, a) * fc < 0) {\n                b = c; // Zero point lies in the left half\n            } else {\n                a = c; // Zero point lies in the right half\n            }\n        }\n        \n        return (a + b) / 2; // Return the midpoint as the zero point\n    }\n}\n"}
{"task_id": "Java/33", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted in ascending order.\n    >>> sort_third(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sort_third(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sort_third(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        List<Integer> divisibleByThreeValues = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                divisibleByThreeValues.add(l.get(i));\n            }\n        }\n\n        Collections.sort(divisibleByThreeValues);\n\n        List<Integer> result = new ArrayList<>(l);\n        int sortedIndex = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.set(i, divisibleByThreeValues.get(sortedIndex++));\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/34", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        // Step 1: Input Validation\n        if (l == null) {\n            return new ArrayList<>(); // or throw an exception\n        }\n\n        // Step 2: Remove Duplicates\n        Set<Integer> uniqueSet = new HashSet<>(l);\n\n        // Step 3: Sort the Unique Elements\n        List<Integer> sortedUniqueList = new ArrayList<>(uniqueSet);\n        Collections.sort(sortedUniqueList);\n\n        // Step 4: Return the Result\n        return sortedUniqueList;\n    }\n}\n"}
{"task_id": "Java/35", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> max_element(Arrays.asList(1, 2, 3))\n    3\n    >>> max_element(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int max_element(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list cannot be null or empty\");\n        }\n\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n\n        return max;\n    }\n}\n"}
{"task_id": "Java/36", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n     */\n    public int fizz_buzz(int n) {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"Input must be a positive integer.\");\n        }\n\n        int count = 0;\n\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String numStr = Integer.toString(i);\n                for (char c : numStr.toCharArray()) {\n                    if (c == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n\n        return count;\n    }\n}\n"}
{"task_id": "Java/37", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sort_even(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sort_even(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        List<Integer> evenValues = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 2) {\n            evenValues.add(l.get(i));\n        }\n\n        Collections.sort(evenValues);\n\n        List<Integer> result = new ArrayList<>(l.size());\n        int evenIndex = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(evenValues.get(evenIndex++));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/38", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decode_cyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n"}
{"task_id": "Java/39", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n     */\n    public int prime_fib(int n) {\n        int count = 0;\n        int fib1 = 1, fib2 = 1;\n        while (true) {\n            int nextFib = fib1 + fib2;\n            fib1 = fib2;\n            fib2 = nextFib;\n            if (isPrime(nextFib)) {\n                count++;\n                if (count == n) {\n                    return nextFib;\n                }\n            }\n        }\n    }\n\n    private boolean isPrime(int number) {\n        if (number <= 1) return false;\n        if (number <= 3) return true;\n        if (number % 2 == 0 || number % 3 == 0) return false;\n        for (int i = 5; i * i <= number; i += 6) {\n            if (number % i == 0 || number % (i + 2) == 0) return false;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/40", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triples_sum_to_zero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triples_sum_to_zero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triples_sum_to_zero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triples_sum_to_zero(Arrays.asList(1))\n    false\n     */\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        if (l == null || l.size() < 3) {\n            return false;\n        }\n        \n        Collections.sort(l);\n        \n        int n = l.size();\n        for (int i = 0; i < n - 2; i++) {\n            if (i > 0 && l.get(i).equals(l.get(i - 1))) {\n                continue;\n            }\n            \n            int j = i + 1;\n            int k = n - 1;\n            \n            while (j < k) {\n                int sum = l.get(i) + l.get(j) + l.get(k);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    j++;\n                } else {\n                    k--;\n                }\n            }\n        }\n        \n        return false;\n    }\n}\n"}
{"task_id": "Java/41", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int car_race_collision(int n) {\n        return n * n;\n    }\n}\n"}
{"task_id": "Java/42", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incr_list(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incr_list(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incr_list(List<Integer> l) {\n        if (l == null) {\n            return new ArrayList<>();\n        }\n        return l.stream()\n                .map(i -> i + 1)\n                .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/43", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairs_sum_to_zero(Arrays.asList(1))\n    false\n     */\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        if (l == null || l.size() < 2) {\n            return false;\n        }\n\n        for (int i = 0; i < l.size() - 1; i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(i) + l.get(j) == 0) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n}\n"}
{"task_id": "Java/44", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\n    >>> change_base(7, 2)\n    \"111\"\n     */\n    public String change_base(int x, int base) {\n        // Step 1: Input Validation\n        if (base >= 10) {\n            throw new IllegalArgumentException(\"Base must be less than 10.\");\n        }\n        \n        // Step 2: Base Conversion Logic\n        if (x == 0) {\n            return \"0\"; // Edge case handling\n        }\n        \n        Stack<Integer> remainders = new Stack<>();\n        while (x > 0) {\n            remainders.push(x % base);\n            x /= base;\n        }\n        \n        // Step 3: String Representation\n        StringBuilder result = new StringBuilder();\n        while (!remainders.isEmpty()) {\n            result.append(remainders.pop());\n        }\n        \n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/45", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and height, return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n     */\n    public double triangle_area(double a, double h) {\n        // Input validation\n        if (a <= 0 || h <= 0) {\n            throw new IllegalArgumentException(\"Both side length and height must be positive numbers.\");\n        }\n        \n        // Area calculation\n        double area = 0.5 * a * h;\n        \n        // Return the result\n        return area;\n    }\n}\n"}
{"task_id": "Java/46", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        // Base cases\n        int[] fib4Values = {0, 0, 2, 0};\n        \n        // Handle edge cases\n        if (n < 4) {\n            return fib4Values[n];\n        }\n        \n        // Iterate to compute Fib4 sequence\n        for (int i = 4; i <= n; i++) {\n            fib4Values[i % 4] = fib4Values[(i-1) % 4] + fib4Values[(i-2) % 4] + fib4Values[(i-3) % 4] + fib4Values[(i-4) % 4];\n        }\n        \n        // Return the result\n        return fib4Values[n % 4];\n    }\n}\n"}
{"task_id": "Java/47", "generation": "import java.util.*;\n\nclass Solution {\n    public double median(List<Integer> l) {\n        // Step 1: Input Validation\n        if (l.isEmpty()) {\n            return Double.NaN; // or throw an exception\n        }\n\n        // Step 2: Sorting the List\n        Collections.sort(l);\n\n        // Step 3: Calculating the Median\n        int size = l.size();\n        if (size % 2 != 0) {\n            // Odd number of elements\n            return l.get(size / 2);\n        } else {\n            // Even number of elements\n            int mid1 = l.get(size / 2 - 1);\n            int mid2 = l.get(size / 2);\n            return (mid1 + mid2) / 2.0;\n        }\n    }\n}\n"}
{"task_id": "Java/48", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n     */\n    public boolean is_palindrome(String text) {\n        // Step 1: Input Validation\n        if (text == null) {\n            return false; // or throw an exception, depending on the team's decision\n        }\n        if (text.isEmpty()) {\n            return true;\n        }\n\n        // Step 2: Palindrome Check Logic\n        int start = 0;\n        int end = text.length() - 1;\n\n        while (start < end) {\n            if (text.charAt(start) != text.charAt(end)) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n\n        // Step 3: Return the Result\n        return true;\n    }\n}\n"}
{"task_id": "Java/49", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        if (n < 0 || p <= 0) {\n            throw new IllegalArgumentException(\"Invalid input: n must be non-negative and p must be positive.\");\n        }\n        \n        if (n == 0) {\n            return 1;\n        }\n        \n        int result = 1;\n        int base = 2;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                result = (result * base) % p;\n            }\n            base = (base * base) % p;\n            n /= 2;\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/50", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decode_shift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26)));\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/51", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels(\"\")\n    \"\"\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> remove_vowels(\"abcdef\")\n    \"bcdf\"\n    >>> remove_vowels(\"aaaaa\")\n    \"\"\n    >>> remove_vowels(\"aaBAA\")\n    \"B\"\n    >>> remove_vowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String remove_vowels(String text) {\n        if (text == null || text.isEmpty()) {\n            return \"\";\n        }\n        \n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        StringBuilder result = new StringBuilder();\n        \n        for (char c : text.toCharArray()) {\n            if (!vowels.contains(c)) {\n                result.append(c);\n            }\n        }\n        \n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/52", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> below_threshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean below_threshold(List<Integer> l, int t) {\n        // Input validation\n        if (l == null || l.isEmpty()) {\n            return true; // Handle null or empty list case\n        }\n\n        // Comparison logic\n        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/53", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}\n"}
{"task_id": "Java/54", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same kind of characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean same_chars(String s0, String s1) {\n        // Step 1: Input Validation\n        if (s0 == null || s1 == null) return false;\n\n        // Step 2: Character Frequency Counting\n        HashMap<Character, Integer> freqMap0 = countFrequency(s0);\n        HashMap<Character, Integer> freqMap1 = countFrequency(s1);\n\n        // Step 3: Comparison of Character Frequencies\n        if (freqMap0.size() != freqMap1.size()) return false;\n        for (Character key : freqMap0.keySet()) {\n            if (!freqMap1.containsKey(key) || !freqMap0.get(key).equals(freqMap1.get(key))) {\n                return false;\n            }\n        }\n\n        // Step 4: Return Result\n        return true;\n    }\n\n    // Helper method to count character frequencies\n    private HashMap<Character, Integer> countFrequency(String s) {\n        HashMap<Character, Integer> freqMap = new HashMap<>();\n        for (char c : s.toCharArray()) {\n            freqMap.put(c, freqMap.getOrDefault(c, 0) + 1);\n        }\n        return freqMap;\n    }\n}\n"}
{"task_id": "Java/55", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Input must be non-negative.\");\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        \n        int a = 0;\n        int b = 1;\n        int result = 0;\n        \n        for (int i = 2; i <= n; i++) {\n            result = a + b;\n            a = b;\n            b = result;\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/56", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n     */\n    public boolean correct_bracketing(String brackets) {\n        // Input validation: Ensure the string contains only '<' and '>'\n        if (!brackets.matches(\"[<>]+\")) {\n            return false;\n        }\n\n        // Initialize a stack to keep track of unmatched opening brackets\n        Stack<Character> stack = new Stack<>();\n\n        // Traverse the string character by character\n        for (char ch : brackets.toCharArray()) {\n            if (ch == '<') {\n                // If it is an opening bracket, push it onto the stack\n                stack.push(ch);\n            } else if (ch == '>') {\n                // If it is a closing bracket, check if there is a corresponding opening bracket\n                if (stack.isEmpty() || stack.pop() != '<') {\n                    return false;\n                }\n            }\n        }\n\n        // Final check: Ensure the stack is empty (all brackets are matched)\n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/57", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l == null || l.size() <= 1) {\n            return true; // A single element list is trivially monotonic\n        }\n\n        boolean isIncreasing = true;\n        boolean isDecreasing = true;\n\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1)) {\n                isIncreasing = false;\n            }\n            if (l.get(i) < l.get(i + 1)) {\n                isDecreasing = false;\n            }\n        }\n\n        return isIncreasing || isDecreasing;\n    }\n}\n"}
{"task_id": "Java/58", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        // Step 1: Input Validation\n        if (l1 == null || l2 == null) {\n            return new ArrayList<>();\n        }\n        \n        // Step 2: Intersection Calculation\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> commonSet = new HashSet<>();\n        \n        for (Integer num : l2) {\n            if (set1.contains(num)) {\n                commonSet.add(num);\n            }\n        }\n        \n        // Step 3: Sorting the Result\n        List<Integer> result = new ArrayList<>(commonSet);\n        Collections.sort(result);\n        \n        // Step 4: Return the Result\n        return result;\n    }\n}\n"}
{"task_id": "Java/59", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n     */\n    public long largest_prime_factor(long n) {\n        long largestPrimeFactor = 1;\n        long currentFactor = 2;\n\n        while (n > 1) {\n            if (n % currentFactor == 0) {\n                largestPrimeFactor = currentFactor;\n                n /= currentFactor;\n            } else {\n                currentFactor++;\n            }\n        }\n\n        return largestPrimeFactor;\n    }\n}\n"}
{"task_id": "Java/60", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n     */\n    public int sum_to_n(int n) {\n        if (n <= 0) {\n            return 0;\n        }\n        return n * (n + 1) / 2;\n    }\n}\n"}
{"task_id": "Java/61", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n     */\n    public boolean correct_bracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        \n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '(') {\n                stack.push(bracket);\n            } else if (bracket == ')') {\n                if (stack.isEmpty() || stack.pop() != '(') {\n                    return false;\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/62", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        if (xs == null || xs.isEmpty()) {\n            return Collections.emptyList();\n        }\n        \n        if (xs.size() == 1) {\n            return Arrays.asList(0);\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/63", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Input must be a non-negative integer.\");\n        }\n        \n        if (n == 0 || n == 1) {\n            return 0;\n        }\n        \n        if (n == 2) {\n            return 1;\n        }\n        \n        int[] memo = new int[n + 1];\n        memo[0] = 0;\n        memo[1] = 0;\n        memo[2] = 1;\n        \n        for (int i = 3; i <= n; i++) {\n            memo[i] = memo[i - 1] + memo[i - 2] + memo[i - 3];\n        }\n        \n        return memo[n];\n    }\n}\n"}
{"task_id": "Java/64", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n     */\n    public int vowels_count(String s) {\n        // Initialize the vowel count\n        int count = 0;\n        \n        // Iterate through each character in the string\n        for (int i = 0; i < s.length(); i++) {\n            char c = Character.toLowerCase(s.charAt(i));\n            \n            // Check if the character is a vowel\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        \n        // Check if 'y' is at the end of the string\n        if (s.length() > 0 && Character.toLowerCase(s.charAt(s.length() - 1)) == 'y') {\n            count++;\n        }\n        \n        // Return the total count of vowels\n        return count;\n    }\n}\n"}
{"task_id": "Java/65", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n     */\n    public String circular_shift(int x, int shift) {\n        // Step 1: Convert the integer to a string\n        String strX = Integer.toString(x);\n        \n        // Step 2: Calculate the number of digits\n        int numDigits = strX.length();\n        \n        // Step 3: Handle edge case where shift >= number of digits\n        if (shift >= numDigits) {\n            // Reverse the string and return it\n            return new StringBuilder(strX).reverse().toString();\n        }\n        \n        // Step 4: Perform the circular shift\n        int effectiveShift = shift % numDigits;\n        String shiftedPart = strX.substring(numDigits - effectiveShift);\n        String remainingPart = strX.substring(0, numDigits - effectiveShift);\n        \n        // Step 5: Concatenate and return the result\n        return shiftedPart + remainingPart;\n    }\n}\n"}
{"task_id": "Java/66", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        // Initialize sum to 0\n        int sum = 0;\n        \n        // Iterate through each character in the string\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            \n            // Check if the character is uppercase\n            if (Character.isUpperCase(ch)) {\n                // Convert to ASCII and add to sum\n                sum += (int) ch;\n            }\n        }\n        \n        // Return the accumulated sum\n        return sum;\n    }\n}\n"}
{"task_id": "Java/67", "generation": "import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nclass Solution {\n    public int fruit_distribution(String s, int n) {\n        // Step 1: Extract the number of apples and oranges from the string\n        int apples = extractNumber(s, \"apples\");\n        int oranges = extractNumber(s, \"oranges\");\n        \n        // Step 2: Calculate the number of mangoes\n        int mangoes = n - apples - oranges;\n        \n        // Step 3: Return the number of mangoes\n        return mangoes;\n    }\n    \n    private int extractNumber(String s, String fruit) {\n        // Use regular expression to find the number of the specified fruit\n        Pattern pattern = Pattern.compile(\"(\\\\d+)\\\\s+\" + fruit);\n        Matcher matcher = pattern.matcher(s);\n        if (matcher.find()) {\n            return Integer.parseInt(matcher.group(1));\n        }\n        return 0; // Default to 0 if the fruit is not found\n    }\n}\n"}
{"task_id": "Java/68", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smallest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        // Step 1: Input Validation\n        if (arr.isEmpty()) {\n            return new ArrayList<Integer>();\n        }\n\n        // Step 2: Initialize variables\n        int smallestEven = Integer.MAX_VALUE;\n        int smallestIndex = -1;\n\n        // Step 3: Iterate through the list\n        for (int i = 0; i < arr.size(); i++) {\n            int current = arr.get(i);\n            if (current % 2 == 0) { // Check if the current element is even\n                if (current < smallestEven) {\n                    smallestEven = current;\n                    smallestIndex = i;\n                }\n            }\n        }\n\n        // Step 4: Return the result\n        if (smallestEven == Integer.MAX_VALUE) {\n            return new ArrayList<Integer>();\n        } else {\n            return Arrays.asList(smallestEven, smallestIndex);\n        }\n    }\n}\n"}
{"task_id": "Java/69", "generation": "import java.util.*;\n\nclass Solution {\n    public int search(List<Integer> lst) {\n        // Step 1: Count the frequency of each integer\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n\n        // Step 2: Filter integers based on frequency\n        List<Integer> filteredList = new ArrayList<>();\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            if (entry.getValue() >= entry.getKey()) {\n                filteredList.add(entry.getKey());\n            }\n        }\n\n        // Step 3: Find the greatest integer from the filtered list\n        if (filteredList.isEmpty()) {\n            return -1;\n        } else {\n            return Collections.max(filteredList);\n        }\n    }\n}\n"}
{"task_id": "Java/70", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strange_sort_list(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strange_sort_list(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        \n        while (!lst.isEmpty()) {\n            // Step 2.1: Find and remove the minimum value\n            int min = Collections.min(lst);\n            lst.remove(Integer.valueOf(min));\n            result.add(min);\n            \n            // Step 2.2: If the list is not empty, find and remove the maximum value\n            if (!lst.isEmpty()) {\n                int max = Collections.max(lst);\n                lst.remove(Integer.valueOf(max));\n                result.add(max);\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/71", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n     */\n    public double triangle_area(double a, double b, double c) {\n        // Step 1: Validate the triangle sides\n        if (!(a + b > c && a + c > b && b + c > a)) {\n            return -1;\n        }\n\n        // Step 2: Calculate the semi-perimeter\n        double s = (a + b + c) / 2;\n\n        // Step 3: Calculate the area using Heron's formula\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\n        // Step 4: Round the area to 2 decimal points\n        area = Math.round(area * 100.0) / 100.0;\n\n        // Step 5: Return the result\n        return area;\n    }\n}\n"}
{"task_id": "Java/72", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean will_it_fly(List<Integer> q, int w) {\n        // Step 1: Input Validation\n        if (q == null) {\n            return false;\n        }\n\n        // Step 2: Check if the List is Palindromic\n        boolean isPalindrome = isPalindromic(q);\n\n        // Step 3: Calculate the Sum of the List Elements\n        int sum = calculateSum(q);\n\n        // Step 4: Compare the Sum with the Maximum Weight\n        boolean isSumValid = isSumWithinLimit(sum, w);\n\n        // Step 5: Combine the Results\n        return isPalindrome && isSumValid;\n    }\n\n    private boolean isPalindromic(List<Integer> q) {\n        int left = 0;\n        int right = q.size() - 1;\n        while (left < right) {\n            if (!q.get(left).equals(q.get(right))) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    private int calculateSum(List<Integer> q) {\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n        return sum;\n    }\n\n    private boolean isSumWithinLimit(int sum, int w) {\n        return sum <= w;\n    }\n}\n"}
{"task_id": "Java/73", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallest_change(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallest_change(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallest_change(List<Integer> arr) {\n        if (arr == null || arr.size() == 0) {\n            throw new IllegalArgumentException(\"Array must not be null or empty\");\n        }\n\n        int changes = 0;\n        int n = arr.size();\n\n        for (int i = 0; i < n / 2; i++) {\n            if (!arr.get(i).equals(arr.get(n - 1 - i))) {\n                changes++;\n            }\n        }\n\n        return changes;\n    }\n}\n"}
{"task_id": "Java/74", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        int totalCharsLst1 = countTotalChars(lst1);\n        int totalCharsLst2 = countTotalChars(lst2);\n\n        if (totalCharsLst1 <= totalCharsLst2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n\n    private int countTotalChars(List<String> lst) {\n        int totalChars = 0;\n        for (String str : lst) {\n            totalChars += str.length();\n        }\n        return totalChars;\n    }\n}\n"}
{"task_id": "Java/75", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that the prime number is less then 100.\n    Example:\n    is_multiply_prime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean is_multiply_prime(int a) {\n        List<Integer> factors = primeFactors(a);\n        return factors.size() == 3;\n    }\n\n    private boolean isPrime(int n) {\n        if (n < 2) return false;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n\n    private List<Integer> primeFactors(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n / i; i++) {\n            while (n % i == 0) {\n                if (isPrime(i)) {\n                    factors.add(i);\n                }\n                n /= i;\n            }\n        }\n        if (n > 1 && isPrime(n)) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}\n"}
{"task_id": "Java/76", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n     */\n    public boolean is_simple_power(int x, int n) {\n        // Input validation\n        if (x <= 0 || n <= 0) {\n            return false;\n        }\n\n        // Special case handling\n        if (n == 1) {\n            return x == 1;\n        }\n        if (x == 1) {\n            return n > 1;\n        }\n\n        // Power calculation loop\n        int power = 1;\n        while (power < x) {\n            power *= n;\n            if (power == x) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n"}
{"task_id": "Java/77", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        double cubeRoot = Math.cbrt(a);\n        int cubeRootInt = (int) cubeRoot;\n        return cubeRootInt * cubeRootInt * cubeRootInt == a;\n    }\n}\n"}
{"task_id": "Java/78", "generation": "import java.util.*;\n\nclass Solution {\n    public int hex_key(String num) {\n        // Step 1: Define the set of prime hexadecimal digits\n        Set<Character> primeHexDigits = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        // Step 2: Initialize the counter\n        int count = 0;\n        \n        // Step 3: Iterate through the input string\n        for (char ch : num.toCharArray()) {\n            // Step 4: Update the counter if the character is a prime hexadecimal digit\n            if (primeHexDigits.contains(ch)) {\n                count++;\n            }\n        }\n        \n        // Step 5: Return the counter\n        return count;\n    }\n}\n"}
{"task_id": "Java/79", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   // returns \"db1111db\"\n    decimal_to_binary(32)   // returns \"db100000db\"\n     */\n    public String decimal_to_binary(int decimal) {\n        // Convert the decimal number to binary\n        String binary = Integer.toBinaryString(decimal);\n        \n        // Format the binary string by adding 'db' at the beginning and end\n        String formattedBinary = \"db\" + binary + \"db\";\n        \n        // Return the final formatted string\n        return formattedBinary;\n    }\n}\n"}
{"task_id": "Java/80", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => false\n    is_happy(aa) => false\n    is_happy(abcd) => true\n    is_happy(aabb) => false\n    is_happy(adb) => true\n    is_happy(xyy) => false\n     */\n    public boolean is_happy(String s) {\n        if (s.length() < 3) return false;\n        \n        for (int i = 0; i <= s.length() - 3; i++) {\n            String sub = s.substring(i, i + 3);\n            if (sub.charAt(0) == sub.charAt(1) || sub.charAt(1) == sub.charAt(2) || sub.charAt(0) == sub.charAt(2)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/81", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        // Step 1: Define the GPA to Letter Grade mapping\n        Map<Double, String> gradeMap = new HashMap<>();\n        gradeMap.put(4.0, \"A+\");\n        gradeMap.put(3.7, \"A\");\n        gradeMap.put(3.3, \"A-\");\n        gradeMap.put(3.0, \"B+\");\n        gradeMap.put(2.7, \"B\");\n        gradeMap.put(2.3, \"B-\");\n        gradeMap.put(2.0, \"C+\");\n        gradeMap.put(1.7, \"C\");\n        gradeMap.put(1.3, \"C-\");\n        gradeMap.put(1.0, \"D+\");\n        gradeMap.put(0.7, \"D\");\n        gradeMap.put(0.0, \"D-\");\n        gradeMap.put(-0.1, \"E\"); // Assuming any GPA less than 0.0 is considered \"E\"\n\n        // Step 2: Initialize the result list\n        List<String> letterGrades = new ArrayList<>();\n\n        // Step 3: Iterate through the input list and convert each GPA to a letter grade\n        for (Double gpa : grades) {\n            if (gpa < 0.0 || gpa > 4.0) {\n                throw new IllegalArgumentException(\"Invalid GPA value: \" + gpa);\n            }\n            // Find the corresponding letter grade\n            for (Map.Entry<Double, String> entry : gradeMap.entrySet()) {\n                if (gpa >= entry.getKey()) {\n                    letterGrades.add(entry.getValue());\n                    break;\n                }\n            }\n        }\n\n        // Step 4: Return the result list\n        return letterGrades;\n    }\n}\n"}
{"task_id": "Java/82", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    prime_length(\"Hello\") == true\n    prime_length(\"abcdcba\") == true\n    prime_length(\"kittens\") == true\n    prime_length(\"orange\") == false\n     */\n    public boolean prime_length(String string) {\n        int length = string.length();\n        return isPrime(length);\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/83", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int starts_one_ends(int n) {\n        int count = 0;\n        int start = (int) Math.pow(10, n - 1); // Minimum n-digit number\n        int end = (int) Math.pow(10, n) - 1;   // Maximum n-digit number\n\n        for (int i = start; i <= end; i++) {\n            String numStr = Integer.toString(i);\n            if (numStr.charAt(0) == '1' || numStr.charAt(numStr.length() - 1) == '1') {\n                count++;\n            }\n        }\n\n        return count;\n    }\n}\n"}
{"task_id": "Java/84", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return in binary the total sum of its digits.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        // Input validation\n        if (N < 0 || N > 10000) {\n            throw new IllegalArgumentException(\"Input N must be within the range 0 <= N <= 10000\");\n        }\n\n        // Digit extraction and summation\n        int sum = 0;\n        while (N > 0) {\n            sum += N % 10;\n            N /= 10;\n        }\n\n        // Binary conversion\n        return Integer.toBinaryString(sum);\n    }\n}\n"}
{"task_id": "Java/85", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 != 0 && lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/86", "generation": "import java.util.*;\n\nclass Solution {\n    public String anti_shuffle(String s) {\n        // Step 1: Split the input string into words and spaces\n        String[] parts = s.split(\"\\\\s+\");\n        List<String> wordsAndSpaces = new ArrayList<>(Arrays.asList(parts));\n\n        // Step 2: Sort the characters of each word\n        for (int i = 0; i < wordsAndSpaces.size(); i++) {\n            String word = wordsAndSpaces.get(i);\n            if (!word.isEmpty()) {\n                char[] chars = word.toCharArray();\n                Arrays.sort(chars);\n                wordsAndSpaces.set(i, new String(chars));\n            }\n        }\n\n        // Step 3: Reconstruct the output string\n        StringBuilder result = new StringBuilder();\n        for (String part : wordsAndSpaces) {\n            result.append(part).append(\" \");\n        }\n\n        // Remove the trailing space and return the result\n        return result.toString().trim();\n    }\n}\n"}
{"task_id": "Java/87", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        // Step 1: Initialize the result list\n        List<List<Integer>> result = new ArrayList<>();\n        \n        // Step 2: Iterate through the list to find occurrences of x\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    result.add(Arrays.asList(i, j));\n                }\n            }\n        }\n        \n        // Step 3: Sort the coordinates\n        Collections.sort(result, (a, b) -> {\n            if (a.get(0).equals(b.get(0))) {\n                return b.get(1).compareTo(a.get(1)); // Sort columns in descending order\n            }\n            return a.get(0).compareTo(b.get(0)); // Sort rows in ascending order\n        });\n        \n        // Step 4: Return the sorted result\n        return result;\n    }\n}\n"}
{"task_id": "Java/88", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> array) {\n        // Step 1: Input Validation\n        if (array == null || array.isEmpty()) {\n            return Collections.emptyList();\n        }\n        if (array.size() == 1) {\n            return new ArrayList<>(array);\n        }\n\n        // Step 2: Sum Calculation\n        int firstElement = array.get(0);\n        int lastElement = array.get(array.size() - 1);\n        int sum = firstElement + lastElement;\n\n        // Step 3: Sorting Logic\n        List<Integer> copiedList = new ArrayList<>(array);\n        if (sum % 2 != 0) {\n            // Sort in ascending order\n            Collections.sort(copiedList);\n        } else {\n            // Sort in descending order\n            Collections.sort(copiedList, Collections.reverseOrder());\n        }\n\n        // Step 4: Return the Result\n        return copiedList;\n    }\n}\n"}
{"task_id": "Java/89", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        StringBuilder encrypted = new StringBuilder();\n        int shift = 4;\n\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                char base = Character.isLowerCase(c) ? 'a' : 'A';\n                char shiftedChar = (char) (base + (c - base + shift) % 26);\n                encrypted.append(shiftedChar);\n            } else {\n                encrypted.append(c);\n            }\n        }\n\n        return encrypted.toString();\n    }\n}\n"}
{"task_id": "Java/90", "generation": "import java.util.*;\n\nclass Solution {\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        // Step 1: Input Validation\n        if (lst == null) {\n            throw new IllegalArgumentException(\"Input list cannot be null\");\n        }\n        if (lst.isEmpty() || lst.size() < 2) {\n            return Optional.empty();\n        }\n\n        // Step 2: Finding the Smallest and Second Smallest Elements\n        Integer smallest = null;\n        Integer secondSmallest = null;\n\n        // Find the smallest element\n        for (Integer num : lst) {\n            if (smallest == null || num < smallest) {\n                smallest = num;\n            }\n        }\n\n        // Find the second smallest element\n        for (Integer num : lst) {\n            if (!num.equals(smallest)) {\n                if (secondSmallest == null || num < secondSmallest) {\n                    secondSmallest = num;\n                }\n            }\n        }\n\n        // Step 3: Returning the Result\n        return secondSmallest != null ? Optional.of(secondSmallest) : Optional.empty();\n    }\n}\n"}
{"task_id": "Java/91", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int is_bored(String S) {\n        // Step 1: Split the input string into sentences\n        String[] sentences = S.split(\"(?<=[.!?]) +\");\n        \n        // Step 2: Initialize a counter for boredoms\n        int boredomCount = 0;\n        \n        // Step 3: Iterate through each sentence\n        for (String sentence : sentences) {\n            // Step 4: Check if the sentence starts with \"I\"\n            if (sentence.trim().startsWith(\"I\")) {\n                // Step 5: Increment the boredom counter\n                boredomCount++;\n            }\n        }\n        \n        // Step 6: Return the count of boredoms\n        return boredomCount;\n    }\n}\n"}
{"task_id": "Java/92", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) -> true\n\n    any_int(3, 2, 2) -> false\n\n    any_int(3, -2, 1) -> true\n\n    any_int(3.6, -2.2, 2) -> false\n     */\n    public boolean any_int(Object x, Object y, Object z) {\n        // Step 1: Input Validation\n        if (!(x instanceof Integer) || !(y instanceof Integer) || !(z instanceof Integer)) {\n            return false;\n        }\n\n        // Step 2: Convert inputs to integers\n        int a = (int) x;\n        int b = (int) y;\n        int c = (int) z;\n\n        // Step 3: Sum Calculation and Comparison\n        boolean result = (a + b == c) || (b + c == a) || (a + c == b);\n\n        // Step 4: Return Result\n        return result;\n    }\n}\n"}
{"task_id": "Java/93", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        StringBuilder encodedMessage = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                // Swap case\n                if (Character.isLowerCase(c)) {\n                    c = Character.toUpperCase(c);\n                } else {\n                    c = Character.toLowerCase(c);\n                }\n\n                // Replace vowels\n                if (\"aeiouAEIOU\".indexOf(c) != -1) {\n                    char base = Character.isLowerCase(c) ? 'a' : 'A';\n                    c = (char) (base + (c - base + 2) % 26);\n                }\n            }\n            encodedMessage.append(c);\n        }\n        return encodedMessage.toString();\n    }\n}\n"}
{"task_id": "Java/94", "generation": "import java.util.*;\n\nclass Solution {\n    public int skjkasdkd(List<Integer> lst) {\n        // Step 1: Filter prime numbers\n        List<Integer> primes = new ArrayList<>();\n        for (int num : lst) {\n            if (isPrime(num)) {\n                primes.add(num);\n            }\n        }\n        \n        // Step 2: Find the largest prime\n        int largestPrime = 0;\n        for (int prime : primes) {\n            if (prime > largestPrime) {\n                largestPrime = prime;\n            }\n        }\n        \n        // Step 3: Calculate the sum of digits of the largest prime\n        int sumOfDigits = sumOfDigits(largestPrime);\n        \n        // Step 4: Return the result\n        return sumOfDigits;\n    }\n    \n    // Helper function to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n    \n    // Helper function to calculate the sum of digits of a number\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/95", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings and all keys are in lower case or  in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n\n            String strKey = (String) key;\n            if (!strKey.equals(strKey.toLowerCase()) && !strKey.equals(strKey.toUpperCase())) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/96", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> count_up_to(int n) {\n        if (n < 2) {\n            return new ArrayList<>();\n        }\n        \n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        \n        return primes;\n    }\n    \n    private boolean isPrime(int num) {\n        if (num < 2) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/97", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        // Step 1: Extract the unit digits\n        int unitA = Math.abs(a) % 10;\n        int unitB = Math.abs(b) % 10;\n        \n        // Step 2: Compute the product of the unit digits\n        int product = unitA * unitB;\n        \n        // Step 3: Return the result\n        return product;\n    }\n}\n"}
{"task_id": "Java/98", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper(\"aBCdEf\") returns 1\n    count_upper(\"abcdefg\") returns 0\n    count_upper(\"dBBE\") returns 0\n     */    \n    public int count_upper(String s) {\n        int count = 0;\n        \n        for (int i = 0; i < s.length(); i += 2) {\n            char ch = s.charAt(i);\n            if (ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U') {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/99", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int closest_integer(String value) {\n        // Step 1: Input Validation\n        double number;\n        try {\n            number = Double.parseDouble(value);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Invalid input: \" + value);\n        }\n\n        // Step 2: Calculate the Closest Integer\n        double fractionalPart = number - (int) number;\n        if (fractionalPart == 0.5 || fractionalPart == -0.5) {\n            // Round away from zero\n            number = (number >= 0) ? Math.ceil(number) : Math.floor(number);\n        } else {\n            // Round to the nearest integer\n            number = Math.round(number);\n        }\n\n        // Step 3: Return the Result\n        return (int) number;\n    }\n}\n"}
{"task_id": "Java/100", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> stonesList = new ArrayList<>();\n        stonesList.add(n); // Add the first level\n        \n        for (int i = 1; i < n; i++) {\n            int lastStoneCount = stonesList.get(stonesList.size() - 1);\n            int nextStoneCount = lastStoneCount + 2; // Next number is always the next even or odd number\n            stonesList.add(nextStoneCount);\n        }\n        \n        return stonesList;\n    }\n}\n"}
{"task_id": "Java/101", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> words_string(String s) {\n        // Step 1: Input Validation\n        if (s == null || s.isEmpty()) {\n            return Collections.emptyList();\n        }\n        \n        // Step 2: Tokenization\n        String[] wordsArray = s.split(\"[,\\\\s]+\");\n        \n        // Step 3: Result Compilation\n        return Arrays.asList(wordsArray);\n    }\n}\n"}
{"task_id": "Java/102", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n     */\n    public int choose_num(int x, int y) {\n        // Step 1: Input Validation\n        if (x <= 0 || y <= 0 || x > y) {\n            return -1;\n        }\n\n        // Step 2: Initialize maxEven to -1\n        int maxEven = -1;\n\n        // Step 3: Loop through the range [x, y]\n        for (int i = x; i <= y; i++) {\n            // Check if the current number is even\n            if (i % 2 == 0) {\n                // Update maxEven if the current even number is larger\n                if (i > maxEven) {\n                    maxEven = i;\n                }\n            }\n        }\n\n        // Step 4: Return the result\n        return maxEven;\n    }\n}\n"}
{"task_id": "Java/103", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"1111\"\n    rounded_avg(20, 33) => \"11011\"\n     */\n    public Object rounded_avg(int n, int m) {\n        // Step 1.1: Check if n is greater than m\n        if (n > m) {\n            // Step 1.2: If n is greater than m, return -1\n            return -1;\n        }\n\n        // Step 2.1: Calculate the sum of integers from n to m (inclusive)\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n\n        // Step 2.2: Calculate the count of integers from n to m (inclusive)\n        int count = m - n + 1;\n\n        // Step 2.3: Compute the average by dividing the sum by the count\n        double average = (double) sum / count;\n\n        // Step 3.1: Round the computed average to the nearest integer using Math.round()\n        int roundedAverage = (int) Math.round(average);\n\n        // Step 4.1: Convert the rounded integer to its binary representation using Integer.toBinaryString()\n        String binaryResult = Integer.toBinaryString(roundedAverage);\n\n        // Step 5.1: Return the binary string as the final result\n        return binaryResult;\n    }\n}\n"}
{"task_id": "Java/104", "generation": "import java.util.*;\n\nclass Solution {\n    // Helper function to check if a number contains any even digit\n    private boolean hasEvenDigit(int number) {\n        while (number > 0) {\n            int digit = number % 10;\n            if (digit % 2 == 0) {\n                return true;\n            }\n            number /= 10;\n        }\n        return false;\n    }\n\n    public List<Integer> unique_digits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        \n        // Filter out numbers with even digits\n        for (int num : x) {\n            if (!hasEvenDigit(num)) {\n                result.add(num);\n            }\n        }\n        \n        // Sort the result list\n        Collections.sort(result);\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/105", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> by_length(List<Integer> arr) {\n        // Step 1.1: Filter out integers that are not between 1 and 9\n        List<Integer> validIntegers = new ArrayList<>();\n        for (Integer num : arr) {\n            if (num >= 1 && num <= 9) {\n                validIntegers.add(num);\n            }\n        }\n\n        // Step 2.1: Sort the list of valid integers in ascending order\n        Collections.sort(validIntegers);\n\n        // Step 3.1: Reverse the sorted list\n        Collections.reverse(validIntegers);\n\n        // Step 4.1: Create a mapping of integers to their corresponding names\n        Map<Integer, String> numberToName = new HashMap<>();\n        numberToName.put(1, \"One\");\n        numberToName.put(2, \"Two\");\n        numberToName.put(3, \"Three\");\n        numberToName.put(4, \"Four\");\n        numberToName.put(5, \"Five\");\n        numberToName.put(6, \"Six\");\n        numberToName.put(7, \"Seven\");\n        numberToName.put(8, \"Eight\");\n        numberToName.put(9, \"Nine\");\n\n        // Step 4.2: Replace each integer with its corresponding name\n        List<String> result = new ArrayList<>();\n        for (Integer num : validIntegers) {\n            result.add(numberToName.get(num));\n        }\n\n        // Step 5.1: Return the list of names as the final output\n        return result;\n    }\n}\n"}
{"task_id": "Java/106", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> resultList = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (isEven(i)) {\n                resultList.add(factorial(i));\n            } else {\n                resultList.add(sumOfNumbers(i));\n            }\n        }\n        \n        return resultList;\n    }\n    \n    private boolean isEven(int i) {\n        return i % 2 == 0;\n    }\n    \n    private int factorial(int i) {\n        int result = 1;\n        for (int j = 1; j <= i; j++) {\n            result *= j;\n        }\n        return result;\n    }\n    \n    private int sumOfNumbers(int i) {\n        int sum = 0;\n        for (int j = 1; j <= i; j++) {\n            sum += j;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/107", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> even_odd_palindrome(int n) {\n        // Step 1: Input validation\n        if (n < 1 || n > 1000) {\n            throw new IllegalArgumentException(\"Input n must be between 1 and 1000.\");\n        }\n\n        int evenCount = 0;\n        int oddCount = 0;\n\n        // Step 2: Identify palindromes and classify them\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        // Step 3: Return the result\n        return Arrays.asList(evenCount, oddCount);\n    }\n\n    // Helper method to check if a number is a palindrome\n    private boolean isPalindrome(int number) {\n        String str = Integer.toString(number);\n        String reverseStr = new StringBuilder(str).reverse().toString();\n        return str.equals(reverseStr);\n    }\n}\n"}
{"task_id": "Java/108", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums(Arrays.asList()) == 0\n    >>> count_nums(Arrays.asList(-1, 11, -11)) == 1\n    >>> count_nums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int count_nums(List<Integer> arr) {\n        int count = 0;\n        \n        for (int num : arr) {\n            int sumOfDigits = sumDigits(num);\n            if (sumOfDigits > 0) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n    \n    private int sumDigits(int num) {\n        int sum = 0;\n        boolean isNegative = num < 0;\n        num = Math.abs(num);\n        \n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        \n        return isNegative ? -sum : sum;\n    }\n}\n"}
{"task_id": "Java/109", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    move_one_ball(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean move_one_ball(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        List<Integer> sortedArr = new ArrayList<>(arr);\n        Collections.sort(sortedArr);\n\n        int n = arr.size();\n        for (int i = 0; i < n; i++) {\n            boolean isRotationPoint = true;\n            for (int j = 0; j < n; j++) {\n                if (!arr.get((i + j) % n).equals(sortedArr.get(j))) {\n                    isRotationPoint = false;\n                    break;\n                }\n            }\n            if (isRotationPoint) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n"}
{"task_id": "Java/110", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Count the number of odd elements in lst1\n        int oddCountInLst1 = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCountInLst1++;\n            }\n        }\n\n        // Count the number of even elements in lst2\n        int evenCountInLst2 = 0;\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCountInLst2++;\n            }\n        }\n\n        // Determine if the exchange is possible\n        if (evenCountInLst2 >= oddCountInLst1) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}\n"}
{"task_id": "Java/111", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        // Step 1.1: Split the input string by spaces to get an array of letters\n        String[] letters = test.split(\" \");\n        \n        // Step 1.2: Handle edge cases where the input string is empty\n        if (test.isEmpty()) {\n            return new HashMap<>();\n        }\n\n        // Step 2.1: Initialize a HashMap<String, Integer> to store the frequency of each letter\n        Map<String, Integer> frequencyMap = new HashMap<>();\n\n        // Step 2.2: Iterate through the array of letters and update the frequency map\n        for (String letter : letters) {\n            frequencyMap.put(letter, frequencyMap.getOrDefault(letter, 0) + 1);\n        }\n\n        // Step 3.1: Initialize a variable to keep track of the maximum frequency\n        int maxFrequency = 0;\n\n        // Step 3.2: Iterate through the frequency map to find the highest frequency value\n        for (int frequency : frequencyMap.values()) {\n            if (frequency > maxFrequency) {\n                maxFrequency = frequency;\n            }\n        }\n\n        // Step 4.1: Initialize a HashMap<String, Integer> to store the result\n        Map<String, Integer> resultMap = new HashMap<>();\n\n        // Step 4.2: Iterate through the frequency map again and add letters with the maximum frequency to the result map\n        for (Map.Entry<String, Integer> entry : frequencyMap.entrySet()) {\n            if (entry.getValue() == maxFrequency) {\n                resultMap.put(entry.getKey(), entry.getValue());\n            }\n        }\n\n        // Step 5.1: Return the result map containing the letters with the maximum frequency and their count\n        return resultMap;\n    }\n}\n"}
{"task_id": "Java/112", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverse_delete(String s, String c) {\n        // Step 1: Remove characters from s that are in c\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                result.append(ch);\n            }\n        }\n        \n        // Step 2: Check if the resulting string is a palindrome\n        String resultString = result.toString();\n        boolean isPalindrome = resultString.equals(new StringBuilder(resultString).reverse().toString());\n        \n        // Step 3: Return the result as a tuple\n        List<Object> resultList = new ArrayList<>();\n        resultList.add(resultString);\n        resultList.add(isPalindrome);\n        return resultList;\n    }\n}\n"}
{"task_id": "Java/113", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> odd_count(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        \n        for (String str : lst) {\n            int oddCount = 0;\n            \n            for (char ch : str.toCharArray()) {\n                if (isOddDigit(ch)) {\n                    oddCount++;\n                }\n            }\n            \n            String output = String.format(\"the number of odd elements %dn the str%dng %d of the %dnput.\", oddCount, oddCount, oddCount, oddCount);\n            result.add(output);\n        }\n        \n        return result;\n    }\n    \n    private boolean isOddDigit(char ch) {\n        return ch == '1' || ch == '3' || ch == '5' || ch == '7' || ch == '9';\n    }\n}\n"}
{"task_id": "Java/114", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        if (nums == null || nums.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list cannot be null or empty\");\n        }\n\n        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n\n        for (int num : nums) {\n            currentSum = Math.min(num, currentSum + num);\n            minSum = Math.min(minSum, currentSum);\n        }\n\n        return minSum;\n    }\n}\n"}
{"task_id": "Java/115", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity. Can't use buckets from other wells to extract water from one well.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        // Step 1: Input Validation\n        if (grid == null || grid.isEmpty() || capacity < 1 || capacity > 10) {\n            return 0;\n        }\n\n        int totalExtractions = 0;\n\n        // Step 2: Water Extraction Calculation\n        for (List<Integer> row : grid) {\n            int waterUnits = Collections.frequency(row, 1);\n            int extractionsForRow = waterUnits / capacity;\n            if (waterUnits % capacity != 0) {\n                extractionsForRow++;\n            }\n            totalExtractions += extractionsForRow;\n        }\n\n        // Step 3: Output the Result\n        return totalExtractions;\n    }\n}\n"}
{"task_id": "Java/116", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sort_array(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 4, 3, 5))\n    >>> sort_array(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-4, -2, -6, -5, -3))\n    >>> sort_array(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 4, 3))\n     */\n    public List<Integer> sort_array(List<Integer> arr) {\n        Collections.sort(arr, new BinaryOnesComparator());\n        return arr;\n    }\n\n    private static class BinaryOnesComparator implements Comparator<Integer> {\n        @Override\n        public int compare(Integer a, Integer b) {\n            int onesA = Integer.bitCount(a);\n            int onesB = Integer.bitCount(b);\n\n            if (onesA != onesB) {\n                return Integer.compare(onesA, onesB);\n            } else {\n                return Integer.compare(a, b);\n            }\n        }\n    }\n}\n"}
{"task_id": "Java/117", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> select_words(String s, int n) {\n        // Step 1: Input Validation\n        if (s.isEmpty()) {\n            return new ArrayList<String>();\n        }\n\n        // Step 2: Word Extraction\n        String[] words = s.split(\"\\\\s+\");\n\n        // Step 3: Word Filtering\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            if (countConsonants(word) == n) {\n                result.add(word);\n            }\n        }\n\n        // Step 4: Result Compilation\n        return result;\n    }\n\n    // Helper function to count consonants in a word\n    private int countConsonants(String word) {\n        int count = 0;\n        String lowerWord = word.toLowerCase();\n        for (char c : lowerWord.toCharArray()) {\n            if (Character.isLetter(c) && \"aeiou\".indexOf(c) == -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/118", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n     */\n    public String get_closest_vowel(String word) {\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        Set<Character> consonants = new HashSet<>(Arrays.asList('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z', 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'));\n        \n        int firstConsonantIndex = -1;\n        int secondConsonantIndex = -1;\n        \n        // Traverse from right to left to find the first consonant\n        for (int i = word.length() - 1; i >= 0; i--) {\n            if (consonants.contains(word.charAt(i))) {\n                firstConsonantIndex = i;\n                break;\n            }\n        }\n        \n        // If no first consonant found, return empty string\n        if (firstConsonantIndex == -1) {\n            return \"\";\n        }\n        \n        // Traverse from first consonant to left to find the second consonant\n        for (int i = firstConsonantIndex - 1; i >= 0; i--) {\n            if (consonants.contains(word.charAt(i))) {\n                secondConsonantIndex = i;\n                break;\n            }\n        }\n        \n        // If no second consonant found, return empty string\n        if (secondConsonantIndex == -1) {\n            return \"\";\n        }\n        \n        // Find the closest vowel between the two consonants\n        for (int i = firstConsonantIndex - 1; i > secondConsonantIndex; i--) {\n            if (vowels.contains(word.charAt(i))) {\n                return String.valueOf(word.charAt(i));\n            }\n        }\n        \n        // If no vowel found between the two consonants, return empty string\n        return \"\";\n    }\n}\n"}
{"task_id": "Java/119", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    match_parens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    match_parens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String match_parens(List<String> lst) {\n        String str1 = lst.get(0);\n        String str2 = lst.get(1);\n        \n        int openCount1 = countParentheses(str1, '(');\n        int closeCount1 = countParentheses(str1, ')');\n        int openCount2 = countParentheses(str2, '(');\n        int closeCount2 = countParentheses(str2, ')');\n        \n        int totalOpen = openCount1 + openCount2;\n        int totalClose = closeCount1 + closeCount2;\n        \n        if (totalOpen != totalClose) {\n            return \"No\";\n        }\n        \n        if (isBalanced(str1 + str2) || isBalanced(str2 + str1)) {\n            return \"Yes\";\n        }\n        \n        return \"No\";\n    }\n    \n    private int countParentheses(String str, char paren) {\n        int count = 0;\n        for (char c : str.toCharArray()) {\n            if (c == paren) {\n                count++;\n            }\n        }\n        return count;\n    }\n    \n    private boolean isBalanced(String str) {\n        int balance = 0;\n        for (char c : str.toCharArray()) {\n            if (c == '(') {\n                balance++;\n            } else if (c == ')') {\n                balance--;\n            }\n            if (balance < 0) {\n                return false;\n            }\n        }\n        return balance == 0;\n    }\n}\n"}
{"task_id": "Java/120", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr, in ascending order.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Input validation\n        if (arr == null || arr.size() < 1 || arr.size() > 1000 || k < 0 || k > arr.size()) {\n            throw new IllegalArgumentException(\"Invalid input\");\n        }\n\n        // Use a min-heap to find the top k elements\n        PriorityQueue<Integer> minHeap = new PriorityQueue<>();\n        for (int num : arr) {\n            minHeap.offer(num);\n            if (minHeap.size() > k) {\n                minHeap.poll();\n            }\n        }\n\n        // Convert the min-heap to a sorted list\n        List<Integer> result = new ArrayList<>(minHeap);\n        Collections.sort(result);\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/121", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) { // Check if the index is even\n                if (lst.get(i) % 2 != 0) { // Check if the element is odd\n                    sum += lst.get(i);\n                }\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/122", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int add_elements(List<Integer> arr, int k) {\n        // Input validation\n        if (arr == null || arr.size() < 1 || arr.size() > 100 || k < 1 || k > arr.size()) {\n            throw new IllegalArgumentException(\"Invalid input\");\n        }\n\n        int sum = 0;\n\n        // Iterate through the first k elements\n        for (int i = 0; i < k; i++) {\n            int element = arr.get(i);\n            // Check if the element has at most two digits\n            if (Math.abs(element) >= 0 && Math.abs(element) <= 99) {\n                sum += element;\n            }\n        }\n\n        return sum;\n    }\n}\n"}
{"task_id": "Java/123", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> get_odd_collatz(int n) {\n        List<Integer> collatzSequence = new ArrayList<>();\n        List<Integer> oddNumbers = new ArrayList<>();\n        \n        // Generate the Collatz sequence\n        while (n != 1) {\n            collatzSequence.add(n);\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n        }\n        collatzSequence.add(1); // Add the final 1 to the sequence\n        \n        // Filter odd numbers\n        for (int num : collatzSequence) {\n            if (num % 2 != 0) {\n                oddNumbers.add(num);\n            }\n        }\n        \n        // Sort the odd numbers\n        Collections.sort(oddNumbers);\n        \n        return oddNumbers;\n    }\n}\n"}
{"task_id": "Java/124", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    valid_date(\"03-11-2000\") => true\n    valid_date(\"15-01-2012\") => false\n    valid_date(\"04-0-2040\") => false\n    valid_date(\"06-04-2020\") => true\n    valid_date(\"06/04/2020\") => false\n     */\n    public boolean valid_date(String date) {\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        // Check if the date matches the format mm-dd-yyyy\n        if (!date.matches(\"\\\\d{2}-\\\\d{2}-\\\\d{4}\")) {\n            return false;\n        }\n\n        // Extract month, day, and year\n        String[] parts = date.split(\"-\");\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\n        // Validate month\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        // Validate day based on month\n        if (day < 1) {\n            return false;\n        }\n\n        switch (month) {\n            case 1: case 3: case 5: case 7: case 8: case 10: case 12:\n                if (day > 31) {\n                    return false;\n                }\n                break;\n            case 4: case 6: case 9: case 11:\n                if (day > 30) {\n                    return false;\n                }\n                break;\n            case 2:\n                if (isLeapYear(year)) {\n                    if (day > 29) {\n                        return false;\n                    }\n                } else {\n                    if (day > 28) {\n                        return false;\n                    }\n                }\n                break;\n        }\n\n        return true;\n    }\n\n    private boolean isLeapYear(int year) {\n        if (year % 4 != 0) {\n            return false;\n        } else if (year % 100 != 0) {\n            return true;\n        } else if (year % 400 != 0) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n"}
{"task_id": "Java/125", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n     */\n    public Object split_words(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\"\\\\s+\"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && ((c - 'a') % 2 != 0)) {\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n}\n"}
{"task_id": "Java/126", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If the a number appears more than twice, return false. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted(Arrays.asList(5)) -> true\n    is_sorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    is_sorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    is_sorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    is_sorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    is_sorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean is_sorted(List<Integer> lst) {\n        // Step 1: Input Validation\n        if (lst == null) return false;\n\n        // Step 2: Check for Sorted Order\n        boolean isSorted = true;\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                isSorted = false;\n                break;\n            }\n        }\n\n        // Step 3: Check for Duplicate Elements\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (int num : lst) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n            if (countMap.get(num) > 2) {\n                return false;\n            }\n        }\n\n        // Step 4: Combine Results\n        return isSorted;\n    }\n}\n"}
{"task_id": "Java/127", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // Input validation\n        if (interval1.size() != 2 || interval2.size() != 2 ||\n            interval1.get(0) > interval1.get(1) || interval2.get(0) > interval2.get(1)) {\n            return \"NO\";\n        }\n\n        // Calculate the intersection\n        int startIntersection = Math.max(interval1.get(0), interval2.get(0));\n        int endIntersection = Math.min(interval1.get(1), interval2.get(1));\n\n        // If intervals do not intersect\n        if (startIntersection > endIntersection) {\n            return \"NO\";\n        }\n\n        // Calculate the length of the intersection\n        int lengthOfIntersection = endIntersection - startIntersection + 1;\n\n        // Check if the length is a prime number\n        if (isPrime(lengthOfIntersection)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    // Helper function to check if a number is prime\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/128", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prod_signs(Arrays.asList(0, 1)) == 0\n    >>> prod_signs(Arrays.asList()) == None\n     */\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int signProduct = 1;\n        int sumOfMagnitudes = 0;\n\n        for (int num : arr) {\n            if (num == 0) {\n                signProduct = 0;\n                break;\n            } else if (num < 0) {\n                signProduct *= -1;\n            }\n            sumOfMagnitudes += Math.abs(num);\n        }\n\n        return Optional.of(sumOfMagnitudes * signProduct);\n    }\n}\n"}
{"task_id": "Java/129", "generation": "import java.util.*;\n\nclass Solution {\n    private int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        List<Integer> minPath = null;\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                List<Integer> path = new ArrayList<>();\n                path.add(grid.get(i).get(j));\n                minPath = dfs(grid, i, j, k, path, minPath);\n            }\n        }\n\n        return minPath;\n    }\n\n    private List<Integer> dfs(List<List<Integer>> grid, int x, int y, int k, List<Integer> currentPath, List<Integer> minPath) {\n        if (currentPath.size() == k) {\n            if (minPath == null || isLexicographicallySmaller(currentPath, minPath)) {\n                return new ArrayList<>(currentPath);\n            }\n            return minPath;\n        }\n\n        for (int[] dir : directions) {\n            int newX = x + dir[0];\n            int newY = y + dir[1];\n\n            if (newX >= 0 && newX < grid.size() && newY >= 0 && newY < grid.size()) {\n                currentPath.add(grid.get(newX).get(newY));\n                minPath = dfs(grid, newX, newY, k, currentPath, minPath);\n                currentPath.remove(currentPath.size() - 1);\n            }\n        }\n\n        return minPath;\n    }\n\n    private boolean isLexicographicallySmaller(List<Integer> path1, List<Integer> path2) {\n        for (int i = 0; i < path1.size(); i++) {\n            if (path1.get(i) < path2.get(i)) {\n                return true;\n            } else if (path1.get(i) > path2.get(i)) {\n                return false;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/130", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        Map<Integer, Integer> memo = new HashMap<>();\n        \n        // Base case\n        result.add(3);\n        memo.put(1, 3);\n        \n        for (int i = 2; i <= n + 1; i++) {\n            if (i % 2 == 0) {\n                // Even case\n                int value = 1 + i / 2;\n                result.add(value);\n                memo.put(i, value);\n            } else {\n                // Odd case\n                int value = memo.get(i - 1) + memo.get(i - 2) + (memo.containsKey(i + 1) ? memo.get(i + 1) : 1 + (i + 1) / 2);\n                result.add(value);\n                memo.put(i, value);\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/131", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int product = 0;\n        boolean hasOddDigit = false;\n        \n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                if (!hasOddDigit) {\n                    product = 1; // Initialize product to 1 when the first odd digit is found\n                    hasOddDigit = true;\n                }\n                product *= digit;\n            }\n            n /= 10;\n        }\n        \n        return product;\n    }\n}\n"}
{"task_id": "Java/132", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    is_nested(\"[[]]\") -> true\n    is_nested(\"[]]]]]]][[[[[]\") -> false\n    is_nested(\"[][]\") -> false\n    is_nested(\"[]\") -> false\n    is_nested(\"[[][]]\") -> true\n    is_nested(\"[[]][[\") -> true\n     */\n    public boolean is_nested(String string) {\n        // Input validation: Ensure the string contains only '[' and ']'\n        if (!string.matches(\"[\\\\[\\\\]]*\")) {\n            return false;\n        }\n\n        Stack<Character> stack = new Stack<>();\n        boolean hasNested = false;\n        int openCount = 0;\n\n        for (char ch : string.toCharArray()) {\n            if (ch == '[') {\n                stack.push(ch);\n                openCount++;\n            } else if (ch == ']') {\n                if (!stack.isEmpty() && stack.peek() == '[') {\n                    stack.pop();\n                    openCount--;\n                    if (openCount > 0) {\n                        hasNested = true;\n                    }\n                } else {\n                    stack.push(ch);\n                }\n            }\n        }\n\n        // If the stack is not empty, it means there are unmatched brackets\n        if (!stack.isEmpty()) {\n            return false;\n        }\n\n        return hasNested;\n    }\n}\n"}
{"task_id": "Java/133", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sum_squares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            double roundedNum = Math.ceil(num);\n            int squaredValue = (int) (roundedNum * roundedNum);\n            sum += squaredValue;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/134", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") -> false\n    check_if_last_char_is_a_letter(\"apple pi e\") -> true\n    check_if_last_char_is_a_letter(\"apple pi e \") -> false\n    check_if_last_char_is_a_letter(\"\") -> false\n     */\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        if (txt.isEmpty()) {\n            return false;\n        }\n\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (!Character.isLetter(lastChar)) {\n            return false;\n        }\n\n        String[] words = txt.split(\"\\\\s+\");\n        if (words.length == 0) {\n            return false;\n        }\n\n        String lastWord = words[words.length - 1];\n        return lastChar != lastWord.charAt(lastWord.length() - 1);\n    }\n}\n"}
{"task_id": "Java/135", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange(Arrays.asList(1,2,4,3,5)) = 3\n    can_arrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int can_arrange(List<Integer> arr) {\n        // Step 1: Input Validation\n        if (arr == null || arr.size() < 2) {\n            return -1;\n        }\n\n        // Step 2: Initialization\n        int largestIndex = -1;\n\n        // Step 3: Iteration and Comparison\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                largestIndex = i;\n            }\n        }\n\n        // Step 4: Return the Result\n        return largestIndex;\n    }\n}\n"}
{"task_id": "Java/136", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        if (lst == null) {\n            throw new IllegalArgumentException(\"Input list cannot be null\");\n        }\n\n        // Filter the list into negative and positive integers\n        List<Integer> negatives = lst.stream().filter(i -> i < 0).collect(Collectors.toList());\n        List<Integer> positives = lst.stream().filter(i -> i > 0).collect(Collectors.toList());\n\n        // Find the largest negative and smallest positive integers\n        Optional<Integer> largestNegative = negatives.stream().max(Integer::compare);\n        Optional<Integer> smallestPositive = positives.stream().min(Integer::compare);\n\n        // Return the result as a list of Optionals\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n}\n"}
{"task_id": "Java/137", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) -> Optional.of(2.5)\n    compare_one(1, \"2,3\") -> Optional.of(\"2,3\")\n    compare_one(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compare_one(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compare_one(Object a, Object b) {\n        // Step 1: Identify and convert types\n        Double valueA = convertToComparable(a);\n        Double valueB = convertToComparable(b);\n\n        // Step 2: Compare the values\n        if (valueA == null || valueB == null) {\n            // Handle conversion errors\n            return Optional.empty();\n        }\n\n        int comparison = valueA.compareTo(valueB);\n\n        // Step 3: Return the result\n        if (comparison > 0) {\n            return Optional.of(a);\n        } else if (comparison < 0) {\n            return Optional.of(b);\n        } else {\n            return Optional.empty();\n        }\n    }\n\n    private Double convertToComparable(Object obj) {\n        if (obj instanceof Integer) {\n            return ((Integer) obj).doubleValue();\n        } else if (obj instanceof Float) {\n            return ((Float) obj).doubleValue();\n        } else if (obj instanceof String) {\n            try {\n                String normalized = ((String) obj).replace(',', '.');\n                return Double.parseDouble(normalized);\n            } catch (NumberFormatException e) {\n                return null; // Conversion failed\n            }\n        } else {\n            return null; // Unsupported type\n        }\n    }\n}\n"}
{"task_id": "Java/138", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == false\n    is_equal_to_sum_even(6) == false\n    is_equal_to_sum_even(8) == true\n     */\n    public boolean is_equal_to_sum_even(int n) {\n        // Step 1: Input Validation\n        if (n < 8 || n % 2 != 0) {\n            return false;\n        }\n\n        // Step 2: Generate Even Numbers\n        List<Integer> evenNumbers = new ArrayList<>();\n        for (int i = 2; i <= n; i += 2) {\n            evenNumbers.add(i);\n        }\n\n        // Step 3: Combination Check\n        for (int i = 0; i < evenNumbers.size(); i++) {\n            for (int j = i + 1; j < evenNumbers.size(); j++) {\n                for (int k = j + 1; k < evenNumbers.size(); k++) {\n                    for (int l = k + 1; l < evenNumbers.size(); l++) {\n                        if (evenNumbers.get(i) + evenNumbers.get(j) + evenNumbers.get(k) + evenNumbers.get(l) == n) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n\n        // Step 4: Return Result\n        return false;\n    }\n}\n"}
{"task_id": "Java/139", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    // Helper function to compute the factorial of a given integer k\n    private long factorial(int k) {\n        if (k == 0 || k == 1) {\n            return 1;\n        }\n        long result = 1;\n        for (int i = 2; i <= k; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    // Main function to compute the Brazilian factorial\n    public long special_factorial(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n\n        long result = 1;\n        for (int i = n; i >= 1; i--) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/140", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fix_spaces(String text) {\n        // Step 1: Replace single spaces with underscores\n        text = text.replace(\" \", \"_\");\n        \n        // Step 2: Replace consecutive spaces with hyphens\n        text = text.replaceAll(\"_{3,}\", \"-\");\n        \n        // Step 3: Handle leading and trailing spaces\n        if (text.startsWith(\"_\")) {\n            text = \"_\" + text.substring(1);\n        }\n        if (text.endsWith(\"_\")) {\n            text = text.substring(0, text.length() - 1) + \"_\";\n        }\n        \n        // Step 4: Return the final result\n        return text;\n    }\n}\n"}
{"task_id": "Java/141", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String file_name_check(String file_name) {\n        // Step 1: Check for null input\n        if (file_name == null) return \"No\";\n\n        // Step 2: Count digits\n        int digitCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n                if (digitCount > 3) return \"No\";\n            }\n        }\n\n        // Step 3: Check for exactly one dot\n        int dotCount = file_name.length() - file_name.replace(\".\", \"\").length();\n        if (dotCount != 1) return \"No\";\n\n        // Step 4: Validate substring before the dot\n        String[] parts = file_name.split(\"\\\\.\");\n        String beforeDot = parts[0];\n        if (beforeDot.isEmpty() || !Character.isLetter(beforeDot.charAt(0))) return \"No\";\n\n        // Step 5: Validate substring after the dot\n        String afterDot = parts[1];\n        if (!Arrays.asList(\"txt\", \"exe\", \"dll\").contains(afterDot)) return \"No\";\n\n        // Step 6: Return \"Yes\" if all conditions are met\n        return \"Yes\";\n    }\n}\n"}
{"task_id": "Java/142", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sum_squares(List<Integer> lst) {\n        for (int i = 0; i < lst.size(); i++) {\n            int element = lst.get(i);\n            if (i % 3 == 0) {\n                lst.set(i, element * element);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                lst.set(i, element * element * element);\n            }\n        }\n        \n        int sum = 0;\n        for (int num : lst) {\n            sum += num;\n        }\n        \n        return sum;\n    }\n}\n"}
{"task_id": "Java/143", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String words_in_sentence(String sentence) {\n        // Step 1: Parse the Input Sentence\n        String[] words = sentence.split(\" \");\n        \n        // Step 2: Filter Words by Prime Length\n        List<String> filteredWords = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                filteredWords.add(word);\n            }\n        }\n        \n        // Step 3: Construct the Output String\n        return String.join(\" \", filteredWords);\n    }\n    \n    // Helper function to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/144", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Step 1: Parse the input strings\n        String[] partsX = x.split(\"/\");\n        String[] partsN = n.split(\"/\");\n        \n        int numX = Integer.parseInt(partsX[0]);\n        int denX = Integer.parseInt(partsX[1]);\n        int numN = Integer.parseInt(partsN[0]);\n        int denN = Integer.parseInt(partsN[1]);\n        \n        // Step 2: Multiply the fractions\n        int newNum = numX * numN;\n        int newDen = denX * denN;\n        \n        // Step 3: Simplify the resulting fraction\n        int gcd = gcd(newNum, newDen);\n        newNum /= gcd;\n        newDen /= gcd;\n        \n        // Step 4: Check if the resulting fraction is a whole number\n        return newDen == 1;\n    }\n\n    // Helper function to compute the GCD\n    private int gcd(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}\n"}
{"task_id": "Java/145", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n    If an integer is negative, then its first digit will be negative:\n    e.g. -123 has digits -1, 2, and 3.\n\n    For example:\n    >>> order_by_points(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> order_by_points(Arrays.asList()) == []\n     */\n    public List<Integer> order_by_points(List<Integer> nums) {\n        if (nums.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        // Step 3: Pair each integer with its sum of digits\n        List<Pair<Integer, Integer>> pairs = new ArrayList<>();\n        for (int num : nums) {\n            pairs.add(new Pair<>(num, sumOfDigits(num)));\n        }\n\n        // Step 4: Sort the list of pairs\n        Collections.sort(pairs, Comparator.comparingInt(Pair::getValue));\n\n        // Step 5: Extract the sorted integers\n        List<Integer> sortedNums = new ArrayList<>();\n        for (Pair<Integer, Integer> pair : pairs) {\n            sortedNums.add(pair.getKey());\n        }\n\n        // Step 6: Return the sorted list\n        return sortedNums;\n    }\n\n    // Step 2: Helper function to calculate the sum of digits\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        boolean isNegative = num < 0;\n        num = Math.abs(num);\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return isNegative ? -sum : sum;\n    }\n\n    // Helper class to store pairs of integers and their sum of digits\n    private static class Pair<K, V> {\n        private final K key;\n        private final V value;\n\n        public Pair(K key, V value) {\n            this.key = key;\n            this.value = value;\n        }\n\n        public K getKey() {\n            return key;\n        }\n\n        public V getValue() {\n            return value;\n        }\n    }\n}\n"}
{"task_id": "Java/146", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        \n        for (int num : nums) {\n            if (num > 10) {\n                String numStr = String.valueOf(Math.abs(num));\n                char firstDigit = numStr.charAt(0);\n                char lastDigit = numStr.charAt(numStr.length() - 1);\n                \n                if (isOddDigit(firstDigit) && isOddDigit(lastDigit)) {\n                    count++;\n                }\n            }\n        }\n        \n        return count;\n    }\n\n    private boolean isOddDigit(char digit) {\n        int digitValue = Character.getNumericValue(digit);\n        return digitValue % 2 != 0;\n    }\n}\n"}
{"task_id": "Java/147", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int get_max_triples(int n) {\n        int[] a = generateArray(n);\n        return countValidTriples(a);\n    }\n\n    private int[] generateArray(int n) {\n        int[] a = new int[n];\n        for (int i = 1; i <= n; i++) {\n            a[i - 1] = i * i - i + 1;\n        }\n        return a;\n    }\n\n    private int countValidTriples(int[] a) {\n        int count = 0;\n        int n = a.length;\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/148", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closest to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a list containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty list if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        \n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return new ArrayList<>();\n        }\n        \n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        int startIndex = Math.min(index1, index2);\n        int endIndex = Math.max(index1, index2);\n        \n        List<String> result = new ArrayList<>();\n        for (int i = startIndex + 1; i < endIndex; i++) {\n            result.add(planets.get(i));\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/149", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert sorted_list_sum(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert sorted_list_sum(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> sorted_list_sum(List<String> lst) {\n        // Step 1: Input Validation\n        if (lst == null || lst.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        // Step 2: Filtering Phase\n        List<String> filteredList = lst.stream()\n                                       .filter(s -> s.length() % 2 == 0)\n                                       .collect(Collectors.toList());\n\n        // Step 3: Sorting Phase\n        Collections.sort(filteredList, (s1, s2) -> {\n            int lengthComparison = Integer.compare(s1.length(), s2.length());\n            if (lengthComparison != 0) {\n                return lengthComparison;\n            } else {\n                return s1.compareTo(s2);\n            }\n        });\n\n        // Step 4: Return the Result\n        return filteredList;\n    }\n}\n"}
{"task_id": "Java/150", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n     */\n    public int x_or_y(int n, int x, int y) {\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/151", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    double_the_difference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    double_the_difference(Arrays.asList(-1, -2, 0)) == 0\n    double_the_difference(Arrays.asList(9, -2)) == 81\n    double_the_difference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int double_the_difference(List<Object> lst) {\n        // Step 1: Input Parsing and Validation\n        List<Integer> validOddNumbers = new ArrayList<>();\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                if (num > 0 && num % 2 == 1) {\n                    validOddNumbers.add(num);\n                }\n            }\n        }\n\n        // Step 2: Calculating the Sum of Squares\n        int sum = 0;\n        for (int num : validOddNumbers) {\n            sum += num * num;\n        }\n\n        // Step 3: Return the Result\n        return sum;\n    }\n}\n"}
{"task_id": "Java/152", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        // Input Validation\n        if (game == null || guess == null || game.size() != guess.size()) {\n            throw new IllegalArgumentException(\"Input lists must be non-null and of the same length.\");\n        }\n\n        // Initialization\n        List<Integer> result = new ArrayList<>(game.size());\n\n        // Comparison Loop\n        for (int i = 0; i < game.size(); i++) {\n            int score = game.get(i);\n            int guessedScore = guess.get(i);\n            if (score == guessedScore) {\n                result.add(0);\n            } else {\n                result.add(Math.abs(score - guessedScore));\n            }\n        }\n\n        // Return the Result\n        return result;\n    }\n}\n"}
{"task_id": "Java/153", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.Strongest_Extension.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        String strongestExtension = null;\n        int maxStrength = Integer.MIN_VALUE;\n\n        for (String extension : extensions) {\n            int CAP = 0;\n            int SM = 0;\n\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    CAP++;\n                } else if (Character.isLowerCase(c)) {\n                    SM++;\n                }\n            }\n\n            int strength = CAP - SM;\n\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return class_name + \".\" + strongestExtension;\n    }\n}\n"}
{"task_id": "Java/154", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => false\n    cycpattern_check(\"hello\",\"ell\") => true\n    cycpattern_check(\"whassup\",\"psus\") => false\n    cycpattern_check(\"abab\",\"baa\") => true\n    cycpattern_check(\"efef\",\"eeff\") => false\n    cycpattern_check(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpattern_check(String a, String b) {\n        // Step 1: Input Validation\n        if (a == null || b == null) {\n            return false;\n        }\n\n        // Step 2: Generate Rotations\n        List<String> rotations = generateRotations(b);\n\n        // Step 3: Check Substrings\n        for (String rotation : rotations) {\n            if (a.contains(rotation)) {\n                return true;\n            }\n        }\n\n        // Step 4: Return Result\n        return false;\n    }\n\n    // Helper method to generate all rotations of a string\n    private List<String> generateRotations(String b) {\n        List<String> rotations = new ArrayList<>();\n        int length = b.length();\n        for (int i = 0; i < length; i++) {\n            String rotation = b.substring(i) + b.substring(0, i);\n            rotations.add(rotation);\n        }\n        return rotations;\n    }\n}\n"}
{"task_id": "Java/155", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n     */\n    public List<Integer> even_odd_count(int num) {\n        // Convert the input integer to a string\n        String numStr = Integer.toString(num);\n        \n        // Initialize counters for even and odd digits\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        // Iterate through each character in the string representation of the number\n        for (char ch : numStr.toCharArray()) {\n            // Ignore the negative sign if present\n            if (ch == '-') {\n                continue;\n            }\n            \n            // Convert the character back to an integer\n            int digit = Character.getNumericValue(ch);\n            \n            // Check if the digit is even or odd and increment the corresponding counter\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        \n        // Create a list containing the values of evenCount and oddCount\n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        \n        // Return the result\n        return result;\n    }\n}\n"}
{"task_id": "Java/156", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == \"xix\"\n    >>> int_to_mini_roman(152) == \"clii\"\n    >>> int_to_mini_roman(426) == \"cdxxvi\"\n     */\n    public String int_to_mini_roman(int number) {\n        // Step 1: Define the mapping of integers to Roman numerals\n        Map<Integer, String> romanMap = new HashMap<>();\n        romanMap.put(1000, \"M\");\n        romanMap.put(900, \"CM\");\n        romanMap.put(500, \"D\");\n        romanMap.put(400, \"CD\");\n        romanMap.put(100, \"C\");\n        romanMap.put(90, \"XC\");\n        romanMap.put(50, \"L\");\n        romanMap.put(40, \"XL\");\n        romanMap.put(10, \"X\");\n        romanMap.put(9, \"IX\");\n        romanMap.put(5, \"V\");\n        romanMap.put(4, \"IV\");\n        romanMap.put(1, \"I\");\n\n        // Step 2: Construct the Roman numeral string\n        StringBuilder romanNumeral = new StringBuilder();\n        for (Map.Entry<Integer, String> entry : new TreeMap<>(romanMap).descendingMap().entrySet()) {\n            int value = entry.getKey();\n            String symbol = entry.getValue();\n            while (number >= value) {\n                romanNumeral.append(symbol);\n                number -= value;\n            }\n        }\n\n        // Step 3: Convert to lowercase\n        return romanNumeral.toString().toLowerCase();\n    }\n}\n"}
{"task_id": "Java/157", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == true\n    right_angle_triangle(1, 2, 3) == false\n     */\n    public boolean right_angle_triangle(int a, int b, int c) {\n        // Input validation\n        if (a <= 0 || b <= 0 || c <= 0) {\n            return false;\n        }\n        if (!(a + b > c && a + c > b && b + c > a)) {\n            return false;\n        }\n\n        // Identify the hypotenuse\n        int hypotenuse = Math.max(a, Math.max(b, c));\n        int side1, side2;\n        if (hypotenuse == a) {\n            side1 = b;\n            side2 = c;\n        } else if (hypotenuse == b) {\n            side1 = a;\n            side2 = c;\n        } else {\n            side1 = a;\n            side2 = b;\n        }\n\n        // Apply the Pythagorean Theorem\n        return hypotenuse * hypotenuse == side1 * side1 + side2 * side2;\n    }\n}\n"}
{"task_id": "Java/158", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\n     */\n    public String find_max(List<String> words) {\n        if (words == null || words.isEmpty()) {\n            return \"\";\n        }\n\n        String maxWord = \"\";\n        int maxUniqueCount = 0;\n\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n\n            int uniqueCount = uniqueChars.size();\n\n            if (uniqueCount > maxUniqueCount || \n                (uniqueCount == maxUniqueCount && word.compareTo(maxWord) < 0)) {\n                maxWord = word;\n                maxUniqueCount = uniqueCount;\n            }\n        }\n\n        return maxWord;\n    }\n}\n"}
{"task_id": "Java/159", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> eat(int number, int need, int remaining) {\n        // Step 1: Input Validation\n        if (number < 0 || number > 1000 || need < 0 || need > 1000 || remaining < 0 || remaining > 1000) {\n            throw new IllegalArgumentException(\"Input values must be between 0 and 1000.\");\n        }\n\n        // Step 2: Calculate Total Carrots Eaten\n        int totalEaten = number;\n        int additionalCarrotsNeeded = need;\n        int additionalCarrotsEaten = Math.min(additionalCarrotsNeeded, remaining);\n        totalEaten += additionalCarrotsEaten;\n\n        // Step 3: Calculate Remaining Carrots\n        int remainingCarrots = remaining - additionalCarrotsEaten;\n        if (remainingCarrots < 0) {\n            remainingCarrots = 0;\n        }\n\n        // Step 4: Return the Result\n        List<Integer> result = new ArrayList<>();\n        result.add(totalEaten);\n        result.add(remainingCarrots);\n        return result;\n    }\n}\n"}
{"task_id": "Java/160", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebraic\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        // Input Validation\n        if (operator.size() != operand.size() - 1) {\n            throw new IllegalArgumentException(\"The length of operator list must be one less than the length of operand list.\");\n        }\n        for (int num : operand) {\n            if (num < 0) {\n                throw new IllegalArgumentException(\"All operands must be non-negative integers.\");\n            }\n        }\n\n        // Expression Construction\n        StringBuilder expression = new StringBuilder();\n        for (int i = 0; i < operator.size(); i++) {\n            expression.append(operand.get(i)).append(\" \").append(operator.get(i)).append(\" \");\n        }\n        expression.append(operand.get(operand.size() - 1));\n\n        // Expression Evaluation\n        try {\n            return evaluateExpression(expression.toString());\n        } catch (ArithmeticException e) {\n            throw new ArithmeticException(\"Division by zero occurred during evaluation.\");\n        }\n    }\n\n    private int evaluateExpression(String expression) {\n        // Using Shunting Yard algorithm to handle operator precedence\n        List<String> outputQueue = new ArrayList<>();\n        Stack<String> operatorStack = new Stack<>();\n        Map<String, Integer> precedence = new HashMap<>();\n        precedence.put(\"+\", 1);\n        precedence.put(\"-\", 1);\n        precedence.put(\"*\", 2);\n        precedence.put(\"/\", 2);\n        precedence.put(\"**\", 3);\n\n        String[] tokens = expression.split(\" \");\n        for (String token : tokens) {\n            if (isNumeric(token)) {\n                outputQueue.add(token);\n            } else if (precedence.containsKey(token)) {\n                while (!operatorStack.isEmpty() && precedence.get(operatorStack.peek()) >= precedence.get(token)) {\n                    outputQueue.add(operatorStack.pop());\n                }\n                operatorStack.push(token);\n            }\n        }\n        while (!operatorStack.isEmpty()) {\n            outputQueue.add(operatorStack.pop());\n        }\n\n        // Evaluate RPN (Reverse Polish Notation)\n        Stack<Integer> evaluationStack = new Stack<>();\n        for (String token : outputQueue) {\n            if (isNumeric(token)) {\n                evaluationStack.push(Integer.parseInt(token));\n            } else {\n                int b = evaluationStack.pop();\n                int a = evaluationStack.pop();\n                switch (token) {\n                    case \"+\":\n                        evaluationStack.push(a + b);\n                        break;\n                    case \"-\":\n                        evaluationStack.push(a - b);\n                        break;\n                    case \"*\":\n                        evaluationStack.push(a * b);\n                        break;\n                    case \"/\":\n                        if (b == 0) {\n                            throw new ArithmeticException(\"Division by zero.\");\n                        }\n                        evaluationStack.push(a / b);\n                        break;\n                    case \"**\":\n                        evaluationStack.push((int) Math.pow(a, b));\n                        break;\n                }\n            }\n        }\n        return evaluationStack.pop();\n    }\n\n    private boolean isNumeric(String str) {\n        try {\n            Integer.parseInt(str);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }\n    }\n}\n"}
{"task_id": "Java/161", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        StringBuilder result = new StringBuilder();\n        boolean hasLetters = false;\n\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                result.append(Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c));\n                hasLetters = true;\n            } else {\n                result.append(c);\n            }\n        }\n\n        if (!hasLetters) {\n            result.reverse();\n        }\n\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/162", "generation": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        // Step 1: Input Validation\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        // Step 2: MD5 Hash Calculation\n        MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n        byte[] hashBytes = digest.digest(text.getBytes());\n\n        // Step 3: Convert byte array to hexadecimal string\n        StringBuilder hexString = new StringBuilder();\n        for (byte b : hashBytes) {\n            hexString.append(String.format(\"%02x\", b));\n        }\n\n        // Step 4: Ensure the string is exactly 32 characters long\n        if (hexString.length() != 32) {\n            throw new IllegalStateException(\"MD5 hash should be 32 characters long.\");\n        }\n\n        // Step 5: Return the result wrapped in Optional\n        return Optional.of(hexString.toString());\n    }\n}\n"}
{"task_id": "Java/163", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order. Please note that the even digits refer to even numbers less than 10.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n     */\n    public List<Integer> generate_integers(int a, int b) {\n        // Input validation: Ensure a and b are positive integers\n        if (a <= 0 || b <= 0) {\n            return Collections.emptyList();\n        }\n\n        // Determine the range: Ensure the range is from the smaller to the larger number\n        int start = Math.min(a, b);\n        int end = Math.max(a, b);\n\n        // Set to store unique even digits\n        Set<Integer> evenDigits = new HashSet<>();\n\n        // Extract digits and filter even digits\n        for (int num = start; num <= end; num++) {\n            int temp = num;\n            while (temp > 0) {\n                int digit = temp % 10;\n                if (digit % 2 == 0 && digit < 10) {\n                    evenDigits.add(digit);\n                }\n                temp /= 10;\n            }\n        }\n\n        // Convert the Set to a List and sort it\n        List<Integer> result = new ArrayList<>(evenDigits);\n        Collections.sort(result);\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/0", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> has_close_elements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> has_close_elements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        // Step 1: Input Validation\n        if (numbers == null || numbers.size() < 2) {\n            return false;\n        }\n        if (threshold <= 0) {\n            throw new IllegalArgumentException(\"Threshold must be positive.\");\n        }\n\n        // Step 2: Pairwise Comparison\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n\n        // Step 3: Return Result\n        return false;\n    }\n}\n"}
{"task_id": "Java/1", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separate_paren_groups(String paren_string) {\n        // Step 1: Input Preprocessing - Remove all spaces from the input string\n        paren_string = paren_string.replaceAll(\" \", \"\");\n        \n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        StringBuilder currentGroup = new StringBuilder();\n        \n        // Step 2: Balanced Parentheses Detection\n        for (char ch : paren_string.toCharArray()) {\n            currentGroup.append(ch);\n            if (ch == '(') {\n                stack.push(ch);\n            } else if (ch == ')') {\n                stack.pop();\n                if (stack.isEmpty()) {\n                    // Step 3: Group Extraction - A balanced group is found\n                    result.add(currentGroup.toString());\n                    currentGroup.setLength(0); // Reset for the next group\n                }\n            }\n        }\n        \n        // Step 4: Edge Case Handling - If no balanced groups are found, return an empty list\n        return result;\n    }\n}\n"}
{"task_id": "Java/2", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n     */\n    public double truncate_number(double number) {\n        // Step 1: Input Validation\n        if (number <= 0) {\n            throw new IllegalArgumentException(\"Input must be a positive floating-point number.\");\n        }\n\n        // Step 2: Extract the Integer Part\n        double integerPart = Math.floor(number);\n\n        // Step 3: Calculate the Decimal Part\n        double decimalPart = number - integerPart;\n\n        // Step 4: Return the Decimal Part\n        return decimalPart;\n    }\n}\n"}
{"task_id": "Java/3", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero(Arrays.asList(1, 2, 3))\n    false\n    >>> below_zero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean below_zero(List<Integer> operations) {\n        // Initialize the balance to zero\n        int balance = 0;\n        \n        // Iterate through each operation in the list\n        for (int operation : operations) {\n            // Update the balance\n            balance += operation;\n            \n            // Check if the balance has fallen below zero\n            if (balance < 0) {\n                return true;\n            }\n        }\n        \n        // If the loop completes without the balance falling below zero, return false\n        return false;\n    }\n}\n"}
{"task_id": "Java/4", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double mean_absolute_deviation(List<Double> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            return Double.NaN;\n        }\n\n        double sum = 0.0;\n        for (double number : numbers) {\n            sum += number;\n        }\n        double mean = sum / numbers.size();\n\n        double sumOfAbsoluteDeviations = 0.0;\n        for (double number : numbers) {\n            sumOfAbsoluteDeviations += Math.abs(number - mean);\n        }\n\n        return sumOfAbsoluteDeviations / numbers.size();\n    }\n}\n"}
{"task_id": "Java/5", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimiter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        // Initialize the result list\n        List<Integer> result = new ArrayList<>();\n        \n        // Handle edge case (empty input list)\n        if (numbers.isEmpty()) {\n            return result;\n        }\n        \n        // Iterate through the input list\n        for (int i = 0; i < numbers.size(); i++) {\n            // Append each element to the result list\n            result.add(numbers.get(i));\n            \n            // Append the delimiter after each element except the last one\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        \n        // Return the constructed result list\n        return result;\n    }\n}\n"}
{"task_id": "Java/6", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parse_nested_parens(String paren_string) {\n        // Step 1.1: Split the input string by spaces to get an array of strings\n        String[] groups = paren_string.split(\" \");\n        \n        // Step 1.2: Initialize an empty list to store the results\n        List<Integer> results = new ArrayList<>();\n        \n        // Step 2.1: For each group of parentheses in the array\n        for (String group : groups) {\n            int currentNestingLevel = 0;\n            int maxNestingLevel = 0;\n            \n            // Iterate through each character in the group\n            for (char ch : group.toCharArray()) {\n                if (ch == '(') {\n                    currentNestingLevel++;\n                    // Update the maximum nesting level if the current nesting level exceeds it\n                    if (currentNestingLevel > maxNestingLevel) {\n                        maxNestingLevel = currentNestingLevel;\n                    }\n                } else if (ch == ')') {\n                    currentNestingLevel--;\n                }\n            }\n            \n            // Step 2.2: Append the maximum nesting level of the current group to the results list\n            results.add(maxNestingLevel);\n        }\n        \n        // Step 3.1: Return the results list as the final output\n        return results;\n    }\n}\n"}
{"task_id": "Java/7", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                result.add(str);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/8", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product(List.of())\n    [0, 1]\n    >>> sum_product(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sum_product(List<Integer> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            return Arrays.asList(0, 1);\n        }\n\n        int sum = 0;\n        int product = 1;\n\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n\n        return Arrays.asList(sum, product);\n    }\n}\n"}
{"task_id": "Java/9", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int currentMax = Integer.MIN_VALUE;\n\n        for (int number : numbers) {\n            if (number > currentMax) {\n                currentMax = number;\n            }\n            result.add(currentMax);\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/10", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n     */\n    public String make_palindrome(String string) {\n        if (string.isEmpty()) {\n            return string;\n        }\n\n        int n = string.length();\n        int longestPalindromicSuffixStart = 0;\n\n        // Find the longest palindromic suffix\n        for (int i = 0; i < n; i++) {\n            if (isPalindrome(string.substring(i))) {\n                longestPalindromicSuffixStart = i;\n                break;\n            }\n        }\n\n        // Extract the prefix that comes before the longest palindromic suffix\n        String prefix = string.substring(0, longestPalindromicSuffixStart);\n\n        // Reverse the prefix\n        String reversedPrefix = new StringBuilder(prefix).reverse().toString();\n\n        // Combine the original string with the reversed prefix\n        return string + reversedPrefix;\n    }\n}\n"}
{"task_id": "Java/11", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n     */\n    public String string_xor(String a, String b) {\n        // Input validation\n        if (a == null || b == null) {\n            throw new IllegalArgumentException(\"Input strings cannot be null\");\n        }\n        if (a.length() != b.length()) {\n            throw new IllegalArgumentException(\"Input strings must be of the same length\");\n        }\n        if (!a.matches(\"[01]+\") || !b.matches(\"[01]+\")) {\n            throw new IllegalArgumentException(\"Input strings must contain only '0's and '1's\");\n        }\n\n        // Initialize StringBuilder to store the result\n        StringBuilder result = new StringBuilder();\n\n        // Perform binary XOR operation\n        for (int i = 0; i < a.length(); i++) {\n            char charA = a.charAt(i);\n            char charB = b.charAt(i);\n            int xorResult = (charA - '0') ^ (charB - '0');\n            result.append(xorResult);\n        }\n\n        // Return the result as a string\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/12", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longestString = null;\n        int maxLength = 0;\n\n        for (String str : strings) {\n            if (str.length() > maxLength) {\n                longestString = str;\n                maxLength = str.length();\n            }\n        }\n\n        return Optional.ofNullable(longestString);\n    }\n}\n"}
{"task_id": "Java/13", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n     */\n    public int greatest_common_divisor(int a, int b) {\n        // Handle the case where either a or b is zero\n        if (a == 0) return b;\n        if (b == 0) return a;\n        \n        // Ensure a is the larger number\n        if (a < b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        \n        // Implement the Euclidean Algorithm\n        while (b != 0) {\n            int remainder = a % b;\n            a = b;\n            b = remainder;\n        }\n        \n        return a;\n    }\n}\n"}
{"task_id": "Java/14", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> all_prefixes(String string) {\n        // Step 1: Input Validation\n        if (string == null) {\n            // Handle null input (e.g., return an empty list)\n            return new ArrayList<>();\n        }\n        \n        // Step 2: Initialize the list to store prefixes\n        List<String> prefixes = new ArrayList<>();\n        \n        // Step 3: Generate and collect prefixes\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        \n        // Step 4: Return the list of prefixes\n        return prefixes;\n    }\n}\n"}
{"task_id": "Java/15", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String string_sequence(int n) {\n        // Step 1: Input Validation\n        if (n < 0) {\n            return \"\";\n        }\n\n        // Step 2: Generating the Sequence\n        List<String> sequence = new ArrayList<>();\n        for (int i = 0; i <= n; i++) {\n            sequence.add(String.valueOf(i));\n        }\n\n        // Step 3: Formatting the Output\n        String result = String.join(\" \", sequence);\n\n        // Step 4: Returning the Result\n        return result;\n    }\n}\n"}
{"task_id": "Java/16", "generation": "import java.util.*;\n\nclass Solution {\n    public int count_distinct_characters(String string) {\n        // Step 1: Input Validation\n        if (string == null) {\n            throw new IllegalArgumentException(\"Input string cannot be null\");\n        }\n        \n        // Step 2: Normalization\n        String normalizedString = string.toLowerCase();\n        \n        // Step 3: Unique Character Identification\n        Set<Character> uniqueCharacters = new HashSet<>();\n        for (char c : normalizedString.toCharArray()) {\n            uniqueCharacters.add(c);\n        }\n        \n        // Step 4: Counting Distinct Characters\n        return uniqueCharacters.size();\n    }\n}\n"}
{"task_id": "Java/17", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parse_music(String string) {\n        // Step 1.1: Split the input string by spaces to get an array of individual note strings.\n        String[] notes = string.split(\" \");\n        \n        // Step 1.2: Initialize an empty list to store the beats for each note.\n        List<Integer> beats = new ArrayList<>();\n        \n        // Step 2.1: Iterate through the array of note strings.\n        for (String note : notes) {\n            // Step 2.2: For each note string, determine its type (whole, half, quarter) based on the characters in the string.\n            int beat = 0;\n            if (note.equals(\"o\")) {\n                // Step 2.3: Assign the corresponding number of beats to the note.\n                beat = 4; // Whole note\n            } else if (note.equals(\"o|\")) {\n                beat = 2; // Half note\n            } else if (note.equals(\".|\")) {\n                beat = 1; // Quarter note\n            }\n            \n            // Step 2.3: Append the beats to the list.\n            beats.add(beat);\n        }\n        \n        // Step 3.1: Return the list of beats as the final output.\n        return beats;\n    }\n}\n"}
{"task_id": "Java/18", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlapping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n     */\n    public int how_many_times(String string, String substring) {\n        // Input validation\n        if (string == null || substring == null || substring.length() > string.length()) {\n            return 0;\n        }\n        \n        // Edge case: empty substring\n        if (substring.isEmpty()) {\n            return 0;\n        }\n        \n        int count = 0;\n        int pos = 0;\n        \n        // Substring matching loop\n        while ((pos = string.indexOf(substring, pos)) != -1) {\n            count++;\n            pos++; // Move forward by 1 for overlapping cases\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/19", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sort_numbers(String numbers) {\n        // Step 1: Create a mapping of number words to their corresponding numerical values\n        Map<String, Integer> wordToNumber = new HashMap<>();\n        wordToNumber.put(\"zero\", 0);\n        wordToNumber.put(\"one\", 1);\n        wordToNumber.put(\"two\", 2);\n        wordToNumber.put(\"three\", 3);\n        wordToNumber.put(\"four\", 4);\n        wordToNumber.put(\"five\", 5);\n        wordToNumber.put(\"six\", 6);\n        wordToNumber.put(\"seven\", 7);\n        wordToNumber.put(\"eight\", 8);\n        wordToNumber.put(\"nine\", 9);\n\n        // Step 2: Split the input string by spaces to get an array of number words\n        String[] words = numbers.split(\" \");\n\n        // Step 3: Convert the array of number words into an array of numerical values using the map\n        Integer[] numValues = new Integer[words.length];\n        for (int i = 0; i < words.length; i++) {\n            numValues[i] = wordToNumber.get(words[i]);\n        }\n\n        // Step 4: Sort the array of numerical values\n        Arrays.sort(numValues);\n\n        // Step 5: Convert the sorted numerical values back into their corresponding number words using the map\n        String[] sortedWords = new String[numValues.length];\n        for (int i = 0; i < numValues.length; i++) {\n            for (Map.Entry<String, Integer> entry : wordToNumber.entrySet()) {\n                if (entry.getValue().equals(numValues[i])) {\n                    sortedWords[i] = entry.getKey();\n                    break;\n                }\n            }\n        }\n\n        // Step 6: Join the sorted number words into a single space-delimited string\n        return String.join(\" \", sortedWords);\n    }\n}\n"}
{"task_id": "Java/20", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        // Step 1: Input Validation\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"The list must contain at least two numbers.\");\n        }\n        \n        // Step 2: Sorting the List\n        Collections.sort(numbers);\n        \n        // Step 3: Finding the Closest Pair\n        List<Double> closestPair = new ArrayList<>();\n        double minDifference = Double.MAX_VALUE;\n        \n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double difference = numbers.get(i + 1) - numbers.get(i);\n            if (difference < minDifference) {\n                minDifference = difference;\n                closestPair = Arrays.asList(numbers.get(i), numbers.get(i + 1));\n            }\n        }\n        \n        // Step 4: Returning the Result\n        return closestPair;\n    }\n}\n"}
{"task_id": "Java/21", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        // Step 1: Input Validation\n        if (numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements.\");\n        }\n\n        // Step 2: Find Minimum and Maximum Values\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n\n        // Step 3: Compute Transformation Factors\n        double range = max - min;\n        if (range == 0) {\n            // Edge case: All numbers are the same\n            return numbers.stream().map(x -> 0.0).collect(Collectors.toList());\n        }\n\n        // Step 4: Apply Transformation\n        List<Double> rescaledList = numbers.stream()\n                                           .map(x -> (x - min) / range)\n                                           .collect(Collectors.toList());\n\n        // Step 5: Return the Result\n        return rescaledList;\n    }\n}\n"}
{"task_id": "Java/22", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filter_integers(List<Object> values) {\n        if (values == null || values.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        List<Integer> filteredList = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                filteredList.add((Integer) value);\n            }\n        }\n\n        return filteredList;\n    }\n}\n"}
{"task_id": "Java/23", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        if (string == null) {\n            return 0;\n        }\n        return string.length();\n    }\n}\n"}
{"task_id": "Java/24", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n     */\n    public int largest_divisor(int n) {\n        // Step 1: Input validation\n        if (n <= 1) {\n            return -1; // or throw an exception\n        }\n\n        // Step 2: Initialize the largest divisor\n        int largestDivisor = 1;\n\n        // Step 3: Loop to find the largest divisor\n        for (int i = n - 1; i > 1; i--) {\n            if (n % i == 0) {\n                largestDivisor = i;\n                break; // Since we are looking for the largest, we can break once found\n            }\n        }\n\n        // Step 4: Return the result\n        return largestDivisor;\n    }\n}\n"}
{"task_id": "Java/25", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        \n        if (n < 2) {\n            return factors;\n        }\n        \n        while (n % 2 == 0) {\n            factors.add(2);\n            n /= 2;\n        }\n        \n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        \n        if (n > 2) {\n            factors.add(n);\n        }\n        \n        return factors;\n    }\n}\n"}
{"task_id": "Java/26", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        // Step 1: Input Validation\n        if (numbers == null || numbers.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        // Step 2: Count Occurrences\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (Integer num : numbers) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n        }\n\n        // Step 3: Filter Elements\n        List<Integer> result = new ArrayList<>();\n        for (Integer num : numbers) {\n            if (countMap.get(num) == 1) {\n                result.add(num);\n            }\n        }\n\n        // Step 4: Return the Result\n        return result;\n    }\n}\n"}
{"task_id": "Java/27", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"Hello\")\n    \"hELLO\"\n     */\n    public String flip_case(String string) {\n        if (string == null) {\n            throw new IllegalArgumentException(\"Input string cannot be null\");\n        }\n\n        StringBuilder flippedString = new StringBuilder();\n\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                flippedString.append(Character.toLowerCase(c));\n            } else if (Character.isLowerCase(c)) {\n                flippedString.append(Character.toUpperCase(c));\n            } else {\n                flippedString.append(c);\n            }\n        }\n\n        return flippedString.toString();\n    }\n}\n"}
{"task_id": "Java/28", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        if (strings.isEmpty()) {\n            return \"\";\n        }\n        \n        StringBuilder result = new StringBuilder();\n        for (String str : strings) {\n            result.append(str);\n        }\n        \n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/29", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix(List.of(), \"a\")\n    []\n    >>> filter_by_prefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        if (strings == null || prefix == null) {\n            return Collections.emptyList();\n        }\n        \n        return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/30", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> get_positive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> get_positive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> get_positive(List<Integer> l) {\n        // Step 1: Input Validation\n        if (l == null || l.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        // Step 2: Filtering Positive Numbers\n        List<Integer> positiveNumbers = l.stream()\n                                         .filter(num -> num > 0)\n                                         .collect(Collectors.toList());\n\n        // Step 3: Returning the Result\n        return positiveNumbers;\n    }\n}\n"}
{"task_id": "Java/31", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    false\n    >>> is_prime(101)\n    true\n    >>> is_prime(11)\n    true\n    >>> is_prime(13441)\n    true\n    >>> is_prime(61)\n    true\n    >>> is_prime(4)\n    false\n    >>> is_prime(1)\n    false\n     */\n    public boolean is_prime(int n) {\n        // Step 1: Input Validation\n        if (n < 2) {\n            return false;\n        }\n        \n        // Step 2: Prime Number Check\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        \n        // Step 3: If no divisors found, return true\n        return true;\n    }\n}\n"}
{"task_id": "Java/32", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> find_zero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> find_zero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double find_zero(List<Double> xs) {\n        // Validate input\n        if (xs.size() % 2 != 0 || xs.get(xs.size() - 1) == 0) {\n            throw new IllegalArgumentException(\"Input list must have an even number of coefficients and the largest coefficient must be non-zero.\");\n        }\n        \n        // Use Newton-Raphson method to find the zero\n        double x0 = 0.0; // Initial guess\n        double tolerance = 1e-7;\n        int maxIterations = 1000;\n        \n        for (int i = 0; i < maxIterations; i++) {\n            double fx = poly(xs, x0);\n            double fpx = derivative(xs, x0);\n            \n            if (Math.abs(fx) < tolerance) {\n                return x0;\n            }\n            \n            x0 = x0 - fx / fpx;\n        }\n        \n        throw new RuntimeException(\"Failed to find a zero within the maximum number of iterations.\");\n    }\n    \n    private double derivative(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 1; i < xs.size(); i++) {\n            result += i * xs.get(i) * Math.pow(x, i - 1);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/33", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted in ascending order.\n    >>> sort_third(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sort_third(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sort_third(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        List<Integer> divisibleByThreeIndices = new ArrayList<>();\n        List<Integer> elementsToSort = new ArrayList<>();\n\n        // Step 2: Identify and Extract Elements\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                divisibleByThreeIndices.add(i);\n                elementsToSort.add(l.get(i));\n            }\n        }\n\n        // Step 3: Sort the Extracted Elements\n        Collections.sort(elementsToSort);\n\n        // Step 4: Reconstruct the List\n        List<Integer> result = new ArrayList<>(l);\n        for (int i = 0; i < divisibleByThreeIndices.size(); i++) {\n            int index = divisibleByThreeIndices.get(i);\n            result.set(index, elementsToSort.get(i));\n        }\n\n        // Step 5: Return the Result\n        return result;\n    }\n}\n"}
{"task_id": "Java/34", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> unique(List<Integer> l) {\n        // Step 1: Input validation\n        if (l == null || l.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        // Step 2: Remove duplicates by converting to a Set\n        Set<Integer> uniqueSet = new HashSet<>(l);\n\n        // Step 3: Convert back to a List and sort\n        List<Integer> sortedUniqueList = new ArrayList<>(uniqueSet);\n        Collections.sort(sortedUniqueList);\n\n        // Step 4: Return the sorted list\n        return sortedUniqueList;\n    }\n}\n"}
{"task_id": "Java/35", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> max_element(Arrays.asList(1, 2, 3))\n    3\n    >>> max_element(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int max_element(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be null or empty\");\n        }\n        \n        int max = l.get(0);\n        \n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        \n        return max;\n    }\n}\n"}
{"task_id": "Java/36", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n     */\n    public int fizz_buzz(int n) {\n        int totalCount = 0;\n        \n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String numStr = String.valueOf(i);\n                for (char c : numStr.toCharArray()) {\n                    if (c == '7') {\n                        totalCount++;\n                    }\n                }\n            }\n        }\n        \n        return totalCount;\n    }\n}\n"}
{"task_id": "Java/37", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sort_even(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sort_even(List<Integer> l) {\n        // Step 1: Identify even indices and extract values\n        List<Integer> evenValues = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 2) {\n            evenValues.add(l.get(i));\n        }\n        \n        // Step 2: Sort the extracted values\n        Collections.sort(evenValues);\n        \n        // Step 3: Construct the result list l'\n        List<Integer> lPrime = new ArrayList<>(l);\n        int evenIndex = 0;\n        for (int i = 0; i < l.size(); i += 2) {\n            lPrime.set(i, evenValues.get(evenIndex++));\n        }\n        \n        // Step 4: Return the result list\n        return lPrime;\n    }\n}\n"}
{"task_id": "Java/38", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decode_cyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n"}
{"task_id": "Java/39", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n     */\n    public int prime_fib(int n) {\n        List<Integer> fibonacciNumbers = new ArrayList<>();\n        List<Integer> primeFibonacciNumbers = new ArrayList<>();\n        \n        // Generate Fibonacci numbers\n        int a = 1, b = 1;\n        fibonacciNumbers.add(a);\n        fibonacciNumbers.add(b);\n        \n        while (primeFibonacciNumbers.size() < n) {\n            int nextFib = a + b;\n            fibonacciNumbers.add(nextFib);\n            a = b;\n            b = nextFib;\n            \n            if (isPrime(nextFib)) {\n                primeFibonacciNumbers.add(nextFib);\n            }\n        }\n        \n        return primeFibonacciNumbers.get(n - 1);\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        if (num == 2) return true;\n        if (num % 2 == 0) return false;\n        \n        for (int i = 3; i <= Math.sqrt(num); i += 2) {\n            if (num % i == 0) return false;\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/40", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triples_sum_to_zero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triples_sum_to_zero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triples_sum_to_zero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triples_sum_to_zero(Arrays.asList(1))\n    false\n     */\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        // Input Validation: Check if the list has at least three elements\n        if (l == null || l.size() < 3) {\n            return false;\n        }\n\n        // Sorting the List: Sort the list in ascending order\n        Collections.sort(l);\n\n        // Finding Triples: Use a two-pointer technique to find pairs that sum with the current element to zero\n        for (int i = 0; i < l.size() - 2; i++) {\n            // Skip duplicates for the first element\n            if (i > 0 && l.get(i).equals(l.get(i - 1))) {\n                continue;\n            }\n\n            int left = i + 1;\n            int right = l.size() - 1;\n\n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n\n        // If no valid triple is found, return false\n        return false;\n    }\n}\n"}
{"task_id": "Java/41", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int car_race_collision(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Number of cars cannot be negative\");\n        }\n        return n * n;\n    }\n}\n"}
{"task_id": "Java/42", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incr_list(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incr_list(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incr_list(List<Integer> l) {\n        if (l == null) {\n            return new ArrayList<>();\n        }\n        return l.stream()\n                .map(i -> i + 1)\n                .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/43", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairs_sum_to_zero(Arrays.asList(1))\n    false\n     */\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        if (l == null || l.size() < 2) {\n            return false;\n        }\n        \n        Set<Integer> seen = new HashSet<>();\n        \n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        \n        return false;\n    }\n}\n"}
{"task_id": "Java/44", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\n    >>> change_base(7, 2)\n    \"111\"\n     */\n    public String change_base(int x, int base) {\n        if (base < 2 || base > 9) {\n            throw new IllegalArgumentException(\"Base must be between 2 and 9 inclusive.\");\n        }\n        \n        if (x == 0) {\n            return \"0\";\n        }\n        \n        StringBuilder result = new StringBuilder();\n        int number = x;\n        \n        while (number > 0) {\n            int remainder = number % base;\n            result.append(remainder);\n            number /= base;\n        }\n        \n        return result.reverse().toString();\n    }\n}\n"}
{"task_id": "Java/45", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and height, return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n     */\n    public double triangle_area(double a, double h) {\n        // Input validation\n        if (a <= 0 || h <= 0) {\n            throw new IllegalArgumentException(\"Both base and height must be positive numbers.\");\n        }\n        \n        // Area calculation\n        double area = 0.5 * a * h;\n        \n        // Return the result\n        return area;\n    }\n}\n"}
{"task_id": "Java/46", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        // Initial values for the first four elements\n        int[] fib4Values = {0, 0, 2, 0};\n        \n        // Edge case: if n is less than 4, return the predefined value\n        if (n < 4) {\n            return fib4Values[n];\n        }\n        \n        // Iterate to compute the n-th Fib4 value\n        for (int i = 4; i <= n; i++) {\n            int nextValue = fib4Values[0] + fib4Values[1] + fib4Values[2] + fib4Values[3];\n            // Shift the values to the left\n            fib4Values[0] = fib4Values[1];\n            fib4Values[1] = fib4Values[2];\n            fib4Values[2] = fib4Values[3];\n            fib4Values[3] = nextValue;\n        }\n        \n        // Return the n-th Fib4 value\n        return fib4Values[3];\n    }\n}\n"}
{"task_id": "Java/47", "generation": "import java.util.*;\n\nclass Solution {\n    public double median(List<Integer> l) {\n        // Step 1: Input Validation\n        if (l.isEmpty()) {\n            return Double.NaN; // or throw an exception\n        }\n\n        // Step 2: Sorting the List\n        Collections.sort(l);\n\n        // Step 3: Calculating the Median\n        int size = l.size();\n        if (size % 2 != 0) {\n            // Odd number of elements\n            return l.get(size / 2);\n        } else {\n            // Even number of elements\n            int mid1 = l.get(size / 2 - 1);\n            int mid2 = l.get(size / 2);\n            return (mid1 + mid2) / 2.0;\n        }\n    }\n}\n"}
{"task_id": "Java/48", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n     */\n    public boolean is_palindrome(String text) {\n        // Step 1: Input Validation\n        if (text == null) {\n            return false;\n        }\n        \n        // Step 2: Initialize Pointers\n        int left = 0;\n        int right = text.length() - 1;\n        \n        // Step 3: Loop Through the String\n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        // Step 4: Handle Edge Cases (implicitly handled by the loop)\n        \n        // Step 5: Return the Final Result\n        return true;\n    }\n}\n"}
{"task_id": "Java/49", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        // Input validation\n        if (p <= 0) {\n            throw new IllegalArgumentException(\"p must be a positive integer\");\n        }\n        \n        // Special cases\n        if (n == 0) {\n            return 1;\n        }\n        if (p == 1) {\n            return 0;\n        }\n        \n        // Exponentiation by squaring\n        return expBySquaring(2, n, p);\n    }\n\n    private int expBySquaring(int base, int exp, int mod) {\n        if (exp == 0) {\n            return 1;\n        }\n        if (exp % 2 == 0) {\n            int half = expBySquaring(base, exp / 2, mod);\n            return (half * half) % mod;\n        } else {\n            int half = expBySquaring(base, (exp - 1) / 2, mod);\n            return (base * half * half) % mod;\n        }\n    }\n}\n"}
{"task_id": "Java/50", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decode_shift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26)));\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/51", "generation": "import java.util.*;\n\nclass Solution {\n    public String remove_vowels(String text) {\n        // Step 1: Define the vowel set\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        \n        // Step 2: Handle edge case for empty string\n        if (text.isEmpty()) {\n            return \"\";\n        }\n        \n        // Step 3: Initialize StringBuilder to build the result string\n        StringBuilder result = new StringBuilder();\n        \n        // Step 4: Iterate through the input string\n        for (char c : text.toCharArray()) {\n            // Step 5: Check if the character is not a vowel\n            if (!vowels.contains(c)) {\n                // Step 6: Append non-vowel characters to the result\n                result.append(c);\n            }\n        }\n        \n        // Step 7: Return the result string\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/52", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> below_threshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean below_threshold(List<Integer> l, int t) {\n        if (l == null || l.isEmpty()) {\n            return false; // or handle null/empty list as per team standards\n        }\n        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/53", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}\n"}
{"task_id": "Java/54", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same kind of characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean same_chars(String s0, String s1) {\n        // Step 1: Input Validation\n        if (s0 == null || s1 == null) {\n            return false;\n        }\n\n        // Step 2: Character Frequency Counting\n        Map<Character, Integer> freqMap0 = countFrequency(s0);\n        Map<Character, Integer> freqMap1 = countFrequency(s1);\n\n        // Step 3: Comparison of Character Frequencies\n        if (freqMap0.size() != freqMap1.size()) {\n            return false;\n        }\n\n        for (Character key : freqMap0.keySet()) {\n            if (!freqMap1.containsKey(key) || !freqMap0.get(key).equals(freqMap1.get(key))) {\n                return false;\n            }\n        }\n\n        // Step 4: Return Result\n        return true;\n    }\n\n    // Helper method to count character frequencies\n    private Map<Character, Integer> countFrequency(String s) {\n        Map<Character, Integer> freqMap = new HashMap<>();\n        for (char c : s.toCharArray()) {\n            freqMap.put(c, freqMap.getOrDefault(c, 0) + 1);\n        }\n        return freqMap;\n    }\n}\n"}
{"task_id": "Java/55", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        \n        int a = 0;\n        int b = 1;\n        int result = 0;\n        \n        for (int i = 2; i <= n; i++) {\n            result = a + b;\n            a = b;\n            b = result;\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/56", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n     */\n    public boolean correct_bracketing(String brackets) {\n        // Initialize a stack to keep track of unmatched opening brackets\n        Stack<Character> stack = new Stack<>();\n        \n        // Traverse the string character by character\n        for (char ch : brackets.toCharArray()) {\n            if (ch == '<') {\n                // If the character is an opening bracket, push it onto the stack\n                stack.push(ch);\n            } else if (ch == '>') {\n                // If the character is a closing bracket, check if there is a corresponding opening bracket\n                if (stack.isEmpty()) {\n                    // If the stack is empty, there is no corresponding opening bracket\n                    return false;\n                } else {\n                    // Pop the top element from the stack (matching the opening bracket)\n                    stack.pop();\n                }\n            }\n        }\n        \n        // After traversing the string, check if the stack is empty\n        // If the stack is empty, all brackets are matched; otherwise, there are unmatched opening brackets\n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/57", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l == null || l.size() <= 1) {\n            return true;\n        }\n\n        boolean isIncreasing = true;\n        boolean isDecreasing = true;\n\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1)) {\n                isIncreasing = false;\n            }\n            if (l.get(i) < l.get(i + 1)) {\n                isDecreasing = false;\n            }\n        }\n\n        return isIncreasing || isDecreasing;\n    }\n}\n"}
{"task_id": "Java/58", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        // Step 1: Input Validation\n        if (l1 == null || l2 == null) {\n            return new ArrayList<>();\n        }\n\n        // Step 2: Intersection of Lists\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> resultSet = new HashSet<>();\n        \n        for (Integer num : l2) {\n            if (set1.contains(num)) {\n                resultSet.add(num);\n            }\n        }\n\n        // Step 3: Conversion to List\n        List<Integer> resultList = new ArrayList<>(resultSet);\n\n        // Step 4: Sorting\n        Collections.sort(resultList);\n\n        // Step 5: Return the Result\n        return resultList;\n    }\n}\n"}
{"task_id": "Java/59", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n     */\n    public long largest_prime_factor(long n) {\n        long largestPrimeFactor = 1;\n        long factor = 2;\n\n        while (n > 1) {\n            if (n % factor == 0) {\n                largestPrimeFactor = factor;\n                n /= factor;\n            } else {\n                factor++;\n            }\n        }\n\n        return largestPrimeFactor;\n    }\n}\n"}
{"task_id": "Java/60", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n     */\n    public int sum_to_n(int n) {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"Input must be a positive integer.\");\n        }\n        return n * (n + 1) / 2;\n    }\n}\n"}
{"task_id": "Java/61", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n     */\n    public boolean correct_bracketing(String brackets) {\n        if (brackets == null) {\n            return false;\n        }\n        \n        Stack<Character> stack = new Stack<>();\n        \n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '(') {\n                stack.push(bracket);\n            } else if (bracket == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/62", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        // Input validation\n        if (xs == null || xs.isEmpty()) {\n            return Collections.emptyList();\n        }\n        if (xs.size() == 1) {\n            return Arrays.asList(0);\n        }\n\n        // Derivative calculation\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/63", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    // Memoization cache to store computed FibFib values\n    private Map<Integer, Integer> memo = new HashMap<>();\n\n    public int fibfib(int n) {\n        // Base cases\n        if (n == 0 || n == 1) return 0;\n        if (n == 2) return 1;\n\n        // Check if the value is already computed\n        if (memo.containsKey(n)) return memo.get(n);\n\n        // Recursive calculation with memoization\n        int result = fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n        memo.put(n, result);\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/64", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n     */\n    public int vowels_count(String s) {\n        int count = 0;\n        s = s.toLowerCase(); // Convert the string to lowercase for case insensitivity\n\n        // Iterate through the string\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n\n        // Check if the last character is 'y'\n        if (s.length() > 0 && s.charAt(s.length() - 1) == 'y') {\n            count++;\n        }\n\n        return count;\n    }\n}\n"}
{"task_id": "Java/65", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n     */\n    public String circular_shift(int x, int shift) {\n        // Convert the integer to a string\n        String strX = Integer.toString(x);\n        int numDigits = strX.length();\n        \n        // Check if shift is greater than the number of digits\n        if (shift > numDigits) {\n            // Reverse the string and return it\n            return new StringBuilder(strX).reverse().toString();\n        }\n        \n        // Calculate the effective shift value\n        int effectiveShift = shift % numDigits;\n        \n        // Split the string based on the effective shift value\n        String part1 = strX.substring(0, numDigits - effectiveShift);\n        String part2 = strX.substring(numDigits - effectiveShift);\n        \n        // Concatenate the split parts to form the final shifted string\n        return part2 + part1;\n    }\n}\n"}
{"task_id": "Java/66", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        \n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            if (Character.isUpperCase(ch)) {\n                sum += (int) ch;\n            }\n        }\n        \n        return sum;\n    }\n}\n"}
{"task_id": "Java/67", "generation": "import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for example:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\", 3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\n     */\n    public int fruit_distribution(String s, int n) {\n        // Step 1: Extract the number of apples and oranges from the string\n        int apples = extractNumber(s, \"apples\");\n        int oranges = extractNumber(s, \"oranges\");\n        \n        // Step 2: Calculate the number of mangoes\n        int mangoes = n - apples - oranges;\n        \n        // Step 3: Return the result\n        return mangoes;\n    }\n\n    // Helper method to extract the number of a specific fruit from the string\n    private int extractNumber(String s, String fruit) {\n        // Use regular expressions to find the number associated with the fruit\n        String regex = \"\\\\d+\\\\s+\" + fruit;\n        Pattern pattern = Pattern.compile(regex);\n        Matcher matcher = pattern.matcher(s);\n        \n        if (matcher.find()) {\n            String match = matcher.group();\n            return Integer.parseInt(match.split(\"\\\\s+\")[0]);\n        }\n        \n        return 0; // Default to 0 if the fruit is not found\n    }\n}\n"}
{"task_id": "Java/68", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smallest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        // Step 1: Input Validation\n        if (arr.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        // Step 2: Initialization\n        int smallestEven = Integer.MAX_VALUE;\n        int smallestIndex = -1;\n\n        // Step 3: Iteration and Checking\n        for (int i = 0; i < arr.size(); i++) {\n            int current = arr.get(i);\n            if (current % 2 == 0) { // Check if the current element is even\n                if (current < smallestEven) {\n                    smallestEven = current;\n                    smallestIndex = i;\n                } else if (current == smallestEven && i < smallestIndex) {\n                    smallestIndex = i;\n                }\n            }\n        }\n\n        // Step 4: Return the Result\n        if (smallestEven == Integer.MAX_VALUE) {\n            return new ArrayList<>();\n        } else {\n            return Arrays.asList(smallestEven, smallestIndex);\n        }\n    }\n}\n"}
{"task_id": "Java/69", "generation": "import java.util.*;\n\nclass Solution {\n    public int search(List<Integer> lst) {\n        // Step 1: Initialize and populate the frequency map\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n\n        // Step 2: Filter integers based on frequency\n        List<Integer> filteredList = new ArrayList<>();\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int num = entry.getKey();\n            int freq = entry.getValue();\n            if (freq >= num) {\n                filteredList.add(num);\n            }\n        }\n\n        // Step 3: Find the greatest integer from the filtered list\n        if (filteredList.isEmpty()) {\n            return -1;\n        } else {\n            return Collections.max(filteredList);\n        }\n    }\n}\n"}
{"task_id": "Java/70", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strange_sort_list(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strange_sort_list(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        // Step 1: Initialize the result list\n        List<Integer> result = new ArrayList<>();\n        \n        // Step 2: Sort the input list\n        Collections.sort(lst);\n        \n        // Step 3: Initialize pointers\n        int start = 0;\n        int end = lst.size() - 1;\n        \n        // Step 4: Alternating extraction loop\n        while (start <= end) {\n            if (start <= end) {\n                result.add(lst.get(start)); // Add minimum value\n                start++;\n            }\n            if (start <= end) {\n                result.add(lst.get(end)); // Add maximum value\n                end--;\n            }\n        }\n        \n        // Step 5: Return the result list\n        return result;\n    }\n}\n"}
{"task_id": "Java/71", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n     */\n    public double triangle_area(double a, double b, double c) {\n        // Step 1: Validate if the sides form a valid triangle\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n\n        // Step 2: Calculate the semi-perimeter\n        double s = (a + b + c) / 2;\n\n        // Step 3: Calculate the area using Heron's formula\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\n        // Step 4: Round the area to 2 decimal points\n        area = Math.round(area * 100.0) / 100.0;\n\n        // Step 5: Return the result\n        return area;\n    }\n}\n"}
{"task_id": "Java/72", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean will_it_fly(List<Integer> q, int w) {\n        if (q == null) {\n            return false;\n        }\n        \n        boolean isBalanced = isPalindromic(q);\n        int sum = calculateSum(q);\n        boolean isWithinWeightLimit = isSumWithinLimit(sum, w);\n        \n        return isBalanced && isWithinWeightLimit;\n    }\n\n    private boolean isPalindromic(List<Integer> q) {\n        int left = 0;\n        int right = q.size() - 1;\n        \n        while (left < right) {\n            if (!q.get(left).equals(q.get(right))) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n\n    private int calculateSum(List<Integer> q) {\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n        return sum;\n    }\n\n    private boolean isSumWithinLimit(int sum, int w) {\n        return sum <= w;\n    }\n}\n"}
{"task_id": "Java/73", "generation": "import java.util.*;\n\nclass Solution {\n    public int smallest_change(List<Integer> arr) {\n        // Edge case: If the array is empty or has one element, it is already palindromic\n        if (arr == null || arr.size() <= 1) {\n            return 0;\n        }\n\n        int left = 0;\n        int right = arr.size() - 1;\n        int mismatchCount = 0;\n\n        // Compare elements from both ends towards the center\n        while (left < right) {\n            if (!arr.get(left).equals(arr.get(right))) {\n                // Elements are not equal, increment mismatch counter\n                mismatchCount++;\n            }\n            // Move both pointers\n            left++;\n            right--;\n        }\n\n        // The number of mismatches is the minimum number of changes required\n        return mismatchCount;\n    }\n}\n"}
{"task_id": "Java/74", "generation": "import java.util.*;\n\nclass Solution {\n    // Helper function to calculate the total number of characters in a list of strings\n    private int calculateTotalChars(List<String> lst) {\n        int totalChars = 0;\n        for (String str : lst) {\n            totalChars += str.length();\n        }\n        return totalChars;\n    }\n\n    // Main function to compare two lists of strings and return the one with fewer total characters\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        int totalCharsLst1 = calculateTotalChars(lst1);\n        int totalCharsLst2 = calculateTotalChars(lst2);\n\n        if (totalCharsLst1 <= totalCharsLst2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n"}
{"task_id": "Java/75", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that the prime number is less then 100.\n    Example:\n    is_multiply_prime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean is_multiply_prime(int a) {\n        if (a < 6) {\n            return false;\n        }\n        \n        List<Integer> primes = generatePrimesLessThan100();\n        \n        for (int i = 0; i < primes.size(); i++) {\n            for (int j = i + 1; j < primes.size(); j++) {\n                for (int k = j + 1; k < primes.size(); k++) {\n                    if (primes.get(i) * primes.get(j) * primes.get(k) == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        \n        return false;\n    }\n\n    private List<Integer> generatePrimesLessThan100() {\n        boolean[] isPrime = new boolean[100];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = isPrime[1] = false;\n        \n        for (int i = 2; i * i < 100; i++) {\n            if (isPrime[i]) {\n                for (int j = i * i; j < 100; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n        \n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < 100; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n            }\n        }\n        \n        return primes;\n    }\n}\n"}
{"task_id": "Java/76", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n     */\n    public boolean is_simple_power(int x, int n) {\n        // Input validation\n        if (x <= 0 || n <= 0) {\n            return false;\n        }\n        \n        // Special case handling\n        if (n == 1) {\n            return x == 1;\n        }\n        if (x == 1) {\n            return n > 1;\n        }\n        \n        // Power calculation loop\n        int power = 1;\n        while (power < x) {\n            power *= n;\n            if (power == x) {\n                return true;\n            }\n        }\n        \n        // Return result\n        return false;\n    }\n}\n"}
{"task_id": "Java/77", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        double cubeRoot = Math.cbrt(a);\n        int intCubeRoot = (int) cubeRoot;\n        return intCubeRoot * intCubeRoot * intCubeRoot == a;\n    }\n}\n"}
{"task_id": "Java/78", "generation": "import java.util.*;\n\nclass Solution {\n    public int hex_key(String num) {\n        // Step 1: Define the set of prime hexadecimal digits\n        Set<Character> primeHexDigits = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        // Step 2: Initialize the counter\n        int count = 0;\n        \n        // Step 3: Iterate through the input string\n        for (char ch : num.toCharArray()) {\n            if (primeHexDigits.contains(ch)) {\n                count++;\n            }\n        }\n        \n        // Step 4: Return the count\n        return count;\n    }\n}\n"}
{"task_id": "Java/79", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   // returns \"db1111db\"\n    decimal_to_binary(32)   // returns \"db100000db\"\n     */\n    public String decimal_to_binary(int decimal) {\n        // Step 1: Convert decimal to binary\n        String binaryString = Integer.toBinaryString(decimal);\n        \n        // Step 2: Format the binary string\n        String formattedBinaryString = \"db\" + binaryString + \"db\";\n        \n        // Step 3: Return the formatted binary string\n        return formattedBinaryString;\n    }\n}\n"}
{"task_id": "Java/80", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => false\n    is_happy(aa) => false\n    is_happy(abcd) => true\n    is_happy(aabb) => false\n    is_happy(adb) => true\n    is_happy(xyy) => false\n     */\n    public boolean is_happy(String s) {\n        // Input validation\n        if (s == null || s.length() < 3) {\n            return false;\n        }\n\n        // Iterate through the string\n        for (int i = 0; i < s.length() - 2; i++) {\n            // Extract the substring of length 3\n            String substring = s.substring(i, i + 3);\n            \n            // Check if all characters in the substring are distinct\n            if (!areCharactersDistinct(substring)) {\n                return false;\n            }\n        }\n\n        // If all sets of 3 characters are distinct, return true\n        return true;\n    }\n\n    // Helper method to check if all characters in a string are distinct\n    private boolean areCharactersDistinct(String s) {\n        Set<Character> charSet = new HashSet<>();\n        for (char c : s.toCharArray()) {\n            if (!charSet.add(c)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/81", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        // Step 1: Define the grading scale\n        Map<Double, String> gradeMap = new HashMap<>();\n        gradeMap.put(4.0, \"A+\");\n        gradeMap.put(3.7, \"A\");\n        gradeMap.put(3.3, \"A-\");\n        gradeMap.put(3.0, \"B+\");\n        gradeMap.put(2.7, \"B\");\n        gradeMap.put(2.3, \"B-\");\n        gradeMap.put(2.0, \"C+\");\n        gradeMap.put(1.7, \"C\");\n        gradeMap.put(1.3, \"C-\");\n        gradeMap.put(1.0, \"D+\");\n        gradeMap.put(0.7, \"D\");\n        gradeMap.put(0.0, \"D-\");\n\n        // Step 2: Initialize the result list\n        List<String> letterGrades = new ArrayList<>();\n\n        // Step 3: Convert each GPA to a letter grade\n        for (Double gpa : grades) {\n            if (gpa == null || gpa < 0.0 || gpa > 4.0) {\n                throw new IllegalArgumentException(\"Invalid GPA value: \" + gpa);\n            }\n\n            // Find the corresponding letter grade\n            String letterGrade = \"E\"; // Default to \"E\" if no match is found\n            for (Map.Entry<Double, String> entry : gradeMap.entrySet()) {\n                if (gpa >= entry.getKey()) {\n                    letterGrade = entry.getValue();\n                    break;\n                }\n            }\n\n            // Add the letter grade to the result list\n            letterGrades.add(letterGrade);\n        }\n\n        // Step 4: Return the result list\n        return letterGrades;\n    }\n}\n"}
{"task_id": "Java/82", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    prime_length(\"Hello\") == true\n    prime_length(\"abcdcba\") == true\n    prime_length(\"kittens\") == true\n    prime_length(\"orange\") == false\n     */\n    public boolean prime_length(String string) {\n        int length = string.length();\n        return isPrime(length);\n    }\n\n    private boolean isPrime(int number) {\n        if (number < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(number); i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/83", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int starts_one_ends(int n) {\n        // Step 1: Input Validation\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\");\n        }\n\n        // Step 2: Determine the range of n-digit numbers\n        int start = (int) Math.pow(10, n - 1);\n        int end = (int) Math.pow(10, n) - 1;\n\n        // Step 3: Count numbers starting with '1'\n        int countStartsWithOne = countNumbersStartingWithOne(n);\n\n        // Step 4: Count numbers ending with '1'\n        int countEndsWithOne = countNumbersEndingWithOne(n);\n\n        // Step 5: Count numbers starting and ending with '1'\n        int countStartsAndEndsWithOne = countNumbersStartingAndEndingWithOne(n);\n\n        // Step 6: Calculate the final count\n        int finalCount = countStartsWithOne + countEndsWithOne - countStartsAndEndsWithOne;\n\n        // Step 7: Return the result\n        return finalCount;\n    }\n\n    private int countNumbersStartingWithOne(int n) {\n        // Numbers starting with '1' are in the range 10^(n-1) to 10^n - 1\n        // For example, for n = 3, the range is 100 to 999\n        // The count of numbers starting with '1' is 10^(n-1)\n        return (int) Math.pow(10, n - 1);\n    }\n\n    private int countNumbersEndingWithOne(int n) {\n        // Numbers ending with '1' are in the range 10^(n-1) to 10^n - 1\n        // For example, for n = 3, the range is 100 to 999\n        // The count of numbers ending with '1' is 10^(n-1)\n        return (int) Math.pow(10, n - 1);\n    }\n\n    private int countNumbersStartingAndEndingWithOne(int n) {\n        // Numbers starting and ending with '1' are in the range 10^(n-1) to 10^n - 1\n        // For example, for n = 3, the range is 100 to 999\n        // The count of numbers starting and ending with '1' is 10^(n-2)\n        return (int) Math.pow(10, n - 2);\n    }\n}\n"}
{"task_id": "Java/84", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return in binary the total sum of its digits.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        // Step 1: Input Validation\n        if (N < 0 || N > 10000) {\n            throw new IllegalArgumentException(\"Input N is out of the valid range.\");\n        }\n\n        // Step 2: Sum of Digits Calculation\n        int sum = 0;\n        while (N > 0) {\n            sum += N % 10;\n            N /= 10;\n        }\n\n        // Step 3: Binary Conversion\n        String binarySum = Integer.toBinaryString(sum);\n\n        // Step 4: Output the Result\n        return binarySum;\n    }\n}\n"}
{"task_id": "Java/85", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        // Input validation\n        if (lst == null || lst.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be empty\");\n        }\n        \n        int sum = 0;\n        \n        // Iterate through the list\n        for (int i = 0; i < lst.size(); i++) {\n            int element = lst.get(i);\n            \n            // Check if the index is odd and the element is even\n            if (i % 2 != 0 && element % 2 == 0) {\n                sum += element;\n            }\n        }\n        \n        // Return the result\n        return sum;\n    }\n}\n"}
{"task_id": "Java/86", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle(\"Hi\") returns \"Hi\"\n    anti_shuffle(\"hello\") returns \"ehllo\"\n    anti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String anti_shuffle(String s) {\n        // Step 1.1: Split the input string into words using spaces as delimiters\n        String[] words = s.split(\" \");\n        \n        // Step 2.1 to 2.4: Sort the characters of each word in ascending order\n        for (int i = 0; i < words.length; i++) {\n            char[] chars = words[i].toCharArray();\n            Arrays.sort(chars);\n            words[i] = new String(chars);\n        }\n        \n        // Step 3.1: Join the list of sorted words back into a single string, using spaces to separate the words\n        return String.join(\" \", words);\n    }\n}\n"}
{"task_id": "Java/87", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        // Step 1: Initialize an empty list for coordinates\n        List<List<Integer>> coordinates = new ArrayList<>();\n        \n        // Step 2: Iterate through the nested list\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    coordinates.add(Arrays.asList(i, j));\n                }\n            }\n        }\n        \n        // Step 3: Sort the coordinates\n        Collections.sort(coordinates, (a, b) -> {\n            if (a.get(0).equals(b.get(0))) {\n                return b.get(1).compareTo(a.get(1));\n            }\n            return a.get(0).compareTo(b.get(0));\n        });\n        \n        // Step 4: Return the sorted list\n        return coordinates;\n    }\n}\n"}
{"task_id": "Java/88", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> array) {\n        // Step 1: Handle edge cases\n        if (array.isEmpty()) return new ArrayList<>();\n        if (array.size() == 1) return new ArrayList<>(array);\n\n        // Step 2: Calculate the sum of the first and last elements\n        int firstElement = array.get(0);\n        int lastElement = array.get(array.size() - 1);\n        int sum = firstElement + lastElement;\n\n        // Step 3: Determine the sorting order\n        boolean isAscending = (sum % 2 != 0); // true if sum is odd, false if even\n\n        // Step 4: Sort the list\n        List<Integer> sortedArray = new ArrayList<>(array);\n        if (isAscending) {\n            Collections.sort(sortedArray);\n        } else {\n            Collections.sort(sortedArray, Collections.reverseOrder());\n        }\n\n        // Step 5: Return the sorted list\n        return sortedArray;\n    }\n}\n"}
{"task_id": "Java/89", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        StringBuilder encrypted = new StringBuilder();\n        \n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                char base = Character.isLowerCase(c) ? 'a' : 'A';\n                char shifted = (char) (base + (c - base + 4) % 26);\n                encrypted.append(shifted);\n            } else {\n                encrypted.append(c);\n            }\n        }\n        \n        return encrypted.toString();\n    }\n}\n"}
{"task_id": "Java/90", "generation": "import java.util.*;\n\nclass Solution {\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        // Step 1: Input Validation\n        if (lst == null || lst.isEmpty() || lst.size() < 2) {\n            return Optional.empty();\n        }\n\n        // Step 2: Finding the Smallest and Second Smallest Elements\n        Integer smallest = null;\n        Integer secondSmallest = null;\n\n        // Find the smallest element\n        for (Integer num : lst) {\n            if (smallest == null || num < smallest) {\n                smallest = num;\n            }\n        }\n\n        // Find the second smallest element\n        for (Integer num : lst) {\n            if (!num.equals(smallest)) {\n                if (secondSmallest == null || num < secondSmallest) {\n                    secondSmallest = num;\n                }\n            }\n        }\n\n        // Step 3: Returning the Result\n        return secondSmallest != null ? Optional.of(secondSmallest) : Optional.empty();\n    }\n}\n"}
{"task_id": "Java/91", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int is_bored(String S) {\n        // Step 1.1: Split the input string into sentences based on delimiters '.', '?', and '!'\n        String[] sentences = S.split(\"[.?!]\");\n        \n        // Step 3.1: Initialize a counter to zero\n        int boredomCount = 0;\n        \n        // Step 2.1: For each sentence, check if the first word is \"I\"\n        for (String sentence : sentences) {\n            // Step 1.2: Ensure the sentence is trimmed of any leading or trailing whitespace\n            sentence = sentence.trim();\n            \n            // Step 2.2: If the first word is \"I\", classify the sentence as a \"boredom\"\n            if (sentence.startsWith(\"I\")) {\n                // Step 3.2: Increment the counter each time a sentence is classified as a \"boredom\"\n                boredomCount++;\n            }\n        }\n        \n        // Step 4.1: Return the value of the counter as the result\n        return boredomCount;\n    }\n}\n"}
{"task_id": "Java/92", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) -> true\n\n    any_int(3, 2, 2) -> false\n\n    any_int(3, -2, 1) -> true\n\n    any_int(3.6, -2.2, 2) -> false\n     */\n    public boolean any_int(Object x, Object y, Object z) {\n        // Step 1: Input Validation\n        if (!(x instanceof Integer) || !(y instanceof Integer) || !(z instanceof Integer)) {\n            return false;\n        }\n\n        // Step 2: Convert to integers\n        int a = (Integer) x;\n        int b = (Integer) y;\n        int c = (Integer) z;\n\n        // Step 3: Sort the numbers\n        int[] numbers = {a, b, c};\n        Arrays.sort(numbers);\n\n        // Step 4: Calculate the sum of the smallest and middle numbers\n        int sum = numbers[0] + numbers[1];\n\n        // Step 5: Compare the sum with the largest number\n        if (sum == numbers[2]) {\n            return true;\n        }\n\n        // Step 6: Return false if the condition is not met\n        return false;\n    }\n}\n"}
{"task_id": "Java/93", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        StringBuilder encodedMessage = new StringBuilder();\n        \n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                // Swap case\n                if (Character.isLowerCase(c)) {\n                    c = Character.toUpperCase(c);\n                } else {\n                    c = Character.toLowerCase(c);\n                }\n                \n                // Replace vowels\n                if (\"aeiouAEIOU\".indexOf(c) != -1) {\n                    char base = Character.isLowerCase(c) ? 'a' : 'A';\n                    c = (char) (base + (c - base + 2) % 26);\n                }\n            }\n            \n            encodedMessage.append(c);\n        }\n        \n        return encodedMessage.toString();\n    }\n}\n"}
{"task_id": "Java/94", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int largestPrime = findLargestPrime(lst);\n        if (largestPrime == -1) {\n            return 0;\n        }\n        return sumOfDigits(largestPrime);\n    }\n\n    private boolean isPrime(int num) {\n        if (num < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private int findLargestPrime(List<Integer> lst) {\n        int largestPrime = -1;\n        for (int num : lst) {\n            if (isPrime(num) && num > largestPrime) {\n                largestPrime = num;\n            }\n        }\n        return largestPrime;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/95", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings and all keys are in lower case or  in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        boolean allLowerCase = true;\n        boolean allUpperCase = true;\n\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n\n            String strKey = (String) key;\n            if (!strKey.equals(strKey.toLowerCase())) {\n                allLowerCase = false;\n            }\n            if (!strKey.equals(strKey.toUpperCase())) {\n                allUpperCase = false;\n            }\n\n            if (!allLowerCase && !allUpperCase) {\n                return false;\n            }\n        }\n\n        return allLowerCase || allUpperCase;\n    }\n}\n"}
{"task_id": "Java/96", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> count_up_to(int n) {\n        if (n < 2) {\n            return new ArrayList<>();\n        }\n        \n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        \n        return primes;\n    }\n    \n    private boolean isPrime(int num) {\n        if (num < 2) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/97", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        // Step 1: Extract unit digits\n        int unitDigitA = a % 10;\n        int unitDigitB = b % 10;\n        \n        // Step 2: Compute the product of unit digits\n        int result = unitDigitA * unitDigitB;\n        \n        // Step 3: Return the result\n        return result;\n    }\n}\n"}
{"task_id": "Java/98", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper(\"aBCdEf\") returns 1\n    count_upper(\"abcdefg\") returns 0\n    count_upper(\"dBBE\") returns 0\n     */    \n    public int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char ch = s.charAt(i);\n            if (ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/99", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int closest_integer(String value) {\n        try {\n            // Step 2: Convert the input string to a double\n            double doubleValue = Double.parseDouble(value);\n            \n            // Step 3: Determine the closest integer\n            long roundedValue = Math.round(doubleValue);\n            \n            // Step 4: Handle rounding away from zero for halfway cases\n            if (Math.abs(doubleValue - roundedValue) == 0.5) {\n                if (doubleValue > 0) {\n                    roundedValue = Math.round(doubleValue + 0.5);\n                } else {\n                    roundedValue = Math.round(doubleValue - 0.5);\n                }\n            }\n            \n            // Step 5: Return the result\n            return (int) roundedValue;\n        } catch (NumberFormatException e) {\n            // Step 1: Handle invalid input\n            return 0; // or throw an exception\n        }\n    }\n}\n"}
{"task_id": "Java/100", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        int currentStones = n;\n        \n        for (int i = 0; i < n; i++) {\n            pile.add(currentStones);\n            if (currentStones % 2 == 0) {\n                currentStones += 2; // Next even number\n            } else {\n                currentStones += 2; // Next odd number\n            }\n        }\n        \n        return pile;\n    }\n}\n"}
{"task_id": "Java/101", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> words_string(String s) {\n        if (s == null || s.isEmpty()) {\n            return Collections.emptyList();\n        }\n        \n        String[] words = s.split(\"[,\\\\s]+\");\n        List<String> result = new ArrayList<>();\n        \n        for (String word : words) {\n            String trimmedWord = word.trim();\n            if (!trimmedWord.isEmpty()) {\n                result.add(trimmedWord);\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/102", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n     */\n    public int choose_num(int x, int y) {\n        // Input validation\n        if (x <= 0 || y <= 0 || x > y) {\n            return -1;\n        }\n\n        int largestEven = -1;\n\n        // Iterate through the range [x, y]\n        for (int i = x; i <= y; i++) {\n            // Check if the number is even\n            if (i % 2 == 0) {\n                // Update largestEven if the current even number is larger\n                if (largestEven == -1 || i > largestEven) {\n                    largestEven = i;\n                }\n            }\n        }\n\n        // Return the result\n        return largestEven;\n    }\n}\n"}
{"task_id": "Java/103", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"1111\"\n    rounded_avg(20, 33) => \"11011\"\n     */\n    public Object rounded_avg(int n, int m) {\n        // Step 1.1: Check if n is greater than m\n        if (n > m) {\n            // Step 1.2: If n > m, return -1\n            return -1;\n        }\n\n        // Step 2.1: Calculate the sum of integers from n to m (inclusive)\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n\n        // Step 2.2: Calculate the count of integers from n to m (inclusive)\n        int count = m - n + 1;\n\n        // Step 2.3: Compute the average by dividing the sum by the count\n        double average = (double) sum / count;\n\n        // Step 3.1: Round the computed average to the nearest integer using Math.round()\n        int roundedAverage = (int) Math.round(average);\n\n        // Step 4.1: Convert the rounded integer to its binary representation using Integer.toBinaryString()\n        String binaryString = Integer.toBinaryString(roundedAverage);\n\n        // Step 5.1: Return the binary string\n        return binaryString;\n    }\n}\n"}
{"task_id": "Java/104", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> unique_digits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> unique_digits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int number : x) {\n            if (!hasEvenDigit(number)) {\n                result.add(number);\n            }\n        }\n        \n        Collections.sort(result);\n        return result;\n    }\n    \n    private boolean hasEvenDigit(int number) {\n        while (number > 0) {\n            int digit = number % 10;\n            if (digit % 2 == 0) {\n                return true;\n            }\n            number /= 10;\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/105", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> by_length(List<Integer> arr) {\n        // Step 1: Filter and validate input\n        List<Integer> validNumbers = filterValidNumbers(arr);\n        \n        // Step 2: Sort the validated array\n        sortArray(validNumbers);\n        \n        // Step 3: Reverse the sorted array\n        reverseArray(validNumbers);\n        \n        // Step 4: Map digits to corresponding names\n        List<String> result = mapDigitsToNames(validNumbers);\n        \n        // Step 5: Return the result\n        return result;\n    }\n    \n    private List<Integer> filterValidNumbers(List<Integer> arr) {\n        List<Integer> validNumbers = new ArrayList<>();\n        for (Integer num : arr) {\n            if (num >= 1 && num <= 9) {\n                validNumbers.add(num);\n            }\n        }\n        return validNumbers;\n    }\n    \n    private void sortArray(List<Integer> arr) {\n        Collections.sort(arr);\n    }\n    \n    private void reverseArray(List<Integer> arr) {\n        Collections.reverse(arr);\n    }\n    \n    private List<String> mapDigitsToNames(List<Integer> arr) {\n        Map<Integer, String> digitToName = new HashMap<>();\n        digitToName.put(1, \"One\");\n        digitToName.put(2, \"Two\");\n        digitToName.put(3, \"Three\");\n        digitToName.put(4, \"Four\");\n        digitToName.put(5, \"Five\");\n        digitToName.put(6, \"Six\");\n        digitToName.put(7, \"Seven\");\n        digitToName.put(8, \"Eight\");\n        digitToName.put(9, \"Nine\");\n        \n        List<String> result = new ArrayList<>();\n        for (Integer num : arr) {\n            result.add(digitToName.get(num));\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/106", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sum(i));\n            }\n        }\n        \n        return result;\n    }\n    \n    private int factorial(int i) {\n        int fact = 1;\n        for (int j = 1; j <= i; j++) {\n            fact *= j;\n        }\n        return fact;\n    }\n    \n    private int sum(int i) {\n        int sum = 0;\n        for (int j = 1; j <= i; j++) {\n            sum += j;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/107", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> even_odd_palindrome(int n) {\n        // Initialize counters\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        // Loop through each number from 1 to n\n        for (int i = 1; i <= n; i++) {\n            // Check if the number is a palindrome\n            if (isPalindrome(i)) {\n                // Check if the palindrome is even or odd\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n        \n        // Return the result as a list\n        return Arrays.asList(evenCount, oddCount);\n    }\n    \n    // Helper method to check if a number is a palindrome\n    private boolean isPalindrome(int num) {\n        String str = Integer.toString(num);\n        String reverseStr = new StringBuilder(str).reverse().toString();\n        return str.equals(reverseStr);\n    }\n}\n"}
{"task_id": "Java/108", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums(Arrays.asList()) == 0\n    >>> count_nums(Arrays.asList(-1, 11, -11)) == 1\n    >>> count_nums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int count_nums(List<Integer> arr) {\n        int count = 0;\n        for (int num : arr) {\n            if (sumOfDigits(num) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        num = Math.abs(num);\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        if (num < 0) {\n            sum = -sum;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/109", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    move_one_ball(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean move_one_ball(List<Integer> arr) {\n        // Step 1: Input Validation\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        // Step 2: Create a Sorted Version of the Array\n        List<Integer> sortedArr = new ArrayList<>(arr);\n        Collections.sort(sortedArr);\n\n        // Step 3: Check for Right Shift Possibility\n        int n = arr.size();\n        for (int i = 0; i < n; i++) {\n            // Rotate the array to the right by i positions\n            List<Integer> rotatedArr = new ArrayList<>(arr.subList(n - i, n));\n            rotatedArr.addAll(arr.subList(0, n - i));\n\n            // Compare the rotated array with the sorted array\n            if (rotatedArr.equals(sortedArr)) {\n                return true;\n            }\n        }\n\n        // Step 4: Return the Result\n        return false;\n    }\n}\n"}
{"task_id": "Java/110", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Step 2: Count Odd Numbers in lst1\n        int oddCountLst1 = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCountLst1++;\n            }\n        }\n\n        // Step 3: Count Even Numbers in lst2\n        int evenCountLst2 = 0;\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCountLst2++;\n            }\n        }\n\n        // Step 4: Feasibility Check\n        if (evenCountLst2 >= oddCountLst1) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}\n"}
{"task_id": "Java/111", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        // Step 1.1: Split the input string using the space character (\" \") as the delimiter.\n        String[] letters = test.split(\" \");\n\n        // Step 2.1: Initialize a HashMap<String, Integer> to store the frequency of each letter.\n        Map<String, Integer> frequencyMap = new HashMap<>();\n\n        // Step 2.2: Iterate through the array of letters.\n        for (String letter : letters) {\n            // Step 2.3: For each letter, update its count in the HashMap.\n            frequencyMap.put(letter, frequencyMap.getOrDefault(letter, 0) + 1);\n        }\n\n        // Step 3.1: Initialize a variable to keep track of the maximum frequency (maxFrequency).\n        int maxFrequency = 0;\n\n        // Step 3.2: Iterate through the entries in the HashMap.\n        for (int frequency : frequencyMap.values()) {\n            // Step 3.3: Update maxFrequency if the current letter's frequency is higher.\n            if (frequency > maxFrequency) {\n                maxFrequency = frequency;\n            }\n        }\n\n        // Step 4.1: Initialize a HashMap<String, Integer> to store the result.\n        Map<String, Integer> resultMap = new HashMap<>();\n\n        // Step 4.2: Iterate through the entries in the HashMap.\n        for (Map.Entry<String, Integer> entry : frequencyMap.entrySet()) {\n            // Step 4.3: If a letter's frequency matches maxFrequency, add it to the result map.\n            if (entry.getValue() == maxFrequency) {\n                resultMap.put(entry.getKey(), entry.getValue());\n            }\n        }\n\n        // Step 5.1: Return the result map containing the letters with the maximum frequency and their counts.\n        return resultMap;\n    }\n}\n"}
{"task_id": "Java/112", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Object> reverse_delete(String s, String c) {\n        // Step 1: Remove characters from s that are in c\n        Set<Character> charsToRemove = new HashSet<>();\n        for (char ch : c.toCharArray()) {\n            charsToRemove.add(ch);\n        }\n        \n        StringBuilder modifiedString = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!charsToRemove.contains(ch)) {\n                modifiedString.append(ch);\n            }\n        }\n        \n        // Step 2: Check if the modified string is a palindrome\n        String resultString = modifiedString.toString();\n        boolean isPalindrome = resultString.equals(new StringBuilder(resultString).reverse().toString());\n        \n        // Step 3: Return the result as a tuple\n        List<Object> result = new ArrayList<>();\n        result.add(resultString);\n        result.add(isPalindrome);\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/113", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> odd_count(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        String template = \"the number of odd elements %dn the str%dng %d of the %dnput.\";\n        \n        for (String str : lst) {\n            int oddCount = 0;\n            for (char ch : str.toCharArray()) {\n                if (isOddDigit(ch)) {\n                    oddCount++;\n                }\n            }\n            String formattedString = String.format(template, oddCount, oddCount, oddCount, oddCount);\n            result.add(formattedString);\n        }\n        \n        return result;\n    }\n    \n    private boolean isOddDigit(char ch) {\n        return ch == '1' || ch == '3' || ch == '5' || ch == '7' || ch == '9';\n    }\n}\n"}
{"task_id": "Java/114", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        // Step 1: Input Validation\n        if (nums == null || nums.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list cannot be empty\");\n        }\n\n        // Step 2: Initialize minSum to a large value\n        int minSum = Integer.MAX_VALUE;\n\n        // Step 3: Sub-array Identification and Sum Comparison\n        for (int i = 0; i < nums.size(); i++) {\n            int currentSum = 0;\n            for (int j = i; j < nums.size(); j++) {\n                // Calculate the sum of the sub-array from index i to j\n                currentSum += nums.get(j);\n                // Update minSum if currentSum is smaller\n                if (currentSum < minSum) {\n                    minSum = currentSum;\n                }\n            }\n        }\n\n        // Step 4: Return the result\n        return minSum;\n    }\n}\n"}
{"task_id": "Java/115", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity. Can't use buckets from other wells to extract water from one well.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        // Step 1: Input Validation and Parsing\n        if (grid == null || grid.isEmpty()) return 0;\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        if (capacity < 1 || capacity > 10) throw new IllegalArgumentException(\"Invalid bucket capacity\");\n\n        // Step 2: Water Extraction Calculation\n        int totalExtractions = 0;\n        for (List<Integer> row : grid) {\n            int waterUnits = Collections.frequency(row, 1);\n            int extractions = (waterUnits + capacity - 1) / capacity; // Ceiling of division\n            totalExtractions += extractions;\n        }\n\n        // Step 5: Output the Result\n        return totalExtractions;\n    }\n}\n"}
{"task_id": "Java/116", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sort_array(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 4, 3, 5))\n    >>> sort_array(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-4, -2, -6, -5, -3))\n    >>> sort_array(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 4, 3))\n     */\n    public List<Integer> sort_array(List<Integer> arr) {\n        Collections.sort(arr, new BinaryOnesComparator());\n        return arr;\n    }\n\n    private static class BinaryOnesComparator implements Comparator<Integer> {\n        @Override\n        public int compare(Integer a, Integer b) {\n            int onesA = countOnesInBinary(a);\n            int onesB = countOnesInBinary(b);\n\n            if (onesA != onesB) {\n                return Integer.compare(onesA, onesB);\n            } else {\n                return Integer.compare(a, b);\n            }\n        }\n\n        private int countOnesInBinary(int num) {\n            return Integer.bitCount(num);\n        }\n    }\n}\n"}
{"task_id": "Java/117", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> select_words(String s, int n) {\n        if (s.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        String[] words = s.split(\" \");\n        List<String> result = new ArrayList<>();\n\n        for (String word : words) {\n            if (countConsonants(word) == n) {\n                result.add(word);\n            }\n        }\n\n        return result;\n    }\n\n    private int countConsonants(String word) {\n        int count = 0;\n        for (char c : word.toCharArray()) {\n            if (Character.isLetter(c) && \"aeiouAEIOU\".indexOf(c) == -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/118", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n     */\n    public String get_closest_vowel(String word) {\n        // Define vowels\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        \n        // Initialize variables to track consonants\n        Character lastConsonant1 = null;\n        Character lastConsonant2 = null;\n        \n        // Traverse the word from right to left\n        for (int i = word.length() - 1; i >= 0; i--) {\n            char currentChar = word.charAt(i);\n            \n            if (!vowels.contains(currentChar)) { // Consonant\n                lastConsonant2 = lastConsonant1;\n                lastConsonant1 = currentChar;\n            } else if (vowels.contains(currentChar) && lastConsonant1 != null && lastConsonant2 != null) { // Vowel between consonants\n                return String.valueOf(currentChar);\n            }\n        }\n        \n        // If no valid vowel found, return empty string\n        return \"\";\n    }\n}\n"}
{"task_id": "Java/119", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    match_parens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    match_parens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String match_parens(List<String> lst) {\n        // Step 1: Count parentheses in each string\n        int open1 = countOpenParentheses(lst.get(0));\n        int close1 = countCloseParentheses(lst.get(0));\n        int open2 = countOpenParentheses(lst.get(1));\n        int close2 = countCloseParentheses(lst.get(1));\n\n        // Step 2: Check if total open and close parentheses are equal\n        if (open1 + open2 != close1 + close2) {\n            return \"No\";\n        }\n\n        // Step 3: Concatenate and check balance\n        String concat1 = lst.get(0) + lst.get(1);\n        String concat2 = lst.get(1) + lst.get(0);\n\n        if (isBalanced(concat1) || isBalanced(concat2)) {\n            return \"Yes\";\n        }\n\n        return \"No\";\n    }\n\n    private int countOpenParentheses(String s) {\n        int count = 0;\n        for (char c : s.toCharArray()) {\n            if (c == '(') {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private int countCloseParentheses(String s) {\n        int count = 0;\n        for (char c : s.toCharArray()) {\n            if (c == ')') {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isBalanced(String s) {\n        int balance = 0;\n        for (char c : s.toCharArray()) {\n            if (c == '(') {\n                balance++;\n            } else if (c == ')') {\n                balance--;\n            }\n            if (balance < 0) {\n                return false;\n            }\n        }\n        return balance == 0;\n    }\n}\n"}
{"task_id": "Java/120", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr, in ascending order.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Input validation\n        if (arr == null || arr.size() < 1 || arr.size() > 1000 || k < 0 || k > arr.size()) {\n            throw new IllegalArgumentException(\"Invalid input\");\n        }\n\n        // Use a min-heap to find the top k elements\n        PriorityQueue<Integer> minHeap = new PriorityQueue<>();\n        for (int num : arr) {\n            minHeap.offer(num);\n            if (minHeap.size() > k) {\n                minHeap.poll();\n            }\n        }\n\n        // Convert the min-heap to a sorted list\n        List<Integer> result = new ArrayList<>(minHeap);\n        Collections.sort(result);\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/121", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        \n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) { // Check if the index is even\n                if (lst.get(i) % 2 != 0) { // Check if the element is odd\n                    sum += lst.get(i); // Add the odd element to the sum\n                }\n            }\n        }\n        \n        return sum;\n    }\n}\n"}
{"task_id": "Java/122", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int add_elements(List<Integer> arr, int k) {\n        // Input validation\n        if (arr == null || arr.size() < 1 || arr.size() > 100 || k < 1 || k > arr.size()) {\n            throw new IllegalArgumentException(\"Invalid input parameters\");\n        }\n\n        // Initialize sum\n        int sum = 0;\n\n        // Iterate through the first k elements\n        for (int i = 0; i < k; i++) {\n            int num = arr.get(i);\n            // Check if the number has at most two digits\n            if (num >= 0 && num <= 99) {\n                sum += num;\n            }\n        }\n\n        // Return the computed sum\n        return sum;\n    }\n}\n"}
{"task_id": "Java/123", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> get_odd_collatz(int n) {\n        List<Integer> collatzSequence = new ArrayList<>();\n        List<Integer> oddNumbers = new ArrayList<>();\n        \n        // Generate the Collatz sequence\n        while (n != 1) {\n            collatzSequence.add(n);\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n        }\n        collatzSequence.add(1); // Add the final 1 to the sequence\n        \n        // Filter odd numbers\n        for (int term : collatzSequence) {\n            if (term % 2 != 0) {\n                oddNumbers.add(term);\n            }\n        }\n        \n        // Sort the odd numbers (though they should already be in order)\n        Collections.sort(oddNumbers);\n        \n        return oddNumbers;\n    }\n}\n"}
{"task_id": "Java/124", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    valid_date(\"03-11-2000\") => true\n    valid_date(\"15-01-2012\") => false\n    valid_date(\"04-0-2040\") => false\n    valid_date(\"06-04-2020\") => true\n    valid_date(\"06/04/2020\") => false\n     */\n    public boolean valid_date(String date) {\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        // Regular expression to match the format mm-dd-yyyy\n        if (!date.matches(\"\\\\d{2}-\\\\d{2}-\\\\d{4}\")) {\n            return false;\n        }\n\n        // Extract month, day, and year from the date string\n        String[] parts = date.split(\"-\");\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\n        // Validate month\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        // Validate day based on the month\n        if (day < 1) {\n            return false;\n        }\n\n        switch (month) {\n            case 1: case 3: case 5: case 7: case 8: case 10: case 12:\n                if (day > 31) {\n                    return false;\n                }\n                break;\n            case 4: case 6: case 9: case 11:\n                if (day > 30) {\n                    return false;\n                }\n                break;\n            case 2:\n                if (isLeapYear(year)) {\n                    if (day > 29) {\n                        return false;\n                    }\n                } else {\n                    if (day > 28) {\n                        return false;\n                    }\n                }\n                break;\n        }\n\n        return true;\n    }\n\n    private boolean isLeapYear(int year) {\n        if (year % 4 == 0) {\n            if (year % 100 == 0) {\n                return year % 400 == 0;\n            }\n            return true;\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/125", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n     */\n    public Object split_words(String txt) {\n        if (txt == null) {\n            return null;\n        }\n\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\"\\\\s+\"));\n        }\n\n        if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        }\n\n        int oddCount = 0;\n        for (char c : txt.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                int index = c - 'a';\n                if (index % 2 != 0) {\n                    oddCount++;\n                }\n            }\n        }\n\n        return oddCount;\n    }\n}\n"}
{"task_id": "Java/126", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If the a number appears more than twice, return false. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted(Arrays.asList(5)) -> true\n    is_sorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    is_sorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    is_sorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    is_sorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    is_sorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean is_sorted(List<Integer> lst) {\n        // Step 1: Input Validation\n        if (lst == null) {\n            return false; // or throw an exception\n        }\n\n        // Step 2: Check for Sorted Order\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n        }\n\n        // Step 3: Check for Duplicate Elements\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (int num : lst) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n            if (countMap.get(num) > 2) {\n                return false;\n            }\n        }\n\n        // Step 4: Combine Results\n        return true;\n    }\n}\n"}
{"task_id": "Java/127", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // Input Validation\n        if (interval1.size() != 2 || interval2.size() != 2) {\n            throw new IllegalArgumentException(\"Each interval must be a list of exactly two integers.\");\n        }\n        if (interval1.get(0) > interval1.get(1) || interval2.get(0) > interval2.get(1)) {\n            throw new IllegalArgumentException(\"The start of each interval must be less than or equal to the end.\");\n        }\n\n        // Interval Intersection Calculation\n        int startIntersection = Math.max(interval1.get(0), interval2.get(0));\n        int endIntersection = Math.min(interval1.get(1), interval2.get(1));\n\n        if (startIntersection > endIntersection) {\n            return \"NO\";\n        }\n\n        // Length of Intersection Calculation\n        int lengthOfIntersection = endIntersection - startIntersection + 1;\n\n        if (lengthOfIntersection <= 0) {\n            return \"NO\";\n        }\n\n        // Prime Number Check\n        if (isPrime(lengthOfIntersection)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/128", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prod_signs(Arrays.asList(0, 1)) == 0\n    >>> prod_signs(Arrays.asList()) == None\n     */\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int signProduct = 1;\n        int sumOfMagnitudes = 0;\n\n        for (int num : arr) {\n            int sign = (num > 0) ? 1 : (num < 0) ? -1 : 0;\n            signProduct *= sign;\n            sumOfMagnitudes += Math.abs(num);\n        }\n\n        return Optional.of(sumOfMagnitudes * signProduct);\n    }\n}\n"}
{"task_id": "Java/129", "generation": "import java.util.*;\n\nclass Solution {\n    private int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        List<Integer> minPath = null;\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                List<Integer> path = new ArrayList<>();\n                path.add(grid.get(i).get(j));\n                minPath = dfs(grid, i, j, k, path, minPath);\n            }\n        }\n\n        return minPath;\n    }\n\n    private List<Integer> dfs(List<List<Integer>> grid, int x, int y, int k, List<Integer> currentPath, List<Integer> minPath) {\n        if (currentPath.size() == k) {\n            if (minPath == null || isLexicographicallySmaller(currentPath, minPath)) {\n                return new ArrayList<>(currentPath);\n            }\n            return minPath;\n        }\n\n        for (int[] dir : directions) {\n            int newX = x + dir[0];\n            int newY = y + dir[1];\n\n            if (newX >= 0 && newX < grid.size() && newY >= 0 && newY < grid.size()) {\n                currentPath.add(grid.get(newX).get(newY));\n                minPath = dfs(grid, newX, newY, k, currentPath, minPath);\n                currentPath.remove(currentPath.size() - 1);\n            }\n        }\n\n        return minPath;\n    }\n\n    private boolean isLexicographicallySmaller(List<Integer> path1, List<Integer> path2) {\n        for (int i = 0; i < path1.size(); i++) {\n            if (path1.get(i) < path2.get(i)) {\n                return true;\n            } else if (path1.get(i) > path2.get(i)) {\n                return false;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/130", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n        if (n < 0) {\n            return new ArrayList<>();\n        }\n\n        List<Integer> sequence = new ArrayList<>();\n        sequence.add(3); // Base case: tri(1) = 3\n\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                sequence.add(1 + i / 2);\n            } else {\n                int prev1 = sequence.get(i - 2); // tri(i - 1)\n                int prev2 = sequence.get(i - 3); // tri(i - 2)\n                int next = 1 + (i + 1) / 2; // tri(i + 1)\n                sequence.add(prev1 + prev2 + next);\n            }\n        }\n\n        return sequence;\n    }\n}\n"}
{"task_id": "Java/131", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int product = 1;\n        boolean hasOddDigit = false;\n        \n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n                hasOddDigit = true;\n            }\n            n /= 10;\n        }\n        \n        return hasOddDigit ? product : 0;\n    }\n}\n"}
{"task_id": "Java/132", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    is_nested(\"[[]]\") -> true\n    is_nested(\"[]]]]]]][[[[[]\") -> false\n    is_nested(\"[][]\") -> false\n    is_nested(\"[]\") -> false\n    is_nested(\"[[][]]\") -> true\n    is_nested(\"[[]][[\") -> true\n     */\n    public boolean is_nested(String string) {\n        // Step 1: Input Validation\n        if (!string.matches(\"[\\\\[\\\\]]*\")) {\n            return false;\n        }\n\n        // Step 2: Identify Valid Subsequences\n        Stack<Character> stack = new Stack<>();\n        List<String> validSubsequences = new ArrayList<>();\n        StringBuilder currentSubsequence = new StringBuilder();\n\n        for (char ch : string.toCharArray()) {\n            if (ch == '[') {\n                stack.push(ch);\n                currentSubsequence.append(ch);\n            } else if (ch == ']' && !stack.isEmpty() && stack.peek() == '[') {\n                stack.pop();\n                currentSubsequence.append(ch);\n                if (stack.isEmpty()) {\n                    validSubsequences.add(currentSubsequence.toString());\n                    currentSubsequence.setLength(0); // Reset for next subsequence\n                }\n            }\n        }\n\n        // Step 3: Check for Nested Brackets\n        for (String subsequence : validSubsequences) {\n            if (hasNestedBrackets(subsequence)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private boolean hasNestedBrackets(String subsequence) {\n        int count = 0;\n        for (char ch : subsequence.toCharArray()) {\n            if (ch == '[') {\n                count++;\n            } else if (ch == ']') {\n                count--;\n            }\n            if (count > 1) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/133", "generation": "import java.util.*;\n\nclass Solution {\n    public int sum_squares(List<Double> lst) {\n        // Step 2: Rounding to Ceiling\n        List<Double> roundedList = new ArrayList<>();\n        for (Double num : lst) {\n            roundedList.add(Math.ceil(num));\n        }\n        \n        // Step 3: Squaring the Rounded Numbers\n        List<Double> squaredList = new ArrayList<>();\n        for (Double num : roundedList) {\n            squaredList.add(num * num);\n        }\n        \n        // Step 4: Summing the Squares\n        double sum = 0;\n        for (Double num : squaredList) {\n            sum += num;\n        }\n        \n        // Step 5: Returning the Result\n        return (int) sum;\n    }\n}\n"}
{"task_id": "Java/134", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") -> false\n    check_if_last_char_is_a_letter(\"apple pi e\") -> true\n    check_if_last_char_is_a_letter(\"apple pi e \") -> false\n    check_if_last_char_is_a_letter(\"\") -> false\n     */\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        // Step 1: Handle the Empty String Case\n        if (txt.isEmpty()) {\n            return false;\n        }\n\n        // Step 2: Extract the Last Character\n        char lastChar = txt.charAt(txt.length() - 1);\n\n        // Step 3: Check if the Last Character is an Alphabetical Character\n        if (!Character.isLetter(lastChar)) {\n            return false;\n        }\n\n        // Step 4: Check if the Last Character is Part of a Word\n        if (txt.length() == 1 || txt.charAt(txt.length() - 2) == ' ') {\n            return true;\n        }\n\n        // Step 5: Return the Result\n        return false;\n    }\n}\n"}
{"task_id": "Java/135", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange(Arrays.asList(1,2,4,3,5)) = 3\n    can_arrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int can_arrange(List<Integer> arr) {\n        int largestIndex = -1;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                largestIndex = i;\n            }\n        }\n        return largestIndex;\n    }\n}\n"}
{"task_id": "Java/136", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largest_smallest_integers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largest_smallest_integers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        Optional<Integer> largestNegative = Optional.empty();\n        Optional<Integer> smallestPositive = Optional.empty();\n\n        for (Integer num : lst) {\n            if (num < 0) {\n                if (!largestNegative.isPresent() || num > largestNegative.get()) {\n                    largestNegative = Optional.of(num);\n                }\n            } else if (num > 0) {\n                if (!smallestPositive.isPresent() || num < smallestPositive.get()) {\n                    smallestPositive = Optional.of(num);\n                }\n            }\n        }\n\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n}\n"}
{"task_id": "Java/137", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) -> Optional.of(2.5)\n    compare_one(1, \"2,3\") -> Optional.of(\"2,3\")\n    compare_one(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compare_one(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compare_one(Object a, Object b) {\n        // Step 1: Identify and convert types\n        float numA = convertToFloat(a);\n        float numB = convertToFloat(b);\n\n        // Step 2: Compare the values\n        if (numA > numB) {\n            return Optional.of(a);\n        } else if (numB > numA) {\n            return Optional.of(b);\n        } else {\n            return Optional.empty();\n        }\n    }\n\n    private float convertToFloat(Object obj) {\n        if (obj instanceof Integer) {\n            return (float) (int) obj;\n        } else if (obj instanceof Float) {\n            return (float) obj;\n        } else if (obj instanceof String) {\n            String str = (String) obj;\n            str = str.replace(\",\", \".\");\n            return Float.parseFloat(str);\n        } else {\n            throw new IllegalArgumentException(\"Unsupported type\");\n        }\n    }\n}\n"}
{"task_id": "Java/138", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == false\n    is_equal_to_sum_even(6) == false\n    is_equal_to_sum_even(8) == true\n     */\n    public boolean is_equal_to_sum_even(int n) {\n        // If n is less than 8, it's impossible to sum four positive even numbers to get n\n        if (n < 8) {\n            return false;\n        }\n\n        // Iterate through possible combinations of four positive even numbers\n        for (int a = 2; a <= n - 6; a += 2) {\n            for (int b = 2; b <= n - a - 4; b += 2) {\n                for (int c = 2; c <= n - a - b - 2; c += 2) {\n                    int d = n - a - b - c;\n                    if (d > 0 && d % 2 == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        // If no combination sums up to n, return false\n        return false;\n    }\n}\n"}
{"task_id": "Java/139", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long special_factorial(int n) {\n        if (n < 1) {\n            throw new IllegalArgumentException(\"n must be greater than 0\");\n        }\n        \n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= factorial(i);\n        }\n        \n        return result;\n    }\n    \n    private long factorial(int m) {\n        long fact = 1;\n        for (int i = 1; i <= m; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n}\n"}
{"task_id": "Java/140", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fix_spaces(String text) {\n        // Step 2: Replace single spaces with underscores\n        text = text.replace(\" \", \"_\");\n        \n        // Step 3: Replace sequences of 3 or more consecutive spaces with a hyphen\n        text = text.replaceAll(\"_{3,}\", \"-\");\n        \n        // Step 4: Return the modified string\n        return text;\n    }\n}\n"}
{"task_id": "Java/141", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String file_name_check(String file_name) {\n        // Step 1: Input Validation\n        if (file_name == null || file_name.isEmpty()) {\n            return \"No\";\n        }\n\n        // Step 2: Count the Number of Digits\n        int digitCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n                if (digitCount > 3) {\n                    return \"No\";\n                }\n            }\n        }\n\n        // Step 3: Check for Exactly One Dot\n        int dotIndex = file_name.indexOf('.');\n        if (dotIndex == -1 || dotIndex != file_name.lastIndexOf('.')) {\n            return \"No\";\n        }\n\n        // Step 4: Validate the Substring Before the Dot\n        String namePart = file_name.substring(0, dotIndex);\n        if (namePart.isEmpty() || !Character.isLetter(namePart.charAt(0))) {\n            return \"No\";\n        }\n\n        // Step 5: Extract and Validate the Substring After the Dot\n        String extensionPart = file_name.substring(dotIndex + 1);\n        if (!Arrays.asList(\"txt\", \"exe\", \"dll\").contains(extensionPart)) {\n            return \"No\";\n        }\n\n        // Step 6: Return the Result\n        return \"Yes\";\n    }\n}\n"}
{"task_id": "Java/142", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sum_squares(List<Integer> lst) {\n        for (int i = 0; i < lst.size(); i++) {\n            int element = lst.get(i);\n            if (i % 3 == 0) {\n                lst.set(i, element * element);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                lst.set(i, element * element * element);\n            }\n        }\n        \n        int sum = 0;\n        for (int element : lst) {\n            sum += element;\n        }\n        \n        return sum;\n    }\n}\n"}
{"task_id": "Java/143", "generation": "import java.util.*;\n\nclass Solution {\n    public String words_in_sentence(String sentence) {\n        // Step 1: Split the sentence into words\n        String[] words = sentence.split(\" \");\n        \n        // Step 2: Filter words with prime lengths\n        List<String> filteredWords = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                filteredWords.add(word);\n            }\n        }\n        \n        // Step 3: Join the filtered words into a single string\n        return String.join(\" \", filteredWords);\n    }\n    \n    // Helper function to check if a number is prime\n    private boolean isPrime(int n) {\n        if (n <= 1) return false;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/144", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Step 1: Parse the input strings\n        String[] partsX = x.split(\"/\");\n        String[] partsN = n.split(\"/\");\n        \n        int numeratorX = Integer.parseInt(partsX[0]);\n        int denominatorX = Integer.parseInt(partsX[1]);\n        int numeratorN = Integer.parseInt(partsN[0]);\n        int denominatorN = Integer.parseInt(partsN[1]);\n        \n        // Step 2: Multiply the fractions\n        int newNumerator = numeratorX * numeratorN;\n        int newDenominator = denominatorX * denominatorN;\n        \n        // Step 3: Simplify the resulting fraction\n        int gcd = gcd(newNumerator, newDenominator);\n        newNumerator /= gcd;\n        newDenominator /= gcd;\n        \n        // Step 4: Check if the resulting fraction is a whole number\n        return newDenominator == 1;\n    }\n\n    // Helper method to compute the GCD using the Euclidean algorithm\n    private int gcd(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}\n"}
{"task_id": "Java/145", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n    If an integer is negative, then its first digit will be negative:\n    e.g. -123 has digits -1, 2, and 3.\n\n    For example:\n    >>> order_by_points(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> order_by_points(Arrays.asList()) == []\n     */\n    public List<Integer> order_by_points(List<Integer> nums) {\n        // Create a list of tuples (integer, digitSum, originalIndex)\n        List<int[]> tuples = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n            int digitSum = calculateDigitSum(num);\n            tuples.add(new int[]{num, digitSum, i});\n        }\n\n        // Sort the list of tuples using a custom comparator\n        tuples.sort((a, b) -> {\n            if (a[1] != b[1]) {\n                return Integer.compare(a[1], b[1]); // Sort by digitSum\n            } else {\n                return Integer.compare(a[2], b[2]); // Sort by original index\n            }\n        });\n\n        // Extract the sorted integers from the sorted list of tuples\n        List<Integer> sortedNums = new ArrayList<>();\n        for (int[] tuple : tuples) {\n            sortedNums.add(tuple[0]);\n        }\n\n        return sortedNums;\n    }\n\n    // Function to calculate the sum of the digits of a given integer\n    private int calculateDigitSum(int num) {\n        int sum = 0;\n        String numStr = Integer.toString(num);\n        for (char ch : numStr.toCharArray()) {\n            if (ch == '-') {\n                continue; // Skip the negative sign\n            }\n            sum += Character.getNumericValue(ch);\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/146", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        \n        for (int num : nums) {\n            if (num > 10) {\n                String numStr = String.valueOf(num);\n                int firstDigit = Character.getNumericValue(numStr.charAt(0));\n                int lastDigit = Character.getNumericValue(numStr.charAt(numStr.length() - 1));\n                \n                if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/147", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int get_max_triples(int n) {\n        // Step 1: Input Validation\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\");\n        }\n\n        // Step 2: Generate the Array `a`\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = (i + 1) * (i + 1) - (i + 1) + 1;\n        }\n\n        // Step 3: Iterate Over Possible Triples\n        int count = 0;\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    // Step 4: Check for Multiples of 3\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n\n        // Step 5: Return the Result\n        return count;\n    }\n}\n"}
{"task_id": "Java/148", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> bf(String planet1, String planet2) {\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        \n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return new ArrayList<>();\n        }\n        \n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        int startIndex = Math.min(index1, index2);\n        int endIndex = Math.max(index1, index2);\n        \n        return planets.subList(startIndex + 1, endIndex);\n    }\n}\n"}
{"task_id": "Java/149", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert sorted_list_sum(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert sorted_list_sum(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> sorted_list_sum(List<String> lst) {\n        // Step 1: Filter the list to keep only strings with even lengths\n        List<String> filteredList = new ArrayList<>();\n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                filteredList.add(str);\n            }\n        }\n\n        // Step 2: Sort the filtered list\n        Collections.sort(filteredList, new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                // First, compare by length\n                int lengthCompare = Integer.compare(s1.length(), s2.length());\n                if (lengthCompare != 0) {\n                    return lengthCompare;\n                }\n                // If lengths are equal, compare lexicographically\n                return s1.compareTo(s2);\n            }\n        });\n\n        // Step 3: Return the sorted list\n        return filteredList;\n    }\n}\n"}
{"task_id": "Java/150", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    // Helper function to check if a number is prime\n    public boolean isPrime(int n) {\n        if (n < 2) return false;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n\n    // Main function to return x or y based on whether n is prime\n    public int x_or_y(int n, int x, int y) {\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}\n"}
{"task_id": "Java/151", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    double_the_difference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    double_the_difference(Arrays.asList(-1, -2, 0)) == 0\n    double_the_difference(Arrays.asList(9, -2)) == 81\n    double_the_difference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int double_the_difference(List<Object> lst) {\n        int sumOfSquares = 0;\n        \n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                if (num > 0 && num % 2 != 0) {\n                    sumOfSquares += num * num;\n                }\n            }\n        }\n        \n        return sumOfSquares;\n    }\n}\n"}
{"task_id": "Java/152", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        // Step 1: Input Validation\n        if (game == null || guess == null) {\n            throw new IllegalArgumentException(\"Input lists cannot be null.\");\n        }\n        if (game.size() != guess.size()) {\n            throw new IllegalArgumentException(\"Input lists must have the same length.\");\n        }\n\n        // Step 2: Comparison Logic\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            int score = game.get(i);\n            int guessed = guess.get(i);\n            if (score == guessed) {\n                result.add(0);\n            } else {\n                result.add(Math.abs(score - guessed));\n            }\n        }\n\n        // Step 3: Output Generation\n        return result;\n    }\n}\n"}
{"task_id": "Java/153", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.Strongest_Extension.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        // Step 1: Initialize variables to track the strongest extension\n        String strongestExtension = null;\n        int maxStrength = Integer.MIN_VALUE;\n\n        // Step 2: Iterate through each extension to find the strongest one\n        for (String extension : extensions) {\n            int strength = calculateStrength(extension);\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        // Step 3: Format the output\n        return class_name + \".\" + strongestExtension;\n    }\n\n    // Helper method to calculate the strength of an extension\n    private int calculateStrength(String extension) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : extension.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                CAP++;\n            } else if (Character.isLowerCase(c)) {\n                SM++;\n            }\n        }\n        return CAP - SM;\n    }\n}\n"}
{"task_id": "Java/154", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => false\n    cycpattern_check(\"hello\",\"ell\") => true\n    cycpattern_check(\"whassup\",\"psus\") => false\n    cycpattern_check(\"abab\",\"baa\") => true\n    cycpattern_check(\"efef\",\"eeff\") => false\n    cycpattern_check(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpattern_check(String a, String b) {\n        // Step 1: Input Validation\n        if (a == null || b == null || a.length() == 0 || b.length() == 0) {\n            return false;\n        }\n\n        // Step 2: Generate Rotations of `b`\n        List<String> rotations = new ArrayList<>();\n        int bLength = b.length();\n        for (int i = 0; i < bLength; i++) {\n            String rotation = b.substring(i) + b.substring(0, i);\n            rotations.add(rotation);\n        }\n\n        // Step 3: Check for Substring\n        for (String rotation : rotations) {\n            if (a.contains(rotation)) {\n                return true;\n            }\n        }\n\n        // Step 4: Return Result\n        return false;\n    }\n}\n"}
{"task_id": "Java/155", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer, return a list that has the number of even and odd digits respectively.\n    \n     Example:\n        even_odd_count(-12) ==> [1, 1]\n        even_odd_count(123) ==> [1, 2]\n     */\n    public List<Integer> even_odd_count(int num) {\n        // Convert the input integer to a string\n        String numStr = Integer.toString(num);\n        \n        // Initialize counters for even and odd digits\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        // Iterate through each character in the string representation of the number\n        for (char ch : numStr.toCharArray()) {\n            // Ignore the negative sign if present\n            if (ch == '-') {\n                continue;\n            }\n            \n            // Convert the character to an integer\n            int digit = Character.getNumericValue(ch);\n            \n            // Check if the digit is even or odd and increment the appropriate counter\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        \n        // Create a list containing the even and odd counts\n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        \n        // Return the result\n        return result;\n    }\n}\n"}
{"task_id": "Java/156", "generation": "import java.util.*;\n\nclass Solution {\n    // Step 1: Define the Roman Numeral Mapping\n    private static final List<Pair<Integer, String>> ROMAN_NUMERALS = Arrays.asList(\n        new Pair<>(1000, \"m\"), new Pair<>(900, \"cm\"), new Pair<>(500, \"d\"), new Pair<>(400, \"cd\"),\n        new Pair<>(100, \"c\"), new Pair<>(90, \"xc\"), new Pair<>(50, \"l\"), new Pair<>(40, \"xl\"),\n        new Pair<>(10, \"x\"), new Pair<>(9, \"ix\"), new Pair<>(5, \"v\"), new Pair<>(4, \"iv\"),\n        new Pair<>(1, \"i\")\n    );\n\n    // Step 4: Implement the int_to_mini_roman method\n    public String int_to_mini_roman(int number) {\n        StringBuilder roman = new StringBuilder();\n        \n        // Step 2: Construct the Roman Numeral\n        for (Pair<Integer, String> pair : ROMAN_NUMERALS) {\n            while (number >= pair.getKey()) {\n                roman.append(pair.getValue());\n                number -= pair.getKey();\n            }\n        }\n        \n        // Step 3: Convert to Lowercase (already done in the mapping)\n        return roman.toString();\n    }\n}\n\n// Helper class to represent a pair of values\nclass Pair<K, V> {\n    private final K key;\n    private final V value;\n\n    public Pair(K key, V value) {\n        this.key = key;\n        this.value = value;\n    }\n\n    public K getKey() {\n        return key;\n    }\n\n    public V getValue() {\n        return value;\n    }\n}\n"}
{"task_id": "Java/157", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == true\n    right_angle_triangle(1, 2, 3) == false\n     */\n    public boolean right_angle_triangle(int a, int b, int c) {\n        // Input validation: Check if the sides can form a triangle\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return false;\n        }\n\n        // Identify the hypotenuse\n        int hypotenuse = Math.max(a, Math.max(b, c));\n\n        // Apply the Pythagorean theorem\n        if (hypotenuse == a) {\n            return a * a == b * b + c * c;\n        } else if (hypotenuse == b) {\n            return b * b == a * a + c * c;\n        } else {\n            return c * c == a * a + b * b;\n        }\n    }\n}\n"}
{"task_id": "Java/158", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String find_max(List<String> words) {\n        if (words == null || words.isEmpty()) {\n            return null; // or handle as per requirement\n        }\n\n        int maxUniqueCount = 0;\n        String maxUniqueWord = null;\n\n        for (String word : words) {\n            int uniqueCount = countUniqueCharacters(word);\n\n            if (uniqueCount > maxUniqueCount) {\n                maxUniqueCount = uniqueCount;\n                maxUniqueWord = word;\n            } else if (uniqueCount == maxUniqueCount) {\n                if (maxUniqueWord == null || word.compareTo(maxUniqueWord) < 0) {\n                    maxUniqueWord = word;\n                }\n            }\n        }\n\n        return maxUniqueWord;\n    }\n\n    private int countUniqueCharacters(String word) {\n        Set<Character> uniqueChars = new HashSet<>();\n        for (char c : word.toCharArray()) {\n            uniqueChars.add(c);\n        }\n        return uniqueChars.size();\n    }\n}\n"}
{"task_id": "Java/159", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        // Input validation\n        if (number < 0 || number > 1000 || need < 0 || need > 1000 || remaining < 0 || remaining > 1000) {\n            throw new IllegalArgumentException(\"Input values must be between 0 and 1000 inclusive.\");\n        }\n\n        // Calculate total carrots eaten\n        int totalEaten = number + need;\n\n        // Determine carrots left\n        int carrotsLeft = Math.max(remaining - totalEaten, 0);\n\n        // Return the result\n        return Arrays.asList(totalEaten, carrotsLeft);\n    }\n}\n"}
{"task_id": "Java/160", "generation": "import java.util.*;\nimport javax.script.ScriptEngine;\nimport javax.script.ScriptEngineManager;\nimport javax.script.ScriptException;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        // Step 1: Input Validation\n        if (operator.size() != operand.size() - 1) {\n            throw new IllegalArgumentException(\"Invalid input: operator list length must be one less than operand list length.\");\n        }\n        \n        // Step 2: Expression Construction\n        StringBuilder expression = new StringBuilder();\n        for (int i = 0; i < operand.size(); i++) {\n            expression.append(operand.get(i));\n            if (i < operator.size()) {\n                expression.append(\" \").append(operator.get(i)).append(\" \");\n            }\n        }\n        \n        // Step 3: Expression Evaluation\n        ScriptEngineManager manager = new ScriptEngineManager();\n        ScriptEngine engine = manager.getEngineByName(\"JavaScript\");\n        try {\n            Object result = engine.eval(expression.toString());\n            return ((Number) result).intValue();\n        } catch (ScriptException e) {\n            throw new RuntimeException(\"Error evaluating expression\", e);\n        }\n    }\n}\n"}
{"task_id": "Java/161", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        if (s == null || s.isEmpty()) {\n            return s;\n        }\n\n        StringBuilder result = new StringBuilder();\n        boolean hasLetters = false;\n\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                hasLetters = true;\n                if (Character.isLowerCase(c)) {\n                    result.append(Character.toUpperCase(c));\n                } else {\n                    result.append(Character.toLowerCase(c));\n                }\n            } else {\n                result.append(c);\n            }\n        }\n\n        if (!hasLetters) {\n            return new StringBuilder(s).reverse().toString();\n        }\n\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/162", "generation": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        // Step 1: Input Validation\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        // Step 2: MD5 Hash Calculation\n        MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n        byte[] hashBytes = digest.digest(text.getBytes());\n\n        // Step 3: Convert byte array to hexadecimal string\n        StringBuilder hexString = new StringBuilder();\n        for (byte b : hashBytes) {\n            hexString.append(String.format(\"%02x\", b));\n        }\n\n        // Step 4: Ensure the string is 32 characters long\n        if (hexString.length() != 32) {\n            throw new IllegalStateException(\"MD5 hash should be 32 characters long.\");\n        }\n\n        // Step 5: Return the result wrapped in Optional\n        return Optional.of(hexString.toString());\n    }\n}\n"}
{"task_id": "Java/163", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order. Please note that the even digits refer to even numbers less than 10.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n     */\n    public List<Integer> generate_integers(int a, int b) {\n        // Input validation\n        if (a <= 0 || b <= 0) {\n            return Collections.emptyList();\n        }\n\n        // Determine the range\n        int start = Math.min(a, b);\n        int end = Math.max(a, b);\n\n        // Set to store unique even digits\n        Set<Integer> evenDigits = new HashSet<>();\n\n        // Extract and filter even digits\n        for (int i = start; i <= end; i++) {\n            int num = i;\n            while (num > 0) {\n                int digit = num % 10;\n                if (digit % 2 == 0 && digit < 10) {\n                    evenDigits.add(digit);\n                }\n                num /= 10;\n            }\n        }\n\n        // Convert set to sorted list\n        List<Integer> result = new ArrayList<>(evenDigits);\n        Collections.sort(result);\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/0", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> has_close_elements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> has_close_elements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        // Step 1: Input Validation\n        if (numbers == null || numbers.size() < 2 || threshold <= 0) {\n            throw new IllegalArgumentException(\"Invalid input\");\n        }\n\n        // Step 2: Pairwise Comparison\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true; // Step 3: Return true if a close pair is found\n                }\n            }\n        }\n\n        // Step 3: Return false if no close pair is found\n        return false;\n    }\n}\n"}
{"task_id": "Java/1", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separate_paren_groups(String paren_string) {\n        // Step 1: Remove spaces from the input string\n        paren_string = paren_string.replaceAll(\" \", \"\");\n        \n        // Step 2: Initialize variables\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        StringBuilder currentGroup = new StringBuilder();\n        int lastBalancedIndex = 0;\n        \n        // Step 3: Iterate through the string\n        for (int i = 0; i < paren_string.length(); i++) {\n            char ch = paren_string.charAt(i);\n            \n            if (ch == '(') {\n                stack.push(ch);\n            } else if (ch == ')') {\n                if (!stack.isEmpty()) {\n                    stack.pop();\n                }\n            }\n            \n            currentGroup.append(ch);\n            \n            // Step 4: Check if a balanced group is detected\n            if (stack.isEmpty()) {\n                result.add(currentGroup.substring(lastBalancedIndex));\n                lastBalancedIndex = i + 1;\n                currentGroup.setLength(0); // Reset for the next group\n            }\n        }\n        \n        // Step 5: Return the result\n        return result;\n    }\n}\n"}
{"task_id": "Java/2", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n     */\n    public double truncate_number(double number) {\n        // Step 1: Input Validation\n        if (number <= 0) {\n            throw new IllegalArgumentException(\"Input must be a positive floating-point number.\");\n        }\n\n        // Step 2: Extract the Integer Part\n        double integerPart = Math.floor(number);\n\n        // Step 3: Calculate the Decimal Part\n        double decimalPart = number - integerPart;\n\n        // Step 4: Return the Decimal Part\n        return decimalPart;\n    }\n}\n"}
{"task_id": "Java/3", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero(Arrays.asList(1, 2, 3))\n    false\n    >>> below_zero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/4", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double mean_absolute_deviation(List<Double> numbers) {\n        // Step 1: Calculate the mean of the dataset\n        double mean = calculateMean(numbers);\n        \n        // Step 2: Calculate the absolute differences between each element and the mean\n        List<Double> absoluteDifferences = calculateAbsoluteDifferences(numbers, mean);\n        \n        // Step 3: Calculate the mean of the absolute differences\n        double mad = calculateMeanOfAbsoluteDifferences(absoluteDifferences);\n        \n        // Step 4: Return the Mean Absolute Deviation\n        return mad;\n    }\n\n    // Helper method to calculate the mean\n    private double calculateMean(List<Double> numbers) {\n        double sum = 0;\n        for (double number : numbers) {\n            sum += number;\n        }\n        return sum / numbers.size();\n    }\n\n    // Helper method to calculate absolute differences\n    private List<Double> calculateAbsoluteDifferences(List<Double> numbers, double mean) {\n        List<Double> absoluteDifferences = new ArrayList<>();\n        for (double number : numbers) {\n            absoluteDifferences.add(Math.abs(number - mean));\n        }\n        return absoluteDifferences;\n    }\n\n    // Helper method to calculate the mean of absolute differences\n    private double calculateMeanOfAbsoluteDifferences(List<Double> absoluteDifferences) {\n        double sum = 0;\n        for (double difference : absoluteDifferences) {\n            sum += difference;\n        }\n        return sum / absoluteDifferences.size();\n    }\n}\n"}
{"task_id": "Java/5", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimiter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        // Step 1: Handle edge case\n        if (numbers == null || numbers.isEmpty()) {\n            return new ArrayList<>();\n        }\n        \n        // Step 2: Initialize result list\n        List<Integer> result = new ArrayList<>();\n        \n        // Step 3: Iterate and insert delimiter\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        \n        // Step 4: Return the result list\n        return result;\n    }\n}\n"}
{"task_id": "Java/6", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parse_nested_parens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        \n        if (paren_string == null || paren_string.isEmpty()) {\n            return result;\n        }\n        \n        String[] groups = paren_string.split(\" \");\n        \n        for (String group : groups) {\n            int maxNestingLevel = 0;\n            int currentNestingLevel = 0;\n            \n            for (char ch : group.toCharArray()) {\n                if (ch == '(') {\n                    currentNestingLevel++;\n                    if (currentNestingLevel > maxNestingLevel) {\n                        maxNestingLevel = currentNestingLevel;\n                    }\n                } else if (ch == ')') {\n                    currentNestingLevel--;\n                }\n            }\n            \n            if (currentNestingLevel != 0) {\n                throw new IllegalArgumentException(\"Unbalanced parentheses in group: \" + group);\n            }\n            \n            result.add(maxNestingLevel);\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/7", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        // Step 1: Input Validation\n        if (strings == null || substring == null || substring.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        // Step 2: Initialize result list\n        List<String> result = new ArrayList<>();\n\n        // Step 3: Iterate through each string and check for substring\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                result.add(str);\n            }\n        }\n\n        // Step 4: Return the result list\n        return result;\n    }\n}\n"}
{"task_id": "Java/8", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product(List.of())\n    [0, 1]\n    >>> sum_product(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sum_product(List<Integer> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            return Arrays.asList(0, 1);\n        }\n\n        int sum = 0;\n        int product = 1;\n\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n\n        return Arrays.asList(sum, product);\n    }\n}\n"}
{"task_id": "Java/9", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        // Input validation\n        if (numbers == null || numbers.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        // Initialize result list and currentMax\n        List<Integer> result = new ArrayList<>();\n        int currentMax = Integer.MIN_VALUE;\n\n        // Iterate through the list\n        for (int num : numbers) {\n            if (num > currentMax) {\n                currentMax = num;\n            }\n            result.add(currentMax);\n        }\n\n        // Return the result list\n        return result;\n    }\n}\n"}
{"task_id": "Java/10", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n     */\n    public String make_palindrome(String string) {\n        if (string.isEmpty()) {\n            return string;\n        }\n\n        int n = string.length();\n        int longestPalindromeSuffix = 0;\n\n        // Find the longest suffix of the string that is a palindrome\n        for (int i = 0; i < n; i++) {\n            if (isPalindrome(string.substring(i))) {\n                longestPalindromeSuffix = n - i;\n                break;\n            }\n        }\n\n        // If the entire string is a palindrome, return it\n        if (longestPalindromeSuffix == n) {\n            return string;\n        }\n\n        // Determine the prefix that comes before the palindromic suffix\n        String prefix = string.substring(0, n - longestPalindromeSuffix);\n\n        // Reverse this prefix and append it to the end of the original string\n        String reversedPrefix = new StringBuilder(prefix).reverse().toString();\n\n        return string + reversedPrefix;\n    }\n}\n"}
{"task_id": "Java/11", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n     */\n    public String string_xor(String a, String b) {\n        // Input validation\n        if (a == null || b == null || a.length() != b.length()) {\n            throw new IllegalArgumentException(\"Input strings must be non-null and of the same length.\");\n        }\n        \n        // Initialize result string\n        StringBuilder result = new StringBuilder();\n        \n        // Perform XOR operation\n        for (int i = 0; i < a.length(); i++) {\n            char charA = a.charAt(i);\n            char charB = b.charAt(i);\n            \n            // Ensure characters are '0' or '1'\n            if (charA != '0' && charA != '1' || charB != '0' && charB != '1') {\n                throw new IllegalArgumentException(\"Input strings must contain only '0's and '1's.\");\n            }\n            \n            // Perform XOR operation and append result\n            char xorChar = (charA == charB) ? '0' : '1';\n            result.append(xorChar);\n        }\n        \n        // Return the result\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/12", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longestString = null;\n        int maxLength = 0;\n\n        for (String str : strings) {\n            int currentLength = str.length();\n            if (currentLength > maxLength) {\n                longestString = str;\n                maxLength = currentLength;\n            }\n        }\n\n        return Optional.ofNullable(longestString);\n    }\n}\n"}
{"task_id": "Java/13", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n     */\n    public int greatest_common_divisor(int a, int b) {\n        a = Math.abs(a);\n        b = Math.abs(b);\n        \n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        \n        return a;\n    }\n}\n"}
{"task_id": "Java/14", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> all_prefixes(String string) {\n        // Step 1: Input Validation\n        if (string == null || string.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        // Step 2: Prefix Generation\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n\n        // Step 3: Sorting Prefixes (No additional sorting needed)\n\n        // Step 4: Return the Result\n        return prefixes;\n    }\n}\n"}
{"task_id": "Java/15", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String string_sequence(int n) {\n        // Step 1: Input Validation\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Input must be a non-negative integer.\");\n        }\n\n        // Step 2: Generating the Sequence\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            result.append(i).append(\" \");\n        }\n\n        // Step 3: Formatting the Output\n        if (result.length() > 0) {\n            result.setLength(result.length() - 1); // Remove the trailing space\n        }\n\n        // Step 4: Returning the Result\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/16", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n     */\n    public int count_distinct_characters(String string) {\n        // Step 1: Input Validation\n        if (string == null) {\n            throw new IllegalArgumentException(\"Input string cannot be null\");\n        }\n        \n        // Step 2: Normalize Case\n        String normalizedString = string.toLowerCase();\n        \n        // Step 3: Identify Unique Characters\n        Set<Character> uniqueCharacters = new HashSet<>();\n        for (char c : normalizedString.toCharArray()) {\n            uniqueCharacters.add(c);\n        }\n        \n        // Step 4: Count Unique Characters\n        int distinctCount = uniqueCharacters.size();\n        \n        // Step 5: Return the Result\n        return distinctCount;\n    }\n}\n"}
{"task_id": "Java/17", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parse_music(String string) {\n        // Step 1: Input Parsing\n        String[] notes = string.split(\" \");\n        \n        // Step 2: Note Interpretation\n        List<Integer> beats = new ArrayList<>();\n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    beats.add(4);\n                    break;\n                case \"o|\":\n                    beats.add(2);\n                    break;\n                case \".|\":\n                    beats.add(1);\n                    break;\n                default:\n                    // Handle unexpected note types if necessary\n                    break;\n            }\n        }\n        \n        // Step 3: Output Construction\n        return beats;\n    }\n}\n"}
{"task_id": "Java/18", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlapping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n     */\n    public int how_many_times(String string, String substring) {\n        // Input validation\n        if (string == null || substring == null || string.isEmpty() || substring.isEmpty()) {\n            return 0;\n        }\n\n        int count = 0;\n        int index = 0;\n\n        // Iterate through the string\n        while (index <= string.length() - substring.length()) {\n            // Check if the substring matches starting from the current index\n            if (string.substring(index, index + substring.length()).equals(substring)) {\n                count++;\n            }\n            index++;\n        }\n\n        return count;\n    }\n}\n"}
{"task_id": "Java/19", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    private static final Map<String, Integer> WORD_TO_NUMBER = new HashMap<String, Integer>() {{\n        put(\"zero\", 0);\n        put(\"one\", 1);\n        put(\"two\", 2);\n        put(\"three\", 3);\n        put(\"four\", 4);\n        put(\"five\", 5);\n        put(\"six\", 6);\n        put(\"seven\", 7);\n        put(\"eight\", 8);\n        put(\"nine\", 9);\n    }};\n\n    private static final Map<Integer, String> NUMBER_TO_WORD = new HashMap<Integer, String>() {{\n        put(0, \"zero\");\n        put(1, \"one\");\n        put(2, \"two\");\n        put(3, \"three\");\n        put(4, \"four\");\n        put(5, \"five\");\n        put(6, \"six\");\n        put(7, \"seven\");\n        put(8, \"eight\");\n        put(9, \"nine\");\n    }};\n\n    public String sort_numbers(String numbers) {\n        // Step 1: Parse the input string to extract number words\n        String[] words = numbers.split(\" \");\n\n        // Step 2: Convert the array of number words into an array of integers using the map\n        Integer[] nums = new Integer[words.length];\n        for (int i = 0; i < words.length; i++) {\n            nums[i] = WORD_TO_NUMBER.get(words[i]);\n        }\n\n        // Step 3: Sort the array of integers\n        Arrays.sort(nums);\n\n        // Step 4: Convert the sorted array of integers back into an array of number words using the reverse map\n        String[] sortedWords = new String[nums.length];\n        for (int i = 0; i < nums.length; i++) {\n            sortedWords[i] = NUMBER_TO_WORD.get(nums[i]);\n        }\n\n        // Step 5: Join the array of number words into a single string with spaces separating the words\n        return String.join(\" \", sortedWords);\n    }\n}\n"}
{"task_id": "Java/20", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"The list must contain at least two numbers.\");\n        }\n\n        Collections.sort(numbers);\n\n        double minDiff = Double.MAX_VALUE;\n        List<Double> closestPair = new ArrayList<>();\n\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = numbers.get(i + 1) - numbers.get(i);\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair.clear();\n                closestPair.add(numbers.get(i));\n                closestPair.add(numbers.get(i + 1));\n            }\n        }\n\n        return closestPair;\n    }\n}\n"}
{"task_id": "Java/21", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements.\");\n        }\n\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        double range = max - min;\n\n        List<Double> rescaledList = new ArrayList<>(numbers.size());\n        for (Double number : numbers) {\n            double rescaledValue = (number - min) / range;\n            rescaledList.add(rescaledValue);\n        }\n\n        return rescaledList;\n    }\n}\n"}
{"task_id": "Java/22", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filter_integers(List<Object> values) {\n        if (values == null) {\n            return Collections.emptyList();\n        }\n\n        List<Integer> filteredList = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                filteredList.add((Integer) value);\n            }\n        }\n\n        return filteredList;\n    }\n}\n"}
{"task_id": "Java/23", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        if (string == null) {\n            return 0; // or throw new IllegalArgumentException(\"Input string cannot be null\");\n        }\n        return string.length();\n    }\n}\n"}
{"task_id": "Java/24", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n     */\n    public int largest_divisor(int n) {\n        // Input validation\n        if (n <= 1) {\n            return -1; // or throw an exception\n        }\n        \n        // Loop to find the largest divisor\n        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        \n        // Edge case: should never reach here for valid input\n        return -1; // or throw an exception\n    }\n}\n"}
{"task_id": "Java/25", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        \n        if (n < 2) {\n            return factors;\n        }\n        \n        int currentFactor = 2;\n        \n        while (n > 1) {\n            while (n % currentFactor == 0) {\n                factors.add(currentFactor);\n                n /= currentFactor;\n            }\n            currentFactor++;\n        }\n        \n        return factors;\n    }\n}\n"}
{"task_id": "Java/26", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        // Step 1: Input Validation\n        if (numbers == null || numbers.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        // Step 2: Count Element Occurrences\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (Integer num : numbers) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n        }\n\n        // Step 3: Identify Non-Duplicate Elements\n        List<Integer> result = new ArrayList<>();\n        for (Integer num : numbers) {\n            if (countMap.get(num) == 1) {\n                result.add(num);\n            }\n        }\n\n        // Step 4: Return the Result\n        return result;\n    }\n}\n"}
{"task_id": "Java/27", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"Hello\")\n    \"hELLO\"\n     */\n    public String flip_case(String string) {\n        if (string == null || string.isEmpty()) {\n            return \"\";\n        }\n\n        StringBuilder flippedString = new StringBuilder();\n\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                flippedString.append(Character.toLowerCase(c));\n            } else if (Character.isLowerCase(c)) {\n                flippedString.append(Character.toUpperCase(c));\n            } else {\n                flippedString.append(c);\n            }\n        }\n\n        return flippedString.toString();\n    }\n}\n"}
{"task_id": "Java/28", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        if (strings.isEmpty()) {\n            return \"\";\n        }\n        \n        StringBuilder result = new StringBuilder();\n        for (String str : strings) {\n            result.append(str);\n        }\n        \n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/29", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix(List.of(), \"a\")\n    []\n    >>> filter_by_prefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        if (strings == null || strings.isEmpty() || prefix == null) {\n            return Collections.emptyList();\n        }\n        \n        return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/30", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> get_positive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> get_positive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> get_positive(List<Integer> l) {\n        // Step 1: Input Validation\n        if (l == null || l.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        // Step 2: Filtering Positive Numbers\n        List<Integer> positiveNumbers = l.stream()\n                                         .filter(num -> num > 0)\n                                         .collect(Collectors.toList());\n\n        // Step 3: Return the Result\n        return positiveNumbers;\n    }\n}\n"}
{"task_id": "Java/31", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    false\n    >>> is_prime(101)\n    true\n    >>> is_prime(11)\n    true\n    >>> is_prime(13441)\n    true\n    >>> is_prime(61)\n    true\n    >>> is_prime(4)\n    false\n    >>> is_prime(1)\n    false\n     */\n    public boolean is_prime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/32", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> find_zero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> find_zero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double find_zero(List<Double> xs) {\n        // Validate input\n        if (xs.size() % 2 != 0 || xs.get(xs.size() - 1) == 0) {\n            throw new IllegalArgumentException(\"Input list must have an even number of coefficients and the largest coefficient must be non-zero.\");\n        }\n        \n        // Use Newton-Raphson method to find the zero\n        double x0 = 0.0; // Initial guess\n        double tolerance = 1e-7;\n        int maxIterations = 1000;\n        \n        for (int i = 0; i < maxIterations; i++) {\n            double fx = poly(xs, x0);\n            double fpx = derivative(xs, x0);\n            \n            if (Math.abs(fx) < tolerance) {\n                return x0;\n            }\n            \n            x0 = x0 - fx / fpx;\n        }\n        \n        throw new RuntimeException(\"Failed to find a zero within the maximum number of iterations.\");\n    }\n    \n    private double derivative(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 1; i < xs.size(); i++) {\n            result += i * xs.get(i) * Math.pow(x, i - 1);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/33", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted in ascending order.\n    >>> sort_third(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sort_third(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sort_third(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        List<Integer> divisibleByThreeIndices = new ArrayList<>();\n        List<Integer> elementsToSort = new ArrayList<>();\n\n        // Step 2: Identify and extract elements\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                divisibleByThreeIndices.add(i);\n                elementsToSort.add(l.get(i));\n            }\n        }\n\n        // Step 3: Sort the extracted elements\n        Collections.sort(elementsToSort);\n\n        // Step 4: Reconstruct the list\n        List<Integer> result = new ArrayList<>(l);\n        for (int i = 0; i < divisibleByThreeIndices.size(); i++) {\n            int index = divisibleByThreeIndices.get(i);\n            result.set(index, elementsToSort.get(i));\n        }\n\n        // Step 5: Return the result\n        return result;\n    }\n}\n"}
{"task_id": "Java/34", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        // Step 1: Input Validation\n        if (l == null || l.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        // Step 2: Remove Duplicates\n        Set<Integer> uniqueSet = new HashSet<>(l);\n\n        // Step 3: Convert Set to List\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n\n        // Step 4: Sort the List\n        Collections.sort(uniqueList);\n\n        // Step 5: Return the Sorted List\n        return uniqueList;\n    }\n}\n"}
{"task_id": "Java/35", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> max_element(Arrays.asList(1, 2, 3))\n    3\n    >>> max_element(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int max_element(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list cannot be null or empty\");\n        }\n\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n\n        return max;\n    }\n}\n"}
{"task_id": "Java/36", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n     */\n    public int fizz_buzz(int n) {\n        int count = 0;\n        \n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String numberStr = Integer.toString(i);\n                int digit7Count = numberStr.split(\"7\").length - 1;\n                count += digit7Count;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/37", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sort_even(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sort_even(List<Integer> l) {\n        if (l == null) {\n            return null;\n        }\n\n        List<Integer> evenIndexedList = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 2) {\n            evenIndexedList.add(l.get(i));\n        }\n\n        Collections.sort(evenIndexedList);\n\n        List<Integer> resultList = new ArrayList<>(Collections.nCopies(l.size(), 0));\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                resultList.set(i, evenIndexedList.get(i / 2));\n            } else {\n                resultList.set(i, l.get(i));\n            }\n        }\n\n        return resultList;\n    }\n}\n"}
{"task_id": "Java/38", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decode_cyclic(String s) {\n        // split encoded string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n"}
{"task_id": "Java/39", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n     */\n    public int prime_fib(int n) {\n        if (n == 1) return 2; // Edge case: 1st prime Fibonacci number\n        if (n == 2) return 3; // Edge case: 2nd prime Fibonacci number\n\n        List<Integer> primeFibNumbers = new ArrayList<>();\n        int a = 1, b = 1;\n\n        while (primeFibNumbers.size() < n) {\n            int nextFib = a + b;\n            a = b;\n            b = nextFib;\n\n            if (isPrime(nextFib)) {\n                primeFibNumbers.add(nextFib);\n            }\n        }\n\n        return primeFibNumbers.get(n - 1);\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        if (num == 2) return true;\n        if (num % 2 == 0) return false;\n\n        for (int i = 3; i <= Math.sqrt(num); i += 2) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/40", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triples_sum_to_zero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triples_sum_to_zero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triples_sum_to_zero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triples_sum_to_zero(Arrays.asList(1))\n    false\n     */\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        // Input Validation\n        if (l.size() < 3) {\n            return false;\n        }\n\n        // Sorting the List\n        Collections.sort(l);\n\n        // Finding Triplets\n        for (int i = 0; i < l.size() - 2; i++) {\n            // Skip duplicates\n            if (i > 0 && l.get(i).equals(l.get(i - 1))) {\n                continue;\n            }\n\n            int left = i + 1;\n            int right = l.size() - 1;\n\n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n\n        // Edge Case Handling\n        return false;\n    }\n}\n"}
{"task_id": "Java/41", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int car_race_collision(int n) {\n        return n * n;\n    }\n}\n"}
{"task_id": "Java/42", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incr_list(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incr_list(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incr_list(List<Integer> l) {\n        if (l == null) {\n            return new ArrayList<>();\n        }\n        return l.stream()\n                .map(i -> i + 1)\n                .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/43", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairs_sum_to_zero(Arrays.asList(1))\n    false\n     */\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        if (l == null || l.size() < 2) {\n            return false;\n        }\n\n        Set<Integer> seen = new HashSet<>();\n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n\n        return false;\n    }\n}\n"}
{"task_id": "Java/44", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\n    >>> change_base(7, 2)\n    \"111\"\n     */\n    public String change_base(int x, int base) {\n        // Step 1: Input Validation\n        if (base >= 10) {\n            throw new IllegalArgumentException(\"Base must be less than 10.\");\n        }\n        if (x == 0) {\n            return \"0\";\n        }\n\n        // Step 2: Base Conversion Logic\n        List<Integer> remainders = new ArrayList<>();\n        while (x > 0) {\n            int remainder = x % base;\n            remainders.add(remainder);\n            x = x / base;\n        }\n\n        // Step 3: String Representation\n        Collections.reverse(remainders);\n        StringBuilder result = new StringBuilder();\n        for (int digit : remainders) {\n            result.append(digit);\n        }\n\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/45", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n     */\n    public double triangle_area(double a, double h) {\n        if (a <= 0 || h <= 0) {\n            throw new IllegalArgumentException(\"Base and height must be positive numbers.\");\n        }\n        double area = 0.5 * a * h;\n        return area;\n    }\n}\n"}
{"task_id": "Java/46", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        // Step 1: Initialize base cases\n        if (n < 4) {\n            return new int[]{0, 0, 2, 0}[n];\n        }\n\n        int[] fib4Values = new int[n + 1];\n        fib4Values[0] = 0;\n        fib4Values[1] = 0;\n        fib4Values[2] = 2;\n        fib4Values[3] = 0;\n\n        // Step 2: Iterative calculation\n        for (int i = 4; i <= n; i++) {\n            fib4Values[i] = fib4Values[i - 1] + fib4Values[i - 2] + fib4Values[i - 3] + fib4Values[i - 4];\n        }\n\n        // Step 3: Return the result\n        return fib4Values[n];\n    }\n}\n"}
{"task_id": "Java/47", "generation": "import java.util.*;\n\nclass Solution {\n    public double median(List<Integer> l) {\n        // Step 1: Input Validation\n        if (l.isEmpty()) {\n            return Double.NaN; // or throw an exception\n        }\n\n        // Step 2: Sorting the List\n        Collections.sort(l);\n\n        // Step 3: Calculating the Median\n        int size = l.size();\n        if (size % 2 != 0) {\n            // Odd number of elements\n            return l.get(size / 2);\n        } else {\n            // Even number of elements\n            int mid1 = l.get(size / 2 - 1);\n            int mid2 = l.get(size / 2);\n            return (mid1 + mid2) / 2.0;\n        }\n    }\n}\n"}
{"task_id": "Java/48", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n     */\n    public boolean is_palindrome(String text) {\n        // Input Validation: Handle null and empty strings\n        if (text == null || text.isEmpty()) {\n            return true;\n        }\n\n        // Palindrome Check Logic: Use two pointers\n        int left = 0;\n        int right = text.length() - 1;\n\n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        // If the loop completes without finding any mismatched characters, return true\n        return true;\n    }\n}\n"}
{"task_id": "Java/49", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        // Input validation\n        if (p == 1) return 0;\n        if (n == 0) return 1;\n        \n        // Exponentiation by squaring\n        int result = 1;\n        int base = 2;\n        \n        while (n > 0) {\n            if (n % 2 == 1) {\n                result = (result * base) % p;\n            }\n            base = (base * base) % p;\n            n /= 2;\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/50", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (Character.isLetter(ch)) {\n                char base = Character.isLowerCase(ch) ? 'a' : 'A';\n                sb.append((char) (base + ((ch + 5 - base) % 26)));\n            } else {\n                sb.append(ch);\n            }\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decode_shift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (Character.isLetter(ch)) {\n                char base = Character.isLowerCase(ch) ? 'a' : 'A';\n                sb.append((char) (base + ((ch - 5 - base + 26) % 26)));\n            } else {\n                sb.append(ch);\n            }\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/51", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels(\"\")\n    \"\"\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> remove_vowels(\"abcdef\")\n    \"bcdf\"\n    >>> remove_vowels(\"aaaaa\")\n    \"\"\n    >>> remove_vowels(\"aaBAA\")\n    \"B\"\n    >>> remove_vowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String remove_vowels(String text) {\n        if (text == null || text.isEmpty()) {\n            return \"\";\n        }\n        \n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        StringBuilder result = new StringBuilder();\n        \n        for (char c : text.toCharArray()) {\n            if (!vowels.contains(c)) {\n                result.append(c);\n            }\n        }\n        \n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/52", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> below_threshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean below_threshold(List<Integer> l, int t) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be null or empty\");\n        }\n\n        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/53", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}\n"}
{"task_id": "Java/54", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same kind of characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean same_chars(String s0, String s1) {\n        // Input validation\n        if (s0 == null || s1 == null) {\n            return false;\n        }\n\n        // Edge case handling for empty strings\n        if (s0.isEmpty() && s1.isEmpty()) {\n            return true;\n        }\n\n        // If lengths are different, they cannot contain the same characters\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n\n        // Character frequency counting\n        Map<Character, Integer> freqMap0 = new HashMap<>();\n        Map<Character, Integer> freqMap1 = new HashMap<>();\n\n        for (char c : s0.toCharArray()) {\n            freqMap0.put(c, freqMap0.getOrDefault(c, 0) + 1);\n        }\n\n        for (char c : s1.toCharArray()) {\n            freqMap1.put(c, freqMap1.getOrDefault(c, 0) + 1);\n        }\n\n        // Comparison of character frequencies\n        return freqMap0.equals(freqMap1);\n    }\n}\n"}
{"task_id": "Java/55", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        \n        int a = 0, b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a + b;\n            a = b;\n            b = temp;\n        }\n        \n        return b;\n    }\n}\n"}
{"task_id": "Java/56", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n     */\n    public boolean correct_bracketing(String brackets) {\n        // Input validation: Check if the input string contains only '<' and '>'\n        if (!brackets.matches(\"[<>]+\")) {\n            return false;\n        }\n\n        // Initialize a stack to keep track of unmatched opening brackets\n        Stack<Character> stack = new Stack<>();\n\n        // Traverse the string character by character\n        for (char ch : brackets.toCharArray()) {\n            if (ch == '<') {\n                // If it is an opening bracket, push it onto the stack\n                stack.push(ch);\n            } else if (ch == '>') {\n                // If it is a closing bracket, check if there is a corresponding opening bracket\n                if (stack.isEmpty() || stack.pop() != '<') {\n                    return false;\n                }\n            }\n        }\n\n        // After traversing the string, check if there are any unmatched opening brackets left\n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/57", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l == null || l.size() <= 1) {\n            return true;\n        }\n\n        boolean isIncreasing = true;\n        boolean isDecreasing = true;\n\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1)) {\n                isIncreasing = false;\n            }\n            if (l.get(i) < l.get(i + 1)) {\n                isDecreasing = false;\n            }\n        }\n\n        return isIncreasing || isDecreasing;\n    }\n}\n"}
{"task_id": "Java/58", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        // Step 1: Input Validation\n        if (l1 == null || l2 == null) {\n            return Collections.emptyList();\n        }\n\n        // Step 2: Intersection of Lists\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> resultSet = new HashSet<>();\n        \n        for (Integer num : l2) {\n            if (set1.contains(num)) {\n                resultSet.add(num);\n            }\n        }\n\n        // Step 3: Conversion to List\n        List<Integer> resultList = new ArrayList<>(resultSet);\n\n        // Step 4: Sorting\n        Collections.sort(resultList);\n\n        // Step 5: Return the Result\n        return resultList;\n    }\n}\n"}
{"task_id": "Java/59", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n     */\n    public long largest_prime_factor(long n) {\n        List<Long> primeFactors = primeFactors(n);\n        return Collections.max(primeFactors);\n    }\n\n    private boolean isPrime(long num) {\n        if (num <= 1) return false;\n        if (num == 2) return true;\n        if (num % 2 == 0) return false;\n        for (long i = 3; i <= Math.sqrt(num); i += 2) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    private List<Long> primeFactors(long n) {\n        List<Long> factors = new ArrayList<>();\n        for (long i = 2; i <= n / i; i++) {\n            while (n % i == 0) {\n                if (isPrime(i)) {\n                    factors.add(i);\n                }\n                n /= i;\n            }\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}\n"}
{"task_id": "Java/60", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n     */\n    public int sum_to_n(int n) {\n        if (n < 1) {\n            return 0;\n        }\n        return n * (n + 1) / 2;\n    }\n}\n"}
{"task_id": "Java/61", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n     */\n    public boolean correct_bracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        \n        for (char ch : brackets.toCharArray()) {\n            if (ch == '(') {\n                stack.push(ch);\n            } else if (ch == ')') {\n                if (stack.isEmpty() || stack.pop() != '(') {\n                    return false;\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/62", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        if (xs == null) {\n            throw new IllegalArgumentException(\"Input list cannot be null\");\n        }\n        \n        if (xs.isEmpty()) {\n            return Collections.emptyList();\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/63", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Input must be non-negative\");\n        }\n        \n        if (n == 0 || n == 1) {\n            return 0;\n        }\n        \n        if (n == 2) {\n            return 1;\n        }\n        \n        int[] memo = new int[n + 1];\n        memo[0] = 0;\n        memo[1] = 0;\n        memo[2] = 1;\n        \n        for (int i = 3; i <= n; i++) {\n            memo[i] = memo[i - 1] + memo[i - 2] + memo[i - 3];\n        }\n        \n        return memo[n];\n    }\n}\n"}
{"task_id": "Java/64", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n     */\n    public int vowels_count(String s) {\n        if (s == null) {\n            return 0;\n        }\n\n        s = s.toLowerCase();\n        int count = 0;\n\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            } else if (c == 'y' && i == s.length() - 1) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n}\n"}
{"task_id": "Java/65", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n     */\n    public String circular_shift(int x, int shift) {\n        // Convert the integer to a string\n        String strX = Integer.toString(x);\n        \n        // Calculate the number of digits\n        int numDigits = strX.length();\n        \n        // Adjust the shift value if necessary\n        if (shift > numDigits) {\n            // Reverse the string if shift is greater than the number of digits\n            return new StringBuilder(strX).reverse().toString();\n        }\n        \n        // Perform the circular shift\n        String shiftedPart = strX.substring(numDigits - shift);\n        String remainingPart = strX.substring(0, numDigits - shift);\n        String result = shiftedPart + remainingPart;\n        \n        // Return the final string result\n        return result;\n    }\n}\n"}
{"task_id": "Java/66", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0; // Initialize sum to 0\n        \n        // Loop through each character in the string\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i); // Get the current character\n            \n            // Check if the character is uppercase\n            if (Character.isUpperCase(ch)) {\n                sum += (int) ch; // Convert to ASCII and add to sum\n            }\n        }\n        \n        return sum; // Return the final sum\n    }\n}\n"}
{"task_id": "Java/67", "generation": "import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nclass Solution {\n    public int fruit_distribution(String s, int n) {\n        // Step 1: Extract the number of apples and oranges using regex\n        Pattern pattern = Pattern.compile(\"(\\\\d+)\\\\s*apples\\\\s*and\\\\s*(\\\\d+)\\\\s*oranges\");\n        Matcher matcher = pattern.matcher(s);\n        \n        if (matcher.find()) {\n            int apples = Integer.parseInt(matcher.group(1));\n            int oranges = Integer.parseInt(matcher.group(2));\n            \n            // Step 2: Calculate the number of mangoes\n            int mangoes = n - apples - oranges;\n            \n            // Step 3: Return the result\n            return mangoes;\n        } else {\n            // Handle the case where the input string format is incorrect\n            throw new IllegalArgumentException(\"Invalid input format\");\n        }\n    }\n}\n"}
{"task_id": "Java/68", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smallest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        // Step 1: Input Validation\n        if (arr.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        // Step 2: Initialize Variables\n        Integer smallestEven = null;\n        int smallestIndex = -1;\n\n        // Step 3: Iterate Through the List\n        for (int i = 0; i < arr.size(); i++) {\n            int current = arr.get(i);\n\n            // Step 4: Check for Even Numbers\n            if (current % 2 == 0) {\n                // Step 5: Update Smallest Even Number and Index\n                if (smallestEven == null || current < smallestEven) {\n                    smallestEven = current;\n                    smallestIndex = i;\n                } else if (current == smallestEven && i < smallestIndex) {\n                    smallestIndex = i;\n                }\n            }\n        }\n\n        // Step 6: Return the Result\n        if (smallestEven == null) {\n            return new ArrayList<>();\n        } else {\n            return Arrays.asList(smallestEven, smallestIndex);\n        }\n    }\n}\n"}
{"task_id": "Java/69", "generation": "import java.util.*;\n\nclass Solution {\n    public int search(List<Integer> lst) {\n        // Step 1: Input Validation\n        if (lst == null || lst.isEmpty()) {\n            return -1;\n        }\n\n        // Step 2: Frequency Counting\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n\n        // Step 3: Finding the Greatest Integer with Sufficient Frequency\n        int maxValidInteger = -1;\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int num = entry.getKey();\n            int freq = entry.getValue();\n            if (freq >= num && num > maxValidInteger) {\n                maxValidInteger = num;\n            }\n        }\n\n        // Step 4: Return the Result\n        return maxValidInteger;\n    }\n}\n"}
{"task_id": "Java/70", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        // Step 1: Input Validation\n        if (lst == null) {\n            return new ArrayList<Integer>();\n        }\n        if (lst.isEmpty()) {\n            return lst;\n        }\n\n        // Step 2: Sorting the List\n        Collections.sort(lst);\n\n        // Step 3: Alternating Extraction\n        List<Integer> result = new ArrayList<>();\n        int left = 0;\n        int right = lst.size() - 1;\n        boolean isMin = true;\n\n        while (left <= right) {\n            if (isMin) {\n                result.add(lst.get(left));\n                left++;\n            } else {\n                result.add(lst.get(right));\n                right--;\n            }\n            isMin = !isMin;\n        }\n\n        // Step 4: Return the Result\n        return result;\n    }\n}\n"}
{"task_id": "Java/71", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n     */\n    public double triangle_area(double a, double b, double c) {\n        if (!isValidTriangle(a, b, c)) {\n            return -1;\n        }\n        \n        double area = calculateTriangleArea(a, b, c);\n        return Math.round(area * 100.0) / 100.0;\n    }\n    \n    private boolean isValidTriangle(double a, double b, double c) {\n        return (a + b > c) && (a + c > b) && (b + c > a);\n    }\n    \n    private double calculateTriangleArea(double a, double b, double c) {\n        double s = (a + b + c) / 2;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n}\n"}
{"task_id": "Java/72", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean will_it_fly(List<Integer> q, int w) {\n        // Step 1: Input Validation\n        if (q == null) {\n            return false;\n        }\n\n        // Step 2: Check if the List is Palindromic\n        boolean isPalindrome = isPalindromic(q);\n\n        // Step 3: Calculate the Sum of the List Elements\n        int sum = calculateSum(q);\n\n        // Step 4: Compare the Sum with the Maximum Weight\n        boolean isSumValid = isSumWithinLimit(sum, w);\n\n        // Step 5: Combine the Results\n        return isPalindrome && isSumValid;\n    }\n\n    private boolean isPalindromic(List<Integer> q) {\n        int left = 0;\n        int right = q.size() - 1;\n        while (left < right) {\n            if (!q.get(left).equals(q.get(right))) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    private int calculateSum(List<Integer> q) {\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n        return sum;\n    }\n\n    private boolean isSumWithinLimit(int sum, int w) {\n        return sum <= w;\n    }\n}\n"}
{"task_id": "Java/73", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallest_change(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallest_change(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallest_change(List<Integer> arr) {\n        // Input validation\n        if (arr == null || arr.size() == 0) {\n            throw new IllegalArgumentException(\"Input array cannot be null or empty\");\n        }\n\n        // Initialize the change counter\n        int changes = 0;\n\n        // Iterate through the array\n        int n = arr.size();\n        for (int i = 0; i < n / 2; i++) {\n            // Compare elements from both ends\n            if (!arr.get(i).equals(arr.get(n - 1 - i))) {\n                // Increment the change counter if elements do not match\n                changes++;\n            }\n        }\n\n        // Return the number of changes required\n        return changes;\n    }\n}\n"}
{"task_id": "Java/74", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match(Arrays.asList(), Arrays.asList()) -> []\n    total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    total_match(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        int totalChars1 = calculateTotalChars(lst1);\n        int totalChars2 = calculateTotalChars(lst2);\n        \n        if (totalChars1 <= totalChars2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n\n    private int calculateTotalChars(List<String> lst) {\n        int total = 0;\n        for (String str : lst) {\n            total += str.length();\n        }\n        return total;\n    }\n}\n"}
{"task_id": "Java/75", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that the prime number is less then 100.\n    Example:\n    is_multiply_prime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean is_multiply_prime(int a) {\n        if (a <= 0) return false;\n\n        List<Integer> primes = generatePrimes(100);\n        int n = primes.size();\n\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (primes.get(i) * primes.get(j) * primes.get(k) == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    private List<Integer> generatePrimes(int limit) {\n        boolean[] isPrime = new boolean[limit];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = isPrime[1] = false;\n\n        for (int i = 2; i * i < limit; i++) {\n            if (isPrime[i]) {\n                for (int j = i * i; j < limit; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < limit; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n            }\n        }\n\n        return primes;\n    }\n}\n"}
{"task_id": "Java/76", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n     */\n    public boolean is_simple_power(int x, int n) {\n        // Input validation: Ensure x and n are positive integers\n        if (x <= 0 || n <= 0) {\n            return false;\n        }\n\n        // Special case handling: n = 1\n        if (n == 1) {\n            return x == 1;\n        }\n\n        // Special case handling: x = 1\n        if (x == 1) {\n            return true;\n        }\n\n        // Power calculation loop\n        int power = 1;\n        while (power < x) {\n            power *= n;\n            if (power == x) {\n                return true;\n            }\n        }\n\n        // If the loop completes without finding a match, return false\n        return false;\n    }\n}\n"}
{"task_id": "Java/77", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        // Step 1: Calculate the cube root of 'a'\n        double cubeRoot = Math.cbrt(a);\n        \n        // Step 2: Check if the cube root is an integer\n        int intCubeRoot = (int) cubeRoot;\n        \n        // Step 3: Compare the integer cube root to the original cube root\n        return Math.pow(intCubeRoot, 3) == a;\n    }\n}\n"}
{"task_id": "Java/78", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hex_key(String num) {\n        // Step 1: Define the set of prime hexadecimal digits\n        Set<Character> primeHexDigits = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        // Step 2: Initialize the prime count\n        int primeCount = 0;\n        \n        // Step 3: Iterate through each character in the input string\n        for (char ch : num.toCharArray()) {\n            // Step 4: Convert the character to its decimal equivalent\n            int decimalValue = Character.digit(ch, 16);\n            \n            // Step 5: Check if the decimal value is prime\n            if (primeHexDigits.contains(ch) || isPrime(decimalValue)) {\n                primeCount++;\n            }\n        }\n        \n        // Step 6: Return the count of prime digits\n        return primeCount;\n    }\n    \n    // Helper function to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num < 2) return false;\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/79", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   // returns \"db1111db\"\n    decimal_to_binary(32)   // returns \"db100000db\"\n     */\n    public String decimal_to_binary(int decimal) {\n        // Step 1: Convert decimal to binary\n        StringBuilder binary = new StringBuilder();\n        while (decimal > 0) {\n            binary.append(decimal % 2);\n            decimal /= 2;\n        }\n        binary.reverse();\n\n        // Step 2: Format the binary string\n        String binaryString = binary.toString();\n        String formattedBinary = \"db\" + binaryString + \"db\";\n\n        // Step 3: Return the result\n        return formattedBinary;\n    }\n}\n"}
{"task_id": "Java/80", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => false\n    is_happy(aa) => false\n    is_happy(abcd) => true\n    is_happy(aabb) => false\n    is_happy(adb) => true\n    is_happy(xyy) => false\n     */\n    public boolean is_happy(String s) {\n        if (s == null || s.length() < 3) {\n            return false;\n        }\n\n        for (int i = 0; i < s.length() - 2; i++) {\n            char first = s.charAt(i);\n            char second = s.charAt(i + 1);\n            char third = s.charAt(i + 2);\n\n            if (first == second || first == third || second == third) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/81", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        // Step 1: Define the GPA to Letter Grade mapping\n        Map<Double, String> gradeMap = new HashMap<>();\n        gradeMap.put(4.0, \"A+\");\n        gradeMap.put(3.7, \"A\");\n        gradeMap.put(3.3, \"A-\");\n        gradeMap.put(3.0, \"B+\");\n        gradeMap.put(2.7, \"B\");\n        gradeMap.put(2.3, \"B-\");\n        gradeMap.put(2.0, \"C+\");\n        gradeMap.put(1.7, \"C\");\n        gradeMap.put(1.3, \"C-\");\n        gradeMap.put(1.0, \"D+\");\n        gradeMap.put(0.7, \"D\");\n        gradeMap.put(0.0, \"D-\");\n        gradeMap.put(-0.1, \"E\"); // Assuming any GPA below 0.0 is considered \"E\"\n\n        // Step 2: Initialize the result list\n        List<String> letterGrades = new ArrayList<>();\n\n        // Step 3: Iterate through the list of GPAs and convert each to a letter grade\n        for (Double gpa : grades) {\n            String letterGrade = \"E\"; // Default to \"E\" if GPA is below 0.0\n            for (Map.Entry<Double, String> entry : gradeMap.entrySet()) {\n                if (gpa >= entry.getKey()) {\n                    letterGrade = entry.getValue();\n                    break;\n                }\n            }\n            letterGrades.add(letterGrade);\n        }\n\n        // Step 4: Return the result\n        return letterGrades;\n    }\n}\n"}
{"task_id": "Java/82", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    prime_length(\"Hello\") == true\n    prime_length(\"abcdcba\") == true\n    prime_length(\"kittens\") == true\n    prime_length(\"orange\") == false\n     */\n    public boolean prime_length(String string) {\n        int length = string.length();\n        return isPrime(length);\n    }\n\n    private boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/83", "generation": "import java.util.*;\n\nclass Solution {\n    public int starts_one_ends(int n) {\n        // Step 1: Validate input\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\");\n        }\n\n        // Step 2: Determine the range of n-digit numbers\n        int min = (int) Math.pow(10, n - 1);\n        int max = (int) Math.pow(10, n) - 1;\n\n        // Step 3: Generate numbers starting with '1'\n        Set<Integer> numbers = new HashSet<>();\n        for (int i = min; i <= max; i++) {\n            if (i / min == 1) { // Check if the number starts with '1'\n                numbers.add(i);\n            }\n        }\n\n        // Step 4: Generate numbers ending with '1'\n        for (int i = min; i <= max; i++) {\n            if (i % 10 == 1) { // Check if the number ends with '1'\n                numbers.add(i);\n            }\n        }\n\n        // Step 5: Count the unique numbers\n        return numbers.size();\n    }\n}\n"}
{"task_id": "Java/84", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return in binary the total sum of its digits.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        // Step 1: Convert the integer N to a string to easily access each digit\n        String numStr = Integer.toString(N);\n        \n        // Step 2: Initialize a sum variable\n        int sum = 0;\n        \n        // Step 3: Iterate through each character in the string representation of N\n        for (char ch : numStr.toCharArray()) {\n            // Convert the character to an integer and add it to the sum\n            sum += Character.getNumericValue(ch);\n        }\n        \n        // Step 4: Convert the sum to a binary string\n        String binarySum = Integer.toBinaryString(sum);\n        \n        // Step 5: Return the binary string as the final output\n        return binarySum;\n    }\n}\n"}
{"task_id": "Java/85", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 != 0 && lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/86", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle(\"Hi\") returns \"Hi\"\n    anti_shuffle(\"hello\") returns \"ehllo\"\n    anti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String anti_shuffle(String s) {\n        // Step 1.1: Split the input string into words using spaces as delimiters\n        String[] words = s.split(\" \");\n        \n        // Step 1.2: Store the words in a list while preserving the order of words and spaces\n        List<String> wordList = new ArrayList<>(Arrays.asList(words));\n        \n        // Step 2.1 to 2.4: For each word in the list, sort its characters in ascending order\n        for (int i = 0; i < wordList.size(); i++) {\n            String word = wordList.get(i);\n            char[] charArray = word.toCharArray();\n            Arrays.sort(charArray);\n            wordList.set(i, new String(charArray));\n        }\n        \n        // Step 3.1: Join the list of sorted words back into a single string with preserved spaces\n        String result = String.join(\" \", wordList);\n        \n        // Step 3.2: Return the reconstructed string as the final output\n        return result;\n    }\n}\n"}
{"task_id": "Java/87", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        // Step 1: Initialize an empty list to store coordinates\n        List<List<Integer>> coordinates = new ArrayList<>();\n        \n        // Step 2: Iterate through the list to find occurrences of x\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    coordinates.add(Arrays.asList(i, j));\n                }\n            }\n        }\n        \n        // Step 3: Sort the coordinates\n        Collections.sort(coordinates, (a, b) -> {\n            if (a.get(0).equals(b.get(0))) {\n                return b.get(1).compareTo(a.get(1)); // Sort columns in descending order\n            }\n            return a.get(0).compareTo(b.get(0)); // Sort rows in ascending order\n        });\n        \n        // Step 4: Return the sorted list of coordinates\n        return coordinates;\n    }\n}\n"}
{"task_id": "Java/88", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array(Arrays.asList()) => []\n    * sort_array(Arrays.asList(5)) => [5]\n    * sort_array(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sort_array(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sort_array(List<Integer> array) {\n        if (array.isEmpty()) {\n            return Collections.emptyList();\n        }\n        \n        if (array.size() == 1) {\n            return new ArrayList<>(array);\n        }\n        \n        int firstElement = array.get(0);\n        int lastElement = array.get(array.size() - 1);\n        int sum = firstElement + lastElement;\n        \n        List<Integer> copiedList = new ArrayList<>(array);\n        \n        if (sum % 2 == 0) {\n            Collections.sort(copiedList, Collections.reverseOrder());\n        } else {\n            Collections.sort(copiedList);\n        }\n        \n        return copiedList;\n    }\n}\n"}
{"task_id": "Java/89", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        StringBuilder encrypted = new StringBuilder();\n        int shift = 4; // The number of places to shift each character\n\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                char base = Character.isLowerCase(c) ? 'a' : 'A';\n                c = (char) (base + (c - base + shift) % 26);\n            }\n            encrypted.append(c);\n        }\n\n        return encrypted.toString();\n    }\n}\n"}
{"task_id": "Java/90", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    next_smallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    next_smallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    next_smallest(Arrays.asList()) == Optional.empty\n    next_smallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        // Step 1.1: Check if the list is empty\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n\n        // Step 1.2: Check if the list has fewer than 2 distinct elements\n        Set<Integer> distinctElements = new HashSet<>(lst);\n        if (distinctElements.size() < 2) {\n            return Optional.empty();\n        }\n\n        // Step 2.1: Initialize smallest and secondSmallest\n        Integer smallest = null;\n        Integer secondSmallest = null;\n\n        // Step 2.2: Find the smallest element\n        for (Integer num : lst) {\n            if (smallest == null || num < smallest) {\n                smallest = num;\n            }\n        }\n\n        // Step 2.3: Find the second smallest element\n        for (Integer num : lst) {\n            if (!num.equals(smallest)) {\n                if (secondSmallest == null || num < secondSmallest) {\n                    secondSmallest = num;\n                }\n            }\n        }\n\n        // Step 3.1: If secondSmallest is found, return it wrapped in an Optional\n        if (secondSmallest != null) {\n            return Optional.of(secondSmallest);\n        }\n\n        // Step 3.2: If secondSmallest is not found, return Optional.empty()\n        return Optional.empty();\n    }\n}\n"}
{"task_id": "Java/91", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?', or '!'.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int is_bored(String S) {\n        // Step 1: Read the input string S\n        if (S == null || S.isEmpty()) {\n            return 0;\n        }\n\n        // Step 2: Split the input string S into individual sentences using delimiters '.', '?', and '!'\n        String[] sentences = S.split(\"[.?!]\");\n\n        // Step 3: Store the segmented sentences in a list\n        List<String> sentenceList = new ArrayList<>(Arrays.asList(sentences));\n\n        // Step 4: Iterate through the list of sentences and check if each sentence starts with the word \"I\"\n        int boredomCount = 0;\n        for (String sentence : sentenceList) {\n            // Trim leading and trailing whitespace\n            sentence = sentence.trim();\n\n            // Step 5: If a sentence starts with \"I\", mark it as a \"boredom\"\n            if (sentence.startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n\n        // Step 6: Count the number of sentences marked as \"boredoms\"\n        // Step 7: Return the count of \"boredoms\" as the result\n        return boredomCount;\n    }\n}\n"}
{"task_id": "Java/92", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) -> true\n\n    any_int(3, 2, 2) -> false\n\n    any_int(3, -2, 1) -> true\n\n    any_int(3.6, -2.2, 2) -> false\n     */\n    public boolean any_int(Object x, Object y, Object z) {\n        // Step 1: Input Validation\n        if (!(x instanceof Integer) || !(y instanceof Integer) || !(z instanceof Integer)) {\n            return false;\n        }\n\n        // Step 2: Convert to integers\n        int intX = (int) x;\n        int intY = (int) y;\n        int intZ = (int) z;\n\n        // Step 3: Sum Calculation and Comparison\n        if (intX + intY == intZ || intX + intZ == intY || intY + intZ == intX) {\n            return true;\n        }\n\n        // Step 4: Return Result\n        return false;\n    }\n}\n"}
{"task_id": "Java/93", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        StringBuilder encodedMessage = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            char swappedCaseChar = swapCase(c);\n            char replacedVowelChar = replaceVowel(swappedCaseChar);\n            encodedMessage.append(replacedVowelChar);\n        }\n        return encodedMessage.toString();\n    }\n\n    private char swapCase(char c) {\n        if (Character.isUpperCase(c)) {\n            return Character.toLowerCase(c);\n        } else if (Character.isLowerCase(c)) {\n            return Character.toUpperCase(c);\n        } else {\n            return c;\n        }\n    }\n\n    private char replaceVowel(char c) {\n        if (isVowel(c)) {\n            char base = Character.isUpperCase(c) ? 'A' : 'a';\n            return (char) (base + (c - base + 2) % 26);\n        } else {\n            return c;\n        }\n    }\n\n    private boolean isVowel(char c) {\n        return \"aeiouAEIOU\".indexOf(c) != -1;\n    }\n}\n"}
{"task_id": "Java/94", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int largestPrime = findLargestPrime(lst);\n        if (largestPrime == -1) {\n            return 0; // No prime found\n        }\n        return sumOfDigits(largestPrime);\n    }\n\n    private boolean isPrime(int num) {\n        if (num < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private int findLargestPrime(List<Integer> lst) {\n        int largestPrime = -1;\n        for (int num : lst) {\n            if (isPrime(num) && num > largestPrime) {\n                largestPrime = num;\n            }\n        }\n        return largestPrime;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/95", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings and all keys are in lower case or  in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        // Step 1: Check if the map is empty\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        // Step 2: Check if all keys are strings\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n        }\n\n        // Step 3: Check if all keys are either all lowercase or all uppercase\n        boolean allLowercase = true;\n        boolean allUppercase = true;\n        for (Object key : dict.keySet()) {\n            String strKey = (String) key;\n            if (!strKey.equals(strKey.toLowerCase())) {\n                allLowercase = false;\n            }\n            if (!strKey.equals(strKey.toUpperCase())) {\n                allUppercase = false;\n            }\n            if (!allLowercase && !allUppercase) {\n                return false;\n            }\n        }\n\n        // Step 4: Return the result\n        return allLowercase || allUppercase;\n    }\n}\n"}
{"task_id": "Java/96", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> count_up_to(int n) {\n        if (n < 2) {\n            return new ArrayList<>();\n        }\n        \n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        \n        return primes;\n    }\n    \n    private boolean isPrime(int num) {\n        if (num < 2) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/97", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        // Step 1: Extract unit digits\n        int unitDigitA = Math.abs(a) % 10;\n        int unitDigitB = Math.abs(b) % 10;\n        \n        // Step 2: Compute the product of the unit digits\n        int product = unitDigitA * unitDigitB;\n        \n        // Step 3: Return the result\n        return product;\n    }\n}\n"}
{"task_id": "Java/98", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper(\"aBCdEf\") returns 1\n    count_upper(\"abcdefg\") returns 0\n    count_upper(\"dBBE\") returns 0\n     */    \n    public int count_upper(String s) {\n        int counter = 0;\n        String uppercaseVowels = \"AEIOU\";\n        \n        for (int i = 0; i < s.length(); i += 2) {\n            char ch = s.charAt(i);\n            if (uppercaseVowels.indexOf(ch) != -1) {\n                counter++;\n            }\n        }\n        \n        return counter;\n    }\n}\n"}
{"task_id": "Java/99", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int closest_integer(String value) {\n        // Step 1: Input Validation\n        if (!value.matches(\"-?\\\\d+(\\\\.\\\\d+)?\")) {\n            throw new IllegalArgumentException(\"Invalid input: \" + value);\n        }\n\n        // Step 2: Conversion\n        double number = Double.parseDouble(value);\n\n        // Step 3: Rounding Logic\n        double rounded = Math.round(number);\n\n        // Check if the number is equidistant from two integers\n        if (Math.abs(number - rounded) == 0.5) {\n            if (number > 0) {\n                rounded = Math.ceil(number);\n            } else {\n                rounded = Math.floor(number);\n            }\n        }\n\n        // Step 4: Return the Result\n        return (int) rounded;\n    }\n}\n"}
{"task_id": "Java/100", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> make_a_pile(int n) {\n        // Step 1: Input Validation\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\");\n        }\n\n        // Step 2: Initialize the List\n        List<Integer> stoneCounts = new ArrayList<>();\n\n        // Step 3: Generate Stone Counts\n        int currentStoneCount = n;\n        for (int i = 0; i < n; i++) {\n            stoneCounts.add(currentStoneCount);\n            currentStoneCount += 2; // Next odd or even number\n        }\n\n        // Step 4: Return the Result\n        return stoneCounts;\n    }\n}\n"}
{"task_id": "Java/101", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> words_string(String s) {\n        // Step 1: Input Validation\n        if (s == null || s.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        // Step 2: Delimiter Handling and Tokenization\n        String[] tokens = s.split(\"\\\\s+|,\\\\s*\");\n\n        // Step 3: Result Compilation\n        List<String> result = new ArrayList<>();\n        for (String token : tokens) {\n            result.add(token.trim());\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/102", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n     */\n    public int choose_num(int x, int y) {\n        // Step 1: Input Validation\n        if (x <= 0 || y <= 0 || x > y) {\n            return -1;\n        }\n\n        // Step 2: Identify the Range\n        List<Integer> range = new ArrayList<>();\n        for (int i = x; i <= y; i++) {\n            range.add(i);\n        }\n\n        // Step 3: Filter Even Numbers\n        List<Integer> evenNumbers = new ArrayList<>();\n        for (int num : range) {\n            if (num % 2 == 0) {\n                evenNumbers.add(num);\n            }\n        }\n\n        // Step 4: Find the Maximum Even Number\n        if (evenNumbers.isEmpty()) {\n            return -1;\n        } else {\n            int maxEven = Collections.max(evenNumbers);\n            return maxEven;\n        }\n    }\n}\n"}
{"task_id": "Java/103", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"1111\"\n    rounded_avg(20, 33) => \"11011\"\n     */\n    public Object rounded_avg(int n, int m) {\n        // Step 1: Input Validation\n        if (n > m) {\n            return -1;\n        }\n\n        // Step 2: Sum Calculation\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n\n        // Step 3: Count Calculation\n        int count = m - n + 1;\n\n        // Step 4: Average Calculation\n        double average = (double) sum / count;\n\n        // Step 5: Rounding\n        int roundedAverage = (int) Math.round(average);\n\n        // Step 6: Binary Conversion\n        String binaryResult = Integer.toBinaryString(roundedAverage);\n\n        // Step 7: Return the Result\n        return binaryResult;\n    }\n}\n"}
{"task_id": "Java/104", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> unique_digits(List<Integer> x) {\n        // Step 1: Filter out numbers with even digits\n        List<Integer> result = new ArrayList<>();\n        for (int num : x) {\n            if (!containsEvenDigit(num)) {\n                result.add(num);\n            }\n        }\n        \n        // Step 2: Sort the result\n        Collections.sort(result);\n        \n        // Step 3: Return the sorted list\n        return result;\n    }\n    \n    private boolean containsEvenDigit(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return true;\n            }\n            num /= 10;\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/105", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> by_length(List<Integer> arr) {\n        // Step 1: Filter valid numbers\n        List<Integer> validNumbers = filterValidNumbers(arr);\n        \n        // Step 2: Sort the list\n        List<Integer> sortedList = sortList(validNumbers);\n        \n        // Step 3: Reverse the sorted list\n        List<Integer> reversedList = reverseList(sortedList);\n        \n        // Step 4: Map numbers to names\n        List<String> result = mapNumbersToNames(reversedList);\n        \n        // Step 5: Return the result\n        return result;\n    }\n    \n    private List<Integer> filterValidNumbers(List<Integer> arr) {\n        List<Integer> validNumbers = new ArrayList<>();\n        for (int num : arr) {\n            if (num >= 1 && num <= 9) {\n                validNumbers.add(num);\n            }\n        }\n        return validNumbers;\n    }\n    \n    private List<Integer> sortList(List<Integer> arr) {\n        Collections.sort(arr);\n        return arr;\n    }\n    \n    private List<Integer> reverseList(List<Integer> arr) {\n        Collections.reverse(arr);\n        return arr;\n    }\n    \n    private List<String> mapNumbersToNames(List<Integer> arr) {\n        Map<Integer, String> numberToName = new HashMap<>();\n        numberToName.put(1, \"One\");\n        numberToName.put(2, \"Two\");\n        numberToName.put(3, \"Three\");\n        numberToName.put(4, \"Four\");\n        numberToName.put(5, \"Five\");\n        numberToName.put(6, \"Six\");\n        numberToName.put(7, \"Seven\");\n        numberToName.put(8, \"Eight\");\n        numberToName.put(9, \"Nine\");\n        \n        List<String> result = new ArrayList<>();\n        for (int num : arr) {\n            result.add(numberToName.get(num));\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/106", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sum(i));\n            }\n        }\n        \n        return result;\n    }\n    \n    private int factorial(int i) {\n        int fact = 1;\n        for (int j = 1; j <= i; j++) {\n            fact *= j;\n        }\n        return fact;\n    }\n    \n    private int sum(int i) {\n        int sum = 0;\n        for (int j = 1; j <= i; j++) {\n            sum += j;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/107", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> even_odd_palindrome(int n) {\n        // Initialize counters for even and odd palindromes\n        int evenCount = 0;\n        int oddCount = 0;\n\n        // Loop through each number from 1 to n\n        for (int i = 1; i <= n; i++) {\n            // Check if the number is a palindrome\n            if (isPalindrome(i)) {\n                // Classify the palindrome as even or odd\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        // Return the result as a list\n        return Arrays.asList(evenCount, oddCount);\n    }\n\n    // Helper method to check if a number is a palindrome\n    private boolean isPalindrome(int num) {\n        String str = Integer.toString(num);\n        String reverseStr = new StringBuilder(str).reverse().toString();\n        return str.equals(reverseStr);\n    }\n}\n"}
{"task_id": "Java/108", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums(Arrays.asList()) == 0\n    >>> count_nums(Arrays.asList(-1, 11, -11)) == 1\n    >>> count_nums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int count_nums(List<Integer> arr) {\n        int count = 0;\n        for (int num : arr) {\n            int sumOfDigits = 0;\n            int temp = Math.abs(num); // Work with the absolute value\n            while (temp > 0) {\n                if (num < 0) {\n                    sumOfDigits -= temp % 10; // Subtract for negative digits\n                } else {\n                    sumOfDigits += temp % 10;\n                }\n                temp /= 10;\n            }\n            if (sumOfDigits > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/109", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    move_one_ball(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean move_one_ball(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        List<Integer> sortedArr = new ArrayList<>(arr);\n        Collections.sort(sortedArr);\n\n        List<Integer> doubledArr = new ArrayList<>(arr);\n        doubledArr.addAll(arr); // Concatenate the array with itself\n\n        for (int i = 0; i <= arr.size(); i++) {\n            List<Integer> subArray = doubledArr.subList(i, i + arr.size());\n            if (subArray.equals(sortedArr)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n"}
{"task_id": "Java/110", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Step 1: Count odd elements in lst1\n        int oddCountInLst1 = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCountInLst1++;\n            }\n        }\n        \n        // Step 2: Count even elements in lst2\n        int evenCountInLst2 = 0;\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCountInLst2++;\n            }\n        }\n        \n        // Step 3: Check feasibility\n        if (evenCountInLst2 >= oddCountInLst1) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}\n"}
{"task_id": "Java/111", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        // Step 1.1: Check if the input string is empty. If it is, return an empty Map.\n        if (test.isEmpty()) {\n            return new HashMap<>();\n        }\n\n        // Step 1.2: Split the input string by spaces to get an array of letters.\n        String[] letters = test.split(\" \");\n\n        // Step 2.1: Initialize a HashMap<String, Integer> to store the count of each letter.\n        Map<String, Integer> letterCounts = new HashMap<>();\n\n        // Step 2.2: Iterate through the array of letters and update the count for each letter in the HashMap.\n        for (String letter : letters) {\n            letterCounts.put(letter, letterCounts.getOrDefault(letter, 0) + 1);\n        }\n\n        // Step 3.1: Initialize a variable to keep track of the maximum count found (maxCount).\n        int maxCount = 0;\n\n        // Step 3.2: Iterate through the entries in the HashMap to find the highest count.\n        for (int count : letterCounts.values()) {\n            if (count > maxCount) {\n                maxCount = count;\n            }\n        }\n\n        // Step 4.1: Initialize a HashMap<String, Integer> to store the result.\n        Map<String, Integer> result = new HashMap<>();\n\n        // Step 4.2: Iterate through the entries in the HashMap again, this time adding letters with the maximum count to the result Map.\n        for (Map.Entry<String, Integer> entry : letterCounts.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n\n        // Step 4.3: Return the result Map.\n        return result;\n    }\n}\n"}
{"task_id": "Java/112", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Object> reverse_delete(String s, String c) {\n        // Step 1: Remove characters from s that are in c\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                result.append(ch);\n            }\n        }\n        \n        // Step 2: Check if the resulting string is a palindrome\n        String resultStr = result.toString();\n        boolean isPalindrome = resultStr.equals(new StringBuilder(resultStr).reverse().toString());\n        \n        // Step 3: Return the result as a tuple\n        List<Object> resultList = new ArrayList<>();\n        resultList.add(resultStr);\n        resultList.add(isPalindrome);\n        return resultList;\n    }\n}\n"}
{"task_id": "Java/113", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> odd_count(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        \n        for (String str : lst) {\n            int oddCount = 0;\n            \n            for (char ch : str.toCharArray()) {\n                if (isOddDigit(ch)) {\n                    oddCount++;\n                }\n            }\n            \n            String formattedString = String.format(\"the number of odd elements %dn the str%dng %d of the %dnput.\", oddCount, oddCount, oddCount, oddCount);\n            result.add(formattedString);\n        }\n        \n        return result;\n    }\n    \n    private boolean isOddDigit(char ch) {\n        return ch == '1' || ch == '3' || ch == '5' || ch == '7' || ch == '9';\n    }\n}\n"}
{"task_id": "Java/114", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        if (nums == null || nums.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list cannot be null or empty\");\n        }\n\n        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n\n        for (int num : nums) {\n            currentSum = Math.min(num, currentSum + num);\n            minSum = Math.min(minSum, currentSum);\n        }\n\n        return minSum;\n    }\n}\n"}
{"task_id": "Java/115", "generation": "import java.util.*;\n\nclass Solution {\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        // Step 1: Input Validation\n        if (grid == null || grid.isEmpty()) {\n            return 0;\n        }\n        \n        int totalExtractions = 0;\n        \n        // Step 2: Water Extraction Calculation\n        for (List<Integer> row : grid) {\n            int waterUnits = Collections.frequency(row, 1);\n            int extractions = (int) Math.ceil((double) waterUnits / capacity);\n            totalExtractions += extractions;\n        }\n        \n        // Step 3: Output the Result\n        return totalExtractions;\n    }\n}\n"}
{"task_id": "Java/116", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sort_array(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 4, 3, 5))\n    >>> sort_array(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-4, -2, -6, -5, -3))\n    >>> sort_array(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 4, 3))\n     */\n    public List<Integer> sort_array(List<Integer> arr) {\n        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int countA = countOnesInBinary(a);\n                int countB = countOnesInBinary(b);\n                \n                if (countA != countB) {\n                    return Integer.compare(countA, countB);\n                } else {\n                    return Integer.compare(a, b);\n                }\n            }\n        });\n        return arr;\n    }\n\n    private int countOnesInBinary(int num) {\n        return Integer.bitCount(num);\n    }\n}\n"}
{"task_id": "Java/117", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> select_words(String s, int n) {\n        if (s.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        List<String> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n\n        for (String word : words) {\n            if (countConsonants(word) == n) {\n                result.add(word);\n            }\n        }\n\n        return result;\n    }\n\n    private int countConsonants(String word) {\n        int count = 0;\n        for (char c : word.toCharArray()) {\n            if (isConsonant(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isConsonant(char c) {\n        c = Character.toLowerCase(c);\n        return \"bcdfghjklmnpqrstvwxyz\".indexOf(c) != -1;\n    }\n}\n"}
{"task_id": "Java/118", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n     */\n    public String get_closest_vowel(String word) {\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        Set<Character> consonants = new HashSet<>(Arrays.asList('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z',\n                                                                'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'));\n        \n        int n = word.length();\n        for (int i = n - 2; i > 0; i--) {\n            char current = word.charAt(i);\n            if (vowels.contains(current)) {\n                char prev = word.charAt(i - 1);\n                char next = word.charAt(i + 1);\n                if (consonants.contains(prev) && consonants.contains(next)) {\n                    return String.valueOf(current);\n                }\n            }\n        }\n        \n        return \"\";\n    }\n}\n"}
{"task_id": "Java/119", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    match_parens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    match_parens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String match_parens(List<String> lst) {\n        // Step 1: Count parentheses in both strings\n        int open1 = countOpenParentheses(lst.get(0));\n        int close1 = countCloseParentheses(lst.get(0));\n        int open2 = countOpenParentheses(lst.get(1));\n        int close2 = countCloseParentheses(lst.get(1));\n\n        // Step 2: Check if total open and close parentheses are equal\n        if (open1 + open2 != close1 + close2) {\n            return \"No\";\n        }\n\n        // Step 3: Concatenate and validate\n        String concat1 = lst.get(0) + lst.get(1);\n        String concat2 = lst.get(1) + lst.get(0);\n\n        if (isBalanced(concat1) || isBalanced(concat2)) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n\n    // Helper methods\n    private int countOpenParentheses(String s) {\n        int count = 0;\n        for (char c : s.toCharArray()) {\n            if (c == '(') {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private int countCloseParentheses(String s) {\n        int count = 0;\n        for (char c : s.toCharArray()) {\n            if (c == ')') {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isBalanced(String s) {\n        int balance = 0;\n        for (char c : s.toCharArray()) {\n            if (c == '(') {\n                balance++;\n            } else if (c == ')') {\n                balance--;\n            }\n            if (balance < 0) {\n                return false;\n            }\n        }\n        return balance == 0;\n    }\n}\n"}
{"task_id": "Java/120", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr, in ascending order.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Step 1: Input Validation\n        if (arr == null || k < 0 || k > arr.size()) {\n            throw new IllegalArgumentException(\"Invalid input\");\n        }\n\n        // Step 2: Extract the Top k Elements using Priority Queue (Min-Heap)\n        PriorityQueue<Integer> minHeap = new PriorityQueue<>();\n        for (int num : arr) {\n            minHeap.offer(num);\n            if (minHeap.size() > k) {\n                minHeap.poll();\n            }\n        }\n\n        // Step 3: Sort the Top k Elements (already in ascending order in the min-heap)\n        List<Integer> result = new ArrayList<>(minHeap);\n\n        // Step 4: Return the Result\n        return result;\n    }\n}\n"}
{"task_id": "Java/121", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        \n        // Iterate through the list, considering only even positions\n        for (int i = 0; i < lst.size(); i += 2) {\n            // Check if the element at the current even position is odd\n            if (lst.get(i) % 2 != 0) {\n                // Add the odd element to the sum\n                sum += lst.get(i);\n            }\n        }\n        \n        // Return the final sum\n        return sum;\n    }\n}\n"}
{"task_id": "Java/122", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int add_elements(List<Integer> arr, int k) {\n        // Step 1: Input Validation\n        if (arr.size() < 1 || arr.size() > 100 || k < 1 || k > arr.size()) {\n            throw new IllegalArgumentException(\"Invalid input\");\n        }\n\n        // Step 2: Extract the first k elements\n        List<Integer> firstKElements = arr.subList(0, k);\n\n        // Step 3: Filter elements with at most two digits\n        int sum = 0;\n        for (int num : firstKElements) {\n            if (Math.abs(num) < 100) {\n                sum += num;\n            }\n        }\n\n        // Step 4: Return the result\n        return sum;\n    }\n}\n"}
{"task_id": "Java/123", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> get_odd_collatz(int n) {\n        if (n == 1) {\n            return Collections.singletonList(1);\n        }\n\n        List<Integer> collatzSequence = generateCollatzSequence(n);\n        List<Integer> oddNumbers = filterOddNumbers(collatzSequence);\n        sortList(oddNumbers);\n\n        return oddNumbers;\n    }\n\n    private List<Integer> generateCollatzSequence(int n) {\n        List<Integer> sequence = new ArrayList<>();\n        while (n != 1) {\n            sequence.add(n);\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n        }\n        sequence.add(1); // Add the final 1 to the sequence\n        return sequence;\n    }\n\n    private List<Integer> filterOddNumbers(List<Integer> sequence) {\n        List<Integer> oddNumbers = new ArrayList<>();\n        for (int num : sequence) {\n            if (num % 2 != 0) {\n                oddNumbers.add(num);\n            }\n        }\n        return oddNumbers;\n    }\n\n    private void sortList(List<Integer> oddNumbers) {\n        Collections.sort(oddNumbers);\n    }\n}\n"}
{"task_id": "Java/124", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    valid_date(\"03-11-2000\") => true\n    valid_date(\"15-01-2012\") => false\n    valid_date(\"04-0-2040\") => false\n    valid_date(\"06-04-2020\") => true\n    valid_date(\"06/04/2020\") => false\n     */\n    public boolean valid_date(String date) {\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        // Check if the date matches the format mm-dd-yyyy\n        if (!date.matches(\"\\\\d{2}-\\\\d{2}-\\\\d{4}\")) {\n            return false;\n        }\n\n        String[] parts = date.split(\"-\");\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\n        // Validate month\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        // Validate day based on month\n        if (day < 1) {\n            return false;\n        }\n\n        switch (month) {\n            case 1: case 3: case 5: case 7: case 8: case 10: case 12:\n                if (day > 31) {\n                    return false;\n                }\n                break;\n            case 4: case 6: case 9: case 11:\n                if (day > 30) {\n                    return false;\n                }\n                break;\n            case 2:\n                if (isLeapYear(year)) {\n                    if (day > 29) {\n                        return false;\n                    }\n                } else {\n                    if (day > 28) {\n                        return false;\n                    }\n                }\n                break;\n        }\n\n        return true;\n    }\n\n    private boolean isLeapYear(int year) {\n        if (year % 4 == 0) {\n            if (year % 100 == 0) {\n                return year % 400 == 0;\n            }\n            return true;\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/125", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n     */\n    public Object split_words(String txt) {\n        if (txt == null) {\n            return null;\n        }\n\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\"\\\\s+\"));\n        }\n\n        if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        }\n\n        int oddCount = 0;\n        for (char c : txt.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                int index = c - 'a';\n                if (index % 2 != 0) {\n                    oddCount++;\n                }\n            }\n        }\n\n        return oddCount;\n    }\n}\n"}
{"task_id": "Java/126", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If the a number appears more than twice, return false. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted(Arrays.asList(5)) -> true\n    is_sorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    is_sorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    is_sorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    is_sorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    is_sorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean is_sorted(List<Integer> lst) {\n        // Step 1: Input Validation\n        if (lst == null) {\n            return false;\n        }\n\n        // Step 2: Sorting Check\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n        }\n\n        // Step 3: Duplicate Check\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (int num : lst) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n            if (countMap.get(num) > 2) {\n                return false;\n            }\n        }\n\n        // Step 4: Final Decision\n        return true;\n    }\n}\n"}
{"task_id": "Java/127", "generation": "import java.util.*;\n\nclass Solution {\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // Step 1: Validate input\n        if (interval1.size() != 2 || interval2.size() != 2) {\n            throw new IllegalArgumentException(\"Intervals must be lists of two integers.\");\n        }\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        \n        if (start1 > end1 || start2 > end2) {\n            throw new IllegalArgumentException(\"Start of interval must be less than or equal to end.\");\n        }\n\n        // Step 2: Calculate intersection\n        int maxStart = Math.max(start1, start2);\n        int minEnd = Math.min(end1, end2);\n        \n        if (maxStart > minEnd) {\n            return \"NO\"; // No intersection\n        }\n\n        // Step 3: Calculate length of intersection\n        int intersectionLength = (minEnd - maxStart) + 1;\n        \n        if (intersectionLength == 0) {\n            return \"NO\"; // Intersection is a single point\n        }\n\n        // Step 4: Check if length is prime\n        if (isPrime(intersectionLength)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    // Helper function to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/128", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prod_signs(Arrays.asList(0, 1)) == 0\n    >>> prod_signs(Arrays.asList()) == None\n     */\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int signProduct = 1;\n        int sumOfMagnitudes = 0;\n\n        for (int num : arr) {\n            if (num == 0) {\n                signProduct = 0;\n                break;\n            }\n            if (num < 0) {\n                signProduct *= -1;\n            }\n            sumOfMagnitudes += Math.abs(num);\n        }\n\n        return Optional.of(sumOfMagnitudes * signProduct);\n    }\n}\n"}
{"task_id": "Java/129", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        // Step 1: Input validation\n        validateInput(grid, k);\n        \n        // Step 2: Initialize data structures\n        int N = grid.size();\n        List<Integer> minPath = null;\n        \n        // Step 3: Generate paths\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < N; j++) {\n                List<Integer> currentPath = new ArrayList<>();\n                currentPath.add(grid.get(i).get(j));\n                minPath = generatePaths(grid, currentPath, i, j, k, minPath);\n            }\n        }\n        \n        // Step 5: Return the result\n        return minPath;\n    }\n    \n    private List<Integer> generatePaths(List<List<Integer>> grid, List<Integer> currentPath, int x, int y, int k, List<Integer> minPath) {\n        int N = grid.size();\n        \n        // If the current path length is k, compare and update minPath\n        if (currentPath.size() == k) {\n            if (minPath == null || comparePaths(currentPath, minPath) < 0) {\n                return new ArrayList<>(currentPath);\n            }\n            return minPath;\n        }\n        \n        // Explore neighbors\n        int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n        for (int[] dir : directions) {\n            int newX = x + dir[0];\n            int newY = y + dir[1];\n            \n            if (newX >= 0 && newX < N && newY >= 0 && newY < N) {\n                currentPath.add(grid.get(newX).get(newY));\n                minPath = generatePaths(grid, currentPath, newX, newY, k, minPath);\n                currentPath.remove(currentPath.size() - 1);\n            }\n        }\n        \n        return minPath;\n    }\n    \n    private int comparePaths(List<Integer> path1, List<Integer> path2) {\n        for (int i = 0; i < path1.size(); i++) {\n            if (path1.get(i) < path2.get(i)) {\n                return -1;\n            } else if (path1.get(i) > path2.get(i)) {\n                return 1;\n            }\n        }\n        return 0;\n    }\n    \n    private void validateInput(List<List<Integer>> grid, int k) {\n        int N = grid.size();\n        if (N < 2 || k < 1) {\n            throw new IllegalArgumentException(\"Invalid input: N must be >= 2 and k must be >= 1\");\n        }\n        \n        Set<Integer> uniqueValues = new HashSet<>();\n        for (List<Integer> row : grid) {\n            if (row.size() != N) {\n                throw new IllegalArgumentException(\"Invalid grid: Each row must have N columns\");\n            }\n            for (int value : row) {\n                if (value < 1 || value > N * N || !uniqueValues.add(value)) {\n                    throw new IllegalArgumentException(\"Invalid grid: Values must be unique and in the range [1, N * N]\");\n                }\n            }\n        }\n    }\n}\n"}
{"task_id": "Java/130", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n        List<Integer> sequence = new ArrayList<>();\n        \n        // Base case\n        sequence.add(3);\n        \n        // Generate the sequence\n        for (int i = 2; i <= n; i++) {\n            int value;\n            if (i % 2 == 0) {\n                // Even case\n                value = 1 + i / 2;\n            } else {\n                // Odd case\n                value = sequence.get(i - 2) + sequence.get(i - 3) + sequence.get(i - 1);\n            }\n            sequence.add(value);\n        }\n        \n        return sequence;\n    }\n}\n"}
{"task_id": "Java/131", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        // Convert the integer to a string to iterate over each digit\n        String numStr = Integer.toString(n);\n        \n        // Initialize the product to 1 (neutral element for multiplication)\n        int product = 1;\n        boolean hasOddDigit = false;\n        \n        // Iterate over each character in the string\n        for (char ch : numStr.toCharArray()) {\n            int digit = ch - '0'; // Convert character to integer\n            \n            // Check if the digit is odd\n            if (digit % 2 == 1) {\n                product *= digit; // Multiply the product by the odd digit\n                hasOddDigit = true;\n            }\n        }\n        \n        // If no odd digits were found, return 0\n        if (!hasOddDigit) {\n            return 0;\n        }\n        \n        // Return the product of odd digits\n        return product;\n    }\n}\n"}
{"task_id": "Java/132", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    is_nested(\"[[]]\") -> true\n    is_nested(\"[]]]]]]][[[[[]\") -> false\n    is_nested(\"[][]\") -> false\n    is_nested(\"[]\") -> false\n    is_nested(\"[[][]]\") -> true\n    is_nested(\"[[]][[\") -> true\n     */\n    public boolean is_nested(String string) {\n        // Step 1: Input Validation\n        for (char c : string.toCharArray()) {\n            if (c != '[' && c != ']') {\n                return false;\n            }\n        }\n        \n        // Step 2: Stack-Based Validation and Nesting Check\n        Stack<Character> stack = new Stack<>();\n        int nestingDepth = 0;\n        \n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.pop() != '[') {\n                    return false;\n                }\n                nestingDepth++;\n                if (nestingDepth > 1) {\n                    return true;\n                }\n            }\n        }\n        \n        // Step 3: Final Decision\n        return false;\n    }\n}\n"}
{"task_id": "Java/133", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sum_squares(List<Double> lst) {\n        // Step 2: Rounding to Ceiling\n        List<Double> roundedList = new ArrayList<>();\n        for (Double num : lst) {\n            roundedList.add(Math.ceil(num));\n        }\n\n        // Step 3: Squaring the Rounded Values\n        List<Double> squaredList = new ArrayList<>();\n        for (Double num : roundedList) {\n            squaredList.add(num * num);\n        }\n\n        // Step 4: Summing the Squared Values\n        int sum = 0;\n        for (Double num : squaredList) {\n            sum += num;\n        }\n\n        // Step 5: Returning the Result\n        return sum;\n    }\n}\n"}
{"task_id": "Java/134", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") -> false\n    check_if_last_char_is_a_letter(\"apple pi e\") -> true\n    check_if_last_char_is_a_letter(\"apple pi e \") -> false\n    check_if_last_char_is_a_letter(\"\") -> false\n     */\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        // Step 1: Input Validation\n        if (txt.isEmpty()) {\n            return false;\n        }\n\n        // Step 2: Extract the Last Character\n        char lastChar = txt.charAt(txt.length() - 1);\n\n        // Step 3: Alphabetical Check\n        if (!Character.isLetter(lastChar)) {\n            return false;\n        }\n\n        // Step 4: Word Boundary Check\n        String[] words = txt.split(\" \");\n        String lastWord = words[words.length - 1];\n\n        // Check if the last character is part of the last word\n        if (lastWord.length() == 1 && lastWord.charAt(0) == lastChar) {\n            return true;\n        }\n\n        // Step 5: Combine Results\n        return false;\n    }\n}\n"}
{"task_id": "Java/135", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange(Arrays.asList(1,2,4,3,5)) = 3\n    can_arrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int can_arrange(List<Integer> arr) {\n        int maxIndex = -1;\n        \n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                maxIndex = i;\n            }\n        }\n        \n        return maxIndex;\n    }\n}\n"}
{"task_id": "Java/136", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largest_smallest_integers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largest_smallest_integers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        if (lst == null || lst.isEmpty()) {\n            return Arrays.asList(Optional.empty(), Optional.empty());\n        }\n\n        List<Integer> negatives = new ArrayList<>();\n        List<Integer> positives = new ArrayList<>();\n\n        for (Integer num : lst) {\n            if (num < 0) {\n                negatives.add(num);\n            } else if (num > 0) {\n                positives.add(num);\n            }\n        }\n\n        Optional<Integer> largestNegative = negatives.isEmpty() ? Optional.empty() : Optional.of(Collections.max(negatives));\n        Optional<Integer> smallestPositive = positives.isEmpty() ? Optional.empty() : Optional.of(Collections.min(positives));\n\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n}\n"}
{"task_id": "Java/137", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) -> Optional.of(2.5)\n    compare_one(1, \"2,3\") -> Optional.of(\"2,3\")\n    compare_one(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compare_one(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compare_one(Object a, Object b) {\n        // Step 1: Convert inputs to floats for comparison\n        float floatA = convertToFloat(a);\n        float floatB = convertToFloat(b);\n\n        // Step 2: Compare the floats\n        if (floatA > floatB) {\n            return Optional.of(a);\n        } else if (floatB > floatA) {\n            return Optional.of(b);\n        } else {\n            return Optional.empty();\n        }\n    }\n\n    private float convertToFloat(Object obj) {\n        if (obj instanceof String) {\n            String str = (String) obj;\n            str = str.replace(\",\", \".\"); // Handle both . and , as decimal separators\n            return Float.parseFloat(str);\n        } else if (obj instanceof Integer) {\n            return ((Integer) obj).floatValue();\n        } else if (obj instanceof Float) {\n            return (Float) obj;\n        } else {\n            throw new IllegalArgumentException(\"Unsupported type\");\n        }\n    }\n}\n"}
{"task_id": "Java/138", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == false\n    is_equal_to_sum_even(6) == false\n    is_equal_to_sum_even(8) == true\n     */\n    public boolean is_equal_to_sum_even(int n) {\n        // Early exit for invalid cases\n        if (n < 8) {\n            return false;\n        }\n\n        // Generate positive even numbers up to n\n        List<Integer> evenNumbers = new ArrayList<>();\n        for (int i = 2; i <= n; i += 2) {\n            evenNumbers.add(i);\n        }\n\n        // Generate combinations of four numbers and check their sum\n        int size = evenNumbers.size();\n        for (int i = 0; i < size; i++) {\n            for (int j = i + 1; j < size; j++) {\n                for (int k = j + 1; k < size; k++) {\n                    for (int l = k + 1; l < size; l++) {\n                        if (evenNumbers.get(i) + evenNumbers.get(j) + evenNumbers.get(k) + evenNumbers.get(l) == n) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n\n        // No valid combination found\n        return false;\n    }\n}\n"}
{"task_id": "Java/139", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long special_factorial(int n) {\n        if (n == 0 || n == 1) {\n            return 1;\n        }\n        \n        long result = 1;\n        for (int i = n; i > 0; i--) {\n            result *= factorial(i);\n        }\n        \n        return result;\n    }\n    \n    private long factorial(int k) {\n        if (k == 0 || k == 1) {\n            return 1;\n        }\n        \n        long fact = 1;\n        for (int i = 2; i <= k; i++) {\n            fact *= i;\n        }\n        \n        return fact;\n    }\n}\n"}
{"task_id": "Java/140", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fix_spaces(String text) {\n        if (text == null || text.isEmpty()) {\n            return text;\n        }\n\n        // Step 2.1: Replace single spaces with underscores\n        String withUnderscores = text.replace(\" \", \"_\");\n\n        // Step 3.1 and 3.2: Replace sequences of more than 2 consecutive underscores with a hyphen\n        String result = withUnderscores.replaceAll(\"_{2,}\", \"-\");\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/141", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String file_name_check(String file_name) {\n        // Step 1: Check for null input\n        if (file_name == null) return \"No\";\n\n        // Step 2: Count digits\n        int digitCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n                if (digitCount > 3) return \"No\";\n            }\n        }\n\n        // Step 3: Check for exactly one dot\n        int dotCount = file_name.length() - file_name.replace(\".\", \"\").length();\n        if (dotCount != 1) return \"No\";\n\n        // Step 4: Validate substring before the dot\n        int dotIndex = file_name.indexOf('.');\n        String namePart = file_name.substring(0, dotIndex);\n        if (namePart.isEmpty() || !Character.isLetter(namePart.charAt(0))) return \"No\";\n\n        // Step 5: Validate substring after the dot\n        String extensionPart = file_name.substring(dotIndex + 1);\n        if (!Arrays.asList(\"txt\", \"exe\", \"dll\").contains(extensionPart)) return \"No\";\n\n        // Step 6: All checks passed\n        return \"Yes\";\n    }\n}\n"}
{"task_id": "Java/142", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sum_squares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int element = lst.get(i);\n            if (i % 3 == 0) {\n                element = element * element;\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                element = element * element * element;\n            }\n            sum += element;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/143", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String words_in_sentence(String sentence) {\n        // Step 1: Parse the Input String\n        String[] words = sentence.split(\" \");\n        \n        // Step 2: Filter Words by Prime Length\n        List<String> primeLengthWords = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                primeLengthWords.add(word);\n            }\n        }\n        \n        // Step 3: Reconstruct the Output String\n        return String.join(\" \", primeLengthWords);\n    }\n    \n    // Helper function to check if a number is prime\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/144", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Step 1: Parse the input strings\n        String[] partsX = x.split(\"/\");\n        String[] partsN = n.split(\"/\");\n        \n        int numerator1 = Integer.parseInt(partsX[0]);\n        int denominator1 = Integer.parseInt(partsX[1]);\n        int numerator2 = Integer.parseInt(partsN[0]);\n        int denominator2 = Integer.parseInt(partsN[1]);\n        \n        // Step 2: Multiply the fractions\n        int productNumerator = numerator1 * numerator2;\n        int productDenominator = denominator1 * denominator2;\n        \n        // Step 3: Simplify the resulting fraction\n        int gcd = gcd(productNumerator, productDenominator);\n        productNumerator /= gcd;\n        productDenominator /= gcd;\n        \n        // Step 4: Check if the result is a whole number\n        return productDenominator == 1;\n    }\n\n    // Helper method to compute the GCD using Euclidean algorithm\n    private int gcd(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}\n"}
{"task_id": "Java/145", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n    If an integer is negative, then its first digit will be negative:\n    e.g. -123 has digits -1, 2, and 3.\n\n    For example:\n    >>> order_by_points(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> order_by_points(Arrays.asList()) == []\n     */\n    public List<Integer> order_by_points(List<Integer> nums) {\n        // Create a list of pairs (index, digit sum)\n        List<Map.Entry<Integer, Integer>> indexedDigitSums = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int digitSum = calculateDigitSum(nums.get(i));\n            indexedDigitSums.add(new AbstractMap.SimpleEntry<>(i, digitSum));\n        }\n\n        // Sort the list based on digit sums and original indices\n        indexedDigitSums.sort(Comparator\n            .comparingInt((Map.Entry<Integer, Integer> entry) -> entry.getValue())\n            .thenComparingInt(Map.Entry::getKey)\n        );\n\n        // Create the sorted list based on the sorted indexedDigitSums\n        List<Integer> sortedList = new ArrayList<>(nums.size());\n        for (Map.Entry<Integer, Integer> entry : indexedDigitSums) {\n            sortedList.add(nums.get(entry.getKey()));\n        }\n\n        return sortedList;\n    }\n\n    // Function to calculate the sum of digits of a number\n    private int calculateDigitSum(int num) {\n        int sum = 0;\n        boolean isNegative = num < 0;\n        num = Math.abs(num);\n        \n        while (num > 0) {\n            int digit = num % 10;\n            if (isNegative) {\n                digit = -digit;\n                isNegative = false; // Only the first digit should be negative\n            }\n            sum += digit;\n            num /= 10;\n        }\n        \n        return sum;\n    }\n}\n"}
{"task_id": "Java/146", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        \n        for (int num : nums) {\n            if (num > 10) {\n                String numStr = String.valueOf(Math.abs(num));\n                int firstDigit = Character.getNumericValue(numStr.charAt(0));\n                int lastDigit = Character.getNumericValue(numStr.charAt(numStr.length() - 1));\n                \n                if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/147", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int get_max_triples(int n) {\n        int[] a = generateArray(n);\n        List<List<Integer>> triples = findTriples(a);\n        return countValidTriples(triples);\n    }\n\n    private int[] generateArray(int n) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = (i + 1) * (i + 1) - (i + 1) + 1;\n        }\n        return a;\n    }\n\n    private List<List<Integer>> findTriples(int[] a) {\n        List<List<Integer>> triples = new ArrayList<>();\n        int n = a.length;\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    triples.add(Arrays.asList(a[i], a[j], a[k]));\n                }\n            }\n        }\n        return triples;\n    }\n\n    private boolean isMultipleOfThree(int sum) {\n        return sum % 3 == 0;\n    }\n\n    private int countValidTriples(List<List<Integer>> triples) {\n        int count = 0;\n        for (List<Integer> triple : triples) {\n            int sum = triple.get(0) + triple.get(1) + triple.get(2);\n            if (isMultipleOfThree(sum)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/148", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    private static final List<String> PLANETS = Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    );\n\n    public List<String> bf(String planet1, String planet2) {\n        int index1 = PLANETS.indexOf(planet1);\n        int index2 = PLANETS.indexOf(planet2);\n\n        if (index1 == -1 || index2 == -1) {\n            return Collections.emptyList();\n        }\n\n        int start = Math.min(index1, index2);\n        int end = Math.max(index1, index2);\n\n        return PLANETS.subList(start + 1, end);\n    }\n}\n"}
{"task_id": "Java/149", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert sorted_list_sum(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert sorted_list_sum(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> sorted_list_sum(List<String> lst) {\n        // Filter out strings with odd lengths\n        List<String> filteredList = lst.stream()\n                                       .filter(s -> s.length() % 2 == 0)\n                                       .collect(Collectors.toList());\n        \n        // Sort the filtered list by length (ascending) and then alphabetically if lengths are equal\n        Collections.sort(filteredList, Comparator.comparingInt(String::length)\n                                                 .thenComparing(Comparator.naturalOrder()));\n        \n        // Return the sorted list\n        return filteredList;\n    }\n}\n"}
{"task_id": "Java/150", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n     */\n    public int x_or_y(int n, int x, int y) {\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/151", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    double_the_difference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    double_the_difference(Arrays.asList(-1, -2, 0)) == 0\n    double_the_difference(Arrays.asList(9, -2)) == 81\n    double_the_difference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int double_the_difference(List<Object> lst) {\n        // Step 1: Input Validation\n        if (lst.isEmpty()) {\n            return 0;\n        }\n\n        int sumOfSquares = 0;\n\n        // Step 2: Filtering and Processing\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                if (num > 0 && num % 2 != 0) {\n                    sumOfSquares += num * num;\n                }\n            }\n        }\n\n        // Step 3: Return the Result\n        return sumOfSquares;\n    }\n}\n"}
{"task_id": "Java/152", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        // Input validation\n        if (game.size() != guess.size()) {\n            throw new IllegalArgumentException(\"Input lists must be of the same length.\");\n        }\n\n        // Initialize the result list\n        List<Integer> result = new ArrayList<>(game.size());\n\n        // Comparison loop\n        for (int i = 0; i < game.size(); i++) {\n            int gameScore = game.get(i);\n            int guessScore = guess.get(i);\n            if (gameScore == guessScore) {\n                result.add(0);\n            } else {\n                result.add(Math.abs(gameScore - guessScore));\n            }\n        }\n\n        // Return the result list\n        return result;\n    }\n}\n"}
{"task_id": "Java/153", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.Strongest_Extension.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        // Step 1: Initialize variables\n        int maxStrength = Integer.MIN_VALUE;\n        String strongestExtension = \"\";\n\n        // Step 2: Iterate through each extension\n        for (String extension : extensions) {\n            int strength = calculateStrength(extension);\n\n            // Step 3: Compare strengths\n            if (strength > maxStrength || (strength == maxStrength && extensions.indexOf(extension) < extensions.indexOf(strongestExtension))) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        // Step 4: Format the output\n        return class_name + \".\" + strongestExtension;\n    }\n\n    // Helper method to calculate the strength of an extension\n    private int calculateStrength(String extension) {\n        int CAP = 0;\n        int SM = 0;\n\n        // Count uppercase and lowercase letters\n        for (char c : extension.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                CAP++;\n            } else if (Character.isLowerCase(c)) {\n                SM++;\n            }\n        }\n\n        // Return the strength\n        return CAP - SM;\n    }\n}\n"}
{"task_id": "Java/154", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => false\n    cycpattern_check(\"hello\",\"ell\") => true\n    cycpattern_check(\"whassup\",\"psus\") => false\n    cycpattern_check(\"abab\",\"baa\") => true\n    cycpattern_check(\"efef\",\"eeff\") => false\n    cycpattern_check(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpattern_check(String a, String b) {\n        List<String> rotations = generateRotations(b);\n        return isSubstring(a, rotations);\n    }\n\n    private List<String> generateRotations(String b) {\n        List<String> rotations = new ArrayList<>();\n        int len = b.length();\n        for (int i = 0; i < len; i++) {\n            String rotation = b.substring(i) + b.substring(0, i);\n            rotations.add(rotation);\n        }\n        return rotations;\n    }\n\n    private boolean isSubstring(String a, List<String> rotations) {\n        for (String rotation : rotations) {\n            if (a.contains(rotation)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/155", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n     */\n    public List<Integer> even_odd_count(int num) {\n        // Convert the input to its absolute value to ignore the negative sign\n        num = Math.abs(num);\n        \n        // Initialize counters for even and odd digits\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        // Extract each digit from the number\n        while (num > 0) {\n            int digit = num % 10; // Get the last digit\n            if (digit % 2 == 0) {\n                evenCount++; // Increment even count if the digit is even\n            } else {\n                oddCount++; // Increment odd count if the digit is odd\n            }\n            num /= 10; // Remove the last digit\n        }\n        \n        // Compile the counts into a list\n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        \n        // Return the list with the counts\n        return result;\n    }\n}\n"}
{"task_id": "Java/156", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == \"xix\"\n    >>> int_to_mini_roman(152) == \"clii\"\n    >>> int_to_mini_roman(426) == \"cdxxvi\"\n     */\n    public String int_to_mini_roman(int number) {\n        // Step 1: Define the mapping of integers to Roman numerals\n        Map<Integer, String> romanMap = new HashMap<>();\n        romanMap.put(1000, \"m\");\n        romanMap.put(900, \"cm\");\n        romanMap.put(500, \"d\");\n        romanMap.put(400, \"cd\");\n        romanMap.put(100, \"c\");\n        romanMap.put(90, \"xc\");\n        romanMap.put(50, \"l\");\n        romanMap.put(40, \"xl\");\n        romanMap.put(10, \"x\");\n        romanMap.put(9, \"ix\");\n        romanMap.put(5, \"v\");\n        romanMap.put(4, \"iv\");\n        romanMap.put(1, \"i\");\n\n        // Step 2: Initialize the result string\n        StringBuilder result = new StringBuilder();\n\n        // Step 3: Iterate through the mapping and construct the Roman numeral\n        for (Map.Entry<Integer, String> entry : romanMap.entrySet()) {\n            int value = entry.getKey();\n            String symbol = entry.getValue();\n            while (number >= value) {\n                result.append(symbol);\n                number -= value;\n            }\n        }\n\n        // Step 4: Convert the result to lowercase (though it's already in lowercase)\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/157", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == true\n    right_angle_triangle(1, 2, 3) == false\n     */\n    public boolean right_angle_triangle(int a, int b, int c) {\n        // Input validation: Check if the sides can form a triangle\n        if (!(a + b > c && a + c > b && b + c > a)) {\n            return false;\n        }\n\n        // Identify the hypotenuse (longest side)\n        int hypotenuse = Math.max(a, Math.max(b, c));\n\n        // Determine the other two sides\n        int side1, side2;\n        if (hypotenuse == a) {\n            side1 = b;\n            side2 = c;\n        } else if (hypotenuse == b) {\n            side1 = a;\n            side2 = c;\n        } else {\n            side1 = a;\n            side2 = b;\n        }\n\n        // Apply the Pythagorean Theorem\n        return hypotenuse * hypotenuse == side1 * side1 + side2 * side2;\n    }\n}\n"}
{"task_id": "Java/158", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String find_max(List<String> words) {\n        if (words == null || words.isEmpty()) {\n            return \"\"; // or throw an exception, depending on the requirement\n        }\n\n        int maxUniqueCount = 0;\n        String resultString = \"\";\n\n        for (String word : words) {\n            int uniqueCount = calculateUniqueCharacters(word);\n            if (uniqueCount > maxUniqueCount) {\n                maxUniqueCount = uniqueCount;\n                resultString = word;\n            } else if (uniqueCount == maxUniqueCount) {\n                if (resultString.isEmpty() || word.compareTo(resultString) < 0) {\n                    resultString = word;\n                }\n            }\n        }\n\n        return resultString;\n    }\n\n    private int calculateUniqueCharacters(String word) {\n        Set<Character> uniqueChars = new HashSet<>();\n        for (char c : word.toCharArray()) {\n            uniqueChars.add(c);\n        }\n        return uniqueChars.size();\n    }\n}\n"}
{"task_id": "Java/159", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        // Input validation\n        if (number < 0 || number > 1000 || need < 0 || need > 1000 || remaining < 0 || remaining > 1000) {\n            throw new IllegalArgumentException(\"Input values must be within the range [0, 1000]\");\n        }\n\n        // Calculate total carrots eaten\n        int totalEaten = number + need;\n\n        // Determine carrots left\n        int carrotsLeft = Math.max(remaining - totalEaten, 0);\n\n        // Return the result\n        return Arrays.asList(totalEaten, carrotsLeft);\n    }\n}\n"}
{"task_id": "Java/160", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        // Step 1: Input Validation\n        if (operator == null || operand == null || operator.size() != operand.size() - 1) {\n            throw new IllegalArgumentException(\"Invalid input lists\");\n        }\n        for (int num : operand) {\n            if (num < 0) {\n                throw new IllegalArgumentException(\"Operands must be non-negative integers\");\n            }\n        }\n\n        // Step 2: Expression Construction\n        StringBuilder expression = new StringBuilder();\n        for (int i = 0; i < operand.size(); i++) {\n            expression.append(operand.get(i));\n            if (i < operator.size()) {\n                expression.append(\" \").append(operator.get(i)).append(\" \");\n            }\n        }\n\n        // Step 3: Expression Evaluation\n        try {\n            return evaluateExpression(expression.toString());\n        } catch (ArithmeticException e) {\n            throw new IllegalArgumentException(\"Invalid expression: \" + e.getMessage());\n        }\n    }\n\n    // Helper method to evaluate the expression\n    private int evaluateExpression(String expression) {\n        // Use a stack to evaluate the expression respecting the order of operations\n        Stack<Integer> operands = new Stack<>();\n        Stack<String> operators = new Stack<>();\n        String[] tokens = expression.split(\" \");\n\n        for (String token : tokens) {\n            if (isOperator(token)) {\n                while (!operators.isEmpty() && hasPrecedence(token, operators.peek())) {\n                    operands.push(applyOperation(operators.pop(), operands.pop(), operands.pop()));\n                }\n                operators.push(token);\n            } else {\n                operands.push(Integer.parseInt(token));\n            }\n        }\n\n        while (!operators.isEmpty()) {\n            operands.push(applyOperation(operators.pop(), operands.pop(), operands.pop()));\n        }\n\n        return operands.pop();\n    }\n\n    private boolean isOperator(String token) {\n        return token.equals(\"+\") || token.equals(\"-\") || token.equals(\"*\") || token.equals(\"/\") || token.equals(\"**\");\n    }\n\n    private boolean hasPrecedence(String op1, String op2) {\n        if (op2.equals(\"**\")) return true;\n        if ((op1.equals(\"*\") || op1.equals(\"/\")) && (op2.equals(\"+\") || op2.equals(\"-\"))) return true;\n        return false;\n    }\n\n    private int applyOperation(String operator, int b, int a) {\n        switch (operator) {\n            case \"+\":\n                return a + b;\n            case \"-\":\n                return a - b;\n            case \"*\":\n                return a * b;\n            case \"/\":\n                if (b == 0) throw new ArithmeticException(\"Division by zero\");\n                return a / b;\n            case \"**\":\n                return (int) Math.pow(a, b);\n        }\n        return 0;\n    }\n}\n"}
{"task_id": "Java/161", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        if (s == null) {\n            throw new IllegalArgumentException(\"Input string cannot be null\");\n        }\n\n        StringBuilder result = new StringBuilder();\n        boolean hasLetters = false;\n\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                hasLetters = true;\n                if (Character.isUpperCase(c)) {\n                    result.append(Character.toLowerCase(c));\n                } else {\n                    result.append(Character.toUpperCase(c));\n                }\n            } else {\n                result.append(c);\n            }\n        }\n\n        if (!hasLetters) {\n            result.reverse();\n        }\n\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/162", "generation": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        // Step 1: Input Validation\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        // Step 2: MD5 Hash Calculation\n        MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n        byte[] hashBytes = digest.digest(text.getBytes());\n\n        // Step 3: Convert byte array to hexadecimal string\n        StringBuilder hexString = new StringBuilder();\n        for (byte b : hashBytes) {\n            hexString.append(String.format(\"%02x\", b));\n        }\n\n        // Step 4: Ensure the string is 32 characters long\n        if (hexString.length() != 32) {\n            throw new IllegalStateException(\"MD5 hash should be 32 characters long.\");\n        }\n\n        // Step 5: Return the result wrapped in an Optional\n        return Optional.of(hexString.toString());\n    }\n}\n"}
{"task_id": "Java/163", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order. Please note that the even digits refer to even numbers less than 10.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n     */\n    public List<Integer> generate_integers(int a, int b) {\n        // Input validation: Ensure a and b are positive integers\n        if (a <= 0 || b <= 0) {\n            return Collections.emptyList();\n        }\n\n        // Determine the range: Ensure the range is from the smaller to the larger number\n        int start = Math.min(a, b);\n        int end = Math.max(a, b);\n\n        // Set to store unique even digits\n        Set<Integer> evenDigits = new HashSet<>();\n\n        // Extract digits and filter even digits\n        for (int num = start; num <= end; num++) {\n            int temp = num;\n            while (temp > 0) {\n                int digit = temp % 10;\n                if (digit % 2 == 0 && digit < 10) {\n                    evenDigits.add(digit);\n                }\n                temp /= 10;\n            }\n        }\n\n        // Convert the Set to a List and sort it\n        List<Integer> result = new ArrayList<>(evenDigits);\n        Collections.sort(result);\n\n        return result;\n    }\n}\n"}
