{"task_id": "CPP/0", "generation": "#include<stdio.h>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nbool has_close_elements(vector<float> numbers, float threshold) {\n    // Get the size of the vector\n    int n = numbers.size();\n    \n    // Iterate through each pair of numbers\n    for (int i = 0; i < n; ++i) {\n        for (int j = i + 1; j < n; ++j) {\n            // Calculate the absolute difference between numbers[i] and numbers[j]\n            float diff = abs(numbers[i] - numbers[j]);\n            \n            // Check if the difference is less than the threshold\n            if (diff < threshold) {\n                return true;\n            }\n        }\n    }\n    \n    // If no such pair is found, return false\n    return false;\n}\n\n"}
{"task_id": "CPP/1", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <stack>\n\nusing namespace std;\n\nvector<string> separate_paren_groups(string paren_string) {\n    vector<string> result;\n    string current_group;\n    stack<char> s;\n    bool in_group = false;\n\n    for (char c : paren_string) {\n        if (c == ' ') {\n            continue; // Ignore spaces\n        }\n\n        if (c == '(') {\n            if (!in_group) {\n                in_group = true;\n                current_group = \"\";\n            }\n            s.push(c);\n        } else if (c == ')') {\n            if (!s.empty() && s.top() == '(') {\n                s.pop();\n                current_group += c;\n                if (s.empty()) {\n                    result.push_back(current_group);\n                    in_group = false;\n                }\n            } else {\n                // This should not happen if input is valid\n                throw invalid_argument(\"Unbalanced parentheses\");\n            }\n        } else {\n            if (in_group) {\n                current_group += c;\n            }\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/2", "generation": "#include <stdio.h>\n#include <math.h>\n\nfloat truncate_number(float number) {\n    // Extract the integer part using floor\n    float integer_part = floor(number);\n    // Subtract the integer part from the original number to get the decimal part\n    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n\n"}
{"task_id": "CPP/3", "generation": "#include<vector>\nusing namespace std;\n\nbool below_zero(vector<int> operations) {\n    int balance = 0;\n    for (int operation : operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <numeric> // for std::accumulate\n\nusing namespace std;\n\nfloat mean_absolute_deviation(const vector<float>& numbers) {\n    if (numbers.empty()) {\n        return 0.0; // Return 0 if the vector is empty to avoid division by zero\n    }\n\n    // Step 1: Calculate the mean of the dataset\n    float sum = accumulate(numbers.begin(), numbers.end(), 0.0);\n    float mean = sum / numbers.size();\n\n    // Step 2: Compute the absolute differences between each element and the mean\n    float total_deviation = 0.0;\n    for (float number : numbers) {\n        total_deviation += abs(number - mean);\n    }\n\n    // Step 3: Calculate the average of these absolute differences\n    float mad = total_deviation / numbers.size();\n\n    return mad;\n}\n\n"}
{"task_id": "CPP/5", "generation": "#include <vector>\n#include <iostream>\n\nusing namespace std;\n\nvector<int> intersperse(vector<int> numbers, int delimeter) {\n    // Check if the input vector is empty\n    if (numbers.empty()) {\n        return {};\n    }\n\n    // Create a new vector to store the result\n    vector<int> result;\n\n    // Iterate through the input vector\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        // Add the current element to the result\n        result.push_back(numbers[i]);\n\n        // If it's not the last element, add the delimiter\n        if (i < numbers.size() - 1) {\n            result.push_back(delimeter);\n        }\n    }\n\n    return result;\n}\n\n// Test the function\n"}
{"task_id": "CPP/6", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<int> parse_nested_parens(string paren_string) {\n    vector<int> result;\n    stringstream ss(paren_string);\n    string group;\n    \n    while (ss >> group) {\n        int max_depth = 0;\n        int current_depth = 0;\n        \n        for (char c : group) {\n            if (c == '(') {\n                current_depth++;\n                if (current_depth > max_depth) {\n                    max_depth = current_depth;\n                }\n            } else if (c == ')') {\n                current_depth--;\n            }\n        }\n        \n        result.push_back(max_depth);\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/7", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> filter_by_substring(vector<string> strings, string substring) {\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.find(substring) != string::npos) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/8", "generation": "#include <vector>\n#include <numeric> // For std::accumulate\n\nusing namespace std;\n\nvector<int> sum_product(const vector<int>& numbers) {\n    // Initialize sum to 0 and product to 1\n    int sum = 0;\n    int product = 1;\n\n    // Iterate through the vector to calculate sum and product\n    for (int num : numbers) {\n        sum += num;\n        product *= num;\n    }\n\n    // Return the result as a vector\n    return {sum, product};\n}\n\n// Example usage\n"}
{"task_id": "CPP/9", "generation": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<int> rolling_max(vector<int> numbers) {\n    vector<int> result;\n    if (numbers.empty()) {\n        return result; // Return an empty vector if the input is empty\n    }\n\n    int current_max = numbers[0]; // Initialize the current max with the first element\n    result.push_back(current_max); // The first element of the result is the same as the input\n\n    for (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > current_max) {\n            current_max = numbers[i]; // Update the current max if a larger element is found\n        }\n        result.push_back(current_max); // Add the current max to the result vector\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/10", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nbool is_palindrome(const string& str) {\n    // Test if given string is a palindrome\n    string s(str.rbegin(), str.rend());\n    return s == str;\n}\n\nstring make_palindrome(const string& str) {\n    // Find the shortest palindrome that begins with a supplied string\n    for (size_t i = 0; i < str.size(); ++i) {\n        // Check if the suffix from i to the end is a palindrome\n        if (is_palindrome(str.substr(i))) {\n            // If it is, append the reverse of the prefix to the end of the string\n            string prefix = str.substr(0, i);\n            reverse(prefix.begin(), prefix.end());\n            return str + prefix;\n        }\n    }\n    // If no palindromic suffix is found, append the reverse of the entire string\n    string reversed_str(str.rbegin(), str.rend());\n    return str + reversed_str;\n}\n\n"}
{"task_id": "CPP/11", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring string_xor(string a, string b) {\n    // Ensure both strings are of the same length\n    if (a.length() != b.length()) {\n        throw invalid_argument(\"Input strings must be of the same length\");\n    }\n\n    string result = \"\";\n    for (size_t i = 0; i < a.length(); ++i) {\n        // Perform XOR operation: '0' ^ '0' = '0', '1' ^ '1' = '0', '0' ^ '1' = '1', '1' ^ '0' = '1'\n        char xor_char = (a[i] == b[i]) ? '0' : '1';\n        result += xor_char;\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/12", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring longest(vector<string> strings) {\n    // Check if the vector is empty\n    if (strings.empty()) {\n        return \"\"; // Return an empty string to represent None\n    }\n\n    // Initialize variables to keep track of the longest string\n    string longest_string = strings[0];\n\n    // Iterate through the vector to find the longest string\n    for (const string& str : strings) {\n        if (str.length() > longest_string.length()) {\n            longest_string = str;\n        }\n    }\n\n    return longest_string;\n}\n\n"}
{"task_id": "CPP/13", "generation": "#include<iostream>\nusing namespace std;\n\nint greatest_common_divisor(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\n"}
{"task_id": "CPP/14", "generation": "#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> all_prefixes(string str) {\n    vector<string> prefixes;\n    for (size_t i = 1; i <= str.length(); ++i) {\n        prefixes.push_back(str.substr(0, i));\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "#include <string>\n#include <sstream>\n\nusing namespace std;\n\nstring string_sequence(int n) {\n    // Create a stringstream to build the result\n    stringstream result;\n    \n    // Loop from 0 to n inclusive\n    for (int i = 0; i <= n; ++i) {\n        // Append the number followed by a space\n        result << i << \" \";\n    }\n    \n    // Convert the stringstream to a string\n    string result_str = result.str();\n    \n    // Remove the trailing space if it exists\n    if (!result_str.empty()) {\n        result_str.pop_back();\n    }\n    \n    // Return the resulting string\n    return result_str;\n}\n"}
{"task_id": "CPP/16", "generation": "#include <iostream>\n#include <string>\n#include <unordered_set>\n#include <algorithm>\n\nusing namespace std;\n\nint count_distinct_characters(string str) {\n    // Convert the string to lowercase\n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    \n    // Use an unordered_set to store unique characters\n    unordered_set<char> unique_chars;\n    \n    // Iterate through the string and add each character to the set\n    for (char c : str) {\n        unique_chars.insert(c);\n    }\n    \n    // The size of the set is the number of distinct characters\n    return unique_chars.size();\n}\n\n"}
{"task_id": "CPP/17", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nvector<int> parse_music(string music_string) {\n    vector<int> beats;\n    size_t pos = 0;\n    string delimiter = \" \";\n\n    while ((pos = music_string.find(delimiter)) != string::npos) {\n        string token = music_string.substr(0, pos);\n        if (token == \"o\") {\n            beats.push_back(4);\n        } else if (token == \"o|\") {\n            beats.push_back(2);\n        } else if (token == \".|\") {\n            beats.push_back(1);\n        }\n        music_string.erase(0, pos + delimiter.length());\n    }\n\n    // Handle the last token\n    if (!music_string.empty()) {\n        string token = music_string;\n        if (token == \"o\") {\n            beats.push_back(4);\n        } else if (token == \"o|\") {\n            beats.push_back(2);\n        } else if (token == \".|\") {\n            beats.push_back(1);\n        }\n    }\n\n    return beats;\n}\n\n"}
{"task_id": "CPP/18", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint how_many_times(string str, string substring) {\n    int count = 0;\n    int sub_len = substring.length();\n    int str_len = str.length();\n\n    if (sub_len == 0 || str_len == 0) {\n        return 0;\n    }\n\n    for (int i = 0; i <= str_len - sub_len; ++i) {\n        if (str.substr(i, sub_len) == substring) {\n            ++count;\n        }\n    }\n\n    return count;\n}\n\n"}
{"task_id": "CPP/19", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <vector>\n#include <map>\n#include <algorithm>\n\nusing namespace std;\n\nstring sort_numbers(string numbers) {\n    // Mapping from number words to their corresponding integer values\n    map<string, int> number_map = {\n        {\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3}, {\"four\", 4},\n        {\"five\", 5}, {\"six\", 6}, {\"seven\", 7}, {\"eight\", 8}, {\"nine\", 9}\n    };\n\n    // Split the input string into individual number words\n    vector<string> number_words;\n    stringstream ss(numbers);\n    string word;\n    while (ss >> word) {\n        number_words.push_back(word);\n    }\n\n    // Sort the number words based on their integer values using the mapping\n    sort(number_words.begin(), number_words.end(), [&](const string &a, const string &b) {\n        return number_map[a] < number_map[b];\n    });\n\n    // Reconstruct the sorted string from the sorted number words\n    string sorted_numbers;\n    for (size_t i = 0; i < number_words.size(); ++i) {\n        if (i != 0) {\n            sorted_numbers += \" \";\n        }\n        sorted_numbers += number_words[i];\n    }\n\n    return sorted_numbers;\n}\n\n"}
{"task_id": "CPP/20", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\npair<float, float> find_closest_elements(vector<float> numbers) {\n    // Ensure the vector has at least two elements\n    if (numbers.size() < 2) {\n        throw invalid_argument(\"Vector must contain at least two elements.\");\n    }\n\n    // Initialize variables to store the closest pair and the smallest difference\n    pair<float, float> closest_pair = {numbers[0], numbers[1]};\n    float smallest_diff = abs(numbers[0] - numbers[1]);\n\n    // Iterate through all pairs of elements\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        for (size_t j = i + 1; j < numbers.size(); ++j) {\n            float diff = abs(numbers[i] - numbers[j]);\n            if (diff < smallest_diff) {\n                smallest_diff = diff;\n                closest_pair = {min(numbers[i], numbers[j]), max(numbers[i], numbers[j])};\n            }\n        }\n    }\n\n    return closest_pair;\n}\n\n"}
{"task_id": "CPP/21", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm> // for std::min_element and std::max_element\n\nusing namespace std;\n\nvector<float> rescale_to_unit(vector<float> numbers) {\n    // Find the minimum and maximum values in the vector\n    float min_val = *min_element(numbers.begin(), numbers.end());\n    float max_val = *max_element(numbers.begin(), numbers.end());\n\n    // Apply the linear transformation to each element\n    vector<float> rescaled_numbers;\n    for (float num : numbers) {\n        float rescaled_num = (num - min_val) / (max_val - min_val);\n        rescaled_numbers.push_back(rescaled_num);\n    }\n\n    return rescaled_numbers;\n}\n\n"}
{"task_id": "CPP/22", "generation": "#include <iostream>\n#include <vector>\n#include <list>\n#include <boost/any.hpp>\n\ntypedef std::list<boost::any> list_any;\n\nstd::vector<int> filter_integers(list_any values) {\n    std::vector<int> result;\n    for (const auto& value : values) {\n        if (value.type() == typeid(int)) {\n            result.push_back(boost::any_cast<int>(value));\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/23", "generation": "#include <iostream>\n#include <string>\n\nint strlen(const std::string& str) {\n    return str.length();\n}\n\n"}
{"task_id": "CPP/24", "generation": "#include<iostream>\nusing namespace std;\n\nint largest_divisor(int n) {\n    // Start from n-1 and go down to 1\n    for (int i = n - 1; i > 0; --i) {\n        // Check if i divides n evenly\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    // If no divisor is found (which shouldn't happen for n > 1), return 1\n    return 1;\n}\n\n"}
{"task_id": "CPP/25", "generation": "#include <vector>\n#include <iostream>\nusing namespace std;\n\nvector<int> factorize(int n) {\n    vector<int> factors;\n    // Check for number of 2s that divide n\n    while (n % 2 == 0) {\n        factors.push_back(2);\n        n = n / 2;\n    }\n    // n must be odd at this point, so we can skip even numbers\n    for (int i = 3; i * i <= n; i += 2) {\n        // While i divides n, add i and divide n\n        while (n % i == 0) {\n            factors.push_back(i);\n            n = n / i;\n        }\n    }\n    // This condition is to check if n is a prime number greater than 2\n    if (n > 2) {\n        factors.push_back(n);\n    }\n    return factors;\n}\n\n"}
{"task_id": "CPP/26", "generation": "#include <iostream>\n#include <vector>\n#include <unordered_set>\n\nusing namespace std;\n\nvector<int> remove_duplicates(vector<int> numbers) {\n    unordered_set<int> seen;\n    vector<int> result;\n\n    for (int num : numbers) {\n        if (seen.find(num) == seen.end()) {\n            // If the number is not in the set, add it to the result and mark it as seen\n            result.push_back(num);\n            seen.insert(num);\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/27", "generation": "#include <iostream>\n#include <string>\n#include <cctype> // for isupper and islower\n\nusing namespace std;\n\nstring flip_case(string str) {\n    for (char &c : str) {\n        if (isupper(c)) {\n            c = tolower(c);\n        } else if (islower(c)) {\n            c = toupper(c);\n        }\n    }\n    return str;\n}\n\n"}
{"task_id": "CPP/28", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <numeric> // for std::accumulate\n\nusing namespace std;\n\nstring concatenate(const vector<string>& strings) {\n    // Initialize an empty string to hold the result\n    string result;\n    \n    // Iterate over each string in the vector and append it to the result\n    for (const string& s : strings) {\n        result += s;\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/29", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> filter_by_prefix(vector<string> strings, string prefix) {\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.find(prefix) == 0) {  // Check if the string starts with the prefix\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/30", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm> // for std::copy_if\n\nusing namespace std;\n\nvector<float> get_positive(const vector<float>& l) {\n    vector<float> positive_numbers;\n    for (float num : l) {\n        if (num > 0) {\n            positive_numbers.push_back(num);\n        }\n    }\n    return positive_numbers;\n}\n\n"}
{"task_id": "CPP/31", "generation": "#include <cstdio>\n#include <cmath>\n\nbool is_prime(long long n) {\n    // Handle edge cases\n    if (n <= 1) return false;\n    if (n == 2) return true; // 2 is the only even prime number\n    if (n % 2 == 0) return false; // Other even numbers are not prime\n\n    // Check for factors from 3 to sqrt(n)\n    long long limit = static_cast<long long>(sqrt(n));\n    for (long long i = 3; i <= limit; i += 2) {\n        if (n % i == 0) return false;\n    }\n\n    return true;\n}\n\n"}
{"task_id": "CPP/32", "generation": "#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n\ndouble poly(vector<double> xs, double x) {\n    /* \n    Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n    */\n    double sum = 0;\n    for (int i = 0; i < xs.size(); i++) {\n        sum += xs[i] * pow(x, i);\n    }\n    return sum;\n}\n\nvector<double> poly_derivative(vector<double> xs) {\n    /* \n    Computes the derivative of the polynomial with coefficients xs.\n    */\n    vector<double> derivative;\n    for (int i = 1; i < xs.size(); i++) {\n        derivative.push_back(i * xs[i]);\n    }\n    return derivative;\n}\n\ndouble find_zero(vector<double> xs) {\n    /*\n    xs are coefficients of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only one zero point, even if there are many. \n    Moreover, find_zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution.\n    */\n    double x0 = 0.0; // Initial guess\n    double tolerance = 1e-7; // Tolerance for convergence\n    int max_iterations = 1000; // Maximum number of iterations\n\n    vector<double> derivative_xs = poly_derivative(xs);\n\n    for (int i = 0; i < max_iterations; i++) {\n        double fx = poly(xs, x0);\n        double dfx = poly(derivative_xs, x0);\n\n        if (fabs(fx) < tolerance) {\n            return x0; // Converged to a root\n        }\n\n        if (dfx == 0) {\n            // Avoid division by zero, try a different initial guess\n            x0 += 1.0;\n            continue;\n        }\n\n        x0 = x0 - fx / dfx;\n    }\n\n    // If we reach here, the method did not converge\n    printf(\"Warning: Newton-Raphson method did not converge.\\n\");\n    return x0;\n}\n\n"}
{"task_id": "CPP/33", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> sort_third(vector<int> l) {\n    // Step 1: Identify the indices divisible by three\n    vector<int> indices;\n    for (size_t i = 0; i < l.size(); ++i) {\n        if ((i + 1) % 3 == 0) {  // +1 because we are considering 1-based indexing\n            indices.push_back(i);\n        }\n    }\n\n    // Step 2: Extract the values at these indices\n    vector<int> values;\n    for (int index : indices) {\n        values.push_back(l[index]);\n    }\n\n    // Step 3: Sort the extracted values\n    sort(values.begin(), values.end());\n\n    // Step 4: Replace the original values with the sorted values\n    for (size_t i = 0; i < indices.size(); ++i) {\n        l[indices[i]] = values[i];\n    }\n\n    return l;\n}\n"}
{"task_id": "CPP/34", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> unique(vector<int> l) {\n    // Step 1: Sort the vector\n    sort(l.begin(), l.end());\n    \n    // Step 2: Remove duplicates\n    l.erase(unique(l.begin(), l.end()), l.end());\n    \n    return l;\n}\n\n"}
{"task_id": "CPP/35", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm> // for std::max_element\n\nusing namespace std;\n\nfloat max_element(const vector<float>& l) {\n    // Check if the vector is empty\n    if (l.empty()) {\n        throw invalid_argument(\"Vector is empty\");\n    }\n    \n    // Use std::max_element to find the maximum element\n    return *max_element(l.begin(), l.end());\n}\n\n"}
{"task_id": "CPP/36", "generation": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint fizz_buzz(int n) {\n    int count = 0;\n    for (int i = 0; i < n; ++i) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            string num_str = to_string(i);\n            for (char c : num_str) {\n                if (c == '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/37", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<float> sort_even(vector<float> l) {\n    // Extract values at even indices\n    vector<float> even_values;\n    for (size_t i = 0; i < l.size(); i += 2) {\n        even_values.push_back(l[i]);\n    }\n\n    // Sort the extracted values\n    sort(even_values.begin(), even_values.end());\n\n    // Reconstruct the output vector\n    vector<float> result = l;\n    size_t even_index = 0;\n    for (size_t i = 0; i < l.size(); i += 2) {\n        result[i] = even_values[even_index++];\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/38", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring decode_cyclic(string s){ \n    // returns decoded string by reversing the cycling of groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l = s.length();\n    int num = (l + 2) / 3;\n    string x, output;\n    int i;\n    for (i = 0; i * 3 < l; i++)\n    {\n        // Reverse the cycling in each group. Unless group has fewer elements than 3.\n        x = s.substr(i * 3, 3);\n        if (x.length() == 3) x = x[2] + x.substr(0, 2);\n        output = output + x;\n    }\n    return output;\n}\n"}
{"task_id": "CPP/39", "generation": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n// Function to check if a number is prime\nbool is_prime(int num) {\n    if (num <= 1) return false;\n    if (num == 2) return true;\n    if (num % 2 == 0) return false;\n    for (int i = 3; i <= sqrt(num); i += 2) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\n// Function to generate the n-th prime Fibonacci number\nint prime_fib(int n) {\n    if (n <= 0) return -1; // Invalid input\n    int a = 0, b = 1, count = 0;\n    while (true) {\n        int temp = a + b;\n        a = b;\n        b = temp;\n        if (is_prime(b)) {\n            count++;\n            if (count == n) {\n                return b;\n            }\n        }\n    }\n}\n\n// Main function to test the prime_fib function\n"}
{"task_id": "CPP/40", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nbool triples_sum_to_zero(vector<int> l) {\n    // Sort the vector\n    sort(l.begin(), l.end());\n    \n    int n = l.size();\n    \n    // Iterate through the vector\n    for (int i = 0; i < n - 2; ++i) {\n        // Skip duplicates for the first element\n        if (i > 0 && l[i] == l[i - 1]) continue;\n        \n        int left = i + 1;\n        int right = n - 1;\n        \n        while (left < right) {\n            int sum = l[i] + l[left] + l[right];\n            \n            if (sum == 0) {\n                return true;\n            } else if (sum < 0) {\n                // Move the left pointer to the right to increase the sum\n                ++left;\n            } else {\n                // Move the right pointer to the left to decrease the sum\n                --right;\n            }\n        }\n    }\n    \n    return false;\n}\n\n// Example usage\n"}
{"task_id": "CPP/41", "generation": "#include <stdio.h>\n\nint car_race_collision(int n) {\n    return n * n;\n}\n\n"}
{"task_id": "CPP/42", "generation": "#include <vector>\nusing namespace std;\n\nvector<int> incr_list(vector<int> l) {\n    vector<int> result;\n    for (int i = 0; i < l.size(); i++) {\n        result.push_back(l[i] + 1);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/43", "generation": "#include <vector>\n#include <unordered_set>\nusing namespace std;\n\nbool pairs_sum_to_zero(vector<int> l) {\n    unordered_set<int> seen;\n    \n    for (int num : l) {\n        if (seen.find(-num) != seen.end()) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    \n    return false;\n}\n\n// Example usage\n"}
{"task_id": "CPP/44", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nstring change_base(int x, int base) {\n    if (x == 0) return \"0\"; // Special case for zero\n\n    string result = \"\";\n    while (x > 0) {\n        int remainder = x % base;\n        result += to_string(remainder); // Append the remainder to the result string\n        x /= base;\n    }\n\n    // Since we appended the remainders in reverse order, we need to reverse the string\n    reverse(result.begin(), result.end());\n\n    return result;\n}\n\n"}
{"task_id": "CPP/45", "generation": "#include <stdio.h>\n\nfloat triangle_area(float a, float h) {\n    return 0.5 * a * h;\n}\n\n"}
{"task_id": "CPP/46", "generation": "#include <stdio.h>\n\nint fib4(int n) {\n    // Base cases\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n\n    // Initialize the first four elements of the sequence\n    int a = 0, b = 0, c = 2, d = 0;\n    int result = 0;\n\n    // Compute the sequence iteratively\n    for (int i = 4; i <= n; ++i) {\n        result = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = result;\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/47", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nfloat median(vector<float> l) {\n    // Step 1: Sort the vector\n    sort(l.begin(), l.end());\n\n    // Step 2: Determine the size of the vector\n    int n = l.size();\n\n    // Step 3: Calculate the median\n    if (n % 2 == 1) {\n        // If the number of elements is odd, return the middle element\n        return l[n / 2];\n    } else {\n        // If the number of elements is even, return the average of the two middle elements\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    }\n}\n\n"}
{"task_id": "CPP/48", "generation": "#include <iostream>\n#include <string>\n\nbool is_palindrome(const std::string& text) {\n    int left = 0;\n    int right = text.length() - 1;\n\n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/49", "generation": "#include <stdio.h>\n\nint modp(int n, int p) {\n    if (n == 0) {\n        return 1;\n    }\n\n    long long result = 1;\n    long long base = 2;\n\n    while (n > 0) {\n        // If n is odd, multiply base with result\n        if (n % 2 == 1) {\n            result = (result * base) % p;\n        }\n        // n must be even now\n        n = n / 2;\n        base = (base * base) % p;  // Square the base\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/50", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring encode_shift(string s){\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n\nstring decode_shift(string s){\n    // takes as input string encoded with encode_shift function. Returns decoded string.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5-(int)'a'+26)%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n\n"}
{"task_id": "CPP/51", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cctype>\n\nusing namespace std;\n\nstring remove_vowels(string text) {\n    // Define a lambda function to check if a character is a vowel\n    auto is_vowel = [](char c) {\n        c = tolower(c); // Convert character to lowercase for case-insensitive comparison\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    };\n\n    // Use std::remove_if to move vowels to the end of the string\n    text.erase(remove_if(text.begin(), text.end(), is_vowel), text.end());\n\n    return text;\n}\n\n"}
{"task_id": "CPP/52", "generation": "#include <vector>\nusing namespace std;\n\nbool below_threshold(vector<int> l, int t) {\n    for (int num : l) {\n        if (num >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Example usage\n#include <iostream>\n\n"}
{"task_id": "CPP/53", "generation": "#include <iostream>\n\nint add(int x, int y) {\n    return x + y;\n}\n\n"}
{"task_id": "CPP/54", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nbool same_chars(string s0, string s1) {\n    // Sort both strings\n    sort(s0.begin(), s0.end());\n    sort(s1.begin(), s1.end());\n    \n    // Compare the sorted strings\n    return s0 == s1;\n}\n\n"}
{"task_id": "CPP/55", "generation": "#include<iostream>\nusing namespace std;\n\nlong long fib(int n) {\n    if (n <= 0) return 0; // Handle the case where n is less than or equal to 0\n    if (n == 1) return 1; // Base case for the first Fibonacci number\n\n    long long a = 0, b = 1, c;\n    for (int i = 2; i <= n; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}\n\n"}
{"task_id": "CPP/56", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool correct_bracketing(string brackets) {\n    int count = 0;\n    for (char bracket : brackets) {\n        if (bracket == '<') {\n            count++;\n        } else if (bracket == '>') {\n            count--;\n        }\n        // If count goes negative, it means there are unmatched closing brackets\n        if (count < 0) {\n            return false;\n        }\n    }\n    // If count is zero, all brackets are matched\n    return count == 0;\n}\n\n"}
{"task_id": "CPP/57", "generation": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nbool isMonotonic(const vector<float>& l) {\n    bool increasing = true;\n    bool decreasing = true;\n\n    for (size_t i = 1; i < l.size(); ++i) {\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n        }\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n        }\n    }\n\n    return increasing || decreasing;\n}\n\n"}
{"task_id": "CPP/58", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <set>\nusing namespace std;\n\nvector<int> common(vector<int> l1, vector<int> l2) {\n    // Convert vectors to sets to remove duplicates\n    set<int> set1(l1.begin(), l1.end());\n    set<int> set2(l2.begin(), l2.end());\n    \n    // Find the intersection of the two sets\n    vector<int> result;\n    set_intersection(set1.begin(), set1.end(), set2.begin(), set2.end(), back_inserter(result));\n    \n    // Sort the result (though sets are already sorted, this is just for completeness)\n    sort(result.begin(), result.end());\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/59", "generation": "#include <stdio.h>\n\nint largest_prime_factor(int n) {\n    int largest_factor = 1;\n    \n    // Check for the smallest prime factor, which is 2\n    while (n % 2 == 0) {\n        largest_factor = 2;\n        n /= 2;\n    }\n    \n    // Check for odd factors from 3 onwards\n    for (int i = 3; i * i <= n; i += 2) {\n        while (n % i == 0) {\n            largest_factor = i;\n            n /= i;\n        }\n    }\n    \n    // If n is still greater than 2, then n itself is a prime factor\n    if (n > 2) {\n        largest_factor = n;\n    }\n    \n    return largest_factor;\n}\n\n"}
{"task_id": "CPP/60", "generation": "#include<iostream>\nusing namespace std;\n\nint sum_to_n(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; ++i) {\n        sum += i;\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/61", "generation": "#include <iostream>\n#include <string>\n#include <stack>\nusing namespace std;\n\nbool correct_bracketing(string brackets) {\n    stack<char> s;\n    \n    for (char bracket : brackets) {\n        if (bracket == '(') {\n            s.push(bracket);\n        } else if (bracket == ')') {\n            if (s.empty() || s.top() != '(') {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    \n    return s.empty();\n}\n\n"}
{"task_id": "CPP/62", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<float> derivative(vector<float> xs) {\n    vector<float> result;\n    for (size_t i = 1; i < xs.size(); ++i) {\n        result.push_back(i * xs[i]);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/63", "generation": "#include <stdio.h>\n\nint fibfib(int n) {\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n\n    int a = 0, b = 0, c = 1, d;\n    for (int i = 3; i <= n; ++i) {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\n\n"}
{"task_id": "CPP/64", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nint vowels_count(string s) {\n    // Convert the string to lowercase to handle case insensitivity\n    transform(s.begin(), s.end(), s.begin(), ::tolower);\n    \n    int count = 0;\n    int length = s.length();\n    \n    // Check each character in the string\n    for (int i = 0; i < length; i++) {\n        char c = s[i];\n        // Check if the character is a vowel\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    \n    // Check if 'y' is at the end of the word\n    if (length > 0 && s[length - 1] == 'y') {\n        count++;\n    }\n    \n    return count;\n}\n\n// Example usage\n"}
{"task_id": "CPP/65", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nstring circular_shift(int x, int shift) {\n    // Convert the integer to a string\n    string num_str = to_string(x);\n    int num_digits = num_str.length();\n\n    // If shift is greater than the number of digits, reverse the string\n    if (shift > num_digits) {\n        reverse(num_str.begin(), num_str.end());\n        return num_str;\n    }\n\n    // Perform the circular shift\n    string shifted_str = num_str.substr(num_digits - shift) + num_str.substr(0, num_digits - shift);\n\n    return shifted_str;\n}\n\n"}
{"task_id": "CPP/66", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint digitSum(string s) {\n    int sum = 0;\n    for (char c : s) {\n        if (c >= 'A' && c <= 'Z') {\n            sum += c;\n        }\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/67", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <regex>\n\nusing namespace std;\n\nint fruit_distribution(string s, int n) {\n    // Regular expression to find the numbers in the string\n    regex pattern(\"(\\\\d+) apples and (\\\\d+) oranges\");\n    smatch match;\n    \n    // Search for the pattern in the string\n    if (regex_search(s, match, pattern)) {\n        // Extract the numbers of apples and oranges\n        int apples = stoi(match[1]);\n        int oranges = stoi(match[2]);\n        \n        // Calculate the number of mangoes\n        int mangoes = n - apples - oranges;\n        \n        return mangoes;\n    } else {\n        // If the pattern is not found, return an error or handle it accordingly\n        cerr << \"Invalid input format\" << endl;\n        return -1;\n    }\n}\n\n"}
{"task_id": "CPP/68", "generation": "#include<vector>\nusing namespace std;\n\nvector<int> pluck(vector<int> arr) {\n    // Initialize variables to store the smallest even value and its index\n    int smallest_even = -1;\n    int smallest_index = -1;\n    \n    // Iterate through the vector\n    for (int i = 0; i < arr.size(); ++i) {\n        // Check if the current element is even\n        if (arr[i] % 2 == 0) {\n            // If it's the first even number found or it's smaller than the previously found smallest even number\n            if (smallest_even == -1 || arr[i] < smallest_even) {\n                smallest_even = arr[i];\n                smallest_index = i;\n            }\n        }\n    }\n    \n    // If an even number was found, return the smallest even value and its index\n    if (smallest_even != -1) {\n        return {smallest_even, smallest_index};\n    } else {\n        // If no even number was found, return an empty vector\n        return {};\n    }\n}\n"}
{"task_id": "CPP/69", "generation": "#include <vector>\n#include <unordered_map>\n#include <algorithm>\nusing namespace std;\n\nint search(vector<int> lst) {\n    // Step 1: Count the frequency of each integer\n    unordered_map<int, int> frequencyMap;\n    for (int num : lst) {\n        frequencyMap[num]++;\n    }\n\n    // Step 2: Find the greatest integer that meets the criteria\n    int maxValidInteger = -1;\n    for (const auto& pair : frequencyMap) {\n        int num = pair.first;\n        int freq = pair.second;\n        if (num <= freq) {\n            maxValidInteger = max(maxValidInteger, num);\n        }\n    }\n\n    // Step 3: Return the result\n    return maxValidInteger;\n}\n\n// Example usage\n"}
{"task_id": "CPP/70", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> strange_sort_list(vector<int> lst) {\n    // Sort the input vector in ascending order\n    sort(lst.begin(), lst.end());\n    \n    // Initialize the result vector\n    vector<int> result;\n    \n    // Initialize indices for the smallest and largest elements\n    int left = 0;\n    int right = lst.size() - 1;\n    \n    // Alternate between the smallest and largest elements\n    while (left <= right) {\n        if (left <= right) {\n            result.push_back(lst[left]);\n            left++;\n        }\n        if (left <= right) {\n            result.push_back(lst[right]);\n            right--;\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/71", "generation": "#include <stdio.h>\n#include <math.h>\n\nfloat triangle_area(float a, float b, float c) {\n    // Check if the sides can form a valid triangle\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n\n    // Calculate the semi-perimeter\n    float s = (a + b + c) / 2;\n\n    // Calculate the area using Heron's formula\n    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n\n    // Round the area to 2 decimal points\n    area = round(area * 100) / 100;\n\n    return area;\n}\n\n"}
{"task_id": "CPP/72", "generation": "#include <vector>\n#include <numeric> // for std::accumulate\n#include <algorithm> // for std::reverse\n\nbool will_it_fly(vector<int> q, int w) {\n    // Check if the vector is palindromic\n    vector<int> reversed_q = q;\n    reverse(reversed_q.begin(), reversed_q.end());\n    if (q != reversed_q) {\n        return false;\n    }\n    \n    // Calculate the sum of the vector elements\n    int sum = accumulate(q.begin(), q.end(), 0);\n    \n    // Check if the sum is less than or equal to the maximum possible weight\n    return sum <= w;\n}\n\n// Example usage\n"}
{"task_id": "CPP/73", "generation": "#include <vector>\n#include <iostream>\nusing namespace std;\n\nint smallest_change(vector<int> arr) {\n    int left = 0;\n    int right = arr.size() - 1;\n    int changes = 0;\n\n    while (left < right) {\n        if (arr[left] != arr[right]) {\n            changes++;\n        }\n        left++;\n        right--;\n    }\n\n    return changes;\n}\n\n"}
{"task_id": "CPP/74", "generation": "#include <vector>\n#include <string>\n#include <numeric> // for accumulate\n\nusing namespace std;\n\nint totalChars(const vector<string>& vec) {\n    return accumulate(vec.begin(), vec.end(), 0, [](int sum, const string& str) {\n        return sum + str.size();\n    });\n}\n\nvector<string> total_match(vector<string> lst1, vector<string> lst2) {\n    int total1 = totalChars(lst1);\n    int total2 = totalChars(lst2);\n    \n    if (total1 <= total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n"}
{"task_id": "CPP/75", "generation": "#include <iostream>\n#include <vector>\n#include <cmath>\n\nusing namespace std;\n\n// Function to generate all prime numbers less than 100 using Sieve of Eratosthenes\nvector<int> generate_primes() {\n    const int limit = 100;\n    vector<bool> is_prime(limit, true);\n    is_prime[0] = is_prime[1] = false; // 0 and 1 are not prime numbers\n\n    for (int i = 2; i * i < limit; ++i) {\n        if (is_prime[i]) {\n            for (int j = i * i; j < limit; j += i) {\n                is_prime[j] = false;\n            }\n        }\n    }\n\n    vector<int> primes;\n    for (int i = 2; i < limit; ++i) {\n        if (is_prime[i]) {\n            primes.push_back(i);\n        }\n    }\n\n    return primes;\n}\n\n// Function to check if the given number is the multiplication of 3 prime numbers\nbool is_multiply_prime(int a) {\n    vector<int> primes = generate_primes();\n    int n = primes.size();\n\n    // Check all combinations of three primes\n    for (int i = 0; i < n; ++i) {\n        for (int j = i + 1; j < n; ++j) {\n            for (int k = j + 1; k < n; ++k) {\n                if (primes[i] * primes[j] * primes[k] == a) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n}\n\n"}
{"task_id": "CPP/76", "generation": "#include <iostream>\n#include <cmath>\n\nbool is_simple_power(int x, int n) {\n    // Special case: if n is 1, the only power of 1 is 1 itself\n    if (n == 1) {\n        return x == 1;\n    }\n\n    // Iterate through possible values of k\n    int power = 1;\n    while (power < x) {\n        power *= n;\n        if (power == x) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n"}
{"task_id": "CPP/77", "generation": "#include <iostream>\n#include <cmath>\n\nbool iscube(int a) {\n    if (a < 0) {\n        // If a is negative, we need to handle the cube root of a negative number\n        a = -a;\n        double cubeRoot = cbrt(a);\n        int intCubeRoot = static_cast<int>(cubeRoot);\n        return (intCubeRoot * intCubeRoot * intCubeRoot == a);\n    } else {\n        // If a is non-negative, we can directly take the cube root\n        double cubeRoot = cbrt(a);\n        int intCubeRoot = static_cast<int>(cubeRoot);\n        return (intCubeRoot * intCubeRoot * intCubeRoot == a);\n    }\n}\n\n"}
{"task_id": "CPP/78", "generation": "#include <iostream>\n#include <string>\n#include <unordered_set>\nusing namespace std;\n\nint hex_key(string num) {\n    // Define the set of prime hexadecimal digits\n    unordered_set<char> prime_digits = {'2', '3', '5', '7', 'B', 'D'};\n    \n    // Initialize the count of prime digits\n    int count = 0;\n    \n    // Iterate through the input string\n    for (char c : num) {\n        // Check if the current character is in the set of prime digits\n        if (prime_digits.find(c) != prime_digits.end()) {\n            count++;\n        }\n    }\n    \n    // Return the count of prime digits\n    return count;\n}\n\n"}
{"task_id": "CPP/79", "generation": "#include <iostream>\n#include <string>\n#include <algorithm> // for std::reverse\n\nusing namespace std;\n\nstring decimal_to_binary(int decimal) {\n    if (decimal == 0) {\n        return \"db0db\";\n    }\n\n    string binary;\n    \n    while (decimal > 0) {\n        int remainder = decimal % 2;\n        binary += to_string(remainder);\n        decimal /= 2;\n    }\n\n    // Reverse the binary string to get the correct order\n    reverse(binary.begin(), binary.end());\n\n    // Add the \"db\" characters at the beginning and end\n    binary = \"db\" + binary + \"db\";\n\n    return binary;\n}\n\n"}
{"task_id": "CPP/80", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool is_happy(string s) {\n    // Check if the length of the string is less than 3\n    if (s.length() < 3) {\n        return false;\n    }\n\n    // Iterate through the string and check every 3 consecutive characters\n    for (int i = 0; i <= s.length() - 3; ++i) {\n        // Check if the 3 consecutive characters are distinct\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n\n    // If all 3 consecutive characters are distinct, return true\n    return true;\n}\n\n// Test cases\n"}
{"task_id": "CPP/81", "generation": "#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> numerical_letter_grade(vector<float> grades) {\n    vector<string> letter_grades;\n    for (float gpa : grades) {\n        if (gpa == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (gpa > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (gpa > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (gpa > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (gpa > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (gpa > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (gpa > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (gpa > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (gpa > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (gpa > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (gpa > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (gpa > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n}\n"}
{"task_id": "CPP/82", "generation": "#include <iostream>\n#include <string>\n#include <cmath>\nusing namespace std;\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true; // 2 is the only even prime number\n    if (n % 2 == 0) return false; // other even numbers are not prime\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nbool prime_length(string str) {\n    int length = str.length();\n    return is_prime(length);\n}\n\n"}
{"task_id": "CPP/83", "generation": "#include <stdio.h>\n#include <math.h>\n\nint starts_one_ends(int n) {\n    if (n == 1) {\n        return 1; // Special case: for n=1, the only number is 1 itself.\n    }\n    return 2 * pow(10, n-1) - pow(10, n-2);\n}\n\n"}
{"task_id": "CPP/84", "generation": "#include <iostream>\n#include <string>\n#include <bitset>\n\nusing namespace std;\n\nstring solve(int N) {\n    // Step 1: Calculate the sum of digits\n    int sum = 0;\n    int temp = N;\n    while (temp > 0) {\n        sum += temp % 10;  // Add the last digit to sum\n        temp /= 10;        // Remove the last digit\n    }\n\n    // Step 2: Convert the sum to binary\n    string binarySum = bitset<32>(sum).to_string();  // Convert to 32-bit binary string\n\n    // Step 3: Remove leading zeros\n    size_t pos = binarySum.find('1');  // Find the first '1'\n    if (pos != string::npos) {\n        binarySum = binarySum.substr(pos);  // Extract the substring from the first '1'\n    } else {\n        binarySum = \"0\";  // If no '1' is found, the sum was 0\n    }\n\n    return binarySum;\n}\n\n"}
{"task_id": "CPP/85", "generation": "#include <vector>\nusing namespace std;\n\nint add(vector<int> lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.size(); ++i) {\n        if (i % 2 != 0 && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <sstream>\n\nusing namespace std;\n\nstring anti_shuffle(string s) {\n    // Create a stringstream to split the input string by spaces\n    stringstream ss(s);\n    string word;\n    string result;\n\n    // Process each word in the string\n    while (ss >> word) {\n        // Sort the characters of the word\n        sort(word.begin(), word.end());\n        // Append the sorted word to the result\n        result += word + \" \";\n    }\n\n    // Remove the trailing space\n    if (!result.empty()) {\n        result.pop_back();\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/87", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<vector<int>> get_row(vector<vector<int>> lst, int x) {\n    vector<vector<int>> coordinates;\n    \n    // Traverse the 2D vector to find occurrences of x\n    for (int i = 0; i < lst.size(); ++i) {\n        for (int j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                coordinates.push_back({i, j});\n            }\n        }\n    }\n    \n    // Sort coordinates by rows in ascending order\n    // For coordinates within the same row, sort by columns in descending order\n    sort(coordinates.begin(), coordinates.end(), [](const vector<int>& a, const vector<int>& b) {\n        if (a[0] == b[0]) {\n            return a[1] > b[1];\n        }\n        return a[0] < b[0];\n    });\n    \n    return coordinates;\n}\n\n// Example usage\n"}
{"task_id": "CPP/88", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> sort_array(vector<int> array) {\n    // Check if the array is empty or has only one element\n    if (array.empty() || array.size() == 1) {\n        return array;\n    }\n\n    // Calculate the sum of the first and last index values\n    int sum = array.front() + array.back();\n\n    // Create a copy of the array to sort\n    vector<int> sorted_array = array;\n\n    // Sort the array based on the sum\n    if (sum % 2 == 0) {\n        // Sort in descending order if the sum is even\n        sort(sorted_array.begin(), sorted_array.end(), greater<int>());\n    } else {\n        // Sort in ascending order if the sum is odd\n        sort(sorted_array.begin(), sorted_array.end());\n    }\n\n    return sorted_array;\n}\n"}
{"task_id": "CPP/89", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring encrypt(string s) {\n    string result = \"\";\n    int shift = 4; // 2 * 2 = 4\n\n    for (char c : s) {\n        if (c >= 'a' && c <= 'z') {\n            // Shift within lowercase letters\n            c = 'a' + (c - 'a' + shift) % 26;\n        } else if (c >= 'A' && c <= 'Z') {\n            // Shift within uppercase letters\n            c = 'A' + (c - 'A' + shift) % 26;\n        }\n        result += c;\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/90", "generation": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nint next_smallest(const vector<int>& lst) {\n    if (lst.size() < 2) {\n        return -1; // Return -1 as a sentinel value for None\n    }\n\n    // Create a copy of the vector and sort it\n    vector<int> sorted_lst = lst;\n    sort(sorted_lst.begin(), sorted_lst.end());\n\n    // Find the second smallest unique element\n    int smallest = sorted_lst[0];\n    for (size_t i = 1; i < sorted_lst.size(); ++i) {\n        if (sorted_lst[i] != smallest) {\n            return sorted_lst[i];\n        }\n    }\n\n    return -1; // Return -1 if there is no second smallest unique element\n}\n\n"}
{"task_id": "CPP/91", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <vector>\n\nusing namespace std;\n\nint is_bored(string S) {\n    int count = 0;\n    stringstream ss(S);\n    string sentence;\n    vector<string> sentences;\n\n    // Split the string into sentences based on delimiters '.', '?', '!'\n    while (getline(ss, sentence, '.')) {\n        sentences.push_back(sentence);\n    }\n    ss.clear();\n    ss.str(S);\n    while (getline(ss, sentence, '?')) {\n        sentences.push_back(sentence);\n    }\n    ss.clear();\n    ss.str(S);\n    while (getline(ss, sentence, '!')) {\n        sentences.push_back(sentence);\n    }\n\n    // Check each sentence to see if it starts with \"I\"\n    for (string s : sentences) {\n        // Trim leading whitespace\n        size_t start = s.find_first_not_of(\" \\t\\n\\r\\f\\v\");\n        if (start != string::npos) {\n            s = s.substr(start);\n        }\n        // Check if the sentence starts with \"I\"\n        if (s.length() > 0 && s[0] == 'I') {\n            count++;\n        }\n    }\n\n    return count;\n}\n\n"}
{"task_id": "CPP/92", "generation": "#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n\nbool any_int(float a, float b, float c) {\n    // Check if all numbers are integers\n    if (floor(a) == a && floor(b) == b && floor(c) == c) {\n        // Convert floats to integers\n        int int_a = (int)a;\n        int int_b = (int)b;\n        int int_c = (int)c;\n        \n        // Check if one of the numbers is equal to the sum of the other two\n        if (int_a == int_b + int_c || int_b == int_a + int_c || int_c == int_a + int_b) {\n            return true;\n        }\n    }\n    return false;\n}\n\n"}
{"task_id": "CPP/93", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nstring encode(string message) {\n    string encodedMessage = \"\";\n    for (char &c : message) {\n        if (isalpha(c)) {\n            // Swap case\n            if (islower(c)) {\n                c = toupper(c);\n            } else {\n                c = tolower(c);\n            }\n\n            // Replace vowels with the letter 2 places ahead\n            if (c == 'A' || c == 'a') c = 'C';\n            else if (c == 'E' || c == 'e') c = 'G';\n            else if (c == 'I' || c == 'i') c = 'K';\n            else if (c == 'O' || c == 'o') c = 'Q';\n            else if (c == 'U' || c == 'u') c = 'W';\n            else if (c == 'Y' || c == 'y') c = 'A'; // Assuming 'Y' is a vowel here\n\n            // For consonants, we need to handle wrap-around in the alphabet\n            else if (isupper(c)) {\n                if (c == 'Y') c = 'A';\n                else if (c == 'Z') c = 'B';\n                else c = c + 2;\n            } else {\n                if (c == 'y') c = 'a';\n                else if (c == 'z') c = 'b';\n                else c = c + 2;\n            }\n        }\n        encodedMessage += c;\n    }\n    return encodedMessage;\n}\n\n// Example usage\n"}
{"task_id": "CPP/94", "generation": "#include <iostream>\n#include <vector>\n#include <cmath>\nusing namespace std;\n\n// Function to check if a number is prime\nbool isPrime(int num) {\n    if (num <= 1) return false;\n    if (num == 2) return true;\n    if (num % 2 == 0) return false;\n    for (int i = 3; i <= sqrt(num); i += 2) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\n// Function to sum the digits of a number\nint sumOfDigits(int num) {\n    int sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}\n\nint skjkasdkd(vector<int> lst) {\n    int largestPrime = -1;\n    \n    // Find the largest prime in the list\n    for (int num : lst) {\n        if (isPrime(num) && num > largestPrime) {\n            largestPrime = num;\n        }\n    }\n    \n    // If no prime is found, return 0\n    if (largestPrime == -1) {\n        return 0;\n    }\n    \n    // Sum the digits of the largest prime\n    return sumOfDigits(largestPrime);\n}\n\n"}
{"task_id": "CPP/95", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\n#include<algorithm> // for std::all_of\nusing namespace std;\n\nbool check_dict_case(map<string, string> dict) {\n    // If the map is empty, return false\n    if (dict.empty()) {\n        return false;\n    }\n\n    // Iterate through each key in the map\n    for (const auto& pair : dict) {\n        const string& key = pair.first;\n\n        // Check if the key is a string\n        if (key.empty()) {\n            return false;\n        }\n\n        // Check if all characters in the key are either all lower case or all upper case\n        bool all_lower = all_of(key.begin(), key.end(), ::islower);\n        bool all_upper = all_of(key.begin(), key.end(), ::isupper);\n\n        if (!all_lower && !all_upper) {\n            return false;\n        }\n    }\n\n    // If all keys pass the checks, return true\n    return true;\n}\n\n// Example usage\n"}
{"task_id": "CPP/96", "generation": "#include <vector>\n#include <cmath>\nusing namespace std;\n\nvector<int> count_up_to(int n) {\n    vector<int> primes;\n    if (n <= 2) {\n        return primes; // No primes less than 2\n    }\n\n    // Create a boolean array \"is_prime[0..n]\" and initialize\n    // all entries it as true. A value in is_prime[i] will\n    // finally be false if i is Not a prime, else true.\n    vector<bool> is_prime(n, true);\n    is_prime[0] = is_prime[1] = false; // 0 and 1 are not primes\n\n    for (int p = 2; p * p < n; p++) {\n        // If is_prime[p] is not changed, then it is a prime\n        if (is_prime[p]) {\n            // Update all multiples of p to false\n            for (int i = p * p; i < n; i += p) {\n                is_prime[i] = false;\n            }\n        }\n    }\n\n    // Collect all prime numbers\n    for (int p = 2; p < n; p++) {\n        if (is_prime[p]) {\n            primes.push_back(p);\n        }\n    }\n\n    return primes;\n}\n\n// Example usage\n"}
{"task_id": "CPP/97", "generation": "#include<stdio.h>\n#include<math.h>\n\nint multiply(int a, int b) {\n    // Extract the unit digits of both numbers\n    int unit_digit_a = abs(a) % 10;\n    int unit_digit_b = abs(b) % 10;\n    \n    // Calculate the product of the unit digits\n    int product = unit_digit_a * unit_digit_b;\n    \n    return product;\n}\n\n"}
{"task_id": "CPP/98", "generation": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint count_upper(string s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) { // Iterate through even indices\n        char c = s[i];\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/99", "generation": "#include <iostream>\n#include <string>\n#include <cmath>\n\nint closest_integer(std::string value) {\n    // Convert the string to a double\n    double number = std::stod(value);\n    \n    // Determine the closest integer\n    int closest;\n    if (number >= 0) {\n        closest = static_cast<int>(number + 0.5);\n    } else {\n        closest = static_cast<int>(number - 0.5);\n    }\n    \n    return closest;\n}\n\n"}
{"task_id": "CPP/100", "generation": "#include<vector>\nusing namespace std;\n\nvector<int> make_a_pile(int n) {\n    vector<int> result;\n    int current = n;\n    \n    for (int i = 0; i < n; ++i) {\n        result.push_back(current);\n        if (current % 2 == 0) {\n            current += 2; // Next even number\n        } else {\n            current += 2; // Next odd number\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/101", "generation": "#include <vector>\n#include <string>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> words_string(string s) {\n    vector<string> words;\n    string word;\n    stringstream ss(s);\n    \n    // Read words separated by spaces or commas\n    while (getline(ss, word, ',')) {\n        stringstream word_ss(word);\n        string temp;\n        while (word_ss >> temp) {\n            words.push_back(temp);\n        }\n    }\n    \n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "#include <stdio.h>\n\nint choose_num(int x, int y) {\n    // Ensure x is less than or equal to y\n    if (x > y) {\n        return -1;\n    }\n\n    // Start from the largest number in the range and move downwards\n    for (int i = y; i >= x; i--) {\n        // Check if the number is even\n        if (i % 2 == 0) {\n            return i;\n        }\n    }\n\n    // If no even number is found, return -1\n    return -1;\n}\n\n"}
{"task_id": "CPP/103", "generation": "#include <iostream>\n#include <cmath>\n#include <string>\nusing namespace std;\n\nstring rounded_avg(int n, int m) {\n    // Step 1: Check if n is greater than m\n    if (n > m) {\n        return \"-1\";\n    }\n    \n    // Step 2: Calculate the sum of integers from n to m\n    int sum = 0;\n    for (int i = n; i <= m; ++i) {\n        sum += i;\n    }\n    \n    // Step 3: Calculate the count of integers from n to m\n    int count = m - n + 1;\n    \n    // Step 4: Calculate the average and round it down\n    int average = floor((double)sum / count);\n    \n    // Step 5: Convert the rounded average to binary\n    string binary = \"\";\n    while (average > 0) {\n        binary = to_string(average % 2) + binary;\n        average /= 2;\n    }\n    \n    // If the binary string is empty, it means the average was 0\n    if (binary.empty()) {\n        binary = \"0\";\n    }\n    \n    return binary;\n}\n\n"}
{"task_id": "CPP/104", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\n// Helper function to check if a number contains any even digit\nbool hasEvenDigit(int num) {\n    while (num > 0) {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            return true;\n        }\n        num /= 10;\n    }\n    return false;\n}\n\nvector<int> unique_digits(vector<int> x) {\n    vector<int> result;\n    \n    // Filter out numbers with even digits\n    for (int num : x) {\n        if (!hasEvenDigit(num)) {\n            result.push_back(num);\n        }\n    }\n    \n    // Sort the result in increasing order\n    sort(result.begin(), result.end());\n    \n    return result;\n}\n\n// Example usage\n"}
{"task_id": "CPP/105", "generation": "#include <vector>\n#include <string>\n#include <map>\n#include <algorithm>\nusing namespace std;\n\nvector<string> by_length(vector<int> arr) {\n    // Step 1: Filter and sort the integers between 1 and 9\n    vector<int> filtered;\n    for (int num : arr) {\n        if (num >= 1 && num <= 9) {\n            filtered.push_back(num);\n        }\n    }\n    sort(filtered.begin(), filtered.end());\n\n    // Step 2: Reverse the sorted list\n    reverse(filtered.begin(), filtered.end());\n\n    // Step 3: Map each digit to its corresponding name\n    map<int, string> digitToName = {\n        {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"},\n        {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}\n    };\n\n    vector<string> result;\n    for (int num : filtered) {\n        result.push_back(digitToName[num]);\n    }\n\n    return result;\n}\n\n// Example usage\n"}
{"task_id": "CPP/106", "generation": "#include <vector>\nusing namespace std;\n\nvector<int> f(int n) {\n    vector<int> result(n);\n    \n    for (int i = 1; i <= n; ++i) {\n        if (i % 2 == 0) {\n            // Compute factorial of i\n            int factorial = 1;\n            for (int j = 1; j <= i; ++j) {\n                factorial *= j;\n            }\n            result[i - 1] = factorial;\n        } else {\n            // Compute sum of numbers from 1 to i\n            int sum = 0;\n            for (int j = 1; j <= i; ++j) {\n                sum += j;\n            }\n            result[i - 1] = sum;\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/107", "generation": "#include <vector>\n#include <string>\nusing namespace std;\n\nbool isPalindrome(int num) {\n    string str = to_string(num);\n    int len = str.length();\n    for (int i = 0; i < len / 2; ++i) {\n        if (str[i] != str[len - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvector<int> even_odd_palindrome(int n) {\n    int evenCount = 0;\n    int oddCount = 0;\n    \n    for (int i = 1; i <= n; ++i) {\n        if (isPalindrome(i)) {\n            if (i % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n    \n    return {evenCount, oddCount};\n}\n"}
{"task_id": "CPP/108", "generation": "#include <vector>\n#include <cmath>\nusing namespace std;\n\nint count_nums(vector<int> n) {\n    int count = 0;\n    \n    for (int num : n) {\n        int sum_of_digits = 0;\n        int temp = abs(num); // Work with the absolute value to handle digits\n        \n        // Extract digits and add them to the sum\n        while (temp > 0) {\n            int digit = temp % 10;\n            if (num < 0) {\n                digit = -digit; // Treat digits as signed if the number is negative\n            }\n            sum_of_digits += digit;\n            temp /= 10;\n        }\n        \n        // If the number is negative and has only one digit, it should be treated as signed\n        if (num < 0 && abs(num) < 10) {\n            sum_of_digits = num;\n        }\n        \n        // Check if the sum of digits is greater than 0\n        if (sum_of_digits > 0) {\n            count++;\n        }\n    }\n    \n    return count;\n}\n\n// Example usage\n#include <iostream>\n\n"}
{"task_id": "CPP/109", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nbool move_one_ball(vector<int> arr) {\n    if (arr.empty()) return true;\n\n    int n = arr.size();\n    int min_index = 0;\n\n    // Find the index of the minimum element\n    for (int i = 1; i < n; ++i) {\n        if (arr[i] < arr[min_index]) {\n            min_index = i;\n        }\n    }\n\n    // Check if the vector can be sorted by right shifts\n    for (int i = 0; i < n - 1; ++i) {\n        int current_index = (min_index + i) % n;\n        int next_index = (min_index + i + 1) % n;\n        if (arr[current_index] > arr[next_index]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n"}
{"task_id": "CPP/110", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nstring exchange(vector<int> lst1, vector<int> lst2) {\n    int oddCount = 0;\n    int evenCount = 0;\n\n    // Count the number of odd elements in lst1\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            oddCount++;\n        }\n    }\n\n    // Count the number of even elements in lst2\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            evenCount++;\n        }\n    }\n\n    // If there are enough even elements in lst2 to replace all odd elements in lst1\n    if (evenCount >= oddCount) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\n// Example usage\n"}
{"task_id": "CPP/111", "generation": "#include <iostream>\n#include <string>\n#include <map>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nmap<char, int> histogram(string test) {\n    map<char, int> frequencyMap;\n    map<char, int> resultMap;\n    int maxFrequency = 0;\n\n    // Remove spaces and convert string to lowercase letters\n    test.erase(remove(test.begin(), test.end(), ' '), test.end());\n\n    // Count the frequency of each letter\n    for (char c : test) {\n        frequencyMap[c]++;\n        if (frequencyMap[c] > maxFrequency) {\n            maxFrequency = frequencyMap[c];\n        }\n    }\n\n    // Populate the result map with letters having the maximum frequency\n    for (const auto& pair : frequencyMap) {\n        if (pair.second == maxFrequency) {\n            resultMap[pair.first] = pair.second;\n        }\n    }\n\n    return resultMap;\n}\n\n"}
{"task_id": "CPP/112", "generation": "#include<iostream>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nvector<string> reverse_delete(string s, string c) {\n    // Step 1: Remove characters from s that are in c\n    string result;\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            result += ch;\n        }\n    }\n    \n    // Step 2: Check if the result string is a palindrome\n    bool isPalindrome = true;\n    int n = result.length();\n    for (int i = 0; i < n / 2; ++i) {\n        if (result[i] != result[n - i - 1]) {\n            isPalindrome = false;\n            break;\n        }\n    }\n    \n    // Step 3: Prepare the result vector\n    vector<string> resultVector;\n    resultVector.push_back(result);\n    resultVector.push_back(isPalindrome ? \"True\" : \"False\");\n    \n    return resultVector;\n}\n\n"}
{"task_id": "CPP/113", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<string> odd_count(vector<string> lst) {\n    vector<string> result;\n    \n    for (size_t i = 0; i < lst.size(); ++i) {\n        int odd_count = 0;\n        for (char c : lst[i]) {\n            if ((c - '0') % 2 != 0) {\n                ++odd_count;\n            }\n        }\n        \n        // Create the output string with the correct format\n        ostringstream oss;\n        oss << \"the number of odd elements \" << odd_count << \"n the str\" << odd_count << \"ng \" << odd_count << \" of the \" << odd_count << \"nput.\";\n        result.push_back(oss.str());\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/114", "generation": "#include<stdio.h>\n#include<vector>\n#include<limits.h>\nusing namespace std;\n\nlong long minSubArraySum(vector<long long> nums) {\n    if (nums.empty()) {\n        return 0; // or handle empty vector case as needed\n    }\n\n    long long min_sum = nums[0];\n    long long current_min = nums[0];\n\n    for (size_t i = 1; i < nums.size(); ++i) {\n        current_min = min(nums[i], current_min + nums[i]);\n        min_sum = min(min_sum, current_min);\n    }\n\n    return min_sum;\n}\n\n"}
{"task_id": "CPP/115", "generation": "#include<vector>\n#include<cmath> // for ceil function\nusing namespace std;\n\nint max_fill(vector<vector<int>> grid, int capacity) {\n    int total_lowers = 0;\n    \n    for (const auto& row : grid) {\n        int water_units = 0;\n        for (int unit : row) {\n            if (unit == 1) {\n                water_units++;\n            }\n        }\n        // Calculate the number of times the bucket needs to be lowered\n        total_lowers += ceil((double)water_units / capacity);\n    }\n    \n    return total_lowers;\n}\n\n// Example usage\n"}
{"task_id": "CPP/116", "generation": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nusing namespace std;\n\n// Helper function to count the number of ones in the binary representation of an integer\nint countOnes(int num) {\n    int count = 0;\n    while (num != 0) {\n        count += num & 1;\n        num >>= 1;\n    }\n    return count;\n}\n\n// Custom comparator function for sorting\nbool customComparator(int a, int b) {\n    int onesA = countOnes(a);\n    int onesB = countOnes(b);\n    \n    if (onesA == onesB) {\n        return a < b; // If number of ones is the same, sort by decimal value\n    }\n    return onesA < onesB; // Otherwise, sort by number of ones\n}\n\nvector<int> sort_array(vector<int> arr) {\n    sort(arr.begin(), arr.end(), customComparator);\n    return arr;\n}\n\n// Test the function\n"}
{"task_id": "CPP/117", "generation": "#include <vector>\n#include <string>\n#include <sstream>\n#include <unordered_set>\n\nusing namespace std;\n\nvector<string> select_words(string s, int n) {\n    vector<string> result;\n    if (s.empty()) {\n        return result;\n    }\n\n    // Define a set of vowels for quick lookup\n    unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n\n    // Use a stringstream to split the input string into words\n    stringstream ss(s);\n    string word;\n\n    while (ss >> word) {\n        int consonant_count = 0;\n\n        // Count consonants in the current word\n        for (char c : word) {\n            if (isalpha(c) && vowels.find(c) == vowels.end()) {\n                consonant_count++;\n            }\n        }\n\n        // If the word has exactly n consonants, add it to the result\n        if (consonant_count == n) {\n            result.push_back(word);\n        }\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/118", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nbool is_vowel(char c) {\n    string vowels = \"AEIOUaeiou\";\n    return vowels.find(c) != string::npos;\n}\n\nbool is_consonant(char c) {\n    return isalpha(c) && !is_vowel(c);\n}\n\nstring get_closest_vowel(string word) {\n    int n = word.length();\n    for (int i = n - 2; i > 0; --i) {\n        if (is_vowel(word[i]) && is_consonant(word[i - 1]) && is_consonant(word[i + 1])) {\n            return string(1, word[i]);\n        }\n    }\n    return \"\";\n}\n\n// Example usage\n"}
{"task_id": "CPP/119", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nstring match_parens(vector<string> lst) {\n    int open_count1 = 0, close_count1 = 0;\n    int open_count2 = 0, close_count2 = 0;\n\n    // Count parentheses in the first string\n    for (char c : lst[0]) {\n        if (c == '(') open_count1++;\n        else if (c == ')') close_count1++;\n    }\n\n    // Count parentheses in the second string\n    for (char c : lst[1]) {\n        if (c == '(') open_count2++;\n        else if (c == ')') close_count2++;\n    }\n\n    // Total counts\n    int total_open = open_count1 + open_count2;\n    int total_close = close_count1 + close_count2;\n\n    // Check if the total number of opening and closing parentheses are equal\n    if (total_open == total_close) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\n// Example usage\n"}
{"task_id": "CPP/120", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> maximum(vector<int> arr, int k) {\n    // Step 1: Sort the array in ascending order\n    sort(arr.begin(), arr.end());\n    \n    // Step 2: Select the top k elements from the end of the sorted array\n    vector<int> result(arr.end() - k, arr.end());\n    \n    // Step 3: Sort the selected k elements in ascending order\n    sort(result.begin(), result.end());\n    \n    return result;\n}\n"}
{"task_id": "CPP/121", "generation": "#include <vector>\nusing namespace std;\n\nint solution(vector<int> lst) {\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "#include <vector>\n#include <cmath>\nusing namespace std;\n\nint add_elements(vector<int> arr, int k) {\n    int sum = 0;\n    \n    for (int i = 0; i < k; ++i) {\n        // Check if the number has at most two digits\n        if (arr[i] >= 0 && arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    \n    return sum;\n}\n\n// Example usage\n"}
{"task_id": "CPP/123", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> get_odd_collatz(int n) {\n    vector<int> odd_numbers;\n    \n    // Generate the Collatz sequence and collect odd numbers\n    while (n != 1) {\n        if (n % 2 == 1) {\n            odd_numbers.push_back(n);\n        }\n        if (n % 2 == 0) {\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n    }\n    \n    // Add the final 1 to the sequence\n    odd_numbers.push_back(1);\n    \n    // Sort the vector of odd numbers\n    sort(odd_numbers.begin(), odd_numbers.end());\n    \n    return odd_numbers;\n}\n"}
{"task_id": "CPP/124", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <iomanip>\n\nusing namespace std;\n\nbool valid_date(string date) {\n    // Check if the date string is empty\n    if (date.empty()) {\n        return false;\n    }\n\n    // Check if the date string is in the format mm-dd-yyyy\n    if (date.length() != 10 || date[2] != '-' || date[5] != '-') {\n        return false;\n    }\n\n    // Extract the month, day, and year from the date string\n    string month_str = date.substr(0, 2);\n    string day_str = date.substr(3, 2);\n    string year_str = date.substr(6, 4);\n\n    // Convert the extracted substrings to integers\n    int month, day, year;\n    try {\n        month = stoi(month_str);\n        day = stoi(day_str);\n        year = stoi(year_str);\n    } catch (invalid_argument&) {\n        return false;\n    }\n\n    // Validate the month\n    if (month < 1 || month > 12) {\n        return false;\n    }\n\n    // Validate the day based on the month\n    if (month == 2) {\n        // February can have 29 days in a leap year, otherwise 28\n        bool is_leap_year = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));\n        if (day < 1 || (day > 28 && !is_leap_year) || (day > 29 && is_leap_year)) {\n            return false;\n        }\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        // April, June, September, November have 30 days\n        if (day < 1 || day > 30) {\n            return false;\n        }\n    } else {\n        // January, March, May, July, August, October, December have 31 days\n        if (day < 1 || day > 31) {\n            return false;\n        }\n    }\n\n    // If all checks pass, return true\n    return true;\n}\n\n"}
{"task_id": "CPP/125", "generation": "#include <vector>\n#include <string>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> split_words(string txt) {\n    // Check for whitespace\n    if (txt.find(' ') != string::npos) {\n        vector<string> result;\n        stringstream ss(txt);\n        string word;\n        while (ss >> word) {\n            result.push_back(word);\n        }\n        return result;\n    }\n    \n    // Check for commas\n    if (txt.find(',') != string::npos) {\n        vector<string> result;\n        stringstream ss(txt);\n        string word;\n        while (getline(ss, word, ',')) {\n            result.push_back(word);\n        }\n        return result;\n    }\n    \n    // Count odd-indexed lowercase letters\n    int count = 0;\n    for (char c : txt) {\n        if (islower(c)) {\n            int index = c - 'a';\n            if (index % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    \n    return {to_string(count)};\n}\n"}
{"task_id": "CPP/126", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nbool is_sorted(vector<int> lst) {\n    // Check if the vector is sorted in ascending order\n    if (!is_sorted(lst.begin(), lst.end())) {\n        return false;\n    }\n\n    // Check if any number appears more than twice\n    for (size_t i = 0; i < lst.size(); ++i) {\n        int count = 0;\n        for (size_t j = 0; j < lst.size(); ++j) {\n            if (lst[i] == lst[j]) {\n                count++;\n            }\n            if (count > 2) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n"}
{"task_id": "CPP/127", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<cmath>\nusing namespace std;\n\n// Function to check if a number is prime\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true; // 2 is the only even prime number\n    if (n % 2 == 0) return false; // Other even numbers are not prime\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nstring intersection(vector<int> interval1, vector<int> interval2) {\n    int start1 = interval1[0], end1 = interval1[1];\n    int start2 = interval2[0], end2 = interval2[1];\n    \n    // Find the intersection\n    int start_intersection = max(start1, start2);\n    int end_intersection = min(end1, end2);\n    \n    // Check if the intervals intersect\n    if (start_intersection > end_intersection) {\n        return \"NO\";\n    }\n    \n    // Calculate the length of the intersection\n    int length_intersection = end_intersection - start_intersection + 1;\n    \n    // Check if the length is a prime number\n    if (isPrime(length_intersection)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\n// Example usage\n"}
{"task_id": "CPP/128", "generation": "#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n\nint prod_signs(vector<int> arr) {\n    // Handle the special case for an empty vector\n    if (arr.empty()) {\n        return -32768;\n    }\n\n    int product_of_signs = 1;\n    int sum_of_magnitudes = 0;\n\n    for (int num : arr) {\n        // Determine the sign of the number\n        int sign = (num > 0) ? 1 : (num < 0) ? -1 : 0;\n        // Update the product of signs\n        product_of_signs *= sign;\n        // Add the magnitude of the number to the sum\n        sum_of_magnitudes += abs(num);\n    }\n\n    // Multiply the sum of magnitudes by the product of signs\n    return sum_of_magnitudes * product_of_signs;\n}\n\n// Example usage\n"}
{"task_id": "CPP/129", "generation": "#include <vector>\n#include <queue>\n#include <climits>\n\nusing namespace std;\n\nvector<int> minPath(vector<vector<int>> grid, int k) {\n    int N = grid.size();\n    vector<int> result;\n    vector<int> min_path(k, INT_MAX); // Initialize with maximum possible values\n\n    // Directions for moving up, down, left, right\n    vector<pair<int, int>> directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n\n    // BFS queue\n    queue<tuple<int, int, vector<int>, int>> q; // (row, col, path, path_length)\n\n    // Start BFS from each cell\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            q.push({i, j, {grid[i][j]}, 1});\n        }\n    }\n\n    while (!q.empty()) {\n        auto [row, col, path, path_length] = q.front();\n        q.pop();\n\n        // If path length is k, compare and update min_path\n        if (path_length == k) {\n            if (path < min_path) {\n                min_path = path;\n            }\n            continue;\n        }\n\n        // Explore neighbors\n        for (auto [dr, dc] : directions) {\n            int new_row = row + dr;\n            int new_col = col + dc;\n\n            if (new_row >= 0 && new_row < N && new_col >= 0 && new_col < N) {\n                vector<int> new_path = path;\n                new_path.push_back(grid[new_row][new_col]);\n                q.push({new_row, new_col, new_path, path_length + 1});\n            }\n        }\n    }\n\n    return min_path;\n}\n\n// Example usage\n"}
{"task_id": "CPP/130", "generation": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<int> tri(int n) {\n    // Vector to store the Tribonacci sequence values\n    vector<int> tribonacci(n + 1);\n    \n    // Base case\n    tribonacci[0] = 1; // This is just a placeholder since we start from tri(1)\n    tribonacci[1] = 3;\n    \n    // Fill the vector based on the recurrence relation\n    for (int i = 2; i <= n; ++i) {\n        if (i % 2 == 0) {\n            // Even case\n            tribonacci[i] = 1 + i / 2;\n        } else {\n            // Odd case\n            tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1];\n        }\n    }\n    \n    // Return the first n + 1 numbers of the Tribonacci sequence\n    return tribonacci;\n}\n\n"}
{"task_id": "CPP/131", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nint digits(int n) {\n    // Convert the integer to a string\n    string numStr = to_string(n);\n    \n    // Initialize the product to 1 (multiplicative identity)\n    int product = 1;\n    \n    // Flag to check if any odd digit is found\n    bool hasOdd = false;\n    \n    // Iterate through each character in the string\n    for (char ch : numStr) {\n        // Convert the character to an integer\n        int digit = ch - '0';\n        \n        // Check if the digit is odd\n        if (digit % 2 != 0) {\n            // Multiply the product by the odd digit\n            product *= digit;\n            hasOdd = true;\n        }\n    }\n    \n    // If no odd digit was found, return 0\n    if (!hasOdd) {\n        return 0;\n    }\n    \n    // Return the product of the odd digits\n    return product;\n}\n\n// Example usage\n"}
{"task_id": "CPP/132", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool is_nested(string str) {\n    int open_brackets = 0;\n    int close_brackets = 0;\n\n    for (char ch : str) {\n        if (ch == '[') {\n            open_brackets++;\n        } else if (ch == ']') {\n            close_brackets++;\n        }\n\n        // Check if there is a nested bracket\n        if (close_brackets > open_brackets) {\n            return true;\n        }\n    }\n\n    // If no nested bracket is found\n    return false;\n}\n\n"}
{"task_id": "CPP/133", "generation": "#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n\nint sum_squares(vector<float> lst) {\n    int sum = 0;\n    for (float num : lst) {\n        int rounded_num = ceil(num);  // Round up to the nearest integer\n        sum += rounded_num * rounded_num;  // Square the rounded number and add to sum\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/134", "generation": "#include <iostream>\n#include <string>\n#include <cctype>\n\nusing namespace std;\n\nbool check_if_last_char_is_a_letter(string txt) {\n    // Check if the string is empty\n    if (txt.empty()) {\n        return false;\n    }\n\n    // Get the last character\n    char last_char = txt.back();\n\n    // Check if the last character is an alphabetical character\n    if (!isalpha(last_char)) {\n        return false;\n    }\n\n    // Check if the last character is not part of a word\n    // Ensure that the last character is not followed by any other characters\n    if (txt.size() > 1 && isalpha(txt[txt.size() - 2])) {\n        return false;\n    }\n\n    return true;\n}\n\n// Test cases\n"}
{"task_id": "CPP/135", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nint can_arrange(vector<int> arr) {\n    int n = arr.size();\n    int max_index = -1;\n\n    // Iterate through the vector starting from the second element\n    for (int i = 1; i < n; i++) {\n        // Check if the current element is not greater than or equal to the previous element\n        if (arr[i] < arr[i - 1]) {\n            // Update the max_index if the current index is greater than the previously stored index\n            if (i > max_index) {\n                max_index = i;\n            }\n        }\n    }\n\n    return max_index;\n}\n\n"}
{"task_id": "CPP/136", "generation": "#include <vector>\n#include <limits.h> // For INT_MAX and INT_MIN\n\nusing namespace std;\n\nvector<int> largest_smallest_integers(vector<int> lst) {\n    int largest_negative = INT_MIN; // Initialize to the smallest possible integer\n    int smallest_positive = INT_MAX; // Initialize to the largest possible integer\n\n    for (int num : lst) {\n        if (num < 0) {\n            // Update largest_negative if num is larger than the current largest_negative\n            if (num > largest_negative) {\n                largest_negative = num;\n            }\n        } else if (num > 0) {\n            // Update smallest_positive if num is smaller than the current smallest_positive\n            if (num < smallest_positive) {\n                smallest_positive = num;\n            }\n        }\n    }\n\n    // If no negative number was found, set largest_negative to 0\n    if (largest_negative == INT_MIN) {\n        largest_negative = 0;\n    }\n\n    // If no positive number was found, set smallest_positive to 0\n    if (smallest_positive == INT_MAX) {\n        smallest_positive = 0;\n    }\n\n    return {largest_negative, smallest_positive};\n}\n\n// Example usage\n"}
{"task_id": "CPP/137", "generation": "#include <iostream>\n#include <string>\n#include <boost/any.hpp>\n#include <boost/algorithm/string.hpp>\n\nusing namespace std;\n\nboost::any compare_one(boost::any a, boost::any b) {\n    // Helper function to convert string to float\n    auto string_to_float = [](const string& str) -> float {\n        string temp = str;\n        boost::replace_all(temp, \",\", \".\");\n        return stof(temp);\n    };\n\n    // Helper function to convert any type to float\n    auto to_float = [&](const boost::any& value) -> float {\n        if (value.type() == typeid(int)) {\n            return static_cast<float>(boost::any_cast<int>(value));\n        } else if (value.type() == typeid(float)) {\n            return boost::any_cast<float>(value);\n        } else if (value.type() == typeid(string)) {\n            return string_to_float(boost::any_cast<string>(value));\n        }\n        throw runtime_error(\"Unsupported type\");\n    };\n\n    // Convert both values to float for comparison\n    float float_a = to_float(a);\n    float float_b = to_float(b);\n\n    // Compare the values\n    if (float_a > float_b) {\n        return a;\n    } else if (float_b > float_a) {\n        return b;\n    } else {\n        return \"None\";\n    }\n}\n\n"}
{"task_id": "CPP/138", "generation": "#include<stdio.h>\n\nbool is_equal_to_sum_even(int n) {\n    // If n is less than 8, it cannot be the sum of 4 positive even numbers\n    if (n < 8) {\n        return false;\n    }\n    \n    // If n is even and greater than or equal to 8, it can be expressed as the sum of 4 even numbers\n    return (n % 2 == 0);\n}\n\n"}
{"task_id": "CPP/139", "generation": "#include <stdio.h>\n\n// Helper function to calculate factorial of a number\nlong long factorial(int num) {\n    long long result = 1;\n    for (int i = 1; i <= num; i++) {\n        result *= i;\n    }\n    return result;\n}\n\n// Function to calculate the Brazilian factorial\nlong long special_factorial(int n) {\n    long long result = 1;\n    for (int i = n; i >= 1; i--) {\n        result *= factorial(i);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/140", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring fix_spaces(string text) {\n    string result = \"\";\n    int n = text.length();\n    int i = 0;\n\n    while (i < n) {\n        if (text[i] == ' ') {\n            int count = 0;\n            // Count consecutive spaces\n            while (i < n && text[i] == ' ') {\n                count++;\n                i++;\n            }\n            // If more than 2 consecutive spaces, replace with '-'\n            if (count > 2) {\n                result += '-';\n            } else {\n                // Replace 1 or 2 spaces with underscores\n                for (int j = 0; j < count; j++) {\n                    result += '_';\n                }\n            }\n        } else {\n            // If not a space, just append the character\n            result += text[i];\n            i++;\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/141", "generation": "#include<stdio.h>\n#include<string>\n#include<cctype>\n#include<unordered_set>\nusing namespace std;\n\nstring file_name_check(string file_name) {\n    // Check if the file name contains exactly one dot\n    size_t dot_pos = file_name.find('.');\n    if (dot_pos == string::npos || dot_pos != file_name.rfind('.')) {\n        return \"No\";\n    }\n\n    // Check if the substring before the dot is not empty and starts with a letter\n    string name_part = file_name.substr(0, dot_pos);\n    if (name_part.empty() || !isalpha(name_part[0])) {\n        return \"No\";\n    }\n\n    // Check if the substring after the dot is one of the allowed extensions\n    unordered_set<string> allowed_extensions = {\"txt\", \"exe\", \"dll\"};\n    string extension_part = file_name.substr(dot_pos + 1);\n    if (allowed_extensions.find(extension_part) == allowed_extensions.end()) {\n        return \"No\";\n    }\n\n    // Count the number of digits in the file name\n    int digit_count = 0;\n    for (char c : file_name) {\n        if (isdigit(c)) {\n            digit_count++;\n            if (digit_count > 3) {\n                return \"No\";\n            }\n        }\n    }\n\n    return \"Yes\";\n}\n\n// Example usage\n"}
{"task_id": "CPP/142", "generation": "#include <vector>\n#include <iostream>\nusing namespace std;\n\nint sum_squares(vector<int> lst) {\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 3 == 0) {\n            lst[i] = lst[i] * lst[i]; // Square the element\n        } else if (i % 4 == 0 && i % 3 != 0) {\n            lst[i] = lst[i] * lst[i] * lst[i]; // Cube the element\n        }\n        sum += lst[i]; // Add the transformed element to the sum\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/143", "generation": "#include <iostream>\n#include <string>\n#include <vector>\n#include <sstream>\n#include <cmath>\n\nusing namespace std;\n\n// Function to check if a number is prime\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true; // 2 is the only even prime number\n    if (n % 2 == 0) return false; // Other even numbers are not prime\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nstring words_in_sentence(string sentence) {\n    stringstream ss(sentence);\n    string word;\n    vector<string> result;\n    \n    while (ss >> word) {\n        if (isPrime(word.length())) {\n            result.push_back(word);\n        }\n    }\n    \n    // Join the words back into a single string\n    string resultString;\n    for (size_t i = 0; i < result.size(); ++i) {\n        if (i != 0) resultString += \" \";\n        resultString += result[i];\n    }\n    \n    return resultString;\n}\n\n"}
{"task_id": "CPP/144", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\n// Function to parse the fraction string and return the numerator and denominator\npair<int, int> parseFraction(const string& fraction) {\n    size_t slashPos = fraction.find('/');\n    int numerator = stoi(fraction.substr(0, slashPos));\n    int denominator = stoi(fraction.substr(slashPos + 1));\n    return {numerator, denominator};\n}\n\n// Function to check if the product of two fractions is a whole number\nbool simplify(string x, string n) {\n    // Parse the fractions\n    pair<int, int> fracX = parseFraction(x);\n    pair<int, int> fracN = parseFraction(n);\n    \n    // Extract numerators and denominators\n    int numX = fracX.first;\n    int denX = fracX.second;\n    int numN = fracN.first;\n    int denN = fracN.second;\n    \n    // Compute the product of the two fractions\n    int resultNumerator = numX * numN;\n    int resultDenominator = denX * denN;\n    \n    // Check if the result is a whole number\n    return resultNumerator % resultDenominator == 0;\n}\n\n// Test the function\n"}
{"task_id": "CPP/145", "generation": "#include <vector>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\n// Helper function to calculate the sum of digits of a number\nint sum_of_digits(int num) {\n    int sum = 0;\n    bool is_negative = num < 0;\n    num = abs(num);\n    \n    while (num > 0) {\n        int digit = num % 10;\n        if (is_negative) {\n            digit = -digit;\n            is_negative = false; // Only the first digit should be negative\n        }\n        sum += digit;\n        num /= 10;\n    }\n    \n    return sum;\n}\n\nvector<int> order_by_points(vector<int> nums) {\n    // Create a vector of pairs where each pair contains the number and its digit sum\n    vector<pair<int, int>> num_sum_pairs;\n    for (int num : nums) {\n        num_sum_pairs.push_back({num, sum_of_digits(num)});\n    }\n    \n    // Sort the vector of pairs based on the digit sum\n    sort(num_sum_pairs.begin(), num_sum_pairs.end(), [](const pair<int, int>& a, const pair<int, int>& b) {\n        if (a.second == b.second) {\n            // If digit sums are equal, maintain the original order\n            return false;\n        }\n        return a.second < b.second;\n    });\n    \n    // Extract the sorted numbers from the sorted pairs\n    vector<int> sorted_nums;\n    for (const auto& pair : num_sum_pairs) {\n        sorted_nums.push_back(pair.first);\n    }\n    \n    return sorted_nums;\n}\n\n// Example usage\n"}
{"task_id": "CPP/146", "generation": "#include <vector>\n#include <string>\n#include <cmath>\nusing namespace std;\n\nint specialFilter(vector<int> nums) {\n    int count = 0;\n    \n    for (int num : nums) {\n        // Step 1: Check if the number is greater than 10\n        if (num > 10) {\n            // Convert the number to a string to easily access the first and last digits\n            string numStr = to_string(abs(num));\n            \n            // Step 2: Extract the first and last digits\n            int firstDigit = numStr[0] - '0';\n            int lastDigit = numStr[numStr.size() - 1] - '0';\n            \n            // Step 3: Check if both digits are odd\n            if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    \n    return count;\n}\n\n// Example usage\n"}
{"task_id": "CPP/147", "generation": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint get_max_triples(int n) {\n    // Step 1: Generate the vector a\n    vector<int> a(n);\n    for (int i = 1; i <= n; ++i) {\n        a[i-1] = i * i - i + 1;\n    }\n\n    // Step 2: Count the number of valid triples\n    int count = 0;\n    for (int i = 0; i < n; ++i) {\n        for (int j = i + 1; j < n; ++j) {\n            for (int k = j + 1; k < n; ++k) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}\n\n"}
{"task_id": "CPP/148", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_map>\nusing namespace std;\n\nvector<string> bf(string planet1, string planet2) {\n    // List of planets in order of their proximity to the Sun\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    \n    // Map to store the index of each planet for quick lookup\n    unordered_map<string, int> planetIndex;\n    for (int i = 0; i < planets.size(); ++i) {\n        planetIndex[planets[i]] = i;\n    }\n    \n    // Check if both planet names are valid\n    if (planetIndex.find(planet1) == planetIndex.end() || planetIndex.find(planet2) == planetIndex.end()) {\n        return {};\n    }\n    \n    // Get the indices of the two planets\n    int index1 = planetIndex[planet1];\n    int index2 = planetIndex[planet2];\n    \n    // Ensure index1 is less than index2 for consistency\n    if (index1 > index2) {\n        swap(index1, index2);\n    }\n    \n    // Collect planets between index1 and index2 (excluding the endpoints)\n    vector<string> result;\n    for (int i = index1 + 1; i < index2; ++i) {\n        result.push_back(planets[i]);\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/149", "generation": "#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nvector<string> sorted_list_sum(vector<string> lst) {\n    // Step 1: Filter out strings with odd lengths\n    vector<string> filtered_lst;\n    for (const string& s : lst) {\n        if (s.length() % 2 == 0) {\n            filtered_lst.push_back(s);\n        }\n    }\n\n    // Step 2: Sort the filtered strings\n    sort(filtered_lst.begin(), filtered_lst.end(), [](const string& a, const string& b) {\n        if (a.length() == b.length()) {\n            return a < b; // Sort alphabetically if lengths are the same\n        }\n        return a.length() < b.length(); // Sort by length\n    });\n\n    return filtered_lst;\n}\n\n// Example usage\n"}
{"task_id": "CPP/150", "generation": "#include<iostream>\n#include<cmath>\n\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true; // 2 is the only even prime number\n    if (n % 2 == 0) return false; // Other even numbers are not prime\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nint x_or_y(int n, int x, int y) {\n    if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n\n"}
{"task_id": "CPP/151", "generation": "#include <vector>\n#include <cmath>\nusing namespace std;\n\nlong long double_the_difference(vector<float> lst) {\n    long long sum = 0;\n    \n    for (float num : lst) {\n        // Check if the number is a positive integer\n        if (num > 0 && floor(num) == num) {\n            int int_num = static_cast<int>(num);\n            // Check if the number is odd\n            if (int_num % 2 != 0) {\n                sum += static_cast<long long>(int_num) * int_num;\n            }\n        }\n    }\n    \n    return sum;\n}\n"}
{"task_id": "CPP/152", "generation": "#include <vector>\n#include <cmath> // for std::abs\n\nusing namespace std;\n\nvector<int> compare(vector<int> game, vector<int> guess) {\n    vector<int> result;\n    for (size_t i = 0; i < game.size(); ++i) {\n        if (game[i] == guess[i]) {\n            result.push_back(0);\n        } else {\n            result.push_back(std::abs(game[i] - guess[i]));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/153", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring Strongest_Extension(string class_name, vector<string> extensions) {\n    string strongest_extension = \"\";\n    int max_strength = INT_MIN;\n\n    for (const string& ext : extensions) {\n        int CAP = 0;\n        int SM = 0;\n\n        // Calculate CAP and SM for the current extension\n        for (char c : ext) {\n            if (isupper(c)) {\n                CAP++;\n            } else if (islower(c)) {\n                SM++;\n            }\n        }\n\n        // Calculate the strength of the current extension\n        int strength = CAP - SM;\n\n        // Update the strongest extension if the current one is stronger\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest_extension = ext;\n        }\n    }\n\n    // Return the result in the required format\n    return class_name + \".\" + strongest_extension;\n}\n\n"}
{"task_id": "CPP/154", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool cycpattern_check(string a, string b) {\n    int n = b.length();\n    if (n == 0) return true; // Any string contains an empty string\n\n    // Concatenate b with itself to handle cyclic rotations\n    string b_rotated = b + b;\n\n    // Check if any rotation of b is a substring of a\n    for (int i = 0; i < n; ++i) {\n        string rotation = b_rotated.substr(i, n);\n        if (a.find(rotation) != string::npos) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n"}
{"task_id": "CPP/155", "generation": "#include <vector>\n#include <cmath>\n\nusing namespace std;\n\nvector<int> even_odd_count(int num) {\n    // Initialize counters for even and odd digits\n    int even_count = 0;\n    int odd_count = 0;\n    \n    // Handle negative numbers by taking the absolute value\n    num = abs(num);\n    \n    // Loop through each digit of the number\n    while (num > 0) {\n        int digit = num % 10; // Get the last digit\n        if (digit % 2 == 0) {\n            even_count++; // Increment even count if the digit is even\n        } else {\n            odd_count++; // Increment odd count if the digit is odd\n        }\n        num /= 10; // Remove the last digit\n    }\n    \n    // Return the result as a vector\n    return {even_count, odd_count};\n}\n"}
{"task_id": "CPP/156", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring int_to_mini_roman(int number) {\n    // Define the Roman numeral symbols and their corresponding values\n    vector<pair<int, string>> roman_map = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"},\n        {100, \"c\"}, {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"},\n        {10, \"x\"}, {9, \"ix\"}, {5, \"v\"}, {4, \"iv\"},\n        {1, \"i\"}\n    };\n    \n    string result = \"\";\n    \n    // Iterate through the map\n    for (const auto& pair : roman_map) {\n        int value = pair.first;\n        string symbol = pair.second;\n        \n        // Append the symbol as many times as it fits into the number\n        while (number >= value) {\n            result += symbol;\n            number -= value;\n        }\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/157", "generation": "#include<stdio.h>\n#include<math.h>\n\nbool right_angle_triangle(float a, float b, float c) {\n    // Ensure the sides are in non-decreasing order\n    if (a > b) {\n        float temp = a;\n        a = b;\n        b = temp;\n    }\n    if (b > c) {\n        float temp = b;\n        b = c;\n        c = temp;\n    }\n    if (a > b) {\n        float temp = a;\n        a = b;\n        b = temp;\n    }\n\n    // Now c is the longest side\n    return (pow(a, 2) + pow(b, 2) == pow(c, 2));\n}\n\n"}
{"task_id": "CPP/158", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_set>\n#include <algorithm>\n\nusing namespace std;\n\nstring find_max(vector<string> words) {\n    string max_word = \"\";\n    int max_unique_count = 0;\n\n    for (const string& word : words) {\n        // Use an unordered_set to count unique characters in the word\n        unordered_set<char> unique_chars(word.begin(), word.end());\n        int unique_count = unique_chars.size();\n\n        // If the current word has more unique characters, update max_word\n        if (unique_count > max_unique_count) {\n            max_word = word;\n            max_unique_count = unique_count;\n        }\n        // If the current word has the same number of unique characters but is lexicographically smaller, update max_word\n        else if (unique_count == max_unique_count && word < max_word) {\n            max_word = word;\n        }\n    }\n\n    return max_word;\n}\n\n"}
{"task_id": "CPP/159", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<int> eat(int number, int need, int remaining) {\n    // Calculate the total number of carrots the rabbit needs to eat\n    int total_needed = number + need;\n    \n    // Determine how many carrots the rabbit can actually eat\n    int actually_eaten = min(total_needed, remaining);\n    \n    // Calculate the number of carrots left\n    int carrots_left = remaining - actually_eaten;\n    \n    // Return the result as a vector\n    return {actually_eaten, carrots_left};\n}\n\n// Example usage\n"}
{"task_id": "CPP/160", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cmath>\n\nusing namespace std;\n\nint do_algebra(vector<string> operato, vector<int> operand) {\n    // Initialize the result with the first operand\n    int result = operand[0];\n    \n    // Iterate through the operators and operands\n    for (size_t i = 0; i < operato.size(); ++i) {\n        int next_operand = operand[i + 1];\n        if (operato[i] == \"+\") {\n            result += next_operand;\n        } else if (operato[i] == \"-\") {\n            result -= next_operand;\n        } else if (operato[i] == \"*\") {\n            result *= next_operand;\n        } else if (operato[i] == \"//\") {\n            result /= next_operand; // Integer division\n        } else if (operato[i] == \"**\") {\n            result = pow(result, next_operand);\n        }\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/161", "generation": "#include<iostream>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nstring solve(string s) {\n    bool containsLetter = false;\n    \n    // First pass: check if the string contains any letters and reverse their case if necessary\n    for (char &c : s) {\n        if (isalpha(c)) {\n            containsLetter = true;\n            if (islower(c)) {\n                c = toupper(c);\n            } else {\n                c = tolower(c);\n            }\n        }\n    }\n    \n    // If the string contains no letters, reverse the entire string\n    if (!containsLetter) {\n        reverse(s.begin(), s.end());\n    }\n    \n    return s;\n}\n\n"}
{"task_id": "CPP/162", "generation": "#include <iostream>\n#include <string>\n#include <openssl/md5.h>\n#include <iomanip>\n#include <sstream>\n\nusing namespace std;\n\nstring string_to_md5(const string& text) {\n    // Check if the input string is empty\n    if (text.empty()) {\n        return \"\";\n    }\n\n    // Create an MD5 context\n    MD5_CTX md5Context;\n    MD5_Init(&md5Context);\n\n    // Update the context with the input string\n    MD5_Update(&md5Context, text.c_str(), text.size());\n\n    // Create a buffer to hold the MD5 hash\n    unsigned char md5Hash[MD5_DIGEST_LENGTH];\n    MD5_Final(md5Hash, &md5Context);\n\n    // Convert the MD5 hash to a hexadecimal string\n    stringstream ss;\n    for (int i = 0; i < MD5_DIGEST_LENGTH; ++i) {\n        ss << hex << setw(2) << setfill('0') << (int)md5Hash[i];\n    }\n\n    return ss.str();\n}\n\n"}
{"task_id": "CPP/163", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> generate_integers(int a, int b) {\n    // Ensure a is less than or equal to b\n    if (a > b) {\n        swap(a, b);\n    }\n\n    vector<int> even_digits;\n\n    // Iterate through the range [a, b]\n    for (int i = a; i <= b; ++i) {\n        int digit = i % 10; // Extract the last digit\n        if (digit % 2 == 0 && digit != 0) { // Check if the digit is even and not zero\n            even_digits.push_back(digit);\n        }\n    }\n\n    // Sort the even digits in ascending order\n    sort(even_digits.begin(), even_digits.end());\n\n    // Remove duplicates by converting to a set and back to a vector\n    vector<int> unique_even_digits;\n    for (int digit : even_digits) {\n        if (unique_even_digits.empty() || unique_even_digits.back() != digit) {\n            unique_even_digits.push_back(digit);\n        }\n    }\n\n    return unique_even_digits;\n}\n\n"}
{"task_id": "CPP/0", "generation": "#include<stdio.h>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nbool has_close_elements(vector<float> numbers, float threshold) {\n    // Get the size of the vector\n    int n = numbers.size();\n    \n    // Iterate through each pair of numbers\n    for (int i = 0; i < n; ++i) {\n        for (int j = i + 1; j < n; ++j) {\n            // Calculate the absolute difference between numbers[i] and numbers[j]\n            float diff = abs(numbers[i] - numbers[j]);\n            \n            // Check if the difference is less than the threshold\n            if (diff < threshold) {\n                return true;\n            }\n        }\n    }\n    \n    // If no such pair is found, return false\n    return false;\n}\n\n"}
{"task_id": "CPP/1", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <stack>\n\nusing namespace std;\n\nvector<string> separate_paren_groups(string paren_string) {\n    vector<string> result;\n    string current_group;\n    stack<char> paren_stack;\n    bool inside_group = false;\n\n    for (char ch : paren_string) {\n        if (ch == ' ') {\n            continue; // Ignore spaces\n        }\n\n        if (ch == '(') {\n            if (!inside_group) {\n                inside_group = true;\n            }\n            paren_stack.push(ch);\n        } else if (ch == ')') {\n            if (!paren_stack.empty() && paren_stack.top() == '(') {\n                paren_stack.pop();\n            }\n        }\n\n        current_group.push_back(ch);\n\n        if (inside_group && paren_stack.empty()) {\n            result.push_back(current_group);\n            current_group.clear();\n            inside_group = false;\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/2", "generation": "#include <iostream>\n#include <cmath>\n\nfloat truncate_number(float number) {\n    // Get the integer part of the number\n    float integer_part = floor(number);\n    \n    // Subtract the integer part from the original number to get the decimal part\n    float decimal_part = number - integer_part;\n    \n    return decimal_part;\n}\n\n"}
{"task_id": "CPP/3", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nbool below_zero(vector<int> operations) {\n    int balance = 0;\n    for (int operation : operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\n"}
{"task_id": "CPP/4", "generation": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <numeric> // for std::accumulate\n\nusing namespace std;\n\nfloat mean_absolute_deviation(const vector<float>& numbers) {\n    if (numbers.empty()) {\n        return 0.0; // Return 0 if the vector is empty to avoid division by zero\n    }\n\n    // Step 1: Calculate the mean of the dataset\n    float sum = accumulate(numbers.begin(), numbers.end(), 0.0);\n    float mean = sum / numbers.size();\n\n    // Step 2: Compute the absolute difference between each element and the mean\n    float absolute_deviations_sum = 0.0;\n    for (float number : numbers) {\n        absolute_deviations_sum += abs(number - mean);\n    }\n\n    // Step 3: Divide the sum of absolute deviations by the number of elements\n    float mad = absolute_deviations_sum / numbers.size();\n\n    return mad;\n}\n\n"}
{"task_id": "CPP/5", "generation": "#include <vector>\n#include <iostream>\n\nusing namespace std;\n\nvector<int> intersperse(vector<int> numbers, int delimeter) {\n    // Check if the input vector is empty\n    if (numbers.empty()) {\n        return {};\n    }\n\n    // Create a new vector to store the result\n    vector<int> result;\n\n    // Iterate through the input vector\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        // Add the current element to the result\n        result.push_back(numbers[i]);\n\n        // If it's not the last element, add the delimiter\n        if (i < numbers.size() - 1) {\n            result.push_back(delimeter);\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/6", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<int> parse_nested_parens(string paren_string) {\n    vector<int> result;\n    stringstream ss(paren_string);\n    string group;\n    \n    while (ss >> group) {\n        int max_depth = 0;\n        int current_depth = 0;\n        \n        for (char c : group) {\n            if (c == '(') {\n                current_depth++;\n                if (current_depth > max_depth) {\n                    max_depth = current_depth;\n                }\n            } else if (c == ')') {\n                current_depth--;\n            }\n        }\n        \n        result.push_back(max_depth);\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/7", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm> // for std::find\n\nusing namespace std;\n\nvector<string> filter_by_substring(vector<string> strings, string substring) {\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.find(substring) != string::npos) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/8", "generation": "#include <vector>\n#include <numeric> // For std::accumulate\n\nusing namespace std;\n\nvector<int> sum_product(const vector<int>& numbers) {\n    // Initialize sum to 0 and product to 1\n    int sum = 0;\n    int product = 1;\n\n    // Iterate through the vector to calculate sum and product\n    for (int num : numbers) {\n        sum += num;\n        product *= num;\n    }\n\n    // Return the result as a vector\n    return {sum, product};\n}\n\n// Example usage\n"}
{"task_id": "CPP/9", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<int> rolling_max(vector<int> numbers) {\n    // Initialize an empty vector to store the rolling maximums\n    vector<int> result;\n    \n    // Initialize a variable to keep track of the maximum element encountered so far\n    int current_max = numbers[0];\n    \n    // Iterate through the input vector\n    for (int i = 0; i < numbers.size(); ++i) {\n        // Update the current maximum if the current element is greater\n        if (numbers[i] > current_max) {\n            current_max = numbers[i];\n        }\n        \n        // Append the current maximum to the result vector\n        result.push_back(current_max);\n    }\n    \n    // Return the result vector\n    return result;\n}\n\n"}
{"task_id": "CPP/10", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nbool is_palindrome(const string& str) {\n    // Test if given string is a palindrome\n    string s(str.rbegin(), str.rend());\n    return s == str;\n}\n\nstring make_palindrome(const string& str) {\n    // Find the shortest palindrome that begins with a supplied string\n    for (size_t i = 0; i < str.size(); ++i) {\n        // Check if the suffix from i to the end is a palindrome\n        if (is_palindrome(str.substr(i))) {\n            // If it is, append the reverse of the prefix (0 to i-1) to the end\n            string prefix = str.substr(0, i);\n            reverse(prefix.begin(), prefix.end());\n            return str + prefix;\n        }\n    }\n    // If no palindromic suffix is found, append the reverse of the entire string\n    string reversed_str(str.rbegin(), str.rend());\n    return str + reversed_str;\n}\n\n"}
{"task_id": "CPP/11", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring string_xor(string a, string b) {\n    // Ensure both strings are of the same length\n    if (a.length() != b.length()) {\n        throw invalid_argument(\"Input strings must be of the same length\");\n    }\n\n    string result = \"\";\n    for (size_t i = 0; i < a.length(); ++i) {\n        // Perform XOR operation: '0' ^ '0' = '0', '1' ^ '1' = '0', '0' ^ '1' = '1', '1' ^ '0' = '1'\n        char xor_char = (a[i] == b[i]) ? '0' : '1';\n        result += xor_char;\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/12", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring longest(vector<string> strings) {\n    // Check if the vector is empty\n    if (strings.empty()) {\n        return \"\"; // Return an empty string to represent None\n    }\n\n    // Initialize variables to keep track of the longest string\n    string longest_string = strings[0];\n\n    // Iterate through the vector to find the longest string\n    for (const string& str : strings) {\n        if (str.length() > longest_string.length()) {\n            longest_string = str;\n        }\n    }\n\n    return longest_string;\n}\n\n"}
{"task_id": "CPP/13", "generation": "#include <iostream>\n\nint greatest_common_divisor(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\n"}
{"task_id": "CPP/14", "generation": "#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> all_prefixes(const string& str) {\n    vector<string> prefixes;\n    for (size_t i = 1; i <= str.size(); ++i) {\n        prefixes.push_back(str.substr(0, i));\n    }\n    return prefixes;\n}\n\n// Example usage\n"}
{"task_id": "CPP/15", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nstring string_sequence(int n) {\n    // Create a stringstream to build the result\n    stringstream result;\n    \n    // Loop from 0 to n inclusive\n    for (int i = 0; i <= n; ++i) {\n        // Append the current number to the stringstream\n        result << i;\n        \n        // If it's not the last number, append a space\n        if (i != n) {\n            result << \" \";\n        }\n    }\n    \n    // Convert the stringstream to a string and return it\n    return result.str();\n}\n\n"}
{"task_id": "CPP/16", "generation": "#include <iostream>\n#include <string>\n#include <unordered_set>\n#include <algorithm>\n\nusing namespace std;\n\nint count_distinct_characters(string str) {\n    // Convert the string to lowercase\n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    \n    // Use an unordered_set to store unique characters\n    unordered_set<char> unique_chars;\n    \n    // Iterate through the string and add each character to the set\n    for (char c : str) {\n        unique_chars.insert(c);\n    }\n    \n    // The size of the set is the number of distinct characters\n    return unique_chars.size();\n}\n\n"}
{"task_id": "CPP/17", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<int> parse_music(string music_string) {\n    vector<int> beats;\n    stringstream ss(music_string);\n    string note;\n    \n    while (ss >> note) {\n        if (note == \"o\") {\n            beats.push_back(4);\n        } else if (note == \"o|\") {\n            beats.push_back(2);\n        } else if (note == \".|\") {\n            beats.push_back(1);\n        }\n    }\n    \n    return beats;\n}\n\n"}
{"task_id": "CPP/18", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint how_many_times(string str, string substring) {\n    int count = 0;\n    int sub_len = substring.length();\n    int str_len = str.length();\n\n    if (sub_len == 0 || str_len == 0) {\n        return 0;\n    }\n\n    for (int i = 0; i <= str_len - sub_len; ++i) {\n        if (str.substr(i, sub_len) == substring) {\n            ++count;\n        }\n    }\n\n    return count;\n}\n\n"}
{"task_id": "CPP/19", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <vector>\n#include <map>\n#include <algorithm>\n\nusing namespace std;\n\nstring sort_numbers(string numbers) {\n    // Step 1: Create a mapping from number words to their corresponding numerical values\n    map<string, int> number_map = {\n        {\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3}, {\"four\", 4},\n        {\"five\", 5}, {\"six\", 6}, {\"seven\", 7}, {\"eight\", 8}, {\"nine\", 9}\n    };\n\n    // Step 2: Tokenize the input string into individual number words\n    vector<string> tokens;\n    stringstream ss(numbers);\n    string token;\n    while (ss >> token) {\n        tokens.push_back(token);\n    }\n\n    // Step 3: Convert each number word to its numerical value\n    vector<int> numerical_values;\n    for (const string& word : tokens) {\n        numerical_values.push_back(number_map[word]);\n    }\n\n    // Step 4: Sort the numerical values\n    sort(numerical_values.begin(), numerical_values.end());\n\n    // Step 5: Convert the sorted numerical values back to their corresponding number words\n    vector<string> sorted_words;\n    for (int value : numerical_values) {\n        for (const auto& pair : number_map) {\n            if (pair.second == value) {\n                sorted_words.push_back(pair.first);\n                break;\n            }\n        }\n    }\n\n    // Step 6: Reconstruct the string\n    string sorted_string;\n    for (size_t i = 0; i < sorted_words.size(); ++i) {\n        sorted_string += sorted_words[i];\n        if (i < sorted_words.size() - 1) {\n            sorted_string += \" \";\n        }\n    }\n\n    return sorted_string;\n}\n\n"}
{"task_id": "CPP/20", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\npair<float, float> find_closest_elements(vector<float> numbers) {\n    // Sort the vector\n    sort(numbers.begin(), numbers.end());\n    \n    // Initialize variables to store the closest pair and the minimum difference\n    pair<float, float> closest_pair = {numbers[0], numbers[1]};\n    float min_diff = abs(numbers[1] - numbers[0]);\n    \n    // Iterate through the sorted vector to find the closest pair\n    for (size_t i = 1; i < numbers.size() - 1; ++i) {\n        float diff = abs(numbers[i + 1] - numbers[i]);\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = {numbers[i], numbers[i + 1]};\n        }\n    }\n    \n    // Ensure the pair is returned in the correct order\n    if (closest_pair.first > closest_pair.second) {\n        swap(closest_pair.first, closest_pair.second);\n    }\n    \n    return closest_pair;\n}\n\n"}
{"task_id": "CPP/21", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm> // for std::min_element and std::max_element\n\nusing namespace std;\n\nvector<float> rescale_to_unit(vector<float> numbers) {\n    // Find the minimum and maximum values in the vector\n    float min_value = *min_element(numbers.begin(), numbers.end());\n    float max_value = *max_element(numbers.begin(), numbers.end());\n\n    // Apply the linear transformation to each element\n    vector<float> rescaled_numbers;\n    for (float num : numbers) {\n        float new_value = (num - min_value) / (max_value - min_value);\n        rescaled_numbers.push_back(new_value);\n    }\n\n    return rescaled_numbers;\n}\n\n"}
{"task_id": "CPP/22", "generation": "#include <iostream>\n#include <vector>\n#include <list>\n#include <boost/any.hpp>\n\ntypedef std::list<boost::any> list_any;\n\nstd::vector<int> filter_integers(list_any values) {\n    std::vector<int> result;\n    for (const auto& value : values) {\n        if (value.type() == typeid(int)) {\n            result.push_back(boost::any_cast<int>(value));\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/23", "generation": "#include <iostream>\n#include <string>\n\nint strlen(const std::string& str) {\n    return str.length();\n}\n\n"}
{"task_id": "CPP/24", "generation": "#include<iostream>\nusing namespace std;\n\nint largest_divisor(int n) {\n    // Start from the number itself and decrement to find the largest divisor\n    for (int i = n / 2; i >= 1; --i) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    // If no divisor is found (which shouldn't happen for positive n), return 1\n    return 1;\n}\n\n"}
{"task_id": "CPP/25", "generation": "#include <vector>\n#include <iostream>\n\nusing namespace std;\n\nvector<int> factorize(int n) {\n    vector<int> factors;\n    \n    // Check for the number of 2s that divide n\n    while (n % 2 == 0) {\n        factors.push_back(2);\n        n = n / 2;\n    }\n    \n    // n must be odd at this point, so we can skip even numbers\n    for (int i = 3; i * i <= n; i += 2) {\n        // While i divides n, add i and divide n\n        while (n % i == 0) {\n            factors.push_back(i);\n            n = n / i;\n        }\n    }\n    \n    // This condition is to check if n is a prime number greater than 2\n    if (n > 2) {\n        factors.push_back(n);\n    }\n    \n    return factors;\n}\n\n"}
{"task_id": "CPP/26", "generation": "#include <iostream>\n#include <vector>\n#include <unordered_set>\n\nusing namespace std;\n\nvector<int> remove_duplicates(vector<int> numbers) {\n    unordered_set<int> seen;\n    vector<int> result;\n\n    for (int num : numbers) {\n        if (seen.find(num) == seen.end()) {\n            // If the number is not found in the set, it's the first occurrence\n            result.push_back(num);\n            seen.insert(num);\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/27", "generation": "#include <iostream>\n#include <string>\n#include <cctype> // for isupper and islower\n\nusing namespace std;\n\nstring flip_case(string str) {\n    for (char &c : str) {\n        if (isupper(c)) {\n            c = tolower(c);\n        } else if (islower(c)) {\n            c = toupper(c);\n        }\n    }\n    return str;\n}\n\n"}
{"task_id": "CPP/28", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <numeric> // for std::accumulate\n\nusing namespace std;\n\nstring concatenate(const vector<string>& strings) {\n    // Use std::accumulate to concatenate all strings in the vector\n    return accumulate(strings.begin(), strings.end(), string(\"\"));\n}\n\n"}
{"task_id": "CPP/29", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> filter_by_prefix(vector<string> strings, string prefix) {\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.substr(0, prefix.size()) == prefix) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/30", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm> // for std::copy_if\n\nusing namespace std;\n\nvector<float> get_positive(const vector<float>& l) {\n    vector<float> positive_numbers;\n    for (float num : l) {\n        if (num > 0) {\n            positive_numbers.push_back(num);\n        }\n    }\n    return positive_numbers;\n}\n\n"}
{"task_id": "CPP/31", "generation": "#include <cstdio>\n#include <cmath>\n\nbool is_prime(long long n) {\n    // Handle edge cases\n    if (n <= 1) return false;\n    if (n == 2) return true; // 2 is the only even prime number\n    if (n % 2 == 0) return false; // Other even numbers are not prime\n\n    // Check for factors from 3 to sqrt(n)\n    long long limit = static_cast<long long>(sqrt(n));\n    for (long long i = 3; i <= limit; i += 2) {\n        if (n % i == 0) return false;\n    }\n\n    return true;\n}\n\n"}
{"task_id": "CPP/32", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n\ndouble poly(vector<double> xs, double x){\n    double sum = 0;\n    for (int i = 0; i < xs.size(); i++) {\n        sum += xs[i] * pow(x, i);\n    }\n    return sum;\n}\n\ndouble poly_derivative(vector<double> xs, double x){\n    double sum = 0;\n    for (int i = 1; i < xs.size(); i++) {\n        sum += i * xs[i] * pow(x, i - 1);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    double x0 = 0.0; // Initial guess\n    double tolerance = 1e-7; // Tolerance for convergence\n    int max_iterations = 1000; // Maximum number of iterations\n\n    for (int i = 0; i < max_iterations; i++) {\n        double fx = poly(xs, x0);\n        double dfx = poly_derivative(xs, x0);\n\n        if (fabs(fx) < tolerance) {\n            return x0; // Root found\n        }\n\n        if (fabs(dfx) < tolerance) {\n            printf(\"Derivative is too small, method may not converge.\\n\");\n            return x0;\n        }\n\n        x0 = x0 - fx / dfx;\n    }\n\n    printf(\"Maximum iterations reached, method may not have converged.\\n\");\n    return x0;\n}\n\n"}
{"task_id": "CPP/33", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> sort_third(vector<int> l) {\n    // Step 1: Identify the indices divisible by three\n    vector<int> indices;\n    for (size_t i = 0; i < l.size(); ++i) {\n        if ((i + 1) % 3 == 0) {  // Indices are 0-based, so we check (i + 1) % 3\n            indices.push_back(i);\n        }\n    }\n\n    // Step 2: Extract the values at these indices\n    vector<int> values;\n    for (int index : indices) {\n        values.push_back(l[index]);\n    }\n\n    // Step 3: Sort the extracted values\n    sort(values.begin(), values.end());\n\n    // Step 4: Replace the original values with the sorted values\n    for (size_t i = 0; i < indices.size(); ++i) {\n        l[indices[i]] = values[i];\n    }\n\n    // Step 5: Return the modified vector\n    return l;\n}\n"}
{"task_id": "CPP/34", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> unique(vector<int> l) {\n    // Step 1: Sort the vector\n    sort(l.begin(), l.end());\n    \n    // Step 2: Remove duplicates\n    l.erase(unique(l.begin(), l.end()), l.end());\n    \n    return l;\n}\n\n"}
{"task_id": "CPP/35", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm> // for std::max_element\n\nusing namespace std;\n\nfloat max_element(const vector<float>& l) {\n    // Check if the vector is empty\n    if (l.empty()) {\n        throw invalid_argument(\"Vector is empty\");\n    }\n    \n    // Use std::max_element to find the maximum element\n    return *max_element(l.begin(), l.end());\n}\n\n"}
{"task_id": "CPP/36", "generation": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint fizz_buzz(int n) {\n    int count = 0;\n    for (int i = 0; i < n; ++i) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            string num_str = to_string(i);\n            for (char c : num_str) {\n                if (c == '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/37", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<float> sort_even(vector<float> l) {\n    // Extract values at even indices\n    vector<float> even_values;\n    for (size_t i = 0; i < l.size(); i += 2) {\n        even_values.push_back(l[i]);\n    }\n\n    // Sort the extracted values\n    sort(even_values.begin(), even_values.end());\n\n    // Reconstruct the output vector\n    vector<float> result;\n    size_t even_index = 0;\n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 2 == 0) {\n            result.push_back(even_values[even_index++]);\n        } else {\n            result.push_back(l[i]);\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/38", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring decode_cyclic(string s){ \n    // returns decoded string by reversing the cycling of groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l = s.length();\n    int num = (l + 2) / 3;\n    string x, output;\n    int i;\n    for (i = 0; i * 3 < l; i++)\n    {\n        // reverse the cycling in each group. Unless group has fewer elements than 3.\n        x = s.substr(i * 3, 3);\n        if (x.length() == 3) x = x[2] + x.substr(0, 2);\n        output = output + x;\n    }\n    return output;\n}\n\n"}
{"task_id": "CPP/39", "generation": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n// Function to check if a number is prime\nbool is_prime(int num) {\n    if (num <= 1) return false;\n    if (num == 2) return true;\n    if (num % 2 == 0) return false;\n    for (int i = 3; i <= sqrt(num); i += 2) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\n// Function to generate the n-th prime Fibonacci number\nint prime_fib(int n) {\n    if (n <= 0) return -1; // Invalid input\n    int a = 1, b = 1, count = 0;\n    while (true) {\n        int next = a + b;\n        a = b;\n        b = next;\n        if (is_prime(next)) {\n            count++;\n            if (count == n) {\n                return next;\n            }\n        }\n    }\n}\n\n// Main function to test the prime_fib function\n"}
{"task_id": "CPP/40", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nbool triples_sum_to_zero(vector<int> l) {\n    // Sort the vector\n    sort(l.begin(), l.end());\n    \n    int n = l.size();\n    \n    // Iterate through the vector\n    for (int i = 0; i < n - 2; ++i) {\n        // Skip duplicates for the first element\n        if (i > 0 && l[i] == l[i - 1]) continue;\n        \n        int left = i + 1;\n        int right = n - 1;\n        \n        while (left < right) {\n            int sum = l[i] + l[left] + l[right];\n            \n            if (sum == 0) {\n                return true;\n            } else if (sum < 0) {\n                // Move the left pointer to the right\n                ++left;\n            } else {\n                // Move the right pointer to the left\n                --right;\n            }\n        }\n    }\n    \n    return false;\n}\n\n// Example usage\n"}
{"task_id": "CPP/41", "generation": "#include<stdio.h>\n\nint car_race_collision(int n) {\n    return n * n;\n}\n\n"}
{"task_id": "CPP/42", "generation": "#include <vector>\nusing namespace std;\n\nvector<int> incr_list(vector<int> l) {\n    vector<int> result;\n    for (int i = 0; i < l.size(); i++) {\n        result.push_back(l[i] + 1);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/43", "generation": "#include <vector>\n#include <unordered_set>\nusing namespace std;\n\nbool pairs_sum_to_zero(vector<int> l) {\n    unordered_set<int> seen;\n    \n    for (int num : l) {\n        if (seen.find(-num) != seen.end()) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    \n    return false;\n}\n\n// Example usage\n"}
{"task_id": "CPP/44", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nstring change_base(int x, int base) {\n    if (x == 0) return \"0\"; // Special case for zero\n\n    string result = \"\";\n    while (x > 0) {\n        int remainder = x % base;\n        result += to_string(remainder); // Append the remainder to the result string\n        x /= base;\n    }\n\n    // Since we appended the remainders in reverse order, we need to reverse the string\n    reverse(result.begin(), result.end());\n\n    return result;\n}\n\n"}
{"task_id": "CPP/45", "generation": "#include <stdio.h>\n\nfloat triangle_area(float a, float h) {\n    return 0.5 * a * h;\n}\n\n"}
{"task_id": "CPP/46", "generation": "#include <stdio.h>\n\nint fib4(int n) {\n    // Base cases\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n\n    // Initialize the first four elements of the sequence\n    int a = 0, b = 0, c = 2, d = 0;\n    int result = 0;\n\n    // Compute the n-th element iteratively\n    for (int i = 4; i <= n; i++) {\n        result = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = result;\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/47", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nfloat median(vector<float> l) {\n    // Step 1: Sort the vector\n    sort(l.begin(), l.end());\n\n    // Step 2: Determine the size of the vector\n    int n = l.size();\n\n    // Step 3: Calculate the median\n    if (n % 2 == 1) {\n        // If the number of elements is odd, return the middle element\n        return l[n / 2];\n    } else {\n        // If the number of elements is even, return the average of the two middle elements\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    }\n}\n\n"}
{"task_id": "CPP/48", "generation": "#include <iostream>\n#include <string>\n\n// Function to check if a given string is a palindrome\nbool is_palindrome(const std::string& text) {\n    int n = text.length();\n    for (int i = 0; i < n / 2; ++i) {\n        if (text[i] != text[n - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Main function to test the is_palindrome function\n"}
{"task_id": "CPP/49", "generation": "#include <stdio.h>\n\nint modp(int n, int p) {\n    if (n == 0) {\n        return 1;\n    }\n\n    long long result = 1;\n    long long base = 2;\n\n    while (n > 0) {\n        // If n is odd, multiply base with result\n        if (n % 2 == 1) {\n            result = (result * base) % p;\n        }\n        // n must be even now\n        n = n >> 1; // n = n / 2\n        base = (base * base) % p; // Change base to base^2 % p\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/50", "generation": "#include <stdio.h>\n#include <string>\nusing namespace std;\n\nstring encode_shift(string s) {\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i = 0; i < s.length(); i++) {\n        int w = ((int)s[i] + 5 - (int)'a') % 26 + (int)'a';\n        out = out + (char)w;\n    }\n    return out;\n}\n\nstring decode_shift(string s) {\n    // takes as input string encoded with encode_shift function. Returns decoded string.\n    string out;\n    int i;\n    for (i = 0; i < s.length(); i++) {\n        int w = ((int)s[i] - 5 - (int)'a' + 26) % 26 + (int)'a';\n        out = out + (char)w;\n    }\n    return out;\n}\n\n"}
{"task_id": "CPP/51", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cctype>\n\nusing namespace std;\n\nstring remove_vowels(string text) {\n    // Define a lambda function to check if a character is a vowel\n    auto is_vowel = [](char c) {\n        c = tolower(c); // Convert character to lowercase for case-insensitive comparison\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    };\n\n    // Use std::remove_if to move vowels to the end of the string\n    text.erase(remove_if(text.begin(), text.end(), is_vowel), text.end());\n\n    return text;\n}\n\n"}
{"task_id": "CPP/52", "generation": "#include <vector>\nusing namespace std;\n\nbool below_threshold(vector<int> l, int t) {\n    for (int num : l) {\n        if (num >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/53", "generation": "#include <iostream>\n\nint add(int x, int y) {\n    return x + y;\n}\n\n"}
{"task_id": "CPP/54", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <unordered_map>\n\nusing namespace std;\n\nbool same_chars(string s0, string s1) {\n    // Create frequency maps for both strings\n    unordered_map<char, int> freq0, freq1;\n    \n    // Count frequency of each character in s0\n    for (char c : s0) {\n        freq0[c]++;\n    }\n    \n    // Count frequency of each character in s1\n    for (char c : s1) {\n        freq1[c]++;\n    }\n    \n    // Compare the frequency maps\n    return freq0 == freq1;\n}\n\n"}
{"task_id": "CPP/55", "generation": "#include<iostream>\nusing namespace std;\n\nint fib(int n) {\n    if (n <= 0) {\n        return 0; // Handle the case where n is less than or equal to 0\n    } else if (n == 1) {\n        return 1; // Base case for the first Fibonacci number\n    } else {\n        int a = 0, b = 1, c;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}\n\n"}
{"task_id": "CPP/56", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool correct_bracketing(string brackets) {\n    int count = 0;\n    for (char bracket : brackets) {\n        if (bracket == '<') {\n            count++;\n        } else if (bracket == '>') {\n            count--;\n            if (count < 0) {\n                return false; // More closing brackets than opening brackets\n            }\n        }\n    }\n    return count == 0; // All opening brackets should have corresponding closing brackets\n}\n\n"}
{"task_id": "CPP/57", "generation": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nbool monotonic(vector<float> l) {\n    bool increasing = true;\n    bool decreasing = true;\n\n    for (size_t i = 1; i < l.size(); ++i) {\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n        }\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n        }\n    }\n\n    return increasing || decreasing;\n}\n\n"}
{"task_id": "CPP/58", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <set>\n\nusing namespace std;\n\nvector<int> common(vector<int> l1, vector<int> l2) {\n    // Sort both vectors\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n\n    // Use a set to store unique common elements\n    set<int> commonSet;\n\n    // Use two pointers to traverse both vectors\n    int i = 0, j = 0;\n    while (i < l1.size() && j < l2.size()) {\n        if (l1[i] == l2[j]) {\n            commonSet.insert(l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n\n    // Convert the set to a vector\n    vector<int> result(commonSet.begin(), commonSet.end());\n    return result;\n}\n\n"}
{"task_id": "CPP/59", "generation": "#include <iostream>\n#include <cmath>\n\nint largest_prime_factor(int n) {\n    int largest_factor = 1;\n\n    // Divide n by 2 until it is odd\n    while (n % 2 == 0) {\n        largest_factor = 2;\n        n /= 2;\n    }\n\n    // Now n is odd, check for odd factors up to sqrt(n)\n    for (int i = 3; i <= std::sqrt(n); i += 2) {\n        while (n % i == 0) {\n            largest_factor = i;\n            n /= i;\n        }\n    }\n\n    // If n is still greater than 2, then n itself is a prime factor\n    if (n > 2) {\n        largest_factor = n;\n    }\n\n    return largest_factor;\n}\n\n"}
{"task_id": "CPP/60", "generation": "#include<iostream>\nusing namespace std;\n\nint sum_to_n(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/61", "generation": "#include <iostream>\n#include <string>\n#include <stack>\nusing namespace std;\n\nbool correct_bracketing(string brackets) {\n    stack<char> s;\n    \n    for (char bracket : brackets) {\n        if (bracket == '(') {\n            s.push(bracket);\n        } else if (bracket == ')') {\n            if (s.empty() || s.top() != '(') {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    \n    return s.empty();\n}\n\n"}
{"task_id": "CPP/62", "generation": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<float> derivative(vector<float> xs) {\n    vector<float> result;\n    for (size_t i = 1; i < xs.size(); ++i) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/63", "generation": "#include<iostream>\nusing namespace std;\n\nint fibfib(int n) {\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n\n    int a = 0, b = 0, c = 1, d;\n    for (int i = 3; i <= n; ++i) {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\n\n"}
{"task_id": "CPP/64", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nint vowels_count(string s) {\n    // Convert the string to lowercase to handle case insensitivity\n    transform(s.begin(), s.end(), s.begin(), ::tolower);\n    \n    int count = 0;\n    int length = s.length();\n    \n    // Check each character in the string\n    for (int i = 0; i < length; i++) {\n        char c = s[i];\n        // Check if the character is a vowel\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    \n    // Check if 'y' is at the end of the word\n    if (length > 0 && s[length - 1] == 'y') {\n        count++;\n    }\n    \n    return count;\n}\n\n// Example usage\n"}
{"task_id": "CPP/65", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nstring circular_shift(int x, int shift) {\n    // Convert the integer to a string\n    string num_str = to_string(x);\n    int num_digits = num_str.length();\n\n    // If shift is greater than or equal to the number of digits, reverse the string\n    if (shift >= num_digits) {\n        reverse(num_str.begin(), num_str.end());\n        return num_str;\n    }\n\n    // Perform the circular shift\n    string shifted_str = num_str.substr(num_digits - shift) + num_str.substr(0, num_digits - shift);\n\n    return shifted_str;\n}\n\n"}
{"task_id": "CPP/66", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint digitSum(string s) {\n    int sum = 0;\n    for (char c : s) {\n        if (c >= 'A' && c <= 'Z') {\n            sum += c;\n        }\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/67", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n\nint fruit_distribution(std::string s, int n) {\n    int apples = 0, oranges = 0;\n    std::stringstream ss(s);\n    std::string temp;\n    \n    // Extract the number of apples\n    ss >> apples;\n    ss.ignore(std::numeric_limits<std::streamsize>::max(), ' '); // Skip the word \"apples\"\n    ss.ignore(std::numeric_limits<std::streamsize>::max(), ' '); // Skip the word \"and\"\n    \n    // Extract the number of oranges\n    ss >> oranges;\n    \n    // Calculate the number of mangoes\n    int mangoes = n - apples - oranges;\n    return mangoes;\n}\n\n"}
{"task_id": "CPP/68", "generation": "#include<vector>\nusing namespace std;\n\nvector<int> pluck(vector<int> arr) {\n    // Initialize variables to store the smallest even value and its index\n    int smallest_even = -1;\n    int smallest_index = -1;\n    \n    // Iterate through the vector\n    for (int i = 0; i < arr.size(); ++i) {\n        // Check if the current element is even\n        if (arr[i] % 2 == 0) {\n            // If it's the first even number found or it's smaller than the previously found smallest even number\n            if (smallest_even == -1 || arr[i] < smallest_even) {\n                smallest_even = arr[i];\n                smallest_index = i;\n            }\n        }\n    }\n    \n    // If an even number was found, return the smallest even value and its index\n    if (smallest_even != -1) {\n        return {smallest_even, smallest_index};\n    }\n    \n    // If no even number was found, return an empty vector\n    return {};\n}\n"}
{"task_id": "CPP/69", "generation": "#include <vector>\n#include <unordered_map>\n#include <algorithm>\nusing namespace std;\n\nint search(vector<int> lst) {\n    // Step 1: Count the frequency of each integer\n    unordered_map<int, int> frequency;\n    for (int num : lst) {\n        frequency[num]++;\n    }\n\n    // Step 2: Find the greatest integer that meets the criteria\n    int max_valid_integer = -1;\n    for (const auto& pair : frequency) {\n        int num = pair.first;\n        int freq = pair.second;\n        if (freq >= num) {\n            if (num > max_valid_integer) {\n                max_valid_integer = num;\n            }\n        }\n    }\n\n    // Step 3: Return the result\n    return max_valid_integer;\n}\n\n// Example usage\n"}
{"task_id": "CPP/70", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> strange_sort_list(vector<int> lst) {\n    // Sort the input vector in ascending order\n    sort(lst.begin(), lst.end());\n    \n    // Initialize the result vector\n    vector<int> result;\n    \n    // Initialize two pointers: one at the beginning and one at the end\n    int i = 0;\n    int j = lst.size() - 1;\n    \n    // Alternate between picking elements from the beginning and the end\n    while (i <= j) {\n        if (i <= j) {\n            result.push_back(lst[i]);\n            i++;\n        }\n        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n        }\n    }\n    \n    return result;\n}\n\n// Example usage\n"}
{"task_id": "CPP/71", "generation": "#include <stdio.h>\n#include <math.h>\n\nfloat triangle_area(float a, float b, float c) {\n    // Check if the sides can form a valid triangle\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n\n    // Calculate the semi-perimeter\n    float s = (a + b + c) / 2;\n\n    // Calculate the area using Heron's formula\n    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n\n    // Return the area rounded to 2 decimal points\n    return round(area * 100) / 100;\n}\n\n"}
{"task_id": "CPP/72", "generation": "#include <vector>\n#include <numeric> // for std::accumulate\n\nbool will_it_fly(vector<int> q, int w) {\n    // Check if the vector is palindromic\n    int n = q.size();\n    for (int i = 0; i < n / 2; ++i) {\n        if (q[i] != q[n - 1 - i]) {\n            return false;\n        }\n    }\n    \n    // Calculate the sum of the elements in the vector\n    int sum = accumulate(q.begin(), q.end(), 0);\n    \n    // Check if the sum is less than or equal to the maximum possible weight\n    return sum <= w;\n}\n\n// Example usage\n"}
{"task_id": "CPP/73", "generation": "#include <vector>\n#include <iostream>\nusing namespace std;\n\nint smallest_change(vector<int> arr) {\n    int left = 0;\n    int right = arr.size() - 1;\n    int changes = 0;\n\n    while (left < right) {\n        if (arr[left] != arr[right]) {\n            changes++;\n        }\n        left++;\n        right--;\n    }\n\n    return changes;\n}\n\n"}
{"task_id": "CPP/74", "generation": "#include <vector>\n#include <string>\n#include <numeric> // for accumulate\n\nusing namespace std;\n\nint totalChars(const vector<string>& vec) {\n    return accumulate(vec.begin(), vec.end(), 0, [](int sum, const string& str) {\n        return sum + str.size();\n    });\n}\n\nvector<string> total_match(vector<string> lst1, vector<string> lst2) {\n    int total1 = totalChars(lst1);\n    int total2 = totalChars(lst2);\n    \n    if (total1 <= total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n"}
{"task_id": "CPP/75", "generation": "#include <iostream>\n#include <vector>\n#include <cmath>\n\nusing namespace std;\n\n// Function to generate all prime numbers less than 100 using Sieve of Eratosthenes\nvector<int> generate_primes() {\n    const int limit = 100;\n    vector<bool> is_prime(limit, true);\n    is_prime[0] = is_prime[1] = false; // 0 and 1 are not prime numbers\n\n    for (int i = 2; i * i < limit; ++i) {\n        if (is_prime[i]) {\n            for (int j = i * i; j < limit; j += i) {\n                is_prime[j] = false;\n            }\n        }\n    }\n\n    vector<int> primes;\n    for (int i = 2; i < limit; ++i) {\n        if (is_prime[i]) {\n            primes.push_back(i);\n        }\n    }\n\n    return primes;\n}\n\n// Function to check if the given number is the multiplication of 3 prime numbers\nbool is_multiply_prime(int a) {\n    vector<int> primes = generate_primes();\n    int n = primes.size();\n\n    // Check all combinations of three primes\n    for (int i = 0; i < n; ++i) {\n        for (int j = i + 1; j < n; ++j) {\n            for (int k = j + 1; k < n; ++k) {\n                if (primes[i] * primes[j] * primes[k] == a) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n}\n\n"}
{"task_id": "CPP/76", "generation": "#include <iostream>\n#include <cmath>\n\nbool is_simple_power(int x, int n) {\n    // Special case: if n is 1, the only power of 1 is 1 itself.\n    if (n == 1) {\n        return x == 1;\n    }\n\n    // Iterate through possible values of k\n    int power = 1;\n    while (power < x) {\n        power *= n;\n        if (power == x) {\n            return true;\n        }\n    }\n    return false;\n}\n\n"}
{"task_id": "CPP/77", "generation": "#include<stdio.h>\n#include<math.h>\n\nbool iscube(int a) {\n    if (a < 0) {\n        a = -a; // Take the absolute value of a\n    }\n    int cube_root = cbrt(a); // Calculate the cube root of a\n    return cube_root * cube_root * cube_root == a; // Check if the cube of the cube root equals a\n}\n\n"}
{"task_id": "CPP/78", "generation": "#include <iostream>\n#include <string>\n#include <unordered_set>\nusing namespace std;\n\nint hex_key(string num) {\n    // Define the set of prime hexadecimal digits\n    unordered_set<char> prime_digits = {'2', '3', '5', '7', 'B', 'D'};\n    \n    // Initialize the count of prime digits\n    int count = 0;\n    \n    // Iterate through the input string\n    for (char c : num) {\n        // Check if the current character is in the set of prime digits\n        if (prime_digits.find(c) != prime_digits.end()) {\n            count++;\n        }\n    }\n    \n    // Return the count of prime digits\n    return count;\n}\n\n"}
{"task_id": "CPP/79", "generation": "#include <iostream>\n#include <string>\n#include <algorithm> // for std::reverse\n\nusing namespace std;\n\nstring decimal_to_binary(int decimal) {\n    if (decimal == 0) {\n        return \"db0db\";\n    }\n\n    string binary;\n    while (decimal > 0) {\n        binary += (decimal % 2 == 0) ? '0' : '1';\n        decimal /= 2;\n    }\n\n    // Reverse the string to get the correct binary representation\n    reverse(binary.begin(), binary.end());\n\n    // Add the \"db\" characters at the beginning and end\n    return \"db\" + binary + \"db\";\n}\n\n"}
{"task_id": "CPP/80", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool is_happy(string s) {\n    // Check if the length of the string is less than 3\n    if (s.length() < 3) {\n        return false;\n    }\n\n    // Iterate through the string and check every 3 consecutive characters\n    for (int i = 0; i <= s.length() - 3; ++i) {\n        // Check if the 3 consecutive characters are distinct\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n\n    // If all 3 consecutive characters are distinct, return true\n    return true;\n}\n\n// Test cases\n"}
{"task_id": "CPP/81", "generation": "#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> numerical_letter_grade(vector<float> grades) {\n    vector<string> letter_grades;\n    \n    for (float gpa : grades) {\n        if (gpa == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (gpa > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (gpa > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (gpa > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (gpa > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (gpa > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (gpa > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (gpa > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (gpa > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (gpa > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (gpa > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (gpa > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n        }\n    }\n    \n    return letter_grades;\n}\n"}
{"task_id": "CPP/82", "generation": "#include <iostream>\n#include <string>\n#include <cmath>\nusing namespace std;\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true; // 2 is the only even prime number\n    if (n % 2 == 0) return false; // other even numbers are not prime\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nbool prime_length(string str) {\n    int length = str.length();\n    return is_prime(length);\n}\n\n"}
{"task_id": "CPP/83", "generation": "#include<stdio.h>\n\nint starts_one_ends(int n) {\n    if (n == 1) {\n        return 1; // Special case: for a single digit, only the number 1 itself qualifies.\n    }\n    int count_start_with_1 = 1;\n    int count_end_with_1 = 1;\n    int count_both = 1;\n    \n    for (int i = 0; i < n-1; i++) {\n        count_start_with_1 *= 10;\n        count_end_with_1 *= 10;\n    }\n    \n    for (int i = 0; i < n-2; i++) {\n        count_both *= 10;\n    }\n    \n    return count_start_with_1 + count_end_with_1 - count_both;\n}\n\n"}
{"task_id": "CPP/84", "generation": "#include <iostream>\n#include <string>\n#include <bitset>\n\nusing namespace std;\n\nstring solve(int N) {\n    // Step 1: Calculate the sum of digits\n    int sum = 0;\n    int temp = N;\n    while (temp > 0) {\n        sum += temp % 10;  // Add the last digit to the sum\n        temp /= 10;        // Remove the last digit\n    }\n\n    // Step 2: Convert the sum to binary\n    string binarySum = bitset<32>(sum).to_string();  // Convert to 32-bit binary string\n\n    // Step 3: Remove leading zeros\n    size_t pos = binarySum.find('1');  // Find the first '1'\n    if (pos != string::npos) {\n        binarySum = binarySum.substr(pos);  // Extract the substring from the first '1' to the end\n    } else {\n        binarySum = \"0\";  // If no '1' is found, the sum was 0\n    }\n\n    return binarySum;\n}\n\n"}
{"task_id": "CPP/85", "generation": "#include <vector>\nusing namespace std;\n\nint add(vector<int> lst) {\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 2 != 0 && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <sstream>\n\nusing namespace std;\n\nstring anti_shuffle(string s) {\n    // Create a stringstream to split the input string by spaces\n    stringstream ss(s);\n    string word;\n    string result;\n\n    // Process each word in the string\n    while (ss >> word) {\n        // Sort the characters of the word in ascending order\n        sort(word.begin(), word.end());\n        // Append the sorted word to the result string\n        result += word + \" \";\n    }\n\n    // Remove the trailing space if there is any\n    if (!result.empty()) {\n        result.pop_back();\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/87", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<vector<int>> get_row(vector<vector<int>> lst, int x) {\n    vector<vector<int>> result;\n    \n    // Traverse the 2D vector to find all occurrences of x\n    for (int i = 0; i < lst.size(); ++i) {\n        for (int j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                result.push_back({i, j});\n            }\n        }\n    }\n    \n    // Sort the result vector\n    sort(result.begin(), result.end(), [](const vector<int>& a, const vector<int>& b) {\n        if (a[0] == b[0]) {\n            // If rows are the same, sort by column in descending order\n            return a[1] > b[1];\n        }\n        // Otherwise, sort by row in ascending order\n        return a[0] < b[0];\n    });\n    \n    return result;\n}\n\n// Example usage\n"}
{"task_id": "CPP/88", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> sort_array(vector<int> array) {\n    // Check if the array is empty or has only one element\n    if (array.empty() || array.size() == 1) {\n        return array;\n    }\n\n    // Calculate the sum of the first and last index values\n    int sum = array.front() + array.back();\n\n    // Create a copy of the array to sort\n    vector<int> sorted_array = array;\n\n    // Sort the array based on the sum\n    if (sum % 2 == 0) {\n        // Sort in descending order if the sum is even\n        sort(sorted_array.begin(), sorted_array.end(), greater<int>());\n    } else {\n        // Sort in ascending order if the sum is odd\n        sort(sorted_array.begin(), sorted_array.end());\n    }\n\n    return sorted_array;\n}\n"}
{"task_id": "CPP/89", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring encrypt(string s) {\n    string result = \"\";\n    int shift = 4; // 2 * 2 = 4\n\n    for (char c : s) {\n        if (c >= 'a' && c <= 'z') {\n            // Shift within lowercase letters\n            c = 'a' + (c - 'a' + shift) % 26;\n        } else if (c >= 'A' && c <= 'Z') {\n            // Shift within uppercase letters\n            c = 'A' + (c - 'A' + shift) % 26;\n        }\n        result += c;\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/90", "generation": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nint next_smallest(const vector<int>& lst) {\n    // Edge case: if the vector is empty or has only one unique element\n    if (lst.size() < 2) {\n        return -1; // Return -1 to indicate no 2nd smallest element\n    }\n\n    // Create a copy of the vector to avoid modifying the original vector\n    vector<int> sorted_lst = lst;\n    // Sort the vector\n    sort(sorted_lst.begin(), sorted_lst.end());\n\n    // Find the 2nd smallest element\n    int smallest = sorted_lst[0];\n    for (size_t i = 1; i < sorted_lst.size(); ++i) {\n        if (sorted_lst[i] != smallest) {\n            return sorted_lst[i];\n        }\n    }\n\n    // If all elements are the same, return -1\n    return -1;\n}\n\n"}
{"task_id": "CPP/91", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <vector>\n\nusing namespace std;\n\nint is_bored(string S) {\n    int count = 0;\n    stringstream ss(S);\n    string sentence;\n    vector<string> sentences;\n\n    // Split the string into sentences based on delimiters '.', '?', '!'\n    while (getline(ss, sentence, '.')) {\n        sentences.push_back(sentence);\n    }\n    ss.clear();\n    ss.str(S);\n    while (getline(ss, sentence, '?')) {\n        sentences.push_back(sentence);\n    }\n    ss.clear();\n    ss.str(S);\n    while (getline(ss, sentence, '!')) {\n        sentences.push_back(sentence);\n    }\n\n    // Check each sentence to see if it starts with \"I\"\n    for (string s : sentences) {\n        // Remove leading whitespace\n        size_t start = s.find_first_not_of(\" \\t\\n\\r\\f\\v\");\n        if (start != string::npos) {\n            s = s.substr(start);\n        }\n        // Check if the sentence starts with \"I\"\n        if (s.length() > 0 && s[0] == 'I') {\n            count++;\n        }\n    }\n\n    return count;\n}\n\n"}
{"task_id": "CPP/92", "generation": "#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n\nbool any_int(float a, float b, float c) {\n    // Check if all numbers are integers\n    if (floor(a) == a && floor(b) == b && floor(c) == c) {\n        // Convert floats to integers\n        int int_a = (int)a;\n        int int_b = (int)b;\n        int int_c = (int)c;\n        \n        // Check if one of the numbers is equal to the sum of the other two\n        if (int_a == int_b + int_c || int_b == int_a + int_c || int_c == int_a + int_b) {\n            return true;\n        }\n    }\n    return false;\n}\n\n"}
{"task_id": "CPP/93", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nstring encode(string message) {\n    string encodedMessage = \"\";\n    for (char &c : message) {\n        if (isalpha(c)) {\n            // Swap case\n            if (islower(c)) {\n                c = toupper(c);\n            } else {\n                c = tolower(c);\n            }\n\n            // Replace vowels with the letter 2 places ahead\n            if (c == 'A' || c == 'a') c = 'C';\n            else if (c == 'E' || c == 'e') c = 'G';\n            else if (c == 'I' || c == 'i') c = 'K';\n            else if (c == 'O' || c == 'o') c = 'Q';\n            else if (c == 'U' || c == 'u') c = 'W';\n            else if (c == 'Y' || c == 'y') c = 'A'; // Assuming 'Y' is a vowel here\n\n            // For consonants, we need to handle wrap-around for the letter 2 places ahead\n            else if (isupper(c)) {\n                c = (c - 'A' + 2) % 26 + 'A';\n            } else {\n                c = (c - 'a' + 2) % 26 + 'a';\n            }\n        }\n        encodedMessage += c;\n    }\n    return encodedMessage;\n}\n\n// Example usage\n"}
{"task_id": "CPP/94", "generation": "#include <iostream>\n#include <vector>\n#include <cmath>\nusing namespace std;\n\n// Function to check if a number is prime\nbool isPrime(int num) {\n    if (num <= 1) return false;\n    if (num == 2) return true;\n    if (num % 2 == 0) return false;\n    for (int i = 3; i <= sqrt(num); i += 2) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\n// Function to sum the digits of a number\nint sumOfDigits(int num) {\n    int sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}\n\nint skjkasdkd(vector<int> lst) {\n    int largestPrime = -1;\n    \n    // Find the largest prime in the list\n    for (int num : lst) {\n        if (isPrime(num) && num > largestPrime) {\n            largestPrime = num;\n        }\n    }\n    \n    // If no prime is found, return 0\n    if (largestPrime == -1) return 0;\n    \n    // Sum the digits of the largest prime\n    return sumOfDigits(largestPrime);\n}\n\n"}
{"task_id": "CPP/95", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\n#include<algorithm> // for std::all_of\nusing namespace std;\n\nbool check_dict_case(map<string, string> dict) {\n    // If the map is empty, return false\n    if (dict.empty()) {\n        return false;\n    }\n\n    // Iterate through each key in the map\n    for (const auto& pair : dict) {\n        const string& key = pair.first;\n\n        // Check if the key is a string\n        if (key.empty()) {\n            return false;\n        }\n\n        // Check if all characters in the key are either all lower case or all upper case\n        bool all_lower = all_of(key.begin(), key.end(), ::islower);\n        bool all_upper = all_of(key.begin(), key.end(), ::isupper);\n\n        if (!all_lower && !all_upper) {\n            return false;\n        }\n    }\n\n    // If all keys pass the checks, return true\n    return true;\n}\n\n// Example usage\n"}
{"task_id": "CPP/96", "generation": "#include <vector>\n#include <cmath>\n\nusing namespace std;\n\nvector<int> count_up_to(int n) {\n    if (n <= 2) {\n        return {};\n    }\n\n    // Create a boolean array \"prime[0..n]\" and initialize\n    // all entries it as true. A value in prime[i] will\n    // finally be false if i is Not a prime, else true.\n    vector<bool> prime(n, true);\n\n    // 0 and 1 are not prime numbers\n    prime[0] = prime[1] = false;\n\n    for (int p = 2; p * p < n; p++) {\n        // If prime[p] is not changed, then it is a prime\n        if (prime[p] == true) {\n            // Update all multiples of p to false\n            for (int i = p * p; i < n; i += p) {\n                prime[i] = false;\n            }\n        }\n    }\n\n    // Collect all prime numbers\n    vector<int> primes;\n    for (int p = 2; p < n; p++) {\n        if (prime[p]) {\n            primes.push_back(p);\n        }\n    }\n\n    return primes;\n}\n\n// Example usage\n"}
{"task_id": "CPP/97", "generation": "#include<stdio.h>\n#include<math.h>\n\nint multiply(int a, int b) {\n    // Extract the unit digits\n    int unit_digit_a = abs(a) % 10;\n    int unit_digit_b = abs(b) % 10;\n    \n    // Return the product of the unit digits\n    return unit_digit_a * unit_digit_b;\n}\n\n"}
{"task_id": "CPP/98", "generation": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint count_upper(string s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) { // Iterate through even indices\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/99", "generation": "#include <iostream>\n#include <string>\n#include <cmath>\n\nusing namespace std;\n\nint closest_integer(string value) {\n    // Convert the string to a double\n    double number = stod(value);\n    \n    // Determine the closest integer\n    int closest;\n    if (number >= 0) {\n        closest = static_cast<int>(floor(number + 0.5));\n    } else {\n        closest = static_cast<int>(ceil(number - 0.5));\n    }\n    \n    return closest;\n}\n\n"}
{"task_id": "CPP/100", "generation": "#include <vector>\nusing namespace std;\n\nvector<int> make_a_pile(int n) {\n    vector<int> result;\n    int current = n;\n    \n    for (int i = 0; i < n; ++i) {\n        result.push_back(current);\n        if (current % 2 == 0) {\n            current += 2; // Next even number\n        } else {\n            current += 2; // Next odd number\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/101", "generation": "#include <vector>\n#include <string>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> words_string(string s) {\n    vector<string> words;\n    string word;\n    stringstream ss(s);\n    \n    // Read words separated by spaces or commas\n    while (getline(ss, word, ' ')) {\n        stringstream word_ss(word);\n        string subword;\n        while (getline(word_ss, subword, ',')) {\n            if (!subword.empty()) {\n                words.push_back(subword);\n            }\n        }\n    }\n    \n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "#include <stdio.h>\n\nint choose_num(int x, int y) {\n    // Ensure x is less than or equal to y\n    if (x > y) {\n        return -1;\n    }\n\n    // Start from the largest number in the range and move downwards\n    for (int i = y; i >= x; i--) {\n        // Check if the number is even\n        if (i % 2 == 0) {\n            return i;\n        }\n    }\n\n    // If no even number is found, return -1\n    return -1;\n}\n\n"}
{"task_id": "CPP/103", "generation": "#include <iostream>\n#include <cmath>\n#include <string>\nusing namespace std;\n\nstring rounded_avg(int n, int m) {\n    // Step 1: Check if n is greater than m\n    if (n > m) {\n        return \"-1\";\n    }\n    \n    // Step 2: Calculate the sum of integers from n to m\n    int sum = 0;\n    for (int i = n; i <= m; ++i) {\n        sum += i;\n    }\n    \n    // Step 3: Calculate the count of integers from n to m\n    int count = m - n + 1;\n    \n    // Step 4: Calculate the average and round it down\n    int average = floor((double)sum / count);\n    \n    // Step 5: Convert the rounded average to binary\n    string binary = \"\";\n    if (average == 0) {\n        binary = \"0\";\n    } else {\n        while (average > 0) {\n            binary = to_string(average % 2) + binary;\n            average /= 2;\n        }\n    }\n    \n    return binary;\n}\n\n"}
{"task_id": "CPP/104", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nbool hasEvenDigit(int num) {\n    while (num > 0) {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            return true;\n        }\n        num /= 10;\n    }\n    return false;\n}\n\nvector<int> unique_digits(vector<int> x) {\n    vector<int> result;\n    \n    for (int num : x) {\n        if (!hasEvenDigit(num)) {\n            result.push_back(num);\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    return result;\n}\n\n// Example usage\n"}
{"task_id": "CPP/105", "generation": "#include <vector>\n#include <string>\n#include <map>\n#include <algorithm>\nusing namespace std;\n\nvector<string> by_length(vector<int> arr) {\n    // Step 1: Filter and sort the integers between 1 and 9\n    vector<int> filtered;\n    for (int num : arr) {\n        if (num >= 1 && num <= 9) {\n            filtered.push_back(num);\n        }\n    }\n    sort(filtered.begin(), filtered.end());\n\n    // Step 2: Reverse the sorted list\n    reverse(filtered.begin(), filtered.end());\n\n    // Step 3: Map each digit to its corresponding name\n    map<int, string> digitToName = {\n        {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"},\n        {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}\n    };\n\n    vector<string> result;\n    for (int num : filtered) {\n        result.push_back(digitToName[num]);\n    }\n\n    return result;\n}\n\n// Example usage\n"}
{"task_id": "CPP/106", "generation": "#include <vector>\nusing namespace std;\n\nvector<int> f(int n) {\n    vector<int> result(n);\n    \n    for (int i = 1; i <= n; ++i) {\n        if (i % 2 == 0) {\n            // Compute factorial of i\n            int factorial = 1;\n            for (int j = 1; j <= i; ++j) {\n                factorial *= j;\n            }\n            result[i - 1] = factorial;\n        } else {\n            // Compute sum of numbers from 1 to i\n            int sum = 0;\n            for (int j = 1; j <= i; ++j) {\n                sum += j;\n            }\n            result[i - 1] = sum;\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/107", "generation": "#include <vector>\n#include <string>\nusing namespace std;\n\nbool isPalindrome(int num) {\n    string str = to_string(num);\n    int len = str.length();\n    for (int i = 0; i < len / 2; ++i) {\n        if (str[i] != str[len - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvector<int> even_odd_palindrome(int n) {\n    int evenCount = 0;\n    int oddCount = 0;\n    \n    for (int i = 1; i <= n; ++i) {\n        if (isPalindrome(i)) {\n            if (i % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n    \n    return {evenCount, oddCount};\n}\n"}
{"task_id": "CPP/108", "generation": "#include <vector>\n#include <cmath>\nusing namespace std;\n\nint count_nums(vector<int> n) {\n    int count = 0;\n    \n    for (int num : n) {\n        int sum_of_digits = 0;\n        int temp = abs(num);\n        \n        // Calculate the sum of digits\n        while (temp > 0) {\n            sum_of_digits += temp % 10;\n            temp /= 10;\n        }\n        \n        // If the number is negative, subtract the sum of digits from 0\n        if (num < 0) {\n            sum_of_digits = -sum_of_digits;\n        }\n        \n        // Check if the sum of digits is greater than 0\n        if (sum_of_digits > 0) {\n            count++;\n        }\n    }\n    \n    return count;\n}\n\n// Example usage\n"}
{"task_id": "CPP/109", "generation": "#include <vector>\nusing namespace std;\n\nbool move_one_ball(vector<int> arr) {\n    int n = arr.size();\n    if (n == 0) return true; // Empty vector is trivially sorted\n\n    // Find the break point\n    int break_point = -1;\n    for (int i = 0; i < n - 1; ++i) {\n        if (arr[i] > arr[i + 1]) {\n            break_point = i;\n            break;\n        }\n    }\n\n    // If no break point found, the array is already sorted\n    if (break_point == -1) return true;\n\n    // Check if the array can be sorted by right shifts\n    for (int i = break_point + 1; i < n - 1; ++i) {\n        if (arr[i] > arr[i + 1]) {\n            return false; // More than one break point found\n        }\n    }\n\n    // Check if the last element is less than or equal to the first element\n    return arr[n - 1] <= arr[0];\n}\n\n// Example usage\n"}
{"task_id": "CPP/110", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nstring exchange(vector<int> lst1, vector<int> lst2) {\n    int oddCount = 0;\n    int evenCount = 0;\n\n    // Count odd elements in lst1\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            oddCount++;\n        }\n    }\n\n    // Count even elements in lst2\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            evenCount++;\n        }\n    }\n\n    // Check if we have enough even elements in lst2 to replace all odd elements in lst1\n    if (evenCount >= oddCount) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\n// Example usage\n"}
{"task_id": "CPP/111", "generation": "#include <iostream>\n#include <string>\n#include <map>\n#include <climits>\n\nusing namespace std;\n\nmap<char, int> histogram(string test) {\n    map<char, int> frequencyMap;\n    map<char, int> resultMap;\n    int maxFrequency = 0;\n\n    // Step 1: Populate the frequency map\n    for (char c : test) {\n        if (c != ' ') { // Ignore spaces\n            frequencyMap[c]++;\n            if (frequencyMap[c] > maxFrequency) {\n                maxFrequency = frequencyMap[c];\n            }\n        }\n    }\n\n    // Step 2: Populate the result map with letters having the maximum frequency\n    for (const auto& pair : frequencyMap) {\n        if (pair.second == maxFrequency) {\n            resultMap[pair.first] = pair.second;\n        }\n    }\n\n    return resultMap;\n}\n\n"}
{"task_id": "CPP/112", "generation": "#include<iostream>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nvector<string> reverse_delete(string s, string c) {\n    // Step 1: Remove characters from s that are in c\n    string result;\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            result += ch;\n        }\n    }\n    \n    // Step 2: Check if the result string is a palindrome\n    bool isPalindrome = true;\n    int n = result.length();\n    for (int i = 0; i < n / 2; ++i) {\n        if (result[i] != result[n - i - 1]) {\n            isPalindrome = false;\n            break;\n        }\n    }\n    \n    // Step 3: Prepare the result vector\n    vector<string> resultVector;\n    resultVector.push_back(result);\n    resultVector.push_back(isPalindrome ? \"True\" : \"False\");\n    \n    return resultVector;\n}\n\n"}
{"task_id": "CPP/113", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<string> odd_count(vector<string> lst) {\n    vector<string> result;\n    \n    for (size_t i = 0; i < lst.size(); ++i) {\n        int odd_count = 0;\n        for (char c : lst[i]) {\n            if ((c - '0') % 2 != 0) {\n                ++odd_count;\n            }\n        }\n        \n        // Create the output string with the correct format\n        ostringstream oss;\n        oss << \"the number of odd elements \" << odd_count << \"n the str\" << odd_count << \"ng \" << odd_count << \" of the \" << odd_count << \"nput.\";\n        result.push_back(oss.str());\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/114", "generation": "#include<stdio.h>\n#include<vector>\n#include<limits.h>\nusing namespace std;\n\nlong long minSubArraySum(vector<long long> nums) {\n    // Initialize variables\n    long long min_ending_here = nums[0];\n    long long min_so_far = nums[0];\n\n    // Iterate through the vector starting from the second element\n    for (size_t i = 1; i < nums.size(); ++i) {\n        // Update min_ending_here\n        min_ending_here = min(nums[i], min_ending_here + nums[i]);\n        // Update min_so_far\n        min_so_far = min(min_so_far, min_ending_here);\n    }\n\n    return min_so_far;\n}\n\n"}
{"task_id": "CPP/115", "generation": "#include<iostream>\n#include<vector>\n#include<cmath> // for ceil function\nusing namespace std;\n\nint max_fill(vector<vector<int>> grid, int capacity) {\n    int total_lowers = 0;\n    \n    for (const auto& row : grid) {\n        int water_units = 0;\n        for (int unit : row) {\n            if (unit == 1) {\n                water_units++;\n            }\n        }\n        // Calculate the number of times the bucket needs to be lowered\n        total_lowers += ceil((double)water_units / capacity);\n    }\n    \n    return total_lowers;\n}\n\n"}
{"task_id": "CPP/116", "generation": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nusing namespace std;\n\n// Function to count the number of ones in the binary representation of a number\nint countOnes(int num) {\n    int count = 0;\n    while (num != 0) {\n        count += num & 1;\n        num >>= 1;\n    }\n    return count;\n}\n\n// Custom comparator function for sorting\nbool customComparator(int a, int b) {\n    int onesA = countOnes(a);\n    int onesB = countOnes(b);\n    \n    if (onesA == onesB) {\n        return a < b; // If number of ones is the same, sort by decimal value\n    }\n    return onesA < onesB; // Otherwise, sort by number of ones\n}\n\n// Function to sort the array based on the custom comparator\nvector<int> sort_array(vector<int> arr) {\n    sort(arr.begin(), arr.end(), customComparator);\n    return arr;\n}\n\n// Test the function\n"}
{"task_id": "CPP/117", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <unordered_set>\n\nusing namespace std;\n\nbool is_consonant(char c) {\n    // Define a set of vowels for quick lookup\n    static const unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    // Check if the character is a letter and not a vowel\n    return isalpha(c) && vowels.find(c) == vowels.end();\n}\n\nvector<string> select_words(string s, int n) {\n    vector<string> result;\n    if (s.empty()) {\n        return result;\n    }\n\n    // Use a stringstream to split the string into words\n    stringstream ss(s);\n    string word;\n    while (ss >> word) {\n        int consonant_count = 0;\n        // Count the number of consonants in the current word\n        for (char c : word) {\n            if (is_consonant(c)) {\n                consonant_count++;\n            }\n        }\n        // If the word has exactly n consonants, add it to the result\n        if (consonant_count == n) {\n            result.push_back(word);\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/118", "generation": "#include<iostream>\n#include<string>\n#include<unordered_set>\nusing namespace std;\n\nstring get_closest_vowel(string word) {\n    // Define the set of vowels\n    unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    \n    // Traverse the word from right to left\n    for (int i = word.size() - 2; i > 0; --i) {\n        // Check if the current character is a vowel\n        if (vowels.find(word[i]) != vowels.end()) {\n            // Check if the previous and next characters are consonants\n            if (vowels.find(word[i-1]) == vowels.end() && vowels.find(word[i+1]) == vowels.end()) {\n                return string(1, word[i]);\n            }\n        }\n    }\n    \n    // If no such vowel is found, return an empty string\n    return \"\";\n}\n\n"}
{"task_id": "CPP/119", "generation": "#include<iostream>\n#include<vector>\n#include<string>\nusing namespace std;\n\nstring match_parens(vector<string> lst) {\n    int open_count_1 = 0, close_count_1 = 0;\n    int open_count_2 = 0, close_count_2 = 0;\n\n    // Count parentheses in the first string\n    for (char c : lst[0]) {\n        if (c == '(') open_count_1++;\n        else if (c == ')') close_count_1++;\n    }\n\n    // Count parentheses in the second string\n    for (char c : lst[1]) {\n        if (c == '(') open_count_2++;\n        else if (c == ')') close_count_2++;\n    }\n\n    // Total counts\n    int total_open = open_count_1 + open_count_2;\n    int total_close = close_count_1 + close_count_2;\n\n    // Check if the total number of opening and closing parentheses are equal\n    if (total_open == total_close) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\n"}
{"task_id": "CPP/120", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> maximum(vector<int> arr, int k) {\n    // Step 1: Sort the entire array in ascending order\n    sort(arr.begin(), arr.end());\n    \n    // Step 2: Extract the last k elements (which are the top k maximum elements)\n    vector<int> result(arr.end() - k, arr.end());\n    \n    // Step 3: Sort the top k elements again (though they are already sorted)\n    sort(result.begin(), result.end());\n    \n    return result;\n}\n"}
{"task_id": "CPP/121", "generation": "#include <vector>\nusing namespace std;\n\nint solution(vector<int> lst) {\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "#include<iostream>\n#include<vector>\nusing namespace std;\n\nint add_elements(vector<int> arr, int k) {\n    int sum = 0;\n    \n    for (int i = 0; i < k; ++i) {\n        // Check if the number has at most two digits\n        if (arr[i] >= 0 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    \n    return sum;\n}\n\n"}
{"task_id": "CPP/123", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> get_odd_collatz(int n) {\n    vector<int> odd_numbers;\n    \n    // Generate the Collatz sequence and collect odd numbers\n    while (n != 1) {\n        if (n % 2 == 1) {\n            odd_numbers.push_back(n);\n        }\n        if (n % 2 == 0) {\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n    }\n    \n    // Add the final 1 to the sequence\n    odd_numbers.push_back(1);\n    \n    // Sort the vector of odd numbers\n    sort(odd_numbers.begin(), odd_numbers.end());\n    \n    return odd_numbers;\n}\n"}
{"task_id": "CPP/124", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <regex>\n\nusing namespace std;\n\nbool valid_date(string date) {\n    // Check if the date string is empty\n    if (date.empty()) {\n        return false;\n    }\n\n    // Check if the date string matches the format mm-dd-yyyy\n    regex date_format(\"^\\\\d{2}-\\\\d{2}-\\\\d{4}$\");\n    if (!regex_match(date, date_format)) {\n        return false;\n    }\n\n    // Extract month, day, and year from the date string\n    int month, day, year;\n    char delimiter;\n    stringstream ss(date);\n    ss >> month >> delimiter >> day >> delimiter >> year;\n\n    // Check if the month is valid\n    if (month < 1 || month > 12) {\n        return false;\n    }\n\n    // Check if the day is valid based on the month\n    if (month == 2) {\n        // February can have 29 days in a leap year\n        bool is_leap_year = (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);\n        if (day < 1 || (day > 29 || (day == 29 && !is_leap_year))) {\n            return false;\n        }\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        // April, June, September, November have 30 days\n        if (day < 1 || day > 30) {\n            return false;\n        }\n    } else {\n        // All other months have 31 days\n        if (day < 1 || day > 31) {\n            return false;\n        }\n    }\n\n    // If all checks pass, the date is valid\n    return true;\n}\n\n"}
{"task_id": "CPP/125", "generation": "#include <vector>\n#include <string>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> split_words(string txt) {\n    // Check for whitespace\n    if (txt.find(' ') != string::npos) {\n        vector<string> result;\n        stringstream ss(txt);\n        string word;\n        while (ss >> word) {\n            result.push_back(word);\n        }\n        return result;\n    }\n    \n    // Check for commas\n    if (txt.find(',') != string::npos) {\n        vector<string> result;\n        stringstream ss(txt);\n        string word;\n        while (getline(ss, word, ',')) {\n            result.push_back(word);\n        }\n        return result;\n    }\n    \n    // Count odd-indexed lowercase letters\n    int count = 0;\n    for (char c : txt) {\n        if (islower(c)) {\n            if ((c - 'a') % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    \n    return {to_string(count)};\n}\n"}
{"task_id": "CPP/126", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nbool is_sorted(vector<int> lst) {\n    // Check if the vector is sorted in ascending order\n    if (!is_sorted(lst.begin(), lst.end())) {\n        return false;\n    }\n\n    // Check for duplicates more than twice\n    for (size_t i = 0; i < lst.size(); ++i) {\n        int count = 0;\n        for (size_t j = 0; j < lst.size(); ++j) {\n            if (lst[i] == lst[j]) {\n                count++;\n            }\n            if (count > 2) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n"}
{"task_id": "CPP/127", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<cmath>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nstring intersection(vector<int> interval1, vector<int> interval2) {\n    int start1 = interval1[0], end1 = interval1[1];\n    int start2 = interval2[0], end2 = interval2[1];\n    \n    int intersectionStart = max(start1, start2);\n    int intersectionEnd = min(end1, end2);\n    \n    if (intersectionStart <= intersectionEnd) {\n        int lengthOfIntersection = intersectionEnd - intersectionStart + 1;\n        if (isPrime(lengthOfIntersection)) {\n            return \"YES\";\n        }\n    }\n    \n    return \"NO\";\n}\n\n// Example usage\n"}
{"task_id": "CPP/128", "generation": "#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n\nint prod_signs(vector<int> arr) {\n    if (arr.empty()) {\n        return -32768;\n    }\n\n    int product_of_signs = 1;\n    int sum_of_magnitudes = 0;\n\n    for (int num : arr) {\n        if (num > 0) {\n            product_of_signs *= 1;\n        } else if (num < 0) {\n            product_of_signs *= -1;\n        } else {\n            product_of_signs *= 0;\n        }\n        sum_of_magnitudes += abs(num);\n    }\n\n    return product_of_signs * sum_of_magnitudes;\n}\n\n"}
{"task_id": "CPP/129", "generation": "#include <vector>\n#include <queue>\n#include <climits>\nusing namespace std;\n\nvector<int> minPath(vector<vector<int>> grid, int k) {\n    int N = grid.size();\n    vector<int> result(k, INT_MAX); // Initialize result with maximum possible values\n    \n    // Directions for moving in the grid (up, down, left, right)\n    vector<pair<int, int>> directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n    \n    // BFS queue\n    queue<tuple<int, int, int, vector<int>>> q;\n    \n    // Start BFS from each cell\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            q.push({i, j, 1, {grid[i][j]}});\n        }\n    }\n    \n    while (!q.empty()) {\n        auto [x, y, length, path] = q.front();\n        q.pop();\n        \n        // If the current path length is k, compare and update result\n        if (length == k) {\n            if (path < result) {\n                result = path;\n            }\n            continue;\n        }\n        \n        // Explore neighbors\n        for (auto [dx, dy] : directions) {\n            int nx = x + dx;\n            int ny = y + dy;\n            \n            if (nx >= 0 && nx < N && ny >= 0 && ny < N) {\n                vector<int> newPath = path;\n                newPath.push_back(grid[nx][ny]);\n                q.push({nx, ny, length + 1, newPath});\n            }\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/130", "generation": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<int> tri(int n) {\n    // Vector to store the Tribonacci sequence\n    vector<int> tribonacci(n + 1);\n    \n    // Base case\n    tribonacci[0] = 1; // This is just a placeholder since we start from tri(1)\n    tribonacci[1] = 3;\n    \n    // Compute the Tribonacci sequence for n >= 2\n    for (int i = 2; i <= n; ++i) {\n        if (i % 2 == 0) {\n            // Even case\n            tribonacci[i] = 1 + i / 2;\n        } else {\n            // Odd case\n            tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1];\n        }\n    }\n    \n    return tribonacci;\n}\n\n"}
{"task_id": "CPP/131", "generation": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint digits(int n) {\n    // Convert the integer to a string\n    string numStr = to_string(n);\n    \n    // Initialize the product to 1 (multiplicative identity)\n    int product = 1;\n    \n    // Flag to check if any odd digit is found\n    bool oddFound = false;\n    \n    // Iterate through each character in the string\n    for (char ch : numStr) {\n        // Convert the character to an integer\n        int digit = ch - '0';\n        \n        // Check if the digit is odd\n        if (digit % 2 != 0) {\n            // Multiply the product by the odd digit\n            product *= digit;\n            oddFound = true;\n        }\n    }\n    \n    // If no odd digit was found, return 0\n    if (!oddFound) {\n        return 0;\n    }\n    \n    // Return the product of the odd digits\n    return product;\n}\n\n"}
{"task_id": "CPP/132", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool is_nested(string str) {\n    int open_brackets = 0;\n    int close_brackets = 0;\n\n    for (char ch : str) {\n        if (ch == '[') {\n            open_brackets++;\n        } else if (ch == ']') {\n            if (open_brackets > 0) {\n                open_brackets--;\n                close_brackets++;\n            }\n        }\n    }\n\n    // If there is more than one close bracket, it means there was nesting\n    return close_brackets > 1;\n}\n\n"}
{"task_id": "CPP/133", "generation": "#include <iostream>\n#include <vector>\n#include <cmath> // For ceil function\n\nusing namespace std;\n\nint sum_squares(vector<float> lst) {\n    int sum = 0;\n    for (float num : lst) {\n        int rounded_num = ceil(num); // Round up to the nearest integer\n        sum += rounded_num * rounded_num; // Square the rounded number and add to sum\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/134", "generation": "#include <iostream>\n#include <string>\n#include <cctype>\n\nusing namespace std;\n\nbool check_if_last_char_is_a_letter(string txt) {\n    // Check if the string is empty\n    if (txt.empty()) {\n        return false;\n    }\n\n    // Get the last character\n    char last_char = txt.back();\n\n    // Check if the last character is an alphabetical character\n    if (!isalpha(last_char)) {\n        return false;\n    }\n\n    // Check if the last character is not part of a word\n    // Ensure that the last character is not followed by any other characters\n    if (txt.size() > 1 && isalpha(txt[txt.size() - 2])) {\n        return false;\n    }\n\n    return true;\n}\n\n// Test cases\n"}
{"task_id": "CPP/135", "generation": "#include <vector>\nusing namespace std;\n\nint can_arrange(vector<int> arr) {\n    int n = arr.size();\n    int max_index = -1;\n\n    // Iterate through the vector starting from the second element\n    for (int i = 1; i < n; ++i) {\n        // Check if the current element is not greater than or equal to the previous element\n        if (arr[i] < arr[i - 1]) {\n            // Update the max_index if the current index is greater than the previous max_index\n            if (i > max_index) {\n                max_index = i;\n            }\n        }\n    }\n\n    return max_index;\n}\n\n// Example usage\n"}
{"task_id": "CPP/136", "generation": "#include <vector>\n#include <limits.h> // For INT_MAX and INT_MIN\n\nusing namespace std;\n\nvector<int> largest_smallest_integers(vector<int> lst) {\n    int largest_negative = INT_MIN; // Initialize to the smallest possible integer\n    int smallest_positive = INT_MAX; // Initialize to the largest possible integer\n\n    for (int num : lst) {\n        if (num < 0) {\n            // Update largest_negative if num is larger than the current largest_negative\n            if (num > largest_negative) {\n                largest_negative = num;\n            }\n        } else if (num > 0) {\n            // Update smallest_positive if num is smaller than the current smallest_positive\n            if (num < smallest_positive) {\n                smallest_positive = num;\n            }\n        }\n    }\n\n    // If no negative number was found, set largest_negative to 0\n    if (largest_negative == INT_MIN) {\n        largest_negative = 0;\n    }\n\n    // If no positive number was found, set smallest_positive to 0\n    if (smallest_positive == INT_MAX) {\n        smallest_positive = 0;\n    }\n\n    return {largest_negative, smallest_positive};\n}\n\n// Example usage\n"}
{"task_id": "CPP/137", "generation": "#include <iostream>\n#include <string>\n#include <boost/any.hpp>\n#include <boost/algorithm/string.hpp>\n\nusing namespace std;\n\nboost::any compare_one(boost::any a, boost::any b) {\n    // Helper function to normalize string representation of numbers\n    auto normalize_string = [](const string& str) -> string {\n        string normalized = str;\n        boost::replace_all(normalized, \",\", \".\");\n        return normalized;\n    };\n\n    // Helper function to compare two strings representing numbers\n    auto compare_strings = [normalize_string](const string& str1, const string& str2) -> int {\n        double num1 = stod(normalize_string(str1));\n        double num2 = stod(normalize_string(str2));\n        if (num1 < num2) return -1;\n        if (num1 > num2) return 1;\n        return 0;\n    };\n\n    // Determine the type of a and b\n    if (a.type() == typeid(int) && b.type() == typeid(int)) {\n        int int_a = boost::any_cast<int>(a);\n        int int_b = boost::any_cast<int>(b);\n        if (int_a > int_b) return a;\n        if (int_a < int_b) return b;\n        return boost::any(\"None\");\n    }\n\n    if (a.type() == typeid(int) && b.type() == typeid(double)) {\n        int int_a = boost::any_cast<int>(a);\n        double double_b = boost::any_cast<double>(b);\n        if (int_a > double_b) return a;\n        if (int_a < double_b) return b;\n        return boost::any(\"None\");\n    }\n\n    if (a.type() == typeid(double) && b.type() == typeid(int)) {\n        double double_a = boost::any_cast<double>(a);\n        int int_b = boost::any_cast<int>(b);\n        if (double_a > int_b) return a;\n        if (double_a < int_b) return b;\n        return boost::any(\"None\");\n    }\n\n    if (a.type() == typeid(double) && b.type() == typeid(double)) {\n        double double_a = boost::any_cast<double>(a);\n        double double_b = boost::any_cast<double>(b);\n        if (double_a > double_b) return a;\n        if (double_a < double_b) return b;\n        return boost::any(\"None\");\n    }\n\n    if (a.type() == typeid(string) && b.type() == typeid(string)) {\n        string str_a = boost::any_cast<string>(a);\n        string str_b = boost::any_cast<string>(b);\n        int cmp = compare_strings(str_a, str_b);\n        if (cmp > 0) return a;\n        if (cmp < 0) return b;\n        return boost::any(\"None\");\n    }\n\n    if (a.type() == typeid(int) && b.type() == typeid(string)) {\n        int int_a = boost::any_cast<int>(a);\n        string str_b = boost::any_cast<string>(b);\n        double double_b = stod(normalize_string(str_b));\n        if (int_a > double_b) return a;\n        if (int_a < double_b) return b;\n        return boost::any(\"None\");\n    }\n\n    if (a.type() == typeid(string) && b.type() == typeid(int)) {\n        string str_a = boost::any_cast<"}
{"task_id": "CPP/138", "generation": "#include<stdio.h>\n\nbool is_equal_to_sum_even(int n) {\n    // Any number less than 8 cannot be the sum of 4 positive even numbers\n    if (n < 8) {\n        return false;\n    }\n    \n    // Since the sum of 4 even numbers is always even, we only need to check if n is even\n    return (n % 2 == 0);\n}\n\n"}
{"task_id": "CPP/139", "generation": "#include <stdio.h>\n\n// Helper function to compute the factorial of a number\nlong long factorial(int num) {\n    long long result = 1;\n    for (int i = 1; i <= num; i++) {\n        result *= i;\n    }\n    return result;\n}\n\n// Function to compute the Brazilian factorial\nlong long special_factorial(int n) {\n    long long result = 1;\n    for (int i = n; i >= 1; i--) {\n        result *= factorial(i);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/140", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring fix_spaces(string text) {\n    string result;\n    int n = text.length();\n    int i = 0;\n\n    while (i < n) {\n        if (text[i] == ' ') {\n            int count = 0;\n            // Count consecutive spaces\n            while (i < n && text[i] == ' ') {\n                count++;\n                i++;\n            }\n            // Replace with underscore if count is 1\n            if (count == 1) {\n                result += '_';\n            }\n            // Replace with hyphen if count is more than 2\n            else if (count > 2) {\n                result += '-';\n            }\n            // If count is 2, we add two underscores\n            else if (count == 2) {\n                result += \"__\";\n            }\n        } else {\n            result += text[i];\n            i++;\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/141", "generation": "#include<stdio.h>\n#include<string>\n#include<cctype>\n#include<unordered_set>\nusing namespace std;\n\nstring file_name_check(string file_name) {\n    // Check if the file name contains exactly one dot\n    size_t dot_pos = file_name.find('.');\n    if (dot_pos == string::npos || dot_pos == 0 || dot_pos == file_name.size() - 1) {\n        return \"No\";\n    }\n\n    // Check if the substring before the dot is not empty and starts with a letter\n    string name_part = file_name.substr(0, dot_pos);\n    if (name_part.empty() || !isalpha(name_part[0])) {\n        return \"No\";\n    }\n\n    // Check if the substring after the dot is one of the allowed extensions\n    unordered_set<string> allowed_extensions = {\"txt\", \"exe\", \"dll\"};\n    string extension_part = file_name.substr(dot_pos + 1);\n    if (allowed_extensions.find(extension_part) == allowed_extensions.end()) {\n        return \"No\";\n    }\n\n    // Count the number of digits in the file name\n    int digit_count = 0;\n    for (char c : file_name) {\n        if (isdigit(c)) {\n            digit_count++;\n            if (digit_count > 3) {\n                return \"No\";\n            }\n        }\n    }\n\n    // If all conditions are met, return \"Yes\"\n    return \"Yes\";\n}\n\n// Example usage\n"}
{"task_id": "CPP/142", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nint sum_squares(vector<int> lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.size(); ++i) {\n        if (i % 3 == 0) {\n            lst[i] = lst[i] * lst[i]; // Square the entry if index is a multiple of 3\n        } else if (i % 4 == 0 && i % 3 != 0) {\n            lst[i] = lst[i] * lst[i] * lst[i]; // Cube the entry if index is a multiple of 4 and not a multiple of 3\n        }\n        sum += lst[i]; // Add the modified entry to the sum\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/143", "generation": "#include <iostream>\n#include <string>\n#include <vector>\n#include <sstream>\n#include <cmath>\n\nusing namespace std;\n\n// Function to check if a number is prime\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true; // 2 is the only even prime number\n    if (n % 2 == 0) return false; // Other even numbers are not prime\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nstring words_in_sentence(string sentence) {\n    stringstream ss(sentence);\n    string word;\n    vector<string> result;\n    \n    // Split the sentence into words\n    while (ss >> word) {\n        if (isPrime(word.length())) {\n            result.push_back(word);\n        }\n    }\n    \n    // Join the words back into a single string\n    string resultString;\n    for (size_t i = 0; i < result.size(); ++i) {\n        if (i != 0) resultString += \" \";\n        resultString += result[i];\n    }\n    \n    return resultString;\n}\n\n"}
{"task_id": "CPP/144", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <cmath>\n\nusing namespace std;\n\nbool simplify(string x, string n) {\n    // Helper function to parse the fraction string\n    auto parseFraction = [](const string& fraction) -> pair<int, int> {\n        size_t pos = fraction.find('/');\n        int numerator = stoi(fraction.substr(0, pos));\n        int denominator = stoi(fraction.substr(pos + 1));\n        return {numerator, denominator};\n    };\n\n    // Parse the fractions\n    auto [xNum, xDen] = parseFraction(x);\n    auto [nNum, nDen] = parseFraction(n);\n\n    // Multiply the fractions\n    int resultNum = xNum * nNum;\n    int resultDen = xDen * nDen;\n\n    // Check if the result is a whole number\n    return resultNum % resultDen == 0;\n}\n\n"}
{"task_id": "CPP/145", "generation": "#include <vector>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\n// Helper function to calculate the sum of digits of a number\nint sum_of_digits(int num) {\n    int sum = 0;\n    bool is_negative = num < 0;\n    num = abs(num);\n    \n    while (num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    \n    if (is_negative) {\n        sum = -sum;\n    }\n    \n    return sum;\n}\n\nvector<int> order_by_points(vector<int> nums) {\n    // Use a stable sort to maintain the original order for equal sums\n    stable_sort(nums.begin(), nums.end(), [](int a, int b) {\n        return sum_of_digits(a) < sum_of_digits(b);\n    });\n    \n    return nums;\n}\n\n// Example usage\n"}
{"task_id": "CPP/146", "generation": "#include <vector>\n#include <string>\n#include <cmath>\nusing namespace std;\n\nbool isOdd(int digit) {\n    return digit % 2 != 0;\n}\n\nint specialFilter(vector<int> nums) {\n    int count = 0;\n    \n    for (int num : nums) {\n        // Check if the number is greater than 10\n        if (num > 10) {\n            // Convert the number to a string to easily access the first and last digits\n            string numStr = to_string(abs(num));\n            \n            // Extract the first and last digits\n            int firstDigit = numStr[0] - '0';\n            int lastDigit = numStr[numStr.size() - 1] - '0';\n            \n            // Check if both digits are odd\n            if (isOdd(firstDigit) && isOdd(lastDigit)) {\n                count++;\n            }\n        }\n    }\n    \n    return count;\n}\n\n// Example usage\n"}
{"task_id": "CPP/147", "generation": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint get_max_triples(int n) {\n    // Step 1: Generate the vector a\n    vector<int> a(n);\n    for (int i = 0; i < n; ++i) {\n        a[i] = (i + 1) * (i + 1) - (i + 1) + 1;\n    }\n\n    // Step 2: Count the number of valid triples\n    int count = 0;\n    for (int i = 0; i < n - 2; ++i) {\n        for (int j = i + 1; j < n - 1; ++j) {\n            for (int k = j + 1; k < n; ++k) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}\n\n"}
{"task_id": "CPP/148", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_map>\n\nusing namespace std;\n\nvector<string> bf(string planet1, string planet2) {\n    // List of planets in order of their proximity to the Sun\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    \n    // Map to store the index of each planet for quick lookup\n    unordered_map<string, int> planetIndex;\n    for (int i = 0; i < planets.size(); ++i) {\n        planetIndex[planets[i]] = i;\n    }\n    \n    // Check if both planet names are valid\n    if (planetIndex.find(planet1) == planetIndex.end() || planetIndex.find(planet2) == planetIndex.end()) {\n        return {};\n    }\n    \n    // Get the indices of the two planets\n    int index1 = planetIndex[planet1];\n    int index2 = planetIndex[planet2];\n    \n    // Ensure index1 is less than index2 for consistency\n    if (index1 > index2) {\n        swap(index1, index2);\n    }\n    \n    // Collect planets between index1 and index2 (exclusive)\n    vector<string> result;\n    for (int i = index1 + 1; i < index2; ++i) {\n        result.push_back(planets[i]);\n    }\n    \n    return result;\n}\n\n// Example usage\n"}
{"task_id": "CPP/149", "generation": "#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nvector<string> sorted_list_sum(vector<string> lst) {\n    // Step 1: Filter out strings with odd lengths\n    vector<string> filtered_lst;\n    for (const string& s : lst) {\n        if (s.length() % 2 == 0) {\n            filtered_lst.push_back(s);\n        }\n    }\n\n    // Step 2: Sort the filtered strings\n    sort(filtered_lst.begin(), filtered_lst.end(), [](const string& a, const string& b) {\n        if (a.length() == b.length()) {\n            return a < b; // Sort alphabetically if lengths are the same\n        }\n        return a.length() < b.length(); // Sort by length\n    });\n\n    return filtered_lst;\n}\n\n// Example usage\n"}
{"task_id": "CPP/150", "generation": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nint x_or_y(int n, int x, int y) {\n    if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n\n"}
{"task_id": "CPP/151", "generation": "#include <vector>\n#include <cmath>\nusing namespace std;\n\nlong long double_the_difference(vector<float> lst) {\n    long long sum = 0;\n    \n    for (float num : lst) {\n        // Check if the number is a positive integer\n        if (num > 0 && floor(num) == num) {\n            int int_num = static_cast<int>(num);\n            // Check if the number is odd\n            if (int_num % 2 != 0) {\n                sum += int_num * int_num;\n            }\n        }\n    }\n    \n    return sum;\n}\n"}
{"task_id": "CPP/152", "generation": "#include <vector>\n#include <cmath> // for std::abs\n\nusing namespace std;\n\nvector<int> compare(vector<int> game, vector<int> guess) {\n    vector<int> result;\n    for (size_t i = 0; i < game.size(); ++i) {\n        if (game[i] == guess[i]) {\n            result.push_back(0);\n        } else {\n            result.push_back(abs(game[i] - guess[i]));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/153", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cctype>\n\nusing namespace std;\n\nstring Strongest_Extension(string class_name, vector<string> extensions) {\n    string strongest_extension = \"\";\n    int max_strength = INT_MIN;\n\n    for (const string& ext : extensions) {\n        int CAP = 0;\n        int SM = 0;\n\n        // Calculate CAP and SM for the current extension\n        for (char c : ext) {\n            if (isupper(c)) {\n                CAP++;\n            } else if (islower(c)) {\n                SM++;\n            }\n        }\n\n        // Calculate the strength of the current extension\n        int strength = CAP - SM;\n\n        // Update the strongest extension if the current one is stronger\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest_extension = ext;\n        }\n    }\n\n    // Return the result in the required format\n    return class_name + \".\" + strongest_extension;\n}\n\n"}
{"task_id": "CPP/154", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool cycpattern_check(string a, string b) {\n    int n = b.length();\n    if (n == 0) return true; // Any string contains an empty string\n\n    // Concatenate b with itself to handle all rotations\n    string b_rotations = b + b;\n\n    // Check if any rotation of b is a substring of a\n    for (int i = 0; i < n; ++i) {\n        string rotation = b_rotations.substr(i, n);\n        if (a.find(rotation) != string::npos) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n"}
{"task_id": "CPP/155", "generation": "#include <vector>\n#include <cmath>\n\nusing namespace std;\n\nvector<int> even_odd_count(int num) {\n    // Initialize counts for even and odd digits\n    int even_count = 0;\n    int odd_count = 0;\n    \n    // Handle negative numbers by taking the absolute value\n    num = abs(num);\n    \n    // Loop through each digit of the number\n    while (num > 0) {\n        int digit = num % 10; // Extract the last digit\n        if (digit % 2 == 0) {\n            even_count++; // Increment even count if the digit is even\n        } else {\n            odd_count++; // Increment odd count if the digit is odd\n        }\n        num /= 10; // Remove the last digit\n    }\n    \n    // Return the counts as a vector\n    return {even_count, odd_count};\n}\n"}
{"task_id": "CPP/156", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring int_to_mini_roman(int number) {\n    // Define the mapping of values to their corresponding Roman numeral symbols in lowercase\n    vector<pair<int, string>> roman_map = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"},\n        {100, \"c\"}, {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"},\n        {10, \"x\"}, {9, \"ix\"}, {5, \"v\"}, {4, \"iv\"},\n        {1, \"i\"}\n    };\n    \n    string result = \"\";\n    \n    // Iterate through the mapping\n    for (const auto& pair : roman_map) {\n        int value = pair.first;\n        string symbol = pair.second;\n        \n        // Append the symbol to the result string as many times as the value fits into the number\n        while (number >= value) {\n            result += symbol;\n            number -= value;\n        }\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/157", "generation": "#include<stdio.h>\n#include<math.h>\n\nbool right_angle_triangle(float a, float b, float c) {\n    // Ensure the sides are sorted such that a <= b <= c\n    if (a > b) {\n        float temp = a;\n        a = b;\n        b = temp;\n    }\n    if (b > c) {\n        float temp = b;\n        b = c;\n        c = temp;\n    }\n    if (a > b) {\n        float temp = a;\n        a = b;\n        b = temp;\n    }\n\n    // Check the Pythagorean theorem\n    return (pow(a, 2) + pow(b, 2) == pow(c, 2));\n}\n\n"}
{"task_id": "CPP/158", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_set>\n#include <algorithm>\n\nusing namespace std;\n\nstring find_max(vector<string> words) {\n    string max_word = \"\";\n    int max_unique_count = 0;\n\n    for (const string& word : words) {\n        // Use an unordered_set to count unique characters\n        unordered_set<char> unique_chars(word.begin(), word.end());\n        int unique_count = unique_chars.size();\n\n        // If the current word has more unique characters, update max_word\n        if (unique_count > max_unique_count) {\n            max_word = word;\n            max_unique_count = unique_count;\n        }\n        // If the current word has the same number of unique characters but is lexicographically smaller, update max_word\n        else if (unique_count == max_unique_count && word < max_word) {\n            max_word = word;\n        }\n    }\n\n    return max_word;\n}\n\n"}
{"task_id": "CPP/159", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<int> eat(int number, int need, int remaining) {\n    // Calculate the total number of carrots the rabbit needs to eat\n    int total_needed = number + need;\n    \n    // Determine how many carrots the rabbit can actually eat\n    int actually_eaten = min(total_needed, remaining);\n    \n    // Calculate the number of carrots left after the rabbit has eaten\n    int carrots_left = remaining - actually_eaten;\n    \n    // Return the results as a vector\n    return {number + actually_eaten, carrots_left};\n}\n\n// Example usage\n"}
{"task_id": "CPP/160", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nint do_algebra(vector<string> operato, vector<int> operand) {\n    // Initialize the result with the first operand\n    int result = operand[0];\n    \n    // Iterate through the operators and operands\n    for (size_t i = 0; i < operato.size(); ++i) {\n        // Get the current operator and operand\n        string op = operato[i];\n        int next_operand = operand[i + 1];\n        \n        // Apply the operator to the result and the next operand\n        if (op == \"+\") {\n            result += next_operand;\n        } else if (op == \"-\") {\n            result -= next_operand;\n        } else if (op == \"*\") {\n            result *= next_operand;\n        } else if (op == \"//\") {\n            result /= next_operand; // Note: This is integer division\n        } else if (op == \"**\") {\n            result = pow(result, next_operand);\n        }\n    }\n    \n    // Return the final result\n    return result;\n}\n\n"}
{"task_id": "CPP/161", "generation": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring solve(string s) {\n    bool containsLetter = false;\n    \n    // First pass: check if the string contains any letters and reverse case if necessary\n    for (int i = 0; i < s.length(); ++i) {\n        if (isalpha(s[i])) {\n            containsLetter = true;\n            if (islower(s[i])) {\n                s[i] = toupper(s[i]);\n            } else {\n                s[i] = tolower(s[i]);\n            }\n        }\n    }\n    \n    // If the string contains no letters, reverse the entire string\n    if (!containsLetter) {\n        reverse(s.begin(), s.end());\n    }\n    \n    return s;\n}\n\n"}
{"task_id": "CPP/162", "generation": "#include <iostream>\n#include <string>\n#include <iomanip>\n#include <sstream>\n#include <openssl/md5.h>\n\nusing namespace std;\n\nstring string_to_md5(const string& text) {\n    // Return None if the input string is empty\n    if (text.empty()) {\n        return \"\";\n    }\n\n    // Create an MD5 context\n    MD5_CTX md5Context;\n    MD5_Init(&md5Context);\n\n    // Update the context with the input string\n    MD5_Update(&md5Context, text.c_str(), text.length());\n\n    // Create a buffer to hold the MD5 hash\n    unsigned char md5Hash[MD5_DIGEST_LENGTH];\n    MD5_Final(md5Hash, &md5Context);\n\n    // Convert the MD5 hash to a hexadecimal string\n    stringstream ss;\n    for (int i = 0; i < MD5_DIGEST_LENGTH; ++i) {\n        ss << hex << setw(2) << setfill('0') << (int)md5Hash[i];\n    }\n\n    return ss.str();\n}\n\n"}
{"task_id": "CPP/163", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> generate_integers(int a, int b) {\n    // Ensure a is less than or equal to b\n    if (a > b) {\n        swap(a, b);\n    }\n\n    vector<int> result;\n\n    // Even digits are 0, 2, 4, 6, 8\n    for (int i = a; i <= b; ++i) {\n        if (i % 2 == 0 && i < 10) {\n            result.push_back(i);\n        }\n    }\n\n    // Sort the result in ascending order (though it should already be sorted)\n    sort(result.begin(), result.end());\n\n    return result;\n}\n\n"}
{"task_id": "CPP/0", "generation": "#include<stdio.h>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nbool has_close_elements(vector<float> numbers, float threshold) {\n    // Get the size of the vector\n    int n = numbers.size();\n    \n    // Iterate through each pair of numbers\n    for (int i = 0; i < n; ++i) {\n        for (int j = i + 1; j < n; ++j) {\n            // Calculate the absolute difference between numbers[i] and numbers[j]\n            float diff = fabs(numbers[i] - numbers[j]);\n            \n            // Check if the difference is less than the threshold\n            if (diff < threshold) {\n                return true;\n            }\n        }\n    }\n    \n    // If no such pair is found, return false\n    return false;\n}\n\n"}
{"task_id": "CPP/1", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <stack>\n\nusing namespace std;\n\nvector<string> separate_paren_groups(string paren_string) {\n    vector<string> result;\n    string current_group;\n    stack<char> s;\n    bool in_group = false;\n\n    for (char c : paren_string) {\n        if (c == ' ') {\n            continue; // Ignore spaces\n        }\n\n        if (c == '(') {\n            if (!in_group) {\n                in_group = true;\n                current_group = \"\";\n            }\n            s.push(c);\n        } else if (c == ')') {\n            if (!s.empty() && s.top() == '(') {\n                s.pop();\n                current_group += c;\n                if (s.empty()) {\n                    result.push_back(current_group);\n                    in_group = false;\n                }\n            } else {\n                // This should not happen if input is valid\n                throw invalid_argument(\"Invalid input: unbalanced parentheses\");\n            }\n        } else {\n            if (in_group) {\n                current_group += c;\n            }\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/2", "generation": "#include <stdio.h>\n#include <math.h>\n\nfloat truncate_number(float number) {\n    // Extract the integer part of the number\n    int integer_part = (int)number;\n    \n    // Subtract the integer part from the original number to get the decimal part\n    float decimal_part = number - integer_part;\n    \n    return decimal_part;\n}\n\n"}
{"task_id": "CPP/3", "generation": "#include<vector>\nusing namespace std;\n\nbool below_zero(vector<int> operations) {\n    int balance = 0;\n    for (int operation : operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <numeric> // for std::accumulate\n\nusing namespace std;\n\nfloat mean_absolute_deviation(const vector<float>& numbers) {\n    if (numbers.empty()) {\n        return 0.0; // Return 0 if the vector is empty to avoid division by zero\n    }\n\n    // Step 1: Calculate the mean of the dataset\n    float sum = accumulate(numbers.begin(), numbers.end(), 0.0);\n    float mean = sum / numbers.size();\n\n    // Step 2: Compute the absolute difference between each element and the mean\n    float absolute_deviations_sum = 0.0;\n    for (float number : numbers) {\n        absolute_deviations_sum += fabs(number - mean);\n    }\n\n    // Step 3: Divide the sum of absolute deviations by the number of elements\n    float mad = absolute_deviations_sum / numbers.size();\n\n    return mad;\n}\n\n"}
{"task_id": "CPP/5", "generation": "#include <vector>\n#include <iostream>\nusing namespace std;\n\nvector<int> intersperse(vector<int> numbers, int delimeter) {\n    // Check if the input vector is empty\n    if (numbers.empty()) {\n        return {};\n    }\n\n    // Create a new vector to store the result\n    vector<int> result;\n\n    // Iterate through the input vector\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        // Insert the current element\n        result.push_back(numbers[i]);\n\n        // Insert the delimiter after the current element, except for the last element\n        if (i < numbers.size() - 1) {\n            result.push_back(delimeter);\n        }\n    }\n\n    // Return the result vector\n    return result;\n}\n\n// Test the function\n"}
{"task_id": "CPP/6", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<int> parse_nested_parens(string paren_string) {\n    vector<int> result;\n    stringstream ss(paren_string);\n    string group;\n    \n    while (ss >> group) {\n        int max_depth = 0;\n        int current_depth = 0;\n        \n        for (char c : group) {\n            if (c == '(') {\n                current_depth++;\n                if (current_depth > max_depth) {\n                    max_depth = current_depth;\n                }\n            } else if (c == ')') {\n                current_depth--;\n            }\n        }\n        \n        result.push_back(max_depth);\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/7", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm> // for std::find\n\nusing namespace std;\n\nvector<string> filter_by_substring(vector<string> strings, string substring) {\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.find(substring) != string::npos) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/8", "generation": "#include <vector>\n#include <iostream>\n\nusing namespace std;\n\nvector<int> sum_product(vector<int> numbers) {\n    int sum = 0;\n    int product = 1;\n\n    for (int num : numbers) {\n        sum += num;\n        product *= num;\n    }\n\n    // Handle the case where the input vector is empty\n    if (numbers.empty()) {\n        sum = 0;\n        product = 1;\n    }\n\n    return {sum, product};\n}\n\n"}
{"task_id": "CPP/9", "generation": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<int> rolling_max(vector<int> numbers) {\n    vector<int> result;\n    if (numbers.empty()) {\n        return result; // Return an empty vector if the input is empty\n    }\n\n    int current_max = numbers[0]; // Initialize the current max with the first element\n    result.push_back(current_max); // The first element of the result is the same as the input\n\n    for (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > current_max) {\n            current_max = numbers[i]; // Update the current max if a larger element is found\n        }\n        result.push_back(current_max); // Add the current max to the result vector\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/10", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nbool is_palindrome(const string& str) {\n    // Test if given string is a palindrome\n    string s(str.rbegin(), str.rend());\n    return s == str;\n}\n\nstring make_palindrome(const string& str) {\n    // Find the shortest palindrome that begins with a supplied string\n    for (size_t i = 0; i < str.size(); ++i) {\n        // Check if the suffix from i to the end is a palindrome\n        if (is_palindrome(str.substr(i))) {\n            // If it is, append the reverse of the prefix before this suffix\n            string prefix = str.substr(0, i);\n            reverse(prefix.begin(), prefix.end());\n            return str + prefix;\n        }\n    }\n    // If no palindromic suffix is found, append the reverse of the entire string\n    string reversed_str(str.rbegin(), str.rend());\n    return str + reversed_str;\n}\n\n"}
{"task_id": "CPP/11", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring string_xor(string a, string b) {\n    // Ensure both strings are of the same length\n    if (a.length() != b.length()) {\n        throw invalid_argument(\"Input strings must be of the same length\");\n    }\n\n    string result = \"\";\n    for (size_t i = 0; i < a.length(); ++i) {\n        // Perform XOR operation: '0' ^ '0' = '0', '1' ^ '1' = '0', '0' ^ '1' = '1', '1' ^ '0' = '1'\n        char xor_char = (a[i] == b[i]) ? '0' : '1';\n        result += xor_char;\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/12", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring longest(vector<string> strings) {\n    // Check if the vector is empty\n    if (strings.empty()) {\n        return \"\"; // Return an empty string to represent None\n    }\n\n    // Initialize variables to keep track of the longest string\n    string longest_string = strings[0];\n\n    // Iterate through the vector to find the longest string\n    for (const string& str : strings) {\n        if (str.length() > longest_string.length()) {\n            longest_string = str;\n        }\n    }\n\n    return longest_string;\n}\n\n"}
{"task_id": "CPP/13", "generation": "#include <iostream>\n\nint greatest_common_divisor(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\n"}
{"task_id": "CPP/14", "generation": "#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> all_prefixes(const string& str) {\n    vector<string> prefixes;\n    for (size_t i = 1; i <= str.size(); ++i) {\n        prefixes.push_back(str.substr(0, i));\n    }\n    return prefixes;\n}\n\n// Example usage\n"}
{"task_id": "CPP/15", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nstring string_sequence(int n) {\n    // Create a stringstream to build the result\n    stringstream result;\n    \n    // Loop from 0 to n inclusive\n    for (int i = 0; i <= n; ++i) {\n        // Append the number followed by a space\n        result << i << \" \";\n    }\n    \n    // Convert the stringstream to a string\n    string result_str = result.str();\n    \n    // Remove the trailing space\n    if (!result_str.empty()) {\n        result_str.pop_back();\n    }\n    \n    // Return the resulting string\n    return result_str;\n}\n\n"}
{"task_id": "CPP/16", "generation": "#include <iostream>\n#include <string>\n#include <unordered_set>\n#include <algorithm>\n\nusing namespace std;\n\nint count_distinct_characters(string str) {\n    // Convert the string to lowercase\n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    \n    // Use an unordered_set to store distinct characters\n    unordered_set<char> distinct_chars;\n    \n    // Iterate through the string and add each character to the set\n    for (char c : str) {\n        distinct_chars.insert(c);\n    }\n    \n    // The size of the set is the number of distinct characters\n    return distinct_chars.size();\n}\n\n"}
{"task_id": "CPP/17", "generation": "#include <vector>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<int> parse_music(string music_string) {\n    vector<int> beats;\n    stringstream ss(music_string);\n    string note;\n    \n    while (ss >> note) {\n        if (note == \"o\") {\n            beats.push_back(4);\n        } else if (note == \"o|\") {\n            beats.push_back(2);\n        } else if (note == \".|\") {\n            beats.push_back(1);\n        }\n    }\n    \n    return beats;\n}\n"}
{"task_id": "CPP/18", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint how_many_times(string str, string substring) {\n    int count = 0;\n    int sub_len = substring.length();\n    int str_len = str.length();\n\n    if (sub_len == 0 || str_len == 0) {\n        return 0;\n    }\n\n    for (int i = 0; i <= str_len - sub_len; ++i) {\n        if (str.substr(i, sub_len) == substring) {\n            ++count;\n        }\n    }\n\n    return count;\n}\n\n"}
{"task_id": "CPP/19", "generation": "#include <iostream>\n#include <string>\n#include <vector>\n#include <map>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nstring sort_numbers(string numbers) {\n    // Step 1: Create a mapping from number words to their corresponding integer values\n    map<string, int> word_to_num = {\n        {\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3}, {\"four\", 4},\n        {\"five\", 5}, {\"six\", 6}, {\"seven\", 7}, {\"eight\", 8}, {\"nine\", 9}\n    };\n\n    // Step 2: Tokenize the input string into individual number words\n    vector<string> words;\n    stringstream ss(numbers);\n    string word;\n    while (ss >> word) {\n        words.push_back(word);\n    }\n\n    // Step 3: Convert words to numbers\n    vector<int> nums;\n    for (const string& w : words) {\n        nums.push_back(word_to_num[w]);\n    }\n\n    // Step 4: Sort the numbers\n    sort(nums.begin(), nums.end());\n\n    // Step 5: Convert numbers back to words\n    map<int, string> num_to_word = {\n        {0, \"zero\"}, {1, \"one\"}, {2, \"two\"}, {3, \"three\"}, {4, \"four\"},\n        {5, \"five\"}, {6, \"six\"}, {7, \"seven\"}, {8, \"eight\"}, {9, \"nine\"}\n    };\n\n    vector<string> sorted_words;\n    for (int num : nums) {\n        sorted_words.push_back(num_to_word[num]);\n    }\n\n    // Step 6: Join the words back into a single string with spaces\n    string result;\n    for (size_t i = 0; i < sorted_words.size(); ++i) {\n        result += sorted_words[i];\n        if (i < sorted_words.size() - 1) {\n            result += \" \";\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/20", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\npair<float, float> find_closest_elements(vector<float> numbers) {\n    // Sort the vector to make it easier to find the closest elements\n    sort(numbers.begin(), numbers.end());\n\n    // Initialize variables to store the closest pair and the minimum difference\n    pair<float, float> closest_pair = {numbers[0], numbers[1]};\n    float min_diff = abs(numbers[0] - numbers[1]);\n\n    // Iterate through the sorted vector to find the closest pair\n    for (size_t i = 1; i < numbers.size() - 1; ++i) {\n        float diff = abs(numbers[i] - numbers[i + 1]);\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = {numbers[i], numbers[i + 1]};\n        }\n    }\n\n    // Ensure the pair is returned in the correct order\n    if (closest_pair.first > closest_pair.second) {\n        swap(closest_pair.first, closest_pair.second);\n    }\n\n    return closest_pair;\n}\n\n"}
{"task_id": "CPP/21", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm> // for std::min_element and std::max_element\n\nusing namespace std;\n\nvector<float> rescale_to_unit(vector<float> numbers) {\n    // Find the minimum and maximum values in the vector\n    float min_val = *min_element(numbers.begin(), numbers.end());\n    float max_val = *max_element(numbers.begin(), numbers.end());\n\n    // Apply the linear transformation to each element\n    vector<float> rescaled_numbers;\n    for (float num : numbers) {\n        float rescaled_num = (num - min_val) / (max_val - min_val);\n        rescaled_numbers.push_back(rescaled_num);\n    }\n\n    return rescaled_numbers;\n}\n\n"}
{"task_id": "CPP/22", "generation": "#include <iostream>\n#include <vector>\n#include <list>\n#include <boost/any.hpp>\n\ntypedef std::list<boost::any> list_any;\n\nstd::vector<int> filter_integers(list_any values) {\n    std::vector<int> result;\n    \n    for (const auto& value : values) {\n        if (value.type() == typeid(int)) {\n            result.push_back(boost::any_cast<int>(value));\n        }\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/23", "generation": "#include <iostream>\n#include <string>\n\nint stringLength(const std::string& str) {\n    return str.length();\n}\n\n"}
{"task_id": "CPP/24", "generation": "#include<iostream>\nusing namespace std;\n\nint largest_divisor(int n) {\n    // Start from the number just below n and go downwards\n    for (int i = n - 1; i > 0; --i) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    // If no divisor is found, return 1 (since 1 is a divisor of any number)\n    return 1;\n}\n\n"}
{"task_id": "CPP/25", "generation": "#include <vector>\n#include <cmath>\nusing namespace std;\n\nvector<int> factorize(int n) {\n    vector<int> factors;\n    \n    // Check for the number of 2s that divide n\n    while (n % 2 == 0) {\n        factors.push_back(2);\n        n = n / 2;\n    }\n    \n    // n must be odd at this point, so we can skip even numbers\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        // While i divides n, add i and divide n\n        while (n % i == 0) {\n            factors.push_back(i);\n            n = n / i;\n        }\n    }\n    \n    // This condition is to check if n is a prime number greater than 2\n    if (n > 2) {\n        factors.push_back(n);\n    }\n    \n    return factors;\n}\n\n// Example usage\n"}
{"task_id": "CPP/26", "generation": "#include <iostream>\n#include <vector>\n#include <unordered_set>\n\nusing namespace std;\n\nvector<int> remove_duplicates(vector<int> numbers) {\n    vector<int> result;\n    unordered_set<int> seen;\n\n    for (int num : numbers) {\n        if (seen.find(num) == seen.end()) {\n            // If the number is not in the set, add it to the result and mark it as seen\n            result.push_back(num);\n            seen.insert(num);\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/27", "generation": "#include <iostream>\n#include <string>\n#include <cctype> // for isupper and islower\n\nusing namespace std;\n\nstring flip_case(string str) {\n    for (char &c : str) {\n        if (isupper(c)) {\n            c = tolower(c);\n        } else if (islower(c)) {\n            c = toupper(c);\n        }\n    }\n    return str;\n}\n\n"}
{"task_id": "CPP/28", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring concatenate(const vector<string>& strings) {\n    string result;\n    for (const string& s : strings) {\n        result += s;\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/29", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> filter_by_prefix(vector<string> strings, string prefix) {\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.substr(0, prefix.size()) == prefix) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/30", "generation": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<float> get_positive(vector<float> l) {\n    vector<float> positive_numbers;\n    for (float num : l) {\n        if (num > 0) {\n            positive_numbers.push_back(num);\n        }\n    }\n    return positive_numbers;\n}\n\n"}
{"task_id": "CPP/31", "generation": "#include <cstdio>\n#include <cmath>\n\nbool is_prime(long long n) {\n    // Handle edge cases\n    if (n <= 1) {\n        return false;\n    }\n    if (n == 2 || n == 3) {\n        return true;\n    }\n    if (n % 2 == 0 || n % 3 == 0) {\n        return false;\n    }\n\n    // Check for factors from 5 to sqrt(n)\n    for (long long i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n"}
{"task_id": "CPP/32", "generation": "#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n\ndouble poly(vector<double> xs, double x) {\n    double sum = 0;\n    for (int i = 0; i < xs.size(); i++) {\n        sum += xs[i] * pow(x, i);\n    }\n    return sum;\n}\n\ndouble poly_derivative(vector<double> xs, double x) {\n    double sum = 0;\n    for (int i = 1; i < xs.size(); i++) {\n        sum += i * xs[i] * pow(x, i - 1);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs) {\n    // Initial guess can be the midpoint of the interval\n    double x0 = 0.0;\n    double tolerance = 1e-7;\n    int max_iterations = 1000;\n\n    for (int i = 0; i < max_iterations; i++) {\n        double fx = poly(xs, x0);\n        double dfx = poly_derivative(xs, x0);\n\n        if (fabs(fx) < tolerance) {\n            return x0;\n        }\n\n        if (fabs(dfx) < tolerance) {\n            // Avoid division by a very small number\n            break;\n        }\n\n        x0 = x0 - fx / dfx;\n    }\n\n    return x0;\n}\n\n"}
{"task_id": "CPP/33", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> sort_third(vector<int> l) {\n    // Step 1: Identify the indices divisible by 3\n    vector<int> indices;\n    for (size_t i = 0; i < l.size(); ++i) {\n        if ((i + 1) % 3 == 0) {  // Indices are 0-based, so we check (i + 1) % 3\n            indices.push_back(i);\n        }\n    }\n\n    // Step 2: Extract the values at these indices\n    vector<int> values;\n    for (int index : indices) {\n        values.push_back(l[index]);\n    }\n\n    // Step 3: Sort the extracted values\n    sort(values.begin(), values.end());\n\n    // Step 4: Replace the original values with the sorted values\n    for (size_t i = 0; i < indices.size(); ++i) {\n        l[indices[i]] = values[i];\n    }\n\n    // Step 5: Return the modified vector\n    return l;\n}\n\n// Example usage\n"}
{"task_id": "CPP/34", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> unique(vector<int> l) {\n    // Step 1: Sort the vector\n    sort(l.begin(), l.end());\n    \n    // Step 2: Use std::unique to remove consecutive duplicates\n    auto last = unique(l.begin(), l.end());\n    \n    // Step 3: Resize the vector to remove the extra elements\n    l.erase(last, l.end());\n    \n    return l;\n}\n\n// Example usage\n"}
{"task_id": "CPP/35", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm> // for std::max_element\n\nusing namespace std;\n\nfloat max_element(const vector<float>& l) {\n    // Check if the vector is empty\n    if (l.empty()) {\n        throw invalid_argument(\"Vector is empty\");\n    }\n    \n    // Use std::max_element to find the maximum element\n    return *max_element(l.begin(), l.end());\n}\n\n"}
{"task_id": "CPP/36", "generation": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint fizz_buzz(int n) {\n    int count = 0;\n    for (int i = 0; i < n; ++i) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            string num_str = to_string(i);\n            for (char c : num_str) {\n                if (c == '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/37", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<float> sort_even(vector<float> l) {\n    // Step 1: Extract values at even indices\n    vector<float> even_values;\n    for (size_t i = 0; i < l.size(); i += 2) {\n        even_values.push_back(l[i]);\n    }\n\n    // Step 2: Sort the extracted values\n    sort(even_values.begin(), even_values.end());\n\n    // Step 3: Reconstruct the output vector\n    vector<float> result = l;\n    size_t even_index = 0;\n    for (size_t i = 0; i < l.size(); i += 2) {\n        result[i] = even_values[even_index++];\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/38", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring decode_cyclic(string s){ \n    // returns decoded string by reversing the cycling of groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l = s.length();\n    int num = (l + 2) / 3;\n    string x, output;\n    int i;\n    for (i = 0; i * 3 < l; i++)\n    {\n        // reverse the cycling in each group. Unless group has fewer elements than 3.\n        x = s.substr(i * 3, 3);\n        if (x.length() == 3) x = x[2] + x.substr(0, 2);\n        output = output + x;\n    }\n    return output;\n}\n\n"}
{"task_id": "CPP/39", "generation": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n// Function to check if a number is prime\nbool is_prime(int num) {\n    if (num <= 1) return false;\n    if (num == 2) return true;\n    if (num % 2 == 0) return false;\n    for (int i = 3; i <= sqrt(num); i += 2) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\n// Function to generate the n-th prime Fibonacci number\nint prime_fib(int n) {\n    if (n <= 0) return -1; // Invalid input\n    int a = 1, b = 1;\n    int count = 0;\n    while (true) {\n        int next = a + b;\n        a = b;\n        b = next;\n        if (is_prime(next)) {\n            count++;\n            if (count == n) {\n                return next;\n            }\n        }\n    }\n}\n\n"}
{"task_id": "CPP/40", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nbool triples_sum_to_zero(vector<int> l) {\n    // Sort the vector\n    sort(l.begin(), l.end());\n    \n    int n = l.size();\n    \n    // Iterate through the vector\n    for (int i = 0; i < n - 2; ++i) {\n        // Skip duplicates for the first element\n        if (i > 0 && l[i] == l[i - 1]) continue;\n        \n        int left = i + 1;\n        int right = n - 1;\n        \n        while (left < right) {\n            int sum = l[i] + l[left] + l[right];\n            \n            if (sum == 0) {\n                return true;\n            } else if (sum < 0) {\n                // Move the left pointer to increase the sum\n                ++left;\n            } else {\n                // Move the right pointer to decrease the sum\n                --right;\n            }\n        }\n    }\n    \n    return false;\n}\n\n// Example usage\n"}
{"task_id": "CPP/41", "generation": "#include<stdio.h>\n\nint car_race_collision(int n) {\n    return n * n;\n}\n\n"}
{"task_id": "CPP/42", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<int> incr_list(vector<int> l) {\n    vector<int> result;\n    for (int i = 0; i < l.size(); i++) {\n        result.push_back(l[i] + 1);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/43", "generation": "#include <vector>\n#include <unordered_set>\nusing namespace std;\n\nbool pairs_sum_to_zero(vector<int> l) {\n    unordered_set<int> seen;\n    \n    for (int num : l) {\n        if (seen.find(-num) != seen.end()) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    \n    return false;\n}\n\n// Test cases\n"}
{"task_id": "CPP/44", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nstring change_base(int x, int base) {\n    if (x == 0) return \"0\"; // Special case for zero\n\n    string result = \"\";\n    while (x > 0) {\n        int remainder = x % base;\n        result += to_string(remainder); // Append the remainder to the result string\n        x /= base; // Update x to be the quotient of the division\n    }\n\n    // Reverse the result string to get the correct order\n    reverse(result.begin(), result.end());\n\n    return result;\n}\n\n"}
{"task_id": "CPP/45", "generation": "#include <stdio.h>\n\nfloat triangle_area(float a, float h) {\n    return 0.5 * a * h;\n}\n\n"}
{"task_id": "CPP/46", "generation": "#include <stdio.h>\n\nint fib4(int n) {\n    // Base cases\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n\n    // Initialize the first four elements of the sequence\n    int a = 0, b = 0, c = 2, d = 0;\n    int result = 0;\n\n    // Compute the n-th element iteratively\n    for (int i = 4; i <= n; ++i) {\n        result = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = result;\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/47", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nfloat median(vector<float> l) {\n    // Step 1: Sort the vector\n    sort(l.begin(), l.end());\n\n    // Step 2: Determine the size of the vector\n    int n = l.size();\n\n    // Step 3: Calculate the median\n    if (n % 2 == 1) {\n        // If the number of elements is odd, return the middle element\n        return l[n / 2];\n    } else {\n        // If the number of elements is even, return the average of the two middle elements\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    }\n}\n\n"}
{"task_id": "CPP/48", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool is_palindrome(const string& text) {\n    int n = text.length();\n    for (int i = 0; i < n / 2; ++i) {\n        if (text[i] != text[n - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/49", "generation": "#include <stdio.h>\n\nint modp(int n, int p) {\n    if (n == 0) {\n        return 1; // 2^0 % p is always 1\n    }\n\n    long long result = 1;\n    long long base = 2;\n\n    while (n > 0) {\n        if (n % 2 == 1) {\n            result = (result * base) % p;\n        }\n        base = (base * base) % p;\n        n /= 2;\n    }\n\n    return (int)result;\n}\n\n"}
{"task_id": "CPP/50", "generation": "#include <stdio.h>\n#include <string>\nusing namespace std;\n\nstring encode_shift(string s) {\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i = 0; i < s.length(); i++) {\n        int w = ((int)s[i] + 5 - (int)'a') % 26 + (int)'a';   \n        out = out + (char)w;\n    }\n    return out;\n}\n\nstring decode_shift(string s) {\n    // takes as input string encoded with encode_shift function. Returns decoded string.\n    string out;\n    int i;\n    for (i = 0; i < s.length(); i++) {\n        int w = ((int)s[i] - 5 - (int)'a' + 26) % 26 + (int)'a';\n        out = out + (char)w;\n    }\n    return out;\n}\n\n"}
{"task_id": "CPP/51", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cctype>\n\nusing namespace std;\n\nstring remove_vowels(string text) {\n    // Define a lambda function to check if a character is a vowel\n    auto is_vowel = [](char c) {\n        c = tolower(c); // Convert character to lowercase for case-insensitive comparison\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    };\n\n    // Use std::remove_if to move vowels to the end of the string\n    text.erase(remove_if(text.begin(), text.end(), is_vowel), text.end());\n\n    return text;\n}\n\n"}
{"task_id": "CPP/52", "generation": "#include <vector>\nusing namespace std;\n\nbool below_threshold(vector<int> l, int t) {\n    for (int num : l) {\n        if (num >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Example usage\n"}
{"task_id": "CPP/53", "generation": "#include<stdio.h>\n\nint add(int x, int y) {\n    return x + y;\n}\n\n"}
{"task_id": "CPP/54", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nbool same_chars(string s0, string s1) {\n    // Sort both strings\n    sort(s0.begin(), s0.end());\n    sort(s1.begin(), s1.end());\n    \n    // Compare the sorted strings\n    return s0 == s1;\n}\n\n"}
{"task_id": "CPP/55", "generation": "#include<iostream>\nusing namespace std;\n\nint fib(int n) {\n    if (n <= 0) {\n        return 0; // Handle the case where n is less than or equal to 0\n    } else if (n == 1) {\n        return 1; // Base case for the first Fibonacci number\n    } else {\n        int a = 0, b = 1, c;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}\n\n"}
{"task_id": "CPP/56", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool correct_bracketing(string brackets) {\n    int count = 0;\n    for (char bracket : brackets) {\n        if (bracket == '<') {\n            count++;\n        } else if (bracket == '>') {\n            count--;\n        }\n        // If count goes negative, it means there are unmatched closing brackets\n        if (count < 0) {\n            return false;\n        }\n    }\n    // If count is zero, all brackets are matched\n    return count == 0;\n}\n\n"}
{"task_id": "CPP/57", "generation": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nbool isMonotonic(const vector<float>& l) {\n    bool increasing = true;\n    bool decreasing = true;\n\n    for (size_t i = 1; i < l.size(); ++i) {\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n        }\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n        }\n    }\n\n    return increasing || decreasing;\n}\n\n"}
{"task_id": "CPP/58", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <set>\n\nusing namespace std;\n\nvector<int> common(vector<int> l1, vector<int> l2) {\n    // Sort both vectors\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n\n    // Use a set to store unique common elements\n    set<int> commonSet;\n\n    // Use two pointers to traverse both vectors\n    int i = 0, j = 0;\n    while (i < l1.size() && j < l2.size()) {\n        if (l1[i] == l2[j]) {\n            commonSet.insert(l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n\n    // Convert the set to a vector\n    vector<int> result(commonSet.begin(), commonSet.end());\n    return result;\n}\n\n"}
{"task_id": "CPP/59", "generation": "#include <iostream>\nusing namespace std;\n\nint largest_prime_factor(int n) {\n    int largest_factor = 1;\n    \n    // Check for the smallest prime factor 2\n    while (n % 2 == 0) {\n        largest_factor = 2;\n        n /= 2;\n    }\n    \n    // Check for odd factors from 3 onwards\n    for (int i = 3; i * i <= n; i += 2) {\n        while (n % i == 0) {\n            largest_factor = i;\n            n /= i;\n        }\n    }\n    \n    // If n is still greater than 2, then n itself is a prime factor\n    if (n > 2) {\n        largest_factor = n;\n    }\n    \n    return largest_factor;\n}\n\n"}
{"task_id": "CPP/60", "generation": "#include<iostream>\nusing namespace std;\n\nint sum_to_n(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; ++i) {\n        sum += i;\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/61", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool correct_bracketing(string brackets) {\n    int count = 0;\n    for (char bracket : brackets) {\n        if (bracket == '(') {\n            count++;\n        } else if (bracket == ')') {\n            count--;\n        }\n        // If count goes negative, it means there are unmatched closing brackets\n        if (count < 0) {\n            return false;\n        }\n    }\n    // If count is zero, all brackets are matched\n    return count == 0;\n}\n\n"}
{"task_id": "CPP/62", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<float> derivative(vector<float> xs) {\n    vector<float> result;\n    for (size_t i = 1; i < xs.size(); ++i) {\n        result.push_back(i * xs[i]);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/63", "generation": "#include <iostream>\n#include <vector>\n\nint fibfib(int n) {\n    if (n == 0 || n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 1;\n    }\n\n    std::vector<int> fibfib_sequence(n + 1);\n    fibfib_sequence[0] = 0;\n    fibfib_sequence[1] = 0;\n    fibfib_sequence[2] = 1;\n\n    for (int i = 3; i <= n; ++i) {\n        fibfib_sequence[i] = fibfib_sequence[i - 1] + fibfib_sequence[i - 2] + fibfib_sequence[i - 3];\n    }\n\n    return fibfib_sequence[n];\n}\n\n"}
{"task_id": "CPP/64", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nint vowels_count(string s) {\n    int count = 0;\n    transform(s.begin(), s.end(), s.begin(), ::tolower); // Convert the string to lowercase\n\n    for (char c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n\n    // Check if 'y' is at the end of the word\n    if (s.length() > 0 && s[s.length() - 1] == 'y') {\n        count++;\n    }\n\n    return count;\n}\n\n// Example usage\n"}
{"task_id": "CPP/65", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nstring circular_shift(int x, int shift) {\n    // Convert the integer to a string\n    string num_str = to_string(x);\n    int num_digits = num_str.length();\n\n    // If shift is greater than the number of digits, reverse the string\n    if (shift > num_digits) {\n        reverse(num_str.begin(), num_str.end());\n        return num_str;\n    }\n\n    // Perform the circular shift\n    string shifted_str = num_str.substr(num_digits - shift) + num_str.substr(0, num_digits - shift);\n\n    return shifted_str;\n}\n\n"}
{"task_id": "CPP/66", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint digitSum(string s) {\n    int sum = 0;\n    for (char c : s) {\n        if (c >= 'A' && c <= 'Z') {\n            sum += c;\n        }\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/67", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nint fruit_distribution(string s, int n) {\n    // Variables to store the number of apples and oranges\n    int apples = 0, oranges = 0;\n    \n    // Use stringstream to parse the input string\n    stringstream ss(s);\n    string word;\n    \n    // Read the first number (number of apples)\n    ss >> apples;\n    \n    // Skip the word \"apples\"\n    ss >> word;\n    \n    // Skip the word \"and\"\n    ss >> word;\n    \n    // Read the second number (number of oranges)\n    ss >> oranges;\n    \n    // Calculate the number of mangoes\n    int mangoes = n - apples - oranges;\n    \n    return mangoes;\n}\n\n"}
{"task_id": "CPP/68", "generation": "#include <vector>\nusing namespace std;\n\nvector<int> pluck(vector<int> arr) {\n    if (arr.empty()) {\n        return {};\n    }\n\n    int smallest_even_value = -1;\n    int smallest_even_index = -1;\n\n    for (int i = 0; i < arr.size(); ++i) {\n        if (arr[i] % 2 == 0) { // Check if the value is even\n            if (smallest_even_value == -1 || arr[i] < smallest_even_value) {\n                smallest_even_value = arr[i];\n                smallest_even_index = i;\n            }\n        }\n    }\n\n    if (smallest_even_value == -1) {\n        return {};\n    }\n\n    return {smallest_even_value, smallest_even_index};\n}\n"}
{"task_id": "CPP/69", "generation": "#include <vector>\n#include <unordered_map>\n#include <algorithm>\nusing namespace std;\n\nint search(vector<int> lst) {\n    // Step 1: Count the frequency of each integer\n    unordered_map<int, int> frequencyMap;\n    for (int num : lst) {\n        frequencyMap[num]++;\n    }\n\n    // Step 2: Find the greatest integer that meets the criteria\n    int maxValidInteger = -1;\n    for (const auto& pair : frequencyMap) {\n        int num = pair.first;\n        int freq = pair.second;\n        if (freq >= num) {\n            maxValidInteger = max(maxValidInteger, num);\n        }\n    }\n\n    // Step 3: Return the result\n    return maxValidInteger;\n}\n\n// Example usage\n"}
{"task_id": "CPP/70", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> strange_sort_list(vector<int> lst) {\n    // Sort the input vector in ascending order\n    sort(lst.begin(), lst.end());\n    \n    // Initialize the result vector\n    vector<int> result;\n    \n    // Initialize indices for the smallest and largest elements\n    int left = 0;\n    int right = lst.size() - 1;\n    \n    // Alternate between the smallest and largest elements\n    while (left <= right) {\n        if (left <= right) {\n            result.push_back(lst[left]);\n            left++;\n        }\n        if (left <= right) {\n            result.push_back(lst[right]);\n            right--;\n        }\n    }\n    \n    return result;\n}\n\n// Example usage\n"}
{"task_id": "CPP/71", "generation": "#include <stdio.h>\n#include <math.h>\n\nfloat triangle_area(float a, float b, float c) {\n    // Check if the sides can form a valid triangle\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n\n    // Calculate the semi-perimeter\n    float s = (a + b + c) / 2;\n\n    // Calculate the area using Heron's formula\n    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n\n    // Return the area rounded to 2 decimal points\n    return round(area * 100) / 100;\n}\n\n"}
{"task_id": "CPP/72", "generation": "#include <vector>\n#include <numeric> // for std::accumulate\n\nbool will_it_fly(vector<int> q, int w) {\n    // Check if the vector is palindromic\n    int n = q.size();\n    for (int i = 0; i < n / 2; ++i) {\n        if (q[i] != q[n - 1 - i]) {\n            return false;\n        }\n    }\n    \n    // Calculate the sum of the elements in the vector\n    int sum = accumulate(q.begin(), q.end(), 0);\n    \n    // Check if the sum is less than or equal to the maximum possible weight\n    return sum <= w;\n}\n\n// Example usage\n"}
{"task_id": "CPP/73", "generation": "#include <vector>\n#include <iostream>\nusing namespace std;\n\nint smallest_change(vector<int> arr) {\n    int left = 0;\n    int right = arr.size() - 1;\n    int changes = 0;\n\n    while (left < right) {\n        if (arr[left] != arr[right]) {\n            changes++;\n        }\n        left++;\n        right--;\n    }\n\n    return changes;\n}\n\n"}
{"task_id": "CPP/74", "generation": "#include <vector>\n#include <string>\n#include <numeric> // for accumulate\n\nusing namespace std;\n\nint total_chars(const vector<string>& vec) {\n    return accumulate(vec.begin(), vec.end(), 0, [](int sum, const string& str) {\n        return sum + str.size();\n    });\n}\n\nvector<string> total_match(vector<string> lst1, vector<string> lst2) {\n    int total_chars_lst1 = total_chars(lst1);\n    int total_chars_lst2 = total_chars(lst2);\n\n    if (total_chars_lst1 <= total_chars_lst2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n"}
{"task_id": "CPP/75", "generation": "#include <iostream>\n#include <vector>\n#include <cmath>\n\nusing namespace std;\n\n// Function to generate all prime numbers less than 100 using Sieve of Eratosthenes\nvector<int> generate_primes() {\n    const int limit = 100;\n    vector<bool> is_prime(limit, true);\n    is_prime[0] = is_prime[1] = false; // 0 and 1 are not prime numbers\n\n    for (int i = 2; i * i < limit; ++i) {\n        if (is_prime[i]) {\n            for (int j = i * i; j < limit; j += i) {\n                is_prime[j] = false;\n            }\n        }\n    }\n\n    vector<int> primes;\n    for (int i = 2; i < limit; ++i) {\n        if (is_prime[i]) {\n            primes.push_back(i);\n        }\n    }\n\n    return primes;\n}\n\n// Function to check if the given number is the multiplication of 3 prime numbers\nbool is_multiply_prime(int a) {\n    vector<int> primes = generate_primes();\n    int n = primes.size();\n\n    // Check all combinations of three primes\n    for (int i = 0; i < n; ++i) {\n        for (int j = i; j < n; ++j) {\n            for (int k = j; k < n; ++k) {\n                if (primes[i] * primes[j] * primes[k] == a) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n}\n\n"}
{"task_id": "CPP/76", "generation": "#include <iostream>\n#include <cmath>\n\nbool is_simple_power(int x, int n) {\n    // Special case: if n is 1, the only power of 1 is 1 itself.\n    if (n == 1) {\n        return x == 1;\n    }\n\n    // Iterate through possible values of k\n    int power = 1;\n    while (power < x) {\n        power *= n;\n        if (power == x) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n"}
{"task_id": "CPP/77", "generation": "#include <iostream>\n#include <cmath>\n\nbool iscube(int a) {\n    if (a < 0) {\n        a = -a; // Take the absolute value for negative numbers\n    }\n    int cube_root = static_cast<int>(cbrt(a)); // Calculate the cube root\n    return cube_root * cube_root * cube_root == a; // Check if the cube of the cube root equals the original number\n}\n\n"}
{"task_id": "CPP/78", "generation": "#include <iostream>\n#include <string>\n#include <unordered_set>\n\nusing namespace std;\n\nint hex_key(string num) {\n    // Define the set of prime hexadecimal digits\n    unordered_set<char> prime_digits = {'2', '3', '5', '7', 'B', 'D'};\n    \n    // Initialize the count of prime digits\n    int count = 0;\n    \n    // Iterate through the input string\n    for (char c : num) {\n        // Check if the current character is in the set of prime digits\n        if (prime_digits.find(c) != prime_digits.end()) {\n            count++;\n        }\n    }\n    \n    // Return the count of prime digits\n    return count;\n}\n\n"}
{"task_id": "CPP/79", "generation": "#include <iostream>\n#include <string>\n#include <algorithm> // for std::reverse\n\nusing namespace std;\n\nstring decimal_to_binary(int decimal) {\n    if (decimal == 0) {\n        return \"db0db\";\n    }\n\n    string binary;\n    while (decimal > 0) {\n        binary += (decimal % 2 == 0) ? '0' : '1';\n        decimal /= 2;\n    }\n\n    // Reverse the string to get the correct binary representation\n    reverse(binary.begin(), binary.end());\n\n    // Add the \"db\" characters at the beginning and end\n    return \"db\" + binary + \"db\";\n}\n\n"}
{"task_id": "CPP/80", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool is_happy(string s) {\n    // Check if the length of the string is less than 3\n    if (s.length() < 3) {\n        return false;\n    }\n\n    // Iterate through the string and check every 3 consecutive characters\n    for (int i = 0; i <= s.length() - 3; ++i) {\n        // Check if the 3 consecutive characters are distinct\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n\n    // If all 3 consecutive characters are distinct, return true\n    return true;\n}\n\n// Test cases\n"}
{"task_id": "CPP/81", "generation": "#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> numerical_letter_grade(vector<float> grades) {\n    vector<string> letter_grades;\n    \n    for (float gpa : grades) {\n        if (gpa == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (gpa > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (gpa > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (gpa > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (gpa > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (gpa > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (gpa > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (gpa > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (gpa > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (gpa > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (gpa > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (gpa > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n        }\n    }\n    \n    return letter_grades;\n}\n"}
{"task_id": "CPP/82", "generation": "#include <iostream>\n#include <string>\n#include <cmath>\nusing namespace std;\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true; // 2 is the only even prime number\n    if (n % 2 == 0) return false; // other even numbers are not prime\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nbool prime_length(string str) {\n    int length = str.length();\n    return is_prime(length);\n}\n\n"}
{"task_id": "CPP/83", "generation": "#include<stdio.h>\n#include<math.h>\n\nint starts_one_ends(int n) {\n    if (n == 1) {\n        return 1; // Special case: There is only one 1-digit number, which is 1 itself.\n    }\n    return 2 * pow(10, n-1) - pow(10, n-2);\n}\n\n"}
{"task_id": "CPP/84", "generation": "#include <iostream>\n#include <string>\n#include <bitset>\n\nusing namespace std;\n\nstring solve(int N) {\n    // Step 1: Calculate the sum of the digits of N\n    int sum = 0;\n    int temp = N;\n    while (temp > 0) {\n        sum += temp % 10;  // Add the last digit to the sum\n        temp /= 10;        // Remove the last digit\n    }\n\n    // Step 2: Convert the sum to its binary representation\n    string binarySum = bitset<32>(sum).to_string();  // Convert to binary string\n\n    // Step 3: Remove leading zeros from the binary string\n    size_t pos = binarySum.find('1');  // Find the first '1'\n    if (pos != string::npos) {\n        binarySum = binarySum.substr(pos);  // Extract the substring from the first '1'\n    } else {\n        binarySum = \"0\";  // If no '1' is found, the sum was 0\n    }\n\n    return binarySum;\n}\n\n"}
{"task_id": "CPP/85", "generation": "#include <vector>\nusing namespace std;\n\nint add(vector<int> lst) {\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 2 != 0 && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <sstream>\n\nusing namespace std;\n\nstring anti_shuffle(string s) {\n    // Create a stringstream to split the input string by spaces\n    stringstream ss(s);\n    string word;\n    string result;\n\n    // Process each word in the string\n    while (ss >> word) {\n        // Sort the characters of the word in ascending order\n        sort(word.begin(), word.end());\n        // Append the sorted word to the result\n        result += word + \" \";\n    }\n\n    // Remove the trailing space if there is any\n    if (!result.empty()) {\n        result.pop_back();\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/87", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<vector<int>> get_row(vector<vector<int>> lst, int x) {\n    vector<vector<int>> result;\n    \n    // Traverse the 2D vector to find all occurrences of x\n    for (int i = 0; i < lst.size(); ++i) {\n        for (int j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                result.push_back({i, j});\n            }\n        }\n    }\n    \n    // Sort the result vector\n    sort(result.begin(), result.end(), [](const vector<int>& a, const vector<int>& b) {\n        if (a[0] == b[0]) {\n            // If rows are the same, sort by column in descending order\n            return a[1] > b[1];\n        }\n        // Otherwise, sort by row in ascending order\n        return a[0] < b[0];\n    });\n    \n    return result;\n}\n\n// Example usage\n"}
{"task_id": "CPP/88", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> sort_array(vector<int> array) {\n    // Check if the array is empty or has only one element\n    if (array.empty() || array.size() == 1) {\n        return array;\n    }\n\n    // Calculate the sum of the first and last index values\n    int sum = array.front() + array.back();\n\n    // Create a copy of the array to sort\n    vector<int> sorted_array = array;\n\n    // Sort the array based on the sum\n    if (sum % 2 == 0) {\n        // Sort in descending order if the sum is even\n        sort(sorted_array.begin(), sorted_array.end(), greater<int>());\n    } else {\n        // Sort in ascending order if the sum is odd\n        sort(sorted_array.begin(), sorted_array.end());\n    }\n\n    return sorted_array;\n}\n"}
{"task_id": "CPP/89", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring encrypt(string s) {\n    int shift = 4; // 2 * 2 = 4\n    string result = \"\";\n\n    for (char c : s) {\n        if (c >= 'a' && c <= 'z') {\n            // Shift within lowercase letters\n            c = 'a' + (c - 'a' + shift) % 26;\n        } else if (c >= 'A' && c <= 'Z') {\n            // Shift within uppercase letters\n            c = 'A' + (c - 'A' + shift) % 26;\n        }\n        result += c;\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/90", "generation": "#include <vector>\n#include <algorithm>\n#include <iostream>\nusing namespace std;\n\nint next_smallest(vector<int> lst) {\n    // Edge case: if the vector is empty or has only one unique element\n    if (lst.size() < 2) {\n        return -1; // Return -1 to indicate no 2nd smallest element\n    }\n\n    // Sort the vector\n    sort(lst.begin(), lst.end());\n\n    // Find the smallest element\n    int smallest = lst[0];\n\n    // Find the 2nd smallest element\n    for (int i = 1; i < lst.size(); ++i) {\n        if (lst[i] != smallest) {\n            return lst[i];\n        }\n    }\n\n    // If all elements are the same, return -1\n    return -1;\n}\n\n"}
{"task_id": "CPP/91", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <vector>\n\nusing namespace std;\n\nint is_bored(string S) {\n    int boredom_count = 0;\n    stringstream ss(S);\n    string sentence;\n    vector<string> sentences;\n\n    // Split the string into sentences based on delimiters '.', '?', and '!'\n    while (getline(ss, sentence, '.')) {\n        sentences.push_back(sentence);\n    }\n    ss.clear();\n    ss.str(S);\n    while (getline(ss, sentence, '?')) {\n        sentences.push_back(sentence);\n    }\n    ss.clear();\n    ss.str(S);\n    while (getline(ss, sentence, '!')) {\n        sentences.push_back(sentence);\n    }\n\n    // Check each sentence to see if it starts with \"I\"\n    for (string &s : sentences) {\n        // Trim leading whitespace\n        size_t start = s.find_first_not_of(\" \\t\\n\\r\\f\\v\");\n        if (start != string::npos) {\n            s = s.substr(start);\n        }\n        // Check if the sentence starts with \"I\"\n        if (s.length() > 0 && s[0] == 'I') {\n            boredom_count++;\n        }\n    }\n\n    return boredom_count;\n}\n\n"}
{"task_id": "CPP/92", "generation": "#include <iostream>\n#include <cmath>\n\nbool any_int(float a, float b, float c) {\n    // Check if all numbers are integers\n    if (floor(a) != a || floor(b) != b || floor(c) != c) {\n        return false;\n    }\n\n    // Convert to integers for comparison\n    int int_a = static_cast<int>(a);\n    int int_b = static_cast<int>(b);\n    int int_c = static_cast<int>(c);\n\n    // Check if any one number is equal to the sum of the other two\n    if (int_a == int_b + int_c || int_b == int_a + int_c || int_c == int_a + int_b) {\n        return true;\n    }\n\n    return false;\n}\n\n"}
{"task_id": "CPP/93", "generation": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring encode(string message) {\n    string encodedMessage = \"\";\n    for (char c : message) {\n        // Swap case\n        if (isupper(c)) {\n            c = tolower(c);\n        } else if (islower(c)) {\n            c = toupper(c);\n        }\n\n        // Replace vowels with the letter 2 places ahead\n        if (c == 'a' || c == 'A') {\n            c = 'c';\n        } else if (c == 'e' || c == 'E') {\n            c = 'g';\n        } else if (c == 'i' || c == 'I') {\n            c = 'k';\n        } else if (c == 'o' || c == 'O') {\n            c = 'q';\n        } else if (c == 'u' || c == 'U') {\n            c = 'w';\n        }\n\n        encodedMessage += c;\n    }\n    return encodedMessage;\n}\n\n"}
{"task_id": "CPP/94", "generation": "#include <iostream>\n#include <vector>\n#include <cmath>\nusing namespace std;\n\n// Function to check if a number is prime\nbool isPrime(int num) {\n    if (num <= 1) return false;\n    if (num == 2) return true;\n    if (num % 2 == 0) return false;\n    for (int i = 3; i <= sqrt(num); i += 2) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\n// Function to sum the digits of a number\nint sumOfDigits(int num) {\n    int sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}\n\nint skjkasdkd(vector<int> lst) {\n    int largestPrime = -1;\n    \n    // Find the largest prime in the list\n    for (int num : lst) {\n        if (isPrime(num) && num > largestPrime) {\n            largestPrime = num;\n        }\n    }\n    \n    // If no prime is found, return 0\n    if (largestPrime == -1) return 0;\n    \n    // Sum the digits of the largest prime\n    return sumOfDigits(largestPrime);\n}\n\n"}
{"task_id": "CPP/95", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\n#include<cctype> // for islower and isupper functions\nusing namespace std;\n\nbool check_dict_case(map<string, string> dict) {\n    // If the map is empty, return false\n    if (dict.empty()) {\n        return false;\n    }\n\n    bool all_lower = true;\n    bool all_upper = true;\n\n    for (const auto& pair : dict) {\n        const string& key = pair.first;\n\n        // Check if the key is a string\n        if (key.empty()) {\n            return false;\n        }\n\n        // Check if all characters in the key are either all lower case or all upper case\n        bool is_lower = true;\n        bool is_upper = true;\n\n        for (char c : key) {\n            if (!islower(c)) {\n                is_lower = false;\n            }\n            if (!isupper(c)) {\n                is_upper = false;\n            }\n        }\n\n        // If the key is neither all lower case nor all upper case, return false\n        if (!is_lower && !is_upper) {\n            return false;\n        }\n\n        // Update the overall lower and upper case flags\n        all_lower &= is_lower;\n        all_upper &= is_upper;\n    }\n\n    // Return true if all keys are either all lower case or all upper case\n    return all_lower || all_upper;\n}\n\n// Example usage\n"}
{"task_id": "CPP/96", "generation": "#include <vector>\n#include <cmath>\n\nusing namespace std;\n\nvector<int> count_up_to(int n) {\n    vector<int> primes;\n    if (n <= 2) {\n        return primes; // No primes less than 2\n    }\n\n    // Create a boolean array \"is_prime[0..n]\" and initialize\n    // all entries it as true. A value in is_prime[i] will\n    // finally be false if i is Not a prime, else true.\n    vector<bool> is_prime(n, true);\n    is_prime[0] = is_prime[1] = false; // 0 and 1 are not primes\n\n    for (int p = 2; p * p < n; p++) {\n        // If is_prime[p] is not changed, then it is a prime\n        if (is_prime[p]) {\n            // Update all multiples of p to false\n            for (int i = p * p; i < n; i += p) {\n                is_prime[i] = false;\n            }\n        }\n    }\n\n    // Collect all prime numbers\n    for (int p = 2; p < n; p++) {\n        if (is_prime[p]) {\n            primes.push_back(p);\n        }\n    }\n\n    return primes;\n}\n"}
{"task_id": "CPP/97", "generation": "#include<stdio.h>\n\nint multiply(int a, int b) {\n    // Extract the unit digits\n    int unit_digit_a = abs(a) % 10;\n    int unit_digit_b = abs(b) % 10;\n    \n    // Calculate the product of the unit digits\n    int product = unit_digit_a * unit_digit_b;\n    \n    return product;\n}\n\n"}
{"task_id": "CPP/98", "generation": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint count_upper(string s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) { // Iterate through even indices\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/99", "generation": "#include <iostream>\n#include <string>\n#include <cmath>\n\nint closest_integer(std::string value) {\n    // Convert the string to a double\n    double number = std::stod(value);\n    \n    // Check if the number is exactly halfway between two integers\n    if (fabs(number - static_cast<int>(number)) == 0.5) {\n        // Round away from zero\n        if (number >= 0) {\n            return static_cast<int>(number + 0.5);\n        } else {\n            return static_cast<int>(number - 0.5);\n        }\n    } else {\n        // Round to the nearest integer\n        return static_cast<int>(round(number));\n    }\n}\n\n"}
{"task_id": "CPP/100", "generation": "#include <vector>\nusing namespace std;\n\nvector<int> make_a_pile(int n) {\n    vector<int> result;\n    int current = n;\n    \n    for (int i = 0; i < n; ++i) {\n        result.push_back(current);\n        if (current % 2 == 0) {\n            current += 2; // Next even number\n        } else {\n            current += 2; // Next odd number\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/101", "generation": "#include <vector>\n#include <string>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> words_string(string s) {\n    vector<string> words;\n    stringstream ss(s);\n    string word;\n    \n    // Use a delimiter that includes both spaces and commas\n    while (getline(ss, word, ' ')) {\n        // Further split by commas if necessary\n        stringstream sub_ss(word);\n        string sub_word;\n        while (getline(sub_ss, sub_word, ',')) {\n            if (!sub_word.empty()) {\n                words.push_back(sub_word);\n            }\n        }\n    }\n    \n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "#include<stdio.h>\n\nint choose_num(int x, int y) {\n    // Ensure x is less than or equal to y\n    if (x > y) {\n        return -1;\n    }\n\n    // Start from the largest number in the range and move downwards\n    for (int i = y; i >= x; i--) {\n        // Check if the number is even\n        if (i % 2 == 0) {\n            return i;\n        }\n    }\n\n    // If no even number is found, return -1\n    return -1;\n}\n\n"}
{"task_id": "CPP/103", "generation": "#include <iostream>\n#include <cmath>\n#include <string>\nusing namespace std;\n\nstring rounded_avg(int n, int m) {\n    // Step 1: Check if n is greater than m\n    if (n > m) {\n        return \"-1\";\n    }\n    \n    // Step 2: Calculate the sum of integers from n to m\n    int sum = (m * (m + 1)) / 2 - ((n - 1) * n) / 2;\n    \n    // Step 3: Compute the average\n    int count = m - n + 1;\n    double average = static_cast<double>(sum) / count;\n    \n    // Step 4: Round the average to the nearest integer (smaller one)\n    int rounded_average = floor(average);\n    \n    // Step 5: Convert the rounded average to binary\n    string binary_representation = \"\";\n    if (rounded_average == 0) {\n        binary_representation = \"0\";\n    } else {\n        while (rounded_average > 0) {\n            binary_representation = to_string(rounded_average % 2) + binary_representation;\n            rounded_average /= 2;\n        }\n    }\n    \n    return binary_representation;\n}\n\n"}
{"task_id": "CPP/104", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\n// Helper function to check if a number contains any even digit\nbool hasEvenDigit(int num) {\n    while (num > 0) {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            return true;\n        }\n        num /= 10;\n    }\n    return false;\n}\n\nvector<int> unique_digits(vector<int> x) {\n    vector<int> result;\n    \n    // Filter out numbers with even digits\n    for (int num : x) {\n        if (!hasEvenDigit(num)) {\n            result.push_back(num);\n        }\n    }\n    \n    // Sort the result in increasing order\n    sort(result.begin(), result.end());\n    \n    return result;\n}\n\n// Example usage\n"}
{"task_id": "CPP/105", "generation": "#include <vector>\n#include <string>\n#include <map>\n#include <algorithm>\nusing namespace std;\n\nvector<string> by_length(vector<int> arr) {\n    // Step 1: Filter and sort the integers between 1 and 9\n    vector<int> filtered;\n    for (int num : arr) {\n        if (num >= 1 && num <= 9) {\n            filtered.push_back(num);\n        }\n    }\n    sort(filtered.begin(), filtered.end());\n\n    // Step 2: Reverse the sorted vector\n    reverse(filtered.begin(), filtered.end());\n\n    // Step 3: Replace each digit with its corresponding name\n    map<int, string> digitToName = {\n        {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"},\n        {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}\n    };\n\n    vector<string> result;\n    for (int num : filtered) {\n        result.push_back(digitToName[num]);\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/106", "generation": "#include <vector>\nusing namespace std;\n\nvector<int> f(int n) {\n    vector<int> result(n);\n    \n    for (int i = 1; i <= n; ++i) {\n        if (i % 2 == 0) {\n            // Compute factorial of i\n            int factorial = 1;\n            for (int j = 1; j <= i; ++j) {\n                factorial *= j;\n            }\n            result[i - 1] = factorial;\n        } else {\n            // Compute sum of numbers from 1 to i\n            int sum = 0;\n            for (int j = 1; j <= i; ++j) {\n                sum += j;\n            }\n            result[i - 1] = sum;\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/107", "generation": "#include <vector>\n#include <string>\nusing namespace std;\n\nbool isPalindrome(int num) {\n    string str = to_string(num);\n    int len = str.length();\n    for (int i = 0; i < len / 2; ++i) {\n        if (str[i] != str[len - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvector<int> even_odd_palindrome(int n) {\n    int evenCount = 0;\n    int oddCount = 0;\n    \n    for (int i = 1; i <= n; ++i) {\n        if (isPalindrome(i)) {\n            if (i % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n    \n    return {evenCount, oddCount};\n}\n"}
{"task_id": "CPP/108", "generation": "#include <vector>\n#include <cmath>\nusing namespace std;\n\nint count_nums(vector<int> n) {\n    int count = 0;\n    \n    for (int num : n) {\n        int sum_of_digits = 0;\n        int temp = abs(num);\n        \n        // Calculate the sum of digits\n        while (temp > 0) {\n            sum_of_digits += temp % 10;\n            temp /= 10;\n        }\n        \n        // If the number is negative, subtract the sum of digits from the first digit\n        if (num < 0) {\n            int first_digit = abs(num);\n            while (first_digit >= 10) {\n                first_digit /= 10;\n            }\n            sum_of_digits -= 2 * first_digit; // Subtract twice because it was added once in the sum\n        }\n        \n        // Check if the sum of digits is greater than 0\n        if (sum_of_digits > 0) {\n            count++;\n        }\n    }\n    \n    return count;\n}\n\n// Example usage\n"}
{"task_id": "CPP/109", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nbool move_one_ball(vector<int> arr) {\n    if (arr.empty()) return true;\n\n    int n = arr.size();\n    int min_index = 0;\n\n    // Find the index of the minimum element\n    for (int i = 1; i < n; ++i) {\n        if (arr[i] < arr[min_index]) {\n            min_index = i;\n        }\n    }\n\n    // Check if the vector is sorted in non-decreasing order starting from min_index\n    for (int i = 0; i < n - 1; ++i) {\n        int current = (min_index + i) % n;\n        int next = (min_index + i + 1) % n;\n        if (arr[current] > arr[next]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n"}
{"task_id": "CPP/110", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nstring exchange(vector<int> lst1, vector<int> lst2) {\n    int oddCount = 0;\n    int evenCount = 0;\n\n    // Count the number of odd elements in lst1\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            oddCount++;\n        }\n    }\n\n    // Count the number of even elements in lst2\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            evenCount++;\n        }\n    }\n\n    // If there are enough even elements in lst2 to replace all odd elements in lst1\n    if (evenCount >= oddCount) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\n// Example usage\n"}
{"task_id": "CPP/111", "generation": "#include <iostream>\n#include <string>\n#include <map>\n#include <climits>\n\nusing namespace std;\n\nmap<char, int> histogram(string test) {\n    map<char, int> frequencyMap;\n    map<char, int> resultMap;\n    int maxFrequency = 0;\n\n    // Step 1: Populate the frequency map\n    for (char c : test) {\n        if (c != ' ') { // Ignore spaces\n            frequencyMap[c]++;\n            if (frequencyMap[c] > maxFrequency) {\n                maxFrequency = frequencyMap[c];\n            }\n        }\n    }\n\n    // Step 2: Populate the result map with letters having the maximum frequency\n    for (const auto& pair : frequencyMap) {\n        if (pair.second == maxFrequency) {\n            resultMap[pair.first] = pair.second;\n        }\n    }\n\n    return resultMap;\n}\n\n"}
{"task_id": "CPP/112", "generation": "#include<iostream>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nvector<string> reverse_delete(string s, string c) {\n    // Step 1: Remove characters from s that are in c\n    string result;\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            result += ch;\n        }\n    }\n    \n    // Step 2: Check if the result string is a palindrome\n    bool isPalindrome = true;\n    int n = result.length();\n    for (int i = 0; i < n / 2; ++i) {\n        if (result[i] != result[n - i - 1]) {\n            isPalindrome = false;\n            break;\n        }\n    }\n    \n    // Step 3: Prepare the result vector\n    vector<string> resultVector;\n    resultVector.push_back(result);\n    resultVector.push_back(isPalindrome ? \"True\" : \"False\");\n    \n    return resultVector;\n}\n\n"}
{"task_id": "CPP/113", "generation": "#include<iostream>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> odd_count(vector<string> lst) {\n    vector<string> result;\n    \n    for (size_t i = 0; i < lst.size(); ++i) {\n        int odd_count = 0;\n        for (char c : lst[i]) {\n            if ((c - '0') % 2 != 0) {\n                ++odd_count;\n            }\n        }\n        \n        // Construct the output string\n        string output = \"the number of odd elements \" + to_string(odd_count) + \"n the str\" + to_string(odd_count) + \"ng \" + to_string(odd_count) + \" of the \" + to_string(odd_count) + \"nput.\";\n        result.push_back(output);\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/114", "generation": "#include <vector>\n#include <algorithm>\n#include <limits.h>\n\nusing namespace std;\n\nlong long minSubArraySum(vector<long long> nums) {\n    // Edge case: if the vector is empty, return 0 (or handle as needed)\n    if (nums.empty()) return 0;\n\n    // Initialize variables to store the minimum sum found so far\n    long long min_sum = LLONG_MAX;\n    long long current_sum = 0;\n\n    // Iterate through the vector\n    for (long long num : nums) {\n        // Update the current sum to be the minimum of the current element or the current sum plus the element\n        current_sum = min(num, current_sum + num);\n        // Update the minimum sum found so far\n        min_sum = min(min_sum, current_sum);\n    }\n\n    return min_sum;\n}\n\n"}
{"task_id": "CPP/115", "generation": "#include<vector>\n#include<cmath> // for ceil function\nusing namespace std;\n\nint max_fill(vector<vector<int>> grid, int capacity) {\n    int total_lowers = 0;\n    \n    for (const auto& row : grid) {\n        int water_units = 0;\n        for (int unit : row) {\n            if (unit == 1) {\n                water_units++;\n            }\n        }\n        // Calculate the number of times the bucket needs to be lowered\n        total_lowers += ceil((double)water_units / capacity);\n    }\n    \n    return total_lowers;\n}\n\n// Example usage\n"}
{"task_id": "CPP/116", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <bitset>\n\nusing namespace std;\n\n// Function to count the number of ones in the binary representation of an integer\nint countOnes(int num) {\n    return bitset<32>(num).count();\n}\n\n// Custom comparator function for sorting\nbool customComparator(int a, int b) {\n    int countA = countOnes(a);\n    int countB = countOnes(b);\n    \n    if (countA == countB) {\n        return a < b; // If number of ones is the same, sort by decimal value\n    }\n    return countA < countB; // Otherwise, sort by number of ones\n}\n\nvector<int> sort_array(vector<int> arr) {\n    sort(arr.begin(), arr.end(), customComparator);\n    return arr;\n}\n\n"}
{"task_id": "CPP/117", "generation": "#include <vector>\n#include <string>\n#include <sstream>\n#include <unordered_set>\n\nusing namespace std;\n\nvector<string> select_words(string s, int n) {\n    // Define a set of vowels for quick lookup\n    unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    \n    // Result vector to store words with exactly n consonants\n    vector<string> result;\n    \n    // Use a stringstream to split the input string into words\n    stringstream ss(s);\n    string word;\n    \n    while (ss >> word) {\n        int consonant_count = 0;\n        \n        // Count consonants in the current word\n        for (char c : word) {\n            if (isalpha(c) && vowels.find(c) == vowels.end()) {\n                consonant_count++;\n            }\n        }\n        \n        // If the word has exactly n consonants, add it to the result\n        if (consonant_count == n) {\n            result.push_back(word);\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/118", "generation": "#include<iostream>\n#include<string>\n#include<unordered_set>\nusing namespace std;\n\nstring get_closest_vowel(string word) {\n    // Define the set of vowels (case sensitive)\n    unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    \n    // Traverse the word from right to left\n    for (int i = word.size() - 1; i > 0; --i) {\n        // Check if the current character is a vowel\n        if (vowels.find(word[i]) != vowels.end()) {\n            // Check if it is surrounded by consonants\n            if (i > 0 && i < word.size() - 1) {\n                bool left_is_consonant = vowels.find(word[i - 1]) == vowels.end();\n                bool right_is_consonant = vowels.find(word[i + 1]) == vowels.end();\n                if (left_is_consonant && right_is_consonant) {\n                    return string(1, word[i]);\n                }\n            }\n        }\n    }\n    \n    // If no such vowel is found, return an empty string\n    return \"\";\n}\n\n"}
{"task_id": "CPP/119", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nstring match_parens(vector<string> lst) {\n    string s1 = lst[0];\n    string s2 = lst[1];\n    \n    int open1 = 0, close1 = 0;\n    int open2 = 0, close2 = 0;\n    \n    // Count parentheses in the first string\n    for (char c : s1) {\n        if (c == '(') open1++;\n        else close1++;\n    }\n    \n    // Count parentheses in the second string\n    for (char c : s2) {\n        if (c == '(') open2++;\n        else close2++;\n    }\n    \n    // Total parentheses\n    int total_open = open1 + open2;\n    int total_close = close1 + close2;\n    \n    // Check if the total number of opening and closing parentheses are equal\n    if (total_open != total_close) {\n        return \"No\";\n    }\n    \n    // Check if we can balance the unmatched parentheses\n    if (close1 > open2 || close2 > open1) {\n        return \"No\";\n    }\n    \n    return \"Yes\";\n}\n\n// Example usage\n"}
{"task_id": "CPP/120", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> maximum(vector<int> arr, int k) {\n    // Step 1: Sort the array in ascending order\n    sort(arr.begin(), arr.end());\n    \n    // Step 2: Extract the last k elements (which are the top k maximum elements)\n    vector<int> result(arr.end() - k, arr.end());\n    \n    // Step 3: The result is already sorted in ascending order\n    return result;\n}\n"}
{"task_id": "CPP/121", "generation": "#include <vector>\nusing namespace std;\n\nint solution(vector<int> lst) {\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "#include <vector>\n#include <cmath>\nusing namespace std;\n\nint add_elements(vector<int> arr, int k) {\n    int sum = 0;\n    \n    for (int i = 0; i < k; ++i) {\n        // Check if the number has at most two digits\n        if (arr[i] >= 0 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    \n    return sum;\n}\n\n// Example usage\n"}
{"task_id": "CPP/123", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> get_odd_collatz(int n) {\n    vector<int> odd_numbers;\n    \n    // Start with the given number\n    while (n != 1) {\n        if (n % 2 == 1) { // Check if the number is odd\n            odd_numbers.push_back(n);\n        }\n        // Generate the next number in the sequence\n        if (n % 2 == 0) {\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n    }\n    \n    // Add the final 1 to the sequence\n    odd_numbers.push_back(1);\n    \n    // Sort the vector to ensure it is in increasing order\n    sort(odd_numbers.begin(), odd_numbers.end());\n    \n    return odd_numbers;\n}\n"}
{"task_id": "CPP/124", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <iomanip>\n\nusing namespace std;\n\nbool valid_date(string date) {\n    // Check if the date string is empty\n    if (date.empty()) {\n        return false;\n    }\n\n    // Check if the date string is in the format \"mm-dd-yyyy\"\n    if (date.length() != 10 || date[2] != '-' || date[5] != '-') {\n        return false;\n    }\n\n    // Extract month, day, and year from the date string\n    int month, day, year;\n    char dash1, dash2;\n    stringstream ss(date);\n    ss >> month >> dash1 >> day >> dash2 >> year;\n\n    // Check if the extracted values are valid\n    if (dash1 != '-' || dash2 != '-' || ss.fail()) {\n        return false;\n    }\n\n    // Validate the month\n    if (month < 1 || month > 12) {\n        return false;\n    }\n\n    // Validate the day based on the month\n    if (month == 2) {\n        // February can have at most 29 days\n        if (day < 1 || day > 29) {\n            return false;\n        }\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        // April, June, September, November have at most 30 days\n        if (day < 1 || day > 30) {\n            return false;\n        }\n    } else {\n        // All other months have at most 31 days\n        if (day < 1 || day > 31) {\n            return false;\n        }\n    }\n\n    // If all checks pass, the date is valid\n    return true;\n}\n\n"}
{"task_id": "CPP/125", "generation": "#include <vector>\n#include <string>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> split_words(string txt) {\n    // Check for whitespace\n    if (txt.find(' ') != string::npos) {\n        vector<string> result;\n        stringstream ss(txt);\n        string word;\n        while (ss >> word) {\n            result.push_back(word);\n        }\n        return result;\n    }\n    \n    // Check for commas\n    if (txt.find(',') != string::npos) {\n        vector<string> result;\n        stringstream ss(txt);\n        string word;\n        while (getline(ss, word, ',')) {\n            result.push_back(word);\n        }\n        return result;\n    }\n    \n    // Count odd-indexed lowercase letters\n    int count = 0;\n    for (char c : txt) {\n        if (islower(c)) {\n            int index = c - 'a';\n            if (index % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    \n    return {to_string(count)};\n}\n"}
{"task_id": "CPP/126", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nbool is_sorted(vector<int> lst) {\n    // Check if the vector is sorted in ascending order\n    if (!is_sorted(lst.begin(), lst.end())) {\n        return false;\n    }\n\n    // Check for duplicates beyond two occurrences\n    for (size_t i = 0; i < lst.size(); ++i) {\n        int count = 0;\n        for (size_t j = 0; j < lst.size(); ++j) {\n            if (lst[i] == lst[j]) {\n                count++;\n            }\n            if (count > 2) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n"}
{"task_id": "CPP/127", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<cmath>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true; // 2 is the only even prime number\n    if (n % 2 == 0) return false; // other even numbers are not prime\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nstring intersection(vector<int> interval1, vector<int> interval2) {\n    int start1 = interval1[0];\n    int end1 = interval1[1];\n    int start2 = interval2[0];\n    int end2 = interval2[1];\n    \n    int intersectionStart = max(start1, start2);\n    int intersectionEnd = min(end1, end2);\n    \n    if (intersectionStart <= intersectionEnd) {\n        int intersectionLength = intersectionEnd - intersectionStart + 1;\n        if (isPrime(intersectionLength)) {\n            return \"YES\";\n        }\n    }\n    \n    return \"NO\";\n}\n\n// Example usage\n"}
{"task_id": "CPP/128", "generation": "#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n\nint prod_signs(vector<int> arr) {\n    // Handle the special case for an empty vector\n    if (arr.empty()) {\n        return -32768;\n    }\n\n    int product_of_signs = 1;\n    int sum_of_magnitudes = 0;\n\n    for (int num : arr) {\n        // Determine the sign of the number\n        int sign = (num > 0) ? 1 : (num < 0) ? -1 : 0;\n        // Update the product of signs\n        product_of_signs *= sign;\n        // Add the magnitude of the number to the sum\n        sum_of_magnitudes += abs(num);\n    }\n\n    // Return the sum of magnitudes multiplied by the product of signs\n    return sum_of_magnitudes * product_of_signs;\n}\n\n// Example usage\n"}
{"task_id": "CPP/129", "generation": "#include <vector>\n#include <queue>\n#include <climits>\nusing namespace std;\n\nstruct State {\n    int x, y;\n    int length;\n    vector<int> path;\n};\n\nvector<int> minPath(vector<vector<int>> grid, int k) {\n    int N = grid.size();\n    vector<int> result(k, INT_MAX);\n    \n    int dx[] = {0, 0, 1, -1};\n    int dy[] = {1, -1, 0, 0};\n    \n    queue<State> q;\n    \n    // Initialize the queue with all starting positions\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            q.push({i, j, 1, {grid[i][j]}});\n        }\n    }\n    \n    while (!q.empty()) {\n        State curr = q.front();\n        q.pop();\n        \n        if (curr.length == k) {\n            if (curr.path < result) {\n                result = curr.path;\n            }\n            continue;\n        }\n        \n        for (int d = 0; d < 4; ++d) {\n            int nx = curr.x + dx[d];\n            int ny = curr.y + dy[d];\n            \n            if (nx >= 0 && nx < N && ny >= 0 && ny < N) {\n                vector<int> newPath = curr.path;\n                newPath.push_back(grid[nx][ny]);\n                q.push({nx, ny, curr.length + 1, newPath});\n            }\n        }\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/130", "generation": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<int> tri(int n) {\n    vector<int> result(n + 1);\n    \n    // Base case\n    result[0] = 1; // This is a placeholder for 0-based indexing\n    result[1] = 3;\n    \n    for (int i = 2; i <= n; ++i) {\n        if (i % 2 == 0) {\n            // Even case\n            result[i] = 1 + i / 2;\n        } else {\n            // Odd case\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/131", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint digits(int n) {\n    // Convert the integer to a string\n    string numStr = to_string(n);\n    \n    // Initialize the product to 1 (multiplicative identity)\n    int product = 1;\n    \n    // Flag to check if any odd digit is found\n    bool oddFound = false;\n    \n    // Iterate through each character in the string\n    for (char ch : numStr) {\n        // Convert the character to an integer\n        int digit = ch - '0';\n        \n        // Check if the digit is odd\n        if (digit % 2 != 0) {\n            product *= digit;\n            oddFound = true;\n        }\n    }\n    \n    // If no odd digit was found, return 0\n    if (!oddFound) {\n        return 0;\n    }\n    \n    return product;\n}\n\n"}
{"task_id": "CPP/132", "generation": "#include <stdio.h>\n#include <string>\nusing namespace std;\n\nbool is_nested(string str) {\n    int open_brackets = 0;\n    int close_brackets = 0;\n\n    for (char ch : str) {\n        if (ch == '[') {\n            open_brackets++;\n        } else if (ch == ']') {\n            if (open_brackets > 0) {\n                open_brackets--;\n            } else {\n                close_brackets++;\n            }\n        }\n    }\n\n    // If there are unmatched opening or closing brackets, it implies nesting\n    return open_brackets > 0 || close_brackets > 0;\n}\n\n// Test cases\n"}
{"task_id": "CPP/133", "generation": "#include <iostream>\n#include <vector>\n#include <cmath> // For ceil function\n\nusing namespace std;\n\nint sum_squares(vector<float> lst) {\n    int sum = 0;\n    for (float num : lst) {\n        int ceiling_num = ceil(num); // Apply ceiling function\n        sum += ceiling_num * ceiling_num; // Square and add to sum\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/134", "generation": "#include <iostream>\n#include <string>\n#include <cctype>\n\nusing namespace std;\n\nbool check_if_last_char_is_a_letter(string txt) {\n    // Check if the string is empty\n    if (txt.empty()) {\n        return false;\n    }\n\n    // Get the last character\n    char last_char = txt.back();\n\n    // Check if the last character is an alphabetical character\n    if (!isalpha(last_char)) {\n        return false;\n    }\n\n    // Check if the last character is not part of a word\n    // This means the last character should be followed by a space or be the last character in the string\n    if (txt.size() > 1) {\n        char second_last_char = txt[txt.size() - 2];\n        if (isalpha(second_last_char)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// Test cases\n"}
{"task_id": "CPP/135", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nint can_arrange(vector<int> arr) {\n    // Iterate through the vector starting from the second element\n    for (int i = 1; i < arr.size(); ++i) {\n        // Check if the current element is not greater than or equal to the previous element\n        if (arr[i] < arr[i - 1]) {\n            // Return the index of the current element\n            return i;\n        }\n    }\n    // If no such element is found, return -1\n    return -1;\n}\n\n// Example usage\n"}
{"task_id": "CPP/136", "generation": "#include <vector>\n#include <limits.h> // For INT_MAX and INT_MIN\n\nusing namespace std;\n\nvector<int> largest_smallest_integers(vector<int> lst) {\n    int largest_negative = INT_MIN; // Initialize to the smallest possible integer\n    int smallest_positive = INT_MAX; // Initialize to the largest possible integer\n    bool found_negative = false;\n    bool found_positive = false;\n\n    for (int num : lst) {\n        if (num < 0) {\n            if (num > largest_negative) {\n                largest_negative = num;\n                found_negative = true;\n            }\n        } else if (num > 0) {\n            if (num < smallest_positive) {\n                smallest_positive = num;\n                found_positive = true;\n            }\n        }\n    }\n\n    // If no negative or positive integers were found, set them to 0\n    if (!found_negative) {\n        largest_negative = 0;\n    }\n    if (!found_positive) {\n        smallest_positive = 0;\n    }\n\n    return {largest_negative, smallest_positive};\n}\n\n// Example usage\n"}
{"task_id": "CPP/137", "generation": "#include <iostream>\n#include <string>\n#include <boost/any.hpp>\n#include <boost/algorithm/string.hpp>\n\nusing namespace std;\n\nboost::any compare_one(boost::any a, boost::any b) {\n    // Helper function to convert string to float\n    auto string_to_float = [](const string& s) -> float {\n        string temp = s;\n        boost::replace_all(temp, \",\", \".\");\n        return stof(temp);\n    };\n\n    // Helper function to convert any type to float\n    auto to_float = [&](const boost::any& value) -> float {\n        if (value.type() == typeid(int)) {\n            return static_cast<float>(boost::any_cast<int>(value));\n        } else if (value.type() == typeid(float)) {\n            return boost::any_cast<float>(value);\n        } else if (value.type() == typeid(string)) {\n            return string_to_float(boost::any_cast<string>(value));\n        }\n        throw runtime_error(\"Unsupported type\");\n    };\n\n    // Convert both values to float for comparison\n    float float_a = to_float(a);\n    float float_b = to_float(b);\n\n    // Compare the values\n    if (float_a > float_b) {\n        return a;\n    } else if (float_b > float_a) {\n        return b;\n    } else {\n        return string(\"None\");\n    }\n}\n\n"}
{"task_id": "CPP/138", "generation": "#include<stdio.h>\n\nbool is_equal_to_sum_even(int n) {\n    // Check if n is at least 8 and is even\n    return (n >= 8) && (n % 2 == 0);\n}\n\n"}
{"task_id": "CPP/139", "generation": "#include <stdio.h>\n\n// Function to calculate the factorial of a number\nlong long factorial(int num) {\n    long long result = 1;\n    for (int i = 1; i <= num; i++) {\n        result *= i;\n    }\n    return result;\n}\n\n// Function to calculate the Brazilian factorial\nlong long special_factorial(int n) {\n    long long result = 1;\n    for (int i = n; i >= 1; i--) {\n        result *= factorial(i);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/140", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring fix_spaces(string text) {\n    string result;\n    int n = text.length();\n    int i = 0;\n\n    while (i < n) {\n        if (text[i] == ' ') {\n            int count = 0;\n            // Count consecutive spaces\n            while (i < n && text[i] == ' ') {\n                count++;\n                i++;\n            }\n            // If more than 2 consecutive spaces, append a hyphen\n            if (count > 2) {\n                result += '-';\n            } else {\n                // Otherwise, append underscores for each space\n                for (int j = 0; j < count; j++) {\n                    result += '_';\n                }\n            }\n        } else {\n            // Append non-space characters as they are\n            result += text[i];\n            i++;\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/141", "generation": "#include<stdio.h>\n#include<string>\n#include<cctype>\n#include<unordered_set>\nusing namespace std;\n\nstring file_name_check(string file_name) {\n    // Check if the file name contains exactly one dot\n    size_t dot_pos = file_name.find('.');\n    if (dot_pos == string::npos || dot_pos == 0 || dot_pos == file_name.size() - 1) {\n        return \"No\";\n    }\n\n    // Check if the substring before the dot is not empty and starts with a letter\n    string name_part = file_name.substr(0, dot_pos);\n    if (name_part.empty() || !isalpha(name_part[0])) {\n        return \"No\";\n    }\n\n    // Check if the substring after the dot is one of the allowed extensions\n    unordered_set<string> allowed_extensions = {\"txt\", \"exe\", \"dll\"};\n    string extension_part = file_name.substr(dot_pos + 1);\n    if (allowed_extensions.find(extension_part) == allowed_extensions.end()) {\n        return \"No\";\n    }\n\n    // Count the number of digits in the file name\n    int digit_count = 0;\n    for (char c : file_name) {\n        if (isdigit(c)) {\n            digit_count++;\n            if (digit_count > 3) {\n                return \"No\";\n            }\n        }\n    }\n\n    return \"Yes\";\n}\n\n// Example usage\n"}
{"task_id": "CPP/142", "generation": "#include <vector>\n#include <iostream>\n\nusing namespace std;\n\nint sum_squares(vector<int> lst) {\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 3 == 0) {\n            lst[i] = lst[i] * lst[i]; // Square the element\n        } else if (i % 4 == 0 && i % 3 != 0) {\n            lst[i] = lst[i] * lst[i] * lst[i]; // Cube the element\n        }\n        sum += lst[i]; // Add the transformed element to the sum\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/143", "generation": "#include <iostream>\n#include <string>\n#include <vector>\n#include <sstream>\n#include <cmath>\n\nusing namespace std;\n\n// Function to check if a number is prime\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true; // 2 is the only even prime number\n    if (n % 2 == 0) return false; // Other even numbers are not prime\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nstring words_in_sentence(string sentence) {\n    stringstream ss(sentence);\n    string word;\n    vector<string> result;\n    \n    // Split the sentence into words\n    while (ss >> word) {\n        if (isPrime(word.length())) {\n            result.push_back(word);\n        }\n    }\n    \n    // Join the words back into a single string\n    string resultString;\n    for (size_t i = 0; i < result.size(); ++i) {\n        if (i != 0) resultString += \" \";\n        resultString += result[i];\n    }\n    \n    return resultString;\n}\n\n"}
{"task_id": "CPP/144", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\n// Function to parse the fraction string and return the numerator and denominator\npair<int, int> parseFraction(const string& fraction) {\n    size_t pos = fraction.find('/');\n    int numerator = stoi(fraction.substr(0, pos));\n    int denominator = stoi(fraction.substr(pos + 1));\n    return {numerator, denominator};\n}\n\n// Function to check if the product of two fractions results in a whole number\nbool simplify(string x, string n) {\n    // Parse the fractions\n    pair<int, int> fracX = parseFraction(x);\n    pair<int, int> fracN = parseFraction(n);\n    \n    // Compute the product of the fractions\n    int numerator = fracX.first * fracN.first;\n    int denominator = fracX.second * fracN.second;\n    \n    // Check if the resulting fraction is a whole number\n    return numerator % denominator == 0;\n}\n\n"}
{"task_id": "CPP/145", "generation": "#include <vector>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\n// Helper function to calculate the sum of digits of a number\nint sum_of_digits(int num) {\n    int sum = 0;\n    bool is_negative = num < 0;\n    num = abs(num);\n    \n    while (num > 0) {\n        int digit = num % 10;\n        if (is_negative) {\n            digit = -digit;\n        }\n        sum += digit;\n        num /= 10;\n    }\n    \n    return sum;\n}\n\nvector<int> order_by_points(vector<int> nums) {\n    // Use a stable sort to maintain the original order for equal sums\n    stable_sort(nums.begin(), nums.end(), [](int a, int b) {\n        return sum_of_digits(a) < sum_of_digits(b);\n    });\n    \n    return nums;\n}\n\n// Example usage\n"}
{"task_id": "CPP/146", "generation": "#include <vector>\n#include <string>\n#include <cmath>\nusing namespace std;\n\nint specialFilter(vector<int> nums) {\n    int count = 0;\n    \n    for (int num : nums) {\n        // Check if the number is greater than 10\n        if (num > 10) {\n            // Convert the number to a string to easily access the first and last digits\n            string numStr = to_string(abs(num));\n            \n            // Extract the first and last digits\n            int firstDigit = numStr[0] - '0';\n            int lastDigit = numStr[numStr.size() - 1] - '0';\n            \n            // Check if both digits are odd\n            if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    \n    return count;\n}\n\n// Example usage\n"}
{"task_id": "CPP/147", "generation": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint get_max_triples(int n) {\n    // Step 1: Generate the vector a\n    vector<int> a(n);\n    for (int i = 1; i <= n; ++i) {\n        a[i-1] = i * i - i + 1;\n    }\n\n    // Step 2: Count the valid triples\n    int count = 0;\n    for (int i = 0; i < n; ++i) {\n        for (int j = i + 1; j < n; ++j) {\n            for (int k = j + 1; k < n; ++k) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}\n\n"}
{"task_id": "CPP/148", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> bf(string planet1, string planet2) {\n    // Define the order of planets from the Sun\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    \n    // Check if both planet names are valid\n    if (find(planets.begin(), planets.end(), planet1) == planets.end() ||\n        find(planets.begin(), planets.end(), planet2) == planets.end()) {\n        return {};\n    }\n    \n    // Find the positions of the given planets\n    int pos1 = find(planets.begin(), planets.end(), planet1) - planets.begin();\n    int pos2 = find(planets.begin(), planets.end(), planet2) - planets.begin();\n    \n    // Ensure pos1 is less than pos2 for simplicity\n    if (pos1 > pos2) {\n        swap(pos1, pos2);\n    }\n    \n    // Extract the planets between pos1 and pos2 (excluding pos1 and pos2)\n    vector<string> result(planets.begin() + pos1 + 1, planets.begin() + pos2);\n    \n    return result;\n}\n\n// Example usage\n"}
{"task_id": "CPP/149", "generation": "#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nvector<string> sorted_list_sum(vector<string> lst) {\n    // Step 1: Filter out strings with odd lengths\n    lst.erase(remove_if(lst.begin(), lst.end(), [](const string& s) {\n        return s.length() % 2 != 0;\n    }), lst.end());\n\n    // Step 2: Sort the remaining strings\n    sort(lst.begin(), lst.end(), [](const string& a, const string& b) {\n        if (a.length() == b.length()) {\n            return a < b; // Alphabetical order if lengths are the same\n        }\n        return a.length() < b.length(); // Ascending order by length\n    });\n\n    return lst;\n}\n\n// Example usage\n"}
{"task_id": "CPP/150", "generation": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true; // 2 is the only even prime number\n    if (n % 2 == 0) return false; // Other even numbers are not prime\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nint x_or_y(int n, int x, int y) {\n    if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n\n"}
{"task_id": "CPP/151", "generation": "#include <vector>\n#include <cmath>\nusing namespace std;\n\nlong long double_the_difference(vector<float> lst) {\n    long long sum = 0;\n    \n    for (float num : lst) {\n        // Check if the number is a positive integer\n        if (num > 0 && floor(num) == num) {\n            int int_num = static_cast<int>(num);\n            // Check if the number is odd\n            if (int_num % 2 != 0) {\n                sum += int_num * int_num;\n            }\n        }\n    }\n    \n    return sum;\n}\n"}
{"task_id": "CPP/152", "generation": "#include <vector>\n#include <cmath> // for std::abs\n\nusing namespace std;\n\nvector<int> compare(vector<int> game, vector<int> guess) {\n    vector<int> result;\n    for (size_t i = 0; i < game.size(); ++i) {\n        if (game[i] == guess[i]) {\n            result.push_back(0);\n        } else {\n            result.push_back(std::abs(game[i] - guess[i]));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/153", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cctype>\n\nusing namespace std;\n\nstring Strongest_Extension(string class_name, vector<string> extensions) {\n    string strongest_extension = \"\";\n    int max_strength = INT_MIN;\n\n    for (const string& ext : extensions) {\n        int CAP = 0;\n        int SM = 0;\n\n        // Calculate CAP and SM for the current extension\n        for (char c : ext) {\n            if (isupper(c)) {\n                CAP++;\n            } else if (islower(c)) {\n                SM++;\n            }\n        }\n\n        // Calculate the strength of the current extension\n        int strength = CAP - SM;\n\n        // Update the strongest extension if the current one is stronger\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest_extension = ext;\n        }\n    }\n\n    // Return the result in the required format\n    return class_name + \".\" + strongest_extension;\n}\n\n"}
{"task_id": "CPP/154", "generation": "#include<iostream>\n#include<string>\nusing namespace std;\n\nbool cycpattern_check(string a, string b) {\n    // Concatenate b with itself\n    string b_concat = b + b;\n    \n    // Check if a is a substring of b_concat\n    return b_concat.find(a) != string::npos;\n}\n\n"}
{"task_id": "CPP/155", "generation": "#include <vector>\n#include <cmath>\n\nusing namespace std;\n\nvector<int> even_odd_count(int num) {\n    // Initialize counts for even and odd digits\n    int even_count = 0;\n    int odd_count = 0;\n    \n    // Handle negative numbers by taking the absolute value\n    num = abs(num);\n    \n    // Loop through each digit of the number\n    while (num > 0) {\n        int digit = num % 10; // Extract the last digit\n        if (digit % 2 == 0) {\n            even_count++; // Increment even count if the digit is even\n        } else {\n            odd_count++; // Increment odd count if the digit is odd\n        }\n        num /= 10; // Remove the last digit from the number\n    }\n    \n    // Return the counts as a vector\n    return {even_count, odd_count};\n}\n\n// Example usage\n"}
{"task_id": "CPP/156", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring int_to_mini_roman(int number) {\n    // Define the Roman numeral symbols and their corresponding values\n    vector<pair<int, string>> roman_map = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"},\n        {100, \"c\"}, {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"},\n        {10, \"x\"}, {9, \"ix\"}, {5, \"v\"}, {4, \"iv\"}, {1, \"i\"}\n    };\n    \n    string result = \"\";\n    \n    // Iterate through the map and build the Roman numeral string\n    for (const auto& pair : roman_map) {\n        while (number >= pair.first) {\n            result += pair.second;\n            number -= pair.first;\n        }\n    }\n    \n    return result;\n}\n\n// Example usage\n"}
{"task_id": "CPP/157", "generation": "#include<stdio.h>\n#include<math.h>\n\nbool right_angle_triangle(float a, float b, float c) {\n    // Ensure the sides are sorted such that a <= b <= c\n    if (a > b) {\n        float temp = a;\n        a = b;\n        b = temp;\n    }\n    if (b > c) {\n        float temp = b;\n        b = c;\n        c = temp;\n    }\n    if (a > b) {\n        float temp = a;\n        a = b;\n        b = temp;\n    }\n\n    // Check the Pythagorean theorem\n    return (a * a + b * b) == (c * c);\n}\n\n"}
{"task_id": "CPP/158", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_set>\n#include <algorithm>\n\nusing namespace std;\n\nstring find_max(vector<string> words) {\n    string max_word = \"\";\n    int max_unique_count = 0;\n\n    for (const string& word : words) {\n        // Use an unordered_set to count unique characters\n        unordered_set<char> unique_chars(word.begin(), word.end());\n        int unique_count = unique_chars.size();\n\n        // If the current word has more unique characters, update max_word\n        if (unique_count > max_unique_count) {\n            max_word = word;\n            max_unique_count = unique_count;\n        }\n        // If the current word has the same number of unique characters but is lexicographically smaller, update max_word\n        else if (unique_count == max_unique_count && word < max_word) {\n            max_word = word;\n        }\n    }\n\n    return max_word;\n}\n\n"}
{"task_id": "CPP/159", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<int> eat(int number, int need, int remaining) {\n    // Calculate the total number of carrots the rabbit needs to eat\n    int total_needed = number + need;\n    \n    // Determine how many carrots the rabbit can actually eat\n    int actually_eaten = min(total_needed, remaining);\n    \n    // Calculate the number of carrots left after the rabbit has eaten\n    int carrots_left = remaining - actually_eaten;\n    \n    // Return the results as a vector\n    return {number + actually_eaten, carrots_left};\n}\n\n// Example usage\n"}
{"task_id": "CPP/160", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cmath>\n\nusing namespace std;\n\nint do_algebra(vector<string> operato, vector<int> operand) {\n    // Initialize the result with the first operand\n    int result = operand[0];\n    \n    // Iterate through the operators and operands\n    for (size_t i = 0; i < operato.size(); ++i) {\n        // Get the current operator and operand\n        string op = operato[i];\n        int next_operand = operand[i + 1];\n        \n        // Apply the operator to the result and the next operand\n        if (op == \"+\") {\n            result += next_operand;\n        } else if (op == \"-\") {\n            result -= next_operand;\n        } else if (op == \"*\") {\n            result *= next_operand;\n        } else if (op == \"//\") {\n            result /= next_operand; // Integer division\n        } else if (op == \"**\") {\n            result = pow(result, next_operand);\n        }\n    }\n    \n    // Return the final result\n    return result;\n}\n\n"}
{"task_id": "CPP/161", "generation": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring solve(string s) {\n    bool hasLetter = false;\n    \n    // First pass: check if there are any letters and reverse case if necessary\n    for (int i = 0; i < s.length(); ++i) {\n        if (isalpha(s[i])) {\n            hasLetter = true;\n            if (islower(s[i])) {\n                s[i] = toupper(s[i]);\n            } else {\n                s[i] = tolower(s[i]);\n            }\n        }\n    }\n    \n    // If there are no letters, reverse the string\n    if (!hasLetter) {\n        reverse(s.begin(), s.end());\n    }\n    \n    return s;\n}\n\n"}
{"task_id": "CPP/162", "generation": "#include <iostream>\n#include <string>\n#include <openssl/md5.h>\n#include <iomanip>\n#include <sstream>\n\nusing namespace std;\n\nstring string_to_md5(const string& text) {\n    // Return None if the input string is empty\n    if (text.empty()) {\n        return \"\";\n    }\n\n    // Create an MD5 context\n    MD5_CTX md5Context;\n    MD5_Init(&md5Context);\n\n    // Update the context with the input string\n    MD5_Update(&md5Context, text.c_str(), text.length());\n\n    // Create a buffer to hold the MD5 hash\n    unsigned char md5Hash[MD5_DIGEST_LENGTH];\n    MD5_Final(md5Hash, &md5Context);\n\n    // Convert the MD5 hash to a hexadecimal string\n    stringstream ss;\n    for (int i = 0; i < MD5_DIGEST_LENGTH; ++i) {\n        ss << hex << setw(2) << setfill('0') << (int)md5Hash[i];\n    }\n\n    return ss.str();\n}\n\n"}
{"task_id": "CPP/163", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> generate_integers(int a, int b) {\n    vector<int> result;\n    \n    // Determine the start and end of the range\n    int start = min(a, b);\n    int end = max(a, b);\n    \n    // Iterate through the range and collect even digits\n    for (int i = start; i <= end; ++i) {\n        if (i % 2 == 0 && i < 10) {\n            result.push_back(i);\n        }\n    }\n    \n    // Sort the result in ascending order (though it should already be sorted)\n    sort(result.begin(), result.end());\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/0", "generation": "#include<stdio.h>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nbool has_close_elements(vector<float> numbers, float threshold) {\n    // Get the size of the vector\n    int n = numbers.size();\n    \n    // Iterate through each pair of numbers\n    for (int i = 0; i < n; ++i) {\n        for (int j = i + 1; j < n; ++j) {\n            // Calculate the absolute difference between numbers[i] and numbers[j]\n            float diff = fabs(numbers[i] - numbers[j]);\n            \n            // Check if the difference is less than the threshold\n            if (diff < threshold) {\n                return true;\n            }\n        }\n    }\n    \n    // If no such pair is found, return false\n    return false;\n}\n\n"}
{"task_id": "CPP/1", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <stack>\n\nusing namespace std;\n\nvector<string> separate_paren_groups(string paren_string) {\n    vector<string> result;\n    string current_group;\n    stack<char> paren_stack;\n    bool inside_group = false;\n\n    for (char ch : paren_string) {\n        if (ch == ' ') {\n            continue; // Ignore spaces\n        }\n\n        if (ch == '(') {\n            if (!inside_group) {\n                inside_group = true;\n            }\n            paren_stack.push(ch);\n        } else if (ch == ')') {\n            if (!paren_stack.empty() && paren_stack.top() == '(') {\n                paren_stack.pop();\n            }\n        }\n\n        if (inside_group) {\n            current_group += ch;\n        }\n\n        if (inside_group && paren_stack.empty()) {\n            result.push_back(current_group);\n            current_group.clear();\n            inside_group = false;\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/2", "generation": "#include <iostream>\n#include <cmath>\n\nfloat truncate_number(float number) {\n    // Get the integer part of the number\n    float integer_part = floor(number);\n    \n    // Subtract the integer part from the original number to get the decimal part\n    float decimal_part = number - integer_part;\n    \n    return decimal_part;\n}\n\n"}
{"task_id": "CPP/3", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nbool below_zero(vector<int> operations) {\n    int balance = 0;\n    for (int operation : operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\n// Example usage\n"}
{"task_id": "CPP/4", "generation": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <numeric> // for std::accumulate\n\nusing namespace std;\n\nfloat mean_absolute_deviation(vector<float> numbers) {\n    // Step 1: Calculate the mean of the dataset\n    float sum = accumulate(numbers.begin(), numbers.end(), 0.0);\n    float mean = sum / numbers.size();\n\n    // Step 2: Compute the absolute difference between each element and the mean\n    float absolute_deviations_sum = 0.0;\n    for (float number : numbers) {\n        absolute_deviations_sum += abs(number - mean);\n    }\n\n    // Step 3: Divide the sum of absolute deviations by the number of elements\n    float mad = absolute_deviations_sum / numbers.size();\n\n    return mad;\n}\n\n"}
{"task_id": "CPP/5", "generation": "#include <vector>\n#include <iostream>\n\nusing namespace std;\n\nvector<int> intersperse(vector<int> numbers, int delimeter) {\n    // Check if the input vector is empty\n    if (numbers.empty()) {\n        return {};\n    }\n\n    // Create a new vector to store the result\n    vector<int> result;\n\n    // Iterate through the input vector\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        // Add the current element to the result\n        result.push_back(numbers[i]);\n\n        // If it's not the last element, add the delimiter\n        if (i < numbers.size() - 1) {\n            result.push_back(delimeter);\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/6", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<int> parse_nested_parens(string paren_string) {\n    vector<int> result;\n    stringstream ss(paren_string);\n    string group;\n    \n    while (getline(ss, group, ' ')) {\n        int depth = 0;\n        int max_depth = 0;\n        \n        for (char c : group) {\n            if (c == '(') {\n                depth++;\n                if (depth > max_depth) {\n                    max_depth = depth;\n                }\n            } else if (c == ')') {\n                depth--;\n            }\n        }\n        \n        result.push_back(max_depth);\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/7", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> filter_by_substring(vector<string> strings, string substring) {\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.find(substring) != string::npos) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/8", "generation": "#include <vector>\n#include <numeric> // For std::accumulate\n\nusing namespace std;\n\nvector<int> sum_product(const vector<int>& numbers) {\n    // Initialize sum to 0 and product to 1\n    int sum = 0;\n    int product = 1;\n\n    // Iterate through the vector\n    for (int num : numbers) {\n        sum += num;\n        product *= num;\n    }\n\n    // Return the result as a vector\n    return {sum, product};\n}\n\n// Example usage\n"}
{"task_id": "CPP/9", "generation": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<int> rolling_max(vector<int> numbers) {\n    vector<int> result;\n    if (numbers.empty()) {\n        return result; // Return an empty vector if the input is empty\n    }\n\n    int current_max = numbers[0]; // Initialize the current max with the first element\n    result.push_back(current_max); // Add the first element to the result\n\n    for (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > current_max) {\n            current_max = numbers[i]; // Update the current max if the current element is greater\n        }\n        result.push_back(current_max); // Add the current max to the result\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/10", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nbool is_palindrome(const string& str) {\n    // Test if given string is a palindrome\n    string s(str.rbegin(), str.rend());\n    return s == str;\n}\n\nstring make_palindrome(const string& str) {\n    // Find the shortest palindrome that begins with a supplied string\n    for (size_t i = 0; i <= str.size(); ++i) {\n        // Check if the suffix from i to the end is a palindrome\n        if (is_palindrome(str.substr(i))) {\n            // If it is, append the reverse of the prefix to the end of the string\n            string prefix = str.substr(0, i);\n            reverse(prefix.begin(), prefix.end());\n            return str + prefix;\n        }\n    }\n    // If no palindromic suffix is found, return the original string reversed\n    return str + string(str.rbegin(), str.rend());\n}\n\n"}
{"task_id": "CPP/11", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring string_xor(string a, string b) {\n    // Ensure both strings are of the same length\n    if (a.length() != b.length()) {\n        throw invalid_argument(\"Input strings must be of the same length\");\n    }\n\n    string result = \"\";\n    for (size_t i = 0; i < a.length(); ++i) {\n        // Perform XOR operation: '0' ^ '0' = '0', '1' ^ '1' = '0', '0' ^ '1' = '1', '1' ^ '0' = '1'\n        char xor_char = (a[i] == b[i]) ? '0' : '1';\n        result += xor_char;\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/12", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring longest(vector<string> strings) {\n    // Check if the vector is empty\n    if (strings.empty()) {\n        return \"\"; // Return an empty string to represent None\n    }\n\n    // Initialize variables to keep track of the longest string\n    string longest_string = strings[0];\n\n    // Iterate through the vector to find the longest string\n    for (const string& str : strings) {\n        if (str.length() > longest_string.length()) {\n            longest_string = str;\n        }\n    }\n\n    return longest_string;\n}\n\n"}
{"task_id": "CPP/13", "generation": "#include <iostream>\n\nint greatest_common_divisor(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\n"}
{"task_id": "CPP/14", "generation": "#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> all_prefixes(string str) {\n    vector<string> prefixes;\n    for (size_t i = 1; i <= str.size(); ++i) {\n        prefixes.push_back(str.substr(0, i));\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/15", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nstring string_sequence(int n) {\n    // Create a stringstream to build the result\n    stringstream result;\n    \n    // Loop from 0 to n inclusive\n    for (int i = 0; i <= n; ++i) {\n        // Append the number followed by a space\n        result << i << \" \";\n    }\n    \n    // Convert the stringstream to a string\n    string result_str = result.str();\n    \n    // Remove the trailing space if it exists\n    if (!result_str.empty() && result_str.back() == ' ') {\n        result_str.pop_back();\n    }\n    \n    // Return the resulting string\n    return result_str;\n}\n\n"}
{"task_id": "CPP/16", "generation": "#include <iostream>\n#include <string>\n#include <unordered_set>\n#include <algorithm>\n\nusing namespace std;\n\nint count_distinct_characters(string str) {\n    // Convert the string to lowercase\n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    \n    // Use an unordered_set to store distinct characters\n    unordered_set<char> distinct_chars;\n    \n    // Iterate through the string and add each character to the set\n    for (char c : str) {\n        distinct_chars.insert(c);\n    }\n    \n    // The size of the set is the number of distinct characters\n    return distinct_chars.size();\n}\n\n"}
{"task_id": "CPP/17", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<int> parse_music(string music_string) {\n    vector<int> beats;\n    stringstream ss(music_string);\n    string note;\n    \n    while (ss >> note) {\n        if (note == \"o\") {\n            beats.push_back(4);\n        } else if (note == \"o|\") {\n            beats.push_back(2);\n        } else if (note == \".|\") {\n            beats.push_back(1);\n        }\n    }\n    \n    return beats;\n}\n\n"}
{"task_id": "CPP/18", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint how_many_times(string str, string substring) {\n    int count = 0;\n    int sub_len = substring.length();\n    int str_len = str.length();\n\n    if (sub_len == 0 || str_len == 0) {\n        return 0;\n    }\n\n    for (int i = 0; i <= str_len - sub_len; ++i) {\n        if (str.substr(i, sub_len) == substring) {\n            ++count;\n        }\n    }\n\n    return count;\n}\n\n"}
{"task_id": "CPP/19", "generation": "#include <iostream>\n#include <string>\n#include <vector>\n#include <map>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nstring sort_numbers(string numbers) {\n    // Step 1: Create a mapping from number words to their corresponding integer values\n    map<string, int> number_map = {\n        {\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3}, {\"four\", 4},\n        {\"five\", 5}, {\"six\", 6}, {\"seven\", 7}, {\"eight\", 8}, {\"nine\", 9}\n    };\n\n    // Step 2: Split the input string into individual number words\n    vector<string> words;\n    stringstream ss(numbers);\n    string word;\n    while (ss >> word) {\n        words.push_back(word);\n    }\n\n    // Step 3: Sort the words based on their mapped integer values\n    sort(words.begin(), words.end(), [&number_map](const string &a, const string &b) {\n        return number_map[a] < number_map[b];\n    });\n\n    // Step 4: Reconstruct the string from the sorted words\n    string sorted_numbers;\n    for (size_t i = 0; i < words.size(); ++i) {\n        if (i != 0) {\n            sorted_numbers += \" \";\n        }\n        sorted_numbers += words[i];\n    }\n\n    return sorted_numbers;\n}\n\n"}
{"task_id": "CPP/20", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\npair<float, float> find_closest_elements(vector<float> numbers) {\n    // Sort the vector\n    sort(numbers.begin(), numbers.end());\n    \n    // Initialize variables to track the closest pair and their difference\n    float min_diff = abs(numbers[1] - numbers[0]);\n    pair<float, float> closest_pair = {numbers[0], numbers[1]};\n    \n    // Iterate through the sorted vector to find the closest pair\n    for (size_t i = 1; i < numbers.size() - 1; ++i) {\n        float diff = abs(numbers[i + 1] - numbers[i]);\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = {numbers[i], numbers[i + 1]};\n        }\n    }\n    \n    return closest_pair;\n}\n\n"}
{"task_id": "CPP/21", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm> // for std::min_element and std::max_element\n\nusing namespace std;\n\nvector<float> rescale_to_unit(vector<float> numbers) {\n    // Find the minimum and maximum values in the vector\n    float min_val = *min_element(numbers.begin(), numbers.end());\n    float max_val = *max_element(numbers.begin(), numbers.end());\n\n    // Calculate the range\n    float range = max_val - min_val;\n\n    // Apply the linear transformation to each element\n    vector<float> rescaled_numbers;\n    for (float num : numbers) {\n        float rescaled_num = (num - min_val) / range;\n        rescaled_numbers.push_back(rescaled_num);\n    }\n\n    return rescaled_numbers;\n}\n\n"}
{"task_id": "CPP/22", "generation": "#include <iostream>\n#include <vector>\n#include <list>\n#include <boost/any.hpp>\n\ntypedef std::list<boost::any> list_any;\n\nstd::vector<int> filter_integers(list_any values) {\n    std::vector<int> result;\n    for (const auto& value : values) {\n        if (value.type() == typeid(int)) {\n            result.push_back(boost::any_cast<int>(value));\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/23", "generation": "#include <iostream>\n#include <string>\n\nint stringLength(const std::string& str) {\n    return str.length();\n}\n\n"}
{"task_id": "CPP/24", "generation": "#include<stdio.h>\n\nint largest_divisor(int n) {\n    // Start from n-1 and go down to 1\n    for (int i = n - 1; i > 0; --i) {\n        // Check if i divides n evenly\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    // If no divisor is found, return 1 (though this case should never occur for positive n)\n    return 1;\n}\n\n"}
{"task_id": "CPP/25", "generation": "#include <vector>\nusing namespace std;\n\nvector<int> factorize(int n) {\n    vector<int> factors;\n    // Check for the smallest prime factor, which is 2\n    while (n % 2 == 0) {\n        factors.push_back(2);\n        n /= 2;\n    }\n    // Check for other prime factors starting from 3\n    for (int i = 3; i * i <= n; i += 2) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    // If n is still greater than 2, then it must be a prime number\n    if (n > 2) {\n        factors.push_back(n);\n    }\n    return factors;\n}\n\n// Example usage\n#include <iostream>\n\n"}
{"task_id": "CPP/26", "generation": "#include <iostream>\n#include <vector>\n#include <unordered_set>\n\nusing namespace std;\n\nvector<int> remove_duplicates(vector<int> numbers) {\n    vector<int> result;\n    unordered_set<int> seen;\n\n    for (int num : numbers) {\n        if (seen.find(num) == seen.end()) {\n            // If the number is not in the set, add it to the result and mark it as seen\n            result.push_back(num);\n            seen.insert(num);\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/27", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring flip_case(string str) {\n    for (int i = 0; i < str.length(); i++) {\n        if (isupper(str[i])) {\n            str[i] = tolower(str[i]);\n        } else if (islower(str[i])) {\n            str[i] = toupper(str[i]);\n        }\n    }\n    return str;\n}\n\n"}
{"task_id": "CPP/28", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring concatenate(const vector<string>& strings) {\n    string result;\n    for (const string& s : strings) {\n        result += s;\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/29", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> filter_by_prefix(vector<string> strings, string prefix) {\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.substr(0, prefix.size()) == prefix) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/30", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm> // for std::copy_if\n\nusing namespace std;\n\nvector<float> get_positive(const vector<float>& l) {\n    vector<float> positive_numbers;\n    for (float num : l) {\n        if (num > 0) {\n            positive_numbers.push_back(num);\n        }\n    }\n    return positive_numbers;\n}\n\n"}
{"task_id": "CPP/31", "generation": "#include<stdio.h>\n#include<stdbool.h>\n#include<math.h>\n\nbool is_prime(long long n) {\n    // Handle edge cases\n    if (n <= 1) {\n        return false;\n    }\n    if (n == 2 || n == 3) {\n        return true;\n    }\n    if (n % 2 == 0 || n % 3 == 0) {\n        return false;\n    }\n\n    // Check for factors from 5 to sqrt(n)\n    for (long long i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n"}
{"task_id": "CPP/32", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n\ndouble poly(vector<double> xs, double x){\n    double sum = 0;\n    for (int i = 0; i < xs.size(); i++) {\n        sum += xs[i] * pow(x, i);\n    }\n    return sum;\n}\n\ndouble poly_derivative(vector<double> xs, double x){\n    double sum = 0;\n    for (int i = 1; i < xs.size(); i++) {\n        sum += i * xs[i] * pow(x, i - 1);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    double x0 = 0.0; // Initial guess\n    double tolerance = 1e-7; // Tolerance for convergence\n    int max_iterations = 1000; // Maximum number of iterations\n\n    for (int i = 0; i < max_iterations; i++) {\n        double fx = poly(xs, x0);\n        double dfx = poly_derivative(xs, x0);\n\n        if (fabs(fx) < tolerance) {\n            return x0; // Converged to a root\n        }\n\n        if (dfx == 0) {\n            // Avoid division by zero, try a different initial guess\n            x0 += 1.0;\n        } else {\n            x0 = x0 - fx / dfx;\n        }\n    }\n\n    // If we reach here, the method did not converge\n    return x0;\n}\n\n"}
{"task_id": "CPP/33", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> sort_third(vector<int> l) {\n    // Step 1: Identify the indices divisible by 3\n    vector<int> indices;\n    for (size_t i = 0; i < l.size(); ++i) {\n        if ((i + 1) % 3 == 0) {  // Indices are 0-based, so we check (i + 1) % 3\n            indices.push_back(i);\n        }\n    }\n\n    // Step 2: Extract the values at these indices\n    vector<int> values;\n    for (int index : indices) {\n        values.push_back(l[index]);\n    }\n\n    // Step 3: Sort the extracted values\n    sort(values.begin(), values.end());\n\n    // Step 4: Replace the original values with the sorted values\n    for (size_t i = 0; i < indices.size(); ++i) {\n        l[indices[i]] = values[i];\n    }\n\n    return l;\n}\n"}
{"task_id": "CPP/34", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> unique(vector<int> l) {\n    // Step 1: Sort the vector\n    sort(l.begin(), l.end());\n    \n    // Step 2: Remove duplicates\n    l.erase(unique(l.begin(), l.end()), l.end());\n    \n    return l;\n}\n\n"}
{"task_id": "CPP/35", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm> // For std::max\n\nusing namespace std;\n\nfloat max_element(const vector<float>& l) {\n    // Check if the vector is empty\n    if (l.empty()) {\n        throw invalid_argument(\"Vector is empty\");\n    }\n\n    // Initialize max_elem with the first element of the vector\n    float max_elem = l[0];\n\n    // Iterate through the vector to find the maximum element\n    for (size_t i = 1; i < l.size(); ++i) {\n        max_elem = max(max_elem, l[i]);\n    }\n\n    return max_elem;\n}\n\n"}
{"task_id": "CPP/36", "generation": "#include <iostream>\n#include <string>\n\nint fizz_buzz(int n) {\n    int count = 0;\n    for (int i = 0; i < n; ++i) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string num_str = std::to_string(i);\n            for (char c : num_str) {\n                if (c == '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/37", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<float> sort_even(vector<float> l) {\n    // Step 1: Extract values at even indices\n    vector<float> even_values;\n    for (size_t i = 0; i < l.size(); i += 2) {\n        even_values.push_back(l[i]);\n    }\n\n    // Step 2: Sort the extracted values\n    sort(even_values.begin(), even_values.end());\n\n    // Step 3: Reconstruct the output vector\n    vector<float> result = l;\n    size_t even_index = 0;\n    for (size_t i = 0; i < l.size(); i += 2) {\n        result[i] = even_values[even_index++];\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/38", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring decode_cyclic(string s){ \n    // returns decoded string by reversing the cycling of groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l = s.length();\n    int num = (l + 2) / 3;\n    string x, output;\n    int i;\n    for (i = 0; i * 3 < l; i++)\n    {\n        // reverse the cycling in each group. Unless group has fewer elements than 3.\n        x = s.substr(i * 3, 3);\n        if (x.length() == 3) x = x[2] + x.substr(0, 2);\n        output = output + x;\n    }\n    return output;\n}\n"}
{"task_id": "CPP/39", "generation": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n// Function to check if a number is prime\nbool is_prime(int num) {\n    if (num <= 1) return false;\n    if (num == 2) return true;\n    if (num % 2 == 0) return false;\n    for (int i = 3; i <= sqrt(num); i += 2) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\n// Function to generate the n-th prime Fibonacci number\nint prime_fib(int n) {\n    if (n <= 0) return -1; // Invalid input\n    int a = 0, b = 1, count = 0;\n    while (true) {\n        int temp = a + b;\n        a = b;\n        b = temp;\n        if (is_prime(b)) {\n            count++;\n            if (count == n) {\n                return b;\n            }\n        }\n    }\n}\n\n"}
{"task_id": "CPP/40", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nbool triples_sum_to_zero(vector<int> l) {\n    // Sort the vector\n    sort(l.begin(), l.end());\n    \n    int n = l.size();\n    \n    // Iterate through the vector\n    for (int i = 0; i < n - 2; ++i) {\n        // Skip duplicates for the first element\n        if (i > 0 && l[i] == l[i - 1]) continue;\n        \n        int left = i + 1;\n        int right = n - 1;\n        \n        while (left < right) {\n            int sum = l[i] + l[left] + l[right];\n            \n            if (sum == 0) {\n                return true;\n            } else if (sum < 0) {\n                ++left;\n            } else {\n                --right;\n            }\n        }\n    }\n    \n    return false;\n}\n\n// Example usage\n"}
{"task_id": "CPP/41", "generation": "#include<stdio.h>\n\nint car_race_collision(int n) {\n    return n * n;\n}\n\n"}
{"task_id": "CPP/42", "generation": "#include <vector>\nusing namespace std;\n\nvector<int> incr_list(vector<int> l) {\n    vector<int> result;\n    for (int i = 0; i < l.size(); i++) {\n        result.push_back(l[i] + 1);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/43", "generation": "#include <vector>\n#include <unordered_set>\nusing namespace std;\n\nbool pairs_sum_to_zero(vector<int> l) {\n    unordered_set<int> seen;\n    \n    for (int num : l) {\n        if (seen.find(-num) != seen.end()) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    \n    return false;\n}\n\n"}
{"task_id": "CPP/44", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nstring change_base(int x, int base) {\n    if (x == 0) return \"0\"; // Special case for zero\n\n    string result = \"\";\n    while (x > 0) {\n        int remainder = x % base;\n        result += to_string(remainder); // Append the remainder to the result string\n        x /= base;\n    }\n\n    // Since we appended the remainders in reverse order, we need to reverse the string\n    reverse(result.begin(), result.end());\n\n    return result;\n}\n\n"}
{"task_id": "CPP/45", "generation": "#include <stdio.h>\n\nfloat triangle_area(float a, float h) {\n    return 0.5 * a * h;\n}\n\n"}
{"task_id": "CPP/46", "generation": "#include <stdio.h>\n\nint fib4(int n) {\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n\n    int fibs[4] = {0, 0, 2, 0}; // Initial values for fib4(0), fib4(1), fib4(2), fib4(3)\n\n    for (int i = 4; i <= n; ++i) {\n        int next_fib = fibs[0] + fibs[1] + fibs[2] + fibs[3];\n        fibs[0] = fibs[1];\n        fibs[1] = fibs[2];\n        fibs[2] = fibs[3];\n        fibs[3] = next_fib;\n    }\n\n    return fibs[3];\n}\n\n"}
{"task_id": "CPP/47", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nfloat median(vector<float> l) {\n    // Step 1: Sort the vector\n    sort(l.begin(), l.end());\n\n    // Step 2: Determine the size of the vector\n    int n = l.size();\n\n    // Step 3: Check if the number of elements is odd or even\n    if (n % 2 != 0) {\n        // If odd, return the middle element\n        return l[n / 2];\n    } else {\n        // If even, return the average of the two middle elements\n        return (l[(n / 2) - 1] + l[n / 2]) / 2.0;\n    }\n}\n\n"}
{"task_id": "CPP/48", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool is_palindrome(const string& text) {\n    int n = text.length();\n    for (int i = 0; i < n / 2; ++i) {\n        if (text[i] != text[n - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/49", "generation": "#include <stdio.h>\n\nint modp(int n, int p) {\n    if (n == 0) {\n        return 1; // 2^0 % p is always 1\n    }\n\n    long long result = 1;\n    long long base = 2;\n\n    while (n > 0) {\n        if (n % 2 == 1) {\n            result = (result * base) % p;\n        }\n        base = (base * base) % p;\n        n /= 2;\n    }\n\n    return (int)result;\n}\n\n"}
{"task_id": "CPP/50", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring encode_shift(string s){\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n\nstring decode_shift(string s){\n    // takes as input string encoded with encode_shift function. Returns decoded string.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5-(int)'a'+26)%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n\n"}
{"task_id": "CPP/51", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cctype>\n\nusing namespace std;\n\nstring remove_vowels(string text) {\n    // Define a lambda function to check if a character is a vowel\n    auto is_vowel = [](char c) {\n        c = tolower(c); // Convert character to lowercase for case-insensitive comparison\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    };\n\n    // Use std::remove_if to move vowels to the end of the string\n    auto new_end = remove_if(text.begin(), text.end(), is_vowel);\n\n    // Erase the vowels from the end of the string\n    text.erase(new_end, text.end());\n\n    return text;\n}\n\n"}
{"task_id": "CPP/52", "generation": "#include <vector>\nusing namespace std;\n\nbool below_threshold(vector<int> l, int t) {\n    for (int num : l) {\n        if (num >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Example usage\n"}
{"task_id": "CPP/53", "generation": "#include<stdio.h>\n#include<stdlib.h>\n\nint add(int x, int y) {\n    return x + y;\n}\n\n"}
{"task_id": "CPP/54", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nbool same_chars(string s0, string s1) {\n    // Sort both strings\n    sort(s0.begin(), s0.end());\n    sort(s1.begin(), s1.end());\n    \n    // Compare the sorted strings\n    return s0 == s1;\n}\n\n"}
{"task_id": "CPP/55", "generation": "#include<iostream>\nusing namespace std;\n\nlong long fib(int n) {\n    if (n <= 0) return 0; // Handle the case where n is less than or equal to 0\n    if (n == 1) return 1; // Base case for the first Fibonacci number\n\n    long long a = 0, b = 1, c;\n    for (int i = 2; i <= n; ++i) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}\n\n"}
{"task_id": "CPP/56", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool correct_bracketing(string brackets) {\n    int count = 0;\n    for (char bracket : brackets) {\n        if (bracket == '<') {\n            count++;\n        } else if (bracket == '>') {\n            count--;\n        }\n        // If count goes negative, it means there's an unmatched closing bracket\n        if (count < 0) {\n            return false;\n        }\n    }\n    // At the end, count should be zero for all brackets to be matched\n    return count == 0;\n}\n\n"}
{"task_id": "CPP/57", "generation": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nbool isMonotonic(const vector<float>& l) {\n    bool increasing = true;\n    bool decreasing = true;\n\n    for (size_t i = 1; i < l.size(); ++i) {\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n        }\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n        }\n    }\n\n    return increasing || decreasing;\n}\n\n"}
{"task_id": "CPP/58", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\n#include<set>\nusing namespace std;\n\nvector<int> common(vector<int> l1, vector<int> l2) {\n    // Sort both vectors\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n\n    // Use a set to store unique common elements\n    set<int> common_set;\n\n    // Use two pointers to traverse both vectors\n    int i = 0, j = 0;\n    while (i < l1.size() && j < l2.size()) {\n        if (l1[i] < l2[j]) {\n            i++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            // Both elements are equal, add to the set\n            common_set.insert(l1[i]);\n            i++;\n            j++;\n        }\n    }\n\n    // Convert the set to a vector\n    vector<int> result(common_set.begin(), common_set.end());\n    return result;\n}\n\n"}
{"task_id": "CPP/59", "generation": "#include <stdio.h>\n\nint largest_prime_factor(int n) {\n    int largest_factor = 1;\n    \n    // Check for the smallest prime factor, which is 2\n    while (n % 2 == 0) {\n        largest_factor = 2;\n        n /= 2;\n    }\n    \n    // Check for odd factors from 3 onwards\n    for (int i = 3; i * i <= n; i += 2) {\n        while (n % i == 0) {\n            largest_factor = i;\n            n /= i;\n        }\n    }\n    \n    // If n is still greater than 2, then n itself is a prime factor\n    if (n > 2) {\n        largest_factor = n;\n    }\n    \n    return largest_factor;\n}\n\n"}
{"task_id": "CPP/60", "generation": "#include<iostream>\nusing namespace std;\n\nint sum_to_n(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; ++i) {\n        sum += i;\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/61", "generation": "#include <iostream>\n#include <stack>\n#include <string>\nusing namespace std;\n\nbool correct_bracketing(string brackets) {\n    stack<char> s;\n    \n    for (char bracket : brackets) {\n        if (bracket == '(') {\n            s.push(bracket);\n        } else if (bracket == ')') {\n            if (s.empty() || s.top() != '(') {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    \n    return s.empty();\n}\n\n"}
{"task_id": "CPP/62", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<float> derivative(vector<float> xs) {\n    vector<float> result;\n    for (size_t i = 1; i < xs.size(); ++i) {\n        result.push_back(i * xs[i]);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/63", "generation": "#include <iostream>\n#include <vector>\n\nint fibfib(int n) {\n    if (n == 0 || n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 1;\n    }\n\n    std::vector<int> fibfib_sequence(n + 1);\n    fibfib_sequence[0] = 0;\n    fibfib_sequence[1] = 0;\n    fibfib_sequence[2] = 1;\n\n    for (int i = 3; i <= n; ++i) {\n        fibfib_sequence[i] = fibfib_sequence[i - 1] + fibfib_sequence[i - 2] + fibfib_sequence[i - 3];\n    }\n\n    return fibfib_sequence[n];\n}\n\n"}
{"task_id": "CPP/64", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nint vowels_count(string s) {\n    int count = 0;\n    transform(s.begin(), s.end(), s.begin(), ::tolower); // Convert the string to lowercase\n\n    for (char c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n\n    // Check if 'y' is at the end of the word\n    if (s.back() == 'y') {\n        count++;\n    }\n\n    return count;\n}\n\n"}
{"task_id": "CPP/65", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nstring circular_shift(int x, int shift) {\n    // Convert the integer to a string\n    string str = to_string(x);\n    int len = str.length();\n\n    // If shift is greater than the number of digits, reverse the string\n    if (shift > len) {\n        reverse(str.begin(), str.end());\n        return str;\n    }\n\n    // Perform the circular shift\n    string result = str.substr(len - shift) + str.substr(0, len - shift);\n    return result;\n}\n\n"}
{"task_id": "CPP/66", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint digitSum(string s) {\n    int sum = 0;\n    for (char c : s) {\n        if (c >= 'A' && c <= 'Z') {\n            sum += c;\n        }\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/67", "generation": "#include<iostream>\n#include<string>\n#include<sstream>\nusing namespace std;\n\nint fruit_distribution(string s, int n) {\n    // Initialize variables to store the number of apples and oranges\n    int apples = 0, oranges = 0;\n    \n    // Use a stringstream to parse the input string\n    stringstream ss(s);\n    string temp;\n    \n    // Read the number of apples\n    ss >> apples;\n    ss >> temp; // Skip the word \"apples\"\n    \n    // Read the word \"and\"\n    ss >> temp;\n    \n    // Read the number of oranges\n    ss >> oranges;\n    ss >> temp; // Skip the word \"oranges\"\n    \n    // Calculate the number of mangoes\n    int mangoes = n - apples - oranges;\n    \n    return mangoes;\n}\n\n"}
{"task_id": "CPP/68", "generation": "#include <vector>\n#include <limits.h> // For INT_MAX\nusing namespace std;\n\nvector<int> pluck(vector<int> arr) {\n    // Initialize variables to store the smallest even value and its index\n    int min_even_value = INT_MAX;\n    int min_even_index = -1;\n    \n    // Iterate through the vector\n    for (int i = 0; i < arr.size(); ++i) {\n        // Check if the current element is even\n        if (arr[i] % 2 == 0) {\n            // If it is the first even value found or it is smaller than the previously found smallest even value\n            if (arr[i] < min_even_value) {\n                min_even_value = arr[i];\n                min_even_index = i;\n            }\n        }\n    }\n    \n    // If an even value was found, return the result\n    if (min_even_index != -1) {\n        return {min_even_value, min_even_index};\n    }\n    \n    // If no even value was found, return an empty vector\n    return {};\n}\n"}
{"task_id": "CPP/69", "generation": "#include <vector>\n#include <unordered_map>\n#include <algorithm>\nusing namespace std;\n\nint search(vector<int> lst) {\n    // Step 1: Count the frequency of each integer\n    unordered_map<int, int> frequency;\n    for (int num : lst) {\n        frequency[num]++;\n    }\n\n    // Step 2: Find the greatest integer that meets the criteria\n    int max_valid_integer = -1;\n    for (const auto& pair : frequency) {\n        int num = pair.first;\n        int freq = pair.second;\n        if (freq >= num) {\n            max_valid_integer = max(max_valid_integer, num);\n        }\n    }\n\n    // Step 3: Return the result\n    return max_valid_integer;\n}\n\n// Example usage\n"}
{"task_id": "CPP/70", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> strange_sort_list(vector<int> lst) {\n    // Sort the input vector in ascending order\n    sort(lst.begin(), lst.end());\n    \n    // Initialize the result vector\n    vector<int> result;\n    \n    // Initialize indices for the smallest and largest elements\n    int left = 0;\n    int right = lst.size() - 1;\n    \n    // Alternate between the smallest and largest elements\n    while (left <= right) {\n        if (left <= right) {\n            result.push_back(lst[left]);\n            left++;\n        }\n        if (left <= right) {\n            result.push_back(lst[right]);\n            right--;\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/71", "generation": "#include <stdio.h>\n#include <math.h>\n\nfloat triangle_area(float a, float b, float c) {\n    // Check if the sides can form a valid triangle\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n\n    // Calculate the semi-perimeter\n    float s = (a + b + c) / 2;\n\n    // Calculate the area using Heron's formula\n    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n\n    // Return the area rounded to 2 decimal points\n    return round(area * 100) / 100;\n}\n\n"}
{"task_id": "CPP/72", "generation": "#include <vector>\n#include <numeric> // for std::accumulate\n\nbool will_it_fly(vector<int> q, int w) {\n    // Check if the vector is palindromic\n    int n = q.size();\n    for (int i = 0; i < n / 2; ++i) {\n        if (q[i] != q[n - 1 - i]) {\n            return false;\n        }\n    }\n    \n    // Calculate the sum of the elements in the vector\n    int sum = accumulate(q.begin(), q.end(), 0);\n    \n    // Check if the sum is less than or equal to the maximum possible weight\n    return sum <= w;\n}\n\n// Example usage\n"}
{"task_id": "CPP/73", "generation": "#include <vector>\n#include <iostream>\nusing namespace std;\n\nint smallest_change(vector<int> arr) {\n    int left = 0;\n    int right = arr.size() - 1;\n    int changes = 0;\n\n    while (left < right) {\n        if (arr[left] != arr[right]) {\n            changes++;\n        }\n        left++;\n        right--;\n    }\n\n    return changes;\n}\n\n"}
{"task_id": "CPP/74", "generation": "#include <vector>\n#include <string>\n#include <numeric> // for accumulate\n\nusing namespace std;\n\nint total_chars(const vector<string>& lst) {\n    return accumulate(lst.begin(), lst.end(), 0, [](int sum, const string& s) {\n        return sum + s.size();\n    });\n}\n\nvector<string> total_match(vector<string> lst1, vector<string> lst2) {\n    int total_chars_lst1 = total_chars(lst1);\n    int total_chars_lst2 = total_chars(lst2);\n\n    if (total_chars_lst1 <= total_chars_lst2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n"}
{"task_id": "CPP/75", "generation": "#include <iostream>\n#include <vector>\n#include <cmath>\n\nusing namespace std;\n\n// Function to generate all prime numbers less than 100 using Sieve of Eratosthenes\nvector<int> generate_primes() {\n    const int limit = 100;\n    vector<bool> is_prime(limit, true);\n    is_prime[0] = is_prime[1] = false; // 0 and 1 are not prime numbers\n\n    for (int i = 2; i * i < limit; ++i) {\n        if (is_prime[i]) {\n            for (int j = i * i; j < limit; j += i) {\n                is_prime[j] = false;\n            }\n        }\n    }\n\n    vector<int> primes;\n    for (int i = 2; i < limit; ++i) {\n        if (is_prime[i]) {\n            primes.push_back(i);\n        }\n    }\n\n    return primes;\n}\n\n// Function to check if the given number is the multiplication of 3 prime numbers\nbool is_multiply_prime(int a) {\n    vector<int> primes = generate_primes();\n    int n = primes.size();\n\n    // Check all combinations of three primes\n    for (int i = 0; i < n; ++i) {\n        for (int j = i + 1; j < n; ++j) {\n            for (int k = j + 1; k < n; ++k) {\n                if (primes[i] * primes[j] * primes[k] == a) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n}\n\n"}
{"task_id": "CPP/76", "generation": "#include <iostream>\n#include <cmath>\n\nbool is_simple_power(int x, int n) {\n    // Special case: if n is 1, the only power of 1 is 1 itself.\n    if (n == 1) {\n        return x == 1;\n    }\n\n    // Iterate through possible values of k\n    int power = 1;\n    while (power < x) {\n        power *= n;\n        if (power == x) {\n            return true;\n        }\n    }\n    return false;\n}\n\n"}
{"task_id": "CPP/77", "generation": "#include <iostream>\n#include <cmath>\n\nbool iscube(int a) {\n    if (a < 0) {\n        // If a is negative, we need to handle the cube root of a negative number\n        a = -a;\n        double cubeRoot = cbrt(a);\n        int intCubeRoot = static_cast<int>(cubeRoot);\n        return (intCubeRoot * intCubeRoot * intCubeRoot == a);\n    } else {\n        // If a is non-negative, we can directly take the cube root\n        double cubeRoot = cbrt(a);\n        int intCubeRoot = static_cast<int>(cubeRoot);\n        return (intCubeRoot * intCubeRoot * intCubeRoot == a);\n    }\n}\n\n"}
{"task_id": "CPP/78", "generation": "#include <iostream>\n#include <string>\n#include <unordered_set>\nusing namespace std;\n\nint hex_key(string num) {\n    // Define the set of prime hexadecimal digits\n    unordered_set<char> prime_digits = {'2', '3', '5', '7', 'B', 'D'};\n    \n    // Initialize the count of prime digits\n    int count = 0;\n    \n    // Iterate through the input string\n    for (char c : num) {\n        // Check if the current character is in the set of prime digits\n        if (prime_digits.find(c) != prime_digits.end()) {\n            count++;\n        }\n    }\n    \n    // Return the count of prime digits\n    return count;\n}\n\n// Test cases\n"}
{"task_id": "CPP/79", "generation": "#include <stdio.h>\n#include <string>\n#include <algorithm> // for std::reverse\n\nusing namespace std;\n\nstring decimal_to_binary(int decimal) {\n    if (decimal == 0) {\n        return \"db0db\";\n    }\n\n    string binary_representation = \"\";\n\n    while (decimal > 0) {\n        int remainder = decimal % 2;\n        binary_representation += (remainder == 0) ? '0' : '1';\n        decimal /= 2;\n    }\n\n    // Reverse the string to get the correct binary representation\n    reverse(binary_representation.begin(), binary_representation.end());\n\n    // Add the \"db\" characters at the beginning and end\n    binary_representation = \"db\" + binary_representation + \"db\";\n\n    return binary_representation;\n}\n\n// Example usage\n"}
{"task_id": "CPP/80", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool is_happy(string s) {\n    // Check if the length of the string is less than 3\n    if (s.length() < 3) {\n        return false;\n    }\n\n    // Iterate through the string and check every 3 consecutive characters\n    for (int i = 0; i <= s.length() - 3; ++i) {\n        // Check if the 3 consecutive characters are distinct\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n\n    // If all 3 consecutive characters are distinct, return true\n    return true;\n}\n\n// Test cases\n"}
{"task_id": "CPP/81", "generation": "#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> numerical_letter_grade(vector<float> grades) {\n    vector<string> letter_grades;\n    for (float gpa : grades) {\n        if (gpa == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (gpa > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (gpa > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (gpa > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (gpa > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (gpa > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (gpa > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (gpa > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (gpa > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (gpa > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (gpa > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (gpa > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n}\n"}
{"task_id": "CPP/82", "generation": "#include <iostream>\n#include <string>\n#include <cmath>\nusing namespace std;\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true; // 2 is the only even prime number\n    if (n % 2 == 0) return false; // other even numbers are not prime\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nbool prime_length(string str) {\n    int length = str.length();\n    return is_prime(length);\n}\n\n"}
{"task_id": "CPP/83", "generation": "#include<stdio.h>\n#include<math.h>\n\nint starts_one_ends(int n) {\n    if (n == 1) {\n        // Special case: For a single-digit number, the only number that starts or ends with 1 is 1 itself.\n        return 1;\n    }\n    // Calculate the number of n-digit numbers that start with 1\n    int start_with_1 = pow(10, n - 1);\n    // Calculate the number of n-digit numbers that end with 1\n    int end_with_1 = pow(10, n - 1);\n    // Calculate the number of n-digit numbers that both start and end with 1\n    int both_start_and_end_with_1 = pow(10, n - 2);\n    \n    // Total count is the sum of the two counts minus the overlap\n    return start_with_1 + end_with_1 - both_start_and_end_with_1;\n}\n\n"}
{"task_id": "CPP/84", "generation": "#include <iostream>\n#include <string>\n#include <bitset>\n\nusing namespace std;\n\nstring solve(int N) {\n    // Step 1: Calculate the sum of digits\n    int sum = 0;\n    int temp = N;\n    while (temp > 0) {\n        sum += temp % 10;  // Add the last digit to the sum\n        temp /= 10;        // Remove the last digit\n    }\n\n    // Step 2: Convert the sum to binary\n    string binarySum = bitset<32>(sum).to_string();  // Convert to binary string\n\n    // Step 3: Remove leading zeros\n    size_t pos = binarySum.find('1');  // Find the first '1'\n    if (pos != string::npos) {\n        binarySum = binarySum.substr(pos);  // Extract the substring from the first '1'\n    } else {\n        binarySum = \"0\";  // If no '1' is found, the sum was 0\n    }\n\n    return binarySum;\n}\n\n"}
{"task_id": "CPP/85", "generation": "#include<vector>\nusing namespace std;\n\nint add(vector<int> lst) {\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 2 != 0 && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <sstream>\n#include <vector>\n\nusing namespace std;\n\nstring anti_shuffle(string s) {\n    // Create a stringstream to split the input string by spaces\n    stringstream ss(s);\n    string word;\n    vector<string> words;\n    \n    // Split the input string into words\n    while (ss >> word) {\n        // Sort the characters of the word\n        sort(word.begin(), word.end());\n        // Store the sorted word\n        words.push_back(word);\n    }\n    \n    // Reconstruct the string with sorted words\n    string result;\n    stringstream ss2(s);\n    int index = 0;\n    \n    // Iterate through the original string to maintain spaces\n    while (getline(ss2, word, ' ')) {\n        if (!result.empty()) {\n            result += ' '; // Add space between words\n        }\n        result += words[index++]; // Add the sorted word\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/87", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<vector<int>> get_row(vector<vector<int>> lst, int x) {\n    vector<vector<int>> coordinates;\n    \n    // Traverse the 2D vector to find occurrences of x\n    for (int i = 0; i < lst.size(); ++i) {\n        for (int j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                coordinates.push_back({i, j});\n            }\n        }\n    }\n    \n    // Sort coordinates by rows in ascending order\n    // For coordinates within the same row, sort by columns in descending order\n    sort(coordinates.begin(), coordinates.end(), [](const vector<int>& a, const vector<int>& b) {\n        if (a[0] == b[0]) {\n            return a[1] > b[1];\n        }\n        return a[0] < b[0];\n    });\n    \n    return coordinates;\n}\n\n// Example usage\n"}
{"task_id": "CPP/88", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> sort_array(vector<int> array) {\n    // Check if the array is empty or has only one element\n    if (array.empty() || array.size() == 1) {\n        return array;\n    }\n\n    // Calculate the sum of the first and last index values\n    int sum = array.front() + array.back();\n\n    // Create a copy of the array to sort\n    vector<int> sorted_array = array;\n\n    // Sort the array based on the sum\n    if (sum % 2 == 0) {\n        // Sort in descending order if the sum is even\n        sort(sorted_array.begin(), sorted_array.end(), greater<int>());\n    } else {\n        // Sort in ascending order if the sum is odd\n        sort(sorted_array.begin(), sorted_array.end());\n    }\n\n    return sorted_array;\n}\n"}
{"task_id": "CPP/89", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring encrypt(string s) {\n    string result = \"\";\n    int shift = 4; // 2 * 2 = 4\n\n    for (char c : s) {\n        if (c >= 'a' && c <= 'z') {\n            // Shift within lowercase letters\n            c = 'a' + (c - 'a' + shift) % 26;\n        } else if (c >= 'A' && c <= 'Z') {\n            // Shift within uppercase letters\n            c = 'A' + (c - 'A' + shift) % 26;\n        }\n        result += c;\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/90", "generation": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nint next_smallest(const vector<int>& lst) {\n    if (lst.size() < 2) {\n        return -1; // Return -1 as a sentinel value for None\n    }\n\n    // Create a copy of the vector and sort it\n    vector<int> sorted_lst = lst;\n    sort(sorted_lst.begin(), sorted_lst.end());\n\n    // Find the second smallest unique element\n    int smallest = sorted_lst[0];\n    for (size_t i = 1; i < sorted_lst.size(); ++i) {\n        if (sorted_lst[i] != smallest) {\n            return sorted_lst[i];\n        }\n    }\n\n    return -1; // Return -1 if there is no second smallest unique element\n}\n\n"}
{"task_id": "CPP/91", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <vector>\n\nusing namespace std;\n\nint is_bored(string S) {\n    int count = 0;\n    stringstream ss(S);\n    string sentence;\n    vector<string> sentences;\n\n    // Split the string into sentences based on delimiters '.', '?', '!'\n    while (getline(ss, sentence, '.')) {\n        sentences.push_back(sentence);\n    }\n    ss.clear();\n    ss.str(S);\n    while (getline(ss, sentence, '?')) {\n        sentences.push_back(sentence);\n    }\n    ss.clear();\n    ss.str(S);\n    while (getline(ss, sentence, '!')) {\n        sentences.push_back(sentence);\n    }\n\n    // Check each sentence to see if it starts with \"I\"\n    for (string s : sentences) {\n        // Trim leading whitespace\n        size_t start = s.find_first_not_of(\" \\t\\n\\r\\f\\v\");\n        if (start != string::npos) {\n            s = s.substr(start);\n        }\n        // Check if the sentence starts with \"I\"\n        if (s.length() > 0 && s[0] == 'I') {\n            count++;\n        }\n    }\n\n    return count;\n}\n\n"}
{"task_id": "CPP/92", "generation": "#include <stdio.h>\n#include <math.h>\n\nbool any_int(float a, float b, float c) {\n    // Check if all numbers are integers\n    if (floor(a) != a || floor(b) != b || floor(c) != c) {\n        return false;\n    }\n\n    // Convert to integers for comparison\n    int int_a = (int)a;\n    int int_b = (int)b;\n    int int_c = (int)c;\n\n    // Check the sum condition\n    if (int_a == int_b + int_c || int_b == int_a + int_c || int_c == int_a + int_b) {\n        return true;\n    }\n\n    return false;\n}\n\n// Test cases\n"}
{"task_id": "CPP/93", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nstring encode(string message) {\n    string encodedMessage = \"\";\n    for (char c : message) {\n        // Swap the case of the letter\n        if (islower(c)) {\n            c = toupper(c);\n        } else if (isupper(c)) {\n            c = tolower(c);\n        }\n\n        // Replace vowels with the letter that appears 2 places ahead\n        if (c == 'a' || c == 'A') {\n            c = (c == 'a') ? 'c' : 'C';\n        } else if (c == 'e' || c == 'E') {\n            c = (c == 'e') ? 'g' : 'G';\n        } else if (c == 'i' || c == 'I') {\n            c = (c == 'i') ? 'k' : 'K';\n        } else if (c == 'o' || c == 'O') {\n            c = (c == 'o') ? 'q' : 'Q';\n        } else if (c == 'u' || c == 'U') {\n            c = (c == 'u') ? 'w' : 'W';\n        }\n\n        encodedMessage += c;\n    }\n    return encodedMessage;\n}\n\n// Example usage\n"}
{"task_id": "CPP/94", "generation": "#include <iostream>\n#include <vector>\n#include <cmath>\nusing namespace std;\n\n// Function to check if a number is prime\nbool isPrime(int num) {\n    if (num <= 1) return false;\n    if (num == 2) return true;\n    if (num % 2 == 0) return false;\n    for (int i = 3; i <= sqrt(num); i += 2) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\n// Function to sum the digits of a number\nint sumOfDigits(int num) {\n    int sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}\n\nint skjkasdkd(vector<int> lst) {\n    int largestPrime = -1;\n    \n    // Find the largest prime in the list\n    for (int num : lst) {\n        if (isPrime(num) && num > largestPrime) {\n            largestPrime = num;\n        }\n    }\n    \n    // If no prime was found, return 0\n    if (largestPrime == -1) {\n        return 0;\n    }\n    \n    // Sum the digits of the largest prime\n    return sumOfDigits(largestPrime);\n}\n\n"}
{"task_id": "CPP/95", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\n#include<algorithm> // for std::all_of\nusing namespace std;\n\nbool check_dict_case(map<string, string> dict) {\n    // If the map is empty, return false\n    if (dict.empty()) {\n        return false;\n    }\n\n    bool all_lower = true;\n    bool all_upper = true;\n\n    for (const auto& pair : dict) {\n        const string& key = pair.first;\n\n        // Check if the key is not a string (this should never happen in a well-formed map)\n        if (key.empty()) {\n            return false;\n        }\n\n        // Check if all characters in the key are lowercase\n        all_lower = all_lower && all_of(key.begin(), key.end(), ::islower);\n\n        // Check if all characters in the key are uppercase\n        all_upper = all_upper && all_of(key.begin(), key.end(), ::isupper);\n\n        // If neither all_lower nor all_upper is true, we can return false early\n        if (!all_lower && !all_upper) {\n            return false;\n        }\n    }\n\n    // If either all_lower or all_upper is true, return true\n    return all_lower || all_upper;\n}\n\n// Example usage\n"}
{"task_id": "CPP/96", "generation": "#include <vector>\n#include <cmath>\n\nusing namespace std;\n\nvector<int> count_up_to(int n) {\n    if (n <= 2) {\n        return {};\n    }\n\n    // Create a boolean array \"prime[0..n]\" and initialize\n    // all entries it as true. A value in prime[i] will\n    // finally be false if i is Not a prime, else true.\n    vector<bool> prime(n, true);\n\n    // 0 and 1 are not prime numbers\n    prime[0] = prime[1] = false;\n\n    for (int p = 2; p * p < n; p++) {\n        // If prime[p] is not changed, then it is a prime\n        if (prime[p] == true) {\n            // Update all multiples of p to false\n            for (int i = p * p; i < n; i += p) {\n                prime[i] = false;\n            }\n        }\n    }\n\n    // Collect all prime numbers\n    vector<int> primes;\n    for (int p = 2; p < n; p++) {\n        if (prime[p]) {\n            primes.push_back(p);\n        }\n    }\n\n    return primes;\n}\n\n// Example usage\n"}
{"task_id": "CPP/97", "generation": "#include<stdio.h>\n#include<math.h>\n\nint multiply(int a, int b) {\n    // Extract the unit digits of both numbers\n    int unit_digit_a = abs(a) % 10;\n    int unit_digit_b = abs(b) % 10;\n    \n    // Return the product of the unit digits\n    return unit_digit_a * unit_digit_b;\n}\n\n"}
{"task_id": "CPP/98", "generation": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint count_upper(string s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) { // Iterate through even indices\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/99", "generation": "#include <iostream>\n#include <string>\n#include <cmath>\n\nint closest_integer(std::string value) {\n    // Convert the string to a double\n    double number = std::stod(value);\n    \n    // Determine the closest integer\n    int closest;\n    if (number >= 0) {\n        closest = static_cast<int>(number + 0.5);\n    } else {\n        closest = static_cast<int>(number - 0.5);\n    }\n    \n    return closest;\n}\n\n"}
{"task_id": "CPP/100", "generation": "#include <vector>\nusing namespace std;\n\nvector<int> make_a_pile(int n) {\n    vector<int> result;\n    int current = n;\n    \n    for (int i = 0; i < n; ++i) {\n        result.push_back(current);\n        if (current % 2 == 0) {\n            current += 2; // Next even number\n        } else {\n            current += 2; // Next odd number\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/101", "generation": "#include <vector>\n#include <string>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> words_string(string s) {\n    vector<string> words;\n    string word;\n    stringstream ss(s);\n    \n    // Read words separated by spaces or commas\n    while (getline(ss, word, ' ')) {\n        stringstream word_ss(word);\n        string subword;\n        while (getline(word_ss, subword, ',')) {\n            if (!subword.empty()) {\n                words.push_back(subword);\n            }\n        }\n    }\n    \n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "#include <stdio.h>\n\nint choose_num(int x, int y) {\n    // Ensure x is less than or equal to y\n    if (x > y) {\n        return -1;\n    }\n\n    // Start from the largest number in the range and move downwards\n    for (int i = y; i >= x; i--) {\n        // Check if the number is even\n        if (i % 2 == 0) {\n            return i;\n        }\n    }\n\n    // If no even number is found, return -1\n    return -1;\n}\n\n"}
{"task_id": "CPP/103", "generation": "#include <iostream>\n#include <cmath>\n#include <string>\nusing namespace std;\n\nstring rounded_avg(int n, int m) {\n    // Step 1: Check if n is greater than m\n    if (n > m) {\n        return \"-1\";\n    }\n    \n    // Step 2: Calculate the average of integers from n to m\n    int sum = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    double average = static_cast<double>(sum) / (m - n + 1);\n    \n    // Step 3: Round the average to the nearest integer (smaller one)\n    int rounded_average = floor(average);\n    \n    // Step 4: Convert the rounded average to binary\n    string binary_representation;\n    if (rounded_average == 0) {\n        binary_representation = \"0\";\n    } else {\n        while (rounded_average > 0) {\n            binary_representation = to_string(rounded_average % 2) + binary_representation;\n            rounded_average /= 2;\n        }\n    }\n    \n    // Step 5: Return the binary string\n    return binary_representation;\n}\n\n"}
{"task_id": "CPP/104", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\n// Helper function to check if a number contains any even digit\nbool hasEvenDigit(int num) {\n    while (num > 0) {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            return true;\n        }\n        num /= 10;\n    }\n    return false;\n}\n\nvector<int> unique_digits(vector<int> x) {\n    vector<int> result;\n    \n    // Filter out numbers that contain any even digit\n    for (int num : x) {\n        if (!hasEvenDigit(num)) {\n            result.push_back(num);\n        }\n    }\n    \n    // Sort the result in increasing order\n    sort(result.begin(), result.end());\n    \n    return result;\n}\n\n// Example usage\n"}
{"task_id": "CPP/105", "generation": "#include <vector>\n#include <string>\n#include <map>\n#include <algorithm>\nusing namespace std;\n\nvector<string> by_length(vector<int> arr) {\n    // Step 1: Filter and sort the integers between 1 and 9\n    vector<int> filtered;\n    for (int num : arr) {\n        if (num >= 1 && num <= 9) {\n            filtered.push_back(num);\n        }\n    }\n    sort(filtered.begin(), filtered.end());\n\n    // Step 2: Reverse the sorted vector\n    reverse(filtered.begin(), filtered.end());\n\n    // Step 3: Replace each digit with its corresponding name\n    map<int, string> digitToName = {\n        {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"},\n        {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}\n    };\n\n    vector<string> result;\n    for (int num : filtered) {\n        result.push_back(digitToName[num]);\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/106", "generation": "#include <vector>\nusing namespace std;\n\nvector<int> f(int n) {\n    vector<int> result(n);\n    \n    for (int i = 1; i <= n; ++i) {\n        if (i % 2 == 0) {\n            // Compute factorial of i\n            int factorial = 1;\n            for (int j = 1; j <= i; ++j) {\n                factorial *= j;\n            }\n            result[i - 1] = factorial;\n        } else {\n            // Compute sum of numbers from 1 to i\n            int sum = 0;\n            for (int j = 1; j <= i; ++j) {\n                sum += j;\n            }\n            result[i - 1] = sum;\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/107", "generation": "#include <vector>\n#include <string>\nusing namespace std;\n\nbool isPalindrome(int num) {\n    string str = to_string(num);\n    int len = str.length();\n    for (int i = 0; i < len / 2; ++i) {\n        if (str[i] != str[len - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvector<int> even_odd_palindrome(int n) {\n    int evenCount = 0;\n    int oddCount = 0;\n    \n    for (int i = 1; i <= n; ++i) {\n        if (isPalindrome(i)) {\n            if (i % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n    \n    return {evenCount, oddCount};\n}\n"}
{"task_id": "CPP/108", "generation": "#include <vector>\n#include <cmath>\nusing namespace std;\n\nint count_nums(vector<int> n) {\n    int count = 0;\n    \n    for (int num : n) {\n        int sum = 0;\n        int abs_num = abs(num);\n        int sign = num < 0 ? -1 : 1;\n        \n        while (abs_num > 0) {\n            int digit = abs_num % 10;\n            sum += sign * digit;\n            abs_num /= 10;\n            sign = 1; // After the first digit, all digits are positive\n        }\n        \n        if (sum > 0) {\n            count++;\n        }\n    }\n    \n    return count;\n}\n\n// Example usage\n#include <iostream>\n\n"}
{"task_id": "CPP/109", "generation": "#include <vector>\nusing namespace std;\n\nbool move_one_ball(vector<int> arr) {\n    if (arr.empty()) return true;\n    \n    int n = arr.size();\n    int dipCount = 0;\n    \n    for (int i = 0; i < n; ++i) {\n        if (arr[i] > arr[(i + 1) % n]) {\n            dipCount++;\n        }\n    }\n    \n    // There should be exactly one dip for the array to be sortable by right shifts\n    return dipCount == 1;\n}\n"}
{"task_id": "CPP/110", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nstring exchange(vector<int> lst1, vector<int> lst2) {\n    int oddCount = 0;\n    int evenCount = 0;\n\n    // Count the number of odd elements in lst1\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            oddCount++;\n        }\n    }\n\n    // Count the number of even elements in lst2\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            evenCount++;\n        }\n    }\n\n    // If there are enough even elements in lst2 to replace all odd elements in lst1\n    if (evenCount >= oddCount) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\n// Example usage\n"}
{"task_id": "CPP/111", "generation": "#include <iostream>\n#include <string>\n#include <map>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nmap<char, int> histogram(string test) {\n    map<char, int> frequencyMap;\n    map<char, int> resultMap;\n    int maxFrequency = 0;\n\n    // Remove spaces and convert string to lowercase\n    test.erase(remove(test.begin(), test.end(), ' '), test.end());\n    transform(test.begin(), test.end(), test.begin(), ::tolower);\n\n    // Count frequency of each character\n    for (char c : test) {\n        frequencyMap[c]++;\n        if (frequencyMap[c] > maxFrequency) {\n            maxFrequency = frequencyMap[c];\n        }\n    }\n\n    // Populate the result map with characters having the maximum frequency\n    for (const auto& pair : frequencyMap) {\n        if (pair.second == maxFrequency) {\n            resultMap[pair.first] = pair.second;\n        }\n    }\n\n    return resultMap;\n}\n\n"}
{"task_id": "CPP/112", "generation": "#include<iostream>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nvector<string> reverse_delete(string s, string c) {\n    // Step 1: Remove characters from s that are in c\n    string result;\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            result += ch;\n        }\n    }\n    \n    // Step 2: Check if the result string is a palindrome\n    bool isPalindrome = true;\n    int n = result.length();\n    for (int i = 0; i < n / 2; ++i) {\n        if (result[i] != result[n - i - 1]) {\n            isPalindrome = false;\n            break;\n        }\n    }\n    \n    // Step 3: Prepare the result vector\n    vector<string> resultVector;\n    resultVector.push_back(result);\n    resultVector.push_back(isPalindrome ? \"True\" : \"False\");\n    \n    return resultVector;\n}\n\n"}
{"task_id": "CPP/113", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<string> odd_count(vector<string> lst) {\n    vector<string> result;\n    \n    for (size_t i = 0; i < lst.size(); ++i) {\n        int odd_count = 0;\n        for (char c : lst[i]) {\n            if ((c - '0') % 2 != 0) {\n                ++odd_count;\n            }\n        }\n        \n        // Create the output string with the correct format\n        ostringstream oss;\n        oss << \"the number of odd elements \" << odd_count << \"n the str\" << odd_count << \"ng \" << odd_count << \" of the \" << odd_count << \"nput.\";\n        result.push_back(oss.str());\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/114", "generation": "#include<stdio.h>\n#include<vector>\n#include<limits.h>\nusing namespace std;\n\nlong long minSubArraySum(vector<long long> nums) {\n    // Initialize the minimum sum to a very large value\n    long long min_sum = LLONG_MAX;\n    // Initialize the current sum to 0\n    long long current_sum = 0;\n\n    // Iterate through each number in the vector\n    for (long long num : nums) {\n        // Add the current number to the current sum\n        current_sum += num;\n        // Update the minimum sum if the current sum is smaller\n        if (current_sum < min_sum) {\n            min_sum = current_sum;\n        }\n        // If the current sum is positive, reset it to 0\n        if (current_sum > 0) {\n            current_sum = 0;\n        }\n    }\n\n    return min_sum;\n}\n\n"}
{"task_id": "CPP/115", "generation": "#include<stdio.h>\n#include<vector>\n#include<cmath> // for ceil function\nusing namespace std;\n\nint max_fill(vector<vector<int>> grid, int capacity) {\n    int total_lowers = 0;\n    \n    for (const auto& row : grid) {\n        int water_units = 0;\n        for (int unit : row) {\n            if (unit == 1) {\n                water_units++;\n            }\n        }\n        // Calculate the number of times the bucket needs to be lowered\n        total_lowers += ceil((double)water_units / capacity);\n    }\n    \n    return total_lowers;\n}\n\n// Example usage\n"}
{"task_id": "CPP/116", "generation": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nusing namespace std;\n\n// Function to count the number of ones in the binary representation of a number\nint countOnes(int num) {\n    int count = 0;\n    while (num != 0) {\n        count += num & 1;\n        num >>= 1;\n    }\n    return count;\n}\n\n// Custom comparator function for sorting\nbool customComparator(int a, int b) {\n    int onesA = countOnes(a);\n    int onesB = countOnes(b);\n    \n    if (onesA == onesB) {\n        return a < b; // If number of ones is the same, sort by decimal value\n    }\n    return onesA < onesB; // Otherwise, sort by number of ones\n}\n\n// Function to sort the array based on the custom comparator\nvector<int> sort_array(vector<int> arr) {\n    sort(arr.begin(), arr.end(), customComparator);\n    return arr;\n}\n\n// Test the function\n"}
{"task_id": "CPP/117", "generation": "#include <vector>\n#include <string>\n#include <sstream>\n#include <unordered_set>\n\nusing namespace std;\n\nvector<string> select_words(string s, int n) {\n    // Define a set of vowels for quick lookup\n    unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    \n    // Result vector to store words with exactly n consonants\n    vector<string> result;\n    \n    // Use a stringstream to split the input string into words\n    stringstream ss(s);\n    string word;\n    \n    while (ss >> word) {\n        int consonant_count = 0;\n        \n        // Count the number of consonants in the current word\n        for (char c : word) {\n            if (vowels.find(c) == vowels.end()) {\n                consonant_count++;\n            }\n        }\n        \n        // If the word has exactly n consonants, add it to the result vector\n        if (consonant_count == n) {\n            result.push_back(word);\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/118", "generation": "#include <iostream>\n#include <string>\n#include <unordered_set>\nusing namespace std;\n\nstring get_closest_vowel(string word) {\n    // Define the set of vowels\n    unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    \n    // Traverse the word from right to left\n    for (int i = word.size() - 2; i > 0; --i) {\n        // Check if the current character is a vowel\n        if (vowels.find(word[i]) != vowels.end()) {\n            // Check if the previous and next characters are consonants\n            if (vowels.find(word[i-1]) == vowels.end() && vowels.find(word[i+1]) == vowels.end()) {\n                return string(1, word[i]);\n            }\n        }\n    }\n    \n    // If no such vowel is found, return an empty string\n    return \"\";\n}\n\n"}
{"task_id": "CPP/119", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nstring match_parens(vector<string> lst) {\n    int open_count1 = 0, close_count1 = 0;\n    int open_count2 = 0, close_count2 = 0;\n\n    // Count parentheses in the first string\n    for (char c : lst[0]) {\n        if (c == '(') open_count1++;\n        else if (c == ')') close_count1++;\n    }\n\n    // Count parentheses in the second string\n    for (char c : lst[1]) {\n        if (c == '(') open_count2++;\n        else if (c == ')') close_count2++;\n    }\n\n    // Total counts\n    int total_open = open_count1 + open_count2;\n    int total_close = close_count1 + close_count2;\n\n    // Check if the total number of opening and closing parentheses are equal\n    if (total_open == total_close) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\n// Example usage\n"}
{"task_id": "CPP/120", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> maximum(vector<int> arr, int k) {\n    // Step 1: Sort the entire array in ascending order\n    sort(arr.begin(), arr.end());\n    \n    // Step 2: Extract the last k elements (which are the top k maximum elements)\n    vector<int> result(arr.end() - k, arr.end());\n    \n    // Step 3: Return the result\n    return result;\n}\n"}
{"task_id": "CPP/121", "generation": "#include <vector>\nusing namespace std;\n\nint solution(vector<int> lst) {\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "#include<iostream>\n#include<vector>\nusing namespace std;\n\nint add_elements(vector<int> arr, int k) {\n    int sum = 0;\n    \n    for (int i = 0; i < k; ++i) {\n        // Check if the number has at most two digits\n        if (arr[i] >= 0 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    \n    return sum;\n}\n\n"}
{"task_id": "CPP/123", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> get_odd_collatz(int n) {\n    vector<int> odd_numbers;\n    \n    // Generate the Collatz sequence and collect odd numbers\n    while (n != 1) {\n        if (n % 2 == 1) {\n            odd_numbers.push_back(n);\n        }\n        if (n % 2 == 0) {\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n    }\n    \n    // Add the final 1 to the sequence\n    odd_numbers.push_back(1);\n    \n    // Sort the vector of odd numbers\n    sort(odd_numbers.begin(), odd_numbers.end());\n    \n    return odd_numbers;\n}\n"}
{"task_id": "CPP/124", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <iomanip>\n\nusing namespace std;\n\nbool valid_date(string date) {\n    // Check if the date string is empty\n    if (date.empty()) {\n        return false;\n    }\n\n    // Check if the date string is in the format \"mm-dd-yyyy\"\n    if (date.length() != 10 || date[2] != '-' || date[5] != '-') {\n        return false;\n    }\n\n    // Extract the month, day, and year from the date string\n    string month_str = date.substr(0, 2);\n    string day_str = date.substr(3, 2);\n    string year_str = date.substr(6, 4);\n\n    // Convert the extracted strings to integers\n    int month, day, year;\n    try {\n        month = stoi(month_str);\n        day = stoi(day_str);\n        year = stoi(year_str);\n    } catch (invalid_argument&) {\n        return false;\n    }\n\n    // Validate the month\n    if (month < 1 || month > 12) {\n        return false;\n    }\n\n    // Validate the day based on the month\n    if (month == 2) {\n        // February can have 29 days (leap year check not included here)\n        if (day < 1 || day > 29) {\n            return false;\n        }\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        // April, June, September, November have 30 days\n        if (day < 1 || day > 30) {\n            return false;\n        }\n    } else {\n        // All other months have 31 days\n        if (day < 1 || day > 31) {\n            return false;\n        }\n    }\n\n    // If all checks pass, the date is valid\n    return true;\n}\n\n"}
{"task_id": "CPP/125", "generation": "#include <vector>\n#include <string>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> split_words(string txt) {\n    // Check for whitespace\n    if (txt.find(' ') != string::npos) {\n        vector<string> result;\n        stringstream ss(txt);\n        string word;\n        while (ss >> word) {\n            result.push_back(word);\n        }\n        return result;\n    }\n    \n    // Check for commas\n    if (txt.find(',') != string::npos) {\n        vector<string> result;\n        stringstream ss(txt);\n        string word;\n        while (getline(ss, word, ',')) {\n            result.push_back(word);\n        }\n        return result;\n    }\n    \n    // Count odd-indexed lowercase letters\n    int count = 0;\n    for (char c : txt) {\n        if (islower(c)) {\n            if ((c - 'a') % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    \n    return {\"3\"}; // Placeholder for the count result\n}\n"}
{"task_id": "CPP/126", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nbool is_sorted(vector<int> lst) {\n    // Check if the vector is sorted in ascending order\n    if (!is_sorted(lst.begin(), lst.end())) {\n        return false;\n    }\n\n    // Check for duplicates beyond two occurrences\n    for (size_t i = 0; i < lst.size(); ++i) {\n        int count = 0;\n        for (size_t j = 0; j < lst.size(); ++j) {\n            if (lst[i] == lst[j]) {\n                count++;\n            }\n            if (count > 2) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n"}
{"task_id": "CPP/127", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<cmath>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nstring intersection(vector<int> interval1, vector<int> interval2) {\n    int start1 = interval1[0];\n    int end1 = interval1[1];\n    int start2 = interval2[0];\n    int end2 = interval2[1];\n    \n    int intersectionStart = max(start1, start2);\n    int intersectionEnd = min(end1, end2);\n    \n    if (intersectionStart <= intersectionEnd) {\n        int intersectionLength = intersectionEnd - intersectionStart + 1;\n        if (isPrime(intersectionLength)) {\n            return \"YES\";\n        }\n    }\n    \n    return \"NO\";\n}\n\n// Example usage\n"}
{"task_id": "CPP/128", "generation": "#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n\nint prod_signs(vector<int> arr) {\n    // Handle the empty array case\n    if (arr.empty()) {\n        return -32768;\n    }\n\n    // Initialize product of signs to 1\n    int sign_product = 1;\n    // Initialize sum of magnitudes to 0\n    int magnitude_sum = 0;\n\n    // Iterate through the array\n    for (int num : arr) {\n        // Determine the sign of the number\n        int sign = (num > 0) ? 1 : (num < 0) ? -1 : 0;\n        // Update the product of signs\n        sign_product *= sign;\n        // Update the sum of magnitudes\n        magnitude_sum += abs(num);\n    }\n\n    // Return the sum of magnitudes multiplied by the product of signs\n    return magnitude_sum * sign_product;\n}\n\n// Example usage\n"}
{"task_id": "CPP/129", "generation": "#include <vector>\n#include <queue>\n#include <climits>\nusing namespace std;\n\nstruct State {\n    vector<int> path;\n    int x, y;\n};\n\nvector<int> minPath(vector<vector<int>> grid, int k) {\n    int N = grid.size();\n    vector<int> min_path(k, INT_MAX);\n    \n    // Directions for moving up, down, left, right\n    vector<pair<int, int>> directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n    \n    // BFS queue\n    queue<State> q;\n    \n    // Initialize the queue with all starting positions\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            q.push({{grid[i][j]}, i, j});\n        }\n    }\n    \n    while (!q.empty()) {\n        State curr = q.front();\n        q.pop();\n        \n        // If the current path length is k, compare and update min_path\n        if (curr.path.size() == k) {\n            if (curr.path < min_path) {\n                min_path = curr.path;\n            }\n            continue;\n        }\n        \n        // Explore all possible moves\n        for (auto& dir : directions) {\n            int newX = curr.x + dir.first;\n            int newY = curr.y + dir.second;\n            \n            // Check if the new position is within the grid\n            if (newX >= 0 && newX < N && newY >= 0 && newY < N) {\n                vector<int> newPath = curr.path;\n                newPath.push_back(grid[newX][newY]);\n                q.push({newPath, newX, newY});\n            }\n        }\n    }\n    \n    return min_path;\n}\n\n"}
{"task_id": "CPP/130", "generation": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<int> tri(int n) {\n    // Vector to store the Tribonacci sequence\n    vector<int> tribonacci(n + 1);\n    \n    // Base case\n    tribonacci[0] = 1; // This is just a placeholder since we start from tri(1)\n    tribonacci[1] = 3;\n    \n    // Compute the Tribonacci sequence for n >= 2\n    for (int i = 2; i <= n; ++i) {\n        if (i % 2 == 0) {\n            // Even case\n            tribonacci[i] = 1 + i / 2;\n        } else {\n            // Odd case\n            tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1];\n        }\n    }\n    \n    return tribonacci;\n}\n\n"}
{"task_id": "CPP/131", "generation": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint digits(int n) {\n    // Convert the integer to a string\n    string numStr = to_string(n);\n    \n    // Initialize the product to 1 (multiplicative identity)\n    int product = 1;\n    \n    // Flag to check if any odd digit is found\n    bool hasOdd = false;\n    \n    // Iterate through each character in the string\n    for (char ch : numStr) {\n        // Convert the character to an integer\n        int digit = ch - '0';\n        \n        // Check if the digit is odd\n        if (digit % 2 != 0) {\n            // Multiply the product by the odd digit\n            product *= digit;\n            hasOdd = true;\n        }\n    }\n    \n    // If no odd digit was found, return 0\n    if (!hasOdd) {\n        return 0;\n    }\n    \n    // Return the product of the odd digits\n    return product;\n}\n\n"}
{"task_id": "CPP/132", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool is_nested(string str) {\n    int open_brackets = 0;\n    int close_brackets = 0;\n\n    for (char ch : str) {\n        if (ch == '[') {\n            open_brackets++;\n        } else if (ch == ']') {\n            close_brackets++;\n        }\n\n        // Check if there is a nested bracket\n        if (close_brackets > open_brackets) {\n            return true;\n        }\n    }\n\n    // If no nesting is found\n    return false;\n}\n\n"}
{"task_id": "CPP/133", "generation": "#include <iostream>\n#include <vector>\n#include <cmath> // For ceil function\n\nusing namespace std;\n\nint sum_squares(vector<float> lst) {\n    int sum = 0;\n    for (float num : lst) {\n        int rounded_num = ceil(num); // Round up to the nearest integer\n        sum += rounded_num * rounded_num; // Square the rounded number and add to sum\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/134", "generation": "#include <iostream>\n#include <string>\n#include <cctype>\n\nusing namespace std;\n\nbool check_if_last_char_is_a_letter(string txt) {\n    // Check if the string is empty\n    if (txt.empty()) {\n        return false;\n    }\n\n    // Get the last character\n    char last_char = txt.back();\n\n    // Check if the last character is an alphabetical character\n    if (!isalpha(last_char)) {\n        return false;\n    }\n\n    // Check if the last character is not part of a word\n    // Ensure that the last character is not followed by any other characters\n    if (txt.size() > 1 && isalpha(txt[txt.size() - 2])) {\n        return false;\n    }\n\n    return true;\n}\n\n"}
{"task_id": "CPP/135", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nint can_arrange(vector<int> arr) {\n    int max_index = -1;\n    for (int i = 1; i < arr.size(); ++i) {\n        if (arr[i] < arr[i - 1]) {\n            max_index = i;\n        }\n    }\n    return max_index;\n}\n\n"}
{"task_id": "CPP/136", "generation": "#include <vector>\n#include <limits.h> // For INT_MAX and INT_MIN\n\nusing namespace std;\n\nvector<int> largest_smallest_integers(vector<int> lst) {\n    int largest_negative = INT_MIN; // Initialize to the smallest possible integer\n    int smallest_positive = INT_MAX; // Initialize to the largest possible integer\n\n    // Iterate through the vector\n    for (int num : lst) {\n        if (num < 0) {\n            // Update largest_negative if num is larger than the current largest_negative\n            if (num > largest_negative) {\n                largest_negative = num;\n            }\n        } else if (num > 0) {\n            // Update smallest_positive if num is smaller than the current smallest_positive\n            if (num < smallest_positive) {\n                smallest_positive = num;\n            }\n        }\n    }\n\n    // If no negative number was found, set largest_negative to 0\n    if (largest_negative == INT_MIN) {\n        largest_negative = 0;\n    }\n\n    // If no positive number was found, set smallest_positive to 0\n    if (smallest_positive == INT_MAX) {\n        smallest_positive = 0;\n    }\n\n    // Return the result as a vector\n    return {largest_negative, smallest_positive};\n}\n\n// Example usage\n"}
{"task_id": "CPP/137", "generation": "#include <iostream>\n#include <string>\n#include <boost/any.hpp>\n#include <boost/algorithm/string.hpp>\n\nusing namespace std;\n\nboost::any compare_one(boost::any a, boost::any b) {\n    // Helper function to convert string to float\n    auto string_to_float = [](const string& str) -> float {\n        string temp = str;\n        boost::replace_all(temp, \",\", \".\");\n        return stof(temp);\n    };\n\n    // Helper function to get the value as float\n    auto get_value = [&](const boost::any& val) -> float {\n        if (val.type() == typeid(int)) {\n            return static_cast<float>(boost::any_cast<int>(val));\n        } else if (val.type() == typeid(float)) {\n            return boost::any_cast<float>(val);\n        } else if (val.type() == typeid(string)) {\n            return string_to_float(boost::any_cast<string>(val));\n        }\n        throw runtime_error(\"Unsupported type\");\n    };\n\n    // Get the values as floats\n    float val_a = get_value(a);\n    float val_b = get_value(b);\n\n    // Compare the values\n    if (val_a > val_b) {\n        return a;\n    } else if (val_b > val_a) {\n        return b;\n    } else {\n        return \"None\";\n    }\n}\n\n"}
{"task_id": "CPP/138", "generation": "#include<stdio.h>\n\nbool is_equal_to_sum_even(int n) {\n    // Check if n is less than 8\n    if (n < 8) {\n        return false;\n    }\n    // Check if n is even\n    if (n % 2 == 0) {\n        return true;\n    }\n    // If n is odd, it cannot be the sum of 4 even numbers\n    return false;\n}\n\n"}
{"task_id": "CPP/139", "generation": "#include <stdio.h>\n\n// Helper function to calculate factorial of a number\nlong long factorial(int num) {\n    long long result = 1;\n    for (int i = 1; i <= num; i++) {\n        result *= i;\n    }\n    return result;\n}\n\n// Function to calculate the Brazilian factorial\nlong long special_factorial(int n) {\n    long long result = 1;\n    for (int i = n; i >= 1; i--) {\n        result *= factorial(i);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/140", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring fix_spaces(string text) {\n    string result = \"\";\n    int n = text.length();\n    int i = 0;\n\n    while (i < n) {\n        if (text[i] == ' ') {\n            int count = 0;\n            // Count consecutive spaces\n            while (i < n && text[i] == ' ') {\n                count++;\n                i++;\n            }\n            // If more than 2 consecutive spaces, replace with '-'\n            if (count > 2) {\n                result += '-';\n            } else {\n                // Replace 1 or 2 spaces with underscores\n                for (int j = 0; j < count; j++) {\n                    result += '_';\n                }\n            }\n        } else {\n            // If not a space, just add the character to the result\n            result += text[i];\n            i++;\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/141", "generation": "#include <iostream>\n#include <string>\n#include <cctype>\n#include <unordered_set>\n\nusing namespace std;\n\nstring file_name_check(string file_name) {\n    // Check for the number of digits\n    int digit_count = 0;\n    for (char c : file_name) {\n        if (isdigit(c)) {\n            digit_count++;\n            if (digit_count > 3) {\n                return \"No\";\n            }\n        }\n    }\n\n    // Check for exactly one dot\n    size_t dot_pos = file_name.find('.');\n    if (dot_pos == string::npos || dot_pos == 0 || dot_pos == file_name.size() - 1) {\n        return \"No\";\n    }\n    if (file_name.find('.', dot_pos + 1) != string::npos) {\n        return \"No\";\n    }\n\n    // Check the substring before the dot\n    string before_dot = file_name.substr(0, dot_pos);\n    if (before_dot.empty() || !isalpha(before_dot[0])) {\n        return \"No\";\n    }\n\n    // Check the substring after the dot\n    string after_dot = file_name.substr(dot_pos + 1);\n    unordered_set<string> valid_extensions = {\"txt\", \"exe\", \"dll\"};\n    if (valid_extensions.find(after_dot) == valid_extensions.end()) {\n        return \"No\";\n    }\n\n    return \"Yes\";\n}\n\n"}
{"task_id": "CPP/142", "generation": "#include <vector>\n#include <cmath> // For pow function\n\nusing namespace std;\n\nint sum_squares(vector<int> lst) {\n    int sum = 0;\n    \n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 3 == 0) {\n            // Square the element if the index is a multiple of 3\n            lst[i] = lst[i] * lst[i];\n        } else if (i % 4 == 0 && i % 3 != 0) {\n            // Cube the element if the index is a multiple of 4 but not a multiple of 3\n            lst[i] = lst[i] * lst[i] * lst[i];\n        }\n        // Add the modified (or unmodified) element to the sum\n        sum += lst[i];\n    }\n    \n    return sum;\n}\n"}
{"task_id": "CPP/143", "generation": "#include <iostream>\n#include <string>\n#include <vector>\n#include <cmath>\n\nusing namespace std;\n\n// Function to check if a number is prime\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true; // 2 is the only even prime number\n    if (n % 2 == 0) return false; // Other even numbers are not prime\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\n// Function to split the sentence into words\nvector<string> split(const string& sentence) {\n    vector<string> words;\n    string word;\n    for (char ch : sentence) {\n        if (ch == ' ') {\n            if (!word.empty()) {\n                words.push_back(word);\n                word.clear();\n            }\n        } else {\n            word += ch;\n        }\n    }\n    if (!word.empty()) {\n        words.push_back(word);\n    }\n    return words;\n}\n\n// Function to filter words by their length being prime\nstring words_in_sentence(string sentence) {\n    vector<string> words = split(sentence);\n    string result;\n    for (const string& word : words) {\n        if (isPrime(word.length())) {\n            if (!result.empty()) {\n                result += \" \";\n            }\n            result += word;\n        }\n    }\n    return result;\n}\n\n// Example usage\n"}
{"task_id": "CPP/144", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <numeric> // For std::gcd\n\nusing namespace std;\n\nbool simplify(string x, string n) {\n    // Helper function to parse the fraction string\n    auto parseFraction = [](const string& fraction) -> pair<int, int> {\n        size_t pos = fraction.find('/');\n        int numerator = stoi(fraction.substr(0, pos));\n        int denominator = stoi(fraction.substr(pos + 1));\n        return {numerator, denominator};\n    };\n\n    // Parse the input fractions\n    auto [numX, denomX] = parseFraction(x);\n    auto [numN, denomN] = parseFraction(n);\n\n    // Calculate the product of the two fractions\n    int numerator = numX * numN;\n    int denominator = denomX * denomN;\n\n    // Check if the result is a whole number\n    return numerator % denominator == 0;\n}\n\n"}
{"task_id": "CPP/145", "generation": "#include <vector>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\n// Helper function to calculate the sum of digits of a number\nint sum_of_digits(int num) {\n    int sum = 0;\n    bool is_negative = num < 0;\n    num = abs(num);\n    \n    while (num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    \n    if (is_negative) {\n        sum = -sum;\n    }\n    \n    return sum;\n}\n\nvector<int> order_by_points(vector<int> nums) {\n    // Use a stable sort to maintain the original order for equal sums\n    stable_sort(nums.begin(), nums.end(), [](int a, int b) {\n        return sum_of_digits(a) < sum_of_digits(b);\n    });\n    \n    return nums;\n}\n\n// Example usage\n"}
{"task_id": "CPP/146", "generation": "#include <vector>\n#include <string>\n#include <cmath>\n\nusing namespace std;\n\nbool isOddDigit(int digit) {\n    return digit == 1 || digit == 3 || digit == 5 || digit == 7 || digit == 9;\n}\n\nint specialFilter(vector<int> nums) {\n    int count = 0;\n    \n    for (int num : nums) {\n        if (num > 10) {\n            // Convert the number to a string to get the first digit\n            string numStr = to_string(abs(num));\n            int firstDigit = numStr[0] - '0';\n            int lastDigit = abs(num) % 10;\n            \n            if (isOddDigit(firstDigit) && isOddDigit(lastDigit)) {\n                count++;\n            }\n        }\n    }\n    \n    return count;\n}\n\n// Example usage\n"}
{"task_id": "CPP/147", "generation": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint get_max_triples(int n) {\n    // Step 1: Generate the vector a\n    vector<int> a(n);\n    for (int i = 1; i <= n; ++i) {\n        a[i-1] = i * i - i + 1;\n    }\n\n    // Step 2: Count the number of valid triples\n    int count = 0;\n    for (int i = 0; i < n; ++i) {\n        for (int j = i + 1; j < n; ++j) {\n            for (int k = j + 1; k < n; ++k) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    // Step 3: Return the count of valid triples\n    return count;\n}\n\n"}
{"task_id": "CPP/148", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> bf(string planet1, string planet2) {\n    // List of planets in order of their proximity to the Sun\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    \n    // Check if both planet names are valid\n    if (find(planets.begin(), planets.end(), planet1) == planets.end() ||\n        find(planets.begin(), planets.end(), planet2) == planets.end()) {\n        return {};\n    }\n    \n    // Find the indices of the given planets\n    int index1 = find(planets.begin(), planets.end(), planet1) - planets.begin();\n    int index2 = find(planets.begin(), planets.end(), planet2) - planets.begin();\n    \n    // Ensure index1 is less than index2 for proper range extraction\n    if (index1 > index2) {\n        swap(index1, index2);\n    }\n    \n    // Extract the planets between index1 and index2 (excluding the planets themselves)\n    vector<string> result(planets.begin() + index1 + 1, planets.begin() + index2);\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/149", "generation": "#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nvector<string> sorted_list_sum(vector<string> lst) {\n    // Step 1: Filter out strings with odd lengths\n    vector<string> filtered_lst;\n    for (const string& s : lst) {\n        if (s.length() % 2 == 0) {\n            filtered_lst.push_back(s);\n        }\n    }\n\n    // Step 2: Sort the filtered strings\n    sort(filtered_lst.begin(), filtered_lst.end(), [](const string& a, const string& b) {\n        if (a.length() == b.length()) {\n            return a < b; // Sort alphabetically if lengths are the same\n        }\n        return a.length() < b.length(); // Sort by length\n    });\n\n    return filtered_lst;\n}\n\n// Example usage\n"}
{"task_id": "CPP/150", "generation": "#include<iostream>\n#include<cmath>\n\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true; // 2 is the only even prime number\n    if (n % 2 == 0) return false; // other even numbers are not prime\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nint x_or_y(int n, int x, int y) {\n    if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n\n"}
{"task_id": "CPP/151", "generation": "#include <vector>\n#include <cmath>\nusing namespace std;\n\nlong long double_the_difference(vector<float> lst) {\n    long long sum = 0;\n    \n    for (float num : lst) {\n        // Check if the number is a positive integer\n        if (num > 0 && floor(num) == num) {\n            int int_num = static_cast<int>(num);\n            // Check if the number is odd\n            if (int_num % 2 != 0) {\n                sum += int_num * int_num;\n            }\n        }\n    }\n    \n    return sum;\n}\n"}
{"task_id": "CPP/152", "generation": "#include <vector>\n#include <cmath> // for std::abs\n\nusing namespace std;\n\nvector<int> compare(vector<int> game, vector<int> guess) {\n    vector<int> result;\n    for (size_t i = 0; i < game.size(); ++i) {\n        if (game[i] == guess[i]) {\n            result.push_back(0);\n        } else {\n            result.push_back(std::abs(game[i] - guess[i]));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/153", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cctype>\n\nusing namespace std;\n\nstring Strongest_Extension(string class_name, vector<string> extensions) {\n    string strongest_extension = \"\";\n    int max_strength = INT_MIN;\n\n    for (const string& ext : extensions) {\n        int CAP = 0;\n        int SM = 0;\n\n        // Calculate CAP and SM for the current extension\n        for (char c : ext) {\n            if (isupper(c)) {\n                CAP++;\n            } else if (islower(c)) {\n                SM++;\n            }\n        }\n\n        // Calculate the strength of the current extension\n        int strength = CAP - SM;\n\n        // Update the strongest extension if the current one is stronger\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest_extension = ext;\n        }\n    }\n\n    // Return the result in the required format\n    return class_name + \".\" + strongest_extension;\n}\n\n"}
{"task_id": "CPP/154", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool isSubstring(const string &a, const string &b) {\n    return a.find(b) != string::npos;\n}\n\nbool cycpattern_check(string a, string b) {\n    int n = b.length();\n    if (n == 0) return true; // An empty string is always a substring\n\n    // Generate all rotations of b\n    for (int i = 0; i < n; ++i) {\n        // Rotate b by moving the first character to the end\n        string rotated = b.substr(i) + b.substr(0, i);\n        if (isSubstring(a, rotated)) {\n            return true;\n        }\n    }\n    return false;\n}\n\n"}
{"task_id": "CPP/155", "generation": "#include <vector>\n#include <cmath>\n\nusing namespace std;\n\nvector<int> even_odd_count(int num) {\n    // Initialize counters for even and odd digits\n    int even_count = 0;\n    int odd_count = 0;\n    \n    // Handle negative numbers by taking the absolute value\n    num = abs(num);\n    \n    // Loop through each digit of the number\n    while (num > 0) {\n        int digit = num % 10; // Extract the last digit\n        if (digit % 2 == 0) {\n            even_count++; // Increment even count if the digit is even\n        } else {\n            odd_count++; // Increment odd count if the digit is odd\n        }\n        num /= 10; // Remove the last digit from the number\n    }\n    \n    // Return the result as a vector\n    return {even_count, odd_count};\n}\n"}
{"task_id": "CPP/156", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring int_to_mini_roman(int number) {\n    // Mapping of values to their corresponding Roman numerals in lowercase\n    vector<pair<int, string>> roman_map = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"},\n        {100, \"c\"}, {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"},\n        {10, \"x\"}, {9, \"ix\"}, {5, \"v\"}, {4, \"iv\"}, {1, \"i\"}\n    };\n    \n    string result = \"\";\n    \n    // Iterate through the mapping\n    for (const auto& pair : roman_map) {\n        int value = pair.first;\n        string roman = pair.second;\n        \n        // Append the Roman numeral while the value can be subtracted from the number\n        while (number >= value) {\n            result += roman;\n            number -= value;\n        }\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/157", "generation": "#include<stdio.h>\n#include<math.h>\n\nbool right_angle_triangle(float a, float b, float c) {\n    // Ensure the sides are in non-decreasing order\n    if (a > b) {\n        float temp = a;\n        a = b;\n        b = temp;\n    }\n    if (b > c) {\n        float temp = b;\n        b = c;\n        c = temp;\n    }\n    if (a > b) {\n        float temp = a;\n        a = b;\n        b = temp;\n    }\n\n    // Now c is the longest side\n    return (pow(a, 2) + pow(b, 2) == pow(c, 2));\n}\n\n"}
{"task_id": "CPP/158", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_set>\n#include <algorithm>\n\nusing namespace std;\n\nstring find_max(vector<string> words) {\n    string max_word = \"\";\n    int max_unique_count = 0;\n\n    for (const string& word : words) {\n        // Use an unordered_set to count unique characters\n        unordered_set<char> unique_chars(word.begin(), word.end());\n        int unique_count = unique_chars.size();\n\n        // If the current word has more unique characters, update max_word\n        if (unique_count > max_unique_count) {\n            max_word = word;\n            max_unique_count = unique_count;\n        }\n        // If the current word has the same number of unique characters but is lexicographically smaller, update max_word\n        else if (unique_count == max_unique_count && word < max_word) {\n            max_word = word;\n        }\n    }\n\n    return max_word;\n}\n\n"}
{"task_id": "CPP/159", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<int> eat(int number, int need, int remaining) {\n    // Calculate the total number of carrots the rabbit needs to eat\n    int total_needed = number + need;\n    \n    // Determine how many carrots the rabbit can actually eat\n    int actually_eaten = min(total_needed, remaining);\n    \n    // Calculate the number of carrots left\n    int carrots_left = remaining - actually_eaten;\n    \n    // Return the result as a vector\n    return {number + actually_eaten, carrots_left};\n}\n\n// Example usage\n"}
{"task_id": "CPP/160", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nint do_algebra(vector<string> operato, vector<int> operand) {\n    // Initialize the result with the first operand\n    int result = operand[0];\n    \n    // Iterate through the operators and operands\n    for (size_t i = 0; i < operato.size(); ++i) {\n        // Get the current operator and operand\n        string op = operato[i];\n        int next_operand = operand[i + 1];\n        \n        // Apply the operator to the result and the next operand\n        if (op == \"+\") {\n            result += next_operand;\n        } else if (op == \"-\") {\n            result -= next_operand;\n        } else if (op == \"*\") {\n            result *= next_operand;\n        } else if (op == \"//\") {\n            result /= next_operand; // Note: This is integer division\n        } else if (op == \"**\") {\n            result = pow(result, next_operand);\n        }\n    }\n    \n    // Return the final result\n    return result;\n}\n\n"}
{"task_id": "CPP/161", "generation": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring solve(string s) {\n    bool containsLetter = false;\n    \n    // First pass: check if the string contains any letters and reverse case if necessary\n    for (int i = 0; i < s.length(); ++i) {\n        if (isalpha(s[i])) {\n            containsLetter = true;\n            if (islower(s[i])) {\n                s[i] = toupper(s[i]);\n            } else {\n                s[i] = tolower(s[i]);\n            }\n        }\n    }\n    \n    // If the string contains no letters, reverse the entire string\n    if (!containsLetter) {\n        string reversed = \"\";\n        for (int i = s.length() - 1; i >= 0; --i) {\n            reversed += s[i];\n        }\n        return reversed;\n    }\n    \n    return s;\n}\n\n"}
{"task_id": "CPP/162", "generation": "#include <iostream>\n#include <string>\n#include <openssl/md5.h>\n#include <iomanip>\n#include <sstream>\n\nusing namespace std;\n\nstring string_to_md5(const string& text) {\n    // Return None if the input string is empty\n    if (text.empty()) {\n        return \"\";\n    }\n\n    // Create an MD5 context\n    MD5_CTX md5Context;\n    MD5_Init(&md5Context);\n\n    // Update the context with the input string\n    MD5_Update(&md5Context, text.c_str(), text.length());\n\n    // Create a buffer to hold the MD5 hash\n    unsigned char md5Hash[MD5_DIGEST_LENGTH];\n    MD5_Final(md5Hash, &md5Context);\n\n    // Convert the MD5 hash to a hexadecimal string\n    stringstream ss;\n    for (int i = 0; i < MD5_DIGEST_LENGTH; ++i) {\n        ss << hex << setw(2) << setfill('0') << (int)md5Hash[i];\n    }\n\n    return ss.str();\n}\n\n"}
{"task_id": "CPP/163", "generation": "#include <stdio.h>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> generate_integers(int a, int b) {\n    vector<int> result;\n    \n    // Determine the start and end of the range\n    int start = min(a, b);\n    int end = max(a, b);\n    \n    // Iterate through the range and collect even digits\n    for (int i = start; i <= end; ++i) {\n        int num = i;\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0 && digit < 10) {\n                result.push_back(digit);\n            }\n            num /= 10;\n        }\n    }\n    \n    // Sort the result to ensure ascending order\n    sort(result.begin(), result.end());\n    \n    // Remove duplicates by converting to a set and back to a vector\n    sort(result.begin(), result.end());\n    result.erase(unique(result.begin(), result.end()), result.end());\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/0", "generation": "#include<stdio.h>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nbool has_close_elements(vector<float> numbers, float threshold) {\n    // Get the size of the vector\n    int n = numbers.size();\n    \n    // Iterate through each pair of numbers\n    for (int i = 0; i < n; ++i) {\n        for (int j = i + 1; j < n; ++j) {\n            // Calculate the absolute difference between numbers[i] and numbers[j]\n            float diff = abs(numbers[i] - numbers[j]);\n            \n            // Check if the difference is less than the threshold\n            if (diff < threshold) {\n                return true;\n            }\n        }\n    }\n    \n    // If no such pair is found, return false\n    return false;\n}\n\n"}
{"task_id": "CPP/1", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <stack>\n\nusing namespace std;\n\nvector<string> separate_paren_groups(string paren_string) {\n    vector<string> result;\n    string current_group;\n    stack<char> paren_stack;\n\n    // Remove spaces from the input string\n    paren_string.erase(remove(paren_string.begin(), paren_string.end(), ' '), paren_string.end());\n\n    for (char ch : paren_string) {\n        current_group += ch;\n\n        if (ch == '(') {\n            paren_stack.push(ch);\n        } else if (ch == ')') {\n            paren_stack.pop();\n        }\n\n        // If the stack is empty, we have a balanced group\n        if (paren_stack.empty()) {\n            result.push_back(current_group);\n            current_group.clear();\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/2", "generation": "#include <iostream>\n#include <cmath>\n\nfloat truncate_number(float number) {\n    // Extract the integer part using floor\n    float integer_part = floor(number);\n    \n    // Subtract the integer part from the original number to get the decimal part\n    float decimal_part = number - integer_part;\n    \n    return decimal_part;\n}\n\n"}
{"task_id": "CPP/3", "generation": "#include <vector>\nusing namespace std;\n\nbool below_zero(vector<int> operations) {\n    int balance = 0;\n    for (int operation : operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/4", "generation": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <numeric> // for std::accumulate\n\nusing namespace std;\n\nfloat mean_absolute_deviation(vector<float> numbers) {\n    // Step 1: Calculate the mean of the dataset\n    float sum = accumulate(numbers.begin(), numbers.end(), 0.0);\n    float mean = sum / numbers.size();\n\n    // Step 2: Compute the absolute difference between each element and the mean\n    float absolute_deviations_sum = 0.0;\n    for (float number : numbers) {\n        absolute_deviations_sum += abs(number - mean);\n    }\n\n    // Step 3: Divide the sum of absolute deviations by the number of elements\n    float mad = absolute_deviations_sum / numbers.size();\n\n    return mad;\n}\n\n"}
{"task_id": "CPP/5", "generation": "#include <vector>\n#include <iostream>\n\nusing namespace std;\n\nvector<int> intersperse(vector<int> numbers, int delimeter) {\n    // Check if the input vector is empty\n    if (numbers.empty()) {\n        return {};\n    }\n\n    // Create a new vector to store the result\n    vector<int> result;\n\n    // Iterate through the input vector\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        // Insert the current element\n        result.push_back(numbers[i]);\n\n        // Insert the delimiter after the current element, except for the last element\n        if (i < numbers.size() - 1) {\n            result.push_back(delimeter);\n        }\n    }\n\n    // Return the result vector\n    return result;\n}\n\n// Test the function\n"}
{"task_id": "CPP/6", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<int> parse_nested_parens(string paren_string) {\n    vector<int> result;\n    stringstream ss(paren_string);\n    string group;\n    \n    while (ss >> group) {\n        int max_depth = 0;\n        int current_depth = 0;\n        \n        for (char c : group) {\n            if (c == '(') {\n                current_depth++;\n                if (current_depth > max_depth) {\n                    max_depth = current_depth;\n                }\n            } else if (c == ')') {\n                current_depth--;\n            }\n        }\n        \n        result.push_back(max_depth);\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/7", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> filter_by_substring(vector<string> strings, string substring) {\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.find(substring) != string::npos) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/8", "generation": "#include <vector>\n#include <numeric> // For std::accumulate\n\nusing namespace std;\n\nvector<int> sum_product(const vector<int>& numbers) {\n    // Initialize sum to 0 and product to 1\n    int sum = 0;\n    int product = 1;\n\n    // Iterate through the vector\n    for (int num : numbers) {\n        sum += num;\n        product *= num;\n    }\n\n    // Return the result as a vector\n    return {sum, product};\n}\n\n// Example usage\n"}
{"task_id": "CPP/9", "generation": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<int> rolling_max(vector<int> numbers) {\n    vector<int> result;\n    if (numbers.empty()) {\n        return result; // Return an empty vector if the input is empty\n    }\n\n    int current_max = numbers[0]; // Initialize the current max with the first element\n    result.push_back(current_max); // The first element of the result is the same as the input\n\n    for (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > current_max) {\n            current_max = numbers[i]; // Update the current max if a larger element is found\n        }\n        result.push_back(current_max); // Add the current max to the result vector\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/10", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nbool is_palindrome(const string& str) {\n    // Test if given string is a palindrome\n    string s(str.rbegin(), str.rend());\n    return s == str;\n}\n\nstring make_palindrome(const string& str) {\n    // Find the shortest palindrome that begins with a supplied string\n    for (size_t i = 0; i <= str.size(); ++i) {\n        string suffix = str.substr(i);\n        if (is_palindrome(suffix)) {\n            string prefix = str.substr(0, i);\n            string reversed_prefix = string(prefix.rbegin(), prefix.rend());\n            return str + reversed_prefix;\n        }\n    }\n    return str; // This line should never be reached if the input is valid\n}\n\n"}
{"task_id": "CPP/11", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring string_xor(string a, string b) {\n    // Ensure both strings are of the same length\n    if (a.length() != b.length()) {\n        throw invalid_argument(\"Input strings must be of the same length\");\n    }\n\n    string result = \"\";\n    for (size_t i = 0; i < a.length(); ++i) {\n        // Perform XOR operation: '0' ^ '0' = '0', '1' ^ '1' = '0', '0' ^ '1' = '1', '1' ^ '0' = '1'\n        result += (a[i] == b[i]) ? '0' : '1';\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/12", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring longest(vector<string> strings) {\n    // Check if the vector is empty\n    if (strings.empty()) {\n        return \"\"; // Return an empty string to represent None\n    }\n\n    // Initialize variables to keep track of the longest string\n    string longest_string = strings[0];\n\n    // Iterate through the vector to find the longest string\n    for (const string& str : strings) {\n        if (str.length() > longest_string.length()) {\n            longest_string = str;\n        }\n    }\n\n    return longest_string;\n}\n\n"}
{"task_id": "CPP/13", "generation": "#include <iostream>\nusing namespace std;\n\nint greatest_common_divisor(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\n"}
{"task_id": "CPP/14", "generation": "#include<iostream>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> all_prefixes(const string& str) {\n    vector<string> prefixes;\n    for (size_t i = 1; i <= str.size(); ++i) {\n        prefixes.push_back(str.substr(0, i));\n    }\n    return prefixes;\n}\n\n"}
{"task_id": "CPP/15", "generation": "#include <iostream>\n#include <sstream>\n#include <string>\n\nusing namespace std;\n\nstring string_sequence(int n) {\n    // Create a stringstream to build the result\n    stringstream ss;\n    \n    // Loop from 0 to n inclusive\n    for (int i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    \n    // Convert the stringstream to a string\n    string result = ss.str();\n    \n    // Remove the trailing space\n    if (!result.empty()) {\n        result.pop_back();\n    }\n    \n    // Return the result\n    return result;\n}\n\n// Example usage\n"}
{"task_id": "CPP/16", "generation": "#include <iostream>\n#include <string>\n#include <unordered_set>\n#include <algorithm>\n\nusing namespace std;\n\nint count_distinct_characters(string str) {\n    // Convert the string to lowercase\n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    \n    // Use an unordered_set to store distinct characters\n    unordered_set<char> distinct_chars;\n    \n    // Iterate through the string and add each character to the set\n    for (char c : str) {\n        distinct_chars.insert(c);\n    }\n    \n    // The size of the set is the number of distinct characters\n    return distinct_chars.size();\n}\n\n"}
{"task_id": "CPP/17", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<int> parse_music(string music_string) {\n    vector<int> beats;\n    stringstream ss(music_string);\n    string note;\n\n    while (ss >> note) {\n        if (note == \"o\") {\n            beats.push_back(4);\n        } else if (note == \"o|\") {\n            beats.push_back(2);\n        } else if (note == \".|\") {\n            beats.push_back(1);\n        }\n    }\n\n    return beats;\n}\n\n"}
{"task_id": "CPP/18", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint how_many_times(string str, string substring) {\n    int count = 0;\n    int sub_len = substring.length();\n    int str_len = str.length();\n\n    // If either the string or the substring is empty, return 0\n    if (sub_len == 0 || str_len == 0) {\n        return 0;\n    }\n\n    // Iterate through the string and check for the substring\n    for (int i = 0; i <= str_len - sub_len; ++i) {\n        // Check if the substring matches starting from position i\n        if (str.substr(i, sub_len) == substring) {\n            ++count;\n        }\n    }\n\n    return count;\n}\n\n"}
{"task_id": "CPP/19", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <vector>\n#include <map>\n#include <algorithm>\n\nusing namespace std;\n\nstring sort_numbers(string numbers) {\n    // Mapping from number words to their corresponding numerical values\n    map<string, int> number_map = {\n        {\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3}, {\"four\", 4},\n        {\"five\", 5}, {\"six\", 6}, {\"seven\", 7}, {\"eight\", 8}, {\"nine\", 9}\n    };\n\n    // Reverse mapping from numerical values to number words\n    map<int, string> reverse_map = {\n        {0, \"zero\"}, {1, \"one\"}, {2, \"two\"}, {3, \"three\"}, {4, \"four\"},\n        {5, \"five\"}, {6, \"six\"}, {7, \"seven\"}, {8, \"eight\"}, {9, \"nine\"}\n    };\n\n    // Tokenize the input string\n    stringstream ss(numbers);\n    string token;\n    vector<string> tokens;\n    while (ss >> token) {\n        tokens.push_back(token);\n    }\n\n    // Convert tokens to numerical values and sort them\n    vector<int> num_values;\n    for (const string& word : tokens) {\n        num_values.push_back(number_map[word]);\n    }\n    sort(num_values.begin(), num_values.end());\n\n    // Convert sorted numerical values back to words and join them into a single string\n    string sorted_numbers;\n    for (int i = 0; i < num_values.size(); ++i) {\n        sorted_numbers += reverse_map[num_values[i]];\n        if (i < num_values.size() - 1) {\n            sorted_numbers += \" \";\n        }\n    }\n\n    return sorted_numbers;\n}\n\n"}
{"task_id": "CPP/20", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\npair<float, float> find_closest_elements(vector<float> numbers) {\n    // Sort the vector\n    sort(numbers.begin(), numbers.end());\n    \n    // Initialize variables to store the closest pair and the minimum difference\n    pair<float, float> closest_pair = {numbers[0], numbers[1]};\n    float min_diff = abs(numbers[1] - numbers[0]);\n    \n    // Iterate through the sorted vector to find the closest pair\n    for (size_t i = 1; i < numbers.size() - 1; ++i) {\n        float diff = abs(numbers[i + 1] - numbers[i]);\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = {numbers[i], numbers[i + 1]};\n        }\n    }\n    \n    // Ensure the pair is returned in the correct order\n    if (closest_pair.first > closest_pair.second) {\n        swap(closest_pair.first, closest_pair.second);\n    }\n    \n    return closest_pair;\n}\n\n"}
{"task_id": "CPP/21", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm> // for std::min_element and std::max_element\n\nusing namespace std;\n\nvector<float> rescale_to_unit(vector<float> numbers) {\n    // Find the minimum and maximum values in the vector\n    float min_val = *min_element(numbers.begin(), numbers.end());\n    float max_val = *max_element(numbers.begin(), numbers.end());\n\n    // Apply the linear transformation\n    vector<float> rescaled_numbers;\n    for (float num : numbers) {\n        float rescaled_num = (num - min_val) / (max_val - min_val);\n        rescaled_numbers.push_back(rescaled_num);\n    }\n\n    return rescaled_numbers;\n}\n\n"}
{"task_id": "CPP/22", "generation": "#include <iostream>\n#include <vector>\n#include <list>\n#include <boost/any.hpp>\n\ntypedef std::list<boost::any> list_any;\n\nstd::vector<int> filter_integers(list_any values) {\n    std::vector<int> result;\n    for (const auto& value : values) {\n        if (value.type() == typeid(int)) {\n            result.push_back(boost::any_cast<int>(value));\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/23", "generation": "#include <stdio.h>\n#include <string.h>\n\nint custom_strlen(const char* str) {\n    return (int)strlen(str);\n}\n\n"}
{"task_id": "CPP/24", "generation": "#include<stdio.h>\n\nint largest_divisor(int n) {\n    if (n <= 1) {\n        return -1; // No valid divisor for n <= 1\n    }\n\n    for (int i = n / 2; i >= 1; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n\n    return -1; // This line should never be reached\n}\n\n"}
{"task_id": "CPP/25", "generation": "#include <vector>\n#include <iostream>\nusing namespace std;\n\nvector<int> factorize(int n) {\n    vector<int> factors;\n    // Check for number of 2s that divide n\n    while (n % 2 == 0) {\n        factors.push_back(2);\n        n = n / 2;\n    }\n    // n must be odd at this point, so we can skip even numbers\n    for (int i = 3; i * i <= n; i += 2) {\n        // While i divides n, add i and divide n\n        while (n % i == 0) {\n            factors.push_back(i);\n            n = n / i;\n        }\n    }\n    // This condition is to check if n is a prime number greater than 2\n    if (n > 2) {\n        factors.push_back(n);\n    }\n    return factors;\n}\n\n"}
{"task_id": "CPP/26", "generation": "#include <iostream>\n#include <vector>\n#include <unordered_set>\n\nusing namespace std;\n\nvector<int> remove_duplicates(vector<int> numbers) {\n    vector<int> result;\n    unordered_set<int> seen;\n\n    for (int num : numbers) {\n        if (seen.find(num) == seen.end()) {\n            // If the number is not found in the set, add it to the result and mark it as seen\n            result.push_back(num);\n            seen.insert(num);\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/27", "generation": "#include <iostream>\n#include <string>\n#include <cctype> // for isupper and islower\n\nusing namespace std;\n\nstring flip_case(string str) {\n    for (int i = 0; i < str.length(); ++i) {\n        if (isupper(str[i])) {\n            str[i] = tolower(str[i]); // Convert uppercase to lowercase\n        } else if (islower(str[i])) {\n            str[i] = toupper(str[i]); // Convert lowercase to uppercase\n        }\n    }\n    return str;\n}\n\n"}
{"task_id": "CPP/28", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring concatenate(const vector<string>& strings) {\n    string result;\n    for (const auto& str : strings) {\n        result += str;\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/29", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> filter_by_prefix(vector<string> strings, string prefix) {\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.find(prefix) == 0) {  // Check if the string starts with the prefix\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/30", "generation": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<float> get_positive(vector<float> l) {\n    vector<float> positive_numbers;\n    for (float num : l) {\n        if (num > 0) {\n            positive_numbers.push_back(num);\n        }\n    }\n    return positive_numbers;\n}\n\n"}
{"task_id": "CPP/31", "generation": "#include <cstdio>\n#include <cmath>\n\nbool is_prime(long long n) {\n    // Handle edge cases\n    if (n <= 1) return false;\n    if (n == 2) return true; // 2 is the only even prime number\n    if (n % 2 == 0) return false; // Other even numbers are not prime\n\n    // Check for factors from 3 to sqrt(n)\n    long long limit = static_cast<long long>(sqrt(n));\n    for (long long i = 3; i <= limit; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/32", "generation": "#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n\ndouble poly(vector<double> xs, double x) {\n    /* \n    Evaluates polynomial with coefficients xs at point x. \n    return xs[0] + xs[1] * x + xs[2] * x^2 + .... xs[n] * x^n \n    */\n    double sum = 0;\n    for (int i = 0; i < xs.size(); i++) {\n        sum += xs[i] * pow(x, i);\n    }\n    return sum;\n}\n\nvector<double> poly_derivative(vector<double> xs) {\n    /* \n    Computes the derivative of the polynomial with coefficients xs.\n    */\n    vector<double> derivative;\n    for (int i = 1; i < xs.size(); i++) {\n        derivative.push_back(i * xs[i]);\n    }\n    return derivative;\n}\n\ndouble find_zero(vector<double> xs) {\n    /*\n    xs are coefficients of a polynomial. find_zero finds x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many. \n    Moreover, find_zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution.\n    */\n    double x0 = 0.0; // Initial guess\n    double tolerance = 1e-7; // Tolerance for convergence\n    int max_iterations = 1000; // Maximum number of iterations\n\n    vector<double> derivative_xs = poly_derivative(xs);\n\n    for (int i = 0; i < max_iterations; i++) {\n        double fx = poly(xs, x0);\n        double dfx = poly(derivative_xs, x0);\n\n        if (fabs(fx) < tolerance) {\n            return x0; // Converged to a root\n        }\n\n        if (dfx == 0) {\n            // Avoid division by zero\n            x0 += 1.0; // Adjust initial guess\n            continue;\n        }\n\n        x0 = x0 - fx / dfx; // Newton-Raphson update\n    }\n\n    return x0; // Return the best approximation after max iterations\n}\n\n"}
{"task_id": "CPP/33", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> sort_third(vector<int> l) {\n    // Step 1: Identify the indices divisible by three\n    vector<int> indices;\n    for (size_t i = 0; i < l.size(); ++i) {\n        if ((i + 1) % 3 == 0) {  // Indices are 0-based, so we check (i + 1) % 3\n            indices.push_back(i);\n        }\n    }\n\n    // Step 2: Extract the values at these indices\n    vector<int> values;\n    for (int index : indices) {\n        values.push_back(l[index]);\n    }\n\n    // Step 3: Sort the extracted values\n    sort(values.begin(), values.end());\n\n    // Step 4: Replace the original values with the sorted values\n    for (size_t i = 0; i < indices.size(); ++i) {\n        l[indices[i]] = values[i];\n    }\n\n    // Step 5: Return the modified vector\n    return l;\n}\n\n// Example usage\n"}
{"task_id": "CPP/34", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> unique(vector<int> l) {\n    // Step 1: Sort the vector\n    sort(l.begin(), l.end());\n    \n    // Step 2: Remove duplicates\n    l.erase(unique(l.begin(), l.end()), l.end());\n    \n    return l;\n}\n\n"}
{"task_id": "CPP/35", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm> // for std::max_element\n\nusing namespace std;\n\nfloat max_element(const vector<float>& l) {\n    // Check if the vector is empty\n    if (l.empty()) {\n        throw invalid_argument(\"Vector is empty\");\n    }\n    \n    // Use std::max_element to find the maximum element\n    return *max_element(l.begin(), l.end());\n}\n\n"}
{"task_id": "CPP/36", "generation": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint fizz_buzz(int n) {\n    int count = 0;\n    for (int i = 0; i < n; ++i) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            string num_str = to_string(i);\n            for (char c : num_str) {\n                if (c == '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/37", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<float> sort_even(vector<float> l) {\n    // Extract values at even indices\n    vector<float> even_values;\n    for (size_t i = 0; i < l.size(); i += 2) {\n        even_values.push_back(l[i]);\n    }\n\n    // Sort the extracted values\n    sort(even_values.begin(), even_values.end());\n\n    // Reconstruct the output vector\n    vector<float> result = l;\n    size_t even_index = 0;\n    for (size_t i = 0; i < l.size(); i += 2) {\n        result[i] = even_values[even_index++];\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/38", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring decode_cyclic(string s){ \n    // returns decoded string by reversing the cycling of groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l = s.length();\n    int num = (l + 2) / 3;\n    string x, output;\n    int i;\n    for (i = 0; i * 3 < l; i++)\n    {\n        // reverse the cycling in each group. Unless group has fewer elements than 3.\n        x = s.substr(i * 3, 3);\n        if (x.length() == 3) x = x[2] + x.substr(0, 2);\n        output = output + x;\n    }\n    return output;\n}\n\n"}
{"task_id": "CPP/39", "generation": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n// Function to check if a number is prime\nbool is_prime(int num) {\n    if (num <= 1) return false;\n    if (num == 2) return true;\n    if (num % 2 == 0) return false;\n    for (int i = 3; i <= sqrt(num); i += 2) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\n// Function to generate the n-th prime Fibonacci number\nint prime_fib(int n) {\n    if (n <= 0) return -1; // Invalid input\n    int a = 1, b = 1, count = 0;\n    while (true) {\n        int next = a + b;\n        a = b;\n        b = next;\n        if (is_prime(next)) {\n            count++;\n            if (count == n) {\n                return next;\n            }\n        }\n    }\n}\n\n"}
{"task_id": "CPP/40", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nbool triples_sum_to_zero(vector<int> l) {\n    // Sort the vector\n    sort(l.begin(), l.end());\n    \n    int n = l.size();\n    \n    // Iterate through the vector\n    for (int i = 0; i < n - 2; ++i) {\n        // Skip duplicates for the first element\n        if (i > 0 && l[i] == l[i - 1]) continue;\n        \n        int left = i + 1;\n        int right = n - 1;\n        \n        while (left < right) {\n            int sum = l[i] + l[left] + l[right];\n            \n            if (sum == 0) {\n                return true;\n            } else if (sum < 0) {\n                // Move the left pointer to the right to increase the sum\n                ++left;\n            } else {\n                // Move the right pointer to the left to decrease the sum\n                --right;\n            }\n        }\n    }\n    \n    return false;\n}\n\n// Example usage\n"}
{"task_id": "CPP/41", "generation": "#include<stdio.h>\n\nint car_race_collision(int n) {\n    return n * n;\n}\n\n"}
{"task_id": "CPP/42", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<int> incr_list(vector<int> l) {\n    // Create a new vector to store the incremented values\n    vector<int> result;\n    \n    // Iterate through each element in the input vector\n    for (int i = 0; i < l.size(); i++) {\n        // Increment the element by 1 and add it to the result vector\n        result.push_back(l[i] + 1);\n    }\n    \n    // Return the result vector\n    return result;\n}\n\n"}
{"task_id": "CPP/43", "generation": "#include <vector>\n#include <unordered_set>\nusing namespace std;\n\nbool pairs_sum_to_zero(vector<int> l) {\n    unordered_set<int> seen;\n    \n    for (int num : l) {\n        if (seen.find(-num) != seen.end()) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    \n    return false;\n}\n\n// Example usage\n"}
{"task_id": "CPP/44", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nstring change_base(int x, int base) {\n    if (x == 0) return \"0\"; // Special case for zero\n\n    string result = \"\";\n    while (x > 0) {\n        int remainder = x % base;\n        result += to_string(remainder); // Append the remainder to the result string\n        x /= base;\n    }\n\n    // Since we appended the remainders in reverse order, we need to reverse the string\n    reverse(result.begin(), result.end());\n\n    return result;\n}\n\n"}
{"task_id": "CPP/45", "generation": "#include <stdio.h>\n\nfloat triangle_area(float a, float h) {\n    return 0.5 * a * h;\n}\n\n"}
{"task_id": "CPP/46", "generation": "#include <stdio.h>\n\nint fib4(int n) {\n    // Base cases\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n\n    // Initialize the first four elements of the sequence\n    int a = 0, b = 0, c = 2, d = 0;\n    int result = 0;\n\n    // Compute the sequence iteratively\n    for (int i = 4; i <= n; ++i) {\n        result = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = result;\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/47", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nfloat median(vector<float> l) {\n    // Step 1: Sort the vector\n    sort(l.begin(), l.end());\n\n    // Step 2: Determine the size of the vector\n    int n = l.size();\n\n    // Step 3: Calculate the median\n    if (n % 2 == 1) {\n        // If the number of elements is odd, return the middle element\n        return l[n / 2];\n    } else {\n        // If the number of elements is even, return the average of the two middle elements\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    }\n}\n\n"}
{"task_id": "CPP/48", "generation": "#include <iostream>\n#include <string>\n\n// Function to check if a given string is a palindrome\nbool is_palindrome(const std::string& text) {\n    int left = 0;\n    int right = text.length() - 1;\n\n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n\n// Test cases\n"}
{"task_id": "CPP/49", "generation": "#include <stdio.h>\n\nint modp(int n, int p) {\n    if (n == 0) return 1; // 2^0 % p is always 1\n\n    long long result = 1;\n    long long base = 2;\n\n    while (n > 0) {\n        if (n % 2 == 1) {\n            result = (result * base) % p;\n        }\n        base = (base * base) % p;\n        n /= 2;\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/50", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring encode_shift(string s){\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n\nstring decode_shift(string s){\n    // takes as input string encoded with encode_shift function. Returns decoded string.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5-(int)'a'+26)%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n\n"}
{"task_id": "CPP/51", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nstring remove_vowels(string text) {\n    string result;\n    for (char c : text) {\n        // Check if the character is a vowel (both uppercase and lowercase)\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' &&\n            c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n            result += c;\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/52", "generation": "#include <vector>\nusing namespace std;\n\nbool below_threshold(vector<int> l, int t) {\n    for (int num : l) {\n        if (num >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Example usage\n"}
{"task_id": "CPP/53", "generation": "#include <iostream>\n\nint add(int x, int y) {\n    return x + y;\n}\n\n"}
{"task_id": "CPP/54", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nbool same_chars(string s0, string s1) {\n    // Sort both strings\n    sort(s0.begin(), s0.end());\n    sort(s1.begin(), s1.end());\n    \n    // Compare the sorted strings\n    return s0 == s1;\n}\n\n"}
{"task_id": "CPP/55", "generation": "#include<iostream>\nusing namespace std;\n\nint fib(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}\n\n"}
{"task_id": "CPP/56", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool correct_bracketing(string brackets) {\n    int count = 0;\n    for (char bracket : brackets) {\n        if (bracket == '<') {\n            count++;\n        } else if (bracket == '>') {\n            count--;\n        }\n        // If count goes negative, it means there are unmatched closing brackets\n        if (count < 0) {\n            return false;\n        }\n    }\n    // If count is zero, all brackets are matched\n    return count == 0;\n}\n\n"}
{"task_id": "CPP/57", "generation": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nbool isMonotonic(const vector<float>& l) {\n    bool increasing = true;\n    bool decreasing = true;\n\n    for (size_t i = 1; i < l.size(); ++i) {\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n        }\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n        }\n    }\n\n    return increasing || decreasing;\n}\n\n"}
{"task_id": "CPP/58", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <set>\n\nusing namespace std;\n\nvector<int> common(vector<int> l1, vector<int> l2) {\n    // Sort both vectors\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n\n    // Use a set to store unique common elements\n    set<int> commonSet;\n\n    // Use two pointers to traverse both vectors\n    int i = 0, j = 0;\n    while (i < l1.size() && j < l2.size()) {\n        if (l1[i] == l2[j]) {\n            commonSet.insert(l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n\n    // Convert the set to a vector\n    vector<int> result(commonSet.begin(), commonSet.end());\n    return result;\n}\n\n"}
{"task_id": "CPP/59", "generation": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n// Function to check if a number is prime\nbool is_prime(int num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 == 0 || num % 3 == 0) return false;\n    for (int i = 5; i * i <= num; i += 6) {\n        if (num % i == 0 || num % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\n// Function to find the largest prime factor of n\nint largest_prime_factor(int n) {\n    int largest_prime = -1;\n    \n    // Check for the smallest prime factor (2)\n    while (n % 2 == 0) {\n        largest_prime = 2;\n        n /= 2;\n    }\n    \n    // Check for odd factors from 3 onwards\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n        }\n    }\n    \n    // If n is still greater than 2, then n itself is a prime factor\n    if (n > 2) {\n        largest_prime = n;\n    }\n    \n    return largest_prime;\n}\n\n"}
{"task_id": "CPP/60", "generation": "#include<iostream>\nusing namespace std;\n\nint sum_to_n(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/61", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool correct_bracketing(string brackets) {\n    int count = 0;\n    for (char bracket : brackets) {\n        if (bracket == '(') {\n            count++;\n        } else if (bracket == ')') {\n            count--;\n        }\n        // If count goes negative, it means there are unmatched closing brackets\n        if (count < 0) {\n            return false;\n        }\n    }\n    // If count is zero, all brackets are matched\n    return count == 0;\n}\n\n"}
{"task_id": "CPP/62", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<float> derivative(vector<float> xs) {\n    vector<float> result;\n    for (size_t i = 1; i < xs.size(); ++i) {\n        result.push_back(i * xs[i]);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/63", "generation": "#include <stdio.h>\n\nint fibfib(int n) {\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n\n    int a = 0, b = 0, c = 1;\n    int result = 0;\n\n    for (int i = 3; i <= n; ++i) {\n        result = a + b + c;\n        a = b;\n        b = c;\n        c = result;\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/64", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nint vowels_count(string s) {\n    int count = 0;\n    transform(s.begin(), s.end(), s.begin(), ::tolower); // Convert the string to lowercase\n\n    for (char c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n\n    // Check if 'y' is at the end of the word\n    if (s.length() > 0 && s.back() == 'y') {\n        count++;\n    }\n\n    return count;\n}\n\n// Example usage\n"}
{"task_id": "CPP/65", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nstring circular_shift(int x, int shift) {\n    // Convert the integer to a string\n    string num_str = to_string(x);\n    int num_digits = num_str.length();\n\n    // If shift is greater than or equal to the number of digits, reverse the string\n    if (shift >= num_digits) {\n        reverse(num_str.begin(), num_str.end());\n        return num_str;\n    }\n\n    // Perform the circular shift\n    string shifted_str = num_str.substr(num_digits - shift) + num_str.substr(0, num_digits - shift);\n\n    return shifted_str;\n}\n\n"}
{"task_id": "CPP/66", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint digitSum(string s) {\n    int sum = 0;\n    for (char c : s) {\n        if (c >= 'A' && c <= 'Z') {\n            sum += c;\n        }\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/67", "generation": "#include<iostream>\n#include<string>\n#include<sstream>\nusing namespace std;\n\nint fruit_distribution(string s, int n) {\n    // Initialize variables to store the number of apples and oranges\n    int apples = 0, oranges = 0;\n    \n    // Use a stringstream to parse the input string\n    stringstream ss(s);\n    string temp;\n    \n    // Read the number of apples\n    ss >> apples;\n    ss >> temp; // Skip the word \"apples\"\n    ss >> temp; // Skip the word \"and\"\n    \n    // Read the number of oranges\n    ss >> oranges;\n    \n    // Calculate the number of mangoes\n    int mangoes = n - apples - oranges;\n    \n    return mangoes;\n}\n\n"}
{"task_id": "CPP/68", "generation": "#include<vector>\nusing namespace std;\n\nvector<int> pluck(vector<int> arr) {\n    // Initialize variables to store the smallest even value and its index\n    int smallest_even = -1;\n    int smallest_index = -1;\n    \n    // Iterate through the vector\n    for (int i = 0; i < arr.size(); ++i) {\n        // Check if the current element is even\n        if (arr[i] % 2 == 0) {\n            // If it's the first even value found or it's smaller than the current smallest even value\n            if (smallest_even == -1 || arr[i] < smallest_even) {\n                smallest_even = arr[i];\n                smallest_index = i;\n            }\n        }\n    }\n    \n    // If no even value was found, return an empty vector\n    if (smallest_even == -1) {\n        return {};\n    }\n    \n    // Return the smallest even value and its index\n    return {smallest_even, smallest_index};\n}\n"}
{"task_id": "CPP/69", "generation": "#include <vector>\n#include <unordered_map>\n#include <algorithm>\nusing namespace std;\n\nint search(vector<int> lst) {\n    // Step 1: Count the frequency of each integer\n    unordered_map<int, int> frequencyMap;\n    for (int num : lst) {\n        frequencyMap[num]++;\n    }\n\n    // Step 2: Find the greatest integer that meets the criteria\n    int maxValidInteger = -1;\n    for (const auto& pair : frequencyMap) {\n        int num = pair.first;\n        int freq = pair.second;\n        if (freq >= num) {\n            if (num > maxValidInteger) {\n                maxValidInteger = num;\n            }\n        }\n    }\n\n    // Step 3: Return the result\n    return maxValidInteger;\n}\n\n// Example usage\n"}
{"task_id": "CPP/70", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> strange_sort_list(vector<int> lst) {\n    // Sort the input vector in ascending order\n    sort(lst.begin(), lst.end());\n    \n    // Initialize the result vector\n    vector<int> result;\n    \n    // Initialize two pointers: one at the beginning and one at the end\n    int start = 0;\n    int end = lst.size() - 1;\n    \n    // Alternate between picking elements from the start and end\n    while (start <= end) {\n        if (start <= end) {\n            result.push_back(lst[start]);\n            start++;\n        }\n        if (start <= end) {\n            result.push_back(lst[end]);\n            end--;\n        }\n    }\n    \n    return result;\n}\n\n// Example usage\n"}
{"task_id": "CPP/71", "generation": "#include<stdio.h>\n#include<math.h>\n\nfloat triangle_area(float a, float b, float c) {\n    // Check if the sides can form a valid triangle\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n\n    // Calculate the semi-perimeter\n    float s = (a + b + c) / 2;\n\n    // Calculate the area using Heron's formula\n    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n\n    // Round the area to 2 decimal points\n    area = round(area * 100) / 100;\n\n    return area;\n}\n\n"}
{"task_id": "CPP/72", "generation": "#include <vector>\n#include <numeric> // for std::accumulate\n#include <algorithm> // for std::reverse\n\nbool will_it_fly(vector<int> q, int w) {\n    // Check if the vector is palindromic\n    vector<int> reversed_q = q;\n    reverse(reversed_q.begin(), reversed_q.end());\n    if (q != reversed_q) {\n        return false;\n    }\n\n    // Calculate the sum of the vector elements\n    int sum = accumulate(q.begin(), q.end(), 0);\n\n    // Check if the sum is less than or equal to the maximum possible weight\n    return sum <= w;\n}\n"}
{"task_id": "CPP/73", "generation": "#include <vector>\n#include <iostream>\nusing namespace std;\n\nint smallest_change(vector<int> arr) {\n    int left = 0;\n    int right = arr.size() - 1;\n    int changes = 0;\n\n    while (left < right) {\n        if (arr[left] != arr[right]) {\n            changes++;\n        }\n        left++;\n        right--;\n    }\n\n    return changes;\n}\n\n"}
{"task_id": "CPP/74", "generation": "#include <vector>\n#include <string>\n#include <numeric> // for accumulate\n\nusing namespace std;\n\nint total_chars(const vector<string>& lst) {\n    return accumulate(lst.begin(), lst.end(), 0, [](int sum, const string& s) {\n        return sum + s.size();\n    });\n}\n\nvector<string> total_match(vector<string> lst1, vector<string> lst2) {\n    int total_chars_lst1 = total_chars(lst1);\n    int total_chars_lst2 = total_chars(lst2);\n\n    if (total_chars_lst1 <= total_chars_lst2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n"}
{"task_id": "CPP/75", "generation": "#include <iostream>\n#include <vector>\n#include <cmath>\n\nusing namespace std;\n\n// Function to generate a list of prime numbers less than 100 using Sieve of Eratosthenes\nvector<int> generate_primes() {\n    const int limit = 100;\n    vector<bool> is_prime(limit, true);\n    is_prime[0] = is_prime[1] = false; // 0 and 1 are not prime numbers\n\n    for (int i = 2; i * i < limit; ++i) {\n        if (is_prime[i]) {\n            for (int j = i * i; j < limit; j += i) {\n                is_prime[j] = false;\n            }\n        }\n    }\n\n    vector<int> primes;\n    for (int i = 2; i < limit; ++i) {\n        if (is_prime[i]) {\n            primes.push_back(i);\n        }\n    }\n\n    return primes;\n}\n\n// Function to check if the given number is the multiplication of 3 prime numbers\nbool is_multiply_prime(int a) {\n    vector<int> primes = generate_primes();\n    int n = primes.size();\n\n    // Check all combinations of three primes\n    for (int i = 0; i < n; ++i) {\n        for (int j = i + 1; j < n; ++j) {\n            for (int k = j + 1; k < n; ++k) {\n                if (primes[i] * primes[j] * primes[k] == a) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n}\n\n"}
{"task_id": "CPP/76", "generation": "#include <iostream>\n#include <cmath>\n\nbool is_simple_power(int x, int n) {\n    // Special case: if n is 1, the only power of 1 is 1 itself\n    if (n == 1) {\n        return x == 1;\n    }\n\n    // Iterate through possible values of k\n    int power = 1;\n    while (power < x) {\n        power *= n;\n        if (power == x) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n"}
{"task_id": "CPP/77", "generation": "#include <iostream>\n#include <cmath>\n\nbool iscube(int a) {\n    if (a < 0) {\n        // If a is negative, we need to handle the cube root of a negative number\n        a = -a;\n        double cubeRoot = cbrt(a);\n        int intCubeRoot = static_cast<int>(cubeRoot);\n        return (intCubeRoot * intCubeRoot * intCubeRoot == a);\n    } else {\n        // If a is non-negative, we can directly take the cube root\n        double cubeRoot = cbrt(a);\n        int intCubeRoot = static_cast<int>(cubeRoot);\n        return (intCubeRoot * intCubeRoot * intCubeRoot == a);\n    }\n}\n\n"}
{"task_id": "CPP/78", "generation": "#include <iostream>\n#include <string>\n#include <unordered_set>\nusing namespace std;\n\nint hex_key(string num) {\n    // Define the set of prime hexadecimal digits\n    unordered_set<char> prime_digits = {'2', '3', '5', '7', 'B', 'D'};\n    \n    // Initialize the count of prime digits\n    int count = 0;\n    \n    // Iterate through the input string\n    for (char c : num) {\n        // Check if the current character is in the set of prime digits\n        if (prime_digits.find(c) != prime_digits.end()) {\n            count++;\n        }\n    }\n    \n    // Return the count of prime digits\n    return count;\n}\n\n// Test cases\n"}
{"task_id": "CPP/79", "generation": "#include <iostream>\n#include <string>\n#include <algorithm> // for std::reverse\n\nusing namespace std;\n\nstring decimal_to_binary(int decimal) {\n    if (decimal == 0) {\n        return \"db0db\";\n    }\n\n    string binary;\n    while (decimal > 0) {\n        binary += (decimal % 2 == 0) ? '0' : '1';\n        decimal /= 2;\n    }\n\n    // Reverse the string to get the correct binary representation\n    reverse(binary.begin(), binary.end());\n\n    // Add the \"db\" characters at the beginning and end\n    return \"db\" + binary + \"db\";\n}\n\n"}
{"task_id": "CPP/80", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool is_happy(string s) {\n    // Check if the length of the string is less than 3\n    if (s.length() < 3) {\n        return false;\n    }\n\n    // Iterate through the string and check every 3 consecutive characters\n    for (int i = 0; i <= s.length() - 3; ++i) {\n        // Check if the 3 consecutive characters are distinct\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n\n    // If all 3 consecutive characters are distinct, return true\n    return true;\n}\n\n// Test cases\n"}
{"task_id": "CPP/81", "generation": "#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> numerical_letter_grade(vector<float> grades) {\n    vector<string> letter_grades;\n    \n    for (float gpa : grades) {\n        if (gpa == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (gpa > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (gpa > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (gpa > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (gpa > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (gpa > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (gpa > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (gpa > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (gpa > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (gpa > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (gpa > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (gpa > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n        }\n    }\n    \n    return letter_grades;\n}\n"}
{"task_id": "CPP/82", "generation": "#include <iostream>\n#include <string>\n#include <cmath>\nusing namespace std;\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true; // 2 is the only even prime number\n    if (n % 2 == 0) return false; // other even numbers are not prime\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nbool prime_length(string str) {\n    int length = str.length();\n    return is_prime(length);\n}\n\n"}
{"task_id": "CPP/83", "generation": "#include<stdio.h>\n#include<math.h>\n\nint starts_one_ends(int n) {\n    if (n == 1) {\n        return 1; // Special case: for n=1, the only number is 1 itself.\n    }\n    int count_start_with_1 = pow(10, n-1);\n    int count_end_with_1 = pow(10, n-1);\n    int count_both = pow(10, n-2);\n    \n    return count_start_with_1 + count_end_with_1 - count_both;\n}\n\n"}
{"task_id": "CPP/84", "generation": "#include <iostream>\n#include <string>\n#include <bitset>\n\nusing namespace std;\n\nstring solve(int N) {\n    // Step 1: Calculate the sum of digits\n    int sum = 0;\n    int temp = N;\n    while (temp > 0) {\n        sum += temp % 10;  // Add the last digit to the sum\n        temp /= 10;        // Remove the last digit\n    }\n\n    // Step 2: Convert the sum to binary\n    string binarySum = bitset<32>(sum).to_string();  // Convert to 32-bit binary string\n\n    // Step 3: Remove leading zeros\n    size_t pos = binarySum.find('1');  // Find the first '1'\n    if (pos != string::npos) {\n        binarySum = binarySum.substr(pos);  // Extract the substring from the first '1'\n    } else {\n        binarySum = \"0\";  // If no '1' is found, the sum was 0\n    }\n\n    return binarySum;\n}\n\n"}
{"task_id": "CPP/85", "generation": "#include <vector>\nusing namespace std;\n\nint add(vector<int> lst) {\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 2 != 0 && lst[i] % 2 == 0) { // Check if index is odd and element is even\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/86", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <sstream>\n\nusing namespace std;\n\nstring anti_shuffle(string s) {\n    // Create a stringstream to split the input string by spaces\n    stringstream ss(s);\n    string word;\n    string result;\n\n    // Process each word in the string\n    while (ss >> word) {\n        // Sort the characters of the word in ascending order\n        sort(word.begin(), word.end());\n        // Append the sorted word to the result string\n        result += word + \" \";\n    }\n\n    // Remove the trailing space if there is any\n    if (!result.empty()) {\n        result.pop_back();\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/87", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<vector<int>> get_row(vector<vector<int>> lst, int x) {\n    vector<vector<int>> coordinates;\n    \n    // Traverse the 2D vector to find occurrences of x\n    for (int i = 0; i < lst.size(); ++i) {\n        for (int j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                coordinates.push_back({i, j});\n            }\n        }\n    }\n    \n    // Sort coordinates by rows in ascending order\n    // For coordinates within the same row, sort by columns in descending order\n    sort(coordinates.begin(), coordinates.end(), [](const vector<int>& a, const vector<int>& b) {\n        if (a[0] == b[0]) {\n            return a[1] > b[1];\n        }\n        return a[0] < b[0];\n    });\n    \n    return coordinates;\n}\n\n// Example usage\n"}
{"task_id": "CPP/88", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> sort_array(vector<int> array) {\n    // Check if the array is empty or has only one element\n    if (array.empty() || array.size() == 1) {\n        return array;\n    }\n\n    // Calculate the sum of the first and last index values\n    int sum = array.front() + array.back();\n\n    // Create a copy of the array to sort\n    vector<int> sorted_array = array;\n\n    // Sort the array based on the sum\n    if (sum % 2 == 0) {\n        // Sort in descending order if the sum is even\n        sort(sorted_array.begin(), sorted_array.end(), greater<int>());\n    } else {\n        // Sort in ascending order if the sum is odd\n        sort(sorted_array.begin(), sorted_array.end());\n    }\n\n    return sorted_array;\n}\n"}
{"task_id": "CPP/89", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring encrypt(string s) {\n    string result = \"\";\n    int shift = 4; // 2 * 2 = 4\n\n    for (char c : s) {\n        if (c >= 'a' && c <= 'z') {\n            // Shift within lowercase letters\n            c = 'a' + (c - 'a' + shift) % 26;\n        } else if (c >= 'A' && c <= 'Z') {\n            // Shift within uppercase letters\n            c = 'A' + (c - 'A' + shift) % 26;\n        }\n        result += c;\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/90", "generation": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nint next_smallest(const std::vector<int>& lst) {\n    if (lst.size() < 2) {\n        return -1; // Return -1 as a sentinel value for None\n    }\n\n    // Create a copy of the vector and sort it\n    std::vector<int> sorted_lst = lst;\n    std::sort(sorted_lst.begin(), sorted_lst.end());\n\n    // Find the second smallest unique element\n    int smallest = sorted_lst[0];\n    for (size_t i = 1; i < sorted_lst.size(); ++i) {\n        if (sorted_lst[i] != smallest) {\n            return sorted_lst[i];\n        }\n    }\n\n    return -1; // Return -1 if there is no second smallest unique element\n}\n\n"}
{"task_id": "CPP/91", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <vector>\n\nusing namespace std;\n\nint is_bored(string S) {\n    int count = 0;\n    stringstream ss(S);\n    string sentence;\n    vector<string> sentences;\n\n    // Split the string into sentences based on delimiters '.', '?', '!'\n    while (getline(ss, sentence, '.')) {\n        sentences.push_back(sentence);\n    }\n    ss.clear();\n    ss.str(S);\n    while (getline(ss, sentence, '?')) {\n        sentences.push_back(sentence);\n    }\n    ss.clear();\n    ss.str(S);\n    while (getline(ss, sentence, '!')) {\n        sentences.push_back(sentence);\n    }\n\n    // Check each sentence to see if it starts with \"I\"\n    for (string s : sentences) {\n        // Trim leading whitespace\n        size_t start = s.find_first_not_of(\" \\t\\n\\r\\f\\v\");\n        if (start != string::npos) {\n            s = s.substr(start);\n        }\n        // Check if the sentence starts with \"I\"\n        if (s.length() > 0 && s[0] == 'I') {\n            count++;\n        }\n    }\n\n    return count;\n}\n\n"}
{"task_id": "CPP/92", "generation": "#include<stdio.h>\n#include<math.h>\n\nbool any_int(float a, float b, float c) {\n    // Check if all numbers are integers\n    if (floor(a) == a && floor(b) == b && floor(c) == c) {\n        // Convert floats to integers\n        int int_a = (int)a;\n        int int_b = (int)b;\n        int int_c = (int)c;\n        \n        // Check if one of the numbers is equal to the sum of the other two\n        if (int_a == int_b + int_c || int_b == int_a + int_c || int_c == int_a + int_b) {\n            return true;\n        }\n    }\n    return false;\n}\n\n"}
{"task_id": "CPP/93", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nstring encode(string message) {\n    string encodedMessage = \"\";\n    for (char &c : message) {\n        // Swap the case of the letter\n        if (islower(c)) {\n            c = toupper(c);\n        } else if (isupper(c)) {\n            c = tolower(c);\n        }\n\n        // Replace vowels with the letter that appears 2 places ahead\n        if (c == 'a' || c == 'A') {\n            c = (c == 'a') ? 'c' : 'C';\n        } else if (c == 'e' || c == 'E') {\n            c = (c == 'e') ? 'g' : 'G';\n        } else if (c == 'i' || c == 'I') {\n            c = (c == 'i') ? 'k' : 'K';\n        } else if (c == 'o' || c == 'O') {\n            c = (c == 'o') ? 'q' : 'Q';\n        } else if (c == 'u' || c == 'U') {\n            c = (c == 'u') ? 'w' : 'W';\n        }\n\n        encodedMessage += c;\n    }\n    return encodedMessage;\n}\n\n// Example usage\n"}
{"task_id": "CPP/94", "generation": "#include <iostream>\n#include <vector>\n#include <cmath>\nusing namespace std;\n\n// Function to check if a number is prime\nbool isPrime(int num) {\n    if (num <= 1) return false;\n    if (num == 2) return true;\n    if (num % 2 == 0) return false;\n    for (int i = 3; i <= sqrt(num); i += 2) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\n// Function to sum the digits of a number\nint sumOfDigits(int num) {\n    int sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}\n\nint skjkasdkd(vector<int> lst) {\n    int largestPrime = -1;\n    \n    // Find the largest prime in the list\n    for (int num : lst) {\n        if (isPrime(num) && num > largestPrime) {\n            largestPrime = num;\n        }\n    }\n    \n    // If no prime is found, return 0\n    if (largestPrime == -1) {\n        return 0;\n    }\n    \n    // Sum the digits of the largest prime\n    return sumOfDigits(largestPrime);\n}\n\n"}
{"task_id": "CPP/95", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\n#include<cctype> // for islower and isupper functions\nusing namespace std;\n\nbool check_dict_case(map<string, string> dict) {\n    // If the map is empty, return false\n    if (dict.empty()) {\n        return false;\n    }\n\n    bool all_lower = true;\n    bool all_upper = true;\n\n    for (const auto& pair : dict) {\n        const string& key = pair.first;\n\n        // Check if the key is a string\n        if (key.empty()) {\n            return false;\n        }\n\n        // Check if all characters in the key are either lower case or upper case\n        bool is_lower = true;\n        bool is_upper = true;\n\n        for (char c : key) {\n            if (!islower(c)) {\n                is_lower = false;\n            }\n            if (!isupper(c)) {\n                is_upper = false;\n            }\n        }\n\n        // If the key is neither all lower case nor all upper case, return false\n        if (!is_lower && !is_upper) {\n            return false;\n        }\n\n        // Update the overall lower and upper case flags\n        all_lower &= is_lower;\n        all_upper &= is_upper;\n    }\n\n    // Return true if all keys are either all lower case or all upper case\n    return all_lower || all_upper;\n}\n\n// Example usage\n"}
{"task_id": "CPP/96", "generation": "#include <vector>\n#include <cmath>\n\nusing namespace std;\n\nvector<int> count_up_to(int n) {\n    if (n <= 2) {\n        return {};\n    }\n\n    // Create a boolean array \"prime[0..n]\" and initialize\n    // all entries it as true. A value in prime[i] will\n    // finally be false if i is Not a prime, else true.\n    vector<bool> prime(n, true);\n\n    // 0 and 1 are not prime numbers\n    prime[0] = prime[1] = false;\n\n    for (int p = 2; p * p < n; p++) {\n        // If prime[p] is not changed, then it is a prime\n        if (prime[p] == true) {\n            // Update all multiples of p to false\n            for (int i = p * p; i < n; i += p) {\n                prime[i] = false;\n            }\n        }\n    }\n\n    // Collect all prime numbers\n    vector<int> primes;\n    for (int p = 2; p < n; p++) {\n        if (prime[p]) {\n            primes.push_back(p);\n        }\n    }\n\n    return primes;\n}\n\n// Example usage\n"}
{"task_id": "CPP/97", "generation": "#include<stdio.h>\n#include<math.h>\n\nint multiply(int a, int b) {\n    // Extract the unit digits of both numbers\n    int unit_digit_a = abs(a) % 10;\n    int unit_digit_b = abs(b) % 10;\n    \n    // Return the product of the unit digits\n    return unit_digit_a * unit_digit_b;\n}\n\n"}
{"task_id": "CPP/98", "generation": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint count_upper(string s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) { // Iterate through even indices\n        char c = s[i];\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/99", "generation": "#include <iostream>\n#include <string>\n#include <cmath>\n\nint closest_integer(std::string value) {\n    // Convert the string to a double\n    double number = std::stod(value);\n    \n    // Determine the closest integer\n    int closest;\n    if (number >= 0) {\n        closest = static_cast<int>(number + 0.5);\n    } else {\n        closest = static_cast<int>(number - 0.5);\n    }\n    \n    return closest;\n}\n\n"}
{"task_id": "CPP/100", "generation": "#include<vector>\nusing namespace std;\n\nvector<int> make_a_pile(int n) {\n    vector<int> result;\n    int current = n;\n    \n    while (result.size() < n) {\n        result.push_back(current);\n        if (current % 2 == 0) {\n            current += 2; // Next even number\n        } else {\n            current += 2; // Next odd number\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/101", "generation": "#include <vector>\n#include <string>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> words_string(string s) {\n    vector<string> words;\n    string word;\n    stringstream ss(s);\n    \n    // Use a stringstream to split the string by spaces and commas\n    while (getline(ss, word, ' ')) {\n        stringstream word_ss(word);\n        string subword;\n        while (getline(word_ss, subword, ',')) {\n            if (!subword.empty()) {\n                words.push_back(subword);\n            }\n        }\n    }\n    \n    return words;\n}\n"}
{"task_id": "CPP/102", "generation": "#include <stdio.h>\n\nint choose_num(int x, int y) {\n    // Ensure x is less than or equal to y\n    if (x > y) {\n        return -1;\n    }\n\n    // Start from the largest number in the range and move downwards\n    for (int i = y; i >= x; i--) {\n        // Check if the number is even\n        if (i % 2 == 0) {\n            return i;\n        }\n    }\n\n    // If no even number is found, return -1\n    return -1;\n}\n\n"}
{"task_id": "CPP/103", "generation": "#include <iostream>\n#include <cmath>\n#include <string>\nusing namespace std;\n\nstring rounded_avg(int n, int m) {\n    // Step 1: Check if n is greater than m\n    if (n > m) {\n        return \"-1\";\n    }\n    \n    // Step 2: Calculate the sum of integers from n to m\n    int sum = 0;\n    for (int i = n; i <= m; ++i) {\n        sum += i;\n    }\n    \n    // Step 3: Calculate the average and round it down\n    int count = m - n + 1;\n    int average = sum / count;\n    \n    // Step 4: Convert the rounded average to binary\n    string binary = \"\";\n    while (average > 0) {\n        binary = to_string(average % 2) + binary;\n        average /= 2;\n    }\n    \n    // If the binary string is empty, it means the average was 0\n    if (binary.empty()) {\n        binary = \"0\";\n    }\n    \n    return binary;\n}\n\n"}
{"task_id": "CPP/104", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\n// Helper function to check if a number contains any even digit\nbool hasEvenDigit(int num) {\n    while (num > 0) {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            return true;\n        }\n        num /= 10;\n    }\n    return false;\n}\n\nvector<int> unique_digits(vector<int> x) {\n    vector<int> result;\n    \n    // Filter out numbers that contain any even digit\n    for (int num : x) {\n        if (!hasEvenDigit(num)) {\n            result.push_back(num);\n        }\n    }\n    \n    // Sort the result in increasing order\n    sort(result.begin(), result.end());\n    \n    return result;\n}\n\n// Example usage\n"}
{"task_id": "CPP/105", "generation": "#include <vector>\n#include <string>\n#include <map>\n#include <algorithm>\nusing namespace std;\n\nvector<string> by_length(vector<int> arr) {\n    // Step 1: Filter and sort the integers between 1 and 9\n    vector<int> filtered;\n    for (int num : arr) {\n        if (num >= 1 && num <= 9) {\n            filtered.push_back(num);\n        }\n    }\n    sort(filtered.begin(), filtered.end());\n\n    // Step 2: Reverse the sorted list\n    reverse(filtered.begin(), filtered.end());\n\n    // Step 3: Map each digit to its corresponding name\n    map<int, string> digitToName = {\n        {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"},\n        {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}\n    };\n\n    vector<string> result;\n    for (int num : filtered) {\n        result.push_back(digitToName[num]);\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/106", "generation": "#include <vector>\nusing namespace std;\n\nvector<int> f(int n) {\n    vector<int> result(n);\n    \n    for (int i = 1; i <= n; ++i) {\n        if (i % 2 == 0) {\n            // Compute factorial of i\n            int factorial = 1;\n            for (int j = 1; j <= i; ++j) {\n                factorial *= j;\n            }\n            result[i - 1] = factorial;\n        } else {\n            // Compute sum of numbers from 1 to i\n            int sum = 0;\n            for (int j = 1; j <= i; ++j) {\n                sum += j;\n            }\n            result[i - 1] = sum;\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/107", "generation": "#include <vector>\n#include <string>\nusing namespace std;\n\nbool isPalindrome(int num) {\n    string str = to_string(num);\n    int len = str.length();\n    for (int i = 0; i < len / 2; ++i) {\n        if (str[i] != str[len - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvector<int> even_odd_palindrome(int n) {\n    int evenCount = 0;\n    int oddCount = 0;\n    \n    for (int i = 1; i <= n; ++i) {\n        if (isPalindrome(i)) {\n            if (i % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n    \n    return {evenCount, oddCount};\n}\n"}
{"task_id": "CPP/108", "generation": "#include <vector>\n#include <cmath>\nusing namespace std;\n\nint count_nums(vector<int> n) {\n    int count = 0;\n    \n    for (int num : n) {\n        int sum_of_digits = 0;\n        int temp = abs(num);\n        \n        // Calculate the sum of digits\n        while (temp > 0) {\n            sum_of_digits += temp % 10;\n            temp /= 10;\n        }\n        \n        // If the number is negative, subtract the sum of digits from the first digit (which is negative)\n        if (num < 0) {\n            int first_digit = num / pow(10, int(log10(abs(num))));\n            sum_of_digits += first_digit;\n        }\n        \n        // Check if the sum of digits is greater than 0\n        if (sum_of_digits > 0) {\n            count++;\n        }\n    }\n    \n    return count;\n}\n\n// Example usage\n"}
{"task_id": "CPP/109", "generation": "#include <vector>\nusing namespace std;\n\nbool move_one_ball(vector<int> arr) {\n    int n = arr.size();\n    if (n == 0) return true; // Empty vector is trivially sorted\n\n    int break_point = -1;\n    \n    // Find the break point\n    for (int i = 0; i < n - 1; ++i) {\n        if (arr[i] > arr[i + 1]) {\n            if (break_point != -1) {\n                return false; // More than one break point found\n            }\n            break_point = i;\n        }\n    }\n\n    // If no break point found, the array is already sorted\n    if (break_point == -1) return true;\n\n    // Check if the array can be sorted by rotating at the break point\n    for (int i = break_point + 1; i < n - 1; ++i) {\n        if (arr[i] > arr[i + 1]) {\n            return false; // More than one break point found in the rotated part\n        }\n    }\n\n    // Check if the last element of the rotated part is less than the first element of the original part\n    return arr[n - 1] <= arr[0];\n}\n"}
{"task_id": "CPP/110", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nstring exchange(vector<int> lst1, vector<int> lst2) {\n    int oddCount = 0;\n    int evenCount = 0;\n\n    // Count the number of odd elements in lst1\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            oddCount++;\n        }\n    }\n\n    // Count the number of even elements in lst2\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            evenCount++;\n        }\n    }\n\n    // If there are enough even elements in lst2 to replace all odd elements in lst1\n    if (evenCount >= oddCount) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\n// Example usage\n"}
{"task_id": "CPP/111", "generation": "#include <iostream>\n#include <string>\n#include <map>\n#include <climits>\n\nusing namespace std;\n\nmap<char, int> histogram(string test) {\n    map<char, int> frequencyMap;\n    map<char, int> resultMap;\n    int maxFrequency = 0;\n\n    // Step 1: Populate the frequency map\n    for (char c : test) {\n        if (c != ' ') { // Ignore spaces\n            frequencyMap[c]++;\n            if (frequencyMap[c] > maxFrequency) {\n                maxFrequency = frequencyMap[c];\n            }\n        }\n    }\n\n    // Step 2: Populate the result map with letters having the maximum frequency\n    for (const auto& pair : frequencyMap) {\n        if (pair.second == maxFrequency) {\n            resultMap[pair.first] = pair.second;\n        }\n    }\n\n    return resultMap;\n}\n\n"}
{"task_id": "CPP/112", "generation": "#include<iostream>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nvector<string> reverse_delete(string s, string c) {\n    // Step 1: Remove characters from s that are in c\n    string result;\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            result += ch;\n        }\n    }\n    \n    // Step 2: Check if the result string is a palindrome\n    bool isPalindrome = true;\n    int n = result.length();\n    for (int i = 0; i < n / 2; ++i) {\n        if (result[i] != result[n - i - 1]) {\n            isPalindrome = false;\n            break;\n        }\n    }\n    \n    // Step 3: Prepare the result vector\n    vector<string> resultVector;\n    resultVector.push_back(result);\n    resultVector.push_back(isPalindrome ? \"True\" : \"False\");\n    \n    return resultVector;\n}\n\n"}
{"task_id": "CPP/113", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<string> odd_count(vector<string> lst) {\n    vector<string> result;\n    \n    for (size_t i = 0; i < lst.size(); ++i) {\n        int odd_count = 0;\n        for (char c : lst[i]) {\n            if ((c - '0') % 2 != 0) {\n                ++odd_count;\n            }\n        }\n        \n        // Create the output string with the correct format\n        ostringstream oss;\n        oss << \"the number of odd elements \" << odd_count << \"n the str\" << odd_count << \"ng \" << odd_count << \" of the \" << odd_count << \"nput.\";\n        result.push_back(oss.str());\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/114", "generation": "#include <vector>\n#include <algorithm>\n#include <limits.h>\nusing namespace std;\n\nlong long minSubArraySum(vector<long long> nums) {\n    // Edge case: if the vector is empty, return 0 (or handle it as needed)\n    if (nums.empty()) return 0;\n\n    // Initialize variables to store the minimum sum found so far\n    long long min_sum = LLONG_MAX;\n    long long current_sum = 0;\n\n    // Iterate through the vector\n    for (long long num : nums) {\n        // Update the current sum to be the minimum of the current number or the current sum plus the number\n        current_sum = min(num, current_sum + num);\n        // Update the minimum sum found so far\n        min_sum = min(min_sum, current_sum);\n    }\n\n    return min_sum;\n}\n\n"}
{"task_id": "CPP/115", "generation": "#include<stdio.h>\n#include<vector>\n#include<cmath> // for ceil function\nusing namespace std;\n\nint max_fill(vector<vector<int>> grid, int capacity) {\n    int total_lowers = 0;\n    \n    for (const auto& row : grid) {\n        int water_units = 0;\n        for (int unit : row) {\n            if (unit == 1) {\n                water_units++;\n            }\n        }\n        // Calculate the number of times the bucket needs to be lowered\n        total_lowers += ceil((double)water_units / capacity);\n    }\n    \n    return total_lowers;\n}\n\n"}
{"task_id": "CPP/116", "generation": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nusing namespace std;\n\n// Function to count the number of ones in the binary representation of an integer\nint countOnes(int num) {\n    int count = 0;\n    while (num != 0) {\n        count += num & 1;\n        num >>= 1;\n    }\n    return count;\n}\n\n// Custom comparator function\nbool customComparator(int a, int b) {\n    int onesA = countOnes(a);\n    int onesB = countOnes(b);\n    \n    if (onesA == onesB) {\n        return a < b; // If number of ones is the same, sort by decimal value\n    }\n    return onesA < onesB; // Otherwise, sort by number of ones\n}\n\n// Function to sort the array\nvector<int> sort_array(vector<int> arr) {\n    sort(arr.begin(), arr.end(), customComparator);\n    return arr;\n}\n\n// Test the function\n"}
{"task_id": "CPP/117", "generation": "#include <vector>\n#include <string>\n#include <sstream>\n#include <unordered_set>\n\nusing namespace std;\n\nvector<string> select_words(string s, int n) {\n    // Define a set of vowels for quick lookup\n    unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    \n    // Result vector to store words with exactly n consonants\n    vector<string> result;\n    \n    // Use a stringstream to split the input string into words\n    stringstream ss(s);\n    string word;\n    \n    while (ss >> word) {\n        int consonant_count = 0;\n        \n        // Count consonants in the current word\n        for (char c : word) {\n            if (isalpha(c) && vowels.find(c) == vowels.end()) {\n                consonant_count++;\n            }\n        }\n        \n        // If the word has exactly n consonants, add it to the result\n        if (consonant_count == n) {\n            result.push_back(word);\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/118", "generation": "#include<iostream>\n#include<string>\n#include<unordered_set>\nusing namespace std;\n\nstring get_closest_vowel(string word) {\n    // Define the set of vowels (case sensitive)\n    unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    \n    // Traverse the word from right to left\n    for (int i = word.size() - 2; i > 0; --i) {\n        // Check if the current character is a vowel\n        if (vowels.find(word[i]) != vowels.end()) {\n            // Check if the previous and next characters are consonants\n            if (vowels.find(word[i-1]) == vowels.end() && vowels.find(word[i+1]) == vowels.end()) {\n                return string(1, word[i]);\n            }\n        }\n    }\n    \n    // If no such vowel is found, return an empty string\n    return \"\";\n}\n\n"}
{"task_id": "CPP/119", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nstring match_parens(vector<string> lst) {\n    int open_count1 = 0, close_count1 = 0;\n    int open_count2 = 0, close_count2 = 0;\n\n    // Count parentheses in the first string\n    for (char c : lst[0]) {\n        if (c == '(') open_count1++;\n        else if (c == ')') close_count1++;\n    }\n\n    // Count parentheses in the second string\n    for (char c : lst[1]) {\n        if (c == '(') open_count2++;\n        else if (c == ')') close_count2++;\n    }\n\n    // Total counts\n    int total_open = open_count1 + open_count2;\n    int total_close = close_count1 + close_count2;\n\n    // Check if the total number of opening and closing parentheses are equal\n    if (total_open == total_close) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\n// Example usage\n"}
{"task_id": "CPP/120", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> maximum(vector<int> arr, int k) {\n    // Step 1: Sort the array in ascending order\n    sort(arr.begin(), arr.end());\n    \n    // Step 2: Extract the last k elements (which are the top k maximum elements)\n    vector<int> result(arr.end() - k, arr.end());\n    \n    // Step 3: The result is already sorted in ascending order\n    return result;\n}\n"}
{"task_id": "CPP/121", "generation": "#include <vector>\nusing namespace std;\n\nint solution(vector<int> lst) {\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/122", "generation": "#include<iostream>\n#include<vector>\nusing namespace std;\n\nint add_elements(vector<int> arr, int k) {\n    int sum = 0;\n    \n    for (int i = 0; i < k; ++i) {\n        // Check if the number has at most two digits\n        if (arr[i] >= 0 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    \n    return sum;\n}\n\n"}
{"task_id": "CPP/123", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> get_odd_collatz(int n) {\n    vector<int> odd_numbers;\n    \n    // Generate the Collatz sequence and collect odd numbers\n    while (n != 1) {\n        if (n % 2 == 1) { // Check if n is odd\n            odd_numbers.push_back(n);\n        }\n        if (n % 2 == 0) { // If n is even\n            n = n / 2;\n        } else { // If n is odd\n            n = 3 * n + 1;\n        }\n    }\n    // Add 1 to the list of odd numbers (since 1 is always the end of the sequence)\n    odd_numbers.push_back(1);\n    \n    // Sort the vector of odd numbers\n    sort(odd_numbers.begin(), odd_numbers.end());\n    \n    return odd_numbers;\n}\n"}
{"task_id": "CPP/124", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <regex>\n\nusing namespace std;\n\nbool valid_date(string date) {\n    // Check if the date string is empty\n    if (date.empty()) {\n        return false;\n    }\n\n    // Check if the date string matches the format mm-dd-yyyy\n    regex date_format(\"^\\\\d{2}-\\\\d{2}-\\\\d{4}$\");\n    if (!regex_match(date, date_format)) {\n        return false;\n    }\n\n    // Extract month, day, and year from the date string\n    int month, day, year;\n    char delimiter;\n    stringstream ss(date);\n    ss >> month >> delimiter >> day >> delimiter >> year;\n\n    // Check if the month is valid\n    if (month < 1 || month > 12) {\n        return false;\n    }\n\n    // Check if the day is valid based on the month\n    if (month == 2) {\n        // February can have 29 days in a leap year\n        bool is_leap_year = (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);\n        if (day < 1 || (day > 29 || (day == 29 && !is_leap_year))) {\n            return false;\n        }\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        // April, June, September, November have 30 days\n        if (day < 1 || day > 30) {\n            return false;\n        }\n    } else {\n        // All other months have 31 days\n        if (day < 1 || day > 31) {\n            return false;\n        }\n    }\n\n    // If all checks pass, the date is valid\n    return true;\n}\n\n"}
{"task_id": "CPP/125", "generation": "#include <vector>\n#include <string>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> split_words(string txt) {\n    // Check for whitespace\n    if (txt.find(' ') != string::npos) {\n        vector<string> result;\n        stringstream ss(txt);\n        string word;\n        while (ss >> word) {\n            result.push_back(word);\n        }\n        return result;\n    }\n    \n    // Check for commas\n    if (txt.find(',') != string::npos) {\n        vector<string> result;\n        stringstream ss(txt);\n        string word;\n        while (getline(ss, word, ',')) {\n            result.push_back(word);\n        }\n        return result;\n    }\n    \n    // Count odd-indexed lowercase letters\n    int count = 0;\n    for (char c : txt) {\n        if (islower(c)) {\n            int index = c - 'a';\n            if (index % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    \n    return {to_string(count)};\n}\n"}
{"task_id": "CPP/126", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nbool is_sorted(vector<int> lst) {\n    // Check if the vector is sorted in ascending order\n    if (!is_sorted(lst.begin(), lst.end())) {\n        return false;\n    }\n\n    // Check if any number appears more than twice\n    for (size_t i = 0; i < lst.size(); ++i) {\n        int count = 1;\n        while (i + 1 < lst.size() && lst[i] == lst[i + 1]) {\n            ++count;\n            ++i;\n        }\n        if (count > 2) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// Example usage\n"}
{"task_id": "CPP/127", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<cmath>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nstring intersection(vector<int> interval1, vector<int> interval2) {\n    int start1 = interval1[0], end1 = interval1[1];\n    int start2 = interval2[0], end2 = interval2[1];\n    \n    int start_intersection = max(start1, start2);\n    int end_intersection = min(end1, end2);\n    \n    if (start_intersection > end_intersection) {\n        return \"NO\";\n    }\n    \n    int length_of_intersection = end_intersection - start_intersection + 1;\n    \n    if (isPrime(length_of_intersection)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\n// Example usage\n"}
{"task_id": "CPP/128", "generation": "#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n\nint prod_signs(vector<int> arr) {\n    // Handle the special case for an empty vector\n    if (arr.empty()) {\n        return -32768;\n    }\n\n    int product_of_signs = 1;\n    int sum_of_magnitudes = 0;\n\n    for (int num : arr) {\n        // Determine the sign of the number\n        int sign = (num > 0) ? 1 : (num < 0) ? -1 : 0;\n        // Update the product of signs\n        product_of_signs *= sign;\n        // Update the sum of magnitudes\n        sum_of_magnitudes += abs(num);\n    }\n\n    // Multiply the sum of magnitudes by the product of signs\n    return sum_of_magnitudes * product_of_signs;\n}\n\n// Example usage\n"}
{"task_id": "CPP/129", "generation": "#include <vector>\n#include <queue>\n#include <climits>\nusing namespace std;\n\nvector<int> minPath(vector<vector<int>> grid, int k) {\n    int N = grid.size();\n    vector<int> result;\n    vector<int> min_path(k, INT_MAX); // Initialize with maximum possible values\n\n    // Directions for moving in the grid (up, down, left, right)\n    vector<pair<int, int>> directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n\n    // BFS queue\n    queue<tuple<int, int, int, vector<int>>> q;\n\n    // Start BFS from each cell\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            q.push({i, j, 1, {grid[i][j]}});\n        }\n    }\n\n    while (!q.empty()) {\n        auto [x, y, length, path] = q.front();\n        q.pop();\n\n        // If the path length is k, compare and update the minimum path\n        if (length == k) {\n            if (path < min_path) {\n                min_path = path;\n            }\n            continue;\n        }\n\n        // Explore neighbors\n        for (auto [dx, dy] : directions) {\n            int nx = x + dx;\n            int ny = y + dy;\n\n            if (nx >= 0 && nx < N && ny >= 0 && ny < N) {\n                vector<int> new_path = path;\n                new_path.push_back(grid[nx][ny]);\n                q.push({nx, ny, length + 1, new_path});\n            }\n        }\n    }\n\n    return min_path;\n}\n\n"}
{"task_id": "CPP/130", "generation": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<int> tri(int n) {\n    vector<int> result(n + 1);\n    \n    // Base case\n    result[0] = 1; // This is just a placeholder since we start from 1\n    result[1] = 3;\n    \n    for (int i = 2; i <= n; ++i) {\n        if (i % 2 == 0) {\n            // Even case\n            result[i] = 1 + i / 2;\n        } else {\n            // Odd case\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/131", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint digits(int n) {\n    // Convert the integer to a string\n    string numStr = to_string(n);\n    \n    // Initialize the product to 1 (multiplicative identity)\n    int product = 1;\n    \n    // Flag to check if any odd digit is found\n    bool oddDigitFound = false;\n    \n    // Iterate through each character in the string\n    for (char ch : numStr) {\n        // Convert the character to an integer\n        int digit = ch - '0';\n        \n        // Check if the digit is odd\n        if (digit % 2 != 0) {\n            // Multiply the product by the odd digit\n            product *= digit;\n            oddDigitFound = true;\n        }\n    }\n    \n    // If no odd digit was found, return 0\n    if (!oddDigitFound) {\n        return 0;\n    }\n    \n    // Return the product of the odd digits\n    return product;\n}\n\n"}
{"task_id": "CPP/132", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool is_nested(string str) {\n    int open_brackets = 0;\n    int close_brackets = 0;\n\n    for (char ch : str) {\n        if (ch == '[') {\n            open_brackets++;\n        } else if (ch == ']') {\n            if (open_brackets > 0) {\n                open_brackets--;\n            } else {\n                close_brackets++;\n            }\n        }\n    }\n\n    // If there are unmatched opening brackets, it means there is nesting\n    return open_brackets > 0;\n}\n\n"}
{"task_id": "CPP/133", "generation": "#include <iostream>\n#include <vector>\n#include <cmath> // For ceil function\n\nusing namespace std;\n\nint sum_squares(vector<float> lst) {\n    int sum = 0;\n    for (float num : lst) {\n        int rounded_num = ceil(num); // Round up to the nearest integer\n        sum += rounded_num * rounded_num; // Square the rounded number and add to sum\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/134", "generation": "#include <iostream>\n#include <string>\n#include <cctype>\n\nusing namespace std;\n\nbool check_if_last_char_is_a_letter(string txt) {\n    // Check if the string is empty\n    if (txt.empty()) {\n        return false;\n    }\n\n    // Get the last character\n    char last_char = txt.back();\n\n    // Check if the last character is an alphabetical character\n    if (!isalpha(last_char)) {\n        return false;\n    }\n\n    // Check if the last character is not part of a word\n    // This means the last character should be followed by a space or be the last character in the string\n    size_t last_space_pos = txt.find_last_of(' ');\n    if (last_space_pos == string::npos || last_space_pos < txt.length() - 1) {\n        return false;\n    }\n\n    return true;\n}\n\n// Test cases\n"}
{"task_id": "CPP/135", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nint can_arrange(vector<int> arr) {\n    // Iterate through the vector starting from the second element\n    for (int i = 1; i < arr.size(); ++i) {\n        // Check if the current element is not greater than or equal to the previous element\n        if (arr[i] < arr[i - 1]) {\n            // Return the index of the current element\n            return i;\n        }\n    }\n    // If no such element is found, return -1\n    return -1;\n}\n\n// Example usage\n"}
{"task_id": "CPP/136", "generation": "#include <vector>\n#include <limits.h> // For INT_MAX and INT_MIN\n\nusing namespace std;\n\nvector<int> largest_smallest_integers(vector<int> lst) {\n    int largest_negative = INT_MIN; // Initialize to the smallest possible integer\n    int smallest_positive = INT_MAX; // Initialize to the largest possible integer\n\n    for (int num : lst) {\n        if (num < 0) {\n            // Update largest_negative if num is larger than the current largest_negative\n            if (num > largest_negative) {\n                largest_negative = num;\n            }\n        } else if (num > 0) {\n            // Update smallest_positive if num is smaller than the current smallest_positive\n            if (num < smallest_positive) {\n                smallest_positive = num;\n            }\n        }\n    }\n\n    // If no negative number was found, set largest_negative to 0\n    if (largest_negative == INT_MIN) {\n        largest_negative = 0;\n    }\n\n    // If no positive number was found, set smallest_positive to 0\n    if (smallest_positive == INT_MAX) {\n        smallest_positive = 0;\n    }\n\n    return {largest_negative, smallest_positive};\n}\n\n// Example usage\n"}
{"task_id": "CPP/137", "generation": "#include <iostream>\n#include <string>\n#include <boost/any.hpp>\n#include <boost/algorithm/string.hpp>\n\nusing namespace std;\n\nboost::any compare_one(boost::any a, boost::any b) {\n    // Helper function to convert string to float\n    auto string_to_float = [](const string& s) -> float {\n        string temp = s;\n        boost::replace_all(temp, \",\", \".\");\n        return stof(temp);\n    };\n\n    // Helper function to convert any type to float\n    auto to_float = [&](const boost::any& value) -> float {\n        if (value.type() == typeid(int)) {\n            return static_cast<float>(boost::any_cast<int>(value));\n        } else if (value.type() == typeid(float)) {\n            return boost::any_cast<float>(value);\n        } else if (value.type() == typeid(string)) {\n            return string_to_float(boost::any_cast<string>(value));\n        }\n        throw runtime_error(\"Unsupported type\");\n    };\n\n    // Convert both values to float for comparison\n    float float_a = to_float(a);\n    float float_b = to_float(b);\n\n    // Compare the values\n    if (float_a > float_b) {\n        return a;\n    } else if (float_b > float_a) {\n        return b;\n    } else {\n        return \"None\";\n    }\n}\n\n"}
{"task_id": "CPP/138", "generation": "#include<stdio.h>\n\nbool is_equal_to_sum_even(int n) {\n    // Check if n is less than 8\n    if (n < 8) {\n        return false;\n    }\n    // Check if n is even\n    if (n % 2 == 0) {\n        return true;\n    }\n    // If n is odd, it cannot be the sum of 4 even numbers\n    return false;\n}\n\n"}
{"task_id": "CPP/139", "generation": "#include <stdio.h>\n\n// Helper function to calculate factorial of a number\nlong long factorial(int num) {\n    long long result = 1;\n    for (int i = 1; i <= num; i++) {\n        result *= i;\n    }\n    return result;\n}\n\n// Function to calculate the Brazilian factorial\nlong long special_factorial(int n) {\n    long long result = 1;\n    for (int i = n; i >= 1; i--) {\n        result *= factorial(i);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/140", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring fix_spaces(string text) {\n    string result = \"\";\n    int n = text.length();\n    int i = 0;\n\n    while (i < n) {\n        if (text[i] == ' ') {\n            int count = 0;\n            // Count consecutive spaces\n            while (i < n && text[i] == ' ') {\n                count++;\n                i++;\n            }\n            // Replace with underscore if single space\n            if (count == 1) {\n                result += '_';\n            }\n            // Replace with hyphen if more than two consecutive spaces\n            else if (count > 2) {\n                result += '-';\n            }\n            // If exactly two spaces, add two underscores\n            else if (count == 2) {\n                result += \"__\";\n            }\n        } else {\n            result += text[i];\n            i++;\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/141", "generation": "#include<stdio.h>\n#include<string>\n#include<cctype>\n#include<unordered_set>\nusing namespace std;\n\nstring file_name_check(string file_name) {\n    // Check if the file name contains exactly one dot\n    size_t dot_pos = file_name.find('.');\n    if (dot_pos == string::npos || dot_pos != file_name.rfind('.')) {\n        return \"No\";\n    }\n\n    // Check if the substring before the dot is not empty and starts with a letter\n    string name_part = file_name.substr(0, dot_pos);\n    if (name_part.empty() || !isalpha(name_part[0])) {\n        return \"No\";\n    }\n\n    // Check if the substring after the dot is one of the allowed extensions\n    unordered_set<string> allowed_extensions = {\"txt\", \"exe\", \"dll\"};\n    string extension_part = file_name.substr(dot_pos + 1);\n    if (allowed_extensions.find(extension_part) == allowed_extensions.end()) {\n        return \"No\";\n    }\n\n    // Count the number of digits in the file name\n    int digit_count = 0;\n    for (char c : file_name) {\n        if (isdigit(c)) {\n            digit_count++;\n            if (digit_count > 3) {\n                return \"No\";\n            }\n        }\n    }\n\n    // If all conditions are met, return \"Yes\"\n    return \"Yes\";\n}\n\n// Example usage\n"}
{"task_id": "CPP/142", "generation": "#include <vector>\n#include <cmath> // For pow function\n\nusing namespace std;\n\nint sum_squares(vector<int> lst) {\n    int sum = 0;\n\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 3 == 0) {\n            // Square the integer entry if its index is a multiple of 3\n            lst[i] = lst[i] * lst[i];\n        } else if (i % 4 == 0 && i % 3 != 0) {\n            // Cube the integer entry if its index is a multiple of 4 and not a multiple of 3\n            lst[i] = lst[i] * lst[i] * lst[i];\n        }\n        // Add the modified (or unmodified) entry to the sum\n        sum += lst[i];\n    }\n\n    return sum;\n}\n\n// Example usage\n#include <iostream>\n\n"}
{"task_id": "CPP/143", "generation": "#include <iostream>\n#include <string>\n#include <vector>\n#include <sstream>\n#include <cmath>\n\nusing namespace std;\n\n// Function to check if a number is prime\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true; // 2 is the only even prime number\n    if (n % 2 == 0) return false; // Other even numbers are not prime\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nstring words_in_sentence(string sentence) {\n    stringstream ss(sentence);\n    string word;\n    vector<string> result;\n    \n    // Split the sentence into words\n    while (ss >> word) {\n        if (isPrime(word.length())) {\n            result.push_back(word);\n        }\n    }\n    \n    // Join the words back into a single string\n    string resultString;\n    for (size_t i = 0; i < result.size(); ++i) {\n        if (i != 0) resultString += \" \";\n        resultString += result[i];\n    }\n    \n    return resultString;\n}\n\n"}
{"task_id": "CPP/144", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\n// Function to compute the greatest common divisor (GCD) using Euclidean algorithm\nint gcd(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\nbool simplify(string x, string n) {\n    // Parse the input strings to extract numerators and denominators\n    int x_numerator, x_denominator, n_numerator, n_denominator;\n    char slash;\n    \n    stringstream x_stream(x);\n    x_stream >> x_numerator >> slash >> x_denominator;\n    \n    stringstream n_stream(n);\n    n_stream >> n_numerator >> slash >> n_denominator;\n    \n    // Compute the product of the two fractions\n    int product_numerator = x_numerator * n_numerator;\n    int product_denominator = x_denominator * n_denominator;\n    \n    // Check if the product simplifies to a whole number\n    int common_divisor = gcd(product_numerator, product_denominator);\n    \n    // Simplify the fraction\n    product_numerator /= common_divisor;\n    product_denominator /= common_divisor;\n    \n    // The product is a whole number if the denominator is 1\n    return product_denominator == 1;\n}\n\n"}
{"task_id": "CPP/145", "generation": "#include <vector>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\n// Helper function to calculate the sum of digits of a number\nint sum_of_digits(int num) {\n    int sum = 0;\n    bool is_negative = num < 0;\n    num = abs(num);\n    \n    while (num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    \n    if (is_negative) {\n        sum = -sum;\n    }\n    \n    return sum;\n}\n\nvector<int> order_by_points(vector<int> nums) {\n    // Use a stable sort to maintain the original order for equal sums\n    stable_sort(nums.begin(), nums.end(), [](int a, int b) {\n        return sum_of_digits(a) < sum_of_digits(b);\n    });\n    \n    return nums;\n}\n\n// Example usage\n"}
{"task_id": "CPP/146", "generation": "#include <vector>\n#include <string>\n#include <cmath>\n\nusing namespace std;\n\nbool isOddDigit(int digit) {\n    return digit == 1 || digit == 3 || digit == 5 || digit == 7 || digit == 9;\n}\n\nint specialFilter(vector<int> nums) {\n    int count = 0;\n    \n    for (int num : nums) {\n        if (num > 10) {\n            // Convert the number to a string to get the first digit\n            string numStr = to_string(abs(num));\n            int firstDigit = numStr[0] - '0';\n            int lastDigit = abs(num) % 10;\n            \n            if (isOddDigit(firstDigit) && isOddDigit(lastDigit)) {\n                count++;\n            }\n        }\n    }\n    \n    return count;\n}\n\n// Example usage\n"}
{"task_id": "CPP/147", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nint get_max_triples(int n) {\n    // Step 1: Generate the vector a\n    vector<int> a(n);\n    for (int i = 0; i < n; ++i) {\n        a[i] = (i + 1) * (i + 1) - (i + 1) + 1;\n    }\n\n    // Step 2: Count the number of valid triples\n    int count = 0;\n    for (int i = 0; i < n - 2; ++i) {\n        for (int j = i + 1; j < n - 1; ++j) {\n            for (int k = j + 1; k < n; ++k) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}\n\n"}
{"task_id": "CPP/148", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_map>\n\nusing namespace std;\n\nvector<string> bf(string planet1, string planet2) {\n    // Define the order of planets\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    \n    // Create a map to get the index of each planet\n    unordered_map<string, int> planetIndex;\n    for (int i = 0; i < planets.size(); ++i) {\n        planetIndex[planets[i]] = i;\n    }\n    \n    // Check if the input planets are valid\n    if (planetIndex.find(planet1) == planetIndex.end() || planetIndex.find(planet2) == planetIndex.end()) {\n        return {};\n    }\n    \n    // Get the indices of the input planets\n    int index1 = planetIndex[planet1];\n    int index2 = planetIndex[planet2];\n    \n    // Ensure index1 is less than index2 for simplicity\n    if (index1 > index2) {\n        swap(index1, index2);\n    }\n    \n    // Collect the planets between index1 and index2 (exclusive)\n    vector<string> result;\n    for (int i = index1 + 1; i < index2; ++i) {\n        result.push_back(planets[i]);\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/149", "generation": "#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nvector<string> sorted_list_sum(vector<string> lst) {\n    // Step 1: Filter out strings with odd lengths\n    vector<string> filtered_lst;\n    for (const string& s : lst) {\n        if (s.length() % 2 == 0) {\n            filtered_lst.push_back(s);\n        }\n    }\n\n    // Step 2: Sort the filtered strings\n    sort(filtered_lst.begin(), filtered_lst.end(), [](const string& a, const string& b) {\n        if (a.length() == b.length()) {\n            return a < b; // Sort alphabetically if lengths are the same\n        }\n        return a.length() < b.length(); // Sort by length\n    });\n\n    return filtered_lst;\n}\n\n// Example usage\n"}
{"task_id": "CPP/150", "generation": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nint x_or_y(int n, int x, int y) {\n    if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n\n"}
{"task_id": "CPP/151", "generation": "#include <vector>\n#include <cmath>\nusing namespace std;\n\nlong long double_the_difference(vector<float> lst) {\n    long long sum = 0;\n    \n    for (float num : lst) {\n        // Check if the number is a positive integer\n        if (num > 0 && floor(num) == num) {\n            int int_num = static_cast<int>(num);\n            // Check if the number is odd\n            if (int_num % 2 != 0) {\n                sum += int_num * int_num;\n            }\n        }\n    }\n    \n    return sum;\n}\n"}
{"task_id": "CPP/152", "generation": "#include <vector>\n#include <cmath> // for std::abs\n\nusing namespace std;\n\nvector<int> compare(vector<int> game, vector<int> guess) {\n    vector<int> result;\n    for (size_t i = 0; i < game.size(); ++i) {\n        if (game[i] == guess[i]) {\n            result.push_back(0);\n        } else {\n            result.push_back(std::abs(game[i] - guess[i]));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/153", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring Strongest_Extension(string class_name, vector<string> extensions) {\n    string strongest_extension = \"\";\n    int max_strength = INT_MIN;\n\n    for (const string& ext : extensions) {\n        int CAP = 0;\n        int SM = 0;\n\n        for (char c : ext) {\n            if (isupper(c)) {\n                CAP++;\n            } else if (islower(c)) {\n                SM++;\n            }\n        }\n\n        int strength = CAP - SM;\n\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest_extension = ext;\n        }\n    }\n\n    return class_name + \".\" + strongest_extension;\n}\n\n"}
{"task_id": "CPP/154", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool isSubstring(const string &a, const string &b) {\n    return a.find(b) != string::npos;\n}\n\nbool cycpattern_check(string a, string b) {\n    int n = b.length();\n    if (n == 0) return true; // Any string contains an empty string\n\n    // Generate all rotations of b\n    for (int i = 0; i < n; ++i) {\n        // Rotate b by moving the first character to the end\n        string rotated = b.substr(i) + b.substr(0, i);\n        if (isSubstring(a, rotated)) {\n            return true;\n        }\n    }\n    return false;\n}\n\n"}
{"task_id": "CPP/155", "generation": "#include <vector>\n#include <cmath>\n\nusing namespace std;\n\nvector<int> even_odd_count(int num) {\n    // Initialize counts for even and odd digits\n    int even_count = 0;\n    int odd_count = 0;\n    \n    // Handle negative numbers by taking the absolute value\n    num = abs(num);\n    \n    // Loop through each digit of the number\n    while (num > 0) {\n        int digit = num % 10; // Extract the last digit\n        if (digit % 2 == 0) {\n            even_count++; // Increment even count if the digit is even\n        } else {\n            odd_count++; // Increment odd count if the digit is odd\n        }\n        num /= 10; // Remove the last digit from the number\n    }\n    \n    // Return the counts as a vector\n    return {even_count, odd_count};\n}\n"}
{"task_id": "CPP/156", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring int_to_mini_roman(int number) {\n    // Mapping of values to their corresponding Roman numerals in lowercase\n    vector<pair<int, string>> roman_map = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"},\n        {100, \"c\"}, {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"},\n        {10, \"x\"}, {9, \"ix\"}, {5, \"v\"}, {4, \"iv\"},\n        {1, \"i\"}\n    };\n    \n    string result = \"\";\n    \n    // Iterate through the mapping\n    for (const auto& pair : roman_map) {\n        while (number >= pair.first) {\n            result += pair.second;\n            number -= pair.first;\n        }\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/157", "generation": "#include<stdio.h>\n#include<math.h>\n\nbool right_angle_triangle(float a, float b, float c) {\n    // Ensure the sides are sorted such that c is the longest side\n    if (a > b) {\n        float temp = a;\n        a = b;\n        b = temp;\n    }\n    if (b > c) {\n        float temp = b;\n        b = c;\n        c = temp;\n    }\n    if (a > b) {\n        float temp = a;\n        a = b;\n        b = temp;\n    }\n\n    // Check the Pythagorean theorem\n    return (pow(a, 2) + pow(b, 2) == pow(c, 2));\n}\n\n"}
{"task_id": "CPP/158", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_set>\n#include <algorithm>\n\nusing namespace std;\n\nstring find_max(vector<string> words) {\n    string max_word = \"\";\n    int max_unique_count = 0;\n\n    for (const string& word : words) {\n        // Use an unordered_set to count unique characters in the word\n        unordered_set<char> unique_chars(word.begin(), word.end());\n        int unique_count = unique_chars.size();\n\n        // If the current word has more unique characters, update max_word\n        if (unique_count > max_unique_count) {\n            max_word = word;\n            max_unique_count = unique_count;\n        }\n        // If the current word has the same number of unique characters but is lexicographically smaller, update max_word\n        else if (unique_count == max_unique_count && word < max_word) {\n            max_word = word;\n        }\n    }\n\n    return max_word;\n}\n\n"}
{"task_id": "CPP/159", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<int> eat(int number, int need, int remaining) {\n    // Calculate the total number of carrots the rabbit needs to eat\n    int total_needed = number + need;\n    \n    // Determine how many carrots the rabbit can actually eat\n    int actually_eaten = min(total_needed, remaining);\n    \n    // Calculate the number of carrots left after the rabbit has eaten\n    int carrots_left = remaining - actually_eaten;\n    \n    // Return the results as a vector\n    return {number + actually_eaten, carrots_left};\n}\n\n// Example usage\n"}
{"task_id": "CPP/160", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nint do_algebra(vector<string> operato, vector<int> operand) {\n    // Initialize the result with the first operand\n    int result = operand[0];\n    \n    // Iterate through the operators and operands\n    for (size_t i = 0; i < operato.size(); ++i) {\n        // Get the current operator and operand\n        string op = operato[i];\n        int next_operand = operand[i + 1];\n        \n        // Apply the operator to the result and the next operand\n        if (op == \"+\") {\n            result += next_operand;\n        } else if (op == \"-\") {\n            result -= next_operand;\n        } else if (op == \"*\") {\n            result *= next_operand;\n        } else if (op == \"//\") {\n            result /= next_operand; // Note: This is integer division\n        } else if (op == \"**\") {\n            result = pow(result, next_operand);\n        }\n    }\n    \n    // Return the final result\n    return result;\n}\n\n"}
{"task_id": "CPP/161", "generation": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring solve(string s) {\n    bool containsLetter = false;\n    \n    // First pass: check if the string contains any letters and reverse case if necessary\n    for (char &c : s) {\n        if (isalpha(c)) {\n            containsLetter = true;\n            if (islower(c)) {\n                c = toupper(c);\n            } else {\n                c = tolower(c);\n            }\n        }\n    }\n    \n    // If the string contains no letters, reverse the entire string\n    if (!containsLetter) {\n        reverse(s.begin(), s.end());\n    }\n    \n    return s;\n}\n\n"}
{"task_id": "CPP/162", "generation": "#include <iostream>\n#include <string>\n#include <openssl/md5.h>\n#include <iomanip>\n#include <sstream>\n\nusing namespace std;\n\nstring string_to_md5(const string& text) {\n    // If the input string is empty, return None\n    if (text.empty()) {\n        return \"\";\n    }\n\n    // Create an MD5 context\n    MD5_CTX md5Context;\n    MD5_Init(&md5Context);\n\n    // Update the context with the input string\n    MD5_Update(&md5Context, text.c_str(), text.size());\n\n    // Create a buffer to hold the MD5 hash\n    unsigned char md5Digest[MD5_DIGEST_LENGTH];\n    MD5_Final(md5Digest, &md5Context);\n\n    // Convert the MD5 hash to a hexadecimal string\n    stringstream ss;\n    for (int i = 0; i < MD5_DIGEST_LENGTH; ++i) {\n        ss << hex << setw(2) << setfill('0') << (int)md5Digest[i];\n    }\n\n    return ss.str();\n}\n\n"}
{"task_id": "CPP/163", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> generate_integers(int a, int b) {\n    // Ensure a is less than or equal to b\n    if (a > b) {\n        swap(a, b);\n    }\n\n    vector<int> result;\n\n    // Even digits are 0, 2, 4, 6, 8\n    for (int i = a; i <= b; ++i) {\n        if (i % 2 == 0 && i < 10) {\n            result.push_back(i);\n        }\n    }\n\n    // Sort the result in ascending order (though it should already be sorted)\n    sort(result.begin(), result.end());\n\n    return result;\n}\n\n"}
