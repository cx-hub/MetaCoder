{"task_id": "CPP/41", "generation": "#include<stdio.h>\n\nint car_race_collision(int n) {\n    return n * n;\n}\n\n"}
{"task_id": "CPP/116", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nint count_ones_in_binary(int num) {\n    int count = 0;\n    while (num != 0) {\n        count += num & 1;\n        num >>= 1;\n    }\n    return count;\n}\n\nvector<int> sort_array(vector<int> arr) {\n    sort(arr.begin(), arr.end(), [](int a, int b) {\n        int count_a = count_ones_in_binary(a);\n        int count_b = count_ones_in_binary(b);\n        if (count_a == count_b) {\n            return a < b;\n        }\n        return count_a < count_b;\n    });\n    return arr;\n}\n"}
{"task_id": "CPP/61", "generation": "#include <iostream>\n#include <string>\n#include <stack>\nusing namespace std;\n\nbool correct_bracketing(string brackets) {\n    stack<char> s;\n    \n    for (char bracket : brackets) {\n        if (bracket == '(') {\n            s.push(bracket);\n        } else if (bracket == ')') {\n            if (s.empty() || s.top() != '(') {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    \n    return s.empty();\n}\n\n"}
{"task_id": "CPP/25", "generation": "#include <vector>\n#include <cmath>\n\nstd::vector<int> factorize(int n) {\n    std::vector<int> factors;\n    \n    // Check for the number of 2s that divide n\n    while (n % 2 == 0) {\n        factors.push_back(2);\n        n = n / 2;\n    }\n    \n    // n must be odd at this point, so we can skip even numbers\n    for (int i = 3; i <= std::sqrt(n); i += 2) {\n        // While i divides n, add i and divide n\n        while (n % i == 0) {\n            factors.push_back(i);\n            n = n / i;\n        }\n    }\n    \n    // This condition is to check if n is a prime number greater than 2\n    if (n > 2) {\n        factors.push_back(n);\n    }\n    \n    return factors;\n}\n\n// Example usage\n#include <iostream>\n\n"}
{"task_id": "CPP/137", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <boost/any.hpp>\n#include <boost/lexical_cast.hpp>\n\nusing namespace std;\n\nboost::any compare_one(boost::any a, boost::any b) {\n    auto to_float = [](const boost::any& value) -> float {\n        try {\n            if (value.type() == typeid(std::string)) {\n                std::string str = boost::any_cast<std::string>(value);\n                std::replace(str.begin(), str.end(), ',', '.');\n                return boost::lexical_cast<float>(str);\n            } else if (value.type() == typeid(int)) {\n                return static_cast<float>(boost::any_cast<int>(value));\n            } else if (value.type() == typeid(float)) {\n                return boost::any_cast<float>(value);\n            }\n        } catch (const boost::bad_lexical_cast&) {\n            throw std::invalid_argument(\"Invalid input\");\n        }\n        throw std::invalid_argument(\"Unsupported type\");\n    };\n\n    try {\n        float a_float = to_float(a);\n        float b_float = to_float(b);\n\n        if (a_float > b_float) {\n            return a;\n        } else if (b_float > a_float) {\n            return b;\n        } else {\n            return std::string(\"None\");\n        }\n    } catch (const std::invalid_argument&) {\n        return std::string(\"None\");\n    }\n}\n\n"}
{"task_id": "CPP/102", "generation": "#include <stdio.h>\n\nint choose_num(int x, int y) {\n    // Ensure x is less than or equal to y\n    if (x > y) {\n        return -1;\n    }\n\n    // Start from the largest number in the range and move downwards\n    for (int i = y; i >= x; i--) {\n        // Check if the current number is even\n        if (i % 2 == 0) {\n            return i;\n        }\n    }\n\n    // If no even number is found, return -1\n    return -1;\n}\n\n"}
{"task_id": "CPP/10", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nbool is_palindrome(const string& str) {\n    // Test if given string is a palindrome\n    string s(str.rbegin(), str.rend());\n    return s == str;\n}\n\nstring make_palindrome(const string& str) {\n    // Find the shortest palindrome that begins with a supplied string\n    for (size_t i = 0; i < str.size(); ++i) {\n        // Check if the suffix from i to the end is a palindrome\n        if (is_palindrome(str.substr(i))) {\n            // If it is, append the reverse of the prefix before this suffix\n            string prefix = str.substr(0, i);\n            reverse(prefix.begin(), prefix.end());\n            return str + prefix;\n        }\n    }\n    // If no palindromic suffix is found, append the reverse of the entire string\n    string reversed_str(str.rbegin(), str.rend());\n    return str + reversed_str;\n}\n\n"}
{"task_id": "CPP/76", "generation": "#include<stdio.h>\n#include<math.h>\n\nbool is_simple_power(int x, int n) {\n    if (n == 1) {\n        return x == 1;\n    }\n    int power = 1;\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}\n"}
{"task_id": "CPP/94", "generation": "#include <iostream>\n#include <vector>\n#include <cmath>\nusing namespace std;\n\n// Function to check if a number is prime\nbool isPrime(int num) {\n    if (num <= 1) return false;\n    if (num == 2) return true; // 2 is the only even prime number\n    if (num % 2 == 0) return false; // Other even numbers are not prime\n    for (int i = 3; i <= sqrt(num); i += 2) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\n// Function to sum the digits of a number\nint sumOfDigits(int num) {\n    int sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}\n\nint skjkasdkd(vector<int> lst) {\n    int largestPrime = -1;\n    \n    // Find the largest prime in the list\n    for (int num : lst) {\n        if (isPrime(num) && num > largestPrime) {\n            largestPrime = num;\n        }\n    }\n    \n    // If no prime is found, return 0 (though the problem guarantees there is at least one prime)\n    if (largestPrime == -1) return 0;\n    \n    // Sum the digits of the largest prime\n    return sumOfDigits(largestPrime);\n}\n\n"}
{"task_id": "CPP/32", "generation": "#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n\ndouble poly(vector<double> xs, double x) {\n    double sum = 0;\n    for (int i = 0; i < xs.size(); i++) {\n        sum += xs[i] * pow(x, i);\n    }\n    return sum;\n}\n\ndouble poly_derivative(vector<double> xs, double x) {\n    double sum = 0;\n    for (int i = 1; i < xs.size(); i++) {\n        sum += i * xs[i] * pow(x, i - 1);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs) {\n    // Initial guess can be the midpoint of the interval\n    double x0 = 0.0;\n    double tolerance = 1e-7;\n    int max_iterations = 1000;\n\n    for (int i = 0; i < max_iterations; i++) {\n        double fx = poly(xs, x0);\n        double dfx = poly_derivative(xs, x0);\n\n        if (fabs(fx) < tolerance) {\n            return x0;\n        }\n\n        x0 = x0 - fx / dfx;\n    }\n\n    // If we exceed the maximum number of iterations, return the last estimate\n    return x0;\n}\n\n"}
{"task_id": "CPP/33", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> sort_third(vector<int> l) {\n    // Extract elements at indices divisible by 3\n    vector<int> elements_to_sort;\n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 3 == 0) {\n            elements_to_sort.push_back(l[i]);\n        }\n    }\n    \n    // Sort the extracted elements\n    sort(elements_to_sort.begin(), elements_to_sort.end());\n    \n    // Create a new list with sorted elements at indices divisible by 3\n    vector<int> result = l;\n    size_t sort_index = 0;\n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 3 == 0) {\n            result[i] = elements_to_sort[sort_index];\n            ++sort_index;\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/88", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> sort_array(vector<int> array) {\n    if (array.empty()) {\n        return array;\n    }\n\n    int first_value = array.front();\n    int last_value = array.back();\n    int sum = first_value + last_value;\n\n    vector<int> sorted_array = array; // Create a copy of the original array\n\n    if (sum % 2 == 0) {\n        // Sort in descending order if the sum is even\n        sort(sorted_array.begin(), sorted_array.end(), greater<int>());\n    } else {\n        // Sort in ascending order if the sum is odd\n        sort(sorted_array.begin(), sorted_array.end());\n    }\n\n    return sorted_array;\n}\n"}
{"task_id": "CPP/15", "generation": "#include <iostream>\n#include <sstream>\n#include <string>\n\nusing namespace std;\n\nstring string_sequence(int n) {\n    // Create a string stream to build the result\n    stringstream ss;\n    \n    // Loop from 0 to n inclusive\n    for (int i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    \n    // Convert the string stream to a string\n    string result = ss.str();\n    \n    // Remove the trailing space\n    if (!result.empty()) {\n        result.pop_back();\n    }\n    \n    return result;\n}\n\n// Example usage\n"}
{"task_id": "CPP/163", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<int> generate_integers(int a, int b) {\n    vector<int> result;\n    \n    // Determine the start and end of the range\n    int start = min(a, b);\n    int end = max(a, b);\n    \n    // Iterate through the range and collect even digits\n    for (int i = start; i <= end; ++i) {\n        if (i % 2 == 0 && i < 10) {\n            result.push_back(i);\n        }\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/1", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <stack>\n\nusing namespace std;\n\nvector<string> separate_paren_groups(string paren_string) {\n    vector<string> result;\n    string current_group;\n    stack<char> paren_stack;\n\n    // Remove spaces from the input string\n    paren_string.erase(remove(paren_string.begin(), paren_string.end(), ' '), paren_string.end());\n\n    for (char ch : paren_string) {\n        current_group += ch;\n\n        if (ch == '(') {\n            paren_stack.push(ch);\n        } else if (ch == ')') {\n            paren_stack.pop();\n        }\n\n        // If the stack is empty, we have a balanced group\n        if (paren_stack.empty()) {\n            result.push_back(current_group);\n            current_group.clear();\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/69", "generation": "#include <vector>\n#include <unordered_map>\n#include <algorithm>\n\nusing namespace std;\n\nint search(vector<int> lst) {\n    // Step 1: Count the frequency of each integer\n    unordered_map<int, int> frequencyMap;\n    for (int num : lst) {\n        frequencyMap[num]++;\n    }\n\n    // Step 2: Find the greatest integer that meets the criteria\n    int maxValidInteger = -1;\n    for (const auto& pair : frequencyMap) {\n        int num = pair.first;\n        int freq = pair.second;\n        if (freq >= num) {\n            if (num > maxValidInteger) {\n                maxValidInteger = num;\n            }\n        }\n    }\n\n    // Step 3: Return the result\n    return maxValidInteger;\n}\n\n// Example usage\n"}
{"task_id": "CPP/31", "generation": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nbool is_prime(long long n) {\n    // Handle edge cases\n    if (n <= 1) return false;\n    if (n == 2 || n == 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\n    // Check for factors from 5 to sqrt(n)\n    for (long long i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n\n    return true;\n}\n\n"}
{"task_id": "CPP/147", "generation": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint get_max_triples(int n) {\n    // Step 1: Generate the vector a\n    vector<int> a(n);\n    for (int i = 1; i <= n; ++i) {\n        a[i-1] = i * i - i + 1;\n    }\n\n    // Step 2: Check for valid triples\n    int count = 0;\n    for (int i = 0; i < n; ++i) {\n        for (int j = i + 1; j < n; ++j) {\n            for (int k = j + 1; k < n; ++k) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}\n\n"}
{"task_id": "CPP/105", "generation": "#include <vector>\n#include <string>\n#include <map>\n#include <algorithm>\nusing namespace std;\n\nvector<string> by_length(vector<int> arr) {\n    // Step 1: Filter and sort the integers between 1 and 9\n    vector<int> filtered;\n    for (int num : arr) {\n        if (num >= 1 && num <= 9) {\n            filtered.push_back(num);\n        }\n    }\n    sort(filtered.begin(), filtered.end());\n\n    // Step 2: Reverse the sorted vector\n    reverse(filtered.begin(), filtered.end());\n\n    // Step 3: Replace each digit with its corresponding name\n    map<int, string> digitToName = {\n        {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"},\n        {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}\n    };\n\n    vector<string> result;\n    for (int num : filtered) {\n        result.push_back(digitToName[num]);\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/22", "generation": "#include <iostream>\n#include <vector>\n#include <list>\n#include <boost/any.hpp>\n\ntypedef std::list<boost::any> list_any;\n\nstd::vector<int> filter_integers(list_any values) {\n    std::vector<int> result;\n    for (const auto& value : values) {\n        if (value.type() == typeid(int)) {\n            result.push_back(boost::any_cast<int>(value));\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/52", "generation": "#include <vector>\nusing namespace std;\n\nbool below_threshold(vector<int> l, int t) {\n    for (int num : l) {\n        if (num >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Example usage\n"}
{"task_id": "CPP/154", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool cycpattern_check(string a, string b) {\n    int n = b.length();\n    if (n == 0) return true; // An empty string is always a substring\n\n    // Concatenate b with itself to handle all rotations\n    string rotatedB = b + b;\n\n    // Check if any rotation of b is a substring of a\n    for (int i = 0; i < n; ++i) {\n        string rotation = rotatedB.substr(i, n);\n        if (a.find(rotation) != string::npos) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n"}
{"task_id": "CPP/115", "generation": "#include<iostream>\n#include<vector>\n#include<cmath> // for ceil function\nusing namespace std;\n\nint max_fill(vector<vector<int>> grid, int capacity) {\n    int total_operations = 0;\n    \n    for (const auto& row : grid) {\n        int water_units = 0;\n        for (int unit : row) {\n            if (unit == 1) {\n                water_units++;\n            }\n        }\n        // Calculate the number of bucket operations needed for this row\n        int operations = ceil((double)water_units / capacity);\n        total_operations += operations;\n    }\n    \n    return total_operations;\n}\n\n"}
{"task_id": "CPP/131", "generation": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint digits(int n) {\n    // Convert the integer to a string\n    string numStr = to_string(n);\n    \n    // Initialize the product to 1 (multiplicative identity)\n    int product = 1;\n    \n    // Flag to check if any odd digit is found\n    bool hasOddDigit = false;\n    \n    // Iterate through each character in the string\n    for (char ch : numStr) {\n        // Convert the character to an integer\n        int digit = ch - '0';\n        \n        // Check if the digit is odd\n        if (digit % 2 != 0) {\n            // Multiply the product by the odd digit\n            product *= digit;\n            hasOddDigit = true;\n        }\n    }\n    \n    // If no odd digit was found, return 0\n    if (!hasOddDigit) {\n        return 0;\n    }\n    \n    // Return the product of the odd digits\n    return product;\n}\n\n"}
{"task_id": "CPP/37", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<float> sort_even(vector<float> l) {\n    // Extract values at even indices\n    vector<float> even_values;\n    for (size_t i = 0; i < l.size(); i += 2) {\n        even_values.push_back(l[i]);\n    }\n\n    // Sort the extracted values\n    sort(even_values.begin(), even_values.end());\n\n    // Reconstruct the output vector\n    vector<float> result;\n    size_t even_index = 0;\n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 2 == 0) {\n            result.push_back(even_values[even_index++]);\n        } else {\n            result.push_back(l[i]);\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/92", "generation": "#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n\nbool any_int(float a, float b, float c) {\n    // Check if all numbers are integers\n    if (floor(a) == a && floor(b) == b && floor(c) == c) {\n        // Convert floats to integers\n        int int_a = (int)a;\n        int int_b = (int)b;\n        int int_c = (int)c;\n        \n        // Check if one of the numbers is equal to the sum of the other two\n        if (int_a == int_b + int_c || int_b == int_a + int_c || int_c == int_a + int_b) {\n            return true;\n        }\n    }\n    return false;\n}\n\n"}
{"task_id": "CPP/118", "generation": "#include<iostream>\n#include<string>\n#include<unordered_set>\nusing namespace std;\n\nstring get_closest_vowel(string word) {\n    // Define the set of vowels (case sensitive)\n    unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    \n    // Traverse the word from right to left\n    for (int i = word.size() - 2; i > 0; --i) {\n        // Check if the current character is a vowel\n        if (vowels.find(word[i]) != vowels.end()) {\n            // Check if the previous and next characters are consonants\n            if ((vowels.find(word[i - 1]) == vowels.end()) && (vowels.find(word[i + 1]) == vowels.end())) {\n                return string(1, word[i]);\n            }\n        }\n    }\n    \n    // If no such vowel is found, return an empty string\n    return \"\";\n}\n\n"}
{"task_id": "CPP/6", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<int> parse_nested_parens(string paren_string) {\n    vector<int> results;\n    stringstream ss(paren_string);\n    string group;\n    \n    while (getline(ss, group, ' ')) {\n        int max_depth = 0;\n        int current_depth = 0;\n        \n        for (char c : group) {\n            if (c == '(') {\n                current_depth++;\n                if (current_depth > max_depth) {\n                    max_depth = current_depth;\n                }\n            } else if (c == ')') {\n                current_depth--;\n            }\n        }\n        \n        results.push_back(max_depth);\n    }\n    \n    return results;\n}\n\n"}
{"task_id": "CPP/87", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<vector<int>> get_row(vector<vector<int>> lst, int x) {\n    vector<vector<int>> coordinates;\n    \n    // Traverse the 2D vector to find occurrences of x\n    for (int i = 0; i < lst.size(); ++i) {\n        for (int j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                coordinates.push_back({i, j});\n            }\n        }\n    }\n    \n    // Sort coordinates by rows in ascending order\n    // For coordinates within the same row, sort by columns in descending order\n    sort(coordinates.begin(), coordinates.end(), [](const vector<int>& a, const vector<int>& b) {\n        if (a[0] == b[0]) {\n            return a[1] > b[1];\n        }\n        return a[0] < b[0];\n    });\n    \n    return coordinates;\n}\n\n// Example usage\n"}
{"task_id": "CPP/2", "generation": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nfloat truncate_number(float number) {\n    int integer_part = static_cast<int>(number);\n    float decimal_part = number - integer_part;\n    return decimal_part;\n}\n\n"}
{"task_id": "CPP/16", "generation": "#include <iostream>\n#include <string>\n#include <unordered_set>\n#include <algorithm>\n\nusing namespace std;\n\nint count_distinct_characters(string str) {\n    // Convert the string to lowercase\n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    \n    // Use an unordered_set to store unique characters\n    unordered_set<char> unique_chars;\n    \n    // Iterate through the string and add each character to the set\n    for (char c : str) {\n        unique_chars.insert(c);\n    }\n    \n    // The size of the set is the number of distinct characters\n    return unique_chars.size();\n}\n\n"}
{"task_id": "CPP/135", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nint can_arrange(vector<int> arr) {\n    for (int i = 1; i < arr.size(); ++i) {\n        if (arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/106", "generation": "#include <vector>\nusing namespace std;\n\nvector<int> f(int n) {\n    vector<int> result(n);\n    \n    for (int i = 1; i <= n; ++i) {\n        if (i % 2 == 0) {\n            // Compute factorial of i\n            int factorial = 1;\n            for (int j = 1; j <= i; ++j) {\n                factorial *= j;\n            }\n            result[i - 1] = factorial;\n        } else {\n            // Compute sum of numbers from 1 to i\n            int sum = 0;\n            for (int j = 1; j <= i; ++j) {\n                sum += j;\n            }\n            result[i - 1] = sum;\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/162", "generation": "#include <stdio.h>\n#include <string>\n#include <openssl/md5.h>\nusing namespace std;\n\nstring string_to_md5(string text) {\n    if (text.empty()) {\n        return \"\"; // Returning an empty string to represent None in C++\n    }\n\n    unsigned char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.size(), result);\n\n    string md5_hash;\n    char buffer[3];\n    for (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n        sprintf(buffer, \"%02x\", result[i]);\n        md5_hash += buffer;\n    }\n\n    return md5_hash;\n}\n"}
{"task_id": "CPP/5", "generation": "#include <vector>\n#include <iostream>\nusing namespace std;\n\nvector<int> intersperse(vector<int> numbers, int delimeter) {\n    // Check if the input vector is empty\n    if (numbers.empty()) {\n        return {};\n    }\n\n    // Create a new vector to store the result\n    vector<int> result;\n\n    // Iterate through the input vector\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        // Insert the current element\n        result.push_back(numbers[i]);\n\n        // Insert the delimiter after the current element, except for the last element\n        if (i < numbers.size() - 1) {\n            result.push_back(delimeter);\n        }\n    }\n\n    // Return the result vector\n    return result;\n}\n\n// Test the function\n"}
{"task_id": "CPP/97", "generation": "#include<stdio.h>\n#include<math.h>\n\nint multiply(int a, int b) {\n    // Extract the unit digits\n    int unit_digit_a = abs(a) % 10;\n    int unit_digit_b = abs(b) % 10;\n    \n    // Return the product of the unit digits\n    return unit_digit_a * unit_digit_b;\n}\n\n"}
{"task_id": "CPP/44", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nstring change_base(int x, int base) {\n    if (x == 0) return \"0\"; // Special case for zero\n\n    string result = \"\";\n    while (x > 0) {\n        int remainder = x % base;\n        result += to_string(remainder); // Append the remainder to the result string\n        x /= base;\n    }\n\n    // Since we appended the remainders in reverse order, we need to reverse the string\n    reverse(result.begin(), result.end());\n\n    return result;\n}\n\n"}
{"task_id": "CPP/161", "generation": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring solve(string s) {\n    bool containsLetter = false;\n    \n    // First pass: check if the string contains any letters and reverse case if necessary\n    for (int i = 0; i < s.length(); ++i) {\n        if (isalpha(s[i])) {\n            containsLetter = true;\n            if (islower(s[i])) {\n                s[i] = toupper(s[i]);\n            } else {\n                s[i] = tolower(s[i]);\n            }\n        }\n    }\n    \n    // If the string contains no letters, reverse the entire string\n    if (!containsLetter) {\n        int left = 0, right = s.length() - 1;\n        while (left < right) {\n            swap(s[left], s[right]);\n            left++;\n            right--;\n        }\n    }\n    \n    return s;\n}\n\n"}
{"task_id": "CPP/38", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring encode_cyclic(string s) {\n    int l = s.length();\n    int num = (l + 2) / 3;\n    string output;\n    for (int i = 0; i * 3 < l; i++) {\n        string x = s.substr(i * 3, 3);\n        if (x.length() == 3) {\n            x = x.substr(1) + x[0];\n        }\n        output += x;\n    }\n    return output;\n}\n\nstring decode_cyclic(string s) {\n    int l = s.length();\n    int num = (l + 2) / 3;\n    string output;\n    for (int i = 0; i * 3 < l; i++) {\n        string x = s.substr(i * 3, 3);\n        if (x.length() == 3) {\n            x = x[2] + x.substr(0, 2);\n        }\n        output += x;\n    }\n    return output;\n}\n"}
{"task_id": "CPP/93", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nstring encode(string message) {\n    string encodedMessage = \"\";\n    for (char &c : message) {\n        // Swap the case of the letter\n        if (islower(c)) {\n            c = toupper(c);\n        } else if (isupper(c)) {\n            c = tolower(c);\n        }\n\n        // Replace vowels with the letter that appears 2 places ahead in the alphabet\n        if (c == 'a' || c == 'A') {\n            c = (c == 'a') ? 'c' : 'C';\n        } else if (c == 'e' || c == 'E') {\n            c = (c == 'e') ? 'g' : 'G';\n        } else if (c == 'i' || c == 'I') {\n            c = (c == 'i') ? 'k' : 'K';\n        } else if (c == 'o' || c == 'O') {\n            c = (c == 'o') ? 'q' : 'Q';\n        } else if (c == 'u' || c == 'U') {\n            c = (c == 'u') ? 'w' : 'W';\n        }\n\n        encodedMessage += c;\n    }\n    return encodedMessage;\n}\n\n// Example usage\n"}
{"task_id": "CPP/152", "generation": "#include <vector>\n#include <cmath> // for std::abs\n\nusing namespace std;\n\nvector<int> compare(vector<int> game, vector<int> guess) {\n    vector<int> result;\n    for (size_t i = 0; i < game.size(); ++i) {\n        if (game[i] == guess[i]) {\n            result.push_back(0);\n        } else {\n            result.push_back(std::abs(game[i] - guess[i]));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/62", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<float> derivative(vector<float> xs) {\n    vector<float> result;\n    for (size_t i = 1; i < xs.size(); ++i) {\n        result.push_back(i * xs[i]);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/7", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> filter_by_substring(vector<string> strings, string substring) {\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.find(substring) != string::npos) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/24", "generation": "#include<iostream>\nusing namespace std;\n\nint largest_divisor(int n) {\n    // Start from n-1 and go down to 1\n    for (int i = n - 1; i > 0; --i) {\n        // Check if i divides n evenly\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    // If no divisor is found, return 1 (though this case should never occur for positive n)\n    return 1;\n}\n\n"}
{"task_id": "CPP/79", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nstring decimal_to_binary(int decimal) {\n    if (decimal == 0) {\n        return \"db0db\";\n    }\n\n    string binary = \"\";\n    \n    while (decimal > 0) {\n        int remainder = decimal % 2;\n        binary += to_string(remainder);\n        decimal /= 2;\n    }\n\n    // Reverse the string to get the correct binary representation\n    reverse(binary.begin(), binary.end());\n\n    // Add the \"db\" characters at the beginning and end\n    binary = \"db\" + binary + \"db\";\n\n    return binary;\n}\n\n"}
{"task_id": "CPP/155", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n\nvector<int> even_odd_count(int num) {\n    num = abs(num);  // Convert negative number to positive\n    int even_count = 0;\n    int odd_count = 0;\n    \n    while (num > 0) {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n        num /= 10;\n    }\n    \n    return {even_count, odd_count};\n}\n"}
{"task_id": "CPP/4", "generation": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <numeric> // for std::accumulate\n\nusing namespace std;\n\nfloat mean_absolute_deviation(const vector<float>& numbers) {\n    if (numbers.empty()) {\n        return 0.0; // Return 0 if the vector is empty to avoid division by zero\n    }\n\n    // Step 1: Calculate the mean of the dataset\n    float sum = accumulate(numbers.begin(), numbers.end(), 0.0);\n    float mean = sum / numbers.size();\n\n    // Step 2: Compute the absolute difference between each element and the mean\n    float absolute_deviations_sum = 0.0;\n    for (float number : numbers) {\n        absolute_deviations_sum += fabs(number - mean);\n    }\n\n    // Step 3: Divide the sum of absolute deviations by the number of elements\n    float mad = absolute_deviations_sum / numbers.size();\n\n    return mad;\n}\n\n"}
{"task_id": "CPP/56", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool correct_bracketing(string brackets) {\n    int count = 0;\n    for (char bracket : brackets) {\n        if (bracket == '<') {\n            count++;\n        } else if (bracket == '>') {\n            count--;\n        }\n        // If count goes negative, it means there are unmatched closing brackets\n        if (count < 0) {\n            return false;\n        }\n    }\n    // If count is zero, all brackets are matched\n    return count == 0;\n}\n\n"}
{"task_id": "CPP/159", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<int> eat(int number, int need, int remaining) {\n    int total_eaten = number + min(need, remaining);\n    int remaining_after_eating = max(0, remaining - need);\n    return {total_eaten, remaining_after_eating};\n}\n"}
{"task_id": "CPP/83", "generation": "#include <iostream>\n#include <string>\n\nint starts_one_ends(int n) {\n    if (n == 1) {\n        return 1;  // Special case: only the number 1 itself\n    }\n    int count = 0;\n    for (int i = 10 * (n - 1); i < 10 * n; ++i) {\n        std::string s = std::to_string(i);\n        if (s[0] == '1' || s[s.size() - 1] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/27", "generation": "#include <iostream>\n#include <string>\n#include <cctype> // for isupper and islower functions\n\nusing namespace std;\n\nstring flip_case(string str) {\n    for (char &c : str) {\n        if (isupper(c)) {\n            c = tolower(c); // Convert uppercase to lowercase\n        } else if (islower(c)) {\n            c = toupper(c); // Convert lowercase to uppercase\n        }\n    }\n    return str;\n}\n\n"}
{"task_id": "CPP/146", "generation": "#include <vector>\n#include <cmath>\nusing namespace std;\n\nbool isOddDigit(int digit) {\n    return digit == 1 || digit == 3 || digit == 5 || digit == 7 || digit == 9;\n}\n\nint specialFilter(vector<int> nums) {\n    int count = 0;\n    \n    for (int num : nums) {\n        if (num > 10) {\n            // Convert the number to its absolute value to handle negative numbers\n            int absNum = abs(num);\n            \n            // Extract the last digit\n            int lastDigit = absNum % 10;\n            \n            // Extract the first digit\n            int firstDigit = absNum;\n            while (firstDigit >= 10) {\n                firstDigit /= 10;\n            }\n            \n            // Check if both digits are odd\n            if (isOddDigit(firstDigit) && isOddDigit(lastDigit)) {\n                count++;\n            }\n        }\n    }\n    \n    return count;\n}\n\n// Example usage\n"}
{"task_id": "CPP/81", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> numerical_letter_grade(vector<float> grades) {\n    vector<string> letter_grades;\n    for (float gpa : grades) {\n        if (gpa == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (gpa > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (gpa > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (gpa > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (gpa > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (gpa > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (gpa > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (gpa > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (gpa > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (gpa > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (gpa > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (gpa > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n}\n"}
{"task_id": "CPP/136", "generation": "#include <vector>\n#include <limits.h> // For INT_MAX and INT_MIN\n\nusing namespace std;\n\nvector<int> largest_smallest_integers(vector<int> lst) {\n    int largest_negative = INT_MIN; // Initialize to the smallest possible integer\n    int smallest_positive = INT_MAX; // Initialize to the largest possible integer\n\n    for (int num : lst) {\n        if (num < 0) {\n            // Update largest_negative if num is larger than the current largest_negative\n            if (num > largest_negative) {\n                largest_negative = num;\n            }\n        } else if (num > 0) {\n            // Update smallest_positive if num is smaller than the current smallest_positive\n            if (num < smallest_positive) {\n                smallest_positive = num;\n            }\n        }\n    }\n\n    // If no negative number was found, set largest_negative to 0\n    if (largest_negative == INT_MIN) {\n        largest_negative = 0;\n    }\n\n    // If no positive number was found, set smallest_positive to 0\n    if (smallest_positive == INT_MAX) {\n        smallest_positive = 0;\n    }\n\n    return {largest_negative, smallest_positive};\n}\n\n// Example usage\n"}
{"task_id": "CPP/67", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nint fruit_distribution(string s, int n) {\n    // Initialize variables to store the number of apples and oranges\n    int apples = 0, oranges = 0;\n    \n    // Use a stringstream to parse the input string\n    stringstream ss(s);\n    string temp;\n    \n    // Read the number of apples\n    ss >> apples;\n    ss >> temp; // Skip the word \"apples\"\n    ss >> temp; // Skip the word \"and\"\n    \n    // Read the number of oranges\n    ss >> oranges;\n    \n    // Calculate the number of mangoes\n    int mangoes = n - apples - oranges;\n    \n    return mangoes;\n}\n\n"}
{"task_id": "CPP/48", "generation": "#include <iostream>\n#include <string>\n\nbool is_palindrome(const std::string& text) {\n    int left = 0;\n    int right = text.length() - 1;\n\n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/125", "generation": "#include <vector>\n#include <string>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> split_words(string txt) {\n    // Check for whitespace\n    if (txt.find(' ') != string::npos) {\n        vector<string> result;\n        stringstream ss(txt);\n        string word;\n        while (ss >> word) {\n            result.push_back(word);\n        }\n        return result;\n    }\n    \n    // Check for commas\n    if (txt.find(',') != string::npos) {\n        vector<string> result;\n        stringstream ss(txt);\n        string word;\n        while (getline(ss, word, ',')) {\n            result.push_back(word);\n        }\n        return result;\n    }\n    \n    // Count odd-indexed lowercase letters\n    int count = 0;\n    for (char c : txt) {\n        if (islower(c)) {\n            int index = c - 'a';\n            if (index % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    \n    return {to_string(count)};\n}\n"}
{"task_id": "CPP/160", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\n\nint do_algebra(vector<string> operators, vector<int> operands) {\n    // Initialize the result with the first operand\n    int result = operands[0];\n    \n    // Iterate through the operators and operands to build the expression\n    for (size_t i = 0; i < operators.size(); ++i) {\n        string op = operators[i];\n        int operand = operands[i + 1];\n        \n        // Perform the operation based on the operator\n        if (op == \"+\") {\n            result += operand;\n        } else if (op == \"-\") {\n            result -= operand;\n        } else if (op == \"*\") {\n            result *= operand;\n        } else if (op == \"//\") {\n            result /= operand; // Note: C++ uses '/' for integer division, which is equivalent to floor division\n        } else if (op == \"**\") {\n            result = pow(result, operand);\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/151", "generation": "#include <vector>\n#include <cmath>\nusing namespace std;\n\nlong long double_the_difference(vector<float> lst) {\n    long long sum = 0;\n    \n    for (float num : lst) {\n        // Check if the number is a positive integer\n        if (num > 0 && floor(num) == num) {\n            int int_num = static_cast<int>(num);\n            // Check if the number is odd\n            if (int_num % 2 != 0) {\n                sum += int_num * int_num;\n            }\n        }\n    }\n    \n    return sum;\n}\n"}
{"task_id": "CPP/117", "generation": "#include <vector>\n#include <string>\n#include <sstream>\n#include <unordered_set>\n\nusing namespace std;\n\nvector<string> select_words(string s, int n) {\n    vector<string> result;\n    if (s.empty()) {\n        return result;\n    }\n\n    // Define a set of vowels for quick lookup\n    unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n\n    // Split the string into words\n    istringstream iss(s);\n    string word;\n    while (iss >> word) {\n        int consonant_count = 0;\n        // Count consonants in the current word\n        for (char c : word) {\n            if (isalpha(c) && vowels.find(c) == vowels.end()) {\n                consonant_count++;\n            }\n        }\n        // If the word has exactly n consonants, add it to the result\n        if (consonant_count == n) {\n            result.push_back(word);\n        }\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/78", "generation": "#include <iostream>\n#include <string>\n#include <unordered_set>\nusing namespace std;\n\nint hex_key(string num) {\n    // Define the set of prime hexadecimal digits\n    unordered_set<char> prime_digits = {'2', '3', '5', '7', 'B', 'D'};\n    \n    // Initialize the count of prime digits\n    int count = 0;\n    \n    // Iterate through the input string\n    for (char c : num) {\n        // Check if the current character is in the set of prime digits\n        if (prime_digits.find(c) != prime_digits.end()) {\n            count++;\n        }\n    }\n    \n    // Return the count of prime digits\n    return count;\n}\n\n// Test cases\n"}
{"task_id": "CPP/74", "generation": "#include <vector>\n#include <string>\n#include <numeric> // for accumulate\n\nusing namespace std;\n\nint total_chars(const vector<string>& vec) {\n    return accumulate(vec.begin(), vec.end(), 0, [](int sum, const string& str) {\n        return sum + str.size();\n    });\n}\n\nvector<string> total_match(vector<string> lst1, vector<string> lst2) {\n    int total_chars_lst1 = total_chars(lst1);\n    int total_chars_lst2 = total_chars(lst2);\n\n    if (total_chars_lst1 <= total_chars_lst2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n"}
{"task_id": "CPP/53", "generation": "#include<iostream>\n\nint add(int x, int y) {\n    return x + y;\n}\n\n"}
{"task_id": "CPP/98", "generation": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint count_upper(string s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) { // Iterate through even indices\n        char c = s[i];\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/140", "generation": "#include <string>\n#include <iostream>\nusing namespace std;\n\nstring fix_spaces(string text) {\n    string result;\n    int n = text.length();\n    int i = 0;\n\n    while (i < n) {\n        if (text[i] == ' ') {\n            int count = 0;\n            // Count consecutive spaces\n            while (i < n && text[i] == ' ') {\n                count++;\n                i++;\n            }\n            // If more than 2 consecutive spaces, replace with '-'\n            if (count > 2) {\n                result += '-';\n            } else {\n                // Replace 1 or 2 spaces with underscores\n                for (int j = 0; j < count; j++) {\n                    result += '_';\n                }\n            }\n        } else {\n            // If not a space, just add the character to the result\n            result += text[i];\n            i++;\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/34", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> unique(vector<int> l) {\n    // Step 1: Sort the vector\n    sort(l.begin(), l.end());\n    \n    // Step 2: Use std::unique to remove consecutive duplicates\n    auto it = unique(l.begin(), l.end());\n    \n    // Step 3: Resize the vector to remove the extra elements\n    l.resize(distance(l.begin(), it));\n    \n    return l;\n}\n\n// Example usage\n"}
{"task_id": "CPP/66", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint digitSum(string s) {\n    int sum = 0;\n    for (char c : s) {\n        if (c >= 'A' && c <= 'Z') {\n            sum += c;\n        }\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/120", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> maximum(vector<int> arr, int k) {\n    // Step 1: Sort the array in ascending order\n    sort(arr.begin(), arr.end());\n    \n    // Step 2: Extract the last k elements (which are the top k maximum elements)\n    vector<int> result(arr.end() - k, arr.end());\n    \n    // Step 3: The result is already in ascending order, so no need to sort again\n    return result;\n}\n"}
{"task_id": "CPP/139", "generation": "#include <stdio.h>\n\n// Helper function to calculate factorial of a number\nlong long factorial(int num) {\n    long long result = 1;\n    for (int i = 1; i <= num; i++) {\n        result *= i;\n    }\n    return result;\n}\n\n// Function to calculate the Brazilian factorial\nlong long special_factorial(int n) {\n    long long result = 1;\n    for (int i = n; i >= 1; i--) {\n        result *= factorial(i);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/12", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring longest(vector<string> strings) {\n    // Check if the vector is empty\n    if (strings.empty()) {\n        return \"\"; // Return an empty string to represent None\n    }\n\n    // Initialize variables to keep track of the longest string\n    string longest_string = strings[0];\n\n    // Iterate through the vector to find the longest string\n    for (const string& str : strings) {\n        if (str.length() > longest_string.length()) {\n            longest_string = str;\n        }\n    }\n\n    return longest_string;\n}\n\n"}
{"task_id": "CPP/121", "generation": "#include <vector>\nusing namespace std;\n\nint solution(vector<int> lst) {\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/35", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm> // for std::max_element\n\nusing namespace std;\n\nfloat max_element(const vector<float>& l) {\n    // Check if the vector is empty\n    if (l.empty()) {\n        throw invalid_argument(\"Vector is empty\");\n    }\n    \n    // Use std::max_element to find the maximum element\n    return *max_element(l.begin(), l.end());\n}\n\n"}
{"task_id": "CPP/20", "generation": "#include <vector>\n#include <algorithm>\n#include <limits>\n\nusing namespace std;\n\nvector<float> find_closest_elements(vector<float> numbers) {\n    // Sort the vector in ascending order\n    sort(numbers.begin(), numbers.end());\n    \n    // Initialize variables to track the minimum difference and the closest pair\n    float min_diff = numeric_limits<float>::infinity();\n    vector<float> closest_pair = {0, 0};\n    \n    // Iterate through the sorted vector to find the closest pair\n    for (size_t i = 0; i < numbers.size() - 1; ++i) {\n        float diff = numbers[i + 1] - numbers[i];\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = {numbers[i], numbers[i + 1]};\n        }\n    }\n    \n    return closest_pair;\n}\n"}
{"task_id": "CPP/19", "generation": "#include <iostream>\n#include <string>\n#include <vector>\n#include <map>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nstring sort_numbers(string numbers) {\n    // Step 1: Create a mapping from number words to their integer values\n    map<string, int> word_to_num = {\n        {\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3}, {\"four\", 4},\n        {\"five\", 5}, {\"six\", 6}, {\"seven\", 7}, {\"eight\", 8}, {\"nine\", 9}\n    };\n\n    // Step 2: Tokenize the input string\n    vector<string> tokens;\n    stringstream ss(numbers);\n    string token;\n    while (ss >> token) {\n        tokens.push_back(token);\n    }\n\n    // Step 3: Convert to integers\n    vector<int> nums;\n    for (const string& word : tokens) {\n        nums.push_back(word_to_num[word]);\n    }\n\n    // Step 4: Sort the integers\n    sort(nums.begin(), nums.end());\n\n    // Step 5: Convert back to words\n    vector<string> sorted_words;\n    for (int num : nums) {\n        for (const auto& pair : word_to_num) {\n            if (pair.second == num) {\n                sorted_words.push_back(pair.first);\n                break;\n            }\n        }\n    }\n\n    // Step 6: Join the words\n    string result;\n    for (size_t i = 0; i < sorted_words.size(); ++i) {\n        result += sorted_words[i];\n        if (i < sorted_words.size() - 1) {\n            result += \" \";\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/85", "generation": "#include <vector>\nusing namespace std;\n\nint add(vector<int> lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.size(); ++i) {\n        if (i % 2 != 0 && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/21", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm> // For std::min_element and std::max_element\n\nusing namespace std;\n\nvector<float> rescale_to_unit(vector<float> numbers) {\n    // Find the minimum and maximum values in the vector\n    float min_value = *min_element(numbers.begin(), numbers.end());\n    float max_value = *max_element(numbers.begin(), numbers.end());\n\n    // Apply the linear transformation to each element\n    vector<float> rescaled_numbers;\n    for (float num : numbers) {\n        float rescaled_num = (num - min_value) / (max_value - min_value);\n        rescaled_numbers.push_back(rescaled_num);\n    }\n\n    return rescaled_numbers;\n}\n\n"}
{"task_id": "CPP/119", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nbool is_balanced(const string& s) {\n    int balance = 0;\n    for (char c : s) {\n        if (c == '(') {\n            balance++;\n        } else {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance == 0;\n}\n\nstring match_parens(vector<string> lst) {\n    string s1 = lst[0];\n    string s2 = lst[1];\n    if (is_balanced(s1 + s2) || is_balanced(s2 + s1)) {\n        return \"Yes\";\n    }\n    return \"No\";\n}\n"}
{"task_id": "CPP/30", "generation": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<float> get_positive(vector<float> l) {\n    vector<float> positive_numbers;\n    for (float num : l) {\n        if (num > 0) {\n            positive_numbers.push_back(num);\n        }\n    }\n    return positive_numbers;\n}\n\n"}
{"task_id": "CPP/64", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nint vowels_count(string s) {\n    int count = 0;\n    transform(s.begin(), s.end(), s.begin(), ::tolower); // Convert the string to lowercase\n\n    for (char c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n\n    // Check if 'y' is at the end of the word\n    if (!s.empty() && s.back() == 'y') {\n        count++;\n    }\n\n    return count;\n}\n\n// Example usage\n"}
{"task_id": "CPP/128", "generation": "#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n\nint prod_signs(vector<int> arr) {\n    // Handle the special case for an empty vector\n    if (arr.empty()) {\n        return -32768;\n    }\n\n    int product_of_signs = 1;\n    int sum_of_magnitudes = 0;\n\n    for (int num : arr) {\n        // Determine the sign of the number\n        int sign = (num > 0) ? 1 : (num < 0) ? -1 : 0;\n        // Update the product of signs\n        product_of_signs *= sign;\n        // Add the magnitude of the number to the sum\n        sum_of_magnitudes += abs(num);\n    }\n\n    // Multiply the sum of magnitudes by the product of signs\n    return sum_of_magnitudes * product_of_signs;\n}\n\n// Example usage\n"}
{"task_id": "CPP/127", "generation": "#include <vector>\n#include <string>\n#include <cmath>\nusing namespace std;\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nstring intersection(vector<int> interval1, vector<int> interval2) {\n    int start1 = interval1[0], end1 = interval1[1];\n    int start2 = interval2[0], end2 = interval2[1];\n    \n    // Find the intersection of the two intervals\n    int intersection_start = max(start1, start2);\n    int intersection_end = min(end1, end2);\n    \n    // If the intervals do not intersect\n    if (intersection_start > intersection_end) {\n        return \"NO\";\n    }\n    \n    // Calculate the length of the intersection\n    int intersection_length = intersection_end - intersection_start + 1;\n    \n    // Check if the length is a prime number\n    if (is_prime(intersection_length)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n"}
{"task_id": "CPP/122", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nint add_elements(vector<int> arr, int k) {\n    int sum_of_elements = 0;\n    for (int i = 0; i < k; ++i) {\n        if (arr[i] < 100) {\n            sum_of_elements += arr[i];\n        }\n    }\n    return sum_of_elements;\n}\n"}
{"task_id": "CPP/59", "generation": "#include <stdio.h>\n\nint largest_prime_factor(int n) {\n    int largest_factor = 1;\n    \n    // Check for the number 2\n    while (n % 2 == 0) {\n        largest_factor = 2;\n        n /= 2;\n    }\n    \n    // Check for odd factors from 3 onwards\n    for (int i = 3; i * i <= n; i += 2) {\n        while (n % i == 0) {\n            largest_factor = i;\n            n /= i;\n        }\n    }\n    \n    // If n is still greater than 2, then n itself is a prime number\n    if (n > 2) {\n        largest_factor = n;\n    }\n    \n    return largest_factor;\n}\n\n"}
{"task_id": "CPP/134", "generation": "#include <iostream>\n#include <string>\n#include <cctype> // for isalpha\n\nusing namespace std;\n\nbool check_if_last_char_is_a_letter(string txt) {\n    // Check if the string is empty\n    if (txt.empty()) {\n        return false;\n    }\n\n    // Get the last character\n    char last_char = txt.back();\n\n    // Check if the last character is an alphabetical character\n    if (!isalpha(last_char)) {\n        return false;\n    }\n\n    // Check if the last character is not part of a word\n    // Ensure that the last character is not followed by any other characters\n    if (txt.size() > 1 && txt[txt.size() - 2] != ' ') {\n        return false;\n    }\n\n    return true;\n}\n\n// Test cases\n"}
{"task_id": "CPP/42", "generation": "#include <vector>\nusing namespace std;\n\nvector<int> incr_list(vector<int> l) {\n    vector<int> result;\n    for (int i = 0; i < l.size(); i++) {\n        result.push_back(l[i] + 1);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/11", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring string_xor(string a, string b) {\n    // Ensure both strings are of the same length\n    if (a.length() != b.length()) {\n        throw invalid_argument(\"Input strings must be of the same length\");\n    }\n\n    string result = \"\";\n    for (size_t i = 0; i < a.length(); ++i) {\n        // Perform XOR operation on each bit\n        char xor_bit = (a[i] == b[i]) ? '0' : '1';\n        result += xor_bit;\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/40", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nbool triples_sum_to_zero(vector<int> l) {\n    // Sort the vector\n    sort(l.begin(), l.end());\n    \n    int n = l.size();\n    \n    // Iterate through the vector\n    for (int i = 0; i < n - 2; ++i) {\n        // Skip duplicates for the first element\n        if (i > 0 && l[i] == l[i - 1]) continue;\n        \n        int left = i + 1;\n        int right = n - 1;\n        \n        while (left < right) {\n            int sum = l[i] + l[left] + l[right];\n            \n            if (sum == 0) {\n                return true;\n            } else if (sum < 0) {\n                // Move the left pointer to the right to increase the sum\n                ++left;\n            } else {\n                // Move the right pointer to the left to decrease the sum\n                --right;\n            }\n        }\n    }\n    \n    return false;\n}\n\n// Example usage\n"}
{"task_id": "CPP/13", "generation": "#include <iostream>\n\nint greatest_common_divisor(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\n"}
{"task_id": "CPP/130", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<int> tri(int n) {\n    if (n == 0) {\n        return {3};\n    }\n    \n    vector<int> sequence(n + 1, 3);\n    \n    for (int i = 1; i <= n; ++i) {\n        if (i % 2 == 0) {\n            sequence[i] = 1 + i / 2;\n        } else {\n            sequence[i] = sequence[i - 1] + sequence[i - 2] + sequence[i + 1];\n        }\n    }\n    \n    return sequence;\n}\n"}
{"task_id": "CPP/60", "generation": "#include<iostream>\nusing namespace std;\n\nint sum_to_n(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; ++i) {\n        sum += i;\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/23", "generation": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint stringLength(const string& str) {\n    return str.length();\n}\n\n"}
{"task_id": "CPP/46", "generation": "#include <stdio.h>\n\nint fib4(int n) {\n    // Base cases\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n\n    // Initialize the first four elements of the sequence\n    int a = 0, b = 0, c = 2, d = 0;\n    int result = 0;\n\n    // Compute the n-th element iteratively\n    for (int i = 4; i <= n; ++i) {\n        result = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = result;\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/51", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nstring remove_vowels(string text) {\n    string result;\n    for (char c : text) {\n        // Check if the character is a vowel (both uppercase and lowercase)\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' &&\n            c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n            result += c;\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/18", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint how_many_times(string str, string substring) {\n    int count = 0;\n    int sub_len = substring.length();\n    int str_len = str.length();\n\n    if (sub_len == 0 || str_len == 0) {\n        return 0;\n    }\n\n    for (int i = 0; i <= str_len - sub_len; ++i) {\n        if (str.substr(i, sub_len) == substring) {\n            ++count;\n        }\n    }\n\n    return count;\n}\n\n"}
{"task_id": "CPP/143", "generation": "#include <iostream>\n#include <string>\n#include <vector>\n#include <cmath>\n\nusing namespace std;\n\n// Function to check if a number is prime\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true; // 2 is the only even prime number\n    if (n % 2 == 0) return false; // Other even numbers are not prime\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\n// Function to split the sentence into words\nvector<string> split(const string& sentence) {\n    vector<string> words;\n    string word;\n    for (char ch : sentence) {\n        if (ch == ' ') {\n            if (!word.empty()) {\n                words.push_back(word);\n                word.clear();\n            }\n        } else {\n            word += ch;\n        }\n    }\n    if (!word.empty()) {\n        words.push_back(word);\n    }\n    return words;\n}\n\n// Function to filter words by their length being prime\nstring words_in_sentence(string sentence) {\n    vector<string> words = split(sentence);\n    string result;\n    for (const string& word : words) {\n        if (isPrime(word.length())) {\n            if (!result.empty()) {\n                result += \" \";\n            }\n            result += word;\n        }\n    }\n    return result;\n}\n\n// Example usage\n"}
{"task_id": "CPP/108", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n\nint sum_of_digits(int num) {\n    int total = 0;\n    int abs_num = abs(num);\n    while (abs_num > 0) {\n        total += abs_num % 10;\n        abs_num /= 10;\n    }\n    if (num < 0) {\n        total = -total;\n    }\n    return total;\n}\n\nint count_nums(vector<int> n) {\n    int count = 0;\n    for (int num : n) {\n        if (sum_of_digits(num) > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/43", "generation": "#include <vector>\n#include <unordered_set>\nusing namespace std;\n\nbool pairs_sum_to_zero(vector<int> l) {\n    unordered_set<int> seen;\n    \n    for (int num : l) {\n        if (seen.find(-num) != seen.end()) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    \n    return false;\n}\n\n// Test cases\n"}
{"task_id": "CPP/70", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> strange_sort_list(vector<int> lst) {\n    // Sort the input vector in ascending order\n    sort(lst.begin(), lst.end());\n    \n    // Initialize the result vector\n    vector<int> result;\n    \n    // Initialize indices for the smallest and largest elements\n    int left = 0;\n    int right = lst.size() - 1;\n    \n    // Alternate between the smallest and largest elements\n    while (left <= right) {\n        if (left <= right) {\n            result.push_back(lst[left]);\n            left++;\n        }\n        if (left <= right) {\n            result.push_back(lst[right]);\n            right--;\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/63", "generation": "#include <iostream>\n#include <vector>\n\nint fibfib(int n) {\n    if (n == 0 || n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 1;\n    }\n\n    std::vector<int> fibfib_sequence(n + 1);\n    fibfib_sequence[0] = 0;\n    fibfib_sequence[1] = 0;\n    fibfib_sequence[2] = 1;\n\n    for (int i = 3; i <= n; ++i) {\n        fibfib_sequence[i] = fibfib_sequence[i - 1] + fibfib_sequence[i - 2] + fibfib_sequence[i - 3];\n    }\n\n    return fibfib_sequence[n];\n}\n\n"}
{"task_id": "CPP/89", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring encrypt(string s) {\n    string encrypted = \"\";\n    for (char c : s) {\n        if (c >= 'a' && c <= 'z') {\n            // Shift the character by 4 places\n            char newChar = ((c - 'a' + 4) % 26) + 'a';\n            encrypted += newChar;\n        } else if (c >= 'A' && c <= 'Z') {\n            // Shift the character by 4 places (for uppercase letters)\n            char newChar = ((c - 'A' + 4) % 26) + 'A';\n            encrypted += newChar;\n        } else {\n            // If the character is not a letter, leave it unchanged\n            encrypted += c;\n        }\n    }\n    return encrypted;\n}\n\n"}
{"task_id": "CPP/26", "generation": "#include<stdio.h>\n#include<vector>\n#include<unordered_map>\nusing namespace std;\n\nvector<int> remove_duplicates(vector<int> numbers) {\n    unordered_map<int, int> count_map;\n    vector<int> result;\n\n    // Count occurrences of each number\n    for (int num : numbers) {\n        count_map[num]++;\n    }\n\n    // Add numbers that occur exactly once to the result\n    for (int num : numbers) {\n        if (count_map[num] == 1) {\n            result.push_back(num);\n        }\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/104", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\n// Helper function to check if a number contains any even digit\nbool hasEvenDigit(int num) {\n    while (num > 0) {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            return true;\n        }\n        num /= 10;\n    }\n    return false;\n}\n\nvector<int> unique_digits(vector<int> x) {\n    vector<int> result;\n    \n    // Filter out numbers that contain any even digit\n    for (int num : x) {\n        if (!hasEvenDigit(num)) {\n            result.push_back(num);\n        }\n    }\n    \n    // Sort the result in increasing order\n    sort(result.begin(), result.end());\n    \n    return result;\n}\n\n// Example usage\n"}
{"task_id": "CPP/90", "generation": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nint next_smallest(const std::vector<int>& lst) {\n    if (lst.size() < 2) {\n        return -1; // Return -1 as a sentinel value for None\n    }\n\n    // Create a copy of the vector and sort it\n    std::vector<int> sorted_lst = lst;\n    std::sort(sorted_lst.begin(), sorted_lst.end());\n\n    // Find the second smallest unique element\n    int smallest = sorted_lst[0];\n    for (size_t i = 1; i < sorted_lst.size(); ++i) {\n        if (sorted_lst[i] != smallest) {\n            return sorted_lst[i];\n        }\n    }\n\n    return -1; // Return -1 if there is no second smallest unique element\n}\n\n"}
{"task_id": "CPP/126", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nbool is_sorted(vector<int> lst) {\n    // Check if the vector is sorted in ascending order\n    if (!is_sorted(lst.begin(), lst.end())) {\n        return false;\n    }\n\n    // Check if any number appears more than twice\n    for (size_t i = 0; i < lst.size(); ++i) {\n        int count = 0;\n        for (size_t j = 0; j < lst.size(); ++j) {\n            if (lst[i] == lst[j]) {\n                count++;\n            }\n            if (count > 2) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n"}
{"task_id": "CPP/68", "generation": "#include<vector>\nusing namespace std;\n\nvector<int> pluck(vector<int> arr) {\n    if (arr.empty()) {\n        return {};\n    }\n\n    int smallest_even = -1;\n    int smallest_index = -1;\n\n    for (int i = 0; i < arr.size(); ++i) {\n        if (arr[i] % 2 == 0) {\n            if (smallest_even == -1 || arr[i] < smallest_even) {\n                smallest_even = arr[i];\n                smallest_index = i;\n            }\n        }\n    }\n\n    if (smallest_even == -1) {\n        return {};\n    }\n\n    return {smallest_even, smallest_index};\n}\n"}
{"task_id": "CPP/58", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <set>\n\nusing namespace std;\n\nvector<int> common(vector<int> l1, vector<int> l2) {\n    // Convert vectors to sets to remove duplicates\n    set<int> set1(l1.begin(), l1.end());\n    set<int> set2(l2.begin(), l2.end());\n    \n    // Find the intersection of the two sets\n    vector<int> result;\n    set_intersection(set1.begin(), set1.end(), set2.begin(), set2.end(), back_inserter(result));\n    \n    // Sort the result (though the result is already sorted because sets are ordered)\n    sort(result.begin(), result.end());\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/112", "generation": "#include<iostream>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nvector<string> reverse_delete(string s, string c) {\n    // Step 1: Remove characters in s that are in c\n    string result;\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            result += ch;\n        }\n    }\n    \n    // Step 2: Check if the result string is a palindrome\n    bool isPalindrome = true;\n    int n = result.length();\n    for (int i = 0; i < n / 2; ++i) {\n        if (result[i] != result[n - i - 1]) {\n            isPalindrome = false;\n            break;\n        }\n    }\n    \n    // Step 3: Prepare the result vector\n    vector<string> resultVector;\n    resultVector.push_back(result);\n    resultVector.push_back(isPalindrome ? \"True\" : \"False\");\n    \n    return resultVector;\n}\n\n"}
{"task_id": "CPP/96", "generation": "#include <vector>\n#include <cmath>\n\nusing namespace std;\n\nvector<int> count_up_to(int n) {\n    if (n <= 2) {\n        return {};\n    }\n\n    // Initialize a boolean array \"is_prime[0..n]\" and set all entries as true.\n    // A value in is_prime[i] will be false if i is not a prime, true if i is a prime.\n    vector<bool> is_prime(n, true);\n    is_prime[0] = is_prime[1] = false; // 0 and 1 are not prime numbers\n\n    // Implementing the Sieve of Eratosthenes\n    for (int p = 2; p <= sqrt(n); ++p) {\n        // If is_prime[p] is not changed, then it is a prime\n        if (is_prime[p]) {\n            // Updating all multiples of p to false\n            for (int i = p * p; i < n; i += p) {\n                is_prime[i] = false;\n            }\n        }\n    }\n\n    // Collecting all prime numbers\n    vector<int> primes;\n    for (int p = 2; p < n; ++p) {\n        if (is_prime[p]) {\n            primes.push_back(p);\n        }\n    }\n\n    return primes;\n}\n"}
{"task_id": "CPP/157", "generation": "#include<stdio.h>\n#include<math.h>\n\nbool right_angle_triangle(float a, float b, float c) {\n    // Ensure the sides are in non-decreasing order\n    if (a > b) {\n        float temp = a;\n        a = b;\n        b = temp;\n    }\n    if (b > c) {\n        float temp = b;\n        b = c;\n        c = temp;\n    }\n    if (a > b) {\n        float temp = a;\n        a = b;\n        b = temp;\n    }\n\n    // Now c is the longest side\n    return (pow(a, 2) + pow(b, 2) == pow(c, 2));\n}\n\n"}
{"task_id": "CPP/99", "generation": "#include <iostream>\n#include <string>\n#include <cmath>\n\nusing namespace std;\n\nint closest_integer(string value) {\n    // Convert the string to a double\n    double number = stod(value);\n    \n    // Determine the closest integer\n    int closest;\n    if (number >= 0) {\n        closest = static_cast<int>(floor(number + 0.5));\n    } else {\n        closest = static_cast<int>(ceil(number - 0.5));\n    }\n    \n    return closest;\n}\n\n"}
{"task_id": "CPP/149", "generation": "#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nvector<string> sorted_list_sum(vector<string> lst) {\n    // Step 1: Filter out strings with odd lengths\n    vector<string> filtered_lst;\n    for (const string& s : lst) {\n        if (s.length() % 2 == 0) {\n            filtered_lst.push_back(s);\n        }\n    }\n\n    // Step 2: Sort the filtered strings\n    sort(filtered_lst.begin(), filtered_lst.end(), [](const string& a, const string& b) {\n        if (a.length() == b.length()) {\n            return a < b; // Sort alphabetically if lengths are the same\n        }\n        return a.length() < b.length(); // Sort by length\n    });\n\n    return filtered_lst;\n}\n\n// Example usage\n"}
{"task_id": "CPP/86", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <sstream>\n\nusing namespace std;\n\nstring anti_shuffle(string s) {\n    // Create a stringstream to split the input string by spaces\n    stringstream ss(s);\n    string word;\n    string result;\n\n    // Process each word in the string\n    while (ss >> word) {\n        // Sort the characters of the word in ascending order\n        sort(word.begin(), word.end());\n        // Append the sorted word to the result string\n        result += word + \" \";\n    }\n\n    // Remove the trailing space if there is any\n    if (!result.empty()) {\n        result.pop_back();\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/129", "generation": "#include <vector>\n#include <queue>\n#include <climits>\nusing namespace std;\n\nvector<int> minPath(vector<vector<int>> grid, int k) {\n    int N = grid.size();\n    vector<int> min_path(k, INT_MAX); // Initialize with maximum possible values\n    queue<pair<vector<int>, pair<int, int>>> q; // Queue to store paths and coordinates\n\n    // Directions for moving in the grid (up, down, left, right)\n    vector<pair<int, int>> directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n\n    // Start BFS from each cell in the grid\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            q.push({{grid[i][j]}, {i, j}});\n        }\n    }\n\n    while (!q.empty()) {\n        auto current = q.front();\n        q.pop();\n\n        vector<int> current_path = current.first;\n        int x = current.second.first;\n        int y = current.second.second;\n\n        // If the current path length is k, compare it with the minimum path\n        if (current_path.size() == k) {\n            if (current_path < min_path) {\n                min_path = current_path;\n            }\n            continue;\n        }\n\n        // Explore all possible moves\n        for (auto dir : directions) {\n            int new_x = x + dir.first;\n            int new_y = y + dir.second;\n\n            // Check if the new position is within the grid\n            if (new_x >= 0 && new_x < N && new_y >= 0 && new_y < N) {\n                vector<int> new_path = current_path;\n                new_path.push_back(grid[new_x][new_y]);\n                q.push({new_path, {new_x, new_y}});\n            }\n        }\n    }\n\n    return min_path;\n}\n\n// Example usage\n"}
{"task_id": "CPP/49", "generation": "#include <stdio.h>\n\nint modp(int n, int p) {\n    if (n == 0) {\n        return 1;\n    }\n\n    long long result = 1;\n    long long base = 2;\n\n    while (n > 0) {\n        // If n is odd, multiply base with result\n        if (n % 2 == 1) {\n            result = (result * base) % p;\n        }\n        // n must be even now\n        n = n / 2;\n        base = (base * base) % p;  // Change base to base^2\n    }\n\n    return (int)result;\n}\n\n"}
{"task_id": "CPP/156", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring int_to_mini_roman(int number) {\n    // Define the mapping of values to their corresponding Roman numeral symbols in lowercase\n    vector<pair<int, string>> roman_map = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"},\n        {100, \"c\"}, {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"},\n        {10, \"x\"}, {9, \"ix\"}, {5, \"v\"}, {4, \"iv\"},\n        {1, \"i\"}\n    };\n    \n    string result = \"\";\n    \n    // Iterate through the mapping\n    for (const auto& pair : roman_map) {\n        int value = pair.first;\n        string symbol = pair.second;\n        \n        // Append the symbol to the result string as many times as the value fits into the number\n        while (number >= value) {\n            result += symbol;\n            number -= value;\n        }\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/65", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nstring circular_shift(int x, int shift) {\n    // Convert the integer to a string\n    string num_str = to_string(x);\n    int num_digits = num_str.length();\n\n    // If shift is greater than the number of digits, reverse the string\n    if (shift > num_digits) {\n        reverse(num_str.begin(), num_str.end());\n        return num_str;\n    }\n\n    // Perform the circular shift\n    string shifted_str = num_str.substr(num_digits - shift) + num_str.substr(0, num_digits - shift);\n\n    return shifted_str;\n}\n\n"}
{"task_id": "CPP/9", "generation": "#include <vector>\n#include <algorithm> // for std::max\n\nusing namespace std;\n\nvector<int> rolling_max(vector<int> numbers) {\n    vector<int> result;\n    if (numbers.empty()) {\n        return result;\n    }\n\n    int current_max = numbers[0];\n    result.push_back(current_max);\n\n    for (size_t i = 1; i < numbers.size(); ++i) {\n        current_max = max(current_max, numbers[i]);\n        result.push_back(current_max);\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/158", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_set>\n#include <algorithm>\n\nusing namespace std;\n\nstring find_max(vector<string> words) {\n    string max_word = \"\";\n    int max_unique_count = 0;\n\n    for (const string& word : words) {\n        // Use an unordered_set to count unique characters\n        unordered_set<char> unique_chars(word.begin(), word.end());\n        int unique_count = unique_chars.size();\n\n        // If the current word has more unique characters, update max_word\n        if (unique_count > max_unique_count) {\n            max_word = word;\n            max_unique_count = unique_count;\n        }\n        // If the current word has the same number of unique characters but is lexicographically smaller, update max_word\n        else if (unique_count == max_unique_count && word < max_word) {\n            max_word = word;\n        }\n    }\n\n    return max_word;\n}\n\n"}
{"task_id": "CPP/8", "generation": "#include <vector>\n#include <numeric> // for std::accumulate\n\nusing namespace std;\n\nvector<int> sum_product(vector<int> numbers) {\n    // Initialize sum to 0 and product to 1\n    int sum = 0;\n    int product = 1;\n\n    // Iterate through the vector to calculate sum and product\n    for (int num : numbers) {\n        sum += num;\n        product *= num;\n    }\n\n    // Return the result as a vector containing sum and product\n    return {sum, product};\n}\n\n// Example usage\n"}
{"task_id": "CPP/95", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n\nbool check_dict_case(map<string, string> dict) {\n    if (dict.empty()) {\n        return false;\n    }\n\n    bool all_lower = true;\n    bool all_upper = true;\n\n    for (const auto& pair : dict) {\n        const string& key = pair.first;\n        if (!all_of(key.begin(), key.end(), ::islower)) {\n            all_lower = false;\n        }\n        if (!all_of(key.begin(), key.end(), ::isupper)) {\n            all_upper = false;\n        }\n        if (!all_lower && !all_upper) {\n            return false;\n        }\n    }\n\n    return all_lower || all_upper;\n}\n"}
{"task_id": "CPP/55", "generation": "#include<iostream>\nusing namespace std;\n\nint fib(int n) {\n    if (n <= 0) {\n        return 0; // Handle the case where n is less than or equal to 0\n    } else if (n == 1) {\n        return 1; // Base case for the first Fibonacci number\n    } else {\n        int a = 0, b = 1, c;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}\n\n"}
{"task_id": "CPP/29", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> filter_by_prefix(vector<string> strings, string prefix) {\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.substr(0, prefix.size()) == prefix) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/72", "generation": "#include <vector>\n#include <numeric> // for std::accumulate\n#include <algorithm> // for std::reverse\n\nbool will_it_fly(vector<int> q, int w) {\n    // Check if the vector is palindromic\n    vector<int> reversed_q = q;\n    reverse(reversed_q.begin(), reversed_q.end());\n    if (q != reversed_q) {\n        return false;\n    }\n\n    // Calculate the sum of the vector elements\n    int sum = accumulate(q.begin(), q.end(), 0);\n\n    // Check if the sum is less than or equal to the maximum possible weight\n    return sum <= w;\n}\n\n// Example usage\n"}
{"task_id": "CPP/54", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nbool same_chars(string s0, string s1) {\n    // Convert strings to vectors of characters and sort them\n    sort(s0.begin(), s0.end());\n    sort(s1.begin(), s1.end());\n    \n    // Compare the sorted vectors\n    return s0 == s1;\n}\n"}
{"task_id": "CPP/91", "generation": "#include <string>\n#include <sstream>\n#include <vector>\n\nusing namespace std;\n\nint is_bored(string S) {\n    vector<string> sentences;\n    stringstream ss(S);\n    string sentence;\n\n    // Split the string by '.', '?', and '!'\n    while (getline(ss, sentence, '.')) {\n        sentences.push_back(sentence);\n    }\n    ss.clear();\n    ss.str(S);\n    while (getline(ss, sentence, '?')) {\n        sentences.push_back(sentence);\n    }\n    ss.clear();\n    ss.str(S);\n    while (getline(ss, sentence, '!')) {\n        sentences.push_back(sentence);\n    }\n\n    int boredom_count = 0;\n    for (const string& s : sentences) {\n        string trimmed = s;\n        // Remove leading and trailing whitespace\n        trimmed.erase(0, trimmed.find_first_not_of(' '));\n        trimmed.erase(trimmed.find_last_not_of(' ') + 1);\n        if (trimmed.find(\"I \") == 0 || trimmed == \"I\") {\n            boredom_count++;\n        }\n    }\n\n    return boredom_count;\n}\n"}
{"task_id": "CPP/77", "generation": "#include<stdio.h>\n#include<math.h>\n\nbool iscube(int a) {\n    if (a < 0) {\n        a = -a; // Take the absolute value of a\n    }\n    int cube_root = cbrt(a); // Calculate the cube root of a\n    return cube_root * cube_root * cube_root == a; // Check if the cube of the cube root equals a\n}\n\n"}
{"task_id": "CPP/73", "generation": "#include <vector>\n#include <iostream>\nusing namespace std;\n\nint smallest_change(vector<int> arr) {\n    int left = 0;\n    int right = arr.size() - 1;\n    int changes = 0;\n\n    while (left < right) {\n        if (arr[left] != arr[right]) {\n            changes++;\n        }\n        left++;\n        right--;\n    }\n\n    return changes;\n}\n\n"}
{"task_id": "CPP/71", "generation": "#include<stdio.h>\n#include<math.h>\n\nfloat triangle_area(float a, float b, float c) {\n    // Check if the sides can form a valid triangle\n    if (a + b > c && a + c > b && b + c > a) {\n        // Calculate the semi-perimeter\n        float s = (a + b + c) / 2;\n        // Calculate the area using Heron's formula\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n        // Return the area rounded to 2 decimal points\n        return round(area * 100) / 100;\n    } else {\n        // Return -1 if the sides do not form a valid triangle\n        return -1;\n    }\n}\n\n"}
{"task_id": "CPP/82", "generation": "#include <iostream>\n#include <string>\n#include <cmath>\nusing namespace std;\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true; // 2 is the only even prime number\n    if (n % 2 == 0) return false; // other even numbers are not prime\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nbool prime_length(string str) {\n    int length = str.length();\n    return is_prime(length);\n}\n\n"}
{"task_id": "CPP/114", "generation": "#include <vector>\n#include <limits.h>\nusing namespace std;\n\nlong long minSubArraySum(vector<long long> nums) {\n    if (nums.empty()) {\n        return 0; // or handle the empty case as needed\n    }\n\n    long long min_sum = nums[0];\n    long long current_sum = nums[0];\n\n    for (size_t i = 1; i < nums.size(); ++i) {\n        current_sum = min(nums[i], current_sum + nums[i]);\n        min_sum = min(min_sum, current_sum);\n    }\n\n    return min_sum;\n}\n\n"}
{"task_id": "CPP/138", "generation": "#include<stdio.h>\n\nbool is_equal_to_sum_even(int n) {\n    // Check if n is less than 8\n    if (n < 8) {\n        return false;\n    }\n    // Check if n is even\n    if (n % 2 == 0) {\n        return true;\n    }\n    // If n is odd, it cannot be the sum of 4 even numbers\n    return false;\n}\n\n"}
{"task_id": "CPP/132", "generation": "#include<stdio.h>\n#include<string>\n#include<stack>\nusing namespace std;\n\nbool is_nested(string str) {\n    stack<char> s;\n    bool nested = false;\n    int depth = 0;\n\n    // First pass to check for valid pairs and nesting\n    for (char c : str) {\n        if (c == '[') {\n            s.push(c);\n        } else if (c == ']') {\n            if (!s.empty() && s.top() == '[') {\n                s.pop();\n            } else {\n                s.push(c);\n            }\n        }\n    }\n\n    // Second pass to check for nested structure\n    for (char c : str) {\n        if (c == '[') {\n            depth++;\n        } else if (c == ']') {\n            if (depth > 1) {\n                nested = true;\n            }\n            depth--;\n        }\n    }\n\n    return nested;\n}\n"}
{"task_id": "CPP/3", "generation": "#include<vector>\nusing namespace std;\n\nbool below_zero(vector<int> operations) {\n    int balance = 0;\n    for (int operation : operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/142", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nint sum_squares(vector<int> lst) {\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 3 == 0) {\n            lst[i] = lst[i] * lst[i]; // Square the entry if index is a multiple of 3\n        } else if (i % 4 == 0 && i % 3 != 0) {\n            lst[i] = lst[i] * lst[i] * lst[i]; // Cube the entry if index is a multiple of 4 and not a multiple of 3\n        }\n        sum += lst[i]; // Add the modified entry to the sum\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/50", "generation": "#include <stdio.h>\n#include <string>\nusing namespace std;\n\nstring encode_shift(string s) {\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i = 0; i < s.length(); i++) {\n        int w = ((int)s[i] + 5 - (int)'a') % 26 + (int)'a';\n        out = out + (char)w;\n    }\n    return out;\n}\n\nstring decode_shift(string s) {\n    // takes as input string encoded with encode_shift function. Returns decoded string.\n    string out;\n    int i;\n    for (i = 0; i < s.length(); i++) {\n        int w = ((int)s[i] - 5 - (int)'a' + 26) % 26 + (int)'a';\n        out = out + (char)w;\n    }\n    return out;\n}\n\n"}
{"task_id": "CPP/103", "generation": "#include <iostream>\n#include <cmath>\n#include <string>\nusing namespace std;\n\nstring rounded_avg(int n, int m) {\n    // Step 1: Check if n is greater than m\n    if (n > m) {\n        return \"-1\";\n    }\n    \n    // Step 2: Calculate the sum of integers from n to m\n    int sum = (m * (m + 1)) / 2 - ((n - 1) * n) / 2;\n    \n    // Step 3: Compute the average\n    int count = m - n + 1;\n    double average = static_cast<double>(sum) / count;\n    \n    // Step 4: Round the average to the nearest integer (smaller one)\n    int rounded_average = floor(average);\n    \n    // Step 5: Convert the rounded average to binary\n    string binary_representation = \"\";\n    while (rounded_average > 0) {\n        binary_representation = to_string(rounded_average % 2) + binary_representation;\n        rounded_average /= 2;\n    }\n    \n    // If the binary representation is empty (which happens if rounded_average is 0), return \"0\"\n    return binary_representation.empty() ? \"0\" : binary_representation;\n}\n\n"}
{"task_id": "CPP/57", "generation": "#include <vector>\nusing namespace std;\n\nbool monotonic(vector<float> l) {\n    bool increasing = true;\n    bool decreasing = true;\n\n    for (size_t i = 1; i < l.size(); ++i) {\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n        }\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n        }\n    }\n\n    return increasing || decreasing;\n}\n\n"}
{"task_id": "CPP/28", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <numeric> // for std::accumulate\n\nusing namespace std;\n\nstring concatenate(const vector<string>& strings) {\n    // Initialize an empty string to hold the result\n    string result;\n    \n    // Iterate through each string in the vector and append it to the result\n    for (const string& s : strings) {\n        result += s;\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/39", "generation": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n// Function to check if a number is prime\nbool is_prime(int num) {\n    if (num <= 1) return false;\n    if (num == 2) return true;\n    if (num % 2 == 0) return false;\n    for (int i = 3; i <= sqrt(num); i += 2) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\n// Function to generate the n-th prime Fibonacci number\nint prime_fib(int n) {\n    if (n <= 0) return -1; // Invalid input\n    int a = 0, b = 1, count = 0;\n    while (true) {\n        int temp = a + b;\n        a = b;\n        b = temp;\n        if (is_prime(b)) {\n            count++;\n            if (count == n) {\n                return b;\n            }\n        }\n    }\n}\n\n// Main function to test the prime_fib function\n"}
{"task_id": "CPP/45", "generation": "#include <stdio.h>\n\nfloat triangle_area(float a, float h) {\n    return 0.5 * a * h;\n}\n\n"}
{"task_id": "CPP/145", "generation": "#include <vector>\n#include <algorithm>\n#include <numeric>\n#include <string>\n\nusing namespace std;\n\nint sum_of_digits(int num) {\n    int sum = 0;\n    int abs_num = abs(num);\n    while (abs_num > 0) {\n        sum += abs_num % 10;\n        abs_num /= 10;\n    }\n    return num >= 0 ? sum : -sum;\n}\n\nvector<int> order_by_points(vector<int> nums) {\n    vector<pair<int, int>> indexed_nums;\n    for (int i = 0; i < nums.size(); ++i) {\n        indexed_nums.push_back({nums[i], i});\n    }\n\n    sort(indexed_nums.begin(), indexed_nums.end(), [](const pair<int, int>& a, const pair<int, int>& b) {\n        int sum_a = sum_of_digits(a.first);\n        int sum_b = sum_of_digits(b.first);\n        if (sum_a != sum_b) {\n            return sum_a < sum_b;\n        }\n        return a.second < b.second;\n    });\n\n    vector<int> sorted_nums;\n    for (const auto& p : indexed_nums) {\n        sorted_nums.push_back(p.first);\n    }\n\n    return sorted_nums;\n}\n"}
{"task_id": "CPP/84", "generation": "#include <iostream>\n#include <string>\n#include <bitset>\n\nusing namespace std;\n\nstring solve(int N) {\n    // Step 1: Calculate the sum of the digits of N\n    int sum = 0;\n    int temp = N;\n    while (temp > 0) {\n        sum += temp % 10;  // Add the last digit to the sum\n        temp /= 10;        // Remove the last digit\n    }\n\n    // Step 2: Convert the sum to its binary representation\n    string binarySum = bitset<32>(sum).to_string();  // Convert to binary string\n\n    // Step 3: Remove leading zeros from the binary string\n    size_t pos = binarySum.find('1');  // Find the first '1'\n    if (pos != string::npos) {\n        binarySum = binarySum.substr(pos);  // Extract the substring from the first '1'\n    } else {\n        binarySum = \"0\";  // If no '1' is found, the sum was 0\n    }\n\n    return binarySum;\n}\n\n"}
{"task_id": "CPP/113", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<string> odd_count(vector<string> lst) {\n    vector<string> result;\n    \n    for (size_t i = 0; i < lst.size(); ++i) {\n        int odd_count = 0;\n        for (char c : lst[i]) {\n            if ((c - '0') % 2 != 0) {\n                ++odd_count;\n            }\n        }\n        \n        // Create the output string with the correct format\n        ostringstream oss;\n        oss << \"the number of odd elements \" << odd_count << \"n the str\" << odd_count << \"ng \" << odd_count << \" of the \" << odd_count << \"nput.\";\n        result.push_back(oss.str());\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/36", "generation": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint fizz_buzz(int n) {\n    int count = 0;\n    for (int i = 0; i < n; ++i) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            string num_str = to_string(i);\n            for (char c : num_str) {\n                if (c == '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/144", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <cmath>\n\nusing namespace std;\n\nbool simplify(string x, string n) {\n    // Helper function to parse the fraction string\n    auto parseFraction = [](const string& fraction) -> pair<int, int> {\n        size_t pos = fraction.find('/');\n        int numerator = stoi(fraction.substr(0, pos));\n        int denominator = stoi(fraction.substr(pos + 1));\n        return {numerator, denominator};\n    };\n\n    // Parse the fractions\n    auto [xNum, xDen] = parseFraction(x);\n    auto [nNum, nDen] = parseFraction(n);\n\n    // Multiply the fractions\n    int resultNum = xNum * nNum;\n    int resultDen = xDen * nDen;\n\n    // Check if the result is a whole number\n    return resultNum % resultDen == 0;\n}\n\n"}
{"task_id": "CPP/0", "generation": "#include<stdio.h>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nbool has_close_elements(vector<float> numbers, float threshold) {\n    // Get the size of the vector\n    int n = numbers.size();\n    \n    // Iterate through each pair of numbers\n    for (int i = 0; i < n; ++i) {\n        for (int j = i + 1; j < n; ++j) {\n            // Calculate the absolute difference between numbers[i] and numbers[j]\n            float diff = fabs(numbers[i] - numbers[j]);\n            \n            // Check if the difference is less than the threshold\n            if (diff < threshold) {\n                return true;\n            }\n        }\n    }\n    \n    // If no such pair is found, return false\n    return false;\n}\n\n"}
{"task_id": "CPP/17", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<int> parse_music(string music_string) {\n    vector<int> beats;\n    stringstream ss(music_string);\n    string note;\n    \n    while (ss >> note) {\n        if (note == \"o\") {\n            beats.push_back(4);\n        } else if (note == \"o|\") {\n            beats.push_back(2);\n        } else if (note == \".|\") {\n            beats.push_back(1);\n        }\n    }\n    \n    return beats;\n}\n\n"}
{"task_id": "CPP/47", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nfloat median(vector<float> l) {\n    // Step 1: Sort the vector\n    sort(l.begin(), l.end());\n\n    // Step 2: Determine the size of the vector\n    int n = l.size();\n\n    // Step 3: Calculate the median\n    if (n % 2 == 1) {\n        // If the number of elements is odd, return the middle element\n        return l[n / 2];\n    } else {\n        // If the number of elements is even, return the average of the two middle elements\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    }\n}\n\n"}
{"task_id": "CPP/75", "generation": "#include <iostream>\n#include <vector>\n#include <cmath>\n\nusing namespace std;\n\n// Function to generate all prime numbers less than 100 using Sieve of Eratosthenes\nvector<int> generate_primes() {\n    const int limit = 100;\n    vector<bool> is_prime(limit, true);\n    is_prime[0] = is_prime[1] = false; // 0 and 1 are not prime numbers\n\n    for (int i = 2; i * i < limit; ++i) {\n        if (is_prime[i]) {\n            for (int j = i * i; j < limit; j += i) {\n                is_prime[j] = false;\n            }\n        }\n    }\n\n    vector<int> primes;\n    for (int i = 2; i < limit; ++i) {\n        if (is_prime[i]) {\n            primes.push_back(i);\n        }\n    }\n\n    return primes;\n}\n\n// Function to check if the given number is the multiplication of 3 prime numbers\nbool is_multiply_prime(int a) {\n    vector<int> primes = generate_primes();\n    int n = primes.size();\n\n    // Check all combinations of three primes\n    for (int i = 0; i < n; ++i) {\n        for (int j = i; j < n; ++j) {\n            for (int k = j; k < n; ++k) {\n                if (primes[i] * primes[j] * primes[k] == a) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n}\n\n"}
{"task_id": "CPP/124", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <iomanip>\n\nusing namespace std;\n\nbool valid_date(string date) {\n    // Check if the date string is empty\n    if (date.empty()) {\n        return false;\n    }\n\n    // Check the format: mm-dd-yyyy\n    if (date.length() != 10 || date[2] != '-' || date[5] != '-') {\n        return false;\n    }\n\n    // Extract the month, day, and year\n    string month_str = date.substr(0, 2);\n    string day_str = date.substr(3, 2);\n    string year_str = date.substr(6, 4);\n\n    // Convert the substrings to integers\n    int month, day, year;\n    try {\n        month = stoi(month_str);\n        day = stoi(day_str);\n        year = stoi(year_str);\n    } catch (invalid_argument&) {\n        return false;\n    }\n\n    // Validate the month\n    if (month < 1 || month > 12) {\n        return false;\n    }\n\n    // Validate the day based on the month\n    if (month == 2) {\n        // February can have 29 days in a leap year, otherwise 28\n        bool is_leap_year = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));\n        if (day < 1 || (day > 28 && !is_leap_year) || (day > 29 && is_leap_year)) {\n            return false;\n        }\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        // April, June, September, November have 30 days\n        if (day < 1 || day > 30) {\n            return false;\n        }\n    } else {\n        // January, March, May, July, August, October, December have 31 days\n        if (day < 1 || day > 31) {\n            return false;\n        }\n    }\n\n    // If all checks pass, return true\n    return true;\n}\n\n"}
{"task_id": "CPP/101", "generation": "#include <vector>\n#include <string>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> words_string(string s) {\n    vector<string> words;\n    string word;\n    stringstream ss(s);\n    \n    // Read words separated by spaces or commas\n    while (getline(ss, word, ' ')) {\n        stringstream word_ss(word);\n        string subword;\n        while (getline(word_ss, subword, ',')) {\n            if (!subword.empty()) {\n                words.push_back(subword);\n            }\n        }\n    }\n    \n    return words;\n}\n"}
{"task_id": "CPP/14", "generation": "#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> all_prefixes(string str) {\n    vector<string> prefixes;\n    for (size_t i = 1; i <= str.size(); ++i) {\n        prefixes.push_back(str.substr(0, i));\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/141", "generation": "#include <iostream>\n#include <string>\n#include <cctype>\n#include <unordered_set>\n\nusing namespace std;\n\nstring file_name_check(string file_name) {\n    // Check for the number of digits\n    int digit_count = 0;\n    for (char c : file_name) {\n        if (isdigit(c)) {\n            digit_count++;\n            if (digit_count > 3) {\n                return \"No\";\n            }\n        }\n    }\n\n    // Check for exactly one dot\n    size_t dot_pos = file_name.find('.');\n    if (dot_pos == string::npos || dot_pos == 0 || dot_pos == file_name.size() - 1) {\n        return \"No\";\n    }\n    if (file_name.find('.', dot_pos + 1) != string::npos) {\n        return \"No\";\n    }\n\n    // Check if the substring before the dot starts with a letter\n    string before_dot = file_name.substr(0, dot_pos);\n    if (before_dot.empty() || !isalpha(before_dot[0])) {\n        return \"No\";\n    }\n\n    // Check if the substring after the dot is one of the allowed extensions\n    unordered_set<string> allowed_extensions = {\"txt\", \"exe\", \"dll\"};\n    string after_dot = file_name.substr(dot_pos + 1);\n    if (allowed_extensions.find(after_dot) == allowed_extensions.end()) {\n        return \"No\";\n    }\n\n    return \"Yes\";\n}\n\n"}
{"task_id": "CPP/123", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> get_odd_collatz(int n) {\n    vector<int> odd_numbers;\n    \n    // Start with the given number\n    while (n != 1) {\n        if (n % 2 == 1) { // Check if n is odd\n            odd_numbers.push_back(n);\n        }\n        // Generate the next number in the sequence\n        if (n % 2 == 0) {\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n    }\n    \n    // Add 1 to the list of odd numbers (since 1 is always the end of the sequence)\n    odd_numbers.push_back(1);\n    \n    // Sort the vector in increasing order\n    sort(odd_numbers.begin(), odd_numbers.end());\n    \n    return odd_numbers;\n}\n"}
{"task_id": "CPP/148", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_map>\n\nusing namespace std;\n\nvector<string> bf(string planet1, string planet2) {\n    // Define the order of planets\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    \n    // Create a map to store the index of each planet\n    unordered_map<string, int> planetIndex;\n    for (int i = 0; i < planets.size(); ++i) {\n        planetIndex[planets[i]] = i;\n    }\n    \n    // Check if the input planets are valid\n    if (planetIndex.find(planet1) == planetIndex.end() || planetIndex.find(planet2) == planetIndex.end()) {\n        return {};\n    }\n    \n    // Get the indices of the input planets\n    int index1 = planetIndex[planet1];\n    int index2 = planetIndex[planet2];\n    \n    // Ensure index1 is less than index2 for consistency\n    if (index1 > index2) {\n        swap(index1, index2);\n    }\n    \n    // Collect the planets between index1 and index2 (excluding the endpoints)\n    vector<string> result;\n    for (int i = index1 + 1; i < index2; ++i) {\n        result.push_back(planets[i]);\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/133", "generation": "#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n\nint sum_squares(vector<float> lst) {\n    int sum = 0;\n    for (float num : lst) {\n        int rounded_num = ceil(num);  // Round up to the nearest integer\n        sum += rounded_num * rounded_num;  // Square the rounded number and add to sum\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/109", "generation": "#include <vector>\nusing namespace std;\n\nbool move_one_ball(vector<int> arr) {\n    int n = arr.size();\n    if (n == 0) return true; // Empty vector is considered sorted\n\n    int dipCount = 0;\n    int dipIndex = -1;\n\n    // Find the dip\n    for (int i = 0; i < n; ++i) {\n        if (arr[i] > arr[(i + 1) % n]) {\n            dipCount++;\n            dipIndex = i;\n        }\n    }\n\n    // There should be exactly one dip\n    if (dipCount != 1) return false;\n\n    // Check if the segments are sorted\n    for (int i = 0; i < n - 1; ++i) {\n        int current = (dipIndex + 1 + i) % n;\n        int next = (dipIndex + 1 + i + 1) % n;\n        if (arr[current] > arr[next]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n"}
{"task_id": "CPP/100", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<int> make_a_pile(int n) {\n    vector<int> result;\n    int current = n;\n    \n    for (int i = 0; i < n; ++i) {\n        result.push_back(current);\n        if (current % 2 == 0) {\n            current += 2; // Next even number\n        } else {\n            current += 2; // Next odd number\n        }\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/150", "generation": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nint x_or_y(int n, int x, int y) {\n    if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n\n"}
{"task_id": "CPP/153", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cctype>\n\nusing namespace std;\n\nstring Strongest_Extension(string class_name, vector<string> extensions) {\n    string strongest_extension = \"\";\n    int max_strength = INT_MIN;\n\n    for (const string& ext : extensions) {\n        int CAP = 0;\n        int SM = 0;\n\n        // Calculate CAP and SM for the current extension\n        for (char c : ext) {\n            if (isupper(c)) {\n                CAP++;\n            } else if (islower(c)) {\n                SM++;\n            }\n        }\n\n        // Calculate the strength of the current extension\n        int strength = CAP - SM;\n\n        // Update the strongest extension if the current one is stronger\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest_extension = ext;\n        }\n    }\n\n    // Return the result in the required format\n    return class_name + \".\" + strongest_extension;\n}\n\n"}
{"task_id": "CPP/107", "generation": "#include <vector>\n#include <string>\nusing namespace std;\n\nbool isPalindrome(int num) {\n    string str = to_string(num);\n    int len = str.length();\n    for (int i = 0; i < len / 2; ++i) {\n        if (str[i] != str[len - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvector<int> even_odd_palindrome(int n) {\n    int evenCount = 0;\n    int oddCount = 0;\n    \n    for (int i = 1; i <= n; ++i) {\n        if (isPalindrome(i)) {\n            if (i % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n    \n    return {evenCount, oddCount};\n}\n"}
{"task_id": "CPP/110", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nstring exchange(vector<int> lst1, vector<int> lst2) {\n    int oddCount = 0;\n    int evenCount = 0;\n\n    // Count the number of odd elements in lst1\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            oddCount++;\n        }\n    }\n\n    // Count the number of even elements in lst2\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            evenCount++;\n        }\n    }\n\n    // If there are enough even elements in lst2 to replace all odd elements in lst1\n    if (evenCount >= oddCount) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\n// Example usage\n"}
{"task_id": "CPP/111", "generation": "#include <iostream>\n#include <string>\n#include <map>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nmap<char, int> histogram(string test) {\n    map<char, int> frequencyMap;\n    map<char, int> resultMap;\n    \n    // Step 1: Populate the frequency map\n    istringstream iss(test);\n    string word;\n    while (iss >> word) {\n        for (char c : word) {\n            frequencyMap[c]++;\n        }\n    }\n    \n    // Step 2: Find the maximum frequency\n    int maxFrequency = 0;\n    for (const auto& pair : frequencyMap) {\n        if (pair.second > maxFrequency) {\n            maxFrequency = pair.second;\n        }\n    }\n    \n    // Step 3: Populate the result map with letters having the maximum frequency\n    for (const auto& pair : frequencyMap) {\n        if (pair.second == maxFrequency) {\n            resultMap[pair.first] = pair.second;\n        }\n    }\n    \n    return resultMap;\n}\n\n"}
{"task_id": "CPP/80", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool is_happy(string s) {\n    // Check if the length of the string is less than 3\n    if (s.length() < 3) {\n        return false;\n    }\n\n    // Iterate through the string and check every 3 consecutive characters\n    for (int i = 0; i <= s.length() - 3; ++i) {\n        // Check if the 3 consecutive characters are distinct\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n\n    // If all 3 consecutive characters are distinct, return true\n    return true;\n}\n\n// Test cases\n"}
{"task_id": "CPP/41", "generation": "#include<stdio.h>\n\nint car_race_collision(int n) {\n    return n * n;\n}\n\n"}
{"task_id": "CPP/116", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nint count_ones_in_binary(int num) {\n    int count = 0;\n    while (num != 0) {\n        count += num & 1;\n        num >>= 1;\n    }\n    return count;\n}\n\nvector<int> sort_array(vector<int> arr) {\n    sort(arr.begin(), arr.end(), [](int a, int b) {\n        int count_a = count_ones_in_binary(a);\n        int count_b = count_ones_in_binary(b);\n        if (count_a == count_b) {\n            return a < b;\n        }\n        return count_a < count_b;\n    });\n    return arr;\n}\n"}
{"task_id": "CPP/61", "generation": "#include <iostream>\n#include <stack>\n#include <string>\nusing namespace std;\n\nbool correct_bracketing(string brackets) {\n    stack<char> s;\n    \n    for (char bracket : brackets) {\n        if (bracket == '(') {\n            s.push(bracket);\n        } else if (bracket == ')') {\n            if (s.empty() || s.top() != '(') {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    \n    return s.empty();\n}\n\n"}
{"task_id": "CPP/25", "generation": "#include <vector>\n#include <iostream>\n\nusing namespace std;\n\nvector<int> factorize(int n) {\n    vector<int> factors;\n    \n    // Check for the number of 2s that divide n\n    while (n % 2 == 0) {\n        factors.push_back(2);\n        n = n / 2;\n    }\n    \n    // n must be odd at this point, so we can skip even numbers\n    for (int i = 3; i * i <= n; i += 2) {\n        // While i divides n, add i and divide n\n        while (n % i == 0) {\n            factors.push_back(i);\n            n = n / i;\n        }\n    }\n    \n    // This condition is to check if n is a prime number greater than 2\n    if (n > 2) {\n        factors.push_back(n);\n    }\n    \n    return factors;\n}\n\n"}
{"task_id": "CPP/137", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <boost/any.hpp>\n#include <stdexcept>\n\nusing namespace std;\n\nfloat to_float(const boost::any& value) {\n    if (value.type() == typeid(int)) {\n        return static_cast<float>(boost::any_cast<int>(value));\n    } else if (value.type() == typeid(float)) {\n        return boost::any_cast<float>(value);\n    } else if (value.type() == typeid(string)) {\n        string str = boost::any_cast<string>(value);\n        replace(str.begin(), str.end(), ',', '.');\n        return stof(str);\n    } else {\n        throw invalid_argument(\"Unsupported type\");\n    }\n}\n\nboost::any compare_one(boost::any a, boost::any b) {\n    try {\n        float a_float = to_float(a);\n        float b_float = to_float(b);\n\n        if (a_float > b_float) {\n            return a;\n        } else if (b_float > a_float) {\n            return b;\n        } else {\n            return string(\"None\");\n        }\n    } catch (const invalid_argument& e) {\n        return string(\"None\");\n    }\n}\n\n"}
{"task_id": "CPP/102", "generation": "#include <stdio.h>\n\nint choose_num(int x, int y) {\n    // Ensure x is less than or equal to y\n    if (x > y) {\n        return -1;\n    }\n\n    // Start from the largest number in the range and move downwards\n    for (int i = y; i >= x; i--) {\n        // Check if the current number is even\n        if (i % 2 == 0) {\n            return i;\n        }\n    }\n\n    // If no even number is found, return -1\n    return -1;\n}\n\n"}
{"task_id": "CPP/10", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nbool is_palindrome(const string& str) {\n    // Test if given string is a palindrome\n    string s(str.rbegin(), str.rend());\n    return s == str;\n}\n\nstring make_palindrome(const string& str) {\n    // Find the shortest palindrome that begins with a supplied string\n    for (size_t i = 0; i < str.size(); ++i) {\n        // Check if the suffix from i to the end is a palindrome\n        if (is_palindrome(str.substr(i))) {\n            // If it is, append the reverse of the prefix before this suffix\n            string prefix = str.substr(0, i);\n            reverse(prefix.begin(), prefix.end());\n            return str + prefix;\n        }\n    }\n    // If no palindromic suffix is found, append the reverse of the entire string\n    string reversed_str(str.rbegin(), str.rend());\n    return str + reversed_str;\n}\n\n"}
{"task_id": "CPP/76", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n\nbool is_simple_power(int x, int n) {\n    if (n == 1) {\n        return x == 1;\n    }\n    int power = 1;\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}\n"}
{"task_id": "CPP/94", "generation": "#include <iostream>\n#include <vector>\n#include <cmath>\nusing namespace std;\n\n// Function to check if a number is prime\nbool isPrime(int num) {\n    if (num <= 1) return false;\n    if (num == 2) return true;\n    if (num % 2 == 0) return false;\n    for (int i = 3; i <= sqrt(num); i += 2) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\n// Function to sum the digits of a number\nint sumOfDigits(int num) {\n    int sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}\n\nint skjkasdkd(vector<int> lst) {\n    int largestPrime = -1;\n    \n    // Find the largest prime in the list\n    for (int num : lst) {\n        if (isPrime(num) && num > largestPrime) {\n            largestPrime = num;\n        }\n    }\n    \n    // If no prime was found, return 0\n    if (largestPrime == -1) {\n        return 0;\n    }\n    \n    // Sum the digits of the largest prime\n    return sumOfDigits(largestPrime);\n}\n\n"}
{"task_id": "CPP/32", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n    */\n    double sum = 0;\n    for (int i = 0; i < xs.size(); i++)\n    {\n        sum += xs[i] * pow(x, i);\n    }\n    return sum;\n}\n\ndouble poly_derivative(vector<double> xs, double x){\n    /* \n    Evaluates the derivative of the polynomial with coefficients xs at point x.\n    */\n    double sum = 0;\n    for (int i = 1; i < xs.size(); i++)\n    {\n        sum += i * xs[i] * pow(x, i - 1);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    /*\n    xs are coefficients of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only one zero point, even if there are many. \n    Moreover, find_zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution.\n    */\n    double x0 = 0.0; // Initial guess\n    double tolerance = 1e-7; // Tolerance for convergence\n    int max_iterations = 1000; // Maximum number of iterations\n\n    for (int i = 0; i < max_iterations; i++) {\n        double fx = poly(xs, x0);\n        double dfx = poly_derivative(xs, x0);\n\n        if (fabs(fx) < tolerance) {\n            return x0; // Converged to a root\n        }\n\n        if (fabs(dfx) < tolerance) {\n            printf(\"Derivative is too small, Newton-Raphson method may not converge.\\n\");\n            return x0;\n        }\n\n        x0 = x0 - fx / dfx; // Newton-Raphson update\n    }\n\n    printf(\"Maximum iterations reached without convergence.\\n\");\n    return x0;\n}\n\n"}
{"task_id": "CPP/33", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> sort_third(vector<int> l) {\n    // Extract elements at indices divisible by 3\n    vector<int> to_sort;\n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 3 == 0) {\n            to_sort.push_back(l[i]);\n        }\n    }\n    \n    // Sort the extracted elements\n    sort(to_sort.begin(), to_sort.end());\n    \n    // Create a new list with sorted elements at indices divisible by 3\n    vector<int> result = l;\n    size_t sort_index = 0;\n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 3 == 0) {\n            result[i] = to_sort[sort_index++];\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/88", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> sort_array(vector<int> array) {\n    // Check if the array is empty or has only one element\n    if (array.empty() || array.size() == 1) {\n        return array;\n    }\n\n    // Calculate the sum of the first and last index values\n    int sum = array.front() + array.back();\n\n    // Create a copy of the array to sort\n    vector<int> sorted_array = array;\n\n    // Sort the array based on the sum\n    if (sum % 2 == 0) {\n        // Sort in descending order if the sum is even\n        sort(sorted_array.begin(), sorted_array.end(), greater<int>());\n    } else {\n        // Sort in ascending order if the sum is odd\n        sort(sorted_array.begin(), sorted_array.end());\n    }\n\n    return sorted_array;\n}\n"}
{"task_id": "CPP/15", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nstring string_sequence(int n) {\n    // Create a stringstream to build the result\n    stringstream result;\n    \n    // Loop from 0 to n inclusive\n    for (int i = 0; i <= n; ++i) {\n        // Append the number followed by a space\n        result << i << \" \";\n    }\n    \n    // Convert the stringstream to a string\n    string result_str = result.str();\n    \n    // Remove the trailing space if it exists\n    if (!result_str.empty() && result_str.back() == ' ') {\n        result_str.pop_back();\n    }\n    \n    // Return the resulting string\n    return result_str;\n}\n\n"}
{"task_id": "CPP/163", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> generate_integers(int a, int b) {\n    // Ensure a is less than or equal to b\n    if (a > b) {\n        swap(a, b);\n    }\n\n    vector<int> result;\n\n    // Even digits are 0, 2, 4, 6, 8\n    for (int i = a; i <= b; ++i) {\n        if (i % 2 == 0 && i < 10) {\n            result.push_back(i);\n        }\n    }\n\n    // Sort the result in ascending order (though it should already be sorted)\n    sort(result.begin(), result.end());\n\n    return result;\n}\n\n"}
{"task_id": "CPP/1", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> separate_paren_groups(string paren_string) {\n    vector<string> result;\n    string cleaned_string;\n    \n    // Remove all spaces from the input string\n    for (char c : paren_string) {\n        if (c != ' ') {\n            cleaned_string += c;\n        }\n    }\n    \n    int balance = 0;\n    string current_group;\n    \n    for (char c : cleaned_string) {\n        current_group += c;\n        if (c == '(') {\n            balance++;\n        } else if (c == ')') {\n            balance--;\n            if (balance == 0) {\n                result.push_back(current_group);\n                current_group.clear();\n            }\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/69", "generation": "#include <vector>\n#include <unordered_map>\n#include <algorithm>\nusing namespace std;\n\nint search(vector<int> lst) {\n    // Step 1: Count the frequency of each integer\n    unordered_map<int, int> frequency;\n    for (int num : lst) {\n        frequency[num]++;\n    }\n\n    // Step 2: Find the greatest integer that meets the criteria\n    int max_valid_integer = -1;\n    for (const auto& pair : frequency) {\n        int num = pair.first;\n        int freq = pair.second;\n        if (freq >= num && num > max_valid_integer) {\n            max_valid_integer = num;\n        }\n    }\n\n    // Step 3: Return the result\n    return max_valid_integer;\n}\n\n// Example usage\n"}
{"task_id": "CPP/31", "generation": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nbool is_prime(long long n) {\n    // Handle edge cases\n    if (n <= 1) {\n        return false;\n    }\n    if (n == 2 || n == 3) {\n        return true;\n    }\n    if (n % 2 == 0 || n % 3 == 0) {\n        return false;\n    }\n\n    // Check for factors from 5 to sqrt(n)\n    for (long long i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n"}
{"task_id": "CPP/147", "generation": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint get_max_triples(int n) {\n    // Step 1: Generate the vector a\n    vector<int> a(n);\n    for (int i = 1; i <= n; ++i) {\n        a[i-1] = i * i - i + 1;\n    }\n\n    // Step 2: Count the number of valid triples\n    int count = 0;\n    for (int i = 0; i < n; ++i) {\n        for (int j = i + 1; j < n; ++j) {\n            for (int k = j + 1; k < n; ++k) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}\n\n"}
{"task_id": "CPP/105", "generation": "#include <vector>\n#include <string>\n#include <map>\n#include <algorithm>\nusing namespace std;\n\nvector<string> by_length(vector<int> arr) {\n    // Step 1: Filter and sort the integers between 1 and 9\n    vector<int> filtered;\n    for (int num : arr) {\n        if (num >= 1 && num <= 9) {\n            filtered.push_back(num);\n        }\n    }\n    sort(filtered.begin(), filtered.end());\n\n    // Step 2: Reverse the sorted list\n    reverse(filtered.begin(), filtered.end());\n\n    // Step 3: Map each digit to its corresponding name\n    map<int, string> digitToName = {\n        {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"},\n        {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}\n    };\n\n    vector<string> result;\n    for (int num : filtered) {\n        result.push_back(digitToName[num]);\n    }\n\n    return result;\n}\n\n// Example usage\n"}
{"task_id": "CPP/22", "generation": "#include <iostream>\n#include <vector>\n#include <list>\n#include <boost/any.hpp>\n\ntypedef std::list<boost::any> list_any;\n\nstd::vector<int> filter_integers(list_any values) {\n    std::vector<int> result;\n    for (const auto& value : values) {\n        if (value.type() == typeid(int)) {\n            result.push_back(boost::any_cast<int>(value));\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/52", "generation": "#include <vector>\nusing namespace std;\n\nbool below_threshold(vector<int> l, int t) {\n    for (int num : l) {\n        if (num >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/154", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nbool cycpattern_check(string a, string b) {\n    if (b.length() > a.length()) {\n        return false;\n    }\n    \n    // Concatenate b with itself to handle rotations\n    string rotated_b = b + b;\n    \n    // Check if any rotation of b is a substring of a\n    for (size_t i = 0; i < b.length(); ++i) {\n        if (a.find(rotated_b.substr(i, b.length())) != string::npos) {\n            return true;\n        }\n    }\n    \n    return false;\n}\n"}
{"task_id": "CPP/115", "generation": "#include<stdio.h>\n#include<vector>\n#include<cmath> // for ceil function\nusing namespace std;\n\nint max_fill(vector<vector<int>> grid, int capacity) {\n    int total_lowers = 0;\n    \n    for (const auto& row : grid) {\n        int water_units = 0;\n        for (int unit : row) {\n            if (unit == 1) {\n                water_units++;\n            }\n        }\n        // Calculate the number of times the bucket needs to be lowered\n        total_lowers += ceil((double)water_units / capacity);\n    }\n    \n    return total_lowers;\n}\n\n// Example usage\n"}
{"task_id": "CPP/131", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint digits(int n) {\n    // Convert the integer to a string\n    string numStr = to_string(n);\n    \n    // Initialize the product to 1 (multiplicative identity)\n    int product = 1;\n    \n    // Flag to check if any odd digit is found\n    bool hasOdd = false;\n    \n    // Iterate through each character in the string\n    for (char ch : numStr) {\n        // Convert the character to an integer\n        int digit = ch - '0';\n        \n        // Check if the digit is odd\n        if (digit % 2 != 0) {\n            // Multiply the product by the odd digit\n            product *= digit;\n            hasOdd = true;\n        }\n    }\n    \n    // If no odd digit was found, return 0\n    if (!hasOdd) {\n        return 0;\n    }\n    \n    // Return the product of the odd digits\n    return product;\n}\n\n"}
{"task_id": "CPP/37", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<float> sort_even(vector<float> l) {\n    // Step 1: Extract values at even indices\n    vector<float> even_values;\n    for (size_t i = 0; i < l.size(); i += 2) {\n        even_values.push_back(l[i]);\n    }\n\n    // Step 2: Sort the extracted values\n    sort(even_values.begin(), even_values.end());\n\n    // Step 3: Reconstruct the output vector\n    vector<float> result = l;\n    size_t even_index = 0;\n    for (size_t i = 0; i < l.size(); i += 2) {\n        result[i] = even_values[even_index++];\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/92", "generation": "#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n\nbool any_int(float a, float b, float c) {\n    // Check if all numbers are integers\n    if (floor(a) != a || floor(b) != b || floor(c) != c) {\n        return false;\n    }\n\n    // Convert to integers for comparison\n    int int_a = (int)a;\n    int int_b = (int)b;\n    int int_c = (int)c;\n\n    // Check the sum condition\n    if (int_a == int_b + int_c || int_b == int_a + int_c || int_c == int_a + int_b) {\n        return true;\n    }\n\n    return false;\n}\n\n// Test cases\n"}
{"task_id": "CPP/118", "generation": "#include<iostream>\n#include<string>\n#include<unordered_set>\nusing namespace std;\n\nstring get_closest_vowel(string word) {\n    // Define the set of vowels (case sensitive)\n    unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    \n    // Traverse the word from right to left\n    for (int i = word.size() - 2; i > 0; --i) {\n        // Check if the current character is a vowel\n        if (vowels.find(word[i]) != vowels.end()) {\n            // Check if the previous and next characters are consonants\n            if (vowels.find(word[i-1]) == vowels.end() && vowels.find(word[i+1]) == vowels.end()) {\n                return string(1, word[i]);\n            }\n        }\n    }\n    \n    // If no such vowel is found, return an empty string\n    return \"\";\n}\n\n"}
{"task_id": "CPP/6", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<int> parse_nested_parens(string paren_string) {\n    vector<int> results;\n    stringstream ss(paren_string);\n    string group;\n    \n    while (getline(ss, group, ' ')) {\n        int max_depth = 0;\n        int current_depth = 0;\n        \n        for (char c : group) {\n            if (c == '(') {\n                current_depth++;\n                if (current_depth > max_depth) {\n                    max_depth = current_depth;\n                }\n            } else if (c == ')') {\n                current_depth--;\n            }\n        }\n        \n        results.push_back(max_depth);\n    }\n    \n    return results;\n}\n\n"}
{"task_id": "CPP/87", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<vector<int>> get_row(vector<vector<int>> lst, int x) {\n    vector<vector<int>> coordinates;\n    \n    // Traverse the 2D vector to find occurrences of x\n    for (int i = 0; i < lst.size(); ++i) {\n        for (int j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                coordinates.push_back({i, j});\n            }\n        }\n    }\n    \n    // Sort coordinates by rows in ascending order\n    // For coordinates within the same row, sort by columns in descending order\n    sort(coordinates.begin(), coordinates.end(), [](const vector<int>& a, const vector<int>& b) {\n        if (a[0] == b[0]) {\n            return a[1] > b[1];\n        }\n        return a[0] < b[0];\n    });\n    \n    return coordinates;\n}\n\n// Example usage\n"}
{"task_id": "CPP/2", "generation": "#include <iostream>\n#include <cmath>\n\nfloat truncate_number(float number) {\n    // Extract the integer part using floor\n    float integerPart = floor(number);\n    // Subtract the integer part from the original number to get the decimal part\n    float decimalPart = number - integerPart;\n    return decimalPart;\n}\n\n"}
{"task_id": "CPP/16", "generation": "#include <iostream>\n#include <string>\n#include <unordered_set>\n#include <algorithm>\n\nusing namespace std;\n\nint count_distinct_characters(string str) {\n    // Convert the string to lowercase\n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    \n    // Use an unordered_set to store unique characters\n    unordered_set<char> unique_chars;\n    \n    // Iterate through the string and add each character to the set\n    for (char c : str) {\n        unique_chars.insert(c);\n    }\n    \n    // The size of the set is the number of distinct characters\n    return unique_chars.size();\n}\n\n"}
{"task_id": "CPP/135", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nint can_arrange(vector<int> arr) {\n    for (int i = 1; i < arr.size(); ++i) {\n        if (arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/106", "generation": "#include <vector>\nusing namespace std;\n\nvector<int> f(int n) {\n    vector<int> result(n);\n    \n    for (int i = 1; i <= n; ++i) {\n        if (i % 2 == 0) {\n            // Compute factorial of i\n            int factorial = 1;\n            for (int j = 1; j <= i; ++j) {\n                factorial *= j;\n            }\n            result[i - 1] = factorial;\n        } else {\n            // Compute sum of numbers from 1 to i\n            int sum = 0;\n            for (int j = 1; j <= i; ++j) {\n                sum += j;\n            }\n            result[i - 1] = sum;\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/162", "generation": "#include <stdio.h>\n#include <string>\n#include <openssl/md5.h>\nusing namespace std;\n\nstring string_to_md5(string text) {\n    if (text.empty()) {\n        return \"\";\n    }\n\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.size(), digest);\n\n    char md5string[33];\n    for (int i = 0; i < 16; ++i) {\n        sprintf(&md5string[i*2], \"%02x\", (unsigned int)digest[i]);\n    }\n\n    return string(md5string);\n}\n"}
{"task_id": "CPP/5", "generation": "#include <vector>\n#include <iostream>\nusing namespace std;\n\nvector<int> intersperse(vector<int> numbers, int delimeter) {\n    // Check if the input vector is empty\n    if (numbers.empty()) {\n        return {};\n    }\n\n    // Create a new vector to store the result\n    vector<int> result;\n\n    // Iterate through the input vector\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        // Insert the current element\n        result.push_back(numbers[i]);\n\n        // Insert the delimiter after the current element, except for the last element\n        if (i < numbers.size() - 1) {\n            result.push_back(delimeter);\n        }\n    }\n\n    // Return the result vector\n    return result;\n}\n\n// Test the function\n"}
{"task_id": "CPP/97", "generation": "#include<stdio.h>\n#include<math.h>\n\nint multiply(int a, int b) {\n    // Extract the unit digits of both numbers\n    int unit_digit_a = abs(a) % 10;\n    int unit_digit_b = abs(b) % 10;\n    \n    // Return the product of the unit digits\n    return unit_digit_a * unit_digit_b;\n}\n\n"}
{"task_id": "CPP/44", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nstring change_base(int x, int base) {\n    if (x == 0) return \"0\"; // Special case for zero\n\n    string result = \"\";\n    while (x > 0) {\n        int remainder = x % base;\n        result += to_string(remainder); // Append the remainder to the result string\n        x /= base;\n    }\n\n    // Since we appended the remainders in reverse order, we need to reverse the string\n    reverse(result.begin(), result.end());\n\n    return result;\n}\n\n"}
{"task_id": "CPP/161", "generation": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring solve(string s) {\n    bool containsLetter = false;\n    \n    // First pass: check if the string contains any letters and reverse case if necessary\n    for (char &c : s) {\n        if (isalpha(c)) {\n            containsLetter = true;\n            if (islower(c)) {\n                c = toupper(c);\n            } else {\n                c = tolower(c);\n            }\n        }\n    }\n    \n    // If the string contains no letters, reverse the entire string\n    if (!containsLetter) {\n        reverse(s.begin(), s.end());\n    }\n    \n    return s;\n}\n\n"}
{"task_id": "CPP/38", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring encode_cyclic(string s) {\n    int l = s.length();\n    int num = (l + 2) / 3;\n    string output;\n    for (int i = 0; i * 3 < l; i++) {\n        string x = s.substr(i * 3, 3);\n        if (x.length() == 3) {\n            x = x.substr(1) + x[0];\n        }\n        output += x;\n    }\n    return output;\n}\n\nstring decode_cyclic(string s) {\n    int l = s.length();\n    int num = (l + 2) / 3;\n    string output;\n    for (int i = 0; i * 3 < l; i++) {\n        string x = s.substr(i * 3, 3);\n        if (x.length() == 3) {\n            x = x[2] + x.substr(0, 2);\n        }\n        output += x;\n    }\n    return output;\n}\n"}
{"task_id": "CPP/93", "generation": "#include <string>\n#include <algorithm>\nusing namespace std;\n\nstring encode(string message) {\n    string vowels = \"aeiouAEIOU\";\n    string encoded_message = \"\";\n\n    for (char &ch : message) {\n        if (isalpha(ch)) {\n            // Swap case\n            if (islower(ch)) {\n                ch = toupper(ch);\n            } else {\n                ch = tolower(ch);\n            }\n\n            // Replace vowels with the letter 2 places ahead\n            if (vowels.find(ch) != string::npos) {\n                if (ch >= 'a' && ch <= 'z') {\n                    ch = (ch - 'a' + 2) % 26 + 'a';\n                } else {\n                    ch = (ch - 'A' + 2) % 26 + 'A';\n                }\n            }\n        }\n        encoded_message += ch;\n    }\n\n    return encoded_message;\n}\n\n// Examples\n"}
{"task_id": "CPP/152", "generation": "#include <vector>\n#include <cmath> // for std::abs\n\nusing namespace std;\n\nvector<int> compare(vector<int> game, vector<int> guess) {\n    vector<int> result;\n    for (size_t i = 0; i < game.size(); ++i) {\n        if (game[i] == guess[i]) {\n            result.push_back(0);\n        } else {\n            result.push_back(std::abs(game[i] - guess[i]));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/62", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<float> derivative(vector<float> xs) {\n    vector<float> result;\n    for (size_t i = 1; i < xs.size(); ++i) {\n        result.push_back(i * xs[i]);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/7", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> filter_by_substring(vector<string> strings, string substring) {\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.find(substring) != string::npos) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/24", "generation": "#include<iostream>\nusing namespace std;\n\nint largest_divisor(int n) {\n    // Start from n-1 and go down to 1\n    for (int i = n - 1; i > 0; --i) {\n        // Check if i divides n evenly\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    // If no divisor is found (which shouldn't happen for n > 1), return 1\n    return 1;\n}\n\n"}
{"task_id": "CPP/79", "generation": "#include <iostream>\n#include <string>\n#include <algorithm> // for std::reverse\n\nusing namespace std;\n\nstring decimal_to_binary(int decimal) {\n    if (decimal == 0) {\n        return \"db0db\";\n    }\n\n    string binary;\n    \n    while (decimal > 0) {\n        int remainder = decimal % 2;\n        binary += to_string(remainder);\n        decimal /= 2;\n    }\n\n    // Reverse the binary string to get the correct order\n    reverse(binary.begin(), binary.end());\n\n    // Add the \"db\" characters at the beginning and end\n    binary = \"db\" + binary + \"db\";\n\n    return binary;\n}\n\n"}
{"task_id": "CPP/155", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n\nvector<int> even_odd_count(int num) {\n    // Convert the number to its absolute value to handle negative numbers\n    num = abs(num);\n    int even_count = 0;\n    int odd_count = 0;\n    \n    // Iterate through each digit of the number\n    while (num > 0) {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n        num /= 10;\n    }\n    \n    // Return the result as a vector\n    return {even_count, odd_count};\n}\n"}
{"task_id": "CPP/4", "generation": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <numeric> // for std::accumulate\n\nusing namespace std;\n\nfloat mean_absolute_deviation(const vector<float>& numbers) {\n    if (numbers.empty()) {\n        return 0.0; // Return 0 if the vector is empty to avoid division by zero\n    }\n\n    // Step 1: Calculate the mean of the dataset\n    float sum = accumulate(numbers.begin(), numbers.end(), 0.0);\n    float mean = sum / numbers.size();\n\n    // Step 2: Compute the absolute difference between each element and the mean\n    float absolute_deviations_sum = 0.0;\n    for (float number : numbers) {\n        absolute_deviations_sum += fabs(number - mean);\n    }\n\n    // Step 3: Divide the sum of absolute deviations by the number of elements\n    float mad = absolute_deviations_sum / numbers.size();\n\n    return mad;\n}\n\n"}
{"task_id": "CPP/56", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool correct_bracketing(string brackets) {\n    int balance = 0;\n    \n    for (char bracket : brackets) {\n        if (bracket == '<') {\n            balance++;\n        } else if (bracket == '>') {\n            balance--;\n        }\n        \n        // If balance goes negative, it means we have more closing brackets than opening ones\n        if (balance < 0) {\n            return false;\n        }\n    }\n    \n    // At the end, balance should be zero for all brackets to be matched\n    return balance == 0;\n}\n\n"}
{"task_id": "CPP/159", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<int> eat(int number, int need, int remaining) {\n    int total_eaten = number + min(need, remaining);\n    int remaining_after_eating = max(0, remaining - need);\n    return {total_eaten, remaining_after_eating};\n}\n"}
{"task_id": "CPP/83", "generation": "#include<stdio.h>\n#include<cmath>\n\nint starts_one_ends(int n) {\n    if (n == 1) {\n        return 1;  // Special case: only the number 1 itself\n    }\n    int count = 0;\n    // Count numbers that start with 1\n    count += std::pow(10, n - 1);\n    // Count numbers that end with 1\n    count += std::pow(10, n - 1);\n    // Subtract 1 because the number that starts and ends with 1 is counted twice\n    count -= 1;\n    return count;\n}\n"}
{"task_id": "CPP/27", "generation": "#include <iostream>\n#include <string>\n#include <cctype> // for isupper and islower\n\nusing namespace std;\n\nstring flip_case(string str) {\n    for (char &c : str) {\n        if (isupper(c)) {\n            c = tolower(c);\n        } else if (islower(c)) {\n            c = toupper(c);\n        }\n    }\n    return str;\n}\n\n"}
{"task_id": "CPP/146", "generation": "#include <vector>\n#include <cmath>\nusing namespace std;\n\nbool isOddDigit(int digit) {\n    return digit == 1 || digit == 3 || digit == 5 || digit == 7 || digit == 9;\n}\n\nint specialFilter(vector<int> nums) {\n    int count = 0;\n    \n    for (int num : nums) {\n        if (num > 10) {\n            int lastDigit = abs(num) % 10;\n            int firstDigit = abs(num);\n            \n            // Extract the first digit\n            while (firstDigit >= 10) {\n                firstDigit /= 10;\n            }\n            \n            if (isOddDigit(firstDigit) && isOddDigit(lastDigit)) {\n                count++;\n            }\n        }\n    }\n    \n    return count;\n}\n\n// Example usage\n"}
{"task_id": "CPP/81", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n\nvector<string> numerical_letter_grade(vector<float> grades) {\n    map<float, string> grade_map = {\n        {4.0, \"A+\"},\n        {3.7, \"A\"},\n        {3.3, \"A-\"},\n        {3.0, \"B+\"},\n        {2.7, \"B\"},\n        {2.3, \"B-\"},\n        {2.0, \"C+\"},\n        {1.7, \"C\"},\n        {1.3, \"C-\"},\n        {1.0, \"D+\"},\n        {0.7, \"D\"},\n        {0.0, \"D-\"},\n        {-INFINITY, \"E\"}\n    };\n\n    vector<string> letter_grades;\n    for (float gpa : grades) {\n        for (auto it = grade_map.rbegin(); it != grade_map.rend(); ++it) {\n            if (gpa > it->first) {\n                letter_grades.push_back(it->second);\n                break;\n            }\n        }\n    }\n\n    return letter_grades;\n}\n"}
{"task_id": "CPP/136", "generation": "#include <vector>\n#include <limits.h> // For INT_MIN and INT_MAX\n\nusing namespace std;\n\nvector<int> largest_smallest_integers(vector<int> lst) {\n    int largest_negative = INT_MIN; // Initialize to the smallest possible integer\n    int smallest_positive = INT_MAX; // Initialize to the largest possible integer\n\n    for (int num : lst) {\n        if (num < 0) {\n            // Update largest_negative if num is larger than the current largest_negative\n            if (num > largest_negative) {\n                largest_negative = num;\n            }\n        } else if (num > 0) {\n            // Update smallest_positive if num is smaller than the current smallest_positive\n            if (num < smallest_positive) {\n                smallest_positive = num;\n            }\n        }\n    }\n\n    // If no negative number was found, set largest_negative to 0\n    if (largest_negative == INT_MIN) {\n        largest_negative = 0;\n    }\n\n    // If no positive number was found, set smallest_positive to 0\n    if (smallest_positive == INT_MAX) {\n        smallest_positive = 0;\n    }\n\n    return {largest_negative, smallest_positive};\n}\n\n// Example usage\n"}
{"task_id": "CPP/67", "generation": "#include <iostream>\n#include <string>\n#include <regex>\n\nusing namespace std;\n\nint fruit_distribution(string s, int n) {\n    // Define regex patterns to extract the numbers of apples and oranges\n    regex apples_pattern(R\"(\\d+ apples)\");\n    regex oranges_pattern(R\"(\\d+ oranges)\");\n\n    // Extract the numbers of apples and oranges using regex\n    smatch apples_match;\n    smatch oranges_match;\n\n    regex_search(s, apples_match, apples_pattern);\n    regex_search(s, oranges_match, oranges_pattern);\n\n    // Convert the matched strings to integers\n    int apples = stoi(apples_match.str().substr(0, apples_match.str().find(\" \")));\n    int oranges = stoi(oranges_match.str().substr(0, oranges_match.str().find(\" \")));\n\n    // Calculate the number of mangoes\n    int mangoes = n - apples - oranges;\n    return mangoes;\n}\n\n"}
{"task_id": "CPP/48", "generation": "#include <iostream>\n#include <string>\n\n// Function to check if a given string is a palindrome\nbool is_palindrome(const std::string& text) {\n    int n = text.length();\n    for (int i = 0; i < n / 2; ++i) {\n        if (text[i] != text[n - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Main function to test the is_palindrome function\n"}
{"task_id": "CPP/125", "generation": "#include <vector>\n#include <string>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> split_words(string txt) {\n    // Check for whitespace\n    if (txt.find(' ') != string::npos) {\n        vector<string> result;\n        stringstream ss(txt);\n        string word;\n        while (ss >> word) {\n            result.push_back(word);\n        }\n        return result;\n    }\n    \n    // Check for commas\n    if (txt.find(',') != string::npos) {\n        vector<string> result;\n        stringstream ss(txt);\n        string word;\n        while (getline(ss, word, ',')) {\n            result.push_back(word);\n        }\n        return result;\n    }\n    \n    // Count odd-indexed lowercase letters\n    int count = 0;\n    for (char c : txt) {\n        if (islower(c)) {\n            if ((c - 'a') % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    \n    return {to_string(count)};\n}\n"}
{"task_id": "CPP/160", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\n\nint do_algebra(vector<string> operators, vector<int> operands) {\n    // Initialize the result with the first operand\n    int result = operands[0];\n    \n    // Iterate through the operators and operands to build the expression\n    for (size_t i = 0; i < operators.size(); ++i) {\n        string op = operators[i];\n        int operand = operands[i + 1];\n        \n        if (op == \"+\") {\n            result += operand;\n        } else if (op == \"-\") {\n            result -= operand;\n        } else if (op == \"*\") {\n            result *= operand;\n        } else if (op == \"//\") {\n            result /= operand; // Note: C++ uses '/' for integer division, which is equivalent to floor division\n        } else if (op == \"**\") {\n            result = pow(result, operand);\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/151", "generation": "#include <vector>\n#include <cmath>\nusing namespace std;\n\nlong long double_the_difference(vector<float> lst) {\n    long long sum = 0;\n    \n    for (float num : lst) {\n        // Check if the number is a positive integer\n        if (num > 0 && floor(num) == num) {\n            int int_num = static_cast<int>(num);\n            // Check if the number is odd\n            if (int_num % 2 != 0) {\n                sum += int_num * int_num;\n            }\n        }\n    }\n    \n    return sum;\n}\n"}
{"task_id": "CPP/117", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nbool is_consonant(char c) {\n    // Convert the character to lowercase to handle both uppercase and lowercase letters\n    c = tolower(c);\n    // Check if the character is a consonant\n    return (c >= 'a' && c <= 'z') && !(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n}\n\nvector<string> select_words(string s, int n) {\n    vector<string> result;\n    if (s.empty()) {\n        return result;\n    }\n\n    // Use a stringstream to split the string into words\n    stringstream ss(s);\n    string word;\n\n    while (ss >> word) {\n        int consonant_count = 0;\n        // Count the number of consonants in the current word\n        for (char c : word) {\n            if (is_consonant(c)) {\n                consonant_count++;\n            }\n        }\n        // If the word has exactly n consonants, add it to the result vector\n        if (consonant_count == n) {\n            result.push_back(word);\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/78", "generation": "#include <iostream>\n#include <string>\n#include <unordered_set>\n\nusing namespace std;\n\nint hex_key(string num) {\n    // Define the set of prime hexadecimal digits\n    unordered_set<char> prime_digits = {'2', '3', '5', '7', 'B', 'D'};\n    \n    // Initialize the count of prime digits\n    int count = 0;\n    \n    // Iterate through the input string\n    for (char c : num) {\n        // Check if the current character is in the set of prime digits\n        if (prime_digits.find(c) != prime_digits.end()) {\n            count++;\n        }\n    }\n    \n    // Return the count of prime digits\n    return count;\n}\n\n// Test cases\n"}
{"task_id": "CPP/74", "generation": "#include <vector>\n#include <string>\n#include <numeric> // for accumulate\n\nusing namespace std;\n\nint totalChars(const vector<string>& vec) {\n    return accumulate(vec.begin(), vec.end(), 0, [](int sum, const string& str) {\n        return sum + str.size();\n    });\n}\n\nvector<string> total_match(vector<string> lst1, vector<string> lst2) {\n    int total1 = totalChars(lst1);\n    int total2 = totalChars(lst2);\n    \n    if (total1 <= total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n"}
{"task_id": "CPP/53", "generation": "#include <iostream>\n\nint add(int x, int y) {\n    return x + y;\n}\n\n"}
{"task_id": "CPP/98", "generation": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint count_upper(string s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) { // Iterate through even indices\n        char c = s[i];\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/140", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring fix_spaces(string text) {\n    string result;\n    int n = text.length();\n    int i = 0;\n\n    while (i < n) {\n        if (text[i] == ' ') {\n            int count = 0;\n            // Count consecutive spaces\n            while (i < n && text[i] == ' ') {\n                count++;\n                i++;\n            }\n            // Replace with underscore if single space\n            if (count == 1) {\n                result += '_';\n            }\n            // Replace with hyphen if more than two consecutive spaces\n            else if (count > 2) {\n                result += '-';\n            }\n            // If exactly two spaces, replace each with underscore\n            else if (count == 2) {\n                result += \"__\";\n            }\n        } else {\n            // Append non-space characters directly\n            result += text[i];\n            i++;\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/34", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> unique(vector<int> l) {\n    // Step 1: Sort the vector\n    sort(l.begin(), l.end());\n    \n    // Step 2: Use std::unique to remove consecutive duplicates\n    auto last = unique(l.begin(), l.end());\n    \n    // Step 3: Resize the vector to remove the extra elements\n    l.erase(last, l.end());\n    \n    return l;\n}\n\n// Example usage\n"}
{"task_id": "CPP/66", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint digitSum(string s) {\n    int sum = 0;\n    for (char c : s) {\n        if (c >= 'A' && c <= 'Z') {\n            sum += c;\n        }\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/120", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> maximum(vector<int> arr, int k) {\n    // Step 1: Sort the entire array in ascending order\n    sort(arr.begin(), arr.end());\n    \n    // Step 2: Extract the top k elements from the end of the sorted array\n    vector<int> result(arr.end() - k, arr.end());\n    \n    // Step 3: Sort the top k elements again (though they should already be sorted)\n    sort(result.begin(), result.end());\n    \n    return result;\n}\n"}
{"task_id": "CPP/139", "generation": "#include <stdio.h>\n\n// Function to calculate the factorial of a number\nlong long factorial(int num) {\n    long long result = 1;\n    for (int i = 1; i <= num; i++) {\n        result *= i;\n    }\n    return result;\n}\n\n// Function to calculate the Brazilian factorial\nlong long special_factorial(int n) {\n    long long result = 1;\n    for (int i = n; i >= 1; i--) {\n        result *= factorial(i);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/12", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring longest(vector<string> strings) {\n    // Check if the vector is empty\n    if (strings.empty()) {\n        return \"\"; // Return an empty string to represent None\n    }\n\n    // Initialize variables to keep track of the longest string\n    string longest_string = strings[0];\n\n    // Iterate through the vector to find the longest string\n    for (const string& str : strings) {\n        if (str.length() > longest_string.length()) {\n            longest_string = str;\n        }\n    }\n\n    return longest_string;\n}\n\n"}
{"task_id": "CPP/121", "generation": "#include <vector>\nusing namespace std;\n\nint solution(vector<int> lst) {\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/35", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm> // for std::max_element\n\nusing namespace std;\n\nfloat max_element(const vector<float>& l) {\n    // Check if the vector is empty\n    if (l.empty()) {\n        throw invalid_argument(\"Vector is empty\");\n    }\n    \n    // Use std::max_element to find the maximum element\n    return *max_element(l.begin(), l.end());\n}\n\n"}
{"task_id": "CPP/20", "generation": "#include <vector>\n#include <algorithm>\n#include <limits>\n\nusing namespace std;\n\nvector<float> find_closest_elements(vector<float> numbers) {\n    // Sort the vector to simplify finding the closest pairs\n    sort(numbers.begin(), numbers.end());\n    \n    // Initialize variables to track the minimum difference and the closest pair\n    float min_diff = numeric_limits<float>::infinity();\n    vector<float> closest_pair = {0, 0};\n    \n    // Iterate through the sorted vector to find the closest pair\n    for (size_t i = 0; i < numbers.size() - 1; ++i) {\n        float diff = numbers[i + 1] - numbers[i];\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = {numbers[i], numbers[i + 1]};\n        }\n    }\n    \n    return closest_pair;\n}\n"}
{"task_id": "CPP/19", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <vector>\n#include <map>\n#include <algorithm>\n\nusing namespace std;\n\nstring sort_numbers(string numbers) {\n    // Step 1: Create a mapping from number words to their corresponding numerical values\n    map<string, int> word_to_num = {\n        {\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3}, {\"four\", 4},\n        {\"five\", 5}, {\"six\", 6}, {\"seven\", 7}, {\"eight\", 8}, {\"nine\", 9}\n    };\n\n    // Step 2: Tokenize the input string\n    stringstream ss(numbers);\n    string token;\n    vector<string> tokens;\n    while (ss >> token) {\n        tokens.push_back(token);\n    }\n\n    // Step 3: Sort the tokens based on their numerical values\n    sort(tokens.begin(), tokens.end(), [&](const string &a, const string &b) {\n        return word_to_num[a] < word_to_num[b];\n    });\n\n    // Step 4: Reconstruct the output string\n    string sorted_numbers;\n    for (size_t i = 0; i < tokens.size(); ++i) {\n        if (i != 0) {\n            sorted_numbers += \" \";\n        }\n        sorted_numbers += tokens[i];\n    }\n\n    return sorted_numbers;\n}\n\n"}
{"task_id": "CPP/85", "generation": "#include <vector>\n#include <iostream>\nusing namespace std;\n\nint add(vector<int> lst) {\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) { // Check if index is odd and element is even\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/21", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm> // for std::min_element and std::max_element\n\nusing namespace std;\n\nvector<float> rescale_to_unit(vector<float> numbers) {\n    // Find the minimum and maximum values in the vector\n    float min_val = *min_element(numbers.begin(), numbers.end());\n    float max_val = *max_element(numbers.begin(), numbers.end());\n\n    // Apply the linear transformation to each element\n    vector<float> rescaled_numbers;\n    for (float num : numbers) {\n        float rescaled_num = (num - min_val) / (max_val - min_val);\n        rescaled_numbers.push_back(rescaled_num);\n    }\n\n    return rescaled_numbers;\n}\n\n"}
{"task_id": "CPP/119", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nbool is_good_string(const string& s) {\n    int balance = 0;\n    for (char c : s) {\n        if (c == '(') {\n            balance++;\n        } else {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance == 0;\n}\n\nstring match_parens(vector<string> lst) {\n    string s1 = lst[0];\n    string s2 = lst[1];\n    if (is_good_string(s1 + s2) || is_good_string(s2 + s1)) {\n        return \"Yes\";\n    }\n    return \"No\";\n}\n"}
{"task_id": "CPP/30", "generation": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<float> get_positive(vector<float> l) {\n    vector<float> positive_numbers;\n    for (float num : l) {\n        if (num > 0) {\n            positive_numbers.push_back(num);\n        }\n    }\n    return positive_numbers;\n}\n\n"}
{"task_id": "CPP/64", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nint vowels_count(string s) {\n    int count = 0;\n    transform(s.begin(), s.end(), s.begin(), ::tolower); // Convert the string to lowercase\n\n    for (char c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n\n    // Check if 'y' is at the end of the word\n    if (s.length() > 0 && s[s.length() - 1] == 'y') {\n        count++;\n    }\n\n    return count;\n}\n\n// Example usage\n"}
{"task_id": "CPP/128", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n\nint prod_signs(vector<int> arr) {\n    if (arr.empty()) {\n        return -32768;\n    }\n\n    int product_of_signs = 1;\n    int sum_of_magnitudes = 0;\n\n    for (int num : arr) {\n        if (num > 0) {\n            product_of_signs *= 1;\n        } else if (num < 0) {\n            product_of_signs *= -1;\n        } else {\n            product_of_signs *= 0;\n        }\n        sum_of_magnitudes += abs(num);\n    }\n\n    return sum_of_magnitudes * product_of_signs;\n}\n\n"}
{"task_id": "CPP/127", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<cmath>\nusing namespace std;\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nstring intersection(vector<int> interval1, vector<int> interval2) {\n    int start1 = interval1[0], end1 = interval1[1];\n    int start2 = interval2[0], end2 = interval2[1];\n    \n    // Find the intersection of the two intervals\n    int intersection_start = max(start1, start2);\n    int intersection_end = min(end1, end2);\n    \n    // If the intervals do not intersect\n    if (intersection_start > intersection_end) {\n        return \"NO\";\n    }\n    \n    // Calculate the length of the intersection\n    int intersection_length = intersection_end - intersection_start + 1;\n    \n    // Check if the length is a prime number\n    if (is_prime(intersection_length)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n"}
{"task_id": "CPP/122", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nint add_elements(vector<int> arr, int k) {\n    int sum_of_elements = 0;\n    for (int i = 0; i < min(k, static_cast<int>(arr.size())); ++i) {\n        if (arr[i] < 100) {\n            sum_of_elements += arr[i];\n        }\n    }\n    return sum_of_elements;\n}\n"}
{"task_id": "CPP/59", "generation": "#include <stdio.h>\n\nint largest_prime_factor(int n) {\n    int largest_factor = 1;\n    \n    // Check for the smallest prime factor, which is 2\n    while (n % 2 == 0) {\n        largest_factor = 2;\n        n /= 2;\n    }\n    \n    // Check for odd factors from 3 onwards\n    for (int i = 3; i * i <= n; i += 2) {\n        while (n % i == 0) {\n            largest_factor = i;\n            n /= i;\n        }\n    }\n    \n    // If n is still greater than 2, then n itself is a prime factor\n    if (n > 2) {\n        largest_factor = n;\n    }\n    \n    return largest_factor;\n}\n\n"}
{"task_id": "CPP/134", "generation": "#include <iostream>\n#include <string>\n#include <cctype> // for isalpha\n\nusing namespace std;\n\nbool check_if_last_char_is_a_letter(string txt) {\n    // Check if the string is empty\n    if (txt.empty()) {\n        return false;\n    }\n\n    // Get the last character\n    char last_char = txt.back();\n\n    // Check if the last character is an alphabetical character\n    if (!isalpha(last_char)) {\n        return false;\n    }\n\n    // Check if the last character is not part of a word\n    // If the last character is followed by a space or is the last character in the string, it's valid\n    if (txt.size() == 1 || txt[txt.size() - 2] == ' ') {\n        return true;\n    }\n\n    return false;\n}\n\n// Test cases\n"}
{"task_id": "CPP/42", "generation": "#include <vector>\nusing namespace std;\n\nvector<int> incr_list(vector<int> l) {\n    vector<int> result;\n    for (int i = 0; i < l.size(); i++) {\n        result.push_back(l[i] + 1);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/11", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring string_xor(string a, string b) {\n    // Ensure both strings are of the same length\n    if (a.length() != b.length()) {\n        throw invalid_argument(\"Input strings must be of the same length\");\n    }\n\n    string result = \"\";\n    for (size_t i = 0; i < a.length(); ++i) {\n        // Perform XOR operation: '0' ^ '0' = '0', '1' ^ '1' = '0', '0' ^ '1' = '1', '1' ^ '0' = '1'\n        result += (a[i] == b[i]) ? '0' : '1';\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/40", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nbool triples_sum_to_zero(vector<int> l) {\n    // Sort the vector\n    sort(l.begin(), l.end());\n    \n    int n = l.size();\n    \n    // Iterate through the vector\n    for (int i = 0; i < n - 2; ++i) {\n        // Skip duplicates for the first element\n        if (i > 0 && l[i] == l[i - 1]) continue;\n        \n        int left = i + 1;\n        int right = n - 1;\n        \n        while (left < right) {\n            int sum = l[i] + l[left] + l[right];\n            \n            if (sum == 0) {\n                return true;\n            } else if (sum < 0) {\n                // Move the left pointer to the right\n                ++left;\n            } else {\n                // Move the right pointer to the left\n                --right;\n            }\n        }\n    }\n    \n    return false;\n}\n\n// Example usage\n"}
{"task_id": "CPP/13", "generation": "#include <iostream>\n\nint greatest_common_divisor(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\n"}
{"task_id": "CPP/130", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<int> tri(int n) {\n    if (n < 0) {\n        return {};\n    }\n\n    vector<int> tribonacci_sequence(n + 1, 0);\n    tribonacci_sequence[0] = 1;\n\n    for (int i = 1; i <= n; ++i) {\n        if (i % 2 == 0) {\n            tribonacci_sequence[i] = 1 + i / 2;\n        } else {\n            if (i == n) {  // Handle the last index separately\n                tribonacci_sequence[i] = tribonacci_sequence[i - 1] + tribonacci_sequence[i - 2] + 1;\n            } else {\n                tribonacci_sequence[i] = tribonacci_sequence[i - 1] + tribonacci_sequence[i - 2] + tribonacci_sequence[i + 1];\n            }\n        }\n    }\n\n    return tribonacci_sequence;\n}\n"}
{"task_id": "CPP/60", "generation": "#include<iostream>\nusing namespace std;\n\nint sum_to_n(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; ++i) {\n        sum += i;\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/23", "generation": "#include <iostream>\n#include <string>\n\nint stringLength(const std::string& str) {\n    return str.length();\n}\n\n"}
{"task_id": "CPP/46", "generation": "#include <stdio.h>\n\nint fib4(int n) {\n    // Base cases\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n\n    // Initialize the first four elements of the sequence\n    int a = 0, b = 0, c = 2, d = 0;\n    int result = 0;\n\n    // Compute the sequence iteratively\n    for (int i = 4; i <= n; i++) {\n        result = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = result;\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/51", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nstring remove_vowels(string text) {\n    string result = \"\";\n    for (char c : text) {\n        // Check if the character is a vowel (both uppercase and lowercase)\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' &&\n            c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n            result += c;\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/18", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint how_many_times(string str, string substring) {\n    int count = 0;\n    int sub_len = substring.length();\n    int str_len = str.length();\n\n    // If either string is empty, return 0\n    if (sub_len == 0 || str_len == 0) {\n        return 0;\n    }\n\n    // Iterate through the string and check for substring matches\n    for (int i = 0; i <= str_len - sub_len; ++i) {\n        if (str.substr(i, sub_len) == substring) {\n            ++count;\n        }\n    }\n\n    return count;\n}\n\n"}
{"task_id": "CPP/143", "generation": "#include <iostream>\n#include <string>\n#include <vector>\n#include <sstream>\n#include <cmath>\n\nusing namespace std;\n\n// Function to check if a number is prime\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true; // 2 is the only even prime number\n    if (n % 2 == 0) return false; // Other even numbers are not prime\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nstring words_in_sentence(string sentence) {\n    stringstream ss(sentence);\n    string word;\n    vector<string> primeLengthWords;\n    \n    // Split the sentence into words\n    while (ss >> word) {\n        if (isPrime(word.length())) {\n            primeLengthWords.push_back(word);\n        }\n    }\n    \n    // Join the words back into a single string\n    string result;\n    for (size_t i = 0; i < primeLengthWords.size(); ++i) {\n        if (i != 0) result += \" \";\n        result += primeLengthWords[i];\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/108", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n\nint sum_of_digits(int num) {\n    int total = 0;\n    int abs_num = abs(num);\n    while (abs_num > 0) {\n        total += abs_num % 10;\n        abs_num /= 10;\n    }\n    if (num < 0) {\n        total = -total;\n    }\n    return total;\n}\n\nint count_nums(vector<int> n) {\n    int count = 0;\n    for (int num : n) {\n        if (sum_of_digits(num) > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/43", "generation": "#include <vector>\n#include <unordered_set>\nusing namespace std;\n\nbool pairs_sum_to_zero(vector<int> l) {\n    unordered_set<int> seen;\n    \n    for (int num : l) {\n        if (seen.find(-num) != seen.end()) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    \n    return false;\n}\n\n// Example usage\n"}
{"task_id": "CPP/70", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> strange_sort_list(vector<int> lst) {\n    // Sort the input vector in ascending order\n    sort(lst.begin(), lst.end());\n    \n    // Initialize the result vector\n    vector<int> result;\n    \n    // Initialize indices for the smallest and largest elements\n    int i = 0;\n    int j = lst.size() - 1;\n    \n    // Alternate between smallest and largest elements\n    while (i <= j) {\n        if (i <= j) {\n            result.push_back(lst[i]);\n            i++;\n        }\n        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/63", "generation": "#include <iostream>\n#include <vector>\n\nint fibfib(int n) {\n    if (n == 0 || n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 1;\n    }\n\n    std::vector<int> fibfib_sequence(n + 1);\n    fibfib_sequence[0] = 0;\n    fibfib_sequence[1] = 0;\n    fibfib_sequence[2] = 1;\n\n    for (int i = 3; i <= n; ++i) {\n        fibfib_sequence[i] = fibfib_sequence[i - 1] + fibfib_sequence[i - 2] + fibfib_sequence[i - 3];\n    }\n\n    return fibfib_sequence[n];\n}\n\n"}
{"task_id": "CPP/89", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring encrypt(string s) {\n    string result = \"\";\n    int shift = 4; // 2 * 2 = 4\n\n    for (char c : s) {\n        if (c >= 'a' && c <= 'z') {\n            // Shift within lowercase letters\n            c = 'a' + (c - 'a' + shift) % 26;\n        } else if (c >= 'A' && c <= 'Z') {\n            // Shift within uppercase letters\n            c = 'A' + (c - 'A' + shift) % 26;\n        }\n        result += c;\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/26", "generation": "#include<stdio.h>\n#include<vector>\n#include<unordered_map>\nusing namespace std;\n\nvector<int> remove_duplicates(vector<int> numbers) {\n    unordered_map<int, int> count_map;\n    vector<int> result;\n\n    // Count occurrences of each number\n    for (int num : numbers) {\n        count_map[num]++;\n    }\n\n    // Filter out numbers that occur more than once\n    for (int num : numbers) {\n        if (count_map[num] == 1) {\n            result.push_back(num);\n        }\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/104", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\n// Helper function to check if a number contains any even digit\nbool hasEvenDigit(int num) {\n    while (num > 0) {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            return true;\n        }\n        num /= 10;\n    }\n    return false;\n}\n\nvector<int> unique_digits(vector<int> x) {\n    vector<int> result;\n    \n    // Filter out numbers that contain any even digit\n    for (int num : x) {\n        if (!hasEvenDigit(num)) {\n            result.push_back(num);\n        }\n    }\n    \n    // Sort the result in increasing order\n    sort(result.begin(), result.end());\n    \n    return result;\n}\n\n// Example usage\n"}
{"task_id": "CPP/90", "generation": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nint next_smallest(const std::vector<int>& lst) {\n    if (lst.size() < 2) {\n        return -1; // Return -1 as a sentinel value for None\n    }\n\n    // Create a copy of the vector and sort it\n    std::vector<int> sorted_lst = lst;\n    std::sort(sorted_lst.begin(), sorted_lst.end());\n\n    // Find the second smallest unique element\n    int smallest = sorted_lst[0];\n    for (size_t i = 1; i < sorted_lst.size(); ++i) {\n        if (sorted_lst[i] != smallest) {\n            return sorted_lst[i];\n        }\n    }\n\n    return -1; // Return -1 if there is no second smallest unique element\n}\n\n"}
{"task_id": "CPP/126", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nbool is_sorted(vector<int> lst) {\n    // Check if the vector is sorted in ascending order\n    if (!is_sorted(lst.begin(), lst.end())) {\n        return false;\n    }\n\n    // Check if any number appears more than twice\n    for (size_t i = 0; i < lst.size(); ++i) {\n        int count = 0;\n        for (size_t j = 0; j < lst.size(); ++j) {\n            if (lst[i] == lst[j]) {\n                count++;\n            }\n            if (count > 2) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n"}
{"task_id": "CPP/68", "generation": "#include<vector>\nusing namespace std;\n\nvector<int> pluck(vector<int> arr) {\n    if (arr.empty()) {\n        return {};\n    }\n\n    int smallest_even = -1;\n    int smallest_index = -1;\n\n    for (int i = 0; i < arr.size(); ++i) {\n        if (arr[i] % 2 == 0) {\n            if (smallest_even == -1 || arr[i] < smallest_even) {\n                smallest_even = arr[i];\n                smallest_index = i;\n            }\n        }\n    }\n\n    if (smallest_even == -1) {\n        return {};\n    } else {\n        return {smallest_even, smallest_index};\n    }\n}\n"}
{"task_id": "CPP/58", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <set>\n\nusing namespace std;\n\nvector<int> common(vector<int> l1, vector<int> l2) {\n    // Convert vectors to sets to remove duplicates\n    set<int> set1(l1.begin(), l1.end());\n    set<int> set2(l2.begin(), l2.end());\n    \n    // Find the intersection of the two sets\n    vector<int> result;\n    set_intersection(set1.begin(), set1.end(), set2.begin(), set2.end(), back_inserter(result));\n    \n    // Sort the result (though sets are already sorted, this is just for completeness)\n    sort(result.begin(), result.end());\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/112", "generation": "#include<iostream>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nvector<string> reverse_delete(string s, string c) {\n    // Step 1: Remove characters from s that are in c\n    string result;\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            result += ch;\n        }\n    }\n    \n    // Step 2: Check if the result string is a palindrome\n    bool isPalindrome = true;\n    int n = result.length();\n    for (int i = 0; i < n / 2; ++i) {\n        if (result[i] != result[n - i - 1]) {\n            isPalindrome = false;\n            break;\n        }\n    }\n    \n    // Step 3: Prepare the result vector\n    vector<string> resultVector;\n    resultVector.push_back(result);\n    resultVector.push_back(isPalindrome ? \"True\" : \"False\");\n    \n    return resultVector;\n}\n\n"}
{"task_id": "CPP/96", "generation": "#include <vector>\n#include <cmath>\n\nusing namespace std;\n\nvector<int> count_up_to(int n) {\n    if (n <= 2) {\n        return {};\n    }\n\n    // Create a boolean array \"prime[0..n]\" and initialize\n    // all entries it as true. A value in prime[i] will\n    // finally be false if i is Not a prime, else true.\n    vector<bool> prime(n, true);\n\n    // 0 and 1 are not prime numbers\n    prime[0] = prime[1] = false;\n\n    for (int p = 2; p * p < n; p++) {\n        // If prime[p] is not changed, then it is a prime\n        if (prime[p] == true) {\n            // Update all multiples of p to false\n            for (int i = p * p; i < n; i += p) {\n                prime[i] = false;\n            }\n        }\n    }\n\n    // Collect all prime numbers\n    vector<int> primes;\n    for (int p = 2; p < n; p++) {\n        if (prime[p]) {\n            primes.push_back(p);\n        }\n    }\n\n    return primes;\n}\n"}
{"task_id": "CPP/157", "generation": "#include<stdio.h>\n#include<math.h>\n\nbool right_angle_triangle(float a, float b, float c) {\n    // Ensure the sides are in non-decreasing order\n    if (a > b) {\n        float temp = a;\n        a = b;\n        b = temp;\n    }\n    if (b > c) {\n        float temp = b;\n        b = c;\n        c = temp;\n    }\n    if (a > b) {\n        float temp = a;\n        a = b;\n        b = temp;\n    }\n\n    // Now c is the longest side\n    return (pow(a, 2) + pow(b, 2) == pow(c, 2));\n}\n\n"}
{"task_id": "CPP/99", "generation": "#include <iostream>\n#include <string>\n#include <cmath>\n\nint closest_integer(std::string value) {\n    // Convert the string to a double\n    double number = std::stod(value);\n    \n    // Determine the closest integer\n    int closest;\n    if (number >= 0) {\n        closest = static_cast<int>(number + 0.5);\n    } else {\n        closest = static_cast<int>(number - 0.5);\n    }\n    \n    return closest;\n}\n\n"}
{"task_id": "CPP/149", "generation": "#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nvector<string> sorted_list_sum(vector<string> lst) {\n    // Step 1: Filter out strings with odd lengths\n    vector<string> filtered_lst;\n    for (const string& s : lst) {\n        if (s.length() % 2 == 0) {\n            filtered_lst.push_back(s);\n        }\n    }\n\n    // Step 2: Sort the filtered strings\n    sort(filtered_lst.begin(), filtered_lst.end(), [](const string& a, const string& b) {\n        if (a.length() == b.length()) {\n            return a < b; // Sort alphabetically if lengths are the same\n        }\n        return a.length() < b.length(); // Sort by length\n    });\n\n    return filtered_lst;\n}\n\n// Example usage\n"}
{"task_id": "CPP/86", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <sstream>\n\nusing namespace std;\n\nstring anti_shuffle(string s) {\n    // Create a stringstream to split the input string by spaces\n    stringstream ss(s);\n    string word;\n    string result;\n\n    // Process each word in the string\n    while (ss >> word) {\n        // Sort the characters of the word\n        sort(word.begin(), word.end());\n        // Append the sorted word to the result\n        result += word + \" \";\n    }\n\n    // Remove the trailing space if there is any\n    if (!result.empty()) {\n        result.pop_back();\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/129", "generation": "#include <vector>\n#include <queue>\n#include <climits>\nusing namespace std;\n\nvector<int> minPath(vector<vector<int>> grid, int k) {\n    int N = grid.size();\n    vector<int> result;\n    vector<vector<int>> directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}}; // up, down, left, right\n    \n    // Initialize the result with a large value\n    vector<int> min_path(k, INT_MAX);\n    \n    // BFS queue\n    queue<pair<vector<int>, pair<int, int>>> q; // {path, {row, col}}\n    \n    // Start BFS from each cell\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            q.push({{grid[i][j]}, {i, j}});\n        }\n    }\n    \n    while (!q.empty()) {\n        auto current = q.front();\n        q.pop();\n        \n        vector<int> path = current.first;\n        int row = current.second.first;\n        int col = current.second.second;\n        \n        // If the path length is k, compare and update the result\n        if (path.size() == k) {\n            if (path < min_path) {\n                min_path = path;\n            }\n            continue;\n        }\n        \n        // Explore all possible moves\n        for (auto& dir : directions) {\n            int new_row = row + dir[0];\n            int new_col = col + dir[1];\n            \n            if (new_row >= 0 && new_row < N && new_col >= 0 && new_col < N) {\n                vector<int> new_path = path;\n                new_path.push_back(grid[new_row][new_col]);\n                q.push({new_path, {new_row, new_col}});\n            }\n        }\n    }\n    \n    return min_path;\n}\n\n// Example usage\n"}
{"task_id": "CPP/49", "generation": "#include <stdio.h>\n\nint modp(int n, int p) {\n    if (n == 0) {\n        return 1; // 2^0 % p is always 1\n    }\n\n    long long result = 1;\n    long long base = 2;\n\n    while (n > 0) {\n        if (n % 2 == 1) {\n            result = (result * base) % p;\n        }\n        base = (base * base) % p;\n        n /= 2;\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/156", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring int_to_mini_roman(int number) {\n    // Mapping of integer values to their corresponding Roman numeral symbols in lowercase\n    vector<pair<int, string>> roman_map = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"},\n        {100, \"c\"}, {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"},\n        {10, \"x\"}, {9, \"ix\"}, {5, \"v\"}, {4, \"iv\"},\n        {1, \"i\"}\n    };\n    \n    string result = \"\";\n    \n    // Iterate through the mapping\n    for (const auto& pair : roman_map) {\n        int value = pair.first;\n        string symbol = pair.second;\n        \n        // Append the symbol while the number is greater than or equal to the value\n        while (number >= value) {\n            result += symbol;\n            number -= value;\n        }\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/65", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring circular_shift(int x, int shift) {\n    // Convert the integer to a string to manipulate its digits\n    string x_str = to_string(x);\n    // Calculate the number of digits\n    int num_digits = x_str.length();\n    \n    // If shift is greater than the number of digits, return the digits reversed\n    if (shift > num_digits) {\n        string reversed_str = x_str;\n        reverse(reversed_str.begin(), reversed_str.end());\n        return reversed_str;\n    }\n    \n    // Calculate the effective shift (modulo the number of digits)\n    int effective_shift = shift % num_digits;\n    \n    // Perform the circular shift\n    string shifted_str = x_str.substr(num_digits - effective_shift) + x_str.substr(0, num_digits - effective_shift);\n    \n    return shifted_str;\n}\n"}
{"task_id": "CPP/9", "generation": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<int> rolling_max(vector<int> numbers) {\n    vector<int> result;\n    if (numbers.empty()) {\n        return result; // Return an empty vector if the input is empty\n    }\n\n    int current_max = numbers[0]; // Initialize the current max with the first element\n    result.push_back(current_max); // Add the first element to the result\n\n    for (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > current_max) {\n            current_max = numbers[i]; // Update the current max if a larger element is found\n        }\n        result.push_back(current_max); // Add the current max to the result\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/158", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_set>\n#include <algorithm>\n\nusing namespace std;\n\nstring find_max(vector<string> words) {\n    string max_word = \"\";\n    int max_unique_count = 0;\n\n    for (const string& word : words) {\n        // Use an unordered_set to count unique characters\n        unordered_set<char> unique_chars(word.begin(), word.end());\n        int unique_count = unique_chars.size();\n\n        // If the current word has more unique characters, update max_word\n        if (unique_count > max_unique_count) {\n            max_word = word;\n            max_unique_count = unique_count;\n        }\n        // If the current word has the same number of unique characters but is lexicographically smaller, update max_word\n        else if (unique_count == max_unique_count && word < max_word) {\n            max_word = word;\n        }\n    }\n\n    return max_word;\n}\n\n"}
{"task_id": "CPP/8", "generation": "#include <vector>\n#include <numeric> // For std::accumulate\n\nusing namespace std;\n\nvector<int> sum_product(vector<int> numbers) {\n    // Initialize sum to 0 and product to 1\n    int sum = 0;\n    int product = 1;\n\n    // If the vector is not empty, calculate the sum and product\n    if (!numbers.empty()) {\n        sum = accumulate(numbers.begin(), numbers.end(), 0);\n        product = accumulate(numbers.begin(), numbers.end(), 1, multiplies<int>());\n    }\n\n    // Return the result as a vector\n    return {sum, product};\n}\n\n// Example usage\n"}
{"task_id": "CPP/95", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n\nbool check_dict_case(map<string, string> dict) {\n    if (dict.empty()) {\n        return false;\n    }\n\n    bool all_lower = true;\n    bool all_upper = true;\n\n    for (const auto& pair : dict) {\n        const string& key = pair.first;\n\n        if (!all_of(key.begin(), key.end(), ::islower)) {\n            all_lower = false;\n        }\n        if (!all_of(key.begin(), key.end(), ::isupper)) {\n            all_upper = false;\n        }\n\n        if (!all_lower && !all_upper) {\n            return false;\n        }\n    }\n\n    return all_lower || all_upper;\n}\n"}
{"task_id": "CPP/55", "generation": "#include<iostream>\nusing namespace std;\n\nint fib(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}\n\n"}
{"task_id": "CPP/29", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> filter_by_prefix(vector<string> strings, string prefix) {\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.substr(0, prefix.size()) == prefix) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/72", "generation": "#include <vector>\n#include <numeric> // for std::accumulate\n\nusing namespace std;\n\nbool will_it_fly(vector<int> q, int w) {\n    // Check if the vector is palindromic\n    int n = q.size();\n    for (int i = 0; i < n / 2; ++i) {\n        if (q[i] != q[n - 1 - i]) {\n            return false;\n        }\n    }\n    \n    // Calculate the sum of the elements in the vector\n    int sum = accumulate(q.begin(), q.end(), 0);\n    \n    // Check if the sum is less than or equal to the maximum possible weight\n    return sum <= w;\n}\n\n// Example usage\n"}
{"task_id": "CPP/54", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nbool same_chars(string s0, string s1) {\n    // Convert strings to vectors of characters and sort them\n    vector<char> sorted_s0(s0.begin(), s0.end());\n    vector<char> sorted_s1(s1.begin(), s1.end());\n    sort(sorted_s0.begin(), sorted_s0.end());\n    sort(sorted_s1.begin(), sorted_s1.end());\n    \n    // Compare the sorted vectors\n    return sorted_s0 == sorted_s1;\n}\n"}
{"task_id": "CPP/91", "generation": "#include <string>\n#include <sstream>\n#include <vector>\n\nusing namespace std;\n\nint is_bored(string S) {\n    vector<string> sentences;\n    string delimiter = \".!?\";\n    string sentence;\n    stringstream ss(S);\n\n    // Split the string into sentences based on delimiters\n    while (getline(ss, sentence, '.')) {\n        sentences.push_back(sentence);\n    }\n    ss.clear();\n    ss.str(S);\n    while (getline(ss, sentence, '?')) {\n        sentences.push_back(sentence);\n    }\n    ss.clear();\n    ss.str(S);\n    while (getline(ss, sentence, '!')) {\n        sentences.push_back(sentence);\n    }\n\n    int boredom_count = 0;\n    for (string& s : sentences) {\n        // Remove leading and trailing whitespace\n        s.erase(0, s.find_first_not_of(' '));\n        s.erase(s.find_last_not_of(' ') + 1);\n\n        // Check if the sentence starts with \"I\"\n        if (!s.empty() && s.substr(0, 1) == \"I\") {\n            boredom_count++;\n        }\n    }\n\n    return boredom_count;\n}\n"}
{"task_id": "CPP/77", "generation": "#include <iostream>\n#include <cmath>\n\nbool iscube(int a) {\n    if (a < 0) {\n        // If a is negative, we need to handle the cube root of a negative number\n        a = -a;\n        double cube_root = cbrt(a);\n        int n = static_cast<int>(cube_root);\n        return (n * n * n == a);\n    } else {\n        // If a is non-negative, we can directly take the cube root\n        double cube_root = cbrt(a);\n        int n = static_cast<int>(cube_root);\n        return (n * n * n == a);\n    }\n}\n\n"}
{"task_id": "CPP/73", "generation": "#include <vector>\n#include <iostream>\nusing namespace std;\n\nint smallest_change(vector<int> arr) {\n    int left = 0;\n    int right = arr.size() - 1;\n    int changes = 0;\n\n    while (left < right) {\n        if (arr[left] != arr[right]) {\n            changes++;\n        }\n        left++;\n        right--;\n    }\n\n    return changes;\n}\n\n"}
{"task_id": "CPP/71", "generation": "#include <stdio.h>\n#include <math.h>\n\nfloat triangle_area(float a, float b, float c) {\n    // Check if the sides can form a valid triangle\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n\n    // Calculate the semi-perimeter\n    float s = (a + b + c) / 2;\n\n    // Calculate the area using Heron's formula\n    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n\n    // Return the area rounded to 2 decimal points\n    return round(area * 100) / 100;\n}\n\n"}
{"task_id": "CPP/82", "generation": "#include <iostream>\n#include <string>\n#include <cmath>\nusing namespace std;\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true; // 2 is the only even prime number\n    if (n % 2 == 0) return false; // other even numbers are not prime\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nbool prime_length(string str) {\n    int length = str.length();\n    return is_prime(length);\n}\n\n"}
{"task_id": "CPP/114", "generation": "#include<stdio.h>\n#include<vector>\n#include<limits.h>\nusing namespace std;\n\nlong long minSubArraySum(vector<long long> nums) {\n    if (nums.empty()) {\n        return 0; // or some error value, depending on the problem's requirements\n    }\n\n    long long min_sum = nums[0];\n    long long current_min = nums[0];\n\n    for (size_t i = 1; i < nums.size(); ++i) {\n        current_min = min(nums[i], current_min + nums[i]);\n        min_sum = min(min_sum, current_min);\n    }\n\n    return min_sum;\n}\n\n"}
{"task_id": "CPP/138", "generation": "#include<stdio.h>\n\nbool is_equal_to_sum_even(int n) {\n    // Check if n is at least 8 and is even\n    return n >= 8 && n % 2 == 0;\n}\n\n"}
{"task_id": "CPP/132", "generation": "#include<stdio.h>\n#include<string>\n#include<stack>\nusing namespace std;\n\nbool is_nested(string str) {\n    stack<char> s;\n    bool nested = false;\n    int depth = 0;\n\n    for (char c : str) {\n        if (c == '[') {\n            s.push(c);\n        } else if (c == ']') {\n            if (!s.empty() && s.top() == '[') {\n                s.pop();\n            } else {\n                s.push(c);\n            }\n        }\n    }\n\n    for (char c : str) {\n        if (c == '[') {\n            depth++;\n        } else if (c == ']') {\n            if (depth > 1) {\n                nested = true;\n            }\n            depth--;\n        }\n    }\n\n    return nested;\n}\n"}
{"task_id": "CPP/3", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nbool below_zero(vector<int> operations) {\n    int balance = 0;\n    for (int operation : operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\n"}
{"task_id": "CPP/142", "generation": "#include <vector>\n#include <cmath> // For pow function\n\nusing namespace std;\n\nint sum_squares(vector<int> lst) {\n    int sum = 0;\n    \n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 3 == 0) {\n            // Square the element if the index is a multiple of 3\n            lst[i] = lst[i] * lst[i];\n        } else if (i % 4 == 0 && i % 3 != 0) {\n            // Cube the element if the index is a multiple of 4 but not a multiple of 3\n            lst[i] = lst[i] * lst[i] * lst[i];\n        }\n        // Add the transformed element to the sum\n        sum += lst[i];\n    }\n    \n    return sum;\n}\n\n// Example usage\n#include <iostream>\n\n"}
{"task_id": "CPP/50", "generation": "#include <stdio.h>\n#include <string>\nusing namespace std;\n\nstring encode_shift(string s) {\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i = 0; i < s.length(); i++) {\n        int w = ((int)s[i] + 5 - (int)'a') % 26 + (int)'a';\n        out = out + (char)w;\n    }\n    return out;\n}\n\nstring decode_shift(string s) {\n    // takes as input string encoded with encode_shift function. Returns decoded string.\n    string out;\n    int i;\n    for (i = 0; i < s.length(); i++) {\n        int w = ((int)s[i] - 5 - (int)'a' + 26) % 26 + (int)'a';\n        out = out + (char)w;\n    }\n    return out;\n}\n\n"}
{"task_id": "CPP/103", "generation": "#include <iostream>\n#include <string>\n#include <cmath>\n\nusing namespace std;\n\nstring rounded_avg(int n, int m) {\n    // Step 1: Check if n is greater than m\n    if (n > m) {\n        return \"-1\";\n    }\n    \n    // Step 2: Calculate the average\n    int sum = 0;\n    for (int i = n; i <= m; ++i) {\n        sum += i;\n    }\n    double average = static_cast<double>(sum) / (m - n + 1);\n    \n    // Step 3: Round the average to the nearest integer (smaller one)\n    int rounded_average = floor(average);\n    \n    // Step 4: Convert the rounded average to binary\n    string binary_representation;\n    if (rounded_average == 0) {\n        binary_representation = \"0\";\n    } else {\n        while (rounded_average > 0) {\n            binary_representation = to_string(rounded_average % 2) + binary_representation;\n            rounded_average /= 2;\n        }\n    }\n    \n    // Step 5: Return the binary string\n    return binary_representation;\n}\n\n"}
{"task_id": "CPP/57", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nbool monotonic(vector<float> l) {\n    bool increasing = true;\n    bool decreasing = true;\n    \n    for (size_t i = 1; i < l.size(); ++i) {\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n        }\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n        }\n    }\n    \n    return increasing || decreasing;\n}\n"}
{"task_id": "CPP/28", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring concatenate(const vector<string>& strings) {\n    string result;\n    for (const string& s : strings) {\n        result += s;\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/39", "generation": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n// Function to check if a number is prime\nbool is_prime(int num) {\n    if (num <= 1) return false;\n    if (num == 2) return true;\n    if (num % 2 == 0) return false;\n    for (int i = 3; i <= sqrt(num); i += 2) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\n// Function to generate the n-th prime Fibonacci number\nint prime_fib(int n) {\n    if (n <= 0) return -1; // Invalid input\n    int a = 0, b = 1, count = 0;\n    while (true) {\n        int temp = a + b;\n        a = b;\n        b = temp;\n        if (is_prime(b)) {\n            count++;\n            if (count == n) {\n                return b;\n            }\n        }\n    }\n}\n\n"}
{"task_id": "CPP/45", "generation": "#include <stdio.h>\n\nfloat triangle_area(float a, float h) {\n    return 0.5 * a * h;\n}\n\n"}
{"task_id": "CPP/145", "generation": "#include <vector>\n#include <algorithm>\n#include <string>\n#include <cmath>\n\nusing namespace std;\n\nint sum_of_digits(int num) {\n    int sum = 0;\n    num = abs(num);\n    while (num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}\n\nvector<int> order_by_points(vector<int> nums) {\n    vector<pair<int, int>> indexed_nums;\n    for (int i = 0; i < nums.size(); ++i) {\n        indexed_nums.push_back({nums[i], i});\n    }\n\n    sort(indexed_nums.begin(), indexed_nums.end(), [](const pair<int, int>& a, const pair<int, int>& b) {\n        int sum_a = sum_of_digits(a.first);\n        int sum_b = sum_of_digits(b.first);\n        if (sum_a == sum_b) {\n            return a.second < b.second;\n        }\n        return sum_a < sum_b;\n    });\n\n    vector<int> sorted_nums;\n    for (const auto& p : indexed_nums) {\n        sorted_nums.push_back(p.first);\n    }\n\n    return sorted_nums;\n}\n"}
{"task_id": "CPP/84", "generation": "#include <iostream>\n#include <string>\n#include <bitset>\n\nusing namespace std;\n\nstring solve(int N) {\n    // Step 1: Calculate the sum of digits\n    int sum = 0;\n    int temp = N;\n    while (temp > 0) {\n        sum += temp % 10;  // Add the last digit to the sum\n        temp /= 10;        // Remove the last digit\n    }\n\n    // Step 2: Convert the sum to binary\n    string binarySum = bitset<32>(sum).to_string();  // Convert to binary string\n\n    // Step 3: Remove leading zeros\n    size_t pos = binarySum.find('1');  // Find the first '1'\n    if (pos != string::npos) {\n        binarySum = binarySum.substr(pos);  // Extract the substring from the first '1'\n    } else {\n        binarySum = \"0\";  // If no '1' is found, the sum was 0\n    }\n\n    return binarySum;\n}\n\n"}
{"task_id": "CPP/113", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<string> odd_count(vector<string> lst) {\n    vector<string> result;\n    \n    for (size_t i = 0; i < lst.size(); ++i) {\n        int odd_count = 0;\n        for (char c : lst[i]) {\n            if ((c - '0') % 2 != 0) {\n                ++odd_count;\n            }\n        }\n        \n        // Create the output string with the correct format\n        ostringstream oss;\n        oss << \"the number of odd elements \" << odd_count << \"n the str\" << odd_count << \"ng \" << odd_count << \" of the \" << odd_count << \"nput.\";\n        result.push_back(oss.str());\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/36", "generation": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint fizz_buzz(int n) {\n    int count = 0;\n    for (int i = 0; i < n; ++i) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            string num_str = to_string(i);\n            for (char c : num_str) {\n                if (c == '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/144", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\n// Function to parse the fraction string and return the numerator and denominator\npair<int, int> parseFraction(const string& fraction) {\n    size_t pos = fraction.find('/');\n    int numerator = stoi(fraction.substr(0, pos));\n    int denominator = stoi(fraction.substr(pos + 1));\n    return {numerator, denominator};\n}\n\n// Function to compute the greatest common divisor (GCD) of two numbers\nint gcd(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\n// Function to simplify the product of two fractions and check if it's a whole number\nbool simplify(string x, string n) {\n    // Parse the fractions\n    pair<int, int> fracX = parseFraction(x);\n    pair<int, int> fracN = parseFraction(n);\n    \n    // Compute the product of the two fractions\n    int numerator = fracX.first * fracN.first;\n    int denominator = fracX.second * fracN.second;\n    \n    // Check if the resulting fraction simplifies to a whole number\n    int commonDivisor = gcd(numerator, denominator);\n    numerator /= commonDivisor;\n    denominator /= commonDivisor;\n    \n    return denominator == 1;\n}\n\n"}
{"task_id": "CPP/0", "generation": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n\nbool has_close_elements(vector<float> numbers, float threshold) {\n    // Get the size of the vector\n    int n = numbers.size();\n    \n    // Iterate through each pair of numbers\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            // Calculate the absolute difference between numbers[i] and numbers[j]\n            float diff = fabs(numbers[i] - numbers[j]);\n            \n            // Check if the difference is less than the threshold\n            if (diff < threshold) {\n                return true;\n            }\n        }\n    }\n    \n    // If no such pair is found, return false\n    return false;\n}\n\n"}
{"task_id": "CPP/17", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<int> parse_music(string music_string) {\n    vector<int> beats;\n    stringstream ss(music_string);\n    string note;\n    \n    while (ss >> note) {\n        if (note == \"o\") {\n            beats.push_back(4);\n        } else if (note == \"o|\") {\n            beats.push_back(2);\n        } else if (note == \".|\") {\n            beats.push_back(1);\n        }\n    }\n    \n    return beats;\n}\n\n"}
{"task_id": "CPP/47", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nfloat median(vector<float> l) {\n    // Step 1: Sort the vector\n    sort(l.begin(), l.end());\n\n    // Step 2: Determine the size of the vector\n    int n = l.size();\n\n    // Step 3: Check if the number of elements is odd or even\n    if (n % 2 != 0) {\n        // If odd, return the middle element\n        return l[n / 2];\n    } else {\n        // If even, return the average of the two middle elements\n        return (l[(n / 2) - 1] + l[n / 2]) / 2.0;\n    }\n}\n\n"}
{"task_id": "CPP/75", "generation": "#include <vector>\n#include <cmath>\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nbool is_multiply_prime(int a) {\n    std::vector<int> primes;\n    for (int i = 2; i < 100; ++i) {\n        if (is_prime(i)) {\n            primes.push_back(i);\n        }\n    }\n\n    for (int i : primes) {\n        for (int j : primes) {\n            for (int k : primes) {\n                if (i * j * k == a) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/124", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <iomanip>\n\nusing namespace std;\n\nbool valid_date(string date) {\n    // Check if the date string is empty\n    if (date.empty()) {\n        return false;\n    }\n\n    // Check if the date string is in the format \"mm-dd-yyyy\"\n    if (date.length() != 10 || date[2] != '-' || date[5] != '-') {\n        return false;\n    }\n\n    // Extract the month, day, and year from the date string\n    int month, day, year;\n    char dash1, dash2;\n    stringstream ss(date);\n    ss >> month >> dash1 >> day >> dash2 >> year;\n\n    // Check if the extracted values are valid\n    if (dash1 != '-' || dash2 != '-' || ss.fail()) {\n        return false;\n    }\n\n    // Validate the month\n    if (month < 1 || month > 12) {\n        return false;\n    }\n\n    // Validate the day based on the month\n    if (month == 2) {\n        if (day < 1 || day > 29) {\n            return false;\n        }\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) {\n            return false;\n        }\n    } else {\n        if (day < 1 || day > 31) {\n            return false;\n        }\n    }\n\n    // If all checks pass, the date is valid\n    return true;\n}\n\n"}
{"task_id": "CPP/101", "generation": "#include <vector>\n#include <string>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> words_string(string s) {\n    vector<string> words;\n    string word;\n    stringstream ss(s);\n    \n    // Read words separated by spaces or commas\n    while (getline(ss, word, ',')) {\n        // Remove leading and trailing spaces from the word\n        word.erase(0, word.find_first_not_of(' '));\n        word.erase(word.find_last_not_of(' ') + 1);\n        \n        // Split the word further by spaces\n        stringstream word_ss(word);\n        string subword;\n        while (word_ss >> subword) {\n            words.push_back(subword);\n        }\n    }\n    \n    return words;\n}\n"}
{"task_id": "CPP/14", "generation": "#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> all_prefixes(const string& str) {\n    vector<string> prefixes;\n    for (size_t i = 1; i <= str.size(); ++i) {\n        prefixes.push_back(str.substr(0, i));\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/141", "generation": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring file_name_check(string file_name) {\n    int dot_count = 0;\n    int digit_count = 0;\n    int dot_index = -1;\n\n    // Iterate through the file name to count dots and digits\n    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i] == '.') {\n            dot_count++;\n            dot_index = i;\n        } else if (isdigit(file_name[i])) {\n            digit_count++;\n        }\n    }\n\n    // Check if there are more than three digits\n    if (digit_count > 3) {\n        return \"No\";\n    }\n\n    // Check if there is exactly one dot\n    if (dot_count != 1) {\n        return \"No\";\n    }\n\n    // Check if the substring before the dot is not empty and starts with a letter\n    string before_dot = file_name.substr(0, dot_index);\n    if (before_dot.empty() || !isalpha(before_dot[0])) {\n        return \"No\";\n    }\n\n    // Check if the substring after the dot is one of the allowed extensions\n    string after_dot = file_name.substr(dot_index + 1);\n    if (after_dot != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\") {\n        return \"No\";\n    }\n\n    // If all conditions are met, return \"Yes\"\n    return \"Yes\";\n}\n\n// Example usage\n"}
{"task_id": "CPP/123", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> get_odd_collatz(int n) {\n    vector<int> odd_numbers;\n    \n    // Start with the given number\n    while (n != 1) {\n        if (n % 2 == 1) { // Check if the number is odd\n            odd_numbers.push_back(n);\n        }\n        // Apply the Collatz rule\n        if (n % 2 == 0) {\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n    }\n    \n    // Add the final 1 to the list of odd numbers\n    odd_numbers.push_back(1);\n    \n    // Sort the list of odd numbers\n    sort(odd_numbers.begin(), odd_numbers.end());\n    \n    return odd_numbers;\n}\n"}
{"task_id": "CPP/148", "generation": "#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> bf(string planet1, string planet2) {\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    \n    // Check if both planet names are valid\n    if (find(planets.begin(), planets.end(), planet1) == planets.end() ||\n        find(planets.begin(), planets.end(), planet2) == planets.end()) {\n        return {};\n    }\n    \n    // Find indices of planet1 and planet2\n    int index1 = find(planets.begin(), planets.end(), planet1) - planets.begin();\n    int index2 = find(planets.begin(), planets.end(), planet2) - planets.begin();\n    \n    // Ensure index1 is less than index2\n    if (index1 > index2) {\n        swap(index1, index2);\n    }\n    \n    // Return the planets between index1 and index2\n    return vector<string>(planets.begin() + index1 + 1, planets.begin() + index2);\n}\n"}
{"task_id": "CPP/133", "generation": "#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n\nint sum_squares(vector<float> lst) {\n    int sum = 0;\n    for (float num : lst) {\n        int ceiling_num = ceil(num);  // Apply the ceiling function\n        sum += ceiling_num * ceiling_num;  // Square the result and add to sum\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/109", "generation": "#include <vector>\nusing namespace std;\n\nbool move_one_ball(vector<int> arr) {\n    if (arr.empty()) return true;\n\n    int n = arr.size();\n    int min_index = 0;\n\n    // Find the index of the minimum element\n    for (int i = 1; i < n; ++i) {\n        if (arr[i] < arr[min_index]) {\n            min_index = i;\n        }\n    }\n\n    // Check if the sequence from min_index to the end is sorted\n    for (int i = 1; i < n; ++i) {\n        if (arr[(min_index + i) % n] < arr[(min_index + i - 1) % n]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n"}
{"task_id": "CPP/100", "generation": "#include <vector>\nusing namespace std;\n\nvector<int> make_a_pile(int n) {\n    vector<int> result;\n    int current = n;\n    \n    while (result.size() < n) {\n        result.push_back(current);\n        if (current % 2 == 0) {\n            current += 2; // Next even number\n        } else {\n            current += 2; // Next odd number\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/150", "generation": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true; // 2 is the only even prime number\n    if (n % 2 == 0) return false; // other even numbers are not prime\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nint x_or_y(int n, int x, int y) {\n    if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n\n"}
{"task_id": "CPP/153", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cctype>\n\nusing namespace std;\n\nstring Strongest_Extension(string class_name, vector<string> extensions) {\n    string strongest_extension = \"\";\n    int max_strength = INT_MIN;\n\n    for (const string& ext : extensions) {\n        int CAP = 0;\n        int SM = 0;\n\n        // Calculate CAP and SM for the current extension\n        for (char c : ext) {\n            if (isupper(c)) {\n                CAP++;\n            } else if (islower(c)) {\n                SM++;\n            }\n        }\n\n        // Calculate the strength of the current extension\n        int strength = CAP - SM;\n\n        // Update the strongest extension if the current one is stronger\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest_extension = ext;\n        }\n    }\n\n    // Return the result in the required format\n    return class_name + \".\" + strongest_extension;\n}\n\n"}
{"task_id": "CPP/107", "generation": "#include <vector>\n#include <string>\nusing namespace std;\n\nbool isPalindrome(int num) {\n    string str = to_string(num);\n    int len = str.length();\n    for (int i = 0; i < len / 2; ++i) {\n        if (str[i] != str[len - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvector<int> even_odd_palindrome(int n) {\n    int evenCount = 0;\n    int oddCount = 0;\n    \n    for (int i = 1; i <= n; ++i) {\n        if (isPalindrome(i)) {\n            if (i % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n    \n    return {evenCount, oddCount};\n}\n"}
{"task_id": "CPP/110", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nstring exchange(vector<int> lst1, vector<int> lst2) {\n    int oddCount = 0;\n    int evenCount = 0;\n\n    // Count the number of odd elements in lst1\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            oddCount++;\n        }\n    }\n\n    // Count the number of even elements in lst2\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            evenCount++;\n        }\n    }\n\n    // If there are enough even elements in lst2 to replace all odd elements in lst1\n    if (evenCount >= oddCount) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\n// Example usage\n"}
{"task_id": "CPP/111", "generation": "#include <iostream>\n#include <string>\n#include <map>\n#include <climits>\n\nusing namespace std;\n\nmap<char, int> histogram(string test) {\n    map<char, int> frequencyMap;\n    map<char, int> resultMap;\n    int maxFrequency = 0;\n\n    // Step 1: Populate the frequency map\n    for (char c : test) {\n        if (c != ' ') { // Ignore spaces\n            frequencyMap[c]++;\n            if (frequencyMap[c] > maxFrequency) {\n                maxFrequency = frequencyMap[c];\n            }\n        }\n    }\n\n    // Step 2: Populate the result map with letters having the maximum frequency\n    for (const auto& pair : frequencyMap) {\n        if (pair.second == maxFrequency) {\n            resultMap[pair.first] = pair.second;\n        }\n    }\n\n    return resultMap;\n}\n\n"}
{"task_id": "CPP/80", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool is_happy(string s) {\n    // Check if the length of the string is less than 3\n    if (s.length() < 3) {\n        return false;\n    }\n\n    // Iterate through the string and check every 3 consecutive characters\n    for (int i = 0; i <= s.length() - 3; ++i) {\n        // Check if the 3 consecutive characters are distinct\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n\n    // If all 3 consecutive characters are distinct, return true\n    return true;\n}\n\n// Test cases\n"}
{"task_id": "CPP/41", "generation": "#include<stdio.h>\n\nint car_race_collision(int n) {\n    return n * n;\n}\n\n"}
{"task_id": "CPP/116", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nint count_ones_in_binary(int num) {\n    int count = 0;\n    while (num != 0) {\n        count += num & 1;\n        num >>= 1;\n    }\n    return count;\n}\n\nvector<int> sort_array(vector<int> arr) {\n    sort(arr.begin(), arr.end(), [](int a, int b) {\n        int count_a = count_ones_in_binary(a);\n        int count_b = count_ones_in_binary(b);\n        if (count_a == count_b) {\n            return a < b;\n        }\n        return count_a < count_b;\n    });\n    return arr;\n}\n"}
{"task_id": "CPP/61", "generation": "#include <iostream>\n#include <stack>\n#include <string>\nusing namespace std;\n\nbool correct_bracketing(string brackets) {\n    stack<char> s;\n    \n    for (char bracket : brackets) {\n        if (bracket == '(') {\n            s.push(bracket);\n        } else if (bracket == ')') {\n            if (s.empty() || s.top() != '(') {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    \n    return s.empty();\n}\n\n"}
{"task_id": "CPP/25", "generation": "#include <vector>\n#include <iostream>\nusing namespace std;\n\nvector<int> factorize(int n) {\n    vector<int> factors;\n    // Start with the smallest prime number\n    int divisor = 2;\n    while (n > 1) {\n        while (n % divisor == 0) {\n            factors.push_back(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n\n"}
{"task_id": "CPP/137", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <boost/any.hpp>\n#include <boost/lexical_cast.hpp>\n\nusing namespace std;\n\nboost::any compare_one(boost::any a, boost::any b) {\n    auto to_float = [](const boost::any& value) -> float {\n        try {\n            if (value.type() == typeid(std::string)) {\n                std::string str = boost::any_cast<std::string>(value);\n                std::replace(str.begin(), str.end(), ',', '.');\n                return boost::lexical_cast<float>(str);\n            } else if (value.type() == typeid(int)) {\n                return static_cast<float>(boost::any_cast<int>(value));\n            } else if (value.type() == typeid(float)) {\n                return boost::any_cast<float>(value);\n            }\n        } catch (const boost::bad_lexical_cast&) {\n            throw std::invalid_argument(\"Invalid input\");\n        }\n        throw std::invalid_argument(\"Unsupported type\");\n    };\n\n    try {\n        float a_float = to_float(a);\n        float b_float = to_float(b);\n\n        if (a_float > b_float) {\n            return a;\n        } else if (b_float > a_float) {\n            return b;\n        } else {\n            return std::string(\"None\");\n        }\n    } catch (const std::invalid_argument&) {\n        return std::string(\"None\");\n    }\n}\n\n"}
{"task_id": "CPP/102", "generation": "#include<stdio.h>\n\nint choose_num(int x, int y) {\n    // Ensure x is less than or equal to y\n    if (x > y) {\n        return -1;\n    }\n\n    // Start from the largest number in the range and move downwards\n    for (int i = y; i >= x; --i) {\n        // Check if the current number is even\n        if (i % 2 == 0) {\n            return i;\n        }\n    }\n\n    // If no even number is found, return -1\n    return -1;\n}\n\n"}
{"task_id": "CPP/10", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nbool is_palindrome(const string& str) {\n    // Test if given string is a palindrome\n    string s(str.rbegin(), str.rend());\n    return s == str;\n}\n\nstring make_palindrome(const string& str) {\n    // Find the shortest palindrome that begins with a supplied string\n    for (size_t i = 0; i < str.size(); ++i) {\n        // Check if the suffix from i to the end is a palindrome\n        if (is_palindrome(str.substr(i))) {\n            // If it is, append the reverse of the prefix (0 to i-1) to the end\n            string prefix = str.substr(0, i);\n            reverse(prefix.begin(), prefix.end());\n            return str + prefix;\n        }\n    }\n    // If no palindromic suffix is found, append the reverse of the entire string\n    string reversed_str(str.rbegin(), str.rend());\n    return str + reversed_str;\n}\n\n"}
{"task_id": "CPP/76", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n\nbool is_simple_power(int x, int n) {\n    if (n == 1) {\n        return x == 1;\n    }\n    int power = 1;\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}\n"}
{"task_id": "CPP/94", "generation": "#include <iostream>\n#include <vector>\n#include <cmath>\nusing namespace std;\n\n// Function to check if a number is prime\nbool isPrime(int num) {\n    if (num <= 1) return false;\n    if (num == 2) return true;\n    if (num % 2 == 0) return false;\n    for (int i = 3; i <= sqrt(num); i += 2) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\n// Function to sum the digits of a number\nint sumOfDigits(int num) {\n    int sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}\n\nint skjkasdkd(vector<int> lst) {\n    int largestPrime = -1;\n    \n    // Find the largest prime in the list\n    for (int num : lst) {\n        if (isPrime(num) && num > largestPrime) {\n            largestPrime = num;\n        }\n    }\n    \n    // If no prime was found, return 0\n    if (largestPrime == -1) return 0;\n    \n    // Sum the digits of the largest prime\n    return sumOfDigits(largestPrime);\n}\n\n"}
{"task_id": "CPP/32", "generation": "#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n\ndouble poly(vector<double> xs, double x) {\n    /* \n    Evaluates polynomial with coefficients xs at point x. \n    return xs[0] + xs[1] * x + xs[2] * x^2 + .... xs[n] * x^n \n    */\n    double sum = 0;\n    for (int i = 0; i < xs.size(); i++) {\n        sum += xs[i] * pow(x, i);\n    }\n    return sum;\n}\n\nvector<double> poly_derivative(vector<double> xs) {\n    /* \n    Computes the derivative of the polynomial with coefficients xs. \n    */\n    vector<double> derivative;\n    for (int i = 1; i < xs.size(); i++) {\n        derivative.push_back(i * xs[i]);\n    }\n    return derivative;\n}\n\ndouble find_zero(vector<double> xs) {\n    /*\n    xs are coefficients of a polynomial. find_zero finds x such that poly(x) = 0. \n    find_zero returns only one zero point, even if there are many. \n    Moreover, find_zero only takes list xs having even number of coefficients and \n    largest non zero coefficient as it guarantees a solution.\n    */\n    double x0 = 0.0; // Initial guess\n    double tolerance = 1e-6; // Tolerance for convergence\n    int max_iterations = 1000; // Maximum number of iterations\n\n    vector<double> derivative_xs = poly_derivative(xs);\n\n    for (int i = 0; i < max_iterations; i++) {\n        double fx = poly(xs, x0);\n        double dfx = poly(derivative_xs, x0);\n\n        if (fabs(fx) < tolerance) {\n            return x0; // Converged to a root\n        }\n\n        if (dfx == 0) {\n            // Avoid division by zero\n            x0 += 1.0; // Adjust initial guess\n            continue;\n        }\n\n        x0 = x0 - fx / dfx; // Newton-Raphson update\n    }\n\n    return x0; // Return the best guess after max iterations\n}\n\n"}
{"task_id": "CPP/33", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> sort_third(vector<int> l) {\n    // Extract elements at indices divisible by 3\n    vector<int> to_sort;\n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 3 == 0) {\n            to_sort.push_back(l[i]);\n        }\n    }\n    \n    // Sort the extracted elements\n    sort(to_sort.begin(), to_sort.end());\n    \n    // Create a new list with sorted elements at indices divisible by 3\n    vector<int> result = l;\n    size_t index = 0;\n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 3 == 0) {\n            result[i] = to_sort[index++];\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/88", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> sort_array(vector<int> array) {\n    if (array.empty()) {\n        return array;\n    }\n\n    int first_value = array.front();\n    int last_value = array.back();\n    int sum = first_value + last_value;\n\n    vector<int> sorted_array = array; // Create a copy of the original array\n\n    if (sum % 2 == 0) {\n        // Sort in descending order if the sum is even\n        sort(sorted_array.begin(), sorted_array.end(), greater<int>());\n    } else {\n        // Sort in ascending order if the sum is odd\n        sort(sorted_array.begin(), sorted_array.end());\n    }\n\n    return sorted_array;\n}\n"}
{"task_id": "CPP/15", "generation": "#include <string>\n#include <sstream>\n\nusing namespace std;\n\nstring string_sequence(int n) {\n    // Create a stringstream to build the result\n    stringstream result;\n    \n    // Loop from 0 to n inclusive\n    for (int i = 0; i <= n; ++i) {\n        // Append the number followed by a space\n        result << i << \" \";\n    }\n    \n    // Convert the stringstream to a string\n    string result_str = result.str();\n    \n    // Remove the trailing space if it exists\n    if (!result_str.empty() && result_str.back() == ' ') {\n        result_str.pop_back();\n    }\n    \n    // Return the resulting string\n    return result_str;\n}\n"}
{"task_id": "CPP/163", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> generate_integers(int a, int b) {\n    // Ensure a is less than or equal to b\n    if (a > b) {\n        swap(a, b);\n    }\n\n    vector<int> result;\n\n    // Define the even digits\n    int even_digits[] = {0, 2, 4, 6, 8};\n\n    // Check each even digit to see if it falls within the range [a, b]\n    for (int digit : even_digits) {\n        if (digit >= a && digit <= b) {\n            result.push_back(digit);\n        }\n    }\n\n    // Sort the result in ascending order (though it should already be sorted)\n    sort(result.begin(), result.end());\n\n    return result;\n}\n\n"}
{"task_id": "CPP/1", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> separate_paren_groups(string paren_string) {\n    vector<string> result;\n    int balance = 0;\n    string current_group = \"\";\n    \n    // Remove all spaces from the input string\n    paren_string.erase(remove(paren_string.begin(), paren_string.end(), ' '), paren_string.end());\n    \n    for (char char_ : paren_string) {\n        current_group += char_;\n        if (char_ == '(') {\n            balance += 1;\n        } else if (char_ == ')') {\n            balance -= 1;\n            if (balance == 0) {\n                result.push_back(current_group);\n                current_group = \"\";\n            }\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/69", "generation": "#include <vector>\n#include <unordered_map>\n#include <algorithm>\nusing namespace std;\n\nint search(vector<int> lst) {\n    // Step 1: Count the frequency of each integer\n    unordered_map<int, int> frequencyMap;\n    for (int num : lst) {\n        frequencyMap[num]++;\n    }\n\n    // Step 2: Find the greatest integer that meets the criteria\n    int maxValidInteger = -1;\n    for (const auto& pair : frequencyMap) {\n        int num = pair.first;\n        int freq = pair.second;\n        if (freq >= num) {\n            if (num > maxValidInteger) {\n                maxValidInteger = num;\n            }\n        }\n    }\n\n    // Step 3: Return the result\n    return maxValidInteger;\n}\n\n// Example usage\n"}
{"task_id": "CPP/31", "generation": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nbool is_prime(long long n) {\n    // Handle edge cases\n    if (n <= 1) return false;\n    if (n == 2 || n == 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\n    // Check for factors from 5 to sqrt(n)\n    for (long long i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n\n    return true;\n}\n\n"}
{"task_id": "CPP/147", "generation": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint get_max_triples(int n) {\n    // Step 1: Generate the vector a\n    vector<int> a(n);\n    for (int i = 0; i < n; ++i) {\n        a[i] = (i + 1) * (i + 1) - (i + 1) + 1;\n    }\n\n    // Step 2: Count the number of valid triples\n    int count = 0;\n    for (int i = 0; i < n - 2; ++i) {\n        for (int j = i + 1; j < n - 1; ++j) {\n            for (int k = j + 1; k < n; ++k) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}\n\n"}
{"task_id": "CPP/105", "generation": "#include <vector>\n#include <string>\n#include <map>\n#include <algorithm>\nusing namespace std;\n\nvector<string> by_length(vector<int> arr) {\n    // Step 1: Filter and sort the integers between 1 and 9\n    vector<int> filtered;\n    for (int num : arr) {\n        if (num >= 1 && num <= 9) {\n            filtered.push_back(num);\n        }\n    }\n    sort(filtered.begin(), filtered.end());\n\n    // Step 2: Reverse the sorted vector\n    reverse(filtered.begin(), filtered.end());\n\n    // Step 3: Replace each digit with its corresponding name\n    map<int, string> digitToName = {\n        {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"},\n        {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}\n    };\n\n    vector<string> result;\n    for (int num : filtered) {\n        result.push_back(digitToName[num]);\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/22", "generation": "#include <iostream>\n#include <vector>\n#include <list>\n#include <boost/any.hpp>\n\ntypedef std::list<boost::any> list_any;\n\nstd::vector<int> filter_integers(list_any values) {\n    std::vector<int> result;\n    for (const auto& value : values) {\n        if (value.type() == typeid(int)) {\n            result.push_back(boost::any_cast<int>(value));\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/52", "generation": "#include <vector>\nusing namespace std;\n\nbool below_threshold(vector<int> l, int t) {\n    for (int num : l) {\n        if (num >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Example usage\n#include <iostream>\n\n"}
{"task_id": "CPP/154", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool cycpattern_check(string a, string b) {\n    int n = b.length();\n    if (n == 0) return true; // An empty string is always a substring\n\n    // Concatenate b with itself to handle cyclic rotations\n    string b_rotated = b + b;\n\n    // Check if any rotation of b is a substring of a\n    for (int i = 0; i < n; ++i) {\n        string rotation = b_rotated.substr(i, n);\n        if (a.find(rotation) != string::npos) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n"}
{"task_id": "CPP/115", "generation": "#include<stdio.h>\n#include<vector>\n#include<cmath> // for ceil function\nusing namespace std;\n\nint max_fill(vector<vector<int>> grid, int capacity) {\n    int total_lowers = 0;\n    \n    for (const auto& row : grid) {\n        int water_units = 0;\n        for (int unit : row) {\n            if (unit == 1) {\n                water_units++;\n            }\n        }\n        // Calculate the number of times the bucket needs to be lowered\n        total_lowers += ceil((double)water_units / capacity);\n    }\n    \n    return total_lowers;\n}\n\n// Example usage\n"}
{"task_id": "CPP/131", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint digits(int n) {\n    // Convert the integer to a string\n    string numStr = to_string(n);\n    \n    // Initialize the product to 1 (multiplicative identity)\n    int product = 1;\n    \n    // Flag to check if any odd digit is found\n    bool hasOdd = false;\n    \n    // Iterate through each character in the string\n    for (char ch : numStr) {\n        // Convert the character to an integer\n        int digit = ch - '0';\n        \n        // Check if the digit is odd\n        if (digit % 2 != 0) {\n            // Multiply the product by the odd digit\n            product *= digit;\n            hasOdd = true;\n        }\n    }\n    \n    // If no odd digit was found, return 0\n    if (!hasOdd) {\n        return 0;\n    }\n    \n    // Return the product of the odd digits\n    return product;\n}\n\n"}
{"task_id": "CPP/37", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<float> sort_even(vector<float> l) {\n    // Extract even-indexed values\n    vector<float> even_values;\n    for (size_t i = 0; i < l.size(); i += 2) {\n        even_values.push_back(l[i]);\n    }\n\n    // Sort the even-indexed values\n    sort(even_values.begin(), even_values.end());\n\n    // Reconstruct the output vector\n    vector<float> result;\n    size_t even_index = 0;\n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 2 == 0) {\n            result.push_back(even_values[even_index++]);\n        } else {\n            result.push_back(l[i]);\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/92", "generation": "#include<stdio.h>\n#include<math.h>\n\nbool any_int(float a, float b, float c) {\n    // Check if all numbers are integers\n    if (floor(a) == a && floor(b) == b && floor(c) == c) {\n        // Convert floats to integers\n        int int_a = (int)a;\n        int int_b = (int)b;\n        int int_c = (int)c;\n        \n        // Check if one of the numbers is equal to the sum of the other two\n        if (int_a == int_b + int_c || int_b == int_a + int_c || int_c == int_a + int_b) {\n            return true;\n        }\n    }\n    return false;\n}\n\n"}
{"task_id": "CPP/118", "generation": "#include<iostream>\n#include<string>\n#include<unordered_set>\nusing namespace std;\n\nstring get_closest_vowel(string word) {\n    // Define the set of vowels (case sensitive)\n    unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    \n    // Traverse the word from right to left\n    for (int i = word.size() - 1; i > 0; --i) {\n        // Check if the current character is a vowel\n        if (vowels.find(word[i]) != vowels.end()) {\n            // Check if it is surrounded by consonants\n            bool left_consonant = false, right_consonant = false;\n            \n            // Check the character to the left\n            if (i > 0 && vowels.find(word[i-1]) == vowels.end()) {\n                left_consonant = true;\n            }\n            \n            // Check the character to the right\n            if (i < word.size() - 1 && vowels.find(word[i+1]) == vowels.end()) {\n                right_consonant = true;\n            }\n            \n            // If both conditions are met, return the vowel\n            if (left_consonant && right_consonant) {\n                return string(1, word[i]);\n            }\n        }\n    }\n    \n    // If no such vowel is found, return an empty string\n    return \"\";\n}\n\n"}
{"task_id": "CPP/6", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<int> parse_nested_parens(string paren_string) {\n    vector<int> result;\n    stringstream ss(paren_string);\n    string group;\n    \n    while (ss >> group) {\n        int max_depth = 0;\n        int current_depth = 0;\n        \n        for (char c : group) {\n            if (c == '(') {\n                current_depth++;\n                if (current_depth > max_depth) {\n                    max_depth = current_depth;\n                }\n            } else if (c == ')') {\n                current_depth--;\n            }\n        }\n        \n        result.push_back(max_depth);\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/87", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<vector<int>> get_row(vector<vector<int>> lst, int x) {\n    vector<vector<int>> coordinates;\n    \n    // Traverse the 2D vector to find occurrences of x\n    for (int i = 0; i < lst.size(); ++i) {\n        for (int j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                coordinates.push_back({i, j});\n            }\n        }\n    }\n    \n    // Sort coordinates by rows in ascending order\n    // For coordinates within the same row, sort by columns in descending order\n    sort(coordinates.begin(), coordinates.end(), [](const vector<int>& a, const vector<int>& b) {\n        if (a[0] == b[0]) {\n            return a[1] > b[1];\n        }\n        return a[0] < b[0];\n    });\n    \n    return coordinates;\n}\n\n// Example usage\n"}
{"task_id": "CPP/2", "generation": "#include <iostream>\n#include <cmath>\n\nfloat truncate_number(float number) {\n    // Get the integer part of the number\n    float integer_part = floor(number);\n    \n    // Subtract the integer part from the original number to get the decimal part\n    float decimal_part = number - integer_part;\n    \n    return decimal_part;\n}\n\n"}
{"task_id": "CPP/16", "generation": "#include <iostream>\n#include <string>\n#include <unordered_set>\n#include <algorithm>\n\nusing namespace std;\n\nint count_distinct_characters(string str) {\n    // Convert the string to lowercase\n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    \n    // Use an unordered_set to store distinct characters\n    unordered_set<char> distinct_chars;\n    \n    // Iterate through the string and add each character to the set\n    for (char c : str) {\n        distinct_chars.insert(c);\n    }\n    \n    // The size of the set is the number of distinct characters\n    return distinct_chars.size();\n}\n\n"}
{"task_id": "CPP/135", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nint can_arrange(vector<int> arr) {\n    int max_index = -1;\n    for (int i = 1; i < arr.size(); ++i) {\n        if (arr[i] < arr[i - 1]) {\n            max_index = i;\n        }\n    }\n    return max_index;\n}\n\n"}
{"task_id": "CPP/106", "generation": "#include <vector>\nusing namespace std;\n\nvector<int> f(int n) {\n    vector<int> result(n);\n    \n    for (int i = 1; i <= n; ++i) {\n        if (i % 2 == 0) {\n            // Compute factorial of i\n            int factorial = 1;\n            for (int j = 1; j <= i; ++j) {\n                factorial *= j;\n            }\n            result[i-1] = factorial;\n        } else {\n            // Compute sum of numbers from 1 to i\n            int sum = 0;\n            for (int j = 1; j <= i; ++j) {\n                sum += j;\n            }\n            result[i-1] = sum;\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/162", "generation": "#include <stdio.h>\n#include <string>\n#include <openssl/md5.h>\nusing namespace std;\n\nstring string_to_md5(string text) {\n    if (text.empty()) {\n        return \"\";\n    }\n\n    unsigned char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.size(), result);\n\n    string md5_hash;\n    char buf[3];\n    for (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n        sprintf(buf, \"%02x\", result[i]);\n        md5_hash += buf;\n    }\n\n    return md5_hash;\n}\n"}
{"task_id": "CPP/5", "generation": "#include <vector>\n#include <iostream>\n\nusing namespace std;\n\nvector<int> intersperse(vector<int> numbers, int delimeter) {\n    // Check if the input vector is empty\n    if (numbers.empty()) {\n        return {};\n    }\n\n    // Create a new vector to store the result\n    vector<int> result;\n\n    // Iterate through the input vector\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        // Add the current element to the result\n        result.push_back(numbers[i]);\n\n        // If it's not the last element, add the delimiter\n        if (i < numbers.size() - 1) {\n            result.push_back(delimeter);\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/97", "generation": "#include<stdio.h>\n\nint multiply(int a, int b) {\n    // Extract the unit digits\n    int unit_digit_a = abs(a) % 10;\n    int unit_digit_b = abs(b) % 10;\n    \n    // Multiply the unit digits\n    int result = unit_digit_a * unit_digit_b;\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/44", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nstring change_base(int x, int base) {\n    if (x == 0) return \"0\"; // Special case for zero\n\n    string result = \"\";\n    while (x > 0) {\n        int remainder = x % base;\n        result += to_string(remainder); // Append the remainder to the result string\n        x /= base;\n    }\n\n    // Since we appended the remainders in reverse order, we need to reverse the string\n    reverse(result.begin(), result.end());\n\n    return result;\n}\n\n"}
{"task_id": "CPP/161", "generation": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring solve(string s) {\n    bool containsLetter = false;\n    \n    // First pass: check if the string contains any letters and reverse case if necessary\n    for (int i = 0; i < s.length(); ++i) {\n        if (isalpha(s[i])) {\n            containsLetter = true;\n            if (islower(s[i])) {\n                s[i] = toupper(s[i]);\n            } else {\n                s[i] = tolower(s[i]);\n            }\n        }\n    }\n    \n    // If the string contains no letters, reverse the entire string\n    if (!containsLetter) {\n        string reversed = \"\";\n        for (int i = s.length() - 1; i >= 0; --i) {\n            reversed += s[i];\n        }\n        return reversed;\n    }\n    \n    return s;\n}\n\n"}
{"task_id": "CPP/38", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring encode_cyclic(string s) {\n    int l = s.length();\n    int num = (l + 2) / 3;\n    string output;\n    for (int i = 0; i * 3 < l; i++) {\n        string x = s.substr(i * 3, 3);\n        if (x.length() == 3) {\n            x = x.substr(1) + x[0];\n        }\n        output += x;\n    }\n    return output;\n}\n\nstring decode_cyclic(string s) {\n    int l = s.length();\n    int num = (l + 2) / 3;\n    string output;\n    for (int i = 0; i * 3 < l; i++) {\n        string x = s.substr(i * 3, 3);\n        if (x.length() == 3) {\n            x = x[2] + x.substr(0, 2);\n        }\n        output += x;\n    }\n    return output;\n}\n"}
{"task_id": "CPP/93", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nstring encode(string message) {\n    string encodedMessage = \"\";\n    for (char &c : message) {\n        // Swap the case of the letter\n        if (islower(c)) {\n            c = toupper(c);\n        } else if (isupper(c)) {\n            c = tolower(c);\n        }\n\n        // Replace vowels with the letter that appears 2 places ahead\n        if (c == 'a' || c == 'A') {\n            c = (c == 'a') ? 'c' : 'C';\n        } else if (c == 'e' || c == 'E') {\n            c = (c == 'e') ? 'g' : 'G';\n        } else if (c == 'i' || c == 'I') {\n            c = (c == 'i') ? 'k' : 'K';\n        } else if (c == 'o' || c == 'O') {\n            c = (c == 'o') ? 'q' : 'Q';\n        } else if (c == 'u' || c == 'U') {\n            c = (c == 'u') ? 'w' : 'W';\n        }\n\n        encodedMessage += c;\n    }\n    return encodedMessage;\n}\n\n// Example usage\n"}
{"task_id": "CPP/152", "generation": "#include <vector>\n#include <cmath> // for std::abs\n\nusing namespace std;\n\nvector<int> compare(vector<int> game, vector<int> guess) {\n    vector<int> result;\n    for (size_t i = 0; i < game.size(); ++i) {\n        if (game[i] == guess[i]) {\n            result.push_back(0);\n        } else {\n            result.push_back(std::abs(game[i] - guess[i]));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/62", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<float> derivative(vector<float> xs) {\n    vector<float> result;\n    for (size_t i = 1; i < xs.size(); ++i) {\n        result.push_back(i * xs[i]);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/7", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm> // for std::find\n\nusing namespace std;\n\nvector<string> filter_by_substring(vector<string> strings, string substring) {\n    vector<string> result;\n    \n    for (const string& str : strings) {\n        if (str.find(substring) != string::npos) {\n            result.push_back(str);\n        }\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/24", "generation": "#include<iostream>\nusing namespace std;\n\nint largest_divisor(int n) {\n    // Start from n-1 and go down to 1\n    for (int i = n - 1; i > 0; --i) {\n        // Check if i divides n evenly\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    // If no divisor is found, return 1 (though this case should never occur for positive n)\n    return 1;\n}\n\n"}
{"task_id": "CPP/79", "generation": "#include <iostream>\n#include <string>\n#include <algorithm> // for std::reverse\n\nusing namespace std;\n\nstring decimal_to_binary(int decimal) {\n    if (decimal == 0) {\n        return \"db0db\";\n    }\n\n    string binary;\n    \n    while (decimal > 0) {\n        binary += (decimal % 2 == 0) ? '0' : '1';\n        decimal /= 2;\n    }\n    \n    // Reverse the string to get the correct binary representation\n    reverse(binary.begin(), binary.end());\n    \n    // Add the \"db\" characters at the beginning and end\n    binary = \"db\" + binary + \"db\";\n    \n    return binary;\n}\n\n"}
{"task_id": "CPP/155", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n\nvector<int> even_odd_count(int num) {\n    // Convert the number to its absolute value to handle negative numbers\n    num = abs(num);\n    int even_count = 0;\n    int odd_count = 0;\n    \n    // Iterate through each digit of the number\n    while (num > 0) {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n        num /= 10;\n    }\n    \n    // Return the result as a vector\n    return {even_count, odd_count};\n}\n"}
{"task_id": "CPP/4", "generation": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <numeric> // For std::accumulate\n\nusing namespace std;\n\nfloat mean_absolute_deviation(const vector<float>& numbers) {\n    if (numbers.empty()) {\n        return 0.0; // Return 0 if the vector is empty to avoid division by zero\n    }\n\n    // Step 1: Calculate the mean of the dataset\n    float sum = accumulate(numbers.begin(), numbers.end(), 0.0);\n    float mean = sum / numbers.size();\n\n    // Step 2: Compute the absolute difference between each element and the mean\n    float absolute_deviations_sum = 0.0;\n    for (float number : numbers) {\n        absolute_deviations_sum += fabs(number - mean);\n    }\n\n    // Step 3: Divide the sum of absolute deviations by the number of elements\n    float mad = absolute_deviations_sum / numbers.size();\n\n    return mad;\n}\n\n"}
{"task_id": "CPP/56", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool correct_bracketing(string brackets) {\n    int count = 0;\n    for (char bracket : brackets) {\n        if (bracket == '<') {\n            count++;\n        } else if (bracket == '>') {\n            count--;\n        }\n        // If count goes negative, it means there are unmatched closing brackets\n        if (count < 0) {\n            return false;\n        }\n    }\n    // If count is zero, all brackets are matched\n    return count == 0;\n}\n\n"}
{"task_id": "CPP/159", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<int> eat(int number, int need, int remaining) {\n    int total_eaten = number + min(need, remaining);\n    int remaining_after_eating = max(0, remaining - need);\n    return {total_eaten, remaining_after_eating};\n}\n"}
{"task_id": "CPP/83", "generation": "#include<stdio.h>\n#include<cmath>\n\nint starts_one_ends(int n) {\n    if (n == 1) {\n        return 1;  // There is only one 1-digit number, which is 1 itself.\n    }\n    // For n-digit numbers, the count of numbers that start or end with 1 is:\n    // 2 * (10^(n-1) - 10^(n-2))\n    return 2 * (std::pow(10, n-1) - std::pow(10, n-2));\n}\n"}
{"task_id": "CPP/27", "generation": "#include <iostream>\n#include <string>\n#include <cctype> // for isupper and islower\n\nusing namespace std;\n\nstring flip_case(string str) {\n    for (char &c : str) {\n        if (isupper(c)) {\n            c = tolower(c);\n        } else if (islower(c)) {\n            c = toupper(c);\n        }\n    }\n    return str;\n}\n\n"}
{"task_id": "CPP/146", "generation": "#include <vector>\n#include <string>\n#include <cmath>\nusing namespace std;\n\nint specialFilter(vector<int> nums) {\n    int count = 0;\n    \n    for (int num : nums) {\n        // Check if the number is greater than 10\n        if (num > 10) {\n            // Convert the number to a string to easily access the first and last digits\n            string numStr = to_string(abs(num));\n            \n            // Extract the first and last digits\n            int firstDigit = numStr[0] - '0';\n            int lastDigit = numStr[numStr.size() - 1] - '0';\n            \n            // Check if both digits are odd\n            if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    \n    return count;\n}\n\n// Example usage\n"}
{"task_id": "CPP/81", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> numerical_letter_grade(vector<float> grades) {\n    vector<string> letter_grades;\n    for (float gpa : grades) {\n        if (gpa == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (gpa > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (gpa > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (gpa > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (gpa > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (gpa > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (gpa > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (gpa > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (gpa > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (gpa > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (gpa > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (gpa > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n}\n"}
{"task_id": "CPP/136", "generation": "#include <vector>\n#include <limits.h> // For INT_MAX and INT_MIN\n\nusing namespace std;\n\nvector<int> largest_smallest_integers(vector<int> lst) {\n    int largest_negative = INT_MIN; // Initialize to the smallest possible integer\n    int smallest_positive = INT_MAX; // Initialize to the largest possible integer\n    bool has_negative = false;\n    bool has_positive = false;\n\n    for (int num : lst) {\n        if (num < 0) {\n            has_negative = true;\n            if (num > largest_negative) {\n                largest_negative = num;\n            }\n        } else if (num > 0) {\n            has_positive = true;\n            if (num < smallest_positive) {\n                smallest_positive = num;\n            }\n        }\n    }\n\n    // If no negative number was found, set largest_negative to 0\n    if (!has_negative) {\n        largest_negative = 0;\n    }\n\n    // If no positive number was found, set smallest_positive to 0\n    if (!has_positive) {\n        smallest_positive = 0;\n    }\n\n    return {largest_negative, smallest_positive};\n}\n\n// Example usage\n"}
{"task_id": "CPP/67", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nint fruit_distribution(string s, int n) {\n    // Initialize variables to store the number of apples and oranges\n    int apples = 0, oranges = 0;\n    \n    // Use stringstream to parse the input string\n    stringstream ss(s);\n    string word;\n    \n    // Read the first number (number of apples)\n    ss >> apples;\n    \n    // Skip the word \"apples\"\n    ss >> word;\n    \n    // Skip the word \"and\"\n    ss >> word;\n    \n    // Read the second number (number of oranges)\n    ss >> oranges;\n    \n    // Calculate the number of mangoes\n    int mangoes = n - apples - oranges;\n    \n    return mangoes;\n}\n\n"}
{"task_id": "CPP/48", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool is_palindrome(const string& text) {\n    int n = text.length();\n    for (int i = 0; i < n / 2; ++i) {\n        if (text[i] != text[n - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/125", "generation": "#include <vector>\n#include <string>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> split_words(string txt) {\n    // Check for whitespace\n    if (txt.find(' ') != string::npos) {\n        vector<string> result;\n        stringstream ss(txt);\n        string word;\n        while (ss >> word) {\n            result.push_back(word);\n        }\n        return result;\n    }\n    \n    // Check for commas\n    if (txt.find(',') != string::npos) {\n        vector<string> result;\n        stringstream ss(txt);\n        string word;\n        while (getline(ss, word, ',')) {\n            result.push_back(word);\n        }\n        return result;\n    }\n    \n    // Count odd-indexed lowercase letters\n    int count = 0;\n    for (char c : txt) {\n        if (islower(c)) {\n            int index = c - 'a';\n            if (index % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    \n    return {to_string(count)};\n}\n"}
{"task_id": "CPP/160", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\n\nint do_algebra(vector<string> operators, vector<int> operands) {\n    // Initialize the result with the first operand\n    int result = operands[0];\n    \n    // Iterate through the operators and operands to build the expression\n    for (size_t i = 0; i < operators.size(); ++i) {\n        string op = operators[i];\n        int operand = operands[i + 1];\n        \n        // Perform the operation based on the operator\n        if (op == \"+\") {\n            result += operand;\n        } else if (op == \"-\") {\n            result -= operand;\n        } else if (op == \"*\") {\n            result *= operand;\n        } else if (op == \"//\") {\n            result /= operand; // Floor division in C++ is equivalent to integer division\n        } else if (op == \"**\") {\n            result = pow(result, operand);\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/151", "generation": "#include <vector>\n#include <cmath>\nusing namespace std;\n\nlong long double_the_difference(vector<float> lst) {\n    long long sum = 0;\n    \n    for (float num : lst) {\n        // Check if the number is an integer and positive\n        if (floor(num) == num && num > 0) {\n            int int_num = static_cast<int>(num);\n            // Check if the number is odd\n            if (int_num % 2 != 0) {\n                sum += int_num * int_num;\n            }\n        }\n    }\n    \n    return sum;\n}\n"}
{"task_id": "CPP/117", "generation": "#include <vector>\n#include <string>\n#include <sstream>\n#include <unordered_set>\n\nusing namespace std;\n\nvector<string> select_words(string s, int n) {\n    // Define a set of vowels for quick lookup\n    unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    \n    // Result vector to store words with exactly n consonants\n    vector<string> result;\n    \n    // Stringstream to split the input string into words\n    stringstream ss(s);\n    string word;\n    \n    // Iterate through each word in the string\n    while (ss >> word) {\n        int consonant_count = 0;\n        \n        // Count consonants in the current word\n        for (char c : word) {\n            if (isalpha(c) && vowels.find(c) == vowels.end()) {\n                consonant_count++;\n            }\n        }\n        \n        // If the word has exactly n consonants, add it to the result\n        if (consonant_count == n) {\n            result.push_back(word);\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/78", "generation": "#include <iostream>\n#include <string>\n#include <unordered_set>\nusing namespace std;\n\nint hex_key(string num) {\n    // Define the set of prime hexadecimal digits\n    unordered_set<char> prime_digits = {'2', '3', '5', '7', 'B', 'D'};\n    \n    // Initialize the count of prime digits\n    int count = 0;\n    \n    // Iterate through the input string\n    for (char c : num) {\n        // Check if the current character is in the set of prime digits\n        if (prime_digits.find(c) != prime_digits.end()) {\n            count++;\n        }\n    }\n    \n    // Return the count of prime digits\n    return count;\n}\n\n// Test cases\n"}
{"task_id": "CPP/74", "generation": "#include <vector>\n#include <string>\n#include <numeric> // for accumulate\n\nusing namespace std;\n\nint totalChars(const vector<string>& vec) {\n    return accumulate(vec.begin(), vec.end(), 0, [](int sum, const string& str) {\n        return sum + str.size();\n    });\n}\n\nvector<string> total_match(vector<string> lst1, vector<string> lst2) {\n    int total1 = totalChars(lst1);\n    int total2 = totalChars(lst2);\n    \n    if (total1 <= total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n"}
{"task_id": "CPP/53", "generation": "#include <iostream>\n\nint add(int x, int y) {\n    return x + y;\n}\n\n"}
{"task_id": "CPP/98", "generation": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint count_upper(string s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) { // Iterate through even indices\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/140", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring fix_spaces(string text) {\n    string result = \"\";\n    int n = text.length();\n    int i = 0;\n\n    while (i < n) {\n        if (text[i] == ' ') {\n            int count = 0;\n            // Count consecutive spaces\n            while (i < n && text[i] == ' ') {\n                count++;\n                i++;\n            }\n            // Replace with underscore if only one space\n            if (count == 1) {\n                result += '_';\n            }\n            // Replace with hyphen if more than two spaces\n            else if (count > 2) {\n                result += '-';\n            }\n            // If exactly two spaces, add two underscores\n            else if (count == 2) {\n                result += \"__\";\n            }\n        } else {\n            // Add non-space characters to the result\n            result += text[i];\n            i++;\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/34", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> unique(vector<int> l) {\n    // Step 1: Sort the vector\n    sort(l.begin(), l.end());\n    \n    // Step 2: Use std::unique to remove consecutive duplicates\n    auto last = unique(l.begin(), l.end());\n    \n    // Step 3: Resize the vector to remove the extra elements\n    l.erase(last, l.end());\n    \n    return l;\n}\n\n// Example usage\n"}
{"task_id": "CPP/66", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint digitSum(string s) {\n    int sum = 0;\n    for (char c : s) {\n        if (c >= 'A' && c <= 'Z') {\n            sum += c;\n        }\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/120", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> maximum(vector<int> arr, int k) {\n    // Step 1: Sort the array in ascending order\n    sort(arr.begin(), arr.end());\n    \n    // Step 2: Extract the last k elements (which are the top k maximum elements)\n    vector<int> result(arr.end() - k, arr.end());\n    \n    // Step 3: The result is already sorted in ascending order\n    return result;\n}\n"}
{"task_id": "CPP/139", "generation": "#include <stdio.h>\n\n// Helper function to compute the factorial of a number\nlong long factorial(int n) {\n    long long result = 1;\n    for (int i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\n// Function to compute the Brazilian factorial\nlong long special_factorial(int n) {\n    long long result = 1;\n    for (int i = n; i >= 1; i--) {\n        result *= factorial(i);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/12", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring longest(vector<string> strings) {\n    // Check if the vector is empty\n    if (strings.empty()) {\n        return \"\"; // Return an empty string to represent None\n    }\n\n    // Initialize variables to keep track of the longest string\n    string longest_string = strings[0];\n\n    // Iterate through the vector to find the longest string\n    for (const string& str : strings) {\n        if (str.length() > longest_string.length()) {\n            longest_string = str;\n        }\n    }\n\n    return longest_string;\n}\n\n"}
{"task_id": "CPP/121", "generation": "#include <vector>\nusing namespace std;\n\nint solution(vector<int> lst) {\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/35", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm> // for std::max_element\n\nusing namespace std;\n\nfloat max_element(const vector<float>& l) {\n    // Check if the vector is empty\n    if (l.empty()) {\n        throw invalid_argument(\"Vector is empty\");\n    }\n    \n    // Use std::max_element to find the maximum element\n    return *max_element(l.begin(), l.end());\n}\n\n"}
{"task_id": "CPP/20", "generation": "#include <vector>\n#include <algorithm>\n#include <limits>\n\nusing namespace std;\n\nvector<float> find_closest_elements(vector<float> numbers) {\n    // Sort the vector to simplify finding the closest pairs\n    sort(numbers.begin(), numbers.end());\n    \n    // Initialize variables to track the minimum difference and the closest pair\n    float min_diff = numeric_limits<float>::infinity();\n    vector<float> closest_pair = {0, 0};\n    \n    // Iterate through the sorted vector to find the closest pair\n    for (size_t i = 0; i < numbers.size() - 1; ++i) {\n        float diff = numbers[i + 1] - numbers[i];\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = {numbers[i], numbers[i + 1]};\n        }\n    }\n    \n    return closest_pair;\n}\n"}
{"task_id": "CPP/19", "generation": "#include <iostream>\n#include <string>\n#include <vector>\n#include <map>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nstring sort_numbers(string numbers) {\n    // Step 1: Create a mapping from number words to their corresponding integer values\n    map<string, int> word_to_num = {\n        {\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3}, {\"four\", 4},\n        {\"five\", 5}, {\"six\", 6}, {\"seven\", 7}, {\"eight\", 8}, {\"nine\", 9}\n    };\n\n    // Step 2: Tokenize the input string into individual number words\n    vector<string> words;\n    stringstream ss(numbers);\n    string word;\n    while (ss >> word) {\n        words.push_back(word);\n    }\n\n    // Step 3: Convert words to numbers using the mapping\n    vector<int> nums;\n    for (const string& w : words) {\n        nums.push_back(word_to_num[w]);\n    }\n\n    // Step 4: Sort the list of integers\n    sort(nums.begin(), nums.end());\n\n    // Step 5: Convert the sorted integers back to their corresponding words\n    vector<string> sorted_words;\n    for (int num : nums) {\n        for (const auto& pair : word_to_num) {\n            if (pair.second == num) {\n                sorted_words.push_back(pair.first);\n                break;\n            }\n        }\n    }\n\n    // Step 6: Join the sorted words back into a single string with spaces\n    string result;\n    for (size_t i = 0; i < sorted_words.size(); ++i) {\n        result += sorted_words[i];\n        if (i < sorted_words.size() - 1) {\n            result += \" \";\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/85", "generation": "#include <vector>\nusing namespace std;\n\nint add(vector<int> lst) {\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 2 != 0 && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/21", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm> // for std::min_element and std::max_element\n\nusing namespace std;\n\nvector<float> rescale_to_unit(vector<float> numbers) {\n    // Find the minimum and maximum values in the vector\n    float min_val = *min_element(numbers.begin(), numbers.end());\n    float max_val = *max_element(numbers.begin(), numbers.end());\n    \n    // Apply the linear transformation to each element\n    vector<float> rescaled_numbers;\n    for (float num : numbers) {\n        float rescaled_num = (num - min_val) / (max_val - min_val);\n        rescaled_numbers.push_back(rescaled_num);\n    }\n    \n    return rescaled_numbers;\n}\n\n"}
{"task_id": "CPP/119", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nbool is_balanced(const string& s) {\n    int balance = 0;\n    for (char c : s) {\n        if (c == '(') {\n            balance++;\n        } else {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance == 0;\n}\n\nstring match_parens(vector<string> lst) {\n    string s1 = lst[0];\n    string s2 = lst[1];\n    if (is_balanced(s1 + s2) || is_balanced(s2 + s1)) {\n        return \"Yes\";\n    }\n    return \"No\";\n}\n"}
{"task_id": "CPP/30", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm> // for std::copy_if\n\nusing namespace std;\n\nvector<float> get_positive(const vector<float>& l) {\n    vector<float> positive_numbers;\n    for (float num : l) {\n        if (num > 0) {\n            positive_numbers.push_back(num);\n        }\n    }\n    return positive_numbers;\n}\n\n"}
{"task_id": "CPP/64", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nint vowels_count(string s) {\n    // Convert the string to lowercase to handle case insensitivity\n    transform(s.begin(), s.end(), s.begin(), ::tolower);\n    \n    int count = 0;\n    int length = s.length();\n    \n    // Check for vowels 'a', 'e', 'i', 'o', 'u'\n    for (int i = 0; i < length; i++) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n            count++;\n        }\n    }\n    \n    // Check if 'y' is at the end of the word\n    if (length > 0 && s[length - 1] == 'y') {\n        count++;\n    }\n    \n    return count;\n}\n\n// Example usage\n"}
{"task_id": "CPP/128", "generation": "#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n\nint prod_signs(vector<int> arr) {\n    // Handle the special case for an empty vector\n    if (arr.empty()) {\n        return -32768;\n    }\n\n    int product_of_signs = 1;\n    int sum_of_magnitudes = 0;\n\n    for (int num : arr) {\n        // Determine the sign of the number\n        int sign = (num > 0) ? 1 : (num < 0) ? -1 : 0;\n        // Update the product of signs\n        product_of_signs *= sign;\n        // Update the sum of magnitudes\n        sum_of_magnitudes += abs(num);\n    }\n\n    // Multiply the sum of magnitudes by the product of signs\n    return sum_of_magnitudes * product_of_signs;\n}\n\n// Example usage\n"}
{"task_id": "CPP/127", "generation": "#include <vector>\n#include <string>\n#include <cmath>\nusing namespace std;\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nstring intersection(vector<int> interval1, vector<int> interval2) {\n    int start1 = interval1[0], end1 = interval1[1];\n    int start2 = interval2[0], end2 = interval2[1];\n    \n    // Find the intersection of the two intervals\n    int intersection_start = max(start1, start2);\n    int intersection_end = min(end1, end2);\n    \n    // If the intervals do not intersect\n    if (intersection_start > intersection_end) {\n        return \"NO\";\n    }\n    \n    // Calculate the length of the intersection\n    int intersection_length = intersection_end - intersection_start + 1;\n    \n    // Check if the length is a prime number\n    if (is_prime(intersection_length)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n"}
{"task_id": "CPP/122", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nint add_elements(vector<int> arr, int k) {\n    int sum_of_elements = 0;\n    for (int i = 0; i < min(k, static_cast<int>(arr.size())); ++i) {\n        if (arr[i] < 100) {\n            sum_of_elements += arr[i];\n        }\n    }\n    return sum_of_elements;\n}\n"}
{"task_id": "CPP/59", "generation": "#include <stdio.h>\n\nint largest_prime_factor(int n) {\n    int largest_factor = 1;\n    \n    // Check for the smallest prime factor, which is 2\n    while (n % 2 == 0) {\n        largest_factor = 2;\n        n /= 2;\n    }\n    \n    // Check for odd factors from 3 onwards\n    for (int i = 3; i * i <= n; i += 2) {\n        while (n % i == 0) {\n            largest_factor = i;\n            n /= i;\n        }\n    }\n    \n    // If n is still greater than 2, then n itself is a prime factor\n    if (n > 2) {\n        largest_factor = n;\n    }\n    \n    return largest_factor;\n}\n\n"}
{"task_id": "CPP/134", "generation": "#include <iostream>\n#include <string>\n#include <cctype>\n\nusing namespace std;\n\nbool check_if_last_char_is_a_letter(string txt) {\n    // Check if the string is empty\n    if (txt.empty()) {\n        return false;\n    }\n\n    // Get the last character\n    char last_char = txt.back();\n\n    // Check if the last character is an alphabetical character\n    if (!isalpha(last_char)) {\n        return false;\n    }\n\n    // Check if the last character is not part of a word\n    // This means the last character should be followed by a space or be the last character in the string\n    if (txt.size() > 1 && isalpha(txt[txt.size() - 2])) {\n        return false;\n    }\n\n    return true;\n}\n\n// Test cases\n"}
{"task_id": "CPP/42", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<int> incr_list(vector<int> l) {\n    // Iterate through each element of the vector\n    for (int i = 0; i < l.size(); ++i) {\n        // Increment the element by 1\n        l[i] += 1;\n    }\n    // Return the modified vector\n    return l;\n}\n\n"}
{"task_id": "CPP/11", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring string_xor(string a, string b) {\n    // Ensure both strings are of the same length\n    if (a.length() != b.length()) {\n        throw invalid_argument(\"Input strings must be of the same length\");\n    }\n\n    string result = \"\";\n    for (size_t i = 0; i < a.length(); ++i) {\n        // Perform XOR operation on each bit\n        if (a[i] == b[i]) {\n            result += '0';\n        } else {\n            result += '1';\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/40", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nbool triples_sum_to_zero(vector<int> l) {\n    // Sort the vector\n    sort(l.begin(), l.end());\n    \n    int n = l.size();\n    \n    // Iterate through the vector\n    for (int i = 0; i < n - 2; ++i) {\n        // Skip duplicates for the first element\n        if (i > 0 && l[i] == l[i - 1]) continue;\n        \n        int left = i + 1;\n        int right = n - 1;\n        \n        while (left < right) {\n            int sum = l[i] + l[left] + l[right];\n            \n            if (sum == 0) {\n                return true;\n            } else if (sum < 0) {\n                // Move the left pointer to the right to increase the sum\n                ++left;\n            } else {\n                // Move the right pointer to the left to decrease the sum\n                --right;\n            }\n        }\n    }\n    \n    return false;\n}\n\n// Example usage\n"}
{"task_id": "CPP/13", "generation": "#include <iostream>\nusing namespace std;\n\nint greatest_common_divisor(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\n"}
{"task_id": "CPP/130", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<int> tri(int n) {\n    if (n < 0) {\n        return {};\n    }\n\n    vector<int> tribonacci_sequence(n + 1, 0);\n    tribonacci_sequence[0] = 1;\n\n    for (int i = 1; i <= n; ++i) {\n        if (i % 2 == 0) {\n            tribonacci_sequence[i] = 1 + i / 2;\n        } else {\n            tribonacci_sequence[i] = tribonacci_sequence[i - 1] + tribonacci_sequence[i - 2] + tribonacci_sequence[i + 1];\n        }\n    }\n\n    return tribonacci_sequence;\n}\n"}
{"task_id": "CPP/60", "generation": "#include<iostream>\nusing namespace std;\n\nint sum_to_n(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; ++i) {\n        sum += i;\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/23", "generation": "#include <iostream>\n#include <string>\n\nint stringLength(const std::string& str) {\n    return str.length();\n}\n\n"}
{"task_id": "CPP/46", "generation": "#include <stdio.h>\n\nint fib4(int n) {\n    // Base cases\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n\n    // Initialize the first four elements of the sequence\n    int a = 0, b = 0, c = 2, d = 0;\n    int result = 0;\n\n    // Compute the sequence iteratively\n    for (int i = 4; i <= n; i++) {\n        result = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = result;\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/51", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nstring remove_vowels(string text) {\n    string result;\n    for (char c : text) {\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' &&\n            c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n            result += c;\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/18", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint how_many_times(string str, string substring) {\n    int count = 0;\n    int sub_len = substring.length();\n    int str_len = str.length();\n\n    if (sub_len == 0 || str_len == 0) {\n        return 0;\n    }\n\n    for (int i = 0; i <= str_len - sub_len; ++i) {\n        if (str.substr(i, sub_len) == substring) {\n            ++count;\n        }\n    }\n\n    return count;\n}\n\n"}
{"task_id": "CPP/143", "generation": "#include <iostream>\n#include <string>\n#include <vector>\n#include <sstream>\n#include <cmath>\n\nusing namespace std;\n\n// Function to check if a number is prime\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true; // 2 is the only even prime number\n    if (n % 2 == 0) return false; // Other even numbers are not prime\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nstring words_in_sentence(string sentence) {\n    stringstream ss(sentence);\n    string word;\n    vector<string> result;\n    \n    // Split the sentence into words\n    while (ss >> word) {\n        if (isPrime(word.length())) {\n            result.push_back(word);\n        }\n    }\n    \n    // Join the words back into a single string\n    string resultString;\n    for (size_t i = 0; i < result.size(); ++i) {\n        if (i != 0) resultString += \" \";\n        resultString += result[i];\n    }\n    \n    return resultString;\n}\n\n"}
{"task_id": "CPP/108", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n\nint sum_of_digits(int num) {\n    int total = 0;\n    int abs_num = abs(num);\n    while (abs_num > 0) {\n        total += abs_num % 10;\n        abs_num /= 10;\n    }\n    if (num < 0) {\n        total = -total;\n    }\n    return total;\n}\n\nint count_nums(vector<int> n) {\n    int count = 0;\n    for (int num : n) {\n        if (sum_of_digits(num) > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/43", "generation": "#include <vector>\n#include <unordered_set>\nusing namespace std;\n\nbool pairs_sum_to_zero(vector<int> l) {\n    unordered_set<int> seen;\n    \n    for (int num : l) {\n        if (seen.find(-num) != seen.end()) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    \n    return false;\n}\n\n// Example usage\n"}
{"task_id": "CPP/70", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> strange_sort_list(vector<int> lst) {\n    // Sort the input vector in ascending order\n    sort(lst.begin(), lst.end());\n    \n    // Initialize the result vector\n    vector<int> result;\n    \n    // Initialize two pointers: one at the beginning and one at the end\n    int i = 0;\n    int j = lst.size() - 1;\n    \n    // Alternate between picking elements from the beginning and the end\n    while (i <= j) {\n        if (i <= j) {\n            result.push_back(lst[i]);\n            i++;\n        }\n        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n        }\n    }\n    \n    return result;\n}\n\n// Example usage\n"}
{"task_id": "CPP/63", "generation": "#include <iostream>\n#include <vector>\n\nint fibfib(int n) {\n    if (n == 0 || n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 1;\n    }\n\n    std::vector<int> fibfib_sequence(n + 1);\n    fibfib_sequence[0] = 0;\n    fibfib_sequence[1] = 0;\n    fibfib_sequence[2] = 1;\n\n    for (int i = 3; i <= n; ++i) {\n        fibfib_sequence[i] = fibfib_sequence[i - 1] + fibfib_sequence[i - 2] + fibfib_sequence[i - 3];\n    }\n\n    return fibfib_sequence[n];\n}\n\n"}
{"task_id": "CPP/89", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring encrypt(string s) {\n    string result = \"\";\n    int shift = 4; // 2 * 2 = 4\n\n    for (char c : s) {\n        if (c >= 'a' && c <= 'z') {\n            // Shift within lowercase letters\n            c = 'a' + (c - 'a' + shift) % 26;\n        } else if (c >= 'A' && c <= 'Z') {\n            // Shift within uppercase letters\n            c = 'A' + (c - 'A' + shift) % 26;\n        }\n        result += c;\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/26", "generation": "#include<stdio.h>\n#include<vector>\n#include<unordered_map>\nusing namespace std;\n\nvector<int> remove_duplicates(vector<int> numbers) {\n    unordered_map<int, int> countMap;\n    vector<int> result;\n\n    // Count the occurrences of each number\n    for (int num : numbers) {\n        countMap[num]++;\n    }\n\n    // Add numbers that occur exactly once to the result\n    for (int num : numbers) {\n        if (countMap[num] == 1) {\n            result.push_back(num);\n        }\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/104", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\n// Helper function to check if a number contains any even digit\nbool hasEvenDigit(int num) {\n    while (num > 0) {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            return true;\n        }\n        num /= 10;\n    }\n    return false;\n}\n\nvector<int> unique_digits(vector<int> x) {\n    vector<int> result;\n    \n    // Filter out numbers with even digits\n    for (int num : x) {\n        if (!hasEvenDigit(num)) {\n            result.push_back(num);\n        }\n    }\n    \n    // Sort the result in increasing order\n    sort(result.begin(), result.end());\n    \n    return result;\n}\n\n// Example usage\n"}
{"task_id": "CPP/90", "generation": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nint next_smallest(const vector<int>& lst) {\n    // Edge case: if the vector is empty or has only one unique element\n    if (lst.size() < 2) {\n        return -1; // Return -1 to indicate no 2nd smallest element\n    }\n\n    // Create a copy of the vector and sort it\n    vector<int> sorted_lst = lst;\n    sort(sorted_lst.begin(), sorted_lst.end());\n\n    // Find the smallest element\n    int smallest = sorted_lst[0];\n\n    // Find the 2nd smallest element, ensuring it is different from the smallest\n    for (size_t i = 1; i < sorted_lst.size(); ++i) {\n        if (sorted_lst[i] != smallest) {\n            return sorted_lst[i];\n        }\n    }\n\n    // If all elements are the same, return -1\n    return -1;\n}\n\n"}
{"task_id": "CPP/126", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nbool is_sorted(vector<int> lst) {\n    // Check if the vector is sorted in ascending order\n    if (!is_sorted(lst.begin(), lst.end())) {\n        return false;\n    }\n\n    // Check for duplicates more than twice\n    for (size_t i = 0; i < lst.size(); ++i) {\n        int count = 0;\n        for (size_t j = 0; j < lst.size(); ++j) {\n            if (lst[i] == lst[j]) {\n                count++;\n            }\n            if (count > 2) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n"}
{"task_id": "CPP/68", "generation": "#include<vector>\nusing namespace std;\n\nvector<int> pluck(vector<int> arr) {\n    // Initialize variables to store the smallest even value and its index\n    int smallest_even = -1;\n    int smallest_index = -1;\n    \n    // Iterate through the vector\n    for (int i = 0; i < arr.size(); ++i) {\n        // Check if the current element is even\n        if (arr[i] % 2 == 0) {\n            // If it's the first even number found or it's smaller than the current smallest even number\n            if (smallest_even == -1 || arr[i] < smallest_even) {\n                smallest_even = arr[i];\n                smallest_index = i;\n            }\n        }\n    }\n    \n    // If an even number was found, return the smallest even number and its index\n    if (smallest_even != -1) {\n        return {smallest_even, smallest_index};\n    } else {\n        // If no even number was found, return an empty vector\n        return {};\n    }\n}\n"}
{"task_id": "CPP/58", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <set>\n\nusing namespace std;\n\nvector<int> common(vector<int> l1, vector<int> l2) {\n    // Convert vectors to sets to remove duplicates\n    set<int> set1(l1.begin(), l1.end());\n    set<int> set2(l2.begin(), l2.end());\n    \n    // Find the intersection of the two sets\n    vector<int> result;\n    set_intersection(set1.begin(), set1.end(), set2.begin(), set2.end(), back_inserter(result));\n    \n    // Sort the result (although sets are already sorted, this is just for completeness)\n    sort(result.begin(), result.end());\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/112", "generation": "#include<iostream>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nvector<string> reverse_delete(string s, string c) {\n    // Step 1: Remove characters from s that are in c\n    string result;\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            result += ch;\n        }\n    }\n    \n    // Step 2: Check if the result string is a palindrome\n    bool isPalindrome = true;\n    int n = result.length();\n    for (int i = 0; i < n / 2; ++i) {\n        if (result[i] != result[n - i - 1]) {\n            isPalindrome = false;\n            break;\n        }\n    }\n    \n    // Step 3: Prepare the result vector\n    vector<string> resultVector;\n    resultVector.push_back(result);\n    resultVector.push_back(isPalindrome ? \"True\" : \"False\");\n    \n    return resultVector;\n}\n\n"}
{"task_id": "CPP/96", "generation": "#include <vector>\n#include <cmath>\n\nusing namespace std;\n\nvector<int> count_up_to(int n) {\n    if (n <= 2) {\n        return {};\n    }\n\n    // Initialize a boolean array \"is_prime[0..n]\" and set all entries as true.\n    // A value in is_prime[i] will be false if i is not a prime, true otherwise.\n    vector<bool> is_prime(n, true);\n    is_prime[0] = is_prime[1] = false; // 0 and 1 are not prime numbers\n\n    // Implementing the Sieve of Eratosthenes\n    for (int p = 2; p <= sqrt(n); ++p) {\n        // If is_prime[p] is not changed, then it is a prime\n        if (is_prime[p]) {\n            // Update all multiples of p to false\n            for (int i = p * p; i < n; i += p) {\n                is_prime[i] = false;\n            }\n        }\n    }\n\n    // Collecting all prime numbers\n    vector<int> primes;\n    for (int i = 2; i < n; ++i) {\n        if (is_prime[i]) {\n            primes.push_back(i);\n        }\n    }\n\n    return primes;\n}\n"}
{"task_id": "CPP/157", "generation": "#include<stdio.h>\n#include<math.h>\n\nbool right_angle_triangle(float a, float b, float c) {\n    // Ensure the sides are in non-decreasing order\n    if (a > b) {\n        float temp = a;\n        a = b;\n        b = temp;\n    }\n    if (b > c) {\n        float temp = b;\n        b = c;\n        c = temp;\n    }\n    if (a > b) {\n        float temp = a;\n        a = b;\n        b = temp;\n    }\n\n    // Now c is the longest side\n    return (pow(a, 2) + pow(b, 2) == pow(c, 2));\n}\n\n"}
{"task_id": "CPP/99", "generation": "#include <iostream>\n#include <string>\n#include <cmath>\n\nint closest_integer(std::string value) {\n    // Convert the string to a double\n    double number = std::stod(value);\n    \n    // Determine the closest integer\n    int closest;\n    if (number >= 0) {\n        closest = static_cast<int>(number + 0.5);\n    } else {\n        closest = static_cast<int>(number - 0.5);\n    }\n    \n    return closest;\n}\n\n"}
{"task_id": "CPP/149", "generation": "#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nvector<string> sorted_list_sum(vector<string> lst) {\n    // Step 1: Filter out strings with odd lengths\n    vector<string> filtered_lst;\n    for (const string& s : lst) {\n        if (s.length() % 2 == 0) {\n            filtered_lst.push_back(s);\n        }\n    }\n\n    // Step 2: Sort the filtered strings\n    sort(filtered_lst.begin(), filtered_lst.end(), [](const string& a, const string& b) {\n        if (a.length() == b.length()) {\n            return a < b; // Sort alphabetically if lengths are the same\n        }\n        return a.length() < b.length(); // Sort by length\n    });\n\n    return filtered_lst;\n}\n\n// Example usage\n"}
{"task_id": "CPP/86", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <sstream>\n\nusing namespace std;\n\nstring anti_shuffle(string s) {\n    // Create a stringstream to split the input string by spaces\n    stringstream ss(s);\n    string word;\n    string result;\n\n    // Process each word in the string\n    while (ss >> word) {\n        // Sort the characters of the word in ascending order\n        sort(word.begin(), word.end());\n        // Append the sorted word to the result string\n        result += word + \" \";\n    }\n\n    // Remove the trailing space if the input string was not empty\n    if (!result.empty()) {\n        result.pop_back();\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/129", "generation": "#include <vector>\n#include <queue>\n#include <climits>\nusing namespace std;\n\nstruct Path {\n    vector<int> values;\n    int x, y;\n};\n\nvector<int> minPath(vector<vector<int>> grid, int k) {\n    int N = grid.size();\n    vector<int> min_path(k, INT_MAX);\n    \n    queue<Path> q;\n    \n    // Initialize the queue with all starting points\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            q.push({{grid[i][j]}, i, j});\n        }\n    }\n    \n    while (!q.empty()) {\n        Path current = q.front();\n        q.pop();\n        \n        // If the current path length is k, compare and update min_path\n        if (current.values.size() == k) {\n            if (current.values < min_path) {\n                min_path = current.values;\n            }\n            continue;\n        }\n        \n        // Possible moves: up, down, left, right\n        vector<pair<int, int>> moves = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n        \n        for (auto move : moves) {\n            int newX = current.x + move.first;\n            int newY = current.y + move.second;\n            \n            if (newX >= 0 && newX < N && newY >= 0 && newY < N) {\n                vector<int> newValues = current.values;\n                newValues.push_back(grid[newX][newY]);\n                q.push({newValues, newX, newY});\n            }\n        }\n    }\n    \n    return min_path;\n}\n\n"}
{"task_id": "CPP/49", "generation": "#include <stdio.h>\n\nint modp(int n, int p) {\n    if (n == 0) {\n        return 1; // 2^0 % p is always 1\n    }\n\n    long long result = 1;\n    long long base = 2;\n\n    while (n > 0) {\n        if (n % 2 == 1) {\n            result = (result * base) % p;\n        }\n        base = (base * base) % p;\n        n /= 2;\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/156", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nstring int_to_mini_roman(int number) {\n    // Define the Roman numeral symbols and their corresponding values\n    vector<pair<int, string>> roman_map = {\n        {1000, \"M\"}, {900, \"CM\"}, {500, \"D\"}, {400, \"CD\"},\n        {100, \"C\"}, {90, \"XC\"}, {50, \"L\"}, {40, \"XL\"},\n        {10, \"X\"}, {9, \"IX\"}, {5, \"V\"}, {4, \"IV\"}, {1, \"I\"}\n    };\n    \n    string result = \"\";\n    \n    // Iterate through the values and build the Roman numeral string\n    for (const auto& pair : roman_map) {\n        while (number >= pair.first) {\n            result += pair.second;\n            number -= pair.first;\n        }\n    }\n    \n    // Convert the result to lowercase\n    transform(result.begin(), result.end(), result.begin(), ::tolower);\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/65", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring circular_shift(int x, int shift) {\n    // Convert the integer to a string\n    string x_str = to_string(x);\n    int n = x_str.length();\n\n    // If shift is greater than the number of digits, return the reversed string\n    if (shift > n) {\n        string reversed_str = x_str;\n        reverse(reversed_str.begin(), reversed_str.end());\n        return reversed_str;\n    }\n\n    // Perform the circular right shift\n    string shifted_str = x_str.substr(n - shift) + x_str.substr(0, n - shift);\n    return shifted_str;\n}\n"}
{"task_id": "CPP/9", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<int> rolling_max(vector<int> numbers) {\n    vector<int> result;\n    if (numbers.empty()) {\n        return result; // Return an empty vector if the input is empty\n    }\n\n    int current_max = numbers[0]; // Initialize the current max with the first element\n    result.push_back(current_max); // The first element of the result is the same as the input\n\n    for (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > current_max) {\n            current_max = numbers[i]; // Update the current max if the current element is greater\n        }\n        result.push_back(current_max); // Add the current max to the result vector\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/158", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_set>\n#include <algorithm>\n\nusing namespace std;\n\nstring find_max(vector<string> words) {\n    string max_word = \"\";\n    int max_unique_count = 0;\n\n    for (const string& word : words) {\n        // Use an unordered_set to count unique characters in the word\n        unordered_set<char> unique_chars(word.begin(), word.end());\n        int unique_count = unique_chars.size();\n\n        // If the current word has more unique characters, update max_word\n        if (unique_count > max_unique_count) {\n            max_word = word;\n            max_unique_count = unique_count;\n        }\n        // If the current word has the same number of unique characters but is lexicographically smaller, update max_word\n        else if (unique_count == max_unique_count && word < max_word) {\n            max_word = word;\n        }\n    }\n\n    return max_word;\n}\n\n"}
{"task_id": "CPP/8", "generation": "#include <vector>\n#include <numeric> // For std::accumulate\n\nusing namespace std;\n\nvector<int> sum_product(const vector<int>& numbers) {\n    // Initialize sum to 0 and product to 1\n    int sum = 0;\n    int product = 1;\n\n    // Iterate through the vector to calculate sum and product\n    for (int num : numbers) {\n        sum += num;\n        product *= num;\n    }\n\n    // Return the result as a vector\n    return {sum, product};\n}\n\n// Example usage\n"}
{"task_id": "CPP/95", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\n#include<cctype> // for islower and isupper functions\nusing namespace std;\n\nbool check_dict_case(map<string, string> dict) {\n    // Check if the map is empty\n    if (dict.empty()) {\n        return false;\n    }\n\n    bool all_lower = true;\n    bool all_upper = true;\n\n    // Iterate through the map\n    for (const auto& pair : dict) {\n        const string& key = pair.first;\n\n        // Check if the key is a string\n        if (key.empty()) {\n            return false;\n        }\n\n        // Check if all characters in the key are lower case\n        for (char c : key) {\n            if (!islower(c)) {\n                all_lower = false;\n                break;\n            }\n        }\n\n        // Check if all characters in the key are upper case\n        for (char c : key) {\n            if (!isupper(c)) {\n                all_upper = false;\n                break;\n            }\n        }\n\n        // If neither all lower nor all upper, return false\n        if (!all_lower && !all_upper) {\n            return false;\n        }\n    }\n\n    // If all keys are either all lower or all upper, return true\n    return true;\n}\n\n// Example usage\n"}
{"task_id": "CPP/55", "generation": "#include<iostream>\nusing namespace std;\n\nint fib(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}\n\n"}
{"task_id": "CPP/29", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nvector<string> filter_by_prefix(vector<string> strings, string prefix) {\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.find(prefix) == 0) {  // Check if the string starts with the prefix\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/72", "generation": "#include <vector>\n#include <numeric> // for std::accumulate\n#include <algorithm> // for std::reverse\n\nbool will_it_fly(vector<int> q, int w) {\n    // Check if the vector is palindromic\n    vector<int> reversed_q = q;\n    reverse(reversed_q.begin(), reversed_q.end());\n    if (q != reversed_q) {\n        return false;\n    }\n\n    // Calculate the sum of the vector elements\n    int sum = accumulate(q.begin(), q.end(), 0);\n\n    // Check if the sum is less than or equal to the maximum possible weight\n    return sum <= w;\n}\n\n// Example usage\n"}
{"task_id": "CPP/54", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\n#include<unordered_set>\nusing namespace std;\n\nbool same_chars(string s0, string s1) {\n    // Convert strings to unordered sets of characters\n    unordered_set<char> set_s0(s0.begin(), s0.end());\n    unordered_set<char> set_s1(s1.begin(), s1.end());\n    \n    // Check if the sets are equal\n    return set_s0 == set_s1;\n}\n"}
{"task_id": "CPP/91", "generation": "#include <string>\n#include <sstream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint is_bored(string S) {\n    vector<string> sentences;\n    string delimiter = \".?!\";\n    size_t start = 0;\n    size_t end = S.find_first_of(delimiter);\n\n    while (end != string::npos) {\n        sentences.push_back(S.substr(start, end - start));\n        start = end + 1;\n        end = S.find_first_of(delimiter, start);\n    }\n    sentences.push_back(S.substr(start));\n\n    int count = 0;\n    for (string& sentence : sentences) {\n        sentence.erase(remove(sentence.begin(), sentence.end(), ' '), sentence.end());\n        if (sentence.length() > 0 && sentence[0] == 'I') {\n            count++;\n        }\n    }\n\n    return count;\n}\n"}
{"task_id": "CPP/77", "generation": "#include <iostream>\n#include <cmath>\n\nbool iscube(int a) {\n    // Handle the special case where a is 0\n    if (a == 0) {\n        return true;\n    }\n\n    // Calculate the cube root of a\n    double cubeRoot = cbrt(a);\n\n    // Check if the cube root is an integer\n    int intCubeRoot = static_cast<int>(cubeRoot);\n\n    // Verify if the cube of the integer cube root equals a\n    return (intCubeRoot * intCubeRoot * intCubeRoot == a);\n}\n\n"}
{"task_id": "CPP/73", "generation": "#include <vector>\n#include <iostream>\nusing namespace std;\n\nint smallest_change(vector<int> arr) {\n    int left = 0;\n    int right = arr.size() - 1;\n    int changes = 0;\n\n    while (left < right) {\n        if (arr[left] != arr[right]) {\n            changes++;\n        }\n        left++;\n        right--;\n    }\n\n    return changes;\n}\n\n"}
{"task_id": "CPP/71", "generation": "#include <stdio.h>\n#include <math.h>\n\nfloat triangle_area(float a, float b, float c) {\n    // Check if the sides can form a valid triangle\n    if (a + b > c && a + c > b && b + c > a) {\n        // Calculate the semi-perimeter\n        float s = (a + b + c) / 2;\n        // Calculate the area using Heron's formula\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n        // Return the area rounded to 2 decimal points\n        return round(area * 100) / 100;\n    } else {\n        // Return -1 if the sides do not form a valid triangle\n        return -1;\n    }\n}\n\n"}
{"task_id": "CPP/82", "generation": "#include <iostream>\n#include <string>\n#include <cmath>\nusing namespace std;\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true; // 2 is the only even prime number\n    if (n % 2 == 0) return false; // other even numbers are not prime\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nbool prime_length(string str) {\n    int length = str.length();\n    return is_prime(length);\n}\n\n"}
{"task_id": "CPP/114", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nlong long minSubArraySum(vector<long long> nums) {\n    // Edge case: if the vector is empty, return 0 (or handle as needed)\n    if (nums.empty()) return 0;\n\n    // Initialize variables to store the minimum sum and the current sum\n    long long minSum = nums[0];\n    long long currentSum = nums[0];\n\n    // Iterate through the vector starting from the second element\n    for (size_t i = 1; i < nums.size(); ++i) {\n        // Update the current sum to be the minimum of the current element or the current sum plus the current element\n        currentSum = min(nums[i], currentSum + nums[i]);\n        // Update the minimum sum if the current sum is smaller\n        minSum = min(minSum, currentSum);\n    }\n\n    return minSum;\n}\n\n"}
{"task_id": "CPP/138", "generation": "#include<stdio.h>\n\nbool is_equal_to_sum_even(int n) {\n    if (n < 8) {\n        return false;\n    }\n    if (n % 2 != 0) {\n        return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/132", "generation": "#include <string>\n#include <stack>\nusing namespace std;\n\nbool is_nested(string str) {\n    stack<char> s;\n    bool nested = false;\n    int depth = 0;\n\n    // First pass to check for valid matching brackets\n    for (char c : str) {\n        if (c == '[') {\n            s.push(c);\n        } else if (c == ']') {\n            if (!s.empty() && s.top() == '[') {\n                s.pop();\n            } else {\n                s.push(c);\n            }\n        }\n    }\n\n    // Second pass to check for nested structure\n    for (char c : str) {\n        if (c == '[') {\n            depth++;\n        } else if (c == ']') {\n            if (depth > 1) {\n                nested = true;\n            }\n            depth--;\n        }\n    }\n\n    return nested;\n}\n"}
{"task_id": "CPP/3", "generation": "#include<vector>\nusing namespace std;\n\nbool below_zero(vector<int> operations) {\n    int balance = 0;\n    for (int operation : operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/142", "generation": "#include <stdio.h>\n#include <vector>\nusing namespace std;\n\nint sum_squares(vector<int> lst) {\n    // Iterate through the vector\n    for (size_t i = 0; i < lst.size(); ++i) {\n        // Check if the index is a multiple of 3\n        if (i % 3 == 0) {\n            lst[i] = lst[i] * lst[i]; // Square the element\n        }\n        // Check if the index is a multiple of 4 and not a multiple of 3\n        else if (i % 4 == 0 && i % 3 != 0) {\n            lst[i] = lst[i] * lst[i] * lst[i]; // Cube the element\n        }\n        // If the index is not a multiple of 3 or 4, do nothing\n    }\n\n    // Compute the sum of all elements in the vector\n    int sum = 0;\n    for (int num : lst) {\n        sum += num;\n    }\n\n    return sum;\n}\n\n// Example usage\n"}
{"task_id": "CPP/50", "generation": "#include <stdio.h>\n#include <string>\nusing namespace std;\n\nstring encode_shift(string s) {\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i = 0; i < s.length(); i++) {\n        int w = ((int)s[i] + 5 - (int)'a') % 26 + (int)'a';\n        out = out + (char)w;\n    }\n    return out;\n}\n\nstring decode_shift(string s) {\n    // takes as input string encoded with encode_shift function. Returns decoded string.\n    string out;\n    int i;\n    for (i = 0; i < s.length(); i++) {\n        int w = ((int)s[i] - 5 - (int)'a' + 26) % 26 + (int)'a';\n        out = out + (char)w;\n    }\n    return out;\n}\n\n"}
{"task_id": "CPP/103", "generation": "#include <iostream>\n#include <cmath>\n#include <string>\nusing namespace std;\n\nstring rounded_avg(int n, int m) {\n    // Step 1: Check if n is greater than m\n    if (n > m) {\n        return \"-1\";\n    }\n    \n    // Step 2: Calculate the sum of integers from n to m\n    int sum = 0;\n    for (int i = n; i <= m; ++i) {\n        sum += i;\n    }\n    \n    // Step 3: Calculate the count of integers from n to m\n    int count = m - n + 1;\n    \n    // Step 4: Calculate the average and round it down\n    int average = floor((double)sum / count);\n    \n    // Step 5: Convert the rounded average to binary\n    string binary = \"\";\n    while (average > 0) {\n        binary = to_string(average % 2) + binary;\n        average /= 2;\n    }\n    \n    // If the binary string is empty (which happens if average was 0), set it to \"0\"\n    if (binary.empty()) {\n        binary = \"0\";\n    }\n    \n    return binary;\n}\n\n"}
{"task_id": "CPP/57", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nbool monotonic(vector<float> l) {\n    bool increasing = true;\n    bool decreasing = true;\n\n    for (size_t i = 1; i < l.size(); ++i) {\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n        }\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n        }\n    }\n\n    return increasing || decreasing;\n}\n"}
{"task_id": "CPP/28", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring concatenate(const vector<string>& strings) {\n    string result;\n    for (const string& s : strings) {\n        result += s;\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/39", "generation": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n// Function to check if a number is prime\nbool is_prime(int num) {\n    if (num <= 1) return false;\n    if (num == 2) return true;\n    if (num % 2 == 0) return false;\n    for (int i = 3; i <= sqrt(num); i += 2) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\n// Function to generate the n-th prime Fibonacci number\nint prime_fib(int n) {\n    if (n <= 0) return -1; // Invalid input\n    int a = 0, b = 1, count = 0;\n    while (true) {\n        int next = a + b;\n        a = b;\n        b = next;\n        if (is_prime(next)) {\n            count++;\n            if (count == n) {\n                return next;\n            }\n        }\n    }\n}\n\n"}
{"task_id": "CPP/45", "generation": "#include <stdio.h>\n\nfloat triangle_area(float a, float h) {\n    return 0.5 * a * h;\n}\n\n"}
{"task_id": "CPP/145", "generation": "#include <vector>\n#include <algorithm>\n#include <string>\n#include <cmath>\n\nusing namespace std;\n\nint sum_of_digits(int num) {\n    int sum = 0;\n    num = abs(num);\n    while (num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}\n\nvector<int> order_by_points(vector<int> nums) {\n    vector<pair<int, int>> indexed_nums;\n    for (int i = 0; i < nums.size(); ++i) {\n        indexed_nums.push_back({nums[i], i});\n    }\n\n    sort(indexed_nums.begin(), indexed_nums.end(), [](const pair<int, int>& a, const pair<int, int>& b) {\n        int sum_a = sum_of_digits(a.first);\n        int sum_b = sum_of_digits(b.first);\n        if (sum_a == sum_b) {\n            return a.second < b.second;\n        }\n        return sum_a < sum_b;\n    });\n\n    vector<int> sorted_nums;\n    for (const auto& p : indexed_nums) {\n        sorted_nums.push_back(p.first);\n    }\n\n    return sorted_nums;\n}\n"}
{"task_id": "CPP/84", "generation": "#include <iostream>\n#include <string>\n#include <bitset>\n\nusing namespace std;\n\nstring solve(int N) {\n    // Step 1: Calculate the sum of the digits of N\n    int sum = 0;\n    int temp = N;\n    while (temp > 0) {\n        sum += temp % 10;  // Add the last digit to the sum\n        temp /= 10;        // Remove the last digit\n    }\n\n    // Step 2: Convert the sum to its binary representation\n    string binarySum = bitset<32>(sum).to_string();  // Convert to binary string\n\n    // Step 3: Remove leading zeros from the binary string\n    size_t pos = binarySum.find('1');  // Find the first '1'\n    if (pos != string::npos) {\n        binarySum = binarySum.substr(pos);  // Extract the substring from the first '1'\n    } else {\n        binarySum = \"0\";  // If no '1' is found, the sum was 0\n    }\n\n    return binarySum;\n}\n\n"}
{"task_id": "CPP/113", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<string> odd_count(vector<string> lst) {\n    vector<string> result;\n    \n    for (size_t i = 0; i < lst.size(); ++i) {\n        int odd_count = 0;\n        for (char c : lst[i]) {\n            if ((c - '0') % 2 != 0) {\n                ++odd_count;\n            }\n        }\n        \n        // Create the output string with the correct format\n        ostringstream oss;\n        oss << \"the number of odd elements \" << odd_count << \"n the str\" << odd_count << \"ng \" << odd_count << \" of the \" << odd_count << \"nput.\";\n        result.push_back(oss.str());\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/36", "generation": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint fizz_buzz(int n) {\n    int count = 0;\n    for (int i = 0; i < n; ++i) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            string num_str = to_string(i);\n            for (char c : num_str) {\n                if (c == '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/144", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\n// Helper function to parse the fraction string and return the numerator and denominator\npair<int, int> parseFraction(const string& fraction) {\n    size_t pos = fraction.find('/');\n    int numerator = stoi(fraction.substr(0, pos));\n    int denominator = stoi(fraction.substr(pos + 1));\n    return {numerator, denominator};\n}\n\n// Function to check if the product of two fractions results in a whole number\nbool simplify(string x, string n) {\n    // Parse the fractions\n    pair<int, int> fracX = parseFraction(x);\n    pair<int, int> fracN = parseFraction(n);\n    \n    // Extract numerators and denominators\n    int numX = fracX.first;\n    int denX = fracX.second;\n    int numN = fracN.first;\n    int denN = fracN.second;\n    \n    // Calculate the product of the two fractions\n    int numerator = numX * numN;\n    int denominator = denX * denN;\n    \n    // Check if the resulting fraction is a whole number\n    return numerator % denominator == 0;\n}\n\n// Example usage\n"}
{"task_id": "CPP/0", "generation": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n\nbool has_close_elements(vector<float> numbers, float threshold) {\n    // Get the size of the vector\n    int n = numbers.size();\n    \n    // Iterate through each pair of numbers\n    for (int i = 0; i < n; ++i) {\n        for (int j = i + 1; j < n; ++j) {\n            // Calculate the absolute difference between numbers[i] and numbers[j]\n            float diff = fabs(numbers[i] - numbers[j]);\n            \n            // Check if the difference is less than the threshold\n            if (diff < threshold) {\n                return true;\n            }\n        }\n    }\n    \n    // If no such pair is found, return false\n    return false;\n}\n\n"}
{"task_id": "CPP/17", "generation": "#include <vector>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<int> parse_music(string music_string) {\n    vector<int> beats;\n    stringstream ss(music_string);\n    string note;\n    \n    while (ss >> note) {\n        if (note == \"o\") {\n            beats.push_back(4);\n        } else if (note == \"o|\") {\n            beats.push_back(2);\n        } else if (note == \".|\") {\n            beats.push_back(1);\n        }\n    }\n    \n    return beats;\n}\n"}
{"task_id": "CPP/47", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nfloat median(vector<float> l) {\n    // Step 1: Sort the vector\n    sort(l.begin(), l.end());\n\n    // Step 2: Determine the size of the vector\n    int n = l.size();\n\n    // Step 3: Check if the number of elements is odd or even\n    if (n % 2 != 0) {\n        // If odd, return the middle element\n        return l[n / 2];\n    } else {\n        // If even, return the average of the two middle elements\n        return (l[(n / 2) - 1] + l[n / 2]) / 2.0;\n    }\n}\n\n"}
{"task_id": "CPP/75", "generation": "#include <vector>\n#include <cmath>\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nbool is_multiply_prime(int a) {\n    std::vector<int> primes;\n    for (int i = 2; i < 100; ++i) {\n        if (is_prime(i)) {\n            primes.push_back(i);\n        }\n    }\n\n    for (int i : primes) {\n        for (int j : primes) {\n            for (int k : primes) {\n                if (i * j * k == a) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/124", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <iomanip>\n\nusing namespace std;\n\nbool valid_date(string date) {\n    // Check if the date string is empty\n    if (date.empty()) {\n        return false;\n    }\n\n    // Check if the date string is in the format mm-dd-yyyy\n    if (date.length() != 10 || date[2] != '-' || date[5] != '-') {\n        return false;\n    }\n\n    // Extract the month, day, and year from the date string\n    string month_str = date.substr(0, 2);\n    string day_str = date.substr(3, 2);\n    string year_str = date.substr(6, 4);\n\n    // Convert the extracted strings to integers\n    int month, day, year;\n    try {\n        month = stoi(month_str);\n        day = stoi(day_str);\n        year = stoi(year_str);\n    } catch (invalid_argument&) {\n        return false;\n    }\n\n    // Validate the month\n    if (month < 1 || month > 12) {\n        return false;\n    }\n\n    // Validate the day based on the month\n    if (month == 2) {\n        // February can have 29 days in a leap year, otherwise 28\n        bool is_leap_year = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));\n        if (day < 1 || (day > 28 && !is_leap_year) || (day > 29 && is_leap_year)) {\n            return false;\n        }\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        // April, June, September, November have 30 days\n        if (day < 1 || day > 30) {\n            return false;\n        }\n    } else {\n        // January, March, May, July, August, October, December have 31 days\n        if (day < 1 || day > 31) {\n            return false;\n        }\n    }\n\n    // If all checks pass, the date is valid\n    return true;\n}\n\n"}
{"task_id": "CPP/101", "generation": "#include <vector>\n#include <string>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> words_string(string s) {\n    vector<string> words;\n    string word;\n    stringstream ss(s);\n    \n    // Read words separated by spaces or commas\n    while (getline(ss, word, ' ')) {\n        stringstream word_ss(word);\n        string subword;\n        while (getline(word_ss, subword, ',')) {\n            if (!subword.empty()) {\n                words.push_back(subword);\n            }\n        }\n    }\n    \n    return words;\n}\n"}
{"task_id": "CPP/14", "generation": "#include<iostream>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> all_prefixes(string str) {\n    vector<string> prefixes;\n    for (int i = 1; i <= str.length(); ++i) {\n        prefixes.push_back(str.substr(0, i));\n    }\n    return prefixes;\n}\n\n"}
{"task_id": "CPP/141", "generation": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring file_name_check(string file_name) {\n    // Check if there is exactly one dot\n    size_t dot_pos = file_name.find('.');\n    if (dot_pos == string::npos || dot_pos == 0 || dot_pos == file_name.size() - 1) {\n        return \"No\";\n    }\n\n    // Check if the substring before the dot is not empty and starts with a letter\n    string before_dot = file_name.substr(0, dot_pos);\n    if (before_dot.empty() || !isalpha(before_dot[0])) {\n        return \"No\";\n    }\n\n    // Check if the substring after the dot is one of {\"txt\", \"exe\", \"dll\"}\n    string after_dot = file_name.substr(dot_pos + 1);\n    if (after_dot != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\") {\n        return \"No\";\n    }\n\n    // Count the number of digits in the file name\n    int digit_count = 0;\n    for (char c : file_name) {\n        if (isdigit(c)) {\n            digit_count++;\n            if (digit_count > 3) {\n                return \"No\";\n            }\n        }\n    }\n\n    // If all conditions are met, return \"Yes\"\n    return \"Yes\";\n}\n\n// Example usage\n"}
{"task_id": "CPP/123", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> get_odd_collatz(int n) {\n    vector<int> odd_numbers;\n    \n    // Generate the Collatz sequence and collect odd numbers\n    while (n != 1) {\n        if (n % 2 == 1) {\n            odd_numbers.push_back(n);\n        }\n        if (n % 2 == 0) {\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n    }\n    \n    // Add the final 1 to the sequence\n    odd_numbers.push_back(1);\n    \n    // Sort the vector of odd numbers\n    sort(odd_numbers.begin(), odd_numbers.end());\n    \n    return odd_numbers;\n}\n"}
{"task_id": "CPP/148", "generation": "#include <vector>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> bf(string planet1, string planet2) {\n    // List of planets in order of their proximity to the Sun\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    \n    // Check if both planet names are valid\n    if (find(planets.begin(), planets.end(), planet1) == planets.end() ||\n        find(planets.begin(), planets.end(), planet2) == planets.end()) {\n        return {};\n    }\n    \n    // Find the indices of the two planets\n    int index1 = find(planets.begin(), planets.end(), planet1) - planets.begin();\n    int index2 = find(planets.begin(), planets.end(), planet2) - planets.begin();\n    \n    // Ensure index1 is less than index2 for simplicity\n    if (index1 > index2) {\n        swap(index1, index2);\n    }\n    \n    // Collect planets between index1 and index2 (excluding the endpoints)\n    vector<string> result;\n    for (int i = index1 + 1; i < index2; ++i) {\n        result.push_back(planets[i]);\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/133", "generation": "#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n\nint sum_squares(vector<float> lst) {\n    int sum = 0;\n    for (float num : lst) {\n        int rounded_num = ceil(num);  // Round up to the nearest integer\n        sum += rounded_num * rounded_num;  // Square the rounded number and add to sum\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/109", "generation": "#include <vector>\nusing namespace std;\n\nbool move_one_ball(vector<int> arr) {\n    if (arr.empty()) return true;\n    \n    int n = arr.size();\n    int dipCount = 0;\n    int dipIndex = -1;\n    \n    // Find the dip\n    for (int i = 0; i < n; ++i) {\n        if (arr[i] > arr[(i + 1) % n]) {\n            dipCount++;\n            dipIndex = i;\n        }\n    }\n    \n    // If there is more than one dip, it's not possible to sort by right shifts\n    if (dipCount > 1) return false;\n    \n    // If there is exactly one dip, check the segments\n    if (dipCount == 1) {\n        // Check the segment from dipIndex + 1 to the end\n        for (int i = (dipIndex + 1) % n; i != dipIndex; i = (i + 1) % n) {\n            if (arr[i] > arr[(i + 1) % n]) {\n                return false;\n            }\n        }\n    }\n    \n    return true;\n}\n"}
{"task_id": "CPP/100", "generation": "#include<vector>\nusing namespace std;\n\nvector<int> make_a_pile(int n) {\n    vector<int> result;\n    int current = n;\n    \n    for (int i = 0; i < n; ++i) {\n        result.push_back(current);\n        if (current % 2 == 0) {\n            current += 2; // Next even number\n        } else {\n            current += 2; // Next odd number\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/150", "generation": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true; // 2 is the only even prime number\n    if (n % 2 == 0) return false; // Other even numbers are not prime\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nint x_or_y(int n, int x, int y) {\n    if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n\n"}
{"task_id": "CPP/153", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cctype>\n\nusing namespace std;\n\nstring Strongest_Extension(string class_name, vector<string> extensions) {\n    string strongest_extension = \"\";\n    int max_strength = INT_MIN;\n\n    for (const string& ext : extensions) {\n        int CAP = 0;\n        int SM = 0;\n\n        for (char c : ext) {\n            if (isupper(c)) {\n                CAP++;\n            } else if (islower(c)) {\n                SM++;\n            }\n        }\n\n        int strength = CAP - SM;\n\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest_extension = ext;\n        }\n    }\n\n    return class_name + \".\" + strongest_extension;\n}\n\n"}
{"task_id": "CPP/107", "generation": "#include <vector>\n#include <string>\nusing namespace std;\n\nbool isPalindrome(int num) {\n    string str = to_string(num);\n    int len = str.length();\n    for (int i = 0; i < len / 2; ++i) {\n        if (str[i] != str[len - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvector<int> even_odd_palindrome(int n) {\n    int evenCount = 0;\n    int oddCount = 0;\n    \n    for (int i = 1; i <= n; ++i) {\n        if (isPalindrome(i)) {\n            if (i % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n    \n    return {evenCount, oddCount};\n}\n"}
{"task_id": "CPP/110", "generation": "#include <vector>\n#include <string>\nusing namespace std;\n\nstring exchange(vector<int> lst1, vector<int> lst2) {\n    int oddCount = 0;\n    int evenCount = 0;\n\n    // Count odd elements in lst1\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            oddCount++;\n        }\n    }\n\n    // Count even elements in lst2\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            evenCount++;\n        }\n    }\n\n    // Check if we have enough even elements in lst2 to replace all odd elements in lst1\n    if (evenCount >= oddCount) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n"}
{"task_id": "CPP/111", "generation": "#include <iostream>\n#include <string>\n#include <map>\n#include <climits>\n\nusing namespace std;\n\nmap<char, int> histogram(string test) {\n    map<char, int> frequencyMap;\n    map<char, int> resultMap;\n    int maxFrequency = 0;\n\n    // Step 1: Populate the frequency map\n    for (char c : test) {\n        if (c != ' ') { // Ignore spaces\n            frequencyMap[c]++;\n            if (frequencyMap[c] > maxFrequency) {\n                maxFrequency = frequencyMap[c];\n            }\n        }\n    }\n\n    // Step 2: Populate the result map with letters having the maximum frequency\n    for (const auto& pair : frequencyMap) {\n        if (pair.second == maxFrequency) {\n            resultMap[pair.first] = pair.second;\n        }\n    }\n\n    return resultMap;\n}\n\n"}
{"task_id": "CPP/80", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool is_happy(string s) {\n    // Check if the length of the string is less than 3\n    if (s.length() < 3) {\n        return false;\n    }\n\n    // Iterate through the string and check every 3 consecutive characters\n    for (int i = 0; i <= s.length() - 3; ++i) {\n        // Check if the 3 consecutive characters are distinct\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n\n    // If all 3 consecutive characters are distinct, return true\n    return true;\n}\n\n// Test cases\n"}
{"task_id": "CPP/41", "generation": "#include<stdio.h>\n\nint car_race_collision(int n) {\n    return n * n;\n}\n\n"}
{"task_id": "CPP/116", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\n// Helper function to count the number of ones in the binary representation of a number\nint count_ones(int num) {\n    int count = 0;\n    while (num != 0) {\n        count += num & 1;\n        num >>= 1;\n    }\n    return count;\n}\n\nvector<int> sort_array(vector<int> arr) {\n    // Sort the array using a custom comparator\n    sort(arr.begin(), arr.end(), [](int a, int b) {\n        int count_a = count_ones(a);\n        int count_b = count_ones(b);\n        if (count_a == count_b) {\n            return a < b;\n        }\n        return count_a < count_b;\n    });\n    return arr;\n}\n"}
{"task_id": "CPP/61", "generation": "#include <iostream>\n#include <string>\n#include <stack>\nusing namespace std;\n\nbool correct_bracketing(string brackets) {\n    stack<char> s;\n    \n    for (char bracket : brackets) {\n        if (bracket == '(') {\n            s.push(bracket);\n        } else if (bracket == ')') {\n            if (s.empty() || s.top() != '(') {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    \n    return s.empty();\n}\n\n"}
{"task_id": "CPP/25", "generation": "#include <vector>\n#include <cmath>\nusing namespace std;\n\nvector<int> factorize(int n) {\n    vector<int> factors;\n    \n    // Check for the number of 2s that divide n\n    while (n % 2 == 0) {\n        factors.push_back(2);\n        n = n / 2;\n    }\n    \n    // n must be odd at this point, so we can skip even numbers\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        // While i divides n, add i and divide n\n        while (n % i == 0) {\n            factors.push_back(i);\n            n = n / i;\n        }\n    }\n    \n    // This condition is to check if n is a prime number greater than 2\n    if (n > 2) {\n        factors.push_back(n);\n    }\n    \n    return factors;\n}\n\n// Example usage\n"}
{"task_id": "CPP/137", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <boost/any.hpp>\n#include <boost/lexical_cast.hpp>\n\nusing namespace std;\n\nboost::any compare_one(boost::any a, boost::any b) {\n    auto to_float = [](const boost::any& value) -> float {\n        try {\n            if (value.type() == typeid(std::string)) {\n                std::string str = boost::any_cast<std::string>(value);\n                std::replace(str.begin(), str.end(), ',', '.');\n                return boost::lexical_cast<float>(str);\n            } else if (value.type() == typeid(int)) {\n                return static_cast<float>(boost::any_cast<int>(value));\n            } else if (value.type() == typeid(float)) {\n                return boost::any_cast<float>(value);\n            }\n        } catch (const boost::bad_lexical_cast&) {\n            throw std::invalid_argument(\"Invalid input type\");\n        }\n        throw std::invalid_argument(\"Unsupported type\");\n    };\n\n    try {\n        float a_float = to_float(a);\n        float b_float = to_float(b);\n\n        if (a_float > b_float) {\n            return a;\n        } else if (b_float > a_float) {\n            return b;\n        } else {\n            return std::string(\"None\");\n        }\n    } catch (const std::invalid_argument&) {\n        return std::string(\"None\");\n    }\n}\n\n"}
{"task_id": "CPP/102", "generation": "#include <stdio.h>\n\nint choose_num(int x, int y) {\n    // Ensure x is less than or equal to y\n    if (x > y) {\n        return -1;\n    }\n\n    // Start from the largest number in the range and move downwards\n    for (int i = y; i >= x; i--) {\n        // Check if the number is even\n        if (i % 2 == 0) {\n            return i;\n        }\n    }\n\n    // If no even number is found, return -1\n    return -1;\n}\n\n"}
{"task_id": "CPP/10", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nbool is_palindrome(const string& str) {\n    // Test if given string is a palindrome\n    string s(str.rbegin(), str.rend());\n    return s == str;\n}\n\nstring make_palindrome(const string& str) {\n    // Find the shortest palindrome that begins with a supplied string\n    for (size_t i = 0; i < str.size(); ++i) {\n        // Check if the suffix from i to the end is a palindrome\n        if (is_palindrome(str.substr(i))) {\n            // If it is, append the reverse of the prefix before this suffix\n            string prefix = str.substr(0, i);\n            reverse(prefix.begin(), prefix.end());\n            return str + prefix;\n        }\n    }\n    // If no palindromic suffix is found, append the reverse of the entire string\n    string reversed_str(str.rbegin(), str.rend());\n    return str + reversed_str;\n}\n\n"}
{"task_id": "CPP/76", "generation": "#include<stdio.h>\n#include<math.h>\n\nbool is_simple_power(int x, int n) {\n    if (n == 1) {\n        return x == 1;\n    }\n    int power = 1;\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}\n"}
{"task_id": "CPP/94", "generation": "#include <iostream>\n#include <vector>\n#include <cmath>\nusing namespace std;\n\n// Function to check if a number is prime\nbool isPrime(int num) {\n    if (num <= 1) return false;\n    if (num == 2) return true;\n    if (num % 2 == 0) return false;\n    for (int i = 3; i <= sqrt(num); i += 2) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\n// Function to sum the digits of a number\nint sumOfDigits(int num) {\n    int sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}\n\nint skjkasdkd(vector<int> lst) {\n    int largestPrime = -1;\n    \n    // Find the largest prime in the list\n    for (int num : lst) {\n        if (isPrime(num) && num > largestPrime) {\n            largestPrime = num;\n        }\n    }\n    \n    // If no prime is found, return 0\n    if (largestPrime == -1) {\n        return 0;\n    }\n    \n    // Sum the digits of the largest prime\n    return sumOfDigits(largestPrime);\n}\n\n"}
{"task_id": "CPP/32", "generation": "#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n\ndouble poly(vector<double> xs, double x) {\n    /* \n    Evaluates polynomial with coefficients xs at point x. \n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n    */\n    double sum = 0;\n    for (int i = 0; i < xs.size(); i++) {\n        sum += xs[i] * pow(x, i);\n    }\n    return sum;\n}\n\ndouble poly_derivative(vector<double> xs, double x) {\n    /* \n    Evaluates the derivative of the polynomial with coefficients xs at point x. \n    */\n    double sum = 0;\n    for (int i = 1; i < xs.size(); i++) {\n        sum += i * xs[i] * pow(x, i - 1);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs) {\n    /*\n    xs are coefficients of a polynomial. find_zero finds x such that poly(x) = 0. \n    find_zero returns only one zero point, even if there are many. \n    Moreover, find_zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution.\n    */\n    double x0 = 0.0; // Initial guess\n    double tolerance = 1e-7; // Tolerance for convergence\n    int max_iterations = 1000; // Maximum number of iterations\n\n    for (int i = 0; i < max_iterations; i++) {\n        double fx = poly(xs, x0);\n        double dfx = poly_derivative(xs, x0);\n\n        if (fabs(fx) < tolerance) {\n            return x0; // Converged to a root\n        }\n\n        x0 = x0 - fx / dfx; // Newton-Raphson update\n    }\n\n    return x0; // Return the best guess after max iterations\n}\n\n"}
{"task_id": "CPP/33", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> sort_third(vector<int> l) {\n    // Extract elements at indices divisible by 3\n    vector<int> to_sort;\n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 3 == 0) {\n            to_sort.push_back(l[i]);\n        }\n    }\n    \n    // Sort the extracted elements\n    sort(to_sort.begin(), to_sort.end());\n    \n    // Create a new list with sorted elements at indices divisible by 3\n    vector<int> result = l;\n    size_t sort_index = 0;\n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 3 == 0) {\n            result[i] = to_sort[sort_index++];\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/88", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> sort_array(vector<int> array) {\n    // Check if the array is empty or has only one element\n    if (array.empty() || array.size() == 1) {\n        return array;\n    }\n\n    // Calculate the sum of the first and last index values\n    int sum = array.front() + array.back();\n\n    // Create a copy of the array to sort\n    vector<int> sorted_array = array;\n\n    // Sort the array based on the sum\n    if (sum % 2 == 0) {\n        // Sort in descending order if the sum is even\n        sort(sorted_array.begin(), sorted_array.end(), greater<int>());\n    } else {\n        // Sort in ascending order if the sum is odd\n        sort(sorted_array.begin(), sorted_array.end());\n    }\n\n    return sorted_array;\n}\n"}
{"task_id": "CPP/15", "generation": "#include <string>\n#include <sstream>\n\nusing namespace std;\n\nstring string_sequence(int n) {\n    // Create a stringstream to build the result\n    stringstream result;\n    \n    // Loop from 0 to n inclusive\n    for (int i = 0; i <= n; ++i) {\n        // Append the number followed by a space\n        result << i << \" \";\n    }\n    \n    // Convert the stringstream to a string\n    string result_str = result.str();\n    \n    // Remove the trailing space if it exists\n    if (!result_str.empty()) {\n        result_str.pop_back();\n    }\n    \n    // Return the resulting string\n    return result_str;\n}\n"}
{"task_id": "CPP/163", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> generate_integers(int a, int b) {\n    // Define the even digits\n    vector<int> even_digits = {0, 2, 4, 6, 8};\n    // Determine the range [min(a, b), max(a, b)]\n    int start = min(a, b);\n    int end = max(a, b);\n    // Initialize the result vector\n    vector<int> result;\n    // Iterate through the range and collect even digits\n    for (int num = start; num <= end; ++num) {\n        if (find(even_digits.begin(), even_digits.end(), num) != even_digits.end()) {\n            result.push_back(num);\n        }\n    }\n    // Return the result in ascending order\n    return result;\n}\n"}
{"task_id": "CPP/1", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm> // for std::remove\nusing namespace std;\n\nvector<string> separate_paren_groups(string paren_string) {\n    vector<string> result;\n    string current_group;\n    int balance = 0;\n    \n    // Remove all spaces from the input string\n    paren_string.erase(remove(paren_string.begin(), paren_string.end(), ' '), paren_string.end());\n    \n    for (char c : paren_string) {\n        current_group += c;\n        if (c == '(') {\n            balance += 1;\n        } else if (c == ')') {\n            balance -= 1;\n            if (balance == 0) {\n                result.push_back(current_group);\n                current_group = \"\";\n            }\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/69", "generation": "#include <vector>\n#include <unordered_map>\n#include <algorithm>\nusing namespace std;\n\nint search(vector<int> lst) {\n    // Step 1: Count the frequency of each integer\n    unordered_map<int, int> frequencyMap;\n    for (int num : lst) {\n        frequencyMap[num]++;\n    }\n\n    // Step 2: Find the greatest integer that meets the criteria\n    int maxValidInteger = -1;\n    for (const auto& pair : frequencyMap) {\n        int num = pair.first;\n        int freq = pair.second;\n        if (freq >= num) {\n            maxValidInteger = max(maxValidInteger, num);\n        }\n    }\n\n    // Step 3: Return the result\n    return maxValidInteger;\n}\n\n// Example usage\n"}
{"task_id": "CPP/31", "generation": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nbool is_prime(long long n) {\n    // Handle edge cases\n    if (n <= 1) return false;\n    if (n == 2 || n == 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\n    // Check for factors from 5 to sqrt(n)\n    for (long long i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n\n    return true;\n}\n\n"}
{"task_id": "CPP/147", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nint get_max_triples(int n) {\n    // Step 1: Generate the vector a\n    vector<int> a(n);\n    for (int i = 1; i <= n; ++i) {\n        a[i-1] = i * i - i + 1;\n    }\n\n    // Step 2: Initialize the count of valid triples\n    int count = 0;\n\n    // Step 3: Iterate through all possible triples (i, j, k)\n    for (int i = 0; i < n; ++i) {\n        for (int j = i + 1; j < n; ++j) {\n            for (int k = j + 1; k < n; ++k) {\n                // Step 4: Check if the sum of the elements at these indices is a multiple of 3\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    // Step 5: Return the count of valid triples\n    return count;\n}\n\n"}
{"task_id": "CPP/105", "generation": "#include <vector>\n#include <string>\n#include <map>\n#include <algorithm>\nusing namespace std;\n\nvector<string> by_length(vector<int> arr) {\n    // Step 1: Filter and sort the integers between 1 and 9\n    vector<int> filtered;\n    for (int num : arr) {\n        if (num >= 1 && num <= 9) {\n            filtered.push_back(num);\n        }\n    }\n    sort(filtered.begin(), filtered.end());\n\n    // Step 2: Reverse the sorted list\n    reverse(filtered.begin(), filtered.end());\n\n    // Step 3: Map each digit to its corresponding name\n    map<int, string> digitToName = {\n        {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"},\n        {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}\n    };\n\n    vector<string> result;\n    for (int num : filtered) {\n        result.push_back(digitToName[num]);\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/22", "generation": "#include <iostream>\n#include <vector>\n#include <list>\n#include <boost/any.hpp>\n\ntypedef std::list<boost::any> list_any;\n\nstd::vector<int> filter_integers(list_any values) {\n    std::vector<int> result;\n    for (const auto& value : values) {\n        if (value.type() == typeid(int)) {\n            result.push_back(boost::any_cast<int>(value));\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/52", "generation": "#include <vector>\nusing namespace std;\n\nbool below_threshold(vector<int> l, int t) {\n    for (int num : l) {\n        if (num >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Example usage\n"}
{"task_id": "CPP/154", "generation": "#include <string>\nusing namespace std;\n\nbool cycpattern_check(string a, string b) {\n    // Concatenate the second word with itself to handle all rotations\n    string rotated_b = b + b;\n    // Check if the first word is a substring of any rotation of the second word\n    return rotated_b.find(a) != string::npos;\n}\n"}
{"task_id": "CPP/115", "generation": "#include<vector>\n#include<cmath> // for ceil function\nusing namespace std;\n\nint max_fill(vector<vector<int>> grid, int capacity) {\n    int total_lowers = 0;\n    \n    for (const auto& row : grid) {\n        int water_units = 0;\n        for (int unit : row) {\n            if (unit == 1) {\n                water_units++;\n            }\n        }\n        // Calculate the number of times the bucket needs to be lowered\n        total_lowers += ceil((double)water_units / capacity);\n    }\n    \n    return total_lowers;\n}\n\n// Example usage\n"}
{"task_id": "CPP/131", "generation": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint digits(int n) {\n    // Convert the integer to a string\n    string numStr = to_string(n);\n    \n    // Initialize the product to 1 (multiplicative identity)\n    int product = 1;\n    \n    // Flag to check if any odd digit is found\n    bool hasOdd = false;\n    \n    // Iterate through each character in the string\n    for (char ch : numStr) {\n        // Convert the character to an integer\n        int digit = ch - '0';\n        \n        // Check if the digit is odd\n        if (digit % 2 != 0) {\n            // Multiply the product by the odd digit\n            product *= digit;\n            hasOdd = true;\n        }\n    }\n    \n    // If no odd digit was found, return 0\n    if (!hasOdd) {\n        return 0;\n    }\n    \n    // Return the product of the odd digits\n    return product;\n}\n\n"}
{"task_id": "CPP/37", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<float> sort_even(vector<float> l) {\n    // Extract values at even indices\n    vector<float> even_values;\n    for (size_t i = 0; i < l.size(); i += 2) {\n        even_values.push_back(l[i]);\n    }\n\n    // Sort the extracted values\n    sort(even_values.begin(), even_values.end());\n\n    // Reconstruct the output vector\n    vector<float> result = l;\n    size_t even_index = 0;\n    for (size_t i = 0; i < l.size(); i += 2) {\n        result[i] = even_values[even_index++];\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/92", "generation": "#include <iostream>\n#include <cmath>\n\nbool any_int(float a, float b, float c) {\n    // Check if all numbers are integers\n    if (floor(a) != a || floor(b) != b || floor(c) != c) {\n        return false;\n    }\n\n    // Convert to integers for comparison\n    int int_a = static_cast<int>(a);\n    int int_b = static_cast<int>(b);\n    int int_c = static_cast<int>(c);\n\n    // Check if any one number is equal to the sum of the other two\n    if (int_a == int_b + int_c || int_b == int_a + int_c || int_c == int_a + int_b) {\n        return true;\n    }\n\n    return false;\n}\n\n"}
{"task_id": "CPP/118", "generation": "#include<iostream>\n#include<string>\n#include<unordered_set>\nusing namespace std;\n\nstring get_closest_vowel(string word) {\n    // Define the set of vowels\n    unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    \n    // Traverse the word from right to left\n    for (int i = word.size() - 1; i > 0; --i) {\n        // Check if the current character is a vowel\n        if (vowels.find(word[i]) != vowels.end()) {\n            // Check if it is surrounded by consonants\n            bool left_consonant = i > 0 && vowels.find(word[i-1]) == vowels.end();\n            bool right_consonant = i < word.size() - 1 && vowels.find(word[i+1]) == vowels.end();\n            \n            if (left_consonant && right_consonant) {\n                return string(1, word[i]);\n            }\n        }\n    }\n    \n    // If no such vowel is found, return an empty string\n    return \"\";\n}\n\n"}
{"task_id": "CPP/6", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<int> parse_nested_parens(string paren_string) {\n    vector<int> result;\n    stringstream ss(paren_string);\n    string group;\n    \n    while (ss >> group) {\n        int max_depth = 0;\n        int current_depth = 0;\n        \n        for (char c : group) {\n            if (c == '(') {\n                current_depth++;\n                if (current_depth > max_depth) {\n                    max_depth = current_depth;\n                }\n            } else if (c == ')') {\n                current_depth--;\n            }\n        }\n        \n        result.push_back(max_depth);\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/87", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<vector<int>> get_row(vector<vector<int>> lst, int x) {\n    vector<vector<int>> coordinates;\n    \n    // Traverse the 2D vector to find occurrences of x\n    for (int i = 0; i < lst.size(); ++i) {\n        for (int j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                coordinates.push_back({i, j});\n            }\n        }\n    }\n    \n    // Sort coordinates by rows in ascending order\n    // For coordinates within the same row, sort by columns in descending order\n    sort(coordinates.begin(), coordinates.end(), [](const vector<int>& a, const vector<int>& b) {\n        if (a[0] == b[0]) {\n            return a[1] > b[1];\n        }\n        return a[0] < b[0];\n    });\n    \n    return coordinates;\n}\n\n// Example usage\n"}
{"task_id": "CPP/2", "generation": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\ndouble truncate_number(double number) {\n    // Get the integer part of the number\n    double integer_part = floor(number);\n    // Subtract the integer part from the original number to get the decimal part\n    double decimal_part = number - integer_part;\n    return decimal_part;\n}\n\n"}
{"task_id": "CPP/16", "generation": "#include <iostream>\n#include <string>\n#include <unordered_set>\n#include <algorithm>\n\nusing namespace std;\n\nint count_distinct_characters(string str) {\n    // Convert the string to lowercase\n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    \n    // Use an unordered_set to store unique characters\n    unordered_set<char> unique_chars;\n    \n    // Iterate through the string and add each character to the set\n    for (char c : str) {\n        unique_chars.insert(c);\n    }\n    \n    // The size of the set is the number of distinct characters\n    return unique_chars.size();\n}\n\n"}
{"task_id": "CPP/135", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nint can_arrange(vector<int> arr) {\n    int n = arr.size();\n    int max_index = -1;\n\n    // Iterate through the vector starting from the second element\n    for (int i = 1; i < n; i++) {\n        // Check if the current element is not greater than or equal to the previous element\n        if (arr[i] < arr[i - 1]) {\n            // Update the max_index if the current index is greater than the previous max_index\n            if (i > max_index) {\n                max_index = i;\n            }\n        }\n    }\n\n    return max_index;\n}\n\n"}
{"task_id": "CPP/106", "generation": "#include <vector>\nusing namespace std;\n\nvector<int> f(int n) {\n    vector<int> result(n);\n    \n    for (int i = 1; i <= n; ++i) {\n        if (i % 2 == 0) {\n            // Compute factorial of i\n            int factorial = 1;\n            for (int j = 1; j <= i; ++j) {\n                factorial *= j;\n            }\n            result[i-1] = factorial;\n        } else {\n            // Compute sum of numbers from 1 to i\n            int sum = 0;\n            for (int j = 1; j <= i; ++j) {\n                sum += j;\n            }\n            result[i-1] = sum;\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/162", "generation": "#include <stdio.h>\n#include <string>\n#include <openssl/md5.h>\nusing namespace std;\n\nstring string_to_md5(string text) {\n    if (text.empty()) {\n        return \"\"; // Returning an empty string to represent None in C++\n    }\n\n    unsigned char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.size(), result);\n\n    string md5_hash;\n    char buffer[3];\n    for (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n        sprintf(buffer, \"%02x\", result[i]);\n        md5_hash += buffer;\n    }\n\n    return md5_hash;\n}\n"}
{"task_id": "CPP/5", "generation": "#include <vector>\n#include <iostream>\n\nusing namespace std;\n\nvector<int> intersperse(vector<int> numbers, int delimeter) {\n    // Check if the input vector is empty\n    if (numbers.empty()) {\n        return {};\n    }\n\n    // Create a new vector to store the result\n    vector<int> result;\n\n    // Iterate through the input vector\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        // Add the current element to the result\n        result.push_back(numbers[i]);\n\n        // If it's not the last element, add the delimiter\n        if (i < numbers.size() - 1) {\n            result.push_back(delimeter);\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/97", "generation": "#include<stdio.h>\n\nint multiply(int a, int b) {\n    // Extract the unit digits\n    int unit_digit_a = abs(a) % 10;\n    int unit_digit_b = abs(b) % 10;\n    \n    // Calculate the product of the unit digits\n    int product = unit_digit_a * unit_digit_b;\n    \n    return product;\n}\n\n"}
{"task_id": "CPP/44", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nstring change_base(int x, int base) {\n    if (x == 0) return \"0\"; // Special case for zero\n\n    string result = \"\";\n    while (x > 0) {\n        int remainder = x % base;\n        result += to_string(remainder); // Append the remainder to the result string\n        x /= base;\n    }\n\n    // Since we appended the remainders in reverse order, we need to reverse the string\n    reverse(result.begin(), result.end());\n\n    return result;\n}\n\n"}
{"task_id": "CPP/161", "generation": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring solve(string s) {\n    bool containsLetter = false;\n    for (char &c : s) {\n        if (isalpha(c)) {\n            containsLetter = true;\n            if (islower(c)) {\n                c = toupper(c);\n            } else {\n                c = tolower(c);\n            }\n        }\n    }\n    \n    if (!containsLetter) {\n        reverse(s.begin(), s.end());\n    }\n    \n    return s;\n}\n\n"}
{"task_id": "CPP/38", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring encode_cyclic(string s) {\n    int l = s.length();\n    int num = (l + 2) / 3;\n    string output;\n    for (int i = 0; i * 3 < l; i++) {\n        string x = s.substr(i * 3, 3);\n        if (x.length() == 3) {\n            x = x.substr(1) + x[0];\n        }\n        output += x;\n    }\n    return output;\n}\n\nstring decode_cyclic(string s) {\n    int l = s.length();\n    int num = (l + 2) / 3;\n    string output;\n    for (int i = 0; i * 3 < l; i++) {\n        string x = s.substr(i * 3, 3);\n        if (x.length() == 3) {\n            x = x[2] + x.substr(0, 2);\n        }\n        output += x;\n    }\n    return output;\n}\n"}
{"task_id": "CPP/93", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nstring encode(string message) {\n    string vowels = \"aeiouAEIOU\";\n    string encoded_message = \"\";\n\n    for (char &ch : message) {\n        if (isalpha(ch)) {\n            // Swap case\n            if (islower(ch)) {\n                ch = toupper(ch);\n            } else {\n                ch = tolower(ch);\n            }\n\n            // Replace vowels\n            if (vowels.find(ch) != string::npos) {\n                ch = tolower(ch);\n                int index = ch - 'a';\n                ch = (index + 2) % 26 + 'a';\n                if (isupper(ch)) {\n                    ch = toupper(ch);\n                }\n            }\n        }\n        encoded_message += ch;\n    }\n\n    return encoded_message;\n}\n"}
{"task_id": "CPP/152", "generation": "#include <vector>\n#include <cmath> // for std::abs\n\nusing namespace std;\n\nvector<int> compare(vector<int> game, vector<int> guess) {\n    vector<int> result;\n    for (size_t i = 0; i < game.size(); ++i) {\n        if (game[i] == guess[i]) {\n            result.push_back(0);\n        } else {\n            result.push_back(std::abs(game[i] - guess[i]));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/62", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<float> derivative(vector<float> xs) {\n    vector<float> result;\n    for (size_t i = 1; i < xs.size(); ++i) {\n        result.push_back(i * xs[i]);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/7", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm> // for std::find\n\nusing namespace std;\n\nvector<string> filter_by_substring(vector<string> strings, string substring) {\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.find(substring) != string::npos) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/24", "generation": "#include<stdio.h>\n\nint largest_divisor(int n) {\n    // Start from n-1 and go down to 1\n    for (int i = n - 1; i > 0; --i) {\n        // Check if i divides n evenly\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    // If no divisor is found (which shouldn't happen for n > 1), return 1\n    return 1;\n}\n\n"}
{"task_id": "CPP/79", "generation": "#include <iostream>\n#include <string>\n#include <algorithm> // for std::reverse\n\nusing namespace std;\n\nstring decimal_to_binary(int decimal) {\n    if (decimal == 0) {\n        return \"db0db\";\n    }\n\n    string binary;\n    while (decimal > 0) {\n        binary += (decimal % 2 == 0) ? '0' : '1';\n        decimal /= 2;\n    }\n\n    // Reverse the string to get the correct binary representation\n    reverse(binary.begin(), binary.end());\n\n    // Add the \"db\" characters at the beginning and end\n    return \"db\" + binary + \"db\";\n}\n\n"}
{"task_id": "CPP/155", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n\nvector<int> even_odd_count(int num) {\n    num = abs(num);  // Convert negative number to positive\n    int even_count = 0;\n    int odd_count = 0;\n    \n    while (num > 0) {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n        num /= 10;\n    }\n    \n    return {even_count, odd_count};\n}\n"}
{"task_id": "CPP/4", "generation": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <numeric> // for std::accumulate\n\nusing namespace std;\n\nfloat mean_absolute_deviation(const vector<float>& numbers) {\n    if (numbers.empty()) {\n        return 0.0; // Return 0 if the vector is empty to avoid division by zero\n    }\n\n    // Step 1: Calculate the mean of the dataset\n    float sum = accumulate(numbers.begin(), numbers.end(), 0.0);\n    float mean = sum / numbers.size();\n\n    // Step 2: Compute the absolute difference between each element and the mean\n    float absolute_deviations_sum = 0.0;\n    for (float number : numbers) {\n        absolute_deviations_sum += fabs(number - mean);\n    }\n\n    // Step 3: Divide the sum of absolute deviations by the number of elements\n    float mad = absolute_deviations_sum / numbers.size();\n\n    return mad;\n}\n\n"}
{"task_id": "CPP/56", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool correct_bracketing(string brackets) {\n    int count = 0;\n    for (char bracket : brackets) {\n        if (bracket == '<') {\n            count++;\n        } else if (bracket == '>') {\n            count--;\n        }\n        // If count goes negative, it means there's an unmatched closing bracket\n        if (count < 0) {\n            return false;\n        }\n    }\n    // At the end, count should be zero for correct bracketing\n    return count == 0;\n}\n\n"}
{"task_id": "CPP/159", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<int> eat(int number, int need, int remaining) {\n    int total_eaten = number + min(need, remaining);\n    int remaining_after_eating = max(0, remaining - need);\n    return {total_eaten, remaining_after_eating};\n}\n"}
{"task_id": "CPP/83", "generation": "#include <iostream>\n#include <string>\n\nint starts_one_ends(int n) {\n    if (n == 1) {\n        return 1;  // Special case: only the number 1 itself\n    }\n\n    int count = 0;\n    for (int i = 10 * (n - 1); i < 10 * n; ++i) {\n        std::string num_str = std::to_string(i);\n        if (num_str.front() == '1' || num_str.back() == '1') {\n            ++count;\n        }\n    }\n\n    return count;\n}\n"}
{"task_id": "CPP/27", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring flip_case(string str) {\n    for (int i = 0; i < str.length(); ++i) {\n        if (isupper(str[i])) {\n            str[i] = tolower(str[i]);\n        } else if (islower(str[i])) {\n            str[i] = toupper(str[i]);\n        }\n    }\n    return str;\n}\n\n"}
{"task_id": "CPP/146", "generation": "#include <vector>\n#include <string>\n#include <cmath>\nusing namespace std;\n\nint specialFilter(vector<int> nums) {\n    int count = 0;\n    \n    for (int num : nums) {\n        // Check if the number is greater than 10\n        if (num > 10) {\n            // Convert the number to a string to easily access the first and last digits\n            string numStr = to_string(abs(num));\n            \n            // Extract the first and last digits\n            char firstDigit = numStr[0];\n            char lastDigit = numStr[numStr.length() - 1];\n            \n            // Check if both digits are odd\n            if ((firstDigit == '1' || firstDigit == '3' || firstDigit == '5' || firstDigit == '7' || firstDigit == '9') &&\n                (lastDigit == '1' || lastDigit == '3' || lastDigit == '5' || lastDigit == '7' || lastDigit == '9')) {\n                count++;\n            }\n        }\n    }\n    \n    return count;\n}\n\n// Example usage\n"}
{"task_id": "CPP/81", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> numerical_letter_grade(vector<float> grades) {\n    vector<string> letter_grades;\n    for (float gpa : grades) {\n        if (gpa == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (gpa > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (gpa > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (gpa > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (gpa > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (gpa > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (gpa > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (gpa > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (gpa > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (gpa > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (gpa > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (gpa > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n}\n"}
{"task_id": "CPP/136", "generation": "#include <vector>\n#include <limits.h> // For INT_MAX and INT_MIN\n\nusing namespace std;\n\nvector<int> largest_smallest_integers(vector<int> lst) {\n    int largest_negative = INT_MIN; // Initialize to the smallest possible integer\n    int smallest_positive = INT_MAX; // Initialize to the largest possible integer\n\n    for (int num : lst) {\n        if (num < 0) {\n            // Update largest_negative if num is larger than the current largest_negative\n            if (num > largest_negative) {\n                largest_negative = num;\n            }\n        } else if (num > 0) {\n            // Update smallest_positive if num is smaller than the current smallest_positive\n            if (num < smallest_positive) {\n                smallest_positive = num;\n            }\n        }\n    }\n\n    // If no negative number was found, set largest_negative to 0\n    if (largest_negative == INT_MIN) {\n        largest_negative = 0;\n    }\n\n    // If no positive number was found, set smallest_positive to 0\n    if (smallest_positive == INT_MAX) {\n        smallest_positive = 0;\n    }\n\n    return {largest_negative, smallest_positive};\n}\n\n// Example usage\n"}
{"task_id": "CPP/67", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <cctype>\n\nusing namespace std;\n\nint fruit_distribution(string s, int n) {\n    int apples = 0, oranges = 0;\n    stringstream ss(s);\n    string word;\n    \n    // Extract the number of apples\n    ss >> apples;\n    ss >> word; // Skip the word \"apples\"\n    \n    // Extract the number of oranges\n    ss >> word; // Skip the word \"and\"\n    ss >> oranges;\n    ss >> word; // Skip the word \"oranges\"\n    \n    // Calculate the number of mangoes\n    int mangoes = n - apples - oranges;\n    \n    return mangoes;\n}\n\n"}
{"task_id": "CPP/48", "generation": "#include <iostream>\n#include <string>\n\nbool is_palindrome(const std::string& text) {\n    int left = 0;\n    int right = text.length() - 1;\n\n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/125", "generation": "#include <vector>\n#include <string>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> split_words(string txt) {\n    // Check for whitespace\n    if (txt.find(' ') != string::npos) {\n        vector<string> result;\n        stringstream ss(txt);\n        string word;\n        while (ss >> word) {\n            result.push_back(word);\n        }\n        return result;\n    }\n    \n    // Check for commas\n    if (txt.find(',') != string::npos) {\n        vector<string> result;\n        stringstream ss(txt);\n        string word;\n        while (getline(ss, word, ',')) {\n            result.push_back(word);\n        }\n        return result;\n    }\n    \n    // Count odd-indexed lowercase letters\n    int count = 0;\n    for (char c : txt) {\n        if (islower(c)) {\n            int index = c - 'a';\n            if (index % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    \n    return {to_string(count)};\n}\n"}
{"task_id": "CPP/160", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\n\nint do_algebra(vector<string> operators, vector<int> operands) {\n    // Initialize the result with the first operand\n    int result = operands[0];\n    \n    // Iterate through the operators and operands to build the expression\n    for (size_t i = 0; i < operators.size(); ++i) {\n        string op = operators[i];\n        int operand = operands[i + 1];\n        \n        if (op == \"+\") {\n            result += operand;\n        } else if (op == \"-\") {\n            result -= operand;\n        } else if (op == \"*\") {\n            result *= operand;\n        } else if (op == \"//\") {\n            result /= operand; // Note: C++ uses '/' for integer division, which is equivalent to floor division\n        } else if (op == \"**\") {\n            result = pow(result, operand);\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/151", "generation": "#include <vector>\n#include <cmath>\nusing namespace std;\n\nlong long double_the_difference(vector<float> lst) {\n    long long sum = 0;\n    \n    for (float num : lst) {\n        // Check if the number is an integer and positive\n        if (num > 0 && floor(num) == num) {\n            int int_num = static_cast<int>(num);\n            // Check if the number is odd\n            if (int_num % 2 != 0) {\n                sum += int_num * int_num;\n            }\n        }\n    }\n    \n    return sum;\n}\n"}
{"task_id": "CPP/117", "generation": "#include <vector>\n#include <string>\n#include <sstream>\n#include <unordered_set>\n\nusing namespace std;\n\nvector<string> select_words(string s, int n) {\n    // Define a set of vowels for quick lookup\n    unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    \n    // Result vector to store words with exactly n consonants\n    vector<string> result;\n    \n    // Use a stringstream to split the input string into words\n    stringstream ss(s);\n    string word;\n    \n    while (ss >> word) {\n        int consonant_count = 0;\n        \n        // Count consonants in the current word\n        for (char c : word) {\n            if (isalpha(c) && vowels.find(c) == vowels.end()) {\n                consonant_count++;\n            }\n        }\n        \n        // If the word has exactly n consonants, add it to the result\n        if (consonant_count == n) {\n            result.push_back(word);\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/78", "generation": "#include <iostream>\n#include <string>\n#include <unordered_set>\nusing namespace std;\n\nint hex_key(string num) {\n    // Define the set of prime hexadecimal digits\n    unordered_set<char> prime_digits = {'2', '3', '5', '7', 'B', 'D'};\n    \n    // Initialize the count of prime digits\n    int count = 0;\n    \n    // Iterate through the input string\n    for (char c : num) {\n        // Check if the current character is in the set of prime digits\n        if (prime_digits.find(c) != prime_digits.end()) {\n            count++;\n        }\n    }\n    \n    // Return the count of prime digits\n    return count;\n}\n\n// Test cases\n"}
{"task_id": "CPP/74", "generation": "#include <vector>\n#include <string>\n#include <numeric> // for accumulate\n\nusing namespace std;\n\nint total_chars(const vector<string>& lst) {\n    return accumulate(lst.begin(), lst.end(), 0, [](int sum, const string& s) {\n        return sum + s.size();\n    });\n}\n\nvector<string> total_match(vector<string> lst1, vector<string> lst2) {\n    int total_chars_lst1 = total_chars(lst1);\n    int total_chars_lst2 = total_chars(lst2);\n\n    if (total_chars_lst1 <= total_chars_lst2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n"}
{"task_id": "CPP/53", "generation": "#include<stdio.h>\n#include<stdlib.h>\n\nint add(int x, int y) {\n    return x + y;\n}\n\n"}
{"task_id": "CPP/98", "generation": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint count_upper(string s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) { // Iterate through even indices\n        char c = s[i];\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/140", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring fix_spaces(string text) {\n    string result;\n    int n = text.length();\n    int i = 0;\n\n    while (i < n) {\n        if (text[i] == ' ') {\n            int count = 0;\n            // Count consecutive spaces\n            while (i < n && text[i] == ' ') {\n                count++;\n                i++;\n            }\n            // Replace with underscore if count is 1\n            if (count == 1) {\n                result += '_';\n            }\n            // Replace with hyphen if count is more than 2\n            else if (count > 2) {\n                result += '-';\n            }\n            // If count is 2, add two underscores\n            else if (count == 2) {\n                result += \"__\";\n            }\n        } else {\n            // Add non-space characters to the result\n            result += text[i];\n            i++;\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/34", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> unique(vector<int> l) {\n    // Step 1: Sort the vector\n    sort(l.begin(), l.end());\n    \n    // Step 2: Remove duplicates\n    l.erase(unique(l.begin(), l.end()), l.end());\n    \n    return l;\n}\n\n"}
{"task_id": "CPP/66", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint digitSum(string s) {\n    int sum = 0;\n    for (char c : s) {\n        if (c >= 'A' && c <= 'Z') {\n            sum += c;\n        }\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/120", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> maximum(vector<int> arr, int k) {\n    // Step 1: Sort the array in ascending order\n    sort(arr.begin(), arr.end());\n    \n    // Step 2: Select the top k elements from the end of the sorted array\n    vector<int> result(arr.end() - k, arr.end());\n    \n    // Step 3: Sort the selected k elements in ascending order\n    sort(result.begin(), result.end());\n    \n    return result;\n}\n"}
{"task_id": "CPP/139", "generation": "#include <stdio.h>\n\n// Function to calculate the factorial of a number\nlong long factorial(int num) {\n    long long result = 1;\n    for (int i = 1; i <= num; i++) {\n        result *= i;\n    }\n    return result;\n}\n\n// Function to calculate the Brazilian factorial\nlong long special_factorial(int n) {\n    long long result = 1;\n    for (int i = n; i >= 1; i--) {\n        result *= factorial(i);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/12", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring longest(vector<string> strings) {\n    // Check if the vector is empty\n    if (strings.empty()) {\n        return \"\"; // Return an empty string to represent None\n    }\n\n    // Initialize variables to keep track of the longest string\n    string longest_string = strings[0];\n\n    // Iterate through the vector to find the longest string\n    for (const string& str : strings) {\n        if (str.length() > longest_string.length()) {\n            longest_string = str;\n        }\n    }\n\n    return longest_string;\n}\n\n"}
{"task_id": "CPP/121", "generation": "#include <vector>\nusing namespace std;\n\nint solution(vector<int> lst) {\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/35", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm> // for std::max_element\n\nusing namespace std;\n\nfloat max_element(const vector<float>& l) {\n    // Check if the vector is empty\n    if (l.empty()) {\n        throw invalid_argument(\"Vector is empty\");\n    }\n    \n    // Use std::max_element to find the maximum element\n    auto max_it = max_element(l.begin(), l.end());\n    \n    // Return the value of the maximum element\n    return *max_it;\n}\n\n"}
{"task_id": "CPP/20", "generation": "#include <vector>\n#include <algorithm>\n#include <limits>\n\nusing namespace std;\n\nvector<float> find_closest_elements(vector<float> numbers) {\n    // Sort the vector to facilitate easy comparison of adjacent elements\n    sort(numbers.begin(), numbers.end());\n    \n    // Initialize variables to track the minimum difference and the closest pair\n    float min_diff = numeric_limits<float>::infinity();\n    vector<float> closest_pair;\n    \n    // Iterate through the sorted vector to find the closest pair\n    for (size_t i = 0; i < numbers.size() - 1; ++i) {\n        float diff = numbers[i + 1] - numbers[i];\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = {numbers[i], numbers[i + 1]};\n        }\n    }\n    \n    return closest_pair;\n}\n"}
{"task_id": "CPP/19", "generation": "#include <iostream>\n#include <string>\n#include <vector>\n#include <map>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nstring sort_numbers(string numbers) {\n    // Step 1: Create a mapping from number words to their corresponding integer values\n    map<string, int> word_to_num = {\n        {\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3}, {\"four\", 4},\n        {\"five\", 5}, {\"six\", 6}, {\"seven\", 7}, {\"eight\", 8}, {\"nine\", 9}\n    };\n\n    // Step 2: Split the input string into individual number words\n    vector<string> words;\n    stringstream ss(numbers);\n    string word;\n    while (ss >> word) {\n        words.push_back(word);\n    }\n\n    // Step 3: Sort the words based on their mapped integer values\n    sort(words.begin(), words.end(), [&](const string &a, const string &b) {\n        return word_to_num[a] < word_to_num[b];\n    });\n\n    // Step 4: Reconstruct the string from the sorted words\n    string sorted_numbers;\n    for (size_t i = 0; i < words.size(); ++i) {\n        if (i != 0) {\n            sorted_numbers += \" \";\n        }\n        sorted_numbers += words[i];\n    }\n\n    return sorted_numbers;\n}\n\n"}
{"task_id": "CPP/85", "generation": "#include <vector>\nusing namespace std;\n\nint add(vector<int> lst) {\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 2 != 0 && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/21", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm> // for std::min_element and std::max_element\n\nusing namespace std;\n\nvector<float> rescale_to_unit(vector<float> numbers) {\n    // Find the minimum and maximum values in the vector\n    float min_value = *min_element(numbers.begin(), numbers.end());\n    float max_value = *max_element(numbers.begin(), numbers.end());\n\n    // Apply the linear transformation to each element\n    vector<float> rescaled_numbers;\n    for (float num : numbers) {\n        float rescaled_num = (num - min_value) / (max_value - min_value);\n        rescaled_numbers.push_back(rescaled_num);\n    }\n\n    return rescaled_numbers;\n}\n\n"}
{"task_id": "CPP/119", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nbool is_balanced(const string& s) {\n    int balance = 0;\n    for (char c : s) {\n        if (c == '(') {\n            balance++;\n        } else {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance == 0;\n}\n\nstring match_parens(vector<string> lst) {\n    string s1 = lst[0];\n    string s2 = lst[1];\n    if (is_balanced(s1 + s2) || is_balanced(s2 + s1)) {\n        return \"Yes\";\n    }\n    return \"No\";\n}\n"}
{"task_id": "CPP/30", "generation": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<float> get_positive(vector<float> l) {\n    vector<float> positive_numbers;\n    for (float num : l) {\n        if (num > 0) {\n            positive_numbers.push_back(num);\n        }\n    }\n    return positive_numbers;\n}\n\n"}
{"task_id": "CPP/64", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nint vowels_count(string s) {\n    int count = 0;\n    transform(s.begin(), s.end(), s.begin(), ::tolower); // Convert the string to lowercase\n\n    for (char c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n\n    // Check if 'y' is at the end of the word\n    if (!s.empty() && s.back() == 'y') {\n        count++;\n    }\n\n    return count;\n}\n\n// Example usage\n"}
{"task_id": "CPP/128", "generation": "#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n\nint prod_signs(vector<int> arr) {\n    // Handle the special case for an empty vector\n    if (arr.empty()) {\n        return -32768;\n    }\n\n    int product_of_signs = 1;\n    int sum_of_magnitudes = 0;\n\n    for (int num : arr) {\n        // Determine the sign of the number\n        int sign = (num > 0) ? 1 : (num < 0) ? -1 : 0;\n        // Update the product of signs\n        product_of_signs *= sign;\n        // Update the sum of magnitudes\n        sum_of_magnitudes += abs(num);\n    }\n\n    // Multiply the sum of magnitudes by the product of signs\n    return sum_of_magnitudes * product_of_signs;\n}\n\n// Example usage\n"}
{"task_id": "CPP/127", "generation": "#include <vector>\n#include <string>\n#include <cmath>\nusing namespace std;\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nstring intersection(vector<int> interval1, vector<int> interval2) {\n    int start1 = interval1[0], end1 = interval1[1];\n    int start2 = interval2[0], end2 = interval2[1];\n    \n    // Find the intersection of the two intervals\n    int intersection_start = max(start1, start2);\n    int intersection_end = min(end1, end2);\n    \n    // If there is no intersection, return \"NO\"\n    if (intersection_start > intersection_end) {\n        return \"NO\";\n    }\n    \n    // Calculate the length of the intersection\n    int intersection_length = intersection_end - intersection_start + 1;\n    \n    // Check if the length is a prime number\n    if (is_prime(intersection_length)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n"}
{"task_id": "CPP/122", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nint add_elements(vector<int> arr, int k) {\n    int sum_of_elements = 0;\n    for (int i = 0; i < min(k, static_cast<int>(arr.size())); ++i) {\n        if (arr[i] < 100) {\n            sum_of_elements += arr[i];\n        }\n    }\n    return sum_of_elements;\n}\n"}
{"task_id": "CPP/59", "generation": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint largest_prime_factor(int n) {\n    int largest_factor = 1;\n\n    // Divide by 2 to remove all factors of 2\n    while (n % 2 == 0) {\n        largest_factor = 2;\n        n /= 2;\n    }\n\n    // Check for odd factors from 3 to sqrt(n)\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n            largest_factor = i;\n            n /= i;\n        }\n    }\n\n    // If n is still greater than 2, then it must be prime\n    if (n > 2) {\n        largest_factor = n;\n    }\n\n    return largest_factor;\n}\n\n"}
{"task_id": "CPP/134", "generation": "#include <iostream>\n#include <string>\n#include <cctype>\n\nusing namespace std;\n\nbool check_if_last_char_is_a_letter(string txt) {\n    // Check if the string is empty\n    if (txt.empty()) {\n        return false;\n    }\n\n    // Get the last character\n    char last_char = txt.back();\n\n    // Check if the last character is an alphabetical character\n    if (!isalpha(last_char)) {\n        return false;\n    }\n\n    // Check if the last character is not part of a word\n    // This means the last character should be followed by a space or be the last character in the string\n    if (txt.size() > 1 && txt[txt.size() - 2] != ' ') {\n        return false;\n    }\n\n    return true;\n}\n\n// Test cases\n"}
{"task_id": "CPP/42", "generation": "#include <vector>\nusing namespace std;\n\nvector<int> incr_list(vector<int> l) {\n    vector<int> result;\n    for (int i = 0; i < l.size(); i++) {\n        result.push_back(l[i] + 1);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/11", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring string_xor(string a, string b) {\n    // Ensure both strings are of the same length\n    if (a.length() != b.length()) {\n        throw invalid_argument(\"Input strings must be of the same length\");\n    }\n\n    string result = \"\";\n    for (size_t i = 0; i < a.length(); ++i) {\n        // Perform XOR operation: '0' ^ '0' = '0', '1' ^ '1' = '0', '0' ^ '1' = '1', '1' ^ '0' = '1'\n        char xor_char = (a[i] == b[i]) ? '0' : '1';\n        result += xor_char;\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/40", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nbool triples_sum_to_zero(vector<int> l) {\n    // Sort the vector\n    sort(l.begin(), l.end());\n    \n    int n = l.size();\n    \n    // Iterate through the vector\n    for (int i = 0; i < n - 2; ++i) {\n        // Skip duplicates for the first element\n        if (i > 0 && l[i] == l[i - 1]) continue;\n        \n        int left = i + 1;\n        int right = n - 1;\n        \n        while (left < right) {\n            int sum = l[i] + l[left] + l[right];\n            \n            if (sum == 0) {\n                return true;\n            } else if (sum < 0) {\n                // Move the left pointer to the right to increase the sum\n                ++left;\n            } else {\n                // Move the right pointer to the left to decrease the sum\n                --right;\n            }\n        }\n    }\n    \n    return false;\n}\n\n// Example usage\n#include <iostream>\n\n"}
{"task_id": "CPP/13", "generation": "#include <iostream>\n\nint greatest_common_divisor(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\n"}
{"task_id": "CPP/130", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<int> tri(int n) {\n    if (n < 0) {\n        return {};\n    }\n\n    vector<int> tribonacci_sequence(n + 1, 0);\n    tribonacci_sequence[0] = 1;\n\n    for (int i = 1; i <= n; ++i) {\n        if (i % 2 == 0) {\n            tribonacci_sequence[i] = 1 + i / 2;\n        } else {\n            if (i == 1) {\n                tribonacci_sequence[i] = 3;\n            } else {\n                tribonacci_sequence[i] = tribonacci_sequence[i - 1] + tribonacci_sequence[i - 2] + tribonacci_sequence[i - 3];\n            }\n        }\n    }\n\n    return tribonacci_sequence;\n}\n"}
{"task_id": "CPP/60", "generation": "#include<iostream>\nusing namespace std;\n\nint sum_to_n(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; ++i) {\n        sum += i;\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/23", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nint strlen(string str) {\n    return str.length();\n}\n"}
{"task_id": "CPP/46", "generation": "#include <stdio.h>\n\nint fib4(int n) {\n    // Base cases\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n\n    // Array to store the last four Fib4 numbers\n    int fib4_values[4] = {0, 0, 2, 0};\n\n    // Compute Fib4 numbers iteratively\n    for (int i = 4; i <= n; i++) {\n        int next_fib4 = fib4_values[0] + fib4_values[1] + fib4_values[2] + fib4_values[3];\n        // Shift the values to the left\n        fib4_values[0] = fib4_values[1];\n        fib4_values[1] = fib4_values[2];\n        fib4_values[2] = fib4_values[3];\n        fib4_values[3] = next_fib4;\n    }\n\n    // The result is the last computed value\n    return fib4_values[3];\n}\n\n"}
{"task_id": "CPP/51", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nstring remove_vowels(string text) {\n    string result;\n    for (char c : text) {\n        // Check if the character is a vowel (both uppercase and lowercase)\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' &&\n            c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n            result += c;\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/18", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint how_many_times(string str, string substring) {\n    int count = 0;\n    int sub_len = substring.length();\n    int str_len = str.length();\n\n    if (sub_len == 0 || str_len == 0) {\n        return 0;\n    }\n\n    for (int i = 0; i <= str_len - sub_len; ++i) {\n        if (str.substr(i, sub_len) == substring) {\n            ++count;\n        }\n    }\n\n    return count;\n}\n\n"}
{"task_id": "CPP/143", "generation": "#include <iostream>\n#include <string>\n#include <vector>\n#include <cmath>\n\nusing namespace std;\n\n// Function to check if a number is prime\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true; // 2 is the only even prime number\n    if (n % 2 == 0) return false; // Other even numbers are not prime\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\n// Function to split the sentence into words\nvector<string> split(const string& sentence) {\n    vector<string> words;\n    string word;\n    for (char ch : sentence) {\n        if (ch == ' ') {\n            if (!word.empty()) {\n                words.push_back(word);\n                word.clear();\n            }\n        } else {\n            word += ch;\n        }\n    }\n    if (!word.empty()) {\n        words.push_back(word);\n    }\n    return words;\n}\n\n// Function to filter words by their length being prime\nstring words_in_sentence(string sentence) {\n    vector<string> words = split(sentence);\n    string result;\n    for (const string& word : words) {\n        if (isPrime(word.length())) {\n            if (!result.empty()) {\n                result += \" \";\n            }\n            result += word;\n        }\n    }\n    return result;\n}\n\n// Example usage\n"}
{"task_id": "CPP/108", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n\nint sum_of_digits(int num) {\n    int total = 0;\n    int abs_num = abs(num);\n    while (abs_num > 0) {\n        total += abs_num % 10;\n        abs_num /= 10;\n    }\n    if (num < 0) {\n        total = -total;\n    }\n    return total;\n}\n\nint count_nums(vector<int> n) {\n    int count = 0;\n    for (int num : n) {\n        if (sum_of_digits(num) > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/43", "generation": "#include <vector>\n#include <unordered_set>\nusing namespace std;\n\nbool pairs_sum_to_zero(vector<int> l) {\n    unordered_set<int> seen;\n    \n    for (int num : l) {\n        if (seen.find(-num) != seen.end()) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    \n    return false;\n}\n\n// Example usage\n"}
{"task_id": "CPP/70", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> strange_sort_list(vector<int> lst) {\n    // Sort the input vector in ascending order\n    sort(lst.begin(), lst.end());\n    \n    // Initialize the result vector\n    vector<int> result;\n    \n    // Initialize two pointers: one at the beginning and one at the end\n    int start = 0;\n    int end = lst.size() - 1;\n    \n    // Alternate between picking elements from the start and end\n    while (start <= end) {\n        if (start <= end) {\n            result.push_back(lst[start]);\n            start++;\n        }\n        if (start <= end) {\n            result.push_back(lst[end]);\n            end--;\n        }\n    }\n    \n    return result;\n}\n\n// Example usage\n"}
{"task_id": "CPP/63", "generation": "#include <stdio.h>\n\nint fibfib(int n) {\n    if (n == 0 || n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 1;\n    }\n\n    int a = 0, b = 0, c = 1;\n    int result = 0;\n\n    for (int i = 3; i <= n; ++i) {\n        result = a + b + c;\n        a = b;\n        b = c;\n        c = result;\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/89", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring encrypt(string s) {\n    string result = \"\";\n    int shift = 4; // 2 * 2 = 4\n\n    for (char c : s) {\n        if (c >= 'a' && c <= 'z') {\n            // Shift within lowercase letters\n            c = 'a' + (c - 'a' + shift) % 26;\n        } else if (c >= 'A' && c <= 'Z') {\n            // Shift within uppercase letters\n            c = 'A' + (c - 'A' + shift) % 26;\n        }\n        result += c;\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/26", "generation": "#include<stdio.h>\n#include<vector>\n#include<unordered_map>\nusing namespace std;\n\nvector<int> remove_duplicates(vector<int> numbers) {\n    unordered_map<int, int> count_map;\n    vector<int> result;\n\n    // Count the occurrences of each number\n    for (int num : numbers) {\n        count_map[num]++;\n    }\n\n    // Add numbers that occur exactly once to the result\n    for (int num : numbers) {\n        if (count_map[num] == 1) {\n            result.push_back(num);\n        }\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/104", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\n// Helper function to check if a number contains any even digit\nbool hasEvenDigit(int num) {\n    while (num > 0) {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            return true;\n        }\n        num /= 10;\n    }\n    return false;\n}\n\nvector<int> unique_digits(vector<int> x) {\n    vector<int> result;\n    \n    // Filter out numbers that contain any even digit\n    for (int num : x) {\n        if (!hasEvenDigit(num)) {\n            result.push_back(num);\n        }\n    }\n    \n    // Sort the result in increasing order\n    sort(result.begin(), result.end());\n    \n    return result;\n}\n\n// Example usage\n"}
{"task_id": "CPP/90", "generation": "#include <vector>\n#include <algorithm>\n#include <iostream>\nusing namespace std;\n\nint next_smallest(vector<int> lst) {\n    // Edge case: if the vector is empty or has only one unique element\n    if (lst.size() < 2) {\n        return -1; // Return -1 to indicate no 2nd smallest element\n    }\n\n    // Sort the vector\n    sort(lst.begin(), lst.end());\n\n    // Find the 2nd smallest element\n    int smallest = lst[0];\n    for (int i = 1; i < lst.size(); ++i) {\n        if (lst[i] != smallest) {\n            return lst[i];\n        }\n    }\n\n    // If all elements are the same, return -1\n    return -1;\n}\n\n"}
{"task_id": "CPP/126", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nbool is_sorted(vector<int> lst) {\n    // Check if the vector is sorted in ascending order\n    if (!is_sorted(lst.begin(), lst.end())) {\n        return false;\n    }\n\n    // Check if any number appears more than twice\n    for (size_t i = 0; i < lst.size(); ++i) {\n        int count = 0;\n        for (size_t j = 0; j < lst.size(); ++j) {\n            if (lst[i] == lst[j]) {\n                count++;\n            }\n            if (count > 2) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n"}
{"task_id": "CPP/68", "generation": "#include<vector>\nusing namespace std;\n\nvector<int> pluck(vector<int> arr) {\n    // Initialize variables to store the smallest even value and its index\n    int min_even_value = -1;\n    int min_even_index = -1;\n    \n    // Iterate through the vector\n    for (int i = 0; i < arr.size(); ++i) {\n        // Check if the current element is even\n        if (arr[i] % 2 == 0) {\n            // If it's the first even value found or it's smaller than the current smallest even value\n            if (min_even_value == -1 || arr[i] < min_even_value) {\n                min_even_value = arr[i];\n                min_even_index = i;\n            }\n        }\n    }\n    \n    // If no even value was found, return an empty vector\n    if (min_even_value == -1) {\n        return {};\n    }\n    \n    // Return the smallest even value and its index\n    return {min_even_value, min_even_index};\n}\n"}
{"task_id": "CPP/58", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <set>\n\nusing namespace std;\n\nvector<int> common(vector<int> l1, vector<int> l2) {\n    // Sort both vectors\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n\n    // Use a set to store unique common elements\n    set<int> commonSet;\n\n    // Use two pointers to traverse both vectors\n    int i = 0, j = 0;\n    while (i < l1.size() && j < l2.size()) {\n        if (l1[i] == l2[j]) {\n            commonSet.insert(l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n\n    // Convert the set to a sorted vector\n    vector<int> result(commonSet.begin(), commonSet.end());\n    return result;\n}\n\n"}
{"task_id": "CPP/112", "generation": "#include<iostream>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nvector<string> reverse_delete(string s, string c) {\n    // Step 1: Remove characters from s that are in c\n    string result;\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            result += ch;\n        }\n    }\n    \n    // Step 2: Check if the result string is a palindrome\n    bool isPalindrome = true;\n    int n = result.size();\n    for (int i = 0; i < n / 2; ++i) {\n        if (result[i] != result[n - i - 1]) {\n            isPalindrome = false;\n            break;\n        }\n    }\n    \n    // Step 3: Prepare the result vector\n    vector<string> resultVector;\n    resultVector.push_back(result);\n    resultVector.push_back(isPalindrome ? \"True\" : \"False\");\n    \n    return resultVector;\n}\n\n"}
{"task_id": "CPP/96", "generation": "#include <vector>\n#include <cmath>\n\nusing namespace std;\n\nvector<int> count_up_to(int n) {\n    if (n <= 2) {\n        return {};\n    }\n\n    // Create a boolean array \"prime[0..n]\" and initialize\n    // all entries it as true. A value in prime[i] will\n    // finally be false if i is Not a prime, else true.\n    vector<bool> prime(n, true);\n\n    // 0 and 1 are not prime numbers\n    prime[0] = prime[1] = false;\n\n    for (int p = 2; p * p < n; p++) {\n        // If prime[p] is not changed, then it is a prime\n        if (prime[p] == true) {\n            // Update all multiples of p to false\n            for (int i = p * p; i < n; i += p) {\n                prime[i] = false;\n            }\n        }\n    }\n\n    // Collect all prime numbers\n    vector<int> primes;\n    for (int p = 2; p < n; p++) {\n        if (prime[p]) {\n            primes.push_back(p);\n        }\n    }\n\n    return primes;\n}\n\n// Example usage\n"}
{"task_id": "CPP/157", "generation": "#include<stdio.h>\n#include<math.h>\n\nbool right_angle_triangle(float a, float b, float c) {\n    // Ensure the sides are in non-decreasing order\n    if (a > b) {\n        float temp = a;\n        a = b;\n        b = temp;\n    }\n    if (b > c) {\n        float temp = b;\n        b = c;\n        c = temp;\n    }\n    if (a > b) {\n        float temp = a;\n        a = b;\n        b = temp;\n    }\n\n    // Now c is the longest side\n    return (pow(a, 2) + pow(b, 2) == pow(c, 2));\n}\n\n"}
{"task_id": "CPP/99", "generation": "#include <iostream>\n#include <string>\n#include <cmath>\n\nint closest_integer(std::string value) {\n    // Convert the string to a double\n    double number = std::stod(value);\n    \n    // Determine the closest integer\n    int closest;\n    if (number >= 0) {\n        closest = static_cast<int>(number + 0.5);\n    } else {\n        closest = static_cast<int>(number - 0.5);\n    }\n    \n    return closest;\n}\n\n"}
{"task_id": "CPP/149", "generation": "#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nvector<string> sorted_list_sum(vector<string> lst) {\n    // Step 1: Filter out strings with odd lengths\n    vector<string> filtered_lst;\n    for (const string& s : lst) {\n        if (s.length() % 2 == 0) {\n            filtered_lst.push_back(s);\n        }\n    }\n\n    // Step 2: Sort the filtered strings\n    sort(filtered_lst.begin(), filtered_lst.end(), [](const string& a, const string& b) {\n        if (a.length() == b.length()) {\n            return a < b; // Sort alphabetically if lengths are the same\n        }\n        return a.length() < b.length(); // Sort by length\n    });\n\n    return filtered_lst;\n}\n\n// Example usage\n"}
{"task_id": "CPP/86", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <sstream>\n\nusing namespace std;\n\nstring anti_shuffle(string s) {\n    // Create a stringstream to split the input string by spaces\n    stringstream ss(s);\n    string word;\n    string result;\n\n    // Process each word in the string\n    while (ss >> word) {\n        // Sort the characters of the word in ascending order\n        sort(word.begin(), word.end());\n        // Append the sorted word to the result string\n        result += word + \" \";\n    }\n\n    // Remove the trailing space if there is any\n    if (!result.empty()) {\n        result.pop_back();\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/129", "generation": "#include <vector>\n#include <queue>\n#include <climits>\nusing namespace std;\n\nstruct State {\n    int x, y;\n    vector<int> path;\n};\n\nvector<int> minPath(vector<vector<int>> grid, int k) {\n    int N = grid.size();\n    vector<int> min_path(k, INT_MAX);\n    \n    // Directions for moving in the grid (up, down, left, right)\n    vector<pair<int, int>> directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n    \n    // BFS queue\n    queue<State> q;\n    \n    // Initialize the queue with all starting positions\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            q.push({i, j, {grid[i][j]}});\n        }\n    }\n    \n    while (!q.empty()) {\n        State curr = q.front();\n        q.pop();\n        \n        // If the current path length is k, compare and update min_path\n        if (curr.path.size() == k) {\n            if (curr.path < min_path) {\n                min_path = curr.path;\n            }\n            continue;\n        }\n        \n        // Explore all possible moves\n        for (auto& dir : directions) {\n            int nx = curr.x + dir.first;\n            int ny = curr.y + dir.second;\n            \n            // Check if the new position is within the grid\n            if (nx >= 0 && nx < N && ny >= 0 && ny < N) {\n                vector<int> new_path = curr.path;\n                new_path.push_back(grid[nx][ny]);\n                q.push({nx, ny, new_path});\n            }\n        }\n    }\n    \n    return min_path;\n}\n"}
{"task_id": "CPP/49", "generation": "#include <stdio.h>\n\nint modp(int n, int p) {\n    if (n == 0) {\n        return 1;\n    }\n\n    long long result = 1;\n    long long base = 2;\n\n    while (n > 0) {\n        // If n is odd, multiply base with result\n        if (n % 2 == 1) {\n            result = (result * base) % p;\n        }\n        // n must be even now\n        n = n >> 1; // n = n / 2\n        base = (base * base) % p; // Change base to base^2\n    }\n\n    return (int)result;\n}\n\n"}
{"task_id": "CPP/156", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring int_to_mini_roman(int number) {\n    // Define the mappings of values to their corresponding Roman numeral symbols in lowercase\n    vector<pair<int, string>> roman_map = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"},\n        {100, \"c\"}, {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"},\n        {10, \"x\"}, {9, \"ix\"}, {5, \"v\"}, {4, \"iv\"},\n        {1, \"i\"}\n    };\n    \n    string result = \"\";\n    \n    // Iterate through the mappings from the largest to the smallest\n    for (const auto& pair : roman_map) {\n        int value = pair.first;\n        const string& symbol = pair.second;\n        \n        // Append the symbol as many times as it fits into the number\n        while (number >= value) {\n            result += symbol;\n            number -= value;\n        }\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/65", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring circular_shift(int x, int shift) {\n    // Convert the integer to a string to easily manipulate digits\n    string x_str = to_string(x);\n    int length = x_str.length();\n    \n    // If shift is greater than or equal to the number of digits, reverse the string\n    if (shift >= length) {\n        reverse(x_str.begin(), x_str.end());\n        return x_str;\n    }\n    \n    // Calculate the effective shift (modulo the length of the string)\n    int effective_shift = shift % length;\n    \n    // Perform the circular shift\n    string shifted_str = x_str.substr(length - effective_shift) + x_str.substr(0, length - effective_shift);\n    \n    return shifted_str;\n}\n"}
{"task_id": "CPP/9", "generation": "#include <vector>\n#include <algorithm> // For std::max\n\nusing namespace std;\n\nvector<int> rolling_max(vector<int> numbers) {\n    vector<int> result;\n    if (numbers.empty()) {\n        return result; // Return an empty vector if the input is empty\n    }\n\n    int current_max = numbers[0]; // Initialize the current max with the first element\n    result.push_back(current_max); // The first element of the result is the same as the input\n\n    for (size_t i = 1; i < numbers.size(); ++i) {\n        current_max = max(current_max, numbers[i]); // Update the current max\n        result.push_back(current_max); // Store the current max in the result vector\n    }\n\n    return result;\n}\n\n// Example usage\n"}
{"task_id": "CPP/158", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_set>\n#include <algorithm>\n\nusing namespace std;\n\nstring find_max(vector<string> words) {\n    string max_word = \"\";\n    int max_unique_count = 0;\n\n    for (const string& word : words) {\n        // Use an unordered_set to count unique characters in the word\n        unordered_set<char> unique_chars(word.begin(), word.end());\n        int unique_count = unique_chars.size();\n\n        // If the current word has more unique characters, update max_word\n        if (unique_count > max_unique_count) {\n            max_word = word;\n            max_unique_count = unique_count;\n        }\n        // If the current word has the same number of unique characters but is lexicographically smaller, update max_word\n        else if (unique_count == max_unique_count && word < max_word) {\n            max_word = word;\n        }\n    }\n\n    return max_word;\n}\n\n"}
{"task_id": "CPP/8", "generation": "#include <vector>\n#include <numeric> // For std::accumulate\n\nusing namespace std;\n\nvector<int> sum_product(const vector<int>& numbers) {\n    // Initialize sum to 0 and product to 1\n    int sum = 0;\n    int product = 1;\n\n    // Iterate through the vector to calculate sum and product\n    for (int num : numbers) {\n        sum += num;\n        product *= num;\n    }\n\n    // Return the result as a vector\n    return {sum, product};\n}\n\n// Example usage\n"}
{"task_id": "CPP/95", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\n#include<cctype> // for islower and isupper functions\nusing namespace std;\n\nbool check_dict_case(map<string, string> dict) {\n    // If the map is empty, return false\n    if (dict.empty()) {\n        return false;\n    }\n\n    bool all_lower = true;\n    bool all_upper = true;\n\n    for (const auto& pair : dict) {\n        const string& key = pair.first;\n\n        // Check if the key is a string\n        if (key.empty()) {\n            return false;\n        }\n\n        // Check if all characters in the key are either all lower case or all upper case\n        bool is_lower = true;\n        bool is_upper = true;\n\n        for (char c : key) {\n            if (!islower(c)) {\n                is_lower = false;\n            }\n            if (!isupper(c)) {\n                is_upper = false;\n            }\n        }\n\n        // If the key is neither all lower case nor all upper case, return false\n        if (!is_lower && !is_upper) {\n            return false;\n        }\n\n        // Update the overall lower and upper case flags\n        all_lower &= is_lower;\n        all_upper &= is_upper;\n    }\n\n    // Return true if all keys are either all lower case or all upper case\n    return all_lower || all_upper;\n}\n\n// Example usage\n"}
{"task_id": "CPP/55", "generation": "#include <iostream>\nusing namespace std;\n\nint fib(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\n"}
{"task_id": "CPP/29", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nvector<string> filter_by_prefix(vector<string> strings, string prefix) {\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.substr(0, prefix.size()) == prefix) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/72", "generation": "#include <vector>\n#include <numeric> // for std::accumulate\n\nusing namespace std;\n\nbool will_it_fly(vector<int> q, int w) {\n    // Check if the vector is palindromic\n    int n = q.size();\n    for (int i = 0; i < n / 2; ++i) {\n        if (q[i] != q[n - i - 1]) {\n            return false;\n        }\n    }\n    \n    // Calculate the sum of the elements in the vector\n    int sum = accumulate(q.begin(), q.end(), 0);\n    \n    // Check if the sum is less than or equal to the maximum possible weight\n    return sum <= w;\n}\n\n// Example usage\n"}
{"task_id": "CPP/54", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nbool same_chars(string s0, string s1) {\n    // Convert strings to vectors of characters and sort them\n    string sorted_s0 = s0;\n    string sorted_s1 = s1;\n    sort(sorted_s0.begin(), sorted_s0.end());\n    sort(sorted_s1.begin(), sorted_s1.end());\n    \n    // Compare the sorted vectors\n    return sorted_s0 == sorted_s1;\n}\n"}
{"task_id": "CPP/91", "generation": "#include<stdio.h>\n#include<string>\n#include<sstream>\n#include<vector>\nusing namespace std;\n\nint is_bored(string S) {\n    vector<string> sentences;\n    stringstream ss(S);\n    string sentence;\n\n    // Split by '.', '?', and '!'\n    while (getline(ss, sentence, '.')) {\n        sentences.push_back(sentence);\n    }\n    ss.clear();\n    ss.str(S);\n    while (getline(ss, sentence, '?')) {\n        sentences.push_back(sentence);\n    }\n    ss.clear();\n    ss.str(S);\n    while (getline(ss, sentence, '!')) {\n        sentences.push_back(sentence);\n    }\n\n    int count = 0;\n    for (const string& s : sentences) {\n        string trimmed = s;\n        size_t start = trimmed.find_first_not_of(\" \\t\\n\\r\");\n        if (start != string::npos) {\n            trimmed = trimmed.substr(start);\n        }\n        if (!trimmed.empty() && trimmed.substr(0, 1) == \"I\") {\n            count++;\n        }\n    }\n\n    return count;\n}\n"}
{"task_id": "CPP/77", "generation": "#include <iostream>\n#include <cmath>\n\nbool iscube(int a) {\n    if (a < 0) {\n        // If a is negative, we take the absolute value for cube root calculation\n        a = -a;\n    }\n    // Calculate the cube root of a\n    double cubeRoot = cbrt(a);\n    // Check if the cube root is an integer\n    int intCubeRoot = static_cast<int>(cubeRoot);\n    // Verify if the cube of the integer cube root equals a\n    return (intCubeRoot * intCubeRoot * intCubeRoot == a);\n}\n\n"}
{"task_id": "CPP/73", "generation": "#include <vector>\n#include <iostream>\nusing namespace std;\n\nint smallest_change(vector<int> arr) {\n    int left = 0;\n    int right = arr.size() - 1;\n    int changes = 0;\n\n    while (left < right) {\n        if (arr[left] != arr[right]) {\n            changes++;\n        }\n        left++;\n        right--;\n    }\n\n    return changes;\n}\n\n"}
{"task_id": "CPP/71", "generation": "#include <stdio.h>\n#include <math.h>\n\nfloat triangle_area(float a, float b, float c) {\n    // Check if the sides can form a valid triangle\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n\n    // Calculate the semi-perimeter\n    float s = (a + b + c) / 2;\n\n    // Calculate the area using Heron's formula\n    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n\n    // Return the area rounded to 2 decimal points\n    return round(area * 100) / 100;\n}\n\n"}
{"task_id": "CPP/82", "generation": "#include <iostream>\n#include <string>\n#include <cmath>\nusing namespace std;\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true; // 2 is the only even prime number\n    if (n % 2 == 0) return false; // other even numbers are not prime\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nbool prime_length(string str) {\n    int length = str.length();\n    return is_prime(length);\n}\n\n"}
{"task_id": "CPP/114", "generation": "#include <vector>\n#include <algorithm>\n#include <limits.h>\nusing namespace std;\n\nlong long minSubArraySum(vector<long long> nums) {\n    // Edge case: if the vector is empty, return 0 (or handle as needed)\n    if (nums.empty()) return 0;\n\n    // Initialize variables to store the minimum sum found so far\n    long long min_sum = LLONG_MAX;\n    long long current_sum = 0;\n\n    // Iterate through the vector\n    for (long long num : nums) {\n        // Update the current sum to be the minimum of the current element or the current sum plus the element\n        current_sum = min(num, current_sum + num);\n        // Update the minimum sum found so far\n        min_sum = min(min_sum, current_sum);\n    }\n\n    return min_sum;\n}\n\n"}
{"task_id": "CPP/138", "generation": "#include<stdio.h>\n\nbool is_equal_to_sum_even(int n) {\n    // Check if n is at least 8 and is even\n    return (n >= 8) && (n % 2 == 0);\n}\n\n"}
{"task_id": "CPP/132", "generation": "#include<stdio.h>\n#include<string>\n#include<stack>\nusing namespace std;\n\nbool is_nested(string str) {\n    stack<char> s;\n    for (char c : str) {\n        if (c == '[') {\n            s.push(c);\n        } else if (c == ']') {\n            if (!s.empty() && s.top() == '[') {\n                s.pop();\n            } else {\n                s.push(c);\n            }\n        }\n    }\n\n    // Check if there is any nested structure\n    bool nested = false;\n    int depth = 0;\n    for (char c : str) {\n        if (c == '[') {\n            depth++;\n            if (depth > 1) {\n                nested = true;\n            }\n        } else if (c == ']') {\n            depth--;\n        }\n    }\n\n    return nested;\n}\n"}
{"task_id": "CPP/3", "generation": "#include <vector>\nusing namespace std;\n\nbool below_zero(vector<int> operations) {\n    int balance = 0;\n    for (int operation : operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/142", "generation": "#include <vector>\n#include <iostream>\nusing namespace std;\n\nint sum_squares(vector<int> lst) {\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 3 == 0) {\n            lst[i] = lst[i] * lst[i]; // Square the element\n        } else if (i % 4 == 0) {\n            lst[i] = lst[i] * lst[i] * lst[i]; // Cube the element\n        }\n        sum += lst[i]; // Add the transformed element to the sum\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/50", "generation": "#include <stdio.h>\n#include <string>\nusing namespace std;\n\nstring encode_shift(string s) {\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i = 0; i < s.length(); i++) {\n        int w = ((int)s[i] + 5 - (int)'a') % 26 + (int)'a';   \n        out = out + (char)w;\n    }\n    return out;\n}\n\nstring decode_shift(string s) {\n    // takes as input string encoded with encode_shift function. Returns decoded string.\n    string out;\n    int i;\n    for (i = 0; i < s.length(); i++) {\n        int w = ((int)s[i] - 5 - (int)'a' + 26) % 26 + (int)'a';   \n        out = out + (char)w;\n    }\n    return out;\n}\n\n"}
{"task_id": "CPP/103", "generation": "#include <iostream>\n#include <cmath>\n#include <string>\nusing namespace std;\n\nstring rounded_avg(int n, int m) {\n    // Step 1: Check if n is greater than m\n    if (n > m) {\n        return \"-1\";\n    }\n    \n    // Step 2: Calculate the sum of integers from n to m\n    int sum = (m * (m + 1)) / 2 - ((n - 1) * n) / 2;\n    \n    // Step 3: Compute the average\n    int count = m - n + 1;\n    double average = static_cast<double>(sum) / count;\n    \n    // Step 4: Round the average to the nearest integer (smaller one)\n    int rounded_average = floor(average);\n    \n    // Step 5: Convert the rounded average to binary\n    string binary_representation = \"\";\n    while (rounded_average > 0) {\n        binary_representation = to_string(rounded_average % 2) + binary_representation;\n        rounded_average /= 2;\n    }\n    \n    // If the binary representation is empty (which happens if rounded_average is 0), return \"0\"\n    return binary_representation.empty() ? \"0\" : binary_representation;\n}\n\n"}
{"task_id": "CPP/57", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nbool monotonic(vector<float> l) {\n    bool increasing = true;\n    bool decreasing = true;\n    \n    for (size_t i = 1; i < l.size(); ++i) {\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n        }\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n        }\n    }\n    \n    return increasing || decreasing;\n}\n"}
{"task_id": "CPP/28", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring concatenate(const vector<string>& strings) {\n    string result;\n    for (const string& s : strings) {\n        result += s;\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/39", "generation": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n// Function to check if a number is prime\nbool is_prime(int num) {\n    if (num <= 1) return false;\n    if (num == 2) return true;\n    if (num % 2 == 0) return false;\n    for (int i = 3; i <= sqrt(num); i += 2) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\n// Function to generate the n-th prime Fibonacci number\nint prime_fib(int n) {\n    if (n <= 0) return -1; // Invalid input\n    int a = 0, b = 1, count = 0;\n    while (true) {\n        int temp = a + b;\n        a = b;\n        b = temp;\n        if (is_prime(b)) {\n            count++;\n            if (count == n) {\n                return b;\n            }\n        }\n    }\n}\n\n"}
{"task_id": "CPP/45", "generation": "#include <stdio.h>\n\nfloat triangle_area(float a, float h) {\n    return 0.5 * a * h;\n}\n\n"}
{"task_id": "CPP/145", "generation": "#include <vector>\n#include <algorithm>\n#include <string>\n#include <cmath>\n\nusing namespace std;\n\nint sum_of_digits(int num) {\n    int sum = 0;\n    num = abs(num);\n    while (num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}\n\nvector<int> order_by_points(vector<int> nums) {\n    vector<pair<int, int>> indexed_nums;\n    for (int i = 0; i < nums.size(); ++i) {\n        indexed_nums.push_back({nums[i], i});\n    }\n\n    sort(indexed_nums.begin(), indexed_nums.end(), [](const pair<int, int>& a, const pair<int, int>& b) {\n        int sum_a = sum_of_digits(a.first);\n        int sum_b = sum_of_digits(b.first);\n        if (sum_a == sum_b) {\n            return a.second < b.second;\n        }\n        return sum_a < sum_b;\n    });\n\n    vector<int> sorted_nums;\n    for (const auto& p : indexed_nums) {\n        sorted_nums.push_back(p.first);\n    }\n\n    return sorted_nums;\n}\n"}
{"task_id": "CPP/84", "generation": "#include <iostream>\n#include <string>\n#include <bitset>\n\nusing namespace std;\n\nstring solve(int N) {\n    // Step 1: Calculate the sum of the digits of N\n    int sum = 0;\n    int temp = N;\n    while (temp > 0) {\n        sum += temp % 10;  // Add the last digit to the sum\n        temp /= 10;        // Remove the last digit\n    }\n\n    // Step 2: Convert the sum to its binary representation\n    string binarySum = bitset<32>(sum).to_string();  // Convert to binary string\n\n    // Step 3: Remove leading zeros from the binary string\n    size_t pos = binarySum.find('1');  // Find the first '1'\n    if (pos != string::npos) {\n        binarySum = binarySum.substr(pos);  // Extract the substring from the first '1'\n    } else {\n        binarySum = \"0\";  // If no '1' is found, the sum was 0\n    }\n\n    return binarySum;\n}\n\n"}
{"task_id": "CPP/113", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<string> odd_count(vector<string> lst) {\n    vector<string> result;\n    \n    for (size_t i = 0; i < lst.size(); ++i) {\n        int odd_count = 0;\n        for (char c : lst[i]) {\n            if ((c - '0') % 2 != 0) {\n                ++odd_count;\n            }\n        }\n        \n        // Create the output string with the correct format\n        ostringstream oss;\n        oss << \"the number of odd elements \" << odd_count << \"n the str\" << odd_count << \"ng \" << odd_count << \" of the \" << odd_count << \"nput.\";\n        result.push_back(oss.str());\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/36", "generation": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint fizz_buzz(int n) {\n    int count = 0;\n    for (int i = 0; i < n; ++i) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            string num_str = to_string(i);\n            for (char c : num_str) {\n                if (c == '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/144", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <cmath>\n\nusing namespace std;\n\nbool simplify(string x, string n) {\n    // Helper function to parse the fraction string\n    auto parseFraction = [](const string& fraction) -> pair<int, int> {\n        size_t slashPos = fraction.find('/');\n        int numerator = stoi(fraction.substr(0, slashPos));\n        int denominator = stoi(fraction.substr(slashPos + 1));\n        return {numerator, denominator};\n    };\n\n    // Parse the fractions\n    auto [xNum, xDen] = parseFraction(x);\n    auto [nNum, nDen] = parseFraction(n);\n\n    // Calculate the product of the fractions\n    int productNum = xNum * nNum;\n    int productDen = xDen * nDen;\n\n    // Check if the product is a whole number\n    return productNum % productDen == 0;\n}\n\n"}
{"task_id": "CPP/0", "generation": "#include<stdio.h>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nbool has_close_elements(vector<float> numbers, float threshold) {\n    // Get the size of the vector\n    int n = numbers.size();\n    \n    // Iterate through each pair of numbers\n    for (int i = 0; i < n; ++i) {\n        for (int j = i + 1; j < n; ++j) {\n            // Calculate the absolute difference between numbers[i] and numbers[j]\n            float diff = fabs(numbers[i] - numbers[j]);\n            \n            // Check if the difference is less than the threshold\n            if (diff < threshold) {\n                return true;\n            }\n        }\n    }\n    \n    // If no such pair is found, return false\n    return false;\n}\n\n"}
{"task_id": "CPP/17", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<int> parse_music(string music_string) {\n    vector<int> beats;\n    stringstream ss(music_string);\n    string note;\n    \n    while (ss >> note) {\n        if (note == \"o\") {\n            beats.push_back(4);\n        } else if (note == \"o|\") {\n            beats.push_back(2);\n        } else if (note == \".|\") {\n            beats.push_back(1);\n        }\n    }\n    \n    return beats;\n}\n\n"}
{"task_id": "CPP/47", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nfloat median(vector<float> l) {\n    // Step 1: Sort the vector\n    sort(l.begin(), l.end());\n\n    // Step 2: Determine the size of the vector\n    int n = l.size();\n\n    // Step 3: Calculate the median\n    if (n % 2 == 1) {\n        // If the number of elements is odd, return the middle element\n        return l[n / 2];\n    } else {\n        // If the number of elements is even, return the average of the two middle elements\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    }\n}\n\n"}
{"task_id": "CPP/75", "generation": "#include <vector>\n#include <cmath>\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nbool is_multiply_prime(int a) {\n    std::vector<int> primes;\n    for (int i = 2; i < 100; ++i) {\n        if (is_prime(i)) {\n            primes.push_back(i);\n        }\n    }\n\n    for (int i : primes) {\n        for (int j : primes) {\n            for (int k : primes) {\n                if (i * j * k == a) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/124", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <iomanip>\n\nusing namespace std;\n\nbool valid_date(string date) {\n    // Check if the date string is empty\n    if (date.empty()) {\n        return false;\n    }\n\n    // Check if the date string is in the format \"mm-dd-yyyy\"\n    if (date.length() != 10 || date[2] != '-' || date[5] != '-') {\n        return false;\n    }\n\n    // Extract month, day, and year from the date string\n    int month, day, year;\n    char dash1, dash2;\n    stringstream ss(date);\n    ss >> month >> dash1 >> day >> dash2 >> year;\n\n    // Check if the extracted values are valid\n    if (dash1 != '-' || dash2 != '-' || ss.fail()) {\n        return false;\n    }\n\n    // Validate the month\n    if (month < 1 || month > 12) {\n        return false;\n    }\n\n    // Validate the day based on the month\n    if (month == 2) {\n        if (day < 1 || day > 29) {\n            return false;\n        }\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) {\n            return false;\n        }\n    } else {\n        if (day < 1 || day > 31) {\n            return false;\n        }\n    }\n\n    // If all checks pass, the date is valid\n    return true;\n}\n\n"}
{"task_id": "CPP/101", "generation": "#include <vector>\n#include <string>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> words_string(string s) {\n    vector<string> words;\n    string word;\n    stringstream ss(s);\n    \n    // Read words separated by spaces or commas\n    while (getline(ss, word, ' ')) {\n        stringstream word_ss(word);\n        string subword;\n        while (getline(word_ss, subword, ',')) {\n            if (!subword.empty()) {\n                words.push_back(subword);\n            }\n        }\n    }\n    \n    return words;\n}\n"}
{"task_id": "CPP/14", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> all_prefixes(string str) {\n    vector<string> prefixes;\n    for (size_t i = 1; i <= str.size(); ++i) {\n        prefixes.push_back(str.substr(0, i));\n    }\n    return prefixes;\n}\n\n// Example usage\n"}
{"task_id": "CPP/141", "generation": "#include<stdio.h>\n#include<string>\n#include<cctype>\n#include<unordered_set>\nusing namespace std;\n\nstring file_name_check(string file_name) {\n    // Check if the file name contains exactly one dot\n    size_t dot_pos = file_name.find('.');\n    if (dot_pos == string::npos || dot_pos == 0 || dot_pos == file_name.size() - 1) {\n        return \"No\";\n    }\n\n    // Check if the substring before the dot is not empty and starts with a latin letter\n    string name_part = file_name.substr(0, dot_pos);\n    if (name_part.empty() || !isalpha(name_part[0])) {\n        return \"No\";\n    }\n\n    // Check if the substring after the dot is one of the allowed extensions\n    unordered_set<string> allowed_extensions = {\"txt\", \"exe\", \"dll\"};\n    string extension_part = file_name.substr(dot_pos + 1);\n    if (allowed_extensions.find(extension_part) == allowed_extensions.end()) {\n        return \"No\";\n    }\n\n    // Count the number of digits in the file name\n    int digit_count = 0;\n    for (char c : file_name) {\n        if (isdigit(c)) {\n            digit_count++;\n            if (digit_count > 3) {\n                return \"No\";\n            }\n        }\n    }\n\n    // If all conditions are met, return \"Yes\"\n    return \"Yes\";\n}\n\n// Example usage\n"}
{"task_id": "CPP/123", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> get_odd_collatz(int n) {\n    vector<int> odd_numbers;\n    \n    // Generate the Collatz sequence and collect odd numbers\n    while (n != 1) {\n        if (n % 2 == 1) { // Check if n is odd\n            odd_numbers.push_back(n);\n        }\n        if (n % 2 == 0) { // If n is even\n            n = n / 2;\n        } else { // If n is odd\n            n = 3 * n + 1;\n        }\n    }\n    // Add the final 1 to the sequence\n    odd_numbers.push_back(1);\n    \n    // Sort the vector of odd numbers\n    sort(odd_numbers.begin(), odd_numbers.end());\n    \n    return odd_numbers;\n}\n"}
{"task_id": "CPP/148", "generation": "#include <vector>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> bf(string planet1, string planet2) {\n    // List of planets in order of their proximity to the Sun\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    \n    // Create a map to quickly find the index of a planet\n    unordered_map<string, int> planetIndex;\n    for (int i = 0; i < planets.size(); ++i) {\n        planetIndex[planets[i]] = i;\n    }\n    \n    // Check if both planet names are valid\n    if (planetIndex.find(planet1) == planetIndex.end() || planetIndex.find(planet2) == planetIndex.end()) {\n        return {};\n    }\n    \n    // Get the indices of the two planets\n    int index1 = planetIndex[planet1];\n    int index2 = planetIndex[planet2];\n    \n    // Ensure index1 is less than index2 for simplicity\n    if (index1 > index2) {\n        swap(index1, index2);\n    }\n    \n    // Extract the planets between index1 and index2 (exclusive)\n    vector<string> result;\n    for (int i = index1 + 1; i < index2; ++i) {\n        result.push_back(planets[i]);\n    }\n    \n    return result;\n}\n\n// Example usage\n"}
{"task_id": "CPP/133", "generation": "#include <iostream>\n#include <vector>\n#include <cmath> // For ceil function\n\nusing namespace std;\n\nint sum_squares(vector<float> lst) {\n    int sum = 0;\n    for (float num : lst) {\n        int ceiling_num = ceil(num); // Apply ceiling function\n        sum += ceiling_num * ceiling_num; // Square the number and add to sum\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/109", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nbool move_one_ball(vector<int> arr) {\n    int n = arr.size();\n    if (n == 0) return true;\n\n    // Find the index of the minimum element\n    int minIndex = 0;\n    for (int i = 1; i < n; ++i) {\n        if (arr[i] < arr[minIndex]) {\n            minIndex = i;\n        }\n    }\n\n    // Check if the elements before minIndex are in decreasing order\n    for (int i = 1; i < minIndex; ++i) {\n        if (arr[i] < arr[i - 1]) {\n            return false;\n        }\n    }\n\n    // Check if the elements after minIndex are in increasing order\n    for (int i = minIndex + 1; i < n; ++i) {\n        if (arr[i] < arr[i - 1]) {\n            return false;\n        }\n    }\n\n    // Check the transition from the last element to the first element\n    if (minIndex != 0 && arr[n - 1] > arr[0]) {\n        return false;\n    }\n\n    return true;\n}\n"}
{"task_id": "CPP/100", "generation": "#include <vector>\nusing namespace std;\n\nvector<int> make_a_pile(int n) {\n    vector<int> result;\n    int current = n;\n    \n    for (int i = 0; i < n; ++i) {\n        result.push_back(current);\n        if (current % 2 == 0) {\n            current += 2; // Next even number\n        } else {\n            current += 2; // Next odd number\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/150", "generation": "#include<iostream>\n#include<cmath>\n\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true; // 2 is the only even prime number\n    if (n % 2 == 0) return false; // Other even numbers are not prime\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nint x_or_y(int n, int x, int y) {\n    if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n\n"}
{"task_id": "CPP/153", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cctype>\n\nusing namespace std;\n\nstring Strongest_Extension(string class_name, vector<string> extensions) {\n    string strongest_extension = \"\";\n    int max_strength = INT_MIN;\n\n    for (const string& ext : extensions) {\n        int CAP = 0;\n        int SM = 0;\n\n        for (char c : ext) {\n            if (isupper(c)) {\n                CAP++;\n            } else if (islower(c)) {\n                SM++;\n            }\n        }\n\n        int strength = CAP - SM;\n\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest_extension = ext;\n        }\n    }\n\n    return class_name + \".\" + strongest_extension;\n}\n\n"}
{"task_id": "CPP/107", "generation": "#include <vector>\n#include <string>\nusing namespace std;\n\nbool isPalindrome(int num) {\n    string str = to_string(num);\n    int len = str.length();\n    for (int i = 0; i < len / 2; ++i) {\n        if (str[i] != str[len - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvector<int> even_odd_palindrome(int n) {\n    int evenCount = 0;\n    int oddCount = 0;\n    \n    for (int i = 1; i <= n; ++i) {\n        if (isPalindrome(i)) {\n            if (i % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n    \n    return {evenCount, oddCount};\n}\n"}
{"task_id": "CPP/110", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nstring exchange(vector<int> lst1, vector<int> lst2) {\n    int oddCount = 0;\n    int evenCount = 0;\n\n    // Count the number of odd elements in lst1\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            oddCount++;\n        }\n    }\n\n    // Count the number of even elements in lst2\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            evenCount++;\n        }\n    }\n\n    // If there are enough even elements in lst2 to replace all odd elements in lst1\n    if (evenCount >= oddCount) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\n// Example usage\n"}
{"task_id": "CPP/111", "generation": "#include <iostream>\n#include <string>\n#include <map>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nmap<char, int> histogram(string test) {\n    map<char, int> frequencyMap;\n    map<char, int> resultMap;\n    \n    // Step 1: Populate the frequency map\n    for (char c : test) {\n        if (c != ' ') {\n            frequencyMap[c]++;\n        }\n    }\n    \n    // Step 2: Find the maximum frequency\n    int maxFrequency = 0;\n    for (const auto& pair : frequencyMap) {\n        if (pair.second > maxFrequency) {\n            maxFrequency = pair.second;\n        }\n    }\n    \n    // Step 3: Populate the result map with letters having the maximum frequency\n    for (const auto& pair : frequencyMap) {\n        if (pair.second == maxFrequency) {\n            resultMap[pair.first] = pair.second;\n        }\n    }\n    \n    return resultMap;\n}\n\n"}
{"task_id": "CPP/80", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool is_happy(string s) {\n    // Check if the length of the string is less than 3\n    if (s.length() < 3) {\n        return false;\n    }\n\n    // Iterate through the string and check every 3 consecutive characters\n    for (int i = 0; i < s.length() - 2; ++i) {\n        // Check if the current set of 3 characters are distinct\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n\n    // If all sets of 3 consecutive characters are distinct, return true\n    return true;\n}\n\n// Test cases\n"}
{"task_id": "CPP/41", "generation": "#include <stdio.h>\n\nint car_race_collision(int n) {\n    // The number of collisions is simply n * n\n    return n * n;\n}\n\n"}
{"task_id": "CPP/116", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nint count_ones_in_binary(int num) {\n    int count = 0;\n    while (num != 0) {\n        count += num & 1;\n        num >>= 1;\n    }\n    return count;\n}\n\nvector<int> sort_array(vector<int> arr) {\n    sort(arr.begin(), arr.end(), [](int a, int b) {\n        int count_a = count_ones_in_binary(a);\n        int count_b = count_ones_in_binary(b);\n        if (count_a == count_b) {\n            return a < b;\n        }\n        return count_a < count_b;\n    });\n    return arr;\n}\n"}
{"task_id": "CPP/61", "generation": "#include <iostream>\n#include <stack>\n#include <string>\nusing namespace std;\n\nbool correct_bracketing(string brackets) {\n    stack<char> s;\n    \n    for (char bracket : brackets) {\n        if (bracket == '(') {\n            s.push(bracket);\n        } else if (bracket == ')') {\n            if (s.empty() || s.top() != '(') {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    \n    return s.empty();\n}\n\n"}
{"task_id": "CPP/25", "generation": "#include <vector>\n#include <iostream>\nusing namespace std;\n\nvector<int> factorize(int n) {\n    vector<int> factors;\n    // Start with the smallest prime number\n    int divisor = 2;\n    while (n > 1) {\n        while (n % divisor == 0) {\n            factors.push_back(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n}\n\n"}
{"task_id": "CPP/137", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <boost/any.hpp>\n#include <cmath>\n\nusing namespace std;\n\nfloat to_float(const boost::any& value) {\n    try {\n        string str = boost::any_cast<string>(value);\n        replace(str.begin(), str.end(), ',', '.');\n        return stof(str);\n    } catch (const boost::bad_any_cast&) {\n        try {\n            return boost::any_cast<int>(value);\n        } catch (const boost::bad_any_cast&) {\n            return boost::any_cast<float>(value);\n        }\n    }\n}\n\nboost::any compare_one(boost::any a, boost::any b) {\n    float a_float = to_float(a);\n    float b_float = to_float(b);\n\n    if (a_float > b_float) {\n        return a;\n    } else if (b_float > a_float) {\n        return b;\n    } else {\n        return string(\"None\");\n    }\n}\n\n"}
{"task_id": "CPP/102", "generation": "#include <stdio.h>\n\nint choose_num(int x, int y) {\n    // Ensure x is less than or equal to y\n    if (x > y) {\n        return -1;\n    }\n\n    // Start from the largest number in the range and move downwards\n    for (int i = y; i >= x; i--) {\n        // Check if the number is even\n        if (i % 2 == 0) {\n            return i;\n        }\n    }\n\n    // If no even number is found, return -1\n    return -1;\n}\n\n"}
{"task_id": "CPP/10", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nbool is_palindrome(const string& str) {\n    // Test if given string is a palindrome\n    string s(str.rbegin(), str.rend());\n    return s == str;\n}\n\nstring make_palindrome(const string& str) {\n    // Find the shortest palindrome that begins with a supplied string\n    for (size_t i = 0; i < str.size(); ++i) {\n        // Check if the suffix from i to the end is a palindrome\n        if (is_palindrome(str.substr(i))) {\n            // If it is, append the reverse of the prefix to the end of the string\n            string prefix = str.substr(0, i);\n            reverse(prefix.begin(), prefix.end());\n            return str + prefix;\n        }\n    }\n    // If no palindromic suffix is found, append the reverse of the entire string\n    string reversed_str(str.rbegin(), str.rend());\n    return str + reversed_str;\n}\n\n"}
{"task_id": "CPP/76", "generation": "#include<stdio.h>\n#include<math.h>\n\nbool is_simple_power(int x, int n) {\n    if (n == 1) {\n        return x == 1;\n    }\n    int power = 1;\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}\n"}
{"task_id": "CPP/94", "generation": "#include <iostream>\n#include <vector>\n#include <cmath>\nusing namespace std;\n\n// Function to check if a number is prime\nbool isPrime(int num) {\n    if (num <= 1) return false;\n    if (num == 2) return true;\n    if (num % 2 == 0) return false;\n    for (int i = 3; i <= sqrt(num); i += 2) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\n// Function to sum the digits of a number\nint sumOfDigits(int num) {\n    int sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}\n\nint skjkasdkd(vector<int> lst) {\n    int largestPrime = -1;\n    \n    // Find the largest prime in the list\n    for (int num : lst) {\n        if (isPrime(num) && num > largestPrime) {\n            largestPrime = num;\n        }\n    }\n    \n    // If no prime is found, return 0\n    if (largestPrime == -1) {\n        return 0;\n    }\n    \n    // Sum the digits of the largest prime\n    return sumOfDigits(largestPrime);\n}\n\n"}
{"task_id": "CPP/32", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n\ndouble poly(vector<double> xs, double x){\n    double sum = 0;\n    for (int i = 0; i < xs.size(); i++) {\n        sum += xs[i] * pow(x, i);\n    }\n    return sum;\n}\n\ndouble poly_derivative(vector<double> xs, double x){\n    double sum = 0;\n    for (int i = 1; i < xs.size(); i++) {\n        sum += i * xs[i] * pow(x, i - 1);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    double x0 = 0.0; // Initial guess\n    double tolerance = 1e-7; // Tolerance for convergence\n    int max_iterations = 1000; // Maximum number of iterations\n\n    for (int i = 0; i < max_iterations; i++) {\n        double fx = poly(xs, x0);\n        double dfx = poly_derivative(xs, x0);\n\n        if (fabs(fx) < tolerance) {\n            return x0; // Root found\n        }\n\n        if (fabs(dfx) < tolerance) {\n            break; // Avoid division by a very small number\n        }\n\n        x0 = x0 - fx / dfx;\n    }\n\n    return x0; // Return the best estimate\n}\n\n"}
{"task_id": "CPP/33", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> sort_third(vector<int> l) {\n    // Extract elements at indices divisible by 3\n    vector<int> to_sort;\n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 3 == 0) {\n            to_sort.push_back(l[i]);\n        }\n    }\n\n    // Sort the extracted elements\n    sort(to_sort.begin(), to_sort.end());\n\n    // Create a new list with sorted elements at indices divisible by 3\n    vector<int> result = l;\n    for (size_t i = 0, j = 0; i < l.size(); ++i) {\n        if (i % 3 == 0) {\n            result[i] = to_sort[j++];\n        }\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/88", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> sort_array(vector<int> array) {\n    // Check if the array is empty or has only one element\n    if (array.empty() || array.size() == 1) {\n        return array;\n    }\n\n    // Calculate the sum of the first and last index values\n    int sum = array.front() + array.back();\n\n    // Create a copy of the array to sort\n    vector<int> sorted_array = array;\n\n    // Sort the array based on the sum\n    if (sum % 2 == 0) {\n        // Sort in descending order if the sum is even\n        sort(sorted_array.begin(), sorted_array.end(), greater<int>());\n    } else {\n        // Sort in ascending order if the sum is odd\n        sort(sorted_array.begin(), sorted_array.end());\n    }\n\n    return sorted_array;\n}\n"}
{"task_id": "CPP/15", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nstring string_sequence(int n) {\n    // Create a stringstream to build the result\n    stringstream result;\n    \n    // Loop from 0 to n inclusive\n    for (int i = 0; i <= n; ++i) {\n        // Append the number followed by a space\n        result << i << \" \";\n    }\n    \n    // Convert the stringstream to a string\n    string result_str = result.str();\n    \n    // Remove the trailing space if it exists\n    if (!result_str.empty()) {\n        result_str.pop_back();\n    }\n    \n    // Return the result string\n    return result_str;\n}\n\n"}
{"task_id": "CPP/163", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> generate_integers(int a, int b) {\n    // Ensure a is less than or equal to b\n    if (a > b) {\n        swap(a, b);\n    }\n\n    vector<int> even_digits;\n\n    // Even digits less than 10 are 2, 4, 6, and 8\n    for (int i = a; i <= b; ++i) {\n        if (i % 2 == 0 && i < 10) {\n            even_digits.push_back(i);\n        }\n    }\n\n    // Sort the even digits in ascending order (though they should already be sorted)\n    sort(even_digits.begin(), even_digits.end());\n\n    return even_digits;\n}\n\n"}
{"task_id": "CPP/1", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <stack>\n\nusing namespace std;\n\nvector<string> separate_paren_groups(string paren_string) {\n    vector<string> result;\n    string current_group;\n    stack<char> paren_stack;\n    bool in_group = false;\n\n    for (char ch : paren_string) {\n        if (ch == ' ') {\n            continue; // Ignore spaces\n        }\n\n        if (ch == '(') {\n            if (!in_group) {\n                in_group = true;\n                current_group = \"\";\n            }\n            current_group += ch;\n            paren_stack.push(ch);\n        } else if (ch == ')') {\n            if (paren_stack.empty()) {\n                // This should not happen if input is valid\n                throw invalid_argument(\"Unbalanced parentheses\");\n            }\n            current_group += ch;\n            paren_stack.pop();\n            if (paren_stack.empty()) {\n                result.push_back(current_group);\n                in_group = false;\n            }\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/69", "generation": "#include <vector>\n#include <unordered_map>\n#include <algorithm>\nusing namespace std;\n\nint search(vector<int> lst) {\n    // Step 1: Count the frequency of each integer\n    unordered_map<int, int> frequencyMap;\n    for (int num : lst) {\n        frequencyMap[num]++;\n    }\n\n    // Step 2: Find the greatest integer that meets the criteria\n    int maxValidInteger = -1;\n    for (const auto& pair : frequencyMap) {\n        int num = pair.first;\n        int freq = pair.second;\n        if (freq >= num) {\n            maxValidInteger = max(maxValidInteger, num);\n        }\n    }\n\n    // Step 3: Return the result\n    return maxValidInteger;\n}\n\n// Example usage\n"}
{"task_id": "CPP/31", "generation": "#include<stdio.h>\n#include<stdbool.h>\n#include<math.h>\n\nbool is_prime(long long n) {\n    // Handle edge cases\n    if (n <= 1) {\n        return false;\n    }\n    if (n == 2 || n == 3) {\n        return true;\n    }\n    if (n % 2 == 0 || n % 3 == 0) {\n        return false;\n    }\n\n    // Check for factors from 5 to sqrt(n)\n    for (long long i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n"}
{"task_id": "CPP/147", "generation": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint get_max_triples(int n) {\n    // Step 1: Generate the vector a\n    vector<int> a(n);\n    for (int i = 0; i < n; ++i) {\n        a[i] = (i + 1) * (i + 1) - (i + 1) + 1;\n    }\n\n    // Step 2: Count the number of valid triples\n    int count = 0;\n    for (int i = 0; i < n - 2; ++i) {\n        for (int j = i + 1; j < n - 1; ++j) {\n            for (int k = j + 1; k < n; ++k) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    // Step 3: Return the count of valid triples\n    return count;\n}\n\n"}
{"task_id": "CPP/105", "generation": "#include <vector>\n#include <string>\n#include <map>\n#include <algorithm>\nusing namespace std;\n\nvector<string> by_length(vector<int> arr) {\n    // Step 1: Filter and sort the integers between 1 and 9\n    vector<int> filtered;\n    for (int num : arr) {\n        if (num >= 1 && num <= 9) {\n            filtered.push_back(num);\n        }\n    }\n    sort(filtered.begin(), filtered.end());\n\n    // Step 2: Reverse the sorted vector\n    reverse(filtered.begin(), filtered.end());\n\n    // Step 3: Replace each digit with its corresponding name\n    map<int, string> digitToName = {\n        {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"},\n        {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}\n    };\n\n    vector<string> result;\n    for (int num : filtered) {\n        result.push_back(digitToName[num]);\n    }\n\n    return result;\n}\n\n// Example usage\n"}
{"task_id": "CPP/22", "generation": "#include <iostream>\n#include <vector>\n#include <list>\n#include <boost/any.hpp>\n\ntypedef std::list<boost::any> list_any;\n\nstd::vector<int> filter_integers(list_any values) {\n    std::vector<int> result;\n    \n    for (const auto& value : values) {\n        if (value.type() == typeid(int)) {\n            result.push_back(boost::any_cast<int>(value));\n        }\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/52", "generation": "#include <vector>\nusing namespace std;\n\nbool below_threshold(vector<int> l, int t) {\n    for (int num : l) {\n        if (num >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Example usage\n"}
{"task_id": "CPP/154", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool cycpattern_check(string a, string b) {\n    int n = b.length();\n    if (n == 0) return true; // Any string contains an empty string\n\n    // Concatenate b with itself to handle cyclic rotations\n    string b_rotated = b + b;\n\n    // Check if any rotation of b is a substring of a\n    for (int i = 0; i < n; ++i) {\n        string rotation = b_rotated.substr(i, n);\n        if (a.find(rotation) != string::npos) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n"}
{"task_id": "CPP/115", "generation": "#include<stdio.h>\n#include<vector>\n#include<cmath> // for ceil function\nusing namespace std;\n\nint max_fill(vector<vector<int>> grid, int capacity) {\n    int total_lowers = 0;\n    \n    for (const auto& row : grid) {\n        int water_units = 0;\n        for (int unit : row) {\n            if (unit == 1) {\n                water_units++;\n            }\n        }\n        // Calculate the number of times the bucket needs to be lowered\n        total_lowers += ceil((double)water_units / capacity);\n    }\n    \n    return total_lowers;\n}\n\n// Example usage\n"}
{"task_id": "CPP/131", "generation": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint digits(int n) {\n    // Convert the integer to a string\n    string numStr = to_string(n);\n    \n    // Initialize the product to 1 (multiplicative identity)\n    int product = 1;\n    \n    // Flag to check if any odd digit is found\n    bool oddFound = false;\n    \n    // Iterate through each character in the string\n    for (char ch : numStr) {\n        // Convert the character to an integer\n        int digit = ch - '0';\n        \n        // Check if the digit is odd\n        if (digit % 2 != 0) {\n            // Multiply the product by the odd digit\n            product *= digit;\n            oddFound = true;\n        }\n    }\n    \n    // If no odd digit was found, return 0\n    if (!oddFound) {\n        return 0;\n    }\n    \n    // Return the product of the odd digits\n    return product;\n}\n\n"}
{"task_id": "CPP/37", "generation": "#include <stdio.h>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<float> sort_even(vector<float> l) {\n    // Step 1: Extract values at even indices\n    vector<float> even_values;\n    for (size_t i = 0; i < l.size(); i += 2) {\n        even_values.push_back(l[i]);\n    }\n\n    // Step 2: Sort the extracted values\n    sort(even_values.begin(), even_values.end());\n\n    // Step 3: Reconstruct the output vector\n    vector<float> result = l;\n    size_t even_index = 0;\n    for (size_t i = 0; i < l.size(); i += 2) {\n        result[i] = even_values[even_index++];\n    }\n\n    return result;\n}\n\n// Test cases\n"}
{"task_id": "CPP/92", "generation": "#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n\nbool any_int(float a, float b, float c) {\n    // Check if all numbers are integers\n    if (floor(a) != a || floor(b) != b || floor(c) != c) {\n        return false;\n    }\n\n    // Check if any number is equal to the sum of the other two\n    if (a == b + c || b == a + c || c == a + b) {\n        return true;\n    }\n\n    return false;\n}\n\n// Test cases\n"}
{"task_id": "CPP/118", "generation": "#include <iostream>\n#include <string>\n#include <unordered_set>\nusing namespace std;\n\nstring get_closest_vowel(string word) {\n    // Define the set of vowels\n    unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    \n    // Traverse the word from right to left\n    for (int i = word.size() - 1; i > 0; --i) {\n        // Check if the current character is a vowel\n        if (vowels.find(word[i]) != vowels.end()) {\n            // Check if it is surrounded by consonants\n            bool left_consonant = (i > 0 && vowels.find(word[i-1]) == vowels.end());\n            bool right_consonant = (i < word.size() - 1 && vowels.find(word[i+1]) == vowels.end());\n            \n            if (left_consonant && right_consonant) {\n                return string(1, word[i]);\n            }\n        }\n    }\n    \n    // If no such vowel is found, return an empty string\n    return \"\";\n}\n\n"}
{"task_id": "CPP/6", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<int> parse_nested_parens(string paren_string) {\n    vector<int> result;\n    stringstream ss(paren_string);\n    string group;\n    \n    while (ss >> group) {\n        int max_depth = 0;\n        int current_depth = 0;\n        \n        for (char c : group) {\n            if (c == '(') {\n                current_depth++;\n                if (current_depth > max_depth) {\n                    max_depth = current_depth;\n                }\n            } else if (c == ')') {\n                current_depth--;\n            }\n        }\n        \n        result.push_back(max_depth);\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/87", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<vector<int>> get_row(vector<vector<int>> lst, int x) {\n    vector<vector<int>> result;\n    \n    // Traverse the 2D vector to find all occurrences of x\n    for (int i = 0; i < lst.size(); ++i) {\n        for (int j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                result.push_back({i, j});\n            }\n        }\n    }\n    \n    // Sort the result vector\n    sort(result.begin(), result.end(), [](const vector<int>& a, const vector<int>& b) {\n        // First sort by row in ascending order\n        if (a[0] != b[0]) {\n            return a[0] < b[0];\n        }\n        // If rows are the same, sort by column in descending order\n        return a[1] > b[1];\n    });\n    \n    return result;\n}\n\n// Example usage\n"}
{"task_id": "CPP/2", "generation": "#include <iostream>\n#include <cmath>\n\nfloat truncate_number(float number) {\n    // Get the integer part of the number\n    float integer_part = floor(number);\n    \n    // Subtract the integer part from the original number to get the decimal part\n    float decimal_part = number - integer_part;\n    \n    return decimal_part;\n}\n\n"}
{"task_id": "CPP/16", "generation": "#include <iostream>\n#include <string>\n#include <unordered_set>\n#include <algorithm>\n\nusing namespace std;\n\nint count_distinct_characters(string str) {\n    // Convert the string to lowercase\n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    \n    // Use an unordered_set to store distinct characters\n    unordered_set<char> distinct_chars;\n    \n    // Iterate through the string and add each character to the set\n    for (char c : str) {\n        distinct_chars.insert(c);\n    }\n    \n    // The size of the set is the number of distinct characters\n    return distinct_chars.size();\n}\n\n"}
{"task_id": "CPP/135", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nint can_arrange(vector<int> arr) {\n    for (int i = 1; i < arr.size(); ++i) {\n        if (arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    return -1;\n}\n"}
{"task_id": "CPP/106", "generation": "#include <vector>\nusing namespace std;\n\nvector<int> f(int n) {\n    vector<int> result(n);\n    \n    for (int i = 1; i <= n; ++i) {\n        if (i % 2 == 0) {\n            // Compute factorial of i\n            int factorial = 1;\n            for (int j = 1; j <= i; ++j) {\n                factorial *= j;\n            }\n            result[i - 1] = factorial;\n        } else {\n            // Compute sum of numbers from 1 to i\n            int sum = 0;\n            for (int j = 1; j <= i; ++j) {\n                sum += j;\n            }\n            result[i - 1] = sum;\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/162", "generation": "#include <stdio.h>\n#include <string>\n#include <openssl/md5.h>\nusing namespace std;\n\nstring string_to_md5(string text) {\n    if (text.empty()) {\n        return \"\";\n    }\n\n    unsigned char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.size(), result);\n\n    string md5_string;\n    char buffer[3];\n    for (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n        sprintf(buffer, \"%02x\", result[i]);\n        md5_string += buffer;\n    }\n\n    return md5_string;\n}\n"}
{"task_id": "CPP/5", "generation": "#include <vector>\n#include <iostream>\n\nusing namespace std;\n\nvector<int> intersperse(vector<int> numbers, int delimeter) {\n    // Check if the input vector is empty\n    if (numbers.empty()) {\n        return {};\n    }\n\n    // Create a new vector to store the result\n    vector<int> result;\n\n    // Iterate through the input vector\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        // Add the current element to the result\n        result.push_back(numbers[i]);\n\n        // If it's not the last element, add the delimiter\n        if (i < numbers.size() - 1) {\n            result.push_back(delimeter);\n        }\n    }\n\n    return result;\n}\n\n// Test the function\n"}
{"task_id": "CPP/97", "generation": "#include<stdio.h>\n#include<math.h>\n\nint multiply(int a, int b) {\n    // Extract the unit digits of both numbers\n    int unit_digit_a = abs(a) % 10;\n    int unit_digit_b = abs(b) % 10;\n    \n    // Return the product of the unit digits\n    return unit_digit_a * unit_digit_b;\n}\n\n"}
{"task_id": "CPP/44", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nstring change_base(int x, int base) {\n    if (x == 0) return \"0\"; // Special case for zero\n\n    string result = \"\";\n    while (x > 0) {\n        int remainder = x % base;\n        result += to_string(remainder); // Append the remainder to the result string\n        x /= base;\n    }\n\n    // Since we appended the remainders in reverse order, we need to reverse the string\n    reverse(result.begin(), result.end());\n\n    return result;\n}\n\n"}
{"task_id": "CPP/161", "generation": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring solve(string s) {\n    bool containsLetter = false;\n    for (char &c : s) {\n        if (isalpha(c)) {\n            containsLetter = true;\n            if (islower(c)) {\n                c = toupper(c);\n            } else {\n                c = tolower(c);\n            }\n        }\n    }\n    \n    // If the string contains no letters, reverse the string\n    if (!containsLetter) {\n        reverse(s.begin(), s.end());\n    }\n    \n    return s;\n}\n\n"}
{"task_id": "CPP/38", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring encode_cyclic(string s) {\n    int l = s.length();\n    int num = (l + 2) / 3;\n    string output;\n    for (int i = 0; i * 3 < l; i++) {\n        string x = s.substr(i * 3, 3);\n        if (x.length() == 3) {\n            x = x.substr(1) + x[0];\n        }\n        output += x;\n    }\n    return output;\n}\n\nstring decode_cyclic(string s) {\n    int l = s.length();\n    int num = (l + 2) / 3;\n    string output;\n    for (int i = 0; i * 3 < l; i++) {\n        string x = s.substr(i * 3, 3);\n        if (x.length() == 3) {\n            x = x[2] + x.substr(0, 2);\n        }\n        output += x;\n    }\n    return output;\n}\n"}
{"task_id": "CPP/93", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nstring encode(string message) {\n    string encodedMessage = \"\";\n    for (char &c : message) {\n        // Swap the case of the letter\n        if (islower(c)) {\n            c = toupper(c);\n        } else if (isupper(c)) {\n            c = tolower(c);\n        }\n\n        // Replace vowels with the letter that appears 2 places ahead in the alphabet\n        if (c == 'a' || c == 'A') {\n            c = (c == 'a') ? 'c' : 'C';\n        } else if (c == 'e' || c == 'E') {\n            c = (c == 'e') ? 'g' : 'G';\n        } else if (c == 'i' || c == 'I') {\n            c = (c == 'i') ? 'k' : 'K';\n        } else if (c == 'o' || c == 'O') {\n            c = (c == 'o') ? 'q' : 'Q';\n        } else if (c == 'u' || c == 'U') {\n            c = (c == 'u') ? 'w' : 'W';\n        }\n\n        encodedMessage += c;\n    }\n    return encodedMessage;\n}\n\n// Example usage\n"}
{"task_id": "CPP/152", "generation": "#include <vector>\n#include <cmath> // for std::abs\n\nusing namespace std;\n\nvector<int> compare(vector<int> game, vector<int> guess) {\n    vector<int> result;\n    for (size_t i = 0; i < game.size(); ++i) {\n        if (game[i] == guess[i]) {\n            result.push_back(0);\n        } else {\n            result.push_back(std::abs(game[i] - guess[i]));\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/62", "generation": "#include <vector>\nusing namespace std;\n\nvector<float> derivative(vector<float> xs) {\n    vector<float> result;\n    for (size_t i = 1; i < xs.size(); ++i) {\n        result.push_back(i * xs[i]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/7", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> filter_by_substring(vector<string> strings, string substring) {\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.find(substring) != string::npos) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/24", "generation": "#include<stdio.h>\n\nint largest_divisor(int n) {\n    if (n <= 1) {\n        return -1; // No valid divisor for n <= 1\n    }\n\n    for (int i = n / 2; i >= 1; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n\n    return -1; // This line should never be reached\n}\n\n"}
{"task_id": "CPP/79", "generation": "#include <iostream>\n#include <string>\n#include <algorithm> // for std::reverse\n\nusing namespace std;\n\nstring decimal_to_binary(int decimal) {\n    if (decimal == 0) {\n        return \"db0db\";\n    }\n\n    string binary;\n    \n    while (decimal > 0) {\n        int remainder = decimal % 2;\n        binary += to_string(remainder);\n        decimal /= 2;\n    }\n\n    // Reverse the binary string to get the correct order\n    reverse(binary.begin(), binary.end());\n\n    // Add the \"db\" characters at the beginning and end\n    binary = \"db\" + binary + \"db\";\n\n    return binary;\n}\n\n"}
{"task_id": "CPP/155", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n\nvector<int> even_odd_count(int num) {\n    // Convert the number to its absolute value to handle negative numbers\n    num = abs(num);\n    int even_count = 0;\n    int odd_count = 0;\n    \n    // Iterate through each digit of the number\n    while (num > 0) {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n        num /= 10;\n    }\n    \n    // Return the result as a vector\n    return {even_count, odd_count};\n}\n"}
{"task_id": "CPP/4", "generation": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <numeric> // For std::accumulate\n\nusing namespace std;\n\nfloat mean_absolute_deviation(vector<float> numbers) {\n    // Step 1: Calculate the mean of the dataset\n    float sum = accumulate(numbers.begin(), numbers.end(), 0.0);\n    float mean = sum / numbers.size();\n\n    // Step 2: Compute the absolute difference between each element and the mean\n    float absolute_deviations_sum = 0.0;\n    for (float number : numbers) {\n        absolute_deviations_sum += abs(number - mean);\n    }\n\n    // Step 3: Divide the sum of absolute deviations by the number of elements\n    float mad = absolute_deviations_sum / numbers.size();\n\n    return mad;\n}\n\n"}
{"task_id": "CPP/56", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool correct_bracketing(string brackets) {\n    int count = 0;\n    for (char bracket : brackets) {\n        if (bracket == '<') {\n            count++;\n        } else if (bracket == '>') {\n            count--;\n        }\n        // If count goes negative, it means there are unmatched closing brackets\n        if (count < 0) {\n            return false;\n        }\n    }\n    // At the end, count should be zero for all brackets to be matched\n    return count == 0;\n}\n\n"}
{"task_id": "CPP/159", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<int> eat(int number, int need, int remaining) {\n    int total_eaten = number + min(need, remaining);\n    int remaining_after_eating = max(0, remaining - need);\n    return {total_eaten, remaining_after_eating};\n}\n"}
{"task_id": "CPP/83", "generation": "#include <cmath>\n\nint starts_one_ends(int n) {\n    if (n == 1) {\n        return 1;  // There is only one 1-digit number, which is 1 itself.\n    }\n    // For n-digit numbers, the count of numbers that start or end with 1 is:\n    // 2 * (10^(n-1) - 10^(n-2))\n    return 2 * (std::pow(10, n-1) - std::pow(10, n-2));\n}\n"}
{"task_id": "CPP/27", "generation": "#include <iostream>\n#include <string>\n#include <cctype> // for isupper and islower\n\nusing namespace std;\n\nstring flip_case(string str) {\n    for (char &c : str) {\n        if (isupper(c)) {\n            c = tolower(c);\n        } else if (islower(c)) {\n            c = toupper(c);\n        }\n    }\n    return str;\n}\n\n"}
{"task_id": "CPP/146", "generation": "#include <vector>\n#include <cmath>\nusing namespace std;\n\nbool isOddDigit(int digit) {\n    return digit == 1 || digit == 3 || digit == 5 || digit == 7 || digit == 9;\n}\n\nint specialFilter(vector<int> nums) {\n    int count = 0;\n    \n    for (int num : nums) {\n        // Ignore numbers less than or equal to 10\n        if (num <= 10) continue;\n        \n        // Convert negative numbers to positive for digit extraction\n        int absNum = abs(num);\n        \n        // Extract the last digit\n        int lastDigit = absNum % 10;\n        \n        // Extract the first digit\n        int firstDigit = absNum;\n        while (firstDigit >= 10) {\n            firstDigit /= 10;\n        }\n        \n        // Check if both digits are odd\n        if (isOddDigit(firstDigit) && isOddDigit(lastDigit)) {\n            count++;\n        }\n    }\n    \n    return count;\n}\n\n// Example usage\n"}
{"task_id": "CPP/81", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nvector<string> numerical_letter_grade(vector<float> grades) {\n    vector<string> letter_grades;\n    for (float gpa : grades) {\n        if (gpa == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (gpa > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (gpa > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (gpa > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (gpa > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (gpa > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (gpa > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (gpa > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (gpa > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (gpa > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (gpa > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (gpa > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n}\n"}
{"task_id": "CPP/136", "generation": "#include <vector>\n#include <limits.h> // For INT_MAX and INT_MIN\n\nusing namespace std;\n\nvector<int> largest_smallest_integers(vector<int> lst) {\n    int largest_negative = INT_MIN; // Initialize to the smallest possible integer\n    int smallest_positive = INT_MAX; // Initialize to the largest possible integer\n\n    for (int num : lst) {\n        if (num < 0) {\n            // Update largest_negative if num is larger than the current largest_negative\n            if (num > largest_negative) {\n                largest_negative = num;\n            }\n        } else if (num > 0) {\n            // Update smallest_positive if num is smaller than the current smallest_positive\n            if (num < smallest_positive) {\n                smallest_positive = num;\n            }\n        }\n    }\n\n    // If no negative number was found, set largest_negative to 0\n    if (largest_negative == INT_MIN) {\n        largest_negative = 0;\n    }\n\n    // If no positive number was found, set smallest_positive to 0\n    if (smallest_positive == INT_MAX) {\n        smallest_positive = 0;\n    }\n\n    return {largest_negative, smallest_positive};\n}\n\n// Example usage\n"}
{"task_id": "CPP/67", "generation": "#include <iostream>\n#include <string>\n#include <regex>\n\nusing namespace std;\n\nint fruit_distribution(string s, int n) {\n    // Define regex patterns to extract the number of apples and oranges\n    regex apples_pattern(R\"(\\d+ apples)\");\n    regex oranges_pattern(R\"(\\d+ oranges)\");\n    \n    // Search for the number of apples\n    smatch apples_match;\n    if (regex_search(s, apples_match, apples_pattern)) {\n        int apples = stoi(apples_match.str().substr(0, apples_match.str().find(\" \")));\n        n -= apples;\n    }\n    \n    // Search for the number of oranges\n    smatch oranges_match;\n    if (regex_search(s, oranges_match, oranges_pattern)) {\n        int oranges = stoi(oranges_match.str().substr(0, oranges_match.str().find(\" \")));\n        n -= oranges;\n    }\n    \n    // The remaining number is the number of mangoes\n    return n;\n}\n\n"}
{"task_id": "CPP/48", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool is_palindrome(const string& text) {\n    int left = 0;\n    int right = text.length() - 1;\n\n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/125", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\n#include<sstream>\nusing namespace std;\n\nvector<string> split_words(string txt) {\n    // Check for whitespace\n    if (txt.find(' ') != string::npos) {\n        vector<string> result;\n        stringstream ss(txt);\n        string word;\n        while (ss >> word) {\n            result.push_back(word);\n        }\n        return result;\n    }\n    // Check for commas\n    else if (txt.find(',') != string::npos) {\n        vector<string> result;\n        stringstream ss(txt);\n        string word;\n        while (getline(ss, word, ',')) {\n            result.push_back(word);\n        }\n        return result;\n    }\n    // Count odd-positioned lowercase letters\n    else {\n        int count = 0;\n        for (char c : txt) {\n            if (islower(c) && (c - 'a') % 2 == 1) {\n                count++;\n            }\n        }\n        return {to_string(count)};\n    }\n}\n\n// Examples\n"}
{"task_id": "CPP/160", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\n\nint do_algebra(vector<string> operators, vector<int> operands) {\n    // Initialize the result with the first operand\n    int result = operands[0];\n    \n    // Iterate through the operators and operands to build the expression\n    for (size_t i = 0; i < operators.size(); ++i) {\n        string op = operators[i];\n        int operand = operands[i + 1];\n        \n        // Perform the operation based on the operator\n        if (op == \"+\") {\n            result += operand;\n        } else if (op == \"-\") {\n            result -= operand;\n        } else if (op == \"*\") {\n            result *= operand;\n        } else if (op == \"//\") {\n            result /= operand; // Note: C++ uses '/' for integer division, which is equivalent to floor division\n        } else if (op == \"**\") {\n            result = pow(result, operand);\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/151", "generation": "#include <vector>\n#include <cmath>\nusing namespace std;\n\nlong long double_the_difference(vector<float> lst) {\n    long long sum = 0;\n    \n    for (float num : lst) {\n        // Check if the number is a positive integer\n        if (num > 0 && floor(num) == num) {\n            int int_num = static_cast<int>(num);\n            // Check if the number is odd\n            if (int_num % 2 != 0) {\n                sum += int_num * int_num;\n            }\n        }\n    }\n    \n    return sum;\n}\n"}
{"task_id": "CPP/117", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nbool is_consonant(char c) {\n    // Convert the character to lowercase to handle both uppercase and lowercase letters\n    c = tolower(c);\n    // Check if the character is a consonant\n    return (c >= 'a' && c <= 'z') && !(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n}\n\nvector<string> select_words(string s, int n) {\n    vector<string> result;\n    if (s.empty()) {\n        return result;\n    }\n\n    // Use a stringstream to split the string into words\n    stringstream ss(s);\n    string word;\n\n    while (ss >> word) {\n        int consonant_count = 0;\n        // Count the number of consonants in the current word\n        for (char c : word) {\n            if (is_consonant(c)) {\n                consonant_count++;\n            }\n        }\n        // If the word contains exactly n consonants, add it to the result vector\n        if (consonant_count == n) {\n            result.push_back(word);\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/78", "generation": "#include <iostream>\n#include <string>\n#include <unordered_set>\nusing namespace std;\n\nint hex_key(string num) {\n    // Define the set of prime hexadecimal digits\n    unordered_set<char> prime_digits = {'2', '3', '5', '7', 'B', 'D'};\n    \n    // Initialize the count of prime digits\n    int count = 0;\n    \n    // Iterate through the input string\n    for (char c : num) {\n        // Check if the current character is in the set of prime digits\n        if (prime_digits.find(c) != prime_digits.end()) {\n            count++;\n        }\n    }\n    \n    // Return the count of prime digits\n    return count;\n}\n\n// Test cases\n"}
{"task_id": "CPP/74", "generation": "#include <vector>\n#include <string>\n#include <numeric> // for accumulate\n\nusing namespace std;\n\nint totalChars(const vector<string>& vec) {\n    return accumulate(vec.begin(), vec.end(), 0, [](int sum, const string& str) {\n        return sum + str.size();\n    });\n}\n\nvector<string> total_match(vector<string> lst1, vector<string> lst2) {\n    int total1 = totalChars(lst1);\n    int total2 = totalChars(lst2);\n    \n    if (total1 <= total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n"}
{"task_id": "CPP/53", "generation": "#include <iostream>\n\nint add(int x, int y) {\n    return x + y;\n}\n\n"}
{"task_id": "CPP/98", "generation": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint count_upper(string s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) { // Iterate through even indices\n        char c = s[i];\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/140", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring fix_spaces(string text) {\n    string result;\n    int n = text.length();\n    int i = 0;\n\n    while (i < n) {\n        if (text[i] == ' ') {\n            int count = 0;\n            // Count consecutive spaces\n            while (i < n && text[i] == ' ') {\n                count++;\n                i++;\n            }\n            // Replace with underscore if single space\n            if (count == 1) {\n                result += '_';\n            }\n            // Replace with hyphen if more than two consecutive spaces\n            else if (count > 2) {\n                result += '-';\n            }\n            // If exactly two spaces, replace each with underscore\n            else if (count == 2) {\n                result += \"__\";\n            }\n        } else {\n            // Append non-space characters directly\n            result += text[i];\n            i++;\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/34", "generation": "#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nvector<int> unique(vector<int> l) {\n    // Step 1: Sort the vector\n    sort(l.begin(), l.end());\n    \n    // Step 2: Remove duplicates\n    l.erase(unique(l.begin(), l.end()), l.end());\n    \n    return l;\n}\n\n"}
{"task_id": "CPP/66", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint digitSum(string s) {\n    int sum = 0;\n    for (char c : s) {\n        if (c >= 'A' && c <= 'Z') {\n            sum += c;\n        }\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/120", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> maximum(vector<int> arr, int k) {\n    // Step 1: Sort the array in ascending order\n    sort(arr.begin(), arr.end());\n    \n    // Step 2: Extract the last k elements (which are the top k maximum elements)\n    vector<int> result(arr.end() - k, arr.end());\n    \n    // Step 3: Return the result\n    return result;\n}\n"}
{"task_id": "CPP/139", "generation": "#include <stdio.h>\n\n// Helper function to calculate factorial of a number\nlong long factorial(int num) {\n    long long result = 1;\n    for (int i = 1; i <= num; i++) {\n        result *= i;\n    }\n    return result;\n}\n\n// Function to calculate the Brazilian factorial\nlong long special_factorial(int n) {\n    long long result = 1;\n    for (int i = n; i >= 1; i--) {\n        result *= factorial(i);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/12", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring longest(vector<string> strings) {\n    // Check if the vector is empty\n    if (strings.empty()) {\n        return \"\"; // Return an empty string to represent None\n    }\n\n    // Initialize variables to keep track of the longest string\n    string longest_string = strings[0];\n\n    // Iterate through the vector to find the longest string\n    for (const string& str : strings) {\n        if (str.length() > longest_string.length()) {\n            longest_string = str;\n        }\n    }\n\n    return longest_string;\n}\n\n"}
{"task_id": "CPP/121", "generation": "#include <vector>\n#include <iostream>\n\nusing namespace std;\n\nint solution(vector<int> lst) {\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        // Check if the index is even\n        if (i % 2 == 0) {\n            // Check if the element is odd\n            if (lst[i] % 2 != 0) {\n                sum += lst[i];\n            }\n        }\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/35", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm> // for std::max_element\n\nusing namespace std;\n\nfloat max_element(const vector<float>& l) {\n    // Check if the vector is empty\n    if (l.empty()) {\n        throw invalid_argument(\"Vector is empty\");\n    }\n    \n    // Use std::max_element to find the maximum element\n    return *max_element(l.begin(), l.end());\n}\n\n"}
{"task_id": "CPP/20", "generation": "#include <vector>\n#include <algorithm>\n#include <limits>\n\nusing namespace std;\n\nvector<float> find_closest_elements(vector<float> numbers) {\n    // Sort the vector to facilitate easy comparison of adjacent elements\n    sort(numbers.begin(), numbers.end());\n    \n    // Initialize variables to track the minimum difference and the closest pair\n    float min_diff = numeric_limits<float>::infinity();\n    vector<float> closest_pair;\n    \n    // Iterate through the sorted vector to find the closest pair\n    for (size_t i = 0; i < numbers.size() - 1; ++i) {\n        float diff = numbers[i + 1] - numbers[i];\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = {numbers[i], numbers[i + 1]};\n        }\n    }\n    \n    return closest_pair;\n}\n"}
{"task_id": "CPP/19", "generation": "#include <iostream>\n#include <string>\n#include <vector>\n#include <map>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nstring sort_numbers(string numbers) {\n    // Step 1: Create a mapping from number words to their corresponding integer values\n    map<string, int> word_to_num = {\n        {\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3}, {\"four\", 4},\n        {\"five\", 5}, {\"six\", 6}, {\"seven\", 7}, {\"eight\", 8}, {\"nine\", 9}\n    };\n\n    // Step 2: Tokenize the input string into individual number words\n    vector<string> words;\n    stringstream ss(numbers);\n    string word;\n    while (ss >> word) {\n        words.push_back(word);\n    }\n\n    // Step 3: Convert words to numbers using the mapping\n    vector<int> nums;\n    for (const string& w : words) {\n        nums.push_back(word_to_num[w]);\n    }\n\n    // Step 4: Sort the list of integers\n    sort(nums.begin(), nums.end());\n\n    // Step 5: Convert numbers back to words\n    map<int, string> num_to_word = {\n        {0, \"zero\"}, {1, \"one\"}, {2, \"two\"}, {3, \"three\"}, {4, \"four\"},\n        {5, \"five\"}, {6, \"six\"}, {7, \"seven\"}, {8, \"eight\"}, {9, \"nine\"}\n    };\n\n    vector<string> sorted_words;\n    for (int num : nums) {\n        sorted_words.push_back(num_to_word[num]);\n    }\n\n    // Step 6: Join the sorted words back into a single string with spaces\n    string result;\n    for (size_t i = 0; i < sorted_words.size(); ++i) {\n        result += sorted_words[i];\n        if (i < sorted_words.size() - 1) {\n            result += \" \";\n        }\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/85", "generation": "#include <vector>\nusing namespace std;\n\nint add(vector<int> lst) {\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 2 != 0 && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "CPP/21", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm> // for std::min_element and std::max_element\n\nusing namespace std;\n\nvector<float> rescale_to_unit(vector<float> numbers) {\n    // Find the minimum and maximum values in the vector\n    float min_value = *min_element(numbers.begin(), numbers.end());\n    float max_value = *max_element(numbers.begin(), numbers.end());\n\n    // Apply the linear transformation to each element\n    vector<float> rescaled_numbers;\n    for (float num : numbers) {\n        float rescaled_num = (num - min_value) / (max_value - min_value);\n        rescaled_numbers.push_back(rescaled_num);\n    }\n\n    return rescaled_numbers;\n}\n\n"}
{"task_id": "CPP/119", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nbool is_balanced(const string& s) {\n    int balance = 0;\n    for (char c : s) {\n        if (c == '(') {\n            balance++;\n        } else { // c == ')'\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance == 0;\n}\n\nstring match_parens(vector<string> lst) {\n    string s1 = lst[0];\n    string s2 = lst[1];\n    if (is_balanced(s1 + s2) || is_balanced(s2 + s1)) {\n        return \"Yes\";\n    }\n    return \"No\";\n}\n"}
{"task_id": "CPP/30", "generation": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<float> get_positive(vector<float> l) {\n    vector<float> positive_numbers;\n    for (float num : l) {\n        if (num > 0) {\n            positive_numbers.push_back(num);\n        }\n    }\n    return positive_numbers;\n}\n\n"}
{"task_id": "CPP/64", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nint vowels_count(string s) {\n    // Convert the string to lowercase to handle case insensitivity\n    transform(s.begin(), s.end(), s.begin(), ::tolower);\n    \n    int count = 0;\n    int length = s.length();\n    \n    // Check each character in the string\n    for (int i = 0; i < length; i++) {\n        char c = s[i];\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    \n    // Check if 'y' is at the end of the word\n    if (length > 0 && s[length - 1] == 'y') {\n        count++;\n    }\n    \n    return count;\n}\n\n// Example usage\n"}
{"task_id": "CPP/128", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n\nint prod_signs(vector<int> arr) {\n    // Handle the special case for an empty vector\n    if (arr.empty()) {\n        return -32768;\n    }\n\n    int product_of_signs = 1;\n    int sum_of_magnitudes = 0;\n\n    for (int num : arr) {\n        // Determine the sign of the number\n        int sign = (num > 0) ? 1 : (num < 0) ? -1 : 0;\n        // Update the product of signs\n        product_of_signs *= sign;\n        // Add the magnitude of the number to the sum\n        sum_of_magnitudes += abs(num);\n    }\n\n    // Multiply the sum of magnitudes by the product of signs\n    return sum_of_magnitudes * product_of_signs;\n}\n\n// Example usage\n"}
{"task_id": "CPP/127", "generation": "#include <vector>\n#include <string>\n#include <cmath>\nusing namespace std;\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nstring intersection(vector<int> interval1, vector<int> interval2) {\n    int start1 = interval1[0], end1 = interval1[1];\n    int start2 = interval2[0], end2 = interval2[1];\n    \n    // Find the intersection of the two intervals\n    int intersection_start = max(start1, start2);\n    int intersection_end = min(end1, end2);\n    \n    // If the intervals do not intersect\n    if (intersection_start > intersection_end) {\n        return \"NO\";\n    }\n    \n    // Calculate the length of the intersection\n    int intersection_length = intersection_end - intersection_start + 1;\n    \n    // Check if the length is a prime number\n    if (is_prime(intersection_length)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n"}
{"task_id": "CPP/122", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nint add_elements(vector<int> arr, int k) {\n    int sum_of_elements = 0;\n    for (int i = 0; i < min(k, static_cast<int>(arr.size())); ++i) {\n        if (arr[i] < 100) {\n            sum_of_elements += arr[i];\n        }\n    }\n    return sum_of_elements;\n}\n"}
{"task_id": "CPP/59", "generation": "#include <iostream>\nusing namespace std;\n\nint largest_prime_factor(int n) {\n    int largest_factor = 1;\n    \n    // Check for the smallest prime factor, which is 2\n    while (n % 2 == 0) {\n        largest_factor = 2;\n        n /= 2;\n    }\n    \n    // Check for odd factors from 3 onwards\n    for (int i = 3; i * i <= n; i += 2) {\n        while (n % i == 0) {\n            largest_factor = i;\n            n /= i;\n        }\n    }\n    \n    // If n is still greater than 2, then n itself is a prime factor\n    if (n > 2) {\n        largest_factor = n;\n    }\n    \n    return largest_factor;\n}\n\n"}
{"task_id": "CPP/134", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nbool check_if_last_char_is_a_letter(string txt) {\n    if (txt.empty()) {\n        return false;\n    }\n\n    char last_char = txt.back();\n    if (!isalpha(last_char)) {\n        return false;\n    }\n\n    if (txt.length() == 1) {\n        return true;\n    }\n\n    char second_last_char = txt[txt.length() - 2];\n    if (isspace(second_last_char)) {\n        return true;\n    }\n\n    return false;\n}\n"}
{"task_id": "CPP/42", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<int> incr_list(vector<int> l) {\n    vector<int> result;\n    for (int i = 0; i < l.size(); i++) {\n        result.push_back(l[i] + 1);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/11", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring string_xor(string a, string b) {\n    // Ensure both strings are of the same length\n    if (a.length() != b.length()) {\n        throw invalid_argument(\"Input strings must be of the same length\");\n    }\n\n    string result = \"\";\n    for (size_t i = 0; i < a.length(); ++i) {\n        // Perform XOR operation: '0' ^ '0' = '0', '1' ^ '1' = '0', '0' ^ '1' = '1', '1' ^ '0' = '1'\n        char xor_char = (a[i] == b[i]) ? '0' : '1';\n        result += xor_char;\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/40", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nbool triples_sum_to_zero(vector<int> l) {\n    // Sort the vector\n    sort(l.begin(), l.end());\n    \n    int n = l.size();\n    \n    // Iterate through the vector\n    for (int i = 0; i < n - 2; ++i) {\n        // Skip duplicates for the first element\n        if (i > 0 && l[i] == l[i - 1]) continue;\n        \n        int left = i + 1;\n        int right = n - 1;\n        \n        while (left < right) {\n            int sum = l[i] + l[left] + l[right];\n            \n            if (sum == 0) {\n                return true;\n            } else if (sum < 0) {\n                // Move the left pointer to the right to increase the sum\n                ++left;\n            } else {\n                // Move the right pointer to the left to decrease the sum\n                --right;\n            }\n        }\n    }\n    \n    return false;\n}\n\n// Example usage\n"}
{"task_id": "CPP/13", "generation": "#include<iostream>\nusing namespace std;\n\nint greatest_common_divisor(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\n"}
{"task_id": "CPP/130", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<int> tri(int n) {\n    if (n < 0) {\n        return {};\n    }\n\n    vector<int> tribonacci_sequence(n + 1, 0);\n    tribonacci_sequence[0] = 1;\n\n    for (int i = 1; i <= n; ++i) {\n        if (i % 2 == 0) {\n            tribonacci_sequence[i] = 1 + i / 2;\n        } else {\n            if (i == n) {  // Handle the last odd index separately\n                tribonacci_sequence[i] = tribonacci_sequence[i - 1] + tribonacci_sequence[i - 2] + 1;\n            } else {\n                tribonacci_sequence[i] = tribonacci_sequence[i - 1] + tribonacci_sequence[i - 2] + tribonacci_sequence[i + 1];\n            }\n        }\n    }\n\n    return tribonacci_sequence;\n}\n"}
{"task_id": "CPP/60", "generation": "#include<iostream>\nusing namespace std;\n\nint sum_to_n(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; ++i) {\n        sum += i;\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/23", "generation": "#include <iostream>\n#include <string>\n\nint strlen(const std::string& str) {\n    return str.length();\n}\n\n"}
{"task_id": "CPP/46", "generation": "#include <iostream>\nusing namespace std;\n\nint fib4(int n) {\n    // Base cases\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n\n    // Initialize the first four elements of the sequence\n    int a = 0, b = 0, c = 2, d = 0;\n    int result = 0;\n\n    // Compute the sequence iteratively\n    for (int i = 4; i <= n; ++i) {\n        result = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = result;\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/51", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nstring remove_vowels(string text) {\n    string result;\n    for (char c : text) {\n        // Check if the character is a vowel (both uppercase and lowercase)\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' &&\n            c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n            result += c;\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/18", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint how_many_times(string str, string substring) {\n    int count = 0;\n    int sub_len = substring.length();\n    int str_len = str.length();\n\n    // If either string is empty, return 0\n    if (sub_len == 0 || str_len == 0) {\n        return 0;\n    }\n\n    // Iterate through the string and check for substring matches\n    for (int i = 0; i <= str_len - sub_len; ++i) {\n        if (str.substr(i, sub_len) == substring) {\n            ++count;\n        }\n    }\n\n    return count;\n}\n\n"}
{"task_id": "CPP/143", "generation": "#include <iostream>\n#include <string>\n#include <vector>\n#include <sstream>\n#include <cmath>\n\nusing namespace std;\n\n// Function to check if a number is prime\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true; // 2 is the only even prime number\n    if (n % 2 == 0) return false; // Other even numbers are not prime\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nstring words_in_sentence(string sentence) {\n    stringstream ss(sentence);\n    string word;\n    vector<string> result;\n    \n    // Split the sentence into words\n    while (ss >> word) {\n        // Check if the length of the word is a prime number\n        if (isPrime(word.length())) {\n            result.push_back(word);\n        }\n    }\n    \n    // Join the words back into a single string\n    string resultString;\n    for (size_t i = 0; i < result.size(); ++i) {\n        if (i != 0) resultString += \" \";\n        resultString += result[i];\n    }\n    \n    return resultString;\n}\n\n"}
{"task_id": "CPP/108", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n\nint sum_of_digits(int num) {\n    int total = 0;\n    int abs_num = abs(num);\n    while (abs_num > 0) {\n        total += abs_num % 10;\n        abs_num /= 10;\n    }\n    if (num < 0) {\n        total = -total;\n    }\n    return total;\n}\n\nint count_nums(vector<int> n) {\n    int count = 0;\n    for (int num : n) {\n        if (sum_of_digits(num) > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/43", "generation": "#include <vector>\n#include <unordered_set>\nusing namespace std;\n\nbool pairs_sum_to_zero(vector<int> l) {\n    unordered_set<int> seen;\n    \n    for (int num : l) {\n        if (seen.find(-num) != seen.end()) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    \n    return false;\n}\n\n// Example usage\n"}
{"task_id": "CPP/70", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> strange_sort_list(vector<int> lst) {\n    // Sort the input vector in ascending order\n    sort(lst.begin(), lst.end());\n    \n    // Initialize the result vector\n    vector<int> result;\n    \n    // Initialize indices for the smallest and largest elements\n    int i = 0;\n    int j = lst.size() - 1;\n    \n    // Alternate between smallest and largest elements\n    while (i <= j) {\n        if (i <= j) {\n            result.push_back(lst[i]);\n            i++;\n        }\n        if (i <= j) {\n            result.push_back(lst[j]);\n            j--;\n        }\n    }\n    \n    return result;\n}\n\n// Example usage\n"}
{"task_id": "CPP/63", "generation": "#include <stdio.h>\n\nint fibfib(int n) {\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n\n    int a = 0, b = 0, c = 1, d;\n    for (int i = 3; i <= n; ++i) {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\n\n"}
{"task_id": "CPP/89", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring encrypt(string s) {\n    string encrypted = \"\";\n    for (char c : s) {\n        if (c >= 'a' && c <= 'z') {\n            // Shift the character by 4 places\n            char newChar = ((c - 'a' + 4) % 26) + 'a';\n            encrypted += newChar;\n        } else {\n            // If the character is not a lowercase letter, leave it unchanged\n            encrypted += c;\n        }\n    }\n    return encrypted;\n}\n\n"}
{"task_id": "CPP/26", "generation": "#include<stdio.h>\n#include<vector>\n#include<unordered_map>\nusing namespace std;\n\nvector<int> remove_duplicates(vector<int> numbers) {\n    unordered_map<int, int> count_map;\n    vector<int> result;\n\n    // Count occurrences of each number\n    for (int num : numbers) {\n        count_map[num]++;\n    }\n\n    // Add numbers that occur exactly once to the result\n    for (int num : numbers) {\n        if (count_map[num] == 1) {\n            result.push_back(num);\n        }\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/104", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\n// Helper function to check if a number contains any even digit\nbool hasEvenDigit(int num) {\n    while (num > 0) {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            return true;\n        }\n        num /= 10;\n    }\n    return false;\n}\n\nvector<int> unique_digits(vector<int> x) {\n    vector<int> result;\n    \n    // Filter out numbers that contain any even digit\n    for (int num : x) {\n        if (!hasEvenDigit(num)) {\n            result.push_back(num);\n        }\n    }\n    \n    // Sort the result in increasing order\n    sort(result.begin(), result.end());\n    \n    return result;\n}\n\n// Example usage\n"}
{"task_id": "CPP/90", "generation": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nusing namespace std;\n\nint next_smallest(vector<int> lst) {\n    // If the vector has fewer than 2 elements, return -1 (None)\n    if (lst.size() < 2) {\n        return -1;\n    }\n\n    // Sort the vector\n    sort(lst.begin(), lst.end());\n\n    // Find the second smallest unique element\n    int smallest = lst[0];\n    for (int i = 1; i < lst.size(); ++i) {\n        if (lst[i] != smallest) {\n            return lst[i];\n        }\n    }\n\n    // If all elements are the same, return -1 (None)\n    return -1;\n}\n\n"}
{"task_id": "CPP/126", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nbool is_sorted(vector<int> lst) {\n    // Check if the vector is sorted in ascending order\n    if (!is_sorted(lst.begin(), lst.end())) {\n        return false;\n    }\n\n    // Check if any number appears more than twice\n    for (size_t i = 0; i < lst.size(); ++i) {\n        int count = 0;\n        for (size_t j = 0; j < lst.size(); ++j) {\n            if (lst[i] == lst[j]) {\n                count++;\n            }\n            if (count > 2) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n"}
{"task_id": "CPP/68", "generation": "#include<vector>\nusing namespace std;\n\nvector<int> pluck(vector<int> arr) {\n    // Initialize variables to store the smallest even value and its index\n    int min_even_value = -1;\n    int min_even_index = -1;\n    \n    // Iterate through the vector\n    for (int i = 0; i < arr.size(); ++i) {\n        // Check if the current element is even\n        if (arr[i] % 2 == 0) {\n            // If it's the first even value found or it's smaller than the current smallest even value\n            if (min_even_value == -1 || arr[i] < min_even_value) {\n                min_even_value = arr[i];\n                min_even_index = i;\n            }\n        }\n    }\n    \n    // If no even value was found, return an empty vector\n    if (min_even_value == -1) {\n        return {};\n    }\n    \n    // Return the smallest even value and its index\n    return {min_even_value, min_even_index};\n}\n"}
{"task_id": "CPP/58", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <set>\n\nusing namespace std;\n\nvector<int> common(vector<int> l1, vector<int> l2) {\n    // Sort both vectors\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n\n    // Use a set to store unique common elements\n    set<int> commonSet;\n\n    // Use two pointers to traverse both vectors\n    int i = 0, j = 0;\n    while (i < l1.size() && j < l2.size()) {\n        if (l1[i] == l2[j]) {\n            commonSet.insert(l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n\n    // Convert the set to a vector\n    vector<int> result(commonSet.begin(), commonSet.end());\n    return result;\n}\n\n"}
{"task_id": "CPP/112", "generation": "#include<iostream>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nvector<string> reverse_delete(string s, string c) {\n    // Step 1: Remove characters from s that are in c\n    string result;\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            result += ch;\n        }\n    }\n    \n    // Step 2: Check if the result string is a palindrome\n    bool isPalindrome = true;\n    int n = result.length();\n    for (int i = 0; i < n / 2; ++i) {\n        if (result[i] != result[n - i - 1]) {\n            isPalindrome = false;\n            break;\n        }\n    }\n    \n    // Step 3: Prepare the result vector\n    vector<string> resultVector;\n    resultVector.push_back(result);\n    resultVector.push_back(isPalindrome ? \"True\" : \"False\");\n    \n    return resultVector;\n}\n\n"}
{"task_id": "CPP/96", "generation": "#include <vector>\n#include <cmath>\n\nusing namespace std;\n\nvector<int> count_up_to(int n) {\n    if (n <= 2) {\n        return {};\n    }\n\n    // Create a boolean array \"prime[0..n]\" and initialize\n    // all entries it as true. A value in prime[i] will\n    // finally be false if i is Not a prime, else true.\n    vector<bool> prime(n, true);\n\n    // 0 and 1 are not prime numbers\n    prime[0] = prime[1] = false;\n\n    for (int p = 2; p * p < n; p++) {\n        // If prime[p] is not changed, then it is a prime\n        if (prime[p] == true) {\n            // Update all multiples of p to false\n            for (int i = p * p; i < n; i += p) {\n                prime[i] = false;\n            }\n        }\n    }\n\n    // Collect all prime numbers\n    vector<int> primes;\n    for (int p = 2; p < n; p++) {\n        if (prime[p]) {\n            primes.push_back(p);\n        }\n    }\n\n    return primes;\n}\n"}
{"task_id": "CPP/157", "generation": "#include<stdio.h>\n#include<math.h>\n\nbool right_angle_triangle(float a, float b, float c) {\n    // Ensure the sides are in non-decreasing order\n    if (a > b) {\n        float temp = a;\n        a = b;\n        b = temp;\n    }\n    if (b > c) {\n        float temp = b;\n        b = c;\n        c = temp;\n    }\n    if (a > b) {\n        float temp = a;\n        a = b;\n        b = temp;\n    }\n\n    // Now c is the longest side\n    return (pow(a, 2) + pow(b, 2) == pow(c, 2));\n}\n\n"}
{"task_id": "CPP/99", "generation": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<sstream>\n#include<iostream>\nusing namespace std;\n\nint closest_integer(string value) {\n    // Convert the string to a double\n    double number;\n    stringstream ss(value);\n    ss >> number;\n\n    // Round the number away from zero\n    if (number >= 0) {\n        return static_cast<int>(floor(number + 0.5));\n    } else {\n        return static_cast<int>(ceil(number - 0.5));\n    }\n}\n\n// Test cases\n"}
{"task_id": "CPP/149", "generation": "#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nvector<string> sorted_list_sum(vector<string> lst) {\n    // Step 1: Filter out strings with odd lengths\n    vector<string> filtered_lst;\n    for (const string& s : lst) {\n        if (s.length() % 2 == 0) {\n            filtered_lst.push_back(s);\n        }\n    }\n\n    // Step 2: Sort the filtered strings\n    sort(filtered_lst.begin(), filtered_lst.end(), [](const string& a, const string& b) {\n        if (a.length() == b.length()) {\n            return a < b; // Sort alphabetically if lengths are the same\n        }\n        return a.length() < b.length(); // Sort by length\n    });\n\n    return filtered_lst;\n}\n\n// Example usage\n"}
{"task_id": "CPP/86", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <sstream>\n\nusing namespace std;\n\nstring anti_shuffle(string s) {\n    // Create a stringstream to split the input string by spaces\n    stringstream ss(s);\n    string word;\n    string result;\n\n    // Process each word in the string\n    while (ss >> word) {\n        // Sort the characters of the word in ascending order\n        sort(word.begin(), word.end());\n        // Append the sorted word to the result string\n        result += word + \" \";\n    }\n\n    // Remove the trailing space if there is any\n    if (!result.empty()) {\n        result.pop_back();\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/129", "generation": "#include <vector>\n#include <queue>\n#include <climits>\nusing namespace std;\n\nstruct State {\n    vector<int> path;\n    int x, y;\n};\n\nvector<int> minPath(vector<vector<int>> grid, int k) {\n    int N = grid.size();\n    vector<int> min_path(k, INT_MAX);\n    \n    queue<State> q;\n    \n    // Initialize the queue with all starting points\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            q.push({{grid[i][j]}, i, j});\n        }\n    }\n    \n    while (!q.empty()) {\n        State current = q.front();\n        q.pop();\n        \n        // If the current path length is k, compare and update min_path\n        if (current.path.size() == k) {\n            if (current.path < min_path) {\n                min_path = current.path;\n            }\n            continue;\n        }\n        \n        // Explore all 4 possible moves (up, down, left, right)\n        int dx[] = {-1, 1, 0, 0};\n        int dy[] = {0, 0, -1, 1};\n        \n        for (int d = 0; d < 4; ++d) {\n            int nx = current.x + dx[d];\n            int ny = current.y + dy[d];\n            \n            if (nx >= 0 && nx < N && ny >= 0 && ny < N) {\n                vector<int> new_path = current.path;\n                new_path.push_back(grid[nx][ny]);\n                q.push({new_path, nx, ny});\n            }\n        }\n    }\n    \n    return min_path;\n}\n\n"}
{"task_id": "CPP/49", "generation": "#include <stdio.h>\n\nint modp(int n, int p) {\n    if (n == 0) {\n        return 1;\n    }\n\n    long long result = 1;\n    long long base = 2;\n\n    while (n > 0) {\n        // If n is odd, multiply base with result\n        if (n % 2 == 1) {\n            result = (result * base) % p;\n        }\n        // n must be even now\n        n = n / 2;\n        base = (base * base) % p;  // Square the base\n    }\n\n    return (int)result;\n}\n\n"}
{"task_id": "CPP/156", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring int_to_mini_roman(int number) {\n    // Define the Roman numeral symbols and their values in descending order\n    vector<pair<int, string>> roman_symbols = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"},\n        {100, \"c\"}, {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"},\n        {10, \"x\"}, {9, \"ix\"}, {5, \"v\"}, {4, \"iv\"}, {1, \"i\"}\n    };\n    \n    string result = \"\";\n    \n    // Iterate through the symbols\n    for (const auto& symbol : roman_symbols) {\n        while (number >= symbol.first) {\n            result += symbol.second;\n            number -= symbol.first;\n        }\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/65", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\n\nstring circular_shift(int x, int shift) {\n    // Convert the integer to a string\n    string x_str = to_string(x);\n    int n = x_str.length();\n\n    // Check if shift is greater than or equal to the number of digits\n    if (shift >= n) {\n        // Reverse the string and return\n        string reversed_str = x_str;\n        reverse(reversed_str.begin(), reversed_str.end());\n        return reversed_str;\n    } else {\n        // Perform the circular shift\n        string shifted_str = x_str.substr(n - shift) + x_str.substr(0, n - shift);\n        return shifted_str;\n    }\n}\n"}
{"task_id": "CPP/9", "generation": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<int> rolling_max(vector<int> numbers) {\n    vector<int> result;\n    if (numbers.empty()) {\n        return result; // Return an empty vector if the input is empty\n    }\n\n    int current_max = numbers[0]; // Initialize the current max with the first element\n    result.push_back(current_max); // Add the first element to the result\n\n    for (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > current_max) {\n            current_max = numbers[i]; // Update the current max if a larger element is found\n        }\n        result.push_back(current_max); // Add the current max to the result\n    }\n\n    return result;\n}\n\n"}
{"task_id": "CPP/158", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_set>\n#include <algorithm>\n\nusing namespace std;\n\nstring find_max(vector<string> words) {\n    string max_word = \"\";\n    int max_unique_count = 0;\n\n    for (const string& word : words) {\n        // Use an unordered_set to count unique characters\n        unordered_set<char> unique_chars(word.begin(), word.end());\n        int unique_count = unique_chars.size();\n\n        // If the current word has more unique characters, update max_word\n        if (unique_count > max_unique_count) {\n            max_word = word;\n            max_unique_count = unique_count;\n        }\n        // If the current word has the same number of unique characters but is lexicographically smaller, update max_word\n        else if (unique_count == max_unique_count && word < max_word) {\n            max_word = word;\n        }\n    }\n\n    return max_word;\n}\n\n"}
{"task_id": "CPP/8", "generation": "#include <vector>\n#include <numeric> // For std::accumulate\n\nusing namespace std;\n\nvector<int> sum_product(const vector<int>& numbers) {\n    // Initialize sum to 0 and product to 1\n    int sum = 0;\n    int product = 1;\n\n    // Iterate through the vector to calculate sum and product\n    for (int num : numbers) {\n        sum += num;\n        product *= num;\n    }\n\n    // Return the result as a vector\n    return {sum, product};\n}\n\n// Example usage\n"}
{"task_id": "CPP/95", "generation": "#include<stdio.h>\n#include<string>\n#include<map>\n#include<cctype> // for islower and isupper functions\nusing namespace std;\n\nbool check_dict_case(map<string, string> dict) {\n    // If the map is empty, return false\n    if (dict.empty()) {\n        return false;\n    }\n\n    bool all_lower = true;\n    bool all_upper = true;\n\n    for (const auto& pair : dict) {\n        const string& key = pair.first;\n\n        // Check if the key is a string\n        if (key.empty()) {\n            return false;\n        }\n\n        // Check if all characters in the key are either all lower case or all upper case\n        bool is_lower = true;\n        bool is_upper = true;\n\n        for (char c : key) {\n            if (!islower(c)) {\n                is_lower = false;\n            }\n            if (!isupper(c)) {\n                is_upper = false;\n            }\n        }\n\n        // If the key is neither all lower case nor all upper case, return false\n        if (!is_lower && !is_upper) {\n            return false;\n        }\n\n        // Update the overall flags\n        all_lower &= is_lower;\n        all_upper &= is_upper;\n    }\n\n    // Return true if all keys are either all lower case or all upper case\n    return all_lower || all_upper;\n}\n\n// Example usage\n"}
{"task_id": "CPP/55", "generation": "#include<iostream>\nusing namespace std;\n\nint fib(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}\n\n"}
{"task_id": "CPP/29", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nvector<string> filter_by_prefix(vector<string> strings, string prefix) {\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.substr(0, prefix.size()) == prefix) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/72", "generation": "#include <vector>\n#include <numeric> // for std::accumulate\n#include <algorithm> // for std::reverse\n\nbool will_it_fly(vector<int> q, int w) {\n    // Check if the vector is palindromic\n    vector<int> reversed_q = q;\n    reverse(reversed_q.begin(), reversed_q.end());\n    if (q != reversed_q) {\n        return false;\n    }\n    \n    // Calculate the sum of the vector elements\n    int sum = accumulate(q.begin(), q.end(), 0);\n    \n    // Check if the sum is less than or equal to the maximum possible weight\n    return sum <= w;\n}\n"}
{"task_id": "CPP/54", "generation": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\nbool same_chars(string s0, string s1) {\n    // Convert strings to vectors of characters and sort them\n    string sorted_s0 = s0;\n    string sorted_s1 = s1;\n    sort(sorted_s0.begin(), sorted_s0.end());\n    sort(sorted_s1.begin(), sorted_s1.end());\n    \n    // Compare the sorted vectors\n    return sorted_s0 == sorted_s1;\n}\n"}
{"task_id": "CPP/91", "generation": "#include<stdio.h>\n#include<string>\n#include<sstream>\n#include<vector>\nusing namespace std;\n\nint is_bored(string S) {\n    vector<string> sentences;\n    stringstream ss(S);\n    string sentence;\n\n    // Split the string by '.', '?', and '!'\n    while (getline(ss, sentence, '.')) {\n        sentences.push_back(sentence);\n    }\n    ss.clear();\n    ss.str(S);\n    while (getline(ss, sentence, '?')) {\n        sentences.push_back(sentence);\n    }\n    ss.clear();\n    ss.str(S);\n    while (getline(ss, sentence, '!')) {\n        sentences.push_back(sentence);\n    }\n\n    int boredom_count = 0;\n    for (const string& s : sentences) {\n        string trimmed = s;\n        // Remove leading and trailing whitespace\n        size_t start = trimmed.find_first_not_of(\" \\t\\n\\r\");\n        size_t end = trimmed.find_last_not_of(\" \\t\\n\\r\");\n        if (start != string::npos && end != string::npos) {\n            trimmed = trimmed.substr(start, end - start + 1);\n        }\n        // Check if the sentence starts with \"I\"\n        if (!trimmed.empty() && trimmed[0] == 'I') {\n            boredom_count++;\n        }\n    }\n\n    return boredom_count;\n}\n"}
{"task_id": "CPP/77", "generation": "#include <iostream>\n#include <cmath>\n\nbool iscube(int a) {\n    if (a < 0) {\n        // If a is negative, we need to handle the cube root of a negative number\n        a = -a;\n        double cubeRoot = cbrt(a);\n        int intCubeRoot = static_cast<int>(cubeRoot);\n        return (intCubeRoot * intCubeRoot * intCubeRoot == a);\n    } else {\n        // If a is non-negative, we can directly take the cube root\n        double cubeRoot = cbrt(a);\n        int intCubeRoot = static_cast<int>(cubeRoot);\n        return (intCubeRoot * intCubeRoot * intCubeRoot == a);\n    }\n}\n\n"}
{"task_id": "CPP/73", "generation": "#include <vector>\n#include <iostream>\nusing namespace std;\n\nint smallest_change(vector<int> arr) {\n    int left = 0;\n    int right = arr.size() - 1;\n    int changes = 0;\n\n    while (left < right) {\n        if (arr[left] != arr[right]) {\n            changes++;\n        }\n        left++;\n        right--;\n    }\n\n    return changes;\n}\n\n"}
{"task_id": "CPP/71", "generation": "#include <stdio.h>\n#include <math.h>\n\nfloat triangle_area(float a, float b, float c) {\n    // Check if the sides can form a valid triangle\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n\n    // Calculate the semi-perimeter\n    float s = (a + b + c) / 2;\n\n    // Calculate the area using Heron's formula\n    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n\n    // Return the area rounded to 2 decimal points\n    return round(area * 100) / 100;\n}\n\n"}
{"task_id": "CPP/82", "generation": "#include <iostream>\n#include <string>\n#include <cmath>\nusing namespace std;\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true; // 2 is the only even prime number\n    if (n % 2 == 0) return false; // other even numbers are not prime\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nbool prime_length(string str) {\n    int length = str.length();\n    return is_prime(length);\n}\n\n"}
{"task_id": "CPP/114", "generation": "#include <iostream>\n#include <vector>\n#include <climits>\nusing namespace std;\n\nlong long minSubArraySum(vector<long long> nums) {\n    // Step 1: Negate the elements\n    for (int i = 0; i < nums.size(); ++i) {\n        nums[i] = -nums[i];\n    }\n\n    // Step 2: Apply Kadane's algorithm to find the maximum sum subarray of the negated elements\n    long long max_ending_here = nums[0];\n    long long max_so_far = nums[0];\n\n    for (int i = 1; i < nums.size(); ++i) {\n        max_ending_here = max(nums[i], max_ending_here + nums[i]);\n        max_so_far = max(max_so_far, max_ending_here);\n    }\n\n    // Step 3: Negate the result to get the minimum sum of the original elements\n    return -max_so_far;\n}\n\n"}
{"task_id": "CPP/138", "generation": "#include<stdio.h>\n\nbool is_equal_to_sum_even(int n) {\n    // Check if n is at least 8 and is even\n    return (n >= 8) && (n % 2 == 0);\n}\n\n"}
{"task_id": "CPP/132", "generation": "#include<stdio.h>\n#include<string>\n#include<stack>\nusing namespace std;\n\nbool is_nested(string str) {\n    stack<char> s;\n    bool nested = false;\n    int depth = 0;\n\n    for (char c : str) {\n        if (c == '[') {\n            s.push(c);\n            depth++;\n        } else if (c == ']') {\n            if (!s.empty() && s.top() == '[') {\n                s.pop();\n                if (depth > 1) {\n                    nested = true;\n                }\n                depth--;\n            } else {\n                s.push(c);\n            }\n        }\n    }\n\n    return nested;\n}\n"}
{"task_id": "CPP/3", "generation": "#include <vector>\nusing namespace std;\n\nbool below_zero(vector<int> operations) {\n    int balance = 0;\n    for (int operation : operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/142", "generation": "#include <vector>\n#include <cmath> // For pow function\n\nusing namespace std;\n\nint sum_squares(vector<int> lst) {\n    int sum = 0;\n\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 3 == 0) {\n            // Square the element if the index is a multiple of 3\n            lst[i] = lst[i] * lst[i];\n        } else if (i % 4 == 0 && i % 3 != 0) {\n            // Cube the element if the index is a multiple of 4 but not a multiple of 3\n            lst[i] = lst[i] * lst[i] * lst[i];\n        }\n        // Add the (possibly transformed) element to the sum\n        sum += lst[i];\n    }\n\n    return sum;\n}\n"}
{"task_id": "CPP/50", "generation": "#include <stdio.h>\n#include <string>\nusing namespace std;\n\nstring encode_shift(string s) {\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i = 0; i < s.length(); i++) {\n        int w = ((int)s[i] + 5 - (int)'a') % 26 + (int)'a';   \n        out = out + (char)w;\n    }\n    return out;\n}\n\nstring decode_shift(string s) {\n    // takes as input string encoded with encode_shift function. Returns decoded string.\n    string out;\n    int i;\n    for (i = 0; i < s.length(); i++) {\n        int w = ((int)s[i] - 5 - (int)'a' + 26) % 26 + (int)'a';\n        out = out + (char)w;\n    }\n    return out;\n}\n\n"}
{"task_id": "CPP/103", "generation": "#include <iostream>\n#include <cmath>\n#include <string>\nusing namespace std;\n\nstring rounded_avg(int n, int m) {\n    // Step 1: Check if n is greater than m\n    if (n > m) {\n        return \"-1\";\n    }\n    \n    // Step 2: Calculate the average\n    int sum = 0;\n    for (int i = n; i <= m; ++i) {\n        sum += i;\n    }\n    double average = static_cast<double>(sum) / (m - n + 1);\n    \n    // Step 3: Round the average to the nearest integer (smaller one)\n    int rounded_average = floor(average);\n    \n    // Step 4: Convert the rounded average to binary\n    string binary_representation;\n    if (rounded_average == 0) {\n        binary_representation = \"0\";\n    } else {\n        while (rounded_average > 0) {\n            binary_representation = to_string(rounded_average % 2) + binary_representation;\n            rounded_average /= 2;\n        }\n    }\n    \n    // Step 5: Return the binary string\n    return binary_representation;\n}\n\n"}
{"task_id": "CPP/57", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nbool monotonic(vector<float> l) {\n    bool increasing = true;\n    bool decreasing = true;\n    \n    for (size_t i = 1; i < l.size(); ++i) {\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n        }\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n        }\n    }\n    \n    return increasing || decreasing;\n}\n"}
{"task_id": "CPP/28", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring concatenate(const vector<string>& strings) {\n    string result;\n    for (const string& s : strings) {\n        result += s;\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/39", "generation": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n// Function to check if a number is prime\nbool is_prime(int num) {\n    if (num <= 1) return false;\n    if (num == 2) return true;\n    if (num % 2 == 0) return false;\n    for (int i = 3; i <= sqrt(num); i += 2) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\n// Function to generate the n-th prime Fibonacci number\nint prime_fib(int n) {\n    if (n <= 0) return -1; // Invalid input\n    int a = 0, b = 1, count = 0;\n    while (true) {\n        int temp = a + b;\n        a = b;\n        b = temp;\n        if (is_prime(b)) {\n            count++;\n            if (count == n) {\n                return b;\n            }\n        }\n    }\n}\n\n// Main function to test the prime_fib function\n"}
{"task_id": "CPP/45", "generation": "#include <stdio.h>\n\nfloat triangle_area(float a, float h) {\n    return 0.5 * a * h;\n}\n\n"}
{"task_id": "CPP/145", "generation": "#include <vector>\n#include <algorithm>\n#include <numeric>\n#include <string>\n\nusing namespace std;\n\nint sum_of_digits(int num) {\n    int sum = 0;\n    int abs_num = abs(num);\n    while (abs_num > 0) {\n        sum += abs_num % 10;\n        abs_num /= 10;\n    }\n    return num >= 0 ? sum : -sum;\n}\n\nvector<int> order_by_points(vector<int> nums) {\n    vector<pair<int, int>> indexed_nums;\n    for (int i = 0; i < nums.size(); ++i) {\n        indexed_nums.push_back({nums[i], i});\n    }\n\n    sort(indexed_nums.begin(), indexed_nums.end(), [](const pair<int, int>& a, const pair<int, int>& b) {\n        int sum_a = sum_of_digits(a.first);\n        int sum_b = sum_of_digits(b.first);\n        if (sum_a != sum_b) {\n            return sum_a < sum_b;\n        }\n        return a.second < b.second;\n    });\n\n    vector<int> sorted_nums;\n    for (const auto& p : indexed_nums) {\n        sorted_nums.push_back(p.first);\n    }\n\n    return sorted_nums;\n}\n"}
{"task_id": "CPP/84", "generation": "#include <iostream>\n#include <string>\n#include <bitset>\n\nusing namespace std;\n\nstring solve(int N) {\n    // Step 1: Calculate the sum of digits\n    int sum = 0;\n    int temp = N;\n    while (temp > 0) {\n        sum += temp % 10;  // Add the last digit to the sum\n        temp /= 10;        // Remove the last digit\n    }\n\n    // Step 2: Convert the sum to binary\n    string binarySum = bitset<32>(sum).to_string();  // Convert to binary string\n\n    // Step 3: Remove leading zeros\n    size_t pos = binarySum.find('1');  // Find the first '1'\n    if (pos != string::npos) {\n        binarySum = binarySum.substr(pos);  // Extract the substring from the first '1'\n    } else {\n        binarySum = \"0\";  // If no '1' is found, the sum was 0\n    }\n\n    return binarySum;\n}\n\n"}
{"task_id": "CPP/113", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<string> odd_count(vector<string> lst) {\n    vector<string> result;\n    \n    for (const string& str : lst) {\n        int odd_count = 0;\n        \n        // Count the number of odd digits in the string\n        for (char ch : str) {\n            if ((ch - '0') % 2 != 0) {\n                odd_count++;\n            }\n        }\n        \n        // Construct the output string\n        ostringstream oss;\n        oss << \"the number of odd elements \" << odd_count << \"n the str\" << odd_count << \"ng \" << odd_count << \" of the \" << odd_count << \"nput.\";\n        result.push_back(oss.str());\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/36", "generation": "#include <iostream>\n#include <string>\n\nint fizz_buzz(int n) {\n    int count = 0;\n    for (int i = 0; i < n; ++i) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string num_str = std::to_string(i);\n            for (char c : num_str) {\n                if (c == '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/144", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <cmath>\n\nusing namespace std;\n\nbool simplify(string x, string n) {\n    // Helper function to parse the fraction string\n    auto parseFraction = [](const string& fraction) -> pair<int, int> {\n        size_t pos = fraction.find('/');\n        int numerator = stoi(fraction.substr(0, pos));\n        int denominator = stoi(fraction.substr(pos + 1));\n        return {numerator, denominator};\n    };\n\n    // Parse the fractions\n    auto [xNumerator, xDenominator] = parseFraction(x);\n    auto [nNumerator, nDenominator] = parseFraction(n);\n\n    // Multiply the fractions\n    int resultNumerator = xNumerator * nNumerator;\n    int resultDenominator = xDenominator * nDenominator;\n\n    // Check if the result is a whole number\n    return resultNumerator % resultDenominator == 0;\n}\n\n"}
{"task_id": "CPP/0", "generation": "#include<stdio.h>\n#include<vector>\n#include<cmath>\nusing namespace std;\n\nbool has_close_elements(vector<float> numbers, float threshold) {\n    // Get the size of the vector\n    int n = numbers.size();\n    \n    // Iterate through each pair of numbers\n    for (int i = 0; i < n; ++i) {\n        for (int j = i + 1; j < n; ++j) {\n            // Calculate the absolute difference between numbers[i] and numbers[j]\n            float diff = fabs(numbers[i] - numbers[j]);\n            \n            // Check if the difference is less than the threshold\n            if (diff < threshold) {\n                return true;\n            }\n        }\n    }\n    \n    // If no such pair is found, return false\n    return false;\n}\n\n"}
{"task_id": "CPP/17", "generation": "#include <vector>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<int> parse_music(string music_string) {\n    vector<int> beats;\n    istringstream iss(music_string);\n    string note;\n    \n    while (iss >> note) {\n        if (note == \"o\") {\n            beats.push_back(4);\n        } else if (note == \"o|\") {\n            beats.push_back(2);\n        } else if (note == \".|\") {\n            beats.push_back(1);\n        }\n    }\n    \n    return beats;\n}\n"}
{"task_id": "CPP/47", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nfloat median(vector<float> l) {\n    // Step 1: Sort the vector\n    sort(l.begin(), l.end());\n\n    // Step 2: Determine the size of the vector\n    int n = l.size();\n\n    // Step 3: Check if the number of elements is odd or even\n    if (n % 2 != 0) {\n        // If odd, return the middle element\n        return l[n / 2];\n    } else {\n        // If even, return the average of the two middle elements\n        return (l[(n / 2) - 1] + l[n / 2]) / 2.0;\n    }\n}\n\n"}
{"task_id": "CPP/75", "generation": "#include <vector>\n#include <cmath>\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nbool is_multiply_prime(int a) {\n    std::vector<int> primes;\n    for (int i = 2; i < 100; ++i) {\n        if (is_prime(i)) {\n            primes.push_back(i);\n        }\n    }\n\n    for (int i : primes) {\n        for (int j : primes) {\n            for (int k : primes) {\n                if (i * j * k == a) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/124", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <iomanip>\n\nusing namespace std;\n\nbool valid_date(string date) {\n    // Check if the date string is empty\n    if (date.empty()) {\n        return false;\n    }\n\n    // Check if the date string is in the format \"mm-dd-yyyy\"\n    if (date.length() != 10 || date[2] != '-' || date[5] != '-') {\n        return false;\n    }\n\n    // Extract month, day, and year from the date string\n    int month, day, year;\n    char dash1, dash2;\n    stringstream ss(date);\n    ss >> month >> dash1 >> day >> dash2 >> year;\n\n    // Check if the extracted values are valid\n    if (dash1 != '-' || dash2 != '-' || ss.fail()) {\n        return false;\n    }\n\n    // Validate the month\n    if (month < 1 || month > 12) {\n        return false;\n    }\n\n    // Validate the day based on the month\n    if (month == 2) {\n        if (day < 1 || day > 29) {\n            return false;\n        }\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) {\n            return false;\n        }\n    } else {\n        if (day < 1 || day > 31) {\n            return false;\n        }\n    }\n\n    // If all checks pass, the date is valid\n    return true;\n}\n\n"}
{"task_id": "CPP/101", "generation": "#include <vector>\n#include <string>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> words_string(string s) {\n    vector<string> words;\n    string word;\n    stringstream ss(s);\n    \n    // Use a stringstream to split the string by spaces and commas\n    while (getline(ss, word, ',')) {\n        // Remove leading and trailing spaces from the word\n        word.erase(word.begin(), find_if(word.begin(), word.end(), [](int ch) {\n            return !isspace(ch);\n        }));\n        word.erase(find_if(word.rbegin(), word.rend(), [](int ch) {\n            return !isspace(ch);\n        }).base(), word.end());\n        \n        // Split the word by spaces\n        stringstream word_ss(word);\n        string subword;\n        while (word_ss >> subword) {\n            words.push_back(subword);\n        }\n    }\n    \n    return words;\n}\n"}
{"task_id": "CPP/14", "generation": "#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> all_prefixes(string str) {\n    vector<string> prefixes;\n    for (size_t i = 1; i <= str.size(); ++i) {\n        prefixes.push_back(str.substr(0, i));\n    }\n    return prefixes;\n}\n"}
{"task_id": "CPP/141", "generation": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring file_name_check(string file_name) {\n    // Check if there is exactly one dot\n    size_t dot_pos = file_name.find('.');\n    if (dot_pos == string::npos || dot_pos == 0 || dot_pos == file_name.length() - 1) {\n        return \"No\";\n    }\n\n    // Check if the substring before the dot is not empty and starts with a letter\n    string before_dot = file_name.substr(0, dot_pos);\n    if (before_dot.empty() || !isalpha(before_dot[0])) {\n        return \"No\";\n    }\n\n    // Check if the substring after the dot is one of the allowed extensions\n    string after_dot = file_name.substr(dot_pos + 1);\n    if (after_dot != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\") {\n        return \"No\";\n    }\n\n    // Count the number of digits in the file name\n    int digit_count = 0;\n    for (char c : file_name) {\n        if (isdigit(c)) {\n            digit_count++;\n            if (digit_count > 3) {\n                return \"No\";\n            }\n        }\n    }\n\n    // If all conditions are met, return \"Yes\"\n    return \"Yes\";\n}\n\n// Example usage\n"}
{"task_id": "CPP/123", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> get_odd_collatz(int n) {\n    vector<int> odd_numbers;\n    \n    // Generate the Collatz sequence and collect odd numbers\n    while (n != 1) {\n        if (n % 2 == 1) { // Check if n is odd\n            odd_numbers.push_back(n);\n        }\n        if (n % 2 == 0) { // If n is even\n            n = n / 2;\n        } else { // If n is odd\n            n = 3 * n + 1;\n        }\n    }\n    // Add 1 to the list of odd numbers (since 1 is always the end of the sequence)\n    odd_numbers.push_back(1);\n    \n    // Sort the vector of odd numbers\n    sort(odd_numbers.begin(), odd_numbers.end());\n    \n    return odd_numbers;\n}\n"}
{"task_id": "CPP/148", "generation": "#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> bf(string planet1, string planet2) {\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    vector<string> result;\n\n    // Check if both planet names are valid\n    if (find(planets.begin(), planets.end(), planet1) == planets.end() ||\n        find(planets.begin(), planets.end(), planet2) == planets.end()) {\n        return result; // Return empty vector if either planet name is invalid\n    }\n\n    // Find indices of planet1 and planet2\n    int index1 = find(planets.begin(), planets.end(), planet1) - planets.begin();\n    int index2 = find(planets.begin(), planets.end(), planet2) - planets.begin();\n\n    // Ensure index1 is less than index2\n    if (index1 > index2) {\n        swap(index1, index2);\n    }\n\n    // Add planets between index1 and index2 to the result vector\n    for (int i = index1 + 1; i < index2; ++i) {\n        result.push_back(planets[i]);\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/133", "generation": "#include <iostream>\n#include <vector>\n#include <cmath> // For ceil function\n\nusing namespace std;\n\nint sum_squares(vector<float> lst) {\n    int sum = 0;\n    for (float num : lst) {\n        int ceiling_num = ceil(num); // Apply ceiling function\n        sum += ceiling_num * ceiling_num; // Square and add to sum\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/109", "generation": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nbool move_one_ball(vector<int> arr) {\n    if (arr.empty()) return true;\n    \n    int n = arr.size();\n    int min_index = 0;\n    \n    // Find the index of the minimum element\n    for (int i = 1; i < n; ++i) {\n        if (arr[i] < arr[min_index]) {\n            min_index = i;\n        }\n    }\n    \n    // Check if the vector can be sorted by right shifts\n    for (int i = 0; i < n - 1; ++i) {\n        int current_index = (min_index + i) % n;\n        int next_index = (min_index + i + 1) % n;\n        \n        if (arr[current_index] > arr[next_index]) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n"}
{"task_id": "CPP/100", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nvector<int> make_a_pile(int n) {\n    vector<int> result;\n    int current = n;\n    \n    for (int i = 0; i < n; ++i) {\n        result.push_back(current);\n        if (current % 2 == 0) {\n            current += 2; // Next even number\n        } else {\n            current += 2; // Next odd number\n        }\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/150", "generation": "#include<iostream>\n#include<cmath>\n\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true; // 2 is the only even prime number\n    if (n % 2 == 0) return false; // other even numbers are not prime\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nint x_or_y(int n, int x, int y) {\n    if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n\n"}
{"task_id": "CPP/153", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cctype>\n\nusing namespace std;\n\nstring Strongest_Extension(string class_name, vector<string> extensions) {\n    string strongest_extension = \"\";\n    int max_strength = INT_MIN;\n\n    for (const string& ext : extensions) {\n        int CAP = 0;\n        int SM = 0;\n\n        // Calculate CAP and SM for the current extension\n        for (char c : ext) {\n            if (isupper(c)) {\n                CAP++;\n            } else if (islower(c)) {\n                SM++;\n            }\n        }\n\n        // Calculate the strength of the current extension\n        int strength = CAP - SM;\n\n        // Update the strongest extension if the current one is stronger\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest_extension = ext;\n        }\n    }\n\n    // Return the result in the required format\n    return class_name + \".\" + strongest_extension;\n}\n\n"}
{"task_id": "CPP/107", "generation": "#include <vector>\n#include <string>\nusing namespace std;\n\nbool isPalindrome(int num) {\n    string str = to_string(num);\n    int len = str.length();\n    for (int i = 0; i < len / 2; ++i) {\n        if (str[i] != str[len - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvector<int> even_odd_palindrome(int n) {\n    int evenCount = 0;\n    int oddCount = 0;\n    \n    for (int i = 1; i <= n; ++i) {\n        if (isPalindrome(i)) {\n            if (i % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n    \n    return {evenCount, oddCount};\n}\n"}
{"task_id": "CPP/110", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n\nstring exchange(vector<int> lst1, vector<int> lst2) {\n    int oddCount = 0;\n    int evenCount = 0;\n\n    // Count the number of odd elements in lst1\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            oddCount++;\n        }\n    }\n\n    // Count the number of even elements in lst2\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            evenCount++;\n        }\n    }\n\n    // If there are enough even elements in lst2 to replace all odd elements in lst1\n    if (evenCount >= oddCount) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\n// Example usage\n"}
{"task_id": "CPP/111", "generation": "#include <iostream>\n#include <string>\n#include <map>\n#include <climits>\n\nusing namespace std;\n\nmap<char, int> histogram(string test) {\n    map<char, int> frequencyMap;\n    map<char, int> resultMap;\n    int maxFrequency = 0;\n\n    // Step 1: Populate the frequency map\n    for (char c : test) {\n        if (c != ' ') { // Ignore spaces\n            frequencyMap[c]++;\n            if (frequencyMap[c] > maxFrequency) {\n                maxFrequency = frequencyMap[c];\n            }\n        }\n    }\n\n    // Step 2: Populate the result map with letters having the maximum frequency\n    for (const auto& pair : frequencyMap) {\n        if (pair.second == maxFrequency) {\n            resultMap[pair.first] = pair.second;\n        }\n    }\n\n    return resultMap;\n}\n\n"}
{"task_id": "CPP/80", "generation": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool is_happy(string s) {\n    // Check if the length of the string is less than 3\n    if (s.length() < 3) {\n        return false;\n    }\n\n    // Iterate through the string and check every 3 consecutive characters\n    for (int i = 0; i < s.length() - 2; ++i) {\n        // Check if the current set of 3 characters are distinct\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n\n    // If all sets of 3 consecutive characters are distinct, return true\n    return true;\n}\n\n"}
