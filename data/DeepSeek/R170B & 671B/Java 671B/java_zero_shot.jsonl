{"task_id": "Java/0", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (diff < threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n\n        // Test case 1\n        List<Double> test1 = Arrays.asList(1.0, 2.0, 3.0);\n        boolean result1 = sol.has_close_elements(test1, 0.5);\n        System.out.println(\"Test1: \" + (result1 == false ? \"Passed\" : \"Failed\"));\n\n        // Test case 2\n        List<Double> test2 = Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0);\n        boolean result2 = sol.has_close_elements(test2, 0.3);\n        System.out.println(\"Test2: \" + (result2 == true ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/1", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        String s = paren_string.replaceAll(\" \", \"\");\n        int balance = 0;\n        int start = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == '(') {\n                balance++;\n            } else {\n                balance--;\n            }\n            if (balance == 0) {\n                result.add(s.substring(start, i + 1));\n                start = i + 1;\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        testCase1(solution);\n        testCase2(solution);\n        testCase3(solution);\n        testCase4(solution);\n        testCase5(solution);\n    }\n\n    private static void testCase1(Solution solution) {\n        String input = \"( ) (( )) (( )( ))\";\n        List<String> expected = Arrays.asList(\"()\", \"(())\", \"(()())\");\n        List<String> actual = solution.separate_paren_groups(input);\n        System.out.println(\"Test Case 1: \" + checkResult(expected, actual));\n    }\n\n    private static void testCase2(Solution solution) {\n        String input = \"\";\n        List<String> expected = new ArrayList<>();\n        List<String> actual = solution.separate_paren_groups(input);\n        System.out.println(\"Test Case 2: \" + checkResult(expected, actual));\n    }\n\n    private static void testCase3(Solution solution) {\n        String input = \"((()))\";\n        List<String> expected = Arrays.asList(\"((()))\");\n        List<String> actual = solution.separate_paren_groups(input);\n        System.out.println(\"Test Case 3: \" + checkResult(expected, actual));\n    }\n\n    private static void testCase4(Solution solution) {\n        String input = \"   (() )  ( ()() )   \";\n        List<String> expected = Arrays.asList(\"(())\", \"(()())\");\n        List<String> actual = solution.separate_paren_groups(input);\n        System.out.println(\"Test Case 4: \" + checkResult(expected, actual));\n    }\n\n    private static void testCase5(Solution solution) {\n        String input = \"()(())\";\n        List<String> expected = Arrays.asList(\"()\", \"(())\");\n        List<String> actual = solution.separate_paren_groups(input);\n        System.out.println(\"Test Case 5: \" + checkResult(expected, actual));\n    }\n\n    private static String checkResult(List<String> expected, List<String> actual) {\n        return expected.equals(actual) ? \"Passed\" : \"Failed. Expected: \" + expected + \", Actual: \" + actual;\n    }\n}\n"}
{"task_id": "Java/2", "generation": "class Solution {\n    public double truncate_number(double number) {\n        return number - Math.floor(number);\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        // Test case 1: 3.5 should return 0.5\n        double result1 = sol.truncate_number(3.5);\n        System.out.println((Math.abs(result1 - 0.5) < 1e-9) ? \"Test 1 Passed\" : \"Test 1 Failed\");\n\n        // Test case 2: 4.0 should return 0.0\n        double result2 = sol.truncate_number(4.0);\n        System.out.println((result2 == 0.0) ? \"Test 2 Passed\" : \"Test 2 Failed\");\n\n        // Test case 3: 2.71828 should return 0.71828\n        double result3 = sol.truncate_number(2.71828);\n        System.out.println((Math.abs(result3 - 0.71828) < 1e-9) ? \"Test 3 Passed\" : \"Test 3 Failed\");\n    }\n}"}
{"task_id": "Java/3", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (int op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: All positive operations\n        List<Integer> test1 = Arrays.asList(1, 2, 3);\n        System.out.println(solution.below_zero(test1) == false ? \"Test 1 Passed\" : \"Test 1 Failed\");\n\n        // Test case 2: Operations causing negative balance\n        List<Integer> test2 = Arrays.asList(1, 2, -4, 5);\n        System.out.println(solution.below_zero(test2) == true ? \"Test 2 Passed\" : \"Test 2 Failed\");\n\n        // Test case 3: Single negative operation\n        List<Integer> test3 = Arrays.asList(-1);\n        System.out.println(solution.below_zero(test3) == true ? \"Test 3 Passed\" : \"Test 3 Failed\");\n\n        // Test case 4: Balance reaches zero but not negative\n        List<Integer> test4 = Arrays.asList(3, -3);\n        System.out.println(solution.below_zero(test4) == false ? \"Test 4 Passed\" : \"Test 4 Failed\");\n\n        // Test case 5: Negative balance in the middle of operations\n        List<Integer> test5 = Arrays.asList(5, -3, -3);\n        System.out.println(solution.below_zero(test5) == true ? \"Test 5 Passed\" : \"Test 5 Failed\");\n\n        // Test case 6: Empty list of operations\n        List<Integer> test6 = Collections.emptyList();\n        System.out.println(solution.below_zero(test6) == false ? \"Test 6 Passed\" : \"Test 6 Failed\");\n    }\n}\n"}
{"task_id": "Java/4", "generation": "import java.util.*;\n\nclass Solution {\n    public double mean_absolute_deviation(List<Double> numbers) {\n        if (numbers.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list must not be empty.\");\n        }\n        double sum = 0.0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n        double absoluteSum = 0.0;\n        for (double num : numbers) {\n            absoluteSum += Math.abs(num - mean);\n        }\n        return absoluteSum / numbers.size();\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n\n        // Test case 1: Example from the docstring\n        List<Double> input1 = Arrays.asList(1.0, 2.0, 3.0, 4.0);\n        double result1 = sol.mean_absolute_deviation(input1);\n        System.out.println(\"Test case 1 \" + (result1 == 1.0 ? \"passed\" : \"failed\"));\n\n        // Test case 2: All elements are the same\n        List<Double> input2 = Arrays.asList(5.0, 5.0, 5.0);\n        double result2 = sol.mean_absolute_deviation(input2);\n        System.out.println(\"Test case 2 \" + (result2 == 0.0 ? \"passed\" : \"failed\"));\n\n        // Test case 3: Another example with even spread\n        List<Double> input3 = Arrays.asList(2.0, 4.0, 6.0);\n        double expected3 = 4.0 / 3.0;\n        double result3 = sol.mean_absolute_deviation(input3);\n        boolean pass3 = Math.abs(result3 - expected3) < 1e-9;\n        System.out.println(\"Test case 3 \" + (pass3 ? \"passed\" : \"failed\"));\n    }\n}\n"}
{"task_id": "Java/5", "generation": "class Solution {\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        // Implementation code here\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test 1: Empty list\n        List<Integer> result1 = solution.intersperse(Collections.emptyList(), 4);\n        checkTest(result1, Collections.emptyList(), 1);\n        \n        // Test 2: [1, 2, 3] with delimiter 4\n        List<Integer> result2 = solution.intersperse(Arrays.asList(1, 2, 3), 4);\n        checkTest(result2, Arrays.asList(1, 4, 2, 4, 3), 2);\n        \n        // Test 3: Single element\n        List<Integer> result3 = solution.intersperse(Collections.singletonList(5), 9);\n        checkTest(result3, Collections.singletonList(5), 3);\n        \n        // Test 4: Two elements\n        List<Integer> result4 = solution.intersperse(Arrays.asList(10, 20), 5);\n        checkTest(result4, Arrays.asList(10, 5, 20), 4);\n    }\n\n    private static void checkTest(List<Integer> actual, List<Integer> expected, int testNumber) {\n        if (actual.equals(expected)) {\n            System.out.println(\"Test \" + testNumber + \" passed.\");\n        } else {\n            System.out.println(\"Test \" + testNumber + \" failed. Expected \" + expected + \" but got \" + actual);\n        }\n    }\n}\n"}
{"task_id": "Java/6", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> parse_nested_parens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        if (paren_string == null || paren_string.isEmpty()) {\n            return result;\n        }\n        String[] groups = paren_string.trim().split(\"\\\\s+\");\n        for (String group : groups) {\n            int currentDepth = 0;\n            int maxDepth = 0;\n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentDepth++;\n                    if (currentDepth > maxDepth) {\n                        maxDepth = currentDepth;\n                    }\n                } else if (c == ')') {\n                    currentDepth--;\n                }\n            }\n            result.add(maxDepth);\n        }\n        return result;\n    }\n\n    // Test code\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.parse_nested_parens(\"(()()) ((())) () ((())()())\")); // [2, 3, 1, 3]\n    }\n}\n"}
{"task_id": "Java/7", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: empty list\n        List<String> test1Input = Collections.emptyList();\n        List<String> test1Expected = Collections.emptyList();\n        List<String> test1Result = solution.filter_by_substring(test1Input, \"a\");\n        System.out.println(\"Test 1: \" + (test1Result.equals(test1Expected) ? \"Passed\" : \"Failed\"));\n\n        // Test case 2: example from problem\n        List<String> test2Input = Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\");\n        List<String> test2Expected = Arrays.asList(\"abc\", \"bacd\", \"array\");\n        List<String> test2Result = solution.filter_by_substring(test2Input, \"a\");\n        System.out.println(\"Test 2: \" + (test2Result.equals(test2Expected) ? \"Passed\" : \"Failed\"));\n\n        // Additional test case 3: substring not present\n        List<String> test3Input = Arrays.asList(\"hello\", \"world\", \"java\");\n        List<String> test3Expected = Collections.emptyList();\n        List<String> test3Result = solution.filter_by_substring(test3Input, \"xyz\");\n        System.out.println(\"Test 3: \" + (test3Result.equals(test3Expected) ? \"Passed\" : \"Failed\"));\n\n        // Additional test case 4: case sensitivity check\n        List<String> test4Input = Arrays.asList(\"Apple\", \"apple\", \"APPLE\");\n        List<String> test4Expected = Arrays.asList(\"apple\");\n        List<String> test4Result = solution.filter_by_substring(test4Input, \"app\");\n        System.out.println(\"Test 4: \" + (test4Result.equals(test4Expected) ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/8", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sum_product(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        return Arrays.asList(sum, product);\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n\n        // Test case 1: Empty list\n        List<Integer> input1 = List.of();\n        List<Integer> expected1 = Arrays.asList(0, 1);\n        List<Integer> result1 = s.sum_product(input1);\n        System.out.println(\"Test 1: \" + (result1.equals(expected1) ? \"Passed\" : \"Failed\"));\n\n        // Test case 2: List [1, 2, 3, 4]\n        List<Integer> input2 = Arrays.asList(1, 2, 3, 4);\n        List<Integer> expected2 = Arrays.asList(10, 24);\n        List<Integer> result2 = s.sum_product(input2);\n        System.out.println(\"Test 2: \" + (result2.equals(expected2) ? \"Passed\" : \"Failed\"));\n\n        // Test case 3: Single element\n        List<Integer> input3 = Arrays.asList(5);\n        List<Integer> expected3 = Arrays.asList(5, 5);\n        List<Integer> result3 = s.sum_product(input3);\n        System.out.println(\"Test 3: \" + (result3.equals(expected3) ? \"Passed\" : \"Failed\"));\n\n        // Test case 4: List with zero\n        List<Integer> input4 = Arrays.asList(0, 3, 4);\n        List<Integer> expected4 = Arrays.asList(7, 0);\n        List<Integer> result4 = s.sum_product(input4);\n        System.out.println(\"Test 4: \" + (result4.equals(expected4) ? \"Passed\" : \"Failed\"));\n\n        // Test case 5: List with negative numbers\n        List<Integer> input5 = Arrays.asList(-1, 2, -3);\n        List<Integer> expected5 = Arrays.asList(-2, 6);\n        List<Integer> result5 = s.sum_product(input5);\n        System.out.println(\"Test 5: \" + (result5.equals(expected5) ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/9", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        if (numbers.isEmpty()) {\n            return result;\n        }\n        int currentMax = numbers.get(0);\n        result.add(currentMax);\n        for (int i = 1; i < numbers.size(); i++) {\n            currentMax = Math.max(currentMax, numbers.get(i));\n            result.add(currentMax);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        testCase(solution, Arrays.asList(1, 2, 3, 2, 3, 4, 2), Arrays.asList(1, 2, 3, 3, 3, 4, 4));\n        testCase(solution, Collections.emptyList(), Collections.emptyList());\n        testCase(solution, Arrays.asList(5), Arrays.asList(5));\n        testCase(solution, Arrays.asList(1, 3, 5, 7), Arrays.asList(1, 3, 5, 7));\n        testCase(solution, Arrays.asList(5, 4, 3, 2), Arrays.asList(5, 5, 5, 5));\n        testCase(solution, Arrays.asList(3, 1, 4, 2, 5), Arrays.asList(3, 3, 4, 4, 5));\n    }\n\n    private static void testCase(Solution solution, List<Integer> input, List<Integer> expected) {\n        List<Integer> actual = solution.rolling_max(input);\n        if (actual.equals(expected)) {\n            System.out.println(\"Test passed for input: \" + input);\n        } else {\n            System.out.println(\"Test failed for input: \" + input);\n            System.out.println(\"Expected: \" + expected);\n            System.out.println(\"Actual:   \" + actual);\n        }\n    }\n}\n"}
{"task_id": "Java/10", "generation": "class Solution {\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    public String make_palindrome(String string) {\n        int n = string.length();\n        if (n == 0) {\n            return \"\";\n        }\n        int l;\n        for (l = n; l >= 1; l--) {\n            int start = n - l;\n            String sub = string.substring(start, n);\n            if (isPalindrome(sub)) {\n                break;\n            }\n        }\n        String prefix = string.substring(0, n - l);\n        String reversed = new StringBuilder(prefix).reverse().toString();\n        return string + reversed;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.make_palindrome(\"\"));      // Output: \"\"\n        System.out.println(sol.make_palindrome(\"cat\"));   // Output: catac\n        System.out.println(sol.make_palindrome(\"cata\")); // Output: catac\n        System.out.println(sol.make_palindrome(\"a\"));     // Output: a\n        System.out.println(sol.make_palindrome(\"aa\"));    // Output: aa\n        System.out.println(sol.make_palindrome(\"ab\"));    // Output: aba\n    }\n}\n"}
{"task_id": "Java/11", "generation": "class Solution {\n    public String string_xor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            char aBit = a.charAt(i);\n            char bBit = b.charAt(i);\n            result.append((aBit != bBit) ? '1' : '0');\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        // Test case 1: sample input\n        String a = \"010\";\n        String b = \"110\";\n        String expected = \"100\";\n        String result = sol.string_xor(a, b);\n        System.out.println(result.equals(expected) ? \"Test 1 Passed\" : \"Test 1 Failed\");\n\n        // Test case 2: all zeros\n        a = \"000\";\n        b = \"000\";\n        expected = \"000\";\n        result = sol.string_xor(a, b);\n        System.out.println(result.equals(expected) ? \"Test 2 Passed\" : \"Test 2 Failed\");\n\n        // Test case 3: varying bits\n        a = \"1010\";\n        b = \"0011\";\n        expected = \"1001\";\n        result = sol.string_xor(a, b);\n        System.out.println(result.equals(expected) ? \"Test 3 Passed\" : \"Test 3 Failed\");\n\n        // Test case 4: single bit\n        a = \"1\";\n        b = \"1\";\n        expected = \"0\";\n        result = sol.string_xor(a, b);\n        System.out.println(result.equals(expected) ? \"Test 4 Passed\" : \"Test 4 Failed\");\n    }\n}\n"}
{"task_id": "Java/12", "generation": "import java.util.*;\nimport java.util.Optional;\n\nclass Solution {\n    public Optional<String> longest(List<String> strings) {\n        if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longestStr = \"\";\n        int maxLength = -1;\n        for (String str : strings) {\n            if (str.length() > maxLength) {\n                maxLength = str.length();\n                longestStr = str;\n            }\n        }\n        return Optional.of(longestStr);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test 1: Empty list should return Optional.empty\n        List<String> emptyList = List.of();\n        Optional<String> result = solution.longest(emptyList);\n        System.out.println(\"Test 1: \" + (result.isEmpty() ? \"Passed\" : \"Failed\"));\n\n        // Test 2: All elements same length, return first\n        List<String> sameLength = Arrays.asList(\"a\", \"b\", \"c\");\n        result = solution.longest(sameLength);\n        System.out.println(\"Test 2: \" + (result.equals(Optional.of(\"a\")) ? \"Passed\" : \"Failed\"));\n\n        // Test 3: One longest element\n        List<String> oneLongest = Arrays.asList(\"a\", \"bb\", \"ccc\");\n        result = solution.longest(oneLongest);\n        System.out.println(\"Test 3: \" + (result.equals(Optional.of(\"ccc\")) ? \"Passed\" : \"Failed\"));\n\n        // Test 4: Multiple elements with max length, return first occurrence\n        List<String> multipleMax = Arrays.asList(\"aa\", \"bb\", \"cc\");\n        result = solution.longest(multipleMax);\n        System.out.println(\"Test 4: \" + (result.equals(Optional.of(\"aa\")) ? \"Passed\" : \"Failed\"));\n\n        // Test 5: Single element\n        List<String> singleElement = Collections.singletonList(\"hello\");\n        result = solution.longest(singleElement);\n        System.out.println(\"Test 5: \" + (result.equals(Optional.of(\"hello\")) ? \"Passed\" : \"Failed\"));\n\n        // Test 6: Multiple elements with same max length, check first occurrence\n        List<String> multiMax = Arrays.asList(\"apple\", \"banana\", \"orange\");\n        result = solution.longest(multiMax);\n        System.out.println(\"Test 6: \" + (result.equals(Optional.of(\"banana\")) ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/13", "generation": "class Solution {\n    public int greatest_common_divisor(int a, int b) {\n        a = Math.abs(a);\n        b = Math.abs(b);\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        testCase(sol, 3, 5, 1);\n        testCase(sol, 25, 15, 5);\n        testCase(sol, 0, 5, 5);\n        testCase(sol, 14, 28, 14);\n        testCase(sol, -25, 15, 5);\n        testCase(sol, 49, 21, 7);\n    }\n\n    private static void testCase(Solution sol, int a, int b, int expected) {\n        int result = sol.greatest_common_divisor(a, b);\n        if (result == expected) {\n            System.out.println(\"Test (\" + a + \", \" + b + \") Passed\");\n        } else {\n            System.out.println(\"Test (\" + a + \", \" + b + \") Failed. Expected: \" + expected + \", Got: \" + result);\n        }\n    }\n}\n"}
{"task_id": "Java/14", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> all_prefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1: \"abc\"\n        List<String> result1 = solution.all_prefixes(\"abc\");\n        System.out.println(\"Test 1: \" + result1);  // Expected: [a, ab, abc]\n\n        // Test case 2: \"a\"\n        List<String> result2 = solution.all_prefixes(\"a\");\n        System.out.println(\"Test 2: \" + result2);  // Expected: [a]\n\n        // Test case 3: empty string\n        List<String> result3 = solution.all_prefixes(\"\");\n        System.out.println(\"Test 3: \" + result3);  // Expected: []\n\n        // Test case 4: \"xYz\"\n        List<String> result4 = solution.all_prefixes(\"xYz\");\n        System.out.println(\"Test 4: \" + result4);  // Expected: [x, xY, xYz]\n    }\n}\n"}
{"task_id": "Java/15", "generation": "class Solution {\n    public String string_sequence(int n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i).append(\" \");\n        }\n        if (sb.length() > 0) {\n            sb.setLength(sb.length() - 1); // Remove the trailing space\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        testCase(sol, 0, \"0\");\n        testCase(sol, 5, \"0 1 2 3 4 5\");\n        testCase(sol, -1, \"\"); // Assuming handling of negative n as per possible implementation\n    }\n\n    private static void testCase(Solution sol, int input, String expected) {\n        String result = sol.string_sequence(input);\n        if (expected.equals(result)) {\n            System.out.println(\"Test for \" + input + \" passed.\");\n        } else {\n            System.out.println(\"Test for \" + input + \" failed. Expected '\" + expected + \"' but got '\" + result + \"'\");\n        }\n    }\n}\n"}
{"task_id": "Java/16", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int count_distinct_characters(String string) {\n        Set<Character> chars = new HashSet<>();\n        String lowerStr = string.toLowerCase();\n        for (int i = 0; i < lowerStr.length(); i++) {\n            chars.add(lowerStr.charAt(i));\n        }\n        return chars.size();\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.count_distinct_characters(\"xyzXYZ\")); // Expected 3\n        System.out.println(sol.count_distinct_characters(\"Jerry\"));  // Expected 4\n    }\n}\n"}
{"task_id": "Java/17", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> parse_music(String string) {\n        List<Integer> beats = new ArrayList<>();\n        if (string == null) {\n            return beats;\n        }\n        String[] notes = string.split(\" \");\n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    beats.add(4);\n                    break;\n                case \"o|\":\n                    beats.add(2);\n                    break;\n                case \".|\":\n                    beats.add(1);\n                    break;\n            }\n        }\n        return beats;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        \n        // Test case 1: Sample input\n        String input1 = \"o o| .| o| o| .| .| .| .| o o\";\n        List<Integer> expected1 = Arrays.asList(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4);\n        List<Integer> result1 = sol.parse_music(input1);\n        System.out.println(\"Test 1: \" + (expected1.equals(result1) ? \"Passed\" : \"Failed\"));\n        \n        // Test case 2: Single whole note\n        String input2 = \"o\";\n        List<Integer> expected2 = Arrays.asList(4);\n        List<Integer> result2 = sol.parse_music(input2);\n        System.out.println(\"Test 2: \" + (expected2.equals(result2) ? \"Passed\" : \"Failed\"));\n        \n        // Test case 3: Single half note\n        String input3 = \"o|\";\n        List<Integer> expected3 = Arrays.asList(2);\n        List<Integer> result3 = sol.parse_music(input3);\n        System.out.println(\"Test 3: \" + (expected3.equals(result3) ? \"Passed\" : \"Failed\"));\n        \n        // Test case 4: Single quarter note\n        String input4 = \".|\";\n        List<Integer> expected4 = Arrays.asList(1);\n        List<Integer> result4 = sol.parse_music(input4);\n        System.out.println(\"Test 4: \" + (expected4.equals(result4) ? \"Passed\" : \"Failed\"));\n        \n        // Test case 5: Empty input\n        String input5 = \"\";\n        List<Integer> expected5 = new ArrayList<>();\n        List<Integer> result5 = sol.parse_music(input5);\n        System.out.println(\"Test 5: \" + (expected5.equals(result5) ? \"Passed\" : \"Failed\"));\n        \n        // Test case 6: Mix of notes\n        String input6 = \"o| o .|\";\n        List<Integer> expected6 = Arrays.asList(2, 4, 1);\n        List<Integer> result6 = sol.parse_music(input6);\n        System.out.println(\"Test 6: \" + (expected6.equals(result6) ? \"Passed\" : \"Failed\"));\n        \n        // Test case 7: All quarter notes\n        String input7 = \".| .| .|\";\n        List<Integer> expected7 = Arrays.asList(1, 1, 1);\n        List<Integer> result7 = sol.parse_music(input7);\n        System.out.println(\"Test 7: \" + (expected7.equals(result7) ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/18", "generation": "class Solution {\n    public int how_many_times(String string, String substring) {\n        int count = 0;\n        int subLen = substring.length();\n        int strLen = string.length();\n        \n        if (subLen == 0) {\n            return 0;\n        }\n        \n        for (int i = 0; i <= strLen - subLen; i++) {\n            if (string.substring(i, i + subLen).equals(substring)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        // Test cases\n        System.out.println(s.how_many_times(\"\", \"a\")); // 0\n        System.out.println(s.how_many_times(\"aaa\", \"a\")); // 3\n        System.out.println(s.how_many_times(\"aaaa\", \"aa\")); // 3\n        System.out.println(s.how_many_times(\"abababa\", \"aba\")); // 3\n        System.out.println(s.how_many_times(\"abc\", \"xyz\")); // 0\n        System.out.println(s.how_many_times(\"a\", \"a\")); // 1\n        System.out.println(s.how_many_times(\"aaab\", \"ab\")); // 1\n    }\n}\n"}
{"task_id": "Java/19", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public String sort_numbers(String numbers) {\n        // Create a map from number words to their corresponding values\n        Map<String, Integer> wordToNumber = new HashMap<>();\n        wordToNumber.put(\"zero\", 0);\n        wordToNumber.put(\"one\", 1);\n        wordToNumber.put(\"two\", 2);\n        wordToNumber.put(\"three\", 3);\n        wordToNumber.put(\"four\", 4);\n        wordToNumber.put(\"five\", 5);\n        wordToNumber.put(\"six\", 6);\n        wordToNumber.put(\"seven\", 7);\n        wordToNumber.put(\"eight\", 8);\n        wordToNumber.put(\"nine\", 9);\n        \n        // Split the input string into individual words\n        String[] words = numbers.split(\" \");\n        \n        // Convert words to their numerical values and sort them\n        List<Integer> nums = new ArrayList<>();\n        for (String word : words) {\n            nums.add(wordToNumber.get(word));\n        }\n        Collections.sort(nums);\n        \n        // Create a reverse map from numbers to words\n        Map<Integer, String> numberToWord = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : wordToNumber.entrySet()) {\n            numberToWord.put(entry.getValue(), entry.getKey());\n        }\n        \n        // Convert sorted numbers back to words\n        List<String> sortedWords = new ArrayList<>();\n        for (int num : nums) {\n            sortedWords.add(numberToWord.get(num));\n        }\n        \n        // Join the sorted words into a single string\n        return String.join(\" \", sortedWords);\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        testCase(sol, \"three one five\", \"one three five\");\n        testCase(sol, \"zero two four\", \"zero two four\");\n        testCase(sol, \"nine seven five\", \"five seven nine\");\n        testCase(sol, \"one one three\", \"one one three\");\n        testCase(sol, \"four\", \"four\");\n        testCase(sol, \"nine eight seven six five four three two one zero\", \"zero one two three four five six seven eight nine\");\n    }\n\n    private static void testCase(Solution sol, String input, String expected) {\n        String result = sol.sort_numbers(input);\n        if (expected.equals(result)) {\n            System.out.println(\"Test passed for input: '\" + input + \"'\");\n        } else {\n            System.out.println(\"Test FAILED for input: '\" + input + \"'\");\n            System.out.println(\"  Expected: '\" + expected + \"'\");\n            System.out.println(\"  Actual  : '\" + result + \"'\");\n        }\n    }\n}\n"}
{"task_id": "Java/20", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        // Create a sorted copy of the input list to avoid modifying the original\n        List<Double> sorted = new ArrayList<>(numbers);\n        Collections.sort(sorted);\n        \n        // Initialize variables to track the minimum difference and the closest pair\n        double minDiff = Double.MAX_VALUE;\n        List<Double> closestPair = new ArrayList<>();\n        \n        // Iterate through the sorted list to find the closest consecutive elements\n        for (int i = 0; i < sorted.size() - 1; i++) {\n            double current = sorted.get(i);\n            double next = sorted.get(i + 1);\n            double diff = next - current;\n            \n            // If a smaller difference is found, update the closest pair\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair.clear();\n                closestPair.add(current);\n                closestPair.add(next);\n            }\n        }\n        \n        return closestPair;\n    }\n\n    // Test code\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Double> input1 = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n        List<Double> expected1 = Arrays.asList(2.0, 2.2);\n        List<Double> result1 = solution.find_closest_elements(input1);\n        System.out.println(\"Test case 1: \" + (result1.equals(expected1) ? \"Passed\" : \"Failed\"));\n\n        // Test case 2\n        List<Double> input2 = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);\n        List<Double> expected2 = Arrays.asList(2.0, 2.0);\n        List<Double> result2 = solution.find_closest_elements(input2);\n        System.out.println(\"Test case 2: \" + (result2.equals(expected2) ? \"Passed\" : \"Failed\"));\n\n        // Test case 3: exactly two elements\n        List<Double> input3 = Arrays.asList(5.0, 3.0);\n        List<Double> expected3 = Arrays.asList(3.0, 5.0);\n        List<Double> result3 = solution.find_closest_elements(input3);\n        System.out.println(\"Test case 3: \" + (result3.equals(expected3) ? \"Passed\" : \"Failed\"));\n\n        // Test case 4: multiple pairs with same minimal difference\n        List<Double> input4 = Arrays.asList(1.0, 1.1, 2.0, 2.1);\n        List<Double> expected4 = Arrays.asList(1.0, 1.1);\n        List<Double> result4 = solution.find_closest_elements(input4);\n        System.out.println(\"Test case 4: \" + (result4.equals(expected4) ? \"Passed\" : \"Failed\"));\n\n        // Test case 5: negative numbers\n        List<Double> input5 = Arrays.asList(-5.0, -3.0, -1.0);\n        List<Double> expected5 = Arrays.asList(-5.0, -3.0);\n        List<Double> result5 = solution.find_closest_elements(input5);\n        System.out.println(\"Test case 5: \" + (result5.equals(expected5) ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/21", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        double range = max - min;\n        List<Double> result = new ArrayList<>();\n        \n        if (range == 0) {\n            // All elements are the same; return 0.5 for all elements\n            for (int i = 0; i < numbers.size(); i++) {\n                result.add(0.5);\n            }\n        } else {\n            for (Double num : numbers) {\n                double scaled = (num - min) / range;\n                result.add(scaled);\n            }\n        }\n        return result;\n    }\n\n    // Test cases\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        testCase(solution, Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0), Arrays.asList(0.0, 0.25, 0.5, 0.75, 1.0), 1e-9);\n        testCase(solution, Arrays.asList(5.0, 5.0), Arrays.asList(0.5, 0.5), 1e-9);\n        testCase(solution, Arrays.asList(-5.0, 0.0, 5.0), Arrays.asList(0.0, 0.5, 1.0), 1e-9);\n        testCase(solution, Arrays.asList(0.0, 1.0, 2.0, 3.0), Arrays.asList(0.0, 1.0/3, 2.0/3, 1.0), 1e-9);\n    }\n\n    private static void testCase(Solution solution, List<Double> input, List<Double> expected, double epsilon) {\n        List<Double> result = solution.rescale_to_unit(input);\n        boolean passed = areListsEqual(expected, result, epsilon);\n        System.out.println(\"Test case \" + input + \": \" + (passed ? \"Passed\" : \"Failed\"));\n    }\n\n    private static boolean areListsEqual(List<Double> a, List<Double> b, double epsilon) {\n        if (a.size() != b.size()) return false;\n        for (int i = 0; i < a.size(); i++) {\n            if (Math.abs(a.get(i) - b.get(i)) > epsilon) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/22", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> filter_integers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object obj : values) {\n            if (obj instanceof Integer) {\n                result.add((Integer) obj);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Object> input1 = Arrays.asList('a', 3.14, 5);\n        List<Integer> expected1 = Arrays.asList(5);\n        List<Integer> result1 = solution.filter_integers(input1);\n        System.out.println(\"Test 1: \" + (result1.equals(expected1) ? \"Passed\" : \"Failed\"));\n\n        // Test case 2\n        List<Object> input2 = Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of());\n        List<Integer> expected2 = Arrays.asList(1, 2, 3);\n        List<Integer> result2 = solution.filter_integers(input2);\n        System.out.println(\"Test 2: \" + (result2.equals(expected2) ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/23", "generation": "class Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        // Test case 1: empty string\n        int result1 = s.strlen(\"\");\n        if (result1 != 0) {\n            System.err.println(\"Test failed for input \\\"\\\": expected 0, got \" + result1);\n        } else {\n            System.out.println(\"Test passed for input \\\"\\\"\");\n        }\n        // Test case 2: string \"abc\"\n        int result2 = s.strlen(\"abc\");\n        if (result2 != 3) {\n            System.err.println(\"Test failed for input \\\"abc\\\": expected 3, got \" + result2);\n        } else {\n            System.out.println(\"Test passed for input \\\"abc\\\"\");\n        }\n    }\n}\n"}
{"task_id": "Java/24", "generation": "class Solution {\n    public int largest_divisor(int n) {\n        if (n == 1) {\n            return 0;\n        }\n        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 0; // This line is theoretically unreachable for n > 1\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        // Test cases\n        System.out.println(\"Test 15: \" + (s.largest_divisor(15) == 5 ? \"Pass\" : \"Fail\"));\n        System.out.println(\"Test 7: \" + (s.largest_divisor(7) == 1 ? \"Pass\" : \"Fail\"));\n        System.out.println(\"Test 2: \" + (s.largest_divisor(2) == 1 ? \"Pass\" : \"Fail\"));\n        System.out.println(\"Test 1: \" + (s.largest_divisor(1) == 0 ? \"Pass\" : \"Fail\"));\n        System.out.println(\"Test 6: \" + (s.largest_divisor(6) == 3 ? \"Pass\" : \"Fail\"));\n        System.out.println(\"Test 8: \" + (s.largest_divisor(8) == 4 ? \"Pass\" : \"Fail\"));\n        System.out.println(\"Test 9: \" + (s.largest_divisor(9) == 3 ? \"Pass\" : \"Fail\"));\n        System.out.println(\"Test 3: \" + (s.largest_divisor(3) == 1 ? \"Pass\" : \"Fail\"));\n    }\n}\n"}
{"task_id": "Java/25", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        if (n <= 1) {\n            return factors;\n        }\n        // Check divisibility starting from 2\n        int divisor = 2;\n        while (n > 1) {\n            while (n % divisor == 0) {\n                factors.add(divisor);\n                n /= divisor;\n            }\n            divisor++;\n            // If divisor^2 exceeds n and n is still greater than 1, then n is a prime\n            if (divisor * divisor > n && n > 1) {\n                factors.add(n);\n                break;\n            }\n        }\n        return factors;\n    }\n\n    public static void main(String[] args) {\n        testFactorize(8, Arrays.asList(2, 2, 2));\n        testFactorize(25, Arrays.asList(5, 5));\n        testFactorize(70, Arrays.asList(2, 5, 7));\n        testFactorize(1, new ArrayList<>());\n        testFactorize(2, Collections.singletonList(2));\n        testFactorize(4, Arrays.asList(2, 2));\n        testFactorize(12, Arrays.asList(2, 2, 3));\n        testFactorize(3, Collections.singletonList(3));\n        testFactorize(17, Collections.singletonList(17));\n        testFactorize(100, Arrays.asList(2, 2, 5, 5));\n    }\n\n    private static void testFactorize(int n, List<Integer> expected) {\n        Solution sol = new Solution();\n        List<Integer> actual = sol.factorize(n);\n        if (actual.equals(expected)) {\n            System.out.println(\"Test passed for \" + n);\n        } else {\n            System.out.println(\"Test failed for \" + n + \". Expected \" + expected + \" but got \" + actual);\n        }\n    }\n}\n"}
{"task_id": "Java/26", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        Map<Integer, Long> frequency = numbers.stream()\n                .collect(Collectors.groupingBy(n -> n, Collectors.counting()));\n        \n        return numbers.stream()\n                .filter(n -> frequency.get(n) == 1)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        \n        // Test case 1: Example from the problem statement\n        List<Integer> input1 = Arrays.asList(1, 2, 3, 2, 4);\n        List<Integer> expected1 = Arrays.asList(1, 3, 4);\n        List<Integer> result1 = sol.remove_duplicates(input1);\n        System.out.println(\"Test case 1: \" + (result1.equals(expected1) ? \"Passed\" : \"Failed\"));\n\n        // Test case 2: All unique elements\n        List<Integer> input2 = Arrays.asList(5, 6, 7);\n        List<Integer> expected2 = Arrays.asList(5, 6, 7);\n        List<Integer> result2 = sol.remove_duplicates(input2);\n        System.out.println(\"Test case 2: \" + (result2.equals(expected2) ? \"Passed\" : \"Failed\"));\n\n        // Test case 3: All elements are duplicates\n        List<Integer> input3 = Arrays.asList(2, 2, 2);\n        List<Integer> expected3 = Collections.emptyList();\n        List<Integer> result3 = sol.remove_duplicates(input3);\n        System.out.println(\"Test case 3: \" + (result3.equals(expected3) ? \"Passed\" : \"Failed\"));\n\n        // Test case 4: Mixed duplicates and single occurrences\n        List<Integer> input4 = Arrays.asList(1, 1, 2, 3, 3, 4, 5);\n        List<Integer> expected4 = Arrays.asList(2, 4, 5);\n        List<Integer> result4 = sol.remove_duplicates(input4);\n        System.out.println(\"Test case 4: \" + (result4.equals(expected4) ? \"Passed\" : \"Failed\"));\n\n        // Test case 5: Empty list\n        List<Integer> input5 = Collections.emptyList();\n        List<Integer> expected5 = Collections.emptyList();\n        List<Integer> result5 = sol.remove_duplicates(input5);\n        System.out.println(\"Test case 5: \" + (result5.equals(expected5) ? \"Passed\" : \"Failed\"));\n\n        // Test case 6: Single element\n        List<Integer> input6 = Collections.singletonList(10);\n        List<Integer> expected6 = Collections.singletonList(10);\n        List<Integer> result6 = sol.remove_duplicates(input6);\n        System.out.println(\"Test case 6: \" + (result6.equals(expected6) ? \"Passed\" : \"Failed\"));\n\n        // Test case 7: Multiple duplicates with non-duplicates in between\n        List<Integer> input7 = Arrays.asList(3, 1, 3, 2, 1);\n        List<Integer> expected7 = Collections.singletonList(2);\n        List<Integer> result7 = sol.remove_duplicates(input7);\n        System.out.println(\"Test case 7: \" + (result7.equals(expected7) ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/27", "generation": "class Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"Hello\")\n    \"hELLO\"\n     */\n    public String flip_case(String string) {\n        // Implementation code would go here\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n            if (Character.isUpperCase(c)) {\n                chars[i] = Character.toLowerCase(c);\n            } else if (Character.isLowerCase(c)) {\n                chars[i] = Character.toUpperCase(c);\n            }\n        }\n        return new String(chars);\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        testCase(sol, \"Hello\", \"hELLO\");\n        testCase(sol, \"TEST\", \"test\");\n        testCase(sol, \"AbC123dEf!\", \"aBc123DeF!\");\n        testCase(sol, \"\", \"\");\n        testCase(sol, \"a\", \"A\");\n        testCase(sol, \"A\", \"a\");\n    }\n\n    private static void testCase(Solution sol, String input, String expected) {\n        String result = sol.flip_case(input);\n        System.out.println(\"Input:    \" + input);\n        System.out.println(\"Expected: \" + expected);\n        System.out.println(\"Result:   \" + result);\n        System.out.println(\"Test \" + (expected.equals(result) ? \"Passed\" : \"Failed\"));\n        System.out.println();\n    }\n}\n"}
{"task_id": "Java/28", "generation": "import java.util.*;\n\nclass Solution {\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1: empty list\n        List<String> emptyList = List.of();\n        String result1 = solution.concatenate(emptyList);\n        if (result1.isEmpty()) {\n            System.out.println(\"Test 1 passed.\");\n        } else {\n            System.out.println(\"Test 1 failed. Expected empty string, got: \" + result1);\n        }\n\n        // Test case 2: list with \"a\", \"b\", \"c\"\n        List<String> abcList = Arrays.asList(\"a\", \"b\", \"c\");\n        String result2 = solution.concatenate(abcList);\n        if (result2.equals(\"abc\")) {\n            System.out.println(\"Test 2 passed.\");\n        } else {\n            System.out.println(\"Test 2 failed. Expected 'abc', got: \" + result2);\n        }\n    }\n}\n"}
{"task_id": "Java/29", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: empty list\n        List<String> test1Input = Collections.emptyList();\n        List<String> test1Expected = Collections.emptyList();\n        List<String> test1Result = solution.filter_by_prefix(test1Input, \"a\");\n        assert test1Result.equals(test1Expected) : \"Test 1 failed\";\n\n        // Test case 2: example from the doctest\n        List<String> test2Input = Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\");\n        List<String> test2Expected = Arrays.asList(\"abc\", \"array\");\n        List<String> test2Result = solution.filter_by_prefix(test2Input, \"a\");\n        assert test2Result.equals(test2Expected) : \"Test 2 failed\";\n\n        // Test case 3: prefix is empty string\n        List<String> test3Input = Arrays.asList(\"a\", \"b\", \"c\");\n        List<String> test3Expected = Arrays.asList(\"a\", \"b\", \"c\");\n        List<String> test3Result = solution.filter_by_prefix(test3Input, \"\");\n        assert test3Result.equals(test3Expected) : \"Test 3 failed\";\n\n        // Test case 4: no matches\n        List<String> test4Input = Arrays.asList(\"apple\", \"banana\");\n        List<String> test4Expected = Collections.emptyList();\n        List<String> test4Result = solution.filter_by_prefix(test4Input, \"c\");\n        assert test4Result.equals(test4Expected) : \"Test 4 failed\";\n\n        // Test case 5: case sensitivity\n        List<String> test5Input = Arrays.asList(\"Apple\", \"apple\");\n        List<String> test5Expected = Collections.singletonList(\"apple\");\n        List<String> test5Result = solution.filter_by_prefix(test5Input, \"a\");\n        assert test5Result.equals(test5Expected) : \"Test 5 failed\";\n\n        System.out.println(\"All tests passed!\");\n    }\n}\n"}
{"task_id": "Java/30", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> get_positive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> get_positive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> get_positive(List<Integer> l) {\n        return l.stream()\n                .filter(n -> n > 0)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1\n        List<Integer> input1 = Arrays.asList(-1, 2, -4, 5, 6);\n        List<Integer> expected1 = Arrays.asList(2, 5, 6);\n        List<Integer> result1 = solution.get_positive(input1);\n        System.out.println(\"Test 1: \" + (result1.equals(expected1) ? \"Passed\" : \"Failed\"));\n        \n        // Test case 2\n        List<Integer> input2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n        List<Integer> expected2 = Arrays.asList(5, 3, 2, 3, 9, 123, 1);\n        List<Integer> result2 = solution.get_positive(input2);\n        System.out.println(\"Test 2: \" + (result2.equals(expected2) ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/31", "generation": "class Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    false\n    >>> is_prime(101)\n    true\n    >>> is_prime(11)\n    true\n    >>> is_prime(13441)\n    true\n    >>> is_prime(61)\n    true\n    >>> is_prime(4)\n    false\n    >>> is_prime(1)\n    false\n     */\n    public boolean is_prime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        int sqrtN = (int) Math.sqrt(n);\n        for (int i = 3; i <= sqrtN; i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/32", "generation": "import java.util.*;\n\nclass Solution {\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double find_zero(List<Double> xs) {\n        // Implementation of find_zero is assumed to be provided elsewhere.\n        // This is a placeholder to allow testing.\n        // For the given examples, this would need to return the correct root.\n        // However, since the actual implementation is not provided, this is a dummy return.\n        return 0.0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: 1 + 2x = 0 \u2192 x = -0.5\n        List<Double> test1 = Arrays.asList(1.0, 2.0);\n        double result1 = solution.find_zero(test1);\n        if (Math.abs(result1 + 0.5) < 1e-6) {\n            System.out.println(\"Test 1 passed.\");\n        } else {\n            System.out.println(\"Test 1 failed. Expected -0.5, got \" + result1);\n        }\n\n        // Test case 2: (x-1)(x-2)(x-3) \u2192 root at 1.0\n        List<Double> test2 = Arrays.asList(-6.0, 11.0, -6.0, 1.0);\n        double result2 = solution.find_zero(test2);\n        if (Math.abs(result2 - 1.0) < 1e-6) {\n            System.out.println(\"Test 2 passed.\");\n        } else {\n            System.out.println(\"Test 2 failed. Expected 1.0, got \" + result2);\n        }\n    }\n}\n"}
{"task_id": "Java/33", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_third(List<Integer> l) {\n        List<Integer> indicesDivisibleByThree = new ArrayList<>();\n        List<Integer> values = new ArrayList<>();\n        \n        // Collect indices divisible by three and their corresponding values\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                indicesDivisibleByThree.add(i);\n                values.add(l.get(i));\n            }\n        }\n        \n        // Sort the collected values\n        Collections.sort(values);\n        \n        // Create a new list to avoid modifying the original list while iterating\n        List<Integer> result = new ArrayList<>(l);\n        \n        // Replace the values at the indices divisible by three with the sorted values\n        for (int i = 0; i < indicesDivisibleByThree.size(); i++) {\n            int index = indicesDivisibleByThree.get(i);\n            result.set(index, values.get(i));\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> input1 = Arrays.asList(1, 2, 3);\n        List<Integer> expected1 = Arrays.asList(1, 2, 3);\n        List<Integer> result1 = solution.sort_third(input1);\n        System.out.println(\"Test 1: \" + (result1.equals(expected1) ? \"Passed\" : \"Failed\"));\n\n        // Test case 2\n        List<Integer> input2 = Arrays.asList(5, 6, 3, 4, 8, 9, 2);\n        List<Integer> expected2 = Arrays.asList(2, 6, 3, 4, 8, 9, 5);\n        List<Integer> result2 = solution.sort_third(input2);\n        System.out.println(\"Test 2: \" + (result2.equals(expected2) ? \"Passed\" : \"Failed\"));\n\n        // Test case 3: empty list\n        List<Integer> input3 = Collections.emptyList();\n        List<Integer> expected3 = Collections.emptyList();\n        List<Integer> result3 = solution.sort_third(input3);\n        System.out.println(\"Test 3: \" + (result3.equals(expected3) ? \"Passed\" : \"Failed\"));\n\n        // Test case 4: single element\n        List<Integer> input4 = Arrays.asList(10);\n        List<Integer> expected4 = Arrays.asList(10);\n        List<Integer> result4 = solution.sort_third(input4);\n        System.out.println(\"Test 4: \" + (result4.equals(expected4) ? \"Passed\" : \"Failed\"));\n\n        // Test case 5: multiple elements at indices divisible by 3\n        List<Integer> input5 = Arrays.asList(3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5);\n        List<Integer> expected5 = Arrays.asList(1, 1, 4, 2, 5, 9, 3, 6, 5, 3, 5);\n        List<Integer> result5 = solution.sort_third(input5);\n        System.out.println(\"Test 5: \" + (result5.equals(expected5) ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/34", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        // Implementation not shown; placeholder to compile\n        return new ArrayList<>();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1: Sample input\n        testCase(solution, \n            Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123),\n            Arrays.asList(0, 2, 3, 5, 9, 123),\n            1\n        );\n        \n        // Test case 2: Empty list\n        testCase(solution,\n            Collections.emptyList(),\n            Collections.emptyList(),\n            2\n        );\n        \n        // Test case 3: All duplicates\n        testCase(solution,\n            Arrays.asList(2, 2, 2),\n            Arrays.asList(2),\n            3\n        );\n        \n        // Test case 4: Already sorted and unique\n        testCase(solution,\n            Arrays.asList(1, 2, 3),\n            Arrays.asList(1, 2, 3),\n            4\n        );\n        \n        // Test case 5: With negative numbers\n        testCase(solution,\n            Arrays.asList(3, -1, -1, 0),\n            Arrays.asList(-1, 0, 3),\n            5\n        );\n    }\n\n    private static void testCase(Solution solution, List<Integer> input, List<Integer> expected, int testNumber) {\n        List<Integer> result = solution.unique(input);\n        boolean passed = result.equals(expected);\n        System.out.println(\"Test \" + testNumber + \": \" + (passed ? \"Passed\" : \"Failed\"));\n        if (!passed) {\n            System.out.println(\"   Expected: \" + expected);\n            System.out.println(\"   Result  : \" + result);\n        }\n    }\n}\n"}
{"task_id": "Java/35", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> max_element(Arrays.asList(1, 2, 3))\n    3\n    >>> max_element(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int max_element(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List must not be null or empty\");\n        }\n        int max = l.get(0);\n        for (int num : l) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test case 1\n        List<Integer> test1 = Arrays.asList(1, 2, 3);\n        int result1 = solution.max_element(test1);\n        System.out.println(\"Test 1: \" + (result1 == 3 ? \"Passed\" : \"Failed\"));\n\n        // Test case 2\n        List<Integer> test2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n        int result2 = solution.max_element(test2);\n        System.out.println(\"Test 2: \" + (result2 == 123 ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/36", "generation": "class Solution {\n    public int fizz_buzz(int n) {\n        int total = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                total += countSevens(i);\n            }\n        }\n        return total;\n    }\n\n    private int countSevens(int num) {\n        int count = 0;\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit == 7) {\n                count++;\n            }\n            num /= 10;\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/37", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_even(List<Integer> l) {\n        List<Integer> evenIndices = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 2) {\n            evenIndices.add(l.get(i));\n        }\n        Collections.sort(evenIndices);\n        List<Integer> result = new ArrayList<>(l);\n        int sortedIndex = 0;\n        for (int i = 0; i < result.size(); i += 2) {\n            result.set(i, evenIndices.get(sortedIndex++));\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> input1 = Arrays.asList(1, 2, 3);\n        List<Integer> expected1 = Arrays.asList(1, 2, 3);\n        List<Integer> result1 = solution.sort_even(input1);\n        System.out.println(\"Test case 1: \" + (result1.equals(expected1) ? \"Passed\" : \"Failed\"));\n\n        // Test case 2\n        List<Integer> input2 = Arrays.asList(5, 6, 3, 4);\n        List<Integer> expected2 = Arrays.asList(3, 6, 5, 4);\n        List<Integer> result2 = solution.sort_even(input2);\n        System.out.println(\"Test case 2: \" + (result2.equals(expected2) ? \"Passed\" : \"Failed\"));\n\n        // Additional test case\n        List<Integer> input3 = Arrays.asList(4, 1, 2, 7, 5, 3);\n        List<Integer> expected3 = Arrays.asList(2, 1, 4, 7, 5, 3);\n        List<Integer> result3 = solution.sort_even(input3);\n        System.out.println(\"Test case 3: \" + (result3.equals(expected3) ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/38", "generation": "class Solution {\n    /**\n     * Returns the decoded string which was encoded with encodeCyclic function.\n     */\n    public String decode_cyclic(String s) {\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        for (int i = 0; i < groups.size(); i++) {\n            String group = groups.get(i);\n            if (group.length() == 3) {\n                char lastChar = group.charAt(2);\n                groups.set(i, lastChar + group.substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n"}
{"task_id": "Java/39", "generation": "class Solution {\n    public int prime_fib(int n) {\n        int count = 0;\n        int a = 0, b = 1;\n        while (true) {\n            int c = a + b;\n            a = b;\n            b = c;\n            if (isPrime(b)) {\n                count++;\n                if (count == n) {\n                    return b;\n                }\n            }\n        }\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        if (num <= 3) {\n            return true;\n        }\n        if (num % 2 == 0 || num % 3 == 0) {\n            return false;\n        }\n        int i = 5;\n        int w = 2;\n        while (i * i <= num) {\n            if (num % i == 0) {\n                return false;\n            }\n            i += w;\n            w = 6 - w;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        testCase(solution, 1, 2);\n        testCase(solution, 2, 3);\n        testCase(solution, 3, 5);\n        testCase(solution, 4, 13);\n        testCase(solution, 5, 89);\n        System.out.println(\"All test cases passed!\");\n    }\n\n    private static void testCase(Solution s, int input, int expected) {\n        int result = s.prime_fib(input);\n        if (result != expected) {\n            System.err.println(\"Test failed for input \" + input + \": Expected \" + expected + \", got \" + result);\n            System.exit(1);\n        }\n    }\n}\n"}
{"task_id": "Java/40", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        int n = l.size();\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/41", "generation": "class Solution {\n    public int car_race_collision(int n) {\n        return n * n;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        // Test cases\n        System.out.println(s.car_race_collision(1));  // Expected: 1\n        System.out.println(s.car_race_collision(2));  // Expected: 4\n        System.out.println(s.car_race_collision(3));  // Expected: 9\n        System.out.println(s.car_race_collision(0));  // Expected: 0\n        System.out.println(s.car_race_collision(5));  // Expected: 25\n    }\n}\n"}
{"task_id": "Java/42", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incr_list(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incr_list(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incr_list(List<Integer> l) {\n        return l.stream()\n                .map(n -> n + 1)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> input1 = Arrays.asList(1, 2, 3);\n        List<Integer> expected1 = Arrays.asList(2, 3, 4);\n        List<Integer> result1 = solution.incr_list(input1);\n        System.out.println(\"Test 1: \" + (result1.equals(expected1) ? \"Passed\" : \"Failed\"));\n\n        // Test case 2\n        List<Integer> input2 = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        List<Integer> expected2 = Arrays.asList(6, 4, 6, 3, 4, 4, 10, 1, 124);\n        List<Integer> result2 = solution.incr_list(input2);\n        System.out.println(\"Test 2: \" + (result2.equals(expected2) ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/43", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        Set<Integer> seen = new HashSet<>();\n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/44", "generation": "class Solution {\n    public String change_base(int x, int base) {\n        // Implementation code here (to be written by the user)\n        return \"\";\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        // Test case 1: change_base(8, 3) should return \"22\"\n        String result1 = sol.change_base(8, 3);\n        System.out.println(\"Test 1: \" + (\"22\".equals(result1) ? \"Passed\" : \"Failed\"));\n\n        // Test case 2: change_base(8, 2) should return \"1000\"\n        String result2 = sol.change_base(8, 2);\n        System.out.println(\"Test 2: \" + (\"1000\".equals(result2) ? \"Passed\" : \"Failed\"));\n\n        // Test case 3: change_base(7, 2) should return \"111\"\n        String result3 = sol.change_base(7, 2);\n        System.out.println(\"Test 3: \" + (\"111\".equals(result3) ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/45", "generation": "class Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n     */\n    public double triangle_area(double a, double h) {\n        return (a * h) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        double result = sol.triangle_area(5, 3);\n        double expected = 7.5;\n        double epsilon = 1e-9;\n        if (Math.abs(result - expected) < epsilon) {\n            System.out.println(\"Test passed\");\n        } else {\n            System.out.println(\"Test failed. Expected \" + expected + \" but got \" + result);\n        }\n    }\n}\n"}
{"task_id": "Java/46", "generation": "class Solution {\n    public int fib4(int n) {\n        if (n == 0 || n == 1 || n == 3) {\n            return 0;\n        } else if (n == 2) {\n            return 2;\n        }\n        int a = 0, b = 0, c = 2, d = 0;\n        for (int i = 4; i <= n; i++) {\n            int current = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n            d = current;\n        }\n        return d;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.fib4(5));  // Expected 4\n        System.out.println(s.fib4(6));  // Expected 8\n        System.out.println(s.fib4(7));  // Expected 14\n        System.out.println(s.fib4(0));  // 0\n        System.out.println(s.fib4(2));  // 2\n        System.out.println(s.fib4(3));  // 0\n        System.out.println(s.fib4(4));  // 2\n    }\n}\n"}
{"task_id": "Java/47", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double median(List<Integer> l) {\n        List<Integer> sortedList = new ArrayList<>(l);\n        Collections.sort(sortedList);\n        int size = sortedList.size();\n        if (size % 2 == 1) {\n            return sortedList.get(size / 2);\n        } else {\n            int a = sortedList.get(size / 2 - 1);\n            int b = sortedList.get(size / 2);\n            return (a + b) / 2.0;\n        }\n    }\n}\n"}
{"task_id": "Java/48", "generation": "class Solution {\n    public boolean is_palindrome(String text) {\n        // Implementation logic here\n        int left = 0;\n        int right = text.length() - 1;\n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        // Run test cases and print results\n        System.out.println(\"Test 1 (empty string): \" + (s.is_palindrome(\"\") == true ? \"Passed\" : \"Failed\"));\n        System.out.println(\"Test 2 (\\\"aba\\\"): \" + (s.is_palindrome(\"aba\") == true ? \"Passed\" : \"Failed\"));\n        System.out.println(\"Test 3 (\\\"aaaaa\\\"): \" + (s.is_palindrome(\"aaaaa\") == true ? \"Passed\" : \"Failed\"));\n        System.out.println(\"Test 4 (\\\"zbcd\\\"): \" + (s.is_palindrome(\"zbcd\") == false ? \"Passed\" : \"Failed\"));\n    }\n}"}
{"task_id": "Java/49", "generation": "class Solution {\n    public int modp(int n, int p) {\n        if (p == 1) {\n            return 0;\n        }\n        long result = 1;\n        long base = 2 % p;\n        int exponent = n;\n        while (exponent > 0) {\n            if ((exponent & 1) != 0) {\n                result = (result * base) % p;\n            }\n            base = (base * base) % p;\n            exponent >>= 1;\n        }\n        return (int) result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(\"Test 1: \" + (solution.modp(3, 5) == 3 ? \"Passed\" : \"Failed\"));\n        System.out.println(\"Test 2: \" + (solution.modp(1101, 101) == 2 ? \"Passed\" : \"Failed\"));\n        System.out.println(\"Test 3: \" + (solution.modp(0, 101) == 1 ? \"Passed\" : \"Failed\"));\n        System.out.println(\"Test 4: \" + (solution.modp(3, 11) == 8 ? \"Passed\" : \"Failed\"));\n        System.out.println(\"Test 5: \" + (solution.modp(100, 101) == 1 ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/50", "generation": "class Solution {\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public String decode_shift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            int shifted = (ch - 'a' + 21) % 26;\n            sb.append((char) ('a' + shifted));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        // Test case 1: Basic test\n        String original = \"abc\";\n        String encoded = sol.encodeShift(original);\n        String decoded = sol.decode_shift(encoded);\n        System.out.println(\"Original: \" + original + \", Encoded: \" + encoded + \", Decoded: \" + decoded);\n\n        // Test case 2: Wrap around characters\n        original = \"xyz\";\n        encoded = sol.encodeShift(original);\n        decoded = sol.decode_shift(encoded);\n        System.out.println(\"Original: \" + original + \", Encoded: \" + encoded + \", Decoded: \" + decoded);\n\n        // Test case 3: Empty string\n        original = \"\";\n        encoded = sol.encodeShift(original);\n        decoded = sol.decode_shift(encoded);\n        System.out.println(\"Empty test: Encoded: '\" + encoded + \"', Decoded: '\" + decoded + \"'\");\n\n        // Test case 4: Single character 'v'\n        original = \"v\";\n        encoded = sol.encodeShift(original);\n        decoded = sol.decode_shift(encoded);\n        System.out.println(\"Original: \" + original + \", Encoded: \" + encoded + \", Decoded: \" + decoded);\n\n        // Test case 5: Single character 'z'\n        original = \"z\";\n        encoded = sol.encodeShift(original);\n        decoded = sol.decode_shift(encoded);\n        System.out.println(\"Original: \" + original + \", Encoded: \" + encoded + \", Decoded: \" + decoded);\n    }\n}\n"}
{"task_id": "Java/51", "generation": "class Solution {\n    public String remove_vowels(String text) {\n        return text.replaceAll(\"[AEIOUaeiou]\", \"\");\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: empty string\n        testCase(solution, \"\", \"\", 1);\n\n        // Test case 2: string with newline\n        testCase(solution, \"abcdef\\nghijklm\", \"bcdf\\nghjklm\", 2);\n\n        // Test case 3: \"abcdef\" should become \"bcdf\"\n        testCase(solution, \"abcdef\", \"bcdf\", 3);\n\n        // Test case 4: all vowels\n        testCase(solution, \"aaaaa\", \"\", 4);\n\n        // Test case 5: uppercase consonant in the middle\n        testCase(solution, \"aaBAA\", \"B\", 5);\n\n        // Test case 6: no vowels present\n        testCase(solution, \"zbcd\", \"zbcd\", 6);\n    }\n\n    private static void testCase(Solution solution, String input, String expected, int caseNumber) {\n        String result = solution.remove_vowels(input);\n        if (expected.equals(result)) {\n            System.out.println(\"Test \" + caseNumber + \" passed.\");\n        } else {\n            System.out.println(\"Test \" + caseNumber + \" failed. Expected: '\" + expected + \"', got: '\" + result + \"'\");\n        }\n    }\n}\n"}
{"task_id": "Java/52", "generation": "class Solution {\n    public boolean below_threshold(List<Integer> l, int t) {\n        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        // Test case 1\n        List<Integer> list1 = Arrays.asList(1, 2, 4, 10);\n        System.out.println(s.below_threshold(list1, 100)); // Expected: true\n\n        // Test case 2\n        List<Integer> list2 = Arrays.asList(1, 20, 4, 10);\n        System.out.println(s.below_threshold(list2, 5));   // Expected: false\n\n        // Additional test: empty list\n        System.out.println(s.below_threshold(new ArrayList<>(), 10)); // true\n\n        // Test threshold equality\n        System.out.println(s.below_threshold(Arrays.asList(5), 5));    // false\n    }\n}"}
{"task_id": "Java/53", "generation": "class Solution {\n    public int add(int x, int y) {\n        return x + y;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        // Test case 1: 2 + 3 = 5\n        int result1 = sol.add(2, 3);\n        if (result1 == 5) {\n            System.out.println(\"Test 1 passed\");\n        } else {\n            System.out.println(\"Test 1 failed. Expected 5, got \" + result1);\n        }\n        // Test case 2: 5 + 7 = 12\n        int result2 = sol.add(5, 7);\n        if (result2 == 12) {\n            System.out.println(\"Test 2 passed\");\n        } else {\n            System.out.println(\"Test 2 failed. Expected 12, got \" + result2);\n        }\n    }\n}\n"}
{"task_id": "Java/54", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean same_chars(String s0, String s1) {\n        Set<Character> set0 = new HashSet<>();\n        for (char c : s0.toCharArray()) {\n            set0.add(c);\n        }\n        Set<Character> set1 = new HashSet<>();\n        for (char c : s1.toCharArray()) {\n            set1.add(c);\n        }\n        return set0.equals(set1);\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // true\n        System.out.println(sol.same_chars(\"abcd\", \"dddddddabc\")); // true\n        System.out.println(sol.same_chars(\"dddddddabc\", \"abcd\")); // true\n        System.out.println(sol.same_chars(\"eabcd\", \"dddddddabc\")); // false\n        System.out.println(sol.same_chars(\"abcd\", \"dddddddabce\")); // false\n        System.out.println(sol.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // false\n    }\n}\n"}
{"task_id": "Java/55", "generation": "class Solution {\n    public int fib(int n) {\n        // Implementation of the Fibonacci method would be here\n        if (n <= 1) return n;\n        int prev = 0, curr = 1;\n        for (int i = 2; i <= n; i++) {\n            int next = prev + curr;\n            prev = curr;\n            curr = next;\n        }\n        return curr;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        // Test cases\n        System.out.println(s.fib(10) == 55 ? \"Pass\" : \"Fail\"); // Expected 55\n        System.out.println(s.fib(1) == 1 ? \"Pass\" : \"Fail\");  // Expected 1\n        System.out.println(s.fib(8) == 21 ? \"Pass\" : \"Fail\"); // Expected 21\n    }\n}\n"}
{"task_id": "Java/56", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean correct_bracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '<') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.correct_bracketing(\"<\"));       // false\n        System.out.println(sol.correct_bracketing(\"<>\"));      // true\n        System.out.println(sol.correct_bracketing(\"<<><>>\"));  // true\n        System.out.println(sol.correct_bracketing(\"><<>\"));    // false\n    }\n}\n"}
{"task_id": "Java/57", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() <= 2) return true;\n        \n        int direction = 0; // 0: undetermined, 1: increasing, -1: decreasing\n        \n        for (int i = 0; i < l.size() - 1; i++) {\n            int current = l.get(i);\n            int next = l.get(i + 1);\n            \n            if (direction == 0) {\n                if (next > current) {\n                    direction = 1;\n                } else if (next < current) {\n                    direction = -1;\n                }\n                // else, remain undetermined if elements are equal\n            }\n            \n            if (direction == 1) {\n                if (next < current) return false;\n            } else if (direction == -1) {\n                if (next > current) return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        \n        // Test case 1: Monotonically increasing\n        List<Integer> test1 = Arrays.asList(1, 2, 4, 20);\n        System.out.println(s.monotonic(test1)); // true\n        \n        // Test case 2: Not monotonic\n        List<Integer> test2 = Arrays.asList(1, 20, 4, 10);\n        System.out.println(s.monotonic(test2)); // false\n        \n        // Test case 3: Monotonically decreasing\n        List<Integer> test3 = Arrays.asList(4, 1, 0, -10);\n        System.out.println(s.monotonic(test3)); // true\n        \n        // Additional test case: All elements equal\n        List<Integer> test4 = Arrays.asList(5, 5, 5);\n        System.out.println(s.monotonic(test4)); // true\n        \n        // Additional test case: Initially flat then increasing\n        List<Integer> test5 = Arrays.asList(2, 2, 3, 4);\n        System.out.println(s.monotonic(test5)); // true\n        \n        // Additional test case: Initially flat then decreasing\n        List<Integer> test6 = Arrays.asList(4, 4, 3, 2);\n        System.out.println(s.monotonic(test6)); // true\n    }\n}\n"}
{"task_id": "Java/58", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set = new HashSet<>(l1);\n        Set<Integer> commonSet = new HashSet<>();\n        for (Integer num : l2) {\n            if (set.contains(num)) {\n                commonSet.add(num);\n            }\n        }\n        List<Integer> result = new ArrayList<>(commonSet);\n        Collections.sort(result);\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1\n        List<Integer> list1 = Arrays.asList(1, 4, 3, 34, 653, 2, 5);\n        List<Integer> list2 = Arrays.asList(5, 7, 1, 5, 9, 653, 121);\n        List<Integer> expected1 = Arrays.asList(1, 5, 653);\n        List<Integer> result1 = solution.common(list1, list2);\n        System.out.println(\"Test 1: \" + (result1.equals(expected1) ? \"Passed\" : \"Failed\"));\n        \n        // Test case 2\n        list1 = Arrays.asList(5, 3, 2, 8);\n        list2 = Arrays.asList(3, 2);\n        List<Integer> expected2 = Arrays.asList(2, 3);\n        List<Integer> result2 = solution.common(list1, list2);\n        System.out.println(\"Test 2: \" + (result2.equals(expected2) ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/59", "generation": "class Solution {\n    public int largest_prime_factor(int n) {\n        int largestFactor = -1;\n        // Check divisibility by 2 first\n        while (n % 2 == 0) {\n            largestFactor = 2;\n            n /= 2;\n        }\n        // Now check odd numbers starting from 3\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                largestFactor = i;\n                n /= i;\n            }\n        }\n        // If remaining n is a prime greater than 2\n        if (n > 2) {\n            largestFactor = n;\n        }\n        return largestFactor;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test case 1: n = 13195, expected 29\n        int result1 = solution.largest_prime_factor(13195);\n        System.out.println(\"Test 1: \" + (result1 == 29 ? \"Passed\" : \"Failed\"));\n        // Test case 2: n = 2048, expected 2\n        int result2 = solution.largest_prime_factor(2048);\n        System.out.println(\"Test 2: \" + (result2 == 2 ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/60", "generation": "class Solution {\n    public int sum_to_n(int n) {\n        // Implementation not provided\n        return 0;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        test(sol.sum_to_n(30), 465, 1);\n        test(sol.sum_to_n(100), 5050, 2);\n        test(sol.sum_to_n(5), 15, 3);\n        test(sol.sum_to_n(10), 55, 4);\n        test(sol.sum_to_n(1), 1, 5);\n    }\n\n    private static void test(int actual, int expected, int testCaseNumber) {\n        if (actual == expected) {\n            System.out.println(\"Test \" + testCaseNumber + \" passed.\");\n        } else {\n            System.out.println(\"Test \" + testCaseNumber + \" failed. Expected \" + expected + \", got \" + actual + \".\");\n        }\n    }\n}\n"}
{"task_id": "Java/61", "generation": "class Solution {\n    public boolean correct_bracketing(String brackets) {\n        int balance = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '(') {\n                balance++;\n            } else {\n                balance--;\n                if (balance < 0) {\n                    return false;\n                }\n            }\n        }\n        return balance == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        // Test case 1: Single opening bracket\n        System.out.println(\"Test 1: \" + (sol.correct_bracketing(\"(\") == false ? \"Pass\" : \"Fail\"));\n        // Test case 2: Properly paired brackets\n        System.out.println(\"Test 2: \" + (sol.correct_bracketing(\"()\") == true ? \"Pass\" : \"Fail\"));\n        // Test case 3: Nested brackets\n        System.out.println(\"Test 3: \" + (sol.correct_bracketing(\"(()())\") == true ? \"Pass\" : \"Fail\"));\n        // Test case 4: Incorrect starting with closing bracket\n        System.out.println(\"Test 4: \" + (sol.correct_bracketing(\")(()\") == false ? \"Pass\" : \"Fail\"));\n    }\n}\n"}
{"task_id": "Java/62", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: Sample input [3,1,2,4,5]\n        List<Integer> input1 = Arrays.asList(3, 1, 2, 4, 5);\n        List<Integer> expected1 = Arrays.asList(1, 4, 12, 20);\n        List<Integer> result1 = solution.derivative(input1);\n        System.out.println(\"Test 1: \" + (result1.equals(expected1) ? \"Passed\" : \"Failed\"));\n\n        // Test case 2: Sample input [1,2,3]\n        List<Integer> input2 = Arrays.asList(1, 2, 3);\n        List<Integer> expected2 = Arrays.asList(2, 6);\n        List<Integer> result2 = solution.derivative(input2);\n        System.out.println(\"Test 2: \" + (result2.equals(expected2) ? \"Passed\" : \"Failed\"));\n\n        // Test case 3: Single element (constant term)\n        List<Integer> input3 = Collections.singletonList(5);\n        List<Integer> expected3 = Collections.emptyList();\n        List<Integer> result3 = solution.derivative(input3);\n        System.out.println(\"Test 3: \" + (result3.equals(expected3) ? \"Passed\" : \"Failed\"));\n\n        // Test case 4: Empty list\n        List<Integer> input4 = Collections.emptyList();\n        List<Integer> expected4 = Collections.emptyList();\n        List<Integer> result4 = solution.derivative(input4);\n        System.out.println(\"Test 4: \" + (result4.equals(expected4) ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/63", "generation": "class Solution {\n    public int fibfib(int n) {\n        if (n == 0 || n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        }\n        int a = 0, b = 0, c = 1;\n        for (int i = 3; i <= n; i++) {\n            int next = a + b + c;\n            a = b;\n            b = c;\n            c = next;\n        }\n        return c;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.fibfib(1));  // Expected 0\n        System.out.println(sol.fibfib(5));  // Expected 4\n        System.out.println(sol.fibfib(8));  // Expected 24\n    }\n}\n"}
{"task_id": "Java/64", "generation": "class Solution {\n    public int vowels_count(String s) {\n        int count = 0;\n        if (s == null || s.isEmpty()) {\n            return 0;\n        }\n        String lowerS = s.toLowerCase();\n        int length = lowerS.length();\n        for (int i = 0; i < length; i++) {\n            char c = lowerS.charAt(i);\n            if (i == length - 1) {\n                // Check for vowels including 'y' at the end\n                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y') {\n                    count++;\n                }\n            } else {\n                // Check for vowels excluding 'y' for non-last characters\n                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.vowels_count(\"abcde\"));    // Expected: 2\n        System.out.println(sol.vowels_count(\"ACEDY\"));    // Expected: 3\n        System.out.println(sol.vowels_count(\"y\"));        // Expected: 1\n        System.out.println(sol.vowels_count(\"yy\"));       // Expected: 1\n        System.out.println(sol.vowels_count(\"appleY\"));   // Expected: 3\n        System.out.println(sol.vowels_count(\"yummy\"));    // Expected: 2\n        System.out.println(sol.vowels_count(\"\"));         // Expected: 0\n        System.out.println(sol.vowels_count(\"AEIOUY\"));   // Expected: 6\n    }\n}\n"}
{"task_id": "Java/65", "generation": "class Solution {\n    public String circular_shift(int x, int shift) {\n        String s = Integer.toString(x);\n        int n = s.length();\n        if (n == 0) return \"\";\n        \n        if (shift > n) {\n            return new StringBuilder(s).reverse().toString();\n        } else {\n            int splitPos = n - shift;\n            return s.substring(splitPos) + s.substring(0, splitPos);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        assertTest(sol.circular_shift(12, 1), \"21\");\n        assertTest(sol.circular_shift(12, 2), \"12\");\n        assertTest(sol.circular_shift(123, 1), \"312\");\n        assertTest(sol.circular_shift(123, 2), \"231\");\n        assertTest(sol.circular_shift(123, 3), \"123\");\n        assertTest(sol.circular_shift(123, 4), \"321\");\n        assertTest(sol.circular_shift(10, 1), \"01\");\n        assertTest(sol.circular_shift(0, 0), \"0\");\n        assertTest(sol.circular_shift(0, 5), \"0\");\n        assertTest(sol.circular_shift(100, 2), \"001\");\n    }\n\n    private static void assertTest(String actual, String expected) {\n        if (actual.equals(expected)) {\n            System.out.println(\"Test passed for expected: \" + expected);\n        } else {\n            System.out.println(\"Test failed. Expected: \" + expected + \", Actual: \" + actual);\n        }\n    }\n}\n"}
{"task_id": "Java/66", "generation": "class Solution {\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n\n    // Test code\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.digitSum(\"\") == 0);         // true\n        System.out.println(sol.digitSum(\"abAB\") == 131);   // true\n        System.out.println(sol.digitSum(\"abcCd\") == 67);   // true\n        System.out.println(sol.digitSum(\"helloE\") == 69);  // true\n        System.out.println(sol.digitSum(\"woArBld\") == 131);// true\n        System.out.println(sol.digitSum(\"aAaaaXa\") == 153);// true\n    }\n}\n"}
{"task_id": "Java/67", "generation": "class Solution {\n    public int fruit_distribution(String s, int n) {\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[3]);\n        return n - apples - oranges;\n    }\n}\n"}
{"task_id": "Java/68", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> pluck(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        int minEven = Integer.MAX_VALUE;\n        int minIndex = -1;\n\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num % 2 == 0) {\n                if (num < minEven) {\n                    minEven = num;\n                    minIndex = i;\n                    // Early exit if we find 0, since it's the smallest possible even number\n                    if (minEven == 0) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        if (minIndex == -1) {\n            return new ArrayList<>();\n        } else {\n            return Arrays.asList(minEven, minIndex);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1\n        List<Integer> input1 = Arrays.asList(4, 2, 3);\n        List<Integer> expected1 = Arrays.asList(2, 1);\n        List<Integer> result1 = solution.pluck(input1);\n        System.out.println(\"Test 1: \" + (result1.equals(expected1) ? \"Passed\" : \"Failed\"));\n\n        // Test case 2\n        List<Integer> input2 = Arrays.asList(1, 2, 3);\n        List<Integer> expected2 = Arrays.asList(2, 1);\n        List<Integer> result2 = solution.pluck(input2);\n        System.out.println(\"Test 2: \" + (result2.equals(expected2) ? \"Passed\" : \"Failed\"));\n\n        // Test case 3: empty list\n        List<Integer> input3 = Collections.emptyList();\n        List<Integer> expected3 = Collections.emptyList();\n        List<Integer> result3 = solution.pluck(input3);\n        System.out.println(\"Test 3: \" + (result3.equals(expected3) ? \"Passed\" : \"Failed\"));\n\n        // Test case 4\n        List<Integer> input4 = Arrays.asList(5, 0, 3, 0, 4, 2);\n        List<Integer> expected4 = Arrays.asList(0, 1);\n        List<Integer> result4 = solution.pluck(input4);\n        System.out.println(\"Test 4: \" + (result4.equals(expected4) ? \"Passed\" : \"Failed\"));\n\n        // Test case 5: all odds\n        List<Integer> input5 = Arrays.asList(1, 3, 5);\n        List<Integer> expected5 = Collections.emptyList();\n        List<Integer> result5 = solution.pluck(input5);\n        System.out.println(\"Test 5: \" + (result5.equals(expected5) ? \"Passed\" : \"Failed\"));\n\n        // Test case 6: smallest even is first element\n        List<Integer> input6 = Arrays.asList(2, 4, 6);\n        List<Integer> expected6 = Arrays.asList(2, 0);\n        List<Integer> result6 = solution.pluck(input6);\n        System.out.println(\"Test 6: \" + (result6.equals(expected6) ? \"Passed\" : \"Failed\"));\n\n        // Test case 7: single element 0\n        List<Integer> input7 = Collections.singletonList(0);\n        List<Integer> expected7 = Arrays.asList(0, 0);\n        List<Integer> result7 = solution.pluck(input7);\n        System.out.println(\"Test 7: \" + (result7.equals(expected7) ? \"Passed\" : \"Failed\"));\n\n        // Test case 8: multiple same even values\n        List<Integer> input8 = Arrays.asList(2, 2, 2);\n        List<Integer> expected8 = Arrays.asList(2, 0);\n        List<Integer> result8 = solution.pluck(input8);\n        System.out.println(\"Test 8: \" + (result8.equals(expected8) ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/69", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int search(List<Integer> lst) {\n        Map<Integer, Integer> freq = new HashMap<>();\n        for (int num : lst) {\n            freq.put(num, freq.getOrDefault(num, 0) + 1);\n        }\n        int maxVal = -1;\n        for (Map.Entry<Integer, Integer> entry : freq.entrySet()) {\n            int num = entry.getKey();\n            int count = entry.getValue();\n            if (num > 0 && count >= num) {\n                if (num > maxVal) {\n                    maxVal = num;\n                }\n            }\n        }\n        return maxVal;\n    }\n}\n"}
{"task_id": "Java/70", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        if (lst.isEmpty()) {\n            return result;\n        }\n        \n        List<Integer> sorted = new ArrayList<>(lst);\n        Collections.sort(sorted);\n        \n        int left = 0;\n        int right = sorted.size() - 1;\n        boolean pickMin = true;\n        \n        while (left <= right) {\n            if (pickMin) {\n                result.add(sorted.get(left));\n                left++;\n            } else {\n                result.add(sorted.get(right));\n                right--;\n            }\n            pickMin = !pickMin;\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> input1 = Arrays.asList(1, 2, 3, 4);\n        List<Integer> expected1 = Arrays.asList(1, 4, 2, 3);\n        List<Integer> result1 = solution.strange_sort_list(input1);\n        System.out.println(\"Test case 1: \" + (result1.equals(expected1) ? \"Passed\" : \"Failed\"));\n\n        // Test case 2\n        List<Integer> input2 = Arrays.asList(5, 5, 5, 5);\n        List<Integer> expected2 = Arrays.asList(5, 5, 5, 5);\n        List<Integer> result2 = solution.strange_sort_list(input2);\n        System.out.println(\"Test case 2: \" + (result2.equals(expected2) ? \"Passed\" : \"Failed\"));\n\n        // Test case 3: empty list\n        List<Integer> input3 = Collections.emptyList();\n        List<Integer> expected3 = Collections.emptyList();\n        List<Integer> result3 = solution.strange_sort_list(input3);\n        System.out.println(\"Test case 3: \" + (result3.equals(expected3) ? \"Passed\" : \"Failed\"));\n\n        // Test case 4: single element\n        List<Integer> input4 = Collections.singletonList(10);\n        List<Integer> expected4 = Collections.singletonList(10);\n        List<Integer> result4 = solution.strange_sort_list(input4);\n        System.out.println(\"Test case 4: \" + (result4.equals(expected4) ? \"Passed\" : \"Failed\"));\n\n        // Test case 5: two elements, sorted\n        List<Integer> input5 = Arrays.asList(2, 3);\n        List<Integer> expected5 = Arrays.asList(2, 3);\n        List<Integer> result5 = solution.strange_sort_list(input5);\n        System.out.println(\"Test case 5: \" + (result5.equals(expected5) ? \"Passed\" : \"Failed\"));\n\n        // Test case 6: two elements, reverse order\n        List<Integer> input6 = Arrays.asList(3, 2);\n        List<Integer> expected6 = Arrays.asList(2, 3);\n        List<Integer> result6 = solution.strange_sort_list(input6);\n        System.out.println(\"Test case 6: \" + (result6.equals(expected6) ? \"Passed\" : \"Failed\"));\n\n        // Test case 7: three elements\n        List<Integer> input7 = Arrays.asList(3, 1, 2);\n        List<Integer> expected7 = Arrays.asList(1, 3, 2);\n        List<Integer> result7 = solution.strange_sort_list(input7);\n        System.out.println(\"Test case 7: \" + (result7.equals(expected7) ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/71", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangle_area(double a, double b, double c) {\n        double[] sides = {a, b, c};\n        Arrays.sort(sides);\n        if (sides[0] + sides[1] <= sides[2]) {\n            return -1;\n        }\n        double s = (a + b + c) / 2.0;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        double rounded = Math.round(area * 100) / 100.0;\n        return rounded;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        // Test case 1: Valid triangle (3,4,5) => 6.00\n        System.out.printf(\"%.2f%n\", sol.triangle_area(3, 4, 5));\n        // Test case 2: Invalid triangle (1,2,10) => -1\n        System.out.println(sol.triangle_area(1, 2, 10));\n        // Additional test case: Valid triangle (2,2,3) => 1.98\n        System.out.printf(\"%.2f%n\", sol.triangle_area(2, 2, 3));\n        // Test case: All zeros (invalid)\n        System.out.println(sol.triangle_area(0, 0, 0));\n        // Test case: Equilateral triangle (5,5,5) => 10.83\n        System.out.printf(\"%.2f%n\", sol.triangle_area(5, 5, 5));\n    }\n}\n"}
{"task_id": "Java/72", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean will_it_fly(List<Integer> q, int w) {\n        // Calculate the sum of elements in the list\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n        // Check if sum exceeds the maximum weight\n        if (sum > w) {\n            return false;\n        }\n        // Check if the list is a palindrome\n        int left = 0;\n        int right = q.size() - 1;\n        while (left < right) {\n            if (!q.get(left).equals(q.get(right))) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/73", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int smallest_change(List<Integer> arr) {\n        int count = 0;\n        int n = arr.size();\n        for (int i = 0; i < n / 2; i++) {\n            int left = arr.get(i);\n            int right = arr.get(n - 1 - i);\n            if (left != right) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/74", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        int sum1 = 0;\n        for (String s : lst1) {\n            sum1 += s.length();\n        }\n        int sum2 = 0;\n        for (String s : lst2) {\n            sum2 += s.length();\n        }\n        \n        if (sum1 <= sum2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n"}
{"task_id": "Java/75", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean is_multiply_prime(int a) {\n        List<Integer> primes = generatePrimesUnder100();\n        for (int p1 : primes) {\n            for (int p2 : primes) {\n                for (int p3 : primes) {\n                    if (p1 * p2 * p3 == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    private List<Integer> generatePrimesUnder100() {\n        boolean[] isPrime = new boolean[100];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = false;\n        isPrime[1] = false;\n        for (int i = 2; i * i < 100; i++) {\n            if (isPrime[i]) {\n                for (int j = i * i; j < 100; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < 100; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n}\n"}
{"task_id": "Java/76", "generation": "class Solution {\n    public boolean is_simple_power(int x, int n) {\n        // Handle x == 0 case\n        if (x == 0) {\n            return (n == 0);\n        }\n        // Handle n == 0 case (since x is not 0 here)\n        if (n == 0) {\n            return false;\n        }\n        // Handle x == 1 case\n        if (x == 1) {\n            return (n != 0);\n        }\n        // Handle n == 1 case\n        if (n == 1) {\n            return (x == 1);\n        }\n        \n        int current = x;\n        while (current % n == 0) {\n            current = current / n;\n            if (current == 1) {\n                return true;\n            }\n        }\n        return current == 1;\n    }\n}\n"}
{"task_id": "Java/77", "generation": "public boolean iscube(int a) {\n    double cubeRoot = Math.cbrt(a);\n    long n = Math.round(cubeRoot);\n    return n * n * n == a;\n}\n"}
{"task_id": "Java/78", "generation": "import java.util.*;\n\nclass Solution {\n    public int hex_key(String num) {\n        Set<Integer> primes = new HashSet<>(Arrays.asList(2, 3, 5, 7, 11, 13));\n        int count = 0;\n        for (char c : num.toCharArray()) {\n            int value;\n            if (Character.isDigit(c)) {\n                value = c - '0';\n            } else {\n                value = 10 + (c - 'A');\n            }\n            if (primes.contains(value)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.hex_key(\"AB\")); // Expected output: 1\n        System.out.println(sol.hex_key(\"1077E\")); // Expected output: 2\n        System.out.println(sol.hex_key(\"ABED1A33\")); // Expected output: 4\n        System.out.println(sol.hex_key(\"123456789ABCDEF0\")); // Expected output: 6\n        System.out.println(sol.hex_key(\"2020\")); // Expected output: 2\n    }\n}\n"}
{"task_id": "Java/79", "generation": "class Solution {\n    public String decimal_to_binary(int decimal) {\n        String binary = Integer.toBinaryString(decimal);\n        return \"db\" + binary + \"db\";\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        \n        // Test case 1: decimal 15\n        int input1 = 15;\n        String expected1 = \"db1111db\";\n        String result1 = sol.decimal_to_binary(input1);\n        System.out.println(\"Test case 1: \" + (expected1.equals(result1) ? \"Passed\" : \"Failed\"));\n\n        // Test case 2: decimal 32\n        int input2 = 32;\n        String expected2 = \"db100000db\";\n        String result2 = sol.decimal_to_binary(input2);\n        System.out.println(\"Test case 2: \" + (expected2.equals(result2) ? \"Passed\" : \"Failed\"));\n\n        // Test case 3: decimal 0\n        int input3 = 0;\n        String expected3 = \"db0db\";\n        String result3 = sol.decimal_to_binary(input3);\n        System.out.println(\"Test case 3: \" + (expected3.equals(result3) ? \"Passed\" : \"Failed\"));\n\n        // Test case 4: negative decimal (-5)\n        int input4 = -5;\n        String expected4 = \"db\" + Integer.toBinaryString(-5) + \"db\";\n        String result4 = sol.decimal_to_binary(input4);\n        System.out.println(\"Test case 4: \" + (expected4.equals(result4) ? \"Passed\" : \"Failed\"));\n\n        // Test case 5: decimal 1\n        int input5 = 1;\n        String expected5 = \"db1db\";\n        String result5 = sol.decimal_to_binary(input5);\n        System.out.println(\"Test case 5: \" + (expected5.equals(result5) ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/80", "generation": "class Solution {\n    public boolean is_happy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 2; i++) {\n            char a = s.charAt(i);\n            char b = s.charAt(i + 1);\n            char c = s.charAt(i + 2);\n            if (a == b || b == c || a == c) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        test(sol.is_happy(\"a\"), false, 1);\n        test(sol.is_happy(\"aa\"), false, 2);\n        test(sol.is_happy(\"abcd\"), true, 3);\n        test(sol.is_happy(\"aabb\"), false, 4);\n        test(sol.is_happy(\"adb\"), true, 5);\n        test(sol.is_happy(\"xyy\"), false, 6);\n        test(sol.is_happy(\"abba\"), false, 7);\n        test(sol.is_happy(\"abc\"), true, 8);\n        test(sol.is_happy(\"abca\"), true, 9);\n        test(sol.is_happy(\"abcb\"), false, 10);\n    }\n\n    private static void test(boolean actual, boolean expected, int testCaseNumber) {\n        if (actual == expected) {\n            System.out.println(\"Test case \" + testCaseNumber + \": Passed\");\n        } else {\n            System.out.println(\"Test case \" + testCaseNumber + \": Failed. Expected \" + expected + \" but got \" + actual);\n        }\n    }\n}\n"}
{"task_id": "Java/81", "generation": "import java.util.*;\nimport java.util.List;\n\nclass Solution {\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double g : grades) {\n            if (g == 4.0) {\n                result.add(\"A+\");\n            } else if (g > 3.7) {\n                result.add(\"A\");\n            } else if (g > 3.3) {\n                result.add(\"A-\");\n            } else if (g > 3.0) {\n                result.add(\"B+\");\n            } else if (g > 2.7) {\n                result.add(\"B\");\n            } else if (g > 2.3) {\n                result.add(\"B-\");\n            } else if (g > 2.0) {\n                result.add(\"C+\");\n            } else if (g > 1.7) {\n                result.add(\"C\");\n            } else if (g > 1.3) {\n                result.add(\"C-\");\n            } else if (g > 1.0) {\n                result.add(\"D+\");\n            } else if (g > 0.7) {\n                result.add(\"D\");\n            } else if (g > 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/82", "generation": "class Solution {\n    public boolean prime_length(String string) {\n        int len = string.length();\n        return isPrime(len);\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.prime_length(\"Hello\"));     // true\n        System.out.println(s.prime_length(\"abcdcba\"));   // true\n        System.out.println(s.prime_length(\"kittens\"));    // true\n        System.out.println(s.prime_length(\"orange\"));    // false\n    }\n}\n"}
{"task_id": "Java/83", "generation": "class Solution {\n    public int starts_one_ends(int n) {\n        if (n == 0) return 0; // Handles invalid case, though n is positive as per problem statement\n        int start = (int) Math.pow(10, n - 1);\n        int end = (n == 1) ? 1 : 9 * (int) Math.pow(10, n - 2);\n        int overlap = (n == 1) ? 1 : (int) Math.pow(10, n - 2);\n        return start + end - overlap;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.starts_one_ends(1));  // Output: 1\n        System.out.println(sol.starts_one_ends(2));  // Output: 18\n        System.out.println(sol.starts_one_ends(3));  // Output: 180\n        System.out.println(sol.starts_one_ends(4));  // Output: 1800\n        System.out.println(sol.starts_one_ends(10)); // Output: 1800000000\n    }\n}\n"}
{"task_id": "Java/84", "generation": "class Solution {\n    public String solve(int N) {\n        int sum = 0;\n        int temp = N;\n        while (temp > 0) {\n            sum += temp % 10;\n            temp /= 10;\n        }\n        return Integer.toBinaryString(sum);\n    }\n}\n"}
{"task_id": "Java/85", "generation": "import java.util.*;\n\nclass Solution {\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 != 0) { // Check if the index is odd\n                int num = lst.get(i);\n                if (num % 2 == 0) { // Check if the number is even\n                    sum += num;\n                }\n            }\n        }\n        return sum;\n    }\n\n    // Test code\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1: Example provided\n        List<Integer> test1 = Arrays.asList(4, 2, 6, 7);\n        System.out.println(solution.add(test1)); // Expected output: 2\n        \n        // Test case 2: Sum of even numbers at odd indices\n        List<Integer> test2 = Arrays.asList(1, 2, 3, 4, 5, 6);\n        System.out.println(solution.add(test2)); // Expected output: 12\n        \n        // Test case 3: No even numbers at odd indices\n        List<Integer> test3 = Arrays.asList(0, 1, 2, 3);\n        System.out.println(solution.add(test3)); // Expected output: 0\n        \n        // Test case 4: Even number at index 1, others are odd\n        List<Integer> test4 = Arrays.asList(5, 10, 15, 21);\n        System.out.println(solution.add(test4)); // Expected output: 10\n    }\n}\n"}
{"task_id": "Java/86", "generation": "import java.util.*;\nimport java.util.regex.Pattern;\nimport java.util.regex.Matcher;\n\nclass Solution {\n    public String anti_shuffle(String s) {\n        List<String> tokens = new ArrayList<>();\n        Pattern pattern = Pattern.compile(\"\\\\s+|\\\\S+\");\n        Matcher matcher = pattern.matcher(s);\n        while (matcher.find()) {\n            tokens.add(matcher.group());\n        }\n        StringBuilder sb = new StringBuilder();\n        for (String token : tokens) {\n            if (token.length() > 0 && token.charAt(0) != ' ') {\n                char[] chars = token.toCharArray();\n                Arrays.sort(chars);\n                sb.append(new String(chars));\n            } else {\n                sb.append(token);\n            }\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        testCase(sol, \"Hi\", \"Hi\");\n        testCase(sol, \"hello\", \"ehllo\");\n        testCase(sol, \"Hello World!!!\", \"Hello !!!Wdlor\");\n        testCase(sol, \"   Hi  there  \", \"   Hi  eehrt  \");\n        testCase(sol, \"a b c\", \"a b c\");\n        testCase(sol, \"AbCdE\", \"ACEbd\");\n        testCase(sol, \"\", \"\");\n        testCase(sol, \"   \", \"   \");\n    }\n\n    private static void testCase(Solution sol, String input, String expected) {\n        String result = sol.anti_shuffle(input);\n        System.out.printf(\"Input: '%s'%nExpected: '%s'%nResult: '%s'%n%n\", input, expected, result);\n        if (!result.equals(expected)) {\n            System.out.println(\"Test failed!\");\n        }\n    }\n}\n"}
{"task_id": "Java/87", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    result.add(Arrays.asList(i, j));\n                }\n            }\n        }\n        Collections.sort(result, new Comparator<List<Integer>>() {\n            @Override\n            public int compare(List<Integer> a, List<Integer> b) {\n                int rowCompare = Integer.compare(a.get(0), b.get(0));\n                if (rowCompare != 0) {\n                    return rowCompare;\n                }\n                return Integer.compare(b.get(1), a.get(1));\n            }\n        });\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<List<Integer>> lst1 = Arrays.asList(\n            Arrays.asList(1,2,3,4,5,6),\n            Arrays.asList(1,2,3,4,1,6),\n            Arrays.asList(1,2,3,4,5,1)\n        );\n        int x1 = 1;\n        List<List<Integer>> expected1 = Arrays.asList(\n            Arrays.asList(0,0),\n            Arrays.asList(1,4),\n            Arrays.asList(1,0),\n            Arrays.asList(2,5),\n            Arrays.asList(2,0)\n        );\n        List<List<Integer>> result1 = solution.get_row(lst1, x1);\n        System.out.println(\"Test case 1: \" + (result1.equals(expected1) ? \"Passed\" : \"Failed\"));\n\n        // Test case 2\n        List<List<Integer>> lst2 = Collections.emptyList();\n        int x2 = 1;\n        List<List<Integer>> expected2 = Collections.emptyList();\n        List<List<Integer>> result2 = solution.get_row(lst2, x2);\n        System.out.println(\"Test case 2: \" + (result2.equals(expected2) ? \"Passed\" : \"Failed\"));\n\n        // Test case 3\n        List<List<Integer>> lst3 = Arrays.asList(\n            new ArrayList<>(),\n            Arrays.asList(1),\n            Arrays.asList(1, 2, 3)\n        );\n        int x3 = 3;\n        List<List<Integer>> expected3 = Arrays.asList(\n            Arrays.asList(2,2)\n        );\n        List<List<Integer>> result3 = solution.get_row(lst3, x3);\n        System.out.println(\"Test case 3: \" + (result3.equals(expected3) ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/88", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> array) {\n        List<Integer> copy = new ArrayList<>(array);\n        int size = copy.size();\n        if (size <= 1) {\n            return copy;\n        }\n        int first = copy.get(0);\n        int last = copy.get(size - 1);\n        int sum = first + last;\n        if (sum % 2 == 1) {\n            Collections.sort(copy);\n        } else {\n            Collections.sort(copy, Collections.reverseOrder());\n        }\n        return copy;\n    }\n}\n"}
{"task_id": "Java/89", "generation": "class Solution {\n    public String encrypt(String s) {\n        StringBuilder encrypted = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            int shifted = (c - 'a' + 4) % 26;\n            encrypted.append((char) (shifted + 'a'));\n        }\n        return encrypted.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.encrypt(\"hi\"));          // Output: lm\n        System.out.println(sol.encrypt(\"asdfghjkl\"));   // Output: ewhjklnop\n        System.out.println(sol.encrypt(\"gf\"));          // Output: kj\n        System.out.println(sol.encrypt(\"et\"));          // Output: ix\n    }\n}\n"}
{"task_id": "Java/90", "generation": "import java.util.*;\n\nclass Solution {\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        TreeSet<Integer> set = new TreeSet<>(lst);\n        if (set.size() < 2) {\n            return Optional.empty();\n        } else {\n            List<Integer> sortedList = new ArrayList<>(set);\n            return Optional.of(sortedList.get(1));\n        }\n    }\n}\n"}
{"task_id": "Java/91", "generation": "class Solution {\n    public int is_bored(String S) {\n        int count = 0;\n        String[] sentences = S.split(\"[.!?]+\");\n        for (String sentence : sentences) {\n            String trimmed = sentence.trim();\n            if (trimmed.isEmpty()) {\n                continue;\n            }\n            String[] words = trimmed.split(\"\\\\s+\");\n            if (words.length > 0 && words[0].equals(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/92", "generation": "class Solution {\n    public boolean any_int(Object x, Object y, Object z) {\n        // Check if all inputs are Integers\n        if (!(x instanceof Integer) || !(y instanceof Integer) || !(z instanceof Integer)) {\n            return false;\n        }\n        \n        // Cast to primitive int types\n        int a = (Integer) x;\n        int b = (Integer) y;\n        int c = (Integer) z;\n        \n        // Check if any one is the sum of the other two\n        return a == b + c || b == a + c || c == a + b;\n    }\n}\n"}
{"task_id": "Java/93", "generation": "class Solution {\n    public String encode(String message) {\n        if (message == null || message.isEmpty()) {\n            return message;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            // Swap the case of the character\n            char swapped = Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c);\n            // Check if the swapped character is a vowel\n            if (isVowel(swapped)) {\n                sb.append((char) (swapped + 2));\n            } else {\n                sb.append(swapped);\n            }\n        }\n        return sb.toString();\n    }\n\n    private boolean isVowel(char c) {\n        char lowerC = Character.toLowerCase(c);\n        return lowerC == 'a' || lowerC == 'e' || lowerC == 'i' || lowerC == 'o' || lowerC == 'u';\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test case 1\n        String input1 = \"test\";\n        String expected1 = \"TGST\";\n        String result1 = solution.encode(input1);\n        System.out.println(\"Test 1: \" + (expected1.equals(result1) ? \"Passed\" : \"Failed\"));\n        // Test case 2\n        String input2 = \"This is a message\";\n        String expected2 = \"tHKS KS C MGSSCGG\";\n        String result2 = solution.encode(input2);\n        System.out.println(\"Test 2: \" + (expected2.equals(result2) ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/94", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int skjkasdkd(List<Integer> lst) {\n        int maxPrime = -1;\n        for (int num : lst) {\n            if (isPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n        return sumDigits(maxPrime);\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private int sumDigits(int n) {\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/95", "generation": "import java.util.Map;\n\nclass Solution {\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        // Check if the map is empty\n        if (dict.isEmpty()) {\n            return false;\n        }\n        \n        // Check all keys are instances of String\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n        }\n        \n        // Get the first key to determine the required case\n        String firstKey = (String) dict.keySet().iterator().next();\n        boolean isFirstLower = firstKey.equals(firstKey.toLowerCase());\n        boolean isFirstUpper = firstKey.equals(firstKey.toUpperCase());\n        \n        // If the first key is neither all lower nor all upper, return false\n        if (!isFirstLower && !isFirstUpper) {\n            return false;\n        }\n        \n        boolean requireLower = isFirstLower;\n        \n        // Check all keys match the required case\n        for (Object keyObj : dict.keySet()) {\n            String key = (String) keyObj;\n            if (requireLower) {\n                if (!key.equals(key.toLowerCase())) {\n                    return false;\n                }\n            } else {\n                if (!key.equals(key.toUpperCase())) {\n                    return false;\n                }\n            }\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/96", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<>();\n        if (n <= 2) {\n            return primes;\n        }\n        boolean[] isPrime = new boolean[n];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = false;\n        isPrime[1] = false;\n        for (int i = 2; i * i < n; i++) {\n            if (isPrime[i]) {\n                for (int j = i * i; j < n; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n        for (int i = 2; i < n; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.count_up_to(5));   // [2, 3]\n        System.out.println(s.count_up_to(11));  // [2, 3, 5, 7]\n        System.out.println(s.count_up_to(0));   // []\n        System.out.println(s.count_up_to(20));  // [2, 3, 5, 7, 11, 13, 17, 19]\n        System.out.println(s.count_up_to(1));   // []\n        System.out.println(s.count_up_to(18));  // [2, 3, 5, 7, 11, 13, 17]\n    }\n}\n"}
{"task_id": "Java/97", "generation": "class Solution {\n    public int multiply(int a, int b) {\n        int unitA = Math.abs(a % 10);\n        int unitB = Math.abs(b % 10);\n        return unitA * unitB;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.multiply(148, 412));    // Output: 16\n        System.out.println(sol.multiply(19, 28));      // Output: 72\n        System.out.println(sol.multiply(2020, 1851));  // Output: 0\n        System.out.println(sol.multiply(14, -15));     // Output: 20\n    }\n}\n"}
{"task_id": "Java/98", "generation": "class Solution {\n    public int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0) { // Check if the index is even\n                char c = s.charAt(i);\n                if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        test(sol.count_upper(\"aBCdEf\"), 1);\n        test(sol.count_upper(\"abcdefg\"), 0);\n        test(sol.count_upper(\"dBBE\"), 0);\n        test(sol.count_upper(\"AEIOU\"), 3);\n        test(sol.count_upper(\"AeIoU\"), 3);\n        test(sol.count_upper(\"\"), 0);\n        test(sol.count_upper(\"E\"), 1);\n        test(sol.count_upper(\"e\"), 0);\n        test(sol.count_upper(\"Aa\"), 1);\n        System.out.println(\"All tests passed!\");\n    }\n\n    private static void test(int actual, int expected) {\n        if (actual != expected) {\n            throw new RuntimeException(\"Test failed: Expected \" + expected + \" but got \" + actual);\n        }\n    }\n}\n"}
{"task_id": "Java/99", "generation": "class Solution {\n    public int closest_integer(String value) {\n        double number = Double.parseDouble(value);\n        double fractional = Math.abs(number % 1);\n        \n        if (fractional == 0.5) {\n            if (number > 0) {\n                return (int) Math.ceil(number);\n            } else {\n                return (int) Math.floor(number);\n            }\n        } else {\n            return (int) Math.round(number);\n        }\n    }\n\n    private static void test(int actual, int expected) {\n        if (actual == expected) {\n            System.out.println(\"Test passed. Expected \" + expected + \", got \" + actual);\n        } else {\n            System.out.println(\"Test failed. Expected \" + expected + \", but got \" + actual);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n\n        test(sol.closest_integer(\"10\"), 10);\n        test(sol.closest_integer(\"15.3\"), 15);\n        test(sol.closest_integer(\"14.5\"), 15);\n        test(sol.closest_integer(\"-14.5\"), -15);\n        test(sol.closest_integer(\"0.5\"), 1);\n        test(sol.closest_integer(\"-0.5\"), -1);\n        test(sol.closest_integer(\"3.4999\"), 3);\n        test(sol.closest_integer(\"3.5\"), 4);\n        test(sol.closest_integer(\"-3.5\"), -4);\n        test(sol.closest_integer(\"2.5\"), 3);\n        test(sol.closest_integer(\"-2.5\"), -3);\n    }\n}\n"}
{"task_id": "Java/100", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n <= 0) {\n            return result; // return empty list for non-positive n as per problem statement\n        }\n        int current = n;\n        result.add(current);\n        for (int i = 1; i < n; i++) {\n            if (current % 2 == 0) {\n                current += 2; // next even number\n            } else {\n                current += 1; // next odd number (since adding 1 to odd gives even, then add another 1)\n                current += 1;\n            }\n            result.add(current);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        testCase(sol, 3, Arrays.asList(3, 5, 7));\n        testCase(sol, 2, Arrays.asList(2, 4));\n        testCase(sol, 1, Collections.singletonList(1));\n        testCase(sol, 4, Arrays.asList(4, 6, 8, 10));\n        testCase(sol, 5, Arrays.asList(5, 7, 9, 11, 13));\n    }\n\n    private static void testCase(Solution sol, int n, List<Integer> expected) {\n        List<Integer> actual = sol.make_a_pile(n);\n        boolean isCorrect = actual.equals(expected);\n        System.out.println(\"Test for n=\" + n + \": \" + (isCorrect ? \"PASSED\" : \"FAILED\"));\n        if (!isCorrect) {\n            System.out.println(\"Expected: \" + expected);\n            System.out.println(\"Actual:   \" + actual);\n        }\n    }\n}\n"}
{"task_id": "Java/101", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> words_string(String s) {\n        List<String> result = new ArrayList<>();\n        if (s == null || s.isEmpty()) {\n            return result;\n        }\n        String[] parts = s.split(\"[, ]+\");\n        for (String part : parts) {\n            if (!part.isEmpty()) {\n                result.add(part);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/102", "generation": "class Solution {\n    public int choose_num(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        int max = y;\n        if (max % 2 == 0) {\n            return max;\n        } else {\n            int nextEven = max - 1;\n            if (nextEven >= x) {\n                return nextEven;\n            } else {\n                return -1;\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        int result;\n\n        // Test 1: Example 1\n        result = sol.choose_num(12, 15);\n        System.out.println(\"Test 1: \" + (result == 14 ? \"Passed\" : \"Failed\"));\n\n        // Test 2: Example 2\n        result = sol.choose_num(13, 12);\n        System.out.println(\"Test 2: \" + (result == -1 ? \"Passed\" : \"Failed\"));\n\n        // Test 3: x and y same, even\n        result = sol.choose_num(4, 4);\n        System.out.println(\"Test 3: \" + (result == 4 ? \"Passed\" : \"Failed\"));\n\n        // Test 4: x and y same, odd\n        result = sol.choose_num(5, 5);\n        System.out.println(\"Test 4: \" + (result == -1 ? \"Passed\" : \"Failed\"));\n\n        // Test 5: range with even in middle\n        result = sol.choose_num(3, 5);\n        System.out.println(\"Test 5: \" + (result == 4 ? \"Passed\" : \"Failed\"));\n\n        // Test 6: single element, odd\n        result = sol.choose_num(1, 1);\n        System.out.println(\"Test 6: \" + (result == -1 ? \"Passed\" : \"Failed\"));\n\n        // Test 7: single element, even\n        result = sol.choose_num(2, 2);\n        System.out.println(\"Test 7: \" + (result == 2 ? \"Passed\" : \"Failed\"));\n\n        // Test 8: range starts with even\n        result = sol.choose_num(2, 3);\n        System.out.println(\"Test 8: \" + (result == 2 ? \"Passed\" : \"Failed\"));\n\n        // Test 9: range ends with even\n        result = sol.choose_num(7, 8);\n        System.out.println(\"Test 9: \" + (result == 8 ? \"Passed\" : \"Failed\"));\n\n        // Test 10: even start, odd end\n        result = sol.choose_num(6, 7);\n        System.out.println(\"Test 10: \" + (result == 6 ? \"Passed\" : \"Failed\"));\n\n        // Test 11: larger range\n        result = sol.choose_num(10, 20);\n        System.out.println(\"Test 11: \" + (result == 20 ? \"Passed\" : \"Failed\"));\n\n        // Test 12: invalid range\n        result = sol.choose_num(15, 10);\n        System.out.println(\"Test 12: \" + (result == -1 ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/103", "generation": "class Solution {\n    public Object rounded_avg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        long sum = (long) (m + n) * (m - n + 1) / 2;\n        long average = sum / (m - n + 1);\n        // Since the numbers are consecutive, the average is either an integer or exactly halfway between two integers.\n        // However, due to integer division, sum/(count) already gives the floored average. But since sum is (n + m) * count / 2,\n        // the average is (n + m)/2.0. So if (n + m) is even, average is integer; else, it's .5.\n        // So rounding to nearest is (n + m + 1) / 2.\n        long rounded = (n + m + 1) / 2;\n        return Long.toBinaryString(rounded);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1: n=1, m=5, expected \"11\"\n        Object result1 = solution.rounded_avg(1, 5);\n        System.out.println(result1.equals(\"11\") ? \"Test1 Passed\" : \"Test1 Failed\");\n        \n        // Test case 2: n=7, m=5, expected -1\n        Object result2 = solution.rounded_avg(7, 5);\n        System.out.println(result2.equals(-1) ? \"Test2 Passed\" : \"Test2 Failed\");\n        \n        // Test case 3: n=10, m=20, expected \"1111\"\n        Object result3 = solution.rounded_avg(10, 20);\n        System.out.println(result3.equals(\"1111\") ? \"Test3 Passed\" : \"Test3 Failed\");\n        \n        // Test case 4: n=20, m=33, expected \"11011\"\n        Object result4 = solution.rounded_avg(20, 33);\n        System.out.println(result4.equals(\"11011\") ? \"Test4 Passed\" : \"Test4 Failed\");\n    }\n}\n"}
{"task_id": "Java/104", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> unique_digits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        for (int num : x) {\n            if (hasNoEvenDigits(num)) {\n                result.add(num);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n\n    private boolean hasNoEvenDigits(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return false;\n            }\n            num /= 10;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n\n        // Test case 1\n        List<Integer> input1 = Arrays.asList(15, 33, 1422, 1);\n        List<Integer> expected1 = Arrays.asList(1, 15, 33);\n        List<Integer> result1 = s.unique_digits(input1);\n        System.out.println(\"Test 1: \" + (result1.equals(expected1) ? \"Passed\" : \"Failed\"));\n\n        // Test case 2\n        List<Integer> input2 = Arrays.asList(152, 323, 1422, 10);\n        List<Integer> expected2 = Arrays.asList();\n        List<Integer> result2 = s.unique_digits(input2);\n        System.out.println(\"Test 2: \" + (result2.equals(expected2) ? \"Passed\" : \"Failed\"));\n\n        // Test case 3: All even digits\n        List<Integer> input3 = Arrays.asList(2, 44, 666);\n        List<Integer> expected3 = Arrays.asList();\n        List<Integer> result3 = s.unique_digits(input3);\n        System.out.println(\"Test 3: \" + (result3.equals(expected3) ? \"Passed\" : \"Failed\"));\n\n        // Test case 4: Single odd digit\n        List<Integer> input4 = Arrays.asList(3);\n        List<Integer> expected4 = Arrays.asList(3);\n        List<Integer> result4 = s.unique_digits(input4);\n        System.out.println(\"Test 4: \" + (result4.equals(expected4) ? \"Passed\" : \"Failed\"));\n\n        // Test case 5: Check sorting\n        List<Integer> input5 = Arrays.asList(33, 15, 1);\n        List<Integer> expected5 = Arrays.asList(1, 15, 33);\n        List<Integer> result5 = s.unique_digits(input5);\n        System.out.println(\"Test 5: \" + (result5.equals(expected5) ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/105", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<String> by_length(List<Integer> arr) {\n        // Filter the valid numbers (1-9 inclusive)\n        List<Integer> filtered = arr.stream()\n            .filter(num -> num >= 1 && num <= 9)\n            .collect(Collectors.toList());\n        \n        // Sort the filtered list in natural order (ascending)\n        Collections.sort(filtered);\n        \n        // Reverse the sorted list to get descending order\n        Collections.reverse(filtered);\n        \n        // Map each number to its corresponding name\n        String[] names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        List<String> result = new ArrayList<>();\n        for (int num : filtered) {\n            result.add(names[num - 1]);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        \n        // Test Case 1: Example from the problem statement\n        List<Integer> input1 = Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3);\n        List<String> expected1 = Arrays.asList(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\");\n        List<String> result1 = sol.by_length(input1);\n        System.out.println(\"Test 1: \" + (expected1.equals(result1) ? \"Passed\" : \"Failed\"));\n        \n        // Test Case 2: Empty array\n        List<Integer> input2 = Collections.emptyList();\n        List<String> expected2 = Collections.emptyList();\n        List<String> result2 = sol.by_length(input2);\n        System.out.println(\"Test 2: \" + (expected2.equals(result2) ? \"Passed\" : \"Failed\"));\n        \n        // Test Case 3: Array with some invalid numbers\n        List<Integer> input3 = Arrays.asList(1, -1, 55);\n        List<String> expected3 = Arrays.asList(\"One\");\n        List<String> result3 = sol.by_length(input3);\n        System.out.println(\"Test 3: \" + (expected3.equals(result3) ? \"Passed\" : \"Failed\"));\n        \n        // Test Case 4: Numbers including 9 and 0\n        List<Integer> input4 = Arrays.asList(9, 0, 10, 3);\n        List<String> expected4 = Arrays.asList(\"Three\", \"Nine\");\n        List<String> result4 = sol.by_length(input4);\n        System.out.println(\"Test 4: \" + (expected4.equals(result4) ? \"Passed\" : \"Failed\"));\n        \n        // Test Case 5: All numbers invalid\n        List<Integer> input5 = Arrays.asList(-5, 0, 10);\n        List<String> expected5 = Collections.emptyList();\n        List<String> result5 = sol.by_length(input5);\n        System.out.println(\"Test 5: \" + (expected5.equals(result5) ? \"Passed\" : \"Failed\"));\n        \n        // Test Case 6: Mixed valid and invalid numbers, check sorting and reversing\n        List<Integer> input6 = Arrays.asList(5, 2, 7, 12, 3, 0);\n        List<String> expected6 = Arrays.asList(\"Seven\", \"Five\", \"Three\", \"Two\");\n        List<String> result6 = sol.by_length(input6);\n        System.out.println(\"Test 6: \" + (expected6.equals(result6) ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/106", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int factorial = 1;\n                for (int j = 1; j <= i; j++) {\n                    factorial *= j;\n                }\n                result.add(factorial);\n            } else {\n                int sum = i * (i + 1) / 2;\n                result.add(sum);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(\"Test case 1: n=5\");\n        List<Integer> result1 = sol.f(5);\n        System.out.println(\"Expected: [1, 2, 6, 24, 15]\");\n        System.out.println(\"Actual: \" + result1);\n\n        System.out.println(\"Test case 2: n=1\");\n        List<Integer> result2 = sol.f(1);\n        System.out.println(\"Expected: [1]\");\n        System.out.println(\"Actual: \" + result2);\n\n        System.out.println(\"Test case 3: n=2\");\n        List<Integer> result3 = sol.f(2);\n        System.out.println(\"Expected: [1, 2]\");\n        System.out.println(\"Actual: \" + result3);\n\n        System.out.println(\"Test case 4: n=4\");\n        List<Integer> result4 = sol.f(4);\n        System.out.println(\"Expected: [1, 2, 6, 24]\");\n        System.out.println(\"Actual: \" + result4);\n    }\n}\n"}
{"task_id": "Java/107", "generation": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Solution {\n    public List<Integer> even_odd_palindrome(int n) {\n        int evenCount = 0;\n        int oddCount = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n\n    private boolean isPalindrome(int num) {\n        int reversed = 0;\n        int original = num;\n        while (num > 0) {\n            reversed = reversed * 10 + num % 10;\n            num /= 10;\n        }\n        return original == reversed;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n\n        // Test case 1\n        int input1 = 3;\n        List<Integer> output1 = sol.even_odd_palindrome(input1);\n        System.out.println(\"Test case 1: \" + output1); // Expected [1, 2]\n\n        // Test case 2\n        int input2 = 12;\n        List<Integer> output2 = sol.even_odd_palindrome(input2);\n        System.out.println(\"Test case 2: \" + output2); // Expected [4, 6]\n\n        // Test case 3: n = 1\n        int input3 = 1;\n        List<Integer> output3 = sol.even_odd_palindrome(input3);\n        System.out.println(\"Test case 3: \" + output3); // Expected [0, 1]\n\n        // Test case 4: n = 2\n        int input4 = 2;\n        List<Integer> output4 = sol.even_odd_palindrome(input4);\n        System.out.println(\"Test case 4: \" + output4); // Expected [1, 1]\n\n        // Test case 5: n = 11\n        int input5 = 11;\n        List<Integer> output5 = sol.even_odd_palindrome(input5);\n        System.out.println(\"Test case 5: \" + output5); // Expected [4, 6]\n    }\n}\n"}
{"task_id": "Java/108", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int count_nums(List<Integer> arr) {\n        int count = 0;\n        for (int num : arr) {\n            int sum = sumDigits(num);\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private int sumDigits(int num) {\n        if (num == 0) {\n            return 0;\n        }\n        String s = Integer.toString(num);\n        boolean isNegative = s.charAt(0) == '-';\n        int startIndex = isNegative ? 1 : 0;\n        int sum = 0;\n        for (int i = startIndex; i < s.length(); i++) {\n            char c = s.charAt(i);\n            int digit = Character.getNumericValue(c);\n            if (i == startIndex && isNegative) {\n                digit = -digit;\n            }\n            sum += digit;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        // Test case 1: empty list\n        System.out.println(sol.count_nums(new ArrayList<>()) == 0); // true\n        // Test case 2: [-1, 11, -11]\n        List<Integer> test2 = Arrays.asList(-1, 11, -11);\n        System.out.println(sol.count_nums(test2) == 1); // true\n        // Test case 3: [1, 1, 2]\n        List<Integer> test3 = Arrays.asList(1, 1, 2);\n        System.out.println(sol.count_nums(test3) == 3); // true\n    }\n}\n"}
{"task_id": "Java/109", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean move_one_ball(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        List<Integer> sorted = new ArrayList<>(arr);\n        Collections.sort(sorted);\n\n        if (arr.equals(sorted)) {\n            return true;\n        }\n\n        // Check if arr is a rotation of the sorted array\n        List<Integer> concatenated = new ArrayList<>(sorted);\n        concatenated.addAll(sorted);\n\n        int n = sorted.size();\n        for (int i = 1; i < n; i++) {\n            List<Integer> sublist = concatenated.subList(i, i + n);\n            if (sublist.equals(arr)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    // Test cases\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.move_one_ball(Arrays.asList(3, 4, 5, 1, 2)));  // true\n        System.out.println(solution.move_one_ball(Arrays.asList(3, 5, 4, 1, 2)));  // false\n        System.out.println(solution.move_one_ball(Collections.emptyList()));       // true\n        System.out.println(solution.move_one_ball(Arrays.asList(1)));             // true\n        System.out.println(solution.move_one_ball(Arrays.asList(2, 1)));          // true\n        System.out.println(solution.move_one_ball(Arrays.asList(1, 2, 3)));      // true\n        System.out.println(solution.move_one_ball(Arrays.asList(4, 5, 1, 2, 3))); // true\n        System.out.println(solution.move_one_ball(Arrays.asList(5, 4, 3, 2, 1))); // false\n    }\n}\n"}
{"task_id": "Java/110", "generation": "import java.util.*;\n\nclass Solution {\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int even1 = 0;\n        for (int num : lst1) {\n            if (num % 2 == 0) {\n                even1++;\n            }\n        }\n        int even2 = 0;\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                even2++;\n            }\n        }\n        return (even1 + even2) >= lst1.size() ? \"YES\" : \"NO\";\n    }\n}\n"}
{"task_id": "Java/111", "generation": "import java.util.*;\nimport java.util.HashMap;\nimport java.util.Map;\n\nclass Solution {\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> freq = new HashMap<>();\n        String[] parts = test.split(\"\\\\s+\");\n        \n        if (parts.length == 0) {\n            return new HashMap<>();\n        }\n        \n        for (String part : parts) {\n            if (part.isEmpty()) {\n                continue;\n            }\n            freq.put(part, freq.getOrDefault(part, 0) + 1);\n        }\n        \n        int max = 0;\n        for (int count : freq.values()) {\n            if (count > max) {\n                max = count;\n            }\n        }\n        \n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : freq.entrySet()) {\n            if (entry.getValue() == max) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/112", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Object> reverse_delete(String s, String c) {\n        Set<Character> toDelete = new HashSet<>();\n        for (int i = 0; i < c.length(); i++) {\n            toDelete.add(c.charAt(i));\n        }\n\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            if (!toDelete.contains(ch)) {\n                sb.append(ch);\n            }\n        }\n        String filtered = sb.toString();\n\n        String reversed = new StringBuilder(filtered).reverse().toString();\n        boolean isPalindrome = filtered.equals(reversed);\n\n        return Arrays.asList(filtered, isPalindrome);\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        // Test cases\n        System.out.println(sol.reverse_delete(\"abcde\", \"ae\"));    // [\"bcd\", false]\n        System.out.println(sol.reverse_delete(\"abcdef\", \"b\"));    // [\"acdef\", false]\n        System.out.println(sol.reverse_delete(\"abcdedcba\", \"ab\")); // [\"cdedc\", true]\n        System.out.println(sol.reverse_delete(\"aaa\", \"a\"));       // [\"\", true]\n        System.out.println(sol.reverse_delete(\"aab\", \"a\"));       // [\"b\", true]\n    }\n}\n"}
{"task_id": "Java/113", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        String template = \"the number of odd elements i in the string i of the input.\";\n        for (String s : lst) {\n            int count = 0;\n            for (char c : s.toCharArray()) {\n                int digit = c - '0';\n                if (digit % 2 != 0) {\n                    count++;\n                }\n            }\n            String replaced = template.replace(\"i\", String.valueOf(count)).replace(\"i\", String.valueOf(count)).replace(\"i\", String.valueOf(count)).replace(\"i\", String.valueOf(count));\n            result.add(replaced);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<String> input1 = Arrays.asList(\"1234567\");\n        List<String> expected1 = Arrays.asList(\"the number of odd elements 4n the str4ng 4 of the 4nput.\");\n        List<String> result1 = solution.odd_count(input1);\n        System.out.println(\"Test case 1: \" + (expected1.equals(result1) ? \"Passed\" : \"Failed\"));\n\n        // Test case 2\n        List<String> input2 = Arrays.asList(\"3\", \"11111111\");\n        List<String> expected2 = Arrays.asList(\n            \"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n            \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\n        );\n        List<String> result2 = solution.odd_count(input2);\n        System.out.println(\"Test case 2: \" + (expected2.equals(result2) ? \"Passed\" : \"Failed\"));\n\n        // Test case 3: empty string\n        List<String> input3 = Arrays.asList(\"\");\n        List<String> expected3 = Arrays.asList(\"the number of odd elements 0n the str0ng 0 of the 0nput.\");\n        List<String> result3 = solution.odd_count(input3);\n        System.out.println(\"Test case 3: \" + (expected3.equals(result3) ? \"Passed\" : \"Failed\"));\n\n        // Test case 4: all even digits\n        List<String> input4 = Arrays.asList(\"24680\");\n        List<String> expected4 = Arrays.asList(\"the number of odd elements 0n the str0ng 0 of the 0nput.\");\n        List<String> result4 = solution.odd_count(input4);\n        System.out.println(\"Test case 4: \" + (expected4.equals(result4) ? \"Passed\" : \"Failed\"));\n\n        // Test case 5: mixed digits\n        List<String> input5 = Arrays.asList(\"13579\", \"2468\");\n        List<String> expected5 = Arrays.asList(\n            \"the number of odd elements 5n the str5ng 5 of the 5nput.\",\n            \"the number of odd elements 0n the str0ng 0 of the 0nput.\"\n        );\n        List<String> result5 = solution.odd_count(input5);\n        System.out.println(\"Test case 5: \" + (expected5.equals(result5) ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/114", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public int minSubArraySum(List<Integer> nums) {\n        if (nums == null || nums.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list cannot be null or empty.\");\n        }\n        \n        int currentMin = nums.get(0);\n        int globalMin = nums.get(0);\n        \n        for (int i = 1; i < nums.size(); i++) {\n            currentMin = Math.min(nums.get(i), currentMin + nums.get(i));\n            globalMin = Math.min(globalMin, currentMin);\n        }\n        \n        return globalMin;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1\n        List<Integer> test1 = Arrays.asList(2, 3, 4, 1, 2, 4);\n        int expected1 = 1;\n        int result1 = solution.minSubArraySum(test1);\n        System.out.println(\"Test case 1: \" + (result1 == expected1 ? \"Passed\" : \"Failed. Expected \" + expected1 + \", got \" + result1));\n        \n        // Test case 2\n        List<Integer> test2 = Arrays.asList(-1, -2, -3);\n        int expected2 = -6;\n        int result2 = solution.minSubArraySum(test2);\n        System.out.println(\"Test case 2: \" + (result2 == expected2 ? \"Passed\" : \"Failed. Expected \" + expected2 + \", got \" + result2));\n        \n        // Test case 3: All positive numbers, minimal is the smallest element\n        List<Integer> test3 = Arrays.asList(5, 4, 3, 2, 1);\n        int expected3 = 1;\n        int result3 = solution.minSubArraySum(test3);\n        System.out.println(\"Test case 3: \" + (result3 == expected3 ? \"Passed\" : \"Failed. Expected \" + expected3 + \", got \" + result3));\n        \n        // Test case 4: Mix of positive and negative numbers\n        List<Integer> test4 = Arrays.asList(-2, 1, -3, 4, -1, 2, 1, -5, 4);\n        int expected4 = -5;\n        int result4 = solution.minSubArraySum(test4);\n        System.out.println(\"Test case 4: \" + (result4 == expected4 ? \"Passed\" : \"Failed. Expected \" + expected4 + \", got \" + result4));\n        \n        // Test case 5: Single element\n        List<Integer> test5 = Collections.singletonList(-5);\n        int expected5 = -5;\n        int result5 = solution.minSubArraySum(test5);\n        System.out.println(\"Test case 5: \" + (result5 == expected5 ? \"Passed\" : \"Failed. Expected \" + expected5 + \", got \" + result5));\n        \n        // Test case 6: All negative except one\n        List<Integer> test6 = Arrays.asList(-1, -2, -3, 2);\n        int expected6 = -6;\n        int result6 = solution.minSubArraySum(test6);\n        System.out.println(\"Test case 6: \" + (result6 == expected6 ? \"Passed\" : \"Failed. Expected \" + expected6 + \", got \" + result6));\n    }\n}\n"}
{"task_id": "Java/115", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        int total = 0;\n        for (List<Integer> row : grid) {\n            int sum = 0;\n            for (int num : row) {\n                sum += num;\n            }\n            if (sum == 0) continue;\n            total += (sum + capacity - 1) / capacity;\n        }\n        return total;\n    }\n}\n"}
{"task_id": "Java/116", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> arr) {\n        arr.sort((a, b) -> {\n            int countA = Integer.bitCount(Math.abs(a));\n            int countB = Integer.bitCount(Math.abs(b));\n            if (countA != countB) {\n                return Integer.compare(countA, countB);\n            } else {\n                return Integer.compare(a, b);\n            }\n        });\n        return arr;\n    }\n}\n"}
{"task_id": "Java/117", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> select_words(String s, int n) {\n        List<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        String[] words = s.split(\" \");\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        for (String word : words) {\n            int consonantCount = 0;\n            for (char c : word.toCharArray()) {\n                if (!vowels.contains(c)) {\n                    consonantCount++;\n                }\n            }\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        \n        // Test case 1\n        System.out.println(sol.select_words(\"Mary had a little lamb\", 4));  // [\"little\"]\n        \n        // Test case 2\n        System.out.println(sol.select_words(\"Mary had a little lamb\", 3));  // [\"Mary\", \"lamb\"]\n        \n        // Test case 3\n        System.out.println(sol.select_words(\"simple white space\", 2));      // []\n        \n        // Test case 4\n        System.out.println(sol.select_words(\"Hello world\", 4));            // [\"world\"]\n        \n        // Test case 5\n        System.out.println(sol.select_words(\"Uncle sam\", 3));               // [\"Uncle\"]\n        \n        // Additional test case for uppercase consonants\n        System.out.println(sol.select_words(\"HELLO WORLD\", 4));            // [\"WORLD\"]\n        \n        // Test case with Y as consonant\n        System.out.println(sol.select_words(\"Python\", 5));                 // [\"Python\"]\n    }\n}\n"}
{"task_id": "Java/118", "generation": "class Solution {\n    public String get_closest_vowel(String word) {\n        int n = word.length();\n        if (n < 3) {\n            return \"\";\n        }\n        for (int i = n - 2; i >= 1; i--) {\n            char c = word.charAt(i);\n            if (isVowel(c)) {\n                char prev = word.charAt(i - 1);\n                char next = word.charAt(i + 1);\n                if (!isVowel(prev) && !isVowel(next)) {\n                    return String.valueOf(c);\n                }\n            }\n        }\n        return \"\";\n    }\n\n    private boolean isVowel(char c) {\n        return \"aeiouAEIOU\".indexOf(c) != -1;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.get_closest_vowel(\"yogurt\"));    // \"u\"\n        System.out.println(sol.get_closest_vowel(\"FULL\"));      // \"U\"\n        System.out.println(sol.get_closest_vowel(\"quick\"));     // \"\"\n        System.out.println(sol.get_closest_vowel(\"ab\"));        // \"\"\n        System.out.println(sol.get_closest_vowel(\"cac\"));       // \"a\"\n        System.out.println(sol.get_closest_vowel(\"xEyz\"));      // \"E\"\n    }\n}\n"}
{"task_id": "Java/119", "generation": "import java.util.*;\n\nclass Solution {\n    public String match_parens(List<String> lst) {\n        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n        \n        int open1 = countOpen(s1);\n        int close1 = s1.length() - open1;\n        int open2 = countOpen(s2);\n        int close2 = s2.length() - open2;\n        \n        int totalOpen = open1 + open2;\n        int totalClose = close1 + close2;\n        \n        if (totalOpen != totalClose) {\n            return \"No\";\n        }\n        \n        boolean possible = isBalanced(s1, s2) || isBalanced(s2, s1);\n        return possible ? \"Yes\" : \"No\";\n    }\n    \n    private int countOpen(String s) {\n        int count = 0;\n        for (char c : s.toCharArray()) {\n            if (c == '(') {\n                count++;\n            }\n        }\n        return count;\n    }\n    \n    private boolean isBalanced(String first, String second) {\n        int balance = 0;\n        for (char c : first.toCharArray()) {\n            if (c == '(') {\n                balance++;\n            } else {\n                balance--;\n            }\n            if (balance < 0) {\n                return false;\n            }\n        }\n        for (char c : second.toCharArray()) {\n            if (c == '(') {\n                balance++;\n            } else {\n                balance--;\n            }\n            if (balance < 0) {\n                return false;\n            }\n        }\n        return balance == 0;\n    }\n}\n"}
{"task_id": "Java/120", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return new ArrayList<>();\n        }\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n        maxHeap.addAll(arr);\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            result.add(maxHeap.poll());\n        }\n        Collections.sort(result);\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1\n        List<Integer> arr1 = Arrays.asList(-3, -4, 5);\n        int k1 = 3;\n        List<Integer> expected1 = Arrays.asList(-4, -3, 5);\n        testCase(solution, arr1, k1, expected1, 1);\n        \n        // Test case 2\n        List<Integer> arr2 = Arrays.asList(4, -4, 4);\n        int k2 = 2;\n        List<Integer> expected2 = Arrays.asList(4, 4);\n        testCase(solution, arr2, k2, expected2, 2);\n        \n        // Test case 3\n        List<Integer> arr3 = Arrays.asList(-3, 2, 1, 2, -1, -2, 1);\n        int k3 = 1;\n        List<Integer> expected3 = Arrays.asList(2);\n        testCase(solution, arr3, k3, expected3, 3);\n        \n        // Test case 4: k=0\n        List<Integer> arr4 = Arrays.asList(1);\n        int k4 = 0;\n        List<Integer> expected4 = new ArrayList<>();\n        testCase(solution, arr4, k4, expected4, 4);\n        \n        // Test case 5: all elements same\n        List<Integer> arr5 = Arrays.asList(4, 4, 4);\n        int k5 = 2;\n        List<Integer> expected5 = Arrays.asList(4, 4);\n        testCase(solution, arr5, k5, expected5, 5);\n        \n        // Test case 6: single element, k=1\n        List<Integer> arr6 = Arrays.asList(5);\n        int k6 = 1;\n        List<Integer> expected6 = Arrays.asList(5);\n        testCase(solution, arr6, k6, expected6, 6);\n        \n        // Test case 7: mix of numbers\n        List<Integer> arr7 = Arrays.asList(-1, 3, -2, 4, 0);\n        int k7 = 2;\n        List<Integer> expected7 = Arrays.asList(3, 4);\n        testCase(solution, arr7, k7, expected7, 7);\n    }\n    \n    private static void testCase(Solution solution, List<Integer> arr, int k, List<Integer> expected, int testNumber) {\n        List<Integer> result = solution.maximum(arr, k);\n        if (result.equals(expected)) {\n            System.out.println(\"Test \" + testNumber + \" passed.\");\n        } else {\n            System.out.println(\"Test \" + testNumber + \" failed. Expected \" + expected + \" but got \" + result);\n        }\n    }\n}\n"}
{"task_id": "Java/121", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (i % 2 == 0) { // Check if the index is even (0-based)\n                if (num % 2 != 0) { // Check if the number is odd\n                    sum += num;\n                }\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        // Test cases\n        System.out.println(s.solution(Arrays.asList(5, 8, 7, 1)));          // Output: 12\n        System.out.println(s.solution(Arrays.asList(3, 3, 3, 3, 3)));       // Output: 9\n        System.out.println(s.solution(Arrays.asList(30, 13, 24, 321)));     // Output: 0\n    }\n}\n"}
{"task_id": "Java/122", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add_elements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            int num = arr.get(i);\n            if (Math.abs(num) <= 99) {\n                sum += num;\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n\n        // Test case 1: Example from problem statement\n        List<Integer> arr1 = Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9);\n        int k1 = 4;\n        int expected1 = 24;\n        int result1 = sol.add_elements(arr1, k1);\n        System.out.println(\"Test case 1: \" + (result1 == expected1 ? \"Passed\" : \"Failed. Expected \" + expected1 + \", got \" + result1));\n\n        // Test case 2: All elements qualify\n        List<Integer> arr2 = Arrays.asList(1, 2, 3);\n        int k2 = 3;\n        int expected2 = 6;\n        int result2 = sol.add_elements(arr2, k2);\n        System.out.println(\"Test case 2: \" + (result2 == expected2 ? \"Passed\" : \"Failed. Expected \" + expected2 + \", got \" + result2));\n\n        // Test case 3: None qualify\n        List<Integer> arr3 = Arrays.asList(100, 200, 300);\n        int k3 = 2;\n        int expected3 = 0;\n        int result3 = sol.add_elements(arr3, k3);\n        System.out.println(\"Test case 3: \" + (result3 == expected3 ? \"Passed\" : \"Failed. Expected \" + expected3 + \", got \" + result3));\n\n        // Test case 4: Mix of two digits and others\n        List<Integer> arr4 = Arrays.asList(10, 99, 100);\n        int k4 = 3;\n        int expected4 = 109;\n        int result4 = sol.add_elements(arr4, k4);\n        System.out.println(\"Test case 4: \" + (result4 == expected4 ? \"Passed\" : \"Failed. Expected \" + expected4 + \", got \" + result4));\n\n        // Test case 5: Including zero and negatives\n        List<Integer> arr5 = Arrays.asList(0, -5, 10, -99, 100);\n        int k5 = 4;\n        int expected5 = -94;\n        int result5 = sol.add_elements(arr5, k5);\n        System.out.println(\"Test case 5: \" + (result5 == expected5 ? \"Passed\" : \"Failed. Expected \" + expected5 + \", got \" + result5));\n\n        // Test case 6: k equals array length\n        List<Integer> arr6 = Arrays.asList(1, 22, 333);\n        int k6 = 3;\n        int expected6 = 23;\n        int result6 = sol.add_elements(arr6, k6);\n        System.out.println(\"Test case 6: \" + (result6 == expected6 ? \"Passed\" : \"Failed. Expected \" + expected6 + \", got \" + result6));\n\n        // Test case 7: Single element qualifying\n        List<Integer> arr7 = Collections.singletonList(50);\n        int k7 = 1;\n        int expected7 = 50;\n        int result7 = sol.add_elements(arr7, k7);\n        System.out.println(\"Test case 7: \" + (result7 == expected7 ? \"Passed\" : \"Failed. Expected \" + expected7 + \", got \" + result7));\n\n        // Test case 8: Single element not qualifying\n        List<Integer> arr8 = Collections.singletonList(100);\n        int k8 = 1;\n        int expected8 = 0;\n        int result8 = sol.add_elements(arr8, k8);\n        System.out.println(\"Test case 8: \" + (result8 == expected8 ? \"Passed\" : \"Failed. Expected \" + expected8 + \", got \" + result8));\n    }\n}\n"}
{"task_id": "Java/123", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> get_odd_collatz(int n) {\n        List<Integer> sequence = new ArrayList<>();\n        int current = n;\n        sequence.add(current);\n        while (current != 1) {\n            if (current % 2 == 0) {\n                current = current / 2;\n            } else {\n                current = 3 * current + 1;\n            }\n            sequence.add(current);\n        }\n\n        List<Integer> odds = new ArrayList<>();\n        for (int num : sequence) {\n            if (num % 2 != 0) {\n                odds.add(num);\n            }\n        }\n\n        Collections.sort(odds);\n        return odds;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.get_odd_collatz(5));  // Output: [1, 5]\n        System.out.println(sol.get_odd_collatz(1));  // Output: [1]\n        System.out.println(sol.get_odd_collatz(3));  // Output: [1, 3, 5]\n    }\n}\n"}
{"task_id": "Java/124", "generation": "class Solution {\n    public boolean valid_date(String date) {\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n        if (!date.matches(\"\\\\d{2}-\\\\d{2}-\\\\d{4}\")) {\n            return false;\n        }\n        String[] parts = date.split(\"-\");\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        // int year = Integer.parseInt(parts[2]); // Year is parsed but not used in validation\n        \n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1) {\n            return false;\n        }\n        \n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            if (day > 31) {\n                return false;\n            }\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30) {\n                return false;\n            }\n        } else { // February\n            if (day > 29) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/125", "generation": "import java.util.*;\nimport java.util.regex.Pattern;\n\nclass Solution {\n    public Object split_words(String txt) {\n        // Check if there are any whitespaces\n        if (txt.contains(\" \")) {\n            // Split on one or more whitespaces\n            String[] parts = txt.split(\"\\\\s+\");\n            List<String> result = new ArrayList<>();\n            for (String part : parts) {\n                if (!part.isEmpty()) {\n                    result.add(part);\n                }\n            }\n            return result.isEmpty() ? new ArrayList<String>() : result;\n        }\n        // Check if there are commas\n        else if (txt.contains(\",\")) {\n            // Split on commas\n            String[] parts = txt.split(\",\");\n            List<String> result = new ArrayList<>();\n            for (String part : parts) {\n                if (!part.isEmpty()) {\n                    result.add(part);\n                }\n            }\n            return result.isEmpty() ? new ArrayList<String>() : result;\n        }\n        // Otherwise, count lowercase letters with odd order\n        else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c)) {\n                    int ord = c - 'a';\n                    if (ord % 2 != 0) {\n                        count++;\n                    }\n                }\n            }\n            return count;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        \n        // Test 1: Split on whitespace\n        Object result1 = sol.split_words(\"Hello world!\");\n        List<String> expected1 = Arrays.asList(\"Hello\", \"world!\");\n        System.out.println(\"Test 1: \" + (expected1.equals(result1) ? \"Passed\" : \"Failed\"));\n        \n        // Test 2: Split on commas\n        Object result2 = sol.split_words(\"Hello,world!\");\n        List<String> expected2 = Arrays.asList(\"Hello\", \"world!\");\n        System.out.println(\"Test 2: \" + (expected2.equals(result2) ? \"Passed\" : \"Failed\"));\n        \n        // Test 3: Count lowercase letters with odd order (abcdef -> 3)\n        Object result3 = sol.split_words(\"abcdef\");\n        System.out.println(\"Test 3: \" + (result3.equals(3) ? \"Passed\" : \"Failed\"));\n        \n        // Test 4: Mixed case letters (AbcDef) should count 2\n        Object result4 = sol.split_words(\"AbcDef\");\n        System.out.println(\"Test 4: \" + (result4.equals(2) ? \"Passed\" : \"Failed\"));\n        \n        // Test 5: Empty string\n        Object result5 = sol.split_words(\"\");\n        System.out.println(\"Test 5: \" + (result5.equals(0) ? \"Passed\" : \"Failed\"));\n        \n        // Test 6: Mixed whitespace and commas, split on whitespace\n        Object result6 = sol.split_words(\"Hello, world! How,are you\");\n        List<String> expected6 = Arrays.asList(\"Hello,\", \"world!\", \"How,are\", \"you\");\n        System.out.println(\"Test 6: \" + (expected6.equals(result6) ? \"Passed\" : \"Failed\"));\n        \n        // Test 7: String with commas and no whitespace (a,b,c)\n        Object result7 = sol.split_words(\"a,b,c\");\n        List<String> expected7 = Arrays.asList(\"a\", \"b\", \"c\");\n        System.out.println(\"Test 7: \" + (expected7.equals(result7) ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/126", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean is_sorted(List<Integer> lst) {\n        // Check if the list is sorted in non-decreasing order\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n        }\n        \n        // Check if any number appears more than twice\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (int num : lst) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n        }\n        \n        for (int count : countMap.values()) {\n            if (count > 2) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/127", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        \n        int intersectStart = Math.max(start1, start2);\n        int intersectEnd = Math.min(end1, end2);\n        \n        if (intersectStart > intersectEnd) {\n            return \"NO\";\n        }\n        \n        int length = intersectEnd - intersectStart;\n        \n        return isPrime(length) ? \"YES\" : \"NO\";\n    }\n    \n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/128", "generation": "import java.util.*;\nimport java.util.Optional;\n\nclass Solution {\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int sumMagnitudes = 0;\n        int productSigns = 1;\n\n        for (int num : arr) {\n            sumMagnitudes += Math.abs(num);\n            if (num > 0) {\n                productSigns *= 1;\n            } else if (num < 0) {\n                productSigns *= -1;\n            } else {\n                productSigns *= 0;\n            }\n        }\n\n        int result = sumMagnitudes * productSigns;\n        return Optional.of(result);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: Example 1\n        List<Integer> list1 = Arrays.asList(1, 2, 2, -4);\n        Optional<Integer> result1 = solution.prod_signs(list1);\n        System.out.println(\"Test 1: \" + (result1.isPresent() && result1.get() == -9 ? \"Passed\" : \"Failed\"));\n\n        // Test case 2: Example 2\n        List<Integer> list2 = Arrays.asList(0, 1);\n        Optional<Integer> result2 = solution.prod_signs(list2);\n        System.out.println(\"Test 2: \" + (result2.isPresent() && result2.get() == 0 ? \"Passed\" : \"Failed\"));\n\n        // Test case 3: Example 3 (empty list)\n        List<Integer> list3 = Collections.emptyList();\n        Optional<Integer> result3 = solution.prod_signs(list3);\n        System.out.println(\"Test 3: \" + (result3.isEmpty() ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/129", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int minVal = Integer.MAX_VALUE;\n        int startX = -1, startY = -1;\n\n        // Find the cell with the minimum value to start\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                int val = grid.get(i).get(j);\n                if (val < minVal) {\n                    minVal = val;\n                    startX = i;\n                    startY = j;\n                }\n            }\n        }\n\n        // Directions: up, down, left, right\n        int[][] dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n\n        // Priority queue to keep track of paths sorted lexicographically\n        PriorityQueue<PathNode> pq = new PriorityQueue<>((a, b) -> {\n            for (int i = 0; i < a.path.size(); i++) {\n                if (i >= b.path.size()) return 1;\n                int cmp = a.path.get(i).compareTo(b.path.get(i));\n                if (cmp != 0) return cmp;\n            }\n            return Integer.compare(a.path.size(), b.path.size());\n        });\n\n        // Initialize with the starting cell\n        List<Integer> initialPath = new ArrayList<>();\n        initialPath.add(grid.get(startX).get(startY));\n        pq.add(new PathNode(startX, startY, initialPath));\n\n        // Visited set to track paths of length l at position (x, y)\n        Set<String> visited = new HashSet<>();\n\n        while (!pq.isEmpty()) {\n            PathNode current = pq.poll();\n\n            // If the path length is k, return it\n            if (current.path.size() == k) {\n                return current.path;\n            }\n\n            // Generate all possible next steps\n            for (int[] dir : dirs) {\n                int newX = current.x + dir[0];\n                int newY = current.y + dir[1];\n\n                // Check if new position is within bounds\n                if (newX >= 0 && newX < n && newY >= 0 && newY < n) {\n                    List<Integer> newPath = new ArrayList<>(current.path);\n                    newPath.add(grid.get(newX).get(newY));\n\n                    // Check if the new path is still possible to be the smallest\n                    String key = newX + \",\" + newY + \",\" + newPath.size();\n                    if (!visited.contains(key)) {\n                        visited.add(key);\n                        pq.add(new PathNode(newX, newY, newPath));\n                    }\n                }\n            }\n        }\n\n        // In case no path found (should not happen as per problem statement)\n        return new ArrayList<>();\n    }\n\n    static class PathNode {\n        int x, y;\n        List<Integer> path;\n\n        PathNode(int x, int y, List<Integer> path) {\n            this.x = x;\n            this.y = y;\n            this.path = path;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<List<Integer>> grid1 = Arrays.asList(\n            Arrays.asList(1, 2, 3),\n            Arrays.asList(4, 5, 6),\n            Arrays.asList(7, 8, 9)\n        );\n        int k1 = 3;\n        List<Integer> expected1 = Arrays.asList(1, 2, 1);\n        List<Integer> result1 = solution.minPath(grid1, k1);\n        System.out.println(\"Test 1: Expected \" + expected1 + \", got \" + result1);\n        if (expected1.equals(result1)) {\n            System.out.println(\"Test 1 passed\");\n        } else {\n            System.out.println(\"Test 1 failed\");\n        }\n\n        // Test case 2\n        List<List<Integer>> grid2 = Arrays.asList(\n            Arrays.asList(5, 9, 3),\n            Arrays.asList(4, 1, 6),\n            Arrays.asList(7, 8, 2)\n        );\n        int k2 = 1;\n        List<Integer> expected2 = Arrays.asList(1);\n        List<Integer> result2 = solution.minPath(grid2, k2);\n        System.out.println(\"Test 2: Expected \" + expected2 + \", got \" + result2);\n        if (expected2.equals(result2)) {\n            System.out.println(\"Test 2 passed\");\n        } else {\n            System.out.println(\"Test 2 failed\");\n        }\n\n        // Test case 3\n        List<List<Integer>> grid3 = Arrays.asList(\n            Arrays.asList(3, 4),\n            Arrays.asList(2, 1)\n        );\n        int k3 = 3;\n        List<Integer> expected3 = Arrays.asList(1, 2, 1);\n        List<Integer> result3 = solution.minPath(grid3, k3);\n        System.out.println(\"Test 3: Expected \" + expected3 + \", got \" + result3);\n        if (expected3.equals(result3)) {\n            System.out.println(\"Test 3 passed\");\n        } else {\n            System.out.println(\"Test 3 failed\");\n        }\n    }\n}\n"}
{"task_id": "Java/130", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n >= 0) {\n            result.add(1); // tri(0)\n            if (n >= 1) {\n                result.add(3); // tri(1)\n                for (int i = 2; i <= n; i++) {\n                    if (i % 2 == 0) {\n                        int val = 1 + i / 2;\n                        result.add(val);\n                    } else {\n                        int prev1 = result.get(i - 1);\n                        int prev2 = result.get(i - 2);\n                        int term = (i + 3) / 2;\n                        int val = prev1 + prev2 + term;\n                        result.add(val);\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        \n        // Test case 1: n = 3\n        List<Integer> expected1 = Arrays.asList(1, 3, 2, 8);\n        List<Integer> result1 = s.tri(3);\n        System.out.println(\"Test case 1: \" + (expected1.equals(result1) ? \"Passed\" : \"Failed\"));\n        \n        // Test case 2: n = 4\n        List<Integer> expected2 = Arrays.asList(1, 3, 2, 8, 3);\n        List<Integer> result2 = s.tri(4);\n        System.out.println(\"Test case 2: \" + (expected2.equals(result2) ? \"Passed\" : \"Failed\"));\n        \n        // Test case 3: n = 0\n        List<Integer> expected3 = Arrays.asList(1);\n        List<Integer> result3 = s.tri(0);\n        System.out.println(\"Test case 3: \" + (expected3.equals(result3) ? \"Passed\" : \"Failed\"));\n        \n        // Test case 4: n = 1\n        List<Integer> expected4 = Arrays.asList(1, 3);\n        List<Integer> result4 = s.tri(1);\n        System.out.println(\"Test case 4: \" + (expected4.equals(result4) ? \"Passed\" : \"Failed\"));\n        \n        // Test case 5: n = 5\n        List<Integer> expected5 = Arrays.asList(1, 3, 2, 8, 3, 15);\n        List<Integer> result5 = s.tri(5);\n        System.out.println(\"Test case 5: \" + (expected5.equals(result5) ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/131", "generation": "class Solution {\n    public int digits(int n) {\n        int product = 1;\n        boolean hasOdd = false;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n                hasOdd = true;\n            }\n            n /= 10;\n        }\n        return hasOdd ? product : 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        test(solution.digits(1), 1);\n        test(solution.digits(4), 0);\n        test(solution.digits(235), 15);\n        test(solution.digits(1357), 105);\n        test(solution.digits(2468), 0);\n        test(solution.digits(23), 3);\n    }\n\n    private static void test(int actual, int expected) {\n        if (actual == expected) {\n            System.out.println(\"Pass\");\n        } else {\n            System.out.println(\"Fail. Expected: \" + expected + \", Actual: \" + actual);\n        }\n    }\n}\n"}
{"task_id": "Java/132", "generation": "class Solution {\n    public boolean is_nested(String string) {\n        int i = string.indexOf('[');\n        if (i == -1) return false;\n        int j = string.indexOf('[', i + 1);\n        if (j == -1) return false;\n        int k = string.indexOf(']', j + 1);\n        if (k == -1) return false;\n        int l = string.indexOf(']', k + 1);\n        return l != -1;\n    }\n}\n"}
{"task_id": "Java/133", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_squares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            double ceiling = Math.ceil(num);\n            sum += (int) (ceiling * ceiling);\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n\n        // Test case 1\n        List<Double> lst1 = Arrays.asList(1.0, 2.0, 3.0);\n        assert sol.sum_squares(lst1) == 14 : \"Test 1 Failed\";\n\n        // Test case 2\n        List<Double> lst2 = Arrays.asList(1.0, 4.0, 9.0);\n        assert sol.sum_squares(lst2) == 98 : \"Test 2 Failed\";\n\n        // Test case 3\n        List<Double> lst3 = Arrays.asList(1.0, 3.0, 5.0, 7.0);\n        assert sol.sum_squares(lst3) == 84 : \"Test 3 Failed\";\n\n        // Test case 4\n        List<Double> lst4 = Arrays.asList(1.4, 4.2, 0.0);\n        assert sol.sum_squares(lst4) == 29 : \"Test 4 Failed\";\n\n        // Test case 5\n        List<Double> lst5 = Arrays.asList(-2.4, 1.0, 1.0);\n        assert sol.sum_squares(lst5) == 6 : \"Test 5 Failed\";\n\n        // Edge case: empty list\n        List<Double> lst6 = Collections.emptyList();\n        assert sol.sum_squares(lst6) == 0 : \"Test 6 Failed\";\n\n        // Edge case: single element\n        List<Double> lst7 = Collections.singletonList(2.1);\n        assert sol.sum_squares(lst7) == 9 : \"Test 7 Failed\";\n\n        System.out.println(\"All tests passed.\");\n    }\n}\n"}
{"task_id": "Java/134", "generation": "class Solution {\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        if (txt.isEmpty()) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (!Character.isLetter(lastChar)) {\n            return false;\n        }\n        int lastSpaceIndex = txt.lastIndexOf(' ');\n        int startOfLastWord = lastSpaceIndex + 1;\n        int lengthOfLastWord = txt.length() - startOfLastWord;\n        return lengthOfLastWord == 1;\n    }\n}\n"}
{"task_id": "Java/135", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int can_arrange(List<Integer> arr) {\n        int maxIndex = -1;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                maxIndex = i;\n            }\n        }\n        return maxIndex;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1: Example 1\n        List<Integer> test1 = Arrays.asList(1, 2, 4, 3, 5);\n        int result1 = solution.can_arrange(test1);\n        System.out.println(result1 == 3 ? \"Test1 Passed\" : \"Test1 Failed. Expected 3, got \" + result1);\n\n        // Test case 2: Example 2\n        List<Integer> test2 = Arrays.asList(1, 2, 3);\n        int result2 = solution.can_arrange(test2);\n        System.out.println(result2 == -1 ? \"Test2 Passed\" : \"Test2 Failed. Expected -1, got \" + result2);\n\n        // Test case 3: All elements after first are smaller\n        List<Integer> test3 = Arrays.asList(5, 4, 3, 2, 1);\n        int result3 = solution.can_arrange(test3);\n        System.out.println(result3 == 4 ? \"Test3 Passed\" : \"Test3 Failed. Expected 4, got \" + result3);\n\n        // Test case 4: Only one element (edge case)\n        List<Integer> test4 = Collections.singletonList(10);\n        int result4 = solution.can_arrange(test4);\n        System.out.println(result4 == -1 ? \"Test4 Passed\" : \"Test4 Failed. Expected -1, got \" + result4);\n\n        // Test case 5: Multiple dips, largest index is last possible\n        List<Integer> test5 = Arrays.asList(3, 1, 4, 2, 5, 0);\n        int result5 = solution.can_arrange(test5);\n        System.out.println(result5 == 5 ? \"Test5 Passed\" : \"Test5 Failed. Expected 5, got \" + result5);\n    }\n}\n"}
{"task_id": "Java/136", "generation": "import java.util.*;\nimport java.util.Optional;\n\nclass Solution {\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        Optional<Integer> largestNegative = Optional.empty();\n        Optional<Integer> smallestPositive = Optional.empty();\n\n        for (Integer num : lst) {\n            if (num < 0) {\n                if (largestNegative.isEmpty() || num > largestNegative.get()) {\n                    largestNegative = Optional.of(num);\n                }\n            } else if (num > 0) {\n                if (smallestPositive.isEmpty() || num < smallestPositive.get()) {\n                    smallestPositive = Optional.of(num);\n                }\n            }\n        }\n\n        List<Optional<Integer>> result = new ArrayList<>();\n        result.add(largestNegative);\n        result.add(smallestPositive);\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: Example 1\n        List<Integer> input1 = Arrays.asList(2, 4, 1, 3, 5, 7);\n        List<Optional<Integer>> result1 = solution.largest_smallest_integers(input1);\n        boolean test1 = result1.get(0).isEmpty() && result1.get(1).equals(Optional.of(1));\n        System.out.println(\"Test case 1: \" + (test1 ? \"Passed\" : \"Failed\"));\n\n        // Test case 2: Empty list\n        List<Integer> input2 = Collections.emptyList();\n        List<Optional<Integer>> result2 = solution.largest_smallest_integers(input2);\n        boolean test2 = result2.get(0).isEmpty() && result2.get(1).isEmpty();\n        System.out.println(\"Test case 2: \" + (test2 ? \"Passed\" : \"Failed\"));\n\n        // Test case 3: [0]\n        List<Integer> input3 = Arrays.asList(0);\n        List<Optional<Integer>> result3 = solution.largest_smallest_integers(input3);\n        boolean test3 = result3.get(0).isEmpty() && result3.get(1).isEmpty();\n        System.out.println(\"Test case 3: \" + (test3 ? \"Passed\" : \"Failed\"));\n\n        // Test case 4: Mix of negatives and positives\n        List<Integer> input4 = Arrays.asList(-5, -3, -1, 2, 4);\n        List<Optional<Integer>> result4 = solution.largest_smallest_integers(input4);\n        boolean test4 = result4.get(0).equals(Optional.of(-1)) && result4.get(1).equals(Optional.of(2));\n        System.out.println(\"Test case 4: \" + (test4 ? \"Passed\" : \"Failed\"));\n\n        // Test case 5: All negatives\n        List<Integer> input5 = Arrays.asList(-5, -3, -2);\n        List<Optional<Integer>> result5 = solution.largest_smallest_integers(input5);\n        boolean test5 = result5.get(0).equals(Optional.of(-2)) && result5.get(1).isEmpty();\n        System.out.println(\"Test case 5: \" + (test5 ? \"Passed\" : \"Failed\"));\n\n        // Test case 6: Zeros and positives and negatives\n        List<Integer> input6 = Arrays.asList(-2, 0, 5);\n        List<Optional<Integer>> result6 = solution.largest_smallest_integers(input6);\n        boolean test6 = result6.get(0).equals(Optional.of(-2)) && result6.get(1).equals(Optional.of(5));\n        System.out.println(\"Test case 6: \" + (test6 ? \"Passed\" : \"Failed\"));\n\n        // Test case 7: Single negative\n        List<Integer> input7 = Arrays.asList(-3);\n        List<Optional<Integer>> result7 = solution.largest_smallest_integers(input7);\n        boolean test7 = result7.get(0).equals(Optional.of(-3)) && result7.get(1).isEmpty();\n        System.out.println(\"Test case 7: \" + (test7 ? \"Passed\" : \"Failed\"));\n\n        // Test case 8: Zero and positives\n        List<Integer> input8 = Arrays.asList(0, 1, 2);\n        List<Optional<Integer>> result8 = solution.largest_smallest_integers(input8);\n        boolean test8 = result8.get(0).isEmpty() && result8.get(1).equals(Optional.of(1));\n        System.out.println(\"Test case 8: \" + (test8 ? \"Passed\" : \"Failed\"));\n\n        // Test case 9: Both -1 and 1\n        List<Integer> input9 = Arrays.asList(-1, 1);\n        List<Optional<Integer>> result9 = solution.largest_smallest_integers(input9);\n        boolean test9 = result9.get(0).equals(Optional.of(-1)) && result9.get(1).equals(Optional.of(1));\n        System.out.println(\"Test case 9: \" + (test9 ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/137", "generation": "import java.util.Optional;\n\nclass Solution {\n    public Optional<Object> compare_one(Object a, Object b) {\n        double aVal = convertToDouble(a);\n        double bVal = convertToDouble(b);\n\n        if (aVal > bVal) {\n            return Optional.of(a);\n        } else if (bVal > aVal) {\n            return Optional.of(b);\n        } else {\n            return Optional.empty();\n        }\n    }\n\n    private double convertToDouble(Object obj) {\n        if (obj instanceof Integer) {\n            return ((Integer) obj).doubleValue();\n        } else if (obj instanceof Double) {\n            return (Double) obj;\n        } else if (obj instanceof Float) {\n            return ((Float) obj).doubleValue();\n        } else if (obj instanceof String) {\n            String s = (String) obj;\n            s = s.replace(',', '.');\n            return Double.parseDouble(s);\n        } else {\n            throw new IllegalArgumentException(\"Unsupported type\");\n        }\n    }\n}\n"}
{"task_id": "Java/138", "generation": "class Solution {\n    public boolean is_equal_to_sum_even(int n) {\n        return (n >= 8) && (n % 2 == 0);\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.is_equal_to_sum_even(4));  // false\n        System.out.println(sol.is_equal_to_sum_even(6));  // false\n        System.out.println(sol.is_equal_to_sum_even(8));  // true\n        System.out.println(sol.is_equal_to_sum_even(7));  // false\n        System.out.println(sol.is_equal_to_sum_even(10)); // true\n        System.out.println(sol.is_equal_to_sum_even(12)); // true\n    }\n}\n"}
{"task_id": "Java/139", "generation": "class Solution {\n    public long special_factorial(int n) {\n        long result = 1;\n        long currentFactorial = 1;\n        for (int i = 1; i <= n; i++) {\n            currentFactorial *= i;\n            result *= currentFactorial;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        // Test cases\n        System.out.println(sol.special_factorial(4));   // Expected output: 288\n        System.out.println(sol.special_factorial(1));   // Expected output: 1\n        System.out.println(sol.special_factorial(2));   // Expected output: 2\n        System.out.println(sol.special_factorial(3));   // Expected output: 12\n        System.out.println(sol.special_factorial(5));   // Expected output: 34560\n    }\n}\n"}
{"task_id": "Java/140", "generation": "class Solution {\n    public String fix_spaces(String text) {\n        StringBuilder result = new StringBuilder();\n        int i = 0;\n        int n = text.length();\n        while (i < n) {\n            if (text.charAt(i) == ' ') {\n                int j = i;\n                while (j < n && text.charAt(j) == ' ') {\n                    j++;\n                }\n                int count = j - i;\n                if (count <= 2) {\n                    for (int k = 0; k < count; k++) {\n                        result.append('_');\n                    }\n                } else {\n                    result.append('-');\n                }\n                i = j;\n            } else {\n                int j = i;\n                while (j < n && text.charAt(j) != ' ') {\n                    j++;\n                }\n                result.append(text.substring(i, j));\n                i = j;\n            }\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        // Test cases\n        System.out.println(sol.fix_spaces(\"Example\").equals(\"Example\")); // true\n        System.out.println(sol.fix_spaces(\"Example 1\").equals(\"Example_1\")); // true\n        System.out.println(sol.fix_spaces(\" Example 2\").equals(\"_Example_2\")); // true\n        System.out.println(sol.fix_spaces(\" Example   3\").equals(\"_Example-3\")); // true\n    }\n}\n"}
{"task_id": "Java/141", "generation": "class Solution {\n    public String file_name_check(String file_name) {\n        // Check number of dots\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length != 2) {\n            return \"No\";\n        }\n        \n        // Check name part (before the dot)\n        String namePart = parts[0];\n        if (namePart.isEmpty()) {\n            return \"No\";\n        }\n        if (!Character.isLetter(namePart.charAt(0))) {\n            return \"No\";\n        }\n        \n        // Check extension part\n        String extension = parts[1];\n        if (!extension.equals(\"txt\") && !extension.equals(\"exe\") && !extension.equals(\"dll\")) {\n            return \"No\";\n        }\n        \n        // Check digit count\n        int digitCount = 0;\n        for (int i = 0; i < file_name.length(); i++) {\n            if (Character.isDigit(file_name.charAt(i))) {\n                digitCount++;\n            }\n        }\n        if (digitCount > 3) {\n            return \"No\";\n        }\n        \n        return \"Yes\";\n    }\n}\n"}
{"task_id": "Java/142", "generation": "import java.util.*;\n\nclass Solution {\n    public int sum_squares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (i % 3 == 0) {\n                sum += num * num;\n            } else if (i % 4 == 0) {\n                sum += num * num * num;\n            } else {\n                sum += num;\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        \n        // Test case 1: [1,2,3] \u2192 6\n        List<Integer> test1 = Arrays.asList(1, 2, 3);\n        int result1 = sol.sum_squares(test1);\n        System.out.println(\"Test 1: \" + (result1 == 6 ? \"Passed\" : \"Failed\"));\n        \n        // Test case 2: empty list \u2192 0\n        List<Integer> test2 = Collections.emptyList();\n        int result2 = sol.sum_squares(test2);\n        System.out.println(\"Test 2: \" + (result2 == 0 ? \"Passed\" : \"Failed\"));\n        \n        // Test case 3: [-1,-5,2,-1,-5] \u2192 -126\n        List<Integer> test3 = Arrays.asList(-1, -5, 2, -1, -5);\n        int result3 = sol.sum_squares(test3);\n        System.out.println(\"Test 3: \" + (result3 == -126 ? \"Passed\" : \"Failed\"));\n        \n        // Test case 4: index 4 (element 5)\n        List<Integer> test4 = Arrays.asList(0, 0, 0, 0, 5);\n        int result4 = sol.sum_squares(test4);\n        System.out.println(\"Test 4: \" + (result4 == 125 ? \"Passed\" : \"Failed\"));\n        \n        // Test case 5: index 3 (element 3)\n        List<Integer> test5 = Arrays.asList(0, 0, 0, 3);\n        int result5 = sol.sum_squares(test5);\n        System.out.println(\"Test 5: \" + (result5 == 9 ? \"Passed\" : \"Failed\"));\n        \n        // Test case 6: index 0 (element 3)\n        List<Integer> test6 = Collections.singletonList(3);\n        int result6 = sol.sum_squares(test6);\n        System.out.println(\"Test 6: \" + (result6 == 9 ? \"Passed\" : \"Failed\"));\n        \n        // Test case 7: index 12 (multiple of 3 and 4)\n        List<Integer> test7 = new ArrayList<>();\n        for (int i = 0; i < 13; i++) {\n            test7.add(2);\n        }\n        int sumExpected = 0;\n        for (int i = 0; i < 13; i++) {\n            if (i % 3 == 0) {\n                sumExpected += 4; // 2 squared\n            } else if (i % 4 == 0) {\n                sumExpected += 8; // 2 cubed\n            } else {\n                sumExpected += 2;\n            }\n        }\n        int result7 = sol.sum_squares(test7);\n        System.out.println(\"Test 7: \" + (result7 == sumExpected ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/143", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String words_in_sentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            int length = word.length();\n            if (isPrime(length)) {\n                result.add(word);\n            }\n        }\n        return String.join(\" \", result);\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n\n        // Test cases\n        String[][] testCases = {\n            {\"This is a test\", \"is\"},\n            {\"lets go for swimming\", \"go for\"},\n            {\"a\", \"\"},\n            {\"I am\", \"am\"},\n            {\"Testing\", \"Testing\"},\n            {\"Hello world\", \"Hello world\"},\n            {\"Hi there you\", \"Hi there you\"},\n            {\"Prime numbers are cool\", \"are cool\"}  // \"Prime\"(5), \"numbers\"(7), \"are\"(3), \"cool\"(4)\n        };\n\n        for (String[] testCase : testCases) {\n            String input = testCase[0];\n            String expected = testCase[1];\n            String actual = sol.words_in_sentence(input);\n            if (actual.equals(expected)) {\n                System.out.println(\"Test passed for input: '\" + input + \"'\");\n            } else {\n                System.out.println(\"Test failed for input: '\" + input + \"'\");\n                System.out.println(\"Expected: '\" + expected + \"'\");\n                System.out.println(\"Actual:   '\" + actual + \"'\");\n            }\n        }\n    }\n}\n"}
{"task_id": "Java/144", "generation": "import java.math.BigInteger;\n\nclass Solution {\n    public boolean simplify(String x, String n) {\n        // Split x into numerator and denominator\n        String[] xParts = x.split(\"/\");\n        BigInteger xNum = new BigInteger(xParts[0]);\n        BigInteger xDen = new BigInteger(xParts[1]);\n        \n        // Split n into numerator and denominator\n        String[] nParts = n.split(\"/\");\n        BigInteger nNum = new BigInteger(nParts[0]);\n        BigInteger nDen = new BigInteger(nParts[1]);\n        \n        // Compute the product of numerators and denominators\n        BigInteger productNum = xNum.multiply(nNum);\n        BigInteger productDen = xDen.multiply(nDen);\n        \n        // Check if the product numerator is divisible by the product denominator\n        return productNum.mod(productDen).equals(BigInteger.ZERO);\n    }\n}\n"}
{"task_id": "Java/145", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> order_by_points(List<Integer> nums) {\n        if (nums.isEmpty()) {\n            return new ArrayList<>();\n        }\n        List<Integer> indices = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            indices.add(i);\n        }\n        Collections.sort(indices, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer i1, Integer i2) {\n                int sum1 = sumDigits(nums.get(i1));\n                int sum2 = sumDigits(nums.get(i2));\n                if (sum1 != sum2) {\n                    return Integer.compare(sum1, sum2);\n                } else {\n                    return Integer.compare(i1, i2);\n                }\n            }\n        });\n        List<Integer> result = new ArrayList<>();\n        for (int index : indices) {\n            result.add(nums.get(index));\n        }\n        return result;\n    }\n\n    private int sumDigits(int num) {\n        if (num == 0) {\n            return 0;\n        }\n        boolean isNegative = num < 0;\n        num = Math.abs(num);\n        List<Integer> digits = new ArrayList<>();\n        while (num > 0) {\n            digits.add(num % 10);\n            num /= 10;\n        }\n        Collections.reverse(digits);\n        int sum = 0;\n        if (isNegative) {\n            if (!digits.isEmpty()) {\n                sum += -digits.get(0);\n                for (int i = 1; i < digits.size(); i++) {\n                    sum += digits.get(i);\n                }\n            }\n        } else {\n            for (int d : digits) {\n                sum += d;\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/146", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (Integer num : nums) {\n            if (num <= 10) {\n                continue;\n            }\n            int n = Math.abs(num);\n            int last = n % 10;\n            int first = n;\n            while (first >= 10) {\n                first /= 10;\n            }\n            if (last % 2 == 1 && first % 2 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        // Test case 1\n        System.out.println(sol.specialFilter(Arrays.asList(15, -73, 14, -15))); // Expected output: 1\n        // Test case 2\n        System.out.println(sol.specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109))); // Expected output: 2\n    }\n}\n"}
{"task_id": "Java/147", "generation": "class Solution {\n    public int get_max_triples(int n) {\n        int c0 = 0;\n        if (n >= 2) {\n            c0 = (n - 2) / 3 + 1;\n        }\n        int c1 = n - c0;\n        long comb0 = (long) c0 * (c0 - 1) * (c0 - 2) / 6;\n        long comb1 = (long) c1 * (c1 - 1) * (c1 - 2) / 6;\n        return (int) (comb0 + comb1);\n    }\n}\n"}
{"task_id": "Java/148", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> bf(String planet1, String planet2) {\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        if (index1 == -1 || index2 == -1) {\n            return new ArrayList<>();\n        }\n        int lower = Math.min(index1, index2);\n        int upper = Math.max(index1, index2);\n        if (upper - lower <= 1) {\n            return new ArrayList<>();\n        }\n        List<String> between = planets.subList(lower + 1, upper);\n        return new ArrayList<>(between);\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.bf(\"Jupiter\", \"Neptune\")); // [\"Saturn\", \"Uranus\"]\n        System.out.println(sol.bf(\"Earth\", \"Mercury\"));   // [\"Venus\"]\n        System.out.println(sol.bf(\"Mercury\", \"Uranus\"));  // [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n        System.out.println(sol.bf(\"Earth\", \"Pluto\"));     // []\n        System.out.println(sol.bf(\"Venus\", \"Earth\"));     // []\n        System.out.println(sol.bf(\"Earth\", \"Earth\"));     // []\n    }\n}\n"}
{"task_id": "Java/149", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> sorted_list_sum(List<String> lst) {\n        // Filter out strings with odd lengths\n        List<String> filtered = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                filtered.add(s);\n            }\n        }\n        // Sort the filtered list by length ascending, then alphabetically\n        Collections.sort(filtered, new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                if (s1.length() != s2.length()) {\n                    return Integer.compare(s1.length(), s2.length());\n                } else {\n                    return s1.compareTo(s2);\n                }\n            }\n        });\n        return filtered;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n\n        // Test case 1\n        List<String> input1 = Arrays.asList(\"aa\", \"a\", \"aaa\");\n        List<String> expected1 = Arrays.asList(\"aa\");\n        List<String> result1 = s.sorted_list_sum(input1);\n        System.out.println(\"Test 1: \" + (result1.equals(expected1) ? \"Pass\" : \"Fail\"));\n\n        // Test case 2\n        List<String> input2 = Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\");\n        List<String> expected2 = Arrays.asList(\"ab\", \"cd\");\n        List<String> result2 = s.sorted_list_sum(input2);\n        System.out.println(\"Test 2: \" + (result2.equals(expected2) ? \"Pass\" : \"Fail\"));\n\n        // Test case 3: All even lengths, same length\n        List<String> input3 = Arrays.asList(\"test\", \"test\", \"test\");\n        List<String> expected3 = Arrays.asList(\"test\", \"test\", \"test\");\n        List<String> result3 = s.sorted_list_sum(input3);\n        System.out.println(\"Test 3: \" + (result3.equals(expected3) ? \"Pass\" : \"Fail\"));\n\n        // Test case 4: Different even lengths\n        List<String> input4 = Arrays.asList(\"bb\", \"aaaa\", \"z\", \"ccc\");\n        List<String> expected4 = Arrays.asList(\"bb\", \"aaaa\");\n        List<String> result4 = s.sorted_list_sum(input4);\n        System.out.println(\"Test 4: \" + (result4.equals(expected4) ? \"Pass\" : \"Fail\"));\n\n        // Test case 5: Same length, different words\n        List<String> input5 = Arrays.asList(\"apple\", \"banana\", \"pear\", \"grape\");\n        List<String> expected5 = Arrays.asList(\"pear\", \"banana\");\n        List<String> result5 = s.sorted_list_sum(input5);\n        System.out.println(\"Test 5: \" + (result5.equals(expected5) ? \"Pass\" : \"Fail\"));\n\n        // Test case 6: All odd lengths\n        List<String> input6 = Arrays.asList(\"a\", \"bbb\", \"ccccc\");\n        List<String> expected6 = Arrays.asList();\n        List<String> result6 = s.sorted_list_sum(input6);\n        System.out.println(\"Test 6: \" + (result6.equals(expected6) ? \"Pass\" : \"Fail\"));\n\n        // Test case 7: Mixed even lengths with same length, sorted alphabetically\n        List<String> input7 = Arrays.asList(\"cd\", \"ab\", \"ef\", \"ba\");\n        List<String> expected7 = Arrays.asList(\"ab\", \"ba\", \"cd\", \"ef\");\n        List<String> result7 = s.sorted_list_sum(input7);\n        System.out.println(\"Test 7: \" + (result7.equals(expected7) ? \"Pass\" : \"Fail\"));\n    }\n}\n"}
{"task_id": "Java/150", "generation": "class Solution {\n    public int x_or_y(int n, int x, int y) {\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        if (num == 2) return true;\n        if (num % 2 == 0) return false;\n        for (int i = 3; i <= Math.sqrt(num); i += 2) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.x_or_y(7, 34, 12));  // Should output 34\n        System.out.println(sol.x_or_y(15, 8, 5));   // Should output 5\n        System.out.println(sol.x_or_y(2, 10, 20));  // 10\n        System.out.println(sol.x_or_y(1, 3, 4));   // 4\n        System.out.println(sol.x_or_y(9, 5, 6));   // 6\n        System.out.println(sol.x_or_y(3, 100, 200"}
{"task_id": "Java/151", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int double_the_difference(List<Object> lst) {\n        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Number) {\n                Number num = (Number) obj;\n                if (num instanceof Integer) {\n                    int value = (Integer) num;\n                    if (value >= 0 && value % 2 != 0) {\n                        sum += value * value;\n                    }\n                } else {\n                    double d = num.doubleValue();\n                    if (d == Math.floor(d) && !Double.isInfinite(d)) {\n                        int intValue = (int) d;\n                        if (intValue >= 0 && intValue % 2 != 0) {\n                            sum += intValue * intValue;\n                        }\n                    }\n                }\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1: Example 1\n        List<Object> list1 = Arrays.asList(1, 3, 2, 0);\n        assert solution.double_the_difference(list1) == 10 : \"Test case 1 failed\";\n\n        // Test case 2: Example 2\n        List<Object> list2 = Arrays.asList(-1, -2, 0);\n        assert solution.double_the_difference(list2) == 0 : \"Test case 2 failed\";\n\n        // Test case 3: Example 3\n        List<Object> list3 = Arrays.asList(9, -2);\n        assert solution.double_the_difference(list3) == 81 : \"Test case 3 failed\";\n\n        // Test case 4: Example 4\n        List<Object> list4 = Arrays.asList(0);\n        assert solution.double_the_difference(list4) == 0 : \"Test case 4 failed\";\n\n        // Test case 5: Empty list\n        List<Object> list5 = Collections.emptyList();\n        assert solution.double_the_difference(list5) == 0 : \"Test case 5 failed\";\n\n        // Test case 6: Non-integer elements\n        List<Object> list6 = Arrays.asList(2.5, 3, \"5\", 5);\n        assert solution.double_the_difference(list6) == 34 : \"Test case 6 failed\";\n\n        // Test case 7: Negative odd integers\n        List<Object> list7 = Arrays.asList(-3, -5);\n        assert solution.double_the_difference(list7) == 0 : \"Test case 7 failed\";\n\n        // Test case 8: Mixed valid and invalid numbers\n        List<Object> list8 = Arrays.asList(4, 7, -2, 0, 3.14, 5);\n        assert solution.double_the_difference(list8) == 74 : \"Test case 8 failed\";\n\n        System.out.println(\"All test cases passed!\");\n    }\n}\n"}
{"task_id": "Java/152", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            result.add(diff);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1\n        List<Integer> game1 = Arrays.asList(1, 2, 3, 4, 5, 1);\n        List<Integer> guess1 = Arrays.asList(1, 2, 3, 4, 2, -2);\n        List<Integer> expected1 = Arrays.asList(0, 0, 0, 0, 3, 3);\n        List<Integer> result1 = solution.compare(game1, guess1);\n        System.out.println(\"Test case 1: \" + (expected1.equals(result1) ? \"Passed\" : \"Failed\"));\n        \n        // Test case 2\n        List<Integer> game2 = Arrays.asList(0, 5, 0, 0, 0, 4);\n        List<Integer> guess2 = Arrays.asList(4, 1, 1, 0, 0, -2);\n        List<Integer> expected2 = Arrays.asList(4, 4, 1, 0, 0, 6);\n        List<Integer> result2 = solution.compare(game2, guess2);\n        System.out.println(\"Test case 2: \" + (expected2.equals(result2) ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/153", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        int maxStrength = Integer.MIN_VALUE;\n        String strongestExt = \"\";\n        for (String ext : extensions) {\n            int cap = 0;\n            int sm = 0;\n            for (int i = 0; i < ext.length(); i++) {\n                char c = ext.charAt(i);\n                if (Character.isUpperCase(c)) {\n                    cap++;\n                } else if (Character.isLowerCase(c)) {\n                    sm++;\n                }\n            }\n            int strength = cap - sm;\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExt = ext;\n            }\n        }\n        return class_name + \".\" + strongestExt;\n    }\n}\n"}
{"task_id": "Java/154", "generation": "public boolean cycpattern_check(String a, String b) {\n    int len = b.length();\n    if (len == 0) {\n        return a.contains(b);\n    }\n    for (int i = 0; i < len; i++) {\n        String rotated = b.substring(i) + b.substring(0, i);\n        if (a.contains(rotated)) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "Java/155", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> even_odd_count(int num) {\n        int even = 0, odd = 0;\n        num = Math.abs(num);\n        do {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /= 10;\n        } while (num != 0);\n        return Arrays.asList(even, odd);\n    }\n}\n"}
{"task_id": "Java/156", "generation": "class Solution {\n    public String int_to_mini_roman(int number) {\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] symbols = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        \n        StringBuilder sb = new StringBuilder();\n        \n        for (int i = 0; i < values.length; i++) {\n            int value = values[i];\n            String symbol = symbols[i];\n            while (number >= value) {\n                sb.append(symbol);\n                number -= value;\n            }\n        }\n        \n        return sb.toString().toLowerCase();\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        test(sol.int_to_mini_roman(19), \"xix\");\n        test(sol.int_to_mini_roman(152), \"clii\");\n        test(sol.int_to_mini_roman(426), \"cdxxvi\");\n        test(sol.int_to_mini_roman(1000), \"m\");\n    }\n\n    private static void test(String actual, String expected) {\n        if (actual.equals(expected)) {\n            System.out.println(\"Test passed: \" + actual);\n        } else {\n            System.out.println(\"Test failed. Expected: \" + expected + \", Actual: \" + actual);\n        }\n    }\n}\n"}
{"task_id": "Java/157", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean right_angle_triangle(int a, int b, int c) {\n        if (a <= 0 || b <= 0 || c <= 0) {\n            return false;\n        }\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        if (sides[0] + sides[1] <= sides[2]) {\n            return false;\n        }\n        return (sides[0] * sides[0] + sides[1] * sides[1]) == (sides[2] * sides[2]);\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.right_angle_triangle(3, 4, 5));    // true\n        System.out.println(sol.right_angle_triangle(1, 2, 3));    // false\n        System.out.println(sol.right_angle_triangle(5, 12, 13));  // true\n        System.out.println(sol.right_angle_triangle(6, 8, 10));    // true\n        System.out.println(sol.right_angle_triangle(0, 0, 0));    // false\n        System.out.println(sol.right_angle_triangle(2, 3, 4));     // false\n        System.out.println(sol.right_angle_triangle(5, 5, 5));     // false\n        System.out.println(sol.right_angle_triangle(5, 3, 4));    // true\n        System.out.println(sol.right_angle_triangle(1, 1, 2));     // false\n    }\n}\n"}
{"task_id": "Java/158", "generation": "import java.util.*;\n\nclass Solution {\n    public String find_max(List<String> words) {\n        int maxUnique = -1;\n        String result = \"\";\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            int currentCount = uniqueChars.size();\n            if (currentCount > maxUnique) {\n                maxUnique = currentCount;\n                result = word;\n            } else if (currentCount == maxUnique) {\n                if (word.compareTo(result) < 0) {\n                    result = word;\n                }\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1\n        List<String> words1 = Arrays.asList(\"name\", \"of\", \"string\");\n        String result1 = solution.find_max(words1);\n        System.out.println(\"Test 1: \" + (result1.equals(\"string\") ? \"Passed\" : \"Failed\"));\n        \n        // Test case 2\n        List<String> words2 = Arrays.asList(\"name\", \"enam\", \"game\");\n        String result2 = solution.find_max(words2);\n        System.out.println(\"Test 2: \" + (result2.equals(\"enam\") ? \"Passed\" : \"Failed\"));\n        \n        // Test case 3\n        List<String> words3 = Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\");\n        String result3 = solution.find_max(words3);\n        System.out.println(\"Test 3: \" + (result3.equals(\"aaaaaaa\") ? \"Passed\" : \"Failed\"));\n    }\n}\n"}
{"task_id": "Java/159", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> eat(int number, int need, int remaining) {\n        int added = Math.min(need, remaining);\n        int totalEaten = number + added;\n        int left = remaining - added;\n        return Arrays.asList(totalEaten, left);\n    }\n}\n"}
{"task_id": "Java/160", "generation": "import java.util.*;\n\nclass Solution {\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        // Generate tokens list\n        List<Object> tokens = new ArrayList<>();\n        int n = operator.size();\n        for (int i = 0; i < n; i++) {\n            tokens.add(operand.get(i));\n            tokens.add(operator.get(i));\n        }\n        tokens.add(operand.get(n)); // operand has n+1 elements\n\n        // Convert to postfix\n        List<Object> postfix = infixToPostfix(tokens);\n\n        // Evaluate postfix\n        return evaluatePostfix(postfix);\n    }\n\n    private List<Object> infixToPostfix(List<Object> tokens) {\n        Stack<String> stack = new Stack<>();\n        List<Object> postfix = new ArrayList<>();\n\n        for (Object token : tokens) {\n            if (token instanceof Integer) {\n                postfix.add(token);\n            } else {\n                String op = (String) token;\n                while (!stack.isEmpty() && hasHigherPrecedence(stack.peek(), op)) {\n                    postfix.add(stack.pop());\n                }\n                stack.push(op);\n            }\n        }\n\n        while (!stack.isEmpty()) {\n            postfix.add(stack.pop());\n        }\n\n        return postfix;\n    }\n\n    private boolean hasHigherPrecedence(String stackOp, String currentOp) {\n        int stackPrec = getPrecedence(stackOp);\n        int currentPrec = getPrecedence(currentOp);\n\n        if (stackPrec > currentPrec) {\n            return true;\n        } else if (stackPrec == currentPrec) {\n            return !isRightAssociative(currentOp);\n        } else {\n            return false;\n        }\n    }\n\n    private int getPrecedence(String op) {\n        switch (op) {\n            case \"**\":\n                return 4;\n            case \"*\":\n            case \"/\":\n                return 3;\n            case \"+\":\n            case \"-\":\n                return 2;\n            default:\n                throw new IllegalArgumentException(\"Unknown operator: \" + op);\n        }\n    }\n\n    private boolean isRightAssociative(String op) {\n        return op.equals(\"**\");\n    }\n\n    private int evaluatePostfix(List<Object> postfix) {\n        Stack<Integer> stack = new Stack<>();\n\n        for (Object token : postfix) {\n            if (token instanceof Integer) {\n                stack.push((Integer) token);\n            } else {\n                String op = (String) token;\n                int b = stack.pop();\n                int a = stack.pop();\n                int result = applyOp(a, b, op);\n                stack.push(result);\n            }\n        }\n\n        return stack.pop();\n    }\n\n    private int applyOp(int a, int b, String op) {\n        switch (op) {\n            case \"+\":\n                return a + b;\n            case \"-\":\n                return a - b;\n            case \"*\":\n                return a * b;\n            case \"/\":\n                return a / b;\n            case \"**\":\n                return (int) Math.pow(a, b);\n            default:\n                throw new IllegalArgumentException(\"Unknown operator: \" + op);\n        }\n    }\n}\n"}
{"task_id": "Java/161", "generation": "class Solution {\n    public String solve(String s) {\n        boolean hasLetters = false;\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                hasLetters = true;\n                break;\n            }\n        }\n        \n        if (!hasLetters) {\n            return new StringBuilder(s).reverse().toString();\n        } else {\n            char[] arr = s.toCharArray();\n            for (int i = 0; i < arr.length; i++) {\n                if (Character.isLetter(arr[i])) {\n                    if (Character.isLowerCase(arr[i])) {\n                        arr[i] = Character.toUpperCase(arr[i]);\n                    } else {\n                        arr[i] = Character.toLowerCase(arr[i]);\n                    }\n                }\n            }\n            return new String(arr);\n        }\n    }\n\n    public static void main(String[] args) {\n        test(\"1234\", \"4321\");\n        test(\"ab\", \"AB\");\n        test(\"#a@C\", \"#A@c\");\n        test(\"\", \"\");\n        test(\"aBc\", \"AbC\");\n        test(\"A\", \"a\");\n        test(\"!@#\", \"#@!\");\n        test(\"a1b2\", \"A1B2\");\n        test(\"Hello!\", \"hELLO!\");\n    }\n\n    private static void test(String input, String expected) {\n        Solution solution = new Solution();\n        String result = solution.solve(input);\n        System.out.println(\"Input: \" + input);\n        System.out.println(\"Expected: \" + expected);\n        System.out.println(\"Result: \" + result);\n        System.out.println(\"Test \" + (expected.equals(result) ? \"Passed\" : \"Failed\"));\n        System.out.println();\n    }\n}\n"}
{"task_id": "Java/162", "generation": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] digest = md.digest(text.getBytes());\n        BigInteger num = new BigInteger(1, digest);\n        String hash = String.format(\"%032x\", num);\n        return Optional.of(hash);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        try {\n            // Test case 1: \"Hello world\"\n            String input1 = \"Hello world\";\n            Optional<String> result1 = solution.string_to_md5(input1);\n            String expected1 = \"3e25960a79dbc69b674cd4ec67a72c62\";\n            assertResult(\"Test 1\", expected1, result1);\n\n            // Test case 2: empty string\n            Optional<String> result2 = solution.string_to_md5(\"\");\n            assert result2.isEmpty() : \"Test 2 failed: Expected empty Optional.\";\n            System.out.println(\"Test 2 passed.\");\n\n            // Test case 3: \"abc\"\n            String input3 = \"abc\";\n            Optional<String> result3 = solution.string_to_md5(input3);\n            String expected3 = \"900150983cd24fb0d6963f7d28e17f72\";\n            assertResult(\"Test 3\", expected3, result3);\n\n        } catch (NoSuchAlgorithmException e) {\n            System.err.println(\"MD5 algorithm not available.\");\n            e.printStackTrace();\n        }\n    }\n\n    private static void assertResult(String testName, String expected, Optional<String> actual) {\n        if (actual.isPresent() && actual.get().equals(expected)) {\n            System.out.println(testName + \" passed.\");\n        } else {\n            System.out.println(testName + \" failed. Expected: \" + expected + \", Got: \" + actual.orElse(\"empty\"));\n        }\n    }\n}\n"}
{"task_id": "Java/163", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> generate_integers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        int start = Math.min(a, b);\n        int end = Math.max(a, b);\n        \n        for (int num = start; num <= end; num++) {\n            if (num == 2 || num == 4 || num == 6 || num == 8) {\n                result.add(num);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        assertEquals(Arrays.asList(2, 4, 6, 8), solution.generate_integers(2, 8), \"Test case 1\");\n        assertEquals(Arrays.asList(2, 4, 6, 8), solution.generate_integers(8, 2), \"Test case 2\");\n        assertEquals(Collections.emptyList(), solution.generate_integers(10, 14), \"Test case 3\");\n        assertEquals(Arrays.asList(4), solution.generate_integers(4, 4), \"Test case 4\");\n        assertEquals(Arrays.asList(6), solution.generate_integers(5, 7), \"Test case 5\");\n        assertEquals(Arrays.asList(2), solution.generate_integers(1, 3), \"Test case 6\");\n        assertEquals(Collections.emptyList(), solution.generate_integers(9, 15), \"Test case 7\");\n        assertEquals(Arrays.asList(2), solution.generate_integers(2, 2), \"Test case 8\");\n        assertEquals(Arrays.asList(6), solution.generate_integers(6, 6), \"Test case 9\");\n    }\n    \n    private static void assertEquals(List<Integer> expected, List<Integer> actual, String message) {\n        if (expected.equals(actual)) {\n            System.out.println(message + \": Passed\");\n        } else {\n            System.out.println(message + \": Failed. Expected \" + expected + \", but got \" + actual);\n        }\n    }\n}\n"}
