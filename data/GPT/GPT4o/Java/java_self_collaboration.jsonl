{"task_id": "Java/0", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> has_close_elements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> has_close_elements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        // Step 2: Input Validation\n        if (numbers == null || numbers.size() < 2) {\n            return false;\n        }\n\n        // Step 3: Sort the List\n        Collections.sort(numbers);\n\n        // Step 4: Iterate and Compare\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < threshold) {\n                return true; // Found close elements\n            }\n        }\n\n        // Step 5: Return False\n        return false; // No close elements found\n    }\n}\n"}
{"task_id": "Java/1", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separate_paren_groups(String paren_string) {\n        // Preprocess the input\n        String cleanedString = paren_string.replaceAll(\" \", \"\");\n        \n        List<String> result = new ArrayList<>();\n        int balance = 0;\n        int start = -1;\n\n        // Traverse the string\n        for (int i = 0; i < cleanedString.length(); i++) {\n            char current = cleanedString.charAt(i);\n            \n            if (current == '(') {\n                if (balance == 0) {\n                    start = i; // Mark the start of a new group\n                }\n                balance++;\n            } else if (current == ')') {\n                balance--;\n                if (balance == 0) {\n                    // We found a complete group\n                    result.add(cleanedString.substring(start, i + 1));\n                }\n            }\n        }\n\n        // Return the result\n        return result;\n    }\n}\n"}
{"task_id": "Java/2", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n     */\n    public double truncate_number(double number) {\n        // Step 1: Validate input (optional)\n        if (number < 0) {\n            throw new IllegalArgumentException(\"Input must be a positive number.\");\n        }\n        \n        // Step 2: Calculate the integer part\n        double integerPart = Math.floor(number);\n        \n        // Step 3: Calculate the decimal part\n        double decimalPart = number - integerPart;\n        \n        // Step 4: Return the decimal part\n        return decimalPart;\n    }\n}\n"}
{"task_id": "Java/3", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero(Arrays.asList(1, 2, 3))\n    false\n    >>> below_zero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/4", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double mean_absolute_deviation(List<Double> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            return 0.0; // Handle empty or null list\n        }\n\n        // Step 2: Calculate the mean\n        double sum = 0.0;\n        for (Double number : numbers) {\n            sum += number;\n        }\n        double mean = sum / numbers.size();\n\n        // Step 3: Calculate the sum of absolute differences\n        double absoluteDifferenceSum = 0.0;\n        for (Double number : numbers) {\n            absoluteDifferenceSum += Math.abs(number - mean);\n        }\n\n        // Step 4: Calculate the Mean Absolute Deviation\n        double mad = absoluteDifferenceSum / numbers.size();\n        \n        // Step 5: Return the result\n        return mad;\n    }\n}\n"}
{"task_id": "Java/5", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimiter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        // Handle edge cases\n        if (numbers.isEmpty()) {\n            return new ArrayList<>(); // Return empty list\n        }\n        if (numbers.size() == 1) {\n            return new ArrayList<>(numbers); // Return the single element list\n        }\n\n        // Initialize result list\n        List<Integer> result = new ArrayList<>();\n\n        // Iterate over the input list\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i)); // Add current element\n            if (i < numbers.size() - 1) {\n                result.add(delimiter); // Add delimiter if not the last element\n            }\n        }\n\n        // Return the result list\n        return result;\n    }\n}\n"}
{"task_id": "Java/6", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parse_nested_parens(String paren_string) {\n        String[] groups = paren_string.split(\" \");\n        List<Integer> result = new ArrayList<>();\n\n        for (String group : groups) {\n            int currentDepth = 0;\n            int maxDepth = 0;\n            for (char ch : group.toCharArray()) {\n                if (ch == '(') {\n                    currentDepth++;\n                } else if (ch == ')') {\n                    currentDepth--;\n                }\n                maxDepth = Math.max(maxDepth, currentDepth);\n            }\n            result.add(maxDepth);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/7", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring(List.of(), \"a\")\n    []\n    >>> filter_by_substring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                result.add(str);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/8", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product(List.of())\n    [0, 1]\n    >>> sum_product(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sum_product(List<Integer> numbers) {\n        if (numbers.isEmpty()) {\n            return Arrays.asList(0, 1);\n        }\n\n        int sum = 0;\n        int product = 1;\n\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n\n        return Arrays.asList(sum, product);\n    }\n}\n"}
{"task_id": "Java/9", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n    */\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        // Step 2: Input Validation\n        if (numbers == null || numbers.isEmpty()) {\n            return new ArrayList<>(); // Return empty list if input is invalid\n        }\n\n        // Step 3: Initialize Variables\n        List<Integer> rollingMaxList = new ArrayList<>();\n        int currentMax = Integer.MIN_VALUE;\n\n        // Step 4: Loop Through Input List\n        for (int number : numbers) {\n            // Update currentMax if necessary\n            if (number > currentMax) {\n                currentMax = number;\n            }\n            // Append currentMax to the rolling maximum list\n            rollingMaxList.add(currentMax);\n        }\n\n        // Step 5: Return the Result\n        return rollingMaxList;\n    }\n}\n"}
{"task_id": "Java/10", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n     */\n    public String make_palindrome(String string) {\n        if (string == null || string.isEmpty()) {\n            return string;\n        }\n\n        int n = string.length();\n        int longestPalindromicSuffixIndex = n;\n\n        // Find the longest palindromic suffix\n        for (int i = n; i >= 0; i--) {\n            if (isPalindrome(string.substring(i))) {\n                longestPalindromicSuffixIndex = i;\n                break;\n            }\n        }\n\n        // Get the prefix that needs to be reversed and appended\n        String prefix = string.substring(0, longestPalindromicSuffixIndex);\n        StringBuilder reversedPrefix = new StringBuilder(prefix).reverse();\n\n        // Append the reversed prefix to the original string\n        return string + reversedPrefix.toString();\n    }\n}\n"}
{"task_id": "Java/11", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n     */\n    public String string_xor(String a, String b) {\n        // Step 2: Input Validation\n        if (a.length() != b.length()) {\n            throw new IllegalArgumentException(\"Strings must be of equal length\");\n        }\n        if (!a.matches(\"[01]+\") || !b.matches(\"[01]+\")) {\n            throw new IllegalArgumentException(\"Strings must consist only of '1's and '0's\");\n        }\n\n        // Step 3: Initialize Result Storage\n        StringBuilder result = new StringBuilder();\n\n        // Step 4: Iterate Through Characters\n        for (int i = 0; i < a.length(); i++) {\n            char charA = a.charAt(i);\n            char charB = b.charAt(i);\n            // Apply XOR logic\n            if (charA == charB) {\n                result.append('0');\n            } else {\n                result.append('1');\n            }\n        }\n\n        // Step 5: Return the Result\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/12", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longestString = strings.get(0);\n\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n\n        return Optional.of(longestString);\n    }\n}\n"}
{"task_id": "Java/13", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n     */\n    public int greatest_common_divisor(int a, int b) {\n        // Input validation\n        if (a < 0 || b < 0) {\n            throw new IllegalArgumentException(\"Inputs must be non-negative integers.\");\n        }\n        if (a == 0 && b == 0) {\n            return 0; // or throw an exception\n        }\n\n        // GCD calculation using the Euclidean algorithm\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n\n        // Return the result\n        return a;\n    }\n}\n"}
{"task_id": "Java/14", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> all_prefixes(String string) {\n        // Input Validation\n        if (string == null || string.isEmpty()) {\n            return new ArrayList<>(); // Return empty list for null or empty input\n        }\n\n        // Initialize a List\n        List<String> prefixes = new ArrayList<>();\n\n        // Iterate Through the String\n        for (int i = 1; i <= string.length(); i++) {\n            // Add Prefixes to the List\n            prefixes.add(string.substring(0, i));\n        }\n\n        // Return the List\n        return prefixes;\n    }\n}\n"}
{"task_id": "Java/15", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String string_sequence(int n) {\n        if (n < 0) {\n            return \"\"; // Handle negative input\n        }\n        \n        List<String> numbers = new ArrayList<>();\n        \n        for (int i = 0; i <= n; i++) {\n            numbers.add(String.valueOf(i));\n        }\n        \n        return String.join(\" \", numbers);\n    }\n}\n"}
{"task_id": "Java/16", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n     */\n    public int count_distinct_characters(String string) {\n        // Step 1: Input Validation\n        if (string == null || string.isEmpty()) {\n            return 0;\n        }\n        \n        // Step 2: Normalize the String\n        String normalizedString = string.toLowerCase();\n        \n        // Step 3: Use a Set for Distinct Characters\n        Set<Character> distinctCharacters = new HashSet<>();\n        \n        // Step 4: Iterate Through the String\n        for (char c : normalizedString.toCharArray()) {\n            // Step 5: Add to Set\n            distinctCharacters.add(c);\n        }\n        \n        // Step 6: Return the Count\n        return distinctCharacters.size();\n    }\n}\n"}
{"task_id": "Java/17", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    note last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quarter note, lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parse_music(String string) {\n        List<Integer> beats = new ArrayList<>();\n        String[] notes = string.split(\" \");\n\n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n                beats.add(4);\n            } else if (note.equals(\"o|\")) {\n                beats.add(2);\n            } else if (note.equals(\".|\")) {\n                beats.add(1);\n            }\n        }\n\n        return beats;\n    }\n}\n"}
{"task_id": "Java/18", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlapping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n     */\n    public int how_many_times(String string, String substring) {\n        // Step 2: Input Validation\n        if (substring.isEmpty()) {\n            return 0;\n        }\n        \n        // Step 3: Initialize Variables\n        int count = 0;\n        int substringLength = substring.length();\n        int stringLength = string.length();\n        \n        // Step 4: Loop Through the String\n        for (int i = 0; i <= stringLength - substringLength; i++) {\n            // Step 5: Check for Matches\n            if (string.substring(i, i + substringLength).equals(substring)) {\n                count++;\n            }\n        }\n        \n        // Step 6: Return the Count\n        return count;\n    }\n}\n"}
{"task_id": "Java/19", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sort_numbers(String numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            return \"\";\n        }\n\n        String[] words = numbers.split(\" \");\n        Map<String, Integer> wordToNumber = new HashMap<>();\n        wordToNumber.put(\"zero\", 0);\n        wordToNumber.put(\"one\", 1);\n        wordToNumber.put(\"two\", 2);\n        wordToNumber.put(\"three\", 3);\n        wordToNumber.put(\"four\", 4);\n        wordToNumber.put(\"five\", 5);\n        wordToNumber.put(\"six\", 6);\n        wordToNumber.put(\"seven\", 7);\n        wordToNumber.put(\"eight\", 8);\n        wordToNumber.put(\"nine\", 9);\n\n        List<Integer> numbersList = new ArrayList<>();\n        for (String word : words) {\n            numbersList.add(wordToNumber.get(word));\n        }\n\n        Collections.sort(numbersList);\n\n        List<String> sortedWords = new ArrayList<>();\n        for (Integer num : numbersList) {\n            sortedWords.add(getKeyByValue(wordToNumber, num));\n        }\n\n        return String.join(\" \", sortedWords);\n    }\n\n    private String getKeyByValue(Map<String, Integer> map, Integer value) {\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            if (entry.getValue().equals(value)) {\n                return entry.getKey();\n            }\n        }\n        return null; // or throw an exception\n    }\n}\n"}
{"task_id": "Java/20", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        // Step 1: Input Validation\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"Input list must contain at least two numbers.\");\n        }\n\n        // Step 2: Sort the List\n        Collections.sort(numbers);\n\n        // Step 3: Initialize Variables\n        double minDiff = Double.MAX_VALUE;\n        List<Double> closestPair = new ArrayList<>();\n\n        // Step 4: Iterate Through the Sorted List\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = numbers.get(i + 1) - numbers.get(i);\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair.clear();\n                closestPair.add(numbers.get(i));\n                closestPair.add(numbers.get(i + 1));\n            }\n        }\n\n        // Step 5: Return the Result\n        return closestPair;\n    }\n}\n"}
{"task_id": "Java/21", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        // Step 1: Input validation\n        if (numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements.\");\n        }\n\n        // Step 2: Find minimum and maximum\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n        for (Double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n\n        // Step 3: Calculate the range\n        double range = max - min;\n\n        // Step 4: Rescale the numbers\n        List<Double> rescaledValues = new ArrayList<>();\n        for (Double number : numbers) {\n            double rescaledValue = (number - min) / range;\n            rescaledValues.add(rescaledValue);\n        }\n\n        // Step 5: Return the result\n        return rescaledValues;\n    }\n}\n"}
{"task_id": "Java/22", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filter_integers(List<Object> values) {\n        // Initialize output list\n        List<Integer> integers = new ArrayList<>();\n\n        // Iterate through input list\n        for (Object value : values) {\n            // Check for Integer type\n            if (value instanceof Integer) {\n                // Add to output list\n                integers.add((Integer) value);\n            }\n        }\n\n        // Return the result\n        return integers;\n    }\n}\n"}
{"task_id": "Java/23", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        // Input validation\n        if (string == null) {\n            return 0; // or throw an exception based on requirements\n        }\n        \n        // Return the length using built-in method\n        return string.length();\n    }\n}\n"}
{"task_id": "Java/24", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n     */\n    public int largest_divisor(int n) {\n        // Step 2: Input Validation\n        if (n <= 1) {\n            return 0; // or throw an exception\n        }\n\n        // Step 3: Initialize Variables\n        int largestDivisor = 0;\n\n        // Step 4: Iterate to Find Divisors\n        for (int i = 1; i < n; i++) {\n            if (n % i == 0) {\n                largestDivisor = i; // Update largest divisor\n            }\n        }\n\n        // Step 5: Return the Result\n        return largestDivisor;\n    }\n}\n"}
{"task_id": "Java/25", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        \n        // Input validation\n        if (n <= 1) {\n            return factors; // or throw an exception\n        }\n        \n        // Start checking for factors from 2\n        for (int factor = 2; factor <= n; factor++) {\n            while (n % factor == 0) {\n                factors.add(factor); // Add the factor to the list\n                n /= factor; // Divide n by the factor\n            }\n        }\n        \n        return factors; // Return the list of prime factors\n    }\n}\n"}
{"task_id": "Java/26", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates(Arrays.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        Map<Integer, Integer> countMap = new HashMap<>();\n        \n        // Count occurrences of each number\n        for (Integer number : numbers) {\n            countMap.put(number, countMap.getOrDefault(number, 0) + 1);\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        \n        // Filter unique elements\n        for (Integer number : numbers) {\n            if (countMap.get(number) == 1) {\n                result.add(number);\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/27", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"Hello\")\n    \"hELLO\"\n     */\n    public String flip_case(String string) {\n        StringBuilder flippedString = new StringBuilder();\n\n        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                flippedString.append(Character.toUpperCase(c));\n            } else if (Character.isUpperCase(c)) {\n                flippedString.append(Character.toLowerCase(c));\n            } else {\n                flippedString.append(c); // Keep non-alphabetic characters unchanged\n            }\n        }\n\n        return flippedString.toString();\n    }\n}\n"}
{"task_id": "Java/28", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        // Check for empty list\n        if (strings.isEmpty()) {\n            return \"\"; // Return empty string for empty list\n        }\n\n        // Initialize StringBuilder\n        StringBuilder result = new StringBuilder();\n\n        // Iterate through the list\n        for (String str : strings) {\n            // Append strings\n            result.append(str);\n        }\n\n        // Convert to String and return the result\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/29", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix(List.of(), \"a\")\n    []\n    >>> filter_by_prefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        // Input Validation\n        if (strings == null || strings.isEmpty() || prefix == null) {\n            return Collections.emptyList();\n        }\n\n        // Filtering Logic\n        return strings.stream()\n                      .filter(str -> str.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/30", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> get_positive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> get_positive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n    */\n    public List<Integer> get_positive(List<Integer> l) {\n        // Check for empty list\n        if (l.isEmpty()) {\n            return Collections.emptyList();\n        }\n        \n        // Filter positive numbers\n        return l.stream()\n                .filter(num -> num > 0) // Keep only positive numbers\n                .collect(Collectors.toList()); // Collect results into a list\n    }\n}\n"}
{"task_id": "Java/31", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    false\n    >>> is_prime(101)\n    true\n    >>> is_prime(11)\n    true\n    >>> is_prime(13441)\n    true\n    >>> is_prime(61)\n    true\n    >>> is_prime(4)\n    false\n    >>> is_prime(1)\n    false\n     */\n    public boolean is_prime(int n) {\n        // Input Validation\n        if (n <= 1) {\n            return false;\n        }\n        \n        // Divisor Check\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false; // Found a divisor\n            }\n        }\n        \n        // Return True\n        return true; // No divisors found, n is prime\n    }\n}\n"}
{"task_id": "Java/32", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> find_zero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> find_zero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double find_zero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"The number of coefficients must be even.\");\n        }\n\n        double left = -1000; // Start of the interval\n        double right = 1000; // End of the interval\n        double mid = 0;\n\n        // Bisection method to find a root\n        while (right - left > 1e-7) {\n            mid = (left + right) / 2;\n            double fMid = poly(xs, mid);\n            if (fMid == 0) {\n                return mid; // Found exact root\n            } else if (fMid * poly(xs, left) < 0) {\n                right = mid; // Root is in the left half\n            } else {\n                left = mid; // Root is in the right half\n            }\n        }\n        return mid; // Return the midpoint as the root\n    }\n}\n"}
{"task_id": "Java/33", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted in ascending order.\n    >>> sort_third(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sort_third(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sort_third(List<Integer> l) {\n        List<Integer> result = new ArrayList<>(l);\n        List<Integer> valuesToSort = new ArrayList<>();\n\n        // Extract values at indices divisible by three\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                valuesToSort.add(l.get(i));\n            }\n        }\n\n        // Sort the extracted values\n        Collections.sort(valuesToSort);\n\n        // Replace values in the result list\n        int sortIndex = 0;\n        for (int i = 0; i < result.size(); i++) {\n            if (i % 3 == 0) {\n                result.set(i, valuesToSort.get(sortIndex));\n                sortIndex++;\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/34", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n    */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> uniqueSet = new HashSet<>(l);\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n        Collections.sort(uniqueList);\n        return uniqueList;\n    }\n}\n"}
{"task_id": "Java/35", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> max_element(Arrays.asList(1, 2, 3))\n    3\n    >>> max_element(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int max_element(List<Integer> l) {\n        // Input Validation\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be null or empty\");\n        }\n\n        // Initialize Maximum Variable\n        int maxValue = l.get(0);\n\n        // Iterate Through the List\n        for (int num : l) {\n            // Update Maximum Value\n            if (num > maxValue) {\n                maxValue = num;\n            }\n        }\n\n        // Return the Maximum Value\n        return maxValue;\n    }\n}\n"}
{"task_id": "Java/36", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n     */\n    public int fizz_buzz(int n) {\n        int countOfSevens = 0; // Initialize counter\n\n        // Loop through integers\n        for (int i = 1; i < n; i++) {\n            // Check divisibility\n            if (i % 11 == 0 || i % 13 == 0) {\n                // Convert to string\n                String numberString = Integer.toString(i);\n                // Count '7's\n                for (char c : numberString.toCharArray()) {\n                    if (c == '7') {\n                        countOfSevens++; // Increment count\n                    }\n                }\n            }\n        }\n\n        // Return the result\n        return countOfSevens;\n    }\n}\n"}
{"task_id": "Java/37", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indices, while its values at the even indices are equal\n    to the values of the even indices of l, but sorted.\n    >>> sort_even(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sort_even(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sort_even(List<Integer> l) {\n        List<Integer> evenIndexedValues = new ArrayList<>();\n        List<Integer> result = new ArrayList<>(Collections.nCopies(l.size(), 0));\n\n        // Loop through the input list\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                evenIndexedValues.add(l.get(i));\n            } else {\n                result.set(i, l.get(i));\n            }\n        }\n\n        // Sort the even indexed values\n        Collections.sort(evenIndexedValues);\n\n        // Repopulate the result list\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.set(i, evenIndexedValues.get(i / 2));\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/38", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decode_cyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(groups.get(i).length() - 1) + groups.get(i).substring(0, groups.get(i).length() - 1));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n"}
{"task_id": "Java/39", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n     */\n    public int prime_fib(int n) {\n        List<Integer> primeFibs = new ArrayList<>();\n        int a = 0, b = 1;\n\n        while (primeFibs.size() < n) {\n            int fib = a + b;\n            a = b;\n            b = fib;\n\n            if (isPrime(fib)) {\n                primeFibs.add(fib);\n            }\n        }\n\n        return primeFibs.get(n - 1); // Return the n-th prime Fibonacci\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/40", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triples_sum_to_zero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triples_sum_to_zero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triples_sum_to_zero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triples_sum_to_zero(Arrays.asList(1))\n    false\n     */\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        // Step 1: Input Validation\n        if (l.size() < 3) {\n            return false;\n        }\n\n        // Step 2: Sort the List\n        Collections.sort(l);\n\n        // Step 3: Iterate through the list\n        for (int i = 0; i < l.size() - 2; i++) {\n            // Skip duplicates\n            if (i > 0 && l.get(i).equals(l.get(i - 1))) {\n                continue;\n            }\n\n            // Step 4: Initialize two pointers\n            int left = i + 1;\n            int right = l.size() - 1;\n\n            // Step 5: Two-Pointer Technique\n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                if (sum == 0) {\n                    return true; // Found a triplet\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n\n        // Step 6: Return Result\n        return false; // No triplet found\n    }\n}\n"}
{"task_id": "Java/41", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int car_race_collision(int n) {\n        // Calculate total collisions\n        return n * n; // Each car from one direction collides with each car from the opposite direction\n    }\n}\n"}
{"task_id": "Java/42", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incr_list(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incr_list(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incr_list(List<Integer> l) {\n        // Input Validation\n        if (l == null || l.isEmpty()) {\n            return new ArrayList<>(); // Return empty list if input is null or empty\n        }\n\n        // Initialize Output List\n        List<Integer> incrementedList = new ArrayList<>();\n\n        // Iterate Through Input List\n        for (Integer number : l) {\n            // Increment Each Integer\n            incrementedList.add(number + 1);\n        }\n\n        // Return the Output List\n        return incrementedList;\n    }\n}\n"}
{"task_id": "Java/43", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairs_sum_to_zero(Arrays.asList(1))\n    false\n     */\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        // Step 2: Input Validation\n        if (l == null || l.size() < 2) {\n            return false;\n        }\n\n        // Step 3: Initialize a HashSet\n        Set<Integer> seenNumbers = new HashSet<>();\n\n        // Step 4: Iterate Over the List\n        for (Integer num : l) {\n            int complement = -num;\n            if (seenNumbers.contains(complement)) {\n                return true; // Found a pair\n            }\n            seenNumbers.add(num); // Add current number to the set\n        }\n\n        // Step 5: Return False\n        return false; // No pairs found\n    }\n}\n"}
{"task_id": "Java/44", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\n    >>> change_base(7, 2)\n    \"111\"\n     */\n    public String change_base(int x, int base) {\n        // Input Validation\n        if (x < 0) {\n            throw new IllegalArgumentException(\"Input number must be non-negative.\");\n        }\n        if (base < 2 || base > 9) {\n            throw new IllegalArgumentException(\"Base must be between 2 and 9.\");\n        }\n\n        // Initialize StringBuilder\n        StringBuilder result = new StringBuilder();\n\n        // Handle special case for zero\n        if (x == 0) {\n            return \"0\";\n        }\n        \n        // Conversion Logic\n        while (x > 0) {\n            int remainder = x % base; // Get the next digit\n            result.insert(0, remainder); // Prepend the digit\n            x = x / base; // Update x\n        }\n\n        // Return the Result\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/45", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n     */\n    public double triangle_area(double a, double h) {\n        // Input Validation\n        if (a < 0 || h < 0) {\n            throw new IllegalArgumentException(\"Base and height must be non-negative.\");\n        }\n        \n        // Area Calculation\n        double area = 0.5 * a * h;\n        \n        // Return the Result\n        return area;\n    }\n}\n"}
{"task_id": "Java/46", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        // Step 2: Input Validation\n        if (n < 0) {\n            return 0; // or throw an exception\n        }\n\n        // Step 3: Handle Base Cases\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n == 3) return 0;\n\n        // Step 4: Initialize Storage\n        int[] fib4 = new int[n + 1];\n\n        // Step 5: Base Case Initialization\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3] = 0;\n\n        // Step 6: Iterative Calculation\n        for (int i = 4; i <= n; i++) {\n            fib4[i] = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i - 4];\n        }\n\n        // Step 7: Return Result\n        return fib4[n];\n    }\n}\n"}
{"task_id": "Java/47", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    8.0\n     */\n    public double median(List<Integer> l) {\n        // Step 1: Input Validation\n        if (l == null) {\n            throw new IllegalArgumentException(\"Input list cannot be null\");\n        }\n        if (l.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list cannot be empty\");\n        }\n\n        // Step 2: Sort the List\n        Collections.sort(l);\n\n        // Step 3: Calculate the Median\n        int size = l.size();\n        if (size % 2 == 1) {\n            // Odd number of elements\n            return l.get(size / 2);\n        } else {\n            // Even number of elements\n            double middle1 = l.get(size / 2 - 1);\n            double middle2 = l.get(size / 2);\n            return (middle1 + middle2) / 2.0;\n        }\n    }\n}\n"}
{"task_id": "Java/48", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n     */\n    public boolean is_palindrome(String text) {\n        if (text == null) {\n            return false;\n        }\n        if (text.isEmpty()) {\n            return true;\n        }\n\n        text = text.toLowerCase();\n        int left = 0;\n        int right = text.length() - 1;\n\n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/49", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        // Step 1: Edge case handling\n        if (p <= 0) {\n            throw new IllegalArgumentException(\"p must be greater than 0\");\n        }\n        if (n == 0) {\n            return 1;\n        }\n        if (p == 1) {\n            return 0;\n        }\n\n        // Step 2: Calculate 2^n using exponentiation by squaring\n        long result = 1; // Use long to handle larger values\n        long base = 2;   // Base is 2\n        int exponent = n;\n\n        while (exponent > 0) {\n            if (exponent % 2 == 1) { // If exponent is odd\n                result = (result * base) % p;\n            }\n            base = (base * base) % p; // Square the base\n            exponent /= 2; // Divide the exponent by 2\n        }\n\n        // Step 3: Return the result modulo p\n        return (int) (result % p);\n    }\n}\n"}
{"task_id": "Java/50", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (ch >= 'a' && ch <= 'z') {\n                sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n            } else {\n                sb.append(ch); // Append unchanged for non-lowercase letters\n            }\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decode_shift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (ch >= 'a' && ch <= 'z') {\n                sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26)));\n            } else {\n                sb.append(ch); // Append unchanged for non-lowercase letters\n            }\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/51", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels(\"\")\n    \"\"\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> remove_vowels(\"abcdef\")\n    \"bcdf\"\n    >>> remove_vowels(\"aaaaa\")\n    \"\"\n    >>> remove_vowels(\"aaBAA\")\n    \"B\"\n    >>> remove_vowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String remove_vowels(String text) {\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        StringBuilder result = new StringBuilder();\n\n        for (char c : text.toCharArray()) {\n            if (!vowels.contains(c)) {\n                result.append(c);\n            }\n        }\n\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/52", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> below_threshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean below_threshold(List<Integer> l, int t) {\n        for (Integer number : l) {\n            if (number >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/53", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    */\n    public int add(int x, int y) {\n        return x + y; // Implement Addition Logic\n    }\n}\n"}
{"task_id": "Java/54", "generation": "import java.util.HashSet;\nimport java.util.Set;\n\nclass Solution {\n    /**\n    Check if two words have the same kind of characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean same_chars(String s0, String s1) {\n        // Step 1: Input validation\n        if (s0 == null || s1 == null) {\n            return false;\n        }\n\n        // Step 2: Create sets for unique characters\n        Set<Character> set1 = new HashSet<>();\n        Set<Character> set2 = new HashSet<>();\n\n        // Step 3: Populate the first set\n        for (char c : s0.toCharArray()) {\n            set1.add(c);\n        }\n\n        // Step 4: Populate the second set\n        for (char c : s1.toCharArray()) {\n            set2.add(c);\n        }\n\n        // Step 5: Compare the two sets\n        return set1.equals(set2);\n    }\n}\n"}
{"task_id": "Java/55", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        // Step 2: Input Validation\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Input must be a non-negative integer.\");\n        }\n        \n        // Step 3: Handle Base Cases\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n\n        // Step 4: Implement Recursive Logic\n        return fib(n - 1) + fib(n - 2);\n        \n        // Step 5: (Optional) Implement Iterative Logic\n        // int a = 0, b = 1;\n        // for (int i = 2; i <= n; i++) {\n        //     int temp = a + b;\n        //     a = b;\n        //     b = temp;\n        // }\n        // return b;\n    }\n}\n"}
{"task_id": "Java/56", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n     */\n    public boolean correct_bracketing(String brackets) {\n        int openCount = 0;\n\n        for (char ch : brackets.toCharArray()) {\n            if (ch == '<') {\n                openCount++;\n            } else if (ch == '>') {\n                openCount--;\n            }\n            \n            // If at any point openCount is negative, return false\n            if (openCount < 0) {\n                return false;\n            }\n        }\n\n        // Return true if all opening brackets are matched\n        return openCount == 0;\n    }\n}\n"}
{"task_id": "Java/57", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n    */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() <= 1) {\n            return true; // Edge case\n        }\n\n        boolean increasing = true;\n        boolean decreasing = true;\n\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1)) {\n                increasing = false;\n            }\n            if (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n            }\n        }\n\n        return increasing || decreasing;\n    }\n}\n"}
{"task_id": "Java/58", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n    */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        // Step 1: Create sets from the lists to remove duplicates\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        \n        // Step 2: Retain only the common elements\n        set1.retainAll(set2);\n        \n        // Step 3: Convert the set back to a list\n        List<Integer> commonList = new ArrayList<>(set1);\n        \n        // Step 4: Sort the list\n        Collections.sort(commonList);\n        \n        // Step 5: Return the sorted list of common elements\n        return commonList;\n    }\n}\n"}
{"task_id": "Java/59", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    >>> largest_prime_factor(600851475143)\n    6857\n     */\n    public long largest_prime_factor(long n) {\n        long largestPrime = 0;\n\n        // Check for factors from 2 to sqrt(n)\n        for (long i = 2; i <= Math.sqrt(n); i++) {\n            while (n % i == 0) {\n                largestPrime = i; // Update largestPrime\n                n /= i; // Reduce n\n            }\n        }\n\n        // If n is still greater than 1, it is prime\n        if (n > 1) {\n            largestPrime = n;\n        }\n\n        return largestPrime;\n    }\n}\n"}
{"task_id": "Java/60", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n     */\n    public int sum_to_n(int n) {\n        if (n < 1) {\n            return 0; // Handle case for non-positive integers\n        }\n        return n * (n + 1) / 2; // Using the formula for the sum of the first n natural numbers\n    }\n}\n"}
{"task_id": "Java/61", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n     */\n    public boolean correct_bracketing(String brackets) {\n        int balance = 0; // Initialize a counter\n\n        for (char ch : brackets.toCharArray()) { // Loop through each character\n            if (ch == '(') {\n                balance++; // Increment for opening bracket\n            } else if (ch == ')') {\n                balance--; // Decrement for closing bracket\n            }\n\n            if (balance < 0) { // Check for immediate imbalance\n                return false; // Unmatched closing bracket\n            }\n        }\n\n        return balance == 0; // Final balance check\n    }\n}\n"}
{"task_id": "Java/62", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        if (xs.isEmpty()) return new ArrayList<>();\n        if (xs.size() == 1) return new ArrayList<>();\n\n        List<Integer> derivativeCoefficients = new ArrayList<>();\n\n        for (int i = 1; i < xs.size(); i++) {\n            derivativeCoefficients.add(i * xs.get(i));\n        }\n\n        return derivativeCoefficients;\n    }\n}\n"}
{"task_id": "Java/63", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        // Step 2: Input Validation\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Input must be a non-negative integer.\");\n        }\n        \n        // Step 3: Base Case Handling\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n\n        // Step 4: Memoization Setup\n        int[] memo = new int[n + 1];\n        memo[0] = 0;\n        memo[1] = 0;\n        memo[2] = 1;\n\n        // Step 5: Iterative Loop\n        for (int i = 3; i <= n; i++) {\n            memo[i] = memo[i - 1] + memo[i - 2] + memo[i - 3];\n        }\n\n        // Step 6: Return the Result\n        return memo[n];\n    }\n}\n"}
{"task_id": "Java/64", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n     */\n    public int vowels_count(String s) {\n        // Initialize variables\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        int count = 0;\n\n        // Loop through the string\n        for (int i = 0; i < s.length(); i++) {\n            char currentChar = s.charAt(i);\n            // Increment the counter if currentChar is a vowel\n            if (vowels.contains(currentChar)) {\n                count++;\n            }\n        }\n\n        // Check for 'y' at the end\n        if (s.length() > 0 && (s.charAt(s.length() - 1) == 'y' || s.charAt(s.length() - 1) == 'Y')) {\n            count++;\n        }\n\n        // Return the count\n        return count;\n    }\n}\n"}
{"task_id": "Java/65", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n     */\n    public String circular_shift(int x, int shift) {\n        if (x < 0 || shift < 0) {\n            throw new IllegalArgumentException(\"x and shift must be non-negative.\");\n        }\n\n        String strX = String.valueOf(x);\n        int length = strX.length();\n\n        if (shift > length) {\n            return new StringBuilder(strX).reverse().toString();\n        }\n\n        int effectiveShift = shift % length;\n        String part1 = strX.substring(length - effectiveShift);\n        String part2 = strX.substring(0, length - effectiveShift);\n        return part1 + part2;\n    }\n}\n"}
{"task_id": "Java/66", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        // Check for empty input\n        if (s == null || s.isEmpty()) {\n            return 0;\n        }\n\n        // Initialize sum variable\n        int sum = 0;\n\n        // Iterate through the string\n        for (char c : s.toCharArray()) {\n            // Identify uppercase characters\n            if (Character.isUpperCase(c)) {\n                // Calculate ASCII value and add to sum\n                sum += (int) c;\n            }\n        }\n\n        // Return the total sum\n        return sum;\n    }\n}\n"}
{"task_id": "Java/67", "generation": "import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for example:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruit_distribution(String s, int n) {\n        if (s == null || s.isEmpty()) {\n            return -1; // or throw an exception\n        }\n\n        Pattern pattern = Pattern.compile(\"(\\\\d+) apples and (\\\\d+) oranges\");\n        Matcher matcher = pattern.matcher(s);\n\n        if (!matcher.find()) {\n            return -1; // or throw an exception for invalid format\n        }\n\n        int apples = Integer.parseInt(matcher.group(1));\n        int oranges = Integer.parseInt(matcher.group(2));\n\n        int mangoes = n - (apples + oranges);\n        \n        return Math.max(mangoes, 0); // Ensure non-negative result\n    }\n}\n"}
{"task_id": "Java/68", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smallest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return new ArrayList<>(); // Check for empty input\n        }\n\n        int smallestEvenValue = Integer.MAX_VALUE; // Initialize smallest even value\n        int smallestIndex = -1; // Initialize index of smallest even value\n\n        for (int i = 0; i < arr.size(); i++) { // Iterate through the list\n            if (arr.get(i) % 2 == 0) { // Check if the number is even\n                if (arr.get(i) < smallestEvenValue) { // Compare with smallest even value\n                    smallestEvenValue = arr.get(i);\n                    smallestIndex = i; // Update index\n                }\n            }\n        }\n\n        if (smallestIndex == -1) { // Check if no even values were found\n            return new ArrayList<>();\n        }\n\n        return Arrays.asList(smallestEvenValue, smallestIndex); // Return the result\n    }\n}\n"}
{"task_id": "Java/69", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        // Step 1: Initialize frequency map\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        // Step 2: Count frequencies\n        for (Integer num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        // Step 3: Determine the greatest integer\n        int greatest = -1;\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int key = entry.getKey();\n            int frequency = entry.getValue();\n            \n            // Check if frequency is greater than or equal to the integer itself\n            if (frequency >= key) {\n                greatest = Math.max(greatest, key);\n            }\n        }\n        \n        // Step 4: Return the result\n        return greatest;\n    }\n}\n"}
{"task_id": "Java/70", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strange_sort_list(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strange_sort_list(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        List<Integer> sortedList = new ArrayList<>(lst);\n        Collections.sort(sortedList);\n\n        List<Integer> result = new ArrayList<>();\n        int left = 0;\n        int right = sortedList.size() - 1;\n\n        while (left <= right) {\n            if (left == right) {\n                result.add(sortedList.get(left));\n            } else {\n                result.add(sortedList.get(left));\n                result.add(sortedList.get(right));\n            }\n            left++;\n            right--;\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/71", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n     */\n    public double triangle_area(double a, double b, double c) {\n        // Step 1: Input Validation\n        if (a <= 0 || b <= 0 || c <= 0) {\n            return -1;\n        }\n\n        // Step 2: Triangle Validity Check\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n\n        // Step 3: Calculate Area using Heron's Formula\n        double s = (a + b + c) / 2;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\n        // Step 4: Format the Output\n        return Math.round(area * 100.0) / 100.0; // Rounding to 2 decimal points\n    }\n}\n"}
{"task_id": "Java/72", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean will_it_fly(List<Integer> q, int w) {\n        boolean isPalindrome = true;\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (!q.get(i).equals(q.get(q.size() - 1 - i))) {\n                isPalindrome = false;\n                break;\n            }\n        }\n\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n\n        return isPalindrome && sum <= w;\n    }\n}\n"}
{"task_id": "Java/73", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallest_change(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallest_change(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallest_change(List<Integer> arr) {\n        int changeCount = 0;\n        int n = arr.size();\n        \n        for (int i = 0; i < n / 2; i++) {\n            if (!arr.get(i).equals(arr.get(n - 1 - i))) {\n                changeCount++;\n            }\n        }\n        \n        return changeCount;\n    }\n}\n"}
{"task_id": "Java/74", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match(Arrays.asList(), Arrays.asList()) -> []\n    total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    total_match(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        int count1 = calculateTotalChars(lst1);\n        int count2 = calculateTotalChars(lst2);\n        \n        if (count1 < count2) {\n            return lst1;\n        } else {\n            return lst2; // This includes the case where count1 == count2\n        }\n    }\n\n    private int calculateTotalChars(List<String> lst) {\n        int totalChars = 0;\n        for (String str : lst) {\n            totalChars += str.length();\n        }\n        return totalChars;\n    }\n}\n"}
{"task_id": "Java/75", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_multiply_prime(int a) {\n        if (a < 1) return false;\n        List<Integer> primes = generatePrimes();\n        for (int i = 0; i < primes.size(); i++) {\n            for (int j = i; j < primes.size(); j++) {\n                for (int k = j; k < primes.size(); k++) {\n                    if (primes.get(i) * primes.get(j) * primes.get(k) == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    private List<Integer> generatePrimes() {\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < 100; i++) {\n            boolean isPrime = true;\n            for (int j = 2; j <= Math.sqrt(i); j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n}\n"}
{"task_id": "Java/76", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n     */\n    public boolean is_simple_power(int x, int n) {\n        // Input Validation\n        if (n <= 0) return false; // n must be greater than 0\n        if (x < 1) return false; // x must be at least 1\n\n        // Special Cases\n        if (n == 1) return x == 1; // Only 1 is a power of 1\n        if (x == 1) return true; // Any n raised to 0 is 1\n\n        // Power Calculation\n        int power = 1; // Start with n^0\n        while (power < x) {\n            power *= n; // Calculate n^k\n            if (power == x) return true; // Found a match\n        }\n\n        return false; // No match found\n    }\n}\n"}
{"task_id": "Java/77", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        // Handle edge cases\n        if (a == 0 || a == 1) {\n            return true;\n        }\n\n        // Determine the range of integers to check\n        int max = (int) Math.cbrt(Math.abs(a));\n\n        // Iterate through possible integer values\n        for (int i = -max; i <= max; i++) {\n            // Calculate the cube and compare\n            if (i * i * i == a) {\n                return true; // Found a match\n            }\n        }\n\n        // Return false if no match found\n        return false;\n    }\n}\n"}
{"task_id": "Java/78", "generation": "import java.util.*;\n\nclass Solution {\n    public int hex_key(String num) {\n        // Step 2: Check if input is empty\n        if (num.isEmpty()) {\n            return 0;\n        }\n\n        // Step 3: Initialize a counter for prime hexadecimal digits\n        int primeCount = 0;\n\n        // Step 4: Loop through each character in the input string\n        for (char ch : num.toCharArray()) {\n            int decimalValue = 0;\n\n            // Step 5: Convert the character to its decimal equivalent\n            if (ch >= '0' && ch <= '9') {\n                decimalValue = ch - '0'; // Convert '0'-'9' to 0-9\n            } else if (ch >= 'A' && ch <= 'F') {\n                decimalValue = ch - 'A' + 10; // Convert 'A'-'F' to 10-15\n            }\n\n            // Step 6: Check if the decimal value is prime\n            if (isPrime(decimalValue)) {\n                primeCount++; // Increment the counter if prime\n            }\n        }\n\n        // Step 7: Return the count of prime hexadecimal digits\n        return primeCount;\n    }\n\n    // Helper method to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) return false; // 0 and 1 are not prime\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false; // Found a divisor, not prime\n            }\n        }\n        return true; // No divisors found, it is prime\n    }\n}\n"}
{"task_id": "Java/79", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   // returns \"db1111db\"\n    decimal_to_binary(32)   // returns \"db100000db\"\n     */\n    public String decimal_to_binary(int decimal) {\n        // Convert decimal to binary string\n        String binaryString = Integer.toBinaryString(decimal);\n        \n        // Format the binary string with 'db' prefix and suffix\n        String formattedString = \"db\" + binaryString + \"db\";\n        \n        return formattedString;\n    }\n}\n"}
{"task_id": "Java/80", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => false\n    is_happy(aa) => false\n    is_happy(abcd) => true\n    is_happy(aabb) => false\n    is_happy(adb) => true\n    is_happy(xyy) => false\n     */\n    public boolean is_happy(String s) {\n        // Step 1: Check string length\n        if (s.length() < 3) {\n            return false;\n        }\n\n        // Step 2: Loop through the string\n        for (int i = 0; i <= s.length() - 3; i++) {\n            // Step 3: Check distinct characters in the triplet\n            char first = s.charAt(i);\n            char second = s.charAt(i + 1);\n            char third = s.charAt(i + 2);\n            \n            // Use a Set to check for distinct characters\n            Set<Character> charSet = new HashSet<>();\n            charSet.add(first);\n            charSet.add(second);\n            charSet.add(third);\n            \n            // If the size of the set is not 3, return false\n            if (charSet.size() != 3) {\n                return false;\n            }\n        }\n\n        // Step 4: If all triplets are distinct, return true\n        return true;\n    }\n}\n"}
{"task_id": "Java/81", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numerical_letter_grade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n\n        for (Double gpa : grades) {\n            if (gpa.equals(4.0)) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n\n        return letterGrades;\n    }\n}\n"}
{"task_id": "Java/82", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    prime_length(\"Hello\") == true\n    prime_length(\"abcdcba\") == true\n    prime_length(\"kittens\") == true\n    prime_length(\"orange\") == false\n     */\n    public boolean prime_length(String string) {\n        int length = string.length();\n        return isPrime(length);\n    }\n\n    private boolean isPrime(int number) {\n        if (number < 2) return false;\n        for (int i = 2; i <= Math.sqrt(number); i++) {\n            if (number % i == 0) {\n                return false; // Found a factor, not prime\n            }\n        }\n        return true; // No factors found, it's prime\n    }\n}\n"}
{"task_id": "Java/83", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int starts_one_ends(int n) {\n        if (n == 1) {\n            return 1; // Only the number '1'\n        }\n\n        int countStartsWith1 = (int) Math.pow(10, n - 1);\n        int countEndsWith1 = (int) Math.pow(10, n - 1);\n        int countStartsAndEndsWith1 = (int) Math.pow(10, n - 2);\n\n        return countStartsWith1 + countEndsWith1 - countStartsAndEndsWith1;\n    }\n}\n"}
{"task_id": "Java/84", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return in binary the total sum of its digits.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        if (N < 0 || N > 10000) {\n            throw new IllegalArgumentException(\"N must be between 0 and 10000.\");\n        }\n\n        int sum = 0;\n        String numberString = String.valueOf(N);\n        for (char digit : numberString.toCharArray()) {\n            sum += Character.getNumericValue(digit);\n        }\n\n        String binarySum = Integer.toBinaryString(sum);\n        return binarySum;\n    }\n}\n"}
{"task_id": "Java/85", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/86", "generation": "import java.util.*;\n\nclass Solution {\n    public String anti_shuffle(String s) {\n        if (s == null || s.isEmpty()) {\n            return s;\n        }\n\n        StringBuilder result = new StringBuilder();\n        String[] words = s.split(\"(?<=\\\\s)|(?=\\\\s)\"); // Split while preserving spaces\n\n        for (String word : words) {\n            if (word.trim().isEmpty()) {\n                result.append(word); // Append spaces directly\n            } else {\n                char[] charArray = word.toCharArray();\n                Arrays.sort(charArray); // Sort characters in ascending order\n                result.append(charArray); // Append sorted characters\n            }\n        }\n\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/87", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        List<List<Integer>> coordinates = new ArrayList<>();\n\n        // Iterate through each row\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            \n            // Check for matches\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    coordinates.add(Arrays.asList(i, j)); // Store the coordinate\n                }\n            }\n        }\n\n        // Sort the coordinates\n        coordinates.sort((a, b) -> {\n            if (!a.get(0).equals(b.get(0))) {\n                return a.get(0) - b.get(0); // Sort by row index\n            } else {\n                return b.get(1) - a.get(1); // Sort by column index (descending)\n            }\n        });\n\n        // Return the result\n        return coordinates;\n    }\n}\n"}
{"task_id": "Java/88", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array(Arrays.asList()) => []\n    * sort_array(Arrays.asList(5)) => [5]\n    * sort_array(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sort_array(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sort_array(List<Integer> array) {\n        // Step 1: Handle edge cases\n        if (array.isEmpty()) {\n            return new ArrayList<>(); // Return empty list for empty input\n        }\n        if (array.size() == 1) {\n            return new ArrayList<>(array); // Return the single element list\n        }\n\n        // Step 2: Calculate first and last elements\n        int firstElement = array.get(0);\n        int lastElement = array.get(array.size() - 1);\n        \n        // Step 3: Compute the sum\n        int sum = firstElement + lastElement;\n\n        // Step 4: Sort based on the sum's parity\n        List<Integer> sortedList = new ArrayList<>(array); // Create a copy of the original array\n        if (sum % 2 == 0) {\n            // Sort in descending order\n            Collections.sort(sortedList, Collections.reverseOrder());\n        } else {\n            // Sort in ascending order\n            Collections.sort(sortedList);\n        }\n\n        // Step 5: Return the sorted list\n        return sortedList;\n    }\n}\n"}
{"task_id": "Java/89", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        StringBuilder result = new StringBuilder();\n\n        for (char c : s.toCharArray()) {\n            if (c >= 'a' && c <= 'z') {\n                char newChar = (char) ((c - 'a' + 4) % 26 + 'a');\n                result.append(newChar);\n            } else {\n                result.append(c);\n            }\n        }\n\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/90", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    next_smallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    next_smallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    next_smallest(Arrays.asList()) == Optional.empty\n    next_smallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        // Step 1: Input Validation\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n\n        // Step 2: Find distinct elements\n        Set<Integer> distinctElements = new HashSet<>(lst);\n\n        // Step 3: Check for distinct count\n        if (distinctElements.size() < 2) {\n            return Optional.empty();\n        }\n\n        // Step 4: Sort the distinct elements\n        List<Integer> sortedDistinct = new ArrayList<>(distinctElements);\n        Collections.sort(sortedDistinct);\n\n        // Step 5: Return the second smallest element\n        return Optional.of(sortedDistinct.get(1));\n    }\n}\n"}
{"task_id": "Java/91", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int is_bored(String S) {\n        String[] sentences = S.split(\"[.!?]\");\n        int boredomCount = 0;\n\n        for (String sentence : sentences) {\n            String trimmedSentence = sentence.trim();\n            if (trimmedSentence.startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n        \n        return boredomCount;\n    }\n}\n"}
{"task_id": "Java/92", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) -> true\n\n    any_int(3, 2, 2) -> false\n\n    any_int(3, -2, 1) -> true\n\n    any_int(3.6, -2.2, 2) -> false\n     */\n    public boolean any_int(Object x, Object y, Object z) {\n        // Step 1: Input Validation\n        if (!(x instanceof Integer) || !(y instanceof Integer) || !(z instanceof Integer)) {\n            return false;\n        }\n        \n        // Step 2: Cast to Integer\n        Integer num1 = (Integer) x;\n        Integer num2 = (Integer) y;\n        Integer num3 = (Integer) z;\n\n        // Step 3: Perform Comparisons\n        return (num1.equals(num2 + num3) || \n                num2.equals(num1 + num3) || \n                num3.equals(num1 + num2));\n    }\n}\n"}
{"task_id": "Java/93", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        StringBuilder encodedMessage = new StringBuilder();\n\n        for (char ch : message.toCharArray()) {\n            if (isVowel(ch)) {\n                encodedMessage.append(replaceVowel(ch));\n            } else if (Character.isLetter(ch)) {\n                encodedMessage.append(swapCase(ch));\n            } else {\n                encodedMessage.append(ch); // Preserve non-letter characters\n            }\n        }\n\n        return encodedMessage.toString();\n    }\n\n    private boolean isVowel(char ch) {\n        return \"aeiouAEIOU\".indexOf(ch) != -1;\n    }\n\n    private char replaceVowel(char ch) {\n        switch (ch) {\n            case 'a': return 'c';\n            case 'e': return 'g';\n            case 'i': return 'k';\n            case 'o': return 'q';\n            case 'u': return 'w';\n            case 'A': return 'C';\n            case 'E': return 'G';\n            case 'I': return 'K';\n            case 'O': return 'Q';\n            case 'U': return 'W';\n            default: return ch; // Should not reach here\n        }\n    }\n\n    private char swapCase(char ch) {\n        return Character.isUpperCase(ch) ? Character.toLowerCase(ch) : Character.toUpperCase(ch);\n    }\n}\n"}
{"task_id": "Java/94", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int largestPrime = -1; // Initialize to -1 to indicate no prime found\n\n        // Step 3: Find the largest prime\n        for (int num : lst) {\n            if (isPrime(num) && num > largestPrime) {\n                largestPrime = num;\n            }\n        }\n\n        // Step 4: Calculate the sum of digits if a prime was found\n        if (largestPrime != -1) {\n            return sumOfDigits(largestPrime);\n        } else {\n            return 0; // or any other indication for no prime found\n        }\n    }\n\n    private boolean isPrime(int number) {\n        if (number <= 1) return false; // 0 and 1 are not prime numbers\n        for (int i = 2; i <= Math.sqrt(number); i++) {\n            if (number % i == 0) {\n                return false; // Found a divisor, not prime\n            }\n        }\n        return true; // No divisors found, it is prime\n    }\n\n    private int sumOfDigits(int number) {\n        int sum = 0;\n        while (number > 0) {\n            sum += number % 10; // Add the last digit to sum\n            number /= 10; // Remove the last digit\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/95", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings and all keys are in lower case or in upper case, else return False.\n    The function should return False if the given map is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        // Check for empty map\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        // Initialize case type variable\n        String caseType = null;\n\n        // Iterate over map keys\n        for (Object key : dict.keySet()) {\n            // Check if key is a String\n            if (!(key instanceof String)) {\n                return false;\n            }\n\n            String strKey = (String) key;\n\n            // Determine case for the first key\n            if (caseType == null) {\n                caseType = strKey.equals(strKey.toLowerCase()) ? \"lower\" : \"upper\";\n            } else {\n                // Check if current key matches the case type\n                if (caseType.equals(\"lower\") && !strKey.equals(strKey.toLowerCase())) {\n                    return false;\n                }\n                if (caseType.equals(\"upper\") && !strKey.equals(strKey.toUpperCase())) {\n                    return false;\n                }\n            }\n        }\n\n        // All checks passed\n        return true;\n    }\n}\n"}
{"task_id": "Java/96", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Implement a function that takes a non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> count_up_to(int n) {\n        // Input Validation\n        if (n < 2) {\n            return new ArrayList<>(); // Return empty list\n        }\n\n        // Initialize a List\n        List<Integer> primes = new ArrayList<>();\n\n        // Prime Number Identification\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i); // Collecting Prime Numbers\n            }\n        }\n\n        // Return the Result\n        return primes;\n    }\n\n    // Helper Function for Prime Check\n    private boolean isPrime(int num) {\n        if (num < 2) return false;\n        for (int j = 2; j * j <= num; j++) {\n            if (num % j == 0) return false;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/97", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        // Step 1: Extract unit digits\n        int unitDigitA = Math.abs(a) % 10; // Get unit digit of a\n        int unitDigitB = Math.abs(b) % 10; // Get unit digit of b\n        \n        // Step 2: Calculate the product\n        int product = unitDigitA * unitDigitB;\n        \n        // Step 3: Return the result\n        return product;\n    }\n}\n"}
{"task_id": "Java/98", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper(\"aBCdEf\") returns 1\n    count_upper(\"abcdefg\") returns 0\n    count_upper(\"dBBE\") returns 0\n     */    \n    public int count_upper(String s) {\n        int count = 0; // Initialize counter\n\n        // Iterate through the string at even indices\n        for (int i = 0; i < s.length(); i += 2) { // Only even indices\n            char currentChar = s.charAt(i); // Get character at even index\n\n            // Check if it is an uppercase vowel\n            if (currentChar == 'A' || currentChar == 'E' || \n                currentChar == 'I' || currentChar == 'O' || \n                currentChar == 'U') {\n                count++; // Increment counter if it is an uppercase vowel\n            }\n        }\n\n        // Return the result\n        return count;\n    }\n}\n"}
{"task_id": "Java/99", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int closest_integer(String value) {\n        try {\n            double number = Double.parseDouble(value);\n            if (number % 1 == 0) {\n                return (int) number; // It's already an integer\n            } else {\n                // Check if equidistant\n                if (Math.abs(number % 1) == 0.5) {\n                    return (number > 0) ? (int) Math.ceil(number) : (int) Math.floor(number);\n                } else {\n                    return (int) Math.round(number);\n                }\n            }\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Invalid input: \" + value);\n        }\n    }\n}\n"}
{"task_id": "Java/100", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> stones = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i == 1) {\n                stones.add(n); // First level\n            } else {\n                int lastCount = stones.get(i - 2); // Get the last level's stone count\n                stones.add(lastCount + 2); // Next odd or even number\n            }\n        }\n        \n        return stones;\n    }\n}\n"}
{"task_id": "Java/101", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    */\n    public List<String> words_string(String s) {\n        // Step 1: Normalize the input\n        String normalizedString = s.trim().replace(\",\", \" \");\n        \n        // Step 2: Split the string into words\n        String[] wordsArray = normalizedString.split(\"\\\\s+\");\n        \n        // Step 3: Convert to List and filter out empty strings\n        List<String> wordsList = new ArrayList<>();\n        for (String word : wordsArray) {\n            if (!word.isEmpty()) {\n                wordsList.add(word);\n            }\n        }\n        \n        // Step 4: Return the result\n        return wordsList;\n    }\n}\n"}
{"task_id": "Java/102", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n     */\n    public int choose_num(int x, int y) {\n        // Step 2: Validate the range\n        if (x > y) {\n            return -1;\n        }\n\n        // Step 3: Find the largest even number\n        int largestEven;\n        if (y % 2 == 0) {\n            largestEven = y; // y is even\n        } else {\n            largestEven = y - 1; // y is odd\n        }\n\n        // Step 4: Check if the largest even number is within the range\n        if (largestEven >= x) {\n            return largestEven; // Valid even number found\n        } else {\n            return -1; // No valid even number in the range\n        }\n    }\n}\n"}
{"task_id": "Java/103", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"1111\"\n    rounded_avg(20, 33) => \"11011\"\n    */\n    public Object rounded_avg(int n, int m) {\n        if (n > m) return -1;\n\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        int count = m - n + 1;\n        double average = (double) sum / count;\n        int roundedAverage = (int) Math.round(average);\n        String binaryString = Integer.toBinaryString(roundedAverage);\n        \n        return binaryString;\n    }\n}\n"}
{"task_id": "Java/104", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> unique_digits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> unique_digits(List<Integer> x) {\n        List<Integer> filteredList = new ArrayList<>();\n\n        for (Integer number : x) {\n            if (!containsEvenDigit(number)) {\n                filteredList.add(number);\n            }\n        }\n\n        Collections.sort(filteredList);\n        return filteredList;\n    }\n\n    private boolean containsEvenDigit(int number) {\n        while (number > 0) {\n            int digit = number % 10;\n            if (digit % 2 == 0) {\n                return true;\n            }\n            number /= 10;\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/105", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> by_length(List<Integer> arr) {\n        // Step 1: Check for empty input\n        if (arr.isEmpty()) {\n            return new ArrayList<>(); // Return empty list\n        }\n\n        // Step 2: Filter valid numbers\n        List<Integer> validNumbers = new ArrayList<>();\n        for (Integer num : arr) {\n            if (num >= 1 && num <= 9) {\n                validNumbers.add(num);\n            }\n        }\n\n        // Step 3: Sort the valid numbers\n        Collections.sort(validNumbers);\n\n        // Step 4: Reverse the sorted list\n        Collections.reverse(validNumbers);\n\n        // Step 5: Map integers to their names\n        String[] names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        List<String> result = new ArrayList<>();\n        for (Integer num : validNumbers) {\n            result.add(names[num - 1]); // num - 1 to get the correct index\n        }\n\n        // Step 6: Return the result\n        return result;\n    }\n}\n"}
{"task_id": "Java/106", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sum(i));\n            }\n        }\n        \n        return result;\n    }\n\n    private int factorial(int i) {\n        int result = 1;\n        for (int j = 1; j <= i; j++) {\n            result *= j;\n        }\n        return result;\n    }\n\n    private int sum(int i) {\n        return i * (i + 1) / 2;\n    }\n}\n"}
{"task_id": "Java/107", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> even_odd_palindrome(int n) {\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        return Arrays.asList(evenCount, oddCount);\n    }\n\n    private boolean isPalindrome(int num) {\n        String str = Integer.toString(num);\n        String reversedStr = new StringBuilder(str).reverse().toString();\n        return str.equals(reversedStr);\n    }\n}\n"}
{"task_id": "Java/108", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums(Arrays.asList()) == 0\n    >>> count_nums(Arrays.asList(-1, 11, -11)) == 1\n    >>> count_nums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int count_nums(List<Integer> arr) {\n        int count = 0;\n        for (Integer number : arr) {\n            if (sum_of_digits(number) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private int sum_of_digits(int number) {\n        int sum = 0;\n        boolean isNegative = number < 0;\n        number = Math.abs(number);\n        \n        while (number > 0) {\n            int digit = number % 10;\n            sum += (isNegative && number == Math.abs(number)) ? -digit : digit;\n            number /= 10;\n        }\n        \n        return sum;\n    }\n}\n"}
{"task_id": "Java/109", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean move_one_ball(List<Integer> arr) {\n        // Step 1: Handle edge cases\n        if (arr.isEmpty()) return true;\n        if (arr.size() == 1) return true;\n\n        // Step 2: Create a sorted version of the array\n        List<Integer> sortedArr = new ArrayList<>(arr);\n        Collections.sort(sortedArr);\n\n        // Step 3: Simulate right shifts and check for sorted order\n        int N = arr.size();\n        for (int i = 0; i < N; i++) {\n            List<Integer> shiftedArr = new ArrayList<>(N);\n            for (int j = 0; j < N; j++) {\n                shiftedArr.add(arr.get((N + j - i) % N));\n            }\n            // Step 4: Check if the shifted array is sorted\n            if (isSorted(shiftedArr)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // Helper function to check if an array is sorted\n    private boolean isSorted(List<Integer> array) {\n        for (int i = 1; i < array.size(); i++) {\n            if (array.get(i) < array.get(i - 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/110", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int oddCount = 0;\n        int evenCount = 0;\n\n        // Count odd numbers in lst1\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCount++;\n            }\n        }\n\n        // Count even numbers in lst2\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCount++;\n            }\n        }\n\n        // Determine if exchange is possible\n        if (evenCount >= oddCount) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}\n"}
{"task_id": "Java/111", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String,Integer> histogram(String test) {\n        if (test.isEmpty()) {\n            return new HashMap<>();\n        }\n\n        String[] letters = test.split(\" \");\n        Map<String, Integer> countMap = new HashMap<>();\n\n        for (String letter : letters) {\n            countMap.put(letter, countMap.getOrDefault(letter, 0) + 1);\n        }\n\n        int maxCount = 0;\n        for (int count : countMap.values()) {\n            if (count > maxCount) {\n                maxCount = count;\n            }\n        }\n\n        Map<String, Integer> resultMap = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : countMap.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                resultMap.put(entry.getKey(), entry.getValue());\n            }\n        }\n\n        return resultMap;\n    }\n}\n"}
{"task_id": "Java/112", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n    */\n    public List<Object> reverse_delete(String s, String c) {\n        // Character Removal\n        Set<Character> charsToRemove = new HashSet<>();\n        for (char ch : c.toCharArray()) {\n            charsToRemove.add(ch);\n        }\n\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!charsToRemove.contains(ch)) {\n                result.append(ch);\n            }\n        }\n\n        String resultString = result.toString();\n\n        // Palindrome Check\n        boolean isPalindrome = isPalindrome(resultString);\n\n        // Return the Result\n        List<Object> output = new ArrayList<>();\n        output.add(resultString);\n        output.add(isPalindrome);\n        return output;\n    }\n\n    private boolean isPalindrome(String str) {\n        return str.equals(new StringBuilder(str).reverse().toString());\n    }\n}\n"}
{"task_id": "Java/113", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> odd_count(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        \n        for (String str : lst) {\n            int oddCount = 0;\n            for (char c : str.toCharArray()) {\n                if (c % 2 != 0) { // Check if the digit is odd\n                    oddCount++;\n                }\n            }\n            String output = \"the number of odd elements \" + oddCount + \"n the str\" + oddCount + \"ng \" + oddCount + \" of the \" + oddCount + \"nput.\";\n            result.add(output);\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/114", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        if (nums == null || nums.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list must not be null or empty.\");\n        }\n\n        int minSum = Integer.MAX_VALUE;\n        for (int start = 0; start < nums.size(); start++) {\n            int currentSum = 0;\n            for (int end = start; end < nums.size(); end++) {\n                currentSum += nums.get(end);\n                minSum = Math.min(minSum, currentSum);\n            }\n        }\n        \n        return minSum;\n    }\n}\n"}
{"task_id": "Java/115", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity. Can't use buckets from other wells to extract water from one well.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        int totalBucketsLowered = 0;\n\n        // Iterate through each well (row)\n        for (List<Integer> well : grid) {\n            int waterUnits = 0;\n\n            // Count water units in the current well\n            for (int water : well) {\n                if (water == 1) {\n                    waterUnits++;\n                }\n            }\n\n            // Calculate buckets needed for the current well\n            if (waterUnits > 0) {\n                int bucketsNeeded = (waterUnits + capacity - 1) / capacity; // Ceiling division\n                totalBucketsLowered += bucketsNeeded;\n            }\n        }\n\n        return totalBucketsLowered;\n    }\n}\n"}
{"task_id": "Java/116", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sort_array(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 4, 3, 5))\n    >>> sort_array(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-4, -2, -6, -5, -3))\n    >>> sort_array(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 4, 3))\n     */\n    public List<Integer> sort_array(List<Integer> arr) {\n        Collections.sort(arr, new Comparator<Integer>() {\n            public int compare(Integer a, Integer b) {\n                int countA = Integer.bitCount(a);\n                int countB = Integer.bitCount(b);\n                if (countA != countB) {\n                    return Integer.compare(countA, countB); // Compare number of ones\n                } else {\n                    return Integer.compare(a, b); // Compare decimal values\n                }\n            }\n        });\n        return arr;\n    }\n}\n"}
{"task_id": "Java/117", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> select_words(String s, int n) {\n        // Step 1: Input validation\n        if (s == null || s.isEmpty()) {\n            return new ArrayList<>(); // Return empty list if input is empty\n        }\n        if (n < 0) {\n            return new ArrayList<>(); // Handle invalid natural number\n        }\n\n        // Step 2: Split the string into words\n        String[] words = s.split(\"\\\\s+\");\n        List<String> result = new ArrayList<>();\n\n        // Step 3: Iterate through words and filter based on consonant count\n        for (String word : words) {\n            if (countConsonants(word) == n) {\n                result.add(word);\n            }\n        }\n\n        // Step 4: Return the filtered list\n        return result;\n    }\n\n    // Helper function to count consonants\n    private int countConsonants(String word) {\n        int count = 0;\n        for (char c : word.toCharArray()) {\n            if (isConsonant(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    // Helper function to check if a character is a consonant\n    private boolean isConsonant(char c) {\n        return Character.isLetter(c) && \"aeiouAEIOU\".indexOf(c) == -1;\n    }\n}\n"}
{"task_id": "Java/118", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n     */\n    public String get_closest_vowel(String word) {\n        // Step 1: Define vowels\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', \n                                                             'A', 'E', 'I', 'O', 'U'));\n        \n        // Step 2: Initialize variables\n        String closestVowel = \"\";\n        int consonantCount = 0;\n\n        // Step 3: Iterate through the string from end to start\n        for (int i = word.length() - 1; i >= 0; i--) {\n            char currentChar = word.charAt(i);\n            \n            // Check if current character is a consonant\n            if (Character.isLetter(currentChar) && !vowels.contains(currentChar)) {\n                consonantCount++;\n                if (consonantCount == 2) {\n                    // If we found two consonants, return the closest vowel\n                    return closestVowel;\n                }\n            } else if (vowels.contains(currentChar)) {\n                // If we found a vowel and we have at least one consonant\n                if (consonantCount == 1) {\n                    closestVowel = String.valueOf(currentChar);\n                }\n            }\n        }\n\n        // Step 5: Return the result\n        return closestVowel;\n    }\n}\n"}
{"task_id": "Java/119", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    match_parens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    match_parens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String match_parens(List<String> lst) {\n        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n\n        if (isValidConcatenation(s1, s2) || isValidConcatenation(s2, s1)) {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n\n    private boolean isValidConcatenation(String first, String second) {\n        int openCount = 0;\n        int closeCount = 0;\n\n        for (char c : first.toCharArray()) {\n            if (c == '(') {\n                openCount++;\n            } else {\n                closeCount++;\n            }\n            if (closeCount > openCount) {\n                return false; // More closing than opening at any point\n            }\n        }\n\n        // After processing the first string, we need to check the second string\n        for (char c : second.toCharArray()) {\n            if (c == '(') {\n                openCount++;\n            } else {\n                closeCount++;\n            }\n            if (closeCount > openCount) {\n                return false; // More closing than opening at any point\n            }\n        }\n\n        // Finally, check if the total counts are balanced\n        return openCount == closeCount;\n    }\n}\n"}
{"task_id": "Java/120", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr, in ascending order.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Step 1: Input Validation\n        if (arr == null || arr.isEmpty() || k < 0 || k > arr.size()) {\n            return new ArrayList<>(); // Return empty list for invalid input\n        }\n\n        // Step 2: Sort the array in descending order\n        Collections.sort(arr, Collections.reverseOrder());\n\n        // Step 3: Extract the top k elements\n        List<Integer> topK = new ArrayList<>(arr.subList(0, k));\n\n        // Step 4: Sort the top k elements in ascending order\n        Collections.sort(topK);\n\n        // Step 5: Return the result\n        return topK;\n    }\n}\n"}
{"task_id": "Java/121", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==> 0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0; // Initialize sum\n        for (int i = 0; i < lst.size(); i++) { // Iterate through the list\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) { // Check conditions\n                sum += lst.get(i); // Update sum\n            }\n        }\n        return sum; // Return the result\n    }\n}\n"}
{"task_id": "Java/122", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int add_elements(List<Integer> arr, int k) {\n        if (arr == null || arr.size() == 0 || k < 1 || k > arr.size()) {\n            throw new IllegalArgumentException(\"Invalid input\");\n        }\n\n        List<Integer> subArray = arr.subList(0, k);\n        int sum = 0;\n\n        for (int num : subArray) {\n            if (num >= -99 && num <= 99) {\n                sum += num;\n            }\n        }\n\n        return sum;\n    }\n}\n"}
{"task_id": "Java/123", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> get_odd_collatz(int n) {\n        List<Integer> collatzSequence = new ArrayList<>();\n        int current = n;\n\n        while (current != 1) {\n            collatzSequence.add(current);\n            if (current % 2 == 0) {\n                current /= 2;\n            } else {\n                current = 3 * current + 1;\n            }\n        }\n        collatzSequence.add(1); // Add the final term 1\n\n        List<Integer> oddNumbers = new ArrayList<>();\n        for (int num : collatzSequence) {\n            if (num % 2 != 0) {\n                oddNumbers.add(num);\n            }\n        }\n\n        Collections.sort(oddNumbers);\n        return oddNumbers;\n    }\n}\n"}
{"task_id": "Java/124", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    valid_date(\"03-11-2000\") => true\n    valid_date(\"15-01-2012\") => false\n    valid_date(\"04-0-2040\") => false\n    valid_date(\"06-04-2020\") => true\n    valid_date(\"06/04/2020\") => false\n     */\n    public boolean valid_date(String date) {\n        // Step 1: Check for empty string\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        // Step 2: Check format using regex\n        if (!date.matches(\"\\\\d{2}-\\\\d{2}-\\\\d{4}\")) {\n            return false;\n        }\n\n        // Step 3: Split the date string\n        String[] parts = date.split(\"-\");\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\n        // Step 4: Validate month\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        // Step 5: Validate day based on month\n        switch (month) {\n            case 1: case 3: case 5: case 7: case 8: case 10: case 12:\n                return day >= 1 && day <= 31;\n            case 4: case 6: case 9: case 11:\n                return day >= 1 && day <= 30;\n            case 2:\n                return day >= 1 && day <= 29; // Leap year check can be added here\n            default:\n                return false; // This should never be reached due to month validation\n        }\n    }\n}\n"}
{"task_id": "Java/125", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n     */\n    public Object split_words(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\"\\\\s+\"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c)) {\n                    int position = c - 'a';\n                    if (position % 2 == 1) { // Check if the position is odd\n                        count++;\n                    }\n                }\n            }\n            return count;\n        }\n    }\n}\n"}
{"task_id": "Java/126", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean is_sorted(List<Integer> lst) {\n        if (lst.isEmpty() || lst.size() == 1) {\n            return true;\n        }\n\n        Map<Integer, Integer> countMap = new HashMap<>();\n\n        // Check for duplicates and count occurrences\n        for (Integer num : lst) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n            if (countMap.get(num) > 2) {\n                return false;\n            }\n        }\n\n        // Check for ascending order\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/127", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        \n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n        \n        if (intersectionStart > intersectionEnd) {\n            return \"NO\";\n        }\n        \n        int length = intersectionEnd - intersectionStart;\n        \n        return isPrime(length) ? \"YES\" : \"NO\";\n    }\n    \n    private boolean isPrime(int number) {\n        if (number < 2) return false;\n        for (int i = 2; i <= Math.sqrt(number); i++) {\n            if (number % i == 0) return false;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/128", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prod_signs(Arrays.asList(0, 1)) == 0\n    >>> prod_signs(Arrays.asList()) == None\n     */\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int sumOfMagnitudes = 0;\n        int productOfSigns = 1;\n\n        for (int num : arr) {\n            sumOfMagnitudes += Math.abs(num);\n            if (num > 0) {\n                productOfSigns *= 1;\n            } else if (num < 0) {\n                productOfSigns *= -1;\n            } else {\n                productOfSigns = 0;\n                break;\n            }\n        }\n\n        if (productOfSigns == 0) {\n            return Optional.of(0);\n        }\n        return Optional.of(sumOfMagnitudes * productOfSigns);\n    }\n}\n"}
{"task_id": "Java/129", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int N = grid.size();\n        List<Integer> minPath = new ArrayList<>();\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < N; j++) {\n                backtrack(grid, new ArrayList<>(), k, i, j, minPath);\n            }\n        }\n        return minPath;\n    }\n\n    private void backtrack(List<List<Integer>> grid, List<Integer> currentPath, int remainingSteps, int row, int col, List<Integer> minPath) {\n        if (remainingSteps == 0) {\n            if (minPath.isEmpty() || isLexicographicallySmaller(currentPath, minPath)) {\n                minPath.clear();\n                minPath.addAll(currentPath);\n            }\n            return;\n        }\n\n        if (row < 0 || row >= grid.size() || col < 0 || col >= grid.size()) {\n            return;\n        }\n\n        currentPath.add(grid.get(row).get(col));\n\n        // Explore neighbors\n        int[][] directions = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};\n        for (int[] dir : directions) {\n            backtrack(grid, currentPath, remainingSteps - 1, row + dir[0], col + dir[1], minPath);\n        }\n\n        currentPath.remove(currentPath.size() - 1); // Backtrack\n    }\n\n    private boolean isLexicographicallySmaller(List<Integer> pathA, List<Integer> pathB) {\n        for (int i = 0; i < pathA.size(); i++) {\n            if (pathA.get(i) < pathB.get(i)) {\n                return true;\n            } else if (pathA.get(i) > pathB.get(i)) {\n                return false;\n            }\n        }\n        return false; // They are equal\n    }\n}\n"}
{"task_id": "Java/130", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        // Step 2: Input Validation\n        if (n < 0) {\n            return new ArrayList<>(); // or throw an exception\n        }\n\n        // Step 3: Initialize the Result List\n        List<Integer> result = new ArrayList<>();\n        result.add(3); // tri(1)\n\n        // Step 4: Iterate from 1 to n\n        for (int i = 1; i <= n; i++) {\n            int triValue;\n            if (i % 2 == 0) { // Even\n                triValue = 1 + (i / 2);\n            } else { // Odd\n                triValue = result.get(i - 1) + (i > 1 ? result.get(i - 2) : 0) + (i + 1 <= n ? result.get(i + 1) : 0);\n            }\n            result.add(triValue); // Step 5: Store Results\n        }\n\n        // Step 6: Return the Result List\n        return result;\n    }\n}\n"}
{"task_id": "Java/131", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int product = 1;\n        boolean hasOdd = false;\n\n        // Convert integer to string to extract digits\n        String numberString = String.valueOf(n);\n\n        // Iterate through each character in the string\n        for (char c : numberString.toCharArray()) {\n            int digit = Character.getNumericValue(c);\n            \n            // Check if the digit is odd\n            if (digit % 2 != 0) {\n                product *= digit; // Multiply with product\n                hasOdd = true;    // Mark that we found an odd digit\n            }\n        }\n\n        // If no odd digits were found, return 0\n        return hasOdd ? product : 0;\n    }\n}\n"}
{"task_id": "Java/132", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    is_nested(\"[[]]\") -> true\n    is_nested(\"[]]]]]]][[[[[]\") -> false\n    is_nested(\"[][]\") -> false\n    is_nested(\"[]\") -> false\n    is_nested(\"[[][]]\") -> true\n    is_nested(\"[[]][[\") -> true\n     */\n    public boolean is_nested(String string) {\n        if (string == null || string.isEmpty()) {\n            return false;\n        }\n\n        int openCount = 0;\n        int currentDepth = 0;\n\n        for (char ch : string.toCharArray()) {\n            if (ch == '[') {\n                openCount++;\n                currentDepth++;\n            } else if (ch == ']') {\n                if (currentDepth == 0) {\n                    return false; // Unmatched closing bracket\n                }\n                currentDepth--;\n            } else {\n                return false; // Invalid character\n            }\n        }\n\n        // Check for at least one nested bracket\n        return currentDepth > 0 && openCount > 1;\n    }\n}\n"}
{"task_id": "Java/133", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sum_squares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            int roundedNum = (int) Math.ceil(num);\n            int squaredNum = roundedNum * roundedNum;\n            sum += squaredNum;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/134", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") -> false\n    check_if_last_char_is_a_letter(\"apple pi e\") -> true\n    check_if_last_char_is_a_letter(\"apple pi e \") -> false\n    check_if_last_char_is_a_letter(\"\") -> false\n     */\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        // Step 2: Trim the input\n        String trimmedTxt = txt.trim();\n        \n        // Step 3: Check for empty string\n        if (trimmedTxt.isEmpty()) {\n            return false;\n        }\n        \n        // Step 4: Retrieve last character\n        char lastChar = trimmedTxt.charAt(trimmedTxt.length() - 1);\n        \n        // Step 5: Check if last character is alphabetical\n        if (!Character.isLetter(lastChar)) {\n            return false;\n        }\n        \n        // Step 6: Check for word separation\n        if (trimmedTxt.length() > 1 && trimmedTxt.charAt(trimmedTxt.length() - 2) == ' ') {\n            return false;\n        }\n        \n        // Step 7: Return true if conditions are met\n        return true;\n    }\n}\n"}
{"task_id": "Java/135", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange(Arrays.asList(1,2,4,3,5)) = 3\n    can_arrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int can_arrange(List<Integer> arr) {\n        int largestIndex = -1;\n\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                largestIndex = i;\n            }\n        }\n\n        return largestIndex;\n    }\n}\n"}
{"task_id": "Java/136", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largest_smallest_integers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largest_smallest_integers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        List<Integer> negativeIntegers = new ArrayList<>();\n        List<Integer> positiveIntegers = new ArrayList<>();\n\n        // Step 3: Iterate through the input list\n        for (Integer num : lst) {\n            if (num < 0) {\n                negativeIntegers.add(num);\n            } else if (num > 0) {\n                positiveIntegers.add(num);\n            }\n        }\n\n        // Step 4: Find the largest negative integer\n        Optional<Integer> largestNegative = negativeIntegers.isEmpty() \n            ? Optional.empty() \n            : Optional.of(Collections.max(negativeIntegers));\n\n        // Step 5: Find the smallest positive integer\n        Optional<Integer> smallestPositive = positiveIntegers.isEmpty() \n            ? Optional.empty() \n            : Optional.of(Collections.min(positiveIntegers));\n\n        // Step 6: Construct and return the result\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n}\n"}
{"task_id": "Java/137", "generation": "import java.util.Optional;\n\nclass Solution {\n    public Optional<Object> compare_one(Object a, Object b) {\n        Float floatA = normalizeToFloat(a);\n        Float floatB = normalizeToFloat(b);\n        \n        if (floatA == null || floatB == null) {\n            return Optional.empty(); // Handle invalid inputs\n        }\n        \n        if (floatA.equals(floatB)) {\n            return Optional.empty(); // Values are equal\n        }\n        \n        if (floatA > floatB) {\n            return Optional.of(a); // Return original type of a\n        } else {\n            return Optional.of(b); // Return original type of b\n        }\n    }\n    \n    private Float normalizeToFloat(Object value) {\n        if (value instanceof Number) {\n            return ((Number) value).floatValue();\n        } else if (value instanceof String) {\n            String strValue = (String) value;\n            strValue = strValue.replace(\",\", \".\"); // Normalize comma to dot\n            try {\n                return Float.parseFloat(strValue);\n            } catch (NumberFormatException e) {\n                return null; // Invalid format\n            }\n        }\n        return null; // Not a valid type\n    }\n}\n"}
{"task_id": "Java/138", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == false\n    is_equal_to_sum_even(6) == false\n    is_equal_to_sum_even(8) == true\n     */\n    public boolean is_equal_to_sum_even(int n) {\n        // Step 1: Check if n is less than 8\n        if (n < 8) {\n            return false;\n        }\n        \n        // Step 2: Check if n is odd\n        if (n % 2 != 0) {\n            return false;\n        }\n        \n        // Step 3: Calculate remaining value\n        int remaining = n - 6;\n        \n        // Step 4: Check if remaining is even and at least 2\n        return (remaining % 2 == 0 && remaining >= 2);\n    }\n}\n"}
{"task_id": "Java/139", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long special_factorial(int n) {\n        // Input validation\n        if (n <= 0) {\n            return 0; // or throw an exception\n        }\n\n        long result = 1;\n\n        // Calculate Brazilian factorial\n        for (int i = n; i >= 1; i--) {\n            result *= factorial(i);\n        }\n\n        // Return the result\n        return result;\n    }\n\n    private long factorial(int k) {\n        // Calculate factorial of k\n        long fact = 1;\n        for (int j = 1; j <= k; j++) {\n            fact *= j;\n        }\n        return fact;\n    }\n}\n"}
{"task_id": "Java/140", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fix_spaces(String text) {\n        // Step 1: Trim the string\n        text = text.trim();\n        \n        // Step 2: Initialize StringBuilder for result\n        StringBuilder result = new StringBuilder();\n        \n        // Step 3: Initialize space counter\n        int spaceCount = 0;\n        \n        // Step 4: Iterate through characters\n        for (char ch : text.toCharArray()) {\n            if (ch == ' ') {\n                spaceCount++;\n            } else {\n                // Handle spaces before the current character\n                if (spaceCount > 0) {\n                    if (spaceCount == 1) {\n                        result.append('_'); // Replace single space with underscore\n                    } else {\n                        result.append('-'); // Replace multiple spaces with hyphen\n                    }\n                    spaceCount = 0; // Reset space counter\n                }\n                result.append(ch); // Append the current character\n            }\n        }\n        \n        // Step 5: Handle any trailing spaces\n        if (spaceCount > 0) {\n            if (spaceCount == 1) {\n                result.append('_');\n            } else {\n                result.append('-');\n            }\n        }\n        \n        // Step 6: Return the final result\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/141", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String file_name_check(String file_name) {\n        if (!has_single_dot(file_name) || count_digits(file_name) > 3) {\n            return \"No\";\n        }\n        \n        String[] parts = file_name.split(\"\\\\.\");\n        String prefix = parts[0];\n        String suffix = parts[1];\n\n        if (!is_valid_prefix(prefix) || !is_valid_suffix(suffix)) {\n            return \"No\";\n        }\n\n        return \"Yes\";\n    }\n\n    private int count_digits(String file_name) {\n        int count = 0;\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean has_single_dot(String file_name) {\n        return file_name.indexOf('.') == file_name.lastIndexOf('.') && file_name.contains(\".\");\n    }\n\n    private boolean is_valid_prefix(String prefix) {\n        return !prefix.isEmpty() && Character.isLetter(prefix.charAt(0));\n    }\n\n    private boolean is_valid_suffix(String suffix) {\n        return suffix.equals(\"txt\") || suffix.equals(\"exe\") || suffix.equals(\"dll\");\n    }\n}\n"}
{"task_id": "Java/142", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sum_squares(List<Integer> lst) {\n        if (lst.isEmpty()) return 0;\n\n        int totalSum = 0;\n\n        for (int i = 0; i < lst.size(); i++) {\n            int value = lst.get(i);\n            if (i % 3 == 0) {\n                totalSum += value * value; // Square\n            } else if (i % 4 == 0) {\n                totalSum += value * value * value; // Cube\n            } else {\n                totalSum += value; // No change\n            }\n        }\n\n        return totalSum;\n    }\n}\n"}
{"task_id": "Java/143", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String words_in_sentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        List<String> primeLengthWords = new ArrayList<>();\n\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                primeLengthWords.add(word);\n            }\n        }\n\n        return String.join(\" \", primeLengthWords);\n    }\n\n    private boolean isPrime(int number) {\n        if (number <= 1) return false;\n        for (int i = 2; i <= Math.sqrt(number); i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/144", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Parse the fractions\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n        \n        int numerator_x = Integer.parseInt(xParts[0]);\n        int denominator_x = Integer.parseInt(xParts[1]);\n        int numerator_n = Integer.parseInt(nParts[0]);\n        int denominator_n = Integer.parseInt(nParts[1]);\n        \n        // Calculate the product\n        int result_numerator = numerator_x * numerator_n;\n        int result_denominator = denominator_x * denominator_n;\n        \n        // Check for whole number\n        return result_numerator % result_denominator == 0;\n    }\n}\n"}
{"task_id": "Java/145", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> order_by_points(List<Integer> nums) {\n        if (nums.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        List<Pair> pairs = new ArrayList<>();\n\n        for (int i = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n            int digitSum = sumOfDigits(num);\n            pairs.add(new Pair(num, digitSum, i));\n        }\n\n        // Sort pairs based on digit sum and original index\n        pairs.sort(Comparator.comparingInt(Pair::getDigitSum).thenComparingInt(Pair::getOriginalIndex));\n\n        List<Integer> sortedNums = new ArrayList<>();\n        for (Pair pair : pairs) {\n            sortedNums.add(pair.getNum());\n        }\n\n        return sortedNums;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        String numStr = Integer.toString(num);\n        for (char c : numStr.toCharArray()) {\n            sum += Character.getNumericValue(c);\n        }\n        return sum;\n    }\n\n    private static class Pair {\n        private final int num;\n        private final int digitSum;\n        private final int originalIndex;\n\n        public Pair(int num, int digitSum, int originalIndex) {\n            this.num = num;\n            this.digitSum = digitSum;\n            this.originalIndex = originalIndex;\n        }\n\n        public int getNum() {\n            return num;\n        }\n\n        public int getDigitSum() {\n            return digitSum;\n        }\n\n        public int getOriginalIndex() {\n            return originalIndex;\n        }\n    }\n}\n"}
{"task_id": "Java/146", "generation": "import java.util.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n\n        for (int num : nums) {\n            if (num > 10) {\n                String numStr = String.valueOf(num);\n                char firstDigit = numStr.charAt(0);\n                char lastDigit = numStr.charAt(numStr.length() - 1);\n\n                if (isOdd(firstDigit) && isOdd(lastDigit)) {\n                    count++;\n                }\n            }\n        }\n\n        return count;\n    }\n\n    private boolean isOdd(char digit) {\n        return digit == '1' || digit == '3' || digit == '5' || digit == '7' || digit == '9';\n    }\n}\n"}
{"task_id": "Java/147", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int get_max_triples(int n) {\n        // Step 1: Initialize the array\n        int[] a = new int[n + 1]; // Using n + 1 for 1-based indexing\n        for (int i = 1; i <= n; i++) {\n            a[i] = i * i - i + 1;\n        }\n\n        // Step 2: Count valid triples\n        int count = 0;\n        for (int i = 1; i <= n - 2; i++) {\n            for (int j = i + 1; j <= n - 1; j++) {\n                for (int k = j + 1; k <= n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n\n        // Step 3: Return the result\n        return count;\n    }\n}\n"}
{"task_id": "Java/148", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closest to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a list containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty list if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        // Step 1: Define the list of planets\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        \n        // Step 2: Validate input\n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return new ArrayList<>(); // Return empty list if invalid\n        }\n        \n        // Step 3: Find indices of the planets\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        \n        // Step 4: Determine the range\n        int start = Math.min(index1, index2) + 1; // Start after planet1\n        int end = Math.max(index1, index2); // End before planet2\n        \n        // Step 5: Extract planets in between\n        List<String> result = new ArrayList<>();\n        for (int i = start; i < end; i++) {\n            result.add(planets.get(i));\n        }\n        \n        // Step 6: Return the result\n        return result;\n    }\n}\n"}
{"task_id": "Java/149", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert sorted_list_sum(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert sorted_list_sum(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> sorted_list_sum(List<String> lst) {\n        List<String> filteredList = new ArrayList<>();\n        \n        // Filter strings with even lengths\n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                filteredList.add(str);\n            }\n        }\n        \n        // Sort the filtered list by length and then alphabetically\n        Collections.sort(filteredList, (s1, s2) -> {\n            int lengthComparison = Integer.compare(s1.length(), s2.length());\n            return lengthComparison != 0 ? lengthComparison : s1.compareTo(s2);\n        });\n        \n        return filteredList;\n    }\n}\n"}
{"task_id": "Java/150", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n     */\n    public int x_or_y(int n, int x, int y) {\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n < 2) return false;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/151", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    double_the_difference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    double_the_difference(Arrays.asList(-1, -2, 0)) == 0\n    double_the_difference(Arrays.asList(9, -2)) == 81\n    double_the_difference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int double_the_difference(List<Object> lst) {\n        if (lst == null || lst.isEmpty()) {\n            return 0;\n        }\n\n        List<Integer> validIntegers = new ArrayList<>();\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                if (num >= 0) {\n                    validIntegers.add(num);\n                }\n            }\n        }\n\n        int sumOfSquares = 0;\n        for (int num : validIntegers) {\n            if (num % 2 != 0) { // Check if the number is odd\n                sumOfSquares += num * num; // Calculate square and add to sum\n            }\n        }\n\n        return sumOfSquares;\n    }\n}\n"}
{"task_id": "Java/152", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        // Input Validation\n        if (game.size() != guess.size()) {\n            throw new IllegalArgumentException(\"Both lists must be of equal length.\");\n        }\n\n        // Initialize Result List\n        List<Integer> result = new ArrayList<>();\n\n        // Iterate Through Lists\n        for (int i = 0; i < game.size(); i++) {\n            int score = game.get(i);\n            int userGuess = guess.get(i);\n\n            // Calculate Differences\n            int difference = Math.abs(score - userGuess);\n            result.add(difference);\n        }\n\n        // Return the Result\n        return result;\n    }\n}\n"}
{"task_id": "Java/153", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.Strongest_Extension.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        int maxStrength = Integer.MIN_VALUE;\n        String strongestExtension = \"\";\n\n        for (String extension : extensions) {\n            int capCount = 0;\n            int smCount = 0;\n\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smCount++;\n                }\n            }\n\n            int strength = capCount - smCount;\n\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return class_name + \".\" + strongestExtension;\n    }\n}\n"}
{"task_id": "Java/154", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => false\n    cycpattern_check(\"hello\",\"ell\") => true\n    cycpattern_check(\"whassup\",\"psus\") => false\n    cycpattern_check(\"abab\",\"baa\") => true\n    cycpattern_check(\"efef\",\"eeff\") => false\n    cycpattern_check(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpattern_check(String a, String b) {\n        if (a == null || b == null || a.isEmpty() || b.isEmpty()) {\n            return false;\n        }\n\n        // Generate all rotations of string b\n        List<String> rotations = generateRotations(b);\n        \n        // Check if any rotation is a substring of a\n        for (String rotation : rotations) {\n            if (a.contains(rotation)) {\n                return true;\n            }\n        }\n        \n        return false; // If no rotations matched\n    }\n\n    private List<String> generateRotations(String b) {\n        List<String> rotations = new ArrayList<>();\n        int length = b.length();\n        for (int i = 0; i < length; i++) {\n            rotations.add(b.substring(i) + b.substring(0, i));\n        }\n        return rotations;\n    }\n}\n"}
{"task_id": "Java/155", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n     */\n    public List<Integer> even_odd_count(int num) {\n        // Step 1: Handle negative numbers\n        num = Math.abs(num);\n        \n        // Step 2: Initialize counters\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        // Step 3: Convert number to string and iterate through digits\n        String numStr = Integer.toString(num);\n        for (char digitChar : numStr.toCharArray()) {\n            int digit = Character.getNumericValue(digitChar);\n            \n            // Step 4: Count even and odd digits\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        \n        // Step 5: Return the result as a list\n        return Arrays.asList(evenCount, oddCount);\n    }\n}\n"}
{"task_id": "Java/156", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == \"xix\"\n    >>> int_to_mini_roman(152) == \"clii\"\n    >>> int_to_mini_roman(426) == \"cdxxvi\"\n     */\n    public String int_to_mini_roman(int number) {\n        // Corrected mapping of integer values to their corresponding Roman numeral representations\n        String[][] romanMapping = {\n            {\"m\", \"1000\"},\n            {\"cm\", \"900\"},\n            {\"d\", \"500\"},\n            {\"cd\", \"400\"},\n            {\"c\", \"100\"},\n            {\"xc\", \"90\"},\n            {\"l\", \"50\"},\n            {\"xl\", \"40\"},\n            {\"x\", \"10\"},\n            {\"ix\", \"9\"},\n            {\"v\", \"5\"},\n            {\"iv\", \"4\"},\n            {\"i\", \"1\"}\n        };\n\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < romanMapping.length; i++) {\n            int value = Integer.parseInt(romanMapping[i][1]);\n            String numeral = romanMapping[i][0];\n            while (number >= value) {\n                result.append(numeral);\n                number -= value;\n            }\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/157", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == true\n    right_angle_triangle(1, 2, 3) == false\n     */\n    public boolean right_angle_triangle(int a, int b, int c) {\n        // Step 1: Input Validation\n        if (a <= 0 || b <= 0 || c <= 0) {\n            return false;\n        }\n\n        // Step 2: Identify the longest side\n        int hypotenuse, side1, side2;\n        if (a >= b && a >= c) {\n            hypotenuse = a;\n            side1 = b;\n            side2 = c;\n        } else if (b >= a && b >= c) {\n            hypotenuse = b;\n            side1 = a;\n            side2 = c;\n        } else {\n            hypotenuse = c;\n            side1 = a;\n            side2 = b;\n        }\n\n        // Step 3: Check Pythagorean condition\n        return (side1 * side1 + side2 * side2) == (hypotenuse * hypotenuse);\n    }\n}\n"}
{"task_id": "Java/158", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\n     */\n    public String find_max(List<String> words) {\n        String maxWord = \"\";\n        int maxUniqueCount = 0;\n\n        for (String word : words) {\n            int uniqueCount = countUniqueCharacters(word);\n            \n            if (uniqueCount > maxUniqueCount) {\n                maxUniqueCount = uniqueCount;\n                maxWord = word;\n            } else if (uniqueCount == maxUniqueCount) {\n                if (word.compareTo(maxWord) < 0) {\n                    maxWord = word;\n                }\n            }\n        }\n\n        return maxWord;\n    }\n\n    private int countUniqueCharacters(String word) {\n        Set<Character> uniqueChars = new HashSet<>();\n        for (char c : word.toCharArray()) {\n            uniqueChars.add(c);\n        }\n        return uniqueChars.size();\n    }\n}\n"}
{"task_id": "Java/159", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots that exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        int additionalEaten;\n        int totalEaten;\n        int remainingCarrots;\n\n        // Determine how many additional carrots can be eaten\n        if (remaining >= need) {\n            additionalEaten = need; // Can eat the full need\n            remainingCarrots = remaining - need; // Remaining after eating need\n        } else {\n            additionalEaten = remaining; // Eat all remaining carrots\n            remainingCarrots = 0; // No carrots left\n        }\n\n        // Calculate total eaten carrots\n        totalEaten = number + additionalEaten;\n\n        // Return the result as a list\n        return Arrays.asList(totalEaten, remainingCarrots);\n    }\n}\n"}
{"task_id": "Java/160", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        // Input Validation\n        if (operator.size() != operand.size() - 1) {\n            throw new IllegalArgumentException(\"Invalid lengths of operator and operand lists.\");\n        }\n        \n        Set<String> validOperators = new HashSet<>(Arrays.asList(\"+\", \"-\", \"*\", \"/\", \"**\"));\n        for (String op : operator) {\n            if (!validOperators.contains(op)) {\n                throw new IllegalArgumentException(\"Invalid operator: \" + op);\n            }\n        }\n        \n        for (Integer num : operand) {\n            if (num < 0) {\n                throw new IllegalArgumentException(\"Operands must be non-negative integers.\");\n            }\n        }\n\n        // Construct the expression\n        StringBuilder expression = new StringBuilder();\n        expression.append(operand.get(0));\n        for (int i = 0; i < operator.size(); i++) {\n            expression.append(\" \").append(operator.get(i)).append(\" \").append(operand.get(i + 1));\n        }\n\n        // Evaluate the expression\n        return evaluateExpression(expression.toString());\n    }\n\n    private int evaluateExpression(String expression) {\n        // Using a stack to evaluate the expression respecting operator precedence\n        Stack<Integer> values = new Stack<>();\n        Stack<String> ops = new Stack<>();\n        \n        String[] tokens = expression.split(\" \");\n        for (String token : tokens) {\n            if (isNumeric(token)) {\n                values.push(Integer.parseInt(token));\n            } else {\n                while (!ops.isEmpty() && hasPrecedence(token, ops.peek())) {\n                    values.push(applyOperation(ops.pop(), values.pop(), values.pop()));\n                }\n                ops.push(token);\n            }\n        }\n\n        while (!ops.isEmpty()) {\n            values.push(applyOperation(ops.pop(), values.pop(), values.pop()));\n        }\n\n        return values.pop();\n    }\n\n    private boolean isNumeric(String str) {\n        try {\n            Integer.parseInt(str);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }\n    }\n\n    private boolean hasPrecedence(String op1, String op2) {\n        if (op2.equals(\"+\") || op2.equals(\"-\")) {\n            return op1.equals(\"*\") || op1.equals(\"/\") || op1.equals(\"**\");\n        }\n        return false;\n    }\n\n    private int applyOperation(String op, int b, int a) {\n        switch (op) {\n            case \"+\":\n                return a + b;\n            case \"-\":\n                return a - b;\n            case \"*\":\n                return a * b;\n            case \"/\":\n                return a / b; // Assuming b is not zero\n            case \"**\":\n                return (int) Math.pow(a, b);\n        }\n        return 0;\n    }\n}\n"}
{"task_id": "Java/161", "generation": "import java.util.*;\n\nclass Solution {\n    public String solve(String s) {\n        StringBuilder result = new StringBuilder();\n        boolean hasLetter = false;\n\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                hasLetter = true;\n                if (Character.isLowerCase(c)) {\n                    result.append(Character.toUpperCase(c));\n                } else {\n                    result.append(Character.toLowerCase(c));\n                }\n            } else {\n                result.append(c);\n            }\n        }\n\n        if (!hasLetter) {\n            return result.reverse().toString();\n        }\n\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/162", "generation": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text == null || text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] hashBytes = md.digest(text.getBytes());\n\n        StringBuilder hexString = new StringBuilder();\n        for (byte b : hashBytes) {\n            String hex = Integer.toHexString(0xff & b);\n            if (hex.length() == 1) hexString.append('0');\n            hexString.append(hex);\n        }\n\n        return Optional.of(hexString.toString());\n    }\n}\n"}
{"task_id": "Java/163", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order. Please note that the even digits refer to even numbers less than 10.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n     */\n    public List<Integer> generate_integers(int a, int b) {\n        int lower = Math.min(a, b);\n        int upper = Math.max(a, b);\n        List<Integer> evenDigits = new ArrayList<>();\n\n        for (int i = lower; i <= upper; i++) {\n            if (i % 2 == 0 && i < 10) {\n                evenDigits.add(i);\n            }\n        }\n\n        Collections.sort(evenDigits);\n        return evenDigits;\n    }\n}\n"}
