{"task_id": "Java/1", "generation": "class Solution {\n    public List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        StringBuilder currentGroup = new StringBuilder();\n        int balance = 0;\n\n        // Remove spaces from the input string\n        paren_string = paren_string.replaceAll(\"\\\\s+\", \"\");\n\n        for (char ch : paren_string.toCharArray()) {\n            // Append the current character to the current group\n            currentGroup.append(ch);\n\n            // Update the balance\n            if (ch == '(') {\n                balance++;\n            } else if (ch == ')') {\n                balance--;\n            }\n\n            // If balance is zero, we have a complete group\n            if (balance == 0) {\n                result.add(currentGroup.toString());\n                currentGroup.setLength(0); // Reset the StringBuilder for the next group\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"( ) (( )) (( )( ))\";\n        List<String> output = solution.separate_paren_groups(input);\n        System.out.println(output); // Output: [\"()\", \"(())\", \"(()())\"]\n    }\n}\n"}
{"task_id": "Java/126", "generation": "class Solution {\n    public boolean is_sorted(List<Integer> lst) {\n        // Create a map to count occurrences of each number\n        Map<Integer, Integer> countMap = new HashMap<>();\n        \n        // Iterate through the list to check sorting and count occurrences\n        for (int i = 0; i < lst.size(); i++) {\n            int current = lst.get(i);\n            \n            // Count occurrences\n            countMap.put(current, countMap.getOrDefault(current, 0) + 1);\n            if (countMap.get(current) > 2) {\n                return false; // More than two occurrences\n            }\n            \n            // Check if the list is sorted\n            if (i > 0 && current < lst.get(i - 1)) {\n                return false; // Not sorted\n            }\n        }\n        \n        return true; // List is sorted and no number appears more than twice\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.is_sorted(Arrays.asList(5))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 3, 4, 5))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 3, 2, 4, 5))); // false\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7))); // false\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 2, 3, 3, 4))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 2, 2, 3, 4))); // false\n    }\n}\n"}
{"task_id": "Java/38", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decode_cyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse the cycling of elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(groups.get(i).length() - 1) + groups.get(i).substring(0, groups.get(i).length() - 1));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n"}
{"task_id": "Java/18", "generation": "class Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlapping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    */\n    public int how_many_times(String string, String substring) {\n        // Edge case: if the substring is empty or the original string is empty\n        if (substring.isEmpty() || string.isEmpty()) {\n            return 0;\n        }\n\n        int count = 0;\n        int index = 0;\n\n        // Loop through the string to find the substring\n        while ((index = string.indexOf(substring, index)) != -1) {\n            count++;\n            index++; // Move to the next character to allow for overlapping matches\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.how_many_times(\"\", \"a\")); // Output: 0\n        System.out.println(solution.how_many_times(\"aaa\", \"a\")); // Output: 3\n        System.out.println(solution.how_many_times(\"aaaa\", \"aa\")); // Output: 3\n    }\n}\n"}
{"task_id": "Java/45", "generation": "class Solution {\n    /**\n    Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    */\n    public double triangle_area(double a, double h) {\n        return 0.5 * a * h; // Calculate the area using the formula\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        double area = solution.triangle_area(5, 3);\n        System.out.println(\"Area of the triangle: \" + area); // Output: Area of the triangle: 7.5\n    }\n}\n"}
{"task_id": "Java/81", "generation": "class Solution {\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        \n        for (Double gpa : grades) {\n            if (gpa == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        \n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> grades = Arrays.asList(4.0, 3.0, 1.7, 2.0, 3.5);\n        List<String> result = solution.numerical_letter_grade(grades);\n        System.out.println(result); // Output: [A+, B+, C-, C, A-]\n    }\n}\n"}
{"task_id": "Java/26", "generation": "class Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates(Arrays.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n    */\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        // Step 1: Count occurrences of each number\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (Integer number : numbers) {\n            countMap.put(number, countMap.getOrDefault(number, 0) + 1);\n        }\n\n        // Step 2: Filter out numbers that occur more than once\n        List<Integer> result = new LinkedList<>();\n        for (Integer number : numbers) {\n            if (countMap.get(number) == 1) {\n                result.add(number);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> result = solution.remove_duplicates(Arrays.asList(1, 2, 3, 2, 4));\n        System.out.println(result); // Output: [1, 3, 4]\n    }\n}\n"}
{"task_id": "Java/134", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        // Strip any trailing spaces from the string\n        txt = txt.trim();\n        \n        // Check if the string is empty after trimming\n        if (txt.isEmpty()) {\n            return false;\n        }\n        \n        // Get the last character of the string\n        char lastChar = txt.charAt(txt.length() - 1);\n        \n        // Check if the last character is an alphabetical character\n        return Character.isLetter(lastChar) && (txt.length() == 1 || txt.charAt(txt.length() - 2) == ' ');\n    }\n}\n"}
{"task_id": "Java/76", "generation": "class Solution {\n    public boolean is_simple_power(int x, int n) {\n        // Handle special cases\n        if (n == 1) {\n            return x == 1; // 1^k = 1 for any k\n        }\n        if (x == 1) {\n            return true; // n^0 = 1 for any n\n        }\n        if (n <= 0) {\n            return false; // n must be positive\n        }\n\n        int power = 1; // Start with n^0\n        while (power < x) {\n            power *= n; // Calculate the next power of n\n        }\n        \n        return power == x; // Check if we found the exact power\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.is_simple_power(1, 4)); // true\n        System.out.println(solution.is_simple_power(2, 2)); // true\n        System.out.println(solution.is_simple_power(8, 2)); // true\n        System.out.println(solution.is_simple_power(3, 2)); // false\n        System.out.println(solution.is_simple_power(3, 1)); // false\n        System.out.println(solution.is_simple_power(5, 3)); // false\n    }\n}\n"}
{"task_id": "Java/120", "generation": "class Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Step 1: Sort the array in descending order\n        Collections.sort(arr, Collections.reverseOrder());\n        \n        // Step 2: Get the first k elements\n        List<Integer> maxKElements = arr.subList(0, k);\n        \n        // Step 3: Sort the k elements in ascending order\n        Collections.sort(maxKElements);\n        \n        return maxKElements;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Example 1\n        List<Integer> arr1 = Arrays.asList(-3, -4, 5);\n        int k1 = 3;\n        System.out.println(solution.maximum(arr1, k1)); // Output: [-4, -3, 5]\n\n        // Example 2\n        List<Integer> arr2 = Arrays.asList(4, -4, 4);\n        int k2 = 2;\n        System.out.println(solution.maximum(arr2, k2)); // Output: [4, 4]\n\n        // Example 3\n        List<Integer> arr3 = Arrays.asList(-3, 2, 1, 2, -1, -2, 1);\n        int k3 = 1;\n        System.out.println(solution.maximum(arr3, k3)); // Output: [2]\n    }\n}\n"}
{"task_id": "Java/47", "generation": "class Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    8.0\n    */\n    public double median(List<Integer> l) {\n        // Step 1: Sort the list\n        Collections.sort(l);\n        \n        // Step 2: Determine the size of the list\n        int size = l.size();\n        \n        // Step 3: Calculate the median\n        if (size % 2 == 1) {\n            // If odd, return the middle element\n            return l.get(size / 2);\n        } else {\n            // If even, return the average of the two middle elements\n            double mid1 = l.get(size / 2 - 1);\n            double mid2 = l.get(size / 2);\n            return (mid1 + mid2) / 2.0;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.median(Arrays.asList(3, 1, 2, 4, 5))); // Output: 3.0\n        System.out.println(solution.median(Arrays.asList(-10, 4, 6, 1000, 10, 20))); // Output: 8.0\n    }\n}\n"}
{"task_id": "Java/78", "generation": "class Solution {\n    public int hex_key(String num) {\n        // Set of prime hexadecimal digits\n        Set<Character> primeHexDigits = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        int count = 0;\n        \n        // Iterate through each character in the input string\n        for (char ch : num.toCharArray()) {\n            // Check if the character is in the set of prime hexadecimal digits\n            if (primeHexDigits.contains(ch)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/129", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}}; // right, down, left, up\n        PriorityQueue<HeapNode> minHeap = new PriorityQueue<>((a, b) -> {\n            if (a.value != b.value) {\n                return Integer.compare(a.value, b.value);\n            }\n            return Arrays.compare(a.path.toArray(new Integer[0]), b.path.toArray(new Integer[0]));\n        });\n        \n        // Initialize the heap with all starting positions\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                List<Integer> initialPath = new ArrayList<>();\n                initialPath.add(grid.get(i).get(j));\n                minHeap.offer(new HeapNode(grid.get(i).get(j), initialPath, i, j));\n            }\n        }\n        \n        while (!minHeap.isEmpty()) {\n            HeapNode current = minHeap.poll();\n            \n            if (current.path.size() == k) {\n                return current.path;\n            }\n            \n            for (int[] direction : directions) {\n                int nx = current.x + direction[0];\n                int ny = current.y + direction[1];\n                if (nx >= 0 && nx < n && ny >= 0 && ny < n) {\n                    List<Integer> newPath = new ArrayList<>(current.path);\n                    newPath.add(grid.get(nx).get(ny));\n                    minHeap.offer(new HeapNode(current.value + grid.get(nx).get(ny), newPath, nx, ny));\n                }\n            }\n        }\n        \n        return new ArrayList<>(); // This line should never be reached due to problem constraints\n    }\n    \n    private static class HeapNode {\n        int value;\n        List<Integer> path;\n        int x;\n        int y;\n\n        HeapNode(int value, List<Integer> path, int x, int y) {\n            this.value = value;\n            this.path = path;\n            this.x = x;\n            this.y = y;\n        }\n    }\n}\n"}
{"task_id": "Java/59", "generation": "class Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    */\n    public int largest_prime_factor(int n) {\n        // Handle the factor of 2 first\n        while (n % 2 == 0) {\n            n /= 2;\n        }\n        \n        // Now check for odd factors from 3 to sqrt(n)\n        int largestFactor = 1; // To store the largest prime factor\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                largestFactor = i; // Update the largest factor\n                n /= i; // Divide n by the factor\n            }\n        }\n        \n        // If n is still greater than 2, then it is prime\n        if (n > 2) {\n            largestFactor = n;\n        }\n        \n        return largestFactor;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.largest_prime_factor(13195)); // Output: 29\n        System.out.println(solution.largest_prime_factor(2048));  // Output: 2\n    }\n}\n"}
{"task_id": "Java/123", "generation": "class Solution {\n    public List<Integer> get_odd_collatz(int n) {\n        Set<Integer> oddNumbers = new HashSet<>(); // Use a Set to avoid duplicates\n        while (n != 1) {\n            if (n % 2 != 0) { // Check if n is odd\n                oddNumbers.add(n);\n            }\n            // Apply the Collatz rules\n            if (n % 2 == 0) {\n                n = n / 2; // If n is even\n            } else {\n                n = 3 * n + 1; // If n is odd\n            }\n        }\n        // Add 1 to the set since the sequence always ends with 1\n        oddNumbers.add(1);\n        \n        // Convert the set to a list and sort it\n        List<Integer> result = new ArrayList<>(oddNumbers);\n        Collections.sort(result);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.get_odd_collatz(5)); // Output: [1, 5]\n        System.out.println(solution.get_odd_collatz(7)); // Example output: [1, 7]\n    }\n}\n"}
{"task_id": "Java/74", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        int totalCharsLst1 = 0;\n        int totalCharsLst2 = 0;\n\n        // Calculate total characters in lst1\n        for (String s : lst1) {\n            totalCharsLst1 += s.length();\n        }\n\n        // Calculate total characters in lst2\n        for (String s : lst2) {\n            totalCharsLst2 += s.length();\n        }\n\n        // Compare total characters and return the appropriate list\n        if (totalCharsLst1 < totalCharsLst2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n"}
{"task_id": "Java/21", "generation": "class Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1.\n    >>> rescale_to_unit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    */\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        // Ensure the list has at least two elements\n        if (numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements.\");\n        }\n\n        // Find the minimum and maximum values in the list\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n\n        // Create a new list to store the rescaled values\n        List<Double> rescaled = new ArrayList<>();\n\n        // Apply the linear transformation to each number\n        for (Double number : numbers) {\n            double scaledValue = (number - min) / (max - min);\n            rescaled.add(scaledValue);\n        }\n\n        return rescaled;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> result = solution.rescale_to_unit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0));\n        System.out.println(result); // Output: [0.0, 0.25, 0.5, 0.75, 1.0]\n    }\n}\n"}
{"task_id": "Java/48", "generation": "class Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    */\n    public boolean is_palindrome(String text) {\n        // A string is a palindrome if it is equal to its reverse\n        int left = 0;\n        int right = text.length() - 1;\n\n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false; // Not a palindrome\n            }\n            left++;\n            right--;\n        }\n        return true; // It's a palindrome\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.is_palindrome(\"\")); // true\n        System.out.println(solution.is_palindrome(\"aba\")); // true\n        System.out.println(solution.is_palindrome(\"aaaaa\")); // true\n        System.out.println(solution.is_palindrome(\"zbcd\")); // false\n    }\n}\n"}
{"task_id": "Java/13", "generation": "class Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    */\n    public int greatest_common_divisor(int a, int b) {\n        // Ensure a and b are non-negative\n        a = Math.abs(a);\n        b = Math.abs(b);\n        \n        // Use the Euclidean algorithm to find the GCD\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        \n        return a;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.greatest_common_divisor(3, 5)); // Output: 1\n        System.out.println(solution.greatest_common_divisor(25, 15)); // Output: 5\n    }\n}\n"}
{"task_id": "Java/42", "generation": "class Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incr_list(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incr_list(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    */\n    public List<Integer> incr_list(List<Integer> l) {\n        return l.stream()\n                .map(n -> n + 1) // Increment each element by 1\n                .collect(Collectors.toList()); // Collect the results into a new list\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.incr_list(Arrays.asList(1, 2, 3))); // Output: [2, 3, 4]\n        System.out.println(solution.incr_list(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))); // Output: [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    }\n}\n"}
{"task_id": "Java/84", "generation": "class Solution {\n    public String solve(int N) {\n        // Step 1: Convert N to a string to access each digit\n        String numberString = Integer.toString(N);\n        \n        // Step 2: Calculate the sum of the digits\n        int sum = 0;\n        for (char digit : numberString.toCharArray()) {\n            sum += Character.getNumericValue(digit);\n        }\n        \n        // Step 3: Convert the sum to binary\n        return Integer.toBinaryString(sum);\n    }\n}\n"}
{"task_id": "Java/140", "generation": "class Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    */\n    public String fix_spaces(String text) {\n        // Step 1: Replace all spaces with underscores\n        String replacedText = text.replace(\" \", \"_\");\n        \n        // Step 2: Use regex to replace sequences of more than 2 underscores with a single hyphen\n        replacedText = replacedText.replaceAll(\"_{3,}\", \"-\");\n        \n        // Step 3: Return the modified string\n        return replacedText;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fix_spaces(\"Example\")); // \"Example\"\n        System.out.println(solution.fix_spaces(\"Example 1\")); // \"Example_1\"\n        System.out.println(solution.fix_spaces(\" Example 2\")); // \"_Example_2\"\n        System.out.println(solution.fix_spaces(\" Example   3\")); // \"_Example-3\"\n    }\n}\n"}
{"task_id": "Java/92", "generation": "class Solution {\n    public boolean any_int(Object x, Object y, Object z) {\n        // Check if all inputs are instances of Integer\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int a = (Integer) x;\n            int b = (Integer) y;\n            int c = (Integer) z;\n\n            // Check if any number is equal to the sum of the other two\n            return (a == b + c) || (b == a + c) || (c == a + b);\n        }\n        // Return false if any input is not an integer\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.any_int(5, 2, 7)); // true\n        System.out.println(solution.any_int(3, 2, 2)); // false\n        System.out.println(solution.any_int(3, -2, 1)); // true\n        System.out.println(solution.any_int(3.6, -2.2, 2)); // false\n    }\n}\n"}
{"task_id": "Java/143", "generation": "class Solution {\n    // Function to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) return false; // 0 and 1 are not prime numbers\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) return false; // Found a divisor, not prime\n        }\n        return true; // No divisors found, it's prime\n    }\n\n    public String words_in_sentence(String sentence) {\n        // Split the sentence into words\n        String[] words = sentence.split(\" \");\n        List<String> primeLengthWords = new ArrayList<>();\n\n        // Check each word's length\n        for (String word : words) {\n            int length = word.length();\n            if (isPrime(length)) {\n                primeLengthWords.add(word); // Add to the list if length is prime\n            }\n        }\n\n        // Join the words with a space and return\n        return String.join(\" \", primeLengthWords);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.words_in_sentence(\"This is a test\")); // Output: \"is\"\n        System.out.println(solution.words_in_sentence(\"lets go for swimming\")); // Output: \"go for\"\n    }\n}\n"}
{"task_id": "Java/148", "generation": "class Solution {\n    // List of planets in order from the Sun\n    private static final List<String> PLANETS = Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \n        \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    );\n\n    public List<String> bf(String planet1, String planet2) {\n        // Check if both planets are valid\n        if (!PLANETS.contains(planet1) || !PLANETS.contains(planet2)) {\n            return Collections.emptyList(); // Return an empty list if invalid\n        }\n\n        // Get the indices of the planets\n        int index1 = PLANETS.indexOf(planet1);\n        int index2 = PLANETS.indexOf(planet2);\n\n        // Determine the start and end indices for the range\n        int start = Math.min(index1, index2) + 1; // Start from the next planet\n        int end = Math.max(index1, index2); // End at the maximum index\n\n        // Create a list to hold the planets in between\n        List<String> inBetweenPlanets = new ArrayList<>();\n\n        // Add planets that are in between the two given planets\n        for (int i = start; i < end; i++) {\n            inBetweenPlanets.add(PLANETS.get(i));\n        }\n\n        return inBetweenPlanets; // Return the list of planets in between\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.bf(\"Jupiter\", \"Neptune\")); // [\"Saturn\", \"Uranus\"]\n        System.out.println(solution.bf(\"Earth\", \"Mercury\"));   // [\"Venus\"]\n        System.out.println(solution.bf(\"Mercury\", \"Uranus\"));  // [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n        System.out.println(solution.bf(\"Mars\", \"Earth\"));       // [\"Venus\"]\n        System.out.println(solution.bf(\"Pluto\", \"Earth\"));      // [] (invalid planet)\n    }\n}\n"}
{"task_id": "Java/115", "generation": "class Solution {\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        int totalLowerings = 0;\n\n        // Iterate through each well (row in the grid)\n        for (List<Integer> well : grid) {\n            int waterUnits = 0;\n\n            // Count the number of water units (1s) in the current well\n            for (int water : well) {\n                if (water == 1) {\n                    waterUnits++;\n                }\n            }\n\n            // Calculate the number of times we need to lower the bucket for this well\n            if (waterUnits > 0) {\n                totalLowerings += (waterUnits + capacity - 1) / capacity; // This is equivalent to Math.ceil(waterUnits / capacity)\n            }\n        }\n\n        return totalLowerings;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Example 1\n        List<List<Integer>> grid1 = Arrays.asList(\n            Arrays.asList(0, 0, 1, 0),\n            Arrays.asList(0, 1, 0, 0),\n            Arrays.asList(1, 1, 1, 1)\n        );\n        System.out.println(solution.max_fill(grid1, 1)); // Output: 6\n\n        // Example 2\n        List<List<Integer>> grid2 = Arrays.asList(\n            Arrays.asList(0, 0, 1, 1),\n            Arrays.asList(0, 0, 0, 0),\n            Arrays.asList(1, 1, 1, 1),\n            Arrays.asList(0, 1, 1, 1)\n        );\n        System.out.println(solution.max_fill(grid2, 2)); // Output: 5\n\n        // Example 3\n        List<List<Integer>> grid3 = Arrays.asList(\n            Arrays.asList(0, 0, 0),\n            Arrays.asList(0, 0, 0)\n        );\n        System.out.println(solution.max_fill(grid3, 5)); // Output: 0\n    }\n}\n"}
{"task_id": "Java/71", "generation": "class Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    */\n    public double triangle_area(double a, double b, double c) {\n        // Check if the sides form a valid triangle\n        if (a + b > c && a + c > b && b + c > a) {\n            // Calculate the semi-perimeter\n            double s = (a + b + c) / 2;\n            // Calculate the area using Heron's formula\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            // Return the area rounded to 2 decimal points\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            // Return -1 if the sides do not form a valid triangle\n            return -1;\n        }\n    }\n}\n"}
{"task_id": "Java/163", "generation": "class Solution {\n    public List<Integer> generate_integers(int a, int b) {\n        List<Integer> evenDigits = new ArrayList<>();\n        \n        // Determine the range\n        int start = Math.min(a, b);\n        int end = Math.max(a, b);\n        \n        // Iterate through the range\n        for (int i = start; i <= end; i++) {\n            // Check if the number is a single digit and even\n            if (i >= 0 && i < 10 && i % 2 == 0) {\n                evenDigits.add(i);\n            }\n        }\n        \n        return evenDigits;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.generate_integers(2, 8)); // Output: [2, 4, 6, 8]\n        System.out.println(solution.generate_integers(8, 2)); // Output: [2, 4, 6, 8]\n        System.out.println(solution.generate_integers(10, 14)); // Output: []\n    }\n}\n"}
{"task_id": "Java/19", "generation": "class Solution {\n    /**\n    Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest.\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    */\n    public String sort_numbers(String numbers) {\n        // Map of number words to their corresponding integer values\n        Map<String, Integer> numberMap = new HashMap<>();\n        numberMap.put(\"zero\", 0);\n        numberMap.put(\"one\", 1);\n        numberMap.put(\"two\", 2);\n        numberMap.put(\"three\", 3);\n        numberMap.put(\"four\", 4);\n        numberMap.put(\"five\", 5);\n        numberMap.put(\"six\", 6);\n        numberMap.put(\"seven\", 7);\n        numberMap.put(\"eight\", 8);\n        numberMap.put(\"nine\", 9);\n        \n        // Split the input string into words\n        String[] words = numbers.split(\" \");\n        \n        // Create a list to hold the integer values\n        List<Integer> numberList = new ArrayList<>();\n        \n        // Convert words to their corresponding integer values\n        for (String word : words) {\n            numberList.add(numberMap.get(word));\n        }\n        \n        // Sort the list of integers\n        Collections.sort(numberList);\n        \n        // Create a list to hold the sorted number words\n        List<String> sortedWords = new ArrayList<>();\n        \n        // Convert sorted integers back to their corresponding words\n        for (Integer num : numberList) {\n            for (Map.Entry<String, Integer> entry : numberMap.entrySet()) {\n                if (entry.getValue().equals(num)) {\n                    sortedWords.add(entry.getKey());\n                    break;\n                }\n            }\n        }\n        \n        // Join the sorted words into a single string\n        return String.join(\" \", sortedWords);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sort_numbers(\"three one five\")); // Output: \"one three five\"\n        System.out.println(solution.sort_numbers(\"nine eight seven six five four three two one zero\")); // Output: \"zero one two three four five six seven eight nine\"\n    }\n}\n"}
{"task_id": "Java/118", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String get_closest_vowel(String word) {\n        String vowels = \"aeiouAEIOU\";\n        String closestVowel = \"\";\n\n        // Start from the end of the word and look for consonants\n        for (int i = word.length() - 1; i > 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) != -1) {\n                continue;\n            }\n            if (i > 1 && vowels.indexOf(word.charAt(i - 1)) != -1 && \n                vowels.indexOf(word.charAt(i - 2)) == -1) {\n                closestVowel = String.valueOf(word.charAt(i - 1));\n                break;\n            }\n        }\n        return closestVowel;\n    }\n}\n"}
{"task_id": "Java/101", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> words_string(String s) {\n        // Replace commas with spaces and split the string by whitespace\n        String[] wordsArray = s.replace(\",\", \" \").split(\"\\\\s+\");\n        List<String> wordsList = new ArrayList<>();\n        \n        // Add each word to the list after trimming whitespace\n        for (String word : wordsArray) {\n            wordsList.add(word.trim());\n        }\n        \n        return wordsList;\n    }\n}\n"}
{"task_id": "Java/151", "generation": "class Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    double_the_difference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    double_the_difference(Arrays.asList(-1, -2, 0)) == 0\n    double_the_difference(Arrays.asList(9, -2)) == 81\n    double_the_difference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int double_the_difference(List<Object> lst) {\n        int sum = 0;\n\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                // Check if the number is odd and non-negative\n                if (num >= 0 && num % 2 != 0) {\n                    sum += num * num; // Add the square of the number to the sum\n                }\n            }\n        }\n\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.double_the_difference(Arrays.asList(1, 3, 2, 0))); // Output: 10\n        System.out.println(solution.double_the_difference(Arrays.asList(-1, -2, 0))); // Output: 0\n        System.out.println(solution.double_the_difference(Arrays.asList(9, -2))); // Output: 81\n        System.out.println(solution.double_the_difference(Arrays.asList(0))); // Output: 0\n        System.out.println(solution.double_the_difference(Arrays.asList())); // Output: 0\n    }\n}\n"}
{"task_id": "Java/133", "generation": "class Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sum_squares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            // Round up to the nearest integer\n            int rounded = (int) Math.ceil(num);\n            // Square the rounded integer and add to sum\n            sum += rounded * rounded;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.sum_squares(Arrays.asList(1.0, 2.0, 3.0))); // Output: 14\n        System.out.println(solution.sum_squares(Arrays.asList(1.0, 4.0, 9.0))); // Output: 98\n        System.out.println(solution.sum_squares(Arrays.asList(1.0, 3.0, 5.0, 7.0))); // Output: 84\n        System.out.println(solution.sum_squares(Arrays.asList(1.4, 4.2, 0.0))); // Output: 29\n        System.out.println(solution.sum_squares(Arrays.asList(-2.4, 1.0, 1.0))); // Output: 6\n    }\n}\n"}
{"task_id": "Java/144", "generation": "class Solution {\n    public boolean simplify(String x, String n) {\n        // Split the fractions into numerator and denominator\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n        \n        // Parse the numerators and denominators\n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n        \n        // Calculate the product's numerator and denominator\n        int productNumerator = xNumerator * nNumerator;\n        int productDenominator = xDenominator * nDenominator;\n        \n        // Check if the product is a whole number\n        return productNumerator % productDenominator == 0;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.simplify(\"1/5\", \"5/1\")); // true\n        System.out.println(solution.simplify(\"1/6\", \"2/1\")); // false\n        System.out.println(solution.simplify(\"7/10\", \"10/2\")); // false\n    }\n}\n"}
{"task_id": "Java/158", "generation": "class Solution {\n    public String find_max(List<String> words) {\n        String maxWord = \"\";\n        int maxUniqueCount = 0;\n\n        for (String word : words) {\n            // Use a Set to count unique characters\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            int uniqueCount = uniqueChars.size();\n\n            // Check if we found a new maximum or if we need to update for lexicographical order\n            if (uniqueCount > maxUniqueCount || \n                (uniqueCount == maxUniqueCount && word.compareTo(maxWord) < 0)) {\n                maxUniqueCount = uniqueCount;\n                maxWord = word;\n            }\n        }\n\n        return maxWord;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.find_max(Arrays.asList(\"name\", \"of\", \"string\"))); // Output: \"string\"\n        System.out.println(solution.find_max(Arrays.asList(\"name\", \"enam\", \"game\"))); // Output: \"enam\"\n        System.out.println(solution.find_max(Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\"))); // Output: \"aaaaaaa\"\n    }\n}\n"}
{"task_id": "Java/63", "generation": "class Solution {\n    public int fibfib(int n) {\n        // Handle base cases\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n\n        // Create an array to store the fibfib numbers\n        int[] fibfib = new int[n + 1];\n        fibfib[0] = 0; // fibfib(0)\n        fibfib[1] = 0; // fibfib(1)\n        fibfib[2] = 1; // fibfib(2)\n\n        // Compute fibfib numbers iteratively\n        for (int i = 3; i <= n; i++) {\n            fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n        }\n\n        // Return the n-th fibfib number\n        return fibfib[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fibfib(1)); // Output: 0\n        System.out.println(solution.fibfib(5)); // Output: 4\n        System.out.println(solution.fibfib(8)); // Output: 24\n    }\n}\n"}
{"task_id": "Java/37", "generation": "class Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indices, while its values at the even indices are equal\n    to the values of the even indices of l, but sorted.\n    >>> sort_even(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sort_even(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n    */\n    public List<Integer> sort_even(List<Integer> l) {\n        // Create a list to hold the even indexed values\n        List<Integer> evenValues = new ArrayList<>();\n        \n        // Extract even indexed values\n        for (int i = 0; i < l.size(); i += 2) {\n            evenValues.add(l.get(i));\n        }\n        \n        // Sort the even indexed values\n        Collections.sort(evenValues);\n        \n        // Create a new list to hold the result\n        List<Integer> result = new ArrayList<>(l);\n        \n        // Replace the even indices in the result with the sorted values\n        for (int i = 0; i < evenValues.size(); i++) {\n            result.set(i * 2, evenValues.get(i));\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        \n        // Test cases\n        System.out.println(sol.sort_even(Arrays.asList(1, 2, 3))); // [1, 2, 3]\n        System.out.println(sol.sort_even(Arrays.asList(5, 6, 3, 4))); // [3, 6, 5, 4]\n    }\n}\n"}
{"task_id": "Java/159", "generation": "class Solution {\n    public List<Integer> eat(int number, int need, int remaining) {\n        // Calculate total eaten carrots after meals\n        int totalEaten = number + Math.min(need, remaining);\n        \n        // Calculate remaining carrots after meals\n        int carrotsLeft = remaining - Math.min(need, remaining);\n        \n        // Create the result list\n        List<Integer> result = new ArrayList<>();\n        result.add(totalEaten);\n        result.add(carrotsLeft);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.eat(5, 6, 10)); // Output: [11, 4]\n        System.out.println(solution.eat(4, 8, 9));  // Output: [12, 1]\n        System.out.println(solution.eat(1, 10, 10)); // Output: [11, 0]\n        System.out.println(solution.eat(2, 11, 5));  // Output: [7, 0]\n    }\n}\n"}
{"task_id": "Java/52", "generation": "class Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> below_threshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n    */\n    public boolean below_threshold(List<Integer> l, int t) {\n        for (Integer num : l) {\n            if (num >= t) {\n                return false; // Found a number that is not below the threshold\n            }\n        }\n        return true; // All numbers are below the threshold\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.below_threshold(Arrays.asList(1, 2, 4, 10), 100)); // true\n        System.out.println(solution.below_threshold(Arrays.asList(1, 20, 4, 10), 5)); // false\n    }\n}\n"}
{"task_id": "Java/137", "generation": "class Solution {\n    public Optional<Object> compare_one(Object a, Object b) {\n        // Convert both inputs to comparable numbers\n        Double numA = convertToNumber(a);\n        Double numB = convertToNumber(b);\n        \n        // If both are equal, return Optional.empty()\n        if (numA != null && numB != null && numA.equals(numB)) {\n            return Optional.empty();\n        }\n        \n        // If both are numbers, return the larger one\n        if (numA != null && numB != null) {\n            return Optional.of(numA > numB ? a : b);\n        }\n        \n        // If one is a number and the other is a string, we need to compare them\n        if (numA != null) {\n            return Optional.of(a);\n        } else if (numB != null) {\n            return Optional.of(b);\n        }\n        \n        // If both are strings, we need to compare them lexicographically\n        String strA = a.toString();\n        String strB = b.toString();\n        \n        int comparison = strA.compareTo(strB);\n        if (comparison > 0) {\n            return Optional.of(b);\n        } else if (comparison < 0) {\n            return Optional.of(a);\n        } else {\n            return Optional.empty();\n        }\n    }\n\n    private Double convertToNumber(Object obj) {\n        if (obj instanceof Number) {\n            return ((Number) obj).doubleValue();\n        } else if (obj instanceof String) {\n            String str = (String) obj;\n            str = str.replace(\",\", \".\"); // Replace comma with dot for decimal\n            try {\n                return Double.parseDouble(str);\n            } catch (NumberFormatException e) {\n                return null; // Return null if the string cannot be parsed\n            }\n        }\n        return null; // Return null for unsupported types\n    }\n}\n"}
{"task_id": "Java/154", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean cycpattern_check(String a, String b) {\n        // Check if b is longer than a\n        if (b.length() > a.length()) {\n            return false;\n        }\n        \n        // Create a new string that is the concatenation of b with itself\n        String b_rotated = b + b;\n        \n        // Check if b or any of its rotations is a substring of a\n        return b_rotated.contains(a) || a.contains(b_rotated.substring(0, a.length()));\n    }\n}\n"}
{"task_id": "Java/44", "generation": "class Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\n    >>> change_base(7, 2)\n    \"111\"\n    */\n    public String change_base(int x, int base) {\n        if (x == 0) {\n            return \"0\"; // Handle the case for zero\n        }\n        \n        StringBuilder result = new StringBuilder();\n        \n        while (x > 0) {\n            int remainder = x % base; // Get the remainder\n            result.append(remainder); // Append the remainder to the result\n            x /= base; // Divide x by the base\n        }\n        \n        // The digits are in reverse order, so we need to reverse the result\n        return result.reverse().toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.change_base(8, 3)); // Output: \"22\"\n        System.out.println(solution.change_base(8, 2)); // Output: \"1000\"\n        System.out.println(solution.change_base(7, 2)); // Output: \"111\"\n    }\n}\n"}
{"task_id": "Java/112", "generation": "class Solution {\n    public List<Object> reverse_delete(String s, String c) {\n        // Create a set of characters to delete\n        Set<Character> charsToDelete = new HashSet<>();\n        for (char ch : c.toCharArray()) {\n            charsToDelete.add(ch);\n        }\n\n        // Build the result string by excluding characters in charsToDelete\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!charsToDelete.contains(ch)) {\n                result.append(ch);\n            }\n        }\n\n        // Check if the result string is a palindrome\n        String resultString = result.toString();\n        boolean isPalindrome = isPalindrome(resultString);\n\n        // Return the result as a list\n        return Arrays.asList(resultString, isPalindrome);\n    }\n\n    private boolean isPalindrome(String str) {\n        int left = 0;\n        int right = str.length() - 1;\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.reverse_delete(\"abcde\", \"ae\")); // Output: [\"bcd\", false]\n        System.out.println(solution.reverse_delete(\"abcdef\", \"b\")); // Output: [\"acdef\", false]\n        System.out.println(solution.reverse_delete(\"abcdedcba\", \"ab\")); // Output: [\"cdedc\", true]\n    }\n}\n"}
{"task_id": "Java/87", "generation": "class Solution {\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        \n        // Iterate through each row\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            // Iterate through each element in the row\n            for (int j = 0; j < row.size(); j++) {\n                // Check if the element matches x\n                if (row.get(j) == x) {\n                    // Add the coordinates to the result\n                    result.add(Arrays.asList(i, j));\n                }\n            }\n        }\n        \n        // Sort the result by row index (ascending) and column index (descending)\n        Collections.sort(result, new Comparator<List<Integer>>() {\n            @Override\n            public int compare(List<Integer> a, List<Integer> b) {\n                // First compare by row index\n                if (!a.get(0).equals(b.get(0))) {\n                    return a.get(0) - b.get(0);\n                }\n                // If row indices are the same, compare by column index (descending)\n                return b.get(1) - a.get(1);\n            }\n        });\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/113", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (int index = 0; index < lst.size(); index++) {\n            String string = lst.get(index);\n            int oddCount = 0;\n            for (char ch : string.toCharArray()) {\n                if ((ch - '0') % 2 != 0) {\n                    oddCount++;\n                }\n            }\n            result.add(\"the number of odd elements \" + oddCount + \"n the str\" + oddCount + \"ng \" + oddCount + \" of the \" + oddCount + \"nput.\");\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/29", "generation": "class Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix(List.of(), \"a\")\n    []\n    >>> filter_by_prefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n    */\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        // Use Stream API to filter the list based on the prefix\n        return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.filter_by_prefix(List.of(), \"a\")); // []\n        System.out.println(solution.filter_by_prefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")); // [\"abc\", \"array\"]\n    }\n}\n"}
{"task_id": "Java/6", "generation": "class Solution {\n    public List<Integer> parse_nested_parens(String paren_string) {\n        // Split the input string into groups based on spaces\n        String[] groups = paren_string.split(\" \");\n        List<Integer> depths = new ArrayList<>();\n\n        // Process each group\n        for (String group : groups) {\n            int currentDepth = 0;\n            int maxDepth = 0;\n\n            // Iterate through each character in the group\n            for (char ch : group.toCharArray()) {\n                if (ch == '(') {\n                    currentDepth++; // Increase depth for '('\n                    maxDepth = Math.max(maxDepth, currentDepth); // Update max depth\n                } else if (ch == ')') {\n                    currentDepth--; // Decrease depth for ')'\n                }\n            }\n\n            // Add the maximum depth found for this group to the list\n            depths.add(maxDepth);\n        }\n\n        return depths;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"(()()) ((())) () ((())()())\";\n        List<Integer> result = solution.parse_nested_parens(input);\n        System.out.println(result); // Output: [2, 3, 1, 3]\n    }\n}\n"}
{"task_id": "Java/46", "generation": "class Solution {\n    public int fib4(int n) {\n        // Handle base cases\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n == 3) return 0;\n\n        // Create an array to store the fib4 values\n        int[] fib4 = new int[n + 1];\n        fib4[0] = 0; // fib4(0)\n        fib4[1] = 0; // fib4(1)\n        fib4[2] = 2; // fib4(2)\n        fib4[3] = 0; // fib4(3)\n\n        // Compute fib4 values iteratively\n        for (int i = 4; i <= n; i++) {\n            fib4[i] = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i - 4];\n        }\n\n        // Return the n-th fib4 value\n        return fib4[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fib4(5)); // Output: 4\n        System.out.println(solution.fib4(6)); // Output: 8\n        System.out.println(solution.fib4(7)); // Output: 14\n    }\n}\n"}
{"task_id": "Java/16", "generation": "class Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    */\n    public int count_distinct_characters(String string) {\n        // Use a HashSet to store distinct characters\n        Set<Character> distinctChars = new HashSet<>();\n        \n        // Convert the string to lower case to ensure case insensitivity\n        string = string.toLowerCase();\n        \n        // Iterate through each character in the string\n        for (char c : string.toCharArray()) {\n            // Add the character to the set\n            distinctChars.add(c);\n        }\n        \n        // The size of the set is the number of distinct characters\n        return distinctChars.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.count_distinct_characters(\"xyzXYZ\")); // Output: 3\n        System.out.println(solution.count_distinct_characters(\"Jerry\"));  // Output: 4\n    }\n}\n"}
{"task_id": "Java/99", "generation": "class Solution {\n    public int closest_integer(String value) {\n        // Parse the string to a double\n        double number = Double.parseDouble(value);\n        \n        // Get the floor and ceiling of the number\n        int floor = (int) Math.floor(number);\n        int ceiling = (int) Math.ceil(number);\n        \n        // Calculate the distances to the floor and ceiling\n        double distanceToFloor = Math.abs(number - floor);\n        double distanceToCeiling = Math.abs(number - ceiling);\n        \n        // Determine which integer to return based on the distances\n        if (distanceToFloor < distanceToCeiling) {\n            return floor; // Closer to floor\n        } else if (distanceToCeiling < distanceToFloor) {\n            return ceiling; // Closer to ceiling\n        } else {\n            // Equidistant case: round away from zero\n            if (number > 0) {\n                return ceiling; // Round up\n            } else {\n                return floor; // Round down (away from zero)\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.closest_integer(\"10\"));    // Output: 10\n        System.out.println(solution.closest_integer(\"15.3\"));  // Output: 15\n        System.out.println(solution.closest_integer(\"14.5\"));  // Output: 15\n        System.out.println(solution.closest_integer(\"-14.5\")); // Output: -15\n        System.out.println(solution.closest_integer(\"0.5\"));   // Output: 1\n        System.out.println(solution.closest_integer(\"-0.5\"));  // Output: -1\n    }\n}\n"}
{"task_id": "Java/122", "generation": "class Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int add_elements(List<Integer> arr, int k) {\n        int sum = 0;\n        \n        // Iterate through the first k elements\n        for (int i = 0; i < k; i++) {\n            int num = arr.get(i);\n            // Check if the number has at most two digits\n            if (num >= -99 && num <= 99) {\n                sum += num; // Add to sum if condition is met\n            }\n        }\n        \n        return sum; // Return the final sum\n    }\n}\n"}
{"task_id": "Java/53", "generation": "class Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    */\n    public int add(int x, int y) {\n        return x + y;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(\"add(2, 3) = \" + solution.add(2, 3)); // Output: 5\n        System.out.println(\"add(5, 7) = \" + solution.add(5, 7)); // Output: 12\n    }\n}\n"}
{"task_id": "Java/162", "generation": "class Solution {\n    /**\n     * Given a string \"text\", return its md5 hash equivalent string with length being 32.\n     * If \"text\" is an empty string, return Optional.empty().\n     *\n     * >>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text == null || text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n\n        // Convert byte array to hex string\n        StringBuilder hexString = new StringBuilder();\n        for (byte b : digest) {\n            String hex = Integer.toHexString(0xff & b);\n            if (hex.length() == 1) {\n                hexString.append('0'); // Append leading zero for single digit hex\n            }\n            hexString.append(hex);\n        }\n\n        return Optional.of(hexString.toString());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        try {\n            Optional<String> md5Hash = solution.string_to_md5(\"Hello world\");\n            md5Hash.ifPresent(System.out::println); // Should print: 3e25960a79dbc69b674cd4ec67a72c62\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n    }\n}\n"}
{"task_id": "Java/58", "generation": "class Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n    */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        // Convert lists to sets to remove duplicates\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        \n        // Retain only the common elements\n        set1.retainAll(set2);\n        \n        // Convert the set back to a list and sort it\n        List<Integer> commonList = new ArrayList<>(set1);\n        Collections.sort(commonList);\n        \n        return commonList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))); // [1, 5, 653]\n        System.out.println(solution.common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))); // [2, 3]\n    }\n}\n"}
{"task_id": "Java/73", "generation": "class Solution {\n    public int smallest_change(List<Integer> arr) {\n        int left = 0;\n        int right = arr.size() - 1;\n        int changes = 0;\n\n        while (left < right) {\n            if (!arr.get(left).equals(arr.get(right))) {\n                changes++; // We need to change one of these elements\n            }\n            left++;\n            right--;\n        }\n\n        return changes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.smallest_change(Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6))); // Output: 4\n        System.out.println(solution.smallest_change(Arrays.asList(1, 2, 3, 4, 3, 2, 2))); // Output: 1\n        System.out.println(solution.smallest_change(Arrays.asList(1, 2, 3, 2, 1))); // Output: 0\n    }\n}\n"}
{"task_id": "Java/150", "generation": "class Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    */\n    public int x_or_y(int n, int x, int y) {\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    // Helper method to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false; // 0 and 1 are not prime numbers\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false; // Found a divisor, not prime\n            }\n        }\n        return true; // No divisors found, it's prime\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.x_or_y(7, 34, 12)); // Output: 34\n        System.out.println(solution.x_or_y(15, 8, 5)); // Output: 5\n    }\n}\n"}
{"task_id": "Java/54", "generation": "class Solution {\n    /**\n    Check if two words have the same kind of characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    */\n    public boolean same_chars(String s0, String s1) {\n        Set<Character> set1 = new HashSet<>();\n        Set<Character> set2 = new HashSet<>();\n        \n        // Add characters from the first string to set1\n        for (char c : s0.toCharArray()) {\n            set1.add(c);\n        }\n        \n        // Add characters from the second string to set2\n        for (char c : s1.toCharArray()) {\n            set2.add(c);\n        }\n        \n        // Compare the two sets\n        return set1.equals(set2);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // true\n        System.out.println(solution.same_chars(\"abcd\", \"dddddddabc\")); // true\n        System.out.println(solution.same_chars(\"dddddddabc\", \"abcd\")); // true\n        System.out.println(solution.same_chars(\"eabcd\", \"dddddddabc\")); // false\n        System.out.println(solution.same_chars(\"abcd\", \"dddddddabce\")); // false\n        System.out.println(solution.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // false\n    }\n}\n"}
{"task_id": "Java/108", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int count_nums(List<Integer> arr) {\n        int count = 0;\n        \n        for (int num : arr) {\n            if (sumOfDigits(num) > 0) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n    \n    private int sumOfDigits(int n) {\n        int sum = 0;\n        String strNum = Integer.toString(Math.abs(n));\n        \n        for (int i = 0; i < strNum.length(); i++) {\n            int digit = Character.getNumericValue(strNum.charAt(i));\n            if (i == 0 && n < 0) {\n                sum -= digit; // First digit is negative\n            } else {\n                sum += digit; // Other digits are positive\n            }\n        }\n        \n        return sum;\n    }\n}\n"}
{"task_id": "Java/20", "generation": "class Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n    */\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        // Sort the list\n        Collections.sort(numbers);\n        \n        // Initialize variables to track the closest pair\n        double minDiff = Double.MAX_VALUE;\n        List<Double> closestPair = new ArrayList<>();\n        \n        // Iterate through the sorted list to find the closest pair\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double num1 = numbers.get(i);\n            double num2 = numbers.get(i + 1);\n            double diff = num2 - num1; // Since the list is sorted, num2 >= num1\n            \n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair.clear();\n                closestPair.add(num1);\n                closestPair.add(num2);\n            }\n        }\n        \n        return closestPair;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))); // [2.0, 2.2]\n        System.out.println(solution.find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))); // [2.0, 2.0]\n    }\n}\n"}
{"task_id": "Java/90", "generation": "class Solution {\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        // Use a TreeSet to store unique elements in sorted order\n        Set<Integer> uniqueElements = new TreeSet<>(lst);\n        \n        // If there are fewer than 2 unique elements, return Optional.empty\n        if (uniqueElements.size() < 2) {\n            return Optional.empty();\n        }\n        \n        // Get the second smallest element\n        Iterator<Integer> iterator = uniqueElements.iterator();\n        iterator.next(); // Skip the smallest element\n        return Optional.of(iterator.next()); // Return the second smallest element\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.next_smallest(Arrays.asList(1, 2, 3, 4, 5))); // Optional[2]\n        System.out.println(solution.next_smallest(Arrays.asList(5, 1, 4, 3, 2))); // Optional[2]\n        System.out.println(solution.next_smallest(Arrays.asList())); // Optional.empty\n        System.out.println(solution.next_smallest(Arrays.asList(1, 1))); // Optional.empty\n    }\n}\n"}
{"task_id": "Java/131", "generation": "class Solution {\n    public int digits(int n) {\n        int product = 1;\n        boolean hasOddDigit = false;\n\n        while (n > 0) {\n            int digit = n % 10; // Get the last digit\n            if (digit % 2 != 0) { // Check if the digit is odd\n                product *= digit; // Multiply to the product\n                hasOddDigit = true; // Mark that we found an odd digit\n            }\n            n /= 10; // Remove the last digit\n        }\n\n        return hasOddDigit ? product : 0; // Return product or 0 if no odd digits\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.digits(1));    // Output: 1\n        System.out.println(solution.digits(4));    // Output: 0\n        System.out.println(solution.digits(235));  // Output: 15\n        System.out.println(solution.digits(2468)); // Output: 0\n        System.out.println(solution.digits(13579)); // Output: 945\n    }\n}\n"}
{"task_id": "Java/160", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        int result = operand.get(0); // Initialize result with the first operand\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int nextOperand = operand.get(i + 1); // Get the next operand\n            switch (op) {\n                case \"+\":\n                    result += nextOperand;\n                    break;\n                case \"-\":\n                    result -= nextOperand;\n                    break;\n                case \"*\":\n                    result *= nextOperand;\n                    break;\n                case \"/\":\n                    result /= nextOperand; // Floor division is handled by integer division\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, nextOperand); // Exponentiation\n                    break;\n            }\n        }\n        return result; // Return the final result\n    }\n}\n"}
{"task_id": "Java/17", "generation": "class Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    note last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quarter note, lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    */\n    public List<Integer> parse_music(String string) {\n        // Split the input string into individual notes\n        String[] notes = string.split(\" \");\n        // Create a list to store the beats\n        List<Integer> beats = new ArrayList<>();\n\n        // Iterate through each note and determine the number of beats\n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    beats.add(4); // Whole note\n                    break;\n                case \"o|\":\n                    beats.add(2); // Half note\n                    break;\n                case \".|\":\n                    beats.add(1); // Quarter note\n                    break;\n                default:\n                    // If the note is unrecognized, we can choose to ignore it or handle it\n                    // For this implementation, we will ignore unrecognized notes\n                    break;\n            }\n        }\n\n        return beats; // Return the list of beats\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.parse_music(\"o o| .| o| o| .| .| .| .| o o\")); // Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    }\n}\n"}
{"task_id": "Java/98", "generation": "class Solution {\n    public int count_upper(String s) {\n        int count = 0; // Initialize the counter for uppercase vowels\n        // Define a set of uppercase vowels for easy checking\n        Set<Character> uppercaseVowels = new HashSet<>(Arrays.asList('A', 'E', 'I', 'O', 'U'));\n\n        // Loop through the string, checking only even indices\n        for (int i = 0; i < s.length(); i += 2) {\n            char currentChar = s.charAt(i); // Get the character at the current even index\n            // Check if the character is an uppercase vowel\n            if (uppercaseVowels.contains(currentChar)) {\n                count++; // Increment the counter if it is an uppercase vowel\n            }\n        }\n        return count; // Return the final count\n    }\n}\n"}
{"task_id": "Java/65", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String circular_shift(int x, int shift) {\n        String xStr = Integer.toString(x);\n        int n = xStr.length();\n        \n        // If shift is greater than the number of digits, reverse the string\n        if (shift > n) {\n            return new StringBuilder(xStr).reverse().toString();\n        }\n        \n        // Perform the circular shift\n        shift = shift % n; // In case shift is larger than the number of digits\n        String shifted = xStr.substring(n - shift) + xStr.substring(0, n - shift);\n        return shifted;\n    }\n}\n"}
{"task_id": "Java/8", "generation": "class Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product(List.of())\n    [0, 1]\n    >>> sum_product(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sum_product(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n\n        // If the list is empty, return the default values\n        if (numbers.isEmpty()) {\n            return Arrays.asList(sum, product);\n        }\n\n        // Calculate sum and product\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n\n        return Arrays.asList(sum, product);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.sum_product(List.of())); // Output: [0, 1]\n        System.out.println(solution.sum_product(Arrays.asList(1, 2, 3, 4))); // Output: [10, 24]\n        System.out.println(solution.sum_product(Arrays.asList(-1, -2, -3))); // Output: [-6, -6]\n        System.out.println(solution.sum_product(Arrays.asList(5))); // Output: [5, 5]\n    }\n}\n"}
{"task_id": "Java/49", "generation": "class Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        if (p == 1) return 0; // Since any number mod 1 is 0\n        long result = 1;\n        long base = 2;\n        long exponent = n;\n\n        while (exponent > 0) {\n            if ((exponent % 2) == 1) { // If exponent is odd\n                result = (result * base) % p;\n            }\n            base = (base * base) % p; // Square the base\n            exponent /= 2; // Divide the exponent by 2\n        }\n\n        return (int) result;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.modp(3, 5));    // Output: 3\n        System.out.println(sol.modp(1101, 101)); // Output: 2\n        System.out.println(sol.modp(0, 101));   // Output: 1\n        System.out.println(sol.modp(3, 11));    // Output: 8\n        System.out.println(sol.modp(100, 101)); // Output: 1\n    }\n}\n"}
{"task_id": "Java/153", "generation": "class Solution {\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        String strongestExtension = \"\";\n        int maxStrength = Integer.MIN_VALUE;\n\n        for (String extension : extensions) {\n            int capCount = 0;\n            int smCount = 0;\n\n            // Calculate CAP and SM\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smCount++;\n                }\n            }\n\n            // Calculate strength\n            int strength = capCount - smCount;\n\n            // Update strongest extension if this one is stronger\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        // Return the result in the required format\n        return class_name + \".\" + strongestExtension;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String className = \"Slices\";\n        List<String> extensions = Arrays.asList(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\");\n        System.out.println(solution.Strongest_Extension(className, extensions)); // Output: \"Slices.SErviNGSliCes\"\n\n        className = \"my_class\";\n        extensions = Arrays.asList(\"AA\", \"Be\", \"CC\");\n        System.out.println(solution.Strongest_Extension(className, extensions)); // Output: \"my_class.AA\"\n    }\n}\n"}
{"task_id": "Java/96", "generation": "class Solution {\n    public List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<>();\n        \n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        \n        return primes;\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) return false; // 0 and 1 are not prime numbers\n        if (num == 2) return true;  // 2 is the only even prime number\n        if (num % 2 == 0) return false; // exclude even numbers greater than 2\n        \n        for (int i = 3; i * i <= num; i += 2) {\n            if (num % i == 0) {\n                return false; // found a divisor, not prime\n            }\n        }\n        \n        return true; // no divisors found, it is prime\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.count_up_to(5));  // Output: [2, 3]\n        System.out.println(solution.count_up_to(11)); // Output: [2, 3, 5, 7]\n        System.out.println(solution.count_up_to(0));  // Output: []\n        System.out.println(solution.count_up_to(20)); // Output: [2, 3, 5, 7, 11, 13, 17, 19]\n        System.out.println(solution.count_up_to(1));  // Output: []\n        System.out.println(solution.count_up_to(18)); // Output: [2, 3, 5, 7, 11, 13, 17]\n    }\n}\n"}
{"task_id": "Java/64", "generation": "class Solution {\n    public int vowels_count(String s) {\n        // Convert the string to lowercase to handle case insensitivity\n        s = s.toLowerCase();\n        int count = 0;\n        \n        // Get the length of the string\n        int length = s.length();\n        \n        // Iterate through each character in the string\n        for (int i = 0; i < length; i++) {\n            char c = s.charAt(i);\n            // Check if the character is a vowel\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n            // Check if the character is 'y' and it's the last character of the string\n            if (c == 'y' && i == length - 1) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.vowels_count(\"abcde\")); // Output: 2\n        System.out.println(sol.vowels_count(\"ACEDY\")); // Output: 3\n        System.out.println(sol.vowels_count(\"hello\")); // Output: 2\n        System.out.println(sol.vowels_count(\"sky\")); // Output: 1\n        System.out.println(sol.vowels_count(\"Y\")); // Output: 1\n    }\n}\n"}
{"task_id": "Java/102", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int choose_num(int x, int y) {\n        if (x > y) {\n            return -1; // No valid range\n        }\n        // Check if y is even\n        if (y % 2 == 0) {\n            return y; // y is the largest even number\n        } else {\n            // Check if y - 1 is within the range\n            return (y - 1 >= x) ? (y - 1) : -1; // Return y - 1 if it's within range, else -1\n        }\n    }\n}\n"}
{"task_id": "Java/88", "generation": "class Solution {\n    public List<Integer> sort_array(List<Integer> array) {\n        // Step 1: Check if the array is empty\n        if (array.isEmpty()) {\n            return new ArrayList<>(); // Return an empty list\n        }\n\n        // Step 2: Check if the array has only one element\n        if (array.size() == 1) {\n            return new ArrayList<>(array); // Return a copy of the single element list\n        }\n\n        // Step 3: Calculate the sum of the first and last elements\n        int firstElement = array.get(0);\n        int lastElement = array.get(array.size() - 1);\n        int sum = firstElement + lastElement;\n\n        // Step 4: Create a copy of the array to sort\n        List<Integer> sortedArray = new ArrayList<>(array);\n\n        // Step 5: Sort the array based on the sum\n        if (sum % 2 == 0) {\n            // Sum is even, sort in descending order\n            Collections.sort(sortedArray, Collections.reverseOrder());\n        } else {\n            // Sum is odd, sort in ascending order\n            Collections.sort(sortedArray);\n        }\n\n        // Step 6: Return the sorted array\n        return sortedArray;\n    }\n}\n"}
{"task_id": "Java/146", "generation": "class Solution {\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n\n        for (int num : nums) {\n            if (num > 10) {\n                int firstDigit = getFirstDigit(num);\n                int lastDigit = getLastDigit(num);\n\n                if (isOdd(firstDigit) && isOdd(lastDigit)) {\n                    count++;\n                }\n            }\n        }\n\n        return count;\n    }\n\n    private int getFirstDigit(int num) {\n        // Make sure to work with positive numbers for digit extraction\n        num = Math.abs(num);\n        while (num >= 10) {\n            num /= 10;\n        }\n        return num;\n    }\n\n    private int getLastDigit(int num) {\n        // Make sure to work with positive numbers for digit extraction\n        return Math.abs(num) % 10;\n    }\n\n    private boolean isOdd(int digit) {\n        return digit % 2 != 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.specialFilter(Arrays.asList(15, -73, 14, -15))); // Output: 1\n        System.out.println(solution.specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109))); // Output: 2\n    }\n}\n"}
{"task_id": "Java/30", "generation": "class Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> get_positive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> get_positive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n    */\n    public List<Integer> get_positive(List<Integer> l) {\n        return l.stream()\n                .filter(num -> num > 0) // Filter only positive numbers\n                .collect(Collectors.toList()); // Collect the results into a list\n    }\n}\n"}
{"task_id": "Java/97", "generation": "class Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        // Get the unit digits\n        int unitDigitA = Math.abs(a) % 10; // Use abs to handle negative numbers\n        int unitDigitB = Math.abs(b) % 10; // Use abs to handle negative numbers\n        \n        // Calculate the product of the unit digits\n        return unitDigitA * unitDigitB;\n    }\n}\n"}
{"task_id": "Java/95", "generation": "class Solution {\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        // Check if the map is empty\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        boolean allLowerCase = true;\n        boolean allUpperCase = true;\n\n        for (Object key : dict.keySet()) {\n            // Check if the key is a String\n            if (!(key instanceof String)) {\n                return false;\n            }\n\n            String strKey = (String) key;\n\n            // Check if the key is in lower case\n            if (!strKey.equals(strKey.toLowerCase())) {\n                allLowerCase = false;\n            }\n\n            // Check if the key is in upper case\n            if (!strKey.equals(strKey.toUpperCase())) {\n                allUpperCase = false;\n            }\n        }\n\n        // Return true if all keys are either all lower case or all upper case\n        return allLowerCase || allUpperCase;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.check_dict_case(Map.of(\"a\", \"apple\", \"b\", \"banana\"))); // True\n        System.out.println(solution.check_dict_case(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"banana\"))); // False\n        System.out.println(solution.check_dict_case(Map.of(8, \"banana\", \"a\", \"apple\"))); // False\n        System.out.println(solution.check_dict_case(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\"))); // False\n        System.out.println(solution.check_dict_case(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))); // True\n    }\n}\n"}
{"task_id": "Java/10", "generation": "class Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n     */\n    public String make_palindrome(String string) {\n        if (string == null || string.isEmpty()) {\n            return string; // Return the empty string as is\n        }\n\n        int n = string.length();\n        int longestPalindromicSuffixLength = 0;\n\n        // Find the longest palindromic suffix\n        for (int i = 0; i < n; i++) {\n            if (isPalindrome(string.substring(i))) {\n                longestPalindromicSuffixLength = n - i;\n                break;\n            }\n        }\n\n        // The prefix that is not part of the palindrome\n        String prefix = string.substring(0, n - longestPalindromicSuffixLength);\n        // Reverse the prefix\n        String reversedPrefix = new StringBuilder(prefix).reverse().toString();\n\n        // Construct the final palindrome\n        return string + reversedPrefix;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.make_palindrome(\"\")); // \"\"\n        System.out.println(solution.make_palindrome(\"cat\")); // \"catac\"\n        System.out.println(solution.make_palindrome(\"cata\")); // \"catac\"\n        System.out.println(solution.make_palindrome(\"race\")); // \"racecar\"\n    }\n}\n"}
{"task_id": "Java/109", "generation": "class Solution {\n    public boolean move_one_ball(List<Integer> arr) {\n        // Edge case: if the array is empty, return true\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        int breakCount = 0;\n        int n = arr.size();\n\n        // Check for the number of breaks in the array\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i) > arr.get((i + 1) % n)) {\n                breakCount++;\n            }\n        }\n\n        // If there is more than one break, return false\n        return breakCount <= 1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.move_one_ball(Arrays.asList(3, 4, 5, 1, 2))); // true\n        System.out.println(solution.move_one_ball(Arrays.asList(3, 5, 4, 1, 2))); // false\n    }\n}\n"}
{"task_id": "Java/4", "generation": "class Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n    */\n    public double mean_absolute_deviation(List<Double> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            throw new IllegalArgumentException(\"The list of numbers cannot be null or empty.\");\n        }\n\n        // Step 1: Calculate the mean\n        double sum = 0.0;\n        for (double number : numbers) {\n            sum += number;\n        }\n        double mean = sum / numbers.size();\n\n        // Step 2: Calculate the absolute differences from the mean\n        double madSum = 0.0;\n        for (double number : numbers) {\n            madSum += Math.abs(number - mean);\n        }\n\n        // Step 3: Calculate the mean of the absolute differences\n        double mad = madSum / numbers.size();\n        return mad;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0);\n        double result = solution.mean_absolute_deviation(numbers);\n        System.out.println(\"Mean Absolute Deviation: \" + result); // Output: 1.0\n    }\n}\n"}
{"task_id": "Java/77", "generation": "class Solution {\n    public boolean iscube(int a) {\n        if (a < 0) {\n            a = -a;  // Convert to positive for cube root calculation\n        }\n        int cubeRoot = (int) Math.round(Math.cbrt(a));  // Calculate the cube root and round it\n        return cubeRoot * cubeRoot * cubeRoot == a;  // Check if the cube of the rounded root equals the original number\n    }\n}\n"}
{"task_id": "Java/57", "generation": "class Solution {\n    /**\n    Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n    */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() < 2) {\n            return true; // A list with 0 or 1 element is trivially monotonic\n        }\n\n        boolean increasing = true;\n        boolean decreasing = true;\n\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false; // Found an increase, so not decreasing\n            } else if (l.get(i) < l.get(i - 1)) {\n                increasing = false; // Found a decrease, so not increasing\n            }\n        }\n\n        return increasing || decreasing; // Return true if either is true\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.monotonic(Arrays.asList(1, 2, 4, 20))); // true\n        System.out.println(solution.monotonic(Arrays.asList(1, 20, 4, 10))); // false\n        System.out.println(solution.monotonic(Arrays.asList(4, 1, 0, -10))); // true\n    }\n}\n"}
{"task_id": "Java/142", "generation": "class Solution {\n    public int sum_squares(List<Integer> lst) {\n        int sum = 0; // Initialize sum to 0\n        \n        for (int i = 0; i < lst.size(); i++) {\n            int value = lst.get(i); // Get the current value\n            \n            // Check if the index is a multiple of 3\n            if (i % 3 == 0) {\n                value = value * value; // Square the value\n            }\n            // Check if the index is a multiple of 4 and not a multiple of 3\n            else if (i % 4 == 0) {\n                value = value * value * value; // Cube the value\n            }\n            // Add the transformed value to the sum\n            sum += value;\n        }\n        \n        return sum; // Return the final sum\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        \n        // Test cases\n        System.out.println(sol.sum_squares(Arrays.asList(1, 2, 3))); // Output: 6\n        System.out.println(sol.sum_squares(Arrays.asList())); // Output: 0\n        System.out.println(sol.sum_squares(Arrays.asList(-1, -5, 2, -1, -5))); // Output: -126\n    }\n}\n"}
{"task_id": "Java/121", "generation": "class Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==> 0\n    */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        \n        // Iterate through the list\n        for (int i = 0; i < lst.size(); i++) {\n            // Check if the index is even\n            if (i % 2 == 0) {\n                // Check if the element is odd\n                if (lst.get(i) % 2 != 0) {\n                    sum += lst.get(i); // Add to sum if both conditions are met\n                }\n            }\n        }\n        \n        return sum; // Return the total sum\n    }\n}\n"}
{"task_id": "Java/23", "generation": "class Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n    */\n    public int strlen(String string) {\n        return string.length();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.strlen(\"\"));      // Output: 0\n        System.out.println(solution.strlen(\"abc\"));   // Output: 3\n        System.out.println(solution.strlen(\"Hello\")); // Output: 5\n        System.out.println(solution.strlen(\"Java\"));  // Output: 4\n        System.out.println(solution.strlen(\" \"));     // Output: 1 (space is a character)\n    }\n}\n"}
{"task_id": "Java/80", "generation": "class Solution {\n    public boolean is_happy(String s) {\n        // Check if the length of the string is at least 3\n        if (s.length() < 3) {\n            return false;\n        }\n\n        // Iterate through the string and check every group of 3 consecutive characters\n        for (int i = 0; i <= s.length() - 3; i++) {\n            // Get the three consecutive characters\n            char first = s.charAt(i);\n            char second = s.charAt(i + 1);\n            char third = s.charAt(i + 2);\n\n            // Check if all three characters are distinct\n            if (first == second || first == third || second == third) {\n                return false; // If any two characters are the same, return false\n            }\n        }\n\n        // If we pass through all groups of three without finding duplicates, return true\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.is_happy(\"a\"));      // false\n        System.out.println(solution.is_happy(\"aa\"));     // false\n        System.out.println(solution.is_happy(\"abcd\"));   // true\n        System.out.println(solution.is_happy(\"aabb\"));   // false\n        System.out.println(solution.is_happy(\"adb\"));    // true\n        System.out.println(solution.is_happy(\"xyy\"));    // false\n    }\n}\n"}
{"task_id": "Java/132", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean is_nested(String string) {\n        Stack<Character> stack = new Stack<>();\n        boolean hasNested = false;\n\n        for (char ch : string.toCharArray()) {\n            if (ch == '[') {\n                stack.push(ch);\n                if (stack.size() > 1) {  // More than one opening bracket means nested\n                    hasNested = true;\n                }\n            } else if (ch == ']') {\n                if (stack.isEmpty()) {  // Unmatched closing bracket\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n\n        return hasNested && stack.isEmpty();  // Must be nested and all brackets must match\n    }\n}\n"}
{"task_id": "Java/66", "generation": "class Solution {\n    public int digitSum(String s) {\n        int sum = 0; // Initialize sum to 0\n        for (char c : s.toCharArray()) { // Convert string to char array and iterate\n            if (Character.isUpperCase(c)) { // Check if the character is uppercase\n                sum += (int) c; // Add the ASCII value of the uppercase character to sum\n            }\n        }\n        return sum; // Return the total sum\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.digitSum(\"\")); // Output: 0\n        System.out.println(solution.digitSum(\"abAB\")); // Output: 131\n        System.out.println(solution.digitSum(\"abcCd\")); // Output: 67\n        System.out.println(solution.digitSum(\"helloE\")); // Output: 69\n        System.out.println(solution.digitSum(\"woArBld\")); // Output: 131\n        System.out.println(solution.digitSum(\"aAaaaXa\")); // Output: 153\n    }\n}\n"}
{"task_id": "Java/14", "generation": "class Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    */\n    public List<String> all_prefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        \n        // Loop through the string and collect prefixes\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        \n        return prefixes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.all_prefixes(\"abc\")); // Output: [\"a\", \"ab\", \"abc\"]\n    }\n}\n"}
{"task_id": "Java/25", "generation": "class Solution {\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        \n        // Check for number of 2s that divide n\n        while (n % 2 == 0) {\n            factors.add(2);\n            n /= 2;\n        }\n        \n        // n must be odd at this point, so we can skip even numbers\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        \n        // This condition is to check if n is a prime number greater than 2\n        if (n > 2) {\n            factors.add(n);\n        }\n        \n        return factors;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.factorize(8));   // Output: [2, 2, 2]\n        System.out.println(sol.factorize(25));  // Output: [5, 5]\n        System.out.println(sol.factorize(70));  // Output: [2, 5, 7]\n    }\n}\n"}
{"task_id": "Java/107", "generation": "class Solution {\n    public List<Integer> even_odd_palindrome(int n) {\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        return Arrays.asList(evenCount, oddCount);\n    }\n\n    private boolean isPalindrome(int num) {\n        String str = Integer.toString(num);\n        int left = 0;\n        int right = str.length() - 1;\n\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.even_odd_palindrome(3));  // Output: [1, 2]\n        System.out.println(solution.even_odd_palindrome(12)); // Output: [4, 6]\n    }\n}\n"}
{"task_id": "Java/83", "generation": "class Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    */\n    public int starts_one_ends(int n) {\n        if (n == 1) {\n            // For n = 1, the only number is '1'\n            return 1;\n        }\n        \n        // Count of n-digit numbers starting with '1'\n        int startWithOne = (int) Math.pow(10, n - 1);\n        \n        // Count of n-digit numbers ending with '1'\n        int endWithOne = 9 * (int) Math.pow(10, n - 2);\n        \n        // Count of n-digit numbers starting and ending with '1'\n        int startAndEndWithOne = (int) Math.pow(10, n - 2);\n        \n        // Total count using inclusion-exclusion principle\n        return startWithOne + endWithOne - startAndEndWithOne;\n    }\n}\n"}
{"task_id": "Java/32", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    find_zero finds x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non-zero coefficient as it guarantees\n    a solution.\n    >>> find_zero(Arrays.asList(1.0, 2.0)) // f(x) = 1 + 2x\n    -0.5\n    >>> find_zero(Arrays.asList(-6.0, 11.0, -6.0, 1.0)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double find_zero(List<Double> xs) {\n        // Using Newton's method to find a root of the polynomial\n        double x0 = 0.0; // Initial guess for the root\n        for (int iteration = 0; iteration < 100; iteration++) { // Limit iterations to avoid infinite loops\n            double fx = poly(xs, x0);\n            double dfx = derivative(xs, x0);\n            if (dfx == 0) { // Avoid division by zero\n                break;\n            }\n            double x1 = x0 - fx / dfx;\n            if (Math.abs(x1 - x0) < 1e-7) { // Convergence check\n                return x1;\n            }\n            x0 = x1; // Update x0 for the next iteration\n        }\n        return x0; // Return the last approximation\n    }\n\n    private double derivative(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 1; i < xs.size(); i++) {\n            result += i * xs.get(i) * Math.pow(x, i - 1);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/85", "generation": "class Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n    */\n    public int add(List<Integer> lst) {\n        int sum = 0; // Initialize the sum to 0\n        for (int i = 1; i < lst.size(); i += 2) { // Start from index 1 and increment by 2 (odd indices)\n            if (lst.get(i) % 2 == 0) { // Check if the element is even\n                sum += lst.get(i); // Add the even element to the sum\n            }\n        }\n        return sum; // Return the final sum\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.add(Arrays.asList(4, 2, 6, 7))); // Output: 2\n        System.out.println(solution.add(Arrays.asList(1, 2, 3, 4, 5))); // Output: 0\n        System.out.println(solution.add(Arrays.asList(10, 1, 2, 3, 4, 5, 6))); // Output: 8\n    }\n}\n"}
{"task_id": "Java/156", "generation": "class Solution {\n    public String int_to_mini_roman(int number) {\n        // Define the mapping of integers to Roman numerals\n        String[] romanNumerals = {\n            \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"\n        };\n        int[] values = {\n            1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        };\n\n        StringBuilder result = new StringBuilder();\n\n        // Iterate over the values and corresponding Roman numerals\n        for (int i = 0; i < values.length; i++) {\n            // While the number is greater than or equal to the current value\n            while (number >= values[i]) {\n                // Append the corresponding Roman numeral\n                result.append(romanNumerals[i]);\n                // Subtract the value from the number\n                number -= values[i];\n            }\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.int_to_mini_roman(19));   // Output: \"xix\"\n        System.out.println(solution.int_to_mini_roman(152));  // Output: \"clii\"\n        System.out.println(solution.int_to_mini_roman(426));  // Output: \"cdxxvi\"\n    }\n}\n"}
{"task_id": "Java/75", "generation": "class Solution {\n    // Function to generate all prime numbers less than 100\n    private List<Integer> generatePrimes() {\n        List<Integer> primes = new ArrayList<>();\n        boolean[] isPrime = new boolean[100];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = isPrime[1] = false; // 0 and 1 are not prime numbers\n        \n        for (int i = 2; i < 100; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n                for (int j = i * 2; j < 100; j += i) {\n                    isPrime[j] = false; // Mark multiples of i as non-prime\n                }\n            }\n        }\n        return primes;\n    }\n\n    public boolean is_multiply_prime(int a) {\n        List<Integer> primes = generatePrimes();\n        \n        // Check all combinations of three primes\n        for (int i = 0; i < primes.size(); i++) {\n            for (int j = i; j < primes.size(); j++) {\n                for (int k = j; k < primes.size(); k++) {\n                    int product = primes.get(i) * primes.get(j) * primes.get(k);\n                    if (product == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        \n        return false; // No combination found\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.is_multiply_prime(30)); // true\n        System.out.println(solution.is_multiply_prime(60)); // true (2 * 3 * 10, but 10 is not prime)\n        System.out.println(solution.is_multiply_prime(100)); // false\n        System.out.println(solution.is_multiply_prime(105)); // true (3 * 5 * 7)\n    }\n}\n"}
{"task_id": "Java/157", "generation": "class Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == true\n    right_angle_triangle(1, 2, 3) == false\n    */\n    public boolean right_angle_triangle(int a, int b, int c) {\n        // Sort the sides to ensure we can identify the longest side\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        \n        // Check the Pythagorean theorem\n        return (sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.right_angle_triangle(3, 4, 5)); // true\n        System.out.println(solution.right_angle_triangle(1, 2, 3)); // false\n        System.out.println(solution.right_angle_triangle(5, 12, 13)); // true\n        System.out.println(solution.right_angle_triangle(8, 15, 17)); // true\n        System.out.println(solution.right_angle_triangle(7, 24, 25)); // true\n    }\n}\n"}
{"task_id": "Java/36", "generation": "class Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    */\n    public int fizz_buzz(int n) {\n        int count = 0;\n\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                // Convert the number to a string to count '7's\n                String strNum = Integer.toString(i);\n                for (char c : strNum.toCharArray()) {\n                    if (c == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fizz_buzz(50)); // Output: 0\n        System.out.println(solution.fizz_buzz(78)); // Output: 2\n        System.out.println(solution.fizz_buzz(79)); // Output: 3\n    }\n}\n"}
{"task_id": "Java/94", "generation": "class Solution {\n    // Method to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) return false; // 0 and 1 are not prime numbers\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) return false; // Found a divisor, not prime\n        }\n        return true; // No divisors found, it's prime\n    }\n\n    // Method to calculate the sum of digits of a number\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10; // Add last digit\n            num /= 10; // Remove last digit\n        }\n        return sum;\n    }\n\n    public int skjkasdkd(List<Integer> lst) {\n        int largestPrime = -1; // Initialize to -1 to indicate no prime found\n\n        // Iterate through the list to find the largest prime\n        for (int num : lst) {\n            if (isPrime(num) && num > largestPrime) {\n                largestPrime = num; // Update largest prime found\n            }\n        }\n\n        // If no prime was found, return 0 (or handle as needed)\n        if (largestPrime == -1) {\n            return 0; // or throw an exception, or return a specific value\n        }\n\n        // Calculate and return the sum of digits of the largest prime\n        return sumOfDigits(largestPrime);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.skjkasdkd(Arrays.asList(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3))); // Output: 10\n        System.out.println(solution.skjkasdkd(Arrays.asList(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1))); // Output: 25\n        System.out.println(solution.skjkasdkd(Arrays.asList(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3))); // Output: 13\n        System.out.println(solution.skjkasdkd(Arrays.asList(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6))); // Output: 11\n        System.out.println(solution.skjkasdkd(Arrays.asList(0, 81, 12, 3, 1, 21))); // Output: 3\n        System.out.println(solution.skjkasdkd(Arrays.asList(0, 8, 1, 2, 1, 7))); // Output: 7\n    }\n}\n"}
{"task_id": "Java/60", "generation": "class Solution {\n    /**\n    sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    */\n    public int sum_to_n(int n) {\n        // Using the formula for the sum of the first n natural numbers\n        return n * (n + 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test cases\n        System.out.println(solution.sum_to_n(30));  // Output: 465\n        System.out.println(solution.sum_to_n(100)); // Output: 5050\n        System.out.println(solution.sum_to_n(5));   // Output: 15\n        System.out.println(solution.sum_to_n(10));  // Output: 55\n        System.out.println(solution.sum_to_n(1));   // Output: 1\n    }\n}\n"}
{"task_id": "Java/145", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> order_by_points(List<Integer> nums) {\n        // Create a comparator that compares based on the sum of digits and original index\n        Comparator<Integer> comparator = new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int sumA = digitSum(a);\n                int sumB = digitSum(b);\n                if (sumA != sumB) {\n                    return Integer.compare(sumA, sumB); // Compare by digit sum\n                } else {\n                    return Integer.compare(nums.indexOf(a), nums.indexOf(b)); // Compare by original index\n                }\n            }\n        };\n\n        // Sort the list using the custom comparator\n        List<Integer> sortedList = new ArrayList<>(nums);\n        Collections.sort(sortedList, comparator);\n        return sortedList;\n    }\n\n    // Helper method to calculate the sum of digits\n    private int digitSum(int n) {\n        int sum = 0;\n        String str = Integer.toString(n);\n        for (char c : str.toCharArray()) {\n            if (c != '-') { // Ignore the negative sign\n                sum += Character.getNumericValue(c);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/61", "generation": "class Solution {\n    public boolean correct_bracketing(String brackets) {\n        int balance = 0; // This will keep track of the balance of brackets\n\n        for (char ch : brackets.toCharArray()) {\n            if (ch == '(') {\n                balance++; // Increment for an opening bracket\n            } else if (ch == ')') {\n                balance--; // Decrement for a closing bracket\n            }\n\n            // If balance goes negative, we have more closing brackets than opening ones\n            if (balance < 0) {\n                return false;\n            }\n        }\n\n        // If balance is zero, all opening brackets are matched; otherwise, they are not\n        return balance == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.correct_bracketing(\"(\")); // false\n        System.out.println(solution.correct_bracketing(\"()\")); // true\n        System.out.println(solution.correct_bracketing(\"(()())\")); // true\n        System.out.println(solution.correct_bracketing(\")(()\")); // false\n    }\n}\n"}
{"task_id": "Java/79", "generation": "class Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   // returns \"db1111db\"\n    decimal_to_binary(32)   // returns \"db100000db\"\n     */\n    public String decimal_to_binary(int decimal) {\n        // Convert the decimal number to binary string\n        String binaryString = Integer.toBinaryString(decimal);\n        // Format the string by adding 'db' at the beginning and end\n        return \"db\" + binaryString + \"db\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test cases\n        System.out.println(solution.decimal_to_binary(15)); // Output: \"db1111db\"\n        System.out.println(solution.decimal_to_binary(32)); // Output: \"db100000db\"\n    }\n}\n"}
{"task_id": "Java/116", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> arr) {\n        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                // Count the number of 1's in the binary representation\n                int countA = Integer.bitCount(a);\n                int countB = Integer.bitCount(b);\n                \n                // First compare by the number of 1's, then by the value itself\n                if (countA != countB) {\n                    return Integer.compare(countA, countB);\n                } else {\n                    return Integer.compare(a, b);\n                }\n            }\n        });\n        return arr;\n    }\n}\n"}
{"task_id": "Java/56", "generation": "class Solution {\n    public boolean correct_bracketing(String brackets) {\n        int balance = 0; // This will keep track of the balance of brackets\n\n        for (char ch : brackets.toCharArray()) {\n            if (ch == '<') {\n                balance++; // Increment for an opening bracket\n            } else if (ch == '>') {\n                balance--; // Decrement for a closing bracket\n            }\n\n            // If balance goes negative, we have more closing brackets than opening\n            if (balance < 0) {\n                return false;\n            }\n        }\n\n        // At the end, balance should be zero for all brackets to be matched\n        return balance == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.correct_bracketing(\"<\")); // false\n        System.out.println(solution.correct_bracketing(\"<>\")); // true\n        System.out.println(solution.correct_bracketing(\"<<><>>\")); // true\n        System.out.println(solution.correct_bracketing(\"><<>\")); // false\n    }\n}\n"}
{"task_id": "Java/111", "generation": "import java.util.*;\n\nclass Solution {\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> countMap = new HashMap<>();\n        \n        // Check for empty input\n        if (test.isEmpty()) {\n            return countMap; // return empty map\n        }\n        \n        // Split the string into letters\n        String[] letters = test.split(\" \");\n        \n        // Count occurrences of each letter\n        for (String letter : letters) {\n            countMap.put(letter, countMap.getOrDefault(letter, 0) + 1);\n        }\n        \n        // Find the maximum occurrence count\n        int maxCount = Collections.max(countMap.values());\n        \n        // Create a result map for letters with the maximum count\n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : countMap.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/125", "generation": "class Solution {\n    public Object split_words(String txt) {\n        // Check for whitespace\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\"\\\\s+\")); // Split on whitespace\n        }\n        \n        // Check for commas\n        if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\")); // Split on commas\n        }\n        \n        // Count lowercase letters with odd order in the alphabet\n        int count = 0;\n        for (char c : txt.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                int position = c - 'a'; // Get the position of the letter\n                if (position % 2 == 1) { // Check if the position is odd\n                    count++;\n                }\n            }\n        }\n        \n        return count; // Return the count of lowercase letters in odd positions\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.split_words(\"Hello world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.split_words(\"Hello,world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.split_words(\"abcdef\")); // 3\n        System.out.println(solution.split_words(\"abc,def ghi\")); // [\"abc\", \"def\", \"ghi\"]\n        System.out.println(solution.split_words(\"xyz\")); // 1\n    }\n}\n"}
{"task_id": "Java/119", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String match_parens(List<String> lst) {\n        // Count the number of open and close parentheses in both strings\n        int openCount = 0;\n        int closeCount = 0;\n\n        for (String str : lst) {\n            openCount += countChar(str, '(');\n            closeCount += countChar(str, ')');\n        }\n\n        // A good string must have equal number of open and close parentheses\n        if (openCount == closeCount) {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n\n    // Helper method to count occurrences of a specific character in a string\n    private int countChar(String str, char ch) {\n        int count = 0;\n        for (char c : str.toCharArray()) {\n            if (c == ch) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/124", "generation": "class Solution {\n    public boolean valid_date(String date) {\n        // Check if the date string is empty\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        // Check if the date matches the format mm-dd-yyyy\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n            return false;\n        }\n\n        String monthStr = parts[0];\n        String dayStr = parts[1];\n        String yearStr = parts[2];\n\n        // Validate month, day, and year\n        int month, day, year;\n\n        try {\n            month = Integer.parseInt(monthStr);\n            day = Integer.parseInt(dayStr);\n            year = Integer.parseInt(yearStr);\n        } catch (NumberFormatException e) {\n            return false; // If parsing fails, return false\n        }\n\n        // Check if month is valid\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        // Check if day is valid based on the month\n        if (day < 1) {\n            return false; // Day must be at least 1\n        }\n\n        // Days in each month\n        int daysInMonth;\n        switch (month) {\n            case 1: case 3: case 5: case 7: case 8: case 10: case 12:\n                daysInMonth = 31;\n                break;\n            case 4: case 6: case 9: case 11:\n                daysInMonth = 30;\n                break;\n            case 2:\n                // Check for leap year for February\n                if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {\n                    daysInMonth = 29; // Leap year\n                } else {\n                    daysInMonth = 28; // Non-leap year\n                }\n                break;\n            default:\n                return false; // This case should never happen due to month validation\n        }\n\n        // Check if day exceeds the number of days in the month\n        return day <= daysInMonth;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.valid_date(\"03-11-2000\")); // true\n        System.out.println(solution.valid_date(\"15-01-2012\")); // false\n        System.out.println(solution.valid_date(\"04-0-2040\")); // false\n        System.out.println(solution.valid_date(\"06-04-2020\")); // true\n        System.out.println(solution.valid_date(\"06/04/2020\")); // false\n    }\n}\n"}
{"task_id": "Java/9", "generation": "class Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n    */\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int currentMax = Integer.MIN_VALUE; // Initialize to the smallest possible integer\n\n        for (int number : numbers) {\n            currentMax = Math.max(currentMax, number); // Update the current maximum\n            result.add(currentMax); // Add the current maximum to the result list\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> input = Arrays.asList(1, 2, 3, 2, 3, 4, 2);\n        List<Integer> output = solution.rolling_max(input);\n        System.out.println(output); // Output: [1, 2, 3, 3, 3, 4, 4]\n    }\n}\n"}
{"task_id": "Java/43", "generation": "class Solution {\n    /**\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairs_sum_to_zero(Arrays.asList(1))\n    false\n     */\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        Set<Integer> seen = new HashSet<>();\n        \n        for (Integer num : l) {\n            // Check if the negation of the current number is already in the set\n            if (seen.contains(-num)) {\n                return true; // Found a pair that sums to zero\n            }\n            // Add the current number to the set\n            seen.add(num);\n        }\n        \n        return false; // No pairs found that sum to zero\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1, 3, -2, 1))); // false\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(2, 4, -5, 3, 5, 7))); // true\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1))); // false\n    }\n}\n"}
{"task_id": "Java/82", "generation": "class Solution {\n    public boolean prime_length(String string) {\n        int length = string.length();\n        return isPrime(length);\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false; // 0 and 1 are not prime numbers\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false; // Found a divisor, not prime\n            }\n        }\n        return true; // No divisors found, it's prime\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.prime_length(\"Hello\")); // true\n        System.out.println(solution.prime_length(\"abcdcba\")); // true\n        System.out.println(solution.prime_length(\"kittens\")); // true\n        System.out.println(solution.prime_length(\"orange\")); // false\n    }\n}\n"}
{"task_id": "Java/155", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> even_odd_count(int num) {\n        String numStr = Integer.toString(Math.abs(num)); // Convert the absolute value of the number to string\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (char digit : numStr.toCharArray()) {\n            int digitValue = Character.getNumericValue(digit); // Convert character to integer\n            if (digitValue % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        return result; // Return the list containing counts of even and odd digits\n    }\n}\n"}
{"task_id": "Java/35", "generation": "class Solution {\n    /**\n    Return maximum element in the list.\n    >>> max_element(Arrays.asList(1, 2, 3))\n    3\n    >>> max_element(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n    */\n    public int max_element(List<Integer> l) {\n        // Check if the list is empty and handle it accordingly\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be null or empty\");\n        }\n        // Use Collections.max to find the maximum element\n        return Collections.max(l);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.max_element(Arrays.asList(1, 2, 3))); // Output: 3\n        System.out.println(solution.max_element(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))); // Output: 123\n    }\n}\n"}
{"task_id": "Java/89", "generation": "class Solution {\n    public String encrypt(String s) {\n        StringBuilder encrypted = new StringBuilder();\n        \n        for (char c : s.toCharArray()) {\n            // Check if the character is a lowercase letter\n            if (c >= 'a' && c <= 'z') {\n                // Shift the character by 4 positions\n                char shifted = (char) ((c - 'a' + 4) % 26 + 'a');\n                encrypted.append(shifted);\n            } else {\n                // If it's not a lowercase letter, we can choose to ignore it or handle it differently\n                encrypted.append(c); // For now, just append the character as is\n            }\n        }\n        \n        return encrypted.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.encrypt(\"hi\")); // Output: \"lm\"\n        System.out.println(solution.encrypt(\"asdfghjkl\")); // Output: \"ewhjklnop\"\n        System.out.println(solution.encrypt(\"gf\")); // Output: \"kj\"\n        System.out.println(solution.encrypt(\"et\")); // Output: \"ix\"\n    }\n}\n"}
{"task_id": "Java/24", "generation": "class Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    */\n    public int largest_divisor(int n) {\n        // Start from n-1 and go down to 1\n        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i; // Return the first divisor found\n            }\n        }\n        return 1; // If no divisor found, return 1 (since 1 divides all integers)\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.largest_divisor(15)); // Output: 5\n        System.out.println(solution.largest_divisor(28)); // Output: 14\n        System.out.println(solution.largest_divisor(1));  // Output: 1\n    }\n}\n"}
{"task_id": "Java/22", "generation": "class Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n    */\n    public List<Integer> filter_integers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.filter_integers(Arrays.asList('a', 3.14, 5))); // Output: [5]\n        System.out.println(solution.filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))); // Output: [1, 2, 3]\n    }\n}\n"}
{"task_id": "Java/161", "generation": "class Solution {\n    public String solve(String s) {\n        // Check if the string contains any letters\n        boolean containsLetter = false;\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                containsLetter = true;\n                break;\n            }\n        }\n\n        if (containsLetter) {\n            // If there are letters, reverse case of letters\n            StringBuilder result = new StringBuilder();\n            for (char c : s.toCharArray()) {\n                if (Character.isLetter(c)) {\n                    // Reverse case\n                    if (Character.isLowerCase(c)) {\n                        result.append(Character.toUpperCase(c));\n                    } else {\n                        result.append(Character.toLowerCase(c));\n                    }\n                } else {\n                    // Keep non-letter characters unchanged\n                    result.append(c);\n                }\n            }\n            return result.toString();\n        } else {\n            // If there are no letters, reverse the entire string\n            return new StringBuilder(s).reverse().toString();\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.solve(\"1234\")); // Output: \"4321\"\n        System.out.println(solution.solve(\"ab\")); // Output: \"AB\"\n        System.out.println(solution.solve(\"#a@C\")); // Output: \"#A@c\"\n    }\n}\n"}
{"task_id": "Java/28", "generation": "class Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n    */\n    public String concatenate(List<String> strings) {\n        StringBuilder result = new StringBuilder();\n        for (String str : strings) {\n            result.append(str);\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.concatenate(List.of())); // Output: \"\"\n        System.out.println(solution.concatenate(Arrays.asList(\"a\", \"b\", \"c\"))); // Output: \"abc\"\n    }\n}\n"}
{"task_id": "Java/72", "generation": "class Solution {\n    public boolean will_it_fly(List<Integer> q, int w) {\n        // Check if the list is a palindrome\n        if (!isPalindrome(q)) {\n            return false; // Not balanced\n        }\n        \n        // Calculate the sum of the elements in the list\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n        \n        // Check if the sum is less than or equal to the maximum weight\n        return sum <= w;\n    }\n    \n    private boolean isPalindrome(List<Integer> q) {\n        int left = 0;\n        int right = q.size() - 1;\n        \n        while (left < right) {\n            if (!q.get(left).equals(q.get(right))) {\n                return false; // Not a palindrome\n            }\n            left++;\n            right--;\n        }\n        \n        return true; // It's a palindrome\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.will_it_fly(Arrays.asList(1, 2), 5)); // false\n        System.out.println(solution.will_it_fly(Arrays.asList(3, 2, 3), 1)); // false\n        System.out.println(solution.will_it_fly(Arrays.asList(3, 2, 3), 9)); // true\n        System.out.println(solution.will_it_fly(Arrays.asList(3), 5)); // true\n    }\n}\n"}
{"task_id": "Java/127", "generation": "class Solution {\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // Extracting the start and end points of the intervals\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        \n        // Finding the intersection\n        int startIntersection = Math.max(start1, start2);\n        int endIntersection = Math.min(end1, end2);\n        \n        // Calculate the length of the intersection\n        if (startIntersection > endIntersection) {\n            return \"NO\"; // No intersection\n        }\n        \n        int length = endIntersection - startIntersection;\n        \n        // Check if the length is a prime number\n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n    \n    // Helper method to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) return false; // 0 and 1 are not prime numbers\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false; // Found a divisor, not prime\n            }\n        }\n        return true; // No divisors found, it's prime\n    }\n}\n"}
{"task_id": "Java/86", "generation": "class Solution {\n    public String anti_shuffle(String s) {\n        // Split the string into words and spaces\n        String[] words = s.split(\"(?<=\\\\s)|(?=\\\\s)\"); // This regex keeps spaces as separate elements\n        StringBuilder result = new StringBuilder();\n\n        for (String word : words) {\n            if (word.trim().isEmpty()) {\n                // If the word is just whitespace, add it directly to the result\n                result.append(word);\n            } else {\n                // Sort the characters of the word\n                char[] charArray = word.toCharArray();\n                Arrays.sort(charArray);\n                // Append the sorted characters to the result\n                result.append(new String(charArray));\n            }\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.anti_shuffle(\"Hi\")); // Output: \"Hi\"\n        System.out.println(solution.anti_shuffle(\"hello\")); // Output: \"ehllo\"\n        System.out.println(solution.anti_shuffle(\"Hello World!!!\")); // Output: \"Hello !!!Wdlor\"\n    }\n}\n"}
{"task_id": "Java/3", "generation": "class Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero,\n    and at that point function should return True. Otherwise it should return False.\n    >>> below_zero(Arrays.asList(1, 2, 3))\n    false\n    >>> below_zero(Arrays.asList(1, 2, -4, 5))\n    true\n    */\n    public boolean below_zero(List<Integer> operations) {\n        int balance = 0; // Start with a balance of 0\n        \n        for (int operation : operations) {\n            balance += operation; // Update the balance\n            \n            if (balance < 0) { // Check if the balance falls below zero\n                return true; // Return true if it does\n            }\n        }\n        \n        return false; // Return false if balance never falls below zero\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.below_zero(Arrays.asList(1, 2, 3))); // false\n        System.out.println(solution.below_zero(Arrays.asList(1, 2, -4, 5))); // true\n        System.out.println(solution.below_zero(Arrays.asList(-1, 1, -1))); // true\n        System.out.println(solution.below_zero(Arrays.asList(5, -10, 5))); // true\n        System.out.println(solution.below_zero(Arrays.asList(10, -5, -6))); // true\n        System.out.println(solution.below_zero(Arrays.asList(0, 0, 0))); // false\n    }\n}\n"}
{"task_id": "Java/69", "generation": "class Solution {\n    public int search(List<Integer> lst) {\n        // Step 1: Count the frequency of each integer\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n\n        // Step 2: Find the greatest integer that meets the condition\n        int result = -1;\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int value = entry.getKey();\n            int frequency = entry.getValue();\n            if (frequency >= value) {\n                result = Math.max(result, value);\n            }\n        }\n\n        // Step 3: Return the result\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.search(Arrays.asList(4, 1, 2, 2, 3, 1))); // Output: 2\n        System.out.println(solution.search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4))); // Output: 3\n        System.out.println(solution.search(Arrays.asList(5, 5, 4, 4, 4))); // Output: -1\n    }\n}\n"}
{"task_id": "Java/62", "generation": "class Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i < xs.size(); i++) {\n            // The derivative of the term is i * xs[i]\n            result.add(i * xs.get(i));\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/50", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a' + 5) % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decode_shift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a' - 5 + 26) % 26))); // Adding 26 to ensure positive result\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/135", "generation": "class Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange(Arrays.asList(1,2,4,3,5)) = 3\n    can_arrange(Arrays.asList(1,2,3)) = -1\n    */\n    public int can_arrange(List<Integer> arr) {\n        int n = arr.size();\n        \n        // Iterate from the second last element to the first element\n        for (int i = n - 2; i >= 0; i--) {\n            // Check if the current element is less than the next element\n            if (arr.get(i) > arr.get(i + 1)) {\n                return i + 1; // Return the index of the current element\n            }\n        }\n        \n        // If no such element is found, return -1\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.can_arrange(Arrays.asList(1, 2, 4, 3, 5))); // Output: 3\n        System.out.println(solution.can_arrange(Arrays.asList(1, 2, 3))); // Output: -1\n    }\n}\n"}
{"task_id": "Java/93", "generation": "class Solution {\n    public String encode(String message) {\n        StringBuilder encodedMessage = new StringBuilder();\n        \n        for (char c : message.toCharArray()) {\n            // Check if the character is a letter\n            if (Character.isLetter(c)) {\n                // Swap case\n                char swappedCase = Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c);\n                \n                // Replace vowels\n                if (\"aeiouAEIOU\".indexOf(swappedCase) != -1) {\n                    // Calculate the new character that is 2 places ahead\n                    char newChar = (char) (swappedCase + 2);\n                    // Handle wrap-around for 'y' and 'z' in lowercase and uppercase\n                    if (swappedCase == 'y') newChar = 'a';\n                    if (swappedCase == 'z') newChar = 'b';\n                    if (swappedCase == 'Y') newChar = 'A';\n                    if (swappedCase == 'Z') newChar = 'B';\n                    encodedMessage.append(newChar);\n                } else {\n                    // If it's not a vowel, just append the swapped case character\n                    encodedMessage.append(swappedCase);\n                }\n            } else {\n                // If it's not a letter, just append it as is\n                encodedMessage.append(c);\n            }\n        }\n        \n        return encodedMessage.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.encode(\"test\")); // \"TGST\"\n        System.out.println(solution.encode(\"This is a message\")); // \"tHKS KS C MGSSCGG\"\n    }\n}\n"}
{"task_id": "Java/147", "generation": "class Solution {\n    public int get_max_triples(int n) {\n        // Step 1: Create the array a\n        int[] a = new int[n];\n        for (int i = 1; i <= n; i++) {\n            a[i - 1] = i * i - i + 1; // a[i] = i * i - i + 1\n        }\n\n        // Step 2: Count occurrences of each remainder when divided by 3\n        int[] count = new int[3]; // count[0] for mod 0, count[1] for mod 1, count[2] for mod 2\n        for (int value : a) {\n            count[value % 3]++;\n        }\n\n        // Step 3: Calculate the number of valid triples\n        int totalTriples = 0;\n\n        // Case 1: All three from the same category\n        totalTriples += combination(count[0], 3); // (0, 0, 0)\n        totalTriples += combination(count[1], 3); // (1, 1, 1)\n        totalTriples += combination(count[2], 3); // (2, 2, 2)\n\n        // Case 2: One from each category\n        totalTriples += count[0] * count[1] * count[2]; // (0, 1, 2)\n\n        return totalTriples;\n    }\n\n    // Helper function to calculate combinations nCk\n    private int combination(int n, int k) {\n        if (n < k) return 0;\n        if (k == 0) return 1;\n        if (k > n / 2) k = n - k; // Take advantage of symmetry\n        int result = 1;\n        for (int i = 0; i < k; i++) {\n            result = result * (n - i) / (i + 1);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        int n = 5;\n        System.out.println(sol.get_max_triples(n)); // Output: 1\n    }\n}\n"}
{"task_id": "Java/27", "generation": "class Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"Hello\")\n    \"hELLO\"\n    */\n    public String flip_case(String string) {\n        StringBuilder flippedString = new StringBuilder();\n        \n        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                flippedString.append(Character.toUpperCase(c));\n            } else if (Character.isUpperCase(c)) {\n                flippedString.append(Character.toLowerCase(c));\n            } else {\n                flippedString.append(c); // Keep non-alphabetic characters unchanged\n            }\n        }\n        \n        return flippedString.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.flip_case(\"Hello\")); // Output: hELLO\n        System.out.println(solution.flip_case(\"World!\")); // Output: wORLD!\n        System.out.println(solution.flip_case(\"Java123\")); // Output: jAVA123\n    }\n}\n"}
{"task_id": "Java/110", "generation": "class Solution {\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int oddCountInLst1 = 0;\n        int evenCountInLst2 = 0;\n\n        // Count odd numbers in lst1\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCountInLst1++;\n            }\n        }\n\n        // Count even numbers in lst2\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCountInLst2++;\n            }\n        }\n\n        // Check if we can replace all odd numbers in lst1 with even numbers from lst2\n        if (oddCountInLst1 <= evenCountInLst2) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}\n"}
{"task_id": "Java/141", "generation": "class Solution {\n    public String file_name_check(String file_name) {\n        // Check for exactly one dot\n        int dotIndex = file_name.indexOf('.');\n        if (dotIndex == -1 || file_name.indexOf('.', dotIndex + 1) != -1) {\n            return \"No\";\n        }\n\n        // Split the file name into name and extension\n        String namePart = file_name.substring(0, dotIndex);\n        String extensionPart = file_name.substring(dotIndex + 1);\n\n        // Check if the name part is empty and starts with a letter\n        if (namePart.isEmpty() || !Character.isLetter(namePart.charAt(0))) {\n            return \"No\";\n        }\n\n        // Check for the number of digits in the name part\n        int digitCount = 0;\n        for (char c : namePart.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n        }\n        if (digitCount > 3) {\n            return \"No\";\n        }\n\n        // Check if the extension is valid\n        List<String> validExtensions = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        if (!validExtensions.contains(extensionPart)) {\n            return \"No\";\n        }\n\n        // If all checks passed, return \"Yes\"\n        return \"Yes\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.file_name_check(\"example.txt\")); // Yes\n        System.out.println(solution.file_name_check(\"1example.dll\")); // No\n        System.out.println(solution.file_name_check(\"example123.txt\")); // Yes\n        System.out.println(solution.file_name_check(\"example..txt\")); // No\n        System.out.println(solution.file_name_check(\".example.txt\")); // No\n        System.out.println(solution.file_name_check(\"example.txt.exe\")); // No\n        System.out.println(solution.file_name_check(\"example1234.txt\")); // No\n        System.out.println(solution.file_name_check(\"example.dll\")); // Yes\n    }\n}\n"}
{"task_id": "Java/104", "generation": "class Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> unique_digits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> unique_digits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n\n        for (Integer num : x) {\n            if (!containsEvenDigit(num)) {\n                result.add(num);\n            }\n        }\n\n        Collections.sort(result);\n        return result;\n    }\n\n    private boolean containsEvenDigit(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return true; // Found an even digit\n            }\n            num /= 10; // Remove the last digit\n        }\n        return false; // No even digits found\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.unique_digits(Arrays.asList(15, 33, 1422, 1))); // Output: [1, 15, 33]\n        System.out.println(solution.unique_digits(Arrays.asList(152, 323, 1422, 10))); // Output: []\n    }\n}\n"}
{"task_id": "Java/100", "generation": "class Solution {\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> stones = new ArrayList<>();\n        \n        // Start with the first level having n stones\n        int currentStones = n;\n        \n        for (int i = 0; i < n; i++) {\n            stones.add(currentStones);\n            // Determine the next number of stones based on whether n is odd or even\n            if (n % 2 == 0) {\n                // n is even, so add the next even number\n                currentStones += 2;\n            } else {\n                // n is odd, so add the next odd number\n                currentStones += 2;\n            }\n        }\n        \n        return stones;\n    }\n}\n"}
{"task_id": "Java/68", "generation": "class Solution {\n    public List<Integer> pluck(List<Integer> arr) {\n        // Initialize variables to track the smallest even value and its index\n        Integer smallestEvenValue = null;\n        Integer smallestEvenIndex = null;\n\n        // Iterate through the list\n        for (int i = 0; i < arr.size(); i++) {\n            int value = arr.get(i);\n            // Check if the value is even\n            if (value % 2 == 0) {\n                // If it's the first even number found or smaller than the current smallest\n                if (smallestEvenValue == null || value < smallestEvenValue) {\n                    smallestEvenValue = value;\n                    smallestEvenIndex = i;\n                }\n            }\n        }\n\n        // If we found an even value, return it with its index\n        if (smallestEvenValue != null) {\n            return Arrays.asList(smallestEvenValue, smallestEvenIndex);\n        } else {\n            // Return an empty list if no even values were found\n            return Collections.emptyList();\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.pluck(Arrays.asList(4, 2, 3))); // Output: [2, 1]\n        System.out.println(solution.pluck(Arrays.asList(1, 2, 3))); // Output: [2, 1]\n        System.out.println(solution.pluck(Arrays.asList())); // Output: []\n        System.out.println(solution.pluck(Arrays.asList(5, 0, 3, 0, 4, 2))); // Output: [0, 1]\n    }\n}\n"}
{"task_id": "Java/149", "generation": "class Solution {\n    public List<String> sorted_list_sum(List<String> lst) {\n        // Step 1: Filter out strings with odd lengths\n        List<String> filteredList = new ArrayList<>();\n        for (String str : lst) {\n            if (str.length() % 2 == 0) { // Check if length is even\n                filteredList.add(str);\n            }\n        }\n\n        // Step 2: Sort the filtered list\n        Collections.sort(filteredList, new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                // First compare by length\n                int lengthComparison = Integer.compare(s1.length(), s2.length());\n                if (lengthComparison != 0) {\n                    return lengthComparison; // Return length comparison if not equal\n                }\n                // If lengths are equal, compare alphabetically\n                return s1.compareTo(s2);\n            }\n        });\n\n        // Step 3: Return the sorted list\n        return filteredList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.sorted_list_sum(Arrays.asList(\"aa\", \"a\", \"aaa\"))); // Output: [\"aa\"]\n        System.out.println(solution.sorted_list_sum(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\"))); // Output: [\"ab\", \"cd\"]\n        System.out.println(solution.sorted_list_sum(Arrays.asList(\"hello\", \"world\", \"java\", \"is\", \"fun\"))); // Output: [\"is\", \"fun\", \"java\"]\n    }\n}\n"}
{"task_id": "Java/128", "generation": "class Solution {\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        // Check for empty list\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int productOfSigns = 1; // Start with 1 for multiplication\n        int sumOfMagnitudes = 0;\n\n        for (int num : arr) {\n            if (num > 0) {\n                sumOfMagnitudes += num; // Add to sum of magnitudes\n            } else if (num < 0) {\n                sumOfMagnitudes += -num; // Add absolute value to sum of magnitudes\n                productOfSigns *= -1; // Flip the sign\n            } else {\n                // If the number is zero, the product of signs becomes zero\n                productOfSigns = 0;\n            }\n        }\n\n        // Calculate the final result\n        int result = sumOfMagnitudes * productOfSigns;\n        return Optional.of(result);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.prod_signs(Arrays.asList(1, 2, 2, -4))); // Output: Optional[-9]\n        System.out.println(solution.prod_signs(Arrays.asList(0, 1))); // Output: Optional[0]\n        System.out.println(solution.prod_signs(Arrays.asList())); // Output: Optional.empty\n    }\n}\n"}
{"task_id": "Java/2", "generation": "class Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    */\n    public double truncate_number(double number) {\n        // Get the integer part using Math.floor\n        double integerPart = Math.floor(number);\n        // Calculate the decimal part\n        double decimalPart = number - integerPart;\n        return decimalPart;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.truncate_number(3.5)); // Output: 0.5\n        System.out.println(solution.truncate_number(7.25)); // Output: 0.25\n        System.out.println(solution.truncate_number(10.0)); // Output: 0.0\n        System.out.println(solution.truncate_number(5.99)); // Output: 0.99\n    }\n}\n"}
{"task_id": "Java/103", "generation": "class Solution {\n    public Object rounded_avg(int n, int m) {\n        // Check if n is greater than m\n        if (n > m) {\n            return -1;\n        }\n\n        // Calculate the sum of integers from n to m\n        int count = m - n + 1;\n        int sum = (count * (n + m)) / 2;\n\n        // Calculate the average\n        double average = (double) sum / count;\n\n        // Round the average to the nearest integer\n        int roundedAverage = (int) Math.round(average);\n\n        // Convert the rounded average to binary\n        return Integer.toBinaryString(roundedAverage);\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.rounded_avg(1, 5)); // Output: \"11\"\n        System.out.println(sol.rounded_avg(7, 5)); // Output: -1\n        System.out.println(sol.rounded_avg(10, 20)); // Output: \"1111\"\n        System.out.println(sol.rounded_avg(20, 33)); // Output: \"11011\"\n    }\n}\n"}
{"task_id": "Java/55", "generation": "class Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    */\n    public int fib(int n) {\n        if (n <= 0) {\n            return 0; // Return 0 for fib(0)\n        } else if (n == 1) {\n            return 1; // Return 1 for fib(1)\n        }\n\n        int a = 0; // fib(0)\n        int b = 1; // fib(1)\n        int fibN = 0;\n\n        for (int i = 2; i <= n; i++) {\n            fibN = a + b; // Calculate the next Fibonacci number\n            a = b; // Move to the next pair\n            b = fibN; // Update b to the new Fibonacci number\n        }\n\n        return fibN; // Return the n-th Fibonacci number\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fib(10)); // Output: 55\n        System.out.println(solution.fib(1));  // Output: 1\n        System.out.println(solution.fib(8));  // Output: 21\n    }\n}\n"}
{"task_id": "Java/70", "generation": "class Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strange_sort_list(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strange_sort_list(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        // If the list is empty, return an empty list\n        if (lst.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        // Sort the list\n        Collections.sort(lst);\n        \n        List<Integer> result = new ArrayList<>();\n        int left = 0; // Pointer for the minimum\n        int right = lst.size() - 1; // Pointer for the maximum\n        \n        // Alternate between the minimum and maximum\n        while (left <= right) {\n            // Add the minimum value\n            if (left <= right) {\n                result.add(lst.get(left));\n                left++;\n            }\n            // Add the maximum value\n            if (left <= right) {\n                result.add(lst.get(right));\n                right--;\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.strange_sort_list(Arrays.asList(1, 2, 3, 4))); // Output: [1, 4, 2, 3]\n        System.out.println(solution.strange_sort_list(Arrays.asList(5, 5, 5, 5))); // Output: [5, 5, 5, 5]\n        System.out.println(solution.strange_sort_list(Arrays.asList())); // Output: []\n    }\n}\n"}
{"task_id": "Java/34", "generation": "class Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n    */\n    public List<Integer> unique(List<Integer> l) {\n        // Use a HashSet to store unique elements\n        Set<Integer> uniqueSet = new HashSet<>(l);\n        \n        // Convert the set back to a list\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n        \n        // Sort the list\n        Collections.sort(uniqueList);\n        \n        return uniqueList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> result = solution.unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123));\n        System.out.println(result); // Output: [0, 2, 3, 5, 9, 123]\n    }\n}\n"}
{"task_id": "Java/15", "generation": "class Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\n    */\n    public String string_sequence(int n) {\n        StringBuilder result = new StringBuilder();\n        \n        for (int i = 0; i <= n; i++) {\n            result.append(i);\n            if (i < n) {\n                result.append(\" \"); // Add a space after each number except the last one\n            }\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.string_sequence(0)); // Output: \"0\"\n        System.out.println(sol.string_sequence(5)); // Output: \"0 1 2 3 4 5\"\n    }\n}\n"}
{"task_id": "Java/130", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n        List<Integer> tribonacci = new ArrayList<>();\n        \n        // Handle the case for n < 0\n        if (n < 0) {\n            return tribonacci;\n        }\n        \n        // Initialize the first two values\n        if (n >= 0) tribonacci.add(0); // tri(0) is not defined but we can add a placeholder\n        if (n >= 1) tribonacci.add(3); // tri(1) = 3\n        if (n >= 2) tribonacci.add(2); // tri(2) = 1 + (2 / 2) = 2\n        \n        // Calculate the Tribonacci sequence for n >= 3\n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) { // even\n                tribonacci.add(1 + i / 2);\n            } else { // odd\n                int triValue = tribonacci.get(i - 1) + tribonacci.get(i - 2);\n                if (i + 1 <= n) {\n                    triValue += tribonacci.get(i + 1); // This should be calculated after the loop\n                }\n                tribonacci.add(triValue);\n            }\n        }\n        \n        return tribonacci;\n    }\n}\n"}
{"task_id": "Java/91", "generation": "import java.util.*;\n\nclass Solution {\n    public int is_bored(String S) {\n        // Split the string into sentences based on delimiters\n        String[] sentences = S.replace('!', '.').replace('?', '.').split(\"\\\\.\");\n        int boredomCount = 0;\n\n        // Count the number of sentences that start with \"I\"\n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n        return boredomCount;\n    }\n}\n"}
{"task_id": "Java/11", "generation": "class Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    */\n    public String string_xor(String a, String b) {\n        // Check if the lengths of the two strings are equal\n        if (a.length() != b.length()) {\n            throw new IllegalArgumentException(\"Strings must be of the same length\");\n        }\n\n        StringBuilder result = new StringBuilder();\n\n        // Iterate through each character of the strings\n        for (int i = 0; i < a.length(); i++) {\n            // Perform XOR operation\n            char xorResult = (a.charAt(i) == b.charAt(i)) ? '0' : '1';\n            result.append(xorResult);\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.string_xor(\"010\", \"110\")); // Output: \"100\"\n    }\n}\n"}
{"task_id": "Java/39", "generation": "class Solution {\n    /**\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    */\n    \n    public int prime_fib(int n) {\n        List<Integer> primeFibs = new ArrayList<>();\n        int a = 0, b = 1;\n        \n        while (primeFibs.size() < n) {\n            int fib = a + b;\n            a = b;\n            b = fib;\n            \n            if (isPrime(fib)) {\n                primeFibs.add(fib);\n            }\n        }\n        \n        return primeFibs.get(n - 1);\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        if (num <= 3) return true;\n        if (num % 2 == 0 || num % 3 == 0) return false;\n        \n        for (int i = 5; i * i <= num; i += 6) {\n            if (num % i == 0 || num % (i + 2) == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.prime_fib(1)); // 2\n        System.out.println(sol.prime_fib(2)); // 3\n        System.out.println(sol.prime_fib(3)); // 5\n        System.out.println(sol.prime_fib(4)); // 13\n        System.out.println(sol.prime_fib(5)); // 89\n    }\n}\n"}
{"task_id": "Java/117", "generation": "class Solution {\n    public List<String> select_words(String s, int n) {\n        List<String> result = new ArrayList<>();\n        \n        // Check if the input string is empty\n        if (s == null || s.isEmpty()) {\n            return result; // Return empty list\n        }\n\n        // Split the string into words\n        String[] words = s.split(\" \");\n        \n        // Iterate through each word\n        for (String word : words) {\n            int consonantCount = countConsonants(word);\n            // Check if the consonant count matches n\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        \n        return result;\n    }\n\n    // Helper method to count consonants in a word\n    private int countConsonants(String word) {\n        int count = 0;\n        // Convert the word to lowercase for easier comparison\n        word = word.toLowerCase();\n        \n        for (char c : word.toCharArray()) {\n            // Check if the character is a consonant\n            if (Character.isLetter(c) && !isVowel(c)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n\n    // Helper method to check if a character is a vowel\n    private boolean isVowel(char c) {\n        return \"aeiou\".indexOf(c) != -1;\n    }\n\n    // Example usage\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.select_words(\"Mary had a little lamb\", 4)); // [\"little\"]\n        System.out.println(solution.select_words(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\n        System.out.println(solution.select_words(\"simple white space\", 2)); // []\n        System.out.println(solution.select_words(\"Hello world\", 4)); // [\"world\"]\n        System.out.println(solution.select_words(\"Uncle sam\", 3)); // [\"Uncle\"]\n    }\n}\n"}
{"task_id": "Java/0", "generation": "class Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> has_close_elements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> has_close_elements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n    */\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        // Sort the list to make it easier to find close elements\n        Collections.sort(numbers);\n        \n        // Check the difference between consecutive elements\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < threshold) {\n                return true; // Found two elements closer than the threshold\n            }\n        }\n        \n        return false; // No elements found that are closer than the threshold\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.has_close_elements(Arrays.asList(1.0, 2.0, 3.0), 0.5)); // false\n        System.out.println(solution.has_close_elements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)); // true\n    }\n}\n"}
{"task_id": "Java/31", "generation": "class Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    false\n    >>> is_prime(101)\n    true\n    >>> is_prime(11)\n    true\n    >>> is_prime(13441)\n    true\n    >>> is_prime(61)\n    true\n    >>> is_prime(4)\n    false\n    >>> is_prime(1)\n    false\n    */\n    public boolean is_prime(int n) {\n        // Check for numbers less than 2\n        if (n <= 1) {\n            return false;\n        }\n        // Check for 2 and 3\n        if (n <= 3) {\n            return true;\n        }\n        // Eliminate multiples of 2 and 3\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        // Check for factors from 5 to sqrt(n)\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.is_prime(6));      // false\n        System.out.println(solution.is_prime(101));    // true\n        System.out.println(solution.is_prime(11));     // true\n        System.out.println(solution.is_prime(13441));  // true\n        System.out.println(solution.is_prime(61));     // true\n        System.out.println(solution.is_prime(4));      // false\n        System.out.println(solution.is_prime(1));      // false\n    }\n}\n"}
{"task_id": "Java/106", "generation": "class Solution {\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                // Calculate factorial for even i\n                result.add(factorial(i));\n            } else {\n                // Calculate sum from 1 to i for odd i\n                result.add(sumToN(i));\n            }\n        }\n        \n        return result;\n    }\n    \n    // Helper method to calculate factorial\n    private int factorial(int num) {\n        int fact = 1;\n        for (int j = 1; j <= num; j++) {\n            fact *= j;\n        }\n        return fact;\n    }\n    \n    // Helper method to calculate sum from 1 to num\n    private int sumToN(int num) {\n        return (num * (num + 1)) / 2; // Using the formula n(n+1)/2\n    }\n    \n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.f(5)); // Output: [1, 2, 6, 24, 15]\n    }\n}\n"}
{"task_id": "Java/5", "generation": "class Solution {\n    /**\n    Insert a number 'delimiter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n    */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        \n        // Check if the input list is empty\n        if (numbers.isEmpty()) {\n            return result; // Return an empty list\n        }\n        \n        // Add the first element to the result\n        result.add(numbers.get(0));\n        \n        // Loop through the rest of the elements\n        for (int i = 1; i < numbers.size(); i++) {\n            // Add the delimiter\n            result.add(delimiter);\n            // Add the next element\n            result.add(numbers.get(i));\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.intersperse(List.of(), 4)); // []\n        System.out.println(solution.intersperse(Arrays.asList(1, 2, 3), 4)); // [1, 4, 2, 4, 3]\n        System.out.println(solution.intersperse(Arrays.asList(5, 10, 15), 0)); // [5, 0, 10, 0, 15]\n    }\n}\n"}
{"task_id": "Java/114", "generation": "class Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n    */\n    public int minSubArraySum(List<Integer> nums) {\n        // Initialize the minimum sum to a large value\n        int minSum = Integer.MAX_VALUE;\n        // Initialize the current sum to 0\n        int currentSum = 0;\n\n        for (int num : nums) {\n            // Add the current number to the current sum\n            currentSum += num;\n            // Update the minimum sum if the current sum is smaller\n            minSum = Math.min(minSum, currentSum);\n            // If the current sum is greater than 0, reset it to 0\n            if (currentSum > 0) {\n                currentSum = 0;\n            }\n        }\n\n        return minSum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4))); // Output: 1\n        System.out.println(solution.minSubArraySum(Arrays.asList(-1, -2, -3))); // Output: -6\n    }\n}\n"}
{"task_id": "Java/51", "generation": "class Solution {\n    /**\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels(\"\")\n    \"\"\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> remove_vowels(\"abcdef\")\n    \"bcdf\"\n    >>> remove_vowels(\"aaaaa\")\n    \"\"\n    >>> remove_vowels(\"aaBAA\")\n    \"B\"\n    >>> remove_vowels(\"zbcd\")\n    \"zbcd\"\n    */\n    public String remove_vowels(String text) {\n        // Define a set of vowels (both lowercase and uppercase)\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', \n                                                              'A', 'E', 'I', 'O', 'U'));\n        StringBuilder result = new StringBuilder();\n        \n        // Iterate through each character in the input string\n        for (char c : text.toCharArray()) {\n            // If the character is not a vowel, append it to the result\n            if (!vowels.contains(c)) {\n                result.append(c);\n            }\n        }\n        \n        // Convert StringBuilder to String and return\n        return result.toString();\n    }\n    \n    // Main method for testing\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.remove_vowels(\"\")); // \"\"\n        System.out.println(solution.remove_vowels(\"abcdef\\nghijklm\")); // \"bcdf\\nghjklm\"\n        System.out.println(solution.remove_vowels(\"abcdef\")); // \"bcdf\"\n        System.out.println(solution.remove_vowels(\"aaaaa\")); // \"\"\n        System.out.println(solution.remove_vowels(\"aaBAA\")); // \"B\"\n        System.out.println(solution.remove_vowels(\"zbcd\")); // \"zbcd\"\n    }\n}\n"}
{"task_id": "Java/152", "generation": "class Solution {\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        \n        // Check if both lists are of the same length\n        if (game.size() != guess.size()) {\n            throw new IllegalArgumentException(\"Both lists must be of the same length.\");\n        }\n        \n        // Iterate through both lists\n        for (int i = 0; i < game.size(); i++) {\n            // Calculate the absolute difference\n            int difference = Math.abs(game.get(i) - guess.get(i));\n            result.add(difference);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.compare(Arrays.asList(1, 2, 3, 4, 5, 1), Arrays.asList(1, 2, 3, 4, 2, -2))); // [0, 0, 0, 0, 3, 3]\n        System.out.println(solution.compare(Arrays.asList(0, 5, 0, 0, 0, 4), Arrays.asList(4, 1, 1, 0, 0, -2))); // [4, 4, 1, 0, 0, 6]\n    }\n}\n"}
{"task_id": "Java/139", "generation": "class Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    */\n    public long special_factorial(int n) {\n        long result = 1; // Initialize result to 1\n        for (int i = 1; i <= n; i++) {\n            result *= factorial(i); // Multiply by the factorial of i\n        }\n        return result; // Return the final result\n    }\n\n    // Helper method to calculate factorial of a number\n    private long factorial(int num) {\n        long fact = 1; // Initialize factorial to 1\n        for (int i = 2; i <= num; i++) {\n            fact *= i; // Calculate factorial\n        }\n        return fact; // Return the factorial\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.special_factorial(4)); // Output: 288\n        System.out.println(sol.special_factorial(5)); // Output: 34560\n    }\n}\n"}
{"task_id": "Java/105", "generation": "class Solution {\n    public List<String> by_length(List<Integer> arr) {\n        // Step 1: Filter the list to include only integers between 1 and 9\n        List<Integer> filtered = new ArrayList<>();\n        for (Integer num : arr) {\n            if (num >= 1 && num <= 9) {\n                filtered.add(num);\n            }\n        }\n\n        // Step 2: Sort the filtered list\n        Collections.sort(filtered);\n\n        // Step 3: Reverse the sorted list\n        Collections.reverse(filtered);\n\n        // Step 4: Map each integer to its corresponding name\n        List<String> result = new ArrayList<>();\n        String[] names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        \n        for (Integer num : filtered) {\n            // num - 1 gives the correct index for the names array (0-based index)\n            result.add(names[num - 1]);\n        }\n\n        // Step 5: Return the resulting list of names\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.by_length(Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3))); // [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n        System.out.println(solution.by_length(Arrays.asList())); // []\n        System.out.println(solution.by_length(Arrays.asList(1, -1, 55))); // [\"One\"]\n    }\n}\n"}
{"task_id": "Java/12", "generation": "class Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n    */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longestString = strings.get(0); // Start with the first string\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str; // Update if we find a longer string\n            }\n        }\n        \n        return Optional.of(longestString); // Return the longest string wrapped in Optional\n    }\n}\n"}
{"task_id": "Java/7", "generation": "class Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring(List.of(), \"a\")\n    []\n    >>> filter_by_substring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    */\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        // Use stream to filter the strings that contain the substring\n        return strings.stream()\n                      .filter(s -> s.contains(substring))\n                      .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.filter_by_substring(List.of(), \"a\")); // []\n        System.out.println(solution.filter_by_substring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")); // [\"abc\", \"bacd\", \"array\"]\n    }\n}\n"}
{"task_id": "Java/138", "generation": "class Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == false\n    is_equal_to_sum_even(6) == false\n    is_equal_to_sum_even(8) == true\n    */\n    public boolean is_equal_to_sum_even(int n) {\n        // Check if n is less than 8\n        if (n < 8) {\n            return false;\n        }\n        // Check if n is even\n        if (n % 2 != 0) {\n            return false;\n        }\n        // If n is even and at least 8, return true\n        return true;\n    }\n}\n"}
{"task_id": "Java/41", "generation": "class Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int car_race_collision(int n) {\n        // Each car moving left to right will collide with each car moving right to left\n        // Therefore, the total number of collisions is n * n\n        return n * n;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 5; // Example input\n        int collisions = solution.car_race_collision(n);\n        System.out.println(\"Number of collisions: \" + collisions); // Output: 25\n    }\n}\n"}
{"task_id": "Java/67", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruit_distribution(String s, int n) {\n        // Split the string to extract the number of apples and oranges\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0]); // First part is the number of apples\n        int oranges = Integer.parseInt(parts[2]); // Third part is the number of oranges\n        \n        // Calculate the number of mangoes\n        int mangoes = n - apples - oranges;\n        return mangoes;\n    }\n}\n"}
{"task_id": "Java/40", "generation": "class Solution {\n    /**\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triples_sum_to_zero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triples_sum_to_zero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triples_sum_to_zero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triples_sum_to_zero(Arrays.asList(1))\n    false\n     */\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        // Convert the List to an array for easier manipulation\n        Integer[] arr = l.toArray(new Integer[0]);\n        Arrays.sort(arr); // Sort the array\n\n        int n = arr.length;\n\n        for (int i = 0; i < n - 2; i++) {\n            // Skip duplicates for the first element\n            if (i > 0 && arr[i].equals(arr[i - 1])) {\n                continue;\n            }\n\n            int left = i + 1;\n            int right = n - 1;\n\n            while (left < right) {\n                int sum = arr[i] + arr[left] + arr[right];\n\n                if (sum == 0) {\n                    return true; // Found a triplet\n                } else if (sum < 0) {\n                    left++; // Need a larger sum\n                } else {\n                    right--; // Need a smaller sum\n                }\n            }\n        }\n\n        return false; // No triplet found\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1, 3, -2, 1))); // true\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(2, 4, -5, 3, 9, 7))); // true\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1))); // false\n    }\n}\n"}
{"task_id": "Java/33", "generation": "class Solution {\n    public List<Integer> sort_third(List<Integer> l) {\n        // List to hold the values at indices divisible by 3\n        List<Integer> divisibleByThreeValues = new ArrayList<>();\n        \n        // Collect values at indices divisible by 3\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                divisibleByThreeValues.add(l.get(i));\n            }\n        }\n        \n        // Sort the collected values\n        Collections.sort(divisibleByThreeValues);\n        \n        // Create a new list to hold the result\n        List<Integer> result = new ArrayList<>(l);\n        \n        // Replace values at indices divisible by 3 with sorted values\n        int sortedIndex = 0;\n        for (int i = 0; i < result.size(); i++) {\n            if (i % 3 == 0) {\n                result.set(i, divisibleByThreeValues.get(sortedIndex));\n                sortedIndex++;\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.sort_third(Arrays.asList(1, 2, 3))); // Output: [1, 2, 3]\n        System.out.println(solution.sort_third(Arrays.asList(5, 6, 3, 4, 8, 9, 2))); // Output: [2, 6, 3, 4, 8, 9, 5]\n    }\n}\n"}
{"task_id": "Java/136", "generation": "class Solution {\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        Integer largestNegative = null;\n        Integer smallestPositive = null;\n\n        for (Integer num : lst) {\n            if (num < 0) {\n                if (largestNegative == null || num > largestNegative) {\n                    largestNegative = num;\n                }\n            } else if (num > 0) {\n                if (smallestPositive == null || num < smallestPositive) {\n                    smallestPositive = num;\n                }\n            }\n        }\n\n        Optional<Integer> largestNegativeOpt = Optional.ofNullable(largestNegative);\n        Optional<Integer> smallestPositiveOpt = Optional.ofNullable(smallestPositive);\n\n        return Arrays.asList(largestNegativeOpt, smallestPositiveOpt);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(2, 4, 1, 3, 5, 7))); // (Optional.empty(), Optional.of(1))\n        System.out.println(solution.largest_smallest_integers(Arrays.asList())); // (Optional.empty(), Optional.empty())\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(0))); // (Optional.empty(), Optional.empty())\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(-1, -2, 0, 1, 2))); // (Optional.of(-1), Optional.of(1))\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(-5, -3, -1, 0, 2, 4))); // (Optional.of(-1), Optional.of(2))\n    }\n}\n"}
{"task_id": "Java/1", "generation": "class Solution {\n    public List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        StringBuilder currentGroup = new StringBuilder();\n        int balance = 0;\n\n        // Remove spaces from the input string\n        paren_string = paren_string.replaceAll(\"\\\\s+\", \"\");\n\n        for (char ch : paren_string.toCharArray()) {\n            if (ch == '(') {\n                // If we encounter an open parenthesis, we start a new group\n                if (balance == 0 && currentGroup.length() > 0) {\n                    // If we were already building a group, save it before starting a new one\n                    result.add(currentGroup.toString());\n                    currentGroup.setLength(0); // Reset the current group\n                }\n                currentGroup.append(ch);\n                balance++;\n            } else if (ch == ')') {\n                currentGroup.append(ch);\n                balance--;\n            }\n\n            // When balance is zero, we have a complete group\n            if (balance == 0 && currentGroup.length() > 0) {\n                result.add(currentGroup.toString());\n                currentGroup.setLength(0); // Reset for the next group\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.separate_paren_groups(\"( ) (( )) (( )( ))\"));\n    }\n}\n"}
{"task_id": "Java/126", "generation": "class Solution {\n    public boolean is_sorted(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return true; // An empty list is considered sorted\n        }\n\n        // To check if the list is sorted\n        boolean isSorted = true;\n        // To count occurrences of each number\n        Map<Integer, Integer> countMap = new HashMap<>();\n\n        for (int i = 0; i < lst.size(); i++) {\n            int current = lst.get(i);\n\n            // Count occurrences\n            countMap.put(current, countMap.getOrDefault(current, 0) + 1);\n            if (countMap.get(current) > 2) {\n                return false; // More than two occurrences\n            }\n\n            // Check if the list is sorted\n            if (i > 0 && current < lst.get(i - 1)) {\n                isSorted = false; // Not sorted\n            }\n        }\n\n        return isSorted;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.is_sorted(Arrays.asList(5))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 3, 4, 5))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 3, 2, 4, 5))); // false\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7))); // false\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 2, 3, 3, 4))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 2, 2, 3, 4))); // false\n    }\n}\n"}
{"task_id": "Java/38", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n    */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n    */\n    public String decode_cyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(groups.get(i).length() - 1) + groups.get(i).substring(0, groups.get(i).length() - 1));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n"}
{"task_id": "Java/18", "generation": "class Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlapping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    */\n    public int how_many_times(String string, String substring) {\n        // Edge case: if the substring is empty, return 0\n        if (substring.isEmpty()) {\n            return 0;\n        }\n\n        int count = 0;\n        int index = 0;\n\n        // Loop through the string to find occurrences of the substring\n        while ((index = string.indexOf(substring, index)) != -1) {\n            count++;\n            index++; // Move to the next character to allow for overlapping matches\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.how_many_times(\"\", \"a\")); // Output: 0\n        System.out.println(solution.how_many_times(\"aaa\", \"a\")); // Output: 3\n        System.out.println(solution.how_many_times(\"aaaa\", \"aa\")); // Output: 3\n    }\n}\n"}
{"task_id": "Java/45", "generation": "class Solution {\n    /**\n    Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    */\n    public double triangle_area(double a, double h) {\n        return 0.5 * a * h;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        double area = solution.triangle_area(5, 3);\n        System.out.println(\"Area of the triangle: \" + area); // Output: Area of the triangle: 7.5\n    }\n}\n"}
{"task_id": "Java/81", "generation": "class Solution {\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n\n        for (Double gpa : grades) {\n            if (gpa == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n\n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> grades = Arrays.asList(4.0, 3.0, 1.7, 2.0, 3.5);\n        List<String> result = solution.numerical_letter_grade(grades);\n        System.out.println(result); // Output: [A+, B+, C-, C, A-]\n    }\n}\n"}
{"task_id": "Java/26", "generation": "class Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates(Arrays.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n    */\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        // Step 1: Count occurrences of each number\n        Map<Integer, Long> frequencyMap = numbers.stream()\n            .collect(Collectors.groupingBy(n -> n, Collectors.counting()));\n        \n        // Step 2: Filter the numbers that occur exactly once and maintain order\n        List<Integer> result = numbers.stream()\n            .filter(n -> frequencyMap.get(n) == 1)\n            .collect(Collectors.toList());\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> result = solution.remove_duplicates(Arrays.asList(1, 2, 3, 2, 4));\n        System.out.println(result); // Output: [1, 3, 4]\n    }\n}\n"}
{"task_id": "Java/134", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        // Strip any trailing spaces from the string\n        txt = txt.trim();\n        \n        // Check if the string is empty after trimming\n        if (txt.isEmpty()) {\n            return false;\n        }\n        \n        // Get the last character of the string\n        char lastChar = txt.charAt(txt.length() - 1);\n        \n        // Check if the last character is an alphabetical character\n        return Character.isLetter(lastChar) && (txt.length() == 1 || txt.charAt(txt.length() - 2) == ' ');\n    }\n}\n"}
{"task_id": "Java/76", "generation": "class Solution {\n    public boolean is_simple_power(int x, int n) {\n        // Handle edge cases\n        if (n <= 1) {\n            return x == 1; // 1 is a power of any number, but n <= 1 is not valid for powers\n        }\n        if (x < 1) {\n            return false; // x must be a positive integer\n        }\n        \n        int power = 1; // Start with n^0 = 1\n        while (power < x) {\n            power *= n; // Calculate n^k\n        }\n        \n        return power == x; // Check if we found n^k = x\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.is_simple_power(1, 4)); // true\n        System.out.println(solution.is_simple_power(2, 2)); // true\n        System.out.println(solution.is_simple_power(8, 2)); // true\n        System.out.println(solution.is_simple_power(3, 2)); // false\n        System.out.println(solution.is_simple_power(3, 1)); // false\n        System.out.println(solution.is_simple_power(5, 3)); // false\n    }\n}\n"}
{"task_id": "Java/120", "generation": "class Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Step 1: Sort the array in descending order\n        Collections.sort(arr, Collections.reverseOrder());\n        \n        // Step 2: Get the first k elements\n        List<Integer> maxKElements = arr.subList(0, k);\n        \n        // Step 3: Sort the selected k elements in ascending order\n        Collections.sort(maxKElements);\n        \n        return maxKElements;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.maximum(Arrays.asList(-3, -4, 5), 3)); // Output: [-4, -3, 5]\n        System.out.println(solution.maximum(Arrays.asList(4, -4, 4), 2)); // Output: [4, 4]\n        System.out.println(solution.maximum(Arrays.asList(-3, 2, 1, 2, -1, -2, 1), 1)); // Output: [2]\n    }\n}\n"}
{"task_id": "Java/47", "generation": "class Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    8.0\n    */\n    public double median(List<Integer> l) {\n        // Sort the list\n        Collections.sort(l);\n        \n        int n = l.size();\n        if (n % 2 == 1) {\n            // If odd, return the middle element\n            return l.get(n / 2);\n        } else {\n            // If even, return the average of the two middle elements\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.median(Arrays.asList(3, 1, 2, 4, 5))); // Output: 3.0\n        System.out.println(sol.median(Arrays.asList(-10, 4, 6, 1000, 10, 20))); // Output: 8.0\n    }\n}\n"}
{"task_id": "Java/78", "generation": "class Solution {\n    public int hex_key(String num) {\n        // Set of prime hexadecimal digits\n        Set<Character> primeHexDigits = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        // Counter for prime hexadecimal digits\n        int count = 0;\n        \n        // Iterate through each character in the input string\n        for (char ch : num.toCharArray()) {\n            // Check if the character is in the set of prime hexadecimal digits\n            if (primeHexDigits.contains(ch)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.hex_key(\"AB\")); // Output: 1\n        System.out.println(solution.hex_key(\"1077E\")); // Output: 2\n        System.out.println(solution.hex_key(\"ABED1A33\")); // Output: 4\n        System.out.println(solution.hex_key(\"123456789ABCDEF0\")); // Output: 6\n        System.out.println(solution.hex_key(\"2020\")); // Output: 2\n    }\n}\n"}
{"task_id": "Java/129", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int N = grid.size();\n        List<Integer> minPath = new ArrayList<>();\n        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}}; // right, down, left, up\n\n        // Start DFS from each cell in the grid\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < N; j++) {\n                List<Integer> path = new ArrayList<>();\n                path.add(grid.get(i).get(j));\n                dfs(i, j, path, grid, k, minPath, directions);\n            }\n        }\n\n        return minPath;\n    }\n\n    private void dfs(int x, int y, List<Integer> path, List<List<Integer>> grid, int k, List<Integer> minPath, int[][] directions) {\n        if (path.size() == k) {\n            if (minPath.isEmpty() || isLexicographicallyLess(path, minPath)) {\n                minPath.clear();\n                minPath.addAll(new ArrayList<>(path));\n            }\n            return;\n        }\n\n        for (int[] dir : directions) {\n            int nx = x + dir[0];\n            int ny = y + dir[1];\n            if (nx >= 0 && nx < grid.size() && ny >= 0 && ny < grid.size()) {\n                path.add(grid.get(nx).get(ny));\n                dfs(nx, ny, path, grid, k, minPath, directions);\n                path.remove(path.size() - 1); // Backtrack\n            }\n        }\n    }\n\n    private boolean isLexicographicallyLess(List<Integer> pathA, List<Integer> pathB) {\n        for (int i = 0; i < pathA.size(); i++) {\n            if (pathA.get(i) < pathB.get(i)) {\n                return true;\n            } else if (pathA.get(i) > pathB.get(i)) {\n                return false;\n            }\n        }\n        return false; // They are equal\n    }\n}\n"}
{"task_id": "Java/59", "generation": "class Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    */\n    public int largest_prime_factor(int n) {\n        int largestPrime = -1;\n\n        // Check for number of 2s that divide n\n        while (n % 2 == 0) {\n            largestPrime = 2;\n            n /= 2;\n        }\n\n        // n must be odd at this point, so we can skip even numbers\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            // While i divides n, update n and largestPrime\n            while (n % i == 0) {\n                largestPrime = i;\n                n /= i;\n            }\n        }\n\n        // This condition is to check if n is a prime number greater than 2\n        if (n > 2) {\n            largestPrime = n;\n        }\n\n        return largestPrime;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.largest_prime_factor(13195)); // Output: 29\n        System.out.println(solution.largest_prime_factor(2048));  // Output: 2\n    }\n}\n"}
{"task_id": "Java/123", "generation": "class Solution {\n    public List<Integer> get_odd_collatz(int n) {\n        Set<Integer> oddNumbers = new HashSet<>(); // Use a set to avoid duplicates\n        while (n != 1) {\n            if (n % 2 != 0) { // Check if n is odd\n                oddNumbers.add(n);\n            }\n            // Generate the next term in the Collatz sequence\n            if (n % 2 == 0) {\n                n = n / 2; // If n is even\n            } else {\n                n = 3 * n + 1; // If n is odd\n            }\n        }\n        // Add 1 to the set since the sequence always ends with 1\n        oddNumbers.add(1);\n        \n        // Convert the set to a list and sort it\n        List<Integer> result = new ArrayList<>(oddNumbers);\n        Collections.sort(result);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.get_odd_collatz(5)); // Output: [1, 5]\n    }\n}\n"}
{"task_id": "Java/74", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        int totalCharsLst1 = 0;\n        int totalCharsLst2 = 0;\n\n        // Calculate total characters in lst1\n        for (String s : lst1) {\n            totalCharsLst1 += s.length();\n        }\n\n        // Calculate total characters in lst2\n        for (String s : lst2) {\n            totalCharsLst2 += s.length();\n        }\n\n        // Compare total characters and return the appropriate list\n        if (totalCharsLst1 < totalCharsLst2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n"}
{"task_id": "Java/21", "generation": "class Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1.\n    >>> rescale_to_unit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    */\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements.\");\n        }\n\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        \n        List<Double> scaledNumbers = new ArrayList<>();\n        for (Double number : numbers) {\n            double scaledValue = (number - min) / (max - min);\n            scaledNumbers.add(scaledValue);\n        }\n        \n        return scaledNumbers;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> result = solution.rescale_to_unit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0));\n        System.out.println(result); // Output: [0.0, 0.25, 0.5, 0.75, 1.0]\n    }\n}\n"}
{"task_id": "Java/48", "generation": "class Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    */\n    public boolean is_palindrome(String text) {\n        // Handle null case\n        if (text == null) {\n            return false;\n        }\n        \n        int left = 0;\n        int right = text.length() - 1;\n        \n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false; // Not a palindrome\n            }\n            left++;\n            right--;\n        }\n        \n        return true; // It's a palindrome\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.is_palindrome(\"\")); // true\n        System.out.println(solution.is_palindrome(\"aba\")); // true\n        System.out.println(solution.is_palindrome(\"aaaaa\")); // true\n        System.out.println(solution.is_palindrome(\"zbcd\")); // false\n    }\n}\n"}
{"task_id": "Java/13", "generation": "class Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    */\n    public int greatest_common_divisor(int a, int b) {\n        // Ensure a and b are non-negative\n        a = Math.abs(a);\n        b = Math.abs(b);\n        \n        // Use the Euclidean algorithm\n        while (b != 0) {\n            int temp = b;\n            b = a % b; // Remainder of a divided by b\n            a = temp;  // Update a to the previous value of b\n        }\n        \n        return a; // When b becomes 0, a is the GCD\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.greatest_common_divisor(3, 5)); // Output: 1\n        System.out.println(solution.greatest_common_divisor(25, 15)); // Output: 5\n    }\n}\n"}
{"task_id": "Java/42", "generation": "class Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incr_list(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incr_list(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    */\n    public List<Integer> incr_list(List<Integer> l) {\n        return l.stream()\n                .map(x -> x + 1) // Increment each element by 1\n                .collect(Collectors.toList()); // Collect the results into a new list\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.incr_list(Arrays.asList(1, 2, 3))); // Output: [2, 3, 4]\n        System.out.println(solution.incr_list(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))); // Output: [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    }\n}\n"}
{"task_id": "Java/84", "generation": "class Solution {\n    public String solve(int N) {\n        // Step 1: Calculate the sum of the digits of N\n        int sum = 0;\n        while (N > 0) {\n            sum += N % 10; // Add the last digit to sum\n            N /= 10; // Remove the last digit\n        }\n        \n        // Step 2: Convert the sum to binary\n        return Integer.toBinaryString(sum);\n    }\n}\n"}
{"task_id": "Java/140", "generation": "class Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    */\n    public String fix_spaces(String text) {\n        // Step 1: Replace sequences of more than 2 spaces with a single hyphen\n        String result = text.replaceAll(\" {3,}\", \"-\");\n        \n        // Step 2: Replace remaining single spaces with underscores\n        result = result.replaceAll(\" \", \"_\");\n        \n        // Step 3: Handle leading and trailing underscores\n        result = result.replaceAll(\"^_+\", \"\").replaceAll(\"_+$\", \"\");\n        \n        // Add leading underscore if the original string started with a space\n        if (text.startsWith(\" \")) {\n            result = \"_\" + result;\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fix_spaces(\"Example\"));        // \"Example\"\n        System.out.println(solution.fix_spaces(\"Example 1\"));      // \"Example_1\"\n        System.out.println(solution.fix_spaces(\" Example 2\"));     // \"_Example_2\"\n        System.out.println(solution.fix_spaces(\" Example   3\"));   // \"_Example-3\"\n    }\n}\n"}
{"task_id": "Java/92", "generation": "class Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) -> true\n\n    any_int(3, 2, 2) -> false\n\n    any_int(3, -2, 1) -> true\n\n    any_int(3.6, -2.2, 2) -> false\n     */\n    public boolean any_int(Object x, Object y, Object z) {\n        // Check if all inputs are instances of Integer\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int a = (Integer) x;\n            int b = (Integer) y;\n            int c = (Integer) z;\n            \n            // Check if any number is equal to the sum of the other two\n            return (a == b + c) || (b == a + c) || (c == a + b);\n        }\n        // If any input is not an Integer, return false\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.any_int(5, 2, 7)); // true\n        System.out.println(solution.any_int(3, 2, 2)); // false\n        System.out.println(solution.any_int(3, -2, 1)); // true\n        System.out.println(solution.any_int(3.6, -2.2, 2)); // false\n    }\n}\n"}
{"task_id": "Java/143", "generation": "class Solution {\n    public String words_in_sentence(String sentence) {\n        // Split the sentence into words\n        String[] words = sentence.split(\" \");\n        List<String> primeLengthWords = new ArrayList<>();\n        \n        // Check each word's length\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                primeLengthWords.add(word);\n            }\n        }\n        \n        // Join the filtered words into a single string\n        return String.join(\" \", primeLengthWords);\n    }\n\n    // Helper function to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) return false; // 0 and 1 are not prime numbers\n        if (num <= 3) return true; // 2 and 3 are prime numbers\n        if (num % 2 == 0 || num % 3 == 0) return false; // eliminate multiples of 2 and 3\n\n        for (int i = 5; i * i <= num; i += 6) {\n            if (num % i == 0 || num % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.words_in_sentence(\"This is a test\")); // Output: \"is\"\n        System.out.println(solution.words_in_sentence(\"lets go for swimming\")); // Output: \"go for\"\n    }\n}\n"}
{"task_id": "Java/148", "generation": "class Solution {\n    public List<String> bf(String planet1, String planet2) {\n        // List of planets in order of proximity to the Sun\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        \n        // Check if both planets are valid\n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return new ArrayList<>(); // Return an empty list if either planet is invalid\n        }\n        \n        // Get the indices of the planets\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        \n        // Ensure index1 is less than index2\n        if (index1 > index2) {\n            int temp = index1;\n            index1 = index2;\n            index2 = temp;\n        }\n        \n        // Create a list to hold the planets between planet1 and planet2\n        List<String> result = new ArrayList<>();\n        \n        // Add planets between the two indices\n        for (int i = index1 + 1; i < index2; i++) {\n            result.add(planets.get(i));\n        }\n        \n        return result; // Return the list of planets in between\n    }\n}\n"}
{"task_id": "Java/115", "generation": "class Solution {\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        int totalLowerings = 0;\n\n        // Iterate through each well (row in the grid)\n        for (List<Integer> well : grid) {\n            int waterUnits = 0;\n\n            // Count the number of water units (1s) in the current well\n            for (int water : well) {\n                if (water == 1) {\n                    waterUnits++;\n                }\n            }\n\n            // Calculate the number of times we need to lower the bucket for this well\n            if (waterUnits > 0) {\n                totalLowerings += (waterUnits + capacity - 1) / capacity; // This is equivalent to Math.ceil(waterUnits / capacity)\n            }\n        }\n\n        return totalLowerings;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<List<Integer>> grid1 = Arrays.asList(\n            Arrays.asList(0, 0, 1, 0),\n            Arrays.asList(0, 1, 0, 0),\n            Arrays.asList(1, 1, 1, 1)\n        );\n        int capacity1 = 1;\n        System.out.println(solution.max_fill(grid1, capacity1)); // Output: 6\n\n        // Test case 2\n        List<List<Integer>> grid2 = Arrays.asList(\n            Arrays.asList(0, 0, 1, 1),\n            Arrays.asList(0, 0, 0, 0),\n            Arrays.asList(1, 1, 1, 1),\n            Arrays.asList(0, 1, 1, 1)\n        );\n        int capacity2 = 2;\n        System.out.println(solution.max_fill(grid2, capacity2)); // Output: 5\n\n        // Test case 3\n        List<List<Integer>> grid3 = Arrays.asList(\n            Arrays.asList(0, 0, 0),\n            Arrays.asList(0, 0, 0)\n        );\n        int capacity3 = 5;\n        System.out.println(solution.max_fill(grid3, capacity3)); // Output: 0\n    }\n}\n"}
{"task_id": "Java/71", "generation": "class Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    */\n    public double triangle_area(double a, double b, double c) {\n        // Check if the sides form a valid triangle\n        if (a + b > c && a + c > b && b + c > a) {\n            // Calculate the semi-perimeter\n            double s = (a + b + c) / 2;\n            // Calculate the area using Heron's formula\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            // Return the area rounded to 2 decimal points\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            // Return -1 if the sides do not form a valid triangle\n            return -1;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.triangle_area(3, 4, 5)); // Output: 6.00\n        System.out.println(solution.triangle_area(1, 2, 10)); // Output: -1\n    }\n}\n"}
{"task_id": "Java/163", "generation": "class Solution {\n    public List<Integer> generate_integers(int a, int b) {\n        // Create a list to hold the even digits\n        List<Integer> evenDigits = new ArrayList<>();\n        \n        // Determine the range\n        int start = Math.min(a, b);\n        int end = Math.max(a, b);\n        \n        // Define the even digits\n        int[] evenNumbers = {0, 2, 4, 6, 8};\n        \n        // Check each even digit and add it to the list if it's in the range\n        for (int digit : evenNumbers) {\n            if (digit >= start && digit <= end) {\n                evenDigits.add(digit);\n            }\n        }\n        \n        // Return the list of even digits\n        return evenDigits;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.generate_integers(2, 8)); // Output: [2, 4, 6, 8]\n        System.out.println(solution.generate_integers(8, 2)); // Output: [2, 4, 6, 8]\n        System.out.println(solution.generate_integers(10, 14)); // Output: []\n    }\n}\n"}
{"task_id": "Java/19", "generation": "class Solution {\n    /**\n    Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    */\n    public String sort_numbers(String numbers) {\n        // Mapping of words to their corresponding numeric values\n        Map<String, Integer> wordToNumber = new HashMap<>();\n        wordToNumber.put(\"zero\", 0);\n        wordToNumber.put(\"one\", 1);\n        wordToNumber.put(\"two\", 2);\n        wordToNumber.put(\"three\", 3);\n        wordToNumber.put(\"four\", 4);\n        wordToNumber.put(\"five\", 5);\n        wordToNumber.put(\"six\", 6);\n        wordToNumber.put(\"seven\", 7);\n        wordToNumber.put(\"eight\", 8);\n        wordToNumber.put(\"nine\", 9);\n\n        // Split the input string into words\n        String[] words = numbers.split(\" \");\n        \n        // Sort the words based on their numeric values\n        Arrays.sort(words, Comparator.comparingInt(wordToNumber::get));\n\n        // Join the sorted words back into a single string\n        return String.join(\" \", words);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sort_numbers(\"three one five\")); // Output: \"one three five\"\n        System.out.println(solution.sort_numbers(\"nine eight seven six five four three two one zero\")); // Output: \"zero one two three four five six seven eight nine\"\n    }\n}\n"}
{"task_id": "Java/118", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String get_closest_vowel(String word) {\n        String vowels = \"aeiouAEIOU\";\n        String closestVowel = \"\";\n\n        // Start from the end of the word and look for consonants\n        for (int i = word.length() - 1; i > 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) == -1 && vowels.indexOf(word.charAt(i - 1)) != -1) {\n                closestVowel = String.valueOf(word.charAt(i - 1));\n                break;\n            } else if (vowels.indexOf(word.charAt(i)) != -1 && i > 0 && vowels.indexOf(word.charAt(i - 1)) == -1) {\n                closestVowel = String.valueOf(word.charAt(i));\n                break;\n            }\n        }\n\n        return closestVowel.isEmpty() || vowels.indexOf(closestVowel.charAt(0)) == -1 ? \"\" : closestVowel;\n    }\n}\n"}
{"task_id": "Java/101", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> words_string(String s) {\n        // Replace commas with spaces and split the string by whitespace\n        String[] wordsArray = s.replace(\",\", \" \").split(\"\\\\s+\");\n        List<String> wordsList = new ArrayList<>();\n        \n        // Add non-empty words to the list\n        for (String word : wordsArray) {\n            if (!word.isEmpty()) {\n                wordsList.add(word);\n            }\n        }\n        \n        return wordsList;\n    }\n}\n"}
{"task_id": "Java/151", "generation": "class Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    double_the_difference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    double_the_difference(Arrays.asList(-1, -2, 0)) == 0\n    double_the_difference(Arrays.asList(9, -2)) == 81\n    double_the_difference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int double_the_difference(List<Object> lst) {\n        int sum = 0;\n\n        for (Object obj : lst) {\n            // Check if the object is an instance of Integer\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                // Check if the number is non-negative and odd\n                if (num >= 0 && num % 2 != 0) {\n                    sum += num * num; // Add the square of the number to the sum\n                }\n            }\n        }\n\n        return sum; // Return the total sum of squares of odd numbers\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.double_the_difference(Arrays.asList(1, 3, 2, 0))); // Output: 10\n        System.out.println(solution.double_the_difference(Arrays.asList(-1, -2, 0))); // Output: 0\n        System.out.println(solution.double_the_difference(Arrays.asList(9, -2))); // Output: 81\n        System.out.println(solution.double_the_difference(Arrays.asList(0))); // Output: 0\n        System.out.println(solution.double_the_difference(Arrays.asList())); // Output: 0\n    }\n}\n"}
{"task_id": "Java/133", "generation": "class Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sum_squares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            // Round up to the nearest integer\n            int rounded = (int) Math.ceil(num);\n            // Square the rounded integer and add to sum\n            sum += rounded * rounded;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.sum_squares(Arrays.asList(1.0, 2.0, 3.0))); // Output: 14\n        System.out.println(solution.sum_squares(Arrays.asList(1.0, 4.0, 9.0))); // Output: 98\n        System.out.println(solution.sum_squares(Arrays.asList(1.0, 3.0, 5.0, 7.0))); // Output: 84\n        System.out.println(solution.sum_squares(Arrays.asList(1.4, 4.2, 0.0))); // Output: 29\n        System.out.println(solution.sum_squares(Arrays.asList(-2.4, 1.0, 1.0))); // Output: 6\n    }\n}\n"}
{"task_id": "Java/144", "generation": "class Solution {\n    public boolean simplify(String x, String n) {\n        // Split the fractions into numerator and denominator\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n        \n        // Parse the numerators and denominators\n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n        \n        // Calculate the product's numerator and denominator\n        int productNumerator = xNumerator * nNumerator;\n        int productDenominator = xDenominator * nDenominator;\n        \n        // Check if the product is a whole number\n        return productNumerator % productDenominator == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.simplify(\"1/5\", \"5/1\")); // true\n        System.out.println(solution.simplify(\"1/6\", \"2/1\")); // false\n        System.out.println(solution.simplify(\"7/10\", \"10/2\")); // false\n    }\n}\n"}
{"task_id": "Java/158", "generation": "class Solution {\n    public String find_max(List<String> words) {\n        String maxWord = \"\";\n        int maxUniqueCount = 0;\n\n        for (String word : words) {\n            // Use a Set to find unique characters\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            int uniqueCount = uniqueChars.size();\n\n            // Check if this word has more unique characters or is lexicographically smaller\n            if (uniqueCount > maxUniqueCount || \n                (uniqueCount == maxUniqueCount && word.compareTo(maxWord) < 0)) {\n                maxUniqueCount = uniqueCount;\n                maxWord = word;\n            }\n        }\n\n        return maxWord;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.find_max(Arrays.asList(\"name\", \"of\", \"string\"))); // Output: \"string\"\n        System.out.println(solution.find_max(Arrays.asList(\"name\", \"enam\", \"game\"))); // Output: \"enam\"\n        System.out.println(solution.find_max(Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\"))); // Output: \"aaaaaaa\"\n    }\n}\n"}
{"task_id": "Java/63", "generation": "class Solution {\n    public int fibfib(int n) {\n        // Handle base cases\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n\n        // Create an array to store computed values\n        int[] fibfib = new int[n + 1];\n        fibfib[0] = 0; // fibfib(0)\n        fibfib[1] = 0; // fibfib(1)\n        fibfib[2] = 1; // fibfib(2)\n\n        // Compute the values iteratively\n        for (int i = 3; i <= n; i++) {\n            fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n        }\n\n        // Return the n-th element\n        return fibfib[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fibfib(1)); // Output: 0\n        System.out.println(solution.fibfib(5)); // Output: 4\n        System.out.println(solution.fibfib(8)); // Output: 24\n    }\n}\n"}
{"task_id": "Java/37", "generation": "class Solution {\n    public List<Integer> sort_even(List<Integer> l) {\n        // Create a list to hold the even indexed values\n        List<Integer> evenValues = new ArrayList<>();\n        \n        // Extract even indexed values\n        for (int i = 0; i < l.size(); i += 2) {\n            evenValues.add(l.get(i));\n        }\n        \n        // Sort the even indexed values\n        Collections.sort(evenValues);\n        \n        // Create a new list to hold the result\n        List<Integer> result = new ArrayList<>(l); // Start with a copy of the original list\n        \n        // Place sorted even indexed values back into the result list\n        for (int i = 0; i < evenValues.size(); i++) {\n            result.set(i * 2, evenValues.get(i)); // Set sorted value at even index\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.sort_even(Arrays.asList(1, 2, 3))); // Output: [1, 2, 3]\n        System.out.println(sol.sort_even(Arrays.asList(5, 6, 3, 4))); // Output: [3, 6, 5, 4]\n    }\n}\n"}
{"task_id": "Java/159", "generation": "class Solution {\n    public List<Integer> eat(int number, int need, int remaining) {\n        // Calculate how many more carrots the rabbit can eat\n        int carrotsToEat = Math.min(need, remaining);\n        \n        // Total eaten carrots after the meal\n        int totalEaten = number + carrotsToEat;\n        \n        // Remaining carrots after the meal\n        int remainingCarrots = remaining - carrotsToEat;\n        \n        // Prepare the result as a list\n        List<Integer> result = new ArrayList<>();\n        result.add(totalEaten);\n        result.add(remainingCarrots);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.eat(5, 6, 10)); // Output: [11, 4]\n        System.out.println(solution.eat(4, 8, 9));  // Output: [12, 1]\n        System.out.println(solution.eat(1, 10, 10)); // Output: [11, 0]\n        System.out.println(solution.eat(2, 11, 5));  // Output: [7, 0]\n    }\n}\n"}
{"task_id": "Java/52", "generation": "class Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> below_threshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n    */\n    public boolean below_threshold(List<Integer> l, int t) {\n        for (int num : l) {\n            if (num >= t) {\n                return false; // Found a number that is not below the threshold\n            }\n        }\n        return true; // All numbers are below the threshold\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.below_threshold(Arrays.asList(1, 2, 4, 10), 100)); // true\n        System.out.println(solution.below_threshold(Arrays.asList(1, 20, 4, 10), 5)); // false\n    }\n}\n"}
{"task_id": "Java/137", "generation": "class Solution {\n    public Optional<Object> compare_one(Object a, Object b) {\n        Double numA = convertToNumber(a);\n        Double numB = convertToNumber(b);\n        \n        if (numA == null || numB == null) {\n            return Optional.empty();\n        }\n        \n        if (numA.equals(numB)) {\n            return Optional.empty();\n        }\n        \n        return numA > numB ? Optional.of(a) : Optional.of(b);\n    }\n    \n    private Double convertToNumber(Object obj) {\n        if (obj instanceof Number) {\n            return ((Number) obj).doubleValue();\n        } else if (obj instanceof String) {\n            String str = (String) obj;\n            str = str.replace(\",\", \".\"); // Normalize comma to dot\n            try {\n                return Double.parseDouble(str);\n            } catch (NumberFormatException e) {\n                return null; // Return null if the string cannot be parsed\n            }\n        }\n        return null; // Return null for unsupported types\n    }\n    \n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        \n        System.out.println(sol.compare_one(1, 2.5)); // Optional[2.5]\n        System.out.println(sol.compare_one(1, \"2,3\")); // Optional[2,3]\n        System.out.println(sol.compare_one(\"5,1\", \"6\")); // Optional[6]\n        System.out.println(sol.compare_one(\"1\", 1)); // Optional.empty\n    }\n}\n"}
{"task_id": "Java/154", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean cycpattern_check(String a, String b) {\n        // Check if b is longer than a\n        if (b.length() > a.length()) {\n            return false;\n        }\n        \n        // Create a new string that is b concatenated with itself\n        String b_rotations = b + b;\n        \n        // Check if b or any of its rotations is a substring of a\n        return b_rotations.contains(a);\n    }\n}\n"}
{"task_id": "Java/44", "generation": "class Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\n    >>> change_base(7, 2)\n    \"111\"\n    */\n    public String change_base(int x, int base) {\n        if (base < 2 || base >= 10) {\n            throw new IllegalArgumentException(\"Base must be between 2 and 9.\");\n        }\n        \n        if (x == 0) {\n            return \"0\"; // Handle the case for 0 explicitly\n        }\n        \n        StringBuilder result = new StringBuilder();\n        \n        while (x > 0) {\n            int remainder = x % base;\n            result.append(remainder);\n            x /= base;\n        }\n        \n        // The digits are in reverse order, so we need to reverse the StringBuilder\n        return result.reverse().toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.change_base(8, 3)); // Output: \"22\"\n        System.out.println(solution.change_base(8, 2)); // Output: \"1000\"\n        System.out.println(solution.change_base(7, 2)); // Output: \"111\"\n    }\n}\n"}
{"task_id": "Java/112", "generation": "class Solution {\n    public List<Object> reverse_delete(String s, String c) {\n        // Step 1: Create a set of characters from string c\n        Set<Character> charsToDelete = new HashSet<>();\n        for (char ch : c.toCharArray()) {\n            charsToDelete.add(ch);\n        }\n\n        // Step 2: Build the resulting string by excluding characters in charsToDelete\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!charsToDelete.contains(ch)) {\n                result.append(ch);\n            }\n        }\n\n        // Convert StringBuilder to String\n        String resultString = result.toString();\n\n        // Step 3: Check if the result string is a palindrome\n        boolean isPalindrome = resultString.equals(new StringBuilder(resultString).reverse().toString());\n\n        // Step 4: Return the result as a list\n        return Arrays.asList(resultString, isPalindrome);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.reverse_delete(\"abcde\", \"ae\")); // Output: [\"bcd\", false]\n        System.out.println(solution.reverse_delete(\"abcdef\", \"b\")); // Output: [\"acdef\", false]\n        System.out.println(solution.reverse_delete(\"abcdedcba\", \"ab\")); // Output: [\"cdedc\", true]\n    }\n}\n"}
{"task_id": "Java/87", "generation": "class Solution {\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n\n        // Iterate through each row\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            // Iterate through each element in the row\n            for (int j = 0; j < row.size(); j++) {\n                // Check if the current element is equal to x\n                if (row.get(j) == x) {\n                    // If found, add the coordinates to the result\n                    result.add(Arrays.asList(i, j));\n                }\n            }\n        }\n\n        // Sort the result first by row index (ascending) and then by column index (descending)\n        Collections.sort(result, new Comparator<List<Integer>>() {\n            public int compare(List<Integer> a, List<Integer> b) {\n                // First compare by row index\n                if (!a.get(0).equals(b.get(0))) {\n                    return a.get(0) - b.get(0);\n                }\n                // If row indices are the same, compare by column index (descending)\n                return b.get(1) - a.get(1);\n            }\n        });\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.get_row(Arrays.asList(\n            Arrays.asList(1, 2, 3, 4, 5, 6),\n            Arrays.asList(1, 2, 3, 4, 1, 6),\n            Arrays.asList(1, 2, 3, 4, 5, 1)\n        ), 1)); // Output: [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n\n        System.out.println(sol.get_row(Arrays.asList(), 1)); // Output: []\n\n        System.out.println(sol.get_row(Arrays.asList(Arrays.asList(), Arrays.asList(1), Arrays.asList(1, 2, 3)), 3)); // Output: [[2, 2]]\n    }\n}\n"}
{"task_id": "Java/113", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (int index = 0; index < lst.size(); index++) {\n            String string = lst.get(index);\n            int oddCount = 0;\n            for (char ch : string.toCharArray()) {\n                if ((ch - '0') % 2 != 0) { // Check if the digit is odd\n                    oddCount++;\n                }\n            }\n            result.add(\"the number of odd elements \" + oddCount + \"n the str\" + oddCount + \"ng \" + oddCount + \" of the \" + oddCount + \"nput.\");\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/29", "generation": "class Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix(List.of(), \"a\")\n    []\n    >>> filter_by_prefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n    */\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.filter_by_prefix(List.of(), \"a\")); // []\n        System.out.println(solution.filter_by_prefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")); // [\"abc\", \"array\"]\n    }\n}\n"}
{"task_id": "Java/6", "generation": "class Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parse_nested_parens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        String[] groups = paren_string.split(\" \"); // Split the input string by spaces\n\n        for (String group : groups) {\n            int maxDepth = 0; // To track the maximum depth\n            int currentDepth = 0; // To track the current depth\n\n            for (char ch : group.toCharArray()) {\n                if (ch == '(') {\n                    currentDepth++; // Increase depth for opening parenthesis\n                    maxDepth = Math.max(maxDepth, currentDepth); // Update max depth\n                } else if (ch == ')') {\n                    currentDepth--; // Decrease depth for closing parenthesis\n                }\n            }\n\n            result.add(maxDepth); // Add the maximum depth for the current group to the result\n        }\n\n        return result; // Return the list of maximum depths\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.parse_nested_parens(\"(()()) ((())) () ((())()())\")); // Output: [2, 3, 1, 3]\n    }\n}\n"}
{"task_id": "Java/46", "generation": "class Solution {\n    public int fib4(int n) {\n        // Handle base cases\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n == 3) return 0;\n\n        // Create an array to store the values of fib4\n        int[] fib4 = new int[n + 1];\n        fib4[0] = 0; // fib4(0)\n        fib4[1] = 0; // fib4(1)\n        fib4[2] = 2; // fib4(2)\n        fib4[3] = 0; // fib4(3)\n\n        // Fill the array using the defined relation\n        for (int i = 4; i <= n; i++) {\n            fib4[i] = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i - 4];\n        }\n\n        // Return the n-th element\n        return fib4[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fib4(5)); // Output: 4\n        System.out.println(solution.fib4(6)); // Output: 8\n        System.out.println(solution.fib4(7)); // Output: 14\n    }\n}\n"}
{"task_id": "Java/16", "generation": "class Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    */\n    public int count_distinct_characters(String string) {\n        // Create a HashSet to store distinct characters\n        HashSet<Character> distinctCharacters = new HashSet<>();\n        \n        // Convert the string to lowercase to ignore case\n        string = string.toLowerCase();\n        \n        // Iterate through each character in the string\n        for (char c : string.toCharArray()) {\n            // Add the character to the HashSet\n            distinctCharacters.add(c);\n        }\n        \n        // The size of the HashSet is the number of distinct characters\n        return distinctCharacters.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.count_distinct_characters(\"xyzXYZ\")); // Output: 3\n        System.out.println(solution.count_distinct_characters(\"Jerry\"));  // Output: 4\n    }\n}\n"}
{"task_id": "Java/99", "generation": "class Solution {\n    public int closest_integer(String value) {\n        // Parse the string to a double\n        double number = Double.parseDouble(value);\n        \n        // Get the floor and ceiling of the number\n        int lower = (int) Math.floor(number);\n        int upper = (int) Math.ceil(number);\n        \n        // Check the distance to the lower and upper integers\n        double distanceToLower = Math.abs(number - lower);\n        double distanceToUpper = Math.abs(number - upper);\n        \n        // If the distances are equal, round away from zero\n        if (distanceToLower == distanceToUpper) {\n            if (number > 0) {\n                return upper; // Round up for positive numbers\n            } else {\n                return lower; // Round down for negative numbers\n            }\n        }\n        \n        // Return the closest integer\n        return distanceToLower < distanceToUpper ? lower : upper;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.closest_integer(\"10\"));     // Output: 10\n        System.out.println(solution.closest_integer(\"15.3\"));   // Output: 15\n        System.out.println(solution.closest_integer(\"14.5\"));   // Output: 15\n        System.out.println(solution.closest_integer(\"-14.5\"));  // Output: -15\n        System.out.println(solution.closest_integer(\"0.5\"));    // Output: 1\n        System.out.println(solution.closest_integer(\"-0.5\"));   // Output: -1\n    }\n}\n"}
{"task_id": "Java/122", "generation": "class Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int add_elements(List<Integer> arr, int k) {\n        int sum = 0;\n\n        // Iterate through the first k elements\n        for (int i = 0; i < k; i++) {\n            int num = arr.get(i);\n            // Check if the number has at most two digits\n            if (num >= -99 && num <= 99) {\n                sum += num;\n            }\n        }\n\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> arr = Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9);\n        int k = 4;\n        int result = solution.add_elements(arr, k);\n        System.out.println(result); // Output: 24\n    }\n}\n"}
{"task_id": "Java/53", "generation": "class Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    */\n    public int add(int x, int y) {\n        return x + y;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(\"add(2, 3) = \" + solution.add(2, 3)); // Output: 5\n        System.out.println(\"add(5, 7) = \" + solution.add(5, 7)); // Output: 12\n    }\n}\n"}
{"task_id": "Java/162", "generation": "class Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text == null || text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n\n        // Convert the byte array to a hexadecimal string\n        StringBuilder hexString = new StringBuilder();\n        for (byte b : digest) {\n            String hex = Integer.toHexString(0xff & b);\n            if (hex.length() == 1) {\n                hexString.append('0'); // Append leading zero if needed\n            }\n            hexString.append(hex);\n        }\n\n        return Optional.of(hexString.toString());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        try {\n            Optional<String> hash = solution.string_to_md5(\"Hello world\");\n            hash.ifPresent(System.out::println); // Should print: 3e25960a79dbc69b674cd4ec67a72c62\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n    }\n}\n"}
{"task_id": "Java/58", "generation": "class Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        // Convert lists to sets to remove duplicates\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        \n        // Retain only the common elements\n        set1.retainAll(set2);\n        \n        // Convert the set back to a list\n        List<Integer> commonList = new ArrayList<>(set1);\n        \n        // Sort the list\n        Collections.sort(commonList);\n        \n        return commonList;\n    }\n}\n"}
{"task_id": "Java/73", "generation": "class Solution {\n    public int smallest_change(List<Integer> arr) {\n        int left = 0;\n        int right = arr.size() - 1;\n        int changes = 0;\n\n        while (left < right) {\n            if (!arr.get(left).equals(arr.get(right))) {\n                changes++; // We need to change one of the elements\n            }\n            left++;\n            right--;\n        }\n\n        return changes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.smallest_change(Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6))); // Output: 4\n        System.out.println(solution.smallest_change(Arrays.asList(1, 2, 3, 4, 3, 2, 2))); // Output: 1\n        System.out.println(solution.smallest_change(Arrays.asList(1, 2, 3, 2, 1))); // Output: 0\n    }\n}\n"}
{"task_id": "Java/150", "generation": "class Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    */\n    public int x_or_y(int n, int x, int y) {\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    // Helper method to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false; // 0 and 1 are not prime numbers\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false; // num is divisible by i, hence not prime\n            }\n        }\n        return true; // num is prime\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.x_or_y(7, 34, 12)); // Output: 34\n        System.out.println(solution.x_or_y(15, 8, 5)); // Output: 5\n    }\n}\n"}
{"task_id": "Java/54", "generation": "class Solution {\n    /**\n    Check if two words have the same kind of characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    */\n    public boolean same_chars(String s0, String s1) {\n        Set<Character> set1 = new HashSet<>();\n        Set<Character> set2 = new HashSet<>();\n        \n        // Add all unique characters from the first string\n        for (char c : s0.toCharArray()) {\n            set1.add(c);\n        }\n        \n        // Add all unique characters from the second string\n        for (char c : s1.toCharArray()) {\n            set2.add(c);\n        }\n        \n        // Compare the two sets\n        return set1.equals(set2);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // true\n        System.out.println(solution.same_chars(\"abcd\", \"dddddddabc\")); // true\n        System.out.println(solution.same_chars(\"dddddddabc\", \"abcd\")); // true\n        System.out.println(solution.same_chars(\"eabcd\", \"dddddddabc\")); // false\n        System.out.println(solution.same_chars(\"abcd\", \"dddddddabce\")); // false\n        System.out.println(solution.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // false\n    }\n}\n"}
{"task_id": "Java/108", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int count_nums(List<Integer> arr) {\n        int count = 0;\n\n        for (int num : arr) {\n            if (digitSum(num) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private int digitSum(int n) {\n        int sum = 0;\n        String numStr = Integer.toString(Math.abs(n));\n        \n        // If the number is negative, we need to subtract the first digit\n        if (n < 0) {\n            sum -= Character.getNumericValue(numStr.charAt(0));\n        }\n        \n        // Sum the digits\n        for (char digit : numStr.toCharArray()) {\n            sum += Character.getNumericValue(digit);\n        }\n        \n        return sum;\n    }\n}\n"}
{"task_id": "Java/20", "generation": "class Solution {\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        // Step 1: Sort the list\n        Collections.sort(numbers);\n        \n        // Initialize variables to track the closest pair\n        double minDiff = Double.MAX_VALUE;\n        List<Double> closestPair = new ArrayList<>();\n        \n        // Step 2: Find the closest pair\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double num1 = numbers.get(i);\n            double num2 = numbers.get(i + 1);\n            double diff = num2 - num1; // Since the list is sorted, num2 >= num1\n            \n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair.clear();\n                closestPair.add(num1);\n                closestPair.add(num2);\n            }\n        }\n        \n        // Step 3: Return the closest pair\n        return closestPair;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))); // [2.0, 2.2]\n        System.out.println(solution.find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))); // [2.0, 2.0]\n    }\n}\n"}
{"task_id": "Java/90", "generation": "class Solution {\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        // Use a TreeSet to store unique elements in sorted order\n        TreeSet<Integer> uniqueElements = new TreeSet<>(lst);\n        \n        // Check if there are at least two unique elements\n        if (uniqueElements.size() < 2) {\n            return Optional.empty();\n        }\n        \n        // Get the second smallest element\n        Iterator<Integer> iterator = uniqueElements.iterator();\n        iterator.next(); // Skip the smallest element\n        return Optional.of(iterator.next()); // Return the second smallest element\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.next_smallest(Arrays.asList(1, 2, 3, 4, 5))); // Optional[2]\n        System.out.println(solution.next_smallest(Arrays.asList(5, 1, 4, 3, 2))); // Optional[2]\n        System.out.println(solution.next_smallest(Arrays.asList())); // Optional.empty\n        System.out.println(solution.next_smallest(Arrays.asList(1, 1))); // Optional.empty\n    }\n}\n"}
{"task_id": "Java/131", "generation": "class Solution {\n    public int digits(int n) {\n        int product = 1;\n        boolean hasOddDigit = false;\n\n        while (n > 0) {\n            int digit = n % 10; // Get the last digit\n            if (digit % 2 != 0) { // Check if the digit is odd\n                product *= digit; // Multiply to the product\n                hasOddDigit = true; // Mark that we found an odd digit\n            }\n            n /= 10; // Remove the last digit\n        }\n\n        return hasOddDigit ? product : 0; // Return product or 0 if no odd digits\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.digits(1));    // Output: 1\n        System.out.println(solution.digits(4));    // Output: 0\n        System.out.println(solution.digits(235));  // Output: 15\n        System.out.println(solution.digits(2468)); // Output: 0\n        System.out.println(solution.digits(135));  // Output: 15\n    }\n}\n"}
{"task_id": "Java/160", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        int result = operand.get(0); // Initialize result with the first operand\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int nextOperand = operand.get(i + 1); // Get the next operand\n            \n            switch (op) {\n                case \"+\":\n                    result += nextOperand;\n                    break;\n                case \"-\":\n                    result -= nextOperand;\n                    break;\n                case \"*\":\n                    result *= nextOperand;\n                    break;\n                case \"/\":\n                    result /= nextOperand; // Floor division is handled by integer division in Java\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, nextOperand); // Exponentiation\n                    break;\n            }\n        }\n        return result; // Return the final evaluated result\n    }\n}\n"}
{"task_id": "Java/17", "generation": "class Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    note last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quarter note, lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parse_music(String string) {\n        // Create a list to hold the beat values\n        List<Integer> beats = new ArrayList<>();\n        \n        // Split the input string by spaces to get individual notes\n        String[] notes = string.split(\" \");\n        \n        // Iterate through each note and determine its beat value\n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    beats.add(4); // Whole note\n                    break;\n                case \"o|\":\n                    beats.add(2); // Half note\n                    break;\n                case \".|\":\n                    beats.add(1); // Quarter note\n                    break;\n                default:\n                    // If the note is not recognized, we can ignore it or handle it as needed\n                    break;\n            }\n        }\n        \n        return beats; // Return the list of beats\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.parse_music(\"o o| .| o| o| .| .| .| .| o o\")); // Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    }\n}\n"}
{"task_id": "Java/98", "generation": "class Solution {\n    public int count_upper(String s) {\n        int count = 0;\n        // Define a set of uppercase vowels\n        Set<Character> uppercaseVowels = new HashSet<>(Arrays.asList('A', 'E', 'I', 'O', 'U'));\n        \n        // Loop through the string, checking only even indices\n        for (int i = 0; i < s.length(); i += 2) {\n            char currentChar = s.charAt(i);\n            // Check if the character is an uppercase vowel\n            if (uppercaseVowels.contains(currentChar)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/65", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String circular_shift(int x, int shift) {\n        String xStr = Integer.toString(x);\n        int n = xStr.length();\n        \n        // If shift is greater than the number of digits, return the reversed string\n        if (shift > n) {\n            return new StringBuilder(xStr).reverse().toString();\n        }\n        \n        // Perform the circular shift\n        shift = shift % n; // Handle cases where shift >= n\n        String shiftedStr = xStr.substring(n - shift) + xStr.substring(0, n - shift);\n        \n        return shiftedStr;\n    }\n}\n"}
{"task_id": "Java/8", "generation": "class Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product(List.of())\n    [0, 1]\n    >>> sum_product(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n    */\n    public List<Integer> sum_product(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n\n        // If the list is empty, return [0, 1]\n        if (numbers.isEmpty()) {\n            return Arrays.asList(sum, product);\n        }\n\n        // Calculate sum and product\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n\n        return Arrays.asList(sum, product);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.sum_product(List.of())); // Output: [0, 1]\n        System.out.println(solution.sum_product(Arrays.asList(1, 2, 3, 4))); // Output: [10, 24]\n        System.out.println(solution.sum_product(Arrays.asList(-1, -2, -3))); // Output: [-6, -6]\n        System.out.println(solution.sum_product(Arrays.asList(0, 1, 2))); // Output: [3, 0]\n    }\n}\n"}
{"task_id": "Java/49", "generation": "class Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    */\n    public int modp(int n, int p) {\n        if (p == 1) {\n            return 0; // Since any number mod 1 is 0\n        }\n        long result = 1; // Use long to prevent overflow\n        long base = 2; // We are calculating 2^n\n        \n        // Exponentiation by squaring\n        while (n > 0) {\n            if ((n & 1) == 1) { // If n is odd\n                result = (result * base) % p;\n            }\n            base = (base * base) % p; // Square the base\n            n >>= 1; // Divide n by 2\n        }\n        \n        return (int) result; // Cast back to int before returning\n    }\n    \n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.modp(3, 5)); // Output: 3\n        System.out.println(sol.modp(1101, 101)); // Output: 2\n        System.out.println(sol.modp(0, 101)); // Output: 1\n        System.out.println(sol.modp(3, 11)); // Output: 8\n        System.out.println(sol.modp(100, 101)); // Output: 1\n    }\n}\n"}
{"task_id": "Java/153", "generation": "class Solution {\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        String strongestExtension = \"\";\n        int maxStrength = Integer.MIN_VALUE;\n\n        for (String extension : extensions) {\n            int capCount = 0;\n            int smCount = 0;\n\n            // Calculate CAP and SM\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smCount++;\n                }\n            }\n\n            // Calculate strength\n            int strength = capCount - smCount;\n\n            // Update strongest extension if this one is stronger\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        // Return the result in the required format\n        return class_name + \".\" + strongestExtension;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.Strongest_Extension(\"Slices\", Arrays.asList(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"))); // Output: \"Slices.SErviNGSliCes\"\n        System.out.println(solution.Strongest_Extension(\"my_class\", Arrays.asList(\"AA\", \"Be\", \"CC\"))); // Output: \"my_class.AA\"\n    }\n}\n"}
{"task_id": "Java/96", "generation": "class Solution {\n    public List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<>();\n        \n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        \n        return primes;\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) return false; // 0 and 1 are not prime numbers\n        if (num == 2) return true; // 2 is the only even prime number\n        if (num % 2 == 0) return false; // eliminate even numbers greater than 2\n        \n        for (int i = 3; i <= Math.sqrt(num); i += 2) {\n            if (num % i == 0) {\n                return false; // found a divisor, not prime\n            }\n        }\n        \n        return true; // no divisors found, it's prime\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.count_up_to(5));  // Output: [2, 3]\n        System.out.println(solution.count_up_to(11)); // Output: [2, 3, 5, 7]\n        System.out.println(solution.count_up_to(0));  // Output: []\n        System.out.println(solution.count_up_to(20)); // Output: [2, 3, 5, 7, 11, 13, 17, 19]\n        System.out.println(solution.count_up_to(1));  // Output: []\n        System.out.println(solution.count_up_to(18)); // Output: [2, 3, 5, 7, 11, 13, 17]\n    }\n}\n"}
{"task_id": "Java/64", "generation": "class Solution {\n    public int vowels_count(String s) {\n        // Convert the string to lower case to handle case insensitivity\n        s = s.toLowerCase();\n        int count = 0;\n\n        // Check each character in the string\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            // Check if the character is a vowel\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n            // Check if the character is 'y' and it's the last character\n            if (c == 'y' && i == s.length() - 1) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.vowels_count(\"abcde\")); // Output: 2\n        System.out.println(sol.vowels_count(\"ACEDY\")); // Output: 3\n        System.out.println(sol.vowels_count(\"hello\")); // Output: 2\n        System.out.println(sol.vowels_count(\"sky\")); // Output: 1\n        System.out.println(sol.vowels_count(\"rhythm\")); // Output: 0\n    }\n}\n"}
{"task_id": "Java/102", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int choose_num(int x, int y) {\n        if (x > y) {\n            return -1; // No valid range\n        }\n        // Find the largest even number in the range [x, y]\n        if (y % 2 == 0) {\n            return y; // y is even\n        } else {\n            return (y - 1 >= x) ? (y - 1) : -1; // y is odd, check y-1\n        }\n    }\n}\n"}
{"task_id": "Java/88", "generation": "class Solution {\n    public List<Integer> sort_array(List<Integer> array) {\n        // Step 1: Handle empty list\n        if (array.isEmpty()) {\n            return new ArrayList<>();\n        }\n        \n        // Step 2: Handle single element list\n        if (array.size() == 1) {\n            return new ArrayList<>(array);\n        }\n        \n        // Step 3: Calculate the sum of the first and last elements\n        int first = array.get(0);\n        int last = array.get(array.size() - 1);\n        int sum = first + last;\n        \n        // Step 4: Create a copy of the original list to sort\n        List<Integer> sortedArray = new ArrayList<>(array);\n        \n        // Step 5: Sort based on the sum's parity\n        if (sum % 2 == 0) {\n            // Even sum: sort in descending order\n            Collections.sort(sortedArray, Collections.reverseOrder());\n        } else {\n            // Odd sum: sort in ascending order\n            Collections.sort(sortedArray);\n        }\n        \n        // Step 6: Return the sorted list\n        return sortedArray;\n    }\n}\n"}
{"task_id": "Java/146", "generation": "class Solution {\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n\n        for (int num : nums) {\n            // Check if the number is greater than 10\n            if (num > 10) {\n                // Get the absolute value to handle negative numbers\n                int absNum = Math.abs(num);\n                \n                // Convert the number to a string to easily access digits\n                String numStr = Integer.toString(absNum);\n                \n                // Get the first and last digits\n                char firstDigit = numStr.charAt(0);\n                char lastDigit = numStr.charAt(numStr.length() - 1);\n                \n                // Check if both first and last digits are odd\n                if (isOdd(firstDigit) && isOdd(lastDigit)) {\n                    count++;\n                }\n            }\n        }\n        \n        return count;\n    }\n\n    // Helper method to check if a character representing a digit is odd\n    private boolean isOdd(char digit) {\n        return (digit == '1' || digit == '3' || digit == '5' || digit == '7' || digit == '9');\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.specialFilter(Arrays.asList(15, -73, 14, -15))); // Output: 1\n        System.out.println(solution.specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109))); // Output: 2\n    }\n}\n"}
{"task_id": "Java/30", "generation": "class Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> get_positive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> get_positive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n    */\n    public List<Integer> get_positive(List<Integer> l) {\n        return l.stream()\n                .filter(num -> num > 0) // Filter only positive numbers\n                .collect(Collectors.toList()); // Collect the results into a list\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.get_positive(Arrays.asList(-1, 2, -4, 5, 6))); // Output: [2, 5, 6]\n        System.out.println(solution.get_positive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))); // Output: [5, 3, 2, 3, 9, 123, 1]\n    }\n}\n"}
{"task_id": "Java/97", "generation": "class Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        // Get the unit digits of a and b\n        int unitDigitA = Math.abs(a) % 10; // Use abs to handle negative numbers\n        int unitDigitB = Math.abs(b) % 10; // Use abs to handle negative numbers\n        \n        // Calculate the product of the unit digits\n        return unitDigitA * unitDigitB;\n    }\n}\n"}
{"task_id": "Java/95", "generation": "class Solution {\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        // Check if the map is empty\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        boolean allLower = true;\n        boolean allUpper = true;\n\n        for (Object key : dict.keySet()) {\n            // Check if the key is a String\n            if (!(key instanceof String)) {\n                return false;\n            }\n\n            String strKey = (String) key;\n\n            // Check if the key is lower case or upper case\n            if (!strKey.equals(strKey.toLowerCase())) {\n                allLower = false;\n            }\n            if (!strKey.equals(strKey.toUpperCase())) {\n                allUpper = false;\n            }\n        }\n\n        // Return true if all keys are either all lower case or all upper case\n        return allLower || allUpper;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.check_dict_case(Map.of(\"a\", \"apple\", \"b\", \"banana\"))); // should return true\n        System.out.println(solution.check_dict_case(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"banana\"))); // should return false\n        System.out.println(solution.check_dict_case(Map.of(8, \"banana\", \"a\", \"apple\"))); // should return false\n        System.out.println(solution.check_dict_case(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\"))); // should return false\n        System.out.println(solution.check_dict_case(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))); // should return true\n    }\n}\n"}
{"task_id": "Java/10", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n     */\n    public String make_palindrome(String string) {\npublic String make_palindrome(String string) {\n    int n = string.length();\n    \n    // Find the longest palindromic suffix\n    int longestPalindromicSuffixLength = 0;\n    for (int i = 0; i < n; i++) {\n        if (isPalindrome(string.substring(i))) {\n            longestPalindromicSuffixLength = n - i;\n            break;\n        }\n    }\n    \n    // The prefix that needs to be reversed and appended\n    String prefixToAppend = string.substring(0, n - longestPalindromicSuffixLength);\n    \n    // Create the palindrome by appending the reverse of the prefix\n    StringBuilder palindrome = new StringBuilder(string);\n    palindrome.append(new StringBuilder(prefixToAppend).reverse());\n    \n    return palindrome.toString();\n}\n"}
{"task_id": "Java/109", "generation": "class Solution {\n    public boolean move_one_ball(List<Integer> arr) {\n        // Edge case: if the array is empty, return true\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        int n = arr.size();\n        int breakCount = 0;\n\n        // Traverse the array to count the number of breaks\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i) > arr.get((i + 1) % n)) {\n                breakCount++;\n            }\n        }\n\n        // If there are 0 or 1 breaks, we can sort the array with right shifts\n        return breakCount <= 1;\n    }\n}\n"}
{"task_id": "Java/4", "generation": "class Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n    */\n    public double mean_absolute_deviation(List<Double> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            throw new IllegalArgumentException(\"The list of numbers cannot be null or empty.\");\n        }\n\n        // Step 1: Calculate the mean\n        double sum = 0.0;\n        for (double number : numbers) {\n            sum += number;\n        }\n        double mean = sum / numbers.size();\n\n        // Step 2: Calculate the absolute differences from the mean\n        double madSum = 0.0;\n        for (double number : numbers) {\n            madSum += Math.abs(number - mean);\n        }\n\n        // Step 3: Calculate the mean of the absolute differences\n        double mad = madSum / numbers.size();\n        return mad;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0);\n        double result = solution.mean_absolute_deviation(numbers);\n        System.out.println(\"Mean Absolute Deviation: \" + result); // Output: 1.0\n    }\n}\n"}
{"task_id": "Java/77", "generation": "class Solution {\n    public boolean iscube(int a) {\n        if (a < 0) {\n            a = -a;  // Take the absolute value for negative numbers\n        }\n        int cubeRoot = (int) Math.round(Math.pow(a, 1.0 / 3.0));  // Calculate the cube root and round it\n        return cubeRoot * cubeRoot * cubeRoot == a;  // Check if the cube of the rounded root equals the original number\n    }\n}\n"}
{"task_id": "Java/57", "generation": "class Solution {\n    /**\n    Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n    */\n    public boolean monotonic(List<Integer> l) {\n        if (l == null || l.size() < 2) {\n            return true; // A list with 0 or 1 element is considered monotonic\n        }\n\n        boolean increasing = true;\n        boolean decreasing = true;\n\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false; // Found an increasing pair\n            } else if (l.get(i) < l.get(i - 1)) {\n                increasing = false; // Found a decreasing pair\n            }\n        }\n\n        return increasing || decreasing; // Return true if either condition holds\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.monotonic(Arrays.asList(1, 2, 4, 20))); // true\n        System.out.println(solution.monotonic(Arrays.asList(1, 20, 4, 10))); // false\n        System.out.println(solution.monotonic(Arrays.asList(4, 1, 0, -10))); // true\n    }\n}\n"}
{"task_id": "Java/142", "generation": "class Solution {\n    public int sum_squares(List<Integer> lst) {\n        int sum = 0; // Initialize sum to 0\n        \n        for (int i = 0; i < lst.size(); i++) {\n            int value = lst.get(i); // Get the current value\n            \n            // Check if the index is a multiple of 3\n            if (i % 3 == 0) {\n                value = value * value; // Square the value\n            }\n            // Check if the index is a multiple of 4 and not a multiple of 3\n            else if (i % 4 == 0) {\n                value = value * value * value; // Cube the value\n            }\n            // Add the modified value to the sum\n            sum += value;\n        }\n        \n        return sum; // Return the final sum\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.sum_squares(Arrays.asList(1, 2, 3))); // Output: 6\n        System.out.println(solution.sum_squares(Arrays.asList())); // Output: 0\n        System.out.println(solution.sum_squares(Arrays.asList(-1, -5, 2, -1, -5))); // Output: -126\n    }\n}\n"}
{"task_id": "Java/121", "generation": "class Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==> 0\n    */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n\n        // Iterate through the list\n        for (int i = 0; i < lst.size(); i++) {\n            // Check if the index is even\n            if (i % 2 == 0) {\n                // Check if the element is odd\n                if (lst.get(i) % 2 != 0) {\n                    sum += lst.get(i); // Add to sum if both conditions are met\n                }\n            }\n        }\n\n        return sum; // Return the final sum\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.solution(Arrays.asList(5, 8, 7, 1))); // Output: 12\n        System.out.println(sol.solution(Arrays.asList(3, 3, 3, 3, 3))); // Output: 9\n        System.out.println(sol.solution(Arrays.asList(30, 13, 24, 321))); // Output: 0\n    }\n}\n"}
{"task_id": "Java/23", "generation": "class Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n    */\n    public int strlen(String string) {\n        // Use the length() method of the String class to get the length\n        return string.length();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.strlen(\"\"));      // Output: 0\n        System.out.println(solution.strlen(\"abc\"));   // Output: 3\n        System.out.println(solution.strlen(\"Hello\")); // Output: 5\n    }\n}\n"}
{"task_id": "Java/80", "generation": "class Solution {\n    public boolean is_happy(String s) {\n        // Check if the length of the string is at least 3\n        if (s.length() < 3) {\n            return false;\n        }\n\n        // Iterate through the string and check every three consecutive characters\n        for (int i = 0; i <= s.length() - 3; i++) {\n            // Get the three consecutive characters\n            char first = s.charAt(i);\n            char second = s.charAt(i + 1);\n            char third = s.charAt(i + 2);\n\n            // Check if all three characters are distinct\n            if (first == second || first == third || second == third) {\n                return false; // If any two are the same, return false\n            }\n        }\n\n        // If we pass through all checks, the string is happy\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.is_happy(\"a\")); // false\n        System.out.println(solution.is_happy(\"aa\")); // false\n        System.out.println(solution.is_happy(\"abcd\")); // true\n        System.out.println(solution.is_happy(\"aabb\")); // false\n        System.out.println(solution.is_happy(\"adb\")); // true\n        System.out.println(solution.is_happy(\"xyy\")); // false\n    }\n}\n"}
{"task_id": "Java/132", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean is_nested(String string) {\n        Stack<Character> stack = new Stack<>();\n        boolean nested = false;\n\n        for (char ch : string.toCharArray()) {\n            if (ch == '[') {\n                stack.push(ch);\n                if (stack.size() > 1) {  // More than one '[' means it's nested\n                    nested = true;\n                }\n            } else if (ch == ']') {\n                if (!stack.isEmpty()) {\n                    stack.pop();\n                } else {\n                    return false;  // Unmatched closing bracket\n                }\n            }\n        }\n\n        return nested && stack.isEmpty();  // Must be nested and all brackets must be matched\n    }\n}\n"}
{"task_id": "Java/66", "generation": "class Solution {\n    public int digitSum(String s) {\n        int sum = 0; // Initialize sum to 0\n        \n        // Iterate through each character in the string\n        for (char c : s.toCharArray()) {\n            // Check if the character is an uppercase letter\n            if (c >= 'A' && c <= 'Z') {\n                sum += (int) c; // Add the ASCII value of the uppercase letter\n            }\n        }\n        \n        return sum; // Return the final sum\n    }\n\n    // Example usage\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.digitSum(\"\")); // Output: 0\n        System.out.println(solution.digitSum(\"abAB\")); // Output: 131\n        System.out.println(solution.digitSum(\"abcCd\")); // Output: 67\n        System.out.println(solution.digitSum(\"helloE\")); // Output: 69\n        System.out.println(solution.digitSum(\"woArBld\")); // Output: 131\n        System.out.println(solution.digitSum(\"aAaaaXa\")); // Output: 153\n    }\n}\n"}
{"task_id": "Java/14", "generation": "class Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    */\n    public List<String> all_prefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        \n        // Iterate through the string and collect prefixes\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        \n        return prefixes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.all_prefixes(\"abc\")); // Output: [\"a\", \"ab\", \"abc\"]\n    }\n}\n"}
{"task_id": "Java/25", "generation": "class Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        \n        // Check for number of 2s that divide n\n        while (n % 2 == 0) {\n            factors.add(2);\n            n /= 2;\n        }\n        \n        // n must be odd at this point, so we can skip even numbers\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            // While i divides n, add i and divide n\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        \n        // This condition is to check if n is a prime number greater than 2\n        if (n > 2) {\n            factors.add(n);\n        }\n        \n        return factors;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.factorize(8));   // Output: [2, 2, 2]\n        System.out.println(solution.factorize(25));  // Output: [5, 5]\n        System.out.println(solution.factorize(70));  // Output: [2, 5, 7]\n    }\n}\n"}
{"task_id": "Java/107", "generation": "class Solution {\n    public List<Integer> even_odd_palindrome(int n) {\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        // Create a list to return the counts\n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n\n    // Helper method to check if a number is a palindrome\n    private boolean isPalindrome(int num) {\n        int original = num;\n        int reversed = 0;\n\n        while (num > 0) {\n            int digit = num % 10;\n            reversed = reversed * 10 + digit;\n            num /= 10;\n        }\n\n        return original == reversed;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.even_odd_palindrome(3));  // Output: [1, 2]\n        System.out.println(solution.even_odd_palindrome(12)); // Output: [4, 6]\n    }\n}\n"}
{"task_id": "Java/83", "generation": "class Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    */\n    public int starts_one_ends(int n) {\n        if (n < 1) {\n            return 0; // Invalid case for n\n        }\n        \n        // Count of n-digit numbers starting with '1'\n        int startWithOne = (int) Math.pow(10, n - 1);\n        \n        // Count of n-digit numbers ending with '1'\n        int endWithOne = 9 * (int) Math.pow(10, n - 2);\n        \n        // Count of n-digit numbers starting and ending with '1'\n        int startAndEndWithOne = (int) Math.pow(10, n - 2);\n        \n        // Total count using inclusion-exclusion principle\n        int totalCount = startWithOne + endWithOne - startAndEndWithOne;\n        \n        return totalCount;\n    }\n}\n"}
{"task_id": "Java/32", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> find_zero(Arrays.asList(1.0, 2.0)) // f(x) = 1 + 2x\n    -0.5\n    >>> find_zero(Arrays.asList(-6.0, 11.0, -6.0, 1.0)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double find_zero(List<Double> xs) {\n        double x = 0.0;  // Initial guess\n        for (int iteration = 0; iteration < 100; iteration++) {  // Iterate a fixed number of times\n            double fx = poly(xs, x);\n            // Calculate the derivative\n            double dfx = 0.0;\n            for (int i = 1; i < xs.size(); i++) {\n                dfx += xs.get(i) * i * Math.pow(x, i - 1);\n            }\n            if (dfx == 0) {  // Avoid division by zero\n                break;\n            }\n            x -= fx / dfx;  // Update x using Newton's method\n        }\n        return x;\n    }\n}\n"}
{"task_id": "Java/85", "generation": "class Solution {\n    /**\n    Given a non-empty list of integers lst. Add the even elements that are at odd indices.\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n    */\n    public int add(List<Integer> lst) {\n        int sum = 0; // Initialize sum to 0\n\n        // Iterate through the list\n        for (int i = 0; i < lst.size(); i++) {\n            // Check if the index is odd and the element is even\n            if (i % 2 != 0 && lst.get(i) % 2 == 0) {\n                sum += lst.get(i); // Add the element to the sum\n            }\n        }\n\n        return sum; // Return the final sum\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.add(Arrays.asList(4, 2, 6, 7))); // Output: 2\n        System.out.println(solution.add(Arrays.asList(1, 2, 3, 4, 5, 6))); // Output: 0\n        System.out.println(solution.add(Arrays.asList(10, 1, 2, 3, 4, 5, 6))); // Output: 2\n    }\n}\n"}
{"task_id": "Java/156", "generation": "class Solution {\n    public String int_to_mini_roman(int number) {\n        // Define the mapping of integers to Roman numerals\n        String[] romanNumerals = {\n            \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"\n        };\n        int[] values = {\n            1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        };\n\n        StringBuilder result = new StringBuilder();\n\n        // Loop through the values and build the Roman numeral\n        for (int i = 0; i < values.length; i++) {\n            while (number >= values[i]) {\n                result.append(romanNumerals[i]);\n                number -= values[i];\n            }\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.int_to_mini_roman(19));   // Output: \"xix\"\n        System.out.println(solution.int_to_mini_roman(152));  // Output: \"clii\"\n        System.out.println(solution.int_to_mini_roman(426));  // Output: \"cdxxvi\"\n    }\n}\n"}
{"task_id": "Java/75", "generation": "class Solution {\n    // Function to check if a number is the product of three primes\n    public boolean is_multiply_prime(int a) {\n        // Generate all prime numbers less than 100\n        List<Integer> primes = generatePrimesLessThan100();\n        \n        // Check all combinations of three primes\n        for (int i = 0; i < primes.size(); i++) {\n            for (int j = i; j < primes.size(); j++) {\n                for (int k = j; k < primes.size(); k++) {\n                    int product = primes.get(i) * primes.get(j) * primes.get(k);\n                    if (product == a) {\n                        return true; // Found a combination that multiplies to 'a'\n                    }\n                }\n            }\n        }\n        return false; // No combination found\n    }\n\n    // Helper function to generate prime numbers less than 100\n    private List<Integer> generatePrimesLessThan100() {\n        List<Integer> primes = new ArrayList<>();\n        boolean[] isPrime = new boolean[100];\n        Arrays.fill(isPrime, true);\n        \n        // 0 and 1 are not prime numbers\n        isPrime[0] = isPrime[1] = false;\n\n        for (int i = 2; i < 100; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n                for (int j = i * 2; j < 100; j += i) {\n                    isPrime[j] = false; // Mark multiples of i as non-prime\n                }\n            }\n        }\n        return primes;\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.is_multiply_prime(30)); // true\n        System.out.println(solution.is_multiply_prime(60)); // true (2 * 3 * 10, but 10 is not prime)\n        System.out.println(solution.is_multiply_prime(42)); // false\n        System.out.println(solution.is_multiply_prime(105)); // true (3 * 5 * 7)\n    }\n}\n"}
{"task_id": "Java/157", "generation": "class Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == true\n    right_angle_triangle(1, 2, 3) == false\n    */\n    public boolean right_angle_triangle(int a, int b, int c) {\n        // Sort the sides to ensure we can identify the longest side\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        \n        // Check the Pythagorean theorem\n        return (sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.right_angle_triangle(3, 4, 5)); // true\n        System.out.println(solution.right_angle_triangle(1, 2, 3)); // false\n        System.out.println(solution.right_angle_triangle(5, 12, 13)); // true\n        System.out.println(solution.right_angle_triangle(8, 15, 17)); // true\n        System.out.println(solution.right_angle_triangle(7, 24, 25)); // true\n    }\n}\n"}
{"task_id": "Java/36", "generation": "class Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    */\n    public int fizz_buzz(int n) {\n        int count = 0;\n\n        for (int i = 1; i < n; i++) {\n            // Check if the number is divisible by 11 or 13\n            if (i % 11 == 0 || i % 13 == 0) {\n                // Convert the number to a string to count occurrences of '7'\n                String numberStr = Integer.toString(i);\n                for (char c : numberStr.toCharArray()) {\n                    if (c == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fizz_buzz(50)); // Output: 0\n        System.out.println(solution.fizz_buzz(78)); // Output: 2\n        System.out.println(solution.fizz_buzz(79)); // Output: 3\n    }\n}\n"}
{"task_id": "Java/94", "generation": "class Solution {\n    // Method to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) return false; // 0 and 1 are not prime numbers\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) return false; // Found a divisor, not prime\n        }\n        return true; // No divisors found, it's prime\n    }\n\n    // Method to calculate the sum of the digits of a number\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10; // Add the last digit to sum\n            num /= 10; // Remove the last digit\n        }\n        return sum;\n    }\n\n    public int largestPrimeDigitSum(List<Integer> lst) {\n        int largestPrime = -1; // Initialize to -1 to indicate no prime found\n\n        // Find the largest prime number in the list\n        for (int num : lst) {\n            if (isPrime(num) && num > largestPrime) {\n                largestPrime = num; // Update largest prime found\n            }\n        }\n\n        // If no prime number was found, return 0 (or handle as needed)\n        if (largestPrime == -1) {\n            return 0; // or throw an exception, or return a specific value\n        }\n\n        // Calculate and return the sum of the digits of the largest prime\n        return sumOfDigits(largestPrime);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.largestPrimeDigitSum(Arrays.asList(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3))); // Output: 10\n        System.out.println(solution.largestPrimeDigitSum(Arrays.asList(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1))); // Output: 25\n        System.out.println(solution.largestPrimeDigitSum(Arrays.asList(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3))); // Output: 13\n        System.out.println(solution.largestPrimeDigitSum(Arrays.asList(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6))); // Output: 11\n        System.out.println(solution.largestPrimeDigitSum(Arrays.asList(0, 81, 12, 3, 1, 21))); // Output: 3\n        System.out.println(solution.largestPrimeDigitSum(Arrays.asList(0, 8, 1, 2, 1, 7))); // Output: 7\n    }\n}\n"}
{"task_id": "Java/60", "generation": "class Solution {\n    /**\n    sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    */\n    public int sum_to_n(int n) {\n        // Using the formula for the sum of the first n natural numbers\n        return n * (n + 1) / 2;\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sum_to_n(30));  // Output: 465\n        System.out.println(solution.sum_to_n(100)); // Output: 5050\n        System.out.println(solution.sum_to_n(5));   // Output: 15\n        System.out.println(solution.sum_to_n(10));  // Output: 55\n        System.out.println(solution.sum_to_n(1));   // Output: 1\n    }\n}\n"}
{"task_id": "Java/145", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> order_by_points(List<Integer> nums) {\n        // Create a comparator that sorts based on the sum of digits and original index\n        Comparator<Integer> comparator = new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int sumA = digitSum(a);\n                int sumB = digitSum(b);\n                if (sumA != sumB) {\n                    return Integer.compare(sumA, sumB); // Compare by digit sum\n                } else {\n                    return Integer.compare(nums.indexOf(a), nums.indexOf(b)); // Compare by original index\n                }\n            }\n        };\n\n        // Sort the list using the custom comparator\n        Collections.sort(nums, comparator);\n        return nums;\n    }\n\n    // Helper method to calculate the sum of digits\n    private int digitSum(int n) {\n        int sum = 0;\n        String str = Integer.toString(n);\n        for (char c : str.toCharArray()) {\n            sum += Character.getNumericValue(c); // Add each digit to the sum\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/61", "generation": "class Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    */\n    public boolean correct_bracketing(String brackets) {\n        int balance = 0;\n        \n        for (char ch : brackets.toCharArray()) {\n            if (ch == '(') {\n                balance++;\n            } else if (ch == ')') {\n                balance--;\n            }\n            // If balance goes negative, we have more closing brackets\n            if (balance < 0) {\n                return false;\n            }\n        }\n        \n        // At the end, balance should be zero for correct bracketing\n        return balance == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.correct_bracketing(\"(\"));        // false\n        System.out.println(solution.correct_bracketing(\"()\"));       // true\n        System.out.println(solution.correct_bracketing(\"(()())\"));   // true\n        System.out.println(solution.correct_bracketing(\")(()\"));     // false\n    }\n}\n"}
{"task_id": "Java/79", "generation": "class Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   // returns \"db1111db\"\n    decimal_to_binary(32)   // returns \"db100000db\"\n     */\n    public String decimal_to_binary(int decimal) {\n        // Convert the decimal number to binary string\n        String binaryString = Integer.toBinaryString(decimal);\n        // Format the string by adding 'db' at the beginning and end\n        return \"db\" + binaryString + \"db\";\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.decimal_to_binary(15));  // Output: \"db1111db\"\n        System.out.println(solution.decimal_to_binary(32));  // Output: \"db100000db\"\n    }\n}\n"}
{"task_id": "Java/116", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> arr) {\n        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                // Count the number of 1's in the binary representation\n                int countA = Integer.bitCount(a);\n                int countB = Integer.bitCount(b);\n                \n                // First compare by the number of 1's\n                if (countA != countB) {\n                    return Integer.compare(countA, countB);\n                }\n                // If the number of 1's is the same, compare by the decimal value\n                return Integer.compare(a, b);\n            }\n        });\n        return arr;\n    }\n}\n"}
{"task_id": "Java/56", "generation": "class Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    */\n    public boolean correct_bracketing(String brackets) {\n        int count = 0; // Initialize a counter for opening brackets\n        \n        for (char ch : brackets.toCharArray()) {\n            if (ch == '<') {\n                count++; // Increment for opening bracket\n            } else if (ch == '>') {\n                count--; // Decrement for closing bracket\n            }\n            \n            // If count goes negative, we have more closing brackets than opening\n            if (count < 0) {\n                return false;\n            }\n        }\n        \n        // At the end, count should be zero for a valid bracketing\n        return count == 0;\n    }\n}\n"}
{"task_id": "Java/111", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> count = new HashMap<>();\n        \n        if (test.isEmpty()) {\n            return count; // Return empty map if input is empty\n        }\n        \n        String[] letters = test.split(\" \");\n        \n        // Count occurrences of each letter\n        for (String letter : letters) {\n            count.put(letter, count.getOrDefault(letter, 0) + 1);\n        }\n        \n        // Find the maximum count\n        int maxCount = Collections.max(count.values());\n        \n        // Prepare the result map with letters that have the maximum count\n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : count.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/125", "generation": "class Solution {\n    public Object split_words(String txt) {\n        // Check for whitespace\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\"\\\\s+\"));\n        }\n        \n        // Check for commas\n        if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        }\n        \n        // Count lowercase letters with odd order in the alphabet\n        int count = 0;\n        for (char c : txt.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                int position = c - 'a'; // Get the position in the alphabet (0-based)\n                if (position % 2 == 1) { // Check if the position is odd\n                    count++;\n                }\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.split_words(\"Hello world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.split_words(\"Hello,world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.split_words(\"abcdef\")); // 3\n        System.out.println(solution.split_words(\"abc,def ghi\")); // [\"abc\", \"def\", \"ghi\"]\n        System.out.println(solution.split_words(\"xyz\")); // 1\n    }\n}\n"}
{"task_id": "Java/119", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String match_parens(List<String> lst) {\n        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n\n        // Check both concatenation orders\n        return (isGood(s1 + s2) || isGood(s2 + s1)) ? \"Yes\" : \"No\";\n    }\n\n    // Helper function to check if a string is good\n    private boolean isGood(String s) {\n        int balance = 0;\n        for (char ch : s.toCharArray()) {\n            if (ch == '(') {\n                balance++;\n            } else {\n                balance--;\n            }\n            if (balance < 0) {\n                return false; // More closing than opening\n            }\n        }\n        return balance == 0; // Check if balanced\n    }\n}\n"}
{"task_id": "Java/124", "generation": "class Solution {\n    public boolean valid_date(String date) {\n        // Check if the date string is empty\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        // Split the date string into parts\n        String[] parts = date.split(\"-\");\n        \n        // Check if we have exactly three parts (month, day, year)\n        if (parts.length != 3) {\n            return false;\n        }\n\n        // Parse month, day, and year\n        int month, day, year;\n        try {\n            month = Integer.parseInt(parts[0]);\n            day = Integer.parseInt(parts[1]);\n            year = Integer.parseInt(parts[2]);\n        } catch (NumberFormatException e) {\n            return false; // If parsing fails, return false\n        }\n\n        // Validate month\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        // Validate day based on month\n        if (day < 1) {\n            return false; // Day must be at least 1\n        }\n        \n        // Check days in each month\n        switch (month) {\n            case 1: case 3: case 5: case 7: case 8: case 10: case 12:\n                if (day > 31) return false; // Months with 31 days\n                break;\n            case 4: case 6: case 9: case 11:\n                if (day > 30) return false; // Months with 30 days\n                break;\n            case 2:\n                // Check for leap year for February\n                if (day > 29) return false; // February can't have more than 29 days\n                if (day == 29 && !isLeapYear(year)) return false; // Check for leap year\n                break;\n        }\n\n        // If all checks passed, the date is valid\n        return true;\n    }\n\n    // Helper method to determine if a year is a leap year\n    private boolean isLeapYear(int year) {\n        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.valid_date(\"03-11-2000\")); // true\n        System.out.println(solution.valid_date(\"15-01-2012\")); // false\n        System.out.println(solution.valid_date(\"04-0-2040\")); // false\n        System.out.println(solution.valid_date(\"06-04-2020\")); // true\n        System.out.println(solution.valid_date(\"06/04/2020\")); // false\n    }\n}\n"}
{"task_id": "Java/9", "generation": "class Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n    */\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        if (numbers == null || numbers.isEmpty()) {\n            return result; // Return empty list if input is null or empty\n        }\n\n        int currentMax = Integer.MIN_VALUE; // Initialize currentMax to the smallest integer value\n        for (int number : numbers) {\n            currentMax = Math.max(currentMax, number); // Update currentMax if the current number is greater\n            result.add(currentMax); // Add the current maximum to the result list\n        }\n        return result; // Return the list of rolling maximums\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> input = Arrays.asList(1, 2, 3, 2, 3, 4, 2);\n        List<Integer> output = solution.rolling_max(input);\n        System.out.println(output); // Output: [1, 2, 3, 3, 3, 4, 4]\n    }\n}\n"}
{"task_id": "Java/43", "generation": "class Solution {\n    /**\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairs_sum_to_zero(Arrays.asList(1))\n    false\n     */\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        Set<Integer> seen = new HashSet<>();\n        \n        for (Integer num : l) {\n            // Check if the negation of the current number is in the set\n            if (seen.contains(-num)) {\n                return true; // Found a pair that sums to zero\n            }\n            // Add the current number to the set\n            seen.add(num);\n        }\n        \n        return false; // No pairs found that sum to zero\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1, 3, -2, 1))); // false\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(2, 4, -5, 3, 5, 7))); // true\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1))); // false\n    }\n}\n"}
{"task_id": "Java/82", "generation": "class Solution {\n    public boolean prime_length(String string) {\n        int length = string.length();\n        return isPrime(length);\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false; // 0 and 1 are not prime numbers\n        }\n        if (num <= 3) {\n            return true; // 2 and 3 are prime numbers\n        }\n        if (num % 2 == 0 || num % 3 == 0) {\n            return false; // eliminate multiples of 2 and 3\n        }\n        for (int i = 5; i * i <= num; i += 6) {\n            if (num % i == 0 || num % (i + 2) == 0) {\n                return false; // check for factors\n            }\n        }\n        return true; // no factors found, it's prime\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.prime_length(\"Hello\")); // true\n        System.out.println(solution.prime_length(\"abcdcba\")); // true\n        System.out.println(solution.prime_length(\"kittens\")); // true\n        System.out.println(solution.prime_length(\"orange\")); // false\n    }\n}\n"}
{"task_id": "Java/155", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> even_odd_count(int num) {\n        num = Math.abs(num); // Take the absolute value of the number\n        int evenCount = 0;\n        int oddCount = 0;\n\n        while (num > 0) {\n            int digit = num % 10; // Get the last digit\n            if (digit % 2 == 0) {\n                evenCount++; // Increment even count\n            } else {\n                oddCount++; // Increment odd count\n            }\n            num /= 10; // Remove the last digit\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount); // Add even count to the result\n        result.add(oddCount); // Add odd count to the result\n        return result; // Return the result as a list\n    }\n}\n"}
{"task_id": "Java/35", "generation": "class Solution {\n    /**\n    Return maximum element in the list.\n    >>> max_element(Arrays.asList(1, 2, 3))\n    3\n    >>> max_element(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n    */\n    public int max_element(List<Integer> l) {\n        // Check if the list is empty\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be null or empty\");\n        }\n        // Use Collections.max to find the maximum element\n        return Collections.max(l);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.max_element(Arrays.asList(1, 2, 3))); // Output: 3\n        System.out.println(solution.max_element(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))); // Output: 123\n    }\n}\n"}
{"task_id": "Java/89", "generation": "class Solution {\n    public String encrypt(String s) {\n        StringBuilder encrypted = new StringBuilder();\n        \n        for (char c : s.toCharArray()) {\n            // Check if the character is a lowercase letter\n            if (c >= 'a' && c <= 'z') {\n                // Shift the character by 4 positions\n                char shifted = (char) (c + 4);\n                // Wrap around if it goes past 'z'\n                if (shifted > 'z') {\n                    shifted -= 26; // Wrap around\n                }\n                encrypted.append(shifted);\n            } else {\n                // If it's not a lowercase letter, we can choose to ignore it or handle it differently\n                encrypted.append(c); // For now, just append it as is\n            }\n        }\n        \n        return encrypted.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.encrypt(\"hi\")); // Output: \"lm\"\n        System.out.println(solution.encrypt(\"asdfghjkl\")); // Output: \"ewhjklnop\"\n        System.out.println(solution.encrypt(\"gf\")); // Output: \"kj\"\n        System.out.println(solution.encrypt(\"et\")); // Output: \"ix\"\n    }\n}\n"}
{"task_id": "Java/24", "generation": "class Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    */\n    public int largest_divisor(int n) {\n        // Start from n-1 and go down to 1\n        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i; // Return the first divisor found\n            }\n        }\n        return 1; // In case n is 1, the largest divisor smaller than 1 is 1 itself\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.largest_divisor(15)); // Output: 5\n        System.out.println(solution.largest_divisor(28)); // Output: 14\n        System.out.println(solution.largest_divisor(1));  // Output: 1\n    }\n}\n"}
{"task_id": "Java/22", "generation": "class Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n    */\n    public List<Integer> filter_integers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.filter_integers(Arrays.asList('a', 3.14, 5))); // Output: [5]\n        System.out.println(solution.filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))); // Output: [1, 2, 3]\n    }\n}\n"}
{"task_id": "Java/161", "generation": "class Solution {\n    public String solve(String s) {\n        // Check if the string contains any letters\n        boolean hasLetter = false;\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                hasLetter = true;\n                break;\n            }\n        }\n\n        // If there are letters, reverse their case\n        if (hasLetter) {\n            StringBuilder result = new StringBuilder();\n            for (char c : s.toCharArray()) {\n                if (Character.isLetter(c)) {\n                    // Reverse case\n                    if (Character.isLowerCase(c)) {\n                        result.append(Character.toUpperCase(c));\n                    } else {\n                        result.append(Character.toLowerCase(c));\n                    }\n                } else {\n                    // Keep non-letter characters as they are\n                    result.append(c);\n                }\n            }\n            return result.toString();\n        } else {\n            // If no letters, reverse the entire string\n            return new StringBuilder(s).reverse().toString();\n        }\n    }\n}\n"}
{"task_id": "Java/28", "generation": "class Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n    */\n    public String concatenate(List<String> strings) {\n        StringBuilder result = new StringBuilder();\n        for (String str : strings) {\n            result.append(str);\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.concatenate(List.of())); // Output: \"\"\n        System.out.println(solution.concatenate(Arrays.asList(\"a\", \"b\", \"c\"))); // Output: \"abc\"\n        System.out.println(solution.concatenate(Arrays.asList(\"Hello\", \" \", \"World\", \"!\"))); // Output: \"Hello World!\"\n    }\n}\n"}
{"task_id": "Java/72", "generation": "class Solution {\n    public boolean will_it_fly(List<Integer> q, int w) {\n        // Check if the list is a palindrome\n        if (!isPalindrome(q)) {\n            return false;\n        }\n        \n        // Calculate the sum of the elements\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n        \n        // Check if the sum is less than or equal to the maximum weight\n        return sum <= w;\n    }\n    \n    private boolean isPalindrome(List<Integer> q) {\n        int left = 0;\n        int right = q.size() - 1;\n        \n        while (left < right) {\n            if (!q.get(left).equals(q.get(right))) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/127", "generation": "class Solution {\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // Extracting start and end points from the intervals\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        \n        // Calculate the intersection\n        int startIntersection = Math.max(start1, start2);\n        int endIntersection = Math.min(end1, end2);\n        \n        // Check if there is an intersection\n        if (startIntersection >= endIntersection) {\n            return \"NO\"; // No intersection\n        }\n        \n        // Calculate the length of the intersection\n        int length = endIntersection - startIntersection;\n        \n        // Check if the length is a prime number\n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n    \n    // Helper method to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) return false; // 0 and 1 are not prime numbers\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) return false; // Found a divisor\n        }\n        return true; // No divisors found, it's prime\n    }\n}\n"}
{"task_id": "Java/86", "generation": "class Solution {\n    public String anti_shuffle(String s) {\n        // Split the string by spaces to get words and keep track of spaces\n        String[] parts = s.split(\"(?<=\\\\s)|(?=\\\\s)\"); // This regex keeps spaces in the result\n        StringBuilder result = new StringBuilder();\n\n        for (String part : parts) {\n            if (part.trim().isEmpty()) {\n                // If the part is just a space, add it directly to the result\n                result.append(part);\n            } else {\n                // Sort the characters in the word\n                char[] chars = part.toCharArray();\n                Arrays.sort(chars);\n                // Append the sorted word to the result\n                result.append(new String(chars));\n            }\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.anti_shuffle(\"Hi\")); // Output: \"Hi\"\n        System.out.println(solution.anti_shuffle(\"hello\")); // Output: \"ehllo\"\n        System.out.println(solution.anti_shuffle(\"Hello World!!!\")); // Output: \"Hello !!!Wdlor\"\n    }\n}\n"}
{"task_id": "Java/3", "generation": "class Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero,\n    and at that point function should return True. Otherwise it should return False.\n    >>> below_zero(Arrays.asList(1, 2, 3))\n    false\n    >>> below_zero(Arrays.asList(1, 2, -4, 5))\n    true\n    */\n    public boolean below_zero(List<Integer> operations) {\n        int balance = 0; // Start with zero balance\n        \n        for (int operation : operations) {\n            balance += operation; // Update the balance\n            \n            if (balance < 0) { // Check if balance falls below zero\n                return true; // Return true if it does\n            }\n        }\n        \n        return false; // Return false if balance never falls below zero\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.below_zero(Arrays.asList(1, 2, 3))); // false\n        System.out.println(solution.below_zero(Arrays.asList(1, 2, -4, 5))); // true\n        System.out.println(solution.below_zero(Arrays.asList(-1, 1, -1))); // true\n        System.out.println(solution.below_zero(Arrays.asList(5, -3, -3))); // false\n    }\n}\n"}
{"task_id": "Java/69", "generation": "class Solution {\n    public int search(List<Integer> lst) {\n        // Step 1: Count the frequencies of each integer\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n\n        // Step 2: Find the greatest integer that meets the condition\n        int result = -1;\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int num = entry.getKey();\n            int frequency = entry.getValue();\n            if (num <= frequency) {\n                result = Math.max(result, num);\n            }\n        }\n\n        // Step 3: Return the result\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.search(Arrays.asList(4, 1, 2, 2, 3, 1))); // Output: 2\n        System.out.println(sol.search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4))); // Output: 3\n        System.out.println(sol.search(Arrays.asList(5, 5, 4, 4, 4))); // Output: -1\n    }\n}\n"}
{"task_id": "Java/62", "generation": "class Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3))\n    [2, 6]\n    */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        \n        // Iterate over the coefficients starting from the first term (index 1)\n        for (int i = 1; i < xs.size(); i++) {\n            // Calculate the derivative coefficient\n            int derivativeCoefficient = i * xs.get(i);\n            result.add(derivativeCoefficient);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.derivative(Arrays.asList(3, 1, 2, 4, 5))); // Output: [1, 4, 12, 20]\n        System.out.println(solution.derivative(Arrays.asList(1, 2, 3))); // Output: [2, 6]\n    }\n}\n"}
{"task_id": "Java/50", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a' + 5) % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decode_shift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a' - 5 + 26) % 26))); // Adding 26 to ensure non-negative result\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/135", "generation": "class Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange(Arrays.asList(1,2,4,3,5)) = 3\n    can_arrange(Arrays.asList(1,2,3)) = -1\n    */\n    public int can_arrange(List<Integer> arr) {\n        // Check if the list is empty or has only one element\n        if (arr == null || arr.size() < 2) {\n            return -1;\n        }\n\n        // Start from the second last element and go backwards\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            // Check if the current element is less than the next element\n            if (arr.get(i) > arr.get(i + 1)) {\n                return i + 1; // Return the index of the element that is not greater\n            }\n        }\n\n        // If no such element is found, return -1\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.can_arrange(Arrays.asList(1, 2, 4, 3, 5))); // Output: 3\n        System.out.println(solution.can_arrange(Arrays.asList(1, 2, 3))); // Output: -1\n    }\n}\n"}
{"task_id": "Java/93", "generation": "class Solution {\n    public String encode(String message) {\n        StringBuilder encodedMessage = new StringBuilder();\n        \n        for (char ch : message.toCharArray()) {\n            // Swap case\n            if (Character.isLetter(ch)) {\n                // Check if the character is a vowel\n                char swappedChar = Character.isLowerCase(ch) ? Character.toUpperCase(ch) : Character.toLowerCase(ch);\n                \n                // Replace vowels\n                if (\"AEIOUaeiou\".indexOf(swappedChar) != -1) {\n                    // Calculate the new character that is 2 places ahead\n                    swappedChar = (char) (swappedChar + 2);\n                    // Handle wrap around for uppercase and lowercase letters\n                    if (Character.isUpperCase(swappedChar) && swappedChar > 'Z') {\n                        swappedChar = (char) (swappedChar - 26);\n                    } else if (Character.isLowerCase(swappedChar) && swappedChar > 'z') {\n                        swappedChar = (char) (swappedChar - 26);\n                    }\n                }\n                \n                encodedMessage.append(swappedChar);\n            } else {\n                // Append non-letter characters as they are\n                encodedMessage.append(ch);\n            }\n        }\n        \n        return encodedMessage.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.encode(\"test\")); // Output: \"TGST\"\n        System.out.println(solution.encode(\"This is a message\")); // Output: \"tHKS KS C MGSSCGG\"\n    }\n}\n"}
{"task_id": "Java/147", "generation": "class Solution {\n    public int get_max_triples(int n) {\n        // Step 1: Create the array a\n        int[] a = new int[n];\n        for (int i = 1; i <= n; i++) {\n            a[i - 1] = i * i - i + 1; // Fill the array based on the formula\n        }\n\n        // Step 2: Count the occurrences of each remainder when divided by 3\n        int[] count = new int[3];\n        for (int num : a) {\n            count[num % 3]++;\n        }\n\n        // Step 3: Calculate the number of valid triples\n        int totalTriples = 0;\n\n        // Case 1: All three numbers have remainder 0\n        totalTriples += count[0] * (count[0] - 1) * (count[0] - 2) / 6;\n\n        // Case 2: All three numbers have remainder 1\n        totalTriples += count[1] * (count[1] - 1) * (count[1] - 2) / 6;\n\n        // Case 3: All three numbers have remainder 2\n        totalTriples += count[2] * (count[2] - 1) * (count[2] - 2) / 6;\n\n        // Case 4: One number from each remainder category\n        totalTriples += count[0] * count[1] * count[2];\n\n        return totalTriples;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.get_max_triples(5)); // Output: 1\n    }\n}\n"}
{"task_id": "Java/27", "generation": "class Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"Hello\")\n    \"hELLO\"\n    */\n    public String flip_case(String string) {\n        StringBuilder flippedString = new StringBuilder();\n\n        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                // Convert to uppercase\n                flippedString.append(Character.toUpperCase(c));\n            } else if (Character.isUpperCase(c)) {\n                // Convert to lowercase\n                flippedString.append(Character.toLowerCase(c));\n            } else {\n                // If it's neither, just append the character as is\n                flippedString.append(c);\n            }\n        }\n\n        return flippedString.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.flip_case(\"Hello\")); // Output: hELLO\n        System.out.println(solution.flip_case(\"World\")); // Output: wORLD\n        System.out.println(solution.flip_case(\"Java123\")); // Output: jAVA123\n    }\n}\n"}
{"task_id": "Java/110", "generation": "class Solution {\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int oddCountInLst1 = 0;\n        int evenCountInLst2 = 0;\n\n        // Count odd numbers in lst1\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCountInLst1++;\n            }\n        }\n\n        // Count even numbers in lst2\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCountInLst2++;\n            }\n        }\n\n        // Check if we can replace all odd numbers in lst1 with even numbers from lst2\n        if (oddCountInLst1 <= evenCountInLst2) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4))); // Output: \"YES\"\n        System.out.println(solution.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4))); // Output: \"NO\"\n    }\n}\n"}
{"task_id": "Java/141", "generation": "class Solution {\n    public String file_name_check(String file_name) {\n        // Check if the file name contains exactly one dot\n        int dotIndex = file_name.indexOf('.');\n        if (dotIndex == -1 || file_name.indexOf('.', dotIndex + 1) != -1) {\n            return \"No\"; // No dot or more than one dot\n        }\n\n        // Split the file name into name and extension\n        String namePart = file_name.substring(0, dotIndex);\n        String extensionPart = file_name.substring(dotIndex + 1);\n\n        // Check if the name part is not empty and starts with a letter\n        if (namePart.isEmpty() || !Character.isLetter(namePart.charAt(0))) {\n            return \"No\"; // Name part is empty or does not start with a letter\n        }\n\n        // Check if the extension part is valid\n        Set<String> validExtensions = new HashSet<>(Arrays.asList(\"txt\", \"exe\", \"dll\"));\n        if (!validExtensions.contains(extensionPart)) {\n            return \"No\"; // Invalid extension\n        }\n\n        // Count the number of digits in the file name\n        int digitCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n        }\n\n        // Check if there are more than three digits\n        if (digitCount > 3) {\n            return \"No\"; // More than three digits\n        }\n\n        // If all checks passed, the file name is valid\n        return \"Yes\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.file_name_check(\"example.txt\")); // Yes\n        System.out.println(solution.file_name_check(\"1example.dll\")); // No\n        System.out.println(solution.file_name_check(\"example123.txt\")); // Yes\n        System.out.println(solution.file_name_check(\"example1234.txt\")); // No\n        System.out.println(solution.file_name_check(\"example..txt\")); // No\n        System.out.println(solution.file_name_check(\".example.txt\")); // No\n        System.out.println(solution.file_name_check(\"example.doc\")); // No\n    }\n}\n"}
{"task_id": "Java/104", "generation": "class Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> unique_digits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> unique_digits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (Integer num : x) {\n            if (containsNoEvenDigits(num)) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        return result;\n    }\n    \n    private boolean containsNoEvenDigits(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return false; // Found an even digit\n            }\n            num /= 10; // Remove the last digit\n        }\n        return true; // No even digits found\n    }\n}\n"}
{"task_id": "Java/100", "generation": "class Solution {\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> stones = new ArrayList<>();\n        int currentStones = n;\n\n        for (int i = 0; i < n; i++) {\n            stones.add(currentStones);\n            // Determine the next number of stones based on the parity of n\n            if (n % 2 == 0) {\n                // n is even, so the next number should be even\n                currentStones += 2;\n            } else {\n                // n is odd, so the next number should be odd\n                currentStones += 2;\n            }\n        }\n\n        return stones;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.make_a_pile(3)); // Output: [3, 5, 7]\n        System.out.println(solution.make_a_pile(4)); // Output: [4, 6, 8, 10]\n    }\n}\n"}
{"task_id": "Java/68", "generation": "class Solution {\n    public List<Integer> pluck(List<Integer> arr) {\n        // Initialize variables to track the smallest even value and its index\n        Integer smallestEvenValue = null;\n        Integer smallestEvenIndex = null;\n\n        // Iterate through the list\n        for (int i = 0; i < arr.size(); i++) {\n            int value = arr.get(i);\n            // Check if the value is even\n            if (value % 2 == 0) {\n                // If we haven't found any even number yet or found a smaller even number\n                if (smallestEvenValue == null || value < smallestEvenValue) {\n                    smallestEvenValue = value;\n                    smallestEvenIndex = i;\n                }\n            }\n        }\n\n        // If we found an even number, return it with its index\n        if (smallestEvenValue != null) {\n            return Arrays.asList(smallestEvenValue, smallestEvenIndex);\n        } else {\n            // If no even number was found, return an empty list\n            return Collections.emptyList();\n        }\n    }\n}\n"}
{"task_id": "Java/149", "generation": "class Solution {\n    public List<String> sorted_list_sum(List<String> lst) {\n        // Step 1: Filter out strings with odd lengths\n        List<String> filteredList = new ArrayList<>();\n        for (String str : lst) {\n            if (str.length() % 2 == 0) { // Check if the length is even\n                filteredList.add(str);\n            }\n        }\n\n        // Step 2: Sort the filtered list\n        Collections.sort(filteredList, new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                // First compare by length\n                int lengthComparison = Integer.compare(s1.length(), s2.length());\n                if (lengthComparison != 0) {\n                    return lengthComparison; // Return length comparison if not equal\n                }\n                // If lengths are equal, compare alphabetically\n                return s1.compareTo(s2);\n            }\n        });\n\n        // Step 3: Return the sorted list\n        return filteredList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.sorted_list_sum(Arrays.asList(\"aa\", \"a\", \"aaa\"))); // Output: [\"aa\"]\n        System.out.println(solution.sorted_list_sum(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\"))); // Output: [\"ab\", \"cd\"]\n    }\n}\n"}
{"task_id": "Java/128", "generation": "class Solution {\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int productOfSigns = 1; // Start with 1 for multiplication\n        int sumOfMagnitudes = 0;\n\n        for (int num : arr) {\n            if (num > 0) {\n                sumOfMagnitudes += num; // Add positive number to sum\n            } else if (num < 0) {\n                sumOfMagnitudes += Math.abs(num); // Add absolute value of negative number to sum\n                productOfSigns *= -1; // Flip the sign product\n            } else {\n                productOfSigns = 0; // If we encounter a zero, the product of signs becomes zero\n                break; // No need to continue, as the product will remain zero\n            }\n        }\n\n        return Optional.of(sumOfMagnitudes * productOfSigns);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.prod_signs(Arrays.asList(1, 2, 2, -4))); // Output: Optional[-9]\n        System.out.println(solution.prod_signs(Arrays.asList(0, 1))); // Output: Optional[0]\n        System.out.println(solution.prod_signs(Arrays.asList())); // Output: Optional.empty\n    }\n}\n"}
{"task_id": "Java/2", "generation": "class Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    */\n    public double truncate_number(double number) {\n        // Get the integer part of the number\n        double integerPart = Math.floor(number);\n        // Calculate the decimal part\n        double decimalPart = number - integerPart;\n        return decimalPart;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.truncate_number(3.5)); // Output: 0.5\n        System.out.println(solution.truncate_number(2.75)); // Output: 0.75\n        System.out.println(solution.truncate_number(5.0)); // Output: 0.0\n        System.out.println(solution.truncate_number(7.123)); // Output: 0.123\n    }\n}\n"}
{"task_id": "Java/103", "generation": "class Solution {\n    public Object rounded_avg(int n, int m) {\n        // Step 1: Check if n is greater than m\n        if (n > m) {\n            return -1;\n        }\n\n        // Step 2: Calculate the average of integers from n to m\n        int count = m - n + 1; // Total numbers from n to m\n        int sum = (n + m) * count / 2; // Sum of the arithmetic series\n        int average = sum / count; // Average\n\n        // Step 3: Round the average to the nearest integer\n        int roundedAverage = (int) Math.round(average);\n\n        // Step 4: Convert the rounded average to binary\n        String binaryString = Integer.toBinaryString(roundedAverage);\n\n        // Step 5: Return the binary string\n        return binaryString;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.rounded_avg(1, 5)); // Output: \"11\"\n        System.out.println(solution.rounded_avg(7, 5)); // Output: -1\n        System.out.println(solution.rounded_avg(10, 20)); // Output: \"1111\"\n        System.out.println(solution.rounded_avg(20, 33)); // Output: \"11011\"\n    }\n}\n"}
{"task_id": "Java/55", "generation": "class Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    */\n    public int fib(int n) {\n        if (n <= 0) {\n            return 0; // Fibonacci of 0 is 0\n        } else if (n == 1) {\n            return 1; // Fibonacci of 1 is 1\n        }\n\n        int a = 0; // F(0)\n        int b = 1; // F(1)\n        int c = 0; // To store the current Fibonacci number\n\n        for (int i = 2; i <= n; i++) {\n            c = a + b; // F(n) = F(n-1) + F(n-2)\n            a = b;     // Move to the next Fibonacci number\n            b = c;     // Update b to the current Fibonacci number\n        }\n\n        return c; // Return the n-th Fibonacci number\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fib(10)); // Output: 55\n        System.out.println(solution.fib(1));  // Output: 1\n        System.out.println(solution.fib(8));  // Output: 21\n    }\n}\n"}
{"task_id": "Java/70", "generation": "class Solution {\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        // Create a new list to store the result\n        List<Integer> result = new ArrayList<>();\n        \n        // Sort the input list\n        Collections.sort(lst);\n        \n        // Use two pointers to select elements\n        int left = 0; // Pointer for the minimum\n        int right = lst.size() - 1; // Pointer for the maximum\n        \n        // Alternate between minimum and maximum\n        while (left <= right) {\n            // Add the minimum value if available\n            if (left <= right) {\n                result.add(lst.get(left));\n                left++;\n            }\n            // Add the maximum value if available\n            if (left <= right) {\n                result.add(lst.get(right));\n                right--;\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.strange_sort_list(Arrays.asList(1, 2, 3, 4))); // Output: [1, 4, 2, 3]\n        System.out.println(sol.strange_sort_list(Arrays.asList(5, 5, 5, 5))); // Output: [5, 5, 5, 5]\n        System.out.println(sol.strange_sort_list(Arrays.asList())); // Output: []\n    }\n}\n"}
{"task_id": "Java/34", "generation": "class Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n    */\n    public List<Integer> unique(List<Integer> l) {\n        // Use a Set to store unique elements\n        Set<Integer> uniqueSet = new HashSet<>(l);\n        \n        // Convert the Set back to a List\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n        \n        // Sort the List\n        Collections.sort(uniqueList);\n        \n        return uniqueList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> result = solution.unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123));\n        System.out.println(result); // Output: [0, 2, 3, 5, 9, 123]\n    }\n}\n"}
{"task_id": "Java/15", "generation": "class Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\n    */\n    public String string_sequence(int n) {\n        StringBuilder result = new StringBuilder();\n        \n        for (int i = 0; i <= n; i++) {\n            result.append(i);\n            if (i < n) {\n                result.append(\" \"); // Append a space after each number except the last one\n            }\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.string_sequence(0)); // Output: \"0\"\n        System.out.println(solution.string_sequence(5)); // Output: \"0 1 2 3 4 5\"\n    }\n}\n"}
{"task_id": "Java/130", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n        List<Integer> tribonacciSequence = new ArrayList<>();\n        \n        // Base cases\n        if (n == 0) {\n            tribonacciSequence.add(1);\n            return tribonacciSequence;\n        } else if (n == 1) {\n            tribonacciSequence.add(1);\n            tribonacciSequence.add(3);\n            return tribonacciSequence;\n        }\n        \n        // Initialize the first two known values\n        tribonacciSequence.add(1);\n        tribonacciSequence.add(3);\n        \n        // Calculate the rest of the sequence\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) { // even\n                tribonacciSequence.add(1 + i / 2);\n            } else { // odd\n                int nextValue = tribonacciSequence.get(i - 1) + tribonacciSequence.get(i - 2);\n                if (i + 1 < tribonacciSequence.size()) {\n                    nextValue += tribonacciSequence.get(i + 1);\n                }\n                tribonacciSequence.add(nextValue);\n            }\n        }\n        \n        return tribonacciSequence;\n    }\n}\n"}
{"task_id": "Java/91", "generation": "import java.util.*;\n\nclass Solution {\n    public int is_bored(String S) {\n        // Split the string into sentences using the delimiters '.', '?', and '!'\n        String[] sentences = S.replace('!', '.').replace('?', '.').split(\"\\\\.\");\n        int boredomCount = 0;\n\n        // Count the number of sentences that start with \"I\"\n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n        return boredomCount;\n    }\n}\n"}
{"task_id": "Java/11", "generation": "class Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    */\n    public String string_xor(String a, String b) {\n        // Ensure both strings are of the same length\n        if (a.length() != b.length()) {\n            throw new IllegalArgumentException(\"Strings must be of the same length\");\n        }\n\n        StringBuilder result = new StringBuilder();\n\n        // Iterate through each character in the strings\n        for (int i = 0; i < a.length(); i++) {\n            // Perform XOR operation\n            char xorResult = (a.charAt(i) == b.charAt(i)) ? '0' : '1';\n            result.append(xorResult);\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.string_xor(\"010\", \"110\")); // Output: \"100\"\n    }\n}\n"}
{"task_id": "Java/39", "generation": "class Solution {\n    /**\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    */\n    \n    public int prime_fib(int n) {\n        if (n < 1) {\n            throw new IllegalArgumentException(\"n must be a positive integer.\");\n        }\n        \n        List<Integer> primeFibs = new ArrayList<>();\n        int a = 0, b = 1; // Starting values for Fibonacci sequence\n        \n        while (primeFibs.size() < n) {\n            int fib = a + b; // Calculate the next Fibonacci number\n            a = b; // Move to the next Fibonacci number\n            b = fib;\n            \n            if (isPrime(fib)) {\n                primeFibs.add(fib); // Add to the list if it's prime\n            }\n        }\n        \n        return primeFibs.get(n - 1); // Return the n-th prime Fibonacci number\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) return false; // 0 and 1 are not prime numbers\n        if (num <= 3) return true; // 2 and 3 are prime numbers\n        \n        if (num % 2 == 0 || num % 3 == 0) return false; // Eliminate multiples of 2 and 3\n        \n        for (int i = 5; i * i <= num; i += 6) {\n            if (num % i == 0 || num % (i + 2) == 0) return false; // Check for factors\n        }\n        \n        return true; // If no factors found, it's prime\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.prime_fib(1)); // 2\n        System.out.println(solution.prime_fib(2)); // 3\n        System.out.println(solution.prime_fib(3)); // 5\n        System.out.println(solution.prime_fib(4)); // 13\n        System.out.println(solution.prime_fib(5)); // 89\n    }\n}\n"}
{"task_id": "Java/117", "generation": "class Solution {\n    public List<String> select_words(String s, int n) {\n        // Initialize the result list\n        List<String> result = new ArrayList<>();\n        \n        // Split the string into words\n        String[] words = s.split(\" \");\n        \n        // Iterate through each word\n        for (String word : words) {\n            // Count the consonants in the word\n            int consonantCount = countConsonants(word);\n            \n            // If the count matches n, add the word to the result\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        \n        return result;\n    }\n    \n    // Helper method to count consonants in a word\n    private int countConsonants(String word) {\n        int count = 0;\n        // Convert the word to lowercase for easier comparison\n        word = word.toLowerCase();\n        \n        // Define a set of vowels\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u'));\n        \n        // Count consonants\n        for (char c : word.toCharArray()) {\n            if (Character.isLetter(c) && !vowels.contains(c)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.select_words(\"Mary had a little lamb\", 4)); // [\"little\"]\n        System.out.println(solution.select_words(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\n        System.out.println(solution.select_words(\"simple white space\", 2)); // []\n        System.out.println(solution.select_words(\"Hello world\", 4)); // [\"world\"]\n        System.out.println(solution.select_words(\"Uncle sam\", 3)); // [\"Uncle\"]\n    }\n}\n"}
{"task_id": "Java/0", "generation": "class Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> has_close_elements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> has_close_elements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n    */\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        // Check for null or empty list\n        if (numbers == null || numbers.size() < 2) {\n            return false;\n        }\n        \n        // Compare each pair of numbers\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true; // Found two numbers closer than the threshold\n                }\n            }\n        }\n        \n        return false; // No pairs found that are too close\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.has_close_elements(Arrays.asList(1.0, 2.0, 3.0), 0.5)); // false\n        System.out.println(solution.has_close_elements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)); // true\n    }\n}\n"}
{"task_id": "Java/31", "generation": "class Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    false\n    >>> is_prime(101)\n    true\n    >>> is_prime(11)\n    true\n    >>> is_prime(13441)\n    true\n    >>> is_prime(61)\n    true\n    >>> is_prime(4)\n    false\n    >>> is_prime(1)\n    false\n    */\n    public boolean is_prime(int n) {\n        // Check for numbers less than or equal to 1\n        if (n <= 1) {\n            return false;\n        }\n        // Check for factors from 2 to the square root of n\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false; // Found a divisor, not prime\n            }\n        }\n        return true; // No divisors found, it's prime\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test cases\n        System.out.println(solution.is_prime(6));      // false\n        System.out.println(solution.is_prime(101));    // true\n        System.out.println(solution.is_prime(11));     // true\n        System.out.println(solution.is_prime(13441));  // true\n        System.out.println(solution.is_prime(61));     // true\n        System.out.println(solution.is_prime(4));      // false\n        System.out.println(solution.is_prime(1));      // false\n    }\n}\n"}
{"task_id": "Java/106", "generation": "class Solution {\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                // Calculate factorial for even i\n                result.add(factorial(i));\n            } else {\n                // Calculate sum from 1 to i for odd i\n                result.add(sumToN(i));\n            }\n        }\n        \n        return result;\n    }\n    \n    private int factorial(int num) {\n        int fact = 1;\n        for (int j = 1; j <= num; j++) {\n            fact *= j;\n        }\n        return fact;\n    }\n    \n    private int sumToN(int num) {\n        return (num * (num + 1)) / 2; // Using the formula for the sum of the first n natural numbers\n    }\n    \n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.f(5)); // Output: [1, 2, 6, 24, 15]\n    }\n}\n"}
{"task_id": "Java/5", "generation": "class Solution {\n    /**\n    Insert a number 'delimiter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n    */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        \n        // Check if the input list is empty\n        if (numbers.isEmpty()) {\n            return result; // Return empty list\n        }\n        \n        // Iterate through the input list\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i)); // Add the current element\n            \n            // If it's not the last element, add the delimiter\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        \n        return result; // Return the result list\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.intersperse(List.of(), 4)); // Output: []\n        System.out.println(solution.intersperse(Arrays.asList(1, 2, 3), 4)); // Output: [1, 4, 2, 4, 3]\n    }\n}\n"}
{"task_id": "Java/114", "generation": "class Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n    */\n    public int minSubArraySum(List<Integer> nums) {\n        // Initialize variables to track the minimum sum and the current sum\n        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n\n        // Iterate through each number in the list\n        for (int num : nums) {\n            currentSum += num; // Add the current number to the current sum\n            \n            // Update the minimum sum if the current sum is less than the minimum found so far\n            minSum = Math.min(minSum, currentSum);\n            \n            // If the current sum is greater than zero, reset it\n            if (currentSum > 0) {\n                currentSum = 0;\n            }\n        }\n\n        return minSum; // Return the minimum sum found\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4))); // Output: 1\n        System.out.println(solution.minSubArraySum(Arrays.asList(-1, -2, -3))); // Output: -6\n    }\n}\n"}
{"task_id": "Java/51", "generation": "class Solution {\n    /**\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels(\"\")\n    \"\"\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> remove_vowels(\"abcdef\")\n    \"bcdf\"\n    >>> remove_vowels(\"aaaaa\")\n    \"\"\n    >>> remove_vowels(\"aaBAA\")\n    \"B\"\n    >>> remove_vowels(\"zbcd\")\n    \"zbcd\"\n    */\n    public String remove_vowels(String text) {\n        // Define a set of vowels for quick lookup\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', \n                                                             'A', 'E', 'I', 'O', 'U'));\n        StringBuilder result = new StringBuilder();\n\n        // Iterate through each character in the input string\n        for (char c : text.toCharArray()) {\n            // If the character is not a vowel, append it to the result\n            if (!vowels.contains(c)) {\n                result.append(c);\n            }\n        }\n\n        // Convert StringBuilder to String and return\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.remove_vowels(\"\")); // \"\"\n        System.out.println(sol.remove_vowels(\"abcdef\\nghijklm\")); // \"bcdf\\nghjklm\"\n        System.out.println(sol.remove_vowels(\"abcdef\")); // \"bcdf\"\n        System.out.println(sol.remove_vowels(\"aaaaa\")); // \"\"\n        System.out.println(sol.remove_vowels(\"aaBAA\")); // \"B\"\n        System.out.println(sol.remove_vowels(\"zbcd\")); // \"zbcd\"\n    }\n}\n"}
{"task_id": "Java/152", "generation": "class Solution {\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        \n        // Ensure both lists are of the same length\n        if (game.size() != guess.size()) {\n            throw new IllegalArgumentException(\"Both lists must have the same length.\");\n        }\n\n        // Iterate through both lists\n        for (int i = 0; i < game.size(); i++) {\n            // Calculate the absolute difference\n            int difference = Math.abs(game.get(i) - guess.get(i));\n            result.add(difference);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.compare(Arrays.asList(1, 2, 3, 4, 5, 1), Arrays.asList(1, 2, 3, 4, 2, -2))); // [0, 0, 0, 0, 3, 3]\n        System.out.println(solution.compare(Arrays.asList(0, 5, 0, 0, 0, 4), Arrays.asList(4, 1, 1, 0, 0, -2))); // [4, 4, 1, 0, 0, 6]\n    }\n}\n"}
{"task_id": "Java/139", "generation": "class Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long special_factorial(int n) {\n        long result = 1; // Initialize result to 1\n        for (int i = 1; i <= n; i++) {\n            result *= factorial(i); // Multiply by the factorial of i\n        }\n        return result; // Return the final result\n    }\n\n    // Helper method to calculate factorial of a number\n    private long factorial(int num) {\n        long fact = 1; // Initialize factorial to 1\n        for (int i = 1; i <= num; i++) {\n            fact *= i; // Calculate factorial\n        }\n        return fact; // Return the factorial\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.special_factorial(4)); // Output: 288\n    }\n}\n"}
{"task_id": "Java/105", "generation": "class Solution {\n    public List<String> by_length(List<Integer> arr) {\n        // List to hold the valid numbers (between 1 and 9)\n        List<Integer> validNumbers = new ArrayList<>();\n\n        // Filter the input array to get only numbers between 1 and 9\n        for (Integer num : arr) {\n            if (num >= 1 && num <= 9) {\n                validNumbers.add(num);\n            }\n        }\n\n        // Sort the valid numbers\n        Collections.sort(validNumbers);\n\n        // Reverse the sorted list\n        Collections.reverse(validNumbers);\n\n        // Map to convert numbers to their corresponding names\n        String[] numberNames = {\n            \"\", // Placeholder for index 0\n            \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \n            \"Six\", \"Seven\", \"Eight\", \"Nine\"\n        };\n\n        // List to hold the result names\n        List<String> result = new ArrayList<>();\n\n        // Convert each number to its corresponding name\n        for (Integer num : validNumbers) {\n            result.add(numberNames[num]);\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.by_length(Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3))); // [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n        System.out.println(solution.by_length(Arrays.asList())); // []\n        System.out.println(solution.by_length(Arrays.asList(1, -1, 55))); // [\"One\"]\n    }\n}\n"}
{"task_id": "Java/12", "generation": "class Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n    */\n    public Optional<String> longest(List<String> strings) {\n        // Check if the list is empty\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        // Initialize the longest string variable\n        String longestString = strings.get(0);\n\n        // Iterate through the list to find the longest string\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n\n        // Return the longest string wrapped in an Optional\n        return Optional.of(longestString);\n    }\n}\n"}
{"task_id": "Java/7", "generation": "class Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring(List.of(), \"a\")\n    []\n    >>> filter_by_substring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    */\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        // Use Java Streams to filter the list\n        return strings.stream()\n                      .filter(s -> s.contains(substring))\n                      .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.filter_by_substring(List.of(), \"a\")); // []\n        System.out.println(solution.filter_by_substring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")); // [\"abc\", \"bacd\", \"array\"]\n    }\n}\n"}
{"task_id": "Java/138", "generation": "class Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == false\n    is_equal_to_sum_even(6) == false\n    is_equal_to_sum_even(8) == true\n    */\n    public boolean is_equal_to_sum_even(int n) {\n        // Check if n is less than 8\n        if (n < 8) {\n            return false;\n        }\n        // Check if n is even\n        if (n % 2 != 0) {\n            return false;\n        }\n        // If n is even and at least 8, it can be expressed as the sum of 4 positive even numbers\n        return true;\n    }\n}\n"}
{"task_id": "Java/41", "generation": "class Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int car_race_collision(int n) {\n        // Each car moving left to right will collide with each car moving right to left\n        return n * n; // Total collisions = n (left to right) * n (right to left)\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 5; // Example input\n        System.out.println(\"Number of collisions: \" + solution.car_race_collision(n));\n    }\n}\n"}
{"task_id": "Java/67", "generation": "import java.util.*;\n\nclass Solution {\n    public int fruit_distribution(String s, int n) {\n        // Split the string to extract the number of apples and oranges\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0]);  // The first part is the number of apples\n        int oranges = Integer.parseInt(parts[2]); // The third part is the number of oranges\n        \n        // Calculate the number of mangoes\n        int mangoes = n - apples - oranges;\n        return mangoes;\n    }\n}\n"}
{"task_id": "Java/40", "generation": "class Solution {\n    /**\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triples_sum_to_zero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triples_sum_to_zero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triples_sum_to_zero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triples_sum_to_zero(Arrays.asList(1))\n    false\n     */\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        // Convert the List to an array for easier manipulation\n        Integer[] arr = l.toArray(new Integer[0]);\n        Arrays.sort(arr); // Sort the array\n        \n        int n = arr.length;\n        \n        // Iterate through the array\n        for (int i = 0; i < n - 2; i++) {\n            // Skip duplicates for the first element\n            if (i > 0 && arr[i].equals(arr[i - 1])) {\n                continue;\n            }\n            \n            int left = i + 1; // Start pointer\n            int right = n - 1; // End pointer\n            \n            while (left < right) {\n                int sum = arr[i] + arr[left] + arr[right];\n                \n                if (sum == 0) {\n                    return true; // Found a triplet\n                } else if (sum < 0) {\n                    left++; // Move left pointer to the right to increase the sum\n                } else {\n                    right--; // Move right pointer to the left to decrease the sum\n                }\n            }\n        }\n        \n        return false; // No triplet found\n    }\n}\n"}
{"task_id": "Java/33", "generation": "class Solution {\n    public List<Integer> sort_third(List<Integer> l) {\n        // Create a list to hold the values at indices divisible by 3\n        List<Integer> divisibleByThreeValues = new ArrayList<>();\n        \n        // Collect values at indices divisible by 3\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                divisibleByThreeValues.add(l.get(i));\n            }\n        }\n        \n        // Sort the collected values\n        Collections.sort(divisibleByThreeValues);\n        \n        // Create a new list to hold the result\n        List<Integer> result = new ArrayList<>(l);\n        \n        // Replace the values at indices divisible by 3 with sorted values\n        int sortedIndex = 0;\n        for (int i = 0; i < result.size(); i++) {\n            if (i % 3 == 0) {\n                result.set(i, divisibleByThreeValues.get(sortedIndex));\n                sortedIndex++;\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.sort_third(Arrays.asList(1, 2, 3))); // [1, 2, 3]\n        System.out.println(solution.sort_third(Arrays.asList(5, 6, 3, 4, 8, 9, 2))); // [2, 6, 3, 4, 8, 9, 5]\n    }\n}\n"}
{"task_id": "Java/136", "generation": "class Solution {\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        Optional<Integer> largestNegative = Optional.empty();\n        Optional<Integer> smallestPositive = Optional.empty();\n\n        for (Integer num : lst) {\n            if (num < 0) {\n                if (largestNegative.isEmpty() || num > largestNegative.get()) {\n                    largestNegative = Optional.of(num);\n                }\n            } else if (num > 0) {\n                if (smallestPositive.isEmpty() || num < smallestPositive.get()) {\n                    smallestPositive = Optional.of(num);\n                }\n            }\n        }\n\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.largest_smallest_integers(Arrays.asList(2, 4, 1, 3, 5, 7))); // (Optional.empty(), Optional.of(1))\n        System.out.println(solution.largest_smallest_integers(Arrays.asList())); // (Optional.empty(), Optional.empty())\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(0))); // (Optional.empty(), Optional.empty())\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(-1, -2, 0, 1, 2))); // (Optional.of(-1), Optional.of(1))\n    }\n}\n"}
{"task_id": "Java/1", "generation": "class Solution {\n    public List<String> separate_paren_groups(String paren_string) {\n        // Remove spaces from the input string\n        String cleanedString = paren_string.replaceAll(\"\\\\s+\", \"\");\n        List<String> result = new ArrayList<>();\n        StringBuilder currentGroup = new StringBuilder();\n        int balance = 0;\n\n        for (char ch : cleanedString.toCharArray()) {\n            // Append the current character to the current group\n            currentGroup.append(ch);\n            // Update the balance based on the character\n            if (ch == '(') {\n                balance++;\n            } else if (ch == ')') {\n                balance--;\n            }\n\n            // If balance is zero, we have a complete group\n            if (balance == 0) {\n                result.add(currentGroup.toString());\n                currentGroup.setLength(0); // Reset the StringBuilder for the next group\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.separate_paren_groups(\"( ) (( )) (( )( ))\"));\n    }\n}\n"}
{"task_id": "Java/126", "generation": "class Solution {\n    public boolean is_sorted(List<Integer> lst) {\n        // Check if the list is empty or has only one element\n        if (lst.size() <= 1) {\n            return true;\n        }\n\n        // HashMap to count occurrences of each number\n        HashMap<Integer, Integer> countMap = new HashMap<>();\n\n        // Iterate through the list to check sorting and count occurrences\n        for (int i = 0; i < lst.size(); i++) {\n            int current = lst.get(i);\n\n            // Count occurrences\n            countMap.put(current, countMap.getOrDefault(current, 0) + 1);\n            if (countMap.get(current) > 2) {\n                return false; // More than two occurrences\n            }\n\n            // Check if the list is sorted\n            if (i > 0 && current < lst.get(i - 1)) {\n                return false; // Not sorted\n            }\n        }\n\n        return true; // List is sorted and no number appears more than twice\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.is_sorted(Arrays.asList(5))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 3, 4, 5))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 3, 2, 4, 5))); // false\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7))); // false\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 2, 3, 3, 4))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 2, 2, 3, 4))); // false\n    }\n}\n"}
{"task_id": "Java/38", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decode_cyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements back in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(groups.get(i).length() - 1) + groups.get(i).substring(0, groups.get(i).length() - 1));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n"}
{"task_id": "Java/18", "generation": "class Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlapping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    */\n    public int how_many_times(String string, String substring) {\n        if (substring.length() == 0 || string.length() == 0) {\n            return 0;\n        }\n\n        int count = 0;\n        int index = 0;\n\n        while ((index = string.indexOf(substring, index)) != -1) {\n            count++;\n            index++; // Move to the next character for overlapping matches\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.how_many_times(\"\", \"a\")); // Output: 0\n        System.out.println(solution.how_many_times(\"aaa\", \"a\")); // Output: 3\n        System.out.println(solution.how_many_times(\"aaaa\", \"aa\")); // Output: 3\n    }\n}\n"}
{"task_id": "Java/45", "generation": "class Solution {\n    /**\n    Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    */\n    public double triangle_area(double a, double h) {\n        return 0.5 * a * h; // Calculate the area using the formula\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        double area = solution.triangle_area(5, 3);\n        System.out.println(\"Area of the triangle: \" + area); // Output: Area of the triangle: 7.5\n    }\n}\n"}
{"task_id": "Java/81", "generation": "class Solution {\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        \n        for (Double gpa : grades) {\n            if (gpa == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        \n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> grades = Arrays.asList(4.0, 3.0, 1.7, 2.0, 3.5);\n        List<String> letterGrades = solution.numerical_letter_grade(grades);\n        System.out.println(letterGrades); // Output: [A+, B+, C-, C, A-]\n    }\n}\n"}
{"task_id": "Java/26", "generation": "class Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates(Arrays.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n    */\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        // Step 1: Count occurrences of each number\n        Map<Integer, Long> frequencyMap = numbers.stream()\n            .collect(Collectors.groupingBy(n -> n, Collectors.counting()));\n        \n        // Step 2: Filter out numbers that occur more than once\n        List<Integer> result = numbers.stream()\n            .filter(n -> frequencyMap.get(n) == 1)\n            .collect(Collectors.toList());\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> input = Arrays.asList(1, 2, 3, 2, 4);\n        List<Integer> output = solution.remove_duplicates(input);\n        System.out.println(output); // Output: [1, 3, 4]\n    }\n}\n"}
{"task_id": "Java/134", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        // Strip any trailing spaces from the string\n        txt = txt.trim();\n        \n        // Check if the string is empty after trimming\n        if (txt.isEmpty()) {\n            return false;\n        }\n        \n        // Get the last character of the string\n        char lastChar = txt.charAt(txt.length() - 1);\n        \n        // Check if the last character is an alphabetical character\n        return Character.isLetter(lastChar) && (txt.length() == 1 || txt.charAt(txt.length() - 2) == ' ');\n    }\n}\n"}
{"task_id": "Java/76", "generation": "class Solution {\n    public boolean is_simple_power(int x, int n) {\n        // Handle special cases\n        if (n <= 1) {\n            return x == n; // n must be 1 to return true for any x\n        }\n        if (x < 1) {\n            return false; // x must be at least 1\n        }\n        \n        int power = 1; // Start with n^0\n        while (power < x) {\n            power *= n; // Compute n^k\n        }\n        \n        return power == x; // Check if we found n^k = x\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.is_simple_power(1, 4)); // true\n        System.out.println(solution.is_simple_power(2, 2)); // true\n        System.out.println(solution.is_simple_power(8, 2)); // true\n        System.out.println(solution.is_simple_power(3, 2)); // false\n        System.out.println(solution.is_simple_power(3, 1)); // false\n        System.out.println(solution.is_simple_power(5, 3)); // false\n    }\n}\n"}
{"task_id": "Java/120", "generation": "class Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Step 1: Sort the array in descending order\n        Collections.sort(arr, Collections.reverseOrder());\n        \n        // Step 2: Get the first k elements\n        List<Integer> maxKElements = arr.subList(0, k);\n        \n        // Step 3: Sort the k elements in ascending order\n        Collections.sort(maxKElements);\n        \n        return maxKElements;\n    }\n}\n"}
{"task_id": "Java/47", "generation": "class Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    8.0\n    */\n    public double median(List<Integer> l) {\n        // Step 1: Sort the list\n        Collections.sort(l);\n        \n        // Step 2: Get the size of the list\n        int size = l.size();\n        \n        // Step 3: Calculate the median\n        if (size % 2 == 1) {\n            // If odd, return the middle element\n            return l.get(size / 2);\n        } else {\n            // If even, return the average of the two middle elements\n            return (l.get(size / 2 - 1) + l.get(size / 2)) / 2.0;\n        }\n    }\n    \n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.median(Arrays.asList(3, 1, 2, 4, 5))); // Output: 3.0\n        System.out.println(sol.median(Arrays.asList(-10, 4, 6, 1000, 10, 20))); // Output: 8.0\n    }\n}\n"}
{"task_id": "Java/78", "generation": "class Solution {\n    public int hex_key(String num) {\n        // Set of prime hexadecimal digits\n        Set<Character> primeHexDigits = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        int count = 0;\n        \n        // Iterate through each character in the input string\n        for (char ch : num.toCharArray()) {\n            // Check if the character is a prime hexadecimal digit\n            if (primeHexDigits.contains(ch)) {\n                count++;\n            }\n        }\n        \n        return count; // Return the count of prime hexadecimal digits\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.hex_key(\"AB\")); // Output: 1\n        System.out.println(solution.hex_key(\"1077E\")); // Output: 2\n        System.out.println(solution.hex_key(\"ABED1A33\")); // Output: 4\n        System.out.println(solution.hex_key(\"123456789ABCDEF0\")); // Output: 6\n        System.out.println(solution.hex_key(\"2020\")); // Output: 2\n    }\n}\n"}
{"task_id": "Java/129", "generation": "class Solution {\n    private List<Integer> bestPath;\n    \n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        bestPath = new ArrayList<>(Collections.nCopies(k, Integer.MAX_VALUE));\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                List<Integer> currentPath = new ArrayList<>();\n                dfs(grid, i, j, k, currentPath);\n            }\n        }\n        \n        return bestPath;\n    }\n    \n    private void dfs(List<List<Integer>> grid, int x, int y, int k, List<Integer> currentPath) {\n        if (currentPath.size() == k) {\n            if (isLexicographicallySmaller(currentPath, bestPath)) {\n                bestPath = new ArrayList<>(currentPath);\n            }\n            return;\n        }\n        \n        // Add current cell value to the path\n        currentPath.add(grid.get(x).get(y));\n        \n        // Explore neighbors\n        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}}; // right, down, left, up\n        for (int[] dir : directions) {\n            int newX = x + dir[0];\n            int newY = y + dir[1];\n            if (newX >= 0 && newX < grid.size() && newY >= 0 && newY < grid.size()) {\n                dfs(grid, newX, newY, k, currentPath);\n            }\n        }\n        \n        // Backtrack\n        currentPath.remove(currentPath.size() - 1);\n    }\n    \n    private boolean isLexicographicallySmaller(List<Integer> path1, List<Integer> path2) {\n        for (int i = 0; i < path1.size(); i++) {\n            if (path1.get(i) < path2.get(i)) {\n                return true;\n            } else if (path1.get(i) > path2.get(i)) {\n                return false;\n            }\n        }\n        return false; // They are equal\n    }\n}\n"}
{"task_id": "Java/59", "generation": "class Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    */\n    public int largest_prime_factor(int n) {\n        int largestFactor = -1;\n\n        // Check for number of 2s that divide n\n        while (n % 2 == 0) {\n            largestFactor = 2;\n            n /= 2;\n        }\n\n        // n must be odd at this point, thus a skip of 2 (i.e., check only odd numbers)\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            // While i divides n, set largestFactor and divide n\n            while (n % i == 0) {\n                largestFactor = i;\n                n /= i;\n            }\n        }\n\n        // This condition is to check if n is a prime number greater than 2\n        if (n > 2) {\n            largestFactor = n;\n        }\n\n        return largestFactor;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.largest_prime_factor(13195)); // Output: 29\n        System.out.println(solution.largest_prime_factor(2048));  // Output: 2\n    }\n}\n"}
{"task_id": "Java/123", "generation": "class Solution {\n    public List<Integer> get_odd_collatz(int n) {\n        Set<Integer> oddNumbers = new HashSet<>(); // Use a Set to avoid duplicates\n        while (n != 1) {\n            if (n % 2 != 0) { // Check if n is odd\n                oddNumbers.add(n);\n            }\n            // Apply the Collatz rules\n            if (n % 2 == 0) {\n                n = n / 2; // n is even\n            } else {\n                n = 3 * n + 1; // n is odd\n            }\n        }\n        // Add 1 to the set as it is part of the sequence\n        oddNumbers.add(1);\n        \n        // Convert the set to a list and sort it\n        List<Integer> result = new ArrayList<>(oddNumbers);\n        Collections.sort(result);\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.get_odd_collatz(5)); // Output: [1, 5]\n    }\n}\n"}
{"task_id": "Java/74", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        int totalCharsLst1 = 0;\n        int totalCharsLst2 = 0;\n\n        for (String s : lst1) {\n            totalCharsLst1 += s.length();\n        }\n\n        for (String s : lst2) {\n            totalCharsLst2 += s.length();\n        }\n\n        if (totalCharsLst1 < totalCharsLst2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n"}
{"task_id": "Java/21", "generation": "class Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1.\n    >>> rescale_to_unit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    */\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        // Check if the input list is valid\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements.\");\n        }\n\n        // Find the minimum and maximum values\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n\n        // Create a new list to store the rescaled values\n        List<Double> rescaledValues = new ArrayList<>();\n\n        // Apply the linear transformation to each number\n        for (Double number : numbers) {\n            double rescaledValue = (number - min) / (max - min);\n            rescaledValues.add(rescaledValue);\n        }\n\n        return rescaledValues;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> result = solution.rescale_to_unit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0));\n        System.out.println(result); // Output: [0.0, 0.25, 0.5, 0.75, 1.0]\n    }\n}\n"}
{"task_id": "Java/48", "generation": "class Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    */\n    public boolean is_palindrome(String text) {\n        // A string is a palindrome if it is equal to its reverse\n        int left = 0;\n        int right = text.length() - 1;\n\n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false; // Not a palindrome\n            }\n            left++;\n            right--;\n        }\n        return true; // It's a palindrome\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.is_palindrome(\"\")); // true\n        System.out.println(solution.is_palindrome(\"aba\")); // true\n        System.out.println(solution.is_palindrome(\"aaaaa\")); // true\n        System.out.println(solution.is_palindrome(\"zbcd\")); // false\n    }\n}\n"}
{"task_id": "Java/13", "generation": "class Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    */\n    public int greatest_common_divisor(int a, int b) {\n        // Ensure a and b are non-negative\n        a = Math.abs(a);\n        b = Math.abs(b);\n        \n        // Use the Euclidean algorithm\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        \n        return a;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.greatest_common_divisor(3, 5)); // Output: 1\n        System.out.println(solution.greatest_common_divisor(25, 15)); // Output: 5\n    }\n}\n"}
{"task_id": "Java/42", "generation": "class Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incr_list(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incr_list(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    */\n    public List<Integer> incr_list(List<Integer> l) {\n        return l.stream()\n                .map(x -> x + 1) // Increment each element by 1\n                .collect(Collectors.toList()); // Collect the results into a new list\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.incr_list(Arrays.asList(1, 2, 3))); // Output: [2, 3, 4]\n        System.out.println(solution.incr_list(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))); // Output: [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    }\n}\n"}
{"task_id": "Java/84", "generation": "class Solution {\n    public String solve(int N) {\n        // Step 1: Convert N to a string to iterate through its digits\n        String numberStr = Integer.toString(N);\n        int sum = 0;\n\n        // Step 2: Calculate the sum of the digits\n        for (char digit : numberStr.toCharArray()) {\n            sum += Character.getNumericValue(digit);\n        }\n\n        // Step 3: Convert the sum to binary format\n        String binarySum = Integer.toBinaryString(sum);\n\n        // Step 4: Return the binary representation\n        return binarySum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.solve(1000)); // Output: \"1\"\n        System.out.println(solution.solve(150));  // Output: \"110\"\n        System.out.println(solution.solve(147));  // Output: \"1100\"\n    }\n}\n"}
{"task_id": "Java/140", "generation": "class Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    */\n    public String fix_spaces(String text) {\n        // Step 1: Replace all spaces with underscores\n        String result = text.replace(\" \", \"_\");\n        \n        // Step 2: Replace sequences of more than 2 underscores with a single hyphen\n        // We use regex to find sequences of underscores\n        result = result.replaceAll(\"_{3,}\", \"-\");\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.fix_spaces(\"Example\"));        // \"Example\"\n        System.out.println(solution.fix_spaces(\"Example 1\"));      // \"Example_1\"\n        System.out.println(solution.fix_spaces(\" Example 2\"));     // \"_Example_2\"\n        System.out.println(solution.fix_spaces(\" Example   3\"));   // \"_Example-3\"\n    }\n}\n"}
{"task_id": "Java/92", "generation": "class Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) -> true\n\n    any_int(3, 2, 2) -> false\n\n    any_int(3, -2, 1) -> true\n\n    any_int(3.6, -2.2, 2) -> false\n    */\n    public boolean any_int(Object x, Object y, Object z) {\n        // Check if all inputs are instances of Integer\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int a = (Integer) x;\n            int b = (Integer) y;\n            int c = (Integer) z;\n\n            // Check if any number is equal to the sum of the other two\n            return (a == b + c) || (b == a + c) || (c == a + b);\n        }\n        // Return false if any input is not an integer\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.any_int(5, 2, 7)); // true\n        System.out.println(solution.any_int(3, 2, 2)); // false\n        System.out.println(solution.any_int(3, -2, 1)); // true\n        System.out.println(solution.any_int(3.6, -2.2, 2)); // false\n    }\n}\n"}
{"task_id": "Java/143", "generation": "class Solution {\n    // Function to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) return false; // 0 and 1 are not prime numbers\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) return false; // Found a divisor, not prime\n        }\n        return true; // No divisors found, it's prime\n    }\n\n    public String words_in_sentence(String sentence) {\n        // Split the sentence into words\n        String[] words = sentence.split(\" \");\n        List<String> primeLengthWords = new ArrayList<>();\n\n        // Iterate through each word\n        for (String word : words) {\n            int length = word.length();\n            // Check if the length of the word is prime\n            if (isPrime(length)) {\n                primeLengthWords.add(word); // Add to the list if prime\n            }\n        }\n\n        // Join the words with prime lengths into a single string\n        return String.join(\" \", primeLengthWords);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.words_in_sentence(\"This is a test\")); // Output: \"is\"\n        System.out.println(solution.words_in_sentence(\"lets go for swimming\")); // Output: \"go for\"\n    }\n}\n"}
{"task_id": "Java/148", "generation": "class Solution {\n    public List<String> bf(String planet1, String planet2) {\n        // List of planets in order from the Sun\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        \n        // Check if both planets are valid\n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return new ArrayList<>(); // Return an empty list if either planet is invalid\n        }\n        \n        // Get the indices of the planets\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        \n        // Ensure index1 is less than index2\n        if (index1 > index2) {\n            // Swap the indices if planet1 is further from the Sun than planet2\n            int temp = index1;\n            index1 = index2;\n            index2 = temp;\n        }\n        \n        // Create a list to hold the planets in between\n        List<String> result = new ArrayList<>();\n        \n        // Add planets between index1 and index2\n        for (int i = index1 + 1; i < index2; i++) {\n            result.add(planets.get(i));\n        }\n        \n        return result; // Return the list of planets in between\n    }\n}\n"}
{"task_id": "Java/115", "generation": "class Solution {\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        int totalOperations = 0;\n\n        for (List<Integer> well : grid) {\n            int waterUnits = 0;\n\n            // Count the number of water units (1s) in the current well (row)\n            for (Integer unit : well) {\n                if (unit == 1) {\n                    waterUnits++;\n                }\n            }\n\n            // Calculate the number of times we need to lower the bucket for this well\n            if (waterUnits > 0) {\n                totalOperations += (waterUnits + capacity - 1) / capacity; // This is equivalent to Math.ceil(waterUnits / capacity)\n            }\n        }\n\n        return totalOperations;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<List<Integer>> grid1 = Arrays.asList(\n            Arrays.asList(0, 0, 1, 0),\n            Arrays.asList(0, 1, 0, 0),\n            Arrays.asList(1, 1, 1, 1)\n        );\n        int capacity1 = 1;\n        System.out.println(solution.max_fill(grid1, capacity1)); // Output: 6\n\n        // Test case 2\n        List<List<Integer>> grid2 = Arrays.asList(\n            Arrays.asList(0, 0, 1, 1),\n            Arrays.asList(0, 0, 0, 0),\n            Arrays.asList(1, 1, 1, 1),\n            Arrays.asList(0, 1, 1, 1)\n        );\n        int capacity2 = 2;\n        System.out.println(solution.max_fill(grid2, capacity2)); // Output: 5\n\n        // Test case 3\n        List<List<Integer>> grid3 = Arrays.asList(\n            Arrays.asList(0, 0, 0),\n            Arrays.asList(0, 0, 0)\n        );\n        int capacity3 = 5;\n        System.out.println(solution.max_fill(grid3, capacity3)); // Output: 0\n    }\n}\n"}
{"task_id": "Java/71", "generation": "class Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    */\n    public double triangle_area(double a, double b, double c) {\n        // Check for valid triangle using the triangle inequality theorem\n        if (a + b > c && a + c > b && b + c > a) {\n            // Calculate the semi-perimeter\n            double s = (a + b + c) / 2;\n            // Calculate the area using Heron's formula\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            // Return the area rounded to 2 decimal points\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            // Return -1 if the sides do not form a valid triangle\n            return -1;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.triangle_area(3, 4, 5)); // Output: 6.00\n        System.out.println(solution.triangle_area(1, 2, 10)); // Output: -1\n    }\n}\n"}
{"task_id": "Java/163", "generation": "class Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order. Please note that the even digits refer to even numbers less than 10.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n     */\n    public List<Integer> generate_integers(int a, int b) {\n        // Create a set to store even digits\n        Set<Integer> evenDigits = new HashSet<>(Arrays.asList(0, 2, 4, 6, 8));\n        List<Integer> result = new ArrayList<>();\n\n        // Determine the range\n        int start = Math.min(a, b);\n        int end = Math.max(a, b);\n\n        // Collect even digits in the range\n        for (int digit : evenDigits) {\n            if (digit >= start && digit <= end) {\n                result.add(digit);\n            }\n        }\n\n        // Sort the result list\n        Collections.sort(result);\n        return result;\n    }\n}\n"}
{"task_id": "Java/19", "generation": "class Solution {\n    /**\n    Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest.\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    */\n    public String sort_numbers(String numbers) {\n        // Map to convert words to their corresponding numeric values\n        Map<String, Integer> wordToNumber = new HashMap<>();\n        wordToNumber.put(\"zero\", 0);\n        wordToNumber.put(\"one\", 1);\n        wordToNumber.put(\"two\", 2);\n        wordToNumber.put(\"three\", 3);\n        wordToNumber.put(\"four\", 4);\n        wordToNumber.put(\"five\", 5);\n        wordToNumber.put(\"six\", 6);\n        wordToNumber.put(\"seven\", 7);\n        wordToNumber.put(\"eight\", 8);\n        wordToNumber.put(\"nine\", 9);\n        \n        // Split the input string into words\n        String[] words = numbers.split(\" \");\n        \n        // Sort the words based on their numeric values\n        Arrays.sort(words, Comparator.comparingInt(wordToNumber::get));\n        \n        // Join the sorted words back into a single string\n        return String.join(\" \", words);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sort_numbers(\"three one five\")); // Output: \"one three five\"\n        System.out.println(solution.sort_numbers(\"nine eight seven six five four three two one zero\")); // Output: \"zero one two three four five six seven eight nine\"\n    }\n}\n"}
{"task_id": "Java/118", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String get_closest_vowel(String word) {\n        String vowels = \"aeiouAEIOU\";\n        int n = word.length();\n        \n        // Start from the end of the word and look for consonants\n        for (int i = n - 1; i > 1; i--) {\n            if (vowels.indexOf(word.charAt(i)) == -1 && vowels.indexOf(word.charAt(i - 1)) != -1) {\n                // Found a consonant followed by a vowel\n                for (int j = i - 1; j > 0; j--) {\n                    if (vowels.indexOf(word.charAt(j)) != -1 && vowels.indexOf(word.charAt(j - 1)) == -1) {\n                        return String.valueOf(word.charAt(j));\n                    }\n                }\n            }\n        }\n        return \"\";\n    }\n}\n"}
{"task_id": "Java/101", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> words_string(String s) {\n        // Replace commas with spaces and split the string by whitespace\n        String[] wordsArray = s.replace(\",\", \" \").split(\"\\\\s+\");\n        List<String> wordsList = new ArrayList<>();\n        \n        // Add non-empty words to the list\n        for (String word : wordsArray) {\n            if (!word.isEmpty()) {\n                wordsList.add(word);\n            }\n        }\n        \n        return wordsList;\n    }\n}\n"}
{"task_id": "Java/151", "generation": "class Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    double_the_difference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    double_the_difference(Arrays.asList(-1, -2, 0)) == 0\n    double_the_difference(Arrays.asList(9, -2)) == 81\n    double_the_difference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int double_the_difference(List<Object> lst) {\n        int sum = 0;\n\n        for (Object obj : lst) {\n            // Check if the object is an instance of Integer\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n\n                // Check if the number is non-negative and odd\n                if (num >= 0 && num % 2 != 0) {\n                    sum += num * num; // Add the square of the odd number\n                }\n            }\n        }\n\n        return sum; // Return the total sum\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.double_the_difference(Arrays.asList(1, 3, 2, 0))); // Output: 10\n        System.out.println(solution.double_the_difference(Arrays.asList(-1, -2, 0))); // Output: 0\n        System.out.println(solution.double_the_difference(Arrays.asList(9, -2))); // Output: 81\n        System.out.println(solution.double_the_difference(Arrays.asList(0))); // Output: 0\n        System.out.println(solution.double_the_difference(Arrays.asList())); // Output: 0\n    }\n}\n"}
{"task_id": "Java/133", "generation": "class Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sum_squares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            // Round up to the nearest integer\n            int rounded = (int) Math.ceil(num);\n            // Square the rounded integer and add to sum\n            sum += rounded * rounded;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/144", "generation": "class Solution {\n    public boolean simplify(String x, String n) {\n        // Split the fractions into numerator and denominator\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n        \n        // Parse the numerators and denominators\n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n        \n        // Calculate the product's numerator and denominator\n        int productNumerator = xNumerator * nNumerator;\n        int productDenominator = xDenominator * nDenominator;\n        \n        // Check if the product is a whole number\n        return productNumerator % productDenominator == 0;\n    }\n}\n"}
{"task_id": "Java/158", "generation": "class Solution {\n    public String find_max(List<String> words) {\n        String maxWord = \"\";\n        int maxUniqueCount = 0;\n\n        for (String word : words) {\n            // Use a Set to find unique characters\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            int uniqueCount = uniqueChars.size();\n\n            // Check if we found a new maximum or need to update for lexicographical order\n            if (uniqueCount > maxUniqueCount || \n                (uniqueCount == maxUniqueCount && word.compareTo(maxWord) < 0)) {\n                maxWord = word;\n                maxUniqueCount = uniqueCount;\n            }\n        }\n\n        return maxWord;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.find_max(Arrays.asList(\"name\", \"of\", \"string\"))); // Output: \"string\"\n        System.out.println(solution.find_max(Arrays.asList(\"name\", \"enam\", \"game\"))); // Output: \"enam\"\n        System.out.println(solution.find_max(Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\"))); // Output: \"aaaaaaa\"\n    }\n}\n"}
{"task_id": "Java/63", "generation": "class Solution {\n    public int fibfib(int n) {\n        // Handle base cases\n        if (n == 0 || n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n\n        // Initialize an array to store the fibfib values\n        int[] fibfib = new int[n + 1];\n        fibfib[0] = 0; // fibfib(0)\n        fibfib[1] = 0; // fibfib(1)\n        fibfib[2] = 1; // fibfib(2)\n\n        // Compute the fibfib values iteratively\n        for (int i = 3; i <= n; i++) {\n            fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n        }\n\n        // Return the n-th fibfib number\n        return fibfib[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fibfib(1)); // Output: 0\n        System.out.println(solution.fibfib(5)); // Output: 4\n        System.out.println(solution.fibfib(8)); // Output: 24\n    }\n}\n"}
{"task_id": "Java/37", "generation": "class Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indices, while its values at the even indices are equal\n    to the values of the even indices of l, but sorted.\n    >>> sort_even(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sort_even(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n    */\n    public List<Integer> sort_even(List<Integer> l) {\n        // Create a list to store even indexed values\n        List<Integer> evenValues = new ArrayList<>();\n        \n        // Extract even indexed values\n        for (int i = 0; i < l.size(); i += 2) {\n            evenValues.add(l.get(i));\n        }\n        \n        // Sort the even indexed values\n        Collections.sort(evenValues);\n        \n        // Create a new list to store the result\n        List<Integer> result = new ArrayList<>(l);\n        \n        // Place sorted even indexed values back into the result list\n        for (int i = 0; i < evenValues.size(); i++) {\n            result.set(i * 2, evenValues.get(i));\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sort_even(Arrays.asList(1, 2, 3))); // Output: [1, 2, 3]\n        System.out.println(solution.sort_even(Arrays.asList(5, 6, 3, 4))); // Output: [3, 6, 5, 4]\n    }\n}\n"}
{"task_id": "Java/159", "generation": "class Solution {\n    public List<Integer> eat(int number, int need, int remaining) {\n        // Total carrots needed to eat\n        int totalNeeded = number + need;\n        \n        // Total carrots available to eat\n        int totalAvailable = number + remaining;\n        \n        // Calculate how many carrots can actually be eaten\n        int carrotsEaten = Math.min(totalNeeded, totalAvailable);\n        \n        // Calculate the total number of eaten carrots\n        int totalEaten = carrotsEaten;\n        \n        // Calculate the remaining carrots after eating\n        int remainingCarrots = totalAvailable - carrotsEaten;\n        \n        // Prepare the result as a list\n        return Arrays.asList(totalEaten, remainingCarrots);\n    }\n}\n"}
{"task_id": "Java/52", "generation": "class Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> below_threshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n    */\n    public boolean below_threshold(List<Integer> l, int t) {\n        for (int num : l) {\n            if (num >= t) {\n                return false; // Found a number that is not below the threshold\n            }\n        }\n        return true; // All numbers are below the threshold\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.below_threshold(Arrays.asList(1, 2, 4, 10), 100)); // true\n        System.out.println(solution.below_threshold(Arrays.asList(1, 20, 4, 10), 5)); // false\n    }\n}\n"}
{"task_id": "Java/137", "generation": "class Solution {\n    public Optional<Object> compare_one(Object a, Object b) {\n        // Convert both inputs to comparable values\n        Double valueA = convertToComparable(a);\n        Double valueB = convertToComparable(b);\n        \n        // Check if values are equal\n        if (valueA.equals(valueB)) {\n            return Optional.empty();\n        }\n        \n        // Return the larger value in its original type\n        if (valueA > valueB) {\n            return Optional.of(a);\n        } else {\n            return Optional.of(b);\n        }\n    }\n\n    private Double convertToComparable(Object obj) {\n        if (obj instanceof Number) {\n            return ((Number) obj).doubleValue();\n        } else if (obj instanceof String) {\n            String str = (String) obj;\n            // Replace comma with dot for parsing\n            str = str.replace(',', '.');\n            try {\n                return Double.parseDouble(str);\n            } catch (NumberFormatException e) {\n                throw new IllegalArgumentException(\"Invalid number format: \" + str);\n            }\n        } else {\n            throw new IllegalArgumentException(\"Unsupported type: \" + obj.getClass());\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.compare_one(1, 2.5)); // Optional[2.5]\n        System.out.println(solution.compare_one(1, \"2,3\")); // Optional[2,3]\n        System.out.println(solution.compare_one(\"5,1\", \"6\")); // Optional[6]\n        System.out.println(solution.compare_one(\"1\", 1)); // Optional.empty\n    }\n}\n"}
{"task_id": "Java/154", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean cycpattern_check(String a, String b) {\n        // Check if the length of b is greater than a\n        if (b.length() > a.length()) {\n            return false;\n        }\n        // Create a new string by concatenating b with itself\n        String b_rotations = b + b;\n        // Check if a is a substring of b_rotations\n        return b_rotations.contains(a);\n    }\n}\n"}
{"task_id": "Java/44", "generation": "class Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\n    >>> change_base(7, 2)\n    \"111\"\n    */\n    public String change_base(int x, int base) {\n        if (x == 0) {\n            return \"0\"; // Handle the case where x is 0\n        }\n\n        StringBuilder result = new StringBuilder();\n        \n        while (x > 0) {\n            int remainder = x % base; // Get the remainder\n            result.append(remainder); // Append the remainder to the result\n            x = x / base; // Update x by dividing it by the base\n        }\n\n        // The result is in reverse order, so we need to reverse it\n        return result.reverse().toString();\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.change_base(8, 3)); // Output: \"22\"\n        System.out.println(sol.change_base(8, 2)); // Output: \"1000\"\n        System.out.println(sol.change_base(7, 2)); // Output: \"111\"\n    }\n}\n"}
{"task_id": "Java/112", "generation": "class Solution {\n    public List<Object> reverse_delete(String s, String c) {\n        // Create a set of characters to delete\n        Set<Character> charsToDelete = new HashSet<>();\n        for (char ch : c.toCharArray()) {\n            charsToDelete.add(ch);\n        }\n\n        // Build the resulting string by excluding characters in charsToDelete\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!charsToDelete.contains(ch)) {\n                result.append(ch);\n            }\n        }\n\n        // Check if the resulting string is a palindrome\n        String resultString = result.toString();\n        boolean isPalindrome = isPalindrome(resultString);\n\n        // Return the result as a list\n        return Arrays.asList(resultString, isPalindrome);\n    }\n\n    private boolean isPalindrome(String str) {\n        int left = 0;\n        int right = str.length() - 1;\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.reverse_delete(\"abcde\", \"ae\")); // Output: [\"bcd\", false]\n        System.out.println(solution.reverse_delete(\"abcdef\", \"b\")); // Output: [\"acdef\", false]\n        System.out.println(solution.reverse_delete(\"abcdedcba\", \"ab\")); // Output: [\"cdedc\", true]\n    }\n}\n"}
{"task_id": "Java/87", "generation": "class Solution {\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n\n        // Iterate through each row\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            // Iterate through each element in the row\n            for (int j = 0; j < row.size(); j++) {\n                // Check if the current element matches x\n                if (row.get(j) == x) {\n                    // Add the coordinates to the result\n                    result.add(Arrays.asList(i, j));\n                }\n            }\n        }\n\n        // Sort the result by row index (ascending) and then by column index (descending)\n        Collections.sort(result, new Comparator<List<Integer>>() {\n            @Override\n            public int compare(List<Integer> a, List<Integer> b) {\n                // First compare by row index\n                if (!a.get(0).equals(b.get(0))) {\n                    return a.get(0) - b.get(0);\n                }\n                // If row indices are the same, compare by column index (descending)\n                return b.get(1) - a.get(1);\n            }\n        });\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.get_row(Arrays.asList(\n            Arrays.asList(1, 2, 3, 4, 5, 6),\n            Arrays.asList(1, 2, 3, 4, 1, 6),\n            Arrays.asList(1, 2, 3, 4, 5, 1)\n        ), 1)); // Output: [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n\n        System.out.println(sol.get_row(Arrays.asList(), 1)); // Output: []\n\n        System.out.println(sol.get_row(Arrays.asList(Arrays.asList(), Arrays.asList(1), Arrays.asList(1, 2, 3)), 3)); // Output: [[2, 2]]\n    }\n}\n"}
{"task_id": "Java/113", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String string : lst) {\n            int oddCount = 0;\n            for (char ch : string.toCharArray()) {\n                if (Character.getNumericValue(ch) % 2 != 0) {\n                    oddCount++;\n                }\n            }\n            String output = String.format(\"the number of odd elements %dn the str%dng %d of the %dnput.\", oddCount, oddCount, oddCount, oddCount);\n            result.add(output);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/29", "generation": "class Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix(List.of(), \"a\")\n    []\n    >>> filter_by_prefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n    */\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.filter_by_prefix(List.of(), \"a\")); // []\n        System.out.println(solution.filter_by_prefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")); // [\"abc\", \"array\"]\n    }\n}\n"}
{"task_id": "Java/6", "generation": "class Solution {\n    public List<Integer> parse_nested_parens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        String[] groups = paren_string.split(\" \"); // Split the input string by spaces\n\n        for (String group : groups) {\n            int currentLevel = 0; // Current level of nesting\n            int maxLevel = 0; // Maximum level of nesting for this group\n\n            for (char ch : group.toCharArray()) {\n                if (ch == '(') {\n                    currentLevel++; // Increment for opening parenthesis\n                    maxLevel = Math.max(maxLevel, currentLevel); // Update max level\n                } else if (ch == ')') {\n                    currentLevel--; // Decrement for closing parenthesis\n                }\n            }\n            result.add(maxLevel); // Add the maximum level for this group to the result\n        }\n\n        return result; // Return the list of maximum nesting levels\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.parse_nested_parens(\"(()()) ((())) () ((())()())\")); // Output: [2, 3, 1, 3]\n    }\n}\n"}
{"task_id": "Java/46", "generation": "class Solution {\n    public int fib4(int n) {\n        // Base cases\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n == 3) return 0;\n\n        // Array to store the last four values of the sequence\n        int[] fib = new int[4];\n        fib[0] = 0; // fib4(0)\n        fib[1] = 0; // fib4(1)\n        fib[2] = 2; // fib4(2)\n        fib[3] = 0; // fib4(3)\n\n        // Compute fib4(n) iteratively\n        for (int i = 4; i <= n; i++) {\n            int nextFib = fib[0] + fib[1] + fib[2] + fib[3];\n            // Shift the values for the next iteration\n            fib[0] = fib[1];\n            fib[1] = fib[2];\n            fib[2] = fib[3];\n            fib[3] = nextFib;\n        }\n\n        return fib[3]; // fib4(n) is stored in fib[3]\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fib4(5)); // Output: 4\n        System.out.println(solution.fib4(6)); // Output: 8\n        System.out.println(solution.fib4(7)); // Output: 14\n    }\n}\n"}
{"task_id": "Java/16", "generation": "class Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    */\n    public int count_distinct_characters(String string) {\n        // Create a HashSet to store distinct characters\n        HashSet<Character> distinctCharacters = new HashSet<>();\n        \n        // Iterate through each character in the string\n        for (char c : string.toCharArray()) {\n            // Convert character to lowercase and add to the set\n            distinctCharacters.add(Character.toLowerCase(c));\n        }\n        \n        // The size of the set is the number of distinct characters\n        return distinctCharacters.size();\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.count_distinct_characters(\"xyzXYZ\")); // Output: 3\n        System.out.println(solution.count_distinct_characters(\"Jerry\"));  // Output: 4\n    }\n}\n"}
{"task_id": "Java/99", "generation": "class Solution {\n    public int closest_integer(String value) {\n        // Parse the string to a double\n        double number = Double.parseDouble(value);\n        \n        // Get the floor and ceiling of the number\n        int lower = (int) Math.floor(number);\n        int upper = (int) Math.ceil(number);\n        \n        // Check the distance to the lower and upper integers\n        double distanceToLower = Math.abs(number - lower);\n        double distanceToUpper = Math.abs(number - upper);\n        \n        // If the distances are equal, round away from zero\n        if (distanceToLower == distanceToUpper) {\n            if (number > 0) {\n                return upper; // round up for positive numbers\n            } else {\n                return lower; // round down for negative numbers\n            }\n        }\n        \n        // Return the closest integer\n        return (distanceToLower < distanceToUpper) ? lower : upper;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.closest_integer(\"10\"));     // Output: 10\n        System.out.println(solution.closest_integer(\"15.3\"));   // Output: 15\n        System.out.println(solution.closest_integer(\"14.5\"));   // Output: 15\n        System.out.println(solution.closest_integer(\"-14.5\"));  // Output: -15\n        System.out.println(solution.closest_integer(\"0.5\"));    // Output: 1\n        System.out.println(solution.closest_integer(\"-0.5\"));   // Output: -1\n    }\n}\n"}
{"task_id": "Java/122", "generation": "class Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int add_elements(List<Integer> arr, int k) {\n        int sum = 0;\n        \n        // Iterate through the first k elements\n        for (int i = 0; i < k; i++) {\n            int num = arr.get(i);\n            // Check if the number has at most two digits\n            if (num >= -99 && num <= 99) {\n                sum += num; // Add to sum if condition is met\n            }\n        }\n        \n        return sum; // Return the final sum\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> arr = Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9);\n        int k = 4;\n        int result = solution.add_elements(arr, k);\n        System.out.println(result); // Output: 24\n    }\n}\n"}
{"task_id": "Java/53", "generation": "class Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    */\n    public int add(int x, int y) {\n        return x + y;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.add(2, 3)); // Output: 5\n        System.out.println(solution.add(5, 7)); // Output: 12\n    }\n}\n"}
{"task_id": "Java/162", "generation": "class Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n    */\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        // Check if the input string is empty\n        if (text == null || text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        // Create a MessageDigest instance for MD5\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        \n        // Compute the hash\n        byte[] messageDigest = md.digest(text.getBytes());\n        \n        // Convert the byte array to a hexadecimal string\n        StringBuilder hexString = new StringBuilder();\n        for (byte b : messageDigest) {\n            String hex = Integer.toHexString(0xff & b);\n            if (hex.length() == 1) {\n                hexString.append('0');\n            }\n            hexString.append(hex);\n        }\n        \n        // Return the MD5 hash as an Optional\n        return Optional.of(hexString.toString());\n    }\n}\n"}
{"task_id": "Java/58", "generation": "class Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n    */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        // Convert lists to sets to remove duplicates\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        \n        // Retain only the elements that are in both sets\n        set1.retainAll(set2);\n        \n        // Convert the set back to a list\n        List<Integer> commonElements = new ArrayList<>(set1);\n        \n        // Sort the list\n        Collections.sort(commonElements);\n        \n        return commonElements;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))); // [1, 5, 653]\n        System.out.println(solution.common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))); // [2, 3]\n    }\n}\n"}
{"task_id": "Java/73", "generation": "class Solution {\n    public int smallest_change(List<Integer> arr) {\n        int left = 0;\n        int right = arr.size() - 1;\n        int changes = 0;\n\n        while (left < right) {\n            if (!arr.get(left).equals(arr.get(right))) {\n                changes++; // We need to change one of these elements\n            }\n            left++;\n            right--;\n        }\n\n        return changes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.smallest_change(Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6))); // Output: 4\n        System.out.println(solution.smallest_change(Arrays.asList(1, 2, 3, 4, 3, 2, 2))); // Output: 1\n        System.out.println(solution.smallest_change(Arrays.asList(1, 2, 3, 2, 1))); // Output: 0\n    }\n}\n"}
{"task_id": "Java/150", "generation": "class Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    */\n    public int x_or_y(int n, int x, int y) {\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    // Helper method to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) return false; // 0 and 1 are not prime numbers\n        if (num <= 3) return true; // 2 and 3 are prime numbers\n\n        // Check for factors from 2 to the square root of num\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false; // Found a factor, not prime\n            }\n        }\n        return true; // No factors found, it's prime\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.x_or_y(7, 34, 12)); // Output: 34\n        System.out.println(solution.x_or_y(15, 8, 5)); // Output: 5\n    }\n}\n"}
{"task_id": "Java/54", "generation": "class Solution {\n    /**\n    Check if two words have the same kind of characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    */\n    public boolean same_chars(String s0, String s1) {\n        Set<Character> set1 = new HashSet<>();\n        Set<Character> set2 = new HashSet<>();\n        \n        // Add characters of the first string to set1\n        for (char c : s0.toCharArray()) {\n            set1.add(c);\n        }\n        \n        // Add characters of the second string to set2\n        for (char c : s1.toCharArray()) {\n            set2.add(c);\n        }\n        \n        // Compare the two sets\n        return set1.equals(set2);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // true\n        System.out.println(solution.same_chars(\"abcd\", \"dddddddabc\")); // true\n        System.out.println(solution.same_chars(\"dddddddabc\", \"abcd\")); // true\n        System.out.println(solution.same_chars(\"eabcd\", \"dddddddabc\")); // false\n        System.out.println(solution.same_chars(\"abcd\", \"dddddddabce\")); // false\n        System.out.println(solution.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // false\n    }\n}\n"}
{"task_id": "Java/108", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int count_nums(List<Integer> arr) {\n        int count = 0;\n        \n        for (int number : arr) {\n            if (sumOfDigits(number) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private int sumOfDigits(int n) {\n        int sum = 0;\n        String numStr = Integer.toString(Math.abs(n));\n        \n        for (int i = 0; i < numStr.length(); i++) {\n            int digit = Character.getNumericValue(numStr.charAt(i));\n            if (n < 0 && i == 0) {\n                sum -= digit; // First signed digit is negative\n            } else {\n                sum += digit;\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/20", "generation": "class Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n    */\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        // Sort the list of numbers\n        Collections.sort(numbers);\n        \n        // Initialize variables to track the closest pair\n        double minDiff = Double.MAX_VALUE;\n        List<Double> closestPair = new ArrayList<>();\n\n        // Iterate through the sorted list to find the closest pair\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double num1 = numbers.get(i);\n            double num2 = numbers.get(i + 1);\n            double diff = num2 - num1;\n\n            // Check if the current pair is closer than the previously found pair\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair.clear();\n                closestPair.add(num1);\n                closestPair.add(num2);\n            }\n        }\n\n        return closestPair;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))); // Output: [2.0, 2.2]\n        System.out.println(solution.find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))); // Output: [2.0, 2.0]\n    }\n}\n"}
{"task_id": "Java/90", "generation": "class Solution {\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        // Use a TreeSet to store unique elements in sorted order\n        TreeSet<Integer> uniqueElements = new TreeSet<>(lst);\n        \n        // Check if there are at least two unique elements\n        if (uniqueElements.size() < 2) {\n            return Optional.empty();\n        }\n        \n        // Get the second smallest element\n        Iterator<Integer> iterator = uniqueElements.iterator();\n        iterator.next(); // Skip the smallest element\n        return Optional.of(iterator.next()); // Return the second smallest element\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.next_smallest(Arrays.asList(1, 2, 3, 4, 5))); // Optional[2]\n        System.out.println(solution.next_smallest(Arrays.asList(5, 1, 4, 3, 2))); // Optional[2]\n        System.out.println(solution.next_smallest(Arrays.asList())); // Optional.empty\n        System.out.println(solution.next_smallest(Arrays.asList(1, 1))); // Optional.empty\n    }\n}\n"}
{"task_id": "Java/131", "generation": "class Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    */\n    public int digits(int n) {\n        int product = 1;\n        boolean hasOddDigit = false;\n\n        while (n > 0) {\n            int digit = n % 10; // Get the last digit\n            if (digit % 2 != 0) { // Check if the digit is odd\n                product *= digit; // Multiply to the product\n                hasOddDigit = true; // Mark that we found an odd digit\n            }\n            n /= 10; // Remove the last digit\n        }\n\n        return hasOddDigit ? product : 0; // Return product or 0 if no odd digits\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.digits(1));    // Output: 1\n        System.out.println(solution.digits(4));    // Output: 0\n        System.out.println(solution.digits(235));  // Output: 15\n        System.out.println(solution.digits(2468)); // Output: 0\n        System.out.println(solution.digits(13579)); // Output: 945\n    }\n}\n"}
{"task_id": "Java/160", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        int result = operand.get(0); // Initialize result with the first operand\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int nextOperand = operand.get(i + 1);\n            switch (op) {\n                case \"+\":\n                    result += nextOperand;\n                    break;\n                case \"-\":\n                    result -= nextOperand;\n                    break;\n                case \"*\":\n                    result *= nextOperand;\n                    break;\n                case \"/\":\n                    result /= nextOperand; // Floor division\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, nextOperand); // Exponentiation\n                    break;\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/17", "generation": "class Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    note last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quarter note, lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parse_music(String string) {\n        List<Integer> beats = new ArrayList<>();\n        String[] notes = string.split(\" \"); // Split the input string by spaces\n\n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    beats.add(4); // Whole note\n                    break;\n                case \"o|\":\n                    beats.add(2); // Half note\n                    break;\n                case \".|\":\n                    beats.add(1); // Quarter note\n                    break;\n                default:\n                    // If the note is not recognized, we can choose to ignore it or handle it as needed\n                    break;\n            }\n        }\n\n        return beats;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> result = solution.parse_music(\"o o| .| o| o| .| .| .| .| o o\");\n        System.out.println(result); // Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    }\n}\n"}
{"task_id": "Java/98", "generation": "class Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper(\"aBCdEf\") returns 1\n    count_upper(\"abcdefg\") returns 0\n    count_upper(\"dBBE\") returns 0\n    */    \n    public int count_upper(String s) {\n        int count = 0;\n        // Define a set of uppercase vowels\n        Set<Character> uppercaseVowels = new HashSet<>(Arrays.asList('A', 'E', 'I', 'O', 'U'));\n        \n        // Loop through the string, checking only even indices\n        for (int i = 0; i < s.length(); i += 2) {\n            char currentChar = s.charAt(i);\n            // Check if the character is an uppercase vowel\n            if (uppercaseVowels.contains(currentChar)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/65", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String circular_shift(int x, int shift) {\n        String str_x = Integer.toString(x);\n        int n = str_x.length();\n        \n        // If shift is greater than the number of digits, reverse the string\n        if (shift > n) {\n            return new StringBuilder(str_x).reverse().toString();\n        }\n        \n        // Perform the circular shift\n        String shifted_str = str_x.substring(n - shift) + str_x.substring(0, n - shift);\n        return shifted_str;\n    }\n}\n"}
{"task_id": "Java/8", "generation": "class Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product(List.of())\n    [0, 1]\n    >>> sum_product(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n    */\n    public List<Integer> sum_product(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n\n        // If the list is empty, return the default values\n        if (numbers.isEmpty()) {\n            return Arrays.asList(sum, product);\n        }\n\n        // Calculate sum and product\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n\n        return Arrays.asList(sum, product);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.sum_product(List.of())); // Output: [0, 1]\n        System.out.println(solution.sum_product(Arrays.asList(1, 2, 3, 4))); // Output: [10, 24]\n        System.out.println(solution.sum_product(Arrays.asList(-1, -2, -3))); // Output: [-6, -6]\n        System.out.println(solution.sum_product(Arrays.asList(0, 1, 2))); // Output: [3, 0]\n    }\n}\n"}
{"task_id": "Java/49", "generation": "class Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    */\n    public int modp(int n, int p) {\n        if (p == 1) {\n            return 0; // Since any number mod 1 is 0\n        }\n        long result = 1; // Use long to prevent overflow\n        long base = 2;   // The base is 2\n        \n        // Exponentiation by squaring\n        while (n > 0) {\n            if ((n & 1) == 1) { // If n is odd\n                result = (result * base) % p;\n            }\n            base = (base * base) % p; // Square the base\n            n >>= 1; // Divide n by 2\n        }\n        \n        return (int) result; // Cast back to int before returning\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.modp(3, 5));    // Output: 3\n        System.out.println(sol.modp(1101, 101)); // Output: 2\n        System.out.println(sol.modp(0, 101));   // Output: 1\n        System.out.println(sol.modp(3, 11));    // Output: 8\n        System.out.println(sol.modp(100, 101));  // Output: 1\n    }\n}\n"}
{"task_id": "Java/153", "generation": "class Solution {\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        String strongestExtension = \"\";\n        int maxStrength = Integer.MIN_VALUE; // Initialize to the smallest possible value\n\n        for (String extension : extensions) {\n            int capCount = 0;\n            int smCount = 0;\n\n            // Count uppercase and lowercase letters\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smCount++;\n                }\n            }\n\n            // Calculate strength\n            int strength = capCount - smCount;\n\n            // Update strongest extension if this one is stronger\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        // Return the result in the required format\n        return class_name + \".\" + strongestExtension;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.Strongest_Extension(\"Slices\", Arrays.asList(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"))); // Output: \"Slices.SErviNGSliCes\"\n        System.out.println(solution.Strongest_Extension(\"my_class\", Arrays.asList(\"AA\", \"Be\", \"CC\"))); // Output: \"my_class.AA\"\n    }\n}\n"}
{"task_id": "Java/96", "generation": "class Solution {\n    public List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<>();\n        \n        // Check for primes less than n\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        \n        return primes;\n    }\n    \n    // Helper function to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) return false; // 0 and 1 are not prime numbers\n        if (num <= 3) return true; // 2 and 3 are prime numbers\n        \n        // Check for factors from 2 to the square root of num\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false; // Found a factor, not prime\n            }\n        }\n        \n        return true; // No factors found, it's prime\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.count_up_to(5));  // Output: [2, 3]\n        System.out.println(solution.count_up_to(11)); // Output: [2, 3, 5, 7]\n        System.out.println(solution.count_up_to(0));  // Output: []\n        System.out.println(solution.count_up_to(20)); // Output: [2, 3, 5, 7, 11, 13, 17, 19]\n        System.out.println(solution.count_up_to(1));  // Output: []\n        System.out.println(solution.count_up_to(18)); // Output: [2, 3, 5, 7, 11, 13, 17]\n    }\n}\n"}
{"task_id": "Java/64", "generation": "class Solution {\n    public int vowels_count(String s) {\n        // Convert the string to lowercase to handle case insensitivity\n        s = s.toLowerCase();\n        int count = 0;\n        \n        // Define a set of vowels\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u'));\n        \n        // Iterate through each character in the string\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            // Check if the character is a vowel\n            if (vowels.contains(c)) {\n                count++;\n            }\n            // Check if the character is 'y' and it's the last character of the string\n            if (c == 'y' && i == s.length() - 1) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.vowels_count(\"abcde\")); // Output: 2\n        System.out.println(solution.vowels_count(\"ACEDY\")); // Output: 3\n    }\n}\n"}
{"task_id": "Java/102", "generation": "class Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    */\n    public int choose_num(int x, int y) {\n        // Check if the range is valid\n        if (x > y) {\n            return -1;\n        }\n        \n        // Start from y and check for the largest even number\n        if (y % 2 == 0) {\n            return y; // y is even\n        } else {\n            // y is odd, check y - 1\n            if (y - 1 >= x) {\n                return y - 1; // y - 1 is even and within the range\n            } else {\n                return -1; // No even number in the range\n            }\n        }\n    }\n}\n"}
{"task_id": "Java/88", "generation": "class Solution {\n    public List<Integer> sort_array(List<Integer> array) {\n        // Step 1: Check if the input list is empty\n        if (array.isEmpty()) {\n            return new ArrayList<>(); // Return an empty list\n        }\n        \n        // Step 2: If the list has only one element, return it\n        if (array.size() == 1) {\n            return new ArrayList<>(array); // Return a new list with the single element\n        }\n        \n        // Step 3: Calculate the sum of the first and last elements\n        int first = array.get(0);\n        int last = array.get(array.size() - 1);\n        int sum = first + last;\n        \n        // Step 4: Sort the list based on the sum being odd or even\n        List<Integer> sortedList = new ArrayList<>(array); // Create a copy of the original list\n        if (sum % 2 == 0) {\n            // Even sum: sort in descending order\n            Collections.sort(sortedList, Collections.reverseOrder());\n        } else {\n            // Odd sum: sort in ascending order\n            Collections.sort(sortedList);\n        }\n        \n        // Step 5: Return the sorted list\n        return sortedList;\n    }\n}\n"}
{"task_id": "Java/146", "generation": "class Solution {\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n\n        for (int num : nums) {\n            // Check if the number is greater than 10\n            if (num > 10) {\n                String numStr = Integer.toString(num);\n                char firstDigit = numStr.charAt(0);\n                char lastDigit = numStr.charAt(numStr.length() - 1);\n\n                // Check if both first and last digits are odd\n                if (isOdd(firstDigit) && isOdd(lastDigit)) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    // Helper method to check if a character representing a digit is odd\n    private boolean isOdd(char digit) {\n        return (digit == '1' || digit == '3' || digit == '5' || digit == '7' || digit == '9');\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.specialFilter(Arrays.asList(15, -73, 14, -15))); // Output: 1\n        System.out.println(solution.specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109))); // Output: 2\n    }\n}\n"}
{"task_id": "Java/30", "generation": "class Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> get_positive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> get_positive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n    */\n    public List<Integer> get_positive(List<Integer> l) {\n        return l.stream()\n                .filter(num -> num > 0) // Filter only positive numbers\n                .collect(Collectors.toList()); // Collect the results into a List\n    }\n}\n"}
{"task_id": "Java/97", "generation": "class Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    */\n    public int multiply(int a, int b) {\n        // Get the unit digits of both numbers\n        int unitDigitA = Math.abs(a) % 10; // Use Math.abs to handle negative numbers\n        int unitDigitB = Math.abs(b) % 10; // Use Math.abs to handle negative numbers\n        \n        // Return the product of the unit digits\n        return unitDigitA * unitDigitB;\n    }\n}\n"}
{"task_id": "Java/95", "generation": "class Solution {\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        // Check if the map is empty\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        boolean allLower = true;\n        boolean allUpper = true;\n\n        for (Object key : dict.keySet()) {\n            // Check if the key is a string\n            if (!(key instanceof String)) {\n                return false;\n            }\n\n            String strKey = (String) key;\n\n            // Check if the key is lowercase or uppercase\n            if (!strKey.equals(strKey.toLowerCase())) {\n                allLower = false;\n            }\n            if (!strKey.equals(strKey.toUpperCase())) {\n                allUpper = false;\n            }\n        }\n\n        // Return true if all keys are either all lower case or all upper case\n        return allLower || allUpper;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.check_dict_case(Map.of(\"a\", \"apple\", \"b\", \"banana\"))); // should return true\n        System.out.println(solution.check_dict_case(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"banana\"))); // should return false\n        System.out.println(solution.check_dict_case(Map.of(8, \"banana\", \"a\", \"apple\"))); // should return false\n        System.out.println(solution.check_dict_case(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\"))); // should return false\n        System.out.println(solution.check_dict_case(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))); // should return true\n    }\n}\n"}
{"task_id": "Java/10", "generation": "class Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n     */\n    public String make_palindrome(String string) {\n        // Edge case for empty string\n        if (string.isEmpty()) {\n            return \"\";\n        }\n\n        // Find the longest palindromic suffix\n        int n = string.length();\n        int longestPalindromicSuffixLength = 0;\n\n        for (int i = 0; i < n; i++) {\n            if (isPalindrome(string.substring(i))) {\n                longestPalindromicSuffixLength = n - i;\n                break;\n            }\n        }\n\n        // Get the prefix that is not part of the palindromic suffix\n        String nonPalindromicPrefix = string.substring(0, n - longestPalindromicSuffixLength);\n        \n        // Reverse the non-palindromic prefix\n        StringBuilder reversedPrefix = new StringBuilder(nonPalindromicPrefix).reverse();\n        \n        // Append the reversed prefix to the original string\n        return string + reversedPrefix.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.make_palindrome(\"\")); // Output: \"\"\n        System.out.println(solution.make_palindrome(\"cat\")); // Output: \"catac\"\n        System.out.println(solution.make_palindrome(\"cata\")); // Output: \"catac\"\n    }\n}\n"}
{"task_id": "Java/109", "generation": "class Solution {\n    public boolean move_one_ball(List<Integer> arr) {\n        // Edge case: if the array is empty, return true\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        int n = arr.size();\n        int dropCount = 0;\n\n        // Count the number of drops in the array\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i) > arr.get((i + 1) % n)) {\n                dropCount++;\n            }\n        }\n\n        // If there is more than one drop, return false\n        return dropCount <= 1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.move_one_ball(Arrays.asList(3, 4, 5, 1, 2))); // true\n        System.out.println(solution.move_one_ball(Arrays.asList(3, 5, 4, 1, 2))); // false\n    }\n}\n"}
{"task_id": "Java/4", "generation": "class Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n    */\n    public double mean_absolute_deviation(List<Double> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            return 0.0; // Handle empty list case\n        }\n\n        // Step 1: Calculate the mean\n        double sum = 0.0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n\n        // Step 2: Calculate the absolute differences and their sum\n        double madSum = 0.0;\n        for (double num : numbers) {\n            madSum += Math.abs(num - mean);\n        }\n\n        // Step 3: Calculate the mean of the absolute differences\n        double mad = madSum / numbers.size();\n        return mad;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0);\n        System.out.println(solution.mean_absolute_deviation(numbers)); // Output: 1.0\n    }\n}\n"}
{"task_id": "Java/77", "generation": "class Solution {\n    public boolean iscube(int a) {\n        // Handle the case for 0 separately\n        if (a == 0) {\n            return true;\n        }\n        \n        // Calculate the cube root of the absolute value of a\n        int cubeRoot = (int) Math.round(Math.cbrt(Math.abs(a)));\n        \n        // Check if the cube of the calculated root equals the original number\n        return (cubeRoot * cubeRoot * cubeRoot == a) || (-cubeRoot * -cubeRoot * -cubeRoot == a);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.iscube(1));    // true\n        System.out.println(solution.iscube(2));    // false\n        System.out.println(solution.iscube(-1));   // true\n        System.out.println(solution.iscube(64));   // true\n        System.out.println(solution.iscube(0));    // true\n        System.out.println(solution.iscube(180));  // false\n    }\n}\n"}
{"task_id": "Java/57", "generation": "class Solution {\n    /**\n    Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n    */\n    public boolean monotonic(List<Integer> l) {\n        if (l == null || l.size() < 2) {\n            return true; // A list with 0 or 1 element is trivially monotonic\n        }\n\n        boolean increasing = true;\n        boolean decreasing = true;\n\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false; // Found an increasing pair\n            } else if (l.get(i) < l.get(i - 1)) {\n                increasing = false; // Found a decreasing pair\n            }\n        }\n\n        return increasing || decreasing; // Return true if either is true\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.monotonic(Arrays.asList(1, 2, 4, 20))); // true\n        System.out.println(solution.monotonic(Arrays.asList(1, 20, 4, 10))); // false\n        System.out.println(solution.monotonic(Arrays.asList(4, 1, 0, -10))); // true\n    }\n}\n"}
{"task_id": "Java/142", "generation": "class Solution {\n    public int sum_squares(List<Integer> lst) {\n        int sum = 0; // Initialize the sum to 0\n\n        // Iterate through the list with index\n        for (int i = 0; i < lst.size(); i++) {\n            int value = lst.get(i); // Get the current value\n            \n            // Check if the index is a multiple of 3\n            if (i % 3 == 0) {\n                value = value * value; // Square the value\n            }\n            // Check if the index is a multiple of 4 and not a multiple of 3\n            else if (i % 4 == 0) {\n                value = value * value * value; // Cube the value\n            }\n            // Add the modified value to the sum\n            sum += value;\n        }\n\n        return sum; // Return the total sum\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.sum_squares(Arrays.asList(1, 2, 3))); // Output: 6\n        System.out.println(solution.sum_squares(Arrays.asList())); // Output: 0\n        System.out.println(solution.sum_squares(Arrays.asList(-1, -5, 2, -1, -5))); // Output: -126\n    }\n}\n"}
{"task_id": "Java/121", "generation": "class Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==> 0\n    */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n\n        for (int i = 0; i < lst.size(); i++) {\n            // Check if the index is even\n            if (i % 2 == 0) {\n                // Check if the element is odd\n                if (lst.get(i) % 2 != 0) {\n                    sum += lst.get(i);\n                }\n            }\n        }\n\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.solution(Arrays.asList(5, 8, 7, 1))); // Output: 12\n        System.out.println(sol.solution(Arrays.asList(3, 3, 3, 3, 3))); // Output: 9\n        System.out.println(sol.solution(Arrays.asList(30, 13, 24, 321))); // Output: 0\n    }\n}\n"}
{"task_id": "Java/23", "generation": "class Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n    */\n    public int strlen(String string) {\n        // Use the length() method of the String class to get the length\n        return string.length();\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.strlen(\"\"));      // Output: 0\n        System.out.println(solution.strlen(\"abc\"));   // Output: 3\n        System.out.println(solution.strlen(\"Hello\")); // Output: 5\n        System.out.println(solution.strlen(\"Java\"));  // Output: 4\n    }\n}\n"}
{"task_id": "Java/80", "generation": "class Solution {\n    public boolean is_happy(String s) {\n        // Check if the length of the string is less than 3\n        if (s.length() < 3) {\n            return false;\n        }\n\n        // Iterate through the string, checking every group of three consecutive characters\n        for (int i = 0; i <= s.length() - 3; i++) {\n            // Get the three consecutive characters\n            char first = s.charAt(i);\n            char second = s.charAt(i + 1);\n            char third = s.charAt(i + 2);\n\n            // Check if all three characters are distinct\n            if (first == second || first == third || second == third) {\n                return false; // If any two characters are the same, return false\n            }\n        }\n\n        // If we pass through all checks, the string is happy\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.is_happy(\"a\")); // false\n        System.out.println(solution.is_happy(\"aa\")); // false\n        System.out.println(solution.is_happy(\"abcd\")); // true\n        System.out.println(solution.is_happy(\"aabb\")); // false\n        System.out.println(solution.is_happy(\"adb\")); // true\n        System.out.println(solution.is_happy(\"xyy\")); // false\n    }\n}\n"}
{"task_id": "Java/132", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean is_nested(String string) {\n        Stack<Character> stack = new Stack<>();\n        boolean nested = false;\n\n        for (char ch : string.toCharArray()) {\n            if (ch == '[') {\n                stack.push(ch);\n                if (stack.size() > 1) {  // More than one opening bracket means nested\n                    nested = true;\n                }\n            } else if (ch == ']') {\n                if (stack.isEmpty()) {  // Unmatched closing bracket\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n\n        return nested && stack.isEmpty();  // Must be nested and all brackets must be matched\n    }\n}\n"}
{"task_id": "Java/66", "generation": "class Solution {\n    public int digitSum(String s) {\n        int sum = 0; // Initialize sum to 0\n        \n        // Iterate through each character in the string\n        for (char c : s.toCharArray()) {\n            // Check if the character is an uppercase letter\n            if (c >= 'A' && c <= 'Z') {\n                sum += (int) c; // Add the ASCII value of the uppercase letter\n            }\n        }\n        \n        return sum; // Return the total sum of ASCII values of uppercase letters\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.digitSum(\"\")); // Output: 0\n        System.out.println(solution.digitSum(\"abAB\")); // Output: 131\n        System.out.println(solution.digitSum(\"abcCd\")); // Output: 67\n        System.out.println(solution.digitSum(\"helloE\")); // Output: 69\n        System.out.println(solution.digitSum(\"woArBld\")); // Output: 131\n        System.out.println(solution.digitSum(\"aAaaaXa\")); // Output: 153\n    }\n}\n"}
{"task_id": "Java/14", "generation": "class Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    */\n    public List<String> all_prefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        \n        // Iterate through the string and collect prefixes\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        \n        return prefixes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.all_prefixes(\"abc\")); // Output: [a, ab, abc]\n    }\n}\n"}
{"task_id": "Java/25", "generation": "class Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        \n        // Check for number of 2s that divide n\n        while (n % 2 == 0) {\n            factors.add(2);\n            n /= 2;\n        }\n        \n        // n must be odd at this point, so we can skip even numbers\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            // While i divides n, add i and divide n\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        \n        // This condition is to check if n is a prime number greater than 2\n        if (n > 2) {\n            factors.add(n);\n        }\n        \n        return factors;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.factorize(8));   // Output: [2, 2, 2]\n        System.out.println(solution.factorize(25));  // Output: [5, 5]\n        System.out.println(solution.factorize(70));  // Output: [2, 5, 7]\n    }\n}\n"}
{"task_id": "Java/107", "generation": "class Solution {\n    public List<Integer> even_odd_palindrome(int n) {\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        return Arrays.asList(evenCount, oddCount);\n    }\n\n    private boolean isPalindrome(int num) {\n        String str = Integer.toString(num);\n        int left = 0;\n        int right = str.length() - 1;\n\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.even_odd_palindrome(3));  // Output: [1, 2]\n        System.out.println(solution.even_odd_palindrome(12)); // Output: [4, 6]\n    }\n}\n"}
{"task_id": "Java/83", "generation": "class Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    */\n    public int starts_one_ends(int n) {\n        if (n < 1) {\n            return 0; // No n-digit numbers if n is less than 1\n        }\n        \n        // Count of n-digit numbers starting with '1'\n        int startWithOne = (int) Math.pow(10, n - 1);\n        \n        // Count of n-digit numbers ending with '1'\n        int endWithOne = 9 * (int) Math.pow(10, n - 2);\n        \n        // Count of n-digit numbers starting and ending with '1'\n        int startAndEndWithOne = (int) Math.pow(10, n - 2);\n        \n        // Total count using inclusion-exclusion principle\n        int totalCount = startWithOne + endWithOne - startAndEndWithOne;\n        \n        return totalCount;\n    }\n}\n"}
{"task_id": "Java/32", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> find_zero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> find_zero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double find_zero(List<Double> xs) {\n        // Using Newton's method to find a root of the polynomial\n        double x = 0.0; // Initial guess for the root\n        for (int iteration = 0; iteration < 100; iteration++) { // Limit iterations to prevent infinite loops\n            double fx = poly(xs, x);\n            double dfx = derivative(xs, x);\n            if (dfx == 0) { // Avoid division by zero\n                break;\n            }\n            x -= fx / dfx; // Newton's method update\n        }\n        return x;\n    }\n\n    private double derivative(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 1; i < xs.size(); i++) {\n            result += i * xs.get(i) * Math.pow(x, i - 1);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/85", "generation": "class Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n    */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n\n        // Iterate through the list\n        for (int i = 0; i < lst.size(); i++) {\n            // Check if the index is odd\n            if (i % 2 != 0) {\n                // Check if the element at this index is even\n                if (lst.get(i) % 2 == 0) {\n                    sum += lst.get(i);\n                }\n            }\n        }\n\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.add(Arrays.asList(4, 2, 6, 7))); // Output: 2\n        System.out.println(solution.add(Arrays.asList(1, 2, 3, 4, 5))); // Output: 0\n        System.out.println(solution.add(Arrays.asList(10, 1, 2, 3, 4, 5, 6))); // Output: 6\n    }\n}\n"}
{"task_id": "Java/156", "generation": "class Solution {\n    public String int_to_mini_roman(int number) {\n        // Define the mapping of integers to Roman numerals\n        String[] romanNumerals = {\n            \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"\n        };\n        int[] values = {\n            1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        };\n\n        StringBuilder result = new StringBuilder();\n\n        // Iterate through the values and corresponding Roman numerals\n        for (int i = 0; i < values.length; i++) {\n            // While the number is greater than or equal to the current value\n            while (number >= values[i]) {\n                // Append the corresponding Roman numeral to the result\n                result.append(romanNumerals[i]);\n                // Subtract the value from the number\n                number -= values[i];\n            }\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.int_to_mini_roman(19));   // Output: \"xix\"\n        System.out.println(solution.int_to_mini_roman(152));  // Output: \"clii\"\n        System.out.println(solution.int_to_mini_roman(426));  // Output: \"cdxxvi\"\n    }\n}\n"}
{"task_id": "Java/75", "generation": "class Solution {\n    // Function to generate all prime numbers less than 100\n    private List<Integer> generatePrimes() {\n        List<Integer> primes = new ArrayList<>();\n        boolean[] isPrime = new boolean[100];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = isPrime[1] = false; // 0 and 1 are not prime numbers\n\n        for (int i = 2; i < 100; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n                for (int j = i * 2; j < 100; j += i) {\n                    isPrime[j] = false; // Mark multiples of i as non-prime\n                }\n            }\n        }\n        return primes;\n    }\n\n    // Function to check if a number is the product of three primes\n    public boolean is_multiply_prime(int a) {\n        List<Integer> primes = generatePrimes();\n        int size = primes.size();\n\n        // Check all combinations of three primes\n        for (int i = 0; i < size; i++) {\n            for (int j = i; j < size; j++) {\n                for (int k = j; k < size; k++) {\n                    int product = primes.get(i) * primes.get(j) * primes.get(k);\n                    if (product == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.is_multiply_prime(30)); // true\n        System.out.println(solution.is_multiply_prime(60)); // true (2 * 3 * 10, but 10 is not prime)\n        System.out.println(solution.is_multiply_prime(100)); // false\n        System.out.println(solution.is_multiply_prime(105)); // true (3 * 5 * 7)\n        System.out.println(solution.is_multiply_prime(1)); // false\n    }\n}\n"}
{"task_id": "Java/157", "generation": "class Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == true\n    right_angle_triangle(1, 2, 3) == false\n    */\n    public boolean right_angle_triangle(int a, int b, int c) {\n        // Sort the sides to ensure we can identify the longest side\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        \n        // The longest side will be the last element after sorting\n        int x = sides[2]; // longest side\n        int y = sides[1]; // second longest side\n        int z = sides[0]; // shortest side\n        \n        // Check the Pythagorean theorem\n        return (y * y + z * z) == (x * x);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.right_angle_triangle(3, 4, 5)); // true\n        System.out.println(solution.right_angle_triangle(1, 2, 3)); // false\n        System.out.println(solution.right_angle_triangle(5, 12, 13)); // true\n        System.out.println(solution.right_angle_triangle(8, 15, 17)); // true\n    }\n}\n"}
{"task_id": "Java/36", "generation": "class Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    */\n    public int fizz_buzz(int n) {\n        int count = 0;\n\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                // Convert the number to a string to count occurrences of '7'\n                String numberStr = Integer.toString(i);\n                for (char c : numberStr.toCharArray()) {\n                    if (c == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fizz_buzz(50)); // Output: 0\n        System.out.println(solution.fizz_buzz(78)); // Output: 2\n        System.out.println(solution.fizz_buzz(79)); // Output: 3\n    }\n}\n"}
{"task_id": "Java/94", "generation": "import java.util.*;\n\nclass Solution {\n    public int skjkasdkd(List<Integer> lst) {\n        int largestPrime = -1;\n\n        for (int num : lst) {\n            if (isPrime(num) && num > largestPrime) {\n                largestPrime = num;\n            }\n        }\n\n        if (largestPrime == -1) {\n            return 0; // No prime found\n        }\n\n        return sumOfDigits(largestPrime);\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private int sumOfDigits(int n) {\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 10; // Add the last digit to sum\n            n /= 10; // Remove the last digit\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/60", "generation": "class Solution {\n    /**\n    sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    */\n    public int sum_to_n(int n) {\n        // Using the formula for the sum of the first n natural numbers\n        return n * (n + 1) / 2;\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sum_to_n(30));  // Output: 465\n        System.out.println(solution.sum_to_n(100)); // Output: 5050\n        System.out.println(solution.sum_to_n(5));   // Output: 15\n        System.out.println(solution.sum_to_n(10));  // Output: 55\n        System.out.println(solution.sum_to_n(1));   // Output: 1\n    }\n}\n"}
{"task_id": "Java/145", "generation": "class Solution {\n    public List<Integer> order_by_points(List<Integer> nums) {\n        // Create a list of pairs where each pair contains the number and its digit sum\n        List<Pair> pairs = new ArrayList<>();\n        \n        for (int i = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n            int digitSum = sumOfDigits(num);\n            pairs.add(new Pair(num, digitSum, i)); // Store number, digit sum, and original index\n        }\n        \n        // Sort the pairs based on digit sum and original index\n        Collections.sort(pairs, (a, b) -> {\n            if (a.digitSum != b.digitSum) {\n                return Integer.compare(a.digitSum, b.digitSum);\n            } else {\n                return Integer.compare(a.index, b.index);\n            }\n        });\n        \n        // Extract the sorted numbers from pairs\n        List<Integer> sortedNums = new ArrayList<>();\n        for (Pair pair : pairs) {\n            sortedNums.add(pair.num);\n        }\n        \n        return sortedNums;\n    }\n    \n    // Helper method to calculate the sum of digits\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        int absNum = Math.abs(num);\n        \n        while (absNum > 0) {\n            sum += absNum % 10;\n            absNum /= 10;\n        }\n        \n        // If the number is negative, subtract twice the first digit (to account for the negative sign)\n        if (num < 0) {\n            sum -= 2 * (Math.abs(num) / (int) Math.pow(10, String.valueOf(Math.abs(num)).length() - 1));\n        }\n        \n        return sum;\n    }\n    \n    // Pair class to hold number, digit sum, and original index\n    private static class Pair {\n        int num;\n        int digitSum;\n        int index;\n        \n        Pair(int num, int digitSum, int index) {\n            this.num = num;\n            this.digitSum = digitSum;\n            this.index = index;\n        }\n    }\n}\n"}
{"task_id": "Java/61", "generation": "class Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    */\n    public boolean correct_bracketing(String brackets) {\n        int balance = 0; // This will track the balance of brackets\n\n        for (char ch : brackets.toCharArray()) {\n            if (ch == '(') {\n                balance++; // Increment for an opening bracket\n            } else if (ch == ')') {\n                balance--; // Decrement for a closing bracket\n            }\n\n            // If balance goes negative, we have more closing than opening brackets\n            if (balance < 0) {\n                return false;\n            }\n        }\n\n        // At the end, balance should be zero for correct bracketing\n        return balance == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.correct_bracketing(\"(\")); // false\n        System.out.println(solution.correct_bracketing(\"()\")); // true\n        System.out.println(solution.correct_bracketing(\"(()())\")); // true\n        System.out.println(solution.correct_bracketing(\")(()\")); // false\n    }\n}\n"}
{"task_id": "Java/79", "generation": "class Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   // returns \"db1111db\"\n    decimal_to_binary(32)   // returns \"db100000db\"\n     */\n    public String decimal_to_binary(int decimal) {\n        // Convert the decimal number to binary string\n        String binaryString = Integer.toBinaryString(decimal);\n        \n        // Format the string by adding 'db' at the beginning and end\n        return \"db\" + binaryString + \"db\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.decimal_to_binary(15)); // Output: \"db1111db\"\n        System.out.println(solution.decimal_to_binary(32)); // Output: \"db100000db\"\n    }\n}\n"}
{"task_id": "Java/116", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> arr) {\n        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                // Count the number of 1s in the binary representation\n                int countA = Integer.bitCount(a);\n                int countB = Integer.bitCount(b);\n                \n                // First compare by the number of 1s, then by the value itself\n                if (countA != countB) {\n                    return Integer.compare(countA, countB);\n                } else {\n                    return Integer.compare(a, b);\n                }\n            }\n        });\n        return arr;\n    }\n}\n"}
{"task_id": "Java/56", "generation": "class Solution {\n    public boolean correct_bracketing(String brackets) {\n        int balance = 0; // This will keep track of the balance of brackets\n        \n        for (char ch : brackets.toCharArray()) {\n            if (ch == '<') {\n                balance++; // Increment for an opening bracket\n            } else if (ch == '>') {\n                balance--; // Decrement for a closing bracket\n            }\n            \n            // If balance goes negative, we have more closing brackets than opening ones\n            if (balance < 0) {\n                return false;\n            }\n        }\n        \n        // At the end, balance should be zero for all brackets to be matched\n        return balance == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.correct_bracketing(\"<\")); // false\n        System.out.println(solution.correct_bracketing(\"<>\")); // true\n        System.out.println(solution.correct_bracketing(\"<<><>>\")); // true\n        System.out.println(solution.correct_bracketing(\"><<>\")); // false\n    }\n}\n"}
{"task_id": "Java/111", "generation": "class Solution {\n    public Map<String, Integer> histogram(String test) {\n        // Create a map to count occurrences of each letter\n        Map<String, Integer> countMap = new HashMap<>();\n        \n        // Split the input string into letters\n        String[] letters = test.split(\" \");\n        \n        // Count occurrences of each letter\n        for (String letter : letters) {\n            if (!letter.isEmpty()) { // Check for empty strings\n                countMap.put(letter, countMap.getOrDefault(letter, 0) + 1);\n            }\n        }\n        \n        // Find the maximum count\n        int maxCount = 0;\n        for (int count : countMap.values()) {\n            maxCount = Math.max(maxCount, count);\n        }\n        \n        // Create a result map for letters with the maximum count\n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : countMap.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.histogram(\"a b c\")); // Output: {a=1, b=1, c=1}\n        System.out.println(solution.histogram(\"a b b a\")); // Output: {a=2, b=2}\n        System.out.println(solution.histogram(\"a b c a b\")); // Output: {a=2, b=2}\n        System.out.println(solution.histogram(\"b b b b a\")); // Output: {b=4}\n        System.out.println(solution.histogram(\"\")); // Output: {}\n    }\n}\n"}
{"task_id": "Java/125", "generation": "class Solution {\n    public Object split_words(String txt) {\n        // Check for whitespace\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\"\\\\s+\"));\n        }\n        \n        // Check for commas\n        if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        }\n        \n        // Count lowercase letters with odd order in the alphabet\n        int count = 0;\n        for (char c : txt.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                int index = c - 'a'; // Get the index of the letter\n                if (index % 2 == 1) { // Check if the index is odd\n                    count++;\n                }\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.split_words(\"Hello world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.split_words(\"Hello,world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.split_words(\"abcdef\")); // 3\n    }\n}\n"}
{"task_id": "Java/119", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String match_parens(List<String> lst) {\n        // Count the number of open and close parentheses in both strings\n        int openCount = 0;\n        int closeCount = 0;\n        \n        for (String str : lst) {\n            openCount += countChar(str, '(');\n            closeCount += countChar(str, ')');\n        }\n        \n        // A good string requires equal number of open and close parentheses\n        if (openCount != closeCount) {\n            return \"No\";\n        }\n        \n        // Check if we can balance the parentheses by concatenating in either order\n        // Concatenate lst[0] + lst[1]\n        int balance1 = 0;\n        for (char ch : (lst.get(0) + lst.get(1)).toCharArray()) {\n            balance1 += (ch == '(') ? 1 : -1;\n            if (balance1 < 0) { // More closing than opening\n                break;\n            }\n        }\n        \n        // Concatenate lst[1] + lst[0]\n        int balance2 = 0;\n        for (char ch : (lst.get(1) + lst.get(0)).toCharArray()) {\n            balance2 += (ch == '(') ? 1 : -1;\n            if (balance2 < 0) { // More closing than opening\n                break;\n            }\n        }\n        \n        // If either concatenation is balanced, return \"Yes\"\n        if ((balance1 >= 0 && balance1 == 0) || (balance2 >= 0 && balance2 == 0)) {\n            return \"Yes\";\n        }\n        \n        return \"No\";\n    }\n    \n    // Helper method to count occurrences of a character in a string\n    private int countChar(String str, char ch) {\n        int count = 0;\n        for (char c : str.toCharArray()) {\n            if (c == ch) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/124", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean valid_date(String date) {\n        // Check for empty string\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        // Check the format\n        if (date.length() != 10 || date.charAt(2) != '-' || date.charAt(5) != '-') {\n            return false;\n        }\n\n        // Split the date into components\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n            return false;\n        }\n\n        // Convert to integers\n        int month, day, year;\n        try {\n            month = Integer.parseInt(parts[0]);\n            day = Integer.parseInt(parts[1]);\n            year = Integer.parseInt(parts[2]);\n        } catch (NumberFormatException e) {\n            return false;\n        }\n\n        // Validate month\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        // Validate day based on month\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) { // 31 days\n            if (day < 1 || day > 31) {\n                return false;\n            }\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) { // 30 days\n            if (day < 1 || day > 30) {\n                return false;\n            }\n        } else if (month == 2) { // February\n            if (day < 1 || day > 29) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/9", "generation": "class Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n    */\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int currentMax = Integer.MIN_VALUE; // Initialize to the smallest possible integer\n\n        for (int number : numbers) {\n            currentMax = Math.max(currentMax, number); // Update the current maximum\n            result.add(currentMax); // Add the current maximum to the result list\n        }\n\n        return result; // Return the list of rolling maximums\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> input = Arrays.asList(1, 2, 3, 2, 3, 4, 2);\n        List<Integer> output = solution.rolling_max(input);\n        System.out.println(output); // Output: [1, 2, 3, 3, 3, 4, 4]\n    }\n}\n"}
{"task_id": "Java/43", "generation": "class Solution {\n    /**\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairs_sum_to_zero(Arrays.asList(1))\n    false\n    */\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        Set<Integer> seen = new HashSet<>();\n        \n        for (Integer num : l) {\n            // Check if the negation of the current number exists in the set\n            if (seen.contains(-num)) {\n                return true; // Found a pair that sums to zero\n            }\n            // Add the current number to the set\n            seen.add(num);\n        }\n        \n        return false; // No pairs found that sum to zero\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1, 3, -2, 1))); // false\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(2, 4, -5, 3, 5, 7))); // true\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1))); // false\n    }\n}\n"}
{"task_id": "Java/82", "generation": "class Solution {\n    public boolean prime_length(String string) {\n        int length = string.length();\n        return isPrime(length);\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false; // 0 and 1 are not prime numbers\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false; // Found a divisor, not prime\n            }\n        }\n        return true; // No divisors found, it is prime\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.prime_length(\"Hello\")); // true\n        System.out.println(solution.prime_length(\"abcdcba\")); // true\n        System.out.println(solution.prime_length(\"kittens\")); // true\n        System.out.println(solution.prime_length(\"orange\")); // false\n    }\n}\n"}
{"task_id": "Java/155", "generation": "class Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n     */\n    public List<Integer> even_odd_count(int num) {\n        // Convert the number to its absolute value to ignore the sign\n        num = Math.abs(num);\n        \n        int evenCount = 0;\n        int oddCount = 0;\n        \n        // Convert the number to a string to iterate through each digit\n        String numStr = Integer.toString(num);\n        \n        for (char digit : numStr.toCharArray()) {\n            int digitValue = Character.getNumericValue(digit);\n            if (digitValue % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        \n        // Create a list to return the counts\n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.even_odd_count(-12)); // Output: [1, 1]\n        System.out.println(solution.even_odd_count(123));  // Output: [1, 2]\n        System.out.println(solution.even_odd_count(2468)); // Output: [4, 0]\n        System.out.println(solution.even_odd_count(13579)); // Output: [0, 5]\n    }\n}\n"}
{"task_id": "Java/35", "generation": "class Solution {\n    /**\n    Return maximum element in the list.\n    >>> max_element(Arrays.asList(1, 2, 3))\n    3\n    >>> max_element(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n    */\n    public int max_element(List<Integer> l) {\n        // Check if the list is empty\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be null or empty\");\n        }\n        \n        // Use Collections.max to find the maximum element\n        return Collections.max(l);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.max_element(Arrays.asList(1, 2, 3))); // Output: 3\n        System.out.println(solution.max_element(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))); // Output: 123\n    }\n}\n"}
{"task_id": "Java/89", "generation": "class Solution {\n    public String encrypt(String s) {\n        StringBuilder encrypted = new StringBuilder();\n        \n        for (char c : s.toCharArray()) {\n            // Check if the character is a lowercase letter\n            if (c >= 'a' && c <= 'z') {\n                // Rotate the character by 4 positions\n                char newChar = (char) ((c - 'a' + 4) % 26 + 'a');\n                encrypted.append(newChar);\n            } else {\n                // If it's not a lowercase letter, we can choose to append it as is\n                // or handle it differently based on requirements. Here we just append it.\n                encrypted.append(c);\n            }\n        }\n        \n        return encrypted.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.encrypt(\"hi\")); // Output: \"lm\"\n        System.out.println(sol.encrypt(\"asdfghjkl\")); // Output: \"ewhjklnop\"\n        System.out.println(sol.encrypt(\"gf\")); // Output: \"kj\"\n        System.out.println(sol.encrypt(\"et\")); // Output: \"ix\"\n    }\n}\n"}
{"task_id": "Java/24", "generation": "class Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    */\n    public int largest_divisor(int n) {\n        // Start from n-1 and go down to 1\n        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) { // Check if i is a divisor of n\n                return i; // Return the first divisor found\n            }\n        }\n        return 1; // If no divisor is found, return 1 (since 1 divides all integers)\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.largest_divisor(15)); // Output: 5\n        System.out.println(solution.largest_divisor(28)); // Output: 14\n        System.out.println(solution.largest_divisor(1));  // Output: 1\n    }\n}\n"}
{"task_id": "Java/22", "generation": "class Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n    */\n    public List<Integer> filter_integers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.filter_integers(Arrays.asList('a', 3.14, 5))); // Output: [5]\n        System.out.println(solution.filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))); // Output: [1, 2, 3]\n    }\n}\n"}
{"task_id": "Java/161", "generation": "class Solution {\n    public String solve(String s) {\n        // Check if the string contains any letters\n        boolean hasLetter = false;\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                hasLetter = true;\n                break;\n            }\n        }\n\n        // If there are letters, reverse their case\n        if (hasLetter) {\n            StringBuilder result = new StringBuilder();\n            for (char c : s.toCharArray()) {\n                if (Character.isLetter(c)) {\n                    // Reverse case\n                    if (Character.isLowerCase(c)) {\n                        result.append(Character.toUpperCase(c));\n                    } else {\n                        result.append(Character.toLowerCase(c));\n                    }\n                } else {\n                    // Keep non-letter characters unchanged\n                    result.append(c);\n                }\n            }\n            return result.toString();\n        } else {\n            // If no letters, reverse the entire string\n            return new StringBuilder(s).reverse().toString();\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.solve(\"1234\"));    // Output: \"4321\"\n        System.out.println(solution.solve(\"ab\"));      // Output: \"AB\"\n        System.out.println(solution.solve(\"#a@C\"));    // Output: \"#A@c\"\n    }\n}\n"}
{"task_id": "Java/28", "generation": "class Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n    */\n    public String concatenate(List<String> strings) {\n        StringBuilder result = new StringBuilder();\n        for (String str : strings) {\n            result.append(str);\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/72", "generation": "class Solution {\n    public boolean will_it_fly(List<Integer> q, int w) {\n        // Check if the list is a palindrome\n        if (!isPalindrome(q)) {\n            return false; // Not balanced\n        }\n        \n        // Calculate the sum of the elements\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n        \n        // Check if the sum is less than or equal to the maximum weight\n        return sum <= w;\n    }\n    \n    private boolean isPalindrome(List<Integer> q) {\n        int left = 0;\n        int right = q.size() - 1;\n        \n        while (left < right) {\n            if (!q.get(left).equals(q.get(right))) {\n                return false; // Not a palindrome\n            }\n            left++;\n            right--;\n        }\n        \n        return true; // It's a palindrome\n    }\n}\n"}
{"task_id": "Java/127", "generation": "class Solution {\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // Extract start and end points from the intervals\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        \n        // Calculate the intersection\n        int startIntersection = Math.max(start1, start2);\n        int endIntersection = Math.min(end1, end2);\n        \n        // Check if there is an intersection\n        if (startIntersection > endIntersection) {\n            return \"NO\"; // No intersection\n        }\n        \n        // Calculate the length of the intersection\n        int length = endIntersection - startIntersection;\n        \n        // Check if the length is a prime number\n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    // Helper method to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) return false; // 0 and 1 are not prime numbers\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false; // Found a divisor, not prime\n            }\n        }\n        return true; // No divisors found, it's prime\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.intersection(Arrays.asList(1, 2), Arrays.asList(2, 3))); // \"NO\"\n        System.out.println(solution.intersection(Arrays.asList(-1, 1), Arrays.asList(0, 4))); // \"NO\"\n        System.out.println(solution.intersection(Arrays.asList(-3, -1), Arrays.asList(-5, 5))); // \"YES\"\n    }\n}\n"}
{"task_id": "Java/86", "generation": "class Solution {\n    public String anti_shuffle(String s) {\n        // Split the string by spaces to get words and preserve spaces\n        String[] words = s.split(\"(?<=\\\\s)|(?=\\\\s)\"); // This regex keeps spaces in the result\n        StringBuilder result = new StringBuilder();\n\n        for (String word : words) {\n            if (word.trim().isEmpty()) {\n                // If the word is just a space, append it directly\n                result.append(word);\n            } else {\n                // Sort the characters of the word\n                char[] charArray = word.toCharArray();\n                Arrays.sort(charArray);\n                // Append the sorted word to the result\n                result.append(new String(charArray));\n            }\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.anti_shuffle(\"Hi\")); // Output: \"Hi\"\n        System.out.println(solution.anti_shuffle(\"hello\")); // Output: \"ehllo\"\n        System.out.println(solution.anti_shuffle(\"Hello World!!!\")); // Output: \"Hello !!!Wdlor\"\n    }\n}\n"}
{"task_id": "Java/3", "generation": "class Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, \n    and at that point function should return True. Otherwise it should return False.\n    >>> below_zero(Arrays.asList(1, 2, 3))\n    false\n    >>> below_zero(Arrays.asList(1, 2, -4, 5))\n    true\n    */\n    public boolean below_zero(List<Integer> operations) {\n        int balance = 0; // Start with a balance of zero\n        \n        for (int operation : operations) {\n            balance += operation; // Update the balance\n            \n            if (balance < 0) { // Check if the balance falls below zero\n                return true; // Return true if it does\n            }\n        }\n        \n        return false; // Return false if balance never goes below zero\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.below_zero(Arrays.asList(1, 2, 3))); // false\n        System.out.println(solution.below_zero(Arrays.asList(1, 2, -4, 5))); // true\n        System.out.println(solution.below_zero(Arrays.asList(-1, 2, 3))); // true\n        System.out.println(solution.below_zero(Arrays.asList(5, -3, -3))); // false\n    }\n}\n"}
{"task_id": "Java/69", "generation": "class Solution {\n    public int search(List<Integer> lst) {\n        // Step 1: Count the frequency of each integer\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n\n        // Step 2: Find the greatest integer that meets the condition\n        int result = -1;\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int key = entry.getKey();\n            int frequency = entry.getValue();\n            if (frequency >= key) {\n                result = Math.max(result, key);\n            }\n        }\n\n        // Step 3: Return the result\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.search(Arrays.asList(4, 1, 2, 2, 3, 1))); // Output: 2\n        System.out.println(solution.search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4))); // Output: 3\n        System.out.println(solution.search(Arrays.asList(5, 5, 4, 4, 4))); // Output: -1\n    }\n}\n"}
{"task_id": "Java/62", "generation": "class Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3))\n    [2, 6]\n    */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i < xs.size(); i++) {\n            // Calculate the derivative coefficient\n            int derivativeCoefficient = i * xs.get(i);\n            result.add(derivativeCoefficient);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.derivative(Arrays.asList(3, 1, 2, 4, 5))); // Output: [1, 4, 12, 20]\n        System.out.println(solution.derivative(Arrays.asList(1, 2, 3))); // Output: [2, 6]\n    }\n}\n"}
{"task_id": "Java/50", "generation": "class Solution {\n    /**\n    Returns encoded string by shifting every character by 5 in the alphabet.\n    */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            // Check if the character is a lowercase letter\n            if (ch >= 'a' && ch <= 'z') {\n                sb.append((char) ('a' + ((ch - 'a' + 5) % 26)));\n            } else {\n                // If it's not a lowercase letter, just append it as is\n                sb.append(ch);\n            }\n        }\n        return sb.toString();\n    }\n\n    /**\n    Takes as input string encoded with encodeShift function. Returns decoded string.\n    */\n    public String decode_shift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            // Check if the character is a lowercase letter\n            if (ch >= 'a' && ch <= 'z') {\n                sb.append((char) ('a' + ((ch - 'a' - 5 + 26) % 26)));\n            } else {\n                // If it's not a lowercase letter, just append it as is\n                sb.append(ch);\n            }\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        String original = \"hello world\";\n        String encoded = solution.encodeShift(original);\n        String decoded = solution.decode_shift(encoded);\n        \n        System.out.println(\"Original: \" + original);\n        System.out.println(\"Encoded: \" + encoded);\n        System.out.println(\"Decoded: \" + decoded);\n    }\n}\n"}
{"task_id": "Java/135", "generation": "class Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange(Arrays.asList(1,2,4,3,5)) = 3\n    can_arrange(Arrays.asList(1,2,3)) = -1\n    */\n    public int can_arrange(List<Integer> arr) {\n        int n = arr.size();\n        // Iterate from the second last element to the first element\n        for (int i = n - 2; i >= 0; i--) {\n            // Check if the current element is less than the next element\n            if (arr.get(i) > arr.get(i + 1)) {\n                return i + 1; // Return the index of the current element\n            }\n        }\n        return -1; // If no such element is found\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.can_arrange(Arrays.asList(1, 2, 4, 3, 5))); // Output: 3\n        System.out.println(solution.can_arrange(Arrays.asList(1, 2, 3))); // Output: -1\n    }\n}\n"}
{"task_id": "Java/93", "generation": "class Solution {\n    public String encode(String message) {\n        StringBuilder encodedMessage = new StringBuilder();\n        \n        for (char ch : message.toCharArray()) {\n            // Check if the character is a letter\n            if (Character.isLetter(ch)) {\n                // Swap case\n                char swappedCase = Character.isLowerCase(ch) ? Character.toUpperCase(ch) : Character.toLowerCase(ch);\n                \n                // Replace vowels with the letter that appears 2 places ahead\n                if (\"AEIOUaeiou\".indexOf(swappedCase) != -1) {\n                    // Calculate the new character\n                    char newChar = (char) (swappedCase + 2);\n                    // Handle wrap-around for 'Z' and 'z'\n                    if (swappedCase == 'Z') newChar = 'B';\n                    if (swappedCase == 'z') newChar = 'b';\n                    encodedMessage.append(newChar);\n                } else {\n                    // If it's not a vowel, just append the swapped case character\n                    encodedMessage.append(swappedCase);\n                }\n            } else {\n                // If it's not a letter (like space), just append it as is\n                encodedMessage.append(ch);\n            }\n        }\n        \n        return encodedMessage.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.encode(\"test\")); // Output: \"TGST\"\n        System.out.println(solution.encode(\"This is a message\")); // Output: \"tHKS KS C MGSSCGG\"\n    }\n}\n"}
{"task_id": "Java/147", "generation": "class Solution {\n    public int get_max_triples(int n) {\n        // Step 1: Generate the array a\n        int[] a = new int[n];\n        for (int i = 1; i <= n; i++) {\n            a[i - 1] = i * i - i + 1;\n        }\n\n        // Step 2: Count occurrences of each remainder when divided by 3\n        int[] count = new int[3]; // count[0] for remainder 0, count[1] for remainder 1, count[2] for remainder 2\n        for (int value : a) {\n            count[value % 3]++;\n        }\n\n        // Step 3: Calculate the number of valid triples\n        int totalTriples = 0;\n\n        // Count combinations of (0, 0, 0)\n        totalTriples += combination(count[0], 3);\n        // Count combinations of (1, 1, 1)\n        totalTriples += combination(count[1], 3);\n        // Count combinations of (2, 2, 2)\n        totalTriples += combination(count[2], 3);\n        // Count combinations of (0, 1, 2)\n        totalTriples += count[0] * count[1] * count[2];\n\n        return totalTriples;\n    }\n\n    // Helper method to calculate combinations nCk\n    private int combination(int n, int k) {\n        if (n < k) return 0;\n        if (k == 0 || n == k) return 1;\n        if (k == 1) return n;\n        if (k == 2) return n * (n - 1) / 2;\n        if (k == 3) return n * (n - 1) * (n - 2) / 6;\n        return 0; // For k > 3, we don't need to calculate\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.get_max_triples(5)); // Output: 1\n    }\n}\n"}
{"task_id": "Java/27", "generation": "class Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"Hello\")\n    \"hELLO\"\n    */\n    public String flip_case(String string) {\n        StringBuilder flippedString = new StringBuilder();\n        \n        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                flippedString.append(Character.toUpperCase(c));\n            } else if (Character.isUpperCase(c)) {\n                flippedString.append(Character.toLowerCase(c));\n            } else {\n                flippedString.append(c); // Keep non-alphabetic characters unchanged\n            }\n        }\n        \n        return flippedString.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.flip_case(\"Hello\")); // Output: hELLO\n        System.out.println(solution.flip_case(\"World!\")); // Output: wORLD!\n        System.out.println(solution.flip_case(\"JaVa123\")); // Output: jAvA123\n    }\n}\n"}
{"task_id": "Java/110", "generation": "class Solution {\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int oddCountInLst1 = 0;\n        int evenCountInLst2 = 0;\n\n        // Count odd numbers in lst1\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCountInLst1++;\n            }\n        }\n\n        // Count even numbers in lst2\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCountInLst2++;\n            }\n        }\n\n        // Check if we can replace all odd numbers in lst1 with even numbers from lst2\n        if (oddCountInLst1 <= evenCountInLst2) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4))); // Output: \"YES\"\n        System.out.println(solution.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4))); // Output: \"NO\"\n    }\n}\n"}
{"task_id": "Java/141", "generation": "class Solution {\n    public String file_name_check(String file_name) {\n        // Check for exactly one dot\n        int dotIndex = file_name.indexOf('.');\n        if (dotIndex == -1 || file_name.indexOf('.', dotIndex + 1) != -1) {\n            return \"No\"; // No dot or more than one dot\n        }\n\n        // Split the file name into name and extension\n        String namePart = file_name.substring(0, dotIndex);\n        String extensionPart = file_name.substring(dotIndex + 1);\n\n        // Check if the name part is empty and starts with a letter\n        if (namePart.isEmpty() || !Character.isLetter(namePart.charAt(0))) {\n            return \"No\"; // Name part is empty or does not start with a letter\n        }\n\n        // Check the extension\n        List<String> validExtensions = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        if (!validExtensions.contains(extensionPart)) {\n            return \"No\"; // Invalid extension\n        }\n\n        // Count digits in the name part\n        int digitCount = 0;\n        for (char c : namePart.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n        }\n\n        // Check if there are more than three digits\n        if (digitCount > 3) {\n            return \"No\"; // More than three digits\n        }\n\n        // If all checks passed, return \"Yes\"\n        return \"Yes\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.file_name_check(\"example.txt\")); // Yes\n        System.out.println(solution.file_name_check(\"1example.dll\")); // No\n        System.out.println(solution.file_name_check(\"example123.txt\")); // Yes\n        System.out.println(solution.file_name_check(\"example1234.txt\")); // No\n        System.out.println(solution.file_name_check(\"example.exe\")); // Yes\n        System.out.println(solution.file_name_check(\".hidden.txt\")); // No\n        System.out.println(solution.file_name_check(\"example.doc\")); // No\n    }\n}\n"}
{"task_id": "Java/104", "generation": "class Solution {\n    public List<Integer> unique_digits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (Integer num : x) {\n            if (containsEvenDigit(num)) {\n                continue; // Skip numbers with even digits\n            }\n            result.add(num);\n        }\n        \n        Collections.sort(result); // Sort the result list in increasing order\n        return result;\n    }\n    \n    private boolean containsEvenDigit(int num) {\n        while (num > 0) {\n            int digit = num % 10; // Get the last digit\n            if (digit % 2 == 0) { // Check if the digit is even\n                return true; // Found an even digit\n            }\n            num /= 10; // Remove the last digit\n        }\n        return false; // No even digits found\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.unique_digits(Arrays.asList(15, 33, 1422, 1))); // Output: [1, 15, 33]\n        System.out.println(solution.unique_digits(Arrays.asList(152, 323, 1422, 10))); // Output: []\n    }\n}\n"}
{"task_id": "Java/100", "generation": "class Solution {\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> result = new ArrayList<>();\n        int currentStones = n;\n\n        for (int i = 0; i < n; i++) {\n            result.add(currentStones);\n            // Determine the next number of stones\n            if (currentStones % 2 == 0) {\n                // currentStones is even, add 2 to get the next even number\n                currentStones += 2;\n            } else {\n                // currentStones is odd, add 2 to get the next odd number\n                currentStones += 2;\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.make_a_pile(3)); // Output: [3, 5, 7]\n        System.out.println(solution.make_a_pile(4)); // Output: [4, 6, 8, 10]\n    }\n}\n"}
{"task_id": "Java/68", "generation": "class Solution {\n    public List<Integer> pluck(List<Integer> arr) {\n        // Initialize variables to track the smallest even value and its index\n        Integer smallestEvenValue = null;\n        Integer smallestEvenIndex = null;\n\n        // Iterate through the list\n        for (int i = 0; i < arr.size(); i++) {\n            int value = arr.get(i);\n            // Check if the value is even\n            if (value % 2 == 0) {\n                // If it's the first even number found or smaller than the current smallest\n                if (smallestEvenValue == null || value < smallestEvenValue) {\n                    smallestEvenValue = value;\n                    smallestEvenIndex = i;\n                }\n            }\n        }\n\n        // If no even number was found, return an empty list\n        if (smallestEvenValue == null) {\n            return new ArrayList<>();\n        }\n\n        // Return the smallest even value and its index\n        return Arrays.asList(smallestEvenValue, smallestEvenIndex);\n    }\n}\n"}
{"task_id": "Java/149", "generation": "class Solution {\n    public List<String> sorted_list_sum(List<String> lst) {\n        // Step 1: Filter out strings with odd lengths\n        List<String> filteredList = new ArrayList<>();\n        for (String str : lst) {\n            if (str.length() % 2 == 0) { // Check if the length is even\n                filteredList.add(str);\n            }\n        }\n\n        // Step 2: Sort the filtered list\n        Collections.sort(filteredList, new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                // First compare by length\n                int lengthComparison = Integer.compare(s1.length(), s2.length());\n                if (lengthComparison != 0) {\n                    return lengthComparison; // Return length comparison if not equal\n                }\n                // If lengths are equal, compare alphabetically\n                return s1.compareTo(s2);\n            }\n        });\n\n        // Step 3: Return the sorted list\n        return filteredList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.sorted_list_sum(Arrays.asList(\"aa\", \"a\", \"aaa\"))); // Output: [\"aa\"]\n        System.out.println(solution.sorted_list_sum(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\"))); // Output: [\"ab\", \"cd\"]\n    }\n}\n"}
{"task_id": "Java/128", "generation": "class Solution {\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        // Check for empty list\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int sumOfMagnitudes = 0;\n        int productOfSigns = 1; // Start with 1 because it's the multiplicative identity\n\n        for (int num : arr) {\n            if (num > 0) {\n                sumOfMagnitudes += num; // Add magnitude\n            } else if (num < 0) {\n                sumOfMagnitudes += -num; // Add magnitude (negative number)\n                productOfSigns *= -1; // Flip the sign\n            } else {\n                // If we encounter a zero, the product of signs becomes zero\n                productOfSigns = 0;\n                break; // No need to continue, as the product is already zero\n            }\n        }\n\n        // Calculate the final result\n        int result = sumOfMagnitudes * productOfSigns;\n        return Optional.of(result);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.prod_signs(Arrays.asList(1, 2, 2, -4))); // Output: Optional[-9]\n        System.out.println(solution.prod_signs(Arrays.asList(0, 1))); // Output: Optional[0]\n        System.out.println(solution.prod_signs(Arrays.asList())); // Output: Optional.empty\n    }\n}\n"}
{"task_id": "Java/2", "generation": "class Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    */\n    public double truncate_number(double number) {\n        // Get the integer part by using Math.floor\n        double integerPart = Math.floor(number);\n        // Calculate the decimal part by subtracting the integer part from the original number\n        double decimalPart = number - integerPart;\n        return decimalPart;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.truncate_number(3.5)); // Output: 0.5\n        System.out.println(solution.truncate_number(2.75)); // Output: 0.75\n        System.out.println(solution.truncate_number(5.0)); // Output: 0.0\n    }\n}\n"}
{"task_id": "Java/103", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object rounded_avg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        int average = (n + m) / 2;\n        int roundedAverage = (int) Math.round(average);\n        return Integer.toBinaryString(roundedAverage); // Convert to binary\n    }\n}\n"}
{"task_id": "Java/55", "generation": "class Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    */\n    public int fib(int n) {\n        if (n <= 0) {\n            return 0; // Fibonacci of 0 is 0\n        } else if (n == 1) {\n            return 1; // Fibonacci of 1 is 1\n        }\n\n        int a = 0; // F(0)\n        int b = 1; // F(1)\n        int fib = 0;\n\n        for (int i = 2; i <= n; i++) {\n            fib = a + b; // F(n) = F(n-1) + F(n-2)\n            a = b; // Move to the next Fibonacci number\n            b = fib; // Update b to the current Fibonacci number\n        }\n\n        return fib; // Return the n-th Fibonacci number\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fib(10)); // Output: 55\n        System.out.println(solution.fib(1));  // Output: 1\n        System.out.println(solution.fib(8));  // Output: 21\n    }\n}\n"}
{"task_id": "Java/70", "generation": "class Solution {\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        // If the list is empty, return an empty list\n        if (lst.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        // Sort the list\n        Collections.sort(lst);\n        \n        List<Integer> result = new ArrayList<>();\n        int left = 0; // Pointer for the minimum value\n        int right = lst.size() - 1; // Pointer for the maximum value\n        \n        // Alternate between minimum and maximum\n        while (left <= right) {\n            // Add minimum value\n            if (left <= right) {\n                result.add(lst.get(left));\n                left++;\n            }\n            // Add maximum value\n            if (left <= right) {\n                result.add(lst.get(right));\n                right--;\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.strange_sort_list(Arrays.asList(1, 2, 3, 4))); // Output: [1, 4, 2, 3]\n        System.out.println(sol.strange_sort_list(Arrays.asList(5, 5, 5, 5))); // Output: [5, 5, 5, 5]\n        System.out.println(sol.strange_sort_list(Arrays.asList())); // Output: []\n    }\n}\n"}
{"task_id": "Java/34", "generation": "class Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n    */\n    public List<Integer> unique(List<Integer> l) {\n        // Use a HashSet to store unique elements\n        Set<Integer> uniqueSet = new HashSet<>(l);\n        \n        // Convert the set back to a list\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n        \n        // Sort the list\n        Collections.sort(uniqueList);\n        \n        return uniqueList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> result = solution.unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123));\n        System.out.println(result); // Output: [0, 2, 3, 5, 9, 123]\n    }\n}\n"}
{"task_id": "Java/15", "generation": "class Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\n    */\n    public String string_sequence(int n) {\n        StringBuilder result = new StringBuilder();\n        \n        for (int i = 0; i <= n; i++) {\n            result.append(i);\n            if (i < n) {\n                result.append(\" \"); // Append a space if it's not the last number\n            }\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.string_sequence(0)); // Output: \"0\"\n        System.out.println(solution.string_sequence(5)); // Output: \"0 1 2 3 4 5\"\n    }\n}\n"}
{"task_id": "Java/130", "generation": "class Solution {\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        \n        // Calculate the first n + 1 numbers of the Tribonacci sequence\n        for (int i = 0; i <= n; i++) {\n            result.add(calculateTri(i));\n        }\n        \n        return result;\n    }\n    \n    private int calculateTri(int n) {\n        // Base case\n        if (n == 1) {\n            return 3;\n        }\n        \n        // If n is even\n        if (n % 2 == 0) {\n            return 1 + n / 2;\n        }\n        \n        // If n is odd\n        return calculateTri(n - 1) + calculateTri(n - 2) + calculateTri(n + 1);\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 3; // Example input\n        List<Integer> tribonacciSequence = solution.tri(n);\n        System.out.println(tribonacciSequence); // Output: [1, 3, 2, 8]\n    }\n}\n"}
{"task_id": "Java/91", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int is_bored(String S) {\n        // Replace delimiters with '.' and split the string into sentences\n        String[] sentences = S.replace('!', '.').replace('?', '.').split(\"\\\\.\");\n        int boredomCount = 0;\n\n        // Count sentences that start with \"I\"\n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n        return boredomCount;\n    }\n}\n"}
{"task_id": "Java/11", "generation": "class Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    */\n    public String string_xor(String a, String b) {\n        // Ensure both strings are of the same length\n        if (a.length() != b.length()) {\n            throw new IllegalArgumentException(\"Strings must be of the same length\");\n        }\n\n        StringBuilder result = new StringBuilder();\n\n        // Iterate through each character in the strings\n        for (int i = 0; i < a.length(); i++) {\n            // Perform XOR operation\n            char xorResult = (a.charAt(i) == b.charAt(i)) ? '0' : '1';\n            result.append(xorResult);\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.string_xor(\"010\", \"110\")); // Output: \"100\"\n    }\n}\n"}
{"task_id": "Java/39", "generation": "class Solution {\n    /**\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    */\n    public int prime_fib(int n) {\n        if (n < 1) {\n            throw new IllegalArgumentException(\"n must be a positive integer\");\n        }\n\n        List<Integer> primeFibs = new ArrayList<>();\n        int a = 0, b = 1;\n\n        while (primeFibs.size() < n) {\n            int fib = a + b;\n            a = b;\n            b = fib;\n\n            if (isPrime(fib)) {\n                primeFibs.add(fib);\n            }\n        }\n\n        return primeFibs.get(n - 1);\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        if (num <= 3) return true;\n        if (num % 2 == 0 || num % 3 == 0) return false;\n\n        for (int i = 5; i * i <= num; i += 6) {\n            if (num % i == 0 || num % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.prime_fib(1)); // 2\n        System.out.println(sol.prime_fib(2)); // 3\n        System.out.println(sol.prime_fib(3)); // 5\n        System.out.println(sol.prime_fib(4)); // 13\n        System.out.println(sol.prime_fib(5)); // 89\n    }\n}\n"}
{"task_id": "Java/117", "generation": "class Solution {\n    public List<String> select_words(String s, int n) {\n        // Initialize a list to hold the result words\n        List<String> result = new ArrayList<>();\n        \n        // Check if the input string is empty\n        if (s == null || s.isEmpty()) {\n            return result; // Return an empty list\n        }\n        \n        // Split the string into words\n        String[] words = s.split(\" \");\n        \n        // Iterate through each word\n        for (String word : words) {\n            // Count the number of consonants in the word\n            int consonantCount = countConsonants(word);\n            \n            // If the consonant count matches n, add the word to the result\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        \n        return result; // Return the list of words with exactly n consonants\n    }\n    \n    // Helper method to count consonants in a word\n    private int countConsonants(String word) {\n        int count = 0;\n        // Convert the word to lower case for uniformity\n        word = word.toLowerCase();\n        \n        // Define a set of vowels\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u'));\n        \n        // Iterate through each character in the word\n        for (char c : word.toCharArray()) {\n            // Check if the character is a letter and not a vowel\n            if (Character.isLetter(c) && !vowels.contains(c)) {\n                count++; // Increment the consonant count\n            }\n        }\n        \n        return count; // Return the total count of consonants\n    }\n}\n"}
{"task_id": "Java/0", "generation": "class Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> has_close_elements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> has_close_elements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n    */\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        int n = numbers.size();\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true; // Found two numbers that are too close\n                }\n            }\n        }\n        return false; // No pairs found that are too close\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.has_close_elements(Arrays.asList(1.0, 2.0, 3.0), 0.5)); // false\n        System.out.println(solution.has_close_elements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)); // true\n    }\n}\n"}
{"task_id": "Java/31", "generation": "class Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    false\n    >>> is_prime(101)\n    true\n    >>> is_prime(11)\n    true\n    >>> is_prime(13441)\n    true\n    >>> is_prime(61)\n    true\n    >>> is_prime(4)\n    false\n    >>> is_prime(1)\n    false\n    */\n    public boolean is_prime(int n) {\n        // Check for numbers less than or equal to 1\n        if (n <= 1) {\n            return false;\n        }\n        // Check for factors from 2 to the square root of n\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false; // Found a divisor, not prime\n            }\n        }\n        return true; // No divisors found, is prime\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.is_prime(6));      // false\n        System.out.println(solution.is_prime(101));    // true\n        System.out.println(solution.is_prime(11));     // true\n        System.out.println(solution.is_prime(13441));  // true\n        System.out.println(solution.is_prime(61));     // true\n        System.out.println(solution.is_prime(4));      // false\n        System.out.println(solution.is_prime(1));      // false\n    }\n}\n"}
{"task_id": "Java/106", "generation": "class Solution {\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                // Calculate factorial of i\n                result.add(factorial(i));\n            } else {\n                // Calculate sum from 1 to i\n                result.add(sumToN(i));\n            }\n        }\n        \n        return result;\n    }\n    \n    private int factorial(int num) {\n        int fact = 1;\n        for (int j = 1; j <= num; j++) {\n            fact *= j;\n        }\n        return fact;\n    }\n    \n    private int sumToN(int num) {\n        return (num * (num + 1)) / 2; // Using the formula for the sum of the first n natural numbers\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.f(5)); // Output: [1, 2, 6, 24, 15]\n    }\n}\n"}
{"task_id": "Java/5", "generation": "class Solution {\n    /**\n    Insert a number 'delimiter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n    */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        \n        // Check if the input list is empty\n        if (numbers.isEmpty()) {\n            return result; // Return an empty list\n        }\n        \n        // Iterate through the list and add elements and delimiters\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i)); // Add the current element\n            \n            // If it's not the last element, add the delimiter\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        \n        return result; // Return the final list with delimiters\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.intersperse(List.of(), 4)); // []\n        System.out.println(solution.intersperse(Arrays.asList(1, 2, 3), 4)); // [1, 4, 2, 4, 3]\n        System.out.println(solution.intersperse(Arrays.asList(5, 10), 0)); // [5, 0, 10]\n        System.out.println(solution.intersperse(Arrays.asList(1), 7)); // [1]\n    }\n}\n"}
{"task_id": "Java/114", "generation": "class Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n    */\n    public int minSubArraySum(List<Integer> nums) {\n        int currentSum = 0;\n        int minSum = Integer.MAX_VALUE;\n\n        for (int num : nums) {\n            currentSum += num;\n            minSum = Math.min(minSum, currentSum);\n            if (currentSum > 0) {\n                currentSum = 0; // Reset if current sum is positive\n            }\n        }\n\n        return minSum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4))); // Output: 1\n        System.out.println(solution.minSubArraySum(Arrays.asList(-1, -2, -3))); // Output: -6\n    }\n}\n"}
{"task_id": "Java/51", "generation": "class Solution {\n    /**\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels(\"\")\n    \"\"\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> remove_vowels(\"abcdef\")\n    \"bcdf\"\n    >>> remove_vowels(\"aaaaa\")\n    \"\"\n    >>> remove_vowels(\"aaBAA\")\n    \"B\"\n    >>> remove_vowels(\"zbcd\")\n    \"zbcd\"\n    */\n    public String remove_vowels(String text) {\n        // Define a set of vowels (both lowercase and uppercase)\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', \n                                                              'A', 'E', 'I', 'O', 'U'));\n        StringBuilder result = new StringBuilder();\n        \n        // Iterate through each character in the input string\n        for (char c : text.toCharArray()) {\n            // If the character is not a vowel, append it to the result\n            if (!vowels.contains(c)) {\n                result.append(c);\n            }\n        }\n        \n        // Return the resulting string without vowels\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/152", "generation": "class Solution {\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        \n        // Iterate through both lists\n        for (int i = 0; i < game.size(); i++) {\n            // Calculate the absolute difference\n            int difference = Math.abs(game.get(i) - guess.get(i));\n            result.add(difference);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.compare(Arrays.asList(1, 2, 3, 4, 5, 1), Arrays.asList(1, 2, 3, 4, 2, -2))); // [0, 0, 0, 0, 3, 3]\n        System.out.println(solution.compare(Arrays.asList(0, 5, 0, 0, 0, 4), Arrays.asList(4, 1, 1, 0, 0, -2))); // [4, 4, 1, 0, 0, 6]\n    }\n}\n"}
{"task_id": "Java/139", "generation": "class Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long special_factorial(int n) {\n        long result = 1; // Initialize result to 1\n        for (int i = 1; i <= n; i++) {\n            result *= factorial(i); // Multiply by the factorial of i\n        }\n        return result; // Return the final result\n    }\n\n    // Helper method to calculate factorial of a number\n    private long factorial(int num) {\n        long fact = 1; // Initialize factorial to 1\n        for (int i = 2; i <= num; i++) {\n            fact *= i; // Calculate factorial\n        }\n        return fact; // Return the factorial\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.special_factorial(4)); // Output: 288\n    }\n}\n"}
{"task_id": "Java/105", "generation": "class Solution {\n    public List<String> by_length(List<Integer> arr) {\n        // Step 1: Filter the list to keep only integers between 1 and 9\n        List<Integer> filteredList = new ArrayList<>();\n        for (Integer num : arr) {\n            if (num >= 1 && num <= 9) {\n                filteredList.add(num);\n            }\n        }\n\n        // Step 2: Sort the filtered list\n        Collections.sort(filteredList);\n\n        // Step 3: Reverse the sorted list\n        Collections.reverse(filteredList);\n\n        // Step 4: Map each integer to its corresponding name\n        List<String> result = new ArrayList<>();\n        String[] names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        \n        for (Integer num : filteredList) {\n            result.add(names[num - 1]); // num - 1 to get the correct index\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.by_length(Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3))); // [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n        System.out.println(solution.by_length(Arrays.asList())); // []\n        System.out.println(solution.by_length(Arrays.asList(1, -1, 55))); // [\"One\"]\n    }\n}\n"}
{"task_id": "Java/12", "generation": "class Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n    */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longestString = strings.get(0); // Start with the first string\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str; // Update if we find a longer string\n            }\n        }\n        return Optional.of(longestString); // Return the longest string wrapped in Optional\n    }\n}\n"}
{"task_id": "Java/7", "generation": "class Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring(List.of(), \"a\")\n    []\n    >>> filter_by_substring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    */\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        // Use stream to filter the list based on the substring\n        return strings.stream()\n                      .filter(s -> s.contains(substring))\n                      .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.filter_by_substring(List.of(), \"a\")); // []\n        System.out.println(solution.filter_by_substring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")); // [\"abc\", \"bacd\", \"array\"]\n    }\n}\n"}
{"task_id": "Java/138", "generation": "class Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == false\n    is_equal_to_sum_even(6) == false\n    is_equal_to_sum_even(8) == true\n    */\n    public boolean is_equal_to_sum_even(int n) {\n        // Check if n is less than 8\n        if (n < 8) {\n            return false;\n        }\n        // Check if n is even\n        return n % 2 == 0;\n    }\n}\n"}
{"task_id": "Java/41", "generation": "class Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int car_race_collision(int n) {\n        // Each car moving left to right collides with each car moving right to left\n        return n * n; // Total collisions = n (left to right) * n (right to left)\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 5; // Example input\n        int collisions = solution.car_race_collision(n);\n        System.out.println(\"Number of collisions: \" + collisions); // Output: 25\n    }\n}\n"}
{"task_id": "Java/67", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruit_distribution(String s, int n) {\n        // Split the string to extract the number of apples and oranges\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0]);  // First part is the number of apples\n        int oranges = Integer.parseInt(parts[2]); // Third part is the number of oranges\n        \n        // Calculate the number of mangoes\n        int mangoes = n - apples - oranges;\n        return mangoes;\n    }\n}\n"}
{"task_id": "Java/40", "generation": "class Solution {\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        // Convert the List to an array for easier manipulation\n        Integer[] arr = l.toArray(new Integer[0]);\n        Arrays.sort(arr); // Sort the array\n\n        int n = arr.length;\n\n        // Iterate through the array\n        for (int i = 0; i < n - 2; i++) {\n            // Skip duplicates for the first element\n            if (i > 0 && arr[i].equals(arr[i - 1])) {\n                continue;\n            }\n\n            int left = i + 1; // Start of the remaining elements\n            int right = n - 1; // End of the remaining elements\n\n            while (left < right) {\n                int sum = arr[i] + arr[left] + arr[right];\n\n                if (sum == 0) {\n                    return true; // Found a triplet\n                } else if (sum < 0) {\n                    left++; // Move the left pointer to the right\n                } else {\n                    right--; // Move the right pointer to the left\n                }\n            }\n        }\n\n        return false; // No triplet found\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1, 3, -2, 1))); // true\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(2, 4, -5, 3, 9, 7))); // true\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1))); // false\n    }\n}\n"}
{"task_id": "Java/33", "generation": "class Solution {\n    public List<Integer> sort_third(List<Integer> l) {\n        // List to hold the values at indices divisible by 3\n        List<Integer> divisibleByThreeValues = new ArrayList<>();\n        \n        // Collect values at indices divisible by 3\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                divisibleByThreeValues.add(l.get(i));\n            }\n        }\n        \n        // Sort the collected values\n        Collections.sort(divisibleByThreeValues);\n        \n        // Create a new list to hold the result\n        List<Integer> result = new ArrayList<>(l);\n        \n        // Replace values at indices divisible by 3 with sorted values\n        int sortedIndex = 0;\n        for (int i = 0; i < result.size(); i++) {\n            if (i % 3 == 0) {\n                result.set(i, divisibleByThreeValues.get(sortedIndex));\n                sortedIndex++;\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.sort_third(Arrays.asList(1, 2, 3))); // Output: [1, 2, 3]\n        System.out.println(solution.sort_third(Arrays.asList(5, 6, 3, 4, 8, 9, 2))); // Output: [2, 6, 3, 4, 8, 9, 5]\n    }\n}\n"}
{"task_id": "Java/136", "generation": "class Solution {\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        Optional<Integer> largestNegative = Optional.empty();\n        Optional<Integer> smallestPositive = Optional.empty();\n\n        for (Integer num : lst) {\n            if (num < 0) {\n                if (largestNegative.isEmpty() || num > largestNegative.get()) {\n                    largestNegative = Optional.of(num);\n                }\n            } else if (num > 0) {\n                if (smallestPositive.isEmpty() || num < smallestPositive.get()) {\n                    smallestPositive = Optional.of(num);\n                }\n            }\n        }\n\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(2, 4, 1, 3, 5, 7))); // (Optional.empty(), Optional.of(1))\n        System.out.println(solution.largest_smallest_integers(Arrays.asList())); // (Optional.empty(), Optional.empty())\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(0))); // (Optional.empty(), Optional.empty())\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(-1, -2, 0, 1, 2))); // (Optional.of(-1), Optional.of(1))\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(-5, -3, -1, 0))); // (Optional.of(-1), Optional.empty())\n    }\n}\n"}
{"task_id": "Java/1", "generation": "class Solution {\n    public List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        StringBuilder currentGroup = new StringBuilder();\n        int balance = 0;\n\n        // Remove spaces from the input string\n        paren_string = paren_string.replace(\" \", \"\");\n\n        for (char ch : paren_string.toCharArray()) {\n            if (ch == '(') {\n                // Increment balance and start a new group if balance was zero\n                if (balance == 0 && currentGroup.length() > 0) {\n                    result.add(currentGroup.toString());\n                    currentGroup.setLength(0); // Reset for the next group\n                }\n                currentGroup.append(ch);\n                balance++;\n            } else if (ch == ')') {\n                currentGroup.append(ch);\n                balance--;\n            }\n\n            // When balance is zero, we have a complete group\n            if (balance == 0 && currentGroup.length() > 0) {\n                result.add(currentGroup.toString());\n                currentGroup.setLength(0); // Reset for the next group\n            }\n        }\n\n        // Return the list of separated groups\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.separate_paren_groups(\"( ) (( )) (( )( ))\")); // Output: [\"()\", \"(())\", \"(()())\"]\n    }\n}\n"}
{"task_id": "Java/126", "generation": "class Solution {\n    public boolean is_sorted(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return true; // An empty list is considered sorted\n        }\n\n        Map<Integer, Integer> countMap = new HashMap<>();\n        int previous = lst.get(0);\n        countMap.put(previous, 1);\n\n        for (int i = 1; i < lst.size(); i++) {\n            int current = lst.get(i);\n\n            // Check if the current number is less than the previous number\n            if (current < previous) {\n                return false; // Not sorted\n            }\n\n            // Update the count of the current number\n            countMap.put(current, countMap.getOrDefault(current, 0) + 1);\n            if (countMap.get(current) > 2) {\n                return false; // A number appears more than twice\n            }\n\n            previous = current; // Update previous to current for the next iteration\n        }\n\n        return true; // The list is sorted and no number appears more than twice\n    }\n}\n"}
{"task_id": "Java/38", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decode_cyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n"}
{"task_id": "Java/18", "generation": "class Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlapping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    */\n    public int how_many_times(String string, String substring) {\n        if (substring.isEmpty() || string.length() < substring.length()) {\n            return 0;\n        }\n\n        int count = 0;\n        int index = 0;\n\n        while ((index = string.indexOf(substring, index)) != -1) {\n            count++;\n            index++; // Move to the next character to allow for overlapping matches\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.how_many_times(\"\", \"a\")); // 0\n        System.out.println(solution.how_many_times(\"aaa\", \"a\")); // 3\n        System.out.println(solution.how_many_times(\"aaaa\", \"aa\")); // 3\n    }\n}\n"}
{"task_id": "Java/45", "generation": "class Solution {\n    /**\n     * Given length of a side (base) and height, return area for a triangle.\n     * @param a Length of the base of the triangle\n     * @param h Height of the triangle\n     * @return Area of the triangle\n     */\n    public double triangle_area(double a, double h) {\n        return 0.5 * a * h;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        double base = 5;\n        double height = 3;\n        double area = solution.triangle_area(base, height);\n        System.out.println(\"The area of the triangle is: \" + area); // Output: 7.5\n    }\n}\n"}
{"task_id": "Java/81", "generation": "class Solution {\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        \n        for (Double gpa : grades) {\n            if (gpa == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        \n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> grades = Arrays.asList(4.0, 3.0, 1.7, 2.0, 3.5);\n        List<String> letterGrades = solution.numerical_letter_grade(grades);\n        System.out.println(letterGrades); // Output: [A+, B+, C-, C, A-]\n    }\n}\n"}
{"task_id": "Java/26", "generation": "class Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates(Arrays.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n    */\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        // Step 1: Count occurrences of each number\n        Map<Integer, Long> frequencyMap = numbers.stream()\n            .collect(Collectors.groupingBy(num -> num, Collectors.counting()));\n\n        // Step 2: Filter out numbers that occur more than once\n        List<Integer> result = new ArrayList<>();\n        for (Integer number : numbers) {\n            if (frequencyMap.get(number) == 1) {\n                result.add(number);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> result = solution.remove_duplicates(Arrays.asList(1, 2, 3, 2, 4));\n        System.out.println(result); // Output: [1, 3, 4]\n    }\n}\n"}
{"task_id": "Java/134", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        // Strip any trailing spaces from the string\n        txt = txt.trim();\n        \n        // Check if the string is empty after trimming\n        if (txt.isEmpty()) {\n            return false;\n        }\n        \n        // Get the last character of the string\n        char lastChar = txt.charAt(txt.length() - 1);\n        \n        // Check if the last character is an alphabetical character\n        return Character.isLetter(lastChar) && (txt.length() == 1 || txt.charAt(txt.length() - 2) == ' ');\n    }\n}\n"}
{"task_id": "Java/76", "generation": "class Solution {\n    public boolean is_simple_power(int x, int n) {\n        // Handle special cases\n        if (n == 1) {\n            return x == 1; // 1^k = 1 for any k\n        }\n        if (n <= 0) {\n            return false; // Powers of non-positive numbers are not considered\n        }\n        \n        int power = 1; // Start with n^0\n        while (power < x) {\n            power *= n; // Calculate n^k\n        }\n        \n        return power == x; // Check if we found x\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.is_simple_power(1, 4)); // true\n        System.out.println(solution.is_simple_power(2, 2)); // true\n        System.out.println(solution.is_simple_power(8, 2)); // true\n        System.out.println(solution.is_simple_power(3, 2)); // false\n        System.out.println(solution.is_simple_power(3, 1)); // false\n        System.out.println(solution.is_simple_power(5, 3)); // false\n    }\n}\n"}
{"task_id": "Java/120", "generation": "class Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Step 1: Sort the array in descending order\n        Collections.sort(arr, Collections.reverseOrder());\n        \n        // Step 2: Get the first k elements\n        List<Integer> maxKElements = arr.subList(0, k);\n        \n        // Step 3: Sort the selected k elements in ascending order\n        Collections.sort(maxKElements);\n        \n        return maxKElements;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Example 1\n        List<Integer> arr1 = Arrays.asList(-3, -4, 5);\n        int k1 = 3;\n        System.out.println(solution.maximum(arr1, k1)); // Output: [-4, -3, 5]\n\n        // Example 2\n        List<Integer> arr2 = Arrays.asList(4, -4, 4);\n        int k2 = 2;\n        System.out.println(solution.maximum(arr2, k2)); // Output: [4, 4]\n\n        // Example 3\n        List<Integer> arr3 = Arrays.asList(-3, 2, 1, 2, -1, -2, 1);\n        int k3 = 1;\n        System.out.println(solution.maximum(arr3, k3)); // Output: [2]\n    }\n}\n"}
{"task_id": "Java/47", "generation": "class Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    8.0\n    */\n    public double median(List<Integer> l) {\n        // Sort the list\n        Collections.sort(l);\n        \n        int size = l.size();\n        if (size % 2 == 1) {\n            // If odd, return the middle element\n            return l.get(size / 2);\n        } else {\n            // If even, return the average of the two middle elements\n            double mid1 = l.get(size / 2 - 1);\n            double mid2 = l.get(size / 2);\n            return (mid1 + mid2) / 2.0;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.median(Arrays.asList(3, 1, 2, 4, 5))); // Output: 3.0\n        System.out.println(solution.median(Arrays.asList(-10, 4, 6, 1000, 10, 20))); // Output: 8.0\n    }\n}\n"}
{"task_id": "Java/78", "generation": "class Solution {\n    public int hex_key(String num) {\n        // Set of prime hexadecimal digits\n        HashSet<Character> primeHexDigits = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        int count = 0;\n        \n        // Iterate through each character in the input string\n        for (char ch : num.toCharArray()) {\n            // Check if the character is a prime hexadecimal digit\n            if (primeHexDigits.contains(ch)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.hex_key(\"AB\")); // Output: 1\n        System.out.println(solution.hex_key(\"1077E\")); // Output: 2\n        System.out.println(solution.hex_key(\"ABED1A33\")); // Output: 4\n        System.out.println(solution.hex_key(\"123456789ABCDEF0\")); // Output: 6\n        System.out.println(solution.hex_key(\"2020\")); // Output: 2\n    }\n}\n"}
{"task_id": "Java/129", "generation": "import java.util.*;\n\nclass Solution {\n    private List<Integer> minPath = null;\n    private int N;\n    private int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}}; // Right, Down, Left, Up\n\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        N = grid.size();\n\n        // Start DFS from each cell in the grid\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < N; j++) {\n                List<Integer> path = new ArrayList<>();\n                path.add(grid.get(i).get(j));\n                dfs(i, j, path, grid, k);\n            }\n        }\n\n        return minPath;\n    }\n\n    private void dfs(int x, int y, List<Integer> path, List<List<Integer>> grid, int k) {\n        if (path.size() == k) {\n            if (minPath == null || comparePaths(path, minPath) < 0) {\n                minPath = new ArrayList<>(path);\n            }\n            return;\n        }\n\n        for (int[] dir : directions) {\n            int nx = x + dir[0];\n            int ny = y + dir[1];\n            if (nx >= 0 && nx < N && ny >= 0 && ny < N) {\n                path.add(grid.get(nx).get(ny));\n                dfs(nx, ny, path, grid, k);\n                path.remove(path.size() - 1);\n            }\n        }\n    }\n\n    private int comparePaths(List<Integer> path1, List<Integer> path2) {\n        for (int i = 0; i < path1.size(); i++) {\n            if (path1.get(i).equals(path2.get(i))) continue;\n            return path1.get(i) - path2.get(i);\n        }\n        return 0;\n    }\n}\n"}
{"task_id": "Java/59", "generation": "class Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    */\n    public int largest_prime_factor(int n) {\n        // Initialize the largest prime factor\n        int largestPrime = -1;\n\n        // Check for number of 2s that divide n\n        while (n % 2 == 0) {\n            largestPrime = 2;\n            n /= 2;\n        }\n\n        // n must be odd at this point, so we can skip even numbers\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            // While i divides n, update n and largestPrime\n            while (n % i == 0) {\n                largestPrime = i;\n                n /= i;\n            }\n        }\n\n        // This condition is to check if n is a prime number greater than 2\n        if (n > 2) {\n            largestPrime = n;\n        }\n\n        return largestPrime;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.largest_prime_factor(13195)); // Output: 29\n        System.out.println(solution.largest_prime_factor(2048));  // Output: 2\n    }\n}\n"}
{"task_id": "Java/123", "generation": "class Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> get_odd_collatz(int n) {\n        Set<Integer> oddNumbers = new HashSet<>(); // Use a set to avoid duplicates\n        while (n != 1) {\n            if (n % 2 != 0) { // Check if n is odd\n                oddNumbers.add(n);\n            }\n            // Apply the Collatz rules\n            if (n % 2 == 0) {\n                n = n / 2; // If n is even\n            } else {\n                n = 3 * n + 1; // If n is odd\n            }\n        }\n        oddNumbers.add(1); // Add 1 to the set as it is part of the sequence\n\n        // Convert the set to a list and sort it\n        List<Integer> result = new ArrayList<>(oddNumbers);\n        Collections.sort(result);\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.get_odd_collatz(5)); // Output: [1, 5]\n        System.out.println(solution.get_odd_collatz(7)); // Example output: [1, 7]\n        System.out.println(solution.get_odd_collatz(10)); // Example output: [1, 5, 9]\n    }\n}\n"}
{"task_id": "Java/74", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        int totalCharsLst1 = 0;\n        int totalCharsLst2 = 0;\n\n        // Calculate total characters in lst1\n        for (String s : lst1) {\n            totalCharsLst1 += s.length();\n        }\n\n        // Calculate total characters in lst2\n        for (String s : lst2) {\n            totalCharsLst2 += s.length();\n        }\n\n        // Compare total characters and return the appropriate list\n        if (totalCharsLst1 < totalCharsLst2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n"}
{"task_id": "Java/21", "generation": "class Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1.\n    >>> rescale_to_unit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    */\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        // Check if the list has at least two elements\n        if (numbers.size() < 2) {\n            throw new IllegalArgumentException(\"The list must contain at least two elements.\");\n        }\n\n        // Find the minimum and maximum values in the list\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n\n        // Create a new list to store the rescaled values\n        List<Double> rescaled = new ArrayList<>();\n\n        // Apply the linear transformation to each number\n        for (Double number : numbers) {\n            double scaledValue = (number - min) / (max - min);\n            rescaled.add(scaledValue);\n        }\n\n        return rescaled;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> result = solution.rescale_to_unit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0));\n        System.out.println(result); // Output: [0.0, 0.25, 0.5, 0.75, 1.0]\n    }\n}\n"}
{"task_id": "Java/48", "generation": "class Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    */\n    public boolean is_palindrome(String text) {\n        // Handle null or empty string case\n        if (text == null || text.isEmpty()) {\n            return true;\n        }\n\n        int left = 0;\n        int right = text.length() - 1;\n\n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false; // Not a palindrome\n            }\n            left++;\n            right--;\n        }\n        return true; // Is a palindrome\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.is_palindrome(\"\")); // true\n        System.out.println(solution.is_palindrome(\"aba\")); // true\n        System.out.println(solution.is_palindrome(\"aaaaa\")); // true\n        System.out.println(solution.is_palindrome(\"zbcd\")); // false\n    }\n}\n"}
{"task_id": "Java/13", "generation": "class Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    */\n    public int greatest_common_divisor(int a, int b) {\n        // Ensure a is non-negative\n        a = Math.abs(a);\n        b = Math.abs(b);\n        \n        // Implementing the Euclidean algorithm\n        while (b != 0) {\n            int temp = b;\n            b = a % b; // Remainder\n            a = temp;  // Update a to the last non-zero remainder\n        }\n        return a; // GCD is the last non-zero remainder\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.greatest_common_divisor(3, 5)); // Output: 1\n        System.out.println(solution.greatest_common_divisor(25, 15)); // Output: 5\n    }\n}\n"}
{"task_id": "Java/42", "generation": "class Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incr_list(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incr_list(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    */\n    public List<Integer> incr_list(List<Integer> l) {\n        return l.stream()\n                .map(n -> n + 1) // Increment each element by 1\n                .collect(Collectors.toList()); // Collect the results into a list\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.incr_list(Arrays.asList(1, 2, 3))); // Output: [2, 3, 4]\n        System.out.println(solution.incr_list(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))); // Output: [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    }\n}\n"}
{"task_id": "Java/84", "generation": "class Solution {\n    public String solve(int N) {\n        // Step 1: Convert N to a string to iterate through its digits\n        String numberString = Integer.toString(N);\n        \n        // Step 2: Calculate the sum of the digits\n        int sum = 0;\n        for (char digit : numberString.toCharArray()) {\n            sum += Character.getNumericValue(digit);\n        }\n        \n        // Step 3: Convert the sum to binary\n        String binarySum = Integer.toBinaryString(sum);\n        \n        // Step 4: Return the binary representation\n        return binarySum;\n    }\n}\n"}
{"task_id": "Java/140", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String fix_spaces(String text) {\n        // Replace multiple spaces with a single space\n        text = text.trim().replaceAll(\"\\\\s+\", \" \");\n        // Replace spaces with underscores\n        text = text.replace(\" \", \"_\");\n        // Replace consecutive underscores with a single dash\n        text = text.replaceAll(\"_+\", \"-\");\n        return text;\n    }\n}\n"}
{"task_id": "Java/92", "generation": "class Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) -> true\n\n    any_int(3, 2, 2) -> false\n\n    any_int(3, -2, 1) -> true\n\n    any_int(3.6, -2.2, 2) -> false\n    */\n    public boolean any_int(Object x, Object y, Object z) {\n        // Check if all inputs are instances of Integer\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int a = (Integer) x;\n            int b = (Integer) y;\n            int c = (Integer) z;\n\n            // Check if any number is equal to the sum of the other two\n            return (a == b + c) || (b == a + c) || (c == a + b);\n        }\n        // Return false if any of the inputs are not integers\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.any_int(5, 2, 7)); // true\n        System.out.println(solution.any_int(3, 2, 2)); // false\n        System.out.println(solution.any_int(3, -2, 1)); // true\n        System.out.println(solution.any_int(3.6, -2.2, 2)); // false\n    }\n}\n"}
{"task_id": "Java/143", "generation": "class Solution {\n    public String words_in_sentence(String sentence) {\n        // Split the sentence into words\n        String[] words = sentence.split(\" \");\n        List<String> primeLengthWords = new ArrayList<>();\n\n        // Check each word's length\n        for (String word : words) {\n            int length = word.length();\n            if (isPrime(length)) {\n                primeLengthWords.add(word);\n            }\n        }\n\n        // Join the words with a space and return\n        return String.join(\" \", primeLengthWords);\n    }\n\n    // Helper method to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) return false; // 0 and 1 are not prime numbers\n        if (num <= 3) return true; // 2 and 3 are prime numbers\n        if (num % 2 == 0 || num % 3 == 0) return false; // eliminate multiples of 2 and 3\n\n        for (int i = 5; i * i <= num; i += 6) {\n            if (num % i == 0 || num % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.words_in_sentence(\"This is a test\")); // Output: \"is\"\n        System.out.println(solution.words_in_sentence(\"lets go for swimming\")); // Output: \"go for\"\n    }\n}\n"}
{"task_id": "Java/148", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> bf(String planet1, String planet2) {\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        \n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return new ArrayList<>(); // Return an empty list if either planet is invalid\n        }\n        \n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        \n        // Ensure index1 is less than index2\n        if (index1 > index2) {\n            int temp = index1;\n            index1 = index2;\n            index2 = temp;\n        }\n        \n        // Return the sublist of planets between index1 and index2\n        return planets.subList(index1 + 1, index2);\n    }\n}\n"}
{"task_id": "Java/115", "generation": "class Solution {\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        int totalLowerings = 0;\n\n        for (List<Integer> well : grid) {\n            int waterUnits = 0;\n\n            // Count the number of water units in the current well\n            for (int water : well) {\n                waterUnits += water;\n            }\n\n            // Calculate the number of times we need to lower the bucket for this well\n            if (waterUnits > 0) {\n                totalLowerings += (waterUnits + capacity - 1) / capacity; // This is equivalent to Math.ceil(waterUnits / capacity)\n            }\n        }\n\n        return totalLowerings;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1\n        List<List<Integer>> grid1 = Arrays.asList(\n            Arrays.asList(0, 0, 1, 0),\n            Arrays.asList(0, 1, 0, 0),\n            Arrays.asList(1, 1, 1, 1)\n        );\n        int capacity1 = 1;\n        System.out.println(solution.max_fill(grid1, capacity1)); // Output: 6\n\n        // Test case 2\n        List<List<Integer>> grid2 = Arrays.asList(\n            Arrays.asList(0, 0, 1, 1),\n            Arrays.asList(0, 0, 0, 0),\n            Arrays.asList(1, 1, 1, 1),\n            Arrays.asList(0, 1, 1, 1)\n        );\n        int capacity2 = 2;\n        System.out.println(solution.max_fill(grid2, capacity2)); // Output: 5\n\n        // Test case 3\n        List<List<Integer>> grid3 = Arrays.asList(\n            Arrays.asList(0, 0, 0),\n            Arrays.asList(0, 0, 0)\n        );\n        int capacity3 = 5;\n        System.out.println(solution.max_fill(grid3, capacity3)); // Output: 0\n    }\n}\n"}
{"task_id": "Java/71", "generation": "class Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    */\n    public double triangle_area(double a, double b, double c) {\n        // Check if the sides form a valid triangle\n        if (a + b > c && a + c > b && b + c > a) {\n            // Calculate the semi-perimeter\n            double s = (a + b + c) / 2;\n            // Calculate the area using Heron's formula\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            // Return the area rounded to 2 decimal points\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            // Return -1 if the sides do not form a valid triangle\n            return -1;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.triangle_area(3, 4, 5)); // Output: 6.00\n        System.out.println(sol.triangle_area(1, 2, 10)); // Output: -1\n    }\n}\n"}
{"task_id": "Java/163", "generation": "class Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order. Please note that the even digits refer to even numbers less than 10.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n     */\n    public List<Integer> generate_integers(int a, int b) {\n        // Create a list to store the even digits\n        List<Integer> evenDigits = new ArrayList<>();\n        \n        // Determine the start and end of the range\n        int start = Math.min(a, b);\n        int end = Math.max(a, b);\n        \n        // Iterate through the range from start to end\n        for (int i = start; i <= end; i++) {\n            // Check if the number is a single digit and even\n            if (i >= 0 && i < 10 && i % 2 == 0) {\n                evenDigits.add(i);\n            }\n        }\n        \n        // Return the list of even digits\n        return evenDigits;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.generate_integers(2, 8)); // Output: [2, 4, 6, 8]\n        System.out.println(solution.generate_integers(8, 2)); // Output: [2, 4, 6, 8]\n        System.out.println(solution.generate_integers(10, 14)); // Output: []\n    }\n}\n"}
{"task_id": "Java/19", "generation": "class Solution {\n    /**\n    Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    */\n    public String sort_numbers(String numbers) {\n        // Map of number words to their corresponding integer values\n        Map<String, Integer> numberMap = new HashMap<>();\n        numberMap.put(\"zero\", 0);\n        numberMap.put(\"one\", 1);\n        numberMap.put(\"two\", 2);\n        numberMap.put(\"three\", 3);\n        numberMap.put(\"four\", 4);\n        numberMap.put(\"five\", 5);\n        numberMap.put(\"six\", 6);\n        numberMap.put(\"seven\", 7);\n        numberMap.put(\"eight\", 8);\n        numberMap.put(\"nine\", 9);\n\n        // Split the input string into words\n        String[] words = numbers.split(\" \");\n        \n        // Create a list to hold the numbers\n        List<String> numberWords = new ArrayList<>(Arrays.asList(words));\n        \n        // Sort the list based on the integer values\n        Collections.sort(numberWords, (a, b) -> numberMap.get(a) - numberMap.get(b));\n        \n        // Join the sorted words into a single string\n        return String.join(\" \", numberWords);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String result = solution.sort_numbers(\"three one five\");\n        System.out.println(result); // Output: \"one three five\"\n    }\n}\n"}
{"task_id": "Java/118", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String get_closest_vowel(String word) {\n        String vowels = \"aeiouAEIOU\";\n        String closestVowel = \"\";\n        \n        // Start from the end of the word and look for consonants\n        for (int i = word.length() - 1; i > 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) != -1) {\n                continue;\n            }\n            if (i > 1 && vowels.indexOf(word.charAt(i - 1)) != -1 && \n                vowels.indexOf(word.charAt(i - 2)) == -1) {\n                closestVowel = String.valueOf(word.charAt(i - 1));\n                break;\n            }\n        }\n        \n        return closestVowel;\n    }\n}\n"}
{"task_id": "Java/101", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> words_string(String s) {\n        // Trim the input string to remove leading and trailing whitespace\n        s = s.trim();\n        // Split the string by commas and spaces using regex\n        String[] wordsArray = s.split(\"[,\\\\s]+\");\n        // Convert the array to a List\n        return Arrays.asList(wordsArray);\n    }\n}\n"}
{"task_id": "Java/151", "generation": "class Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    double_the_difference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    double_the_difference(Arrays.asList(-1, -2, 0)) == 0\n    double_the_difference(Arrays.asList(9, -2)) == 81\n    double_the_difference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int double_the_difference(List<Object> lst) {\n        int sumOfSquares = 0;\n\n        for (Object obj : lst) {\n            // Check if the object is an instance of Integer\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n\n                // Check if the number is positive and odd\n                if (num > 0 && num % 2 != 0) {\n                    sumOfSquares += num * num; // Add the square of the odd number\n                }\n            }\n        }\n\n        return sumOfSquares;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.double_the_difference(Arrays.asList(1, 3, 2, 0))); // Output: 10\n        System.out.println(solution.double_the_difference(Arrays.asList(-1, -2, 0))); // Output: 0\n        System.out.println(solution.double_the_difference(Arrays.asList(9, -2))); // Output: 81\n        System.out.println(solution.double_the_difference(Arrays.asList(0))); // Output: 0\n        System.out.println(solution.double_the_difference(Arrays.asList())); // Output: 0\n    }\n}\n"}
{"task_id": "Java/133", "generation": "class Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sum_squares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            // Round up to the nearest integer\n            int rounded = (int) Math.ceil(num);\n            // Square the rounded number and add to the sum\n            sum += rounded * rounded;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.sum_squares(Arrays.asList(1.0, 2.0, 3.0))); // Output: 14\n        System.out.println(solution.sum_squares(Arrays.asList(1.0, 4.0, 9.0))); // Output: 98\n        System.out.println(solution.sum_squares(Arrays.asList(1.0, 3.0, 5.0, 7.0))); // Output: 84\n        System.out.println(solution.sum_squares(Arrays.asList(1.4, 4.2, 0.0))); // Output: 29\n        System.out.println(solution.sum_squares(Arrays.asList(-2.4, 1.0, 1.0))); // Output: 6\n    }\n}\n"}
{"task_id": "Java/144", "generation": "class Solution {\n    public boolean simplify(String x, String n) {\n        // Split the fractions into numerator and denominator\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n        \n        // Parse the numerators and denominators\n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n        \n        // Calculate the product's numerator and denominator\n        int productNumerator = xNumerator * nNumerator;\n        int productDenominator = xDenominator * nDenominator;\n        \n        // Check if the product is a whole number\n        return productNumerator % productDenominator == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.simplify(\"1/5\", \"5/1\")); // true\n        System.out.println(solution.simplify(\"1/6\", \"2/1\")); // false\n        System.out.println(solution.simplify(\"7/10\", \"10/2\")); // false\n    }\n}\n"}
{"task_id": "Java/158", "generation": "class Solution {\n    public String find_max(List<String> words) {\n        String maxWord = \"\";\n        int maxUniqueCount = 0;\n\n        for (String word : words) {\n            // Use a Set to find unique characters\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            int uniqueCount = uniqueChars.size();\n\n            // Check if we found a new maximum or if we need to check lexicographical order\n            if (uniqueCount > maxUniqueCount) {\n                maxUniqueCount = uniqueCount;\n                maxWord = word;\n            } else if (uniqueCount == maxUniqueCount) {\n                if (word.compareTo(maxWord) < 0) {\n                    maxWord = word;\n                }\n            }\n        }\n\n        return maxWord;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.find_max(Arrays.asList(\"name\", \"of\", \"string\"))); // Output: \"string\"\n        System.out.println(solution.find_max(Arrays.asList(\"name\", \"enam\", \"game\"))); // Output: \"enam\"\n        System.out.println(solution.find_max(Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\"))); // Output: \"aaaaaaa\"\n    }\n}\n"}
{"task_id": "Java/63", "generation": "class Solution {\n    public int fibfib(int n) {\n        // Handle base cases\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n\n        // Create an array to store the fibfib values\n        int[] fibfib = new int[n + 1];\n        fibfib[0] = 0; // fibfib(0)\n        fibfib[1] = 0; // fibfib(1)\n        fibfib[2] = 1; // fibfib(2)\n\n        // Fill the array using the recursive relation\n        for (int i = 3; i <= n; i++) {\n            fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n        }\n\n        // Return the n-th fibfib number\n        return fibfib[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fibfib(1)); // Output: 0\n        System.out.println(solution.fibfib(5)); // Output: 4\n        System.out.println(solution.fibfib(8)); // Output: 24\n    }\n}\n"}
{"task_id": "Java/37", "generation": "class Solution {\n    public List<Integer> sort_even(List<Integer> l) {\n        // Create a list to hold the even indexed values\n        List<Integer> evenValues = new ArrayList<>();\n        \n        // Extract values at even indices\n        for (int i = 0; i < l.size(); i += 2) {\n            evenValues.add(l.get(i));\n        }\n        \n        // Sort the even indexed values\n        Collections.sort(evenValues);\n        \n        // Create the result list\n        List<Integer> result = new ArrayList<>(l); // Start with a copy of the original list\n        \n        // Place the sorted even values back into the result list\n        for (int i = 0; i < evenValues.size(); i++) {\n            result.set(i * 2, evenValues.get(i)); // Set sorted value at even index\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        \n        // Test cases\n        System.out.println(sol.sort_even(Arrays.asList(1, 2, 3))); // Output: [1, 2, 3]\n        System.out.println(sol.sort_even(Arrays.asList(5, 6, 3, 4))); // Output: [3, 6, 5, 4]\n    }\n}\n"}
{"task_id": "Java/159", "generation": "class Solution {\n    public List<Integer> eat(int number, int need, int remaining) {\n        // Calculate how many carrots the rabbit can eat\n        int carrotsToEat = Math.min(need, remaining);\n        \n        // Calculate total eaten carrots\n        int totalEaten = number + carrotsToEat;\n        \n        // Calculate remaining carrots after eating\n        int carrotsLeft = remaining - carrotsToEat;\n        \n        // Create the result list\n        List<Integer> result = new ArrayList<>();\n        result.add(totalEaten);\n        result.add(carrotsLeft);\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/52", "generation": "class Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> below_threshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n    */\n    public boolean below_threshold(List<Integer> l, int t) {\n        for (int num : l) {\n            if (num >= t) {\n                return false; // Found a number that is not below the threshold\n            }\n        }\n        return true; // All numbers are below the threshold\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.below_threshold(Arrays.asList(1, 2, 4, 10), 100)); // true\n        System.out.println(solution.below_threshold(Arrays.asList(1, 20, 4, 10), 5)); // false\n    }\n}\n"}
{"task_id": "Java/137", "generation": "class Solution {\n    public Optional<Object> compare_one(Object a, Object b) {\n        // Convert both inputs to double for comparison\n        Double numA = convertToDouble(a);\n        Double numB = convertToDouble(b);\n        \n        // Check if both are equal\n        if (numA.equals(numB)) {\n            return Optional.empty();\n        }\n        \n        // Determine which is larger and return the original type\n        if (numA > numB) {\n            return Optional.of(a);\n        } else {\n            return Optional.of(b);\n        }\n    }\n    \n    private Double convertToDouble(Object obj) {\n        if (obj instanceof Number) {\n            return ((Number) obj).doubleValue();\n        } else if (obj instanceof String) {\n            String str = (String) obj;\n            // Replace comma with dot for decimal conversion\n            str = str.replace(',', '.');\n            try {\n                return Double.parseDouble(str);\n            } catch (NumberFormatException e) {\n                throw new IllegalArgumentException(\"Invalid number format: \" + str);\n            }\n        } else {\n            throw new IllegalArgumentException(\"Unsupported type: \" + obj.getClass());\n        }\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.compare_one(1, 2.5)); // Optional[2.5]\n        System.out.println(solution.compare_one(1, \"2,3\")); // Optional[2,3]\n        System.out.println(solution.compare_one(\"5,1\", \"6\")); // Optional[6]\n        System.out.println(solution.compare_one(\"1\", 1)); // Optional.empty\n    }\n}\n"}
{"task_id": "Java/154", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean cycpattern_check(String a, String b) {\n        if (b.length() > a.length()) {\n            return false;\n        }\n        // Concatenate b with itself to check for rotations\n        String b_rotated = b + b;\n        // Check if b is a substring of b_rotated\n        return b_rotated.contains(a) || b_rotated.substring(0, a.length()).equals(b_rotated.substring(b.length(), b.length() + a.length()));\n    }\n}\n"}
{"task_id": "Java/44", "generation": "class Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\n    >>> change_base(7, 2)\n    \"111\"\n    */\n    public String change_base(int x, int base) {\n        // Handle the case where x is 0\n        if (x == 0) {\n            return \"0\";\n        }\n\n        StringBuilder result = new StringBuilder();\n        int current = x;\n\n        // Convert x to the specified base\n        while (current > 0) {\n            int remainder = current % base;\n            result.append(remainder); // Append the remainder (digit in the new base)\n            current /= base; // Divide current by base\n        }\n\n        // The digits are in reverse order, so we need to reverse the StringBuilder\n        return result.reverse().toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.change_base(8, 3)); // Output: \"22\"\n        System.out.println(solution.change_base(8, 2)); // Output: \"1000\"\n        System.out.println(solution.change_base(7, 2)); // Output: \"111\"\n    }\n}\n"}
{"task_id": "Java/112", "generation": "class Solution {\n    public List<Object> reverse_delete(String s, String c) {\n        // Create a set of characters to delete\n        Set<Character> charsToDelete = new HashSet<>();\n        for (char ch : c.toCharArray()) {\n            charsToDelete.add(ch);\n        }\n        \n        // Build the resulting string by excluding characters in charsToDelete\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!charsToDelete.contains(ch)) {\n                result.append(ch);\n            }\n        }\n        \n        // Check if the resulting string is a palindrome\n        String resultString = result.toString();\n        boolean isPalindrome = isPalindrome(resultString);\n        \n        // Return the result as a list\n        return Arrays.asList(resultString, isPalindrome);\n    }\n    \n    private boolean isPalindrome(String str) {\n        int left = 0;\n        int right = str.length() - 1;\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.reverse_delete(\"abcde\", \"ae\")); // Output: [\"bcd\", false]\n        System.out.println(solution.reverse_delete(\"abcdef\", \"b\")); // Output: [\"acdef\", false]\n        System.out.println(solution.reverse_delete(\"abcdedcba\", \"ab\")); // Output: [\"cdedc\", true]\n    }\n}\n"}
{"task_id": "Java/87", "generation": "class Solution {\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        \n        // Iterate through each row\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            // Iterate through each element in the row\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    // If the element matches x, add its coordinates to the result\n                    result.add(Arrays.asList(i, j));\n                }\n            }\n        }\n        \n        // Sort the result by row index (ascending) and then by column index (descending)\n        Collections.sort(result, new Comparator<List<Integer>>() {\n            @Override\n            public int compare(List<Integer> a, List<Integer> b) {\n                if (!a.get(0).equals(b.get(0))) {\n                    return a.get(0) - b.get(0); // Compare row indices\n                } else {\n                    return b.get(1) - a.get(1); // Compare column indices (descending)\n                }\n            }\n        });\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.get_row(Arrays.asList(\n            Arrays.asList(1, 2, 3, 4, 5, 6),\n            Arrays.asList(1, 2, 3, 4, 1, 6),\n            Arrays.asList(1, 2, 3, 4, 5, 1)\n        ), 1)); // Output: [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n\n        System.out.println(sol.get_row(new ArrayList<>(), 1)); // Output: []\n\n        System.out.println(sol.get_row(Arrays.asList(\n            new ArrayList<>(),\n            Arrays.asList(1),\n            Arrays.asList(1, 2, 3)\n        ), 3)); // Output: [[2, 2]]\n    }\n}\n"}
{"task_id": "Java/113", "generation": "class Solution {\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        \n        for (String str : lst) {\n            int oddCount = 0;\n            // Count the number of odd digits in the string\n            for (char ch : str.toCharArray()) {\n                if (ch % 2 != 0) { // Check if the character is an odd digit\n                    oddCount++;\n                }\n            }\n            // Construct the output string\n            String output = \"the number of odd elements \" + oddCount + \n                            \"n the str\" + oddCount + \n                            \"ng \" + oddCount + \n                            \" of the \" + oddCount + \n                            \"nput.\";\n            result.add(output);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.odd_count(Arrays.asList(\"1234567\"))); // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n        System.out.println(sol.odd_count(Arrays.asList(\"3\", \"11111111\"))); // [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    }\n}\n"}
{"task_id": "Java/29", "generation": "class Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix(List.of(), \"a\")\n    []\n    >>> filter_by_prefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n    */\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        // Use stream to filter the strings that start with the given prefix\n        return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.filter_by_prefix(List.of(), \"a\")); // []\n        System.out.println(solution.filter_by_prefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")); // [\"abc\", \"array\"]\n    }\n}\n"}
{"task_id": "Java/6", "generation": "class Solution {\n    public List<Integer> parse_nested_parens(String paren_string) {\n        List<Integer> depths = new ArrayList<>();\n        String[] groups = paren_string.split(\" \"); // Split the input string by spaces\n\n        for (String group : groups) {\n            int maxDepth = 0; // To track the maximum depth\n            int currentDepth = 0; // To track the current depth\n\n            for (char ch : group.toCharArray()) {\n                if (ch == '(') {\n                    currentDepth++; // Increase depth for '('\n                    maxDepth = Math.max(maxDepth, currentDepth); // Update max depth\n                } else if (ch == ')') {\n                    currentDepth--; // Decrease depth for ')'\n                }\n            }\n\n            depths.add(maxDepth); // Add the maximum depth for the current group\n        }\n\n        return depths; // Return the list of maximum depths\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.parse_nested_parens(\"(()()) ((())) () ((())()())\")); // Output: [2, 3, 1, 3]\n    }\n}\n"}
{"task_id": "Java/46", "generation": "class Solution {\n    public int fib4(int n) {\n        // Handle base cases\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n == 3) return 0;\n\n        // Initialize an array to store the last four values\n        int[] fib = new int[4];\n        fib[0] = 0; // fib4(0)\n        fib[1] = 0; // fib4(1)\n        fib[2] = 2; // fib4(2)\n        fib[3] = 0; // fib4(3)\n\n        // Compute fib4(n) iteratively\n        for (int i = 4; i <= n; i++) {\n            int nextFib = fib[0] + fib[1] + fib[2] + fib[3];\n            // Shift the values in the array\n            fib[0] = fib[1];\n            fib[1] = fib[2];\n            fib[2] = fib[3];\n            fib[3] = nextFib;\n        }\n\n        // The result for fib4(n) will be in fib[3] after the loop\n        return fib[3];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fib4(5)); // Output: 4\n        System.out.println(solution.fib4(6)); // Output: 8\n        System.out.println(solution.fib4(7)); // Output: 14\n    }\n}\n"}
{"task_id": "Java/16", "generation": "class Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    */\n    public int count_distinct_characters(String string) {\n        // Create a Set to store distinct characters\n        Set<Character> distinctCharacters = new HashSet<>();\n        \n        // Iterate through each character in the string\n        for (char c : string.toCharArray()) {\n            // Add the lowercase version of the character to the set\n            distinctCharacters.add(Character.toLowerCase(c));\n        }\n        \n        // The size of the set is the number of distinct characters\n        return distinctCharacters.size();\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.count_distinct_characters(\"xyzXYZ\")); // Output: 3\n        System.out.println(solution.count_distinct_characters(\"Jerry\"));  // Output: 4\n    }\n}\n"}
{"task_id": "Java/99", "generation": "class Solution {\n    public int closest_integer(String value) {\n        // Parse the string to a double\n        double number = Double.parseDouble(value);\n        \n        // Get the floor and ceiling values\n        int lower = (int) Math.floor(number);\n        int upper = (int) Math.ceil(number);\n        \n        // Calculate the distances\n        double distanceToLower = Math.abs(number - lower);\n        double distanceToUpper = Math.abs(number - upper);\n        \n        // Determine which integer to return\n        if (distanceToLower < distanceToUpper) {\n            return lower; // Closer to lower\n        } else if (distanceToUpper < distanceToLower) {\n            return upper; // Closer to upper\n        } else {\n            // Equidistant case\n            if (number > 0) {\n                return upper; // Round away from zero\n            } else {\n                return lower; // Round away from zero\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.closest_integer(\"10\"));     // Output: 10\n        System.out.println(solution.closest_integer(\"15.3\"));   // Output: 15\n        System.out.println(solution.closest_integer(\"14.5\"));   // Output: 15\n        System.out.println(solution.closest_integer(\"-14.5\"));  // Output: -15\n        System.out.println(solution.closest_integer(\"0.5\"));    // Output: 1\n        System.out.println(solution.closest_integer(\"-0.5\"));   // Output: -1\n    }\n}\n"}
{"task_id": "Java/122", "generation": "class Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int add_elements(List<Integer> arr, int k) {\n        int sum = 0;\n        \n        // Iterate through the first k elements\n        for (int i = 0; i < k; i++) {\n            int num = arr.get(i);\n            // Check if the number has at most two digits\n            if (num >= -99 && num <= 99) {\n                sum += num; // Add to sum if condition is met\n            }\n        }\n        \n        return sum; // Return the final sum\n    }\n}\n"}
{"task_id": "Java/53", "generation": "class Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    */\n    public int add(int x, int y) {\n        return x + y;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(\"add(2, 3) = \" + solution.add(2, 3)); // Output: 5\n        System.out.println(\"add(5, 7) = \" + solution.add(5, 7)); // Output: 12\n    }\n}\n"}
{"task_id": "Java/162", "generation": "class Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n    */\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        // Check if the input string is empty\n        if (text == null || text.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        // Create a MessageDigest instance for MD5\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        \n        // Compute the hash\n        byte[] messageDigest = md.digest(text.getBytes());\n        \n        // Convert the byte array to a hexadecimal string\n        StringBuilder hexString = new StringBuilder();\n        for (byte b : messageDigest) {\n            String hex = Integer.toHexString(0xff & b);\n            if (hex.length() == 1) {\n                hexString.append('0');\n            }\n            hexString.append(hex);\n        }\n        \n        // Return the MD5 hash as an Optional\n        return Optional.of(hexString.toString());\n    }\n}\n"}
{"task_id": "Java/58", "generation": "class Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n    */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        // Convert lists to sets to remove duplicates\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        \n        // Find the intersection of both sets\n        set1.retainAll(set2);\n        \n        // Convert the set back to a list\n        List<Integer> commonElements = new ArrayList<>(set1);\n        \n        // Sort the list\n        Collections.sort(commonElements);\n        \n        return commonElements;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))); // [1, 5, 653]\n        System.out.println(solution.common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))); // [2, 3]\n    }\n}\n"}
{"task_id": "Java/73", "generation": "class Solution {\n    public int smallest_change(List<Integer> arr) {\n        int left = 0;\n        int right = arr.size() - 1;\n        int changes = 0;\n\n        while (left < right) {\n            if (!arr.get(left).equals(arr.get(right))) {\n                changes++;\n            }\n            left++;\n            right--;\n        }\n\n        return changes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.smallest_change(Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6))); // Output: 4\n        System.out.println(solution.smallest_change(Arrays.asList(1, 2, 3, 4, 3, 2, 2))); // Output: 1\n        System.out.println(solution.smallest_change(Arrays.asList(1, 2, 3, 2, 1))); // Output: 0\n    }\n}\n"}
{"task_id": "Java/150", "generation": "class Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    */\n    public int x_or_y(int n, int x, int y) {\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    // Helper method to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false; // 0 and 1 are not prime numbers\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false; // Found a divisor, not prime\n            }\n        }\n        return true; // No divisors found, it's prime\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.x_or_y(7, 34, 12)); // Output: 34\n        System.out.println(solution.x_or_y(15, 8, 5)); // Output: 5\n    }\n}\n"}
{"task_id": "Java/54", "generation": "class Solution {\n    /**\n    Check if two words have the same kind of characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    */\n    public boolean same_chars(String s0, String s1) {\n        Set<Character> set1 = new HashSet<>();\n        Set<Character> set2 = new HashSet<>();\n        \n        // Add characters from the first string to set1\n        for (char c : s0.toCharArray()) {\n            set1.add(c);\n        }\n        \n        // Add characters from the second string to set2\n        for (char c : s1.toCharArray()) {\n            set2.add(c);\n        }\n        \n        // Compare the two sets\n        return set1.equals(set2);\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // true\n        System.out.println(solution.same_chars(\"abcd\", \"dddddddabc\")); // true\n        System.out.println(solution.same_chars(\"dddddddabc\", \"abcd\")); // true\n        System.out.println(solution.same_chars(\"eabcd\", \"dddddddabc\")); // false\n        System.out.println(solution.same_chars(\"abcd\", \"dddddddabce\")); // false\n        System.out.println(solution.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // false\n    }\n}\n"}
{"task_id": "Java/108", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int count_nums(List<Integer> arr) {\n        int count = 0;\n        \n        for (int num : arr) {\n            if (sumOfDigits(num) > 0) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n\n    private int sumOfDigits(int n) {\n        int sum = 0;\n        int absN = Math.abs(n);\n        \n        while (absN > 0) {\n            sum += absN % 10; // Add the last digit\n            absN /= 10; // Remove the last digit\n        }\n        \n        return (n < 0) ? -sum : sum; // Return signed sum\n    }\n}\n"}
{"task_id": "Java/20", "generation": "class Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n    */\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        // Sort the list of numbers\n        Collections.sort(numbers);\n        \n        // Initialize variables to track the closest pair\n        double minDiff = Double.MAX_VALUE;\n        List<Double> closestPair = new ArrayList<>();\n        \n        // Iterate through the sorted list to find the closest pair\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double num1 = numbers.get(i);\n            double num2 = numbers.get(i + 1);\n            double diff = num2 - num1; // Since the list is sorted, num2 >= num1\n            \n            // Update the closest pair if a smaller difference is found\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair.clear();\n                closestPair.add(num1);\n                closestPair.add(num2);\n            }\n        }\n        \n        return closestPair;\n    }\n}\n"}
{"task_id": "Java/90", "generation": "class Solution {\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        // Use a TreeSet to store unique elements in sorted order\n        Set<Integer> uniqueElements = new TreeSet<>(lst);\n        \n        // Check if there are at least two unique elements\n        if (uniqueElements.size() < 2) {\n            return Optional.empty();\n        }\n        \n        // Get the second smallest element\n        Iterator<Integer> iterator = uniqueElements.iterator();\n        iterator.next(); // Skip the smallest element\n        return Optional.of(iterator.next()); // Return the second smallest element\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.next_smallest(Arrays.asList(1, 2, 3, 4, 5))); // Optional[2]\n        System.out.println(solution.next_smallest(Arrays.asList(5, 1, 4, 3, 2))); // Optional[2]\n        System.out.println(solution.next_smallest(Arrays.asList())); // Optional.empty\n        System.out.println(solution.next_smallest(Arrays.asList(1, 1))); // Optional.empty\n    }\n}\n"}
{"task_id": "Java/131", "generation": "class Solution {\n    public int digits(int n) {\n        int product = 1;\n        boolean hasOddDigit = false;\n\n        while (n > 0) {\n            int digit = n % 10; // Get the last digit\n            if (digit % 2 != 0) { // Check if the digit is odd\n                product *= digit; // Multiply to the product\n                hasOddDigit = true; // Mark that we found an odd digit\n            }\n            n /= 10; // Remove the last digit\n        }\n\n        return hasOddDigit ? product : 0; // Return product or 0 if no odd digits\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.digits(1));    // Output: 1\n        System.out.println(solution.digits(4));    // Output: 0\n        System.out.println(solution.digits(235));  // Output: 15\n        System.out.println(solution.digits(2468)); // Output: 0\n        System.out.println(solution.digits(13579)); // Output: 945\n    }\n}\n"}
{"task_id": "Java/160", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        int result = operand.get(0); // Initialize result with the first operand\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int nextOperand = operand.get(i + 1);\n            switch (op) {\n                case \"+\":\n                    result += nextOperand;\n                    break;\n                case \"-\":\n                    result -= nextOperand;\n                    break;\n                case \"*\":\n                    result *= nextOperand;\n                    break;\n                case \"/\":\n                    result /= nextOperand; // Floor division is handled by integer division\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, nextOperand); // Exponentiation\n                    break;\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/17", "generation": "class Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    note last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quarter note, lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parse_music(String string) {\n        // Split the input string into individual notes\n        String[] notes = string.split(\" \");\n        // Create a list to store the beats\n        List<Integer> beats = new ArrayList<>();\n\n        // Iterate through each note and determine its duration\n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    beats.add(4); // Whole note\n                    break;\n                case \"o|\":\n                    beats.add(2); // Half note\n                    break;\n                case \".|\":\n                    beats.add(1); // Quarter note\n                    break;\n                default:\n                    // If the note is not recognized, we can choose to ignore it or handle it as needed\n                    break;\n            }\n        }\n\n        return beats; // Return the list of beats\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.parse_music(\"o o| .| o| o| .| .| .| .| o o\")); // Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    }\n}\n"}
{"task_id": "Java/98", "generation": "class Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper(\"aBCdEf\") returns 1\n    count_upper(\"abcdefg\") returns 0\n    count_upper(\"dBBE\") returns 0\n    */    \n    public int count_upper(String s) {\n        int count = 0;\n        // Define a set of uppercase vowels\n        Set<Character> uppercaseVowels = new HashSet<>(Arrays.asList('A', 'E', 'I', 'O', 'U'));\n        \n        // Loop through the string, checking only even indices\n        for (int i = 0; i < s.length(); i += 2) {\n            char currentChar = s.charAt(i);\n            // Check if the character is an uppercase vowel\n            if (uppercaseVowels.contains(currentChar)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/65", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String circular_shift(int x, int shift) {\n        String xStr = Integer.toString(x); // Convert integer to string\n        int n = xStr.length(); // Get the length of the string\n\n        // If shift is greater than the number of digits, reverse the string\n        if (shift > n) {\n            return new StringBuilder(xStr).reverse().toString();\n        }\n\n        // Calculate the effective shift\n        int effectiveShift = shift % n;\n\n        // Perform the circular shift\n        String shiftedStr = xStr.substring(n - effectiveShift) + xStr.substring(0, n - effectiveShift);\n\n        return shiftedStr; // Return the result\n    }\n}\n"}
{"task_id": "Java/8", "generation": "class Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product(List.of())\n    [0, 1]\n    >>> sum_product(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n    */\n    public List<Integer> sum_product(List<Integer> numbers) {\n        // Initialize sum and product\n        int sum = 0;\n        int product = 1;\n\n        // If the list is empty, return the default values\n        if (numbers.isEmpty()) {\n            return Arrays.asList(sum, product);\n        }\n\n        // Calculate sum and product\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n\n        // Return the result as a list\n        return Arrays.asList(sum, product);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.sum_product(List.of())); // Output: [0, 1]\n        System.out.println(solution.sum_product(Arrays.asList(1, 2, 3, 4))); // Output: [10, 24]\n    }\n}\n"}
{"task_id": "Java/49", "generation": "class Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        // Handle the case when n is 0\n        if (n == 0) {\n            return 1; // 2^0 is 1\n        }\n        \n        long result = 1; // Use long to avoid overflow\n        long base = 2;   // Base is 2\n        \n        // Use exponentiation by squaring\n        while (n > 0) {\n            if ((n & 1) == 1) { // If n is odd\n                result = (result * base) % p;\n            }\n            base = (base * base) % p; // Square the base\n            n >>= 1; // Divide n by 2\n        }\n        \n        return (int) result; // Return the result as an integer\n    }\n    \n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.modp(3, 5));    // Output: 3\n        System.out.println(sol.modp(1101, 101)); // Output: 2\n        System.out.println(sol.modp(0, 101));   // Output: 1\n        System.out.println(sol.modp(3, 11));    // Output: 8\n        System.out.println(sol.modp(100, 101));  // Output: 1\n    }\n}\n"}
{"task_id": "Java/153", "generation": "class Solution {\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        String strongestExtension = \"\";\n        int maxStrength = Integer.MIN_VALUE;\n\n        for (String extension : extensions) {\n            int capCount = 0;\n            int smCount = 0;\n\n            // Count uppercase and lowercase letters\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smCount++;\n                }\n            }\n\n            // Calculate strength\n            int strength = capCount - smCount;\n\n            // Update strongest extension if this one is stronger\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        // Return the formatted result\n        return class_name + \".\" + strongestExtension;\n    }\n}\n"}
{"task_id": "Java/96", "generation": "class Solution {\n    public List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<>();\n        \n        // Check for edge cases\n        if (n <= 2) {\n            return primes; // Return empty list for n = 0, 1, or 2\n        }\n\n        // Iterate through numbers from 2 to n-1\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        \n        return primes;\n    }\n\n    // Helper method to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) return false; // 0 and 1 are not prime\n        if (num <= 3) return true; // 2 and 3 are prime\n\n        // Check for factors from 2 to sqrt(num)\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false; // Found a factor, not prime\n            }\n        }\n        return true; // No factors found, it's prime\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.count_up_to(5));  // Output: [2, 3]\n        System.out.println(solution.count_up_to(11)); // Output: [2, 3, 5, 7]\n        System.out.println(solution.count_up_to(0));  // Output: []\n        System.out.println(solution.count_up_to(20)); // Output: [2, 3, 5, 7, 11, 13, 17, 19]\n        System.out.println(solution.count_up_to(1));  // Output: []\n        System.out.println(solution.count_up_to(18)); // Output: [2, 3, 5, 7, 11, 13, 17]\n    }\n}\n"}
{"task_id": "Java/64", "generation": "class Solution {\n    public int vowels_count(String s) {\n        // Convert the string to lower case to handle case insensitivity\n        s = s.toLowerCase();\n        int count = 0;\n        \n        // Define a set of vowels\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u'));\n        \n        // Iterate through the string\n        for (int i = 0; i < s.length(); i++) {\n            char currentChar = s.charAt(i);\n            // Check if the current character is a vowel\n            if (vowels.contains(currentChar)) {\n                count++;\n            }\n            // Check if the current character is 'y' and it's the last character\n            if (currentChar == 'y' && i == s.length() - 1) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.vowels_count(\"abcde\")); // Output: 2\n        System.out.println(solution.vowels_count(\"ACEDY\")); // Output: 3\n    }\n}\n"}
{"task_id": "Java/102", "generation": "class Solution {\n    public int choose_num(int x, int y) {\n        // Check if the range is valid\n        if (y < x) {\n            return -1;\n        }\n        \n        // Find the largest even number in the range [x, y]\n        int largestEven;\n        if (y % 2 == 0) {\n            largestEven = y; // y is even\n        } else {\n            largestEven = y - 1; // y is odd, so the largest even is y - 1\n        }\n        \n        // Check if the largest even number is within the range [x, y]\n        if (largestEven >= x) {\n            return largestEven;\n        } else {\n            return -1; // No even number in the range\n        }\n    }\n}\n"}
{"task_id": "Java/88", "generation": "class Solution {\n    public List<Integer> sort_array(List<Integer> array) {\n        // Step 1: Check if the array is empty\n        if (array.isEmpty()) {\n            return new ArrayList<>(); // Return an empty list\n        }\n        \n        // Step 2: Check if the array has only one element\n        if (array.size() == 1) {\n            return new ArrayList<>(array); // Return a copy of the single element list\n        }\n        \n        // Step 3: Calculate the sum of the first and last elements\n        int firstElement = array.get(0);\n        int lastElement = array.get(array.size() - 1);\n        int sum = firstElement + lastElement;\n        \n        // Step 4: Sort the array based on the sum\n        List<Integer> sortedArray = new ArrayList<>(array); // Create a copy of the original array\n        if (sum % 2 == 0) {\n            // Sum is even, sort in descending order\n            Collections.sort(sortedArray, Collections.reverseOrder());\n        } else {\n            // Sum is odd, sort in ascending order\n            Collections.sort(sortedArray);\n        }\n        \n        // Step 5: Return the sorted array\n        return sortedArray;\n    }\n}\n"}
{"task_id": "Java/146", "generation": "class Solution {\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n\n        for (int num : nums) {\n            // Check if the number is greater than 10\n            if (num > 10) {\n                // Get the absolute value to handle negative numbers\n                int absNum = Math.abs(num);\n                \n                // Convert the number to a string to easily access first and last digits\n                String numStr = Integer.toString(absNum);\n                \n                // Get the first and last digits\n                char firstDigit = numStr.charAt(0);\n                char lastDigit = numStr.charAt(numStr.length() - 1);\n                \n                // Check if both first and last digits are odd\n                if (isOdd(firstDigit) && isOdd(lastDigit)) {\n                    count++;\n                }\n            }\n        }\n        \n        return count;\n    }\n\n    // Helper method to check if a character representing a digit is odd\n    private boolean isOdd(char digit) {\n        return (digit == '1' || digit == '3' || digit == '5' || digit == '7' || digit == '9');\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.specialFilter(Arrays.asList(15, -73, 14, -15))); // Output: 1\n        System.out.println(solution.specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109))); // Output: 2\n    }\n}\n"}
{"task_id": "Java/30", "generation": "class Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> get_positive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> get_positive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n    */\n    public List<Integer> get_positive(List<Integer> l) {\n        return l.stream()\n                .filter(num -> num > 0) // Filter only positive numbers\n                .collect(Collectors.toList()); // Collect the results into a List\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.get_positive(Arrays.asList(-1, 2, -4, 5, 6))); // Output: [2, 5, 6]\n        System.out.println(solution.get_positive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))); // Output: [5, 3, 2, 3, 9, 123, 1]\n    }\n}\n"}
{"task_id": "Java/97", "generation": "class Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        // Get the unit digits\n        int unitDigitA = Math.abs(a) % 10; // Use abs to handle negative numbers\n        int unitDigitB = Math.abs(b) % 10; // Use abs to handle negative numbers\n        \n        // Calculate the product of the unit digits\n        return unitDigitA * unitDigitB;\n    }\n}\n"}
{"task_id": "Java/95", "generation": "class Solution {\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        // Check if the map is empty\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        boolean allLower = true;\n        boolean allUpper = true;\n\n        for (Object key : dict.keySet()) {\n            // Check if the key is a String\n            if (!(key instanceof String)) {\n                return false;\n            }\n\n            String strKey = (String) key;\n\n            // Check if the key is lowercase\n            if (!strKey.equals(strKey.toLowerCase())) {\n                allLower = false;\n            }\n\n            // Check if the key is uppercase\n            if (!strKey.equals(strKey.toUpperCase())) {\n                allUpper = false;\n            }\n        }\n\n        // Return true if all keys are either all lower or all upper\n        return allLower || allUpper;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.check_dict_case(Map.of(\"a\", \"apple\", \"b\", \"banana\"))); // True\n        System.out.println(solution.check_dict_case(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"banana\"))); // False\n        System.out.println(solution.check_dict_case(Map.of(8, \"banana\", \"a\", \"apple\"))); // False\n        System.out.println(solution.check_dict_case(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\"))); // False\n        System.out.println(solution.check_dict_case(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))); // True\n    }\n}\n"}
{"task_id": "Java/10", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n     */\n    public String make_palindrome(String string) {\n        if (string.isEmpty()) {\n            return \"\";\n        }\n\n        // Find the longest palindromic suffix\n        for (int i = 0; i < string.length(); i++) {\n            if (isPalindrome(string.substring(i))) {\n                // Append the reverse of the prefix to the end\n                String prefix = string.substring(0, i);\n                String reversedPrefix = new StringBuilder(prefix).reverse().toString();\n                return string + reversedPrefix;\n            }\n        }\n\n        // In case no palindromic suffix is found (should not happen for non-empty strings)\n        return string + new StringBuilder(string).reverse().toString();\n    }\n}\n"}
{"task_id": "Java/109", "generation": "class Solution {\n    public boolean move_one_ball(List<Integer> arr) {\n        // Edge case: if the array is empty, return true\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        int dropCount = 0;\n        int n = arr.size();\n\n        // Iterate through the array to count drops\n        for (int i = 0; i < n; i++) {\n            // Compare current element with the next element (circularly)\n            if (arr.get(i) > arr.get((i + 1) % n)) {\n                dropCount++;\n            }\n            // If we have more than one drop, return false\n            if (dropCount > 1) {\n                return false;\n            }\n        }\n\n        // If we have 0 or 1 drop, it's possible to sort the array by right shifts\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.move_one_ball(Arrays.asList(3, 4, 5, 1, 2))); // true\n        System.out.println(solution.move_one_ball(Arrays.asList(3, 5, 4, 1, 2))); // false\n    }\n}\n"}
{"task_id": "Java/4", "generation": "class Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double mean_absolute_deviation(List<Double> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            throw new IllegalArgumentException(\"The list of numbers cannot be null or empty.\");\n        }\n\n        // Step 1: Calculate the mean\n        double sum = 0.0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n\n        // Step 2: Calculate the absolute differences and their sum\n        double madSum = 0.0;\n        for (double num : numbers) {\n            madSum += Math.abs(num - mean);\n        }\n\n        // Step 3: Calculate the Mean Absolute Deviation\n        double mad = madSum / numbers.size();\n        return mad;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0);\n        double result = solution.mean_absolute_deviation(numbers);\n        System.out.println(\"Mean Absolute Deviation: \" + result); // Output: 1.0\n    }\n}\n"}
{"task_id": "Java/77", "generation": "class Solution {\n    public boolean iscube(int a) {\n        if (a < 0) {\n            a = -a; // Convert to positive for cube root calculation\n        }\n        int cubeRoot = (int) Math.round(Math.pow(a, 1.0 / 3.0)); // Calculate the cube root and round it\n        return cubeRoot * cubeRoot * cubeRoot == a; // Check if the cube of the rounded root equals the original number\n    }\n}\n"}
{"task_id": "Java/57", "generation": "class Solution {\n    /**\n    Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n    */\n    public boolean monotonic(List<Integer> l) {\n        if (l == null || l.size() < 2) {\n            return true; // A list with 0 or 1 element is considered monotonic\n        }\n\n        boolean increasing = true;\n        boolean decreasing = true;\n\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false; // Found an increasing pair\n            } else if (l.get(i) < l.get(i - 1)) {\n                increasing = false; // Found a decreasing pair\n            }\n        }\n\n        return increasing || decreasing; // Return true if either is true\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.monotonic(Arrays.asList(1, 2, 4, 20))); // true\n        System.out.println(sol.monotonic(Arrays.asList(1, 20, 4, 10))); // false\n        System.out.println(sol.monotonic(Arrays.asList(4, 1, 0, -10))); // true\n    }\n}\n"}
{"task_id": "Java/142", "generation": "class Solution {\n    public int sum_squares(List<Integer> lst) {\n        int sum = 0; // Initialize the sum to 0\n        \n        for (int i = 0; i < lst.size(); i++) {\n            int value = lst.get(i); // Get the current value\n            \n            // Check if the index is a multiple of 3\n            if (i % 3 == 0) {\n                value = value * value; // Square the value\n            }\n            // Check if the index is a multiple of 4 and not a multiple of 3\n            else if (i % 4 == 0) {\n                value = value * value * value; // Cube the value\n            }\n            // Add the modified value to the sum\n            sum += value;\n        }\n        \n        return sum; // Return the final sum\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.sum_squares(Arrays.asList(1, 2, 3))); // Output: 6\n        System.out.println(solution.sum_squares(Arrays.asList())); // Output: 0\n        System.out.println(solution.sum_squares(Arrays.asList(-1, -5, 2, -1, -5))); // Output: -126\n    }\n}\n"}
{"task_id": "Java/121", "generation": "class Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==> 0\n    */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        \n        for (int i = 0; i < lst.size(); i++) {\n            // Check if the index is even\n            if (i % 2 == 0) {\n                // Check if the element is odd\n                if (lst.get(i) % 2 != 0) {\n                    sum += lst.get(i);\n                }\n            }\n        }\n        \n        return sum;\n    }\n}\n"}
{"task_id": "Java/23", "generation": "class Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n    */\n    public int strlen(String string) {\n        return string.length();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.strlen(\"\")); // Output: 0\n        System.out.println(solution.strlen(\"abc\")); // Output: 3\n        System.out.println(solution.strlen(\"Hello, World!\")); // Output: 13\n        System.out.println(solution.strlen(\"Java Programming\")); // Output: 17\n    }\n}\n"}
{"task_id": "Java/80", "generation": "class Solution {\n    public boolean is_happy(String s) {\n        // Check if the length of the string is at least 3\n        if (s.length() < 3) {\n            return false;\n        }\n\n        // Iterate through the string and check every group of three consecutive characters\n        for (int i = 0; i <= s.length() - 3; i++) {\n            // Get the three consecutive characters\n            char first = s.charAt(i);\n            char second = s.charAt(i + 1);\n            char third = s.charAt(i + 2);\n\n            // Check if all three characters are distinct\n            if (first == second || first == third || second == third) {\n                return false; // If any two characters are the same, return false\n            }\n        }\n\n        // If we passed all checks, the string is happy\n        return true;\n    }\n}\n"}
{"task_id": "Java/132", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean is_nested(String string) {\n        Stack<Character> stack = new Stack<>();\n        boolean hasNested = false;\n\n        for (char ch : string.toCharArray()) {\n            if (ch == '[') {\n                stack.push(ch);\n                if (stack.size() > 1) {  // More than one opening bracket means nesting\n                    hasNested = true;\n                }\n            } else if (ch == ']') {\n                if (stack.isEmpty()) {  // Unmatched closing bracket\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n\n        return hasNested && stack.isEmpty();  // Must have nesting and all brackets must be matched\n    }\n}\n"}
{"task_id": "Java/66", "generation": "class Solution {\n    public int digitSum(String s) {\n        int sum = 0; // Initialize sum to 0\n        \n        // Iterate through each character in the string\n        for (char c : s.toCharArray()) {\n            // Check if the character is an uppercase letter\n            if (c >= 'A' && c <= 'Z') {\n                sum += (int) c; // Add the ASCII value of the uppercase letter\n            }\n        }\n        \n        return sum; // Return the final sum\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.digitSum(\"\")); // Output: 0\n        System.out.println(solution.digitSum(\"abAB\")); // Output: 131\n        System.out.println(solution.digitSum(\"abcCd\")); // Output: 67\n        System.out.println(solution.digitSum(\"helloE\")); // Output: 69\n        System.out.println(solution.digitSum(\"woArBld\")); // Output: 131\n        System.out.println(solution.digitSum(\"aAaaaXa\")); // Output: 153\n    }\n}\n"}
{"task_id": "Java/14", "generation": "class Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    */\n    public List<String> all_prefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        \n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        \n        return prefixes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.all_prefixes(\"abc\")); // Output: [\"a\", \"ab\", \"abc\"]\n    }\n}\n"}
{"task_id": "Java/25", "generation": "class Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        \n        // Check for number of 2s that divide n\n        while (n % 2 == 0) {\n            factors.add(2);\n            n /= 2;\n        }\n        \n        // n must be odd at this point, so we can skip even numbers\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            // While i divides n, add i and divide n\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        \n        // This condition is to check if n is a prime number greater than 2\n        if (n > 2) {\n            factors.add(n);\n        }\n        \n        return factors;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.factorize(8));   // Output: [2, 2, 2]\n        System.out.println(sol.factorize(25));  // Output: [5, 5]\n        System.out.println(sol.factorize(70));  // Output: [2, 5, 7]\n    }\n}\n"}
{"task_id": "Java/107", "generation": "class Solution {\n    public List<Integer> even_odd_palindrome(int n) {\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        // Create a list to return the result\n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n\n    private boolean isPalindrome(int num) {\n        String str = Integer.toString(num);\n        String reversedStr = new StringBuilder(str).reverse().toString();\n        return str.equals(reversedStr);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.even_odd_palindrome(3));  // Output: [1, 2]\n        System.out.println(solution.even_odd_palindrome(12)); // Output: [4, 6]\n    }\n}\n"}
{"task_id": "Java/83", "generation": "class Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    */\n    public int starts_one_ends(int n) {\n        if (n == 1) {\n            // For n = 1, the only number is '1'\n            return 1;\n        }\n        \n        // Count of n-digit numbers starting with '1'\n        int countStartsWith1 = (int) Math.pow(10, n - 1);\n        \n        // Count of n-digit numbers ending with '1'\n        int countEndsWith1 = 9 * (int) Math.pow(10, n - 2);\n        \n        // Count of n-digit numbers starting and ending with '1'\n        int countStartsAndEndsWith1 = (int) Math.pow(10, n - 2);\n        \n        // Total count\n        return countStartsWith1 + countEndsWith1 - countStartsAndEndsWith1;\n    }\n}\n"}
{"task_id": "Java/32", "generation": "class Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    Evaluates the derivative of the polynomial at point x.\n    */\n    public double polyDerivative(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 1; i < xs.size(); i++) {\n            result += i * xs.get(i) * Math.pow(x, i - 1);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    find_zero finds x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having an even number of coefficients\n    and the largest non-zero coefficient as it guarantees\n    a solution.\n    >>> find_zero(Arrays.asList(1.0, 2.0)) // f(x) = 1 + 2x\n    -0.5\n    >>> find_zero(Arrays.asList(-6.0, 11.0, -6.0, 1.0)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double find_zero(List<Double> xs) {\n        // Initial guess for the root\n        double x0 = 0.0;\n        double tolerance = 1e-7;\n        double maxIterations = 1000;\n\n        for (int i = 0; i < maxIterations; i++) {\n            double fx = poly(xs, x0);\n            double fpx = polyDerivative(xs, x0);\n            \n            // Avoid division by zero\n            if (Math.abs(fpx) < tolerance) {\n                break; // Derivative is too small, stop iteration\n            }\n            \n            // Newton-Raphson formula\n            double x1 = x0 - fx / fpx;\n\n            // Check for convergence\n            if (Math.abs(x1 - x0) < tolerance) {\n                return x1; // Found a root\n            }\n            x0 = x1; // Update x0 for the next iteration\n        }\n        \n        // If no root found, return NaN or some indication of failure\n        return Double.NaN;\n    }\n}\n"}
{"task_id": "Java/85", "generation": "class Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n    */\n    public int add(List<Integer> lst) {\n        int sum = 0; // Initialize sum to 0\n        \n        // Iterate through the list\n        for (int i = 1; i < lst.size(); i += 2) { // Start from index 1 and increment by 2\n            if (lst.get(i) % 2 == 0) { // Check if the element is even\n                sum += lst.get(i); // Add to sum if it is even\n            }\n        }\n        \n        return sum; // Return the final sum\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.add(Arrays.asList(4, 2, 6, 7))); // Output: 2\n        System.out.println(solution.add(Arrays.asList(1, 2, 3, 4, 5))); // Output: 0\n        System.out.println(solution.add(Arrays.asList(10, 1, 12, 3, 14))); // Output: 12\n    }\n}\n"}
{"task_id": "Java/156", "generation": "class Solution {\n    public String int_to_mini_roman(int number) {\n        // Define the mapping of integers to Roman numerals\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] symbols = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        \n        StringBuilder result = new StringBuilder();\n        \n        // Iterate through the values and symbols\n        for (int i = 0; i < values.length; i++) {\n            // While the number is greater than or equal to the current value\n            while (number >= values[i]) {\n                // Append the corresponding symbol to the result\n                result.append(symbols[i]);\n                // Subtract the value from the number\n                number -= values[i];\n            }\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.int_to_mini_roman(19));   // Output: \"xix\"\n        System.out.println(solution.int_to_mini_roman(152));  // Output: \"clii\"\n        System.out.println(solution.int_to_mini_roman(426));  // Output: \"cdxxvi\"\n    }\n}\n"}
{"task_id": "Java/75", "generation": "class Solution {\n    // Function to generate all prime numbers less than 100\n    private List<Integer> generatePrimes() {\n        List<Integer> primes = new ArrayList<>();\n        boolean[] isPrime = new boolean[100];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = isPrime[1] = false; // 0 and 1 are not primes\n\n        for (int i = 2; i < 100; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n                for (int j = i * 2; j < 100; j += i) {\n                    isPrime[j] = false; // Mark multiples of i as non-prime\n                }\n            }\n        }\n        return primes;\n    }\n\n    public boolean is_multiply_prime(int a) {\n        List<Integer> primes = generatePrimes();\n\n        // Check all combinations of three primes\n        for (int i = 0; i < primes.size(); i++) {\n            for (int j = 0; j < primes.size(); j++) {\n                for (int k = 0; k < primes.size(); k++) {\n                    int product = primes.get(i) * primes.get(j) * primes.get(k);\n                    if (product == a) {\n                        return true; // Found a combination that multiplies to a\n                    }\n                }\n            }\n        }\n        return false; // No combination found\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.is_multiply_prime(30)); // true\n        System.out.println(solution.is_multiply_prime(60)); // true (2 * 3 * 10, but 10 is not prime)\n        System.out.println(solution.is_multiply_prime(15)); // false\n        System.out.println(solution.is_multiply_prime(105)); // false\n    }\n}\n"}
{"task_id": "Java/157", "generation": "class Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == true\n    right_angle_triangle(1, 2, 3) == false\n    */\n    public boolean right_angle_triangle(int a, int b, int c) {\n        // Sort the sides to ensure we can identify the longest side\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        \n        // Check the Pythagorean theorem\n        return (sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.right_angle_triangle(3, 4, 5)); // true\n        System.out.println(solution.right_angle_triangle(1, 2, 3)); // false\n        System.out.println(solution.right_angle_triangle(5, 12, 13)); // true\n        System.out.println(solution.right_angle_triangle(8, 15, 17)); // true\n        System.out.println(solution.right_angle_triangle(7, 24, 25)); // true\n        System.out.println(solution.right_angle_triangle(1, 1, 1)); // false\n    }\n}\n"}
{"task_id": "Java/36", "generation": "class Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    */\n    public int fizz_buzz(int n) {\n        int count = 0;\n\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                // Convert the number to a string\n                String str = Integer.toString(i);\n                // Count occurrences of '7'\n                for (char c : str.toCharArray()) {\n                    if (c == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fizz_buzz(50)); // Output: 0\n        System.out.println(solution.fizz_buzz(78)); // Output: 2\n        System.out.println(solution.fizz_buzz(79)); // Output: 3\n    }\n}\n"}
{"task_id": "Java/94", "generation": "import java.util.*;\n\nclass Solution {\n    public int skjkasdkd(List<Integer> lst) {\n        int largestPrime = -1;\n\n        for (int number : lst) {\n            if (isPrime(number) && number > largestPrime) {\n                largestPrime = number;\n            }\n        }\n\n        if (largestPrime == -1) {\n            return 0; // No prime found\n        }\n\n        return sumOfDigits(largestPrime);\n    }\n\n    private int sumOfDigits(int n) {\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 10; // Add the last digit to sum\n            n /= 10; // Remove the last digit\n        }\n        return sum;\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/60", "generation": "class Solution {\n    /**\n    sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    */\n    public int sum_to_n(int n) {\n        // Using the formula for the sum of the first n natural numbers\n        return n * (n + 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.sum_to_n(30));  // Output: 465\n        System.out.println(solution.sum_to_n(100)); // Output: 5050\n        System.out.println(solution.sum_to_n(5));   // Output: 15\n        System.out.println(solution.sum_to_n(10));  // Output: 55\n        System.out.println(solution.sum_to_n(1));   // Output: 1\n    }\n}\n"}
{"task_id": "Java/145", "generation": "class Solution {\n    public List<Integer> order_by_points(List<Integer> nums) {\n        // Create a comparator that compares based on the sum of digits\n        Comparator<Integer> digitSumComparator = new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int sumA = sumOfDigits(a);\n                int sumB = sumOfDigits(b);\n                \n                // Compare the sum of digits\n                if (sumA != sumB) {\n                    return Integer.compare(sumA, sumB);\n                } else {\n                    // If sums are equal, maintain original order (stable sort)\n                    return 0;\n                }\n            }\n        };\n        \n        // Sort the list using the custom comparator\n        Collections.sort(nums, digitSumComparator);\n        \n        return nums;\n    }\n\n    // Helper function to calculate the sum of digits\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        int n = Math.abs(num); // Work with the absolute value\n        \n        while (n > 0) {\n            sum += n % 10; // Add the last digit\n            n /= 10; // Remove the last digit\n        }\n        \n        // If the number is negative, subtract twice the first digit\n        if (num < 0) {\n            sum -= 2 * (Math.abs(num) / (int)Math.pow(10, String.valueOf(Math.abs(num)).length() - 1));\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.order_by_points(Arrays.asList(1, 11, -1, -11, -12))); // Output: [-1, -11, 1, -12, 11]\n        System.out.println(sol.order_by_points(Arrays.asList())); // Output: []\n    }\n}\n"}
{"task_id": "Java/61", "generation": "class Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    */\n    public boolean correct_bracketing(String brackets) {\n        int balance = 0; // This will keep track of the balance of brackets\n        \n        for (char ch : brackets.toCharArray()) {\n            if (ch == '(') {\n                balance++; // Increment for an opening bracket\n            } else if (ch == ')') {\n                balance--; // Decrement for a closing bracket\n            }\n            \n            // If balance goes negative, we have more closing brackets than opening ones\n            if (balance < 0) {\n                return false;\n            }\n        }\n        \n        // At the end, balance should be zero for all brackets to be matched\n        return balance == 0;\n    }\n}\n"}
{"task_id": "Java/79", "generation": "class Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   // returns \"db1111db\"\n    decimal_to_binary(32)   // returns \"db100000db\"\n     */\n    public String decimal_to_binary(int decimal) {\n        // Convert the decimal number to binary string\n        String binaryString = Integer.toBinaryString(decimal);\n        // Format the string with 'db' at the beginning and end\n        return \"db\" + binaryString + \"db\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.decimal_to_binary(15));  // Output: \"db1111db\"\n        System.out.println(solution.decimal_to_binary(32));  // Output: \"db100000db\"\n    }\n}\n"}
{"task_id": "Java/116", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> arr) {\n        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                // Count the number of 1's in the binary representation\n                int countA = Integer.bitCount(a);\n                int countB = Integer.bitCount(b);\n                \n                // First compare by the number of 1's\n                if (countA != countB) {\n                    return Integer.compare(countA, countB);\n                }\n                // If the number of 1's is the same, compare by the decimal value\n                return Integer.compare(a, b);\n            }\n        });\n        return arr;\n    }\n}\n"}
{"task_id": "Java/56", "generation": "class Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    */\n    public boolean correct_bracketing(String brackets) {\n        int balance = 0; // To track the balance of brackets\n\n        for (char ch : brackets.toCharArray()) {\n            if (ch == '<') {\n                balance++; // Increment for an opening bracket\n            } else if (ch == '>') {\n                balance--; // Decrement for a closing bracket\n            }\n\n            // If balance goes negative, it means there's a closing bracket without a matching opening bracket\n            if (balance < 0) {\n                return false;\n            }\n        }\n\n        // At the end, balance should be zero for all brackets to be matched\n        return balance == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.correct_bracketing(\"<\")); // false\n        System.out.println(solution.correct_bracketing(\"<>\")); // true\n        System.out.println(solution.correct_bracketing(\"<<><>>\")); // true\n        System.out.println(solution.correct_bracketing(\"><<>\")); // false\n    }\n}\n"}
{"task_id": "Java/111", "generation": "import java.util.*;\n\nclass Solution {\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> count = new HashMap<>();\n        \n        if (test.isEmpty()) {\n            return count; // return empty map if input is empty\n        }\n        \n        String[] letters = test.split(\" \");\n        \n        // Count occurrences of each letter\n        for (String letter : letters) {\n            count.put(letter, count.getOrDefault(letter, 0) + 1);\n        }\n        \n        // Find the maximum count\n        int maxCount = Collections.max(count.values());\n        \n        // Create a result map for letters with the maximum count\n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : count.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/125", "generation": "class Solution {\n    public Object split_words(String txt) {\n        // Check for whitespace\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\"\\\\s+\")); // Split by whitespace\n        }\n        \n        // Check for commas\n        if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\")); // Split by commas\n        }\n        \n        // Count lowercase letters with odd order in the alphabet\n        int count = 0;\n        for (char c : txt.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                int index = c - 'a'; // Get the index of the letter\n                if (index % 2 == 1) { // Check if the index is odd\n                    count++;\n                }\n            }\n        }\n        \n        return count; // Return the count of odd-indexed lowercase letters\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.split_words(\"Hello world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.split_words(\"Hello,world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.split_words(\"abcdef\")); // 3\n        System.out.println(solution.split_words(\"abc,def ghi\")); // [\"abc\", \"def\", \"ghi\"]\n        System.out.println(solution.split_words(\"xyz\")); // 1\n    }\n}\n"}
{"task_id": "Java/119", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String match_parens(List<String> lst) {\n        // Count the number of open and close parentheses in both strings\n        int openCount = 0;\n        int closeCount = 0;\n\n        for (String str : lst) {\n            openCount += countChar(str, '(');\n            closeCount += countChar(str, ')');\n        }\n\n        // A string is good if the number of open parentheses equals the number of close parentheses\n        if (openCount == closeCount) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n\n    // Helper method to count occurrences of a specific character in a string\n    private int countChar(String str, char ch) {\n        int count = 0;\n        for (char c : str.toCharArray()) {\n            if (c == ch) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/124", "generation": "class Solution {\n    public boolean valid_date(String date) {\n        // Check if the date string is empty\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        // Check if the date matches the format mm-dd-yyyy\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n            return false;\n        }\n\n        // Parse month, day, and year\n        int month, day, year;\n        try {\n            month = Integer.parseInt(parts[0]);\n            day = Integer.parseInt(parts[1]);\n            year = Integer.parseInt(parts[2]);\n        } catch (NumberFormatException e) {\n            return false; // If parsing fails, return false\n        }\n\n        // Validate month\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        // Validate day based on the month\n        if (day < 1) {\n            return false; // Day must be at least 1\n        }\n\n        if (month == 2) {\n            // February: check for leap year\n            if (isLeapYear(year)) {\n                if (day > 29) {\n                    return false; // February in a leap year has max 29 days\n                }\n            } else {\n                if (day > 28) {\n                    return false; // February in a non-leap year has max 28 days\n                }\n            }\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            // Months with 30 days\n            if (day > 30) {\n                return false;\n            }\n        } else {\n            // Months with 31 days (1, 3, 5, 7, 8, 10, 12)\n            if (day > 31) {\n                return false;\n            }\n        }\n\n        return true; // If all checks pass, the date is valid\n    }\n\n    // Helper method to check if a year is a leap year\n    private boolean isLeapYear(int year) {\n        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.valid_date(\"03-11-2000\")); // true\n        System.out.println(solution.valid_date(\"15-01-2012\")); // false\n        System.out.println(solution.valid_date(\"04-0-2040\")); // false\n        System.out.println(solution.valid_date(\"06-04-2020\")); // true\n        System.out.println(solution.valid_date(\"06/04/2020\")); // false\n    }\n}\n"}
{"task_id": "Java/9", "generation": "class Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n    */\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int currentMax = Integer.MIN_VALUE; // Initialize to the smallest possible integer\n\n        for (int number : numbers) {\n            currentMax = Math.max(currentMax, number); // Update currentMax if the current number is greater\n            result.add(currentMax); // Add the current maximum to the result list\n        }\n\n        return result; // Return the list of rolling maximums\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> input = Arrays.asList(1, 2, 3, 2, 3, 4, 2);\n        List<Integer> output = solution.rolling_max(input);\n        System.out.println(output); // Output: [1, 2, 3, 3, 3, 4, 4]\n    }\n}\n"}
{"task_id": "Java/43", "generation": "class Solution {\n    /**\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairs_sum_to_zero(Arrays.asList(1))\n    false\n    */\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        Set<Integer> seen = new HashSet<>();\n        \n        for (Integer num : l) {\n            // Check if the negation of the current number is in the set\n            if (seen.contains(-num)) {\n                return true; // Found a pair that sums to zero\n            }\n            // Add the current number to the set\n            seen.add(num);\n        }\n        \n        return false; // No pairs found that sum to zero\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1, 3, -2, 1))); // false\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(2, 4, -5, 3, 5, 7))); // true\n        System.out.println(solution.pairs_sum_to_zero(Arrays.asList(1))); // false\n    }\n}\n"}
{"task_id": "Java/82", "generation": "class Solution {\n    public boolean prime_length(String string) {\n        int length = string.length();\n        return isPrime(length);\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false; // 0 and 1 are not prime numbers\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false; // Found a divisor, not prime\n            }\n        }\n        return true; // No divisors found, it's prime\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.prime_length(\"Hello\")); // true\n        System.out.println(solution.prime_length(\"abcdcba\")); // true\n        System.out.println(solution.prime_length(\"kittens\")); // true\n        System.out.println(solution.prime_length(\"orange\")); // false\n    }\n}\n"}
{"task_id": "Java/155", "generation": "class Solution {\n    /**\n    Given an integer, return a list that has the number of even and odd digits respectively.\n    \n     Example:\n        even_odd_count(-12) ==> [1, 1]\n        even_odd_count(123) ==> [1, 2]\n     */\n    public List<Integer> even_odd_count(int num) {\n        // Convert the number to its absolute value to handle negative numbers\n        num = Math.abs(num);\n        \n        int evenCount = 0;\n        int oddCount = 0;\n        \n        // Convert the number to a string to iterate over each digit\n        String numStr = Integer.toString(num);\n        \n        for (char digit : numStr.toCharArray()) {\n            int digitValue = Character.getNumericValue(digit);\n            if (digitValue % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        \n        // Create a list to hold the counts and return it\n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.even_odd_count(-12)); // Output: [1, 1]\n        System.out.println(solution.even_odd_count(123));  // Output: [1, 2]\n    }\n}\n"}
{"task_id": "Java/35", "generation": "class Solution {\n    /**\n    Return maximum element in the list.\n    >>> max_element(Arrays.asList(1, 2, 3))\n    3\n    >>> max_element(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n    */\n    public int max_element(List<Integer> l) {\n        // Check if the list is empty\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be null or empty\");\n        }\n        // Use Collections.max to find the maximum element\n        return Collections.max(l);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.max_element(Arrays.asList(1, 2, 3))); // Output: 3\n        System.out.println(solution.max_element(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))); // Output: 123\n    }\n}\n"}
{"task_id": "Java/89", "generation": "class Solution {\n    public String encrypt(String s) {\n        StringBuilder encrypted = new StringBuilder();\n        \n        for (char c : s.toCharArray()) {\n            // Check if the character is a lowercase letter\n            if (c >= 'a' && c <= 'z') {\n                // Rotate the character by 4 positions\n                char newChar = (char) ((c - 'a' + 4) % 26 + 'a');\n                encrypted.append(newChar);\n            } else {\n                // If the character is not a lowercase letter, append it unchanged\n                encrypted.append(c);\n            }\n        }\n        \n        return encrypted.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.encrypt(\"hi\")); // Output: lm\n        System.out.println(solution.encrypt(\"asdfghjkl\")); // Output: ewhjklnop\n        System.out.println(solution.encrypt(\"gf\")); // Output: kj\n        System.out.println(solution.encrypt(\"et\")); // Output: ix\n    }\n}\n"}
{"task_id": "Java/24", "generation": "class Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    */\n    public int largest_divisor(int n) {\n        // Start checking from n-1 down to 1\n        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i; // Return the first divisor found\n            }\n        }\n        return 1; // In case n is 1, the largest divisor smaller than 1 is not defined, but we return 1\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.largest_divisor(15)); // Output: 5\n        System.out.println(solution.largest_divisor(28)); // Output: 14\n        System.out.println(solution.largest_divisor(1));  // Output: 1\n    }\n}\n"}
{"task_id": "Java/22", "generation": "class Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n    */\n    public List<Integer> filter_integers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.filter_integers(Arrays.asList('a', 3.14, 5))); // Output: [5]\n        System.out.println(solution.filter_integers(Arrays.asList(1, 2, 3, \"abc\", new HashMap<>(), new ArrayList<>()))); // Output: [1, 2, 3]\n    }\n}\n"}
{"task_id": "Java/161", "generation": "class Solution {\n    public String solve(String s) {\n        // Check if the string contains any letters\n        boolean hasLetter = false;\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                hasLetter = true;\n                break;\n            }\n        }\n\n        if (hasLetter) {\n            // If there are letters, reverse their case\n            StringBuilder result = new StringBuilder();\n            for (char c : s.toCharArray()) {\n                if (Character.isLetter(c)) {\n                    // Reverse case\n                    if (Character.isLowerCase(c)) {\n                        result.append(Character.toUpperCase(c));\n                    } else {\n                        result.append(Character.toLowerCase(c));\n                    }\n                } else {\n                    // Keep non-letter characters unchanged\n                    result.append(c);\n                }\n            }\n            return result.toString();\n        } else {\n            // If there are no letters, reverse the entire string\n            return new StringBuilder(s).reverse().toString();\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.solve(\"1234\"));    // Output: \"4321\"\n        System.out.println(solution.solve(\"ab\"));      // Output: \"AB\"\n        System.out.println(solution.solve(\"#a@C\"));    // Output: \"#A@c\"\n    }\n}\n"}
{"task_id": "Java/28", "generation": "class Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n    */\n    public String concatenate(List<String> strings) {\n        StringBuilder result = new StringBuilder();\n        for (String str : strings) {\n            result.append(str);\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.concatenate(List.of())); // Output: \"\"\n        System.out.println(solution.concatenate(Arrays.asList(\"a\", \"b\", \"c\"))); // Output: \"abc\"\n    }\n}\n"}
{"task_id": "Java/72", "generation": "class Solution {\n    public boolean will_it_fly(List<Integer> q, int w) {\n        // Check if the list is a palindrome\n        int n = q.size();\n        for (int i = 0; i < n / 2; i++) {\n            if (!q.get(i).equals(q.get(n - 1 - i))) {\n                return false; // Not a palindrome\n            }\n        }\n\n        // Calculate the sum of the elements\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n\n        // Check if the sum is less than or equal to w\n        return sum <= w;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.will_it_fly(Arrays.asList(1, 2), 5)); // false\n        System.out.println(solution.will_it_fly(Arrays.asList(3, 2, 3), 1)); // false\n        System.out.println(solution.will_it_fly(Arrays.asList(3, 2, 3), 9)); // true\n        System.out.println(solution.will_it_fly(Arrays.asList(3), 5)); // true\n    }\n}\n"}
{"task_id": "Java/127", "generation": "class Solution {\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // Extract start and end points from the intervals\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        \n        // Calculate the intersection\n        int startIntersection = Math.max(start1, start2);\n        int endIntersection = Math.min(end1, end2);\n        \n        // Check if there is an intersection\n        if (startIntersection > endIntersection) {\n            return \"NO\"; // No intersection\n        }\n        \n        // Calculate the length of the intersection\n        int length = endIntersection - startIntersection;\n        \n        // Check if the length is prime\n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n    \n    // Helper method to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) return false; // 0 and 1 are not prime numbers\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false; // Found a divisor, not prime\n            }\n        }\n        return true; // No divisors found, it's prime\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.intersection(Arrays.asList(1, 2), Arrays.asList(2, 3))); // \"NO\"\n        System.out.println(sol.intersection(Arrays.asList(-1, 1), Arrays.asList(0, 4))); // \"NO\"\n        System.out.println(sol.intersection(Arrays.asList(-3, -1), Arrays.asList(-5, 5))); // \"YES\"\n    }\n}\n"}
{"task_id": "Java/86", "generation": "class Solution {\n    public String anti_shuffle(String s) {\n        // Split the string by spaces to handle words\n        String[] words = s.split(\"(?<= )|(?= )\"); // This regex keeps spaces as separate elements\n        StringBuilder result = new StringBuilder();\n\n        for (String word : words) {\n            if (word.trim().isEmpty()) {\n                // If the word is just a space, add it directly to the result\n                result.append(word);\n            } else {\n                // Sort the characters of the word\n                char[] charArray = word.toCharArray();\n                Arrays.sort(charArray);\n                // Append the sorted word to the result\n                result.append(new String(charArray));\n            }\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.anti_shuffle(\"Hi\")); // Output: \"Hi\"\n        System.out.println(solution.anti_shuffle(\"hello\")); // Output: \"ehllo\"\n        System.out.println(solution.anti_shuffle(\"Hello World!!!\")); // Output: \"Hello !!!Wdlor\"\n    }\n}\n"}
{"task_id": "Java/3", "generation": "class Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, \n    and at that point function should return True. Otherwise it should return False.\n    >>> below_zero(Arrays.asList(1, 2, 3))\n    false\n    >>> below_zero(Arrays.asList(1, 2, -4, 5))\n    true\n    */\n    public boolean below_zero(List<Integer> operations) {\n        int balance = 0; // Start with a balance of zero\n        \n        for (int operation : operations) {\n            balance += operation; // Update the balance\n            \n            if (balance < 0) { // Check if the balance falls below zero\n                return true; // Return true if it does\n            }\n        }\n        \n        return false; // Return false if balance never falls below zero\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.below_zero(Arrays.asList(1, 2, 3))); // false\n        System.out.println(solution.below_zero(Arrays.asList(1, 2, -4, 5))); // true\n        System.out.println(solution.below_zero(Arrays.asList(-1, 1, -1))); // true\n        System.out.println(solution.below_zero(Arrays.asList(5, -3, -3))); // false\n    }\n}\n"}
{"task_id": "Java/69", "generation": "class Solution {\n    public int search(List<Integer> lst) {\n        // Step 1: Count the frequencies of each integer\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n\n        // Step 2: Find the greatest integer with the required frequency condition\n        int maxInteger = -1;\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int key = entry.getKey();\n            int frequency = entry.getValue();\n            // Check if frequency is greater than or equal to the integer itself\n            if (frequency >= key) {\n                maxInteger = Math.max(maxInteger, key);\n            }\n        }\n\n        // Step 3: Return the result\n        return maxInteger;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.search(Arrays.asList(4, 1, 2, 2, 3, 1))); // Output: 2\n        System.out.println(solution.search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4))); // Output: 3\n        System.out.println(solution.search(Arrays.asList(5, 5, 4, 4, 4))); // Output: -1\n    }\n}\n"}
{"task_id": "Java/62", "generation": "class Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3))\n    [2, 6]\n    */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        \n        // Start from the first term (index 1) since the derivative of the constant term (index 0) is 0\n        for (int i = 1; i < xs.size(); i++) {\n            // Calculate the derivative coefficient\n            int derivativeCoefficient = i * xs.get(i);\n            result.add(derivativeCoefficient);\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/50", "generation": "class Solution {\n    /**\n    Returns encoded string by shifting every character by 5 in the alphabet.\n    */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            // Ensure we only encode lowercase letters\n            if (ch >= 'a' && ch <= 'z') {\n                sb.append((char) ('a' + ((ch - 'a' + 5) % 26)));\n            } else {\n                // If the character is not a lowercase letter, append it unchanged\n                sb.append(ch);\n            }\n        }\n        return sb.toString();\n    }\n\n    /**\n    Takes as input string encoded with encodeShift function. Returns decoded string.\n    */\n    public String decode_shift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            // Ensure we only decode lowercase letters\n            if (ch >= 'a' && ch <= 'z') {\n                sb.append((char) ('a' + ((ch - 'a' - 5 + 26) % 26)));\n            } else {\n                // If the character is not a lowercase letter, append it unchanged\n                sb.append(ch);\n            }\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String original = \"hello\";\n        String encoded = solution.encodeShift(original);\n        String decoded = solution.decode_shift(encoded);\n\n        System.out.println(\"Original: \" + original);\n        System.out.println(\"Encoded: \" + encoded);\n        System.out.println(\"Decoded: \" + decoded);\n    }\n}\n"}
{"task_id": "Java/135", "generation": "class Solution {\n    /**\n     * Create a function which returns the largest index of an element which\n     * is not greater than or equal to the element immediately preceding it. If\n     * no such element exists then return -1. The given array will not contain\n     * duplicate values.\n     *\n     * Examples:\n     * can_arrange(Arrays.asList(1,2,4,3,5)) = 3\n     * can_arrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int can_arrange(List<Integer> arr) {\n        int n = arr.size();\n        // Start from the second last element and go backwards\n        for (int i = n - 2; i >= 0; i--) {\n            // Check if the current element is less than the next one\n            if (arr.get(i) > arr.get(i + 1)) {\n                return i + 1; // Return the index of the element that is not greater\n            }\n        }\n        return -1; // If no such element is found\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.can_arrange(Arrays.asList(1, 2, 4, 3, 5))); // Output: 3\n        System.out.println(solution.can_arrange(Arrays.asList(1, 2, 3))); // Output: -1\n    }\n}\n"}
{"task_id": "Java/93", "generation": "class Solution {\n    public String encode(String message) {\n        StringBuilder encodedMessage = new StringBuilder();\n        \n        for (char ch : message.toCharArray()) {\n            if (Character.isLetter(ch)) {\n                // Swap case\n                char swappedCase = Character.isLowerCase(ch) ? Character.toUpperCase(ch) : Character.toLowerCase(ch);\n                \n                // Replace vowels\n                if (\"AEIOUaeiou\".indexOf(swappedCase) != -1) {\n                    // Calculate the new character\n                    char newChar = (char) (swappedCase + 2);\n                    // Handle wrap-around for 'y' and 'z'\n                    if (swappedCase == 'Y') newChar = 'A';\n                    if (swappedCase == 'y') newChar = 'a';\n                    if (swappedCase == 'Z') newChar = 'B';\n                    if (swappedCase == 'z') newChar = 'b';\n                    encodedMessage.append(newChar);\n                } else {\n                    encodedMessage.append(swappedCase);\n                }\n            } else {\n                // Keep spaces as they are\n                encodedMessage.append(ch);\n            }\n        }\n        \n        return encodedMessage.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.encode(\"test\")); // \"TGST\"\n        System.out.println(solution.encode(\"This is a message\")); // \"tHKS KS C MGSSCGG\"\n    }\n}\n"}
{"task_id": "Java/147", "generation": "class Solution {\n    public int get_max_triples(int n) {\n        // Step 1: Generate the array a\n        int[] a = new int[n];\n        for (int i = 1; i <= n; i++) {\n            a[i - 1] = i * i - i + 1; // a[i] = i * i - i + 1\n        }\n\n        // Step 2: Count occurrences of remainders\n        int[] count = new int[3]; // count[0] for remainder 0, count[1] for remainder 1, count[2] for remainder 2\n        for (int num : a) {\n            count[num % 3]++;\n        }\n\n        // Step 3: Calculate the number of valid triples\n        int result = 0;\n\n        // Combinations of three from count[0]\n        result += combination(count[0], 3);\n        // Combinations of three from count[1]\n        result += combination(count[1], 3);\n        // Combinations of three from count[2]\n        result += combination(count[2], 3);\n        // One from each remainder\n        result += count[0] * count[1] * count[2];\n\n        return result;\n    }\n\n    // Helper method to calculate nC3\n    private int combination(int n, int r) {\n        if (n < r) return 0;\n        if (r == 3) {\n            return (n * (n - 1) * (n - 2)) / 6; // nC3 = n! / (3! * (n - 3)!)\n        }\n        return 0;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        int n = 5; // Example input\n        System.out.println(sol.get_max_triples(n)); // Output: 1\n    }\n}\n"}
{"task_id": "Java/27", "generation": "class Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"Hello\")\n    \"hELLO\"\n    */\n    public String flip_case(String string) {\n        StringBuilder flippedString = new StringBuilder();\n        \n        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                flippedString.append(Character.toUpperCase(c));\n            } else if (Character.isUpperCase(c)) {\n                flippedString.append(Character.toLowerCase(c));\n            } else {\n                flippedString.append(c); // Keep non-alphabetic characters unchanged\n            }\n        }\n        \n        return flippedString.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.flip_case(\"Hello\")); // Output: hELLO\n        System.out.println(solution.flip_case(\"World!\")); // Output: wORLD!\n        System.out.println(solution.flip_case(\"Java123\")); // Output: jAVA123\n    }\n}\n"}
{"task_id": "Java/110", "generation": "class Solution {\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int oddCountInLst1 = 0;\n        int evenCountInLst2 = 0;\n\n        // Count odd numbers in lst1\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCountInLst1++;\n            }\n        }\n\n        // Count even numbers in lst2\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCountInLst2++;\n            }\n        }\n\n        // Check if we can replace all odd numbers in lst1 with even numbers from lst2\n        if (oddCountInLst1 <= evenCountInLst2) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4))); // Output: \"YES\"\n        System.out.println(solution.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4))); // Output: \"NO\"\n    }\n}\n"}
{"task_id": "Java/141", "generation": "class Solution {\n    public String file_name_check(String file_name) {\n        // Check for exactly one dot\n        int dotIndex = file_name.indexOf('.');\n        if (dotIndex == -1 || file_name.indexOf('.', dotIndex + 1) != -1) {\n            return \"No\"; // No dot or more than one dot\n        }\n\n        // Split the file name into name and extension\n        String namePart = file_name.substring(0, dotIndex);\n        String extensionPart = file_name.substring(dotIndex + 1);\n\n        // Check if the name part is empty and starts with a letter\n        if (namePart.isEmpty() || !Character.isLetter(namePart.charAt(0))) {\n            return \"No\"; // Name part is empty or does not start with a letter\n        }\n\n        // Check the extension part\n        List<String> validExtensions = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        if (!validExtensions.contains(extensionPart)) {\n            return \"No\"; // Invalid extension\n        }\n\n        // Count the number of digits in the name part\n        int digitCount = 0;\n        for (char c : namePart.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n        }\n\n        // Check if there are more than three digits\n        if (digitCount > 3) {\n            return \"No\"; // More than three digits\n        }\n\n        // If all checks passed, return \"Yes\"\n        return \"Yes\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.file_name_check(\"example.txt\")); // Yes\n        System.out.println(solution.file_name_check(\"1example.dll\")); // No\n        System.out.println(solution.file_name_check(\"example123.txt\")); // Yes\n        System.out.println(solution.file_name_check(\"example1234.txt\")); // No\n        System.out.println(solution.file_name_check(\"example.exe\")); // Yes\n        System.out.println(solution.file_name_check(\".hiddenfile.txt\")); // No\n        System.out.println(solution.file_name_check(\"file.name.txt\")); // No\n        System.out.println(solution.file_name_check(\"file.txt.exe\")); // No\n    }\n}\n"}
{"task_id": "Java/104", "generation": "class Solution {\n    public List<Integer> unique_digits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (Integer num : x) {\n            if (containsOnlyOddDigits(num)) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        return result;\n    }\n    \n    private boolean containsOnlyOddDigits(int num) {\n        while (num > 0) {\n            int digit = num % 10; // Get the last digit\n            if (digit % 2 == 0) { // Check if the digit is even\n                return false; // If any digit is even, return false\n            }\n            num /= 10; // Remove the last digit\n        }\n        return true; // All digits are odd\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.unique_digits(Arrays.asList(15, 33, 1422, 1))); // Output: [1, 15, 33]\n        System.out.println(solution.unique_digits(Arrays.asList(152, 323, 1422, 10))); // Output: []\n    }\n}\n"}
{"task_id": "Java/100", "generation": "class Solution {\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> stones = new ArrayList<>();\n        int currentStones = n; // Start with n stones at the first level\n        \n        for (int i = 0; i < n; i++) {\n            stones.add(currentStones); // Add the current number of stones to the list\n            \n            // Determine the next number of stones\n            if (n % 2 == 0) { // n is even\n                currentStones += 2; // Next even number\n            } else { // n is odd\n                currentStones += 2; // Next odd number\n            }\n        }\n        \n        return stones;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.make_a_pile(3)); // Output: [3, 5, 7]\n        System.out.println(solution.make_a_pile(4)); // Output: [4, 6, 8, 10]\n    }\n}\n"}
{"task_id": "Java/68", "generation": "class Solution {\n    public List<Integer> pluck(List<Integer> arr) {\n        // Initialize variables to track the smallest even value and its index\n        Integer smallestEvenValue = null;\n        Integer smallestEvenIndex = null;\n\n        // Iterate through the array\n        for (int i = 0; i < arr.size(); i++) {\n            int value = arr.get(i);\n            // Check if the value is even\n            if (value % 2 == 0) {\n                // If it's the first even number or smaller than the current smallest\n                if (smallestEvenValue == null || value < smallestEvenValue) {\n                    smallestEvenValue = value;\n                    smallestEvenIndex = i;\n                }\n            }\n        }\n\n        // If we found an even value, return it with its index\n        if (smallestEvenValue != null) {\n            return Arrays.asList(smallestEvenValue, smallestEvenIndex);\n        } else {\n            // If no even value was found, return an empty list\n            return Collections.emptyList();\n        }\n    }\n}\n"}
{"task_id": "Java/149", "generation": "class Solution {\n    public List<String> sorted_list_sum(List<String> lst) {\n        // Step 1: Filter out strings with odd lengths\n        List<String> filteredList = new ArrayList<>();\n        for (String str : lst) {\n            if (str.length() % 2 == 0) { // Check if the length is even\n                filteredList.add(str);\n            }\n        }\n\n        // Step 2: Sort the filtered list\n        Collections.sort(filteredList, new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                // First compare by length\n                int lengthComparison = Integer.compare(s1.length(), s2.length());\n                if (lengthComparison != 0) {\n                    return lengthComparison; // Return length comparison if not equal\n                }\n                // If lengths are equal, compare alphabetically\n                return s1.compareTo(s2);\n            }\n        });\n\n        // Step 3: Return the sorted list\n        return filteredList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.sorted_list_sum(Arrays.asList(\"aa\", \"a\", \"aaa\"))); // Output: [\"aa\"]\n        System.out.println(solution.sorted_list_sum(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\"))); // Output: [\"ab\", \"cd\"]\n    }\n}\n"}
{"task_id": "Java/128", "generation": "class Solution {\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        // Check for empty array\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int productOfSigns = 1; // Start with a neutral product for multiplication\n        int sumOfMagnitudes = 0; // To accumulate the sum of absolute values\n\n        for (int num : arr) {\n            if (num > 0) {\n                // Positive number\n                sumOfMagnitudes += num;\n            } else if (num < 0) {\n                // Negative number\n                sumOfMagnitudes += -num; // Add magnitude\n                productOfSigns *= -1; // Flip the sign\n            } else {\n                // Zero case\n                return Optional.of(0); // If there's a zero, the product is zero\n            }\n        }\n\n        // Return the final result\n        return Optional.of(sumOfMagnitudes * productOfSigns);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.prod_signs(Arrays.asList(1, 2, 2, -4))); // Output: Optional[-9]\n        System.out.println(solution.prod_signs(Arrays.asList(0, 1))); // Output: Optional[0]\n        System.out.println(solution.prod_signs(Arrays.asList())); // Output: Optional.empty\n    }\n}\n"}
{"task_id": "Java/2", "generation": "class Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    */\n    public double truncate_number(double number) {\n        // Get the integer part of the number\n        double integerPart = Math.floor(number);\n        // Calculate the decimal part\n        double decimalPart = number - integerPart;\n        return decimalPart;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test the function\n        System.out.println(solution.truncate_number(3.5)); // Output: 0.5\n        System.out.println(solution.truncate_number(2.75)); // Output: 0.75\n        System.out.println(solution.truncate_number(5.0)); // Output: 0.0\n        System.out.println(solution.truncate_number(7.123)); // Output: 0.123\n    }\n}\n"}
{"task_id": "Java/103", "generation": "class Solution {\n    public Object rounded_avg(int n, int m) {\n        // Check if n is greater than m\n        if (n > m) {\n            return -1;\n        }\n\n        // Calculate the sum of integers from n to m\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n\n        // Calculate the count of numbers\n        int count = m - n + 1;\n\n        // Calculate the average\n        double average = (double) sum / count;\n\n        // Round the average to the nearest integer\n        int roundedAverage = (int) Math.round(average);\n\n        // Convert the rounded average to binary\n        return Integer.toBinaryString(roundedAverage);\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.rounded_avg(1, 5)); // Output: \"11\"\n        System.out.println(sol.rounded_avg(7, 5)); // Output: -1\n        System.out.println(sol.rounded_avg(10, 20)); // Output: \"1111\"\n        System.out.println(sol.rounded_avg(20, 33)); // Output: \"11011\"\n    }\n}\n"}
{"task_id": "Java/55", "generation": "class Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    */\n    public int fib(int n) {\n        if (n <= 0) {\n            return 0; // Fibonacci of 0 is 0\n        } else if (n == 1) {\n            return 1; // Fibonacci of 1 is 1\n        }\n\n        int a = 0; // F(0)\n        int b = 1; // F(1)\n        int fibN = 0;\n\n        for (int i = 2; i <= n; i++) {\n            fibN = a + b; // F(n) = F(n-1) + F(n-2)\n            a = b; // Move to the next Fibonacci number\n            b = fibN; // Update b to the latest Fibonacci number\n        }\n\n        return fibN; // Return the n-th Fibonacci number\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fib(10)); // Output: 55\n        System.out.println(solution.fib(1));  // Output: 1\n        System.out.println(solution.fib(8));  // Output: 21\n    }\n}\n"}
{"task_id": "Java/70", "generation": "class Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strange_sort_list(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strange_sort_list(Arrays.asList()) == Arrays.asList()\n    */\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        // Handle the case of an empty list\n        if (lst.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        // Sort the list\n        Collections.sort(lst);\n        \n        List<Integer> result = new ArrayList<>();\n        int left = 0; // Pointer for the minimum value\n        int right = lst.size() - 1; // Pointer for the maximum value\n        \n        // Alternate between minimum and maximum\n        while (left <= right) {\n            if (left == right) {\n                result.add(lst.get(left)); // Add the last remaining element\n            } else {\n                result.add(lst.get(left)); // Add the minimum\n                result.add(lst.get(right)); // Add the maximum\n            }\n            left++;\n            right--;\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.strange_sort_list(Arrays.asList(1, 2, 3, 4))); // [1, 4, 2, 3]\n        System.out.println(solution.strange_sort_list(Arrays.asList(5, 5, 5, 5))); // [5, 5, 5, 5]\n        System.out.println(solution.strange_sort_list(Arrays.asList())); // []\n    }\n}\n"}
{"task_id": "Java/34", "generation": "class Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n    */\n    public List<Integer> unique(List<Integer> l) {\n        // Use a HashSet to store unique elements\n        Set<Integer> uniqueSet = new HashSet<>(l);\n        \n        // Convert the set back to a list\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n        \n        // Sort the list\n        Collections.sort(uniqueList);\n        \n        return uniqueList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> result = solution.unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123));\n        System.out.println(result); // Output: [0, 2, 3, 5, 9, 123]\n    }\n}\n"}
{"task_id": "Java/15", "generation": "class Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\n    */\n    public String string_sequence(int n) {\n        StringBuilder result = new StringBuilder();\n        \n        for (int i = 0; i <= n; i++) {\n            result.append(i);\n            if (i < n) { // Add a space only if it's not the last number\n                result.append(\" \");\n            }\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.string_sequence(0)); // Output: \"0\"\n        System.out.println(solution.string_sequence(5)); // Output: \"0 1 2 3 4 5\"\n    }\n}\n"}
{"task_id": "Java/130", "generation": "class Solution {\n    private Map<Integer, Integer> memo = new HashMap<>();\n\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i <= n; i++) {\n            result.add(tribonacci(i));\n        }\n        return result;\n    }\n\n    private int tribonacci(int n) {\n        if (n == 1) return 3; // base case\n        if (memo.containsKey(n)) return memo.get(n); // return cached value\n\n        int value;\n        if (n % 2 == 0) {\n            value = 1 + n / 2; // if n is even\n        } else {\n            value = tribonacci(n - 1) + tribonacci(n - 2) + tribonacci(n + 1); // if n is odd\n        }\n\n        memo.put(n, value); // cache the computed value\n        return value;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 3; // Example input\n        List<Integer> tribonacciSequence = solution.tri(n);\n        System.out.println(tribonacciSequence); // Output: [3, 2, 8, ...]\n    }\n}\n"}
{"task_id": "Java/91", "generation": "import java.util.*;\n\nclass Solution {\n    public int is_bored(String S) {\n        // Split the string into sentences based on the delimiters\n        String[] sentences = S.split(\"[.!?]\");\n        int boredCount = 0;\n\n        // Count the number of sentences that start with \"I\"\n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"I\")) {\n                boredCount++;\n            }\n        }\n        return boredCount;\n    }\n}\n"}
{"task_id": "Java/11", "generation": "class Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    */\n    public String string_xor(String a, String b) {\n        // Ensure both strings are of the same length\n        int length = Math.max(a.length(), b.length());\n        StringBuilder result = new StringBuilder();\n\n        // Pad the shorter string with leading zeros\n        while (a.length() < length) {\n            a = \"0\" + a;\n        }\n        while (b.length() < length) {\n            b = \"0\" + b;\n        }\n\n        // Perform XOR operation\n        for (int i = 0; i < length; i++) {\n            char charA = a.charAt(i);\n            char charB = b.charAt(i);\n            // XOR logic\n            if (charA == charB) {\n                result.append('0');\n            } else {\n                result.append('1');\n            }\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.string_xor(\"010\", \"110\")); // Output: \"100\"\n        System.out.println(solution.string_xor(\"1010\", \"0011\")); // Output: \"1001\"\n        System.out.println(solution.string_xor(\"111\", \"000\")); // Output: \"111\"\n    }\n}\n"}
{"task_id": "Java/39", "generation": "class Solution {\n    /**\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    */\n    \n    public int prime_fib(int n) {\n        if (n < 1) {\n            throw new IllegalArgumentException(\"n must be a positive integer.\");\n        }\n\n        List<Integer> primeFibs = new ArrayList<>();\n        int a = 0, b = 1;\n\n        while (primeFibs.size() < n) {\n            int fib = a + b;\n            a = b;\n            b = fib;\n\n            if (isPrime(fib)) {\n                primeFibs.add(fib);\n            }\n        }\n\n        return primeFibs.get(n - 1);\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        if (num <= 3) return true;\n        if (num % 2 == 0 || num % 3 == 0) return false;\n\n        for (int i = 5; i * i <= num; i += 6) {\n            if (num % i == 0 || num % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.prime_fib(1)); // 2\n        System.out.println(sol.prime_fib(2)); // 3\n        System.out.println(sol.prime_fib(3)); // 5\n        System.out.println(sol.prime_fib(4)); // 13\n        System.out.println(sol.prime_fib(5)); // 89\n    }\n}\n"}
{"task_id": "Java/117", "generation": "class Solution {\n    public List<String> select_words(String s, int n) {\n        // Initialize a list to store the result\n        List<String> result = new ArrayList<>();\n        \n        // Check if the input string is empty\n        if (s == null || s.isEmpty()) {\n            return result; // Return an empty list\n        }\n        \n        // Split the string into words\n        String[] words = s.split(\" \");\n        \n        // Iterate through each word\n        for (String word : words) {\n            // Count the number of consonants in the word\n            int consonantCount = countConsonants(word);\n            \n            // If the count matches n, add the word to the result list\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        \n        return result; // Return the list of words with exactly n consonants\n    }\n    \n    // Helper method to count consonants in a word\n    private int countConsonants(String word) {\n        int count = 0;\n        // Define a set of vowels for easy checking\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u',\n                                                              'A', 'E', 'I', 'O', 'U'));\n        \n        // Iterate through each character in the word\n        for (char c : word.toCharArray()) {\n            // Check if the character is a consonant (a letter that is not a vowel)\n            if (Character.isLetter(c) && !vowels.contains(c)) {\n                count++;\n            }\n        }\n        \n        return count; // Return the total count of consonants\n    }\n}\n"}
{"task_id": "Java/0", "generation": "class Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> has_close_elements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> has_close_elements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n    */\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        // Sort the list to make it easier to find close elements\n        Collections.sort(numbers);\n        \n        // Check each pair of adjacent elements\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            // Calculate the difference between adjacent elements\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < threshold) {\n                return true; // Found two elements closer than the threshold\n            }\n        }\n        \n        return false; // No elements found that are closer than the threshold\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.has_close_elements(Arrays.asList(1.0, 2.0, 3.0), 0.5)); // false\n        System.out.println(solution.has_close_elements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)); // true\n    }\n}\n"}
{"task_id": "Java/31", "generation": "class Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    false\n    >>> is_prime(101)\n    true\n    >>> is_prime(11)\n    true\n    >>> is_prime(13441)\n    true\n    >>> is_prime(61)\n    true\n    >>> is_prime(4)\n    false\n    >>> is_prime(1)\n    false\n    */\n    public boolean is_prime(int n) {\n        // Check for numbers less than or equal to 1\n        if (n <= 1) {\n            return false;\n        }\n        // Check for factors from 2 to the square root of n\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false; // n is divisible by i, hence not prime\n            }\n        }\n        return true; // n is prime\n    }\n}\n"}
{"task_id": "Java/106", "generation": "class Solution {\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                // Calculate factorial for even i\n                result.add(factorial(i));\n            } else {\n                // Calculate sum from 1 to i for odd i\n                result.add(sumToN(i));\n            }\n        }\n        \n        return result;\n    }\n    \n    // Helper method to calculate factorial\n    private int factorial(int num) {\n        int fact = 1;\n        for (int j = 1; j <= num; j++) {\n            fact *= j;\n        }\n        return fact;\n    }\n    \n    // Helper method to calculate sum from 1 to num\n    private int sumToN(int num) {\n        return (num * (num + 1)) / 2; // Using the formula n(n + 1)/2\n    }\n    \n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.f(5)); // Output: [1, 2, 6, 24, 15]\n    }\n}\n"}
{"task_id": "Java/5", "generation": "class Solution {\n    /**\n    Insert a number 'delimiter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n    */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i)); // Add the current number\n            \n            // If it's not the last element, add the delimiter\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.intersperse(List.of(), 4)); // []\n        System.out.println(solution.intersperse(Arrays.asList(1, 2, 3), 4)); // [1, 4, 2, 4, 3]\n    }\n}\n"}
{"task_id": "Java/114", "generation": "class Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n    */\n    public int minSubArraySum(List<Integer> nums) {\n        // Initialize the minimum sum to a large value\n        int minSum = Integer.MAX_VALUE;\n        // Initialize the current sum to 0\n        int currentSum = 0;\n\n        for (int num : nums) {\n            // Add the current number to the current sum\n            currentSum += num;\n            // Update the minimum sum if the current sum is smaller\n            minSum = Math.min(minSum, currentSum);\n            // If the current sum becomes positive, reset it to 0\n            if (currentSum > 0) {\n                currentSum = 0;\n            }\n        }\n\n        return minSum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4))); // Output: 1\n        System.out.println(solution.minSubArraySum(Arrays.asList(-1, -2, -3))); // Output: -6\n    }\n}\n"}
{"task_id": "Java/51", "generation": "class Solution {\n    /**\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels(\"\")\n    \"\"\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> remove_vowels(\"abcdef\")\n    \"bcdf\"\n    >>> remove_vowels(\"aaaaa\")\n    \"\"\n    >>> remove_vowels(\"aaBAA\")\n    \"B\"\n    >>> remove_vowels(\"zbcd\")\n    \"zbcd\"\n    */\n    public String remove_vowels(String text) {\n        // Define a set of vowels (both lowercase and uppercase)\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', \n                                                             'A', 'E', 'I', 'O', 'U'));\n        StringBuilder result = new StringBuilder();\n\n        // Iterate through each character in the input string\n        for (char c : text.toCharArray()) {\n            // If the character is not a vowel, append it to the result\n            if (!vowels.contains(c)) {\n                result.append(c);\n            }\n        }\n\n        // Convert StringBuilder to String and return\n        return result.toString();\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.remove_vowels(\"\")); // \"\"\n        System.out.println(solution.remove_vowels(\"abcdef\\nghijklm\")); // \"bcdf\\nghjklm\"\n        System.out.println(solution.remove_vowels(\"abcdef\")); // \"bcdf\"\n        System.out.println(solution.remove_vowels(\"aaaaa\")); // \"\"\n        System.out.println(solution.remove_vowels(\"aaBAA\")); // \"B\"\n        System.out.println(solution.remove_vowels(\"zbcd\")); // \"zbcd\"\n    }\n}\n"}
{"task_id": "Java/152", "generation": "class Solution {\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        \n        // Check if the input lists are of equal length\n        if (game.size() != guess.size()) {\n            throw new IllegalArgumentException(\"The size of game and guess lists must be equal.\");\n        }\n        \n        // Iterate through both lists\n        for (int i = 0; i < game.size(); i++) {\n            // Calculate the absolute difference\n            int difference = Math.abs(game.get(i) - guess.get(i));\n            result.add(difference);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.compare(Arrays.asList(1, 2, 3, 4, 5, 1), Arrays.asList(1, 2, 3, 4, 2, -2))); // [0, 0, 0, 0, 3, 3]\n        System.out.println(solution.compare(Arrays.asList(0, 5, 0, 0, 0, 4), Arrays.asList(4, 1, 1, 0, 0, -2))); // [4, 4, 1, 0, 0, 6]\n    }\n}\n"}
{"task_id": "Java/139", "generation": "class Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long special_factorial(int n) {\n        long result = 1; // Initialize result to 1\n        for (int i = 1; i <= n; i++) {\n            result *= factorial(i); // Multiply by the factorial of i\n        }\n        return result; // Return the final result\n    }\n\n    // Helper method to calculate factorial of a number\n    private long factorial(int num) {\n        long fact = 1; // Initialize factorial to 1\n        for (int i = 2; i <= num; i++) {\n            fact *= i; // Calculate factorial\n        }\n        return fact; // Return the calculated factorial\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.special_factorial(4)); // Output: 288\n    }\n}\n"}
{"task_id": "Java/105", "generation": "class Solution {\n    public List<String> by_length(List<Integer> arr) {\n        // List to hold the names of the numbers\n        List<String> result = new ArrayList<>();\n        \n        // Map to convert numbers to their corresponding names\n        String[] names = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        \n        // Filter the input list to include only numbers between 1 and 9\n        List<Integer> filtered = new ArrayList<>();\n        for (Integer num : arr) {\n            if (num >= 1 && num <= 9) {\n                filtered.add(num);\n            }\n        }\n        \n        // Sort the filtered list\n        Collections.sort(filtered);\n        \n        // Reverse the sorted list\n        Collections.reverse(filtered);\n        \n        // Convert the numbers to their corresponding names\n        for (Integer num : filtered) {\n            result.add(names[num]);\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/12", "generation": "class Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n    */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longestString = strings.get(0); // Start with the first string\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str; // Update if we find a longer string\n            }\n        }\n        \n        return Optional.of(longestString); // Return the longest string wrapped in Optional\n    }\n}\n"}
{"task_id": "Java/7", "generation": "class Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring(List.of(), \"a\")\n    []\n    >>> filter_by_substring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    */\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        // Use stream to filter the list based on the substring\n        return strings.stream()\n                      .filter(s -> s.contains(substring))\n                      .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/138", "generation": "class Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == false\n    is_equal_to_sum_even(6) == false\n    is_equal_to_sum_even(8) == true\n    */\n    public boolean is_equal_to_sum_even(int n) {\n        // Check if n is less than 8\n        if (n < 8) {\n            return false;\n        }\n        // Check if n is even\n        return n % 2 == 0;\n    }\n}\n"}
{"task_id": "Java/41", "generation": "class Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int car_race_collision(int n) {\n        // Each car moving left to right will collide with each car moving right to left\n        // Therefore, the total number of collisions is n * n\n        return n * n;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 5; // Example number of cars in each direction\n        int collisions = solution.car_race_collision(n);\n        System.out.println(\"Number of collisions: \" + collisions); // Output: 25\n    }\n}\n"}
{"task_id": "Java/67", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruit_distribution(String s, int n) {\n        // Split the string to extract the number of apples and oranges\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0]);  // First part is the number of apples\n        int oranges = Integer.parseInt(parts[2]);  // Third part is the number of oranges\n        \n        // Calculate the number of mangoes\n        int mangoes = n - apples - oranges;\n        return mangoes;\n    }\n}\n"}
{"task_id": "Java/40", "generation": "class Solution {\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        // Convert the List to an array for easier manipulation\n        Integer[] arr = l.toArray(new Integer[0]);\n        int n = arr.length;\n\n        // Sort the array\n        Arrays.sort(arr);\n\n        // Iterate through the array\n        for (int i = 0; i < n - 2; i++) {\n            // To avoid duplicates for the first element\n            if (i > 0 && arr[i].equals(arr[i - 1])) {\n                continue;\n            }\n\n            // Use two pointers to find the other two elements\n            int left = i + 1;\n            int right = n - 1;\n\n            while (left < right) {\n                int sum = arr[i] + arr[left] + arr[right];\n\n                if (sum == 0) {\n                    return true; // Found a triplet\n                } else if (sum < 0) {\n                    left++; // Need a larger sum\n                } else {\n                    right--; // Need a smaller sum\n                }\n            }\n        }\n\n        return false; // No triplet found\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1, 3, -2, 1))); // true\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(2, 4, -5, 3, 9, 7))); // true\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1))); // false\n    }\n}\n"}
{"task_id": "Java/33", "generation": "class Solution {\n    public List<Integer> sort_third(List<Integer> l) {\n        // Create a list to hold the values at indices divisible by 3\n        List<Integer> divisibleByThreeValues = new ArrayList<>();\n        \n        // Collect values at indices divisible by 3\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                divisibleByThreeValues.add(l.get(i));\n            }\n        }\n        \n        // Sort the collected values\n        Collections.sort(divisibleByThreeValues);\n        \n        // Create a new list to hold the result\n        List<Integer> result = new ArrayList<>(l);\n        \n        // Replace the values at indices divisible by 3 with the sorted values\n        int sortedIndex = 0;\n        for (int i = 0; i < result.size(); i++) {\n            if (i % 3 == 0) {\n                result.set(i, divisibleByThreeValues.get(sortedIndex));\n                sortedIndex++;\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.sort_third(Arrays.asList(1, 2, 3))); // [1, 2, 3]\n        System.out.println(solution.sort_third(Arrays.asList(5, 6, 3, 4, 8, 9, 2))); // [2, 6, 3, 4, 8, 9, 5]\n    }\n}\n"}
{"task_id": "Java/136", "generation": "class Solution {\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        Optional<Integer> largestNegative = Optional.empty();\n        Optional<Integer> smallestPositive = Optional.empty();\n\n        for (Integer num : lst) {\n            if (num < 0) {\n                if (largestNegative.isEmpty() || num > largestNegative.get()) {\n                    largestNegative = Optional.of(num);\n                }\n            } else if (num > 0) {\n                if (smallestPositive.isEmpty() || num < smallestPositive.get()) {\n                    smallestPositive = Optional.of(num);\n                }\n            }\n        }\n\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(2, 4, 1, 3, 5, 7))); // (Optional.empty(), Optional.of(1))\n        System.out.println(solution.largest_smallest_integers(Arrays.asList())); // (Optional.empty(), Optional.empty())\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(0))); // (Optional.empty(), Optional.empty())\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(-1, -2, 0, 1, 2))); // (Optional.of(-1), Optional.of(1))\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(-5, -3, -1, 0, 2, 4))); // (Optional.of(-1), Optional.of(2))\n    }\n}\n"}
{"task_id": "Java/1", "generation": "class Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        StringBuilder currentGroup = new StringBuilder();\n        int balance = 0;\n\n        // Remove spaces from the input string\n        paren_string = paren_string.replaceAll(\" \", \"\");\n\n        for (char ch : paren_string.toCharArray()) {\n            if (ch == '(') {\n                balance++;\n                currentGroup.append(ch);\n            } else if (ch == ')') {\n                balance--;\n                currentGroup.append(ch);\n            }\n\n            // When balance is zero, we have a complete group\n            if (balance == 0 && currentGroup.length() > 0) {\n                result.add(currentGroup.toString());\n                currentGroup.setLength(0); // Reset for the next group\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.separate_paren_groups(\"( ) (( )) (( )( ))\"));\n    }\n}\n"}
{"task_id": "Java/126", "generation": "class Solution {\n    public boolean is_sorted(List<Integer> lst) {\n        // Check if the list is empty or has only one element\n        if (lst.size() <= 1) {\n            return true;\n        }\n\n        // HashMap to count occurrences of each number\n        Map<Integer, Integer> countMap = new HashMap<>();\n\n        // Iterate through the list to check sorting and count occurrences\n        for (int i = 0; i < lst.size(); i++) {\n            int current = lst.get(i);\n\n            // Count occurrences\n            countMap.put(current, countMap.getOrDefault(current, 0) + 1);\n            if (countMap.get(current) > 2) {\n                return false; // More than two occurrences\n            }\n\n            // Check if the list is sorted\n            if (i > 0 && current < lst.get(i - 1)) {\n                return false; // Not sorted\n            }\n        }\n\n        // If we pass both checks, return true\n        return true;\n    }\n}\n"}
{"task_id": "Java/38", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decode_cyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n"}
{"task_id": "Java/18", "generation": "class Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlapping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    */\n    public int how_many_times(String string, String substring) {\n        if (substring.isEmpty() || string.length() < substring.length()) {\n            return 0;\n        }\n\n        int count = 0;\n        int index = 0;\n\n        while ((index = string.indexOf(substring, index)) != -1) {\n            count++;\n            index++; // Move to the next character to allow overlapping\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.how_many_times(\"\", \"a\")); // Output: 0\n        System.out.println(solution.how_many_times(\"aaa\", \"a\")); // Output: 3\n        System.out.println(solution.how_many_times(\"aaaa\", \"aa\")); // Output: 3\n    }\n}\n"}
{"task_id": "Java/45", "generation": "class Solution {\n    /**\n    Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    */\n    public double triangle_area(double a, double h) {\n        return 0.5 * a * h; // Calculate the area using the formula\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        double area = solution.triangle_area(5, 3);\n        System.out.println(\"Area of the triangle: \" + area); // Output: Area of the triangle: 7.5\n    }\n}\n"}
{"task_id": "Java/81", "generation": "class Solution {\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        \n        for (Double gpa : grades) {\n            if (gpa == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        \n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> grades = Arrays.asList(4.0, 3.0, 1.7, 2.0, 3.5);\n        List<String> letterGrades = solution.numerical_letter_grade(grades);\n        System.out.println(letterGrades); // Output: [A+, B+, C-, C, A-]\n    }\n}\n"}
{"task_id": "Java/26", "generation": "class Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates(Arrays.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n    */\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        // Step 1: Count occurrences of each number\n        Map<Integer, Long> frequencyMap = numbers.stream()\n            .collect(Collectors.groupingBy(n -> n, Collectors.counting()));\n\n        // Step 2: Filter and keep only those numbers that occur once\n        List<Integer> result = numbers.stream()\n            .filter(n -> frequencyMap.get(n) == 1)\n            .collect(Collectors.toList());\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> input = Arrays.asList(1, 2, 3, 2, 4);\n        List<Integer> output = solution.remove_duplicates(input);\n        System.out.println(output); // Output: [1, 3, 4]\n    }\n}\n"}
{"task_id": "Java/134", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        // Strip any trailing spaces from the string\n        txt = txt.trim();\n        \n        // Check if the string is empty after trimming\n        if (txt.isEmpty()) {\n            return false;\n        }\n        \n        // Get the last character of the string\n        char lastChar = txt.charAt(txt.length() - 1);\n        \n        // Check if the last character is an alphabetical character\n        return Character.isLetter(lastChar) && (txt.length() == 1 || txt.charAt(txt.length() - 2) == ' ');\n    }\n}\n"}
{"task_id": "Java/76", "generation": "class Solution {\n    public boolean is_simple_power(int x, int n) {\n        // Handle special cases\n        if (n == 1) {\n            return x == 1; // 1^k = 1 for any k\n        }\n        if (x == 1) {\n            return true; // n^0 = 1 for any n > 0\n        }\n        if (n <= 0) {\n            return false; // n must be positive for powers\n        }\n\n        int power = 1; // Start with n^0\n        while (power < x) {\n            power *= n; // Calculate n^k\n        }\n\n        return power == x; // Check if we found the exact power\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.is_simple_power(1, 4)); // true\n        System.out.println(solution.is_simple_power(2, 2)); // true\n        System.out.println(solution.is_simple_power(8, 2)); // true\n        System.out.println(solution.is_simple_power(3, 2)); // false\n        System.out.println(solution.is_simple_power(3, 1)); // false\n        System.out.println(solution.is_simple_power(5, 3)); // false\n    }\n}\n"}
{"task_id": "Java/120", "generation": "class Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Step 1: Sort the array in descending order\n        Collections.sort(arr, Collections.reverseOrder());\n        \n        // Step 2: Take the first k elements\n        List<Integer> topK = arr.subList(0, k);\n        \n        // Step 3: Sort the top k elements in ascending order\n        Collections.sort(topK);\n        \n        return topK;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.maximum(Arrays.asList(-3, -4, 5), 3)); // Output: [-4, -3, 5]\n        System.out.println(solution.maximum(Arrays.asList(4, -4, 4), 2)); // Output: [4, 4]\n        System.out.println(solution.maximum(Arrays.asList(-3, 2, 1, 2, -1, -2, 1), 1)); // Output: [2]\n    }\n}\n"}
{"task_id": "Java/47", "generation": "class Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    8.0\n    */\n    public double median(List<Integer> l) {\n        // Sort the list\n        Collections.sort(l);\n        \n        int size = l.size();\n        if (size % 2 == 1) {\n            // If odd, return the middle element\n            return l.get(size / 2);\n        } else {\n            // If even, return the average of the two middle elements\n            return (l.get(size / 2 - 1) + l.get(size / 2)) / 2.0;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.median(Arrays.asList(3, 1, 2, 4, 5))); // Output: 3.0\n        System.out.println(solution.median(Arrays.asList(-10, 4, 6, 1000, 10, 20))); // Output: 8.0\n    }\n}\n"}
{"task_id": "Java/78", "generation": "class Solution {\n    public int hex_key(String num) {\n        // Set of prime hexadecimal digits\n        Set<Character> primeHexDigits = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        int count = 0; // Counter for prime hexadecimal digits\n        \n        // Iterate through each character in the string\n        for (char ch : num.toCharArray()) {\n            // Check if the character is in the set of prime hexadecimal digits\n            if (primeHexDigits.contains(ch)) {\n                count++; // Increment the counter\n            }\n        }\n        \n        return count; // Return the total count\n    }\n}\n"}
{"task_id": "Java/129", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int N = grid.size();\n        List<List<Integer>> paths = new ArrayList<>();\n        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        \n        // Start DFS from each cell in the grid\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < N; j++) {\n                List<Integer> initialPath = new ArrayList<>();\n                initialPath.add(grid.get(i).get(j));\n                dfs(i, j, initialPath, grid, k, paths, directions);\n            }\n        }\n        \n        // Sort the paths lexicographically and return the first one\n        Collections.sort(paths, (a, b) -> {\n            for (int i = 0; i < k; i++) {\n                if (!a.get(i).equals(b.get(i))) {\n                    return a.get(i) - b.get(i);\n                }\n            }\n            return 0;\n        });\n        \n        return paths.get(0);\n    }\n\n    private void dfs(int x, int y, List<Integer> path, List<List<Integer>> grid, int k, List<List<Integer>> paths, int[][] directions) {\n        if (path.size() == k) {\n            paths.add(new ArrayList<>(path));\n            return;\n        }\n        \n        for (int[] dir : directions) {\n            int nx = x + dir[0];\n            int ny = y + dir[1];\n            if (nx >= 0 && nx < grid.size() && ny >= 0 && ny < grid.size()) {\n                path.add(grid.get(nx).get(ny));\n                dfs(nx, ny, path, grid, k, paths, directions);\n                path.remove(path.size() - 1); // Backtrack\n            }\n        }\n    }\n}\n"}
{"task_id": "Java/59", "generation": "class Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    */\n    public int largest_prime_factor(int n) {\n        int largestPrime = -1;\n\n        // Check for number of 2s that divide n\n        while (n % 2 == 0) {\n            largestPrime = 2;\n            n /= 2;\n        }\n\n        // n must be odd at this point, so we can skip even numbers\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            // While i divides n, update n and largestPrime\n            while (n % i == 0) {\n                largestPrime = i;\n                n /= i;\n            }\n        }\n\n        // This condition is to check if n is a prime number greater than 2\n        if (n > 2) {\n            largestPrime = n;\n        }\n\n        return largestPrime;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.largest_prime_factor(13195)); // Output: 29\n        System.out.println(sol.largest_prime_factor(2048)); // Output: 2\n    }\n}\n"}
{"task_id": "Java/123", "generation": "class Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always\n    reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> get_odd_collatz(int n) {\n        Set<Integer> oddNumbers = new HashSet<>(); // Use a set to avoid duplicates\n        while (n != 1) {\n            if (n % 2 != 0) { // Check if n is odd\n                oddNumbers.add(n);\n            }\n            // Apply the Collatz rules\n            if (n % 2 == 0) {\n                n = n / 2; // If n is even\n            } else {\n                n = 3 * n + 1; // If n is odd\n            }\n        }\n        // Add 1 to the set since the sequence always ends with 1\n        oddNumbers.add(1);\n        \n        // Convert the set to a list and sort it\n        List<Integer> result = new ArrayList<>(oddNumbers);\n        Collections.sort(result);\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.get_odd_collatz(5)); // Output: [1, 5]\n        System.out.println(solution.get_odd_collatz(7)); // Output: [1, 7]\n        System.out.println(solution.get_odd_collatz(10)); // Output: [1, 5]\n    }\n}\n"}
{"task_id": "Java/74", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        int totalCharsLst1 = 0;\n        int totalCharsLst2 = 0;\n\n        // Calculate total characters in lst1\n        for (String s : lst1) {\n            totalCharsLst1 += s.length();\n        }\n\n        // Calculate total characters in lst2\n        for (String s : lst2) {\n            totalCharsLst2 += s.length();\n        }\n\n        // Compare total characters and return the appropriate list\n        if (totalCharsLst1 < totalCharsLst2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n"}
{"task_id": "Java/21", "generation": "class Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1.\n    >>> rescale_to_unit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    */\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements.\");\n        }\n\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        \n        List<Double> scaledNumbers = new ArrayList<>();\n        for (Double number : numbers) {\n            double scaledValue = (number - min) / (max - min);\n            scaledNumbers.add(scaledValue);\n        }\n        \n        return scaledNumbers;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> result = solution.rescale_to_unit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0));\n        System.out.println(result); // Output: [0.0, 0.25, 0.5, 0.75, 1.0]\n    }\n}\n"}
{"task_id": "Java/48", "generation": "class Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n    */\n    public boolean is_palindrome(String text) {\n        // A string is a palindrome if it is equal to its reverse\n        int left = 0;\n        int right = text.length() - 1;\n\n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false; // Not a palindrome\n            }\n            left++;\n            right--;\n        }\n        return true; // It's a palindrome\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.is_palindrome(\"\")); // true\n        System.out.println(solution.is_palindrome(\"aba\")); // true\n        System.out.println(solution.is_palindrome(\"aaaaa\")); // true\n        System.out.println(solution.is_palindrome(\"zbcd\")); // false\n    }\n}\n"}
{"task_id": "Java/13", "generation": "class Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    */\n    public int greatest_common_divisor(int a, int b) {\n        // Ensure a and b are non-negative\n        a = Math.abs(a);\n        b = Math.abs(b);\n        \n        // Use the Euclidean algorithm\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        \n        return a; // a is now the GCD\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.greatest_common_divisor(3, 5)); // Output: 1\n        System.out.println(solution.greatest_common_divisor(25, 15)); // Output: 5\n    }\n}\n"}
{"task_id": "Java/42", "generation": "class Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incr_list(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incr_list(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    */\n    public List<Integer> incr_list(List<Integer> l) {\n        return l.stream()\n                .map(x -> x + 1) // Increment each element by 1\n                .collect(Collectors.toList()); // Collect the results into a new list\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.incr_list(Arrays.asList(1, 2, 3))); // Output: [2, 3, 4]\n        System.out.println(solution.incr_list(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))); // Output: [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    }\n}\n"}
{"task_id": "Java/84", "generation": "class Solution {\n    /**\n    Given a positive integer N, return in binary the total sum of its digits.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        // Step 1: Calculate the sum of digits\n        int sum = 0;\n        while (N > 0) {\n            sum += N % 10; // Add the last digit to sum\n            N /= 10;       // Remove the last digit\n        }\n\n        // Step 2: Convert the sum to binary\n        return Integer.toBinaryString(sum);\n    }\n}\n"}
{"task_id": "Java/140", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String fix_spaces(String text) {\n        // Replace multiple spaces with a temporary placeholder\n        text = text.replaceAll(\" {2,}\", \"-\");\n        // Replace remaining single spaces with underscores\n        text = text.replace(\" \", \"_\");\n        // Replace the temporary placeholder back to single space\n        text = text.replace(\"-\", \" \");\n        return text;\n    }\n}\n"}
{"task_id": "Java/92", "generation": "class Solution {\n    public boolean any_int(Object x, Object y, Object z) {\n        // Check if all inputs are instances of Integer\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int a = (Integer) x;\n            int b = (Integer) y;\n            int c = (Integer) z;\n            \n            // Check if one number is equal to the sum of the other two\n            return (a == b + c) || (b == a + c) || (c == a + b);\n        }\n        // Return false if any of the inputs are not integers\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.any_int(5, 2, 7)); // true\n        System.out.println(solution.any_int(3, 2, 2)); // false\n        System.out.println(solution.any_int(3, -2, 1)); // true\n        System.out.println(solution.any_int(3.6, -2.2, 2)); // false\n    }\n}\n"}
{"task_id": "Java/143", "generation": "class Solution {\n    public String words_in_sentence(String sentence) {\n        // Split the sentence into words\n        String[] words = sentence.split(\" \");\n        List<String> primeLengthWords = new ArrayList<>();\n\n        // Check each word's length\n        for (String word : words) {\n            int length = word.length();\n            if (isPrime(length)) {\n                primeLengthWords.add(word);\n            }\n        }\n\n        // Join the words with a space and return\n        return String.join(\" \", primeLengthWords);\n    }\n\n    // Helper method to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) return false; // 0 and 1 are not prime numbers\n        if (num <= 3) return true; // 2 and 3 are prime numbers\n        if (num % 2 == 0 || num % 3 == 0) return false; // eliminate multiples of 2 and 3\n\n        for (int i = 5; i * i <= num; i += 6) {\n            if (num % i == 0 || num % (i + 2) == 0) return false; // check for factors\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.words_in_sentence(\"This is a test\")); // Output: \"is\"\n        System.out.println(solution.words_in_sentence(\"lets go for swimming\")); // Output: \"go for\"\n    }\n}\n"}
{"task_id": "Java/148", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> bf(String planet1, String planet2) {\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        \n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return new ArrayList<>(); // Return an empty list if either planet is invalid\n        }\n        \n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        \n        // Ensure index1 is less than index2\n        if (index1 > index2) {\n            int temp = index1;\n            index1 = index2;\n            index2 = temp;\n        }\n        \n        // Create a sublist of planets between index1 and index2\n        return planets.subList(index1 + 1, index2);\n    }\n}\n"}
{"task_id": "Java/115", "generation": "class Solution {\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        int totalLowerings = 0;\n\n        // Iterate through each row in the grid\n        for (List<Integer> well : grid) {\n            int waterUnits = 0;\n\n            // Count the number of water units (1s) in the current well\n            for (int water : well) {\n                if (water == 1) {\n                    waterUnits++;\n                }\n            }\n\n            // Calculate the number of times we need to lower the bucket for this well\n            if (waterUnits > 0) {\n                totalLowerings += (waterUnits + capacity - 1) / capacity; // This is equivalent to Math.ceil(waterUnits / capacity)\n            }\n        }\n\n        return totalLowerings;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1\n        List<List<Integer>> grid1 = Arrays.asList(\n            Arrays.asList(0, 0, 1, 0),\n            Arrays.asList(0, 1, 0, 0),\n            Arrays.asList(1, 1, 1, 1)\n        );\n        int capacity1 = 1;\n        System.out.println(solution.max_fill(grid1, capacity1)); // Output: 6\n\n        // Test case 2\n        List<List<Integer>> grid2 = Arrays.asList(\n            Arrays.asList(0, 0, 1, 1),\n            Arrays.asList(0, 0, 0, 0),\n            Arrays.asList(1, 1, 1, 1),\n            Arrays.asList(0, 1, 1, 1)\n        );\n        int capacity2 = 2;\n        System.out.println(solution.max_fill(grid2, capacity2)); // Output: 5\n\n        // Test case 3\n        List<List<Integer>> grid3 = Arrays.asList(\n            Arrays.asList(0, 0, 0),\n            Arrays.asList(0, 0, 0)\n        );\n        int capacity3 = 5;\n        System.out.println(solution.max_fill(grid3, capacity3)); // Output: 0\n    }\n}\n"}
{"task_id": "Java/71", "generation": "class Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    */\n    public double triangle_area(double a, double b, double c) {\n        // Check for valid triangle using triangle inequality theorem\n        if (a + b > c && a + c > b && b + c > a) {\n            // Calculate the semi-perimeter\n            double s = (a + b + c) / 2;\n            // Calculate the area using Heron's formula\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            // Return the area rounded to 2 decimal points\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            // Return -1 if the sides do not form a valid triangle\n            return -1;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.triangle_area(3, 4, 5)); // Output: 6.00\n        System.out.println(solution.triangle_area(1, 2, 10)); // Output: -1\n    }\n}\n"}
{"task_id": "Java/163", "generation": "class Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order. Please note that the even digits refer to even numbers less than 10.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    */\n    public List<Integer> generate_integers(int a, int b) {\n        List<Integer> evenDigits = new ArrayList<>();\n        \n        // Determine the range\n        int start = Math.min(a, b);\n        int end = Math.max(a, b);\n        \n        // Iterate through the range\n        for (int i = start; i <= end; i++) {\n            // Check if the number is an even digit (0, 2, 4, 6, 8)\n            if (i >= 0 && i < 10 && i % 2 == 0) {\n                evenDigits.add(i);\n            }\n        }\n        \n        return evenDigits;\n    }\n}\n"}
{"task_id": "Java/19", "generation": "class Solution {\n    /**\n    Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    */\n    public String sort_numbers(String numbers) {\n        // Mapping of words to their corresponding integer values\n        Map<String, Integer> wordToNumber = new HashMap<>();\n        wordToNumber.put(\"zero\", 0);\n        wordToNumber.put(\"one\", 1);\n        wordToNumber.put(\"two\", 2);\n        wordToNumber.put(\"three\", 3);\n        wordToNumber.put(\"four\", 4);\n        wordToNumber.put(\"five\", 5);\n        wordToNumber.put(\"six\", 6);\n        wordToNumber.put(\"seven\", 7);\n        wordToNumber.put(\"eight\", 8);\n        wordToNumber.put(\"nine\", 9);\n\n        // Split the input string into words\n        String[] words = numbers.split(\" \");\n        \n        // Create a list to hold the numbers\n        List<Integer> numberList = new ArrayList<>();\n        \n        // Convert words to numbers\n        for (String word : words) {\n            numberList.add(wordToNumber.get(word));\n        }\n        \n        // Sort the list of numbers\n        Collections.sort(numberList);\n        \n        // Create a list to hold the sorted words\n        List<String> sortedWords = new ArrayList<>();\n        \n        // Convert numbers back to words\n        for (Integer number : numberList) {\n            // Find the word corresponding to the number\n            for (Map.Entry<String, Integer> entry : wordToNumber.entrySet()) {\n                if (entry.getValue().equals(number)) {\n                    sortedWords.add(entry.getKey());\n                    break;\n                }\n            }\n        }\n        \n        // Join the sorted words into a single string\n        return String.join(\" \", sortedWords);\n    }\n}\n"}
{"task_id": "Java/118", "generation": "import java.util.*;\n\nclass Solution {\n    public String get_closest_vowel(String word) {\n        String vowels = \"aeiouAEIOU\";\n        String closestVowel = \"\";\n        \n        // Start from the second last character to the second character\n        for (int i = word.length() - 2; i > 0; i--) {\n            char currentChar = word.charAt(i);\n            if (vowels.indexOf(currentChar) != -1) { // Check if current character is a vowel\n                // Check if the characters before and after are consonants\n                if (Character.isLetter(word.charAt(i - 1)) && Character.isLetter(word.charAt(i + 1)) &&\n                    vowels.indexOf(word.charAt(i - 1)) == -1 && vowels.indexOf(word.charAt(i + 1)) == -1) {\n                    closestVowel = String.valueOf(currentChar);\n                    break; // Found the closest vowel, exit the loop\n                }\n            }\n        }\n        \n        return closestVowel; // Return the closest vowel or empty string if not found\n    }\n}\n"}
{"task_id": "Java/101", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> words_string(String s) {\n        // Replace commas with spaces and split the string by whitespace\n        String[] wordsArray = s.replace(\",\", \" \").split(\"\\\\s+\");\n        List<String> wordsList = new ArrayList<>();\n        \n        // Add non-empty words to the list\n        for (String word : wordsArray) {\n            if (!word.isEmpty()) {\n                wordsList.add(word);\n            }\n        }\n        \n        return wordsList;\n    }\n}\n"}
{"task_id": "Java/151", "generation": "class Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    double_the_difference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    double_the_difference(Arrays.asList(-1, -2, 0)) == 0\n    double_the_difference(Arrays.asList(9, -2)) == 81\n    double_the_difference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int double_the_difference(List<Object> lst) {\n        int sumOfSquares = 0;\n\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                if (num >= 0 && num % 2 != 0) { // Check if non-negative and odd\n                    sumOfSquares += num * num; // Add the square of the odd number\n                }\n            }\n        }\n\n        return sumOfSquares;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.double_the_difference(Arrays.asList(1, 3, 2, 0))); // Output: 10\n        System.out.println(solution.double_the_difference(Arrays.asList(-1, -2, 0))); // Output: 0\n        System.out.println(solution.double_the_difference(Arrays.asList(9, -2))); // Output: 81\n        System.out.println(solution.double_the_difference(Arrays.asList(0))); // Output: 0\n        System.out.println(solution.double_the_difference(Arrays.asList())); // Output: 0\n    }\n}\n"}
{"task_id": "Java/133", "generation": "class Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sum_squares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            // Round up to the nearest integer\n            int rounded = (int) Math.ceil(num);\n            // Square the rounded integer and add to sum\n            sum += rounded * rounded;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.sum_squares(Arrays.asList(1.0, 2.0, 3.0))); // Output: 14\n        System.out.println(solution.sum_squares(Arrays.asList(1.0, 4.0, 9.0))); // Output: 98\n        System.out.println(solution.sum_squares(Arrays.asList(1.0, 3.0, 5.0, 7.0))); // Output: 84\n        System.out.println(solution.sum_squares(Arrays.asList(1.4, 4.2, 0.0))); // Output: 29\n        System.out.println(solution.sum_squares(Arrays.asList(-2.4, 1.0, 1.0))); // Output: 6\n    }\n}\n"}
{"task_id": "Java/144", "generation": "class Solution {\n    public boolean simplify(String x, String n) {\n        // Split the fractions into numerator and denominator\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n        \n        // Parse the numerators and denominators\n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n        \n        // Calculate the resulting numerator and denominator\n        int resultNumerator = xNumerator * nNumerator;\n        int resultDenominator = xDenominator * nDenominator;\n        \n        // Check if the result is a whole number\n        return resultNumerator % resultDenominator == 0;\n    }\n}\n"}
{"task_id": "Java/158", "generation": "class Solution {\n    public String find_max(List<String> words) {\n        String maxWord = \"\";\n        int maxUniqueCount = 0;\n\n        for (String word : words) {\n            // Use a Set to find unique characters\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            int uniqueCount = uniqueChars.size();\n\n            // Check if we found a new maximum or a lexicographically smaller word\n            if (uniqueCount > maxUniqueCount || \n                (uniqueCount == maxUniqueCount && word.compareTo(maxWord) < 0)) {\n                maxUniqueCount = uniqueCount;\n                maxWord = word;\n            }\n        }\n\n        return maxWord;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.find_max(Arrays.asList(\"name\", \"of\", \"string\"))); // Output: \"string\"\n        System.out.println(sol.find_max(Arrays.asList(\"name\", \"enam\", \"game\"))); // Output: \"enam\"\n        System.out.println(sol.find_max(Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\"))); // Output: \"aaaaaaa\"\n    }\n}\n"}
{"task_id": "Java/63", "generation": "class Solution {\n    public int fibfib(int n) {\n        // Handle base cases\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n\n        // Create an array to store fibfib values\n        int[] fibfib = new int[n + 1];\n        fibfib[0] = 0;\n        fibfib[1] = 0;\n        fibfib[2] = 1;\n\n        // Fill the array using the defined recurrence relation\n        for (int i = 3; i <= n; i++) {\n            fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n        }\n\n        // Return the n-th fibfib number\n        return fibfib[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fibfib(1)); // Output: 0\n        System.out.println(solution.fibfib(5)); // Output: 4\n        System.out.println(solution.fibfib(8)); // Output: 24\n    }\n}\n"}
{"task_id": "Java/37", "generation": "class Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indices, while its values at the even indices are equal\n    to the values of the even indices of l, but sorted.\n    >>> sort_even(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sort_even(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n    */\n    public List<Integer> sort_even(List<Integer> l) {\n        // Step 1: Extract even indexed values\n        List<Integer> evenValues = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 2) {\n            evenValues.add(l.get(i));\n        }\n\n        // Step 2: Sort the even indexed values\n        Collections.sort(evenValues);\n\n        // Step 3: Create the result list\n        List<Integer> result = new ArrayList<>(l); // Start with a copy of the original list\n        for (int i = 0, j = 0; i < result.size(); i += 2, j++) {\n            result.set(i, evenValues.get(j)); // Replace even indices with sorted values\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sort_even(Arrays.asList(1, 2, 3))); // Output: [1, 2, 3]\n        System.out.println(solution.sort_even(Arrays.asList(5, 6, 3, 4))); // Output: [3, 6, 5, 4]\n    }\n}\n"}
{"task_id": "Java/159", "generation": "class Solution {\n    public List<Integer> eat(int number, int need, int remaining) {\n        // Total carrots needed to eat\n        int totalNeeded = number + need;\n        \n        // Determine how many carrots we can actually eat\n        int canEat = Math.min(need, remaining);\n        \n        // Calculate total eaten\n        int totalEaten = number + canEat;\n        \n        // Calculate remaining carrots after eating\n        int remainingCarrots = remaining - canEat;\n        \n        // Prepare the result as a list\n        List<Integer> result = new ArrayList<>();\n        result.add(totalEaten);\n        result.add(remainingCarrots);\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/52", "generation": "class Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> below_threshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n    */\n    public boolean below_threshold(List<Integer> l, int t) {\n        for (int num : l) {\n            if (num >= t) {\n                return false; // Found a number that is not below the threshold\n            }\n        }\n        return true; // All numbers are below the threshold\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.below_threshold(Arrays.asList(1, 2, 4, 10), 100)); // true\n        System.out.println(solution.below_threshold(Arrays.asList(1, 20, 4, 10), 5)); // false\n    }\n}\n"}
{"task_id": "Java/137", "generation": "class Solution {\n    public Optional<Object> compare_one(Object a, Object b) {\n        Double valueA = parseToDouble(a);\n        Double valueB = parseToDouble(b);\n\n        if (valueA == null || valueB == null) {\n            return Optional.empty(); // If parsing fails, return empty\n        }\n\n        if (valueA.equals(valueB)) {\n            return Optional.empty(); // Return empty if values are equal\n        }\n\n        // Return the larger value in its original type\n        if (valueA > valueB) {\n            return Optional.of(a);\n        } else {\n            return Optional.of(b);\n        }\n    }\n\n    private Double parseToDouble(Object obj) {\n        if (obj instanceof Number) {\n            return ((Number) obj).doubleValue();\n        } else if (obj instanceof String) {\n            String str = (String) obj;\n            str = str.replace(',', '.'); // Replace comma with dot for parsing\n            try {\n                return Double.parseDouble(str);\n            } catch (NumberFormatException e) {\n                return null; // Return null if parsing fails\n            }\n        }\n        return null; // Return null for unsupported types\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.compare_one(1, 2.5)); // Optional[2.5]\n        System.out.println(solution.compare_one(1, \"2,3\")); // Optional[2,3]\n        System.out.println(solution.compare_one(\"5,1\", \"6\")); // Optional[6]\n        System.out.println(solution.compare_one(\"1\", 1)); // Optional.empty\n    }\n}\n"}
{"task_id": "Java/154", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean cycpattern_check(String a, String b) {\n        if (b.length() > a.length()) {\n            return false;\n        }\n        // Create a new string by concatenating 'b' with itself\n        String bRotations = b + b;\n        // Check if 'a' is a substring of 'bRotations'\n        return bRotations.contains(a);\n    }\n}\n"}
{"task_id": "Java/44", "generation": "class Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\n    >>> change_base(7, 2)\n    \"111\"\n    */\n    public String change_base(int x, int base) {\n        if (x == 0) {\n            return \"0\"; // Handle the case for 0 explicitly\n        }\n        \n        StringBuilder result = new StringBuilder();\n        \n        while (x > 0) {\n            int remainder = x % base; // Get the remainder\n            result.append(remainder); // Append the remainder to the result\n            x = x / base; // Update x by dividing it by the base\n        }\n        \n        // The digits are in reverse order, so we need to reverse the result\n        return result.reverse().toString();\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.change_base(8, 3)); // Output: \"22\"\n        System.out.println(sol.change_base(8, 2)); // Output: \"1000\"\n        System.out.println(sol.change_base(7, 2)); // Output: \"111\"\n    }\n}\n"}
{"task_id": "Java/112", "generation": "class Solution {\n    public List<Object> reverse_delete(String s, String c) {\n        // Create a set of characters from string c for quick lookup\n        Set<Character> charsToDelete = new HashSet<>();\n        for (char ch : c.toCharArray()) {\n            charsToDelete.add(ch);\n        }\n\n        // Build the resulting string by excluding characters in charsToDelete\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!charsToDelete.contains(ch)) {\n                result.append(ch);\n            }\n        }\n\n        // Convert StringBuilder to String\n        String resultString = result.toString();\n\n        // Check if the result string is a palindrome\n        boolean isPalindrome = resultString.equals(new StringBuilder(resultString).reverse().toString());\n\n        // Return the result as a list\n        return Arrays.asList(resultString, isPalindrome);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.reverse_delete(\"abcde\", \"ae\")); // Output: [\"bcd\", false]\n        System.out.println(solution.reverse_delete(\"abcdef\", \"b\")); // Output: [\"acdef\", false]\n        System.out.println(solution.reverse_delete(\"abcdedcba\", \"ab\")); // Output: [\"cdedc\", true]\n    }\n}\n"}
{"task_id": "Java/87", "generation": "class Solution {\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        List<List<Integer>> coordinates = new ArrayList<>();\n\n        // Iterate through each row\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            // Iterate through each element in the row\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    // If the element matches x, add its coordinates\n                    coordinates.add(Arrays.asList(i, j));\n                }\n            }\n        }\n\n        // Sort the coordinates by row (ascending) and by column (descending)\n        coordinates.sort((a, b) -> {\n            if (!a.get(0).equals(b.get(0))) {\n                return a.get(0) - b.get(0); // Sort by row\n            } else {\n                return b.get(1) - a.get(1); // Sort by column (descending)\n            }\n        });\n\n        return coordinates;\n    }\n}\n"}
{"task_id": "Java/113", "generation": "class Solution {\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int oddCount = 0;\n            \n            // Count odd digits in the current string\n            for (char ch : str.toCharArray()) {\n                if (ch % 2 != 0) { // Check if the character is an odd digit\n                    oddCount++;\n                }\n            }\n            \n            // Create the output string with the odd count\n            String output = String.format(\"the number of odd elements %dn the str%dn %d of the %dnput.\", \n                                           oddCount, oddCount, oddCount, oddCount);\n            result.add(output);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.odd_count(Arrays.asList(\"1234567\"))); // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n        System.out.println(solution.odd_count(Arrays.asList(\"3\", \"11111111\"))); // [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    }\n}\n"}
{"task_id": "Java/29", "generation": "class Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix(List.of(), \"a\")\n    []\n    >>> filter_by_prefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n    */\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/6", "generation": "class Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n    */\n    public List<Integer> parse_nested_parens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        String[] groups = paren_string.split(\" \"); // Split the input string by spaces\n\n        for (String group : groups) {\n            int maxDepth = 0; // To track the maximum depth\n            int currentDepth = 0; // To track the current depth\n\n            for (char ch : group.toCharArray()) {\n                if (ch == '(') {\n                    currentDepth++; // Increase depth for '('\n                    maxDepth = Math.max(maxDepth, currentDepth); // Update max depth\n                } else if (ch == ')') {\n                    currentDepth--; // Decrease depth for ')'\n                }\n            }\n\n            result.add(maxDepth); // Add the maximum depth for the current group to the result\n        }\n\n        return result; // Return the list of maximum depths\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.parse_nested_parens(\"(()()) ((())) () ((())()())\")); // Output: [2, 3, 1, 3]\n    }\n}\n"}
{"task_id": "Java/46", "generation": "class Solution {\n    public int fib4(int n) {\n        // Base cases\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n == 3) return 0;\n\n        // Array to store the last four values\n        int[] fib = new int[4];\n        fib[0] = 0; // fib4(0)\n        fib[1] = 0; // fib4(1)\n        fib[2] = 2; // fib4(2)\n        fib[3] = 0; // fib4(3)\n\n        // Compute fib4(n) iteratively\n        for (int i = 4; i <= n; i++) {\n            int nextFib = fib[0] + fib[1] + fib[2] + fib[3];\n            // Update the array to hold the last four values\n            fib[0] = fib[1];\n            fib[1] = fib[2];\n            fib[2] = fib[3];\n            fib[3] = nextFib;\n        }\n\n        // The result for fib4(n) will be in fib[3]\n        return fib[3];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fib4(5)); // Output: 4\n        System.out.println(solution.fib4(6)); // Output: 8\n        System.out.println(solution.fib4(7)); // Output: 14\n    }\n}\n"}
{"task_id": "Java/16", "generation": "class Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    */\n    public int count_distinct_characters(String string) {\n        // Create a HashSet to store distinct characters\n        HashSet<Character> distinctCharacters = new HashSet<>();\n        \n        // Convert the string to lower case to ensure case insensitivity\n        for (char c : string.toLowerCase().toCharArray()) {\n            // Add each character to the HashSet\n            distinctCharacters.add(c);\n        }\n        \n        // The size of the HashSet is the number of distinct characters\n        return distinctCharacters.size();\n    }\n\n    // Example usage\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.count_distinct_characters(\"xyzXYZ\")); // Output: 3\n        System.out.println(solution.count_distinct_characters(\"Jerry\"));  // Output: 4\n    }\n}\n"}
{"task_id": "Java/99", "generation": "class Solution {\n    public int closest_integer(String value) {\n        // Parse the string to a double\n        double number = Double.parseDouble(value);\n        \n        // Get the floor and ceiling of the number\n        int floor = (int) Math.floor(number);\n        int ceiling = (int) Math.ceil(number);\n        \n        // Check the distance to the floor and ceiling\n        double distanceToFloor = Math.abs(number - floor);\n        double distanceToCeiling = Math.abs(number - ceiling);\n        \n        // If the distances are equal, round away from zero\n        if (distanceToFloor == distanceToCeiling) {\n            if (number > 0) {\n                return ceiling; // Round up for positive numbers\n            } else {\n                return floor; // Round down for negative numbers\n            }\n        }\n        \n        // Return the closest integer\n        return (distanceToFloor < distanceToCeiling) ? floor : ceiling;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.closest_integer(\"10\"));      // Output: 10\n        System.out.println(solution.closest_integer(\"15.3\"));    // Output: 15\n        System.out.println(solution.closest_integer(\"14.5\"));    // Output: 15\n        System.out.println(solution.closest_integer(\"-14.5\"));   // Output: -15\n        System.out.println(solution.closest_integer(\"0.5\"));     // Output: 1\n        System.out.println(solution.closest_integer(\"-0.5\"));    // Output: -1\n    }\n}\n"}
{"task_id": "Java/122", "generation": "class Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int add_elements(List<Integer> arr, int k) {\n        int sum = 0;\n        \n        // Iterate through the first k elements\n        for (int i = 0; i < k; i++) {\n            int num = arr.get(i);\n            // Check if the number has at most two digits\n            if (num >= -99 && num <= 99) {\n                sum += num;\n            }\n        }\n        \n        return sum;\n    }\n}\n"}
{"task_id": "Java/53", "generation": "class Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    */\n    public int add(int x, int y) {\n        return x + y;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(\"add(2, 3) = \" + solution.add(2, 3)); // Should print 5\n        System.out.println(\"add(5, 7) = \" + solution.add(5, 7)); // Should print 12\n    }\n}\n"}
{"task_id": "Java/162", "generation": "class Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n    */\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text == null || text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        // Create a MessageDigest instance for MD5\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        \n        // Compute the hash\n        byte[] messageDigest = md.digest(text.getBytes());\n        \n        // Convert byte array to hexadecimal string\n        StringBuilder hexString = new StringBuilder();\n        for (byte b : messageDigest) {\n            String hex = Integer.toHexString(0xff & b);\n            if (hex.length() == 1) {\n                hexString.append('0');\n            }\n            hexString.append(hex);\n        }\n        \n        return Optional.of(hexString.toString());\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        try {\n            Optional<String> hash = solution.string_to_md5(\"Hello world\");\n            hash.ifPresent(System.out::println); // Should print: 3e25960a79dbc69b674cd4ec67a72c62\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n    }\n}\n"}
{"task_id": "Java/58", "generation": "class Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n    */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        // Convert lists to sets to remove duplicates\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        \n        // Retain only the common elements\n        set1.retainAll(set2);\n        \n        // Convert the set back to a list\n        List<Integer> commonList = new ArrayList<>(set1);\n        \n        // Sort the list\n        Collections.sort(commonList);\n        \n        return commonList;\n    }\n}\n"}
{"task_id": "Java/73", "generation": "class Solution {\n    public int smallest_change(List<Integer> arr) {\n        int left = 0;\n        int right = arr.size() - 1;\n        int changes = 0;\n\n        while (left < right) {\n            if (!arr.get(left).equals(arr.get(right))) {\n                changes++; // We need to change one of the elements\n            }\n            left++;\n            right--;\n        }\n\n        return changes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.smallest_change(Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6))); // Output: 4\n        System.out.println(solution.smallest_change(Arrays.asList(1, 2, 3, 4, 3, 2, 2))); // Output: 1\n        System.out.println(solution.smallest_change(Arrays.asList(1, 2, 3, 2, 1))); // Output: 0\n    }\n}\n"}
{"task_id": "Java/150", "generation": "class Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    */\n    public int x_or_y(int n, int x, int y) {\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    // Helper method to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false; // 0 and 1 are not prime numbers\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false; // Found a divisor, not prime\n            }\n        }\n        return true; // No divisors found, it's prime\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.x_or_y(7, 34, 12)); // Output: 34\n        System.out.println(solution.x_or_y(15, 8, 5)); // Output: 5\n    }\n}\n"}
{"task_id": "Java/54", "generation": "class Solution {\n    /**\n    Check if two words have the same kind of characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    */\n    public boolean same_chars(String s0, String s1) {\n        Set<Character> set1 = new HashSet<>();\n        Set<Character> set2 = new HashSet<>();\n        \n        // Add characters of the first string to set1\n        for (char c : s0.toCharArray()) {\n            set1.add(c);\n        }\n        \n        // Add characters of the second string to set2\n        for (char c : s1.toCharArray()) {\n            set2.add(c);\n        }\n        \n        // Compare the two sets\n        return set1.equals(set2);\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // true\n        System.out.println(solution.same_chars(\"abcd\", \"dddddddabc\")); // true\n        System.out.println(solution.same_chars(\"dddddddabc\", \"abcd\")); // true\n        System.out.println(solution.same_chars(\"eabcd\", \"dddddddabc\")); // false\n        System.out.println(solution.same_chars(\"abcd\", \"dddddddabce\")); // false\n        System.out.println(solution.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // false\n    }\n}\n"}
{"task_id": "Java/108", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int count_nums(List<Integer> arr) {\n        int count = 0;\n        \n        for (int num : arr) {\n            if (sumOfDigits(num) > 0) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n    \n    private int sumOfDigits(int n) {\n        int sum = 0;\n        boolean isNegative = n < 0;\n        n = Math.abs(n);\n        \n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        \n        return isNegative ? -sum : sum;\n    }\n}\n"}
{"task_id": "Java/20", "generation": "class Solution {\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        // Step 1: Sort the list\n        Collections.sort(numbers);\n        \n        // Step 2: Initialize variables to track the closest pair\n        double minDiff = Double.MAX_VALUE;\n        List<Double> closestPair = new ArrayList<>();\n        \n        // Step 3: Iterate through the sorted list to find the closest pair\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = numbers.get(i + 1) - numbers.get(i);\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair.clear();\n                closestPair.add(numbers.get(i));\n                closestPair.add(numbers.get(i + 1));\n            }\n        }\n        \n        // Step 4: Return the closest pair\n        return closestPair;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))); // Output: [2.0, 2.2]\n        System.out.println(solution.find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))); // Output: [2.0, 2.0]\n    }\n}\n"}
{"task_id": "Java/90", "generation": "class Solution {\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        // Use a TreeSet to store unique elements in sorted order\n        TreeSet<Integer> uniqueElements = new TreeSet<>(lst);\n        \n        // Check if there are at least two unique elements\n        if (uniqueElements.size() < 2) {\n            return Optional.empty();\n        }\n        \n        // Get the second smallest element\n        Iterator<Integer> iterator = uniqueElements.iterator();\n        iterator.next(); // Skip the smallest element\n        return Optional.of(iterator.next()); // Return the second smallest element\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.next_smallest(Arrays.asList(1, 2, 3, 4, 5))); // Optional[2]\n        System.out.println(solution.next_smallest(Arrays.asList(5, 1, 4, 3, 2))); // Optional[2]\n        System.out.println(solution.next_smallest(Arrays.asList())); // Optional.empty\n        System.out.println(solution.next_smallest(Arrays.asList(1, 1))); // Optional.empty\n    }\n}\n"}
{"task_id": "Java/131", "generation": "class Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    */\n    public int digits(int n) {\n        int product = 1;\n        boolean hasOdd = false;\n\n        while (n > 0) {\n            int digit = n % 10; // Get the last digit\n            if (digit % 2 != 0) { // Check if the digit is odd\n                product *= digit; // Multiply to the product\n                hasOdd = true; // Mark that we found an odd digit\n            }\n            n /= 10; // Remove the last digit\n        }\n\n        return hasOdd ? product : 0; // Return product or 0 if no odd digits\n    }\n}\n"}
{"task_id": "Java/160", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        int result = operand.get(0); // Initialize result with the first operand\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int nextOperand = operand.get(i + 1); // Get the next operand\n            \n            switch (op) {\n                case \"+\":\n                    result += nextOperand;\n                    break;\n                case \"-\":\n                    result -= nextOperand;\n                    break;\n                case \"*\":\n                    result *= nextOperand;\n                    break;\n                case \"/\":\n                    result /= nextOperand; // Floor division\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, nextOperand); // Exponentiation\n                    break;\n            }\n        }\n        return result; // Return the final evaluated result\n    }\n}\n"}
{"task_id": "Java/17", "generation": "class Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    note last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quarter note, lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parse_music(String string) {\n        // Create a list to store the beats\n        List<Integer> beats = new ArrayList<>();\n        \n        // Split the input string by spaces to get individual notes\n        String[] notes = string.split(\" \");\n        \n        // Map each note to its corresponding beat duration\n        Map<String, Integer> noteToBeats = new HashMap<>();\n        noteToBeats.put(\"o\", 4);   // Whole note\n        noteToBeats.put(\"o|\", 2);  // Half note\n        noteToBeats.put(\".|\", 1);  // Quarter note\n        \n        // Iterate through the notes and convert them to beats\n        for (String note : notes) {\n            if (noteToBeats.containsKey(note)) {\n                beats.add(noteToBeats.get(note));\n            }\n        }\n        \n        return beats;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.parse_music(\"o o| .| o| o| .| .| .| .| o o\")); // Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    }\n}\n"}
{"task_id": "Java/98", "generation": "class Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper(\"aBCdEf\") returns 1\n    count_upper(\"abcdefg\") returns 0\n    count_upper(\"dBBE\") returns 0\n    */    \n    public int count_upper(String s) {\n        int count = 0;\n        // Define a set of uppercase vowels\n        Set<Character> uppercaseVowels = new HashSet<>(Arrays.asList('A', 'E', 'I', 'O', 'U'));\n\n        // Iterate through the string, checking only even indices\n        for (int i = 0; i < s.length(); i += 2) {\n            char currentChar = s.charAt(i);\n            // Check if the character is an uppercase vowel\n            if (uppercaseVowels.contains(currentChar)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/65", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String circular_shift(int x, int shift) {\n        String str_x = Integer.toString(x);\n        int num_digits = str_x.length();\n        \n        // If shift is greater than the number of digits, return reversed string\n        if (shift > num_digits) {\n            return new StringBuilder(str_x).reverse().toString();\n        }\n        \n        // Calculate effective shift\n        int effective_shift = shift % num_digits;\n        \n        // Perform circular shift\n        String shifted_str = str_x.substring(num_digits - effective_shift) + \n                              str_x.substring(0, num_digits - effective_shift);\n        \n        return shifted_str;\n    }\n}\n"}
{"task_id": "Java/8", "generation": "class Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product(List.of())\n    [0, 1]\n    >>> sum_product(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sum_product(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n\n        // Check if the list is empty\n        if (numbers.isEmpty()) {\n            return Arrays.asList(sum, product);\n        }\n\n        // Calculate sum and product\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n\n        return Arrays.asList(sum, product);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.sum_product(List.of())); // Output: [0, 1]\n        System.out.println(solution.sum_product(Arrays.asList(1, 2, 3, 4))); // Output: [10, 24]\n        System.out.println(solution.sum_product(Arrays.asList(-1, -2, -3))); // Output: [-6, -6]\n        System.out.println(solution.sum_product(Arrays.asList(0, 1, 2))); // Output: [3, 0]\n    }\n}\n"}
{"task_id": "Java/49", "generation": "class Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    */\n    public int modp(int n, int p) {\n        if (p <= 1) {\n            throw new IllegalArgumentException(\"p must be greater than 1\");\n        }\n        \n        long result = 1; // Use long to prevent overflow\n        long base = 2;   // Base is 2\n        long exponent = n; // Exponent is n\n        \n        // Exponentiation by squaring\n        while (exponent > 0) {\n            if ((exponent % 2) == 1) { // If exponent is odd\n                result = (result * base) % p;\n            }\n            base = (base * base) % p; // Square the base\n            exponent /= 2; // Divide the exponent by 2\n        }\n        \n        return (int) result; // Cast result back to int\n    }\n    \n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.modp(3, 5));    // Output: 3\n        System.out.println(sol.modp(1101, 101)); // Output: 2\n        System.out.println(sol.modp(0, 101));    // Output: 1\n        System.out.println(sol.modp(3, 11));     // Output: 8\n        System.out.println(sol.modp(100, 101));  // Output: 1\n    }\n}\n"}
{"task_id": "Java/153", "generation": "class Solution {\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        String strongestExtension = \"\";\n        int maxStrength = Integer.MIN_VALUE;\n\n        for (String extension : extensions) {\n            int capCount = 0;\n            int smCount = 0;\n\n            // Count uppercase and lowercase letters\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smCount++;\n                }\n            }\n\n            // Calculate strength\n            int strength = capCount - smCount;\n\n            // Update strongest extension if this one is stronger\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        // Return the result in the required format\n        return class_name + \".\" + strongestExtension;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String className = \"Slices\";\n        List<String> extensions = Arrays.asList(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\");\n        System.out.println(solution.Strongest_Extension(className, extensions)); // Output: \"Slices.SErviNGSliCes\"\n    }\n}\n"}
{"task_id": "Java/96", "generation": "class Solution {\n    public List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<>();\n        \n        // Check for primes less than n\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        \n        return primes;\n    }\n    \n    // Helper function to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) return false; // 0 and 1 are not prime numbers\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false; // Found a divisor, not prime\n            }\n        }\n        return true; // No divisors found, it's prime\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.count_up_to(5));  // Output: [2, 3]\n        System.out.println(solution.count_up_to(11)); // Output: [2, 3, 5, 7]\n        System.out.println(solution.count_up_to(0));  // Output: []\n        System.out.println(solution.count_up_to(20)); // Output: [2, 3, 5, 7, 11, 13, 17, 19]\n        System.out.println(solution.count_up_to(1));  // Output: []\n        System.out.println(solution.count_up_to(18)); // Output: [2, 3, 5, 7, 11, 13, 17]\n    }\n}\n"}
{"task_id": "Java/64", "generation": "class Solution {\n    public int vowels_count(String s) {\n        // Convert the string to lower case to handle case insensitivity\n        s = s.toLowerCase();\n        int count = 0;\n        \n        // Define the vowels\n        String vowels = \"aeiou\";\n        \n        // Check each character in the string\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            // Check if the character is a vowel\n            if (vowels.indexOf(c) != -1) {\n                count++;\n            }\n            // Check if the character is 'y' and it's the last character in the string\n            if (c == 'y' && i == s.length() - 1) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.vowels_count(\"abcde\")); // Output: 2\n        System.out.println(solution.vowels_count(\"ACEDY\")); // Output: 3\n        System.out.println(solution.vowels_count(\"happy\")); // Output: 2\n        System.out.println(solution.vowels_count(\"sky\")); // Output: 1\n        System.out.println(solution.vowels_count(\"rhythm\")); // Output: 0\n    }\n}\n"}
{"task_id": "Java/102", "generation": "class Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    */\n    public int choose_num(int x, int y) {\n        // Check if the range is valid\n        if (x > y) {\n            return -1; // Invalid range\n        }\n        \n        // Find the largest even number in the range [x, y]\n        // Start from y and check downwards\n        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                return i; // Return the first even number found\n            }\n        }\n        \n        // If no even number was found\n        return -1;\n    }\n}\n"}
{"task_id": "Java/88", "generation": "class Solution {\n    public List<Integer> sort_array(List<Integer> array) {\n        // Step 1: Check for empty array\n        if (array.isEmpty()) {\n            return new ArrayList<>();\n        }\n        \n        // Step 2: Check for single element\n        if (array.size() == 1) {\n            return new ArrayList<>(array);\n        }\n        \n        // Step 3: Calculate the sum of the first and last elements\n        int firstElement = array.get(0);\n        int lastElement = array.get(array.size() - 1);\n        int sum = firstElement + lastElement;\n        \n        // Step 4: Create a copy of the array to sort\n        List<Integer> sortedArray = new ArrayList<>(array);\n        \n        // Step 5: Sort based on the sum\n        if (sum % 2 == 0) {\n            // Even sum: sort in descending order\n            Collections.sort(sortedArray, Collections.reverseOrder());\n        } else {\n            // Odd sum: sort in ascending order\n            Collections.sort(sortedArray);\n        }\n        \n        // Step 6: Return the sorted array\n        return sortedArray;\n    }\n}\n"}
{"task_id": "Java/146", "generation": "class Solution {\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n\n        for (int num : nums) {\n            // Check if the number is greater than 10\n            if (num > 10) {\n                // Get the absolute value of the number to handle negative numbers\n                int absNum = Math.abs(num);\n                \n                // Convert the number to a string to easily access first and last digits\n                String numStr = Integer.toString(absNum);\n                \n                // Get the first and last digits\n                char firstDigit = numStr.charAt(0);\n                char lastDigit = numStr.charAt(numStr.length() - 1);\n                \n                // Check if both first and last digits are odd\n                if (isOdd(firstDigit) && isOdd(lastDigit)) {\n                    count++;\n                }\n            }\n        }\n        \n        return count;\n    }\n\n    // Helper method to check if a character representing a digit is odd\n    private boolean isOdd(char digit) {\n        return (digit == '1' || digit == '3' || digit == '5' || digit == '7' || digit == '9');\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.specialFilter(Arrays.asList(15, -73, 14, -15))); // Output: 1\n        System.out.println(solution.specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109))); // Output: 2\n    }\n}\n"}
{"task_id": "Java/30", "generation": "class Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> get_positive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> get_positive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n    */\n    public List<Integer> get_positive(List<Integer> l) {\n        // Use streams to filter the list for positive numbers\n        return l.stream()\n                .filter(num -> num > 0) // Keep only positive numbers\n                .collect(Collectors.toList()); // Collect the results into a list\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.get_positive(Arrays.asList(-1, 2, -4, 5, 6))); // Output: [2, 5, 6]\n        System.out.println(solution.get_positive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))); // Output: [5, 3, 2, 3, 9, 123, 1]\n    }\n}\n"}
{"task_id": "Java/97", "generation": "class Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        // Get the unit digits\n        int unitDigitA = Math.abs(a) % 10; // Use abs to handle negative numbers\n        int unitDigitB = Math.abs(b) % 10; // Use abs to handle negative numbers\n        \n        // Calculate the product of the unit digits\n        return unitDigitA * unitDigitB;\n    }\n}\n"}
{"task_id": "Java/95", "generation": "class Solution {\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        // Check if the map is empty\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        boolean allLowerCase = true;\n        boolean allUpperCase = true;\n\n        for (Object key : dict.keySet()) {\n            // Check if the key is a string\n            if (!(key instanceof String)) {\n                return false;\n            }\n\n            String strKey = (String) key;\n\n            // Check if the key is in lower case\n            if (!strKey.equals(strKey.toLowerCase())) {\n                allLowerCase = false;\n            }\n\n            // Check if the key is in upper case\n            if (!strKey.equals(strKey.toUpperCase())) {\n                allUpperCase = false;\n            }\n        }\n\n        // Return true if all keys are either lower case or upper case\n        return allLowerCase || allUpperCase;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.check_dict_case(Map.of(\"a\", \"apple\", \"b\", \"banana\"))); // should return true\n        System.out.println(solution.check_dict_case(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"banana\"))); // should return false\n        System.out.println(solution.check_dict_case(Map.of(8, \"banana\", \"a\", \"apple\"))); // should return false\n        System.out.println(solution.check_dict_case(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\"))); // should return false\n        System.out.println(solution.check_dict_case(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))); // should return true\n    }\n}\n"}
{"task_id": "Java/10", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n     */\n    public String make_palindrome(String string) {\n        if (string.isEmpty()) {\n            return \"\";\n        }\n\n        // Find the longest palindromic suffix\n        for (int i = 0; i < string.length(); i++) {\n            if (isPalindrome(string.substring(i))) {\n                // Append the reverse of the prefix to the end of the string\n                String prefix = string.substring(0, i);\n                StringBuilder reversedPrefix = new StringBuilder(prefix).reverse();\n                return string + reversedPrefix.toString();\n            }\n        }\n\n        // In case no palindromic suffix is found\n        StringBuilder reversedString = new StringBuilder(string).reverse();\n        return string + reversedString.toString();\n    }\n}\n"}
{"task_id": "Java/109", "generation": "class Solution {\n    public boolean move_one_ball(List<Integer> arr) {\n        // If the array is empty, return true\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        int countBreaks = 0;\n        int n = arr.size();\n\n        // Count the number of breaks in the array\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i) > arr.get((i + 1) % n)) {\n                countBreaks++;\n            }\n        }\n\n        // If there is more than one break, return false\n        return countBreaks <= 1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.move_one_ball(Arrays.asList(3, 4, 5, 1, 2))); // true\n        System.out.println(solution.move_one_ball(Arrays.asList(3, 5, 4, 1, 2))); // false\n    }\n}\n"}
{"task_id": "Java/4", "generation": "class Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n    */\n    public double mean_absolute_deviation(List<Double> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            throw new IllegalArgumentException(\"The list of numbers cannot be null or empty.\");\n        }\n\n        // Step 1: Calculate the mean\n        double sum = 0.0;\n        for (double number : numbers) {\n            sum += number;\n        }\n        double mean = sum / numbers.size();\n\n        // Step 2: Calculate the absolute differences from the mean\n        double madSum = 0.0;\n        for (double number : numbers) {\n            madSum += Math.abs(number - mean);\n        }\n\n        // Step 3: Calculate the Mean Absolute Deviation\n        return madSum / numbers.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0);\n        double mad = solution.mean_absolute_deviation(numbers);\n        System.out.println(\"Mean Absolute Deviation: \" + mad); // Output: 1.0\n    }\n}\n"}
{"task_id": "Java/77", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean iscube(int a) {\n        if (a < 0) {\n            a = -a; // Take the absolute value for negative numbers\n        }\n        int cubeRoot = (int) Math.round(Math.pow(a, 1.0 / 3)); // Calculate the cube root and round it\n        return cubeRoot * cubeRoot * cubeRoot == a; // Check if the cube of the rounded root equals the original number\n    }\n}\n"}
{"task_id": "Java/57", "generation": "class Solution {\n    /**\n    Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n    */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() < 2) {\n            return true; // A list with 0 or 1 element is trivially monotonic\n        }\n\n        boolean increasing = true;\n        boolean decreasing = true;\n\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false; // Found an increase, not decreasing\n            } else if (l.get(i) < l.get(i - 1)) {\n                increasing = false; // Found a decrease, not increasing\n            }\n        }\n\n        return increasing || decreasing; // Return true if either is true\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.monotonic(Arrays.asList(1, 2, 4, 20))); // true\n        System.out.println(solution.monotonic(Arrays.asList(1, 20, 4, 10))); // false\n        System.out.println(solution.monotonic(Arrays.asList(4, 1, 0, -10))); // true\n    }\n}\n"}
{"task_id": "Java/142", "generation": "class Solution {\n    public int sum_squares(List<Integer> lst) {\n        int sum = 0;\n\n        for (int i = 0; i < lst.size(); i++) {\n            int value = lst.get(i);\n            if (i % 3 == 0) {\n                // Square the value if index is a multiple of 3\n                sum += value * value;\n            } else if (i % 4 == 0) {\n                // Cube the value if index is a multiple of 4 and not a multiple of 3\n                sum += value * value * value;\n            } else {\n                // Add the value as is if index is not a multiple of 3 or 4\n                sum += value;\n            }\n        }\n\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.sum_squares(Arrays.asList(1, 2, 3))); // Output: 6\n        System.out.println(solution.sum_squares(Arrays.asList())); // Output: 0\n        System.out.println(solution.sum_squares(Arrays.asList(-1, -5, 2, -1, -5))); // Output: -126\n    }\n}\n"}
{"task_id": "Java/121", "generation": "class Solution {\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        \n        // Iterate through the list\n        for (int i = 0; i < lst.size(); i++) {\n            // Check if the index is even\n            if (i % 2 == 0) {\n                // Check if the element is odd\n                if (lst.get(i) % 2 != 0) {\n                    sum += lst.get(i);\n                }\n            }\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.solution(Arrays.asList(5, 8, 7, 1))); // Output: 12\n        System.out.println(sol.solution(Arrays.asList(3, 3, 3, 3, 3))); // Output: 9\n        System.out.println(sol.solution(Arrays.asList(30, 13, 24, 321))); // Output: 0\n    }\n}\n"}
{"task_id": "Java/23", "generation": "class Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n    */\n    public int strlen(String string) {\n        // Use the length() method of the String class to get the length\n        return string.length();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.strlen(\"\"));      // Output: 0\n        System.out.println(solution.strlen(\"abc\"));   // Output: 3\n        System.out.println(solution.strlen(\"Hello\")); // Output: 5\n        System.out.println(solution.strlen(\"Java\"));  // Output: 4\n    }\n}\n"}
{"task_id": "Java/80", "generation": "class Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    For example:\n    is_happy(a) => false\n    is_happy(aa) => false\n    is_happy(abcd) => true\n    is_happy(aabb) => false\n    is_happy(adb) => true\n    is_happy(xyy) => false\n    */\n    public boolean is_happy(String s) {\n        // Check if the length of the string is at least 3\n        if (s.length() < 3) {\n            return false;\n        }\n\n        // Iterate through the string and check every 3 consecutive characters\n        for (int i = 0; i <= s.length() - 3; i++) {\n            // Get the three consecutive characters\n            char first = s.charAt(i);\n            char second = s.charAt(i + 1);\n            char third = s.charAt(i + 2);\n\n            // Check if all three characters are distinct\n            if (first == second || first == third || second == third) {\n                return false; // Not happy if any two characters are the same\n            }\n        }\n\n        // If we passed all checks, the string is happy\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.is_happy(\"a\"));      // false\n        System.out.println(solution.is_happy(\"aa\"));     // false\n        System.out.println(solution.is_happy(\"abcd\"));   // true\n        System.out.println(solution.is_happy(\"aabb\"));   // false\n        System.out.println(solution.is_happy(\"adb\"));    // true\n        System.out.println(solution.is_happy(\"xyy\"));    // false\n    }\n}\n"}
{"task_id": "Java/132", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean is_nested(String string) {\n        Stack<Character> stack = new Stack<>();\n        boolean nested = false;\n\n        for (char ch : string.toCharArray()) {\n            if (ch == '[') {\n                stack.push(ch);\n                if (stack.size() > 1) {  // More than one opening bracket means nested\n                    nested = true;\n                }\n            } else if (ch == ']') {\n                if (!stack.isEmpty()) {\n                    stack.pop();\n                } else {\n                    return false;  // Unmatched closing bracket\n                }\n            }\n        }\n\n        return nested && stack.isEmpty();  // Must be nested and all brackets must be matched\n    }\n}\n"}
{"task_id": "Java/66", "generation": "class Solution {\n    public int digitSum(String s) {\n        int sum = 0; // Initialize sum to 0\n        \n        // Iterate through each character in the string\n        for (char c : s.toCharArray()) {\n            // Check if the character is an uppercase letter\n            if (Character.isUpperCase(c)) {\n                sum += (int) c; // Add the ASCII value of the uppercase character to the sum\n            }\n        }\n        \n        return sum; // Return the final sum\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.digitSum(\"\")); // Output: 0\n        System.out.println(solution.digitSum(\"abAB\")); // Output: 131\n        System.out.println(solution.digitSum(\"abcCd\")); // Output: 67\n        System.out.println(solution.digitSum(\"helloE\")); // Output: 69\n        System.out.println(solution.digitSum(\"woArBld\")); // Output: 131\n        System.out.println(solution.digitSum(\"aAaaaXa\")); // Output: 153\n    }\n}\n"}
{"task_id": "Java/14", "generation": "class Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    */\n    public List<String> all_prefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        \n        // Iterate through the string and collect prefixes\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        \n        return prefixes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.all_prefixes(\"abc\")); // Output: [a, ab, abc]\n    }\n}\n"}
{"task_id": "Java/25", "generation": "class Solution {\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        \n        // Check for number of 2s that divide n\n        while (n % 2 == 0) {\n            factors.add(2);\n            n /= 2;\n        }\n        \n        // n must be odd at this point, so we can skip even numbers\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            // While i divides n, add i and divide n\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        \n        // This condition is to check if n is a prime number greater than 2\n        if (n > 2) {\n            factors.add(n);\n        }\n        \n        return factors;\n    }\n}\n"}
{"task_id": "Java/107", "generation": "class Solution {\n    public List<Integer> even_odd_palindrome(int n) {\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        // Create a list to return the counts\n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n\n    private boolean isPalindrome(int num) {\n        String str = Integer.toString(num);\n        String reversedStr = new StringBuilder(str).reverse().toString();\n        return str.equals(reversedStr);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.even_odd_palindrome(3));  // Output: [1, 2]\n        System.out.println(solution.even_odd_palindrome(12)); // Output: [4, 6]\n    }\n}\n"}
{"task_id": "Java/83", "generation": "class Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    */\n    public int starts_one_ends(int n) {\n        if (n == 1) {\n            // For n = 1, the only number is '1'\n            return 1;\n        }\n        \n        // Count of n-digit integers that start with '1'\n        int countStartsWith1 = (int) Math.pow(10, n - 1);\n        \n        // Count of n-digit integers that end with '1'\n        int countEndsWith1 = 9 * (int) Math.pow(10, n - 2);\n        \n        // Count of n-digit integers that both start and end with '1'\n        int countBoth = (int) Math.pow(10, n - 2);\n        \n        // Total count\n        return countStartsWith1 + countEndsWith1 - countBoth;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.starts_one_ends(1)); // Output: 1\n        System.out.println(sol.starts_one_ends(2)); // Output: 18\n        System.out.println(sol.starts_one_ends(3)); // Output: 180\n        // Add more test cases as needed\n    }\n}\n"}
{"task_id": "Java/32", "generation": "class Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n\n    /**\n    Evaluates the derivative of the polynomial at point x.\n    return the derivative of the polynomial at x.\n    */\n    public double polyDerivative(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 1; i < xs.size(); i++) {\n            result += i * xs.get(i) * Math.pow(x, i - 1);\n        }\n        return result;\n    }\n\n    /**\n    xs are coefficients of a polynomial.\n    find_zero finds x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having an even number of coefficients\n    and largest non-zero coefficient as it guarantees\n    a solution.\n    >>> find_zero(Arrays.asList(1.0, 2.0)) // f(x) = 1 + 2x\n    -0.5\n    >>> find_zero(Arrays.asList(-6.0, 11.0, -6.0, 1.0)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double find_zero(List<Double> xs) {\n        double x0 = 0; // Initial guess\n        double tolerance = 1e-7; // Tolerance for convergence\n        double maxIterations = 1000; // Maximum number of iterations\n        int iteration = 0;\n\n        while (iteration < maxIterations) {\n            double fx = poly(xs, x0);\n            double dfx = polyDerivative(xs, x0);\n\n            if (Math.abs(fx) < tolerance) {\n                return x0; // Found a root\n            }\n\n            if (Math.abs(dfx) < tolerance) {\n                throw new RuntimeException(\"Derivative is too small; no convergence.\");\n            }\n\n            // Newton-Raphson update\n            x0 = x0 - fx / dfx;\n            iteration++;\n        }\n\n        throw new RuntimeException(\"Maximum iterations reached; no convergence.\");\n    }\n}\n"}
{"task_id": "Java/85", "generation": "class Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n    */\n    public int add(List<Integer> lst) {\n        int sum = 0; // Initialize sum to 0\n        \n        // Iterate through the list\n        for (int i = 0; i < lst.size(); i++) {\n            // Check if the index is odd and the element is even\n            if (i % 2 != 0 && lst.get(i) % 2 == 0) {\n                sum += lst.get(i); // Add the element to the sum\n            }\n        }\n        \n        return sum; // Return the total sum\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.add(Arrays.asList(4, 2, 6, 7))); // Output: 2\n        System.out.println(solution.add(Arrays.asList(1, 2, 3, 4, 5))); // Output: 0\n        System.out.println(solution.add(Arrays.asList(10, 11, 12, 13, 14))); // Output: 14\n    }\n}\n"}
{"task_id": "Java/156", "generation": "class Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == \"xix\"\n    >>> int_to_mini_roman(152) == \"clii\"\n    >>> int_to_mini_roman(426) == \"cdxxvi\"\n    */\n    public String int_to_mini_roman(int number) {\n        // Define the mapping of integers to Roman numerals\n        String[] romanNumerals = {\n            \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"\n        };\n        int[] values = {\n            1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        };\n\n        StringBuilder result = new StringBuilder();\n\n        // Iterate through the values and build the Roman numeral string\n        for (int i = 0; i < values.length; i++) {\n            while (number >= values[i]) {\n                result.append(romanNumerals[i]);\n                number -= values[i];\n            }\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.int_to_mini_roman(19));   // Output: \"xix\"\n        System.out.println(solution.int_to_mini_roman(152));  // Output: \"clii\"\n        System.out.println(solution.int_to_mini_roman(426));  // Output: \"cdxxvi\"\n    }\n}\n"}
{"task_id": "Java/75", "generation": "class Solution {\n    // Function to generate all prime numbers less than 100\n    private List<Integer> generatePrimes() {\n        List<Integer> primes = new ArrayList<>();\n        boolean[] isPrime = new boolean[100];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = isPrime[1] = false; // 0 and 1 are not prime numbers\n\n        for (int i = 2; i < 100; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n                for (int j = i * 2; j < 100; j += i) {\n                    isPrime[j] = false; // Mark multiples of i as non-prime\n                }\n            }\n        }\n        return primes;\n    }\n\n    // Function to check if the number is a product of three primes\n    public boolean is_multiply_prime(int a) {\n        List<Integer> primes = generatePrimes();\n        int n = primes.size();\n\n        // Check all combinations of three primes\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                for (int k = j; k < n; k++) {\n                    int product = primes.get(i) * primes.get(j) * primes.get(k);\n                    if (product == a) {\n                        return true; // Found a combination that multiplies to 'a'\n                    }\n                }\n            }\n        }\n        return false; // No combination found\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.is_multiply_prime(30)); // true\n        System.out.println(solution.is_multiply_prime(60)); // true (2 * 3 * 10, but 10 is not prime)\n        System.out.println(solution.is_multiply_prime(100)); // false\n        System.out.println(solution.is_multiply_prime(105)); // true (3 * 5 * 7)\n    }\n}\n"}
{"task_id": "Java/157", "generation": "class Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == true\n    right_angle_triangle(1, 2, 3) == false\n    */\n    public boolean right_angle_triangle(int a, int b, int c) {\n        // Sort the sides to ensure we can identify the longest side\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        \n        // Check the Pythagorean theorem\n        return (sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.right_angle_triangle(3, 4, 5)); // true\n        System.out.println(solution.right_angle_triangle(1, 2, 3)); // false\n        System.out.println(solution.right_angle_triangle(5, 12, 13)); // true\n        System.out.println(solution.right_angle_triangle(8, 15, 17)); // true\n        System.out.println(solution.right_angle_triangle(7, 24, 25)); // true\n        System.out.println(solution.right_angle_triangle(10, 6, 8)); // false\n    }\n}\n"}
{"task_id": "Java/36", "generation": "class Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    */\n    public int fizz_buzz(int n) {\n        int count = 0;\n\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                // Convert the number to a string\n                String str = Integer.toString(i);\n                // Count occurrences of '7'\n                for (char c : str.toCharArray()) {\n                    if (c == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fizz_buzz(50)); // Output: 0\n        System.out.println(solution.fizz_buzz(78)); // Output: 2\n        System.out.println(solution.fizz_buzz(79)); // Output: 3\n    }\n}\n"}
{"task_id": "Java/94", "generation": "import java.util.*;\n\nclass Solution {\n    public int skjkasdkd(List<Integer> lst) {\n        int largestPrime = -1;\n\n        for (int num : lst) {\n            if (isPrime(num) && num > largestPrime) {\n                largestPrime = num;\n            }\n        }\n\n        if (largestPrime == -1) {\n            return 0; // Return 0 if no prime is found\n        }\n\n        return sumOfDigits(largestPrime);\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private int sumOfDigits(int n) {\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 10; // Add the last digit to sum\n            n /= 10; // Remove the last digit\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/60", "generation": "class Solution {\n    /**\n    sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    */\n    public int sum_to_n(int n) {\n        // Using the formula for the sum of the first n natural numbers\n        return n * (n + 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test cases\n        System.out.println(solution.sum_to_n(30));  // Output: 465\n        System.out.println(solution.sum_to_n(100)); // Output: 5050\n        System.out.println(solution.sum_to_n(5));   // Output: 15\n        System.out.println(solution.sum_to_n(10));  // Output: 55\n        System.out.println(solution.sum_to_n(1));   // Output: 1\n    }\n}\n"}
{"task_id": "Java/145", "generation": "class Solution {\n    public List<Integer> order_by_points(List<Integer> nums) {\n        // Create a list of pairs where each pair contains the original number and its digit sum\n        List<Pair> pairs = new ArrayList<>();\n        \n        for (int num : nums) {\n            int digitSum = sumOfDigits(num);\n            pairs.add(new Pair(num, digitSum));\n        }\n        \n        // Sort the pairs based on the digit sum and maintain original order for ties\n        Collections.sort(pairs, (a, b) -> {\n            if (a.digitSum != b.digitSum) {\n                return Integer.compare(a.digitSum, b.digitSum);\n            } else {\n                return 0; // Maintain original order for equal digit sums\n            }\n        });\n        \n        // Extract the sorted numbers from the pairs\n        List<Integer> sortedNums = new ArrayList<>();\n        for (Pair pair : pairs) {\n            sortedNums.add(pair.num);\n        }\n        \n        return sortedNums;\n    }\n    \n    // Helper method to calculate the sum of digits\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        int absNum = Math.abs(num);\n        \n        while (absNum > 0) {\n            sum += absNum % 10;\n            absNum /= 10;\n        }\n        \n        // If the number is negative, we need to consider the first digit as negative\n        if (num < 0) {\n            sum -= 2 * (Math.abs(num) / (int) Math.pow(10, String.valueOf(Math.abs(num)).length() - 1) % 10);\n        }\n        \n        return sum;\n    }\n    \n    // Pair class to hold the number and its digit sum\n    private static class Pair {\n        int num;\n        int digitSum;\n        \n        Pair(int num, int digitSum) {\n            this.num = num;\n            this.digitSum = digitSum;\n        }\n    }\n}\n"}
{"task_id": "Java/61", "generation": "class Solution {\n    public boolean correct_bracketing(String brackets) {\n        int balance = 0; // This will keep track of the balance of brackets\n\n        for (char ch : brackets.toCharArray()) {\n            if (ch == '(') {\n                balance++; // Increment for an opening bracket\n            } else if (ch == ')') {\n                balance--; // Decrement for a closing bracket\n            }\n\n            // If balance goes negative, we have more closing brackets\n            if (balance < 0) {\n                return false; // Incorrect bracketing\n            }\n        }\n\n        // At the end, balance should be zero for correct bracketing\n        return balance == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.correct_bracketing(\"(\"));        // false\n        System.out.println(solution.correct_bracketing(\"()\"));       // true\n        System.out.println(solution.correct_bracketing(\"(()())\"));   // true\n        System.out.println(solution.correct_bracketing(\")(()\"));     // false\n    }\n}\n"}
{"task_id": "Java/79", "generation": "class Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   // returns \"db1111db\"\n    decimal_to_binary(32)   // returns \"db100000db\"\n     */\n    public String decimal_to_binary(int decimal) {\n        // Convert the decimal number to binary string\n        String binaryString = Integer.toBinaryString(decimal);\n        \n        // Format the string by adding 'db' at the beginning and end\n        return \"db\" + binaryString + \"db\";\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.decimal_to_binary(15));  // Output: \"db1111db\"\n        System.out.println(solution.decimal_to_binary(32));  // Output: \"db100000db\"\n    }\n}\n"}
{"task_id": "Java/116", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> arr) {\n        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                // Count the number of 1s in the binary representation\n                int countA = Integer.bitCount(a);\n                int countB = Integer.bitCount(b);\n                \n                // First compare by the number of 1s\n                if (countA != countB) {\n                    return Integer.compare(countA, countB);\n                }\n                // If the number of 1s is the same, compare by the decimal value\n                return Integer.compare(a, b);\n            }\n        });\n        return arr;\n    }\n}\n"}
{"task_id": "Java/56", "generation": "class Solution {\n    public boolean correct_bracketing(String brackets) {\n        int count = 0; // To keep track of the balance between '<' and '>'\n        \n        for (char ch : brackets.toCharArray()) {\n            if (ch == '<') {\n                count++; // Increment for an opening bracket\n            } else if (ch == '>') {\n                count--; // Decrement for a closing bracket\n            }\n            \n            // If count goes negative, there are unmatched closing brackets\n            if (count < 0) {\n                return false;\n            }\n        }\n        \n        // At the end, count should be zero for all brackets to be matched\n        return count == 0;\n    }\n}\n"}
{"task_id": "Java/111", "generation": "import java.util.*;\n\nclass Solution {\n    public Map<String, Integer> histogram(String test) {\n        // Return an empty map if the input string is empty\n        if (test.isEmpty()) {\n            return new HashMap<>();\n        }\n\n        // Split the string into letters\n        String[] letters = test.split(\" \");\n        \n        // Create a map to count occurrences\n        Map<String, Integer> countMap = new HashMap<>();\n\n        // Count occurrences of each letter\n        for (String letter : letters) {\n            countMap.put(letter, countMap.getOrDefault(letter, 0) + 1);\n        }\n\n        // Find the maximum occurrence\n        int maxCount = Collections.max(countMap.values());\n\n        // Create a result map for letters with the maximum occurrence\n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : countMap.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/125", "generation": "class Solution {\n    public Object split_words(String txt) {\n        // Check for whitespace\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\"\\\\s+\")); // Split on whitespace\n        }\n        \n        // Check for commas\n        if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\")); // Split on commas\n        }\n        \n        // Count lowercase letters in odd positions\n        int count = 0;\n        for (char c : txt.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                // Check if the character is in odd position (b=1, d=3, f=5, ..., z=25)\n                int position = c - 'a'; // 'a' = 0, 'b' = 1, ..., 'z' = 25\n                if (position % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        \n        return count; // Return the count of lowercase letters in odd positions\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.split_words(\"Hello world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.split_words(\"Hello,world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.split_words(\"abcdef\")); // 3\n    }\n}\n"}
{"task_id": "Java/119", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String match_parens(List<String> lst) {\n        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n        \n        // Check both concatenation orders\n        return (isBalanced(s1 + s2) || isBalanced(s2 + s1)) ? \"Yes\" : \"No\";\n    }\n    \n    // Function to check if a string of parentheses is balanced\n    private boolean isBalanced(String s) {\n        int balance = 0;\n        for (char ch : s.toCharArray()) {\n            if (ch == '(') {\n                balance++;\n            } else {\n                balance--;\n            }\n            if (balance < 0) {\n                return false;\n            }\n        }\n        return balance == 0;\n    }\n}\n"}
{"task_id": "Java/124", "generation": "class Solution {\n    public boolean valid_date(String date) {\n        // Check if the date string is empty\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        // Check if the date is in the correct format mm-dd-yyyy\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n            return false;\n        }\n\n        // Parse month, day, and year\n        int month, day, year;\n        try {\n            month = Integer.parseInt(parts[0]);\n            day = Integer.parseInt(parts[1]);\n            year = Integer.parseInt(parts[2]);\n        } catch (NumberFormatException e) {\n            return false; // If parsing fails, the date is invalid\n        }\n\n        // Check if month is valid\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        // Check if day is valid based on the month\n        if (day < 1) {\n            return false; // Day must be at least 1\n        }\n\n        // Days in each month\n        int daysInMonth;\n        switch (month) {\n            case 1: case 3: case 5: case 7: case 8: case 10: case 12:\n                daysInMonth = 31;\n                break;\n            case 4: case 6: case 9: case 11:\n                daysInMonth = 30;\n                break;\n            case 2:\n                // For February, we need to check for leap years\n                if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {\n                    daysInMonth = 29; // Leap year\n                } else {\n                    daysInMonth = 28; // Non-leap year\n                }\n                break;\n            default:\n                return false; // This case should not happen due to month validation\n        }\n\n        // Check if the day is valid for the given month\n        return day <= daysInMonth;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.valid_date(\"03-11-2000\")); // true\n        System.out.println(solution.valid_date(\"15-01-2012\")); // false\n        System.out.println(solution.valid_date(\"04-0-2040\")); // false\n        System.out.println(solution.valid_date(\"06-04-2020\")); // true\n        System.out.println(solution.valid_date(\"06/04/2020\")); // false\n    }\n}\n"}
{"task_id": "Java/9", "generation": "class Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n    */\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int currentMax = Integer.MIN_VALUE; // Initialize to the smallest possible integer\n\n        for (int number : numbers) {\n            currentMax = Math.max(currentMax, number); // Update the current maximum\n            result.add(currentMax); // Add the current maximum to the result list\n        }\n\n        return result; // Return the list of rolling maximums\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> input = Arrays.asList(1, 2, 3, 2, 3, 4, 2);\n        List<Integer> output = solution.rolling_max(input);\n        System.out.println(output); // Output: [1, 2, 3, 3, 3, 4, 4]\n    }\n}\n"}
{"task_id": "Java/43", "generation": "class Solution {\n    /**\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairs_sum_to_zero(Arrays.asList(1))\n    false\n    */\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        Set<Integer> seen = new HashSet<>();\n        \n        for (Integer num : l) {\n            // Check if the negation of the current number is in the set\n            if (seen.contains(-num)) {\n                return true; // Found a pair that sums to zero\n            }\n            // Add the current number to the set\n            seen.add(num);\n        }\n        \n        return false; // No pairs found that sum to zero\n    }\n}\n"}
{"task_id": "Java/82", "generation": "class Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    prime_length(\"Hello\") == true\n    prime_length(\"abcdcba\") == true\n    prime_length(\"kittens\") == true\n    prime_length(\"orange\") == false\n    */\n    public boolean prime_length(String string) {\n        int length = string.length();\n        return isPrime(length);\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false; // 0 and 1 are not prime numbers\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false; // Found a divisor, not prime\n            }\n        }\n        return true; // No divisors found, it's prime\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.prime_length(\"Hello\"));    // true\n        System.out.println(solution.prime_length(\"abcdcba\"));  // true\n        System.out.println(solution.prime_length(\"kittens\"));   // true\n        System.out.println(solution.prime_length(\"orange\"));    // false\n    }\n}\n"}
{"task_id": "Java/155", "generation": "class Solution {\n    /**\n    Given an integer, return a list that has the number of even and odd digits respectively.\n    \n     Example:\n        even_odd_count(-12) ==> [1, 1]\n        even_odd_count(123) ==> [1, 2]\n     */\n    public List<Integer> even_odd_count(int num) {\n        // Use absolute value to handle negative numbers\n        num = Math.abs(num);\n        \n        int evenCount = 0;\n        int oddCount = 0;\n        \n        // Iterate through each digit\n        while (num > 0) {\n            int digit = num % 10; // Get the last digit\n            \n            // Check if the digit is even or odd\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            \n            num /= 10; // Remove the last digit\n        }\n        \n        // Create a list to return the counts\n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.even_odd_count(-12)); // Output: [1, 1]\n        System.out.println(solution.even_odd_count(123));  // Output: [1, 2]\n        System.out.println(solution.even_odd_count(2468)); // Output: [4, 0]\n        System.out.println(solution.even_odd_count(13579)); // Output: [0, 5]\n    }\n}\n"}
{"task_id": "Java/35", "generation": "class Solution {\n    /**\n    Return maximum element in the list.\n    >>> max_element(Arrays.asList(1, 2, 3))\n    3\n    >>> max_element(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n    */\n    public int max_element(List<Integer> l) {\n        // Check if the list is empty\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be null or empty\");\n        }\n        // Use Collections.max to find the maximum element\n        return Collections.max(l);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.max_element(Arrays.asList(1, 2, 3))); // Output: 3\n        System.out.println(solution.max_element(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))); // Output: 123\n    }\n}\n"}
{"task_id": "Java/89", "generation": "class Solution {\n    public String encrypt(String s) {\n        StringBuilder encrypted = new StringBuilder();\n        \n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                // Shift the character by 4 positions\n                char base = Character.isLowerCase(c) ? 'a' : 'A';\n                char shifted = (char) ((c - base + 4) % 26 + base);\n                encrypted.append(shifted);\n            } else {\n                // If it's not a letter, we can choose to ignore it or handle it differently\n                encrypted.append(c); // For this case, we will just append it as is\n            }\n        }\n        \n        return encrypted.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.encrypt(\"hi\")); // Output: \"lm\"\n        System.out.println(solution.encrypt(\"asdfghjkl\")); // Output: \"ewhjklnop\"\n        System.out.println(solution.encrypt(\"gf\")); // Output: \"kj\"\n        System.out.println(solution.encrypt(\"et\")); // Output: \"ix\"\n    }\n}\n"}
{"task_id": "Java/24", "generation": "class Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    */\n    public int largest_divisor(int n) {\n        // Start from n-1 and go down to 1\n        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i; // Return the first divisor found\n            }\n        }\n        return 1; // In case n is 1, the largest divisor smaller than 1 is not defined, but we return 1.\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.largest_divisor(15)); // Output: 5\n        System.out.println(solution.largest_divisor(28)); // Output: 14\n        System.out.println(solution.largest_divisor(1));  // Output: 1\n    }\n}\n"}
{"task_id": "Java/22", "generation": "class Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n    */\n    public List<Integer> filter_integers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.filter_integers(Arrays.asList('a', 3.14, 5))); // Output: [5]\n        System.out.println(solution.filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))); // Output: [1, 2, 3]\n    }\n}\n"}
{"task_id": "Java/161", "generation": "class Solution {\n    public String solve(String s) {\n        // Check if the string contains any letters\n        boolean hasLetters = false;\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                hasLetters = true;\n                break;\n            }\n        }\n\n        if (hasLetters) {\n            // If there are letters, reverse their case\n            StringBuilder result = new StringBuilder();\n            for (char c : s.toCharArray()) {\n                if (Character.isLetter(c)) {\n                    // Reverse case\n                    if (Character.isLowerCase(c)) {\n                        result.append(Character.toUpperCase(c));\n                    } else {\n                        result.append(Character.toLowerCase(c));\n                    }\n                } else {\n                    // Keep non-letter characters unchanged\n                    result.append(c);\n                }\n            }\n            return result.toString();\n        } else {\n            // If there are no letters, reverse the entire string\n            return new StringBuilder(s).reverse().toString();\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.solve(\"1234\")); // Output: \"4321\"\n        System.out.println(solution.solve(\"ab\"));   // Output: \"AB\"\n        System.out.println(solution.solve(\"#a@C\")); // Output: \"#A@c\"\n    }\n}\n"}
{"task_id": "Java/28", "generation": "class Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n    */\n    public String concatenate(List<String> strings) {\n        StringBuilder result = new StringBuilder();\n        for (String str : strings) {\n            result.append(str);\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.concatenate(List.of())); // Output: \"\"\n        System.out.println(solution.concatenate(Arrays.asList(\"a\", \"b\", \"c\"))); // Output: \"abc\"\n    }\n}\n"}
{"task_id": "Java/72", "generation": "class Solution {\n    public boolean will_it_fly(List<Integer> q, int w) {\n        // Check if the list is a palindrome\n        if (!isPalindrome(q)) {\n            return false;\n        }\n        \n        // Calculate the sum of the elements in the list\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n        \n        // Check if the sum is less than or equal to the maximum weight\n        return sum <= w;\n    }\n    \n    private boolean isPalindrome(List<Integer> q) {\n        int left = 0;\n        int right = q.size() - 1;\n        \n        while (left < right) {\n            if (!q.get(left).equals(q.get(right))) {\n                return false; // Not a palindrome\n            }\n            left++;\n            right--;\n        }\n        \n        return true; // It is a palindrome\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.will_it_fly(Arrays.asList(1, 2), 5)); // false\n        System.out.println(solution.will_it_fly(Arrays.asList(3, 2, 3), 1)); // false\n        System.out.println(solution.will_it_fly(Arrays.asList(3, 2, 3), 9)); // true\n        System.out.println(solution.will_it_fly(Arrays.asList(3), 5)); // true\n    }\n}\n"}
{"task_id": "Java/127", "generation": "class Solution {\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // Extract start and end points from the intervals\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        \n        // Calculate the intersection\n        int startIntersection = Math.max(start1, start2);\n        int endIntersection = Math.min(end1, end2);\n        \n        // Check if there is an intersection\n        if (startIntersection > endIntersection) {\n            return \"NO\"; // No intersection\n        }\n        \n        // Calculate the length of the intersection\n        int length = endIntersection - startIntersection;\n        \n        // Check if the length is a prime number\n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n    \n    // Helper method to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false; // 0 and 1 are not prime numbers\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false; // Found a divisor, not prime\n            }\n        }\n        return true; // No divisors found, it's prime\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.intersection(Arrays.asList(1, 2), Arrays.asList(2, 3))); // \"NO\"\n        System.out.println(solution.intersection(Arrays.asList(-1, 1), Arrays.asList(0, 4))); // \"NO\"\n        System.out.println(solution.intersection(Arrays.asList(-3, -1), Arrays.asList(-5, 5))); // \"YES\"\n    }\n}\n"}
{"task_id": "Java/86", "generation": "class Solution {\n    public String anti_shuffle(String s) {\n        // Split the string into words and spaces\n        String[] words = s.split(\"(?<=\\\\s)|(?=\\\\s)\"); // This regex keeps spaces as separate elements\n        StringBuilder result = new StringBuilder();\n\n        for (String word : words) {\n            if (word.trim().isEmpty()) {\n                // If the word is just whitespace, append it directly\n                result.append(word);\n            } else {\n                // Sort the characters in the word\n                char[] charArray = word.toCharArray();\n                Arrays.sort(charArray);\n                // Append the sorted word to the result\n                result.append(new String(charArray));\n            }\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.anti_shuffle(\"Hi\")); // Output: \"Hi\"\n        System.out.println(solution.anti_shuffle(\"hello\")); // Output: \"ehllo\"\n        System.out.println(solution.anti_shuffle(\"Hello World!!!\")); // Output: \"Hello !!!Wdlor\"\n    }\n}\n"}
{"task_id": "Java/3", "generation": "class Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero,\n    and at that point function should return True. Otherwise it should return False.\n    >>> below_zero(Arrays.asList(1, 2, 3))\n    false\n    >>> below_zero(Arrays.asList(1, 2, -4, 5))\n    true\n    */\n    public boolean below_zero(List<Integer> operations) {\n        int balance = 0; // Start with a balance of zero\n        \n        for (int operation : operations) {\n            balance += operation; // Update the balance\n            \n            if (balance < 0) { // Check if the balance goes below zero\n                return true; // Return true if it does\n            }\n        }\n        \n        return false; // Return false if balance never goes below zero\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.below_zero(Arrays.asList(1, 2, 3))); // Output: false\n        System.out.println(solution.below_zero(Arrays.asList(1, 2, -4, 5))); // Output: true\n    }\n}\n"}
{"task_id": "Java/69", "generation": "class Solution {\n    public int search(List<Integer> lst) {\n        // Step 1: Count the frequency of each integer\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n\n        // Step 2: Find the greatest integer that meets the condition\n        int result = -1;\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int value = entry.getKey();\n            int frequency = entry.getValue();\n            if (frequency >= value) {\n                result = Math.max(result, value);\n            }\n        }\n\n        // Step 3: Return the result\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.search(Arrays.asList(4, 1, 2, 2, 3, 1))); // Output: 2\n        System.out.println(solution.search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4))); // Output: 3\n        System.out.println(solution.search(Arrays.asList(5, 5, 4, 4, 4))); // Output: -1\n    }\n}\n"}
{"task_id": "Java/62", "generation": "class Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        \n        // Start from the first coefficient (index 1) since the derivative of the constant term is 0\n        for (int i = 1; i < xs.size(); i++) {\n            // The derivative of the term is i * xs[i]\n            result.add(i * xs.get(i));\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.derivative(Arrays.asList(3, 1, 2, 4, 5))); // Output: [1, 4, 12, 20]\n        System.out.println(solution.derivative(Arrays.asList(1, 2, 3))); // Output: [2, 6]\n    }\n}\n"}
{"task_id": "Java/50", "generation": "class Solution {\n    /**\n    Returns encoded string by shifting every character by 5 in the alphabet.\n    Handles both uppercase and lowercase letters, and leaves non-alphabetic characters unchanged.\n    */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (Character.isLowerCase(ch)) {\n                sb.append((char) ('a' + ((ch - 'a' + 5) % 26)));\n            } else if (Character.isUpperCase(ch)) {\n                sb.append((char) ('A' + ((ch - 'A' + 5) % 26)));\n            } else {\n                sb.append(ch); // Non-alphabetic characters remain unchanged\n            }\n        }\n        return sb.toString();\n    }\n\n    /**\n    Takes as input string encoded with encodeShift function. Returns decoded string.\n    Handles both uppercase and lowercase letters, and leaves non-alphabetic characters unchanged.\n    */\n    public String decode_shift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (Character.isLowerCase(ch)) {\n                sb.append((char) ('a' + ((ch - 'a' - 5 + 26) % 26)));\n            } else if (Character.isUpperCase(ch)) {\n                sb.append((char) ('A' + ((ch - 'A' - 5 + 26) % 26)));\n            } else {\n                sb.append(ch); // Non-alphabetic characters remain unchanged\n            }\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String original = \"Hello, World!\";\n        String encoded = solution.encodeShift(original);\n        String decoded = solution.decode_shift(encoded);\n\n        System.out.println(\"Original: \" + original);\n        System.out.println(\"Encoded: \" + encoded);\n        System.out.println(\"Decoded: \" + decoded);\n    }\n}\n"}
{"task_id": "Java/135", "generation": "class Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange(Arrays.asList(1,2,4,3,5)) = 3\n    can_arrange(Arrays.asList(1,2,3)) = -1\n    */\n    public int can_arrange(List<Integer> arr) {\n        int n = arr.size();\n        \n        // Iterate from the second last element to the first element\n        for (int i = n - 2; i >= 0; i--) {\n            // Check if the current element is less than the next element\n            if (arr.get(i) > arr.get(i + 1)) {\n                return i + 1; // Return the index of the element that meets the condition\n            }\n        }\n        \n        return -1; // If no such element is found, return -1\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.can_arrange(Arrays.asList(1, 2, 4, 3, 5))); // Output: 3\n        System.out.println(solution.can_arrange(Arrays.asList(1, 2, 3))); // Output: -1\n        System.out.println(solution.can_arrange(Arrays.asList(5, 4, 3, 2, 1))); // Output: 1\n        System.out.println(solution.can_arrange(Arrays.asList(1, 3, 2, 4, 5))); // Output: 2\n    }\n}\n"}
{"task_id": "Java/93", "generation": "class Solution {\n    public String encode(String message) {\n        StringBuilder encodedMessage = new StringBuilder();\n        \n        for (char c : message.toCharArray()) {\n            // Swap case\n            if (Character.isLowerCase(c)) {\n                c = Character.toUpperCase(c);\n            } else if (Character.isUpperCase(c)) {\n                c = Character.toLowerCase(c);\n            }\n            \n            // Replace vowels\n            switch (Character.toLowerCase(c)) {\n                case 'a':\n                    c = 'c'; // 'a' -> 'c'\n                    break;\n                case 'e':\n                    c = 'g'; // 'e' -> 'g'\n                    break;\n                case 'i':\n                    c = 'k'; // 'i' -> 'k'\n                    break;\n                case 'o':\n                    c = 'q'; // 'o' -> 'q'\n                    break;\n                case 'u':\n                    c = 'w'; // 'u' -> 'w'\n                    break;\n                default:\n                    break; // Non-vowel characters remain unchanged\n            }\n            \n            encodedMessage.append(c);\n        }\n        \n        return encodedMessage.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.encode(\"test\")); // Output: \"TGST\"\n        System.out.println(solution.encode(\"This is a message\")); // Output: \"tHKS KS C MGSSCGG\"\n    }\n}\n"}
{"task_id": "Java/147", "generation": "class Solution {\n    public int get_max_triples(int n) {\n        // Step 1: Calculate the array a\n        int[] a = new int[n];\n        for (int i = 1; i <= n; i++) {\n            a[i - 1] = i * i - i + 1; // a[i] = i * i - i + 1\n        }\n\n        // Step 2: Count occurrences of each modulo 3 category\n        int[] count = new int[3]; // count[0], count[1], count[2]\n        for (int value : a) {\n            count[value % 3]++;\n        }\n\n        // Step 3: Calculate the number of valid triples\n        int totalTriples = 0;\n\n        // Case 1: All from the same category\n        totalTriples += combination(count[0], 3); // (0, 0, 0)\n        totalTriples += combination(count[1], 3); // (1, 1, 1)\n        totalTriples += combination(count[2], 3); // (2, 2, 2)\n\n        // Case 2: One from each category\n        totalTriples += count[0] * count[1] * count[2]; // (0, 1, 2)\n\n        return totalTriples;\n    }\n\n    // Helper method to calculate nCk (combinations)\n    private int combination(int n, int k) {\n        if (n < k) return 0;\n        if (k == 0) return 1;\n        if (k == 1) return n;\n        if (k == 2) return n * (n - 1) / 2;\n        if (k == 3) return n * (n - 1) * (n - 2) / 6;\n        return 0; // For k > 3, we don't need it in this context\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        int n = 5;\n        System.out.println(sol.get_max_triples(n)); // Output: 1\n    }\n}\n"}
{"task_id": "Java/27", "generation": "class Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"Hello\")\n    \"hELLO\"\n    */\n    public String flip_case(String string) {\n        StringBuilder flippedString = new StringBuilder();\n\n        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                flippedString.append(Character.toUpperCase(c));\n            } else if (Character.isUpperCase(c)) {\n                flippedString.append(Character.toLowerCase(c));\n            } else {\n                flippedString.append(c); // Keep non-alphabetic characters unchanged\n            }\n        }\n\n        return flippedString.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.flip_case(\"Hello\")); // Output: hELLO\n        System.out.println(solution.flip_case(\"World!\")); // Output: wORLD!\n        System.out.println(solution.flip_case(\"Java123\")); // Output: jAVA123\n    }\n}\n"}
{"task_id": "Java/110", "generation": "class Solution {\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int oddCountInLst1 = 0;\n        int evenCountInLst2 = 0;\n\n        // Count odd numbers in lst1\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCountInLst1++;\n            }\n        }\n\n        // Count even numbers in lst2\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCountInLst2++;\n            }\n        }\n\n        // Check if we can replace all odd numbers in lst1 with even numbers from lst2\n        if (oddCountInLst1 <= evenCountInLst2) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4))); // Output: \"YES\"\n        System.out.println(solution.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4))); // Output: \"NO\"\n    }\n}\n"}
{"task_id": "Java/141", "generation": "class Solution {\n    public String file_name_check(String file_name) {\n        // Check if the file name contains exactly one dot\n        int dotIndex = file_name.indexOf('.');\n        if (dotIndex == -1 || file_name.indexOf('.', dotIndex + 1) != -1) {\n            return \"No\";\n        }\n\n        // Split the file name into the name and the extension\n        String namePart = file_name.substring(0, dotIndex);\n        String extensionPart = file_name.substring(dotIndex + 1);\n\n        // Check if the name part is not empty and starts with a letter\n        if (namePart.isEmpty() || !Character.isLetter(namePart.charAt(0))) {\n            return \"No\";\n        }\n\n        // Check for the number of digits in the name part\n        int digitCount = 0;\n        for (char c : namePart.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n        }\n        if (digitCount > 3) {\n            return \"No\";\n        }\n\n        // Check if the extension is one of the valid types\n        Set<String> validExtensions = new HashSet<>(Arrays.asList(\"txt\", \"exe\", \"dll\"));\n        if (!validExtensions.contains(extensionPart)) {\n            return \"No\";\n        }\n\n        // If all conditions are met, return \"Yes\"\n        return \"Yes\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.file_name_check(\"example.txt\")); // Output: \"Yes\"\n        System.out.println(solution.file_name_check(\"1example.dll\")); // Output: \"No\"\n        System.out.println(solution.file_name_check(\"example123.txt\")); // Output: \"Yes\"\n        System.out.println(solution.file_name_check(\"example..txt\")); // Output: \"No\"\n        System.out.println(solution.file_name_check(\".example.txt\")); // Output: \"No\"\n        System.out.println(solution.file_name_check(\"example.txt.exe\")); // Output: \"No\"\n        System.out.println(solution.file_name_check(\"example.dll\")); // Output: \"Yes\"\n        System.out.println(solution.file_name_check(\"example1234.txt\")); // Output: \"No\"\n    }\n}\n"}
{"task_id": "Java/104", "generation": "class Solution {\n    public List<Integer> unique_digits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (Integer num : x) {\n            if (containsNoEvenDigits(num)) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        return result;\n    }\n    \n    private boolean containsNoEvenDigits(int num) {\n        while (num > 0) {\n            int digit = num % 10; // Get the last digit\n            if (digit % 2 == 0) { // Check if the digit is even\n                return false; // If even, return false\n            }\n            num /= 10; // Remove the last digit\n        }\n        return true; // No even digits found\n    }\n    \n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.unique_digits(Arrays.asList(15, 33, 1422, 1))); // Output: [1, 15, 33]\n        System.out.println(sol.unique_digits(Arrays.asList(152, 323, 1422, 10))); // Output: []\n    }\n}\n"}
{"task_id": "Java/100", "generation": "class Solution {\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> stones = new ArrayList<>();\n        int currentStones = n;\n        \n        for (int i = 0; i < n; i++) {\n            stones.add(currentStones);\n            currentStones += 2; // Increase by 2 for the next level\n        }\n        \n        return stones;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.make_a_pile(3)); // Output: [3, 5, 7]\n        System.out.println(solution.make_a_pile(4)); // Output: [4, 6, 8, 10]\n    }\n}\n"}
{"task_id": "Java/68", "generation": "class Solution {\n    public List<Integer> pluck(List<Integer> arr) {\n        // Initialize variables to track the smallest even value and its index\n        Integer smallestEvenValue = null;\n        Integer smallestEvenIndex = null;\n\n        // Iterate through the list\n        for (int i = 0; i < arr.size(); i++) {\n            int value = arr.get(i);\n            // Check if the value is even\n            if (value % 2 == 0) {\n                // If it's the first even number found or smaller than the current smallest\n                if (smallestEvenValue == null || value < smallestEvenValue) {\n                    smallestEvenValue = value;\n                    smallestEvenIndex = i;\n                }\n            }\n        }\n\n        // If no even number was found, return an empty list\n        if (smallestEvenValue == null) {\n            return new ArrayList<>();\n        }\n\n        // Return the smallest even value and its index\n        return Arrays.asList(smallestEvenValue, smallestEvenIndex);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.pluck(Arrays.asList(4, 2, 3))); // Output: [2, 1]\n        System.out.println(solution.pluck(Arrays.asList(1, 2, 3))); // Output: [2, 1]\n        System.out.println(solution.pluck(Arrays.asList())); // Output: []\n        System.out.println(solution.pluck(Arrays.asList(5, 0, 3, 0, 4, 2))); // Output: [0, 1]\n    }\n}\n"}
{"task_id": "Java/149", "generation": "class Solution {\n    public List<String> sorted_list_sum(List<String> lst) {\n        // Step 1: Filter out strings with odd lengths\n        List<String> filteredList = new ArrayList<>();\n        for (String str : lst) {\n            if (str.length() % 2 == 0) { // Check if the length is even\n                filteredList.add(str);\n            }\n        }\n\n        // Step 2: Sort the filtered list\n        Collections.sort(filteredList, new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                // First compare by length\n                int lengthComparison = Integer.compare(s1.length(), s2.length());\n                if (lengthComparison != 0) {\n                    return lengthComparison; // If lengths are different, return that comparison\n                }\n                // If lengths are the same, compare alphabetically\n                return s1.compareTo(s2);\n            }\n        });\n\n        // Step 3: Return the sorted list\n        return filteredList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sorted_list_sum(Arrays.asList(\"aa\", \"a\", \"aaa\"))); // Output: [\"aa\"]\n        System.out.println(solution.sorted_list_sum(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\"))); // Output: [\"ab\", \"cd\"]\n    }\n}\n"}
{"task_id": "Java/128", "generation": "class Solution {\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int sumOfMagnitudes = 0;\n        int productOfSigns = 1;\n\n        for (int num : arr) {\n            if (num > 0) {\n                sumOfMagnitudes += num;\n                productOfSigns *= 1; // Positive sign\n            } else if (num < 0) {\n                sumOfMagnitudes += Math.abs(num);\n                productOfSigns *= -1; // Negative sign\n            } else {\n                productOfSigns = 0; // Zero encountered\n            }\n        }\n\n        return Optional.of(sumOfMagnitudes * productOfSigns);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.prod_signs(Arrays.asList(1, 2, 2, -4))); // Output: Optional[-9]\n        System.out.println(solution.prod_signs(Arrays.asList(0, 1))); // Output: Optional[0]\n        System.out.println(solution.prod_signs(Arrays.asList())); // Output: Optional.empty\n    }\n}\n"}
{"task_id": "Java/2", "generation": "class Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    */\n    public double truncate_number(double number) {\n        // Get the integer part by flooring the number\n        double integerPart = Math.floor(number);\n        // Subtract the integer part from the original number to get the decimal part\n        double decimalPart = number - integerPart;\n        return decimalPart;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.truncate_number(3.5)); // Output: 0.5\n        System.out.println(solution.truncate_number(2.75)); // Output: 0.75\n        System.out.println(solution.truncate_number(5.0)); // Output: 0.0\n    }\n}\n"}
{"task_id": "Java/103", "generation": "class Solution {\n    public Object rounded_avg(int n, int m) {\n        // Check if n is greater than m\n        if (n > m) {\n            return -1;\n        }\n\n        // Calculate the sum of integers from n to m\n        int count = m - n + 1; // Number of integers from n to m\n        int sum = (count * (n + m)) / 2; // Sum of the integers\n        int average = (int) Math.round((double) sum / count); // Calculate and round the average\n\n        // Convert the rounded average to binary\n        return Integer.toBinaryString(average);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.rounded_avg(1, 5)); // Output: \"11\"\n        System.out.println(solution.rounded_avg(7, 5)); // Output: -1\n        System.out.println(solution.rounded_avg(10, 20)); // Output: \"1111\"\n        System.out.println(solution.rounded_avg(20, 33)); // Output: \"11011\"\n    }\n}\n"}
{"task_id": "Java/55", "generation": "class Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    */\n    public int fib(int n) {\n        if (n <= 0) {\n            return 0; // Fibonacci of 0 is 0\n        } else if (n == 1) {\n            return 1; // Fibonacci of 1 is 1\n        }\n\n        int a = 0; // F(0)\n        int b = 1; // F(1)\n        int fib = 0;\n\n        for (int i = 2; i <= n; i++) {\n            fib = a + b; // F(n) = F(n-1) + F(n-2)\n            a = b; // Update F(n-2)\n            b = fib; // Update F(n-1)\n        }\n\n        return fib; // Return F(n)\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fib(10)); // Output: 55\n        System.out.println(solution.fib(1));  // Output: 1\n        System.out.println(solution.fib(8));  // Output: 21\n    }\n}\n"}
{"task_id": "Java/70", "generation": "class Solution {\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        // If the list is empty, return an empty list\n        if (lst.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        // Sort the list\n        Collections.sort(lst);\n        \n        List<Integer> result = new ArrayList<>();\n        int left = 0; // Pointer for the minimum\n        int right = lst.size() - 1; // Pointer for the maximum\n        \n        // Alternate between minimum and maximum\n        while (left <= right) {\n            // Add the minimum value\n            if (left <= right) {\n                result.add(lst.get(left));\n                left++;\n            }\n            // Add the maximum value\n            if (left <= right) {\n                result.add(lst.get(right));\n                right--;\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.strange_sort_list(Arrays.asList(1, 2, 3, 4))); // [1, 4, 2, 3]\n        System.out.println(solution.strange_sort_list(Arrays.asList(5, 5, 5, 5))); // [5, 5, 5, 5]\n        System.out.println(solution.strange_sort_list(Arrays.asList())); // []\n    }\n}\n"}
{"task_id": "Java/34", "generation": "class Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n    */\n    public List<Integer> unique(List<Integer> l) {\n        // Use a Set to store unique elements\n        Set<Integer> uniqueSet = new HashSet<>(l);\n        \n        // Convert the Set back to a List\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n        \n        // Sort the List\n        Collections.sort(uniqueList);\n        \n        // Return the sorted list of unique elements\n        return uniqueList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> result = solution.unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123));\n        System.out.println(result); // Output: [0, 2, 3, 5, 9, 123]\n    }\n}\n"}
{"task_id": "Java/15", "generation": "class Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\n    */\n    public String string_sequence(int n) {\n        StringBuilder result = new StringBuilder();\n        \n        for (int i = 0; i <= n; i++) {\n            result.append(i);\n            if (i < n) {\n                result.append(\" \"); // Append a space if it's not the last number\n            }\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.string_sequence(0)); // Output: \"0\"\n        System.out.println(solution.string_sequence(5)); // Output: \"0 1 2 3 4 5\"\n    }\n}\n"}
{"task_id": "Java/130", "generation": "class Solution {\n    public List<Integer> tri(int n) {\n        List<Integer> tribonacci = new ArrayList<>();\n        \n        // Calculate the first n + 1 numbers of the Tribonacci sequence\n        for (int i = 0; i <= n; i++) {\n            if (i == 0) {\n                tribonacci.add(1); // tri(0) = 1\n            } else if (i == 1) {\n                tribonacci.add(3); // tri(1) = 3\n            } else if (i % 2 == 0) {\n                // Even index\n                tribonacci.add(1 + i / 2);\n            } else {\n                // Odd index\n                int triValue = tribonacci.get(i - 1) + tribonacci.get(i - 2) + (i + 1 < tribonacci.size() ? tribonacci.get(i + 1) : 0);\n                tribonacci.add(triValue);\n            }\n        }\n        \n        return tribonacci;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 3; // Example input\n        List<Integer> result = solution.tri(n);\n        System.out.println(result); // Output: [1, 3, 2, 8]\n    }\n}\n"}
{"task_id": "Java/91", "generation": "import java.util.*;\n\nclass Solution {\n    public int is_bored(String S) {\n        String[] sentences = S.split(\"[.!?]\");\n        int boredomCount = 0;\n        \n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n        \n        return boredomCount;\n    }\n}\n"}
{"task_id": "Java/11", "generation": "class Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    */\n    public String string_xor(String a, String b) {\n        // Ensure both strings are of the same length\n        if (a.length() != b.length()) {\n            throw new IllegalArgumentException(\"Strings must be of the same length\");\n        }\n\n        StringBuilder result = new StringBuilder();\n\n        // Iterate through each character of the strings\n        for (int i = 0; i < a.length(); i++) {\n            // Perform XOR operation\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append('0'); // Same bits result in '0'\n            } else {\n                result.append('1'); // Different bits result in '1'\n            }\n        }\n\n        return result.toString(); // Convert StringBuilder to String\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.string_xor(\"010\", \"110\")); // Output: \"100\"\n    }\n}\n"}
{"task_id": "Java/39", "generation": "class Solution {\n    /**\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    */\n    public int prime_fib(int n) {\n        if (n < 1) {\n            throw new IllegalArgumentException(\"n must be a positive integer.\");\n        }\n\n        List<Integer> primeFibs = new ArrayList<>();\n        int a = 0, b = 1;\n\n        while (primeFibs.size() < n) {\n            int fib = a + b;\n            a = b;\n            b = fib;\n\n            if (isPrime(fib)) {\n                primeFibs.add(fib);\n            }\n        }\n\n        return primeFibs.get(n - 1);\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        if (num <= 3) return true;\n        if (num % 2 == 0 || num % 3 == 0) return false;\n\n        for (int i = 5; i * i <= num; i += 6) {\n            if (num % i == 0 || num % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.prime_fib(1)); // 2\n        System.out.println(solution.prime_fib(2)); // 3\n        System.out.println(solution.prime_fib(3)); // 5\n        System.out.println(solution.prime_fib(4)); // 13\n        System.out.println(solution.prime_fib(5)); // 89\n    }\n}\n"}
{"task_id": "Java/117", "generation": "class Solution {\n    public List<String> select_words(String s, int n) {\n        // Initialize a list to hold the result\n        List<String> result = new ArrayList<>();\n        \n        // Split the string into words using space as a delimiter\n        String[] words = s.split(\" \");\n        \n        // Iterate through each word\n        for (String word : words) {\n            // Count the number of consonants in the word\n            int consonantCount = countConsonants(word);\n            \n            // If the consonant count matches n, add the word to the result\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        \n        return result;\n    }\n\n    // Helper method to count consonants in a word\n    private int countConsonants(String word) {\n        int count = 0;\n        // Convert the word to lower case for easier comparison\n        word = word.toLowerCase();\n        \n        // Define a set of vowels\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u'));\n        \n        // Iterate through each character in the word\n        for (char c : word.toCharArray()) {\n            // Check if the character is a letter and not a vowel\n            if (Character.isLetter(c) && !vowels.contains(c)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.select_words(\"Mary had a little lamb\", 4)); // [\"little\"]\n        System.out.println(solution.select_words(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\n        System.out.println(solution.select_words(\"simple white space\", 2)); // []\n        System.out.println(solution.select_words(\"Hello world\", 4)); // [\"world\"]\n        System.out.println(solution.select_words(\"Uncle sam\", 3)); // [\"Uncle\"]\n    }\n}\n"}
{"task_id": "Java/0", "generation": "class Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> has_close_elements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> has_close_elements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n    */\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        // Sort the list to make it easier to find close elements\n        Collections.sort(numbers);\n        \n        // Iterate through the sorted list and check the difference between consecutive elements\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double difference = numbers.get(i + 1) - numbers.get(i);\n            if (difference < threshold) {\n                return true; // Found two numbers closer than the threshold\n            }\n        }\n        \n        return false; // No such pair found\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.has_close_elements(Arrays.asList(1.0, 2.0, 3.0), 0.5)); // false\n        System.out.println(solution.has_close_elements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)); // true\n    }\n}\n"}
{"task_id": "Java/31", "generation": "class Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    false\n    >>> is_prime(101)\n    true\n    >>> is_prime(11)\n    true\n    >>> is_prime(13441)\n    true\n    >>> is_prime(61)\n    true\n    >>> is_prime(4)\n    false\n    >>> is_prime(1)\n    false\n    */\n    public boolean is_prime(int n) {\n        // Check if n is less than 2\n        if (n <= 1) {\n            return false;\n        }\n        // Check for factors from 2 to the square root of n\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false; // n is divisible by i, hence not prime\n            }\n        }\n        return true; // n is prime\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test cases\n        System.out.println(solution.is_prime(6));      // false\n        System.out.println(solution.is_prime(101));    // true\n        System.out.println(solution.is_prime(11));     // true\n        System.out.println(solution.is_prime(13441));  // true\n        System.out.println(solution.is_prime(61));     // true\n        System.out.println(solution.is_prime(4));      // false\n        System.out.println(solution.is_prime(1));      // false\n    }\n}\n"}
{"task_id": "Java/106", "generation": "class Solution {\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                // Calculate factorial for even i\n                result.add(factorial(i));\n            } else {\n                // Calculate sum from 1 to i for odd i\n                result.add(sumToN(i));\n            }\n        }\n        \n        return result;\n    }\n    \n    private int factorial(int num) {\n        int fact = 1;\n        for (int j = 1; j <= num; j++) {\n            fact *= j;\n        }\n        return fact;\n    }\n    \n    private int sumToN(int num) {\n        return (num * (num + 1)) / 2; // Using the formula for the sum of the first n natural numbers\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.f(5)); // Output: [1, 2, 6, 24, 15]\n    }\n}\n"}
{"task_id": "Java/5", "generation": "class Solution {\n    /**\n    Insert a number 'delimiter' between every two consecutive elements of input list `numbers`\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n    */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i)); // Add the current number\n            \n            // If it's not the last element, add the delimiter\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.intersperse(List.of(), 4)); // []\n        System.out.println(solution.intersperse(Arrays.asList(1, 2, 3), 4)); // [1, 4, 2, 4, 3]\n    }\n}\n"}
{"task_id": "Java/114", "generation": "class Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n    */\n    public int minSubArraySum(List<Integer> nums) {\n        // Initialize variables\n        int currentSum = 0;\n        int minSum = Integer.MAX_VALUE;\n\n        // Iterate through the list\n        for (int num : nums) {\n            currentSum += num; // Add current number to the running sum\n            minSum = Math.min(minSum, currentSum); // Update the minimum sum if needed\n            \n            // If current sum is greater than zero, reset it\n            if (currentSum > 0) {\n                currentSum = 0;\n            }\n        }\n\n        return minSum; // Return the minimum sub-array sum found\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4))); // Output: 1\n        System.out.println(solution.minSubArraySum(Arrays.asList(-1, -2, -3))); // Output: -6\n    }\n}\n"}
{"task_id": "Java/51", "generation": "class Solution {\n    /**\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels(\"\")\n    \"\"\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> remove_vowels(\"abcdef\")\n    \"bcdf\"\n    >>> remove_vowels(\"aaaaa\")\n    \"\"\n    >>> remove_vowels(\"aaBAA\")\n    \"B\"\n    >>> remove_vowels(\"zbcd\")\n    \"zbcd\"\n    */\n    public String remove_vowels(String text) {\n        // Create a StringBuilder to build the result string\n        StringBuilder result = new StringBuilder();\n        \n        // Define a set of vowels for quick lookup\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', \n                                                             'A', 'E', 'I', 'O', 'U'));\n        \n        // Iterate through each character in the input string\n        for (char c : text.toCharArray()) {\n            // If the character is not a vowel, append it to the result\n            if (!vowels.contains(c)) {\n                result.append(c);\n            }\n        }\n        \n        // Convert StringBuilder to String and return\n        return result.toString();\n    }\n    \n    // Main method for testing\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.remove_vowels(\"\")); // \"\"\n        System.out.println(sol.remove_vowels(\"abcdef\\nghijklm\")); // \"bcdf\\nghjklm\"\n        System.out.println(sol.remove_vowels(\"abcdef\")); // \"bcdf\"\n        System.out.println(sol.remove_vowels(\"aaaaa\")); // \"\"\n        System.out.println(sol.remove_vowels(\"aaBAA\")); // \"B\"\n        System.out.println(sol.remove_vowels(\"zbcd\")); // \"zbcd\"\n    }\n}\n"}
{"task_id": "Java/152", "generation": "class Solution {\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        \n        // Iterate through both lists\n        for (int i = 0; i < game.size(); i++) {\n            // Calculate the absolute difference\n            int difference = Math.abs(game.get(i) - guess.get(i));\n            result.add(difference);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.compare(Arrays.asList(1, 2, 3, 4, 5, 1), Arrays.asList(1, 2, 3, 4, 2, -2))); // [0, 0, 0, 0, 3, 3]\n        System.out.println(solution.compare(Arrays.asList(0, 5, 0, 0, 0, 4), Arrays.asList(4, 1, 1, 0, 0, -2))); // [4, 4, 1, 0, 0, 6]\n    }\n}\n"}
{"task_id": "Java/139", "generation": "class Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    */\n    public long special_factorial(int n) {\n        long result = 1; // Initialize result to 1\n        for (int i = 1; i <= n; i++) {\n            result *= factorial(i); // Multiply by the factorial of i\n        }\n        return result; // Return the final result\n    }\n\n    // Helper method to calculate factorial of a number\n    private long factorial(int num) {\n        long fact = 1; // Initialize factorial to 1\n        for (int i = 2; i <= num; i++) {\n            fact *= i; // Calculate factorial\n        }\n        return fact; // Return the factorial\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.special_factorial(4)); // Output: 288\n        System.out.println(solution.special_factorial(5)); // Output: 34560\n    }\n}\n"}
{"task_id": "Java/105", "generation": "class Solution {\n    public List<String> by_length(List<Integer> arr) {\n        // Step 1: Filter the integers between 1 and 9\n        List<Integer> filtered = new ArrayList<>();\n        for (Integer num : arr) {\n            if (num >= 1 && num <= 9) {\n                filtered.add(num);\n            }\n        }\n\n        // Step 2: Sort the filtered list\n        Collections.sort(filtered);\n\n        // Step 3: Reverse the sorted list\n        Collections.reverse(filtered);\n\n        // Step 4: Map each integer to its corresponding word\n        String[] numberWords = {\n            \"\", // Placeholder for index 0\n            \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \n            \"Six\", \"Seven\", \"Eight\", \"Nine\"\n        };\n\n        List<String> result = new ArrayList<>();\n        for (Integer num : filtered) {\n            result.add(numberWords[num]);\n        }\n\n        // Step 5: Return the resulting list of words\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.by_length(Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3))); // [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n        System.out.println(solution.by_length(Arrays.asList())); // []\n        System.out.println(solution.by_length(Arrays.asList(1, -1, 55))); // [\"One\"]\n    }\n}\n"}
{"task_id": "Java/12", "generation": "class Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n    */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        String longestString = strings.get(0);\n        \n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n        \n        return Optional.of(longestString);\n    }\n}\n"}
{"task_id": "Java/7", "generation": "class Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring(List.of(), \"a\")\n    []\n    >>> filter_by_substring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    */\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        // Use stream to filter the list based on the substring\n        return strings.stream()\n                      .filter(s -> s.contains(substring))\n                      .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.filter_by_substring(List.of(), \"a\")); // []\n        System.out.println(solution.filter_by_substring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")); // [\"abc\", \"bacd\", \"array\"]\n    }\n}\n"}
{"task_id": "Java/138", "generation": "class Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == false\n    is_equal_to_sum_even(6) == false\n    is_equal_to_sum_even(8) == true\n    */\n    public boolean is_equal_to_sum_even(int n) {\n        // Check if n is less than 8\n        if (n < 8) {\n            return false;\n        }\n        // Check if n is even\n        return n % 2 == 0;\n    }\n}\n"}
{"task_id": "Java/41", "generation": "class Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right; simultaneously, a different set of n cars\n    are driving right to left. The two sets of cars start out being very far from\n    each other. All cars move at the same speed. Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    */\n    public int car_race_collision(int n) {\n        // Each car moving left to right will collide with each car moving right to left\n        // Therefore, the total number of collisions is n * n\n        return n * n;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 5; // Example input\n        int collisions = solution.car_race_collision(n);\n        System.out.println(\"Number of collisions: \" + collisions); // Output: 25\n    }\n}\n"}
{"task_id": "Java/67", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruit_distribution(String s, int n) {\n        // Split the string to extract the number of apples and oranges\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0]);  // First part is the number of apples\n        int oranges = Integer.parseInt(parts[2]); // Third part is the number of oranges\n        \n        // Calculate the number of mangoes\n        int mangoes = n - apples - oranges;\n        return mangoes;\n    }\n}\n"}
{"task_id": "Java/40", "generation": "class Solution {\n    /**\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triples_sum_to_zero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triples_sum_to_zero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triples_sum_to_zero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triples_sum_to_zero(Arrays.asList(1))\n    false\n     */\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        // Convert the list to an array for easier manipulation\n        Integer[] arr = l.toArray(new Integer[0]);\n        Arrays.sort(arr); // Sort the array\n\n        int n = arr.length;\n\n        for (int i = 0; i < n - 2; i++) {\n            // Skip duplicates for the first element\n            if (i > 0 && arr[i].equals(arr[i - 1])) {\n                continue;\n            }\n\n            int left = i + 1;\n            int right = n - 1;\n\n            while (left < right) {\n                int sum = arr[i] + arr[left] + arr[right];\n\n                if (sum == 0) {\n                    return true; // Found a triplet\n                } else if (sum < 0) {\n                    left++; // Need a larger sum\n                } else {\n                    right--; // Need a smaller sum\n                }\n            }\n        }\n\n        return false; // No triplet found\n    }\n}\n"}
{"task_id": "Java/33", "generation": "class Solution {\n    public List<Integer> sort_third(List<Integer> l) {\n        // List to hold the values at indices divisible by 3\n        List<Integer> divisibleByThreeValues = new ArrayList<>();\n        \n        // Collect values at indices divisible by 3\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                divisibleByThreeValues.add(l.get(i));\n            }\n        }\n        \n        // Sort the collected values\n        Collections.sort(divisibleByThreeValues);\n        \n        // Create a new list to hold the result\n        List<Integer> result = new ArrayList<>(l);\n        \n        // Replace values at indices divisible by 3 with sorted values\n        int sortedIndex = 0;\n        for (int i = 0; i < result.size(); i++) {\n            if (i % 3 == 0) {\n                result.set(i, divisibleByThreeValues.get(sortedIndex));\n                sortedIndex++;\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.sort_third(Arrays.asList(1, 2, 3))); // [1, 2, 3]\n        System.out.println(solution.sort_third(Arrays.asList(5, 6, 3, 4, 8, 9, 2))); // [2, 6, 3, 4, 8, 9, 5]\n    }\n}\n"}
{"task_id": "Java/136", "generation": "class Solution {\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        Optional<Integer> largestNegative = Optional.empty();\n        Optional<Integer> smallestPositive = Optional.empty();\n\n        for (Integer num : lst) {\n            if (num < 0) {\n                if (largestNegative.isEmpty() || num > largestNegative.get()) {\n                    largestNegative = Optional.of(num);\n                }\n            } else if (num > 0) {\n                if (smallestPositive.isEmpty() || num < smallestPositive.get()) {\n                    smallestPositive = Optional.of(num);\n                }\n            }\n        }\n\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(2, 4, 1, 3, 5, 7))); // (Optional.empty(), Optional.of(1))\n        System.out.println(solution.largest_smallest_integers(Arrays.asList())); // (Optional.empty(), Optional.empty())\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(0))); // (Optional.empty(), Optional.empty())\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(-1, -2, 0, 1, 2))); // (Optional.of(-1), Optional.of(1))\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(-5, -3, -1, 0, 2, 4))); // (Optional.of(-1), Optional.of(2))\n    }\n}\n"}
