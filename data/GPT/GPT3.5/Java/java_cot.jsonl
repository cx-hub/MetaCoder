{"task_id": "Java/0", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/1", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> separate_paren_groups(String paren_string) {\n        List<String> separatedGroups = new ArrayList<>();\n        StringBuilder currentGroup = new StringBuilder();\n        Deque<Character> stack = new ArrayDeque<>();\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                stack.pop();\n                if (stack.isEmpty()) {\n                    separatedGroups.add(currentGroup.toString());\n                    currentGroup.setLength(0);\n                } else {\n                    currentGroup.append(c);\n                }\n            }\n        }\n\n        return separatedGroups;\n    }\n}\n"}
{"task_id": "Java/2", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double truncate_number(double number) {\n        // Extract the integer part\n        int integerPart = (int) number;\n        \n        // Calculate the decimal part\n        double decimalPart = number - integerPart;\n        \n        return decimalPart;\n    }\n}\n"}
{"task_id": "Java/3", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/4", "generation": "import java.util.*;\n\nclass Solution {\n    public double mean_absolute_deviation(List<Double> numbers) {\n        double sum = 0;\n        double mean = 0;\n        \n        // Calculate the mean\n        for (double num : numbers) {\n            mean += num;\n        }\n        mean /= numbers.size();\n        \n        // Calculate the sum of absolute differences\n        for (double num : numbers) {\n            sum += Math.abs(num - mean);\n        }\n        \n        // Calculate the Mean Absolute Deviation\n        return sum / numbers.size();\n    }\n}\n"}
{"task_id": "Java/5", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> interspersed = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            interspersed.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                interspersed.add(delimiter);\n            }\n        }\n        return interspersed;\n    }\n}\n"}
{"task_id": "Java/6", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> parse_nested_parens(String paren_string) {\n        List<Integer> maxNestingLevels = new ArrayList<>();\n        String[] groups = paren_string.split(\" \");\n        \n        for (String group : groups) {\n            Stack<Character> stack = new Stack<>();\n            int currentLevel = 0;\n            int maxLevel = 0;\n            \n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    stack.push(c);\n                } else if (c == ')') {\n                    stack.pop();\n                    currentLevel++;\n                    maxLevel = Math.max(maxLevel, currentLevel);\n                }\n            }\n            \n            maxNestingLevels.add(maxLevel);\n        }\n        \n        return maxNestingLevels;\n    }\n}\n"}
{"task_id": "Java/7", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                result.add(str);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/8", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> sum_product(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n\n        if (numbers.isEmpty()) {\n            return Arrays.asList(0, 1);\n        }\n\n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n\n        return Arrays.asList(sum, product);\n    }\n}\n"}
{"task_id": "Java/9", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> rollingMax = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        \n        for (int num : numbers) {\n            max = Math.max(max, num);\n            rollingMax.add(max);\n        }\n        \n        return rollingMax;\n    }\n}\n"}
{"task_id": "Java/10", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    public String make_palindrome(String string) {\n        int end = string.length();\n        while (end > 0) {\n            if (isPalindrome(string.substring(0, end))) {\n                break;\n            }\n            end--;\n        }\n        return string.substring(0, end) + new StringBuilder(string.substring(end)).reverse().toString();\n    }\n}\n"}
{"task_id": "Java/11", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String string_xor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append(\"0\");\n            } else {\n                result.append(\"1\");\n            }\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/12", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longestString = strings.get(0);\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n\n        return Optional.of(longestString);\n    }\n}\n"}
{"task_id": "Java/13", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int greatest_common_divisor(int a, int b) {\n        while (b != 0) {\n            int temp = a % b;\n            a = b;\n            b = temp;\n        }\n        return Math.abs(a);\n    }\n}\n"}
{"task_id": "Java/14", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> all_prefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n}\n"}
{"task_id": "Java/15", "generation": "import java.util.*;\n\nclass Solution {\n    public String string_sequence(int n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            if (i != n) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/16", "generation": "import java.util.*;\n\nclass Solution {\n    public int count_distinct_characters(String string) {\n        Set<Character> distinctChars = new HashSet<>();\n        string = string.toLowerCase();\n\n        for (char ch : string.toCharArray()) {\n            if (Character.isLetter(ch)) {\n                distinctChars.add(ch);\n            }\n        }\n\n        return distinctChars.size();\n    }\n}\n"}
{"task_id": "Java/17", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> parse_music(String string) {\n        Map<String, Integer> noteToBeats = new HashMap<>();\n        noteToBeats.put(\"o\", 4);\n        noteToBeats.put(\"o|\", 2);\n        noteToBeats.put(\".|\", 1);\n\n        List<Integer> beatsList = new ArrayList<>();\n        String[] notes = string.split(\" \");\n\n        for (String note : notes) {\n            beatsList.add(noteToBeats.get(note));\n        }\n\n        return beatsList;\n    }\n}\n"}
{"task_id": "Java/18", "generation": "import java.util.*;\n\nclass Solution {\n    public int how_many_times(String string, String substring) {\n        int count = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/19", "generation": "import java.util.*;\n\nclass Solution {\n    public String sort_numbers(String numbers) {\n        // Create a map to store word to number mapping\n        Map<String, Integer> wordToNumber = new HashMap<>();\n        wordToNumber.put(\"zero\", 0);\n        wordToNumber.put(\"one\", 1);\n        wordToNumber.put(\"two\", 2);\n        wordToNumber.put(\"three\", 3);\n        wordToNumber.put(\"four\", 4);\n        wordToNumber.put(\"five\", 5);\n        wordToNumber.put(\"six\", 6);\n        wordToNumber.put(\"seven\", 7);\n        wordToNumber.put(\"eight\", 8);\n        wordToNumber.put(\"nine\", 9);\n\n        // Tokenize the input string\n        String[] tokens = numbers.split(\" \");\n        \n        // Create a list to store numerical values\n        List<Integer> numericalValues = new ArrayList<>();\n        \n        // Iterate over tokens and map words to numbers\n        for (String token : tokens) {\n            numericalValues.add(wordToNumber.get(token));\n        }\n\n        // Sort the numerical values\n        Collections.sort(numericalValues);\n\n        // Create a list to store sorted word representations\n        List<String> sortedWords = new ArrayList<>();\n\n        // Iterate over sorted numerical values and map numbers to words\n        for (int num : numericalValues) {\n            for (Map.Entry<String, Integer> entry : wordToNumber.entrySet()) {\n                if (entry.getValue() == num) {\n                    sortedWords.add(entry.getKey());\n                    break;\n                }\n            }\n        }\n\n        // Join the sorted word representations into a single string\n        String sortedString = String.join(\" \", sortedWords);\n\n        return sortedString;\n    }\n}\n"}
{"task_id": "Java/20", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        List<Double> closest_pair = new ArrayList<>();\n        closest_pair.add(numbers.get(0));\n        closest_pair.add(numbers.get(1));\n        double distance = Math.abs(numbers.get(1) - numbers.get(0));\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < distance) {\n                    closest_pair.clear();\n                    closest_pair.add(numbers.get(i));\n                    closest_pair.add(numbers.get(j));\n                    distance = Math.abs(numbers.get(i) - numbers.get(j));\n                }\n            }\n        }\n        Collections.sort(closest_pair);\n        return closest_pair;\n    }\n}\n"}
{"task_id": "Java/21", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        \n        List<Double> rescaled = new ArrayList<>();\n        \n        for (double num : numbers) {\n            double new_val = (num - min) / (max - min);\n            rescaled.add(new_val);\n        }\n        \n        return rescaled;\n    }\n}\n"}
{"task_id": "Java/22", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> filter_integers(List<Object> values) {\n        List<Integer> filteredIntegers = new ArrayList<>();\n        \n        for (Object value : values) {\n            if (value instanceof Integer) {\n                filteredIntegers.add((Integer) value);\n            }\n        }\n        \n        return filteredIntegers;\n    }\n}\n"}
{"task_id": "Java/23", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int strlen(String string) {\n        int length = 0;\n        \n        if (string.isEmpty()) {\n            return 0;\n        }\n        \n        for (int i = 0; i < string.length(); i++) {\n            length++;\n        }\n        \n        return length;\n    }\n}\n"}
{"task_id": "Java/24", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largest_divisor(int n) {\n        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return -1; // No divisor found\n    }\n}\n"}
{"task_id": "Java/25", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}\n"}
{"task_id": "Java/26", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        Set<Integer> seen = new HashSet<>();\n        List<Integer> result = new ArrayList<>();\n        \n        for (Integer num : numbers) {\n            if (!seen.contains(num)) {\n                result.add(num);\n                seen.add(num);\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/27", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String flip_case(String string) {\n        StringBuilder result = new StringBuilder();\n        for (char ch : string.toCharArray()) {\n            if (Character.isLowerCase(ch)) {\n                result.append(Character.toUpperCase(ch));\n            } else if (Character.isUpperCase(ch)) {\n                result.append(Character.toLowerCase(ch));\n            } else {\n                result.append(ch);\n            }\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/28", "generation": "import java.util.*;\n\nclass Solution {\n    public String concatenate(List<String> strings) {\n        StringBuilder result = new StringBuilder();\n        for (String str : strings) {\n            result.append(str);\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/29", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        List<String> filteredList = new ArrayList<>();\n        for (String str : strings) {\n            if (str.startsWith(prefix)) {\n                filteredList.add(str);\n            }\n        }\n        return filteredList;\n    }\n}\n"}
{"task_id": "Java/30", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> get_positive(List<Integer> l) {\n        List<Integer> positiveNumbers = new ArrayList<>();\n        for (int num : l) {\n            if (num > 0) {\n                positiveNumbers.add(num);\n            }\n        }\n        return positiveNumbers;\n    }\n}\n"}
{"task_id": "Java/31", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_prime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/32", "generation": "import java.util.*;\n\nclass Solution {\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n\n    public double find_zero(List<Double> xs) {\n        if (xs.size() % 2 != 0 || xs.get(xs.size() - 1) == 0) {\n            System.out.println(\"Invalid input: List must have even number of coefficients with largest non-zero coefficient.\");\n            return Double.MIN_VALUE;\n        }\n\n        double lowerBound = -1000;\n        double upperBound = 1000;\n        double epsilon = 0.0001;\n\n        while (upperBound - lowerBound > epsilon) {\n            double mid = (lowerBound + upperBound) / 2;\n            double midValue = poly(xs, mid);\n\n            if (midValue == 0) {\n                return mid;\n            } else if (midValue * poly(xs, lowerBound) < 0) {\n                upperBound = mid;\n            } else {\n                lowerBound = mid;\n            }\n        }\n\n        return (lowerBound + upperBound) / 2;\n    }\n}\n"}
{"task_id": "Java/33", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> sort_third(List<Integer> l) {\n        List<Integer> sortedThirds = new ArrayList<>();\n        List<Integer> temp = new ArrayList<>();\n\n        for (int i = 0; i < l.size(); i++) {\n            if ((i + 1) % 3 == 0) {\n                temp.add(l.get(i));\n            }\n        }\n\n        Collections.sort(temp);\n\n        int tempIndex = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if ((i + 1) % 3 == 0) {\n                sortedThirds.add(temp.get(tempIndex));\n                tempIndex++;\n            } else {\n                sortedThirds.add(l.get(i));\n            }\n        }\n\n        return sortedThirds;\n    }\n}\n"}
{"task_id": "Java/34", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> uniqueSet = new HashSet<>(l);\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n        Collections.sort(uniqueList);\n        return uniqueList;\n    }\n}\n"}
{"task_id": "Java/35", "generation": "import java.util.*;\n\nclass Solution {\n    public int max_element(List<Integer> l) {\n        int maxElement = Integer.MIN_VALUE;\n        for (int num : l) {\n            maxElement = Math.max(maxElement, num);\n        }\n        return maxElement;\n    }\n}\n"}
{"task_id": "Java/36", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fizz_buzz(int n) {\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String numStr = String.valueOf(i);\n                for (char c : numStr.toCharArray()) {\n                    if (c == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/37", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> sort_even(List<Integer> l) {\n        List<Integer> sortedEven = new ArrayList<>();\n        List<Integer> oddIndices = new ArrayList<>();\n\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                sortedEven.add(l.get(i));\n            } else {\n                oddIndices.add(l.get(i));\n            }\n        }\n\n        Collections.sort(sortedEven);\n\n        List<Integer> modifiedList = new ArrayList<>();\n        int evenIndex = 0;\n        int oddIndex = 0;\n\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                modifiedList.add(sortedEven.get(evenIndex));\n                evenIndex++;\n            } else {\n                modifiedList.add(oddIndices.get(oddIndex));\n                oddIndex++;\n            }\n        }\n\n        return modifiedList;\n    }\n}\n"}
{"task_id": "Java/38", "generation": "import java.util.*;\n\nclass Solution {\n    public String encodeCyclic(String s) {\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public String decodeCyclic(String s) {\n        StringBuilder decodedString = new StringBuilder();\n        for (int i = 0; i < s.length(); i += 3) {\n            String group = s.substring(i, Math.min(i + 3, s.length()));\n            if (group.length() == 3) {\n                group = group.charAt(2) + group.substring(0, 2);\n            }\n            decodedString.append(group);\n        }\n        return decodedString.toString();\n    }\n}\n"}
{"task_id": "Java/39", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int prime_fib(int n) {\n        int count = 0;\n        int n1 = 0, n2 = 1, fib = 0;\n        \n        while (count < n) {\n            fib = n1 + n2;\n            n1 = n2;\n            n2 = fib;\n            \n            if (isPrime(fib)) {\n                count++;\n                if (count == n) {\n                    return fib;\n                }\n            }\n        }\n        return -1; // In case n is less than 1\n    }\n    \n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/40", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/41", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int car_race_collision(int n) {\n        int collisions = 0;\n        int left = 0, right = n;\n        \n        while (left < n && right > 0) {\n            collisions++;\n            left++;\n            right--;\n        }\n        \n        return collisions;\n    }\n}\n"}
{"task_id": "Java/42", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> incr_list(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int num : l) {\n            result.add(num + 1);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/43", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for (int x : l) {\n            if (set.contains(-x)) {\n                return true;\n            }\n            set.add(x);\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/44", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String change_base(int x, int base) {\n        if (x == 0) {\n            return \"0\";\n        }\n        \n        StringBuilder result = new StringBuilder();\n        \n        while (x > 0) {\n            int remainder = x % base;\n            result.insert(0, Integer.toString(remainder));\n            x /= base;\n        }\n        \n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/45", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangle_area(double a, double h) {\n        double area = 0.5 * a * h;\n        return area;\n    }\n}\n"}
{"task_id": "Java/46", "generation": "import java.util.*;\n\nclass Solution {\n    public int fib4(int n) {\n        if (n == 0 || n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        int[] fib4Arr = new int[n + 1];\n        fib4Arr[0] = 0;\n        fib4Arr[1] = 0;\n        fib4Arr[2] = 2;\n        fib4Arr[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            fib4Arr[i] = fib4Arr[i - 1] + fib4Arr[i - 2] + fib4Arr[i - 3] + fib4Arr[i - 4];\n        }\n        return fib4Arr[n];\n    }\n}\n"}
{"task_id": "Java/47", "generation": "import java.util.*;\n\nclass Solution {\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 != 0) {\n            return l.get(size / 2);\n        } else {\n            int mid1 = l.get(size / 2 - 1);\n            int mid2 = l.get(size / 2);\n            return (double) (mid1 + mid2) / 2;\n        }\n    }\n}\n"}
{"task_id": "Java/48", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_palindrome(String text) {\n        int start = 0;\n        int end = text.length() - 1;\n        \n        while (start < end) {\n            if (text.charAt(start) != text.charAt(end)) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/49", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int modp(int n, int p) {\n        int result = 1;\n        for (int i = 0; i < n; i++) {\n            result = (result * 2) % p;\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/50", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public String decode_shift(String s) {\n        StringBuilder decoded = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            decoded.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26));\n        }\n        return decoded.toString();\n    }\n}\n"}
{"task_id": "Java/51", "generation": "import java.util.*;\n\nclass Solution {\n    public String remove_vowels(String text) {\n        String result = \"\";\n        for (char ch : text.toCharArray()) {\n            if (!\"AEIOUaeiou\".contains(String.valueOf(ch))) {\n                result += ch;\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/52", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean below_threshold(List<Integer> l, int t) {\n        boolean result = true;\n        for (int num : l) {\n            if (num >= t) {\n                result = false;\n                break;\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/53", "generation": "### **Step 1: Understand and Clarify**\nThe task is to create a function that takes two integers as input and returns their sum.\n\n### **Step 2: Algorithm/Method Selection**\nSince we only need to add two numbers, a simple addition operation will be used.\n\n### **Step 3: Pseudocode Creation**\n1. **Function** add(x, y):\n2. &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp"}
{"task_id": "Java/54", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean same_chars(String s0, String s1) {\n        Map<Character, Integer> freqMap0 = new HashMap<>();\n        Map<Character, Integer> freqMap1 = new HashMap<>();\n\n        for (char c : s0.toCharArray()) {\n            freqMap0.put(c, freqMap0.getOrDefault(c, 0) + 1);\n        }\n\n        for (char c : s1.toCharArray()) {\n            freqMap1.put(c, freqMap1.getOrDefault(c, 0) + 1);\n        }\n\n        return freqMap0.equals(freqMap1);\n    }\n}\n"}
{"task_id": "Java/55", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0, b = 1;\n        for (int i = 2; i <= n; i++) {\n            int sum = a + b;\n            a = b;\n            b = sum;\n        }\n        return b;\n    }\n}\n"}
{"task_id": "Java/56", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean correct_bracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        \n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '<') {\n                stack.push(bracket);\n            } else if (bracket == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/57", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean monotonic(List<Integer> l) {\n        boolean increasing = true;\n        boolean decreasing = true;\n        \n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n        }\n        \n        return increasing || decreasing;\n    }\n}\n"}
{"task_id": "Java/58", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set = new HashSet<>();\n        List<Integer> commonElements = new ArrayList<>();\n        \n        for (int num : l1) {\n            set.add(num);\n        }\n        \n        for (int num : l2) {\n            if (set.contains(num)) {\n                commonElements.add(num);\n            }\n        }\n        \n        Set<Integer> uniqueCommon = new HashSet<>(commonElements);\n        List<Integer> sortedCommon = new ArrayList<>(uniqueCommon);\n        Collections.sort(sortedCommon);\n        \n        return sortedCommon;\n    }\n}\n"}
{"task_id": "Java/59", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largest_prime_factor(int n) {\n        int maxPrime = 2;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                boolean isPrime = true;\n                for (int j = 2; j <= Math.sqrt(i); j++) {\n                    if (i % j == 0) {\n                        isPrime = false;\n                        break;\n                    }\n                }\n                if (isPrime) {\n                    maxPrime = Math.max(maxPrime, i);\n                }\n            }\n        }\n        return maxPrime;\n    }\n}\n"}
{"task_id": "Java/60", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_to_n(int n) {\n        return (n * (n + 1)) / 2;\n    }\n}\n"}
{"task_id": "Java/61", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean correct_bracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        \n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '(') {\n                stack.push(bracket);\n            } else if (bracket == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/62", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> derivativeCoefficients = new ArrayList<>();\n        \n        for (int i = 1; i < xs.size(); i++) {\n            int derivative = xs.get(i) * i;\n            derivativeCoefficients.add(derivative);\n        }\n        \n        return derivativeCoefficients;\n    }\n}\n"}
{"task_id": "Java/63", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        } else {\n            return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n        }\n    }\n}\n"}
{"task_id": "Java/64", "generation": "import java.util.*;\n\nclass Solution {\n    public int vowels_count(String s) {\n        int count = 0;\n        String lowercaseStr = s.toLowerCase();\n        \n        for (int i = 0; i < lowercaseStr.length(); i++) {\n            char ch = lowercaseStr.charAt(i);\n            if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n                count++;\n            } else if (ch == 'y' && i == lowercaseStr.length() - 1) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/65", "generation": "import java.util.*;\n\nclass Solution {\n    public String circular_shift(int x, int shift) {\n        String numStr = String.valueOf(x);\n        int n = numStr.length();\n        \n        if (shift > n) {\n            shift %= n;\n        }\n        \n        if (shift == 0) {\n            return numStr;\n        }\n        \n        String shiftedStr = numStr.substring(n - shift) + numStr.substring(0, n - shift);\n        return shiftedStr;\n    }\n}\n"}
{"task_id": "Java/66", "generation": "import java.util.*;\n\nclass Solution {\n    public int digitSum(String s) {\n        int sum = 0;\n        for (char ch : s.toCharArray()) {\n            if (Character.isUpperCase(ch)) {\n                sum += (int) ch;\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/67", "generation": "import java.util.*;\n\nclass Solution {\n    public int fruit_distribution(String s, int n) {\n        // Split the string to extract the numbers of apples and oranges\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[3]);\n\n        // Calculate the number of mango fruits\n        int mangoes = n - apples - oranges;\n\n        return mangoes;\n    }\n}\n"}
{"task_id": "Java/68", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        int smallestEven = Integer.MAX_VALUE;\n        int index = -1;\n\n        for (int i = 0; i < arr.size(); i++) {\n            int current = arr.get(i);\n            if (current % 2 == 0 && current < smallestEven) {\n                smallestEven = current;\n                index = i;\n            } else if (current % 2 == 0 && current == smallestEven && i < index) {\n                index = i;\n            }\n        }\n\n        if (index != -1) {\n            result.add(smallestEven);\n            result.add(index);\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/69", "generation": "import java.util.*;\n\nclass Solution {\n    public int search(List<Integer> lst) {\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        int maxValue = -1;\n\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int num = entry.getKey();\n            int frequency = entry.getValue();\n\n            if (frequency >= num && num > maxValue) {\n                maxValue = num;\n            }\n        }\n\n        return maxValue;\n    }\n}\n"}
{"task_id": "Java/70", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        Collections.sort(lst);\n        List<Integer> result = new ArrayList<>();\n        int start = 0, end = lst.size() - 1;\n        \n        while (start <= end) {\n            result.add(lst.get(start));\n            if (start != end) {\n                result.add(lst.get(end));\n            }\n            start++;\n            end--;\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/71", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangle_area(double a, double b, double c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2;\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            return -1;\n        }\n    }\n}\n"}
{"task_id": "Java/72", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean will_it_fly(List<Integer> q, int w) {\n        // Check if the list is palindromic\n        boolean isBalanced = true;\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (!q.get(i).equals(q.get(q.size() - i - 1))) {\n                isBalanced = false;\n                break;\n            }\n        }\n\n        // Calculate the sum of elements\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n\n        // Check if it will fly\n        return isBalanced && sum <= w;\n    }\n}\n"}
{"task_id": "Java/73", "generation": "import java.util.*;\n\nclass Solution {\n    public int smallest_change(List<Integer> arr) {\n        int start = 0;\n        int end = arr.size() - 1;\n        int changes = 0;\n\n        while (start < end) {\n            if (!arr.get(start).equals(arr.get(end))) {\n                changes++;\n            }\n            start++;\n            end--;\n        }\n\n        return changes;\n    }\n}\n"}
{"task_id": "Java/74", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        int totalChars1 = lst1.stream().mapToInt(s -> s.length()).sum();\n        int totalChars2 = lst2.stream().mapToInt(s -> s.length()).sum();\n\n        if (totalChars1 < totalChars2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n"}
{"task_id": "Java/75", "generation": "import java.util.*;\n\nclass Solution {\n    // Function to generate all prime numbers less than 100\n    public List<Integer> generatePrimes() {\n        List<Integer> primes = new ArrayList<>();\n        boolean[] isPrime = new boolean[100];\n        Arrays.fill(isPrime, true);\n\n        for (int p = 2; p * p < 100; p++) {\n            if (isPrime[p]) {\n                for (int i = p * p; i < 100; i += p) {\n                    isPrime[i] = false;\n                }\n            }\n        }\n\n        for (int i = 2; i < 100; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    // Function to check if a number is prime\n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Function to check if the given number is the multiplication of 3 prime numbers\n    public boolean is_multiply_prime(int a) {\n        List<Integer> primes = generatePrimes();\n\n        for (int i = 0; i < primes.size(); i++) {\n            for (int j = i + 1; j < primes.size(); j++) {\n                for (int k = j + 1; k < primes.size(); k++) {\n                    if (a == primes.get(i) * primes.get(j) * primes.get(k)) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/76", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_simple_power(int x, int n) {\n        int temp = x;\n        while (temp % n == 0 && temp > 1) {\n            temp /= n;\n        }\n        return temp == 1;\n    }\n}\n"}
{"task_id": "Java/77", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean iscube(int a) {\n        double cubeRoot = Math.cbrt(a);\n        return cubeRoot == Math.floor(cubeRoot);\n    }\n}\n"}
{"task_id": "Java/78", "generation": "import java.util.*;\n\nclass Solution {\n    public int hex_key(String num) {\n        int count = 0;\n\n        // Helper function to check if a character is a prime hexadecimal digit\n        boolean isPrimeHexDigit(char c) {\n            return c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D';\n        }\n\n        for (int i = 0; i < num.length(); i++) {\n            if (isPrimeHexDigit(num.charAt(i))) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n}\n"}
{"task_id": "Java/79", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String decimal_to_binary(int decimal) {\n        StringBuilder binary = new StringBuilder();\n        binary.append(\"db\");\n\n        // Convert decimal to binary\n        while (decimal > 0) {\n            int bit = decimal % 2;\n            binary.insert(2, bit); // Insert at index 2 to maintain 'db' at the beginning\n            decimal /= 2;\n        }\n\n        binary.append(\"db\");\n        return binary.toString();\n    }\n}\n"}
{"task_id": "Java/80", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_happy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i <= s.length() - 3; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/81", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double gpa : grades) {\n            if (gpa == 4.0) {\n                result.add(\"A+\");\n            } else if (gpa > 3.7) {\n                result.add(\"A\");\n            } else if (gpa > 3.3) {\n                result.add(\"A-\");\n            } else if (gpa > 3.0) {\n                result.add(\"B+\");\n            } else if (gpa > 2.7) {\n                result.add(\"B\");\n            } else if (gpa > 2.3) {\n                result.add(\"B-\");\n            } else if (gpa > 2.0) {\n                result.add(\"C+\");\n            } else if (gpa > 1.7) {\n                result.add(\"C\");\n            } else if (gpa > 1.3) {\n                result.add(\"C-\");\n            } else if (gpa > 1.0) {\n                result.add(\"D+\");\n            } else if (gpa > 0.7) {\n                result.add(\"D\");\n            } else if (gpa >= 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/82", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean prime_length(String string) {\n        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/83", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int starts_one_ends(int n) {\n        int total = (int) Math.pow(10, n);\n        int notStartEndOne = 8 * (int) Math.pow(9, n - 1);\n        return total - notStartEndOne;\n    }\n}\n"}
{"task_id": "Java/84", "generation": "import java.util.*;\n\nclass Solution {\n    public String solve(int N) {\n        int sum = 0;\n        \n        // Calculate the sum of digits\n        while (N > 0) {\n            sum += N % 10;\n            N /= 10;\n        }\n        \n        // Convert sum to binary string\n        return Integer.toBinaryString(sum);\n    }\n}\n"}
{"task_id": "Java/85", "generation": "import java.util.*;\n\nclass Solution {\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/86", "generation": "import java.util.*;\n\nclass Solution {\n    public String anti_shuffle(String s) {\n        String[] words = s.split(\" \");\n        StringBuilder result = new StringBuilder();\n\n        for (int i = 0; i < words.length; i++) {\n            char[] chars = words[i].toCharArray();\n            Arrays.sort(chars);\n            result.append(new String(chars));\n\n            if (i < words.length - 1) {\n                result.append(\" \");\n            }\n        }\n\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/87", "generation": "import java.util.*;\n\nclass Solution {\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    List<Integer> coordinates = new ArrayList<>();\n                    coordinates.add(i);\n                    coordinates.add(j);\n                    result.add(coordinates);\n                }\n            }\n        }\n        \n        result.sort((a, b) -> {\n            if (a.get(0).equals(b.get(0))) {\n                return b.get(1).compareTo(a.get(1));\n            } else {\n                return a.get(0).compareTo(b.get(0));\n            }\n        });\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/88", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> array) {\n        List<Integer> sortedArray = new ArrayList<>(array);\n        \n        if (sortedArray.isEmpty()) {\n            return sortedArray;\n        }\n        \n        int sum = sortedArray.get(0) + sortedArray.get(sortedArray.size() - 1);\n        \n        if (sum % 2 == 0) {\n            Collections.sort(sortedArray, Collections.reverseOrder());\n        } else {\n            Collections.sort(sortedArray);\n        }\n        \n        return sortedArray;\n    }\n}\n"}
{"task_id": "Java/89", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encrypt(String s) {\n        StringBuilder result = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            char encryptedChar = (char) (c + 2 * 2);\n            result.append(encryptedChar);\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/90", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        if (lst.isEmpty() || lst.size() == 1) {\n            return Optional.empty();\n        }\n\n        List<Integer> sortedList = new ArrayList<>(new HashSet<>(lst)); // Remove duplicates\n        Collections.sort(sortedList);\n\n        int count = 0;\n        for (int i = 1; i < sortedList.size(); i++) {\n            if (!sortedList.get(i).equals(sortedList.get(i - 1))) {\n                count++;\n            }\n            if (count == 2) {\n                return Optional.of(sortedList.get(i));\n            }\n        }\n\n        return Optional.empty();\n    }\n}\n"}
{"task_id": "Java/91", "generation": "import java.util.*;\n\nclass Solution {\n    public int is_bored(String S) {\n        int boredomCount = 0;\n        String[] sentences = S.split(\"[.?!]\");\n        \n        for (String sentence : sentences) {\n            String trimmedSentence = sentence.trim();\n            if (trimmedSentence.startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n        \n        return boredomCount;\n    }\n}\n"}
{"task_id": "Java/92", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean any_int(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int a = (int) x;\n            int b = (int) y;\n            int c = (int) z;\n            if (a == b + c || b == a + c || c == a + b) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/93", "generation": "import java.util.*;\n\nclass Solution {\n    public String encode(String message) {\n        StringBuilder encodedMessage = new StringBuilder();\n        for (char ch : message.toCharArray()) {\n            if (Character.isLetter(ch)) {\n                char modifiedChar = Character.isUpperCase(ch) ? Character.toLowerCase(ch) : Character.toUpperCase(ch);\n                if (\"AEIOUaeiou\".indexOf(modifiedChar) != -1) {\n                    modifiedChar += 2;\n                    if (modifiedChar > 'Z' && modifiedChar < 'a') {\n                        modifiedChar -= 26;\n                    } else if (modifiedChar > 'z') {\n                        modifiedChar -= 26;\n                    }\n                }\n                encodedMessage.append(modifiedChar);\n            } else {\n                encodedMessage.append(ch);\n            }\n        }\n        return encodedMessage.toString();\n    }\n}\n"}
{"task_id": "Java/94", "generation": "import java.util.*;\n\nclass Solution {\n    public int sumOfDigitsOfLargestPrime(List<Integer> lst) {\n        int largestPrime = 0;\n        int sum = 0;\n\n        for (int num : lst) {\n            if (isPrime(num) && num > largestPrime) {\n                largestPrime = num;\n            }\n        }\n\n        while (largestPrime > 0) {\n            sum += largestPrime % 10;\n            largestPrime /= 10;\n        }\n\n        return sum;\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/95", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        boolean isLowerCase = true;\n        boolean isUpperCase = true;\n\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String keyStr = (String) key;\n            if (!keyStr.equals(keyStr.toLowerCase())) {\n                isLowerCase = false;\n            }\n            if (!keyStr.equals(keyStr.toUpperCase())) {\n                isUpperCase = false;\n            }\n        }\n\n        return isLowerCase || isUpperCase;\n    }\n}\n"}
{"task_id": "Java/96", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> count_up_to(int n) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        \n        return result;\n    }\n    \n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/97", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int multiply(int a, int b) {\n        int unitA = Math.abs(a % 10);\n        int unitB = Math.abs(b % 10);\n        return unitA * unitB;\n    }\n}\n"}
{"task_id": "Java/98", "generation": "import java.util.*;\n\nclass Solution {\n    public int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (i % 2 == 0 && \"AEIOU\".indexOf(c) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/99", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int closest_integer(String value) {\n        double num = Double.parseDouble(value);\n        int floor = (int) Math.floor(num);\n        int ceil = (int) Math.ceil(num);\n\n        double diff1 = num - floor;\n        double diff2 = ceil - num;\n\n        if (diff1 < diff2) {\n            return floor;\n        } else if (diff1 > diff2) {\n            return ceil;\n        } else {\n            if (num < 0) {\n                return ceil;\n            } else {\n                return floor;\n            }\n        }\n    }\n}\n"}
{"task_id": "Java/100", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> stones = new ArrayList<>();\n        int stonesCount = n;\n        \n        for (int i = 0; i < n; i++) {\n            stones.add(stonesCount);\n            stonesCount += (stonesCount % 2 == 0) ? 1 : 2;\n        }\n        \n        return stones;\n    }\n}\n"}
{"task_id": "Java/101", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> words_string(String s) {\n        List<String> wordsList = new ArrayList<>();\n        String[] words = s.split(\"[,\\\\s]+\"); // Split based on commas or spaces\n        for (String word : words) {\n            wordsList.add(word);\n        }\n        return wordsList;\n    }\n}\n"}
{"task_id": "Java/102", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int choose_num(int x, int y) {\n        int result = -1;\n        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/103", "generation": "import java.util.*;\n\nclass Solution {\n    public Object rounded_avg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n\n        int sum = 0;\n        int count = m - n + 1;\n\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n\n        int avg = Math.round((float) sum / count);\n        String binary = Integer.toBinaryString(avg);\n\n        return binary;\n    }\n}\n"}
{"task_id": "Java/104", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> unique_digits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int num : x) {\n            String numStr = String.valueOf(num);\n            boolean hasEvenDigit = false;\n            \n            for (char digit : numStr.toCharArray()) {\n                if (digit % 2 == 0) {\n                    hasEvenDigit = true;\n                    break;\n                }\n            }\n            \n            if (!hasEvenDigit) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        return result;\n    }\n}\n"}
{"task_id": "Java/105", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> by_length(List<Integer> arr) {\n        List<String> names = Arrays.asList(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n        List<Integer> filtered = new ArrayList<>();\n        for (int num : arr) {\n            if (num >= 1 && num <= 9) {\n                filtered.add(num);\n            }\n        }\n        Collections.sort(filtered);\n        Collections.reverse(filtered);\n        \n        List<String> result = new ArrayList<>();\n        for (int num : filtered) {\n            result.add(names.get(num - 1));\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/106", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sumOfNumbers(i));\n            }\n        }\n        return result;\n    }\n\n    private int factorial(int num) {\n        if (num == 0) {\n            return 1;\n        }\n        int fact = 1;\n        for (int i = 1; i <= num; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n\n    private int sumOfNumbers(int num) {\n        return num * (num + 1) / 2;\n    }\n}\n"}
{"task_id": "Java/107", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> even_odd_palindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int evenCount = 0, oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n\n    public boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0, right = str.length() - 1;\n\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/108", "generation": "import java.util.*;\n\nclass Solution {\n    public int count_nums(List<Integer> arr) {\n        int count = 0;\n        \n        for (int num : arr) {\n            int sum = 0;\n            int n = Math.abs(num); // Convert to positive number\n            \n            while (n != 0) {\n                sum += n % 10; // Add last digit to sum\n                n /= 10; // Remove last digit\n            }\n            \n            if (sum > 0) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/109", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean move_one_ball(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        List<Integer> sorted = new ArrayList<>(arr);\n        Collections.sort(sorted);\n\n        for (int i = 0; i < arr.size(); i++) {\n            Collections.rotate(arr, 1);\n            if (arr.equals(sorted)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n"}
{"task_id": "Java/110", "generation": "import java.util.*;\n\nclass Solution {\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int oddCount = 0;\n        \n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCount++;\n            }\n        }\n        \n        if (oddCount > 1) {\n            return \"NO\";\n        }\n        \n        for (int num : lst2) {\n            if (num % 2 != 0) {\n                oddCount++;\n            }\n        }\n        \n        if (oddCount == 1) {\n            return \"YES\";\n        } else if (oddCount == 0) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}\n"}
{"task_id": "Java/111", "generation": "import java.util.*;\n\nclass Solution {\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> letterCount = new HashMap<>();\n        String[] letters = test.split(\" \");\n\n        for (String letter : letters) {\n            letterCount.put(letter, letterCount.getOrDefault(letter, 0) + 1);\n        }\n\n        int maxCount = 0;\n        for (int count : letterCount.values()) {\n            maxCount = Math.max(maxCount, count);\n        }\n\n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : letterCount.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/112", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Object> reverse_delete(String s, String c) {\n        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            if (c.indexOf(s.charAt(i)) == -1) {\n                result += s.charAt(i);\n            }\n        }\n        \n        boolean isPalindrome = true;\n        int start = 0, end = result.length() - 1;\n        while (start < end) {\n            if (result.charAt(start) != result.charAt(end)) {\n                isPalindrome = false;\n                break;\n            }\n            start++;\n            end--;\n        }\n        \n        List<Object> output = new ArrayList<>();\n        output.add(result);\n        output.add(isPalindrome);\n        \n        return output;\n    }\n}\n"}
{"task_id": "Java/113", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        \n        for (String str : lst) {\n            int count = 0;\n            for (char ch : str.toCharArray()) {\n                int digit = ch - '0';\n                if (digit % 2 != 0) {\n                    count++;\n                }\n            }\n            result.add(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + str + \" of the \" + count + \"nput.\");\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/114", "generation": "import java.util.*;\n\nclass Solution {\n    public int minSubArraySum(List<Integer> nums) {\n        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n\n        for (int num : nums) {\n            currentSum = Math.min(num, num + currentSum);\n            minSum = Math.min(minSum, currentSum);\n        }\n\n        return minSum;\n    }\n}\n"}
{"task_id": "Java/115", "generation": "import java.util.*;\n\nclass Solution {\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        int count = 0;\n        int totalWater = 0;\n\n        for (List<Integer> row : grid) {\n            for (int well : row) {\n                if (well == 1) {\n                    int diff = well - capacity;\n                    if (diff > 0) {\n                        count += diff;\n                        well = diff;\n                    }\n                    totalWater += well;\n                }\n            }\n        }\n\n        return count;\n    }\n}\n"}
{"task_id": "Java/116", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> arr) {\n        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int countA = Integer.bitCount(Math.abs(a));\n                int countB = Integer.bitCount(Math.abs(b));\n                if (countA == countB) {\n                    return a - b;\n                }\n                return countA - countB;\n            }\n        });\n        return arr;\n    }\n}\n"}
{"task_id": "Java/117", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> select_words(String s, int n) {\n        List<String> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n        \n        for (String word : words) {\n            int consonant_count = 0;\n            for (char c : word.toCharArray()) {\n                if (Character.isLetter(c) && \"aeiouAEIOU\".indexOf(c) == -1) {\n                    consonant_count++;\n                }\n            }\n            if (consonant_count == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/118", "generation": "import java.util.*;\n\nclass Solution {\n    public String get_closest_vowel(String word) {\n        String vowels = \"aeiouAEIOU\";\n        String result = \"\";\n        for (int i = word.length() - 2; i > 0; i--) {\n            char currentChar = word.charAt(i);\n            if (vowels.indexOf(currentChar) != -1) {\n                return result.isEmpty() ? \"\" : String.valueOf(currentChar);\n            } else if (Character.isLetter(currentChar)) {\n                result = String.valueOf(currentChar);\n            }\n        }\n        return \"\";\n    }\n}\n"}
{"task_id": "Java/119", "generation": "import java.util.*;\n\nclass Solution {\n    public String match_parens(List<String> lst) {\n        String concatenated = lst.get(0) + lst.get(1);\n        Stack<Character> stack = new Stack<>();\n\n        for (char c : concatenated.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return \"No\";\n                }\n                stack.pop();\n            }\n        }\n\n        return stack.isEmpty() ? \"Yes\" : \"No\";\n    }\n}\n"}
{"task_id": "Java/120", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        Collections.sort(arr, Collections.reverseOrder());\n        return arr.subList(0, k);\n    }\n}\n"}
{"task_id": "Java/121", "generation": "import java.util.*;\n\nclass Solution {\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/122", "generation": "import java.util.*;\n\nclass Solution {\n    public int add_elements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (Math.abs(arr.get(i)) < 100) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/123", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> get_odd_collatz(int n) {\n        List<Integer> result = new ArrayList<>();\n        result.add(n);\n\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n /= 2;\n            } else {\n                n = 3 * n + 1;\n                if (n % 2 != 0) {\n                    result.add(n);\n                }\n            }\n        }\n\n        Collections.sort(result);\n        return result;\n    }\n}\n"}
{"task_id": "Java/124", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean valid_date(String date) {\n        if (date.isEmpty()) {\n            return false;\n        }\n\n        String[] dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n            return false;\n        }\n\n        int day = Integer.parseInt(dateParts[1]);\n        int month = Integer.parseInt(dateParts[0]);\n        int year = Integer.parseInt(dateParts[2]);\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 || day > 31) {\n                return false;\n            }\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return false;\n            }\n        } else if (month == 2) {\n            if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {\n                if (day < 1 || day > 29) {\n                    return false;\n                }\n            } else {\n                if (day < 1 || day > 28) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/125", "generation": "import java.util.*;\n\nclass Solution {\n    public Object split_words(String txt) {\n        List<String> words = new ArrayList<>();\n        if (txt.contains(\" \")) {\n            words = Arrays.asList(txt.split(\" \"));\n            return words;\n        } else if (txt.contains(\",\")) {\n            words = Arrays.asList(txt.split(\",\"));\n            return words;\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 != 0) {\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n}\n"}
{"task_id": "Java/126", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean is_sorted(List<Integer> lst) {\n        int prev = Integer.MIN_VALUE;\n        int count = 1;\n\n        for (int num : lst) {\n            if (num == prev) {\n                count++;\n            } else if (num < prev) {\n                return false;\n            } else {\n                count = 1;\n            }\n\n            if (count > 2) {\n                return false;\n            }\n\n            prev = num;\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/127", "generation": "import java.util.*;\n\nclass Solution {\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n        \n        if (start > end) {\n            return \"NO\";\n        }\n        \n        int length = end - start;\n        if (length < 2) {\n            return \"NO\";\n        }\n        \n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n    \n    private boolean isPrime(int num) {\n        if (num < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/128", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        int sum = 0;\n        int signProduct = 1;\n\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        for (int num : arr) {\n            sum += Math.abs(num) * Integer.signum(num);\n            signProduct *= Integer.signum(num);\n        }\n\n        return Optional.of(sum * signProduct);\n    }\n}\n"}
{"task_id": "Java/129", "generation": "import java.util.*;\n\nclass Solution {\n    List<Integer> minPath(List<List<Integer>> grid, int k) {\n        List<Integer> minPath = new ArrayList<>();\n        List<Integer> currentPath = new ArrayList<>();\n        boolean[][] visited = new boolean[grid.size()][grid.get(0).size()];\n\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                dfs(grid, i, j, k, visited, currentPath, minPath);\n            }\n        }\n\n        return minPath;\n    }\n\n    void dfs(List<List<Integer>> grid, int row, int col, int k, boolean[][] visited, List<Integer> currentPath, List<Integer> minPath) {\n        if (row < 0 || row >= grid.size() || col < 0 || col >= grid.get(0).size() || visited[row][col]) {\n            return;\n        }\n\n        visited[row][col] = true;\n        currentPath.add(grid.get(row).get(col));\n\n        if (currentPath.size() == k) {\n            if (minPath.isEmpty() || comparePaths(currentPath, minPath) < 0) {\n                minPath.clear();\n                minPath.addAll(currentPath);\n            }\n        } else {\n            dfs(grid, row + 1, col, k, visited, currentPath, minPath);\n            dfs(grid, row - 1, col, k, visited, currentPath, minPath);\n            dfs(grid, row, col + 1, k, visited, currentPath, minPath);\n            dfs(grid, row, col - 1, k, visited, currentPath, minPath);\n        }\n\n        visited[row][col] = false;\n        currentPath.remove(currentPath.size() - 1);\n    }\n\n    int comparePaths(List<Integer> path1, List<Integer> path2) {\n        for (int i = 0; i < path1.size(); i++) {\n            if (path1.get(i) < path2.get(i)) {\n                return -1;\n            } else if (path1.get(i) > path2.get(i)) {\n                return 1;\n            }\n        }\n        return 0;\n    }\n}\n"}
{"task_id": "Java/130", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n        List<Integer> tribonacci = new ArrayList<>();\n        tribonacci.add(3);\n        tribonacci.add(1);\n        tribonacci.add(3);\n        \n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                tribonacci.add(1 + i / 2);\n            } else {\n                tribonacci.add(tribonacci.get(i - 1) + tribonacci.get(i - 2) + tribonacci.get(i + 1));\n            }\n        }\n        \n        return tribonacci;\n    }\n}\n"}
{"task_id": "Java/131", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digits(int n) {\n        int product = 1;\n        String numStr = String.valueOf(n);\n        \n        for (int i = 0; i < numStr.length(); i++) {\n            int digit = Character.getNumericValue(numStr.charAt(i));\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n        }\n        \n        if (product == 1) {\n            return 0;\n        }\n        \n        return product;\n    }\n}\n"}
{"task_id": "Java/132", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean is_nested(String string) {\n        Stack<Character> stack = new Stack<>();\n        \n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        \n        return !stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/133", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_squares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            int roundedNum = (int) Math.ceil(num);\n            sum += roundedNum * roundedNum;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/134", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        if (txt.isEmpty()) {\n            return false;\n        }\n        int len = txt.length();\n        int i = len - 1;\n        \n        // Skip any spaces at the end\n        while (i >= 0 && txt.charAt(i) == ' ') {\n            i--;\n        }\n        \n        // Check if the last character is an alphabetical character and not part of a word\n        if (i >= 0 && Character.isLetter(txt.charAt(i)) && (i == 0 || txt.charAt(i - 1) == ' ')) {\n            return true;\n        }\n        \n        return false;\n    }\n}\n"}
{"task_id": "Java/135", "generation": "import java.util.*;\n\nclass Solution {\n    public int can_arrange(List<Integer> arr) {\n        int index = -1;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                index = i - 1;\n            }\n        }\n        return index;\n    }\n}\n"}
{"task_id": "Java/136", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        Integer largestNegative = null;\n        Integer smallestPositive = null;\n\n        for (Integer num : lst) {\n            if (num < 0 && (largestNegative == null || num > largestNegative)) {\n                largestNegative = num;\n            } else if (num > 0 && (smallestPositive == null || num < smallestPositive)) {\n                smallestPositive = num;\n            }\n        }\n\n        List<Optional<Integer>> result = new ArrayList<>();\n        result.add(Optional.ofNullable(largestNegative));\n        result.add(Optional.ofNullable(smallestPositive));\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/137", "generation": "import java.util.*;\n\nclass Solution {\n    public Optional<Object> compare_one(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            int intA = (int) a;\n            int intB = (int) b;\n            if (intA > intB) {\n                return Optional.of(intA);\n            } else if (intB > intA) {\n                return Optional.of(intB);\n            }\n        } else if (a instanceof Float && b instanceof Float) {\n            float floatA = (float) a;\n            float floatB = (float) b;\n            if (floatA > floatB) {\n                return Optional.of(floatA);\n            } else if (floatB > floatA) {\n                return Optional.of(floatB);\n            }\n        } else if ((a instanceof Integer && b instanceof Float) || (a instanceof Float && b instanceof Integer)) {\n            float numA = a instanceof Integer ? (float) (int) a : (float) a;\n            float numB = b instanceof Integer ? (float) (int) b : (float) b;\n            if (numA > numB) {\n                return Optional.of(numA);\n            } else if (numB > numA) {\n                return Optional.of(numB);\n            }\n        } else if (a instanceof String && b instanceof String) {\n            float numA = Float.parseFloat(((String) a).replace(\",\", \".\"));\n            float numB = Float.parseFloat(((String) b).replace(\",\", \".\"));\n            if (numA > numB) {\n                return Optional.of(a);\n            } else if (numB > numA) {\n                return Optional.of(b);\n            }\n        }\n        return Optional.empty();\n    }\n}\n"}
{"task_id": "Java/138", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_equal_to_sum_even(int n) {\n        for (int i = 2; i <= n / 2; i += 2) {\n            for (int j = i; j <= n / 2; j += 2) {\n                for (int k = j; k <= n / 2; k += 2) {\n                    int l = n - (i + j + k);\n                    if (l % 2 == 0 && l >= k) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/139", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public long special_factorial(int n) {\n        long result = 1;\n        for (int i = n; i > 0; i--) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    private long factorial(int num) {\n        if (num == 0 || num == 1) {\n            return 1;\n        }\n        return num * factorial(num - 1);\n    }\n}\n"}
{"task_id": "Java/140", "generation": "import java.util.*;\n\nclass Solution {\n    public String fix_spaces(String text) {\n        StringBuilder result = new StringBuilder();\n        int spaceCount = 0;\n\n        for (char c : text.toCharArray()) {\n            if (c == ' ') {\n                spaceCount++;\n                if (spaceCount > 2) {\n                    result.append('-');\n                }\n            } else {\n                if (spaceCount > 0) {\n                    result.append(\"_\".repeat(spaceCount));\n                    spaceCount = 0;\n                }\n                result.append(c);\n            }\n        }\n\n        if (spaceCount > 0) {\n            result.append(\"_\".repeat(spaceCount));\n        }\n\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/141", "generation": "import java.util.*;\n\nclass Solution {\n    public String file_name_check(String file_name) {\n        int digitCount = 0;\n        int dotIndex = -1;\n        int len = file_name.length();\n        \n        for (int i = 0; i < len; i++) {\n            char ch = file_name.charAt(i);\n            if (Character.isDigit(ch)) {\n                digitCount++;\n            } else if (ch == '.') {\n                if (dotIndex != -1) {\n                    return \"No\";\n                }\n                dotIndex = i;\n            }\n        }\n        \n        if (digitCount > 3 || dotIndex == -1 || dotIndex == 0 || dotIndex == len - 1) {\n            return \"No\";\n        }\n        \n        String beforeDot = file_name.substring(0, dotIndex);\n        String afterDot = file_name.substring(dotIndex + 1);\n        \n        if (!Character.isLetter(beforeDot.charAt(0))) {\n            return \"No\";\n        }\n        \n        List<String> validExtensions = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        if (!validExtensions.contains(afterDot)) {\n            return \"No\";\n        }\n        \n        return \"Yes\";\n    }\n}\n"}
{"task_id": "Java/142", "generation": "import java.util.*;\n\nclass Solution {\n    public int sum_squares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if ((i + 1) % 3 == 0) {\n                sum += lst.get(i) * lst.get(i); // Square the integer\n            } else if ((i + 1) % 4 == 0 && (i + 1) % 3 != 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i); // Cube the integer\n            } else {\n                sum += lst.get(i); // Add the integer as it is\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/143", "generation": "import java.util.*;\n\nclass Solution {\n    public String words_in_sentence(String sentence) {\n        // Helper function to check if a number is prime\n        boolean isPrime(int num) {\n            if (num <= 1) {\n                return false;\n            }\n            for (int i = 2; i <= Math.sqrt(num); i++) {\n                if (num % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        StringBuilder result = new StringBuilder();\n        String[] words = sentence.split(\" \");\n        \n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.append(word).append(\" \");\n            }\n        }\n        \n        return result.toString().trim();\n    }\n}\n"}
{"task_id": "Java/144", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean simplify(String x, String n) {\n        // Parse fractions x and n\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n\n        // Extract numerators and denominators\n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n\n        // Multiply numerators and denominators\n        int resultNumerator = xNumerator * nNumerator;\n        int resultDenominator = xDenominator * nDenominator;\n\n        // Check if the result is a whole number\n        return resultDenominator % resultNumerator == 0;\n    }\n}\n"}
{"task_id": "Java/145", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> order_by_points(List<Integer> nums) {\n        // Custom comparator to compare integers based on sum of digits and index\n        Comparator<Integer> customComparator = new Comparator<Integer>() {\n            @Override\n            public int compare(Integer num1, Integer num2) {\n                int sum1 = calculateDigitSum(num1);\n                int sum2 = calculateDigitSum(num2);\n                if (sum1 != sum2) {\n                    return sum1 - sum2;\n                } else {\n                    return nums.indexOf(num1) - nums.indexOf(num2);\n                }\n            }\n        };\n\n        // Calculate sum of digits for a given number\n        int calculateDigitSum(int num) {\n            int sum = 0;\n            String numStr = String.valueOf(Math.abs(num));\n            for (char c : numStr.toCharArray()) {\n                sum += Character.getNumericValue(c);\n            }\n            return sum;\n        }\n\n        // Sort the list based on custom comparator\n        Collections.sort(nums, customComparator);\n\n        return nums;\n    }\n}\n"}
{"task_id": "Java/146", "generation": "import java.util.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10 && isOdd(num) && isOdd(getLastDigit(num))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isOdd(int num) {\n        return num % 2 != 0;\n    }\n\n    private int getLastDigit(int num) {\n        return Math.abs(num) % 10;\n    }\n}\n"}
{"task_id": "Java/147", "generation": "import java.util.*;\n\nclass Solution {\n    public int get_max_triples(int n) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n\n        int triplesCount = 0;\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        triplesCount++;\n                    }\n                }\n            }\n        }\n\n        return triplesCount;\n    }\n}\n"}
{"task_id": "Java/148", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> bf(String planet1, String planet2) {\n        Map<String, Integer> planetOrder = new HashMap<>();\n        planetOrder.put(\"Mercury\", 1);\n        planetOrder.put(\"Venus\", 2);\n        planetOrder.put(\"Earth\", 3);\n        planetOrder.put(\"Mars\", 4);\n        planetOrder.put(\"Jupiter\", 5);\n        planetOrder.put(\"Saturn\", 6);\n        planetOrder.put(\"Uranus\", 7);\n        planetOrder.put(\"Neptune\", 8);\n\n        List<String> result = new ArrayList<>();\n        \n        if (!planetOrder.containsKey(planet1) || !planetOrder.containsKey(planet2)) {\n            return result;\n        }\n\n        int order1 = planetOrder.get(planet1);\n        int order2 = planetOrder.get(planet2);\n        \n        int minOrder = Math.min(order1, order2);\n        int maxOrder = Math.max(order1, order2);\n\n        for (Map.Entry<String, Integer> entry : planetOrder.entrySet()) {\n            if (entry.getValue() > minOrder && entry.getValue() < maxOrder) {\n                result.add(entry.getKey());\n            }\n        }\n\n        result.sort(Comparator.comparingInt(planetOrder::get));\n        return result;\n    }\n}\n"}
{"task_id": "Java/149", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> sorted_list_sum(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        \n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                result.add(str);\n            }\n        }\n        \n        Collections.sort(result, (a, b) -> {\n            if (a.length() == b.length()) {\n                return a.compareTo(b);\n            }\n            return a.length() - b.length();\n        });\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/150", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int x_or_y(int n, int x, int y) {\n        if (n < 2) {\n            return y;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n"}
{"task_id": "Java/151", "generation": "import java.util.*;\n\nclass Solution {\n    public int double_the_difference(List<Object> lst) {\n        int sum = 0;\n        for (Object num : lst) {\n            if (num instanceof Integer && (int) num > 0 && (int) num % 2 != 0) {\n                sum += ((int) num) * ((int) num);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/152", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> differences = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            differences.add(diff);\n        }\n        return differences;\n    }\n}\n"}
{"task_id": "Java/153", "generation": "import java.util.*;\n\nclass Solution {\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        int max_strength = Integer.MIN_VALUE;\n        int strongest_index = 0;\n\n        for (int i = 0; i < extensions.size(); i++) {\n            String extension = extensions.get(i);\n            int cap_count = 0;\n            int sm_count = 0;\n\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    cap_count++;\n                } else if (Character.isLowerCase(c)) {\n                    sm_count++;\n                }\n            }\n\n            int strength = cap_count - sm_count;\n            if (strength > max_strength) {\n                max_strength = strength;\n                strongest_index = i;\n            }\n        }\n\n        return class_name + \".\" + extensions.get(strongest_index);\n    }\n}\n"}
{"task_id": "Java/154", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean cycpattern_check(String a, String b) {\n        // Helper function to check if a string is a rotation of another string\n        boolean isRotation(String s1, String s2) {\n            return (s1.length() == s2.length()) && ((s1 + s1).contains(s2));\n        }\n\n        // Check if any rotation of string b is a substring of string a\n        for (int i = 0; i < b.length(); i++) {\n            String rotated = b.substring(i) + b.substring(0, i);\n            if (a.contains(rotated)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/155", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> even_odd_count(int num) {\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        String numStr = String.valueOf(Math.abs(num));\n        \n        for (int i = 0; i < numStr.length(); i++) {\n            int digit = Character.getNumericValue(numStr.charAt(i));\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        \n        List<Integer> counts = new ArrayList<>();\n        counts.add(evenCount);\n        counts.add(oddCount);\n        \n        return counts;\n    }\n}\n"}
{"task_id": "Java/156", "generation": "import java.util.*;\n\nclass Solution {\n    public String int_to_mini_roman(int number) {\n        TreeMap<Integer, String> romanMap = new TreeMap<>(Collections.reverseOrder());\n        romanMap.put(1000, \"m\");\n        romanMap.put(900, \"cm\");\n        romanMap.put(500, \"d\");\n        romanMap.put(400, \"cd\");\n        romanMap.put(100, \"c\");\n        romanMap.put(90, \"xc\");\n        romanMap.put(50, \"l\");\n        romanMap.put(40, \"xl\");\n        romanMap.put(10, \"x\");\n        romanMap.put(9, \"ix\");\n        romanMap.put(5, \"v\");\n        romanMap.put(4, \"iv\");\n        romanMap.put(1, \"i\");\n\n        StringBuilder result = new StringBuilder();\n        for (int value : romanMap.keySet()) {\n            while (number >= value) {\n                result.append(romanMap.get(value));\n                number -= value;\n            }\n        }\n        return result.toString().toLowerCase();\n    }\n}\n"}
{"task_id": "Java/157", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean right_angle_triangle(int a, int b, int c) {\n        int aSquare = a * a;\n        int bSquare = b * b;\n        int cSquare = c * c;\n        \n        return (aSquare + bSquare == cSquare);\n    }\n}\n"}
{"task_id": "Java/158", "generation": "import java.util.*;\n\nclass Solution {\n    public String find_max(List<String> words) {\n        int maxUnique = 0;\n        String maxWord = \"\";\n        int maxIndex = -1;\n\n        for (int i = 0; i < words.size(); i++) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : words.get(i).toCharArray()) {\n                uniqueChars.add(c);\n            }\n            if (uniqueChars.size() > maxUnique || (uniqueChars.size() == maxUnique && words.get(i).compareTo(maxWord) < 0)) {\n                maxUnique = uniqueChars.size();\n                maxWord = words.get(i);\n                maxIndex = i;\n            }\n        }\n\n        return maxWord;\n    }\n}\n"}
{"task_id": "Java/159", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> eat(int number, int need, int remaining) {\n        int totalCarrots = number + need;\n        int carrotsLeft = remaining - totalCarrots;\n        carrotsLeft = Math.max(0, carrotsLeft);\n        return Arrays.asList(totalCarrots, carrotsLeft);\n    }\n}\n"}
{"task_id": "Java/160", "generation": "import java.util.*;\n\nclass Solution {\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        int result = operand.get(0); // Initialize result with the first operand\n        int current = operand.get(0); // Initialize current with the first operand\n\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int num = operand.get(i + 1);\n\n            switch (op) {\n                case \"+\":\n                    current += num;\n                    break;\n                case \"-\":\n                    current -= num;\n                    break;\n                case \"*\":\n                    current *= num;\n                    break;\n                case \"/\":\n                    current /= num;\n                    break;\n                case \"**\":\n                    current = (int) Math.pow(current, num);\n                    break;\n                default:\n                    System.out.println(\"Invalid operator\");\n            }\n        }\n\n        return current;\n    }\n}\n"}
{"task_id": "Java/161", "generation": "import java.util.*;\n\nclass Solution {\n    public String solve(String s) {\n        String result = \"\";\n        boolean hasLetter = false;\n        \n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                result += Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c);\n                hasLetter = true;\n            } else {\n                result += c;\n            }\n        }\n        \n        if (!hasLetter) {\n            result = new StringBuilder(result).reverse().toString();\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/162", "generation": "import java.math.BigInteger;\nimport java.security.*;\n\nclass Solution {\n    public Optional<String> string_to_md5(String text) {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n            byte[] digest = md.digest();\n            BigInteger bigInt = new BigInteger(1, digest);\n            String hashText = bigInt.toString(16);\n            \n            // Pad with leading zeros if needed\n            while (hashText.length() < 32) {\n                hashText = \"0\" + hashText;\n            }\n            \n            return Optional.of(hashText);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            return Optional.empty();\n        }\n    }\n}\n"}
{"task_id": "Java/163", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> generate_integers(int a, int b) {\n        List<Integer> evenDigits = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0 && i < 10) {\n                evenDigits.add(i);\n            }\n        }\n        Collections.sort(evenDigits);\n        return evenDigits;\n    }\n}\n"}
{"task_id": "Java/0", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/1", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> separate_paren_groups(String paren_string) {\n        List<String> separatedGroups = new ArrayList<>();\n        int balance = 0;\n        StringBuilder currentGroup = new StringBuilder();\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                balance++;\n                currentGroup.append(c);\n            } else if (c == ')') {\n                balance--;\n                currentGroup.append(c);\n            }\n\n            if (balance == 0) {\n                separatedGroups.add(currentGroup.toString().replaceAll(\"\\\\s\", \"\"));\n                currentGroup.setLength(0);\n            }\n        }\n\n        return separatedGroups;\n    }\n}\n"}
{"task_id": "Java/2", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double truncate_number(double number) {\n        int integerPart = (int) number;\n        double decimalPart = number - integerPart;\n        return decimalPart;\n    }\n}\n"}
{"task_id": "Java/3", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/4", "generation": "import java.util.*;\n\nclass Solution {\n    public double mean_absolute_deviation(List<Double> numbers) {\n        double mean = calculateMean(numbers);\n        double sumDiff = 0;\n        for (double num : numbers) {\n            sumDiff += Math.abs(num - mean);\n        }\n        return sumDiff / numbers.size();\n    }\n\n    private double calculateMean(List<Double> numbers) {\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        return sum / numbers.size();\n    }\n}\n"}
{"task_id": "Java/5", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> interspersed = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            interspersed.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                interspersed.add(delimiter);\n            }\n        }\n        return interspersed;\n    }\n}\n"}
{"task_id": "Java/6", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> parse_nested_parens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        String[] groups = paren_string.split(\" \");\n        \n        for (String group : groups) {\n            int maxDepth = 0;\n            int currentDepth = 0;\n            \n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentDepth++;\n                } else if (c == ')') {\n                    maxDepth = Math.max(maxDepth, currentDepth);\n                    currentDepth = 0;\n                }\n            }\n            \n            result.add(maxDepth);\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/7", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> filteredStrings = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredStrings.add(str);\n            }\n        }\n        return filteredStrings;\n    }\n}\n"}
{"task_id": "Java/8", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> sum_product(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        \n        if (numbers.isEmpty()) {\n            return Arrays.asList(0, 1);\n        }\n        \n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        \n        return Arrays.asList(sum, product);\n    }\n}\n"}
{"task_id": "Java/9", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> rollingMax = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n\n        for (int num : numbers) {\n            max = Math.max(max, num);\n            rollingMax.add(max);\n        }\n\n        return rollingMax;\n    }\n}\n"}
{"task_id": "Java/10", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    public String make_palindrome(String string) {\n        int end = 0;\n        for (int i = string.length() - 1; i >= 0; i--) {\n            if (isPalindrome(string.substring(i))) {\n                end = i;\n                break;\n            }\n        }\n        if (end == 0) {\n            return string;\n        } else {\n            return string + new StringBuilder(string.substring(0, end)).reverse().toString();\n        }\n    }\n}\n"}
{"task_id": "Java/11", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String string_xor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append(\"0\");\n            } else {\n                result.append(\"1\");\n            }\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/12", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longestString = strings.get(0);\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n\n        return Optional.of(longestString);\n    }\n}\n"}
{"task_id": "Java/13", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int greatest_common_divisor(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return Math.abs(a);\n    }\n}\n"}
{"task_id": "Java/14", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> all_prefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            prefixes.add(string.substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}\n"}
{"task_id": "Java/15", "generation": "import java.util.*;\n\nclass Solution {\n    public String string_sequence(int n) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            result.append(i);\n            if (i != n) {\n                result.append(\" \");\n            }\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/16", "generation": "import java.util.*;\n\nclass Solution {\n    public int count_distinct_characters(String string) {\n        Set<Character> distinctChars = new HashSet<>();\n        string = string.toLowerCase();\n\n        for (char ch : string.toCharArray()) {\n            distinctChars.add(ch);\n        }\n\n        return distinctChars.size();\n    }\n}\n"}
{"task_id": "Java/17", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> parse_music(String string) {\n        List<Integer> beatsDuration = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        \n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n                beatsDuration.add(4);\n            } else if (note.equals(\"o|\")) {\n                beatsDuration.add(2);\n            } else if (note.equals(\".|\")) {\n                beatsDuration.add(1);\n            }\n        }\n        \n        return beatsDuration;\n    }\n}\n"}
{"task_id": "Java/18", "generation": "import java.util.*;\n\nclass Solution {\n    public int how_many_times(String string, String substring) {\n        int count = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/19", "generation": "import java.util.*;\n\nclass Solution {\n    public String sort_numbers(String numbers) {\n        Map<String, Integer> wordToNum = new HashMap<>();\n        wordToNum.put(\"zero\", 0);\n        wordToNum.put(\"one\", 1);\n        wordToNum.put(\"two\", 2);\n        wordToNum.put(\"three\", 3);\n        wordToNum.put(\"four\", 4);\n        wordToNum.put(\"five\", 5);\n        wordToNum.put(\"six\", 6);\n        wordToNum.put(\"seven\", 7);\n        wordToNum.put(\"eight\", 8);\n        wordToNum.put(\"nine\", 9);\n\n        String[] words = numbers.split(\" \");\n        Arrays.sort(words, (a, b) -> wordToNum.get(a) - wordToNum.get(b));\n\n        return String.join(\" \", words);\n    }\n}\n"}
{"task_id": "Java/20", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        List<Double> closest_pair = new ArrayList<>();\n        closest_pair.add(numbers.get(0));\n        closest_pair.add(numbers.get(1));\n        double distance = Math.abs(numbers.get(1) - numbers.get(0));\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < distance) {\n                    closest_pair.clear();\n                    closest_pair.add(numbers.get(i));\n                    closest_pair.add(numbers.get(j));\n                    distance = Math.abs(numbers.get(i) - numbers.get(j));\n                }\n            }\n        }\n        Collections.sort(closest_pair);\n        return closest_pair;\n    }\n}\n"}
{"task_id": "Java/21", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n\n        // Find the minimum and maximum values in the list\n        for (double num : numbers) {\n            min = Math.min(min, num);\n            max = Math.max(max, num);\n        }\n\n        List<Double> rescaledList = new ArrayList<>();\n        // Apply linear transformation to each element\n        for (double num : numbers) {\n            double rescaledValue = (num - min) / (max - min);\n            rescaledList.add(rescaledValue);\n        }\n\n        return rescaledList;\n    }\n}\n"}
{"task_id": "Java/22", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> filter_integers(List<Object> values) {\n        List<Integer> result_list = new ArrayList<>();\n        for (Object obj : values) {\n            if (obj instanceof Integer) {\n                result_list.add((Integer) obj);\n            }\n        }\n        return result_list;\n    }\n}\n"}
{"task_id": "Java/23", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int strlen(String string) {\n        return string.length();\n    }\n}\n"}
{"task_id": "Java/24", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largest_divisor(int n) {\n        int largestDivisor = 1;\n        for (int i = 1; i <= n/2; i++) {\n            if (n % i == 0 && i < n) {\n                largestDivisor = Math.max(largestDivisor, i);\n            }\n        }\n        return largestDivisor;\n    }\n}\n"}
{"task_id": "Java/25", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        \n        for (int i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        \n        if (n > 1) {\n            factors.add(n);\n        }\n        \n        return factors;\n    }\n}\n"}
{"task_id": "Java/26", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        Set<Integer> uniqueSet = new HashSet<>();\n        List<Integer> result = new ArrayList<>();\n        \n        for (Integer num : numbers) {\n            if (!uniqueSet.contains(num)) {\n                uniqueSet.add(num);\n                result.add(num);\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/27", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String flip_case(String string) {\n        StringBuilder result = new StringBuilder();\n        for (char ch : string.toCharArray()) {\n            if (Character.isLowerCase(ch)) {\n                result.append(Character.toUpperCase(ch));\n            } else if (Character.isUpperCase(ch)) {\n                result.append(Character.toLowerCase(ch));\n            } else {\n                result.append(ch);\n            }\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/28", "generation": "import java.util.*;\n\nclass Solution {\n    public String concatenate(List<String> strings) {\n        StringBuilder result = new StringBuilder();\n        if (strings.isEmpty()) {\n            return \"\";\n        }\n        for (String str : strings) {\n            result.append(str);\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/29", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        List<String> filteredList = new ArrayList<>();\n        for (String str : strings) {\n            if (str.startsWith(prefix)) {\n                filteredList.add(str);\n            }\n        }\n        return filteredList;\n    }\n}\n"}
{"task_id": "Java/30", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> get_positive(List<Integer> l) {\n        List<Integer> positiveNumbers = l.stream()\n                                        .filter(num -> num > 0)\n                                        .collect(Collectors.toList());\n        return positiveNumbers;\n    }\n}\n"}
{"task_id": "Java/31", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_prime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/32", "generation": "import java.util.*;\n\nclass Solution {\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n\n    public double find_zero(List<Double> xs) {\n        if (xs.size() % 2 != 0 || xs.get(xs.size() - 1) == 0) {\n            System.out.println(\"Invalid input: Coefficients must be even in number and the largest coefficient must be non-zero.\");\n            return Double.MIN_VALUE; // Return an error value\n        }\n\n        double lower = -1000, upper = 1000;\n        double precision = 1e-9;\n\n        while (Math.abs(upper - lower) > precision) {\n            double mid = (lower + upper) / 2;\n            double midValue = poly(xs, mid);\n            if (midValue == 0) {\n                return mid;\n            } else if (midValue < 0) {\n                lower = mid;\n            } else {\n                upper = mid;\n            }\n        }\n\n        return (lower + upper) / 2;\n    }\n}\n"}
{"task_id": "Java/33", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> sort_third(List<Integer> l) {\n        List<Integer> modifiedList = new ArrayList<>();\n        List<Integer> temp = new ArrayList<>();\n        \n        for (int i = 0; i < l.size(); i++) {\n            if ((i + 1) % 3 == 0) {\n                temp.add(l.get(i));\n            } else {\n                modifiedList.add(l.get(i));\n            }\n        }\n        \n        Collections.sort(temp);\n        modifiedList.addAll(temp);\n        \n        return modifiedList;\n    }\n}\n"}
{"task_id": "Java/34", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> uniqueSet = new HashSet<>(l);\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n        Collections.sort(uniqueList);\n        return uniqueList;\n    }\n}\n"}
{"task_id": "Java/35", "generation": "import java.util.*;\n\nclass Solution {\n    public int max_element(List<Integer> l) {\n        int max = Integer.MIN_VALUE; // Initialize max to the smallest possible integer value\n        for (int num : l) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n}\n"}
{"task_id": "Java/36", "generation": "import java.util.*;\n\nclass Solution {\n    public int fizz_buzz(int n) {\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String numStr = String.valueOf(i);\n                count += countOccurrences(numStr, '7');\n            }\n        }\n        return count;\n    }\n\n    private int countOccurrences(String str, char target) {\n        int count = 0;\n        for (char c : str.toCharArray()) {\n            if (c == target) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/37", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> sort_even(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        List<Integer> evenIndices = new ArrayList<>();\n        List<Integer> oddIndices = new ArrayList<>();\n\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                evenIndices.add(l.get(i));\n            } else {\n                oddIndices.add(l.get(i));\n            }\n        }\n\n        Collections.sort(evenIndices);\n\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(evenIndices.remove(0));\n            } else {\n                result.add(oddIndices.remove(0));\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/38", "generation": "import java.util.*;\n\nclass Solution {\n    public String encodeCyclic(String s) {\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public String decodeCyclic(String s) {\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n"}
{"task_id": "Java/39", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int prime_fib(int n) {\n        int count = 0;\n        int fibNum = 1;\n        int prevFib = 0;\n        \n        while (count < n) {\n            int temp = fibNum;\n            fibNum = fibNum + prevFib;\n            prevFib = temp;\n            \n            if (isPrime(fibNum)) {\n                count++;\n            }\n        }\n        \n        return fibNum;\n    }\n    \n    private boolean isPrime(int num) {\n        if (num < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/40", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/41", "generation": "import java.util.*;\n\nclass Solution {\n    public int car_race_collision(int n) {\n        int collisions = 0;\n        for (int i = 1; i <= n; i++) {\n            collisions += i;\n        }\n        return collisions;\n    }\n}\n"}
{"task_id": "Java/42", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> incr_list(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (Integer num : l) {\n            result.add(num + 1);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/43", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for (int num : l) {\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/44", "generation": "import java.util.*;\n\nclass Solution {\n    public String change_base(int x, int base) {\n        if (x == 0) {\n            return \"0\";\n        }\n\n        StringBuilder result = new StringBuilder();\n        while (x > 0) {\n            int remainder = x % base;\n            result.append(remainder);\n            x /= base;\n        }\n\n        return result.reverse().toString();\n    }\n}\n"}
{"task_id": "Java/45", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangle_area(double a, double h) {\n        double area = 0.5 * a * h;\n        return area;\n    }\n}\n"}
{"task_id": "Java/46", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib4(int n) {\n        if (n == 0 || n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 0;\n        } else {\n            int[] fib4Array = new int[]{0, 0, 2, 0};\n            for (int i = 4; i <= n; i++) {\n                int next = fib4Array[0] + fib4Array[1] + fib4Array[2] + fib4Array[3];\n                fib4Array[0] = fib4Array[1];\n                fib4Array[1] = fib4Array[2];\n                fib4Array[2] = fib4Array[3];\n                fib4Array[3] = next;\n            }\n            return fib4Array[3];\n        }\n    }\n}\n"}
{"task_id": "Java/47", "generation": "import java.util.*;\n\nclass Solution {\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 != 0) {\n            return l.get(n / 2);\n        } else {\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        }\n    }\n}\n"}
{"task_id": "Java/48", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_palindrome(String text) {\n        int start = 0;\n        int end = text.length() - 1;\n        \n        while (start < end) {\n            if (text.charAt(start) != text.charAt(end)) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/49", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int modp(int n, int p) {\n        long result = 1;\n        for (int i = 0; i < n; i++) {\n            result = (result * 2) % p;\n        }\n        return (int) result;\n    }\n}\n"}
{"task_id": "Java/50", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public String decode_shift(String s) {\n        StringBuilder decoded = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            decoded.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26));\n        }\n        return decoded.toString();\n    }\n}\n"}
{"task_id": "Java/51", "generation": "import java.util.*;\n\nclass Solution {\n    public String remove_vowels(String text) {\n        StringBuilder result = new StringBuilder();\n        for (char ch : text.toCharArray()) {\n            if (!isVowel(ch)) {\n                result.append(ch);\n            }\n        }\n        return result.toString();\n    }\n\n    private boolean isVowel(char ch) {\n        return \"aeiouAEIOU\".indexOf(ch) != -1;\n    }\n}\n"}
{"task_id": "Java/52", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean below_threshold(List<Integer> l, int t) {\n        boolean result = true;\n        for (int num : l) {\n            if (num >= t) {\n                result = false;\n                break;\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/53", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add(int x, int y) {\n        return x + y;\n    }\n}\n"}
{"task_id": "Java/54", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean same_chars(String s0, String s1) {\n        Map<Character, Integer> freqMap0 = new HashMap<>();\n        Map<Character, Integer> freqMap1 = new HashMap<>();\n\n        for (char c : s0.toCharArray()) {\n            freqMap0.put(c, freqMap0.getOrDefault(c, 0) + 1);\n        }\n\n        for (char c : s1.toCharArray()) {\n            freqMap1.put(c, freqMap1.getOrDefault(c, 0) + 1);\n        }\n\n        if (freqMap0.size() != freqMap1.size()) {\n            return false;\n        }\n\n        for (char key : freqMap0.keySet()) {\n            if (!freqMap1.containsKey(key) || !freqMap1.get(key).equals(freqMap0.get(key))) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/55", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0, b = 1;\n        for (int i = 2; i <= n; i++) {\n            int sum = a + b;\n            a = b;\n            b = sum;\n        }\n        return b;\n    }\n}\n"}
{"task_id": "Java/56", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean correct_bracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        \n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '<') {\n                stack.push(bracket);\n            } else if (bracket == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else if (stack.peek() == '<') {\n                    stack.pop();\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/57", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean monotonic(List<Integer> l) {\n        boolean increasing = true;\n        boolean decreasing = true;\n\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n        }\n\n        return increasing || decreasing;\n    }\n}\n"}
{"task_id": "Java/58", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set = new HashSet<>(l1);\n        List<Integer> commonElements = new ArrayList<>();\n        \n        for (Integer num : l2) {\n            if (set.contains(num)) {\n                commonElements.add(num);\n            }\n        }\n        \n        Collections.sort(commonElements);\n        \n        return new ArrayList<>(new HashSet<>(commonElements));\n    }\n}\n"}
{"task_id": "Java/59", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largest_prime_factor(int n) {\n        int maxPrime = 2;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                boolean isPrime = true;\n                for (int j = 2; j <= Math.sqrt(i); j++) {\n                    if (i % j == 0) {\n                        isPrime = false;\n                        break;\n                    }\n                }\n                if (isPrime) {\n                    maxPrime = i;\n                }\n            }\n        }\n        return maxPrime;\n    }\n}\n"}
{"task_id": "Java/60", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_to_n(int n) {\n        return n * (n + 1) / 2;\n    }\n}\n"}
{"task_id": "Java/61", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean correct_bracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        \n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '(') {\n                stack.push(bracket);\n            } else if (bracket == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/62", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/63", "generation": "import java.util.*;\n\nclass Solution {\n    public int fibfib(int n) {\n        Map<Integer, Integer> memo = new HashMap<>();\n        return fibfibHelper(n, memo);\n    }\n\n    private int fibfibHelper(int n, Map<Integer, Integer> memo) {\n        if (n == 0 || n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        if (memo.containsKey(n)) {\n            return memo.get(n);\n        }\n        int fib = fibfibHelper(n - 1, memo) + fibfibHelper(n - 2, memo) + fibfibHelper(n - 3, memo);\n        memo.put(n, fib);\n        return fib;\n    }\n}\n"}
{"task_id": "Java/64", "generation": "import java.util.*;\n\nclass Solution {\n    public int vowels_count(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char ch = Character.toLowerCase(s.charAt(i));\n            if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n                count++;\n            } else if (i == s.length() - 1 && ch == 'y') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/65", "generation": "import java.util.*;\n\nclass Solution {\n    public String circular_shift(int x, int shift) {\n        String numStr = String.valueOf(x);\n        int len = numStr.length();\n        \n        if (shift > len) {\n            return new StringBuilder(numStr).reverse().toString();\n        } else {\n            String shiftedStr = numStr.substring(len - shift) + numStr.substring(0, len - shift);\n            return shiftedStr;\n        }\n    }\n}\n"}
{"task_id": "Java/66", "generation": "import java.util.*;\n\nclass Solution {\n    public int digitSum(String s) {\n        int sum = 0;\n        for (char ch : s.toCharArray()) {\n            if (Character.isUpperCase(ch)) {\n                sum += (int) ch;\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/67", "generation": "import java.util.*;\n\nclass Solution {\n    public int fruit_distribution(String s, int n) {\n        // Split the string to extract the numbers of apples and oranges\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[parts.length - 2]);\n\n        // Calculate the number of mango fruits\n        int mango = n - apples - oranges;\n        \n        return mango;\n    }\n}\n"}
{"task_id": "Java/68", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> pluck(List<Integer> arr) {\n        int minEven = Integer.MAX_VALUE;\n        int minIndex = -1;\n        boolean evenFound = false;\n\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < minEven) {\n                minEven = arr.get(i);\n                minIndex = i;\n                evenFound = true;\n            } else if (arr.get(i) % 2 == 0 && arr.get(i) == minEven && i < minIndex) {\n                minIndex = i;\n            }\n        }\n\n        if (evenFound) {\n            return Arrays.asList(minEven, minIndex);\n        } else {\n            return new ArrayList<>();\n        }\n    }\n}\n"}
{"task_id": "Java/69", "generation": "import java.util.*;\n\nclass Solution {\n    public int search(List<Integer> lst) {\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        // Calculate frequency of each integer\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        int maxValue = -1;\n        \n        // Find the greatest integer that satisfies the condition\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int num = entry.getKey();\n            int frequency = entry.getValue();\n            \n            if (frequency >= num && num > maxValue) {\n                maxValue = num;\n            }\n        }\n        \n        return maxValue;\n    }\n}\n"}
{"task_id": "Java/70", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        if (lst.isEmpty()) {\n            return result;\n        }\n        \n        Collections.sort(lst);\n        int left = 0, right = lst.size() - 1;\n        \n        while (left <= right) {\n            result.add(lst.get(left));\n            left++;\n            if (left <= right) {\n                result.add(lst.get(right));\n                right--;\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/71", "generation": "import java.util.*;\n\nclass Solution {\n    public double triangle_area(double a, double b, double c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2;\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            return -1;\n        }\n    }\n}\n"}
{"task_id": "Java/72", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean will_it_fly(List<Integer> q, int w) {\n        int sum = 0;\n        \n        // Check if the list is palindromic\n        List<Integer> reversed = new ArrayList<>(q);\n        Collections.reverse(reversed);\n        if (!q.equals(reversed)) {\n            return false;\n        }\n        \n        // Calculate the sum of elements\n        for (int num : q) {\n            sum += num;\n        }\n        \n        // Check if sum is less than or equal to the maximum weight\n        return sum <= w;\n    }\n}\n"}
{"task_id": "Java/73", "generation": "import java.util.*;\n\nclass Solution {\n    public int smallest_change(List<Integer> arr) {\n        int left = 0;\n        int right = arr.size() - 1;\n        int changes = 0;\n\n        while (left < right) {\n            if (!arr.get(left).equals(arr.get(right))) {\n                changes++;\n            }\n            left++;\n            right--;\n        }\n\n        return changes;\n    }\n}\n"}
{"task_id": "Java/74", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        int totalChars1 = 0;\n        int totalChars2 = 0;\n\n        for (String str : lst1) {\n            totalChars1 += str.length();\n        }\n\n        for (String str : lst2) {\n            totalChars2 += str.length();\n        }\n\n        if (totalChars1 <= totalChars2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n"}
{"task_id": "Java/75", "generation": "import java.util.*;\n\nclass Solution {\n    // Function to generate all prime numbers less than 100\n    private List<Integer> generatePrimes() {\n        List<Integer> primes = new ArrayList<>();\n        boolean[] isPrime = new boolean[100];\n        Arrays.fill(isPrime, true);\n\n        for (int p = 2; p * p < 100; p++) {\n            if (isPrime[p]) {\n                for (int i = p * p; i < 100; i += p) {\n                    isPrime[i] = false;\n                }\n            }\n        }\n\n        for (int i = 2; i < 100; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    // Function to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Main function to check if the given number is the multiplication of 3 prime numbers\n    public boolean is_multiply_prime(int a) {\n        List<Integer> primes = generatePrimes();\n\n        for (int i = 0; i < primes.size(); i++) {\n            for (int j = i; j < primes.size(); j++) {\n                for (int k = j; k < primes.size(); k++) {\n                    if (primes.get(i) * primes.get(j) * primes.get(k) == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/76", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_simple_power(int x, int n) {\n        int temp = x;\n        while (temp % n == 0 && temp != 1) {\n            temp /= n;\n        }\n        return temp == 1;\n    }\n}\n"}
{"task_id": "Java/77", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean iscube(int a) {\n        double cubeRoot = Math.cbrt(a);\n        return cubeRoot == Math.floor(cubeRoot);\n    }\n}\n"}
{"task_id": "Java/78", "generation": "import java.util.*;\n\nclass Solution {\n    public int hex_key(String num) {\n        // Helper function to check if a character is a prime hexadecimal digit\n        boolean isPrimeHexDigit(char c) {\n            return c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D';\n        }\n\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (isPrimeHexDigit(num.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/79", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String decimal_to_binary(int decimal) {\n        String binary = Integer.toBinaryString(decimal);\n        return \"db\" + binary + \"db\";\n    }\n}\n"}
{"task_id": "Java/80", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean is_happy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n\n        for (int i = 0; i <= s.length() - 3; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/81", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double gpa : grades) {\n            if (gpa == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}\n"}
{"task_id": "Java/82", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean prime_length(String string) {\n        return isPrime(string.length());\n    }\n\n    public boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/83", "generation": "import java.util.*;\n\nclass Solution {\n    public int starts_one_ends(int n) {\n        int count = 0;\n        for (int i = 1; i < Math.pow(10, n); i++) {\n            String numStr = String.valueOf(i);\n            if (numStr.charAt(0) == '1' || numStr.charAt(numStr.length() - 1) == '1') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/84", "generation": "import java.util.*;\n\nclass Solution {\n    public String solve(int N) {\n        int sum = 0;\n        \n        while (N > 0) {\n            sum += N % 10;\n            N /= 10;\n        }\n        \n        return Integer.toBinaryString(sum);\n    }\n}\n"}
{"task_id": "Java/85", "generation": "import java.util.*;\n\nclass Solution {\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/86", "generation": "import java.util.*;\n\nclass Solution {\n    public String anti_shuffle(String s) {\n        String[] words = s.split(\" \");\n        StringBuilder result = new StringBuilder();\n\n        for (int i = 0; i < words.length; i++) {\n            char[] chars = words[i].toCharArray();\n            Arrays.sort(chars);\n            result.append(chars);\n            if (i != words.length - 1) {\n                result.append(\" \");\n            }\n        }\n\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/87", "generation": "import java.util.*;\n\nclass Solution {\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        List<List<Integer>> coordinates = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    List<Integer> coordinate = new ArrayList<>();\n                    coordinate.add(i);  // Row index\n                    coordinate.add(j);  // Column index\n                    coordinates.add(coordinate);\n                }\n            }\n        }\n        \n        coordinates.sort((a, b) -> {\n            if (a.get(0).equals(b.get(0))) {\n                return b.get(1).compareTo(a.get(1)); // Sort columns in descending order\n            }\n            return a.get(0).compareTo(b.get(0)); // Sort rows in ascending order\n        });\n        \n        return coordinates;\n    }\n}\n"}
{"task_id": "Java/88", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> array) {\n        List<Integer> sortedArray = new ArrayList<>(array);\n        int sum = array.get(0) + array.get(array.size() - 1);\n        \n        if (sum % 2 == 0) {\n            Collections.sort(sortedArray, Collections.reverseOrder());\n        } else {\n            Collections.sort(sortedArray);\n        }\n        \n        return sortedArray;\n    }\n}\n"}
{"task_id": "Java/89", "generation": "import java.util.*;\n\nclass Solution {\n    public String encrypt(String s) {\n        StringBuilder result = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            int ascii = c - 2 * 2;\n            if (ascii < 'a') {\n                ascii += 26;\n            }\n            result.append((char) ascii);\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/90", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\n        int smallest = Integer.MAX_VALUE;\n        int secondSmallest = Integer.MAX_VALUE;\n\n        for (int num : lst) {\n            if (num < smallest) {\n                secondSmallest = smallest;\n                smallest = num;\n            } else if (num < secondSmallest && num != smallest) {\n                secondSmallest = num;\n            }\n        }\n\n        return secondSmallest == Integer.MAX_VALUE ? Optional.empty() : Optional.of(secondSmallest);\n    }\n}\n"}
{"task_id": "Java/91", "generation": "import java.util.*;\n\nclass Solution {\n    public int is_bored(String S) {\n        int count = 0;\n        String[] sentences = S.split(\"[.?!]\");\n        \n        for (String sentence : sentences) {\n            String trimmedSentence = sentence.trim();\n            if (trimmedSentence.startsWith(\"I\")) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/92", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean any_int(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int num1 = (int) x;\n            int num2 = (int) y;\n            int num3 = (int) z;\n            int sum = num1 + num2 + num3;\n            return (num1 == num2 + num3 || num2 == num1 + num3 || num3 == num1 + num2);\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/93", "generation": "import java.util.*;\n\nclass Solution {\n    public String encode(String message) {\n        StringBuilder encodedMessage = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n                c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                char replacement = (char) (c + 2);\n                if (replacement > 'z') {\n                    replacement = (char) (replacement - 26);\n                }\n                if (Character.isUpperCase(c)) {\n                    encodedMessage.append(Character.toUpperCase(replacement));\n                } else {\n                    encodedMessage.append(replacement);\n                }\n            } else if (Character.isLowerCase(c)) {\n                encodedMessage.append(Character.toUpperCase(c));\n            } else if (Character.isUpperCase(c)) {\n                encodedMessage.append(Character.toLowerCase(c));\n            } else {\n                encodedMessage.append(c);\n            }\n        }\n        return encodedMessage.toString();\n    }\n}\n"}
{"task_id": "Java/94", "generation": "import java.util.*;\n\nclass Solution {\n    public int skjkasdkd(List<Integer> lst) {\n        int largestPrime = 0;\n        int sumOfDigits = 0;\n\n        for (int num : lst) {\n            if (isPrime(num) && num > largestPrime) {\n                largestPrime = num;\n            }\n        }\n\n        while (largestPrime > 0) {\n            sumOfDigits += largestPrime % 10;\n            largestPrime /= 10;\n        }\n\n        return sumOfDigits;\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/95", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        boolean isLowerCase = true;\n        boolean isUpperCase = true;\n\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String keyStr = (String) key;\n            if (!keyStr.equals(keyStr.toLowerCase())) {\n                isLowerCase = false;\n            }\n            if (!keyStr.equals(keyStr.toUpperCase())) {\n                isUpperCase = false;\n            }\n        }\n\n        return isLowerCase || isUpperCase;\n    }\n}\n"}
{"task_id": "Java/96", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> count_up_to(int n) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        \n        return result;\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/97", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int multiply(int a, int b) {\n        int unitDigitA = Math.abs(a % 10);\n        int unitDigitB = Math.abs(b % 10);\n        return unitDigitA * unitDigitB;\n    }\n}\n"}
{"task_id": "Java/98", "generation": "import java.util.*;\n\nclass Solution {\n    public int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char ch = s.charAt(i);\n            if (Character.isUpperCase(ch) && isVowel(ch)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isVowel(char ch) {\n        return ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U';\n    }\n}\n"}
{"task_id": "Java/99", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int closest_integer(String value) {\n        double num = Double.parseDouble(value);\n        int floor = (int) Math.floor(num);\n        int ceil = (int) Math.ceil(num);\n        double distFloor = Math.abs(num - floor);\n        double distCeil = Math.abs(num - ceil);\n        \n        if (distFloor <= distCeil) {\n            return ceil;\n        } else {\n            return floor;\n        }\n    }\n}\n"}
{"task_id": "Java/100", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> stones = new ArrayList<>();\n        stones.add(n);\n        for (int i = 1; i < n; i++) {\n            if (n % 2 == 0) {\n                stones.add(n + i * 2);\n            } else {\n                stones.add(n + i * 2 + 1);\n            }\n        }\n        return stones;\n    }\n}\n"}
{"task_id": "Java/101", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> words_string(String s) {\n        List<String> wordsList = new ArrayList<>();\n        \n        // Split the input string based on commas or spaces\n        String[] words = s.split(\"[,\\\\s]+\");\n        \n        // Add the split words to the list\n        for (String word : words) {\n            wordsList.add(word);\n        }\n        \n        return wordsList;\n    }\n}\n"}
{"task_id": "Java/102", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int choose_num(int x, int y) {\n        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}\n"}
{"task_id": "Java/103", "generation": "import java.util.*;\n\nclass Solution {\n    public Object rounded_avg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        \n        int sum = 0;\n        int count = m - n + 1;\n        \n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        \n        int avg = Math.round((float) sum / count);\n        return Integer.toBinaryString(avg);\n    }\n}\n"}
{"task_id": "Java/104", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> unique_digits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int num : x) {\n            String numStr = String.valueOf(num);\n            boolean hasEvenDigit = false;\n            \n            for (char c : numStr.toCharArray()) {\n                if (Character.getNumericValue(c) % 2 == 0) {\n                    hasEvenDigit = true;\n                    break;\n                }\n            }\n            \n            if (!hasEvenDigit) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        return result;\n    }\n}\n"}
{"task_id": "Java/105", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> by_length(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        List<Integer> filteredIntegers = new ArrayList<>();\n\n        // Filter out integers between 1 and 9 inclusive\n        for (int num : arr) {\n            if (num >= 1 && num <= 9) {\n                filteredIntegers.add(num);\n            }\n        }\n\n        // Sort the filtered integers\n        Collections.sort(filteredIntegers);\n\n        // Reverse the sorted integers\n        Collections.reverse(filteredIntegers);\n\n        // Replace each digit by its corresponding name\n        for (int num : filteredIntegers) {\n            switch (num) {\n                case 1:\n                    result.add(\"One\");\n                    break;\n                case 2:\n                    result.add(\"Two\");\n                    break;\n                case 3:\n                    result.add(\"Three\");\n                    break;\n                case 4:\n                    result.add(\"Four\");\n                    break;\n                case 5:\n                    result.add(\"Five\");\n                    break;\n                case 6:\n                    result.add(\"Six\");\n                    break;\n                case 7:\n                    result.add(\"Seven\");\n                    break;\n                case 8:\n                    result.add(\"Eight\");\n                    break;\n                case 9:\n                    result.add(\"Nine\");\n                    break;\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/106", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sumOfNumbers(i));\n            }\n        }\n        return result;\n    }\n\n    private int factorial(int num) {\n        if (num == 0) {\n            return 1;\n        }\n        int fact = 1;\n        for (int i = 1; i <= num; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n\n    private int sumOfNumbers(int num) {\n        return (num * (num + 1)) / 2;\n    }\n}\n"}
{"task_id": "Java/107", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> even_odd_palindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n\n    public boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0;\n        int right = str.length() - 1;\n\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/108", "generation": "import java.util.*;\n\nclass Solution {\n    public int count_nums(List<Integer> arr) {\n        int count = 0;\n        for (int num : arr) {\n            int sum = 0;\n            int n = Math.abs(num);\n            while (n != 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/109", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean move_one_ball(List<Integer> arr) {\n        int n = arr.size();\n        if (n == 0) {\n            return true;\n        }\n\n        int minIndex = arr.indexOf(Collections.min(arr));\n        if (isSorted(arr)) {\n            return true;\n        }\n\n        if (minIndex == 0) {\n            return true;\n        }\n\n        int shifts = n - minIndex;\n        List<Integer> shiftedArr = new ArrayList<>(arr.subList(shifts, n));\n        shiftedArr.addAll(arr.subList(0, shifts));\n\n        return isSorted(shiftedArr);\n    }\n\n    private boolean isSorted(List<Integer> arr) {\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/110", "generation": "import java.util.*;\n\nclass Solution {\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int oddCount = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCount++;\n            }\n        }\n        return oddCount % 2 == 0 ? \"YES\" : \"NO\";\n    }\n}\n"}
{"task_id": "Java/111", "generation": "import java.util.*;\n\nclass Solution {\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> letterCount = new HashMap<>();\n        String[] letters = test.split(\" \");\n\n        for (String letter : letters) {\n            letterCount.put(letter, letterCount.getOrDefault(letter, 0) + 1);\n        }\n\n        int maxCount = 0;\n        for (int count : letterCount.values()) {\n            maxCount = Math.max(maxCount, count);\n        }\n\n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : letterCount.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/112", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Object> reverse_delete(String s, String c) {\n        String result = \"\";\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                result += ch;\n            }\n        }\n        boolean isPalindrome = checkPalindrome(result);\n        return Arrays.asList(result, isPalindrome);\n    }\n\n    private boolean checkPalindrome(String str) {\n        int left = 0, right = str.length() - 1;\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/113", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String str : lst) {\n            int oddCount = 0;\n            for (char c : str.toCharArray()) {\n                if (Character.isDigit(c) && (c - '0') % 2 != 0) {\n                    oddCount++;\n                }\n            }\n            String newStr = str.replace(\"i\", String.valueOf(oddCount));\n            result.add(\"the number of odd elements \" + oddCount + \"n the str\" + newStr + \" of the \" + oddCount + \"nput.\");\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/114", "generation": "import java.util.*;\n\nclass Solution {\n    public int minSubArraySum(List<Integer> nums) {\n        if (nums == null || nums.size() == 0) {\n            return 0;\n        }\n\n        int minSum = Integer.MAX_VALUE;\n        int currentSum = Integer.MAX_VALUE;\n\n        for (int num : nums) {\n            currentSum = Math.min(num, num + currentSum);\n            minSum = Math.min(minSum, currentSum);\n        }\n\n        return minSum;\n    }\n}\n"}
{"task_id": "Java/115", "generation": "import java.util.*;\n\nclass Solution {\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        int totalLowering = 0;\n        \n        for (List<Integer> well : grid) {\n            int waterLevel = 0;\n            for (int waterUnit : well) {\n                if (waterUnit == 1) {\n                    int diff = capacity - waterLevel;\n                    totalLowering += (diff > 0) ? diff : 0;\n                    waterLevel = (diff > 0) ? capacity : waterLevel;\n                }\n            }\n        }\n        \n        return totalLowering;\n    }\n}\n"}
{"task_id": "Java/116", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> arr) {\n        // Custom comparator to compare based on number of ones in binary representation and then by decimal value\n        Comparator<Integer> customComparator = (a, b) -> {\n            int countA = Integer.bitCount(Math.abs(a)); // Count of ones in binary representation of a\n            int countB = Integer.bitCount(Math.abs(b)); // Count of ones in binary representation of b\n            \n            if (countA == countB) {\n                return a - b; // Sort by decimal value if counts are equal\n            } else {\n                return countA - countB; // Sort by count of ones in binary representation\n            }\n        };\n\n        // Sort the array using the custom comparator\n        Collections.sort(arr, customComparator);\n\n        return arr;\n    }\n}\n"}
{"task_id": "Java/117", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> select_words(String s, int n) {\n        List<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int consonant_count = 0;\n            for (char c : word.toCharArray()) {\n                if (\"aeiouAEIOU \".indexOf(c) == -1) {\n                    consonant_count++;\n                }\n            }\n            if (consonant_count == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/118", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String get_closest_vowel(String word) {\n        String result = \"\";\n        String vowels = \"aeiouAEIOU\";\n        \n        for (int i = word.length() - 2; i > 0; i--) {\n            char currentChar = word.charAt(i);\n            if (!vowels.contains(String.valueOf(currentChar))) {\n                if (vowels.contains(String.valueOf(word.charAt(i - 1))) && vowels.contains(String.valueOf(word.charAt(i + 1)))) {\n                    result = String.valueOf(currentChar);\n                    break;\n                }\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/119", "generation": "import java.util.*;\n\nclass Solution {\n    public String match_parens(List<String> lst) {\n        String concatenated = lst.get(0) + lst.get(1);\n        Stack<Character> stack = new Stack<>();\n        \n        for (char c : concatenated.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return \"No\";\n                }\n                stack.pop();\n            }\n        }\n        \n        return stack.isEmpty() ? \"Yes\" : \"No\";\n    }\n}\n"}
{"task_id": "Java/120", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        Collections.sort(arr, Collections.reverseOrder());\n        List<Integer> sublist = arr.subList(0, k);\n        Collections.sort(sublist);\n        return sublist;\n    }\n}\n"}
{"task_id": "Java/121", "generation": "import java.util.*;\n\nclass Solution {\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/122", "generation": "import java.util.*;\n\nclass Solution {\n    public int add_elements(List<Integer> arr, int k) {\n        int sum = 0;\n        int count = 0;\n        \n        for (int i = 0; i < k; i++) {\n            if (Math.abs(arr.get(i)) < 100) {\n                sum += arr.get(i);\n                count++;\n            }\n        }\n        \n        return sum;\n    }\n}\n"}
{"task_id": "Java/123", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> get_odd_collatz(int n) {\n        List<Integer> oddNumbers = new ArrayList<>();\n        oddNumbers.add(n);\n\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n /= 2;\n            } else {\n                n = 3 * n + 1;\n                if (n % 2 != 0) {\n                    oddNumbers.add(n);\n                }\n            }\n        }\n\n        Collections.sort(oddNumbers);\n        return oddNumbers;\n    }\n}\n"}
{"task_id": "Java/124", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean valid_date(String date) {\n        if (date.isEmpty()) {\n            return false;\n        }\n\n        String[] dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n            return false;\n        }\n\n        int day = Integer.parseInt(dateParts[1]);\n        int month = Integer.parseInt(dateParts[0]);\n        int year = Integer.parseInt(dateParts[2]);\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 || day > 31) {\n                return false;\n            }\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return false;\n            }\n        } else if (month == 2) {\n            if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {\n                if (day < 1 || day > 29) {\n                    return false;\n                }\n            } else {\n                if (day < 1 || day > 28) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/125", "generation": "import java.util.*;\n\nclass Solution {\n    public Object split_words(String txt) {\n        List<String> words = new ArrayList<>();\n        int oddLowercaseCount = 0;\n\n        for (char c : txt.toCharArray()) {\n            if (c == ' ' || c == ',') {\n                return Arrays.asList(txt.split(\"[, ]\"));\n            } else if (Character.isLowerCase(c)) {\n                int asciiValue = c - 'a';\n                if (asciiValue % 2 != 0) {\n                    oddLowercaseCount++;\n                }\n            }\n        }\n\n        return oddLowercaseCount;\n    }\n}\n"}
{"task_id": "Java/126", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean is_sorted(List<Integer> lst) {\n        Map<Integer, Integer> countMap = new HashMap<>();\n        int prev = Integer.MIN_VALUE;\n\n        for (int num : lst) {\n            if (num < prev) {\n                return false;\n            }\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n            prev = num;\n        }\n\n        for (int count : countMap.values()) {\n            if (count > 2) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/127", "generation": "import java.util.*;\n\nclass Solution {\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n        \n        if (start > end) {\n            return \"NO\";\n        }\n        \n        int length = end - start;\n        \n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n    \n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/128", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int sum = 0;\n        int product = 1;\n        boolean allZeros = true;\n\n        for (int num : arr) {\n            sum += Math.abs(num);\n            if (num != 0) {\n                product *= num / Math.abs(num);\n                allZeros = false;\n            }\n        }\n\n        if (allZeros) {\n            return Optional.of(0);\n        }\n\n        return Optional.of(sum * product);\n    }\n}\n"}
{"task_id": "Java/129", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        List<Integer> minPath = new ArrayList<>();\n        List<Integer> currentPath = new ArrayList<>();\n        Set<List<Integer>> visited = new HashSet<>();\n        \n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                dfs(grid, i, j, k, currentPath, minPath, visited);\n            }\n        }\n        \n        return minPath;\n    }\n    \n    private void dfs(List<List<Integer>> grid, int row, int col, int k, List<Integer> currentPath, List<Integer> minPath, Set<List<Integer>> visited) {\n        if (row < 0 || row >= grid.size() || col < 0 || col >= grid.get(0).size() || visited.contains(currentPath) || currentPath.size() > k) {\n            return;\n        }\n        \n        currentPath.add(grid.get(row).get(col));\n        visited.add(new ArrayList<>(currentPath));\n        \n        if (currentPath.size() == k) {\n            if (minPath.isEmpty() || comparePaths(currentPath, minPath) < 0) {\n                minPath.clear();\n                minPath.addAll(currentPath);\n            }\n        } else {\n            dfs(grid, row + 1, col, k, currentPath, minPath, visited);\n            dfs(grid, row - 1, col, k, currentPath, minPath, visited);\n            dfs(grid, row, col + 1, k, currentPath, minPath, visited);\n            dfs(grid, row, col - 1, k, currentPath, minPath, visited);\n        }\n        \n        currentPath.remove(currentPath.size() - 1);\n    }\n    \n    private int comparePaths(List<Integer> path1, List<Integer> path2) {\n        for (int i = 0; i < path1.size(); i++) {\n            if (path1.get(i) < path2.get(i)) {\n                return -1;\n            } else if (path1.get(i) > path2.get(i)) {\n                return 1;\n            }\n        }\n        return 0;\n    }\n}\n"}
{"task_id": "Java/130", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n        List<Integer> tribonacci = new ArrayList<>();\n        if (n == 0) {\n            return tribonacci;\n        }\n        tribonacci.add(0);\n        tribonacci.add(1);\n        tribonacci.add(1);\n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                tribonacci.add(1 + i / 2);\n            } else {\n                tribonacci.add(tribonacci.get(i - 1) + tribonacci.get(i - 2) + tribonacci.get(i - 3));\n            }\n        }\n        return tribonacci;\n    }\n}\n"}
{"task_id": "Java/131", "generation": "import java.util.*;\n\nclass Solution {\n    public int digits(int n) {\n        int product = 1;\n        String numStr = String.valueOf(n);\n        \n        for (int i = 0; i < numStr.length(); i++) {\n            int digit = Character.getNumericValue(numStr.charAt(i));\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n        }\n        \n        return product == 1 ? 0 : product;\n    }\n}\n"}
{"task_id": "Java/132", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean is_nested(String string) {\n        Stack<Character> stack = new Stack<>();\n        \n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (!stack.isEmpty() && stack.peek() == '[') {\n                    stack.pop();\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/133", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_squares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            int rounded = (int) Math.ceil(num);\n            sum += rounded * rounded;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/134", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        boolean isLastCharLetter = false;\n        if (!txt.isEmpty()) {\n            for (int i = txt.length() - 1; i >= 0; i--) {\n                char ch = txt.charAt(i);\n                if (Character.isLetter(ch)) {\n                    if (i == txt.length() - 1 || txt.charAt(i + 1) == ' ') {\n                        isLastCharLetter = true;\n                    }\n                    break;\n                }\n            }\n        }\n        return isLastCharLetter;\n    }\n}\n"}
{"task_id": "Java/135", "generation": "import java.util.*;\n\nclass Solution {\n    public int can_arrange(List<Integer> arr) {\n        int index = -1;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                index = i - 1;\n            }\n        }\n        return index;\n    }\n}\n"}
{"task_id": "Java/136", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        Optional<Integer> largestNegative = Optional.empty();\n        Optional<Integer> smallestPositive = Optional.empty();\n\n        for (int num : lst) {\n            if (num < 0 && (!largestNegative.isPresent() || num > largestNegative.get())) {\n                largestNegative = Optional.of(num);\n            } else if (num > 0 && (!smallestPositive.isPresent() || num < smallestPositive.get())) {\n                smallestPositive = Optional.of(num);\n            }\n        }\n\n        if (!largestNegative.isPresent()) {\n            largestNegative = Optional.empty();\n        }\n        if (!smallestPositive.isPresent()) {\n            smallestPositive = Optional.empty();\n        }\n\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n}\n"}
{"task_id": "Java/137", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Object> compare_one(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            int intA = (int) a;\n            int intB = (int) b;\n            if (intA > intB) {\n                return Optional.of(intA);\n            } else if (intA < intB) {\n                return Optional.of(intB);\n            } else {\n                return Optional.empty();\n            }\n        } else if (a instanceof Float && b instanceof Float) {\n            float floatA = (float) a;\n            float floatB = (float) b;\n            if (floatA > floatB) {\n                return Optional.of(floatA);\n            } else if (floatA < floatB) {\n                return Optional.of(floatB);\n            } else {\n                return Optional.empty();\n            }\n        } else if (a instanceof String && (b instanceof Integer || b instanceof Float)) {\n            double numA = Double.parseDouble(((String) a).replace(\",\", \".\"));\n            double numB = (b instanceof Integer) ? (int) b : (float) b;\n            if (numA > numB) {\n                return Optional.of(a);\n            } else if (numA < numB) {\n                return Optional.of(numB);\n            } else {\n                return Optional.empty();\n            }\n        } else if (b instanceof String && (a instanceof Integer || a instanceof Float)) {\n            double numB = Double.parseDouble(((String) b).replace(\",\", \".\"));\n            double numA = (a instanceof Integer) ? (int) a : (float) a;\n            if (numA > numB) {\n                return Optional.of(a);\n            } else if (numA < numB) {\n                return Optional.of(numB);\n            } else {\n                return Optional.empty();\n            }\n        } else if (a instanceof String && b instanceof String) {\n            double numA = Double.parseDouble(((String) a).replace(\",\", \".\"));\n            double numB = Double.parseDouble(((String) b).replace(\",\", \".\"));\n            if (numA > numB) {\n                return Optional.of(a);\n            } else if (numA < numB) {\n                return Optional.of(b);\n            } else {\n                return Optional.empty();\n            }\n        }\n        return Optional.empty();\n    }\n}\n"}
{"task_id": "Java/138", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean is_equal_to_sum_even(int n) {\n        for (int i = 2; i <= n / 4; i += 2) {\n            for (int j = i; j <= n / 4; j += 2) {\n                for (int k = j; k <= n / 4; k += 2) {\n                    int l = n - i - j - k;\n                    if (l % 2 == 0 && l >= k && l <= n / 4) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/139", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public long special_factorial(int n) {\n        long result = 1;\n        for (int i = n; i > 0; i--) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    private long factorial(int num) {\n        long fact = 1;\n        for (int i = 1; i <= num; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n}\n"}
{"task_id": "Java/140", "generation": "import java.util.*;\n\nclass Solution {\n    public String fix_spaces(String text) {\n        StringBuilder result = new StringBuilder();\n        int consecutiveSpaces = 0;\n        \n        for (char c : text.toCharArray()) {\n            if (c == ' ') {\n                if (consecutiveSpaces < 2) {\n                    result.append('_');\n                } else {\n                    result.append('-');\n                    consecutiveSpaces = 0;\n                }\n                consecutiveSpaces++;\n            } else {\n                if (consecutiveSpaces >= 2) {\n                    result.append('-');\n                    consecutiveSpaces = 0;\n                }\n                result.append(c);\n            }\n        }\n        \n        if (consecutiveSpaces >= 2) {\n            result.append('-');\n        }\n        \n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/141", "generation": "import java.util.*;\n\nclass Solution {\n    public String file_name_check(String file_name) {\n        int digitCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n        }\n\n        if (digitCount > 3) {\n            return \"No\";\n        }\n\n        if (file_name.indexOf('.') == -1 || file_name.indexOf('.') != file_name.lastIndexOf('.')) {\n            return \"No\";\n        }\n\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length != 2) {\n            return \"No\";\n        }\n\n        String beforeDot = parts[0];\n        String afterDot = parts[1];\n\n        if (beforeDot.isEmpty() || !Character.isLetter(beforeDot.charAt(0))) {\n            return \"No\";\n        }\n\n        List<String> validExtensions = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        if (!validExtensions.contains(afterDot)) {\n            return \"No\";\n        }\n\n        return \"Yes\";\n    }\n}\n"}
{"task_id": "Java/142", "generation": "import java.util.*;\n\nclass Solution {\n    public int sum_squares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i); // Square the integer\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i); // Cube the integer\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/143", "generation": "import java.util.*;\n\nclass Solution {\n    public String words_in_sentence(String sentence) {\n        // Function to check if a number is prime\n        boolean isPrime(int num) {\n            if (num <= 1) {\n                return false;\n            }\n            for (int i = 2; i <= Math.sqrt(num); i++) {\n                if (num % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        StringBuilder result = new StringBuilder();\n        String[] words = sentence.split(\" \");\n        \n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.append(word).append(\" \");\n            }\n        }\n        \n        return result.toString().trim();\n    }\n}\n"}
{"task_id": "Java/144", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean simplify(String x, String n) {\n        String[] x_parts = x.split(\"/\");\n        String[] n_parts = n.split(\"/\");\n\n        int x_num = Integer.parseInt(x_parts[0]);\n        int x_denom = Integer.parseInt(x_parts[1]);\n        int n_num = Integer.parseInt(n_parts[0]);\n        int n_denom = Integer.parseInt(n_parts[1]);\n\n        int result_num = x_num * n_num;\n        int result_denom = x_denom * n_denom;\n\n        return result_num % result_denom == 0;\n    }\n}\n"}
{"task_id": "Java/145", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> order_by_points(List<Integer> nums) {\n        Collections.sort(nums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int sumA = calculateSumOfDigits(a);\n                int sumB = calculateSumOfDigits(b);\n                \n                if (sumA != sumB) {\n                    return sumA - sumB;\n                } else {\n                    return nums.indexOf(a) - nums.indexOf(b);\n                }\n            }\n        });\n        return nums;\n    }\n    \n    private int calculateSumOfDigits(int num) {\n        int sum = 0;\n        while (num != 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/146", "generation": "import java.util.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10 && isOdd(num) && isOdd(getLastDigit(num))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    // Function to check if a number is odd\n    private boolean isOdd(int num) {\n        return num % 2 != 0;\n    }\n\n    // Function to get the last digit of a number\n    private int getLastDigit(int num) {\n        return Math.abs(num) % 10;\n    }\n}\n"}
{"task_id": "Java/147", "generation": "import java.util.*;\n\nclass Solution {\n    public int get_max_triples(int n) {\n        int count = 0;\n        int[] a = new int[n];\n        \n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        \n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/148", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> bf(String planet1, String planet2) {\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        List<String> result = new ArrayList<>();\n        \n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        \n        if (index1 != -1 && index2 != -1) {\n            int start = Math.min(index1, index2) + 1;\n            int end = Math.max(index1, index2);\n            result = planets.subList(start, end);\n            Collections.sort(result);\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/149", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> sorted_list_sum(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        \n        for (String word : lst) {\n            if (word.length() % 2 == 0) {\n                result.add(word);\n            }\n        }\n        \n        Collections.sort(result, (a, b) -> {\n            if (a.length() == b.length()) {\n                return a.compareTo(b);\n            }\n            return a.length() - b.length();\n        });\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/150", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int x_or_y(int n, int x, int y) {\n        // Helper function to check if a number is prime\n        boolean isPrime(int num) {\n            if (num < 2) return false;\n            for (int i = 2; i <= Math.sqrt(num); i++) {\n                if (num % i == 0) return false;\n            }\n            return true;\n        }\n        \n        // Main function logic\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}\n"}
{"task_id": "Java/151", "generation": "import java.util.*;\n\nclass Solution {\n    public int double_the_difference(List<Object> lst) {\n        int sum = 0;\n        for (Object num : lst) {\n            if (num instanceof Integer && (int)num > 0 && (int)num % 2 != 0) {\n                sum += ((int)num) * ((int)num);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/152", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> differences = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            differences.add(diff);\n        }\n        return differences;\n    }\n}\n"}
{"task_id": "Java/153", "generation": "import java.util.*;\n\nclass Solution {\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        int max_strength = Integer.MIN_VALUE;\n        String strongest_extension = \"\";\n\n        for (String extension : extensions) {\n            int CAP = 0, SM = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    CAP++;\n                } else if (Character.isLowerCase(c)) {\n                    SM++;\n                }\n            }\n            int strength = CAP - SM;\n            if (strength > max_strength) {\n                max_strength = strength;\n                strongest_extension = extension;\n            }\n        }\n\n        return class_name + \".\" + strongest_extension;\n    }\n}\n"}
{"task_id": "Java/154", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean cycpattern_check(String a, String b) {\n        String rotatedB = b + b;\n        return rotatedB.contains(a);\n    }\n}\n"}
{"task_id": "Java/155", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> even_odd_count(int num) {\n        int evenCount = 0;\n        int oddCount = 0;\n\n        String numStr = String.valueOf(Math.abs(num));\n\n        for (int i = 0; i < numStr.length(); i++) {\n            int digit = Character.getNumericValue(numStr.charAt(i));\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/156", "generation": "import java.util.*;\n\nclass Solution {\n    public String int_to_mini_roman(int number) {\n        TreeMap<Integer, String> romanMap = new TreeMap<>(Collections.reverseOrder());\n        romanMap.put(1000, \"m\");\n        romanMap.put(900, \"cm\");\n        romanMap.put(500, \"d\");\n        romanMap.put(400, \"cd\");\n        romanMap.put(100, \"c\");\n        romanMap.put(90, \"xc\");\n        romanMap.put(50, \"l\");\n        romanMap.put(40, \"xl\");\n        romanMap.put(10, \"x\");\n        romanMap.put(9, \"ix\");\n        romanMap.put(5, \"v\");\n        romanMap.put(4, \"iv\");\n        romanMap.put(1, \"i\");\n\n        StringBuilder result = new StringBuilder();\n        for (int key : romanMap.keySet()) {\n            while (number >= key) {\n                result.append(romanMap.get(key));\n                number -= key;\n            }\n        }\n        return result.toString().toLowerCase();\n    }\n}\n"}
{"task_id": "Java/157", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean right_angle_triangle(int a, int b, int c) {\n        // Check if c is the longest side\n        if (c < a && c < b) {\n            return (a * a + b * b == c * c);\n        } else if (b < a && b < c) {\n            return (a * a + c * c == b * b);\n        } else {\n            return (b * b + c * c == a * a);\n        }\n    }\n}\n"}
{"task_id": "Java/158", "generation": "import java.util.*;\n\nclass Solution {\n    public String find_max(List<String> words) {\n        String result = \"\";\n        int maxUniqueChars = 0;\n        Map<String, Integer> uniqueCharCount = new HashMap<>();\n\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            uniqueCharCount.put(word, uniqueChars.size());\n            maxUniqueChars = Math.max(maxUniqueChars, uniqueChars.size());\n        }\n\n        for (String word : words) {\n            if (uniqueCharCount.get(word) == maxUniqueChars) {\n                if (result.equals(\"\") || word.compareTo(result) < 0) {\n                    result = word;\n                }\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/159", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        int totalEaten = number + need;\n        int remainingCarrots = Math.max(0, remaining - need);\n        result.add(totalEaten);\n        result.add(remainingCarrots);\n        return result;\n    }\n}\n"}
{"task_id": "Java/160", "generation": "import java.util.*;\n\nclass Solution {\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        int result = operand.get(0);\n        int index = 0;\n        for (String op : operator) {\n            int nextOperand = operand.get(index + 1);\n            switch (op) {\n                case \"+\":\n                    result += nextOperand;\n                    break;\n                case \"-\":\n                    result -= nextOperand;\n                    break;\n                case \"*\":\n                    result *= nextOperand;\n                    break;\n                case \"/\":\n                    result /= nextOperand;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, nextOperand);\n                    break;\n            }\n            index++;\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/161", "generation": "import java.util.*;\n\nclass Solution {\n    public String solve(String s) {\n        StringBuilder result = new StringBuilder();\n        boolean hasLetter = false;\n\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                result.append(Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c));\n                hasLetter = true;\n            } else {\n                result.append(c);\n            }\n        }\n\n        if (!hasLetter) {\n            result.reverse();\n        }\n\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/162", "generation": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        String hash = new BigInteger(1, digest).toString(16);\n        \n        // Pad with zeros if the length is less than 32\n        while (hash.length() < 32) {\n            hash = \"0\" + hash;\n        }\n\n        return Optional.of(hash);\n    }\n}\n"}
{"task_id": "Java/163", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> generate_integers(int a, int b) {\n        List<Integer> evenDigits = new ArrayList<>();\n        \n        for (int i = a; i <= b; i++) {\n            if (i < 10 && i % 2 == 0) {\n                evenDigits.add(i);\n            }\n        }\n        \n        Collections.sort(evenDigits);\n        return evenDigits;\n    }\n}\n"}
{"task_id": "Java/0", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/1", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> separate_paren_groups(String paren_string) {\n        List<String> separatedGroups = new ArrayList<>();\n        int balance = 0;\n        StringBuilder currentGroup = new StringBuilder();\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                balance++;\n                currentGroup.append(c);\n            } else if (c == ')') {\n                balance--;\n                currentGroup.append(c);\n            }\n\n            if (balance == 0) {\n                separatedGroups.add(currentGroup.toString().replaceAll(\"\\\\s\", \"\"));\n                currentGroup.setLength(0);\n            }\n        }\n\n        return separatedGroups;\n    }\n}\n"}
{"task_id": "Java/2", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double truncate_number(double number) {\n        int integerPart = (int) number;\n        double decimalPart = number - integerPart;\n        return decimalPart;\n    }\n}\n"}
{"task_id": "Java/3", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/4", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double mean_absolute_deviation(List<Double> numbers) {\n        double mean = calculateMean(numbers);\n        double sumDiff = 0;\n        for (double num : numbers) {\n            double diff = Math.abs(num - mean);\n            sumDiff += diff;\n        }\n        double mad = sumDiff / numbers.size();\n        return mad;\n    }\n\n    private double calculateMean(List<Double> numbers) {\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        return sum / numbers.size();\n    }\n}\n"}
{"task_id": "Java/5", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> interspersed = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            interspersed.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                interspersed.add(delimiter);\n            }\n        }\n        return interspersed;\n    }\n}\n"}
{"task_id": "Java/6", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> parse_nested_parens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        int maxDepth = 0;\n        int depth = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                depth++;\n            } else if (c == ')') {\n                depth--;\n            } else if (c == ' ') {\n                maxDepth = Math.max(maxDepth, depth);\n                depth = 0;\n            }\n        }\n\n        result.add(maxDepth);\n        return result;\n    }\n}\n"}
{"task_id": "Java/7", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> filteredStrings = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredStrings.add(str);\n            }\n        }\n        return filteredStrings;\n    }\n}\n"}
{"task_id": "Java/8", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sum_product(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        \n        if (numbers.isEmpty()) {\n            return Arrays.asList(0, 1);\n        }\n        \n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        \n        return Arrays.asList(sum, product);\n    }\n}\n"}
{"task_id": "Java/9", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> rollingMax = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n\n        for (int num : numbers) {\n            max = Math.max(max, num);\n            rollingMax.add(max);\n        }\n\n        return rollingMax;\n    }\n}\n"}
{"task_id": "Java/10", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    // Function to reverse a given string\n    public String reverseString(String str) {\n        return new StringBuilder(str).reverse().toString();\n    }\n\n    public String make_palindrome(String string) {\n        int i = string.length();\n        while (i > 0) {\n            if (isPalindrome(string.substring(0, i))) {\n                break;\n            }\n            i--;\n        }\n\n        if (i == string.length()) {\n            return string;\n        } else {\n            return string + reverseString(string.substring(i));\n        }\n    }\n\n    // Helper function to check if a string is a palindrome\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/11", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String string_xor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append(\"0\");\n            } else {\n                result.append(\"1\");\n            }\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/12", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longestString = strings.get(0);\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n\n        return Optional.of(longestString);\n    }\n}\n"}
{"task_id": "Java/13", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int greatest_common_divisor(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return Math.abs(a);\n    }\n}\n"}
{"task_id": "Java/14", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> all_prefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            prefixes.add(string.substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}\n"}
{"task_id": "Java/15", "generation": "import java.util.*;\n\nclass Solution {\n    public String string_sequence(int n) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            result.append(i);\n            if (i != n) {\n                result.append(\" \");\n            }\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/16", "generation": "import java.util.*;\n\nclass Solution {\n    public int count_distinct_characters(String string) {\n        Set<Character> distinctChars = new HashSet<>();\n        string = string.toLowerCase();\n\n        for (char ch : string.toCharArray()) {\n            distinctChars.add(ch);\n        }\n\n        return distinctChars.size();\n    }\n}\n"}
{"task_id": "Java/17", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> parse_music(String string) {\n        List<Integer> durations = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        \n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n                durations.add(4);\n            } else if (note.equals(\"o|\")) {\n                durations.add(2);\n            } else if (note.equals(\".|\")) {\n                durations.add(1);\n            }\n        }\n        \n        return durations;\n    }\n}\n"}
{"task_id": "Java/18", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int how_many_times(String string, String substring) {\n        int count = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/19", "generation": "import java.util.*;\n\nclass Solution {\n    public String sort_numbers(String numbers) {\n        Map<String, Integer> numeralToInteger = new HashMap<>();\n        numeralToInteger.put(\"zero\", 0);\n        numeralToInteger.put(\"one\", 1);\n        numeralToInteger.put(\"two\", 2);\n        numeralToInteger.put(\"three\", 3);\n        numeralToInteger.put(\"four\", 4);\n        numeralToInteger.put(\"five\", 5);\n        numeralToInteger.put(\"six\", 6);\n        numeralToInteger.put(\"seven\", 7);\n        numeralToInteger.put(\"eight\", 8);\n        numeralToInteger.put(\"nine\", 9);\n        \n        String[] numerals = numbers.split(\" \");\n        List<Integer> integers = new ArrayList<>();\n        \n        for (String numeral : numerals) {\n            integers.add(numeralToInteger.get(numeral));\n        }\n        \n        Collections.sort(integers);\n        \n        List<String> sortedNumerals = new ArrayList<>();\n        \n        for (int num : integers) {\n            for (Map.Entry<String, Integer> entry : numeralToInteger.entrySet()) {\n                if (entry.getValue() == num) {\n                    sortedNumerals.add(entry.getKey());\n                    break;\n                }\n            }\n        }\n        \n        return String.join(\" \", sortedNumerals);\n    }\n}\n"}
{"task_id": "Java/20", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        List<Double> closest_pair = new ArrayList<>();\n        closest_pair.add(numbers.get(0));\n        closest_pair.add(numbers.get(1));\n        double distance = Math.abs(numbers.get(1) - numbers.get(0));\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < distance) {\n                    closest_pair.clear();\n                    closest_pair.add(numbers.get(i));\n                    closest_pair.add(numbers.get(j));\n                    distance = Math.abs(numbers.get(i) - numbers.get(j));\n                }\n            }\n        }\n        Collections.sort(closest_pair);\n        return closest_pair;\n    }\n}\n"}
{"task_id": "Java/21", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        \n        List<Double> rescaled = new ArrayList<>();\n        \n        for (double num : numbers) {\n            double transformed = (num - min) / (max - min);\n            rescaled.add(transformed);\n        }\n        \n        return rescaled;\n    }\n}\n"}
{"task_id": "Java/22", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> filter_integers(List<Object> values) {\n        List<Integer> filteredIntegers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                filteredIntegers.add((Integer) value);\n            }\n        }\n        return filteredIntegers;\n    }\n}\n"}
{"task_id": "Java/23", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int strlen(String string) {\n        return string.length();\n    }\n}\n"}
{"task_id": "Java/24", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largest_divisor(int n) {\n        int largestDivisor = 1;\n        for (int i = 1; i <= n/2; i++) {\n            if (n % i == 0) {\n                largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n    }\n}\n"}
{"task_id": "Java/25", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        \n        for (int i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        \n        if (n > 1) {\n            factors.add(n);\n        }\n        \n        return factors;\n    }\n}\n"}
{"task_id": "Java/26", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        List<Integer> uniqueNumbers = new ArrayList<>();\n\n        for (Integer num : numbers) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n\n        for (Integer num : numbers) {\n            if (frequencyMap.get(num) == 1) {\n                uniqueNumbers.add(num);\n            }\n        }\n\n        return uniqueNumbers;\n    }\n}\n"}
{"task_id": "Java/27", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String flip_case(String string) {\n        StringBuilder result = new StringBuilder();\n        for (char ch : string.toCharArray()) {\n            if (Character.isLowerCase(ch)) {\n                result.append(Character.toUpperCase(ch));\n            } else if (Character.isUpperCase(ch)) {\n                result.append(Character.toLowerCase(ch));\n            } else {\n                result.append(ch);\n            }\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/28", "generation": "import java.util.*;\n\nclass Solution {\n    public String concatenate(List<String> strings) {\n        StringBuilder result = new StringBuilder();\n        for (String str : strings) {\n            result.append(str);\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/29", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        List<String> filteredList = new ArrayList<>();\n        for (String str : strings) {\n            if (str.startsWith(prefix)) {\n                filteredList.add(str);\n            }\n        }\n        return filteredList;\n    }\n}\n"}
{"task_id": "Java/30", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> get_positive(List<Integer> l) {\n        List<Integer> positiveNumbers = new ArrayList<>();\n        for (int num : l) {\n            if (num > 0) {\n                positiveNumbers.add(num);\n            }\n        }\n        return positiveNumbers;\n    }\n}\n"}
{"task_id": "Java/31", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_prime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/32", "generation": "import java.util.*;\n\nclass Solution {\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n\n    public double find_zero(List<Double> xs) {\n        if (xs.size() % 2 != 0 || xs.get(xs.size() - 1) == 0) {\n            throw new IllegalArgumentException(\"Input list must have even number of coefficients and largest non-zero coefficient.\");\n        }\n\n        double result = 0;\n        double x = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n\n        x = xs.get(0) == 0 ? 0 : -result / xs.get(0);\n        return x;\n    }\n}\n"}
{"task_id": "Java/33", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> sort_third(List<Integer> l) {\n        List<Integer> modifiedList = new ArrayList<>();\n        List<Integer> temp = new ArrayList<>();\n\n        for (int i = 0; i < l.size(); i++) {\n            if ((i + 1) % 3 == 0) {\n                temp.add(l.get(i));\n            } else {\n                modifiedList.add(l.get(i));\n            }\n        }\n\n        Collections.sort(temp);\n\n        int tempIndex = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if ((i + 1) % 3 == 0) {\n                modifiedList.add(temp.get(tempIndex));\n                tempIndex++;\n            }\n        }\n\n        return modifiedList;\n    }\n}\n"}
{"task_id": "Java/34", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> uniqueSet = new HashSet<>(l);\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n        Collections.sort(uniqueList);\n        return uniqueList;\n    }\n}\n"}
{"task_id": "Java/35", "generation": "import java.util.*;\n\nclass Solution {\n    public int max_element(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for (int num : l) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n}\n"}
{"task_id": "Java/36", "generation": "import java.util.*;\n\nclass Solution {\n    public int fizz_buzz(int n) {\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String numStr = String.valueOf(i);\n                count += numStr.length() - numStr.replace(\"7\", \"\").length();\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/37", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> sort_even(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                even.add(l.get(i));\n            } else {\n                odd.add(l.get(i));\n            }\n        }\n\n        Collections.sort(even);\n\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(even.remove(0));\n            } else {\n                result.add(odd.remove(0));\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/38", "generation": "import java.util.*;\n\nclass Solution {\n    public String decodeCyclic(String s) {\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        \n        StringBuilder decodedString = new StringBuilder();\n        for (String group : groups) {\n            if (group.length() == 3) {\n                group = group.charAt(2) + group.substring(0, 2);\n            }\n            decodedString.append(group);\n        }\n        \n        return decodedString.toString();\n    }\n}\n"}
{"task_id": "Java/39", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int prime_fib(int n) {\n        int count = 0;\n        int i = 2;\n        while (count < n) {\n            if (is_prime(i) && is_fibonacci(i)) {\n                count++;\n            }\n            i++;\n        }\n        return i - 1;\n    }\n\n    public boolean is_prime(int num) {\n        if (num < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public boolean is_fibonacci(int num) {\n        return is_perfect_square(5 * num * num + 4) || is_perfect_square(5 * num * num - 4);\n    }\n\n    public boolean is_perfect_square(int num) {\n        int root = (int) Math.sqrt(num);\n        return root * root == num;\n    }\n}\n"}
{"task_id": "Java/40", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        int n = l.size();\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/41", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int car_race_collision(int n) {\n        return n * (n - 1) / 2;\n    }\n}\n"}
{"task_id": "Java/42", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> incr_list(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int num : l) {\n            result.add(num + 1);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/43", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for (int num : l) {\n            int complement = -num;\n            if (set.contains(complement)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/44", "generation": "import java.util.*;\n\nclass Solution {\n    public String change_base(int x, int base) {\n        if (x == 0) {\n            return \"0\";\n        }\n\n        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            int remainder = x % base;\n            sb.append(remainder);\n            x /= base;\n        }\n\n        return sb.reverse().toString();\n    }\n}\n"}
{"task_id": "Java/45", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangle_area(double a, double h) {\n        double area = 0.5 * a * h;\n        return area;\n    }\n}\n"}
{"task_id": "Java/46", "generation": "import java.util.*;\n\nclass Solution {\n    public int fib4(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n == 3) return 0;\n        \n        int[] fib4Arr = new int[n + 1];\n        fib4Arr[0] = 0;\n        fib4Arr[1] = 0;\n        fib4Arr[2] = 2;\n        fib4Arr[3] = 0;\n        \n        for (int i = 4; i <= n; i++) {\n            fib4Arr[i] = fib4Arr[i-1] + fib4Arr[i-2] + fib4Arr[i-3] + fib4Arr[i-4];\n        }\n        \n        return fib4Arr[n];\n    }\n}\n"}
{"task_id": "Java/47", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 != 0) {\n            return l.get(n / 2);\n        } else {\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        }\n    }\n}\n"}
{"task_id": "Java/48", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_palindrome(String text) {\n        int start = 0;\n        int end = text.length() - 1;\n        \n        while (start < end) {\n            if (text.charAt(start) != text.charAt(end)) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/49", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int modp(int n, int p) {\n        long result = 1;\n        for (int i = 0; i < n; i++) {\n            result = (result * 2) % p;\n        }\n        return (int)result;\n    }\n}\n"}
{"task_id": "Java/50", "generation": "public String encodeShift(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (char ch : s.toCharArray()) {\n        sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n    }\n    return sb.toString();\n}\n\npublic String decodeShift(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (char ch : s.toCharArray()) {\n        sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26));\n    }\n    return sb.toString();\n}\n"}
{"task_id": "Java/51", "generation": "import java.util.*;\n\nclass Solution {\n    public String remove_vowels(String text) {\n        String result = \"\";\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        \n        for (char c : text.toCharArray()) {\n            if (!vowels.contains(c)) {\n                result += c;\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/52", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean below_threshold(List<Integer> l, int t) {\n        boolean result = true;\n        for (int num : l) {\n            if (num >= t) {\n                result = false;\n                break;\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/53", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add(int x, int y) {\n        return x + y;\n    }\n}\n"}
{"task_id": "Java/54", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean same_chars(String s0, String s1) {\n        Map<Character, Integer> map1 = new HashMap<>();\n        Map<Character, Integer> map2 = new HashMap<>();\n\n        for (char c : s0.toCharArray()) {\n            map1.put(c, map1.getOrDefault(c, 0) + 1);\n        }\n\n        for (char c : s1.toCharArray()) {\n            map2.put(c, map2.getOrDefault(c, 0) + 1);\n        }\n\n        return map1.equals(map2);\n    }\n}\n"}
{"task_id": "Java/55", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0, b = 1;\n        for (int i = 2; i <= n; i++) {\n            int sum = a + b;\n            a = b;\n            b = sum;\n        }\n        return b;\n    }\n}\n"}
{"task_id": "Java/56", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean correct_bracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        \n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '<') {\n                stack.push(bracket);\n            } else if (bracket == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/57", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean monotonic(List<Integer> l) {\n        boolean increasing = true;\n        boolean decreasing = true;\n\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            } else if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n        }\n\n        return increasing || decreasing;\n    }\n}\n"}
{"task_id": "Java/58", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> commonSet = new HashSet<>();\n        \n        for (int num : l2) {\n            if (set1.contains(num)) {\n                commonSet.add(num);\n            }\n        }\n        \n        List<Integer> commonList = new ArrayList<>(commonSet);\n        Collections.sort(commonList);\n        \n        return commonList;\n    }\n}\n"}
{"task_id": "Java/59", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largest_prime_factor(int n) {\n        int largestPrimeFactor = 0;\n\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                if (isPrime(i) && i > largestPrimeFactor) {\n                    largestPrimeFactor = i;\n                }\n            }\n        }\n\n        return largestPrimeFactor;\n    }\n\n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/60", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_to_n(int n) {\n        return n * (n + 1) / 2;\n    }\n}\n"}
{"task_id": "Java/61", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean correct_bracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        \n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '(') {\n                stack.push(bracket);\n            } else if (bracket == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/62", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> derivativeCoefficients = new ArrayList<>();\n        \n        for (int i = 1; i < xs.size(); i++) {\n            int derivative = xs.get(i) * i;\n            if (i > 1) {\n                derivativeCoefficients.add(derivative);\n            }\n        }\n        \n        return derivativeCoefficients;\n    }\n}\n"}
{"task_id": "Java/63", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fibfib(int n) {\n        if (n == 0 || n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        } else {\n            return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n        }\n    }\n}\n"}
{"task_id": "Java/64", "generation": "import java.util.*;\n\nclass Solution {\n    public int vowels_count(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char ch = Character.toLowerCase(s.charAt(i));\n            if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n                count++;\n            }\n        }\n        if (s.length() > 0 && Character.toLowerCase(s.charAt(s.length() - 1)) == 'y') {\n            count++;\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/65", "generation": "import java.util.*;\n\nclass Solution {\n    public String circular_shift(int x, int shift) {\n        String xStr = String.valueOf(x);\n        int n = xStr.length();\n        \n        if (shift > n) {\n            // Reverse the string representation of x\n            return new StringBuilder(xStr).reverse().toString();\n        } else {\n            // Circular shift the digits to the right by shift positions\n            shift = shift % n;\n            String shiftedStr = xStr.substring(n - shift) + xStr.substring(0, n - shift);\n            return shiftedStr;\n        }\n    }\n}\n"}
{"task_id": "Java/66", "generation": "import java.util.*;\n\nclass Solution {\n    public int digitSum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/67", "generation": "import java.util.*;\n\nclass Solution {\n    public int fruit_distribution(String s, int n) {\n        // Split the input string to extract the counts of apples and oranges\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[3]);\n\n        // Calculate the number of mango fruits\n        int mango = n - apples - oranges;\n        \n        return mango;\n    }\n}\n"}
{"task_id": "Java/68", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> pluck(List<Integer> arr) {\n        int smallestEven = Integer.MAX_VALUE;\n        int index = -1;\n        boolean foundEven = false;\n\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < smallestEven) {\n                smallestEven = arr.get(i);\n                index = i;\n                foundEven = true;\n            } else if (arr.get(i) % 2 == 0 && arr.get(i) == smallestEven && i < index) {\n                index = i;\n            }\n        }\n\n        if (foundEven) {\n            return Arrays.asList(smallestEven, index);\n        } else {\n            return new ArrayList<>();\n        }\n    }\n}\n"}
{"task_id": "Java/69", "generation": "import java.util.*;\n\nclass Solution {\n    public int search(List<Integer> lst) {\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        // Count the frequency of each integer\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        int maxNum = -1;\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int num = entry.getKey();\n            int freq = entry.getValue();\n            if (num > 0 && freq >= num && num > maxNum) {\n                maxNum = num;\n            }\n        }\n        \n        return maxNum;\n    }\n}\n"}
{"task_id": "Java/70", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        Collections.sort(lst);\n        List<Integer> result = new ArrayList<>();\n        int start = 0, end = lst.size() - 1;\n        \n        while (start <= end) {\n            result.add(lst.get(start));\n            if (start != end) {\n                result.add(lst.get(end));\n            }\n            start++;\n            end--;\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/71", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangle_area(double a, double b, double c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2;\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            return -1;\n        }\n    }\n}\n"}
{"task_id": "Java/72", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean will_it_fly(List<Integer> q, int w) {\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n        \n        List<Integer> reversedQ = new ArrayList<>(q);\n        Collections.reverse(reversedQ);\n        \n        boolean isPalindromic = q.equals(reversedQ);\n        \n        return isPalindromic && sum <= w;\n    }\n}\n"}
{"task_id": "Java/73", "generation": "import java.util.*;\n\nclass Solution {\n    public int smallest_change(List<Integer> arr) {\n        int count = 0;\n        int start = 0;\n        int end = arr.size() - 1;\n        \n        while (start < end) {\n            if (!arr.get(start).equals(arr.get(end))) {\n                count++;\n            }\n            start++;\n            end--;\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/74", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        int totalChars1 = lst1.stream().mapToInt(String::length).sum();\n        int totalChars2 = lst2.stream().mapToInt(String::length).sum();\n\n        if (totalChars1 < totalChars2) {\n            return lst1;\n        } else if (totalChars2 < totalChars1) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}\n"}
{"task_id": "Java/75", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean is_multiply_prime(int a) {\n        // Function to check if a number is prime\n        boolean isPrime(int num) {\n            if (num <= 1) return false;\n            for (int i = 2; i <= Math.sqrt(num); i++) {\n                if (num % i == 0) return false;\n            }\n            return true;\n        }\n\n        // Function to generate all prime numbers less than 100\n        List<Integer> generatePrimes() {\n            List<Integer> primes = new ArrayList<>();\n            for (int i = 2; i < 100; i++) {\n                if (isPrime(i)) primes.add(i);\n            }\n            return primes;\n        }\n\n        List<Integer> primes = generatePrimes();\n        for (int i = 0; i < primes.size(); i++) {\n            for (int j = i + 1; j < primes.size(); j++) {\n                for (int k = j + 1; k < primes.size(); k++) {\n                    if (primes.get(i) * primes.get(j) * primes.get(k) == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/76", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_simple_power(int x, int n) {\n        int power = 1;\n        while (power <= x) {\n            if (Math.pow(n, power) == x) {\n                return true;\n            }\n            power++;\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/77", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean iscube(int a) {\n        if (a < 0) {\n            a = Math.abs(a);\n        }\n        double cubeRoot = Math.cbrt(a);\n        return cubeRoot == Math.floor(cubeRoot);\n    }\n}\n"}
{"task_id": "Java/78", "generation": "import java.util.*;\n\nclass Solution {\n    public int hex_key(String num) {\n        int count = 0;\n        Set<Character> primeDigits = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        for (char c : num.toCharArray()) {\n            if (primeDigits.contains(c)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/79", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String decimal_to_binary(int decimal) {\n        String binary = \"db\" + Integer.toBinaryString(decimal) + \"db\";\n        return binary;\n    }\n}\n"}
{"task_id": "Java/80", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean is_happy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n        \n        for (int i = 0; i <= s.length() - 3; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/81", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double gpa : grades) {\n            if (gpa == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}\n"}
{"task_id": "Java/82", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean prime_length(String string) {\n        return isPrime(string.length());\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/83", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int starts_one_ends(int n) {\n        int count = 0;\n        int lowerBound = (int) Math.pow(10, n - 1);\n        int upperBound = (int) Math.pow(10, n);\n        \n        for (int i = lowerBound; i < upperBound; i++) {\n            String numStr = String.valueOf(i);\n            if (numStr.charAt(0) == '1' || numStr.charAt(numStr.length() - 1) == '1') {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/84", "generation": "import java.util.*;\n\nclass Solution {\n    public String solve(int N) {\n        int sum = 0;\n        while (N > 0) {\n            sum += N % 10;\n            N /= 10;\n        }\n        return Integer.toBinaryString(sum);\n    }\n}\n"}
{"task_id": "Java/85", "generation": "import java.util.*;\n\nclass Solution {\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/86", "generation": "import java.util.*;\n\nclass Solution {\n    public String anti_shuffle(String s) {\n        String[] words = s.split(\" \");\n        StringBuilder result = new StringBuilder();\n\n        for (int i = 0; i < words.length; i++) {\n            char[] chars = words[i].toCharArray();\n            Arrays.sort(chars);\n            result.append(chars);\n            if (i < words.length - 1) {\n                result.append(\" \");\n            }\n        }\n\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/87", "generation": "import java.util.*;\n\nclass Solution {\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    List<Integer> coordinate = new ArrayList<>();\n                    coordinate.add(i);\n                    coordinate.add(j);\n                    result.add(coordinate);\n                }\n            }\n        }\n        \n        result.sort((a, b) -> a.get(0) - b.get(0));\n        for (List<Integer> coord : result) {\n            coord.sort(Collections.reverseOrder());\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/88", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> array) {\n        List<Integer> sortedArray = new ArrayList<>(array);\n        \n        if (sortedArray.isEmpty()) {\n            return sortedArray;\n        }\n        \n        int sum = sortedArray.get(0) + sortedArray.get(sortedArray.size() - 1);\n        \n        if (sum % 2 == 0) {\n            Collections.sort(sortedArray, Collections.reverseOrder());\n        } else {\n            Collections.sort(sortedArray);\n        }\n        \n        return sortedArray;\n    }\n}\n"}
{"task_id": "Java/89", "generation": "import java.util.*;\n\nclass Solution {\n    public String encrypt(String s) {\n        StringBuilder result = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            char encryptedChar = (char) (c + 2 * 2);\n            result.append(encryptedChar);\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/90", "generation": "import java.util.*;\n\nclass Solution {\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n        \n        List<Integer> sortedList = new ArrayList<>(lst);\n        Collections.sort(sortedList);\n        \n        return Optional.of(sortedList.get(1));\n    }\n}\n"}
{"task_id": "Java/91", "generation": "import java.util.*;\n\nclass Solution {\n    public int is_bored(String S) {\n        String[] sentences = S.split(\"[.?!]\");\n        int boredomCount = 0;\n        \n        for (String sentence : sentences) {\n            String trimmedSentence = sentence.trim();\n            if (trimmedSentence.startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n        \n        return boredomCount;\n    }\n}\n"}
{"task_id": "Java/92", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean any_int(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int num1 = (int) x;\n            int num2 = (int) y;\n            int num3 = (int) z;\n            return num1 == num2 + num3 || num2 == num1 + num3 || num3 == num1 + num2;\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/93", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encode(String message) {\n        StringBuilder encodedMessage = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                encodedMessage.append(Character.toUpperCase(c));\n            } else if (Character.isUpperCase(c)) {\n                encodedMessage.append(Character.toLowerCase(c));\n            } else if (\"aeiouAEIOU\".indexOf(c) != -1) {\n                char replacement = (char) (c + 2);\n                if (replacement > 'z') {\n                    replacement = (char) (c - 24);  // Wrap around if exceeding 'z'\n                }\n                encodedMessage.append(replacement);\n            } else {\n                encodedMessage.append(c);\n            }\n        }\n        return encodedMessage.toString();\n    }\n}\n"}
{"task_id": "Java/94", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int skjkasdkd(List<Integer> lst) {\n        // Helper function to check if a number is prime\n        boolean isPrime(int num) {\n            if (num <= 1) return false;\n            for (int i = 2; i <= Math.sqrt(num); i++) {\n                if (num % i == 0) return false;\n            }\n            return true;\n        }\n\n        int largestPrime = Integer.MIN_VALUE;\n        for (int num : lst) {\n            if (isPrime(num) && num > largestPrime) {\n                largestPrime = num;\n            }\n        }\n\n        int sum = 0;\n        while (largestPrime > 0) {\n            sum += largestPrime % 10;\n            largestPrime /= 10;\n        }\n\n        return sum;\n    }\n}\n"}
{"task_id": "Java/95", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        boolean isLowerCase = true;\n        boolean isUpperCase = true;\n\n        for (Object key : dict.keySet()) {\n            if (key instanceof String) {\n                String strKey = (String) key;\n                if (!strKey.equals(strKey.toLowerCase())) {\n                    isLowerCase = false;\n                }\n                if (!strKey.equals(strKey.toUpperCase())) {\n                    isUpperCase = false;\n                }\n            } else {\n                isLowerCase = false;\n                isUpperCase = false;\n            }\n        }\n\n        return isLowerCase || isUpperCase;\n    }\n}\n"}
{"task_id": "Java/96", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<>();\n        \n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        \n        return primes;\n    }\n    \n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/97", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int multiply(int a, int b) {\n        int unitDigitA = Math.abs(a) % 10;\n        int unitDigitB = Math.abs(b) % 10;\n        return unitDigitA * unitDigitB;\n    }\n}\n"}
{"task_id": "Java/98", "generation": "import java.util.*;\n\nclass Solution {\n    public int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char ch = s.charAt(i);\n            if (\"AEIOU\".indexOf(ch) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/99", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int closest_integer(String value) {\n        double num = Double.parseDouble(value);\n        int floor = (int) Math.floor(num);\n        int ceil = (int) Math.ceil(num);\n        \n        double distanceFloor = Math.abs(num - floor);\n        double distanceCeil = Math.abs(num - ceil);\n        \n        if (distanceFloor < distanceCeil) {\n            return ceil;\n        } else if (distanceCeil < distanceFloor) {\n            return floor;\n        } else {\n            if (num >= 0) {\n                return ceil;\n            } else {\n                return floor;\n            }\n        }\n    }\n}\n"}
{"task_id": "Java/100", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> stones = new ArrayList<>();\n        stones.add(n);\n        \n        for (int i = 1; i < n; i++) {\n            if (n % 2 == 0) {\n                n += 2;\n            } else {\n                n += 1;\n            }\n            stones.add(n);\n        }\n        \n        return stones;\n    }\n}\n"}
{"task_id": "Java/101", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> words_string(String s) {\n        List<String> wordsList = new ArrayList<>();\n        String[] words = s.split(\"[,\\\\s]+\");\n        \n        for (String word : words) {\n            wordsList.add(word);\n        }\n        \n        return wordsList;\n    }\n}\n"}
{"task_id": "Java/102", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int choose_num(int x, int y) {\n        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}\n"}
{"task_id": "Java/103", "generation": "import java.util.*;\n\nclass Solution {\n    public Object rounded_avg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n\n        int sum = 0;\n        int count = m - n + 1;\n\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n\n        int avg = Math.round((float) sum / count);\n        return Integer.toBinaryString(avg);\n    }\n}\n"}
{"task_id": "Java/104", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> unique_digits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int num : x) {\n            String numStr = String.valueOf(num);\n            boolean hasEvenDigit = false;\n            \n            for (char c : numStr.toCharArray()) {\n                if (c == '0' || c == '2' || c == '4' || c == '6' || c == '8') {\n                    hasEvenDigit = true;\n                    break;\n                }\n            }\n            \n            if (!hasEvenDigit) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        return result;\n    }\n}\n"}
{"task_id": "Java/105", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> by_length(List<Integer> arr) {\n        HashMap<Integer, String> numToName = new HashMap<>();\n        numToName.put(1, \"One\");\n        numToName.put(2, \"Two\");\n        numToName.put(3, \"Three\");\n        numToName.put(4, \"Four\");\n        numToName.put(5, \"Five\");\n        numToName.put(6, \"Six\");\n        numToName.put(7, \"Seven\");\n        numToName.put(8, \"Eight\");\n        numToName.put(9, \"Nine\");\n\n        List<Integer> filtered = arr.stream()\n                                    .filter(num -> num >= 1 && num <= 9)\n                                    .collect(Collectors.toList());\n\n        Collections.sort(filtered);\n        Collections.reverse(filtered);\n\n        List<String> result = new ArrayList<>();\n        for (int num : filtered) {\n            result.add(numToName.get(num));\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/106", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        int factorial = 1;\n        int sum = 0;\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                factorial *= i;\n                result.add(factorial);\n            } else {\n                sum += i;\n                result.add(sum);\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/107", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> even_odd_palindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        result.add(evenCount);\n        result.add(oddCount);\n\n        return result;\n    }\n\n    public boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0;\n        int right = str.length() - 1;\n\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/108", "generation": "import java.util.*;\n\nclass Solution {\n    public int count_nums(List<Integer> arr) {\n        int count = 0;\n        for (int num : arr) {\n            int sum = 0;\n            int n = Math.abs(num);\n            while (n != 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/109", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean move_one_ball(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        int minIndex = arr.indexOf(Collections.min(arr));\n        boolean sorted = true;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                sorted = false;\n                break;\n            }\n        }\n\n        if (sorted) {\n            return true;\n        }\n\n        int shifts = arr.size() - minIndex;\n        List<Integer> shiftedArr = new ArrayList<>(arr);\n        Collections.rotate(shiftedArr, shifts);\n\n        for (int i = 1; i < shiftedArr.size(); i++) {\n            if (shiftedArr.get(i) < shiftedArr.get(i - 1)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/110", "generation": "import java.util.*;\n\nclass Solution {\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int oddCount = 0;\n        \n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCount++;\n            }\n        }\n        \n        if (oddCount > 0) {\n            return \"NO\";\n        } else {\n            return \"YES\";\n        }\n    }\n}\n"}
{"task_id": "Java/111", "generation": "import java.util.*;\n\nclass Solution {\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> counts = new HashMap<>();\n        String[] letters = test.split(\" \");\n        \n        for (String letter : letters) {\n            counts.put(letter, counts.getOrDefault(letter, 0) + 1);\n        }\n        \n        int maxCount = 0;\n        for (int count : counts.values()) {\n            maxCount = Math.max(maxCount, count);\n        }\n        \n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : counts.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/112", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Object> reverse_delete(String s, String c) {\n        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            if (c.indexOf(s.charAt(i)) == -1) {\n                result += s.charAt(i);\n            }\n        }\n        \n        int start = 0;\n        int end = result.length() - 1;\n        while (start < end) {\n            if (result.charAt(start) != result.charAt(end)) {\n                return Arrays.asList(result, false);\n            }\n            start++;\n            end--;\n        }\n        \n        return Arrays.asList(result, true);\n    }\n}\n"}
{"task_id": "Java/113", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String str : lst) {\n            int count = 0;\n            for (int i = 0; i < str.length(); i++) {\n                int digit = str.charAt(i) - '0';\n                if (digit % 2 != 0) {\n                    count++;\n                }\n            }\n            String modified = \"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + str + \" of the \" + count + \"nput.\";\n            result.add(modified);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/114", "generation": "import java.util.*;\n\nclass Solution {\n    public int minSubArraySum(List<Integer> nums) {\n        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n        int start = 0;\n\n        for (int end = 0; end < nums.size(); end++) {\n            currentSum += nums.get(end);\n\n            while (currentSum >= 0) {\n                minSum = Math.min(minSum, currentSum);\n                currentSum -= nums.get(start);\n                start++;\n            }\n        }\n\n        return minSum;\n    }\n}\n"}
{"task_id": "Java/115", "generation": "import java.util.*;\n\nclass Solution {\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        int count = 0;\n        for (List<Integer> row : grid) {\n            int wellWater = 0;\n            for (int well : row) {\n                wellWater += well;\n                if (wellWater > capacity) {\n                    count = Math.max(count, (int) Math.ceil((double) wellWater / capacity));\n                }\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/116", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> arr) {\n        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int countA = Integer.bitCount(Math.abs(a));\n                int countB = Integer.bitCount(Math.abs(b));\n                \n                if (countA == countB) {\n                    return a - b;\n                }\n                return countA - countB;\n            }\n        });\n        return arr;\n    }\n}\n"}
{"task_id": "Java/117", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> select_words(String s, int n) {\n        List<String> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n        \n        for (String word : words) {\n            int consonantCount = 0;\n            for (char c : word.toCharArray()) {\n                if (Character.isLetter(c) && \"aeiouAEIOU\".indexOf(c) == -1) {\n                    consonantCount++;\n                }\n            }\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/118", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String get_closest_vowel(String word) {\n        String result = \"\";\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        \n        for (int i = word.length() - 2; i > 0; i--) {\n            char current = word.charAt(i);\n            char next = word.charAt(i + 1);\n            if (!vowels.contains(current) && vowels.contains(next)) {\n                result = String.valueOf(next);\n                break;\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/119", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String match_parens(List<String> lst) {\n        String concatenated = lst.get(0) + lst.get(1);\n        if (isBalanced(concatenated)) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n\n    private boolean isBalanced(String s) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : s.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/120", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        Collections.sort(arr, Collections.reverseOrder());\n        List<Integer> sublist = arr.subList(0, k);\n        Collections.sort(sublist);\n        return sublist;\n    }\n}\n"}
{"task_id": "Java/121", "generation": "import java.util.*;\n\nclass Solution {\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/122", "generation": "import java.util.*;\n\nclass Solution {\n    public int add_elements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (Math.abs(arr.get(i)) < 100) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/123", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> get_odd_collatz(int n) {\n        List<Integer> result = new ArrayList<>();\n        \n        while (n > 1) {\n            if (n % 2 != 0) {\n                result.add(n);\n            }\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n        }\n        \n        result.add(1); // Add 1 as the Collatz sequence always ends at 1\n        \n        Collections.sort(result);\n        return result;\n    }\n}\n"}
{"task_id": "Java/124", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean valid_date(String date) {\n        if (date.isEmpty()) {\n            return false;\n        }\n\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n            return false;\n        }\n\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        if ((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && (day < 1 || day > 31)) {\n            return false;\n        } else if ((month == 4 || month == 6 || month == 9 || month == 11) && (day < 1 || day > 30)) {\n            return false;\n        } else if (month == 2 && (day < 1 || day > 29)) {\n            return false;\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/125", "generation": "import java.util.*;\n\nclass Solution {\n    public Object split_words(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c)) {\n                    int order = c - 'a';\n                    if (order % 2 != 0) {\n                        count++;\n                    }\n                }\n            }\n            return count;\n        }\n    }\n}\n"}
{"task_id": "Java/126", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean is_sorted(List<Integer> lst) {\n        int prev = Integer.MIN_VALUE;\n        int count = 0;\n        \n        for (int num : lst) {\n            if (num < prev) {\n                return false;\n            } else if (num == prev) {\n                count++;\n                if (count > 1) {\n                    return false;\n                }\n            } else {\n                count = 0;\n            }\n            prev = num;\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/127", "generation": "import java.util.*;\n\nclass Solution {\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n\n        if (start > end) {\n            return \"NO\";\n        }\n\n        int length = end - start;\n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/128", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int product = 1;\n        int sum = 0;\n\n        for (int num : arr) {\n            product *= Integer.signum(num);\n            sum += Math.abs(num);\n        }\n\n        return Optional.of(product * sum);\n    }\n}\n"}
{"task_id": "Java/129", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        List<Integer> minPath = new ArrayList<>();\n        List<Integer> currentPath = new ArrayList<>();\n        Set<List<Integer>> visited = new HashSet<>();\n\n        // Helper function for Depth First Search\n        // Parameters: row, column, current step\n        // Return: void\n        // Explore all possible paths\n        // Update current path and compare with the minimum path\n        // Update visited cells\n        // Return when the path length is k\n        // Backtrack to explore other paths\n        // Return when all paths are explored\n        // Compare the current path with the minimum path based on lexicographical order\n        // Update the minimum path if needed\n        // Return the minimum path\n        return minPath;\n    }\n}\n"}
{"task_id": "Java/130", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n        List<Integer> tribonacci = new ArrayList<>();\n        tribonacci.add(3);\n        tribonacci.add(1);\n\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                tribonacci.add(1 + i / 2);\n            } else {\n                tribonacci.add(tribonacci.get(i - 1) + tribonacci.get(i - 2) + tribonacci.get(i + 1));\n            }\n        }\n\n        return tribonacci;\n    }\n}\n"}
{"task_id": "Java/131", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digits(int n) {\n        int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        if (product == 1) {\n            return 0;\n        }\n        return product;\n    }\n}\n"}
{"task_id": "Java/132", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean is_nested(String string) {\n        Stack<Character> stack = new Stack<>();\n        \n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        \n        return !stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/133", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_squares(List<Double> lst) {\n        int sum = 0;\n        for (double num : lst) {\n            int rounded = (int) Math.ceil(num);\n            sum += rounded * rounded;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/134", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        boolean isLetter = false;\n        boolean isSpace = true;\n        \n        for (int i = txt.length() - 1; i >= 0; i--) {\n            char ch = txt.charAt(i);\n            if (Character.isLetter(ch)) {\n                if (isSpace) {\n                    isLetter = true;\n                }\n                break;\n            } else if (ch == ' ') {\n                isSpace = true;\n            } else {\n                isSpace = false;\n            }\n        }\n        \n        return isLetter;\n    }\n}\n"}
{"task_id": "Java/135", "generation": "import java.util.*;\n\nclass Solution {\n    public int can_arrange(List<Integer> arr) {\n        int maxIndex = -1;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                maxIndex = i - 1;\n            }\n        }\n        return maxIndex;\n    }\n}\n"}
{"task_id": "Java/136", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        Optional<Integer> largestNegative = Optional.empty();\n        Optional<Integer> smallestPositive = Optional.empty();\n\n        for (int num : lst) {\n            if (num < 0 && (!largestNegative.isPresent() || num > largestNegative.get())) {\n                largestNegative = Optional.of(num);\n            } else if (num > 0 && (!smallestPositive.isPresent() || num < smallestPositive.get())) {\n                smallestPositive = Optional.of(num);\n            }\n        }\n\n        List<Optional<Integer>> result = new ArrayList<>();\n        result.add(largestNegative);\n        result.add(smallestPositive);\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/137", "generation": "import java.util.*;\n\nclass Solution {\n    public Optional<Object> compare_one(Object a, Object b) {\n        if (a.getClass() == b.getClass()) {\n            if (a instanceof Integer) {\n                if ((int)a > (int)b) {\n                    return Optional.of(a);\n                } else if ((int)a < (int)b) {\n                    return Optional.of(b);\n                }\n            } else if (a instanceof Double) {\n                if ((double)a > (double)b) {\n                    return Optional.of(a);\n                } else if ((double)a < (double)b) {\n                    return Optional.of(b);\n                }\n            } else if (a instanceof String) {\n                if (Double.parseDouble((String)a.replace(\",\", \".\")) > Double.parseDouble((String)b)) {\n                    return Optional.of(a);\n                } else if (Double.parseDouble((String)a.replace(\",\", \".\")) < Double.parseDouble((String)b)) {\n                    return Optional.of(b);\n                }\n            }\n        } else {\n            double val1 = 0, val2 = 0;\n            if (a instanceof Integer) {\n                val1 = (int)a;\n            } else if (a instanceof Double) {\n                val1 = (double)a;\n            } else if (a instanceof String) {\n                val1 = Double.parseDouble((String)a.replace(\",\", \".\"));\n            }\n\n            if (b instanceof Integer) {\n                val2 = (int)b;\n            } else if (b instanceof Double) {\n                val2 = (double)b;\n            } else if (b instanceof String) {\n                val2 = Double.parseDouble((String)b.replace(\",\", \".\"));\n            }\n\n            if (val1 > val2) {\n                return Optional.of(a);\n            } else if (val1 < val2) {\n                return Optional.of(b);\n            }\n        }\n        return Optional.empty();\n    }\n}\n"}
{"task_id": "Java/138", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_equal_to_sum_even(int n) {\n        if (n < 8) {\n            return false;\n        } else if (n % 4 == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"}
{"task_id": "Java/139", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public long special_factorial(int n) {\n        long result = 1;\n        for (int i = n; i > 0; i--) {\n            long factorial = 1;\n            for (int j = i; j > 0; j--) {\n                factorial *= j;\n            }\n            result *= factorial;\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/140", "generation": "import java.util.*;\n\nclass Solution {\n    public String fix_spaces(String text) {\n        StringBuilder modifiedText = new StringBuilder();\n        int spaceCount = 0;\n\n        for (char c : text.toCharArray()) {\n            if (c == ' ') {\n                spaceCount++;\n                if (spaceCount < 2) {\n                    modifiedText.append('_');\n                } else {\n                    modifiedText.append('-');\n                    spaceCount = 0;\n                }\n            } else {\n                modifiedText.append(c);\n                spaceCount = 0;\n            }\n        }\n\n        return modifiedText.toString();\n    }\n}\n"}
{"task_id": "Java/141", "generation": "import java.util.regex.*;\n\nclass Solution {\n    public String file_name_check(String file_name) {\n        int digitCount = 0;\n        int dotIndex = -1;\n\n        for (int i = 0; i < file_name.length(); i++) {\n            char ch = file_name.charAt(i);\n            if (Character.isDigit(ch)) {\n                digitCount++;\n            } else if (ch == '.') {\n                if (dotIndex != -1) {\n                    return \"No\"; // More than one dot\n                }\n                dotIndex = i;\n            }\n        }\n\n        if (digitCount > 3 || dotIndex == -1) {\n            return \"No\";\n        }\n\n        String beforeDot = file_name.substring(0, dotIndex);\n        String afterDot = file_name.substring(dotIndex + 1);\n\n        if (!Pattern.matches(\"^[a-zA-Z].*\", beforeDot) || !Pattern.matches(\"^(txt|exe|dll)$\", afterDot)) {\n            return \"No\";\n        }\n\n        return \"Yes\";\n    }\n}\n"}
{"task_id": "Java/142", "generation": "import java.util.*;\n\nclass Solution {\n    public int sum_squares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i); // Square the integer\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i); // Cube the integer\n            } else {\n                sum += lst.get(i); // Add the integer as is\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/143", "generation": "import java.util.*;\n\nclass Solution {\n    public String words_in_sentence(String sentence) {\n        StringBuilder result = new StringBuilder();\n        \n        // Helper function to check if a number is prime\n        boolean isPrime(int n) {\n            if (n <= 1) return false;\n            for (int i = 2; i <= Math.sqrt(n); i++) {\n                if (n % i == 0) return false;\n            }\n            return true;\n        }\n        \n        String[] words = sentence.split(\" \");\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.append(word).append(\" \");\n            }\n        }\n        \n        // Remove the extra space at the end\n        return result.toString().trim();\n    }\n}\n"}
{"task_id": "Java/144", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean simplify(String x, String n) {\n        // Parse the fractions to extract numerators and denominators\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n        \n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        \n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n        \n        // Multiply the numerators and denominators\n        int resultNumerator = xNumerator * nNumerator;\n        int resultDenominator = xDenominator * nDenominator;\n        \n        // Check if the result is a whole number\n        return resultDenominator % resultNumerator == 0;\n    }\n}\n"}
{"task_id": "Java/145", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> order_by_points(List<Integer> nums) {\n        // Custom comparator to compare integers based on the sum of their digits and index\n        Collections.sort(nums, new Comparator<Integer>() {\n            public int compare(Integer a, Integer b) {\n                int sumA = getDigitSum(a);\n                int sumB = getDigitSum(b);\n                if (sumA != sumB) {\n                    return sumA - sumB;\n                } else {\n                    return nums.indexOf(a) - nums.indexOf(b);\n                }\n            }\n            \n            // Function to calculate the sum of digits for a number\n            private int getDigitSum(int num) {\n                int sum = 0;\n                String numStr = String.valueOf(Math.abs(num));\n                for (int i = 0; i < numStr.length(); i++) {\n                    sum += Character.getNumericValue(numStr.charAt(i));\n                }\n                return num < 0 ? -sum : sum;\n            }\n        });\n        \n        return nums;\n    }\n}\n"}
{"task_id": "Java/146", "generation": "import java.util.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10 && isOdd(num) && isOdd(getLastDigit(num))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    // Function to check if a number is odd\n    private boolean isOdd(int num) {\n        return num % 2 != 0;\n    }\n\n    // Function to get the last digit of a number\n    private int getLastDigit(int num) {\n        return Math.abs(num) % 10;\n    }\n}\n"}
{"task_id": "Java/147", "generation": "import java.util.*;\n\nclass Solution {\n    public int get_max_triples(int n) {\n        int count = 0;\n        int[] a = new int[n];\n        \n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/148", "generation": "import java.util.*;\n\nclass Solution {\n    private static final Map<String, Integer> planetOrbits = new HashMap<>();\n\n    static {\n        planetOrbits.put(\"Mercury\", 1);\n        planetOrbits.put(\"Venus\", 2);\n        planetOrbits.put(\"Earth\", 3);\n        planetOrbits.put(\"Mars\", 4);\n        planetOrbits.put(\"Jupiter\", 5);\n        planetOrbits.put(\"Saturn\", 6);\n        planetOrbits.put(\"Uranus\", 7);\n        planetOrbits.put(\"Neptune\", 8);\n    }\n\n    public List<String> bf(String planet1, String planet2) {\n        List<String> planetsBetween = new ArrayList<>();\n        \n        if (!planetOrbits.containsKey(planet1) || !planetOrbits.containsKey(planet2)) {\n            return planetsBetween;\n        }\n\n        int orbit1 = planetOrbits.get(planet1);\n        int orbit2 = planetOrbits.get(planet2);\n\n        int minOrbit = Math.min(orbit1, orbit2);\n        int maxOrbit = Math.max(orbit1, orbit2);\n\n        for (Map.Entry<String, Integer> entry : planetOrbits.entrySet()) {\n            if (entry.getValue() > minOrbit && entry.getValue() < maxOrbit) {\n                planetsBetween.add(entry.getKey());\n            }\n        }\n\n        planetsBetween.sort(Comparator.comparingInt(planet -> planetOrbits.get(planet)));\n        return planetsBetween;\n    }\n}\n"}
{"task_id": "Java/149", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> sorted_list_sum(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        \n        for (String word : lst) {\n            if (word.length() % 2 == 0) {\n                result.add(word);\n            }\n        }\n        \n        Collections.sort(result, (a, b) -> {\n            if (a.length() == b.length()) {\n                return a.compareTo(b);\n            }\n            return a.length() - b.length();\n        });\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/150", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int x_or_y(int n, int x, int y) {\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    public boolean isPrime(int num) {\n        if (num < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/151", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int double_the_difference(List<Object> lst) {\n        int sum = 0;\n        for (Object num : lst) {\n            if (num instanceof Integer && (int)num > 0 && (int)num % 2 != 0) {\n                sum += ((int)num) * ((int)num);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/152", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> differences = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            differences.add(diff);\n        }\n        return differences;\n    }\n}\n"}
{"task_id": "Java/153", "generation": "import java.util.*;\n\nclass Solution {\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        String strongestExtension = \"\";\n        int maxStrength = Integer.MIN_VALUE;\n\n        for (String extension : extensions) {\n            int CAP = 0, SM = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    CAP++;\n                } else if (Character.isLowerCase(c)) {\n                    SM++;\n                }\n            }\n            int strength = CAP - SM;\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return class_name + \".\" + strongestExtension;\n    }\n}\n"}
{"task_id": "Java/154", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean cycpattern_check(String a, String b) {\n        if (a.length() != b.length()) {\n            return false;\n        }\n        \n        String concat_b = b + b;\n        \n        return a.contains(b) || concat_b.contains(a);\n    }\n}\n"}
{"task_id": "Java/155", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> even_odd_count(int num) {\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        String numStr = String.valueOf(Math.abs(num));\n        \n        for (int i = 0; i < numStr.length(); i++) {\n            int digit = Character.getNumericValue(numStr.charAt(i));\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        \n        List<Integer> counts = new ArrayList<>();\n        counts.add(evenCount);\n        counts.add(oddCount);\n        \n        return counts;\n    }\n}\n"}
{"task_id": "Java/156", "generation": "import java.util.*;\n\nclass Solution {\n    public String int_to_mini_roman(int number) {\n        TreeMap<Integer, String> romanMap = new TreeMap<>(Collections.reverseOrder());\n        romanMap.put(1000, \"m\");\n        romanMap.put(900, \"cm\");\n        romanMap.put(500, \"d\");\n        romanMap.put(400, \"cd\");\n        romanMap.put(100, \"c\");\n        romanMap.put(90, \"xc\");\n        romanMap.put(50, \"l\");\n        romanMap.put(40, \"xl\");\n        romanMap.put(10, \"x\");\n        romanMap.put(9, \"ix\");\n        romanMap.put(5, \"v\");\n        romanMap.put(4, \"iv\");\n        romanMap.put(1, \"i\");\n\n        StringBuilder result = new StringBuilder();\n        for (int value : romanMap.keySet()) {\n            while (number >= value) {\n                result.append(romanMap.get(value));\n                number -= value;\n            }\n        }\n        return result.toString().toLowerCase();\n    }\n}\n"}
{"task_id": "Java/157", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean right_angle_triangle(int a, int b, int c) {\n        // Calculate a^2 + b^2\n        int abSquare = a * a + b * b;\n        \n        // Calculate c^2\n        int cSquare = c * c;\n        \n        // Check if it forms a right-angled triangle\n        return abSquare == cSquare;\n    }\n}\n"}
{"task_id": "Java/158", "generation": "import java.util.*;\n\nclass Solution {\n    public String find_max(List<String> words) {\n        int maxUnique = 0;\n        String maxWord = \"\";\n        int maxWordIndex = -1;\n\n        for (int i = 0; i < words.size(); i++) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : words.get(i).toCharArray()) {\n                uniqueChars.add(c);\n            }\n            if (uniqueChars.size() > maxUnique || (uniqueChars.size() == maxUnique && words.get(i).compareTo(maxWord) < 0)) {\n                maxUnique = uniqueChars.size();\n                maxWord = words.get(i);\n                maxWordIndex = i;\n            }\n        }\n\n        return maxWord;\n    }\n}\n"}
{"task_id": "Java/159", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> eat(int number, int need, int remaining) {\n        int totalEaten = number + need;\n        int carrotsLeft = remaining - totalEaten;\n        if (carrotsLeft < 0) {\n            carrotsLeft = 0;\n        }\n        List<Integer> result = new ArrayList<>();\n        result.add(totalEaten);\n        result.add(carrotsLeft);\n        return result;\n    }\n}\n"}
{"task_id": "Java/160", "generation": "import java.util.*;\n\nclass Solution {\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        int result = operand.get(0);\n        int current = operand.get(0);\n\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int nextOperand = operand.get(i + 1);\n\n            switch (op) {\n                case \"+\":\n                    current += nextOperand;\n                    break;\n                case \"-\":\n                    current -= nextOperand;\n                    break;\n                case \"*\":\n                    current *= nextOperand;\n                    break;\n                case \"/\":\n                    current /= nextOperand;\n                    break;\n                case \"**\":\n                    current = (int) Math.pow(current, nextOperand);\n                    break;\n                default:\n                    // Handle invalid operator\n                    break;\n            }\n        }\n\n        return current;\n    }\n}\n"}
{"task_id": "Java/161", "generation": "import java.util.*;\n\nclass Solution {\n    public String solve(String s) {\n        String result = \"\";\n        boolean hasLetter = false;\n        \n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                hasLetter = true;\n                if (Character.isUpperCase(c)) {\n                    result += Character.toLowerCase(c);\n                } else {\n                    result += Character.toUpperCase(c);\n                }\n            } else {\n                result += c;\n            }\n        }\n        \n        if (!hasLetter) {\n            result = new StringBuilder(result).reverse().toString();\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/162", "generation": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5Hash = bigInt.toString(16);\n        \n        // Pad with zeros if the length is less than 32\n        while (md5Hash.length() < 32) {\n            md5Hash = \"0\" + md5Hash;\n        }\n\n        return Optional.of(md5Hash);\n    }\n}\n"}
{"task_id": "Java/163", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> generate_integers(int a, int b) {\n        List<Integer> evenDigits = new ArrayList<>();\n        \n        for (int i = Math.min(a, b); i <= Math.max(a, b); i++) {\n            if (i % 2 == 0 && i < 10) {\n                evenDigits.add(i);\n            }\n        }\n        \n        Collections.sort(evenDigits);\n        return evenDigits;\n    }\n}\n"}
{"task_id": "Java/0", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        boolean result = false;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    result = true;\n                    break;\n                }\n            }\n            if (result) {\n                break;\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/1", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> separate_paren_groups(String paren_string) {\n        List<String> separatedGroups = new ArrayList<>();\n        int balance = 0;\n        int start = 0;\n\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                balance++;\n            } else if (paren_string.charAt(i) == ')') {\n                balance--;\n            }\n\n            if (balance == 0) {\n                separatedGroups.add(paren_string.substring(start, i + 1).replaceAll(\"\\\\s\", \"\"));\n                start = i + 1;\n            }\n        }\n\n        return separatedGroups;\n    }\n}\n"}
{"task_id": "Java/2", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double truncate_number(double number) {\n        String numStr = String.valueOf(number);\n        int decimalIndex = numStr.indexOf('.');\n        String decimalPart = numStr.substring(decimalIndex);\n        return Double.parseDouble(decimalPart);\n    }\n}\n"}
{"task_id": "Java/3", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/4", "generation": "import java.util.*;\n\nclass Solution {\n    public double mean_absolute_deviation(List<Double> numbers) {\n        double mean = calculateMean(numbers);\n        double sumDiff = 0;\n        for (double num : numbers) {\n            double diff = Math.abs(num - mean);\n            sumDiff += diff;\n        }\n        return sumDiff / numbers.size();\n    }\n\n    private double calculateMean(List<Double> numbers) {\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        return sum / numbers.size();\n    }\n}\n"}
{"task_id": "Java/5", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/6", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> parse_nested_parens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        int maxDepth = 0;\n        int currentDepth = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                currentDepth++;\n            } else if (c == ')') {\n                currentDepth--;\n            } else if (c == ' ') {\n                maxDepth = Math.max(maxDepth, currentDepth);\n                currentDepth = 0;\n            }\n        }\n\n        result.add(maxDepth);\n        return result;\n    }\n}\n"}
{"task_id": "Java/7", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> filteredList = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredList.add(str);\n            }\n        }\n        return filteredList;\n    }\n}\n"}
{"task_id": "Java/8", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> sum_product(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        \n        if (numbers.isEmpty()) {\n            return List.of(0, 1);\n        }\n        \n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        \n        return List.of(sum, product);\n    }\n}\n"}
{"task_id": "Java/9", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> rollingMax = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n\n        for (int num : numbers) {\n            max = Math.max(max, num);\n            rollingMax.add(max);\n        }\n\n        return rollingMax;\n    }\n}\n"}
{"task_id": "Java/10", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    public String make_palindrome(String string) {\n        int end = string.length();\n        while (end > 0) {\n            if (isPalindrome(string.substring(0, end))) {\n                break;\n            }\n            end--;\n        }\n        return string.substring(0, end) + new StringBuilder(string.substring(end)).reverse().toString();\n    }\n}\n"}
{"task_id": "Java/11", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String string_xor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            int bitA = a.charAt(i) - '0';\n            int bitB = b.charAt(i) - '0';\n            result.append(bitA ^ bitB);\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/12", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longestString = strings.get(0);\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n\n        return Optional.of(longestString);\n    }\n}\n"}
{"task_id": "Java/13", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int greatest_common_divisor(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return Math.abs(a);\n    }\n}\n"}
{"task_id": "Java/14", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> all_prefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            prefixes.add(string.substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}\n"}
{"task_id": "Java/15", "generation": "import java.util.*;\n\nclass Solution {\n    public String string_sequence(int n) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            result.append(i);\n            if (i != n) {\n                result.append(\" \");\n            }\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/16", "generation": "import java.util.*;\n\nclass Solution {\n    public int count_distinct_characters(String string) {\n        Set<Character> uniqueChars = new HashSet<>();\n        string = string.toLowerCase();\n\n        for (char ch : string.toCharArray()) {\n            uniqueChars.add(ch);\n        }\n\n        return uniqueChars.size();\n    }\n}\n"}
{"task_id": "Java/17", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> parse_music(String string) {\n        List<Integer> durations = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            char current = string.charAt(i);\n            if (current == 'o') {\n                durations.add(4);\n            } else if (current == 'o' && string.charAt(i + 1) == '|') {\n                durations.add(2);\n                i++; // Skip the next character as well\n            } else if (current == '.' && string.charAt(i + 1) == '|') {\n                durations.add(1);\n                i++; // Skip the next character as well\n            }\n        }\n        return durations;\n    }\n}\n"}
{"task_id": "Java/18", "generation": "import java.util.*;\n\nclass Solution {\n    public int how_many_times(String string, String substring) {\n        int count = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/19", "generation": "import java.util.*;\n\nclass Solution {\n    public String sort_numbers(String numbers) {\n        Map<String, Integer> numeralMap = new HashMap<>();\n        numeralMap.put(\"zero\", 0);\n        numeralMap.put(\"one\", 1);\n        numeralMap.put(\"two\", 2);\n        numeralMap.put(\"three\", 3);\n        numeralMap.put(\"four\", 4);\n        numeralMap.put(\"five\", 5);\n        numeralMap.put(\"six\", 6);\n        numeralMap.put(\"seven\", 7);\n        numeralMap.put(\"eight\", 8);\n        numeralMap.put(\"nine\", 9);\n        \n        String[] numeralArray = numbers.split(\" \");\n        \n        Arrays.sort(numeralArray, (a, b) -> numeralMap.get(a) - numeralMap.get(b));\n        \n        return String.join(\" \", numeralArray);\n    }\n}\n"}
{"task_id": "Java/20", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        List<Double> closest_pair = new ArrayList<>();\n        closest_pair.add(numbers.get(0));\n        closest_pair.add(numbers.get(1));\n        double distance = Math.abs(numbers.get(1) - numbers.get(0));\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < distance) {\n                    closest_pair.clear();\n                    closest_pair.add(numbers.get(i));\n                    closest_pair.add(numbers.get(j));\n                    distance = Math.abs(numbers.get(i) - numbers.get(j));\n                }\n            }\n        }\n        Collections.sort(closest_pair);\n        return closest_pair;\n    }\n}\n"}
{"task_id": "Java/21", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        double min_value = numbers.get(0);\n        double max_value = numbers.get(0);\n\n        // Find the minimum and maximum values in the list\n        for (double num : numbers) {\n            min_value = Math.min(min_value, num);\n            max_value = Math.max(max_value, num);\n        }\n\n        List<Double> rescaled_numbers = new ArrayList<>();\n        // Apply linear transformation to each element\n        for (double num : numbers) {\n            double rescaled_value = (num - min_value) / (max_value - min_value);\n            rescaled_numbers.add(rescaled_value);\n        }\n\n        return rescaled_numbers;\n    }\n}\n"}
{"task_id": "Java/22", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> filter_integers(List<Object> values) {\n        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n}\n"}
{"task_id": "Java/23", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int strlen(String string) {\n        int length = 0;\n        for (int i = 0; i < string.length(); i++) {\n            length++;\n        }\n        return length;\n    }\n}\n"}
{"task_id": "Java/24", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largest_divisor(int n) {\n        int largestDivisor = 1;\n        for (int i = 1; i <= n/2; i++) {\n            if (n % i == 0) {\n                largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n    }\n}\n"}
{"task_id": "Java/25", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}\n"}
{"task_id": "Java/26", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        Set<Integer> uniqueSet = new HashSet<>();\n        List<Integer> result = new ArrayList<>();\n        \n        for (Integer num : numbers) {\n            if (!uniqueSet.contains(num)) {\n                result.add(num);\n                uniqueSet.add(num);\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/27", "generation": "import java.util.*;\n\nclass Solution {\n    public String flip_case(String string) {\n        StringBuilder result = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                result.append(Character.toUpperCase(c));\n            } else if (Character.isUpperCase(c)) {\n                result.append(Character.toLowerCase(c));\n            } else {\n                result.append(c);\n            }\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/28", "generation": "import java.util.*;\n\nclass Solution {\n    public String concatenate(List<String> strings) {\n        StringBuilder result = new StringBuilder();\n        if (strings.isEmpty()) {\n            return \"\";\n        }\n        for (String str : strings) {\n            result.append(str);\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/29", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        List<String> filteredStrings = new ArrayList<>();\n        for (String str : strings) {\n            if (str.startsWith(prefix)) {\n                filteredStrings.add(str);\n            }\n        }\n        return filteredStrings;\n    }\n}\n"}
{"task_id": "Java/30", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> get_positive(List<Integer> l) {\n        List<Integer> positiveNumbers = new ArrayList<>();\n        for (int num : l) {\n            if (num > 0) {\n                positiveNumbers.add(num);\n            }\n        }\n        return positiveNumbers;\n    }\n}\n"}
{"task_id": "Java/31", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_prime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/32", "generation": "import java.util.*;\n\nclass Solution {\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n\n    public double find_zero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"List must have an even number of coefficients.\");\n        }\n\n        double largestNonZero = 0;\n        for (double coeff : xs) {\n            if (coeff != 0 && Math.abs(coeff) > Math.abs(largestNonZero)) {\n                largestNonZero = coeff;\n            }\n        }\n\n        List<Double> derivativeCoeffs = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i += 2) {\n            derivativeCoeffs.add(xs.get(i) * i);\n        }\n\n        double x = 1.0; // Initial guess for Newton's method\n        double epsilon = 1e-6; // Tolerance for convergence\n        while (Math.abs(poly(derivativeCoeffs, x)) > epsilon) {\n            x = x - poly(xs, x) / poly(derivativeCoeffs, x);\n        }\n\n        return x;\n    }\n}\n"}
{"task_id": "Java/33", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> sort_third(List<Integer> l) {\n        List<Integer> sortedList = new ArrayList<>(l);\n        List<Integer> divisibleByThree = new ArrayList<>();\n        \n        for (int i = 0; i < l.size(); i++) {\n            if ((i + 1) % 3 == 0) {\n                divisibleByThree.add(l.get(i));\n            }\n        }\n        \n        Collections.sort(divisibleByThree);\n        \n        int index = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if ((i + 1) % 3 == 0) {\n                sortedList.set(i, divisibleByThree.get(index));\n                index++;\n            }\n        }\n        \n        return sortedList;\n    }\n}\n"}
{"task_id": "Java/34", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> uniqueSet = new HashSet<>(l);\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n        Collections.sort(uniqueList);\n        return uniqueList;\n    }\n}\n"}
{"task_id": "Java/35", "generation": "import java.util.*;\n\nclass Solution {\n    public int max_element(List<Integer> l) {\n        int max = Integer.MIN_VALUE; // Initialize max to the smallest possible integer value\n        for (int num : l) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n}\n"}
{"task_id": "Java/36", "generation": "import java.util.*;\n\nclass Solution {\n    public int fizz_buzz(int n) {\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String numStr = String.valueOf(i);\n                count += countOccurrences(numStr, '7');\n            }\n        }\n        return count;\n    }\n\n    private int countOccurrences(String str, char target) {\n        int count = 0;\n        for (char c : str.toCharArray()) {\n            if (c == target) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/37", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sort_even(List<Integer> l) {\n        List<Integer> oddList = new ArrayList<>();\n        List<Integer> evenList = new ArrayList<>();\n\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                evenList.add(l.get(i));\n            } else {\n                oddList.add(l.get(i));\n            }\n        }\n\n        Collections.sort(evenList);\n\n        List<Integer> result = new ArrayList<>();\n        int evenIndex = 0;\n        int oddIndex = 0;\n\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(evenList.get(evenIndex));\n                evenIndex++;\n            } else {\n                result.add(oddList.get(oddIndex));\n                oddIndex++;\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/38", "generation": "import java.util.*;\n\nclass Solution {\n    public String decodeCyclic(String s) {\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        \n        List<String> decodedGroups = new ArrayList<>();\n        for (String group : groups) {\n            if (group.length() == 3) {\n                String decodedGroup = group.charAt(2) + group.substring(0, 2);\n                decodedGroups.add(decodedGroup);\n            }\n        }\n        \n        return String.join(\"\", decodedGroups);\n    }\n}\n"}
{"task_id": "Java/39", "generation": "import java.util.*;\n\nclass Solution {\n    public int prime_fib(int n) {\n        if (n <= 0) {\n            return -1; // Invalid input\n        }\n\n        int count = 0;\n        int num = 2;\n        int result = 0;\n\n        while (count < n) {\n            if (isFibonacci(num) && isPrime(num)) {\n                count++;\n                result = num;\n            }\n            num++;\n        }\n\n        return result;\n    }\n\n    // Function to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Function to check if a number is a Fibonacci number\n    private boolean isFibonacci(int num) {\n        return isPerfectSquare(5 * num * num + 4) || isPerfectSquare(5 * num * num - 4);\n    }\n\n    // Function to check if a number is a perfect square\n    private boolean isPerfectSquare(int x) {\n        int s = (int) Math.sqrt(x);\n        return s * s == x;\n    }\n}\n"}
{"task_id": "Java/40", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/41", "generation": "import java.util.*;\n\nclass Solution {\n    public int car_race_collision(int n) {\n        int collisions = 0;\n        int[] leftToRight = new int[n];\n        int[] rightToLeft = new int[n];\n\n        // Initialize positions of cars\n        for (int i = 0; i < n; i++) {\n            leftToRight[i] = i;\n            rightToLeft[i] = 3 * n - i; // Initial positions are far apart\n        }\n\n        // Simulate car movement and check for collisions\n        for (int time = 0; time < 2 * n; time++) {\n            for (int i = 0; i < n; i++) {\n                leftToRight[i]++;\n                rightToLeft[i]--;\n                if (leftToRight[i] == rightToLeft[i]) {\n                    collisions++;\n                }\n            }\n        }\n\n        return collisions;\n    }\n}\n"}
{"task_id": "Java/42", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> incr_list(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (Integer num : l) {\n            result.add(num + 1);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/43", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for (int num : l) {\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/44", "generation": "import java.util.*;\n\nclass Solution {\n    public String change_base(int x, int base) {\n        if (x == 0) {\n            return \"0\";\n        }\n        \n        StringBuilder result = new StringBuilder();\n        \n        while (x > 0) {\n            int remainder = x % base;\n            result.append(remainder);\n            x /= base;\n        }\n        \n        return result.reverse().toString();\n    }\n}\n"}
{"task_id": "Java/45", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangle_area(double a, double h) {\n        return 0.5 * a * h;\n    }\n}\n"}
{"task_id": "Java/46", "generation": "import java.util.*;\n\nclass Solution {\n    public int fib4(int n) {\n        if (n < 4) {\n            int[] fib4Array = {0, 0, 2, 0};\n            return fib4Array[n];\n        }\n\n        int[] fib4Array = new int[n + 1];\n        fib4Array[0] = 0;\n        fib4Array[1] = 0;\n        fib4Array[2] = 2;\n        fib4Array[3] = 0;\n\n        for (int i = 4; i <= n; i++) {\n            fib4Array[i] = fib4Array[i - 1] + fib4Array[i - 2] + fib4Array[i - 3] + fib4Array[i - 4];\n        }\n\n        return fib4Array[n];\n    }\n}\n"}
{"task_id": "Java/47", "generation": "import java.util.*;\n\nclass Solution {\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 != 0) {\n            return l.get(n / 2);\n        } else {\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        }\n    }\n}\n"}
{"task_id": "Java/48", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_palindrome(String text) {\n        int start = 0;\n        int end = text.length() - 1;\n        \n        while (start < end) {\n            if (text.charAt(start) != text.charAt(end)) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/49", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int modp(int n, int p) {\n        long result = 1;\n        long base = 2;\n        long mod = p;\n        \n        while (n > 0) {\n            if (n % 2 == 1) {\n                result = (result * base) % mod;\n            }\n            base = (base * base) % mod;\n            n /= 2;\n        }\n        \n        return (int) result;\n    }\n}\n"}
{"task_id": "Java/50", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public String decode_shift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26));\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/51", "generation": "import java.util.*;\n\nclass Solution {\n    public String remove_vowels(String text) {\n        String result = \"\";\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        for (char ch : text.toCharArray()) {\n            if (!vowels.contains(ch)) {\n                result += ch;\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/52", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean below_threshold(List<Integer> l, int t) {\n        boolean result = true;\n        for (int num : l) {\n            if (num >= t) {\n                result = false;\n                break;\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/53", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add(int x, int y) {\n        return x + y;\n    }\n}\n"}
{"task_id": "Java/54", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean same_chars(String s0, String s1) {\n        Map<Character, Integer> map0 = new HashMap<>();\n        Map<Character, Integer> map1 = new HashMap<>();\n        \n        for (char c : s0.toCharArray()) {\n            map0.put(c, map0.getOrDefault(c, 0) + 1);\n        }\n        \n        for (char c : s1.toCharArray()) {\n            map1.put(c, map1.getOrDefault(c, 0) + 1);\n        }\n        \n        return map0.equals(map1);\n    }\n}\n"}
{"task_id": "Java/55", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0, b = 1;\n        for (int i = 2; i <= n; i++) {\n            int next = a + b;\n            a = b;\n            b = next;\n        }\n        return b;\n    }\n}\n"}
{"task_id": "Java/56", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean correct_bracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        \n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '<') {\n                stack.push(bracket);\n            } else if (bracket == '>') {\n                if (stack.isEmpty() || stack.peek() != '<') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/57", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean monotonic(List<Integer> l) {\n        boolean increasing = true;\n        boolean decreasing = true;\n        \n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n        }\n        \n        return increasing || decreasing;\n    }\n}\n"}
{"task_id": "Java/58", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        List<Integer> commonElements = new ArrayList<>();\n        Set<Integer> uniqueElements = new HashSet<>(l1);\n\n        for (int num : l2) {\n            if (uniqueElements.contains(num)) {\n                commonElements.add(num);\n            }\n        }\n\n        Collections.sort(commonElements);\n        return commonElements;\n    }\n}\n"}
{"task_id": "Java/59", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largest_prime_factor(int n) {\n        int maxPrime = 2;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                boolean isPrime = true;\n                for (int j = 2; j <= Math.sqrt(i); j++) {\n                    if (i % j == 0) {\n                        isPrime = false;\n                        break;\n                    }\n                }\n                if (isPrime) {\n                    maxPrime = i;\n                }\n            }\n        }\n        return maxPrime;\n    }\n}\n"}
{"task_id": "Java/60", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_to_n(int n) {\n        return n * (n + 1) / 2;\n    }\n}\n"}
{"task_id": "Java/61", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean correct_bracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        \n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '(') {\n                stack.push(bracket);\n            } else if (bracket == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/62", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> derivativeCoefficients = new ArrayList<>();\n        \n        for (int i = 1; i < xs.size(); i++) {\n            derivativeCoefficients.add(xs.get(i) * i);\n        }\n        \n        return derivativeCoefficients;\n    }\n}\n"}
{"task_id": "Java/63", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fibfib(int n) {\n        if (n == 0 || n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        } else {\n            return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n        }\n    }\n}\n"}
{"task_id": "Java/64", "generation": "import java.util.*;\n\nclass Solution {\n    public int vowels_count(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char ch = Character.toLowerCase(s.charAt(i));\n            if ((ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') ||\n                (ch == 'y' && i == s.length() - 1)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/65", "generation": "import java.util.*;\n\nclass Solution {\n    public String circular_shift(int x, int shift) {\n        String numStr = String.valueOf(x);\n        int len = numStr.length();\n        \n        if (shift > len) {\n            shift = shift % len;\n        }\n        \n        if (shift == 0) {\n            return numStr;\n        }\n        \n        String result = numStr.substring(len - shift) + numStr.substring(0, len - shift);\n        return result;\n    }\n}\n"}
{"task_id": "Java/66", "generation": "import java.util.*;\n\nclass Solution {\n    public int digitSum(String s) {\n        int sum = 0;\n        for (char ch : s.toCharArray()) {\n            if (Character.isUpperCase(ch)) {\n                sum += (int) ch;\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/67", "generation": "import java.util.*;\n\nclass Solution {\n    public int fruit_distribution(String s, int n) {\n        // Split the string to extract counts of apples and oranges\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[3]);\n        \n        // Calculate the number of mango fruits\n        int mangoes = n - apples - oranges;\n        \n        return mangoes;\n    }\n}\n"}
{"task_id": "Java/68", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> pluck(List<Integer> arr) {\n        int minEvenValue = Integer.MAX_VALUE;\n        int minEvenIndex = -1;\n\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < minEvenValue) {\n                minEvenValue = arr.get(i);\n                minEvenIndex = i;\n            } else if (arr.get(i) % 2 == 0 && arr.get(i) == minEvenValue && minEvenIndex == -1) {\n                minEvenIndex = i;\n            }\n        }\n\n        if (minEvenIndex != -1) {\n            return Arrays.asList(minEvenValue, minEvenIndex);\n        } else {\n            return new ArrayList<>();\n        }\n    }\n}\n"}
{"task_id": "Java/69", "generation": "import java.util.*;\n\nclass Solution {\n    public int search(List<Integer> lst) {\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        // Populate the frequency map\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        int result = -1;\n        \n        // Find the greatest integer with required frequency\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            if (entry.getKey() == entry.getValue() && entry.getKey() > result) {\n                result = entry.getKey();\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/70", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        Collections.sort(lst);\n        List<Integer> result = new ArrayList<>();\n        int start = 0, end = lst.size() - 1;\n        \n        while (start <= end) {\n            result.add(lst.get(start));\n            if (start != end) {\n                result.add(lst.get(end));\n            }\n            start++;\n            end--;\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/71", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangle_area(double a, double b, double c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2;\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            return Math.round(area * 100.0) / 100.0; // Round to 2 decimal points\n        } else {\n            return -1;\n        }\n    }\n}\n"}
{"task_id": "Java/72", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean will_it_fly(List<Integer> q, int w) {\n        boolean isPalindromic = true;\n        \n        // Check if the list is palindromic\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (!q.get(i).equals(q.get(q.size() - i - 1))) {\n                isPalindromic = false;\n                break;\n            }\n        }\n        \n        // Calculate the sum of elements\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n        \n        // Check conditions for flying\n        return isPalindromic && sum <= w;\n    }\n}\n"}
{"task_id": "Java/73", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int smallest_change(List<Integer> arr) {\n        int changes = 0;\n        int start = 0;\n        int end = arr.size() - 1;\n        \n        while (start < end) {\n            if (!arr.get(start).equals(arr.get(end))) {\n                changes++;\n            }\n            start++;\n            end--;\n        }\n        \n        return changes;\n    }\n}\n"}
{"task_id": "Java/74", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        int totalChars1 = 0;\n        int totalChars2 = 0;\n\n        for (String str : lst1) {\n            totalChars1 += str.length();\n        }\n\n        for (String str : lst2) {\n            totalChars2 += str.length();\n        }\n\n        if (totalChars1 < totalChars2) {\n            return lst1;\n        } else if (totalChars2 < totalChars1) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}\n"}
{"task_id": "Java/75", "generation": "import java.util.*;\n\nclass Solution {\n    // Function to generate all prime numbers less than 100\n    public List<Integer> generatePrimes() {\n        List<Integer> primes = new ArrayList<>();\n        boolean[] isPrime = new boolean[100];\n        Arrays.fill(isPrime, true);\n        \n        for (int p = 2; p * p < 100; p++) {\n            if (isPrime[p]) {\n                for (int i = p * p; i < 100; i += p) {\n                    isPrime[i] = false;\n                }\n            }\n        }\n        \n        for (int i = 2; i < 100; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n            }\n        }\n        \n        return primes;\n    }\n    \n    // Function to check if a number is prime\n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    // Main function to check if a number is the multiplication of 3 prime numbers\n    public boolean is_multiply_prime(int a) {\n        List<Integer> primes = generatePrimes();\n        \n        for (int i = 0; i < primes.size(); i++) {\n            for (int j = i; j < primes.size(); j++) {\n                for (int k = j; k < primes.size(); k++) {\n                    if (primes.get(i) * primes.get(j) * primes.get(k) == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        \n        return false;\n    }\n}\n"}
{"task_id": "Java/76", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_simple_power(int x, int n) {\n        int power = 1;\n        while (power <= x) {\n            if (power == x) {\n                return true;\n            }\n            power *= n;\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/77", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean iscube(int a) {\n        if (a < 0) {\n            return true;\n        }\n        double cubeRoot = Math.cbrt(a);\n        return cubeRoot == Math.floor(cubeRoot);\n    }\n}\n"}
{"task_id": "Java/78", "generation": "import java.util.*;\n\nclass Solution {\n    public int hex_key(String num) {\n        Set<Character> primeDigits = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        int count = 0;\n        \n        for (char c : num.toCharArray()) {\n            if (primeDigits.contains(c)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/79", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String decimal_to_binary(int decimal) {\n        String binary = Integer.toBinaryString(decimal);\n        return \"db\" + binary + \"db\";\n    }\n}\n"}
{"task_id": "Java/80", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean is_happy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n\n        for (int i = 0; i <= s.length() - 3; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/81", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        Map<Double, String> gradeMap = new HashMap<>();\n        gradeMap.put(4.0, \"A+\");\n        gradeMap.put(3.7, \"A\");\n        gradeMap.put(3.3, \"A-\");\n        gradeMap.put(3.0, \"B+\");\n        gradeMap.put(2.7, \"B\");\n        gradeMap.put(2.3, \"B-\");\n        gradeMap.put(2.0, \"C+\");\n        gradeMap.put(1.7, \"C\");\n        gradeMap.put(1.3, \"C-\");\n        gradeMap.put(1.0, \"D+\");\n        gradeMap.put(0.7, \"D\");\n        gradeMap.put(0.0, \"D-\");\n\n        List<String> letterGrades = new ArrayList<>();\n        for (Double gpa : grades) {\n            for (Map.Entry<Double, String> entry : gradeMap.entrySet()) {\n                if (gpa >= entry.getKey()) {\n                    letterGrades.add(entry.getValue());\n                    break;\n                }\n            }\n        }\n        return letterGrades;\n    }\n}\n"}
{"task_id": "Java/82", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean prime_length(String string) {\n        int n = string.length();\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/83", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int starts_one_ends(int n) {\n        int startWithOne = 1;\n        int endWithOne = 1;\n\n        for (int i = 2; i <= n; i++) {\n            startWithOne *= 9;\n            endWithOne *= 9;\n        }\n\n        return startWithOne + endWithOne;\n    }\n}\n"}
{"task_id": "Java/84", "generation": "import java.util.*;\n\nclass Solution {\n    public String solve(int N) {\n        int sum = 0;\n        while (N > 0) {\n            sum += N % 10;\n            N /= 10;\n        }\n        return Integer.toBinaryString(sum);\n    }\n}\n"}
{"task_id": "Java/85", "generation": "import java.util.*;\n\nclass Solution {\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/86", "generation": "import java.util.*;\n\nclass Solution {\n    public String anti_shuffle(String s) {\n        String[] words = s.split(\" \");\n        StringBuilder result = new StringBuilder();\n\n        for (int i = 0; i < words.length; i++) {\n            char[] chars = words[i].toCharArray();\n            Arrays.sort(chars);\n            result.append(chars);\n\n            if (i < words.length - 1) {\n                result.append(\" \");\n            }\n        }\n\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/87", "generation": "import java.util.*;\n\nclass Solution {\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    List<Integer> coordinates = new ArrayList<>();\n                    coordinates.add(i);\n                    coordinates.add(j);\n                    result.add(coordinates);\n                }\n            }\n        }\n        \n        result.sort((a, b) -> {\n            if (a.get(0).equals(b.get(0))) {\n                return b.get(1) - a.get(1);\n            }\n            return a.get(0) - b.get(0);\n        });\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/88", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> array) {\n        List<Integer> sortedArray = new ArrayList<>(array);\n        \n        if (array.isEmpty()) {\n            return sortedArray;\n        }\n        \n        int sum = array.get(0) + array.get(array.size() - 1);\n        \n        if (sum % 2 == 0) {\n            Collections.sort(sortedArray, Collections.reverseOrder());\n        } else {\n            Collections.sort(sortedArray);\n        }\n        \n        return sortedArray;\n    }\n}\n"}
{"task_id": "Java/89", "generation": "import java.util.*;\n\nclass Solution {\n    public String encrypt(String s) {\n        String result = \"\";\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                char encryptedChar = (char) ('a' + (c - 'a' + 2 * 2) % 26);\n                result += encryptedChar;\n            } else {\n                result += c;\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/90", "generation": "import java.util.*;\n\nclass Solution {\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n        \n        List<Integer> sortedList = new ArrayList<>(lst);\n        Collections.sort(sortedList);\n        \n        return Optional.of(sortedList.get(1));\n    }\n}\n"}
{"task_id": "Java/91", "generation": "import java.util.*;\n\nclass Solution {\n    public int is_bored(String S) {\n        String[] sentences = S.split(\"[.?!]\");\n        int boredomCount = 0;\n        \n        for (String sentence : sentences) {\n            String trimmedSentence = sentence.trim();\n            if (trimmedSentence.startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n        \n        return boredomCount;\n    }\n}\n"}
{"task_id": "Java/92", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean any_int(Object x, Object y, Object z) {\n        if (!(x instanceof Integer) || !(y instanceof Integer) || !(z instanceof Integer)) {\n            return false;\n        }\n        int a = (int) x;\n        int b = (int) y;\n        int c = (int) z;\n        return a == b + c || b == a + c || c == a + b;\n    }\n}\n"}
{"task_id": "Java/93", "generation": "import java.util.*;\n\nclass Solution {\n    public String encode(String message) {\n        StringBuilder encodedMessage = new StringBuilder();\n        for (char ch : message.toCharArray()) {\n            if (Character.isLetter(ch)) {\n                char modifiedChar = Character.isUpperCase(ch) ? Character.toLowerCase(ch) : Character.toUpperCase(ch);\n                if (\"AEIOUaeiou\".indexOf(modifiedChar) != -1) {\n                    modifiedChar = (char) (modifiedChar + 2);\n                    if (modifiedChar > 'z') {\n                        modifiedChar = (char) (modifiedChar - 26);\n                    }\n                }\n                encodedMessage.append(modifiedChar);\n            } else {\n                encodedMessage.append(ch);\n            }\n        }\n        return encodedMessage.toString();\n    }\n}\n"}
{"task_id": "Java/94", "generation": "import java.util.*;\n\nclass Solution {\n    public int sumOfDigitsOfLargestPrime(List<Integer> lst) {\n        int largestPrime = 0;\n        int sum = 0;\n\n        for (int num : lst) {\n            if (isPrime(num) && num > largestPrime) {\n                largestPrime = num;\n            }\n        }\n\n        sum = sumOfDigits(largestPrime);\n        return sum;\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/95", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        boolean isLower = false;\n        boolean isUpper = false;\n\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String strKey = (String) key;\n            if (strKey.equals(strKey.toLowerCase())) {\n                isLower = true;\n            } else if (strKey.equals(strKey.toUpperCase())) {\n                isUpper = true;\n            }\n            if ((isLower && isUpper) || (isLower && !strKey.equals(strKey.toLowerCase())) || (isUpper && !strKey.equals(strKey.toUpperCase()))) {\n                return false;\n            }\n        }\n\n        return isLower || isUpper;\n    }\n}\n"}
{"task_id": "Java/96", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/97", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int multiply(int a, int b) {\n        int unitDigitA = Math.abs(a % 10);\n        int unitDigitB = Math.abs(b % 10);\n        return unitDigitA * unitDigitB;\n    }\n}\n"}
{"task_id": "Java/98", "generation": "import java.util.*;\n\nclass Solution {\n    public int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char ch = s.charAt(i);\n            if (Character.isUpperCase(ch) && isVowel(ch)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isVowel(char ch) {\n        return ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U';\n    }\n}\n"}
{"task_id": "Java/99", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int closest_integer(String value) {\n        double num = Double.parseDouble(value);\n        double floor = Math.floor(num);\n        double ceil = Math.ceil(num);\n        \n        double dist_floor = Math.abs(num - floor);\n        double dist_ceil = Math.abs(num - ceil);\n        \n        if (dist_floor < dist_ceil) {\n            return (int) Math.round(floor);\n        } else {\n            return (int) Math.round(ceil);\n        }\n    }\n}\n"}
{"task_id": "Java/100", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> stonesInEachLevel = new ArrayList<>();\n        stonesInEachLevel.add(n);\n\n        for (int i = 2; i <= n; i++) {\n            if (n % 2 == 0) {\n                n += 2;\n            } else {\n                n += 1;\n            }\n            stonesInEachLevel.add(n);\n        }\n\n        return stonesInEachLevel;\n    }\n}\n"}
{"task_id": "Java/101", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> words_string(String s) {\n        List<String> words = new ArrayList<>();\n        String[] splitWords = s.split(\"[,\\\\s]+\");\n        \n        for (String word : splitWords) {\n            words.add(word);\n        }\n        \n        return words;\n    }\n}\n"}
{"task_id": "Java/102", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int choose_num(int x, int y) {\n        int biggestEven = Integer.MIN_VALUE;\n        for (int i = x; i <= y; i++) {\n            if (i % 2 == 0 && i > biggestEven) {\n                biggestEven = i;\n            }\n        }\n        if (biggestEven == Integer.MIN_VALUE) {\n            return -1;\n        }\n        return biggestEven;\n    }\n}\n"}
{"task_id": "Java/103", "generation": "import java.util.*;\n\nclass Solution {\n    public Object rounded_avg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n\n        int sum = 0;\n        int count = m - n + 1;\n\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n\n        int avg = Math.round((float) sum / count);\n        return Integer.toBinaryString(avg);\n    }\n}\n"}
{"task_id": "Java/104", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> unique_digits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int num : x) {\n            String numStr = String.valueOf(num);\n            boolean hasEvenDigit = false;\n            \n            for (char digit : numStr.toCharArray()) {\n                if (digit != '0' && (digit - '0') % 2 == 0) {\n                    hasEvenDigit = true;\n                    break;\n                }\n            }\n            \n            if (!hasEvenDigit) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        return result;\n    }\n}\n"}
{"task_id": "Java/105", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> by_length(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        \n        List<Integer> filteredIntegers = arr.stream()\n                .filter(num -> num >= 1 && num <= 9)\n                .collect(Collectors.toList());\n        \n        Collections.sort(filteredIntegers);\n        Collections.reverse(filteredIntegers);\n        \n        Map<Integer, String> numberToName = new HashMap<>();\n        numberToName.put(1, \"One\");\n        numberToName.put(2, \"Two\");\n        numberToName.put(3, \"Three\");\n        numberToName.put(4, \"Four\");\n        numberToName.put(5, \"Five\");\n        numberToName.put(6, \"Six\");\n        numberToName.put(7, \"Seven\");\n        numberToName.put(8, \"Eight\");\n        numberToName.put(9, \"Nine\");\n        \n        for (Integer num : filteredIntegers) {\n            result.add(numberToName.get(num));\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/106", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sumOfNumbers(i));\n            }\n        }\n        return result;\n    }\n\n    private int factorial(int num) {\n        if (num == 0) {\n            return 1;\n        }\n        int fact = 1;\n        for (int i = 1; i <= num; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n\n    private int sumOfNumbers(int num) {\n        int sum = 0;\n        for (int i = 1; i <= num; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/107", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> even_odd_palindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n\n    private boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0;\n        int right = str.length() - 1;\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/108", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int count_nums(List<Integer> arr) {\n        int count = 0;\n        for (int num : arr) {\n            int sum = 0;\n            int temp = num < 0 ? -1 * num : num;\n            while (temp > 0) {\n                int digit = temp % 10;\n                temp = temp / 10;\n                count = count + digit;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/109", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean move_one_ball(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        int min = Collections.min(arr);\n        int minIndex = arr.indexOf(min);\n\n        if (minIndex == 0) {\n            return true;\n        }\n\n        int shifts = arr.size() - minIndex;\n        for (int i = 1; i < arr.size(); i++) {\n            int prev = arr.get((i - 1 + minIndex) % arr.size());\n            int current = arr.get((i + minIndex) % arr.size());\n            if (prev > current) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/110", "generation": "import java.util.*;\n\nclass Solution {\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int oddCount = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCount++;\n            }\n        }\n        return oddCount > 0 ? \"NO\" : \"YES\";\n    }\n}\n"}
{"task_id": "Java/111", "generation": "import java.util.*;\n\nclass Solution {\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> freqMap = new HashMap<>();\n        \n        String[] letters = test.split(\" \");\n        \n        for (String letter : letters) {\n            if (!letter.equals(\"\")) {\n                freqMap.put(letter, freqMap.getOrDefault(letter, 0) + 1);\n            }\n        }\n        \n        int maxCount = 0;\n        for (int count : freqMap.values()) {\n            maxCount = Math.max(maxCount, count);\n        }\n        \n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : freqMap.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/112", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Object> reverse_delete(String s, String c) {\n        StringBuilder result = new StringBuilder();\n        \n        // Remove characters from s that are present in c\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                result.append(ch);\n            }\n        }\n        \n        // Check if the result string is a palindrome\n        int start = 0, end = result.length() - 1;\n        while (start < end) {\n            if (result.charAt(start) != result.charAt(end)) {\n                return Arrays.asList(result.toString(), false);\n            }\n            start++;\n            end--;\n        }\n        \n        return Arrays.asList(result.toString(), true);\n    }\n}\n"}
{"task_id": "Java/113", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        \n        for (String str : lst) {\n            int oddCount = 0;\n            for (char ch : str.toCharArray()) {\n                int digit = ch - '0';\n                if (digit % 2 != 0) {\n                    oddCount++;\n                }\n            }\n            result.add(\"the number of odd elements \" + oddCount + \"n the str\" + oddCount + \"ng \" + str + \" of the \" + oddCount + \"nput.\");\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/114", "generation": "import java.util.*;\n\nclass Solution {\n    public int minSubArraySum(List<Integer> nums) {\n        int minSum = Integer.MAX_VALUE;\n        int sum = 0;\n        int start = 0;\n\n        for (int end = 0; end < nums.size(); end++) {\n            sum += nums.get(end);\n            minSum = Math.min(minSum, sum);\n\n            while (sum < 0 && start <= end) {\n                sum -= nums.get(start);\n                start++;\n                minSum = Math.min(minSum, sum);\n            }\n        }\n        return minSum;\n    }\n}\n"}
{"task_id": "Java/115", "generation": "import java.util.*;\n\nclass Solution {\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        int totalLowering = 0;\n        for (List<Integer> row : grid) {\n            int wellCapacity = 0;\n            for (int well : row) {\n                if (well == 1) {\n                    int times = (int) Math.ceil((double) wellCapacity / capacity);\n                    totalLowering += times;\n                    wellCapacity = capacity - (wellCapacity % capacity);\n                }\n            }\n        }\n        return totalLowering;\n    }\n}\n"}
{"task_id": "Java/116", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> arr) {\n        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int countA = Integer.bitCount(Math.abs(a));\n                int countB = Integer.bitCount(Math.abs(b));\n                \n                if (countA == countB) {\n                    return a - b;\n                }\n                return countA - countB;\n            }\n        });\n        return arr;\n    }\n}\n"}
{"task_id": "Java/117", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> select_words(String s, int n) {\n        List<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int consonantCount = 0;\n            for (char c : word.toCharArray()) {\n                if (Character.isLetter(c) && !isVowel(c)) {\n                    consonantCount++;\n                }\n            }\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n\n    private boolean isVowel(char c) {\n        c = Character.toLowerCase(c);\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n}\n"}
{"task_id": "Java/118", "generation": "import java.util.*;\n\nclass Solution {\n    public String get_closest_vowel(String word) {\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        String closestVowel = \"\";\n        boolean foundConsonant = false;\n\n        for (int i = word.length() - 2; i > 0; i--) {\n            char currentChar = word.charAt(i);\n            if (!vowels.contains(currentChar) && Character.isLetter(currentChar)) {\n                foundConsonant = true;\n            } else if (foundConsonant && vowels.contains(currentChar)) {\n                closestVowel = String.valueOf(currentChar);\n                break;\n            }\n        }\n\n        return closestVowel;\n    }\n}\n"}
{"task_id": "Java/119", "generation": "import java.util.*;\n\nclass Solution {\n    public String match_parens(List<String> lst) {\n        String concatenated = lst.get(0) + lst.get(1);\n        Stack<Character> stack = new Stack<>();\n\n        for (char c : concatenated.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return \"No\";\n                }\n                stack.pop();\n            }\n        }\n\n        return stack.isEmpty() ? \"Yes\" : \"No\";\n    }\n}\n"}
{"task_id": "Java/120", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        Collections.sort(arr, Collections.reverseOrder());\n        List<Integer> sublist = arr.subList(0, k);\n        Collections.sort(sublist);\n        return sublist;\n    }\n}\n"}
{"task_id": "Java/121", "generation": "import java.util.*;\n\nclass Solution {\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/122", "generation": "import java.util.*;\n\nclass Solution {\n    public int add_elements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (Math.abs(arr.get(i)) < 100) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/123", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> get_odd_collatz(int n) {\n        List<Integer> oddNumbers = new ArrayList<>();\n        \n        while (n != 1) {\n            if (n % 2 != 0) {\n                oddNumbers.add(n);\n            }\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n        }\n        \n        oddNumbers.add(1); // Adding 1 as the last odd number\n        \n        Collections.sort(oddNumbers);\n        \n        return oddNumbers;\n    }\n}\n"}
{"task_id": "Java/124", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean valid_date(String date) {\n        if (date.isEmpty()) {\n            return false;\n        }\n\n        String[] dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n            return false;\n        }\n\n        int month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        if ((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && (day < 1 || day > 31)) {\n            return false;\n        } else if ((month == 4 || month == 6 || month == 9 || month == 11) && (day < 1 || day > 30)) {\n            return false;\n        } else if (month == 2) {\n            if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {\n                if (day < 1 || day > 29) {\n                    return false;\n                }\n            } else {\n                if (day < 1 || day > 28) {\n                    return false;\n                }\n            }\n        }\n\n        return date.matches(\"^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(\\\\d{4})$\");\n    }\n}\n"}
{"task_id": "Java/125", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object split_words(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\"\\\\s+\"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 != 0) {\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n}\n"}
{"task_id": "Java/126", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean is_sorted(List<Integer> lst) {\n        int prev = Integer.MIN_VALUE;\n        Map<Integer, Integer> countMap = new HashMap<>();\n\n        for (int num : lst) {\n            if (num < prev) {\n                return false;\n            }\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n            if (countMap.get(num) > 2) {\n                return false;\n            }\n            prev = num;\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/127", "generation": "import java.util.*;\n\nclass Solution {\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n\n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n\n        if (intersectionStart > intersectionEnd) {\n            return \"NO\";\n        }\n\n        int length = intersectionEnd - intersectionStart;\n\n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/128", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int sum = 0;\n        int product = 1;\n\n        for (int num : arr) {\n            sum += Math.abs(num);\n            product *= Integer.signum(num);\n        }\n\n        return Optional.of(sum * product);\n    }\n}\n"}
{"task_id": "Java/129", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        boolean[][] visited = new boolean[n][n];\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> grid.get(a[0]).get(a[1]) - grid.get(b[0]).get(b[1]));\n\n        int[][] directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n        List<Integer> result = new ArrayList<>();\n\n        pq.offer(new int[]{0, 0});\n        visited[0][0] = true;\n\n        while (result.size() < k) {\n            int[] cell = pq.poll();\n            int x = cell[0];\n            int y = cell[1];\n            result.add(grid.get(x).get(y));\n\n            for (int[] dir : directions) {\n                int newX = x + dir[0];\n                int newY = y + dir[1];\n                if (newX >= 0 && newX < n && newY >= 0 && newY < n && !visited[newX][newY]) {\n                    pq.offer(new int[]{newX, newY});\n                    visited[newX][newY] = true;\n                }\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/130", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n        List<Integer> tribonacci = new ArrayList<>();\n        tribonacci.add(0);\n        tribonacci.add(1);\n        \n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                tribonacci.add(tribonacci.get(i / 2) + 1);\n            } else {\n                tribonacci.add(tribonacci.get(i - 1) + tribonacci.get(i - 2) + tribonacci.get(i + 1));\n            }\n        }\n        \n        return tribonacci;\n    }\n}\n"}
{"task_id": "Java/131", "generation": "import java.util.*;\n\nclass Solution {\n    public int digits(int n) {\n        int product = 1;\n        String numStr = String.valueOf(n);\n        \n        for (int i = 0; i < numStr.length(); i++) {\n            int digit = Character.getNumericValue(numStr.charAt(i));\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n        }\n        \n        if (product == 1) {\n            return 0;\n        }\n        \n        return product;\n    }\n}\n"}
{"task_id": "Java/132", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean is_nested(String string) {\n        Stack<Character> stack = new Stack<>();\n        \n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (!stack.isEmpty()) {\n                    stack.pop();\n                } else {\n                    return false;\n                }\n            }\n        }\n        \n        return !stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/133", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_squares(List<Double> lst) {\n        int sum = 0;\n        for (double num : lst) {\n            int rounded = (int) Math.ceil(num);\n            sum += rounded * rounded;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/134", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        if (txt.isEmpty()) {\n            return false;\n        }\n        \n        for (int i = txt.length() - 1; i >= 0; i--) {\n            char ch = txt.charAt(i);\n            if (Character.isLetter(ch) && ch != ' ') {\n                return true;\n            } else if (ch == ' ') {\n                return false;\n            }\n        }\n        \n        return false;\n    }\n}\n"}
{"task_id": "Java/135", "generation": "import java.util.*;\n\nclass Solution {\n    public int can_arrange(List<Integer> arr) {\n        int index = -1;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                index = i;\n            }\n        }\n        return index;\n    }\n}\n"}
{"task_id": "Java/136", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        Optional<Integer> largestNegative = Optional.empty();\n        Optional<Integer> smallestPositive = Optional.empty();\n\n        for (int num : lst) {\n            if (num < 0 && (!largestNegative.isPresent() || num > largestNegative.get())) {\n                largestNegative = Optional.of(num);\n            } else if (num > 0 && (!smallestPositive.isPresent() || num < smallestPositive.get())) {\n                smallestPositive = Optional.of(num);\n            }\n        }\n\n        List<Optional<Integer>> result = new ArrayList<>();\n        result.add(largestNegative);\n        result.add(smallestPositive);\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/137", "generation": "import java.util.*;\n\nclass Solution {\n    public Optional<Object> compare_one(Object a, Object b) {\n        if (a.getClass() == b.getClass()) {\n            if (a instanceof Integer) {\n                int intA = (int) a;\n                int intB = (int) b;\n                if (intA > intB) {\n                    return Optional.of(intA);\n                } else if (intA < intB) {\n                    return Optional.of(intB);\n                }\n            } else if (a instanceof Double) {\n                double doubleA = (double) a;\n                double doubleB = (double) b;\n                if (doubleA > doubleB) {\n                    return Optional.of(doubleA);\n                } else if (doubleA < doubleB) {\n                    return Optional.of(doubleB);\n                }\n            } else if (a instanceof String) {\n                String strA = (String) a;\n                String strB = (String) b;\n                double numA = Double.parseDouble(strA.replace(\",\", \".\"));\n                double numB = Double.parseDouble(strB.replace(\",\", \".\"));\n                if (numA > numB) {\n                    return Optional.of(strA);\n                } else if (numA < numB) {\n                    return Optional.of(strB);\n                }\n            }\n            return Optional.empty();\n        } else {\n            double numA, numB;\n            if (a instanceof String) {\n                numA = Double.parseDouble(((String) a).replace(\",\", \".\"));\n            } else {\n                numA = (double) a;\n            }\n            if (b instanceof String) {\n                numB = Double.parseDouble(((String) b).replace(\",\", \".\"));\n            } else {\n                numB = (double) b;\n            }\n            if (numA > numB) {\n                return Optional.of(a);\n            } else if (numA < numB) {\n                return Optional.of(b);\n            }\n            return Optional.empty();\n        }\n    }\n}\n"}
{"task_id": "Java/138", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_equal_to_sum_even(int n) {\n        for (int i = 2; i <= n / 4; i += 2) {\n            for (int j = i; j <= n / 4; j += 2) {\n                for (int k = j; k <= n / 4; k += 2) {\n                    int l = n - (i + j + k);\n                    if (l % 2 == 0 && l >= k) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/139", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public long special_factorial(int n) {\n        long result = 1;\n        for (int i = n; i > 0; i--) {\n            result *= i;\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/140", "generation": "import java.util.*;\n\nclass Solution {\n    public String fix_spaces(String text) {\n        StringBuilder result = new StringBuilder();\n        int spaceCount = 0;\n\n        for (char c : text.toCharArray()) {\n            if (c == ' ') {\n                spaceCount++;\n                if (spaceCount > 2) {\n                    result.append('-');\n                    spaceCount = 1;\n                } else {\n                    result.append('_');\n                }\n            } else {\n                result.append(c);\n                spaceCount = 0;\n            }\n        }\n\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/141", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String file_name_check(String file_name) {\n        String[] parts = file_name.split(\"\\\\.\");\n        \n        if (parts.length != 2) {\n            return \"No\";\n        }\n        \n        String beforeDot = parts[0];\n        String afterDot = parts[1];\n        \n        if (!beforeDot.matches(\"^[a-zA-Z].*\")) {\n            return \"No\";\n        }\n        \n        if (!Arrays.asList(\"txt\", \"exe\", \"dll\").contains(afterDot)) {\n            return \"No\";\n        }\n        \n        int digitCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n        }\n        \n        if (digitCount > 3) {\n            return \"No\";\n        }\n        \n        return \"Yes\";\n    }\n}\n"}
{"task_id": "Java/142", "generation": "import java.util.*;\n\nclass Solution {\n    public int sum_squares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if ((i + 1) % 3 == 0) {\n                sum += lst.get(i) * lst.get(i); // Square the integer\n            } else if ((i + 1) % 4 == 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i); // Cube the integer\n            } else {\n                sum += lst.get(i); // Add the integer as it is\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/143", "generation": "import java.util.*;\n\nclass Solution {\n    public String words_in_sentence(String sentence) {\n        // Helper function to check if a number is prime\n        boolean isPrime(int num) {\n            if (num <= 1) {\n                return false;\n            }\n            for (int i = 2; i <= Math.sqrt(num); i++) {\n                if (num % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        String[] words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.append(word).append(\" \");\n            }\n        }\n\n        // Remove the extra space at the end\n        if (result.length() > 0) {\n            result.deleteCharAt(result.length() - 1);\n        }\n\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/144", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean simplify(String x, String n) {\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n        \n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        \n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n        \n        int resultNumerator = xNumerator * nNumerator;\n        int resultDenominator = xDenominator * nDenominator;\n        \n        return resultDenominator % resultNumerator == 0;\n    }\n}\n"}
{"task_id": "Java/145", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> order_by_points(List<Integer> nums) {\n        // Custom comparator to compare integers based on the sum of their digits\n        Comparator<Integer> customComparator = new Comparator<Integer>() {\n            @Override\n            public int compare(Integer num1, Integer num2) {\n                int sum1 = getDigitSum(num1);\n                int sum2 = getDigitSum(num2);\n                if (sum1 == sum2) {\n                    return nums.indexOf(num1) - nums.indexOf(num2);\n                }\n                return sum1 - sum2;\n            }\n\n            // Helper method to calculate the sum of digits for an integer\n            private int getDigitSum(int num) {\n                int sum = 0;\n                String numStr = String.valueOf(num);\n                for (int i = 0; i < numStr.length(); i++) {\n                    if (numStr.charAt(i) == '-') {\n                        sum += Character.getNumericValue(numStr.charAt(i + 1)) * -1;\n                        i++; // Skip the next character as it's part of the negative digit\n                    } else {\n                        sum += Character.getNumericValue(numStr.charAt(i));\n                    }\n                }\n                return sum;\n            }\n        };\n\n        // Sort the list of integers using the custom comparator\n        Collections.sort(nums, customComparator);\n\n        return nums;\n    }\n}\n"}
{"task_id": "Java/146", "generation": "import java.util.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10 && isOdd(num % 10) && isOdd(getFirstDigit(num))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isOdd(int digit) {\n        return digit % 2 != 0;\n    }\n\n    private int getFirstDigit(int num) {\n        num = Math.abs(num);\n        while (num >= 10) {\n            num /= 10;\n        }\n        return num;\n    }\n}\n"}
{"task_id": "Java/147", "generation": "import java.util.*;\n\nclass Solution {\n    public int get_max_triples(int n) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        \n        int count = 0;\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/148", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> bf(String planet1, String planet2) {\n        Map<String, Integer> planetPositions = new HashMap<>();\n        planetPositions.put(\"Mercury\", 1);\n        planetPositions.put(\"Venus\", 2);\n        planetPositions.put(\"Earth\", 3);\n        planetPositions.put(\"Mars\", 4);\n        planetPositions.put(\"Jupiter\", 5);\n        planetPositions.put(\"Saturn\", 6);\n        planetPositions.put(\"Uranus\", 7);\n        planetPositions.put(\"Neptune\", 8);\n\n        if (!planetPositions.containsKey(planet1) || !planetPositions.containsKey(planet2)) {\n            return new ArrayList<>();\n        }\n\n        int pos1 = planetPositions.get(planet1);\n        int pos2 = planetPositions.get(planet2);\n\n        int start = Math.min(pos1, pos2);\n        int end = Math.max(pos1, pos2);\n\n        List<String> result = new ArrayList<>();\n        for (Map.Entry<String, Integer> entry : planetPositions.entrySet()) {\n            if (entry.getValue() > start && entry.getValue() < end) {\n                result.add(entry.getKey());\n            }\n        }\n\n        result.sort(Comparator.comparingInt(planetPositions::get));\n        return result;\n    }\n}\n"}
{"task_id": "Java/149", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> sorted_list_sum(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        \n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                result.add(str);\n            }\n        }\n        \n        Collections.sort(result, (a, b) -> {\n            if (a.length() != b.length()) {\n                return a.length() - b.length();\n            } else {\n                return a.compareTo(b);\n            }\n        });\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/150", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isPrime(int num) {\n        if (num < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public int x_or_y(int n, int x, int y) {\n        if (n < 2) {\n            return y;\n        }\n        if (isPrime(n)) {\n            return x;\n        }\n        return y;\n    }\n}\n"}
{"task_id": "Java/151", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int double_the_difference(List<Object> lst) {\n        int sum = 0;\n        for (Object num : lst) {\n            if (num instanceof Integer && (int) num > 0 && (int) num % 2 != 0) {\n                sum += (int) num * (int) num;\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/152", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> differences = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            differences.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return differences;\n    }\n}\n"}
{"task_id": "Java/153", "generation": "import java.util.*;\n\nclass Solution {\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        String strongestExtension = \"\";\n        double maxStrength = Double.MIN_VALUE;\n\n        for (String extension : extensions) {\n            int uppercaseCount = 0;\n            int lowercaseCount = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    uppercaseCount++;\n                } else if (Character.isLowerCase(c)) {\n                    lowercaseCount++;\n                }\n            }\n            double strength = (double) (uppercaseCount - lowercaseCount);\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return class_name + \".\" + strongestExtension;\n    }\n}\n"}
{"task_id": "Java/154", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean cycpattern_check(String a, String b) {\n        // Helper function to rotate a word\n        public String rotateWord(String word) {\n            return word.substring(1) + word.charAt(0);\n        }\n\n        // Check if any rotation of the second word is a substring of the first word\n        for (int i = 0; i < b.length(); i++) {\n            if (a.contains(b)) {\n                return true;\n            }\n            b = rotateWord(b);\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/155", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> even_odd_count(int num) {\n        int evenCount = 0, oddCount = 0;\n        String numStr = String.valueOf(Math.abs(num));\n        \n        for (int i = 0; i < numStr.length(); i++) {\n            int digit = Character.getNumericValue(numStr.charAt(i));\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        \n        if (num < 0) {\n            oddCount++;\n        }\n        \n        return Arrays.asList(evenCount, oddCount);\n    }\n}\n"}
{"task_id": "Java/156", "generation": "import java.util.*;\n\nclass Solution {\n    public String int_to_mini_roman(int number) {\n        TreeMap<Integer, String> romanMap = new TreeMap<>(Collections.reverseOrder());\n        romanMap.put(1000, \"m\");\n        romanMap.put(900, \"cm\");\n        romanMap.put(500, \"d\");\n        romanMap.put(400, \"cd\");\n        romanMap.put(100, \"c\");\n        romanMap.put(90, \"xc\");\n        romanMap.put(50, \"l\");\n        romanMap.put(40, \"xl\");\n        romanMap.put(10, \"x\");\n        romanMap.put(9, \"ix\");\n        romanMap.put(5, \"v\");\n        romanMap.put(4, \"iv\");\n        romanMap.put(1, \"i\");\n\n        StringBuilder result = new StringBuilder();\n        for (int value : romanMap.keySet()) {\n            while (number >= value) {\n                number -= value;\n                result.append(romanMap.get(value));\n            }\n        }\n        return result.toString().toLowerCase();\n    }\n}\n"}
{"task_id": "Java/157", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean right_angle_triangle(int a, int b, int c) {\n        int sumOfSquares = (a * a) + (b * b);\n        int squareOfC = c * c;\n        return sumOfSquares == squareOfC;\n    }\n}\n"}
{"task_id": "Java/158", "generation": "import java.util.*;\n\nclass Solution {\n    public String find_max(List<String> words) {\n        int maxUniqueChars = 0;\n        String maxWord = \"\";\n        int maxWordIndex = -1;\n\n        for (int i = 0; i < words.size(); i++) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : words.get(i).toCharArray()) {\n                uniqueChars.add(c);\n            }\n            if (uniqueChars.size() > maxUniqueChars || (uniqueChars.size() == maxUniqueChars && words.get(i).compareTo(maxWord) < 0)) {\n                maxUniqueChars = uniqueChars.size();\n                maxWord = words.get(i);\n                maxWordIndex = i;\n            }\n        }\n\n        return words.get(maxWordIndex);\n    }\n}\n"}
{"task_id": "Java/159", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> eat(int number, int need, int remaining) {\n        int totalEaten = number + need;\n        int carrotsLeft = remaining - totalEaten;\n        if (carrotsLeft < 0) {\n            carrotsLeft = 0;\n        }\n        return Arrays.asList(totalEaten, carrotsLeft);\n    }\n}\n"}
{"task_id": "Java/160", "generation": "import java.util.*;\n\nclass Solution {\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        int result = operand.get(0);\n        int current = operand.get(0);\n\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int nextOperand = operand.get(i + 1);\n\n            switch (op) {\n                case \"+\":\n                    current += nextOperand;\n                    break;\n                case \"-\":\n                    current -= nextOperand;\n                    break;\n                case \"*\":\n                    current *= nextOperand;\n                    break;\n                case \"/\":\n                    current /= nextOperand;\n                    break;\n                case \"**\":\n                    current = (int) Math.pow(current, nextOperand);\n                    break;\n                default:\n                    // Handle invalid operator\n                    break;\n            }\n        }\n\n        return current;\n    }\n}\n"}
{"task_id": "Java/161", "generation": "import java.util.*;\n\nclass Solution {\n    public String solve(String s) {\n        StringBuilder result = new StringBuilder();\n        boolean hasLetter = false;\n\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                result.append(Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c));\n                hasLetter = true;\n            } else {\n                result.append(c);\n            }\n        }\n\n        if (!hasLetter) {\n            return result.reverse().toString();\n        }\n\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/162", "generation": "import java.math.BigInteger;\nimport java.security.*;\n\nclass Solution {\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n\n        // Convert byte array to hexadecimal string\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5Hash = bigInt.toString(16);\n        \n        // Pad with zeros if the length is less than 32\n        while (md5Hash.length() < 32) {\n            md5Hash = \"0\" + md5Hash;\n        }\n\n        return Optional.of(md5Hash);\n    }\n}\n"}
{"task_id": "Java/163", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> generate_integers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i < 10 && i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/0", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/1", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> separate_paren_groups(String paren_string) {\n        List<String> separateGroups = new ArrayList<>();\n        StringBuilder currentGroup = new StringBuilder();\n        Stack<Character> stack = new Stack<>();\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                stack.pop();\n                currentGroup.append(c);\n                if (stack.isEmpty()) {\n                    separateGroups.add(currentGroup.toString());\n                    currentGroup = new StringBuilder();\n                }\n            }\n        }\n\n        return separateGroups;\n    }\n}\n"}
{"task_id": "Java/2", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double truncate_number(double number) {\n        String numStr = String.valueOf(number);\n        int decimalIndex = numStr.indexOf('.');\n        String decimalPart = numStr.substring(decimalIndex);\n        return Double.parseDouble(decimalPart);\n    }\n}\n"}
{"task_id": "Java/3", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/4", "generation": "import java.util.*;\n\nclass Solution {\n    public double mean_absolute_deviation(List<Double> numbers) {\n        double mean = calculateMean(numbers);\n        double sum = 0;\n        for (double number : numbers) {\n            sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n    }\n\n    private double calculateMean(List<Double> numbers) {\n        double total = 0;\n        for (double number : numbers) {\n            total += number;\n        }\n        return total / numbers.size();\n    }\n}\n"}
{"task_id": "Java/5", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/6", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> parse_nested_parens(String paren_string) {\n        String[] groups = paren_string.split(\" \");\n        List<Integer> maxNestingLevels = new ArrayList<>();\n        \n        for (String group : groups) {\n            int maxNestingLevel = 0;\n            int nestingLevel = 0;\n            \n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    nestingLevel++;\n                    maxNestingLevel = Math.max(maxNestingLevel, nestingLevel);\n                } else if (c == ')') {\n                    nestingLevel--;\n                }\n            }\n            \n            maxNestingLevels.add(maxNestingLevel);\n        }\n        \n        return maxNestingLevels;\n    }\n}\n"}
{"task_id": "Java/7", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> filteredStrings = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredStrings.add(str);\n            }\n        }\n        return filteredStrings;\n    }\n}\n"}
{"task_id": "Java/8", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> sum_product(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        \n        if (numbers.isEmpty()) {\n            return Arrays.asList(0, 1);\n        }\n        \n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        \n        return Arrays.asList(sum, product);\n    }\n}\n"}
{"task_id": "Java/9", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> rollingMax = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n\n        for (int num : numbers) {\n            max = Math.max(max, num);\n            rollingMax.add(max);\n        }\n\n        return rollingMax;\n    }\n}\n"}
{"task_id": "Java/10", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    private String longestPalindromicSuffix(String string) {\n        int n = string.length();\n        for (int i = n - 1; i >= 0; i--) {\n            if (isPalindrome(string.substring(i))) {\n                return string.substring(i);\n            }\n        }\n        return \"\";\n    }\n\n    public String make_palindrome(String string) {\n        String palindromicSuffix = longestPalindromicSuffix(string);\n        StringBuilder prefix = new StringBuilder(string.substring(0, string.length() - palindromicSuffix.length()));\n        return string + prefix.reverse().toString();\n    }\n}\n"}
{"task_id": "Java/11", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String string_xor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append(\"0\");\n            } else {\n                result.append(\"1\");\n            }\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/12", "generation": "import java.util.*;\n\nclass Solution {\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longestString = strings.get(0);\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n\n        return Optional.of(longestString);\n    }\n}\n"}
{"task_id": "Java/13", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int greatest_common_divisor(int a, int b) {\n        while (b != 0) {\n            int temp = a % b;\n            a = b;\n            b = temp;\n        }\n        return Math.abs(a);\n    }\n}\n"}
{"task_id": "Java/14", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> all_prefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            prefixes.add(string.substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}\n"}
{"task_id": "Java/15", "generation": "import java.util.*;\n\nclass Solution {\n    public String string_sequence(int n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            if (i != n) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/16", "generation": "import java.util.*;\n\nclass Solution {\n    public int count_distinct_characters(String string) {\n        Set<Character> distinctChars = new HashSet<>();\n        string = string.toLowerCase();\n\n        for (char ch : string.toCharArray()) {\n            if (Character.isLetter(ch)) {\n                distinctChars.add(ch);\n            }\n        }\n\n        return distinctChars.size();\n    }\n}\n"}
{"task_id": "Java/17", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> parse_music(String string) {\n        List<Integer> durations = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            char current = string.charAt(i);\n            if (current == 'o') {\n                durations.add(4);\n            } else if (current == 'o|') {\n                durations.add(2);\n            } else if (current == \".|\") {\n                durations.add(1);\n            }\n        }\n        return durations;\n    }\n}\n"}
{"task_id": "Java/18", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int how_many_times(String string, String substring) {\n        int count = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/19", "generation": "import java.util.*;\n\nclass Solution {\n    public String sort_numbers(String numbers) {\n        Map<String, Integer> numeralToInteger = new HashMap<>();\n        numeralToInteger.put(\"zero\", 0);\n        numeralToInteger.put(\"one\", 1);\n        numeralToInteger.put(\"two\", 2);\n        numeralToInteger.put(\"three\", 3);\n        numeralToInteger.put(\"four\", 4);\n        numeralToInteger.put(\"five\", 5);\n        numeralToInteger.put(\"six\", 6);\n        numeralToInteger.put(\"seven\", 7);\n        numeralToInteger.put(\"eight\", 8);\n        numeralToInteger.put(\"nine\", 9);\n        \n        String[] numerals = numbers.split(\" \");\n        List<Integer> integers = new ArrayList<>();\n        \n        for (String numeral : numerals) {\n            integers.add(numeralToInteger.get(numeral));\n        }\n        \n        Collections.sort(integers);\n        \n        Map<Integer, String> integerToNumeral = new HashMap<>();\n        integerToNumeral.put(0, \"zero\");\n        integerToNumeral.put(1, \"one\");\n        integerToNumeral.put(2, \"two\");\n        integerToNumeral.put(3, \"three\");\n        integerToNumeral.put(4, \"four\");\n        integerToNumeral.put(5, \"five\");\n        integerToNumeral.put(6, \"six\");\n        integerToNumeral.put(7, \"seven\");\n        integerToNumeral.put(8, \"eight\");\n        integerToNumeral.put(9, \"nine\");\n        \n        List<String> sortedNumerals = new ArrayList<>();\n        \n        for (Integer integer : integers) {\n            sortedNumerals.add(integerToNumeral.get(integer));\n        }\n        \n        return String.join(\" \", sortedNumerals);\n    }\n}\n"}
{"task_id": "Java/20", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        List<Double> closest_pair = new ArrayList<>();\n        closest_pair.add(numbers.get(0));\n        closest_pair.add(numbers.get(1));\n        double distance = Math.abs(numbers.get(1) - numbers.get(0));\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < distance) {\n                    closest_pair.clear();\n                    closest_pair.add(numbers.get(i));\n                    closest_pair.add(numbers.get(j));\n                    distance = Math.abs(numbers.get(i) - numbers.get(j));\n                }\n            }\n        }\n        Collections.sort(closest_pair);\n        return closest_pair;\n    }\n}\n"}
{"task_id": "Java/21", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        List<Double> rescaled = new ArrayList<>();\n        \n        // Find the minimum and maximum values in the list\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        \n        // Calculate the range\n        double range = max - min;\n        \n        // Apply linear transformation to each element\n        for (double num : numbers) {\n            double newValue = (num - min) / range;\n            rescaled.add(newValue);\n        }\n        \n        return rescaled;\n    }\n}\n"}
{"task_id": "Java/22", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> filter_integers(List<Object> values) {\n        List<Integer> integersList = new ArrayList<>();\n        \n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integersList.add((Integer) value);\n            }\n        }\n        \n        return integersList;\n    }\n}\n"}
{"task_id": "Java/23", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int strlen(String string) {\n        int length = 0;\n        for (int i = 0; i < string.length(); i++) {\n            length++;\n        }\n        return length;\n    }\n}\n"}
{"task_id": "Java/24", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largest_divisor(int n) {\n        int largestDivisor = 1;\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0 && i > largestDivisor) {\n                largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n    }\n}\n"}
{"task_id": "Java/25", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}\n"}
{"task_id": "Java/26", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        Set<Integer> uniqueSet = new HashSet<>();\n        List<Integer> result = new ArrayList<>();\n        \n        for (Integer num : numbers) {\n            if (!uniqueSet.contains(num)) {\n                uniqueSet.add(num);\n                result.add(num);\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/27", "generation": "import java.util.*;\n\nclass Solution {\n    public String flip_case(String string) {\n        StringBuilder result = new StringBuilder();\n        for (char ch : string.toCharArray()) {\n            if (Character.isLowerCase(ch)) {\n                result.append(Character.toUpperCase(ch));\n            } else if (Character.isUpperCase(ch)) {\n                result.append(Character.toLowerCase(ch));\n            } else {\n                result.append(ch);\n            }\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/28", "generation": "import java.util.*;\n\nclass Solution {\n    public String concatenate(List<String> strings) {\n        StringBuilder result = new StringBuilder();\n        if (strings.isEmpty()) {\n            return \"\";\n        }\n        for (String str : strings) {\n            result.append(str);\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/29", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        List<String> filteredStrings = new ArrayList<>();\n        for (String str : strings) {\n            if (str.startsWith(prefix)) {\n                filteredStrings.add(str);\n            }\n        }\n        return filteredStrings;\n    }\n}\n"}
{"task_id": "Java/30", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> get_positive(List<Integer> l) {\n        List<Integer> positiveNumbers = new ArrayList<>();\n        for (int num : l) {\n            if (num > 0) {\n                positiveNumbers.add(num);\n            }\n        }\n        return positiveNumbers;\n    }\n}\n"}
{"task_id": "Java/31", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_prime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/32", "generation": "import java.util.*;\n\nclass Solution {\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double find_zero(List<Double> xs) {\n        if (xs.size() % 2 != 0 || xs.get(xs.size() - 1) == 0) {\n            throw new IllegalArgumentException(\"Invalid input: List must have even number of coefficients and largest coefficient must be non-zero\");\n        }\n        \n        int degree = xs.size() - 1;\n        \n        if (degree == 1) {\n            return -xs.get(0) / xs.get(1);\n        } else if (degree == 2) {\n            double a = xs.get(2);\n            double b = xs.get(1);\n            double c = xs.get(0);\n            return (-b + Math.sqrt(b * b - 4 * a * c)) / (2 * a);\n        } else {\n            // Use numerical methods for higher degree polynomials\n            // Implement numerical methods like Newton's method\n            // For simplicity, let's return 0 for now\n            return 0;\n        }\n    }\n}\n"}
{"task_id": "Java/33", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> sort_third(List<Integer> l) {\n        List<Integer> sortedList = new ArrayList<>();\n        List<Integer> temp = new ArrayList<>();\n\n        for (int i = 0; i < l.size(); i++) {\n            if ((i + 1) % 3 == 0) {\n                temp.add(l.get(i));\n            } else {\n                sortedList.add(l.get(i));\n            }\n        }\n\n        Collections.sort(temp);\n\n        int tempIndex = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if ((i + 1) % 3 == 0) {\n                sortedList.add(temp.get(tempIndex));\n                tempIndex++;\n            }\n        }\n\n        return sortedList;\n    }\n}\n"}
{"task_id": "Java/34", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> unique(List<Integer> l) {\n        // Create a HashSet to store unique elements\n        Set<Integer> uniqueSet = new HashSet<>(l);\n        \n        // Convert the HashSet to a list\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n        \n        // Sort the list\n        Collections.sort(uniqueList);\n        \n        return uniqueList;\n    }\n}\n"}
{"task_id": "Java/35", "generation": "import java.util.*;\n\nclass Solution {\n    public int max_element(List<Integer> l) {\n        int max = Integer.MIN_VALUE; // Initialize max to the smallest possible integer value\n        for (int num : l) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n}\n"}
{"task_id": "Java/36", "generation": "import java.util.*;\n\nclass Solution {\n    public int fizz_buzz(int n) {\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String numStr = String.valueOf(i);\n                count += countOccurrencesOfDigit(numStr, '7');\n            }\n        }\n        return count;\n    }\n\n    private int countOccurrencesOfDigit(String numStr, char digit) {\n        int count = 0;\n        for (char c : numStr.toCharArray()) {\n            if (c == digit) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/37", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> sort_even(List<Integer> l) {\n        List<Integer> sortedEvens = new ArrayList<>();\n        \n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                sortedEvens.add(l.get(i));\n            }\n        }\n        \n        Collections.sort(sortedEvens);\n        \n        List<Integer> result = new ArrayList<>();\n        \n        int evenIndex = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(sortedEvens.get(evenIndex));\n                evenIndex++;\n            } else {\n                result.add(l.get(i));\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/38", "generation": "import java.util.*;\n\nclass Solution {\n    public String decodeCyclic(String s) {\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        \n        StringBuilder decodedString = new StringBuilder();\n        for (String group : groups) {\n            if (group.length() == 3) {\n                group = group.substring(1) + group.charAt(0);\n            }\n            decodedString.append(group);\n        }\n        \n        return decodedString.toString();\n    }\n}\n"}
{"task_id": "Java/39", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isPrime(int num) {\n        if (num < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public int prime_fib(int n) {\n        int count = 0;\n        int fib1 = 0, fib2 = 1, next_fib = 0;\n        while (count < n) {\n            next_fib = fib1 + fib2;\n            if (isPrime(next_fib)) {\n                count++;\n            }\n            fib1 = fib2;\n            fib2 = next_fib;\n        }\n        return next_fib;\n    }\n}\n"}
{"task_id": "Java/40", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        int n = l.size();\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/41", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int car_race_collision(int n) {\n        int collisions = n * (n - 1) / 2;\n        return collisions;\n    }\n}\n"}
{"task_id": "Java/42", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> incr_list(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (Integer num : l) {\n            result.add(num + 1);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/43", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for (int num : l) {\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/44", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String change_base(int x, int base) {\n        if (x == 0) {\n            return \"0\";\n        }\n        \n        StringBuilder result = new StringBuilder();\n        \n        while (x > 0) {\n            int remainder = x % base;\n            result.insert(0, String.valueOf(remainder));\n            x /= base;\n        }\n        \n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/45", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangle_area(double a, double h) {\n        double area = 0.5 * a * h;\n        return area;\n    }\n}\n"}
{"task_id": "Java/46", "generation": "import java.util.*;\n\nclass Solution {\n    public int fib4(int n) {\n        if (n < 4) {\n            int[] fib4Arr = {0, 0, 2, 0};\n            return fib4Arr[n];\n        }\n        \n        int[] fib4Arr = {0, 0, 2, 0};\n        for (int i = 4; i <= n; i++) {\n            fib4Arr[i % 4] = fib4Arr[(i - 1) % 4] + fib4Arr[(i - 2) % 4] + fib4Arr[(i - 3) % 4] + fib4Arr[(i - 4) % 4];\n        }\n        \n        return fib4Arr[n % 4];\n    }\n}\n"}
{"task_id": "Java/47", "generation": "import java.util.*;\n\nclass Solution {\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 1) {\n            return l.get(size / 2);\n        } else {\n            int mid1 = l.get(size / 2 - 1);\n            int mid2 = l.get(size / 2);\n            return (double) (mid1 + mid2) / 2;\n        }\n    }\n}\n"}
{"task_id": "Java/48", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_palindrome(String text) {\n        int start = 0;\n        int end = text.length() - 1;\n        \n        while (start < end) {\n            if (text.charAt(start) != text.charAt(end)) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/49", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int modp(int n, int p) {\n        int base = 2;\n        int mod = 1;\n        \n        while (n > 0) {\n            if (n % 2 == 1) {\n                mod = (mod * base) % p;\n            }\n            base = (base * base) % p;\n            n /= 2;\n        }\n        \n        return mod;\n    }\n}\n"}
{"task_id": "Java/50", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public String decode_shift(String s) {\n        StringBuilder decoded = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            decoded.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26));\n        }\n        return decoded.toString();\n    }\n}\n"}
{"task_id": "Java/51", "generation": "import java.util.*;\n\nclass Solution {\n    public String remove_vowels(String text) {\n        String result = \"\";\n        for (char ch : text.toCharArray()) {\n            if (!isVowel(ch)) {\n                result += ch;\n            }\n        }\n        return result;\n    }\n\n    private boolean isVowel(char ch) {\n        return \"aeiouAEIOU\".indexOf(ch) != -1;\n    }\n}\n"}
{"task_id": "Java/52", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean below_threshold(List<Integer> l, int t) {\n        boolean result = true;\n        for (int num : l) {\n            if (num >= t) {\n                result = false;\n                break;\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/53", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add(int x, int y) {\n        return x + y;\n    }\n}\n"}
{"task_id": "Java/54", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean same_chars(String s0, String s1) {\n        Map<Character, Integer> map0 = new HashMap<>();\n        Map<Character, Integer> map1 = new HashMap<>();\n\n        for (char c : s0.toCharArray()) {\n            map0.put(c, map0.getOrDefault(c, 0) + 1);\n        }\n\n        for (char c : s1.toCharArray()) {\n            map1.put(c, map1.getOrDefault(c, 0) + 1);\n        }\n\n        if (map0.size() != map1.size()) {\n            return false;\n        }\n\n        for (char key : map0.keySet()) {\n            if (!map1.containsKey(key) || !map0.get(key).equals(map1.get(key))) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/55", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0, b = 1;\n        for (int i = 2; i <= n; i++) {\n            int sum = a + b;\n            a = b;\n            b = sum;\n        }\n        return b;\n    }\n}\n"}
{"task_id": "Java/56", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean correct_bracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        \n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '<') {\n                stack.push(bracket);\n            } else if (bracket == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/57", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean monotonic(List<Integer> l) {\n        boolean increasing = true;\n        boolean decreasing = true;\n\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) <= l.get(i - 1)) {\n                increasing = false;\n            }\n            if (l.get(i) >= l.get(i - 1)) {\n                decreasing = false;\n            }\n        }\n\n        return increasing || decreasing;\n    }\n}\n"}
{"task_id": "Java/58", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set = new HashSet<>();\n        List<Integer> commonElements = new ArrayList<>();\n        \n        for (int num : l1) {\n            set.add(num);\n        }\n        \n        for (int num : l2) {\n            if (set.contains(num)) {\n                commonElements.add(num);\n            }\n        }\n        \n        Collections.sort(commonElements);\n        return commonElements;\n    }\n}\n"}
{"task_id": "Java/59", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largest_prime_factor(int n) {\n        int largestPrimeFactor = 2;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                boolean isPrime = true;\n                for (int j = 2; j <= Math.sqrt(i); j++) {\n                    if (i % j == 0) {\n                        isPrime = false;\n                        break;\n                    }\n                }\n                if (isPrime && i > largestPrimeFactor) {\n                    largestPrimeFactor = i;\n                }\n            }\n        }\n        return largestPrimeFactor;\n    }\n}\n"}
{"task_id": "Java/60", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_to_n(int n) {\n        // Calculate the sum of numbers from 1 to n\n        int sum = n * (n + 1) / 2;\n        return sum;\n    }\n}\n"}
{"task_id": "Java/61", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean correct_bracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        \n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '(') {\n                stack.push(bracket);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/62", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> derivativeCoefficients = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            derivativeCoefficients.add(xs.get(i) * i);\n        }\n        return derivativeCoefficients;\n    }\n}\n"}
{"task_id": "Java/63", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fibfib(int n) {\n        if (n == 0 || n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        } else {\n            return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n        }\n    }\n}\n"}
{"task_id": "Java/64", "generation": "import java.util.*;\n\nclass Solution {\n    public int vowels_count(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char ch = Character.toLowerCase(s.charAt(i));\n            if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n                count++;\n            } else if (i == s.length() - 1 && ch == 'y') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/65", "generation": "import java.util.*;\n\nclass Solution {\n    public String circular_shift(int x, int shift) {\n        String numStr = String.valueOf(x);\n        int len = numStr.length();\n        \n        if (shift > len) {\n            return new StringBuilder(numStr).reverse().toString();\n        } else {\n            String shiftedStr = numStr.substring(len - shift) + numStr.substring(0, len - shift);\n            return shiftedStr;\n        }\n    }\n}\n"}
{"task_id": "Java/66", "generation": "import java.util.*;\n\nclass Solution {\n    public int digitSum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/67", "generation": "import java.util.*;\n\nclass Solution {\n    public int fruit_distribution(String s, int n) {\n        // Split the input string to extract the number of apples and oranges\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[3]);\n        \n        // Calculate the number of mango fruits\n        int mango = n - apples - oranges;\n        \n        return mango;\n    }\n}\n"}
{"task_id": "Java/68", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> pluck(List<Integer> arr) {\n        int minEven = Integer.MAX_VALUE;\n        int minIndex = -1;\n        boolean evenFound = false;\n\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < minEven) {\n                minEven = arr.get(i);\n                minIndex = i;\n                evenFound = true;\n            } else if (arr.get(i) % 2 == 0 && arr.get(i) == minEven) {\n                if (i < minIndex) {\n                    minIndex = i;\n                }\n                evenFound = true;\n            }\n        }\n\n        if (evenFound) {\n            return Arrays.asList(minEven, minIndex);\n        } else {\n            return new ArrayList<>();\n        }\n    }\n}\n"}
{"task_id": "Java/69", "generation": "import java.util.*;\n\nclass Solution {\n    public int search(List<Integer> lst) {\n        Map<Integer, Integer> freqMap = new HashMap<>();\n        int result = -1;\n\n        // Populate the frequency map\n        for (int num : lst) {\n            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);\n        }\n\n        // Find the greatest integer with frequency >= value\n        for (Map.Entry<Integer, Integer> entry : freqMap.entrySet()) {\n            if (entry.getKey() > 0 && entry.getValue() >= entry.getKey()) {\n                result = Math.max(result, entry.getKey());\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/70", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        if (lst.isEmpty()) {\n            return result;\n        }\n\n        Collections.sort(lst);\n        int low = 0;\n        int high = lst.size() - 1;\n\n        while (low <= high) {\n            result.add(lst.get(low));\n            low++;\n            if (low > high) {\n                break;\n            }\n            result.add(lst.get(high));\n            high--;\n            if (low > high) {\n                break;\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/71", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangle_area(double a, double b, double c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2;\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            return Math.round(area * 100.0) / 100.0; // Round to 2 decimal points\n        } else {\n            return -1;\n        }\n    }\n}\n"}
{"task_id": "Java/72", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean will_it_fly(List<Integer> q, int w) {\n        // Check if the list is palindromic\n        boolean isPalindromic = true;\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (!q.get(i).equals(q.get(q.size() - 1 - i))) {\n                isPalindromic = false;\n                break;\n            }\n        }\n\n        // Calculate the sum of elements in the list\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n\n        // Check if it will fly\n        return isPalindromic && sum <= w;\n    }\n}\n"}
{"task_id": "Java/73", "generation": "import java.util.*;\n\nclass Solution {\n    public int smallest_change(List<Integer> arr) {\n        int changes = 0;\n        int start = 0;\n        int end = arr.size() - 1;\n        \n        while (start < end) {\n            if (!arr.get(start).equals(arr.get(end))) {\n                changes++;\n            }\n            start++;\n            end--;\n        }\n        \n        return changes;\n    }\n}\n"}
{"task_id": "Java/74", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        int totalChars1 = 0;\n        int totalChars2 = 0;\n\n        for (String str : lst1) {\n            totalChars1 += str.length();\n        }\n\n        for (String str : lst2) {\n            totalChars2 += str.length();\n        }\n\n        if (totalChars1 == totalChars2 || (lst1.isEmpty() && lst2.isEmpty())) {\n            return lst1;\n        } else if (totalChars1 < totalChars2 || lst2.isEmpty()) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n"}
{"task_id": "Java/75", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean is_multiply_prime(int a) {\n        // Function to check if a number is prime\n        boolean isPrime(int num) {\n            if (num <= 1) return false;\n            for (int i = 2; i <= Math.sqrt(num); i++) {\n                if (num % i == 0) return false;\n            }\n            return true;\n        }\n\n        // Generate all prime numbers less than 100\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < 100; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n\n        // Check if the number is the multiplication of 3 prime numbers\n        for (int i = 0; i < primes.size(); i++) {\n            for (int j = i + 1; j < primes.size(); j++) {\n                for (int k = j + 1; k < primes.size(); k++) {\n                    if (primes.get(i) * primes.get(j) * primes.get(k) == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/76", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_simple_power(int x, int n) {\n        int temp = x;\n        while (temp % n == 0 && temp != 1) {\n            temp /= n;\n        }\n        return temp == 1;\n    }\n}\n"}
{"task_id": "Java/77", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean iscube(int a) {\n        if (a < 0) {\n            a = -a;\n        }\n        double cubeRoot = Math.cbrt(a);\n        return cubeRoot == Math.floor(cubeRoot);\n    }\n}\n"}
{"task_id": "Java/78", "generation": "import java.util.*;\n\nclass Solution {\n    public int hex_key(String num) {\n        int count = 0;\n        Set<Character> primeHexDigits = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        for (char c : num.toCharArray()) {\n            if (primeHexDigits.contains(c)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/79", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String decimal_to_binary(int decimal) {\n        String binary = Integer.toBinaryString(decimal);\n        return \"db\" + binary + \"db\";\n    }\n}\n"}
{"task_id": "Java/80", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_happy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n        \n        for (int i = 0; i <= s.length() - 3; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/81", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double gpa : grades) {\n            if (gpa == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}\n"}
{"task_id": "Java/82", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean prime_length(String string) {\n        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/83", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int starts_one_ends(int n) {\n        int count = 0;\n        int lowerBound = (int) Math.pow(10, n - 1); // Smallest n-digit number\n        int upperBound = (int) Math.pow(10, n) - 1; // Largest n-digit number\n\n        for (int i = lowerBound; i <= upperBound; i++) {\n            String numStr = String.valueOf(i);\n            if (numStr.charAt(0) == '1' || numStr.charAt(numStr.length() - 1) == '1') {\n                count++;\n            }\n        }\n\n        return count;\n    }\n}\n"}
{"task_id": "Java/84", "generation": "import java.util.*;\n\nclass Solution {\n    public String solve(int N) {\n        int sum = 0;\n        while (N > 0) {\n            sum += N % 10;\n            N /= 10;\n        }\n        return Integer.toBinaryString(sum);\n    }\n}\n"}
{"task_id": "Java/85", "generation": "import java.util.*;\n\nclass Solution {\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/86", "generation": "import java.util.*;\n\nclass Solution {\n    public String anti_shuffle(String s) {\n        String[] words = s.split(\" \");\n        StringBuilder result = new StringBuilder();\n\n        for (int i = 0; i < words.length; i++) {\n            char[] chars = words[i].toCharArray();\n            Arrays.sort(chars);\n            result.append(chars);\n            if (i < words.length - 1) {\n                result.append(\" \");\n            }\n        }\n\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/87", "generation": "import java.util.*;\n\nclass Solution {\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        List<List<Integer>> coordinates = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    List<Integer> coord = new ArrayList<>();\n                    coord.add(i);\n                    coord.add(j);\n                    coordinates.add(coord);\n                }\n            }\n        }\n        \n        coordinates.sort((a, b) -> {\n            if (a.get(0).equals(b.get(0))) {\n                return b.get(1).compareTo(a.get(1));\n            }\n            return a.get(0).compareTo(b.get(0));\n        });\n        \n        return coordinates;\n    }\n}\n"}
{"task_id": "Java/88", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> array) {\n        List<Integer> sortedArray = new ArrayList<>(array);\n        int sum = array.get(0) + array.get(array.size() - 1);\n        \n        if (sum % 2 == 0) {\n            Collections.sort(sortedArray, Collections.reverseOrder());\n        } else {\n            Collections.sort(sortedArray);\n        }\n        \n        return sortedArray;\n    }\n}\n"}
{"task_id": "Java/89", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encrypt(String s) {\n        StringBuilder result = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                char encryptedChar = (char) (c + 2 * 2);\n                if ((Character.isLowerCase(c) && encryptedChar > 'z') || (Character.isUpperCase(c) && encryptedChar > 'Z')) {\n                    encryptedChar = (char) (c - (26 - 2 * 2));\n                }\n                result.append(encryptedChar);\n            } else {\n                result.append(c);\n            }\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/90", "generation": "import java.util.*;\n\nclass Solution {\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n        \n        List<Integer> sortedList = new ArrayList<>(lst);\n        Collections.sort(sortedList);\n        \n        return Optional.of(sortedList.get(1));\n    }\n}\n"}
{"task_id": "Java/91", "generation": "import java.util.*;\n\nclass Solution {\n    public int is_bored(String S) {\n        String[] sentences = S.split(\"[.!?]\");\n        int boredomCount = 0;\n        \n        for (String sentence : sentences) {\n            String trimmedSentence = sentence.trim();\n            if (trimmedSentence.startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n        \n        return boredomCount;\n    }\n}\n"}
{"task_id": "Java/92", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean any_int(Object x, Object y, Object z) {\n        if (!(x instanceof Integer) || !(y instanceof Integer) || !(z instanceof Integer)) {\n            return false;\n        }\n        \n        int num1 = (int) x;\n        int num2 = (int) y;\n        int num3 = (int) z;\n        \n        return num1 == num2 + num3 || num2 == num1 + num3 || num3 == num1 + num2;\n    }\n}\n"}
{"task_id": "Java/93", "generation": "import java.util.*;\n\nclass Solution {\n    public String encode(String message) {\n        StringBuilder encodedMessage = new StringBuilder();\n        for (char ch : message.toCharArray()) {\n            if (Character.isLetter(ch)) {\n                ch = Character.isUpperCase(ch) ? Character.toLowerCase(ch) : Character.toUpperCase(ch);\n                if (\"AEIOUaeiou\".indexOf(ch) != -1) {\n                    ch = (char) (ch + 2);\n                    if (ch > 'z') {\n                        ch = (char) (ch - 26);\n                    }\n                }\n            }\n            encodedMessage.append(ch);\n        }\n        return encodedMessage.toString();\n    }\n}\n"}
{"task_id": "Java/94", "generation": "import java.util.*;\n\nclass Solution {\n    public int skjkasdkd(List<Integer> lst) {\n        int largestPrime = 0;\n        int sum = 0;\n\n        for (int num : lst) {\n            if (isPrime(num) && num > largestPrime) {\n                largestPrime = num;\n            }\n        }\n\n        while (largestPrime > 0) {\n            sum += largestPrime % 10;\n            largestPrime /= 10;\n        }\n\n        return sum;\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/95", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        boolean isLowerCase = true;\n        boolean isUpperCase = true;\n\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                isLowerCase = false;\n                isUpperCase = false;\n            } else {\n                String keyStr = (String) key;\n                if (!keyStr.equals(keyStr.toLowerCase())) {\n                    isLowerCase = false;\n                }\n                if (!keyStr.equals(keyStr.toUpperCase())) {\n                    isUpperCase = false;\n                }\n            }\n        }\n\n        return isLowerCase || isUpperCase;\n    }\n}\n"}
{"task_id": "Java/96", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> count_up_to(int n) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int num = 2; num < n; num++) {\n            if (isPrime(num)) {\n                result.add(num);\n                if (result.size() == n) {\n                    break;\n                }\n            }\n        }\n        \n        return result;\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/97", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int multiply(int a, int b) {\n        int unitDigitA = Math.abs(a % 10);\n        int unitDigitB = Math.abs(b % 10);\n        return unitDigitA * unitDigitB;\n    }\n}\n"}
{"task_id": "Java/98", "generation": "import java.util.*;\n\nclass Solution {\n    public int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char ch = s.charAt(i);\n            if (\"AEIOU\".indexOf(ch) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/99", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int closest_integer(String value) {\n        double num = Double.parseDouble(value);\n        int floor = (int) Math.floor(num);\n        int ceil = (int) Math.ceil(num);\n        \n        double distFloor = Math.abs(num - floor);\n        double distCeil = Math.abs(num - ceil);\n        \n        if (distFloor < distCeil) {\n            return floor;\n        } else {\n            return ceil;\n        }\n    }\n}\n"}
{"task_id": "Java/100", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> stones = new ArrayList<>();\n        stones.add(n); // Add the initial number of stones\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                stones.add(n + i);\n            } else {\n                stones.add(n + i + 1);\n            }\n        }\n        return stones;\n    }\n}\n"}
{"task_id": "Java/101", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> words_string(String s) {\n        List<String> words = new ArrayList<>();\n        String[] splitWords = s.split(\"[,\\\\s]+\"); // Split based on commas or spaces\n        for (String word : splitWords) {\n            words.add(word);\n        }\n        return words;\n    }\n}\n"}
{"task_id": "Java/102", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int choose_num(int x, int y) {\n        int maxEven = Integer.MIN_VALUE;\n        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0 && i > maxEven) {\n                maxEven = i;\n            }\n        }\n        if (maxEven == Integer.MIN_VALUE) {\n            return -1;\n        }\n        return maxEven;\n    }\n}\n"}
{"task_id": "Java/103", "generation": "import java.util.*;\n\nclass Solution {\n    public Object rounded_avg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n\n        int sum = 0;\n        int count = m - n + 1;\n\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n\n        int average = Math.round((float) sum / count);\n        String binary = Integer.toBinaryString(average);\n\n        return binary;\n    }\n}\n"}
{"task_id": "Java/104", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> unique_digits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int num : x) {\n            String numStr = String.valueOf(num);\n            boolean hasEvenDigit = false;\n            for (char digit : numStr.toCharArray()) {\n                if (digit % 2 == 0) {\n                    hasEvenDigit = true;\n                    break;\n                }\n            }\n            if (!hasEvenDigit) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        return result;\n    }\n}\n"}
{"task_id": "Java/105", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> by_length(List<Integer> arr) {\n        Map<Integer, String> numToName = new HashMap<>();\n        numToName.put(1, \"One\");\n        numToName.put(2, \"Two\");\n        numToName.put(3, \"Three\");\n        numToName.put(4, \"Four\");\n        numToName.put(5, \"Five\");\n        numToName.put(6, \"Six\");\n        numToName.put(7, \"Seven\");\n        numToName.put(8, \"Eight\");\n        numToName.put(9, \"Nine\");\n\n        List<Integer> filteredList = arr.stream()\n                .filter(num -> num >= 1 && num <= 9)\n                .collect(Collectors.toList());\n\n        Collections.sort(filteredList);\n        Collections.reverse(filteredList);\n\n        List<String> result = new ArrayList<>();\n        for (int num : filteredList) {\n            result.add(numToName.get(num));\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/106", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sumOfNumbers(i));\n            }\n        }\n        return result;\n    }\n\n    private int factorial(int num) {\n        if (num == 0) {\n            return 1;\n        }\n        int fact = 1;\n        for (int i = 1; i <= num; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n\n    private int sumOfNumbers(int num) {\n        return num * (num + 1) / 2;\n    }\n}\n"}
{"task_id": "Java/107", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> even_odd_palindrome(int n) {\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n\n    public boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0;\n        int right = str.length() - 1;\n\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/108", "generation": "import java.util.*;\n\nclass Solution {\n    public int count_nums(List<Integer> arr) {\n        int count = 0;\n        \n        for (int num : arr) {\n            int sum_digits = 0;\n            int n = Math.abs(num);\n            \n            while (n != 0) {\n                sum_digits += n % 10;\n                n /= 10;\n            }\n            \n            if (sum_digits > 0) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/109", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean move_one_ball(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        int min = Collections.min(arr);\n        int minIndex = arr.indexOf(min);\n\n        boolean sorted = true;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                sorted = false;\n                break;\n            }\n        }\n\n        if (sorted) {\n            return true;\n        }\n\n        int shifts = arr.size() - minIndex;\n        for (int i = 1; i < arr.size(); i++) {\n            int idx = (minIndex + i) % arr.size();\n            if (arr.get(idx) < arr.get((idx - 1 + arr.size()) % arr.size())) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/110", "generation": "import java.util.*;\n\nclass Solution {\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int count_odd_lst1 = 0;\n        int count_odd_lst2 = 0;\n        \n        for (int element : lst1) {\n            if (element % 2 != 0) {\n                count_odd_lst1++;\n            }\n        }\n        \n        for (int element : lst2) {\n            if (element % 2 != 0) {\n                count_odd_lst2++;\n            }\n        }\n        \n        if (count_odd_lst1 > count_odd_lst2) {\n            return \"NO\";\n        } else {\n            return \"YES\";\n        }\n    }\n}\n"}
{"task_id": "Java/111", "generation": "import java.util.*;\n\nclass Solution {\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> frequencyMap = new HashMap<>();\n        \n        for (char c : test.toCharArray()) {\n            if (c != ' ') {\n                String letter = String.valueOf(c);\n                frequencyMap.put(letter, frequencyMap.getOrDefault(letter, 0) + 1);\n            }\n        }\n        \n        int maxFreq = 0;\n        for (int freq : frequencyMap.values()) {\n            maxFreq = Math.max(maxFreq, freq);\n        }\n        \n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : frequencyMap.entrySet()) {\n            if (entry.getValue() == maxFreq) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/112", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Object> reverse_delete(String s, String c) {\n        Set<Character> charSet = new HashSet<>();\n        for (char ch : c.toCharArray()) {\n            charSet.add(ch);\n        }\n\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!charSet.contains(ch)) {\n                result.append(ch);\n            }\n        }\n\n        StringBuilder reversed = new StringBuilder(result).reverse();\n        boolean isPalindrome = result.toString().equals(reversed.toString());\n\n        return Arrays.asList(result.toString(), isPalindrome);\n    }\n}\n"}
{"task_id": "Java/113", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        \n        for (String str : lst) {\n            int count = 0;\n            for (char ch : str.toCharArray()) {\n                int digit = ch - '0';\n                if (digit % 2 != 0) {\n                    count++;\n                }\n            }\n            result.add(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + str + \" of the \" + count + \"nput.\");\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/114", "generation": "import java.util.*;\n\nclass Solution {\n    public int minSubArraySum(List<Integer> nums) {\n        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n        int start = 0;\n        \n        for (int end = 0; end < nums.size(); end++) {\n            currentSum += nums.get(end);\n            if (currentSum < nums.get(end)) {\n                currentSum = nums.get(end);\n            }\n            while (currentSum >= nums.get(start)) {\n                minSum = Math.min(minSum, currentSum);\n                currentSum -= nums.get(start);\n                start++;\n            }\n        }\n        \n        return minSum;\n    }\n}\n"}
{"task_id": "Java/115", "generation": "import java.util.*;\n\nclass Solution {\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        int count = 0;\n        for (int j = 0; j < grid.get(0).size(); j++) {\n            int waterLevel = 0;\n            for (int i = 0; i < grid.size(); i++) {\n                waterLevel += grid.get(i).get(j);\n            }\n            if (waterLevel > capacity) {\n                count += waterLevel / capacity;\n                if (waterLevel % capacity != 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/116", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> arr) {\n        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int onesA = Integer.bitCount(Math.abs(a));\n                int onesB = Integer.bitCount(Math.abs(b));\n                \n                if (onesA == onesB) {\n                    return a - b;\n                } else {\n                    return onesA - onesB;\n                }\n            }\n        });\n        return arr;\n    }\n}\n"}
{"task_id": "Java/117", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> select_words(String s, int n) {\n        List<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        \n        String[] words = s.split(\" \");\n        \n        for (String word : words) {\n            if (countConsonants(word) == n) {\n                result.add(word);\n            }\n        }\n        \n        return result;\n    }\n    \n    private int countConsonants(String word) {\n        int count = 0;\n        for (char c : word.toCharArray()) {\n            if (Character.isLetter(c) && !isVowel(Character.toLowerCase(c))) {\n                count++;\n            }\n        }\n        return count;\n    }\n    \n    private boolean isVowel(char c) {\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n}\n"}
{"task_id": "Java/118", "generation": "import java.util.*;\n\nclass Solution {\n    public String get_closest_vowel(String word) {\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        String closestVowel = \"\";\n        boolean foundConsonant = false;\n\n        for (int i = word.length() - 2; i > 0; i--) {\n            char currentChar = word.charAt(i);\n            if (!vowels.contains(currentChar)) {\n                foundConsonant = true;\n            } else if (foundConsonant) {\n                closestVowel = String.valueOf(currentChar);\n                break;\n            }\n        }\n\n        return closestVowel;\n    }\n}\n"}
{"task_id": "Java/119", "generation": "import java.util.*;\n\nclass Solution {\n    public String match_parens(List<String> lst) {\n        Stack<Character> stack = new Stack<>();\n        String concatenated = lst.get(0) + lst.get(1);\n\n        for (char c : concatenated.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return \"No\";\n                }\n                stack.pop();\n            }\n        }\n\n        return stack.isEmpty() ? \"Yes\" : \"No\";\n    }\n}\n"}
{"task_id": "Java/120", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        Collections.sort(arr, Collections.reverseOrder());\n        return arr.subList(0, k);\n    }\n}\n"}
{"task_id": "Java/121", "generation": "import java.util.*;\n\nclass Solution {\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/122", "generation": "import java.util.*;\n\nclass Solution {\n    public int add_elements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) >= 10 && arr.get(i) <= 99) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/123", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> get_odd_collatz(int n) {\n        List<Integer> collatzSequence = new ArrayList<>();\n        collatzSequence.add(n);\n        \n        while (n != 1) {\n            if (n % 2 == 0) {\n                n /= 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            collatzSequence.add(n);\n        }\n        \n        List<Integer> oddNumbers = new ArrayList<>();\n        for (int num : collatzSequence) {\n            if (num % 2 != 0) {\n                oddNumbers.add(num);\n            }\n        }\n        \n        Collections.sort(oddNumbers);\n        return oddNumbers;\n    }\n}\n"}
{"task_id": "Java/124", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean valid_date(String date) {\n        if (date.isEmpty()) {\n            return false;\n        }\n\n        String[] dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n            return false;\n        }\n\n        int month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        if (day < 1 || day > 31) {\n            if (day > 30 && (month == 4 || month == 6 || month == 9 || month == 11)) {\n                return false;\n            }\n\n            if (day > 29 && month == 2) {\n                if (!(year % 4 == 0 && (year % 100 != 0 || year % 400 == 0))) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/125", "generation": "import java.util.*;\n\nclass Solution {\n    public Object split_words(String txt) {\n        List<String> words = new ArrayList<>();\n        \n        // Check if txt contains whitespaces\n        if (txt.contains(\" \")) {\n            words = Arrays.asList(txt.split(\" \"));\n        }\n        \n        // If words is still empty, check for commas\n        if (words.isEmpty()) {\n            if (txt.contains(\",\")) {\n                words = Arrays.asList(txt.split(\",\"));\n            }\n        }\n        \n        // If words is still empty, count lowercase letters with odd order in the alphabet\n        if (words.isEmpty()) {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 != 0) {\n                    count++;\n                }\n            }\n            return count;\n        }\n        \n        return words;\n    }\n}\n"}
{"task_id": "Java/126", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean is_sorted(List<Integer> lst) {\n        Map<Integer, Integer> countMap = new HashMap<>();\n        \n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < lst.get(i - 1)) {\n                return false;\n            }\n            countMap.put(lst.get(i), countMap.getOrDefault(lst.get(i), 0) + 1);\n            if (countMap.get(lst.get(i)) > 2) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/127", "generation": "import java.util.*;\n\nclass Solution {\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n\n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n\n        if (intersectionStart > intersectionEnd) {\n            return \"NO\";\n        }\n\n        int intersectionLength = intersectionEnd - intersectionStart;\n\n        if (isPrime(intersectionLength)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/128", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int result = 0;\n        int signProduct = 1;\n\n        for (int num : arr) {\n            int magnitude = Math.abs(num);\n            if (num > 0) {\n                signProduct *= 1;\n            } else if (num < 0) {\n                signProduct *= -1;\n            }\n            result += magnitude * signProduct;\n        }\n\n        return Optional.of(result);\n    }\n}\n"}
{"task_id": "Java/129", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        List<Integer> minPath = new ArrayList<>();\n        List<Integer> currentPath = new ArrayList<>();\n        Set<List<Integer>> visited = new HashSet<>();\n        \n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                dfs(grid, i, j, k, currentPath, minPath, visited);\n            }\n        }\n        \n        return minPath;\n    }\n    \n    private void dfs(List<List<Integer>> grid, int i, int j, int k, List<Integer> currentPath, List<Integer> minPath, Set<List<Integer>> visited) {\n        if (i < 0 || i >= grid.size() || j < 0 || j >= grid.get(0).size() || k == 0 || visited.contains(Arrays.asList(i, j))) {\n            if (currentPath.size() == k && (minPath.isEmpty() || currentPath.compareTo(minPath) < 0)) {\n                minPath.clear();\n                minPath.addAll(currentPath);\n            }\n            return;\n        }\n        \n        visited.add(Arrays.asList(i, j));\n        currentPath.add(grid.get(i).get(j));\n        \n        dfs(grid, i + 1, j, k - 1, currentPath, minPath, visited);\n        dfs(grid, i - 1, j, k - 1, currentPath, minPath, visited);\n        dfs(grid, i, j + 1, k - 1, currentPath, minPath, visited);\n        dfs(grid, i, j - 1, k - 1, currentPath, minPath, visited);\n        \n        visited.remove(Arrays.asList(i, j));\n        currentPath.remove(currentPath.size() - 1);\n    }\n}\n"}
{"task_id": "Java/130", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n        List<Integer> tribonacci = new ArrayList<>();\n        tribonacci.add(3);\n        tribonacci.add(1);\n        tribonacci.add(2);\n        \n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                tribonacci.add(1 + i / 2);\n            } else {\n                tribonacci.add(tribonacci.get(i - 1) + tribonacci.get(i - 2) + tribonacci.get(i - 3));\n            }\n        }\n        \n        return tribonacci;\n    }\n}\n"}
{"task_id": "Java/131", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digits(int n) {\n        int product = 1;\n        boolean hasOddDigit = false;\n        \n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n                hasOddDigit = true;\n            }\n            n /= 10;\n        }\n        \n        if (!hasOddDigit) {\n            return 0;\n        }\n        \n        return product;\n    }\n}\n"}
{"task_id": "Java/132", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean is_nested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return !stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/133", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_squares(List<Double> lst) {\n        int sum = 0;\n        for (double num : lst) {\n            int rounded = (int) Math.ceil(num);\n            sum += rounded * rounded;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/134", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        boolean isLastCharLetter = false;\n        if (txt.isEmpty()) {\n            return false;\n        }\n        for (int i = txt.length() - 1; i >= 0; i--) {\n            char c = txt.charAt(i);\n            if (Character.isLetter(c)) {\n                if (isLastCharLetter && c != ' ') {\n                    return true;\n                } else {\n                    isLastCharLetter = true;\n                }\n            } else if (c == ' ') {\n                if (isLastCharLetter) {\n                    return false;\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/135", "generation": "import java.util.*;\n\nclass Solution {\n    public int can_arrange(List<Integer> arr) {\n        int index = -1;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                index = i - 1;\n            }\n        }\n        return index;\n    }\n}\n"}
{"task_id": "Java/136", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        Optional<Integer> largestNegative = Optional.empty();\n        Optional<Integer> smallestPositive = Optional.empty();\n\n        for (int num : lst) {\n            if (num < 0 && (!largestNegative.isPresent() || num > largestNegative.get())) {\n                largestNegative = Optional.of(num);\n            } else if (num > 0 && (!smallestPositive.isPresent() || num < smallestPositive.get())) {\n                smallestPositive = Optional.of(num);\n            }\n        }\n\n        List<Optional<Integer>> result = new ArrayList<>();\n        result.add(largestNegative);\n        result.add(smallestPositive);\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/137", "generation": "import java.util.*;\n\nclass Solution {\n    public Optional<Object> compare_one(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            int intA = (int) a;\n            int intB = (int) b;\n            if (intA > intB) {\n                return Optional.of(intA);\n            } else if (intA < intB) {\n                return Optional.of(intB);\n            }\n        } else if (a instanceof Float && b instanceof Float) {\n            float floatA = (float) a;\n            float floatB = (float) b;\n            if (floatA > floatB) {\n                return Optional.of(floatA);\n            } else if (floatA < floatB) {\n                return Optional.of(floatB);\n            }\n        } else if (a instanceof String && b instanceof String) {\n            float floatA = Float.parseFloat(((String) a).replace(\",\", \".\"));\n            float floatB = Float.parseFloat(((String) b).replace(\",\", \".\"));\n            if (floatA > floatB) {\n                return Optional.of(floatA);\n            } else if (floatA < floatB) {\n                return Optional.of(floatB);\n            }\n        } else if (a instanceof String) {\n            float floatA = Float.parseFloat(((String) a).replace(\",\", \".\"));\n            if (floatA > (float) b) {\n                return Optional.of(floatA);\n            } else if (floatA < (float) b) {\n                return Optional.of(b);\n            }\n        } else if (b instanceof String) {\n            float floatB = Float.parseFloat(((String) b).replace(\",\", \".\"));\n            if ((float) a > floatB) {\n                return Optional.of(a);\n            } else if ((float) a < floatB) {\n                return Optional.of(floatB);\n            }\n        }\n        return Optional.empty();\n    }\n}\n"}
{"task_id": "Java/138", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_equal_to_sum_even(int n) {\n        for (int i = 2; i <= n/2; i += 2) {\n            for (int j = i; j <= n/2; j += 2) {\n                for (int k = j; k <= n/2; k += 2) {\n                    for (int l = k; l <= n/2; l += 2) {\n                        if (i + j + k + l == n) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/139", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public long special_factorial(int n) {\n        long result = 1;\n        for (int i = n; i > 0; i--) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    private long factorial(int num) {\n        if (num == 0 || num == 1) {\n            return 1;\n        }\n        return num * factorial(num - 1);\n    }\n}\n"}
{"task_id": "Java/140", "generation": "import java.util.*;\n\nclass Solution {\n    public String fix_spaces(String text) {\n        StringBuilder result = new StringBuilder();\n        int spaceCount = 0;\n\n        for (char c : text.toCharArray()) {\n            if (c == ' ') {\n                spaceCount++;\n                if (spaceCount > 2) {\n                    result.append('-');\n                }\n            } else {\n                if (spaceCount > 0) {\n                    result.append(\"_\".repeat(spaceCount));\n                    spaceCount = 0;\n                }\n                result.append(c);\n            }\n        }\n\n        if (spaceCount > 0) {\n            result.append(\"_\".repeat(spaceCount));\n        }\n\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/141", "generation": "import java.util.*;\n\nclass Solution {\n    public String file_name_check(String file_name) {\n        int digitCount = 0;\n        int dotIndex = -1;\n        int firstDigitIndex = -1;\n\n        for (int i = 0; i < file_name.length(); i++) {\n            char ch = file_name.charAt(i);\n            if (Character.isDigit(ch)) {\n                digitCount++;\n                if (digitCount == 1) {\n                    firstDigitIndex = i;\n                }\n            } else if (ch == '.') {\n                dotIndex = i;\n            }\n        }\n\n        if (digitCount <= 3 && dotIndex != -1 && firstDigitIndex != 0 &&\n                dotIndex < file_name.length() - 1 && Arrays.asList(\"txt\", \"exe\", \"dll\").contains(file_name.substring(dotIndex + 1))) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}\n"}
{"task_id": "Java/142", "generation": "import java.util.*;\n\nclass Solution {\n    public int sum_squares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if ((i + 1) % 3 == 0) {\n                sum += lst.get(i) * lst.get(i); // Square the integer\n            } else if ((i + 1) % 4 == 0 && (i + 1) % 3 != 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i); // Cube the integer\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/143", "generation": "import java.util.*;\n\nclass Solution {\n    public String words_in_sentence(String sentence) {\n        // Helper function to check if a number is prime\n        boolean isPrime(int n) {\n            if (n <= 1) {\n                return false;\n            }\n            for (int i = 2; i <= Math.sqrt(n); i++) {\n                if (n % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        String[] words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.append(word).append(\" \");\n            }\n        }\n\n        return result.toString().trim();\n    }\n}\n"}
{"task_id": "Java/144", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean simplify(String x, String n) {\n        // Parse fractions x and n\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n\n        // Extract numerators and denominators\n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n\n        // Multiply numerators and denominators\n        int resultNumerator = xNumerator * nNumerator;\n        int resultDenominator = xDenominator * nDenominator;\n\n        // Check if the result is a whole number\n        return resultDenominator % resultNumerator == 0;\n    }\n}\n"}
{"task_id": "Java/145", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> order_by_points(List<Integer> nums) {\n        // Custom comparator to sort based on sum of digits and index\n        Comparator<Integer> customComparator = new Comparator<Integer>() {\n            @Override\n            public int compare(Integer num1, Integer num2) {\n                int sum1 = getSumOfDigits(num1);\n                int sum2 = getSumOfDigits(num2);\n                \n                if (sum1 != sum2) {\n                    return sum1 - sum2;\n                } else {\n                    return nums.indexOf(num1) - nums.indexOf(num2);\n                }\n            }\n        };\n        \n        // Sort the list using the custom comparator\n        Collections.sort(nums, customComparator);\n        \n        return nums;\n    }\n    \n    // Function to calculate the sum of digits for a given integer\n    private int getSumOfDigits(int num) {\n        int sum = 0;\n        String numStr = String.valueOf(num);\n        \n        for (int i = 0; i < numStr.length(); i++) {\n            if (numStr.charAt(i) == '-') {\n                sum += Character.getNumericValue(numStr.charAt(i + 1)) * -1;\n                i++;\n            } else {\n                sum += Character.getNumericValue(numStr.charAt(i));\n            }\n        }\n        \n        return sum;\n    }\n}\n"}
{"task_id": "Java/146", "generation": "import java.util.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            String strNum = String.valueOf(num);\n            if (num > 10 && isOdd(strNum.charAt(0)) && isOdd(strNum.charAt(strNum.length() - 1))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isOdd(char c) {\n        return c == '1' || c == '3' || c == '5' || c == '7' || c == '9';\n    }\n}\n"}
{"task_id": "Java/147", "generation": "import java.util.*;\n\nclass Solution {\n    public int get_max_triples(int n) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        \n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/148", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> bf(String planet1, String planet2) {\n        Map<String, Integer> planetOrder = new HashMap<>();\n        planetOrder.put(\"Mercury\", 1);\n        planetOrder.put(\"Venus\", 2);\n        planetOrder.put(\"Earth\", 3);\n        planetOrder.put(\"Mars\", 4);\n        planetOrder.put(\"Jupiter\", 5);\n        planetOrder.put(\"Saturn\", 6);\n        planetOrder.put(\"Uranus\", 7);\n        planetOrder.put(\"Neptune\", 8);\n\n        List<String> result = new ArrayList<>();\n        \n        if (!planetOrder.containsKey(planet1) || !planetOrder.containsKey(planet2)) {\n            return result;\n        }\n\n        int order1 = planetOrder.get(planet1);\n        int order2 = planetOrder.get(planet2);\n\n        int lower = Math.min(order1, order2);\n        int higher = Math.max(order1, order2);\n\n        for (Map.Entry<String, Integer> entry : planetOrder.entrySet()) {\n            if (entry.getValue() > lower && entry.getValue() < higher) {\n                result.add(entry.getKey());\n            }\n        }\n\n        result.sort(Comparator.comparingInt(planetOrder::get));\n        return result;\n    }\n}\n"}
{"task_id": "Java/149", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> sorted_list_sum(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        \n        for (String word : lst) {\n            if (word.length() % 2 == 0) {\n                result.add(word);\n            }\n        }\n        \n        Collections.sort(result, (a, b) -> {\n            if (a.length() != b.length()) {\n                return a.length() - b.length();\n            } else {\n                return a.compareTo(b);\n            }\n        });\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/150", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int x_or_y(int n, int x, int y) {\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/151", "generation": "import java.util.*;\n\nclass Solution {\n    public int double_the_difference(List<Object> lst) {\n        int sum = 0;\n        for (Object num : lst) {\n            if (num instanceof Integer && (int) num > 0 && (int) num % 2 != 0) {\n                sum += ((int) num) * ((int) num);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/152", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            int difference = Math.abs(game.get(i) - guess.get(i));\n            result.add(difference);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/153", "generation": "import java.util.*;\n\nclass Solution {\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        String strongestExtension = \"\";\n        int maxStrength = Integer.MIN_VALUE;\n\n        for (String extension : extensions) {\n            int CAP = 0, SM = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    CAP++;\n                } else if (Character.isLowerCase(c)) {\n                    SM++;\n                }\n            }\n            int strength = CAP - SM;\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return class_name + \".\" + strongestExtension;\n    }\n}\n"}
{"task_id": "Java/154", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean cycpattern_check(String a, String b) {\n        if (a.length() != b.length()) {\n            return false;\n        }\n        String temp = a + a;\n        return temp.contains(b);\n    }\n}\n"}
{"task_id": "Java/155", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> even_odd_count(int num) {\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        String numStr = String.valueOf(Math.abs(num));\n        \n        for (int i = 0; i < numStr.length(); i++) {\n            int digit = Character.getNumericValue(numStr.charAt(i));\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/156", "generation": "import java.util.*;\n\nclass Solution {\n    public String int_to_mini_roman(int number) {\n        TreeMap<Integer, String> romanMap = new TreeMap<>(Collections.reverseOrder());\n        romanMap.put(1000, \"m\");\n        romanMap.put(900, \"cm\");\n        romanMap.put(500, \"d\");\n        romanMap.put(400, \"cd\");\n        romanMap.put(100, \"c\");\n        romanMap.put(90, \"xc\");\n        romanMap.put(50, \"l\");\n        romanMap.put(40, \"xl\");\n        romanMap.put(10, \"x\");\n        romanMap.put(9, \"ix\");\n        romanMap.put(5, \"v\");\n        romanMap.put(4, \"iv\");\n        romanMap.put(1, \"i\");\n\n        StringBuilder romanNumeral = new StringBuilder();\n\n        for (int key : romanMap.keySet()) {\n            while (number >= key) {\n                romanNumeral.append(romanMap.get(key));\n                number -= key;\n            }\n        }\n\n        return romanNumeral.toString().toLowerCase();\n    }\n}\n"}
{"task_id": "Java/157", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean right_angle_triangle(int a, int b, int c) {\n        int sumOfSquares = (a * a) + (b * b);\n        int squareOfC = c * c;\n        \n        return sumOfSquares == squareOfC;\n    }\n}\n"}
{"task_id": "Java/158", "generation": "import java.util.*;\n\nclass Solution {\n    public String find_max(List<String> words) {\n        int maxUniqueChars = 0;\n        String maxWord = \"\";\n        int maxWordIndex = -1;\n\n        for (int i = 0; i < words.size(); i++) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : words.get(i).toCharArray()) {\n                uniqueChars.add(c);\n            }\n            if (uniqueChars.size() > maxUniqueChars || (uniqueChars.size() == maxUniqueChars && words.get(i).compareTo(maxWord) < 0)) {\n                maxUniqueChars = uniqueChars.size();\n                maxWord = words.get(i);\n                maxWordIndex = i;\n            }\n        }\n\n        return words.get(maxWordIndex);\n    }\n}\n"}
{"task_id": "Java/159", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> eat(int number, int need, int remaining) {\n        int totalCarrotsEaten = number + need;\n        int carrotsLeft = remaining - totalCarrotsEaten;\n        carrotsLeft = Math.max(0, carrotsLeft);\n        return Arrays.asList(totalCarrotsEaten, carrotsLeft);\n    }\n}\n"}
{"task_id": "Java/160", "generation": "import java.util.*;\n\nclass Solution {\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        int result = operand.get(0);\n        int index = 1;\n        int operatorIndex = 0;\n\n        while (index < operand.size()) {\n            int nextOperand = operand.get(index);\n            String op = operator.get(operatorIndex);\n\n            switch (op) {\n                case \"+\":\n                    result += nextOperand;\n                    break;\n                case \"-\":\n                    result -= nextOperand;\n                    break;\n                case \"*\":\n                    result *= nextOperand;\n                    break;\n                case \"/\":\n                    result /= nextOperand;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, nextOperand);\n                    break;\n            }\n\n            index++;\n            operatorIndex++;\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/161", "generation": "import java.util.*;\n\nclass Solution {\n    public String solve(String s) {\n        String result = \"\";\n        boolean hasLetter = false;\n        \n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                result += Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c);\n                hasLetter = true;\n            } else {\n                result += c;\n            }\n        }\n        \n        if (!hasLetter) {\n            result = new StringBuilder(result).reverse().toString();\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/162", "generation": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5Hash = bigInt.toString(16);\n        \n        // Pad with zeros if the length is less than 32\n        while (md5Hash.length() < 32) {\n            md5Hash = \"0\" + md5Hash;\n        }\n\n        return Optional.of(md5Hash);\n    }\n}\n"}
{"task_id": "Java/163", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> generate_integers(int a, int b) {\n        List<Integer> evenDigits = new ArrayList<>();\n        \n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0 && i < 10) {\n                evenDigits.add(i);\n            }\n        }\n        \n        return evenDigits;\n    }\n}\n"}
