{"task_id": "Java/0", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/1", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        \n        paren_string = paren_string.replaceAll(\"\\\\s\", \"\"); // Remove spaces\n        \n        int start = 0;\n        int open = 0;\n        \n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                if (open == 0) {\n                    start = i;\n                }\n                open++;\n            } else if (paren_string.charAt(i) == ')') {\n                open--;\n                if (open == 0) {\n                    result.add(paren_string.substring(start, i + 1));\n                }\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/2", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n     */\n    public double truncate_number(double number) {\n        int integerPart = (int) number;\n        double decimalPart = number - integerPart;\n        return decimalPart;\n    }\n}\n"}
{"task_id": "Java/3", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        \n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n}\n"}
{"task_id": "Java/4", "generation": "import java.util.List;\nimport java.util.ArrayList;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double mean_absolute_deviation(List<Double> numbers) {\n        double sum = 0;\n        for (Double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n        \n        double absoluteDiffSum = 0;\n        for (Double num : numbers) {\n            absoluteDiffSum += Math.abs(num - mean);\n        }\n        \n        return absoluteDiffSum / numbers.size();\n    }\n}\n"}
{"task_id": "Java/5", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> interspersedList = new ArrayList<>();\n        \n        for (int i = 0; i < numbers.size(); i++) {\n            interspersedList.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                interspersedList.add(delimiter);\n            }\n        }\n        \n        return interspersedList;\n    }\n}\n"}
{"task_id": "Java/6", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> parse_nested_parens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        \n        String[] groups = paren_string.split(\" \");\n        \n        for (String group : groups) {\n            int maxDepth = 0;\n            int currentDepth = 0;\n            \n            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(') {\n                    currentDepth++;\n                    maxDepth = Math.max(maxDepth, currentDepth);\n                } else if (group.charAt(i) == ')') {\n                    currentDepth--;\n                }\n            }\n            \n            result.add(maxDepth);\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/7", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring(List.of(), \"a\")\n    []\n    >>> filter_by_substring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> filteredStrings = new ArrayList<>();\n        \n        if (strings.isEmpty()) {\n            return filteredStrings;\n        }\n        \n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredStrings.add(str);\n            }\n        }\n        \n        return filteredStrings;\n    }\n}\n"}
{"task_id": "Java/8", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> sum_product(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        \n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        \n        return Arrays.asList(sum, product);\n    }\n}\n"}
{"task_id": "Java/9", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> rollingMax = new ArrayList<>();\n        int maxSoFar = Integer.MIN_VALUE;\n        \n        for (int num : numbers) {\n            maxSoFar = Math.max(maxSoFar, num);\n            rollingMax.add(maxSoFar);\n        }\n        \n        return rollingMax;\n    }\n}\n"}
{"task_id": "Java/10", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n     */\n    public String make_palindrome(String string) {\n        if (string == null || string.length() == 0) {\n            return \"\";\n        }\n\n        int i = string.length() - 1;\n        while (i >= 0) {\n            if (isPalindrome(string.substring(i))) {\n                break;\n            }\n            i--;\n        }\n\n        StringBuilder sb = new StringBuilder(string);\n        sb.append(new StringBuilder(string.substring(0, i)).reverse().toString());\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/11", "generation": "import java.util.*;\n\nclass Solution {\n    public String string_xor(String a, String b) {\n        // Validate input strings\n        if (!isValidInput(a) || !isValidInput(b)) {\n            return \"Error: Input strings must consist only of 1s and 0s.\";\n        }\n        \n        // Perform binary XOR operation\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append(\"0\");\n            } else {\n                result.append(\"1\");\n            }\n        }\n        \n        return result.toString();\n    }\n    \n    private boolean isValidInput(String str) {\n        for (char c : str.toCharArray()) {\n            if (c != '0' && c != '1') {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/12", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        String longestString = strings.get(0);\n        \n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n        \n        return Optional.of(longestString);\n    }\n}\n"}
{"task_id": "Java/13", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n     */\n    public int greatest_common_divisor(int a, int b) {\n        int smaller = Math.min(a, b);\n        int gcd = 1;\n        \n        for (int i = 1; i <= smaller; i++) {\n            if (a % i == 0 && b % i == 0) {\n                gcd = i;\n            }\n        }\n        \n        return gcd;\n    }\n}\n"}
{"task_id": "Java/14", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> all_prefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        \n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        \n        return prefixes;\n    }\n}\n"}
{"task_id": "Java/15", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String string_sequence(int n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            if (i < n) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/16", "generation": "import java.util.*;\n\nclass Solution {\n    public int count_distinct_characters(String string) {\n        string = string.toLowerCase();\n        Set<Character> charSet = new HashSet<>();\n        \n        for (char c : string.toCharArray()) {\n            charSet.add(c);\n        }\n        \n        return charSet.size();\n    }\n}\n"}
{"task_id": "Java/17", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> parse_music(String string) {\n        List<Integer> beats = new ArrayList<>();\n        \n        String[] notes = string.split(\" \");\n        \n        for (String note : notes) {\n            int duration = 0;\n            switch (note) {\n                case \"o\":\n                    duration = 4;\n                    break;\n                case \"o|\":\n                    duration = 2;\n                    break;\n                case \".|\":\n                    duration = 1;\n                    break;\n            }\n            beats.add(duration);\n        }\n        \n        return beats;\n    }\n}\n"}
{"task_id": "Java/18", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlapping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n     */\n    public int how_many_times(String string, String substring) {\n        if (substring.length() > string.length()) {\n            return 0;\n        }\n        \n        int count = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/19", "generation": "import java.util.*;\n\nclass Solution {\n    public String sort_numbers(String numbers) {\n        String[] numberWords = numbers.split(\" \");\n        \n        HashMap<String, Integer> numberMap = new HashMap<>();\n        numberMap.put(\"zero\", 0);\n        numberMap.put(\"one\", 1);\n        numberMap.put(\"two\", 2);\n        numberMap.put(\"three\", 3);\n        numberMap.put(\"four\", 4);\n        numberMap.put(\"five\", 5);\n        numberMap.put(\"six\", 6);\n        numberMap.put(\"seven\", 7);\n        numberMap.put(\"eight\", 8);\n        numberMap.put(\"nine\", 9);\n        \n        List<Integer> numericalValues = new ArrayList<>();\n        for (String word : numberWords) {\n            numericalValues.add(numberMap.get(word));\n        }\n        \n        Collections.sort(numericalValues);\n        \n        StringBuilder sortedNumbers = new StringBuilder();\n        for (int num : numericalValues) {\n            for (Map.Entry<String, Integer> entry : numberMap.entrySet()) {\n                if (entry.getValue() == num) {\n                    sortedNumbers.append(entry.getKey()).append(\" \");\n                    break;\n                }\n            }\n        }\n        \n        return sortedNumbers.toString().trim();\n    }\n}\n"}
{"task_id": "Java/20", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        List<Double> result = new ArrayList<>();\n        if (numbers == null || numbers.size() < 2) {\n            return result;\n        }\n        \n        double minDiff = Double.MAX_VALUE;\n        double num1 = 0.0;\n        double num2 = 0.0;\n        \n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (diff < minDiff) {\n                    minDiff = diff;\n                    num1 = numbers.get(i);\n                    num2 = numbers.get(j);\n                }\n            }\n        }\n        \n        result.add(Math.min(num1, num2));\n        result.add(Math.max(num1, num2));\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/21", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        double range = max - min;\n        \n        List<Double> rescaledNumbers = new ArrayList<>();\n        for (Double num : numbers) {\n            double rescaledNum = (num - min) / range;\n            rescaledNumbers.add(rescaledNum);\n        }\n        \n        return rescaledNumbers;\n    }\n}\n"}
{"task_id": "Java/22", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> filter_integers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (Object obj : values) {\n            if (obj instanceof Integer) {\n                result.add((Integer) obj);\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/23", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}\n"}
{"task_id": "Java/24", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n     */\n    public int largest_divisor(int n) {\n        int largestDivisor = 1;\n        \n        for (int i = 1; i < n; i++) {\n            if (n % i == 0 && i < n) {\n                largestDivisor = i;\n            }\n        }\n        \n        return largestDivisor;\n    }\n}\n"}
{"task_id": "Java/25", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        \n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        \n        return factors;\n    }\n}\n"}
{"task_id": "Java/26", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        Map<Integer, Integer> countMap = new HashMap<>();\n        List<Integer> uniqueList = new ArrayList<>();\n        \n        for (Integer num : numbers) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n        }\n        \n        for (Integer num : numbers) {\n            if (countMap.get(num) == 1) {\n                uniqueList.add(num);\n            }\n        }\n        \n        return uniqueList;\n    }\n}\n"}
{"task_id": "Java/27", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"Hello\")\n    \"hELLO\"\n     */\n    public String flip_case(String string) {\n        StringBuilder result = new StringBuilder();\n        \n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c)) {\n                result.append(Character.toUpperCase(c));\n            } else if (Character.isUpperCase(c)) {\n                result.append(Character.toLowerCase(c));\n            } else {\n                result.append(c);\n            }\n        }\n        \n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/28", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        if (strings.isEmpty()) {\n            return \"\";\n        }\n        \n        StringBuilder result = new StringBuilder();\n        \n        for (String str : strings) {\n            result.append(str);\n        }\n        \n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/29", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        if (strings.isEmpty()) {\n            return new ArrayList<>();\n        }\n        \n        List<String> filteredStrings = new ArrayList<>();\n        \n        for (String str : strings) {\n            if (str.startsWith(prefix)) {\n                filteredStrings.add(str);\n            }\n        }\n        \n        return filteredStrings;\n    }\n}\n"}
{"task_id": "Java/30", "generation": "import java.util.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n     * Return only positive numbers in the list.\n     * @param l the input list of integers\n     * @return a list of positive integers\n     */\n    public List<Integer> get_positive(List<Integer> l) {\n        return l.stream()\n                .filter(num -> num > 0)\n                .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/31", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean is_prime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/32", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> find_zero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> find_zero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double find_zero(List<Double> xs) {\n        // Implementation of find_zero method\n        double zeroPoint = 0;\n        return zeroPoint;\n    }\n}\n"}
{"task_id": "Java/33", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> sort_third(List<Integer> l) {\n        List<Integer> result = new ArrayList<>(l);\n        List<Integer> temp = new ArrayList<>();\n        \n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                temp.add(l.get(i));\n            }\n        }\n        \n        Collections.sort(temp);\n        \n        int tempIndex = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.set(i, temp.get(tempIndex));\n                tempIndex++;\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/34", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> uniqueList = new ArrayList<>();\n        \n        for (Integer num : l) {\n            if (!uniqueList.contains(num)) {\n                uniqueList.add(num);\n            }\n        }\n        \n        Collections.sort(uniqueList);\n        \n        return uniqueList;\n    }\n}\n"}
{"task_id": "Java/35", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> max_element(Arrays.asList(1, 2, 3))\n    3\n    >>> max_element(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int max_element(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be null or empty\");\n        }\n        \n        if (l.size() == 1) {\n            return l.get(0);\n        }\n        \n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        \n        return max;\n    }\n}\n"}
{"task_id": "Java/36", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n     */\n    public int fizz_buzz(int n) {\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (isDivisibleBy11Or13(i)) {\n                count += countDigit7(i);\n            }\n        }\n        return count;\n    }\n\n    private boolean isDivisibleBy11Or13(int num) {\n        return num % 11 == 0 || num % 13 == 0;\n    }\n\n    private int countDigit7(int num) {\n        int count = 0;\n        while (num > 0) {\n            if (num % 10 == 7) {\n                count++;\n            }\n            num /= 10;\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/37", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> sort_even(List<Integer> l) {\n        List<Integer> sortedValues = new ArrayList<>();\n        \n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                sortedValues.add(l.get(i));\n            }\n        }\n        \n        Collections.sort(sortedValues);\n        \n        List<Integer> result = new ArrayList<>(l);\n        \n        int index = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.set(i, sortedValues.get(index));\n                index++;\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/38", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n"}
{"task_id": "Java/39", "generation": "class Solution {\n    public int prime_fib(int n) {\n        if (n <= 0) {\n            return -1; // Invalid input\n        }\n        \n        int count = 0;\n        int num1 = 0;\n        int num2 = 1;\n        \n        while (count < n) {\n            int sum = num1 + num2;\n            num1 = num2;\n            num2 = sum;\n            count++;\n            \n            if (isPrime(sum)) {\n                if (count == n) {\n                    return sum;\n                }\n            }\n        }\n        \n        return -1; // No prime Fibonacci number found\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/40", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        if (l.size() < 3) {\n            return false;\n        }\n        \n        for (int i = 0; i < l.size() - 2; i++) {\n            for (int j = i + 1; j < l.size() - 1; j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        \n        return false;\n    }\n}\n"}
{"task_id": "Java/41", "generation": "import java.util.*;\n\nclass Solution {\n    public int car_race_collision(int n) {\n        // Initialize variables\n        int speed = 1; // Assuming all cars move at the same speed\n        int distance = 2 * n; // Distance between the two sets of cars\n        int timeToCollision = distance / (2 * speed); // Time it takes for the two sets of cars to collide\n        int collisions = timeToCollision * n * n; // Number of collisions that occur\n        return collisions;\n    }\n}\n"}
{"task_id": "Java/42", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incr_list(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incr_list(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incr_list(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (Integer num : l) {\n            result.add(num + 1);\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/43", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        if (l == null || l.size() < 2) {\n            return false;\n        }\n        \n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(i) + l.get(j) == 0) {\n                    return true;\n                }\n            }\n        }\n        \n        return false;\n    }\n}\n"}
{"task_id": "Java/44", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\n    >>> change_base(7, 2)\n    \"111\"\n     */\n    public String change_base(int x, int base) {\n        if (x == 0) {\n            return \"0\";\n        }\n        \n        StringBuilder result = new StringBuilder();\n        List<Integer> remainders = new ArrayList<>();\n        \n        while (x > 0) {\n            remainders.add(x % base);\n            x /= base;\n        }\n        \n        for (int i = remainders.size() - 1; i >= 0; i--) {\n            result.append(remainders.get(i));\n        }\n        \n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/45", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n     */\n    public double triangle_area(double base, double height) {\n        return 0.5 * base * height;\n    }\n}\n"}
{"task_id": "Java/46", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n == 3) return 0;\n        \n        int[] fib4Array = new int[n + 1];\n        fib4Array[0] = 0;\n        fib4Array[1] = 0;\n        fib4Array[2] = 2;\n        fib4Array[3] = 0;\n        \n        for (int i = 4; i <= n; i++) {\n            fib4Array[i] = fib4Array[i - 1] + fib4Array[i - 2] + fib4Array[i - 3] + fib4Array[i - 4];\n        }\n        \n        return fib4Array[n];\n    }\n}\n"}
{"task_id": "Java/47", "generation": "import java.util.*;\n\nclass Solution {\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        int n = l.size();\n        \n        if (n % 2 != 0) {\n            return l.get(n / 2);\n        } else {\n            return (double) (l.get(n / 2 - 1) + l.get(n / 2)) / 2;\n        }\n    }\n}\n"}
{"task_id": "Java/48", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n     */\n    public boolean is_palindrome(String text) {\n        if (text.isEmpty()) {\n            return true;\n        }\n        \n        int left = 0;\n        int right = text.length() - 1;\n        \n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/49", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        long result = 1;\n        for (int i = 0; i < n; i++) {\n            result *= 2;\n            if (result >= p) {\n                result %= p;\n            }\n        }\n        return (int) result;\n    }\n}\n"}
{"task_id": "Java/50", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26)));\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/51", "generation": "import java.util.*;\n\nclass Solution {\n    public String remove_vowels(String text) {\n        StringBuilder result = new StringBuilder();\n        \n        for (char c : text.toCharArray()) {\n            if (!isVowel(c)) {\n                result.append(c);\n            }\n        }\n        \n        return result.toString();\n    }\n    \n    private boolean isVowel(char c) {\n        return \"aeiouAEIOU\".indexOf(c) != -1;\n    }\n}\n"}
{"task_id": "Java/52", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> below_threshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean below_threshold(List<Integer> l, int t) {\n        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/53", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}\n"}
{"task_id": "Java/54", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Check if two words have the same kind of characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean same_chars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        \n        Map<Character, Integer> map1 = new HashMap<>();\n        Map<Character, Integer> map2 = new HashMap<>();\n        \n        for (int i = 0; i < s0.length(); i++) {\n            char c1 = s0.charAt(i);\n            char c2 = s1.charAt(i);\n            \n            map1.put(c1, map1.getOrDefault(c1, 0) + 1);\n            map2.put(c2, map2.getOrDefault(c2, 0) + 1);\n        }\n        \n        return map1.equals(map2);\n    }\n}\n"}
{"task_id": "Java/55", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n"}
{"task_id": "Java/56", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n     */\n    public boolean correct_bracketing(String brackets) {\n        if (brackets == null || brackets.isEmpty()) {\n            return false;\n        }\n        \n        Stack<Character> stack = new Stack<>();\n        \n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '<') {\n                stack.push(bracket);\n            } else if (bracket == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/57", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean monotonic(List<Integer> l) {\n        boolean increasing = true;\n        boolean decreasing = true;\n        \n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1)) {\n                increasing = false;\n            }\n            if (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n            }\n        }\n        \n        return increasing || decreasing;\n    }\n}\n"}
{"task_id": "Java/58", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set = new HashSet<>();\n        List<Integer> commonElements = new ArrayList<>();\n        \n        for (Integer num : l1) {\n            set.add(num);\n        }\n        \n        for (Integer num : l2) {\n            if (set.contains(num)) {\n                commonElements.add(num);\n            }\n        }\n        \n        Collections.sort(commonElements);\n        \n        return commonElements;\n    }\n}\n"}
{"task_id": "Java/59", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n     */\n    public int largest_prime_factor(int n) {\n        int largestPrime = 2;\n        \n        for (int i = 2; i <= n / i; i++) {\n            while (n % i == 0) {\n                largestPrime = i;\n                n /= i;\n            }\n        }\n        \n        if (n > largestPrime) {\n            largestPrime = n;\n        }\n        \n        return largestPrime;\n    }\n}\n"}
{"task_id": "Java/60", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n     */\n    public int sum_to_n(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/61", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n     */\n    public boolean correct_bracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        \n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '(') {\n                stack.push(bracket);\n            } else if (bracket == ')') {\n                if (stack.isEmpty() || stack.pop() != '(') {\n                    return false;\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/62", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> derivativeCoefficients = new ArrayList<>();\n        \n        for (int i = 1; i < xs.size(); i++) {\n            derivativeCoefficients.add(xs.get(i) * i);\n        }\n        \n        return derivativeCoefficients;\n    }\n}\n"}
{"task_id": "Java/63", "generation": "import java.util.*;\n\nclass Solution {\n    public int fibfib(int n) {\n        if (n == 0 || n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        } else {\n            return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fibfib(1)); // Output: 0\n        System.out.println(solution.fibfib(5)); // Output: 4\n        System.out.println(solution.fibfib(8)); // Output: 24\n    }\n}\n"}
{"task_id": "Java/64", "generation": "import java.util.*;\n\nclass Solution {\n    public int vowels_count(String s) {\n        int count = 0;\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] chars = s.toLowerCase().toCharArray();\n        \n        for (int i = 0; i < chars.length; i++) {\n            if (i == chars.length - 1 && chars[i] == 'y') {\n                count++;\n            } else {\n                for (char vowel : vowels) {\n                    if (chars[i] == vowel) {\n                        count++;\n                        break;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/65", "generation": "import java.util.*;\n\nclass Solution {\n    public String circular_shift(int x, int shift) {\n        // Calculate the number of digits in the integer x\n        int numDigits = String.valueOf(x).length();\n        \n        // Calculate the effective shift value by taking the modulus of shift and the number of digits\n        int effectiveShift = shift % numDigits;\n        \n        // Perform the circular shift operation by shifting the digits of the integer x to the right by the effective shift value\n        int shiftedNum = x % (int) Math.pow(10, effectiveShift) * (int) Math.pow(10, numDigits - effectiveShift) + x / (int) Math.pow(10, effectiveShift);\n        \n        // Convert the resulting integer back to a string\n        String result = String.valueOf(shiftedNum);\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/66", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        \n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        \n        return sum;\n    }\n}\n"}
{"task_id": "Java/67", "generation": "class Solution {\n    public int fruit_distribution(String s, int n) {\n        int apples = 0;\n        int oranges = 0;\n        \n        // Extract the numbers of apples and oranges from the input string\n        String[] parts = s.split(\" \");\n        for (String part : parts) {\n            if (part.equals(\"apples\")) {\n                apples = Integer.parseInt(parts[0]);\n            } else if (part.equals(\"oranges\")) {\n                oranges = Integer.parseInt(parts[0]);\n            }\n        }\n        \n        // Calculate the total number of mango fruits in the basket\n        int mango = n - apples - oranges;\n        \n        return mango;\n    }\n}\n"}
{"task_id": "Java/68", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> evenValues = new ArrayList<>();\n        \n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                evenValues.add(arr.get(i));\n            }\n        }\n        \n        if (evenValues.isEmpty()) {\n            return new ArrayList<>();\n        }\n        \n        int smallestEven = evenValues.get(0);\n        int smallestIndex = arr.indexOf(smallestEven);\n        \n        for (int i = 1; i < evenValues.size(); i++) {\n            if (evenValues.get(i) < smallestEven) {\n                smallestEven = evenValues.get(i);\n                smallestIndex = arr.indexOf(smallestEven);\n            }\n        }\n        \n        return Arrays.asList(smallestEven, smallestIndex);\n    }\n}\n"}
{"task_id": "Java/69", "generation": "import java.util.*;\n\nclass Solution {\n    public int search(List<Integer> lst) {\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        int maxNum = -1;\n        for (int num : frequencyMap.keySet()) {\n            if (frequencyMap.get(num) >= num && num > maxNum) {\n                maxNum = num;\n            }\n        }\n        \n        return maxNum;\n    }\n}\n"}
{"task_id": "Java/70", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> sortedList = new ArrayList<>();\n        \n        while (!lst.isEmpty()) {\n            int min = Collections.min(lst);\n            sortedList.add(min);\n            lst.remove(Integer.valueOf(min));\n            \n            if (!lst.isEmpty()) {\n                int max = Collections.max(lst);\n                sortedList.add(max);\n                lst.remove(Integer.valueOf(max));\n            }\n        }\n        \n        return sortedList;\n    }\n}\n"}
{"task_id": "Java/71", "generation": "import java.util.*;\n\nclass Solution {\n    public double triangle_area(double a, double b, double c) {\n        if (isTriangleValid(a, b, c)) {\n            return Math.round(calculateArea(a, b, c) * 100.0) / 100.0;\n        } else {\n            return -1;\n        }\n    }\n\n    private boolean isTriangleValid(double a, double b, double c) {\n        return a + b > c && a + c > b && b + c > a;\n    }\n\n    private double calculateArea(double a, double b, double c) {\n        double s = (a + b + c) / 2;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n}\n"}
{"task_id": "Java/72", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean will_it_fly(List<Integer> q, int w) {\n        if (!isPalindromic(q)) {\n            return false;\n        }\n        \n        int sum = calculateSum(q);\n        \n        return sum <= w;\n    }\n    \n    private boolean isPalindromic(List<Integer> q) {\n        int start = 0;\n        int end = q.size() - 1;\n        \n        while (start < end) {\n            if (!q.get(start).equals(q.get(end))) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        \n        return true;\n    }\n    \n    private int calculateSum(List<Integer> q) {\n        int sum = 0;\n        \n        for (int num : q) {\n            sum += num;\n        }\n        \n        return sum;\n    }\n}\n"}
{"task_id": "Java/73", "generation": "import java.util.*;\n\nclass Solution {\n    public int smallest_change(List<Integer> arr) {\n        int changes = 0;\n        int left = 0;\n        int right = arr.size() - 1;\n\n        while (left < right) {\n            if (!arr.get(left).equals(arr.get(right))) {\n                changes++;\n            }\n            left++;\n            right--;\n        }\n\n        return changes;\n    }\n}\n"}
{"task_id": "Java/74", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        int totalCharsList1 = 0;\n        int totalCharsList2 = 0;\n\n        for (String str : lst1) {\n            totalCharsList1 += str.length();\n        }\n\n        for (String str : lst2) {\n            totalCharsList2 += str.length();\n        }\n\n        if (totalCharsList1 < totalCharsList2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.total_match(Arrays.asList(), Arrays.asList())); // []\n        System.out.println(solution.total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\"))); // [\"hI\", \"Hi\"]\n        System.out.println(solution.total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\"))); // [\"hi\", \"admin\"]\n        System.out.println(solution.total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\"))); // [\"hI\", \"hi\", \"hi\"]\n        System.out.println(solution.total_match(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"))); // [\"4\"]\n    }\n}\n"}
{"task_id": "Java/75", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean is_multiply_prime(int a) {\n        if (a >= 100) {\n            return false;\n        }\n        \n        List<Integer> primes = findPrimes();\n        \n        for (int i = 0; i < primes.size(); i++) {\n            for (int j = i + 1; j < primes.size(); j++) {\n                for (int k = j + 1; k < primes.size(); k++) {\n                    if (primes.get(i) * primes.get(j) * primes.get(k) == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        \n        return false;\n    }\n    \n    private List<Integer> findPrimes() {\n        List<Integer> primes = new ArrayList<>();\n        \n        for (int i = 2; i < 100; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        \n        return primes;\n    }\n    \n    private boolean isPrime(int num) {\n        if (num < 2) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/76", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n     */\n    public boolean is_simple_power(int x, int n) {\n        if (x == 1) {\n            return true;\n        }\n        \n        if (n == 1) {\n            return false;\n        }\n        \n        if (x % n != 0) {\n            return false;\n        }\n        \n        long power = 1;\n        \n        while (power < x) {\n            power *= n;\n        }\n        \n        return power == x;\n    }\n}\n"}
{"task_id": "Java/77", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean iscube(int a) {\n        double cubeRoot = Math.cbrt(a);\n        return cubeRoot == Math.floor(cubeRoot);\n    }\n}\n"}
{"task_id": "Java/78", "generation": "import java.util.*;\n\nclass Solution {\n    public int hex_key(String num) {\n        // Create a map to store the decimal values of hexadecimal digits\n        Map<Character, Integer> hexMap = new HashMap<>();\n        hexMap.put('0', 0);\n        hexMap.put('1', 1);\n        hexMap.put('2', 2);\n        hexMap.put('3', 3);\n        hexMap.put('4', 4);\n        hexMap.put('5', 5);\n        hexMap.put('6', 6);\n        hexMap.put('7', 7);\n        hexMap.put('8', 8);\n        hexMap.put('9', 9);\n        hexMap.put('A', 10);\n        hexMap.put('B', 11);\n        hexMap.put('C', 12);\n        hexMap.put('D', 13);\n        hexMap.put('E', 14);\n        hexMap.put('F', 15);\n        \n        // Initialize a counter for prime digits\n        int primeCount = 0;\n        \n        // Convert hexadecimal number string to decimal number\n        int decimalNum = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            decimalNum = decimalNum * 16 + hexMap.get(c);\n        }\n        \n        // Check if each digit of the decimal number is a prime number\n        while (decimalNum > 0) {\n            int digit = decimalNum % 10;\n            if (digit == 2 || digit == 3 || digit == 5 || digit == 7 || digit == 11 || digit == 13) {\n                primeCount++;\n            }\n            decimalNum /= 10;\n        }\n        \n        return primeCount;\n    }\n}\n"}
{"task_id": "Java/79", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   // returns \"db1111db\"\n    decimal_to_binary(32)   // returns \"db100000db\"\n     */\n    public String decimal_to_binary(int decimal) {\n        String binary = Integer.toBinaryString(decimal);\n        return \"db\" + binary + \"db\";\n    }\n}\n"}
{"task_id": "Java/80", "generation": "import java.util.HashSet;\n\nclass Solution {\n    public boolean is_happy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n        \n        for (int i = 0; i <= s.length() - 3; i++) {\n            HashSet<Character> set = new HashSet<>();\n            for (int j = i; j < i + 3; j++) {\n                if (set.contains(s.charAt(j))) {\n                    return false;\n                }\n                set.add(s.charAt(j));\n            }\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/81", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        Map<Double, String> gradeMapping = new HashMap<>();\n        \n        gradeMapping.put(4.0, \"A+\");\n        gradeMapping.put(3.7, \"A\");\n        gradeMapping.put(3.3, \"A-\");\n        gradeMapping.put(3.0, \"B+\");\n        gradeMapping.put(2.7, \"B\");\n        gradeMapping.put(2.3, \"B-\");\n        gradeMapping.put(2.0, \"C+\");\n        gradeMapping.put(1.7, \"C\");\n        gradeMapping.put(1.3, \"C-\");\n        gradeMapping.put(1.0, \"D+\");\n        gradeMapping.put(0.7, \"D\");\n        gradeMapping.put(0.0, \"D-\");\n        \n        for (Double grade : grades) {\n            String letterGrade = \"E\";\n            for (Map.Entry<Double, String> entry : gradeMapping.entrySet()) {\n                if (grade >= entry.getKey()) {\n                    letterGrade = entry.getValue();\n                    break;\n                }\n            }\n            letterGrades.add(letterGrade);\n        }\n        \n        return letterGrades;\n    }\n}\n"}
{"task_id": "Java/82", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean prime_length(String string) {\n        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/83", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int starts_one_ends(int n) {\n        int total = 9 * (int) Math.pow(10, n - 1);\n        int startWithOne = (int) Math.pow(10, n - 1);\n        int endWithOne = (int) Math.pow(10, n - 1);\n\n        return startWithOne + endWithOne - total;\n    }\n}\n"}
{"task_id": "Java/84", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return in binary the total sum of its digits.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        int sum = 0;\n        while (N > 0) {\n            sum += N % 10;\n            N /= 10;\n        }\n        return Integer.toBinaryString(sum);\n    }\n}\n"}
{"task_id": "Java/85", "generation": "import java.util.*;\n\nclass Solution {\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        \n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        \n        return sum;\n    }\n}\n"}
{"task_id": "Java/86", "generation": "import java.util.*;\n\nclass Solution {\n    public String anti_shuffle(String s) {\n        String[] words = s.split(\" \");\n        StringBuilder result = new StringBuilder();\n        \n        for (int i = 0; i < words.length; i++) {\n            char[] chars = words[i].toCharArray();\n            Arrays.sort(chars);\n            result.append(new String(chars));\n            if (i < words.length - 1) {\n                result.append(\" \");\n            }\n        }\n        \n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/87", "generation": "import java.util.*;\n\nclass Solution {\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        List<List<Integer>> coordinates = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    List<Integer> coordinate = new ArrayList<>();\n                    coordinate.add(i);\n                    coordinate.add(j);\n                    coordinates.add(coordinate);\n                }\n            }\n        }\n        \n        coordinates.sort((a, b) -> a.get(0) - b.get(0));\n        \n        for (List<Integer> row : coordinates) {\n            row.sort((a, b) -> b - a);\n        }\n        \n        return coordinates;\n    }\n}\n"}
{"task_id": "Java/88", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> array) {\n        List<Integer> sortedArray = new ArrayList<>(array);\n        \n        if (array.isEmpty()) {\n            return sortedArray;\n        }\n        \n        int sum = array.get(0) + array.get(array.size() - 1);\n        \n        if (sum % 2 == 0) {\n            Collections.sort(sortedArray, Collections.reverseOrder());\n        } else {\n            Collections.sort(sortedArray);\n        }\n        \n        return sortedArray;\n    }\n}\n"}
{"task_id": "Java/89", "generation": "import java.util.*;\n\nclass Solution {\n    public String encrypt(String s) {\n        StringBuilder encryptedString = new StringBuilder();\n        \n        for (int i = 0; i < s.length(); i++) {\n            char currentChar = s.charAt(i);\n            char encryptedChar = shiftChar(currentChar);\n            encryptedString.append(encryptedChar);\n        }\n        \n        return encryptedString.toString();\n    }\n    \n    private char shiftChar(char c) {\n        int shift = 2 * 2;\n        char base = Character.isUpperCase(c) ? 'A' : 'a';\n        return (char) ((c - base + shift) % 26 + base);\n    }\n}\n"}
{"task_id": "Java/90", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    next_smallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    next_smallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    next_smallest(Arrays.asList()) == Optional.empty\n    next_smallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        List<Integer> sortedList = new ArrayList<>(new HashSet<>(lst));\n        Collections.sort(sortedList);\n        \n        if (sortedList.size() < 2) {\n            return Optional.empty();\n        }\n        \n        return Optional.of(sortedList.get(1));\n    }\n}\n"}
{"task_id": "Java/91", "generation": "import java.util.*;\n\nclass Solution {\n    public int is_bored(String S) {\n        int count = 0;\n        String[] sentences = S.split(\"[.?!]\");\n        \n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"I\")) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/92", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean any_int(Object x, Object y, Object z) {\n        if (!(x instanceof Integer) || !(y instanceof Integer) || !(z instanceof Integer)) {\n            return false;\n        }\n        \n        int num1 = (int) x;\n        int num2 = (int) y;\n        int num3 = (int) z;\n        \n        int sum = num1 + num2;\n        \n        return sum == num3 || num1 + num3 == num2 || num2 + num3 == num1;\n    }\n}\n"}
{"task_id": "Java/93", "generation": "import java.util.*;\n\nclass Solution {\n    public String encode(String message) {\n        char[] encodedMessage = new char[message.length()];\n        for (int i = 0; i < message.length(); i++) {\n            char currentChar = message.charAt(i);\n            if (Character.isLetter(currentChar)) {\n                if (Character.toLowerCase(currentChar) == 'a' || Character.toLowerCase(currentChar) == 'e' ||\n                        Character.toLowerCase(currentChar) == 'i' || Character.toLowerCase(currentChar) == 'o' ||\n                        Character.toLowerCase(currentChar) == 'u') {\n                    char newChar = (char) (currentChar + 2);\n                    if (Character.isUpperCase(currentChar)) {\n                        newChar = Character.toUpperCase(newChar);\n                    }\n                    encodedMessage[i] = newChar;\n                } else {\n                    if (Character.isUpperCase(currentChar)) {\n                        encodedMessage[i] = Character.toLowerCase(currentChar);\n                    } else {\n                        encodedMessage[i] = Character.toUpperCase(currentChar);\n                    }\n                }\n            } else {\n                encodedMessage[i] = currentChar;\n            }\n        }\n        return new String(encodedMessage);\n    }\n}\n"}
{"task_id": "Java/94", "generation": "import java.util.*;\n\nclass Solution {\n    public int sumOfDigitsOfLargestPrime(List<Integer> lst) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        \n        for (int num : lst) {\n            if (isPrime(num)) {\n                primeNumbers.add(num);\n            }\n        }\n        \n        if (primeNumbers.isEmpty()) {\n            return 0;\n        }\n        \n        int largestPrime = primeNumbers.stream().max(Integer::compare).get();\n        int sumOfDigits = 0;\n        \n        while (largestPrime != 0) {\n            sumOfDigits += largestPrime % 10;\n            largestPrime /= 10;\n        }\n        \n        return sumOfDigits;\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/95", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings and all keys are in lower case or in upper case, else return False.\n    The function should return False if the given map is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        \n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            \n            String keyStr = key.toString();\n            if (!keyStr.equals(keyStr.toLowerCase()) && !keyStr.equals(keyStr.toUpperCase())) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/96", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<>();\n        \n        if (n <= 1) {\n            return primes;\n        }\n        \n        for (int num = 2; num < n; num++) {\n            boolean isPrime = true;\n            for (int i = 2; i <= Math.sqrt(num); i++) {\n                if (num % i == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                primes.add(num);\n            }\n        }\n        \n        return primes.subList(0, Math.min(n, primes.size()));\n    }\n}\n"}
{"task_id": "Java/97", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int unitDigitA = Math.abs(a % 10);\n        int unitDigitB = Math.abs(b % 10);\n        return unitDigitA * unitDigitB;\n    }\n}\n\nclass TestSolution {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.multiply(148, 412)); // Expected output: 16\n        System.out.println(solution.multiply(19, 28)); // Expected output: 72\n        System.out.println(solution.multiply(2020, 1851)); // Expected output: 0\n        System.out.println(solution.multiply(14, -15)); // Expected output: 20\n    }\n}\n"}
{"task_id": "Java/98", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper(\"aBCdEf\") returns 1\n    count_upper(\"abcdefg\") returns 0\n    count_upper(\"dBBE\") returns 0\n     */    \n    public int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c) && (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/99", "generation": "import java.util.*;\n\nclass Solution {\n    public int closest_integer(String value) {\n        double parsedValue = Double.parseDouble(value);\n        int ceiling = (int) Math.ceil(parsedValue);\n        int floor = (int) Math.floor(parsedValue);\n\n        double diffCeiling = Math.abs(parsedValue - ceiling);\n        double diffFloor = Math.abs(parsedValue - floor);\n\n        if (diffCeiling < diffFloor) {\n            return ceiling;\n        } else if (diffFloor < diffCeiling) {\n            return floor;\n        } else {\n            if (parsedValue >= 0) {\n                return ceiling;\n            } else {\n                return floor;\n            }\n        }\n    }\n}\n"}
{"task_id": "Java/100", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> stones = new ArrayList<>();\n        stones.add(n);\n        \n        while (n > 1) {\n            if (n % 2 == 0) {\n                n += 1;\n            } else {\n                n += 2;\n            }\n            stones.add(n);\n        }\n        \n        return stones;\n    }\n}\n"}
{"task_id": "Java/101", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> words_string(String s) {\n        List<String> words = new ArrayList<>();\n        \n        String[] splitWords = s.split(\"[,\\\\s]+\");\n        \n        for (String word : splitWords) {\n            words.add(word);\n        }\n        \n        return words;\n    }\n}\n"}
{"task_id": "Java/102", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n     */\n    public int choose_num(int x, int y) {\n        if (x <= 0 || y <= 0) {\n            return -1;\n        }\n        \n        int biggestEven = Integer.MIN_VALUE;\n        \n        for (int i = x; i <= y; i++) {\n            if (i % 2 == 0 && i > biggestEven) {\n                biggestEven = i;\n            }\n        }\n        \n        if (biggestEven == Integer.MIN_VALUE) {\n            return -1;\n        }\n        \n        return biggestEven;\n    }\n}\n"}
{"task_id": "Java/103", "generation": "import java.util.*;\n\nclass Solution {\n    public Object rounded_avg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        \n        int sum = 0;\n        int count = 0;\n        \n        for (int i = n; i <= m; i++) {\n            sum += i;\n            count++;\n        }\n        \n        int average = Math.round((float) sum / count);\n        String binary = Integer.toBinaryString(average);\n        \n        return binary;\n    }\n}\n"}
{"task_id": "Java/104", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> unique_digits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int num : x) {\n            if (hasNoEvenDigits(num)) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        \n        return result;\n    }\n    \n    private boolean hasNoEvenDigits(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return false;\n            }\n            num /= 10;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/105", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> by_length(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        \n        List<Integer> filteredList = arr.stream()\n                                        .filter(num -> num >= 1 && num <= 9)\n                                        .sorted()\n                                        .collect(Collectors.toList());\n        \n        Collections.reverse(filteredList);\n        \n        for (Integer num : filteredList) {\n            switch (num) {\n                case 1:\n                    result.add(\"One\");\n                    break;\n                case 2:\n                    result.add(\"Two\");\n                    break;\n                case 3:\n                    result.add(\"Three\");\n                    break;\n                case 4:\n                    result.add(\"Four\");\n                    break;\n                case 5:\n                    result.add(\"Five\");\n                    break;\n                case 6:\n                    result.add(\"Six\");\n                    break;\n                case 7:\n                    result.add(\"Seven\");\n                    break;\n                case 8:\n                    result.add(\"Eight\");\n                    break;\n                case 9:\n                    result.add(\"Nine\");\n                    break;\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/106", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sumOfNumbers(i));\n            }\n        }\n        \n        return result;\n    }\n    \n    private int factorial(int num) {\n        int fact = 1;\n        for (int i = 1; i <= num; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n    \n    private int sumOfNumbers(int num) {\n        int sum = 0;\n        for (int i = 1; i <= num; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/107", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> even_odd_palindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n        \n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n    \n    private boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0;\n        int right = str.length() - 1;\n        \n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/108", "generation": "import java.util.*;\n\nclass Solution {\n    public int count_nums(List<Integer> arr) {\n        int count = 0;\n        \n        for (int num : arr) {\n            int sum = 0;\n            int temp = Math.abs(num);\n            \n            while (temp != 0) {\n                sum += temp % 10;\n                temp /= 10;\n            }\n            \n            if (sum > 0) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/109", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    move_one_ball(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performing 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation: It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean move_one_ball(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        boolean sorted = true;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                sorted = false;\n                break;\n            }\n        }\n\n        if (sorted) {\n            return true;\n        }\n\n        int minIndex = 0;\n        int min = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n                minIndex = i;\n            }\n        }\n\n        int shifts = (arr.size() - minIndex) % arr.size();\n\n        List<Integer> shiftedArr = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            shiftedArr.add(arr.get((i + shifts) % arr.size()));\n        }\n\n        sorted = true;\n        for (int i = 1; i < shiftedArr.size(); i++) {\n            if (shiftedArr.get(i) < shiftedArr.get(i - 1)) {\n                sorted = false;\n                break;\n            }\n        }\n\n        return sorted;\n    }\n}\n"}
{"task_id": "Java/110", "generation": "import java.util.*;\n\nclass Solution {\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (allEven(lst1)) {\n            return \"YES\";\n        }\n        \n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i) % 2 != 0) {\n                for (int j = 0; j < lst2.size(); j++) {\n                    if (lst2.get(j) % 2 == 0) {\n                        lst1.set(i, lst2.get(j));\n                        lst2.set(j, lst1.get(i));\n                        break;\n                    }\n                }\n            }\n        }\n        \n        if (allEven(lst1)) {\n            return \"YES\";\n        }\n        \n        return \"NO\";\n    }\n    \n    private boolean allEven(List<Integer> lst) {\n        for (int num : lst) {\n            if (num % 2 != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/111", "generation": "import java.util.*;\n\nclass Solution {\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> letterCount = new HashMap<>();\n        \n        String[] letters = test.split(\" \");\n        \n        for (String letter : letters) {\n            letterCount.put(letter, letterCount.getOrDefault(letter, 0) + 1);\n        }\n        \n        int maxCount = 0;\n        for (int count : letterCount.values()) {\n            maxCount = Math.max(maxCount, count);\n        }\n        \n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : letterCount.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/112", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Object> reverse_delete(String s, String c) {\n        StringBuilder result = new StringBuilder();\n        \n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                result.append(ch);\n            }\n        }\n        \n        String resultString = result.toString();\n        boolean isPalindrome = checkPalindrome(resultString);\n        \n        List<Object> output = new ArrayList<>();\n        output.add(resultString);\n        output.add(isPalindrome);\n        \n        return output;\n    }\n    \n    private boolean checkPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        \n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/113", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        \n        for (String str : lst) {\n            int oddCount = 0;\n            for (int i = 0; i < str.length(); i++) {\n                if (Character.isDigit(str.charAt(i))) {\n                    int digit = Character.getNumericValue(str.charAt(i));\n                    if (digit % 2 != 0) {\n                        oddCount++;\n                    }\n                }\n            }\n            String output = \"the number of odd elements \" + oddCount + \"n the str\" + oddCount + \"ng \" + str + \" of the \" + oddCount + \"nput.\";\n            result.add(output);\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/114", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int minSum = Integer.MAX_VALUE;\n        \n        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            for (int j = i; j < nums.size(); j++) {\n                sum += nums.get(j);\n                minSum = Math.min(minSum, sum);\n            }\n        }\n        \n        return minSum;\n    }\n}\n"}
{"task_id": "Java/115", "generation": "import java.util.*;\n\nclass Solution {\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        int totalLowering = 0;\n        \n        for (List<Integer> row : grid) {\n            int totalWater = 0;\n            for (int well : row) {\n                totalWater += well;\n            }\n            totalLowering += (int) Math.ceil((double) totalWater / capacity);\n        }\n        \n        return totalLowering;\n    }\n}\n"}
{"task_id": "Java/116", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sort_array(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 4, 3, 5))\n    >>> sort_array(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-4, -2, -6, -5, -3))\n    >>> sort_array(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 4, 3))\n     */\n    public List<Integer> sort_array(List<Integer> arr) {\n        Map<Integer, Integer> map = new HashMap<>();\n        \n        for (int num : arr) {\n            int count = Integer.bitCount(Math.abs(num));\n            map.put(num, count);\n        }\n        \n        List<Integer> sorted = new ArrayList<>(arr);\n        Collections.sort(sorted, (a, b) -> {\n            int countA = map.get(a);\n            int countB = map.get(b);\n            \n            if (countA == countB) {\n                return a - b;\n            }\n            \n            return countA - countB;\n        });\n        \n        return sorted;\n    }\n}\n"}
{"task_id": "Java/117", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> select_words(String s, int n) {\n        List<String> result = new ArrayList<>();\n        \n        if (s.isEmpty()) {\n            return result;\n        }\n        \n        String[] words = s.split(\" \");\n        \n        for (String word : words) {\n            int consonantCount = 0;\n            for (char c : word.toCharArray()) {\n                if (isConsonant(c)) {\n                    consonantCount++;\n                }\n            }\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        \n        return result;\n    }\n    \n    private boolean isConsonant(char c) {\n        c = Character.toLowerCase(c);\n        return c >= 'b' && c <= 'z' && c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u';\n    }\n}\n"}
{"task_id": "Java/118", "generation": "import java.util.*;\n\nclass Solution {\n    public String get_closest_vowel(String word) {\n        List<Character> vowels = Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U');\n        List<Integer> consonantIndices = new ArrayList<>();\n        \n        for (int i = 0; i < word.length(); i++) {\n            if (!vowels.contains(word.charAt(i))) {\n                consonantIndices.add(i);\n            }\n        }\n        \n        for (int j = consonantIndices.size() - 1; j >= 1; j--) {\n            int start = consonantIndices.get(j);\n            int end = consonantIndices.get(j - 1);\n            \n            for (int k = start - 1; k > end; k--) {\n                if (vowels.contains(word.charAt(k))) {\n                    return String.valueOf(word.charAt(k));\n                }\n            }\n        }\n        \n        return \"\";\n    }\n}\n"}
{"task_id": "Java/119", "generation": "import java.util.*;\n\nclass Solution {\n    public String match_parens(List<String> lst) {\n        String str1 = lst.get(0);\n        String str2 = lst.get(1);\n        \n        if (!checkEqualParentheses(str1, str2)) {\n            return \"No\";\n        }\n        \n        if (checkBalancedParentheses(str1 + str2) || checkBalancedParentheses(str2 + str1)) {\n            return \"Yes\";\n        }\n        \n        return \"No\";\n    }\n    \n    private boolean checkEqualParentheses(String str1, String str2) {\n        return countParentheses(str1, '(') == countParentheses(str2, '(') && countParentheses(str1, ')') == countParentheses(str2, ')');\n    }\n    \n    private int countParentheses(String str, char paren) {\n        int count = 0;\n        for (char c : str.toCharArray()) {\n            if (c == paren) {\n                count++;\n            }\n        }\n        return count;\n    }\n    \n    private boolean checkBalancedParentheses(String str) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : str.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/120", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        Collections.sort(arr);\n        \n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = arr.size() - k; i < arr.size(); i++) {\n            result.add(arr.get(i));\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/121", "generation": "import java.util.*;\n\nclass Solution {\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        \n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 != 0 && i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        \n        return sum;\n    }\n}\n"}
{"task_id": "Java/122", "generation": "import java.util.*;\n\nclass Solution {\n    public int add_elements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k && i < arr.size(); i++) {\n            if (arr.get(i) >= 10 && arr.get(i) <= 99) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/123", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> get_odd_collatz(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            List<Integer> collatzSeq = generateCollatzSequence(i);\n            List<Integer> oddNumbers = filterOddNumbers(collatzSeq);\n            result.addAll(oddNumbers);\n        }\n        Collections.sort(result);\n        return result;\n    }\n\n    private List<Integer> generateCollatzSequence(int n) {\n        List<Integer> sequence = new ArrayList<>();\n        while (n != 1) {\n            sequence.add(n);\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n        }\n        sequence.add(1);\n        return sequence;\n    }\n\n    private List<Integer> filterOddNumbers(List<Integer> sequence) {\n        List<Integer> oddNumbers = new ArrayList<>();\n        for (int num : sequence) {\n            if (num % 2 != 0) {\n                oddNumbers.add(num);\n            }\n        }\n        return oddNumbers;\n    }\n}\n"}
{"task_id": "Java/124", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean valid_date(String date) {\n        if (date.isEmpty()) {\n            return false;\n        }\n        \n        String[] dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n            return false;\n        }\n        \n        int month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n        \n        if (month < 1 || month > 12) {\n            return false;\n        }\n        \n        if (day < 1 || day > 31) {\n            return false;\n        }\n        \n        if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) {\n            return false;\n        }\n        \n        if (month == 2) {\n            if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {\n                if (day > 29) {\n                    return false;\n                }\n            } else {\n                if (day > 28) {\n                    return false;\n                }\n            }\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/125", "generation": "import java.util.*;\n\nclass Solution {\n    public Object split_words(String txt) {\n        List<String> result = new ArrayList<>();\n        if (txt.contains(\" \")) {\n            result = Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            result = Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 != 0) {\n                    count++;\n                }\n            }\n            return count;\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/126", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean is_sorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n        \n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < lst.get(i - 1)) {\n                return false;\n            }\n        }\n        \n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (int num : lst) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n            if (countMap.get(num) > 2) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/127", "generation": "import java.util.*;\n\nclass Solution {\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        \n        if (end1 < start2 || end2 < start1) {\n            return \"NO\";\n        }\n        \n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n        \n        int intersectionLength = intersectionEnd - intersectionStart;\n        \n        if (isPrime(intersectionLength)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n    \n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/128", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int productOfSigns = 1;\n        int sumOfMagnitudes = 0;\n\n        for (int num : arr) {\n            if (num > 0) {\n                productOfSigns *= 1;\n                sumOfMagnitudes += num;\n            } else if (num < 0) {\n                productOfSigns *= -1;\n                sumOfMagnitudes += Math.abs(num);\n            }\n            // If num is 0, do nothing as it doesn't affect the product of signs or sum of magnitudes\n        }\n\n        return Optional.of(productOfSigns * sumOfMagnitudes);\n    }\n}\n"}
{"task_id": "Java/129", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        List<Integer> minPath = null;\n        \n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                List<List<Integer>> paths = new ArrayList<>();\n                List<Integer> path = new ArrayList<>();\n                Set<String> visited = new HashSet<>();\n                path.add(grid.get(i).get(j));\n                visited.add(i + \"-\" + j);\n                findPaths(grid, i, j, k, path, visited, paths);\n                \n                for (List<Integer> p : paths) {\n                    if (minPath == null || comparePaths(p, minPath)) {\n                        minPath = new ArrayList<>(p);\n                    }\n                }\n            }\n        }\n        \n        return minPath;\n    }\n    \n    private void findPaths(List<List<Integer>> grid, int i, int j, int k, List<Integer> path, Set<String> visited, List<List<Integer>> paths) {\n        if (path.size() == k) {\n            paths.add(new ArrayList<>(path));\n            return;\n        }\n        \n        int[][] directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n        \n        for (int[] dir : directions) {\n            int newRow = i + dir[0];\n            int newCol = j + dir[1];\n            \n            if (newRow >= 0 && newRow < grid.size() && newCol >= 0 && newCol < grid.get(newRow).size() && !visited.contains(newRow + \"-\" + newCol)) {\n                path.add(grid.get(newRow).get(newCol));\n                visited.add(newRow + \"-\" + newCol);\n                findPaths(grid, newRow, newCol, k, path, visited, paths);\n                path.remove(path.size() - 1);\n                visited.remove(newRow + \"-\" + newCol);\n            }\n        }\n    }\n    \n    private boolean comparePaths(List<Integer> path1, List<Integer> path2) {\n        for (int i = 0; i < path1.size(); i++) {\n            if (path1.get(i) < path2.get(i)) {\n                return true;\n            } else if (path1.get(i) > path2.get(i)) {\n                return false;\n            }\n        }\n        \n        return false;\n    }\n}\n"}
{"task_id": "Java/130", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        \n        if (n == 0) {\n            return result;\n        }\n        \n        if (n >= 1) {\n            result.add(0);\n        }\n        \n        if (n >= 2) {\n            result.add(1);\n        }\n        \n        if (n >= 3) {\n            result.add(1);\n        }\n        \n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(1 + i / 2);\n            } else {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/131", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        if (n <= 0) {\n            return 0;\n        }\n        \n        int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        \n        return product;\n    }\n}\n"}
{"task_id": "Java/132", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean is_nested(String string) {\n        if (string == null || string.length() == 0) {\n            return false;\n        }\n        \n        Stack<Character> stack = new Stack<>();\n        \n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (!stack.isEmpty() && stack.peek() == '[') {\n                    stack.pop();\n                } else {\n                    stack.push(c);\n                }\n            }\n        }\n        \n        return stack.size() < string.length() && !stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/133", "generation": "import java.util.*;\n\nclass Solution {\n    public int sum_squares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            int roundedNum = (int) Math.ceil(num);\n            sum += roundedNum * roundedNum;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/134", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") -> false\n    check_if_last_char_is_a_letter(\"apple pi e\") -> true\n    check_if_last_char_is_a_letter(\"apple pi e \") -> false\n    check_if_last_char_is_a_letter(\"\") -> false\n     */\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        if (txt.isEmpty()) {\n            return false;\n        }\n\n        char lastChar = txt.charAt(txt.length() - 1);\n\n        if (!Character.isLetter(lastChar)) {\n            return false;\n        }\n\n        if (txt.length() > 1 && txt.charAt(txt.length() - 2) != ' ') {\n            return false;\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/135", "generation": "import java.util.*;\n\nclass Solution {\n    public int can_arrange(List<Integer> arr) {\n        int largestIndex = -1;\n        \n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                largestIndex = i - 1;\n            }\n        }\n        \n        return largestIndex;\n    }\n}\n"}
{"task_id": "Java/136", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largest_smallest_integers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largest_smallest_integers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst){\n        Optional<Integer> largestNegative = Optional.empty();\n        Optional<Integer> smallestPositive = Optional.empty();\n\n        for (Integer num : lst) {\n            if (num < 0 && (!largestNegative.isPresent() || num > largestNegative.get())) {\n                largestNegative = Optional.of(num);\n            } else if (num > 0 && (!smallestPositive.isPresent() || num < smallestPositive.get())) {\n                smallestPositive = Optional.of(num);\n            }\n        }\n\n        List<Optional<Integer>> result = new ArrayList<>();\n        result.add(largestNegative);\n        result.add(smallestPositive);\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/137", "generation": "import java.util.*;\n\nclass Solution {\n    public Optional<Object> compare_one(Object a, Object b) {\n        if (a instanceof String && b instanceof String) {\n            String strA = (String) a;\n            String strB = (String) b;\n            if (strA.contains(\".\") || strA.contains(\",\")) {\n                strA = strA.replace(\",\", \".\");\n            }\n            if (strB.contains(\".\") || strB.contains(\",\")) {\n                strB = strB.replace(\",\", \".\");\n            }\n            Float floatA = Float.parseFloat(strA);\n            Float floatB = Float.parseFloat(strB);\n            return Optional.of(floatA > floatB ? a : b);\n        } else if (a instanceof Float || b instanceof Float) {\n            Float floatA = a instanceof Float ? (Float) a : Float.parseFloat((String) a);\n            Float floatB = b instanceof Float ? (Float) b : Float.parseFloat((String) b);\n            return Optional.of(floatA > floatB ? a : b);\n        } else {\n            Integer intA = a instanceof Integer ? (Integer) a : Integer.parseInt((String) a);\n            Integer intB = b instanceof Integer ? (Integer) b : Integer.parseInt((String) b);\n            return Optional.of(intA > intB ? a : b);\n        }\n    }\n}\n"}
{"task_id": "Java/138", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == false\n    is_equal_to_sum_even(6) == false\n    is_equal_to_sum_even(8) == true\n     */\n    public boolean is_even(int num) {\n        return num % 2 == 0;\n    }\n\n    public boolean is_equal_to_sum_even(int n) {\n        if (!is_even(n)) {\n            return false;\n        }\n        \n        int count = 0;\n        \n        for (int i = 2; i <= n / 2; i += 2) {\n            for (int j = 2; j <= n / 2; j += 2) {\n                for (int k = 2; k <= n / 2; k += 2) {\n                    for (int l = 2; l <= n / 2; l += 2) {\n                        if (i + j + k + l == n) {\n                            count++;\n                        }\n                    }\n                }\n            }\n        }\n        \n        return count == 4;\n    }\n}\n"}
{"task_id": "Java/139", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long special_factorial(int n) {\n        return calculateSpecialFactorial(n);\n    }\n\n    private long calculateSpecialFactorial(int n) {\n        long result = 1;\n        for (int i = n; i > 0; i--) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    private long factorial(int num) {\n        long fact = 1;\n        for (int i = 1; i <= num; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n}\n"}
{"task_id": "Java/140", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fix_spaces(String text) {\n        StringBuilder modifiedText = new StringBuilder();\n        int consecutiveSpaces = 0;\n        \n        for (int i = 0; i < text.length(); i++) {\n            char currentChar = text.charAt(i);\n            \n            if (currentChar == ' ') {\n                consecutiveSpaces++;\n                if (consecutiveSpaces > 2) {\n                    if (modifiedText.length() > 0 && modifiedText.charAt(modifiedText.length() - 1) != '-') {\n                        modifiedText.append('-');\n                    }\n                } else {\n                    modifiedText.append('_');\n                }\n            } else {\n                modifiedText.append(currentChar);\n                consecutiveSpaces = 0;\n            }\n        }\n        \n        return modifiedText.toString();\n    }\n}\n"}
{"task_id": "Java/141", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String file_name_check(String file_name) {\n        // Check if the file name contains more than three digits\n        int digitCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n        }\n        if (digitCount > 3) {\n            return \"No\";\n        }\n        \n        // Check if the file name contains exactly one dot\n        if (file_name.indexOf('.') == -1 || file_name.indexOf('.') != file_name.lastIndexOf('.')) {\n            return \"No\";\n        }\n        \n        // Check if the substring before the dot starts with a letter from the latin alphabet\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length != 2 || parts[0].isEmpty() || !Character.isLetter(parts[0].charAt(0))) {\n            return \"No\";\n        }\n        \n        // Check if the substring after the dot is either \"txt\", \"exe\", or \"dll\"\n        if (!parts[1].equals(\"txt\") && !parts[1].equals(\"exe\") && !parts[1].equals(\"dll\")) {\n            return \"No\";\n        }\n        \n        return \"Yes\";\n    }\n}\n"}
{"task_id": "Java/142", "generation": "import java.util.*;\n\nclass Solution {\n    public int sum_squares(List<Integer> lst) {\n        int sum = 0;\n        \n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            }\n        }\n        \n        return sum;\n    }\n}\n"}
{"task_id": "Java/143", "generation": "import java.util.*;\n\nclass Solution {\n    public String words_in_sentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        List<String> primeWords = new ArrayList<>();\n        \n        for (String word : words) {\n            if (isPrime(word.length())) {\n                primeWords.add(word);\n            }\n        }\n        \n        return String.join(\" \", primeWords);\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/144", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean simplify(String x, String n) {\n        int[] fraction1 = parseFraction(x);\n        int[] fraction2 = parseFraction(n);\n        \n        double decimal1 = convertToDecimal(fraction1);\n        double decimal2 = convertToDecimal(fraction2);\n        \n        double result = multiplyDecimals(decimal1, decimal2);\n        \n        return isWholeNumber(result);\n    }\n    \n    private int[] parseFraction(String fraction) {\n        String[] parts = fraction.split(\"/\");\n        int numerator = Integer.parseInt(parts[0]);\n        int denominator = Integer.parseInt(parts[1]);\n        return new int[]{numerator, denominator};\n    }\n    \n    private double convertToDecimal(int[] fraction) {\n        return (double) fraction[0] / fraction[1];\n    }\n    \n    private double multiplyDecimals(double decimal1, double decimal2) {\n        return decimal1 * decimal2;\n    }\n    \n    private boolean isWholeNumber(double number) {\n        return number % 1 == 0;\n    }\n}\n"}
{"task_id": "Java/145", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> order_by_points(List<Integer> nums) {\n        if (nums == null || nums.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        Collections.sort(nums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer num1, Integer num2) {\n                int sum1 = calculateSumOfDigits(num1);\n                int sum2 = calculateSumOfDigits(num2);\n\n                if (sum1 == sum2) {\n                    return nums.indexOf(num1) - nums.indexOf(num2);\n                }\n\n                return sum1 - sum2;\n            }\n        });\n\n        return nums;\n    }\n\n    private int calculateSumOfDigits(int num) {\n        int sum = 0;\n        String numStr = String.valueOf(num);\n\n        for (int i = 0; i < numStr.length(); i++) {\n            char digit = numStr.charAt(i);\n            if (digit == '-') {\n                sum -= Character.getNumericValue(numStr.charAt(++i));\n            } else {\n                sum += Character.getNumericValue(digit);\n            }\n        }\n\n        return sum;\n    }\n}\n"}
{"task_id": "Java/146", "generation": "import java.util.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        \n        for (int num : nums) {\n            if (num > 10 && isOdd(num) && isFirstAndLastDigitsOdd(num)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n    \n    private boolean isOdd(int num) {\n        return num % 2 != 0;\n    }\n    \n    private boolean isFirstAndLastDigitsOdd(int num) {\n        String numStr = String.valueOf(Math.abs(num));\n        int firstDigit = Character.getNumericValue(numStr.charAt(0));\n        int lastDigit = Character.getNumericValue(numStr.charAt(numStr.length() - 1));\n        \n        return isOdd(firstDigit) && isOdd(lastDigit);\n    }\n}\n"}
{"task_id": "Java/147", "generation": "import java.util.*;\n\nclass Solution {\n    public int get_max_triples(int n) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        \n        int count = 0;\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/148", "generation": "import java.util.*;\n\nclass Solution {\n    private static final List<String> PLANETS = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\n    public List<String> bf(String planet1, String planet2) {\n        if (!PLANETS.contains(planet1) || !PLANETS.contains(planet2)) {\n            return new ArrayList<>();\n        }\n\n        int orbit1 = PLANETS.indexOf(planet1);\n        int orbit2 = PLANETS.indexOf(planet2);\n\n        int start = Math.min(orbit1, orbit2);\n        int end = Math.max(orbit1, orbit2);\n\n        List<String> result = new ArrayList<>();\n        for (int i = start + 1; i < end; i++) {\n            result.add(PLANETS.get(i));\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/149", "generation": "import java.util.*;\n\nclass Solution {\n    public List<String> sorted_list_sum(List<String> lst) {\n        List<String> filteredList = new ArrayList<>();\n        \n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                filteredList.add(str);\n            }\n        }\n        \n        Collections.sort(filteredList, (a, b) -> {\n            if (a.length() == b.length()) {\n                return a.compareTo(b);\n            } else {\n                return a.length() - b.length();\n            }\n        });\n        \n        return filteredList;\n    }\n}\n"}
{"task_id": "Java/150", "generation": "class Solution {\n    public int x_or_y(int n, int x, int y) {\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/151", "generation": "import java.util.*;\n\nclass Solution {\n    public int double_the_difference(List<Object> lst) {\n        int sum = 0;\n        for (Object num : lst) {\n            if (num instanceof Integer && (int) num > 0 && (int) num % 2 != 0) {\n                sum += ((int) num) * ((int) num);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/152", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> differences = new ArrayList<>();\n        \n        for (int i = 0; i < game.size(); i++) {\n            int difference = Math.abs(game.get(i) - guess.get(i));\n            differences.add(difference);\n        }\n        \n        return differences;\n    }\n}\n"}
{"task_id": "Java/153", "generation": "import java.util.List;\n\nclass Solution {\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        String strongestExtension = \"\";\n        int maxStrength = Integer.MIN_VALUE;\n        \n        for (String extension : extensions) {\n            int CAP = 0;\n            int SM = 0;\n            \n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    CAP++;\n                } else if (Character.isLowerCase(c)) {\n                    SM++;\n                }\n            }\n            \n            int strength = CAP - SM;\n            \n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n        \n        return class_name + \".\" + strongestExtension;\n    }\n}\n"}
{"task_id": "Java/154", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean cycpattern_check(String a, String b) {\n        if (a.length() != b.length()) {\n            return false;\n        }\n        \n        String doubleA = a + a;\n        \n        for (int i = 0; i < a.length(); i++) {\n            if (doubleA.substring(i, i + b.length()).equals(b)) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n}\n"}
{"task_id": "Java/155", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> even_odd_count(int num) {\n        List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        String numStr = String.valueOf(Math.abs(num));\n        \n        for (int i = 0; i < numStr.length(); i++) {\n            int digit = Character.getNumericValue(numStr.charAt(i));\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        \n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/156", "generation": "import java.util.*;\n\nclass Solution {\n    public String int_to_mini_roman(int number) {\n        TreeMap<Integer, String> map = new TreeMap<>();\n        map.put(1000, \"M\");\n        map.put(900, \"CM\");\n        map.put(500, \"D\");\n        map.put(400, \"CD\");\n        map.put(100, \"C\");\n        map.put(90, \"XC\");\n        map.put(50, \"L\");\n        map.put(40, \"XL\");\n        map.put(10, \"X\");\n        map.put(9, \"IX\");\n        map.put(5, \"V\");\n        map.put(4, \"IV\");\n        map.put(1, \"I\");\n\n        StringBuilder result = new StringBuilder();\n        for (Map.Entry<Integer, String> entry : map.entrySet()) {\n            int value = entry.getKey();\n            String roman = entry.getValue();\n            while (number >= value) {\n                result.append(roman);\n                number -= value;\n            }\n        }\n\n        return result.toString().toLowerCase();\n    }\n}\n"}
{"task_id": "Java/157", "generation": "import java.util.*;\n\nclass Solution {\n    public boolean isTriangle(int a, int b, int c) {\n        return (a + b > c) && (a + c > b) && (b + c > a);\n    }\n\n    public boolean isRightAngledTriangle(int a, int b, int c) {\n        if (!isTriangle(a, b, c)) {\n            return false;\n        }\n        \n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        \n        return (Math.pow(sides[0], 2) + Math.pow(sides[1], 2) == Math.pow(sides[2], 2));\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.isRightAngledTriangle(3, 4, 5)); // true\n        System.out.println(solution.isRightAngledTriangle(1, 2, 3)); // false\n    }\n}\n"}
{"task_id": "Java/158", "generation": "import java.util.*;\n\nclass Solution {\n    public String find_max(List<String> words) {\n        String result = \"\";\n        int maxUnique = 0;\n        \n        for (String word : words) {\n            int uniqueChars = countUniqueCharacters(word);\n            \n            if (uniqueChars > maxUnique || (uniqueChars == maxUnique && word.compareTo(result) < 0)) {\n                maxUnique = uniqueChars;\n                result = word;\n            }\n        }\n        \n        return result;\n    }\n    \n    private int countUniqueCharacters(String word) {\n        Set<Character> uniqueChars = new HashSet<>();\n        \n        for (char c : word.toCharArray()) {\n            uniqueChars.add(c);\n        }\n        \n        return uniqueChars.size();\n    }\n}\n"}
{"task_id": "Java/159", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> eat(int number, int need, int remaining) {\n        int totalCarrotsEaten = number + need;\n        int carrotsLeft = Math.max(0, remaining - totalCarrotsEaten);\n        \n        List<Integer> result = new ArrayList<>();\n        result.add(totalCarrotsEaten);\n        result.add(carrotsLeft);\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/160", "generation": "import java.util.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebraic\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        if (operator.size() != operand.size() - 1) {\n            throw new IllegalArgumentException(\"Invalid input: Operator list length should be one less than operand list length.\");\n        }\n        \n        int result = operand.get(0);\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int num = operand.get(i + 1);\n            \n            switch (op) {\n                case \"+\":\n                    result += num;\n                    break;\n                case \"-\":\n                    result -= num;\n                    break;\n                case \"*\":\n                    result *= num;\n                    break;\n                case \"/\":\n                    result /= num;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, num);\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid operator: \" + op);\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/161", "generation": "import java.util.*;\n\nclass Solution {\n    public String solve(String s) {\n        StringBuilder result = new StringBuilder();\n        boolean hasLetters = false;\n        \n        for (int i = s.length() - 1; i >= 0; i--) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                hasLetters = true;\n                if (Character.isUpperCase(c)) {\n                    result.append(Character.toLowerCase(c));\n                } else {\n                    result.append(Character.toUpperCase(c));\n                }\n            } else {\n                result.append(c);\n            }\n        }\n        \n        if (!hasLetters) {\n            return result.reverse().toString();\n        }\n        \n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/162", "generation": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\n\nclass Solution {\n    public Optional<String> string_to_md5(String text) {\n        try {\n            if (text.isEmpty()) {\n                return Optional.empty();\n            }\n            \n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n            \n            byte[] digest = md.digest();\n            BigInteger bigInt = new BigInteger(1, digest);\n            String md5Hash = bigInt.toString(16);\n            \n            while (md5Hash.length() < 32) {\n                md5Hash = \"0\" + md5Hash;\n            }\n            \n            return Optional.of(md5Hash);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            return Optional.empty();\n        }\n    }\n}\n"}
{"task_id": "Java/163", "generation": "import java.util.*;\n\nclass Solution {\n    public List<Integer> generate_integers(int a, int b) {\n        List<Integer> evenDigits = new ArrayList<>();\n        \n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0 && i < 10) {\n                evenDigits.add(i);\n            }\n        }\n        \n        Collections.sort(evenDigits);\n        \n        return evenDigits;\n    }\n}\n"}
