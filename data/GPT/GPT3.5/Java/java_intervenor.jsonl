{"task_id": "Java/0", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> has_close_elements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> has_close_elements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.has_close_elements(Arrays.asList(1.0, 2.0, 3.0), 0.5)); // false\n        System.out.println(solution.has_close_elements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)); // true\n    }\n}"}
{"task_id": "Java/1", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        int count = 0;\n        StringBuilder sb = new StringBuilder();\n        \n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                count++;\n            } else if (c == ')') {\n                count--;\n            }\n            \n            sb.append(c);\n            \n            if (count == 0) {\n                result.add(sb.toString().replaceAll(\"\\\\s\", \"\"));\n                sb = new StringBuilder();\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/2", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n     */\n    public double truncate_number(double number) {\n        // Get the integer part of the number\n        int integerPart = (int) number;\n\n        // Get the decimal part of the number\n        double decimalPart = number - integerPart;\n\n        return decimalPart;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.truncate_number(3.5)); // Output: 0.5\n        System.out.println(solution.truncate_number(6.75)); // Output: 0.75\n        System.out.println(solution.truncate_number(10.123)); // Output: 0.123\n    }\n}"}
{"task_id": "Java/3", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero(Arrays.asList(1, 2, 3))\n    false\n    >>> below_zero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        \n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n}"}
{"task_id": "Java/4", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double mean_absolute_deviation(List<Double> numbers) {\n        // Calculate the mean of the dataset\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n\n        // Calculate the absolute differences and sum them up\n        double diffSum = 0;\n        for (double num : numbers) {\n            diffSum += Math.abs(num - mean);\n        }\n\n        // Calculate the mean absolute deviation\n        double mad = diffSum / numbers.size();\n\n        return mad;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0);\n        System.out.println(solution.mean_absolute_deviation(numbers)); // Output: 1.0\n    }\n}"}
{"task_id": "Java/5", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.intersperse(Arrays.asList(1, 2, 3), 4));\n    }\n}"}
{"task_id": "Java/6", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parse_nested_parens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        \n        String[] groups = paren_string.split(\" \");\n        \n        for (String group : groups) {\n            int maxDepth = 0;\n            int currentDepth = 0;\n            \n            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(') {\n                    currentDepth++;\n                    maxDepth = Math.max(maxDepth, currentDepth);\n                } else if (group.charAt(i) == ')') {\n                    currentDepth--;\n                }\n            }\n            \n            result.add(maxDepth);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the example\n        List<Integer> result = solution.parse_nested_parens(\"(()()) ((())) () ((())()())\");\n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/7", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring(List.of(), \"a\")\n    []\n    >>> filter_by_substring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> filteredStrings = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredStrings.add(str);\n            }\n        }\n        return filteredStrings;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.filter_by_substring(List.of(), \"a\")); // []\n        System.out.println(solution.filter_by_substring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")); // [\"abc\", \"bacd\", \"array\"]\n    }\n}"}
{"task_id": "Java/8", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product(List.of())\n    [0, 1]\n    >>> sum_product(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sum_product(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        \n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        \n        return Arrays.asList(sum, product);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.sum_product(new ArrayList<>()));\n        System.out.println(solution.sum_product(Arrays.asList(1, 2, 3, 4)));\n    }\n}"}
{"task_id": "Java/9", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        Deque<Integer> deque = new LinkedList<>();\n\n        for (int i = 0; i < numbers.size(); i++) {\n            while (!deque.isEmpty() && numbers.get(i) >= numbers.get(deque.peekLast())) {\n                deque.removeLast();\n            }\n            deque.addLast(i);\n\n            if (deque.peekFirst() == i - 3) {\n                deque.removeFirst();\n            }\n\n            result.add(numbers.get(deque.peekFirst()));\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 2, 3, 4, 2);\n        List<Integer> result = solution.rolling_max(numbers);\n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/10", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n     */\n    public String make_palindrome(String string) {\n        if (string == null || string.length() == 0) {\n            return \"\";\n        }\n        \n        int n = string.length();\n        int i = n - 1;\n        \n        while (i >= 0) {\n            if (isPalindrome(string.substring(i))) {\n                break;\n            }\n            i--;\n        }\n        \n        StringBuilder sb = new StringBuilder(string);\n        sb.append(new StringBuilder(string.substring(0, i)).reverse());\n        \n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.make_palindrome(\"\")); // \"\"\n        System.out.println(solution.make_palindrome(\"cat\")); // \"catac\"\n        System.out.println(solution.make_palindrome(\"cata\")); // \"catac\"\n    }\n}"}
{"task_id": "Java/11", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n     */\n    public String string_xor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        \n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) != b.charAt(i)) {\n                result.append(\"1\");\n            } else {\n                result.append(\"0\");\n            }\n        }\n        \n        return result.toString();\n    }\n}"}
{"task_id": "Java/12", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        String longestString = strings.get(0);\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n        \n        return Optional.of(longestString);\n    }\n}"}
{"task_id": "Java/13", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n     */\n    public int greatest_common_divisor(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return greatest_common_divisor(b, a % b);\n    }\n}"}
{"task_id": "Java/14", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> all_prefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.all_prefixes(\"abc\"));\n    }\n}"}
{"task_id": "Java/15", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String string_sequence(int n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            if (i < n) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.string_sequence(0)); // \"0\"\n        System.out.println(solution.string_sequence(5)); // \"0 1 2 3 4 5\"\n    }\n}"}
{"task_id": "Java/16", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n     */\n    public int count_distinct_characters(String string) {\n        // Convert the string to lowercase to ignore case\n        string = string.toLowerCase();\n        \n        // Use a set to store distinct characters\n        Set<Character> charSet = new HashSet<>();\n        \n        // Iterate through the string and add each character to the set\n        for (int i = 0; i < string.length(); i++) {\n            charSet.add(string.charAt(i));\n        }\n        \n        // Return the size of the set, which represents the number of distinct characters\n        return charSet.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.count_distinct_characters(\"xyzXYZ\")); // Output: 3\n        System.out.println(solution.count_distinct_characters(\"Jerry\")); // Output: 4\n    }\n}"}
{"task_id": "Java/17", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parse_music(String string) {\n        List<Integer> beats = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        \n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n                beats.add(4);\n            } else if (note.equals(\"o|\")) {\n                beats.add(2);\n            } else if (note.equals(\".|\")) {\n                beats.add(1);\n            }\n        }\n        \n        return beats;\n    }\n}"}
{"task_id": "Java/18", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n     */\n    public int how_many_times(String string, String substring) {\n        if (string == null || substring == null || string.length() == 0 || substring.length() == 0) {\n            return 0;\n        }\n        \n        int count = 0;\n        int index = 0;\n        \n        while (index < string.length()) {\n            index = string.indexOf(substring, index);\n            if (index == -1) {\n                break;\n            }\n            count++;\n            index++;\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.how_many_times(\"\", \"a\")); // 0\n        System.out.println(solution.how_many_times(\"aaa\", \"a\")); // 3\n        System.out.println(solution.how_many_times(\"aaaa\", \"aa\")); // 3\n    }\n}"}
{"task_id": "Java/19", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sort_numbers(String numbers) {\n        // Create a map to store the mapping of numberals to their corresponding numbers\n        Map<String, Integer> numberMap = new HashMap<>();\n        numberMap.put(\"zero\", 0);\n        numberMap.put(\"one\", 1);\n        numberMap.put(\"two\", 2);\n        numberMap.put(\"three\", 3);\n        numberMap.put(\"four\", 4);\n        numberMap.put(\"five\", 5);\n        numberMap.put(\"six\", 6);\n        numberMap.put(\"seven\", 7);\n        numberMap.put(\"eight\", 8);\n        numberMap.put(\"nine\", 9);\n        \n        // Split the input string into individual numberals\n        String[] numberals = numbers.split(\" \");\n        \n        // Create a list to store the numbers corresponding to the numberals\n        List<Integer> numberList = new ArrayList<>();\n        \n        // Convert each numberal to its corresponding number and add it to the list\n        for (String numberal : numberals) {\n            numberList.add(numberMap.get(numberal));\n        }\n        \n        // Sort the numbers in ascending order\n        Collections.sort(numberList);\n        \n        // Create a string to store the sorted numberals\n        StringBuilder sortedNumbers = new StringBuilder();\n        \n        // Convert the sorted numbers back to numberals and append them to the string\n        for (int number : numberList) {\n            for (Map.Entry<String, Integer> entry : numberMap.entrySet()) {\n                if (entry.getValue() == number) {\n                    sortedNumbers.append(entry.getKey()).append(\" \");\n                    break;\n                }\n            }\n        }\n        \n        // Remove the trailing space and return the sorted numberals\n        return sortedNumbers.toString().trim();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the sort_numbers method\n        System.out.println(solution.sort_numbers(\"three one five\")); // \"one three five\"\n    }\n}"}
{"task_id": "Java/20", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> find_closest_elements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        Collections.sort(numbers);\n        double minDiff = Double.MAX_VALUE;\n        List<Double> result = new ArrayList<>();\n        \n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (diff < minDiff) {\n                minDiff = diff;\n                result.clear();\n                result.add(numbers.get(i));\n                result.add(numbers.get(i + 1));\n            } else if (diff == minDiff) {\n                result.add(numbers.get(i));\n                result.add(numbers.get(i + 1));\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/21", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        // Find the minimum and maximum numbers in the list\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        \n        // Calculate the range of the numbers\n        double range = max - min;\n        \n        // Apply linear transformation to rescale the numbers to [0, 1]\n        List<Double> rescaledNumbers = new ArrayList<>();\n        for (double num : numbers) {\n            double rescaledNum = (num - min) / range;\n            rescaledNumbers.add(rescaledNum);\n        }\n        \n        return rescaledNumbers;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        List<Double> rescaledNumbers = solution.rescale_to_unit(numbers);\n        \n        System.out.println(rescaledNumbers);\n    }\n}"}
{"task_id": "Java/22", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filter_integers(List<Object> values) {\n        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Object> test1 = Arrays.asList('a', 3.14, 5);\n        System.out.println(solution.filter_integers(test1));\n\n        List<Object> test2 = Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of());\n        System.out.println(solution.filter_integers(test2));\n    }\n}"}
{"task_id": "Java/23", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n\n    /**\n    Reverse the given string\n    >>> reverseString(\"abc\")\n    \"cba\"\n    >>> reverseString(\"hello\")\n    \"olleh\"\n     */\n    public String reverseString(String string) {\n        StringBuilder reversed = new StringBuilder();\n        for (int i = string.length() - 1; i >= 0; i--) {\n            reversed.append(string.charAt(i));\n        }\n        return reversed.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.strlen(\"\")); // 0\n        System.out.println(solution.strlen(\"abc\")); // 3\n\n        System.out.println(solution.reverseString(\"abc\")); // cba\n        System.out.println(solution.reverseString(\"hello\")); // olleh\n    }\n}"}
{"task_id": "Java/24", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n     */\n    public int largest_divisor(int n) {\n        // Find all divisors of n\n        List<Integer> divisors = new ArrayList<>();\n        for (int i = 1; i < n; i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n            }\n        }\n        \n        // Find the largest divisor\n        int largest = 1;\n        for (int divisor : divisors) {\n            if (divisor > largest) {\n                largest = divisor;\n            }\n        }\n        \n        return largest;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the function with an example\n        int n = 15;\n        System.out.println(solution.largest_divisor(n));\n    }\n}"}
{"task_id": "Java/25", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        \n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        \n        return factors;\n    }\n}"}
{"task_id": "Java/26", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        Set<Integer> seen = new HashSet<>();\n        List<Integer> result = new ArrayList<>();\n\n        for (Integer num : numbers) {\n            if (!seen.contains(num)) {\n                result.add(num);\n                seen.add(num);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 2, 4);\n        List<Integer> result = solution.remove_duplicates(numbers);\n\n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/27", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"Hello\")\n    \"hELLO\"\n     */\n    public String flip_case(String string) {\n        char[] chars = string.toCharArray();\n        \n        for (int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n            if (Character.isLowerCase(c)) {\n                chars[i] = Character.toUpperCase(c);\n            } else if (Character.isUpperCase(c)) {\n                chars[i] = Character.toLowerCase(c);\n            }\n        }\n        \n        return new String(chars);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the flip_case method\n        System.out.println(solution.flip_case(\"Hello\")); // Output: \"hELLO\"\n    }\n}"}
{"task_id": "Java/28", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String str : strings) {\n            sb.append(str);\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.concatenate(List.of())); // \"\"\n        System.out.println(solution.concatenate(Arrays.asList(\"a\", \"b\", \"c\"))); // \"abc\"\n    }\n}"}
{"task_id": "Java/29", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix(List.of(), \"a\")\n    []\n    >>> filter_by_prefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.filter_by_prefix(List.of(), \"a\")); // []\n        System.out.println(solution.filter_by_prefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")); // [\"abc\", \"array\"]\n    }\n}"}
{"task_id": "Java/30", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> get_positive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> get_positive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> get_positive(List<Integer> l) {\n        return l.stream()\n                .filter(num -> num > 0)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> test1 = Arrays.asList(-1, 2, -4, 5, 6);\n        List<Integer> test2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n\n        System.out.println(solution.get_positive(test1)); // [2, 5, 6]\n        System.out.println(solution.get_positive(test2)); // [5, 3, 2, 3, 9, 123, 1]\n    }\n}"}
{"task_id": "Java/31", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    false\n    >>> is_prime(101)\n    true\n    >>> is_prime(11)\n    true\n    >>> is_prime(13441)\n    true\n    >>> is_prime(61)\n    true\n    >>> is_prime(4)\n    false\n    >>> is_prime(1)\n    false\n     */\n    public boolean is_prime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.is_prime(6)); // false\n        System.out.println(solution.is_prime(101)); // true\n        System.out.println(solution.is_prime(11)); // true\n        System.out.println(solution.is_prime(13441)); // true\n        System.out.println(solution.is_prime(61)); // true\n        System.out.println(solution.is_prime(4)); // false\n        System.out.println(solution.is_prime(1)); // false\n    }\n}"}
{"task_id": "Java/32", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> find_zero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> find_zero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double find_zero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"Number of coefficients must be even\");\n        }\n        \n        double maxCoefficient = 0;\n        for (double coeff : xs) {\n            if (coeff != 0 && Math.abs(coeff) > Math.abs(maxCoefficient)) {\n                maxCoefficient = coeff;\n            }\n        }\n        \n        List<Double> normalizedCoeffs = new ArrayList<>();\n        for (double coeff : xs) {\n            normalizedCoeffs.add(coeff / maxCoefficient);\n        }\n        \n        double result = 0;\n        for (int i = 0; i < normalizedCoeffs.size(); i++) {\n            result += normalizedCoeffs.get(i) * Math.pow(-1, i);\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Double> poly1 = Arrays.asList(1.0, 2.0);\n        System.out.println(solution.poly(poly1, -0.5)); // Expected output: 0.0\n        \n        List<Double> poly2 = Arrays.asList(-6.0, 11.0, -6.0, 1.0);\n        System.out.println(solution.find_zero(poly2)); // Expected output: 1.0\n    }\n}"}
{"task_id": "Java/33", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted in ascending order.\n    >>> sort_third(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sort_third(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sort_third(List<Integer> l) {\n        List<Integer> result = new ArrayList<>(l);\n        \n        for (int i = 0; i < result.size(); i++) {\n            if (i % 3 == 0) {\n                List<Integer> temp = new ArrayList<>();\n                for (int j = i; j < result.size(); j += 3) {\n                    temp.add(result.get(j));\n                }\n                Collections.sort(temp);\n                int index = 0;\n                for (int j = i; j < result.size(); j += 3) {\n                    result.set(j, temp.get(index));\n                    index++;\n                }\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the function with example cases\n        List<Integer> test1 = Arrays.asList(1, 2, 3);\n        List<Integer> result1 = solution.sort_third(test1);\n        System.out.println(result1); // Output: [1, 2, 3]\n        \n        List<Integer> test2 = Arrays.asList(5, 6, 3, 4, 8, 9, 2);\n        List<Integer> result2 = solution.sort_third(test2);\n        System.out.println(result2); // Output: [2, 6, 3, 4, 8, 9, 5]\n    }\n}"}
{"task_id": "Java/34", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> uniqueSet = new HashSet<>(l);\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n        Collections.sort(uniqueList);\n        return uniqueList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> input = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        List<Integer> result = solution.unique(input);\n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/35", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> max_element(Arrays.asList(1, 2, 3))\n    3\n    >>> max_element(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int max_element(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for (int num : l) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n}"}
{"task_id": "Java/36", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n     */\n    public int fizz_buzz(int n) {\n        int count = 0;\n        \n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String numStr = String.valueOf(i);\n                for (int j = 0; j < numStr.length(); j++) {\n                    if (numStr.charAt(j) == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fizz_buzz(50)); // 0\n        System.out.println(solution.fizz_buzz(78)); // 2\n        System.out.println(solution.fizz_buzz(79)); // 3\n    }\n}"}
{"task_id": "Java/37", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sort_even(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sort_even(List<Integer> l) {\n        List<Integer> sortedEvenIndices = new ArrayList<>();\n        List<Integer> result = new ArrayList<>();\n\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                sortedEvenIndices.add(l.get(i));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n\n        Collections.sort(sortedEvenIndices);\n\n        int sortedIndex = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(sortedEvenIndices.get(sortedIndex));\n                sortedIndex++;\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> test1 = Arrays.asList(1, 2, 3);\n        List<Integer> test2 = Arrays.asList(5, 6, 3, 4);\n\n        System.out.println(solution.sort_even(test1)); // [1, 2, 3]\n        System.out.println(solution.sort_even(test2)); // [3, 6, 5, 4]\n    }\n}"}
{"task_id": "Java/38", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decode_cyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group in reverse order. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"abcde\";\n        String encoded = solution.encodeCyclic(input);\n        System.out.println(\"Encoded string: \" + encoded);\n        String decoded = solution.decode_cyclic(encoded);\n        System.out.println(\"Decoded string: \" + decoded);\n    }\n}"}
{"task_id": "Java/39", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n     */\n    public int prime_fib(int n) {\n        int count = 0;\n        int num = 2;\n        \n        while (count < n) {\n            if (isFibonacci(num) && isPrime(num)) {\n                count++;\n            }\n            num++;\n        }\n        \n        return num - 1;\n    }\n    \n    public boolean isFibonacci(int n) {\n        if (n == 0 || n == 1) {\n            return true;\n        }\n        \n        int a = 0;\n        int b = 1;\n        int c = a + b;\n        \n        while (c < n) {\n            a = b;\n            b = c;\n            c = a + b;\n        }\n        \n        return c == n;\n    }\n    \n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.prime_fib(1));\n        System.out.println(solution.prime_fib(2));\n        System.out.println(solution.prime_fib(3));\n        System.out.println(solution.prime_fib(4));\n        System.out.println(solution.prime_fib(5));\n    }\n}"}
{"task_id": "Java/40", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triples_sum_to_zero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triples_sum_to_zero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triples_sum_to_zero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triples_sum_to_zero(Arrays.asList(1))\n    false\n     */\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        // Sort the list\n        Collections.sort(l);\n\n        // Loop through the list\n        for (int i = 0; i < l.size() - 2; i++) {\n            int left = i + 1;\n            int right = l.size() - 1;\n\n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1, 3, -2, 1))); // true\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(2, 4, -5, 3, 9, 7))); // true\n        System.out.println(solution.triples_sum_to_zero(Arrays.asList(1))); // false\n    }\n}"}
{"task_id": "Java/41", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int car_race_collision(int n) {\n        // Total number of collisions\n        int collisions = 0;\n        \n        // Calculate the number of collisions\n        collisions = n * (n - 1) / 2;\n        \n        return collisions;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.car_race_collision(3)); // Output: 3\n        System.out.println(solution.car_race_collision(5)); // Output: 10\n        System.out.println(solution.car_race_collision(0)); // Output: 0\n        System.out.println(solution.car_race_collision(1)); // Output: 0\n    }\n}"}
{"task_id": "Java/42", "generation": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incr_list(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incr_list(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incr_list(List<Integer> l) {\n        return l.stream().map(num -> num + 1).collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> test1 = Arrays.asList(1, 2, 3);\n        List<Integer> test2 = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n\n        System.out.println(solution.incr_list(test1)); // [2, 3, 4]\n        System.out.println(solution.incr_list(test2)); // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    }\n}"}
{"task_id": "Java/43", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairs_sum_to_zero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairs_sum_to_zero(Arrays.asList(1))\n    false\n     */\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for (int num : l) {\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/44", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\n    >>> change_base(7, 2)\n    \"111\"\n     */\n    public String change_base(int x, int base) {\n        if (base < 2 || base > 9) {\n            return \"Invalid base\";\n        }\n        \n        StringBuilder result = new StringBuilder();\n        \n        while (x > 0) {\n            int remainder = x % base;\n            result.insert(0, remainder);\n            x = x / base;\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.change_base(8, 3)); // \"22\"\n        System.out.println(solution.change_base(8, 2)); // \"1000\"\n        System.out.println(solution.change_base(7, 2)); // \"111\"\n    }\n}"}
{"task_id": "Java/45", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n     */\n    public double triangle_area(double a, double h) {\n        return 0.5 * a * h;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"Enter the length of the side of the triangle:\");\n        double side = scanner.nextDouble();\n\n        System.out.println(\"Enter the height of the triangle:\");\n        double height = scanner.nextDouble();\n\n        double area = sol.triangle_area(side, height);\n        System.out.println(\"The area of the triangle is: \" + area);\n\n        scanner.close();\n    }\n}"}
{"task_id": "Java/46", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0 || n == 1) {\n            return 0;\n        }\n        \n        if (n == 2) {\n            return 2;\n        }\n        \n        if (n == 3) {\n            return 0;\n        }\n        \n        int[] fib4 = new int[n+1];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3] = 0;\n        \n        for (int i = 4; i <= n; i++) {\n            fib4[i] = fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4];\n        }\n        \n        return fib4[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fib4(5)); // Output: 4\n        System.out.println(solution.fib4(6)); // Output: 8\n        System.out.println(solution.fib4(7)); // Output: 14\n    }\n}"}
{"task_id": "Java/47", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    8.0\n     */\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            int mid1 = l.get(size / 2 - 1);\n            int mid2 = l.get(size / 2);\n            return (double) (mid1 + mid2) / 2;\n        } else {\n            return (double) l.get(size / 2);\n        }\n    }\n}"}
{"task_id": "Java/48", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"zbcd\")\n    false\n     */\n    public boolean is_palindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return true;\n        }\n        \n        int left = 0;\n        int right = text.length() - 1;\n        \n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.is_palindrome(\"\")); // true\n        System.out.println(solution.is_palindrome(\"aba\")); // true\n        System.out.println(solution.is_palindrome(\"aaaaa\")); // true\n        System.out.println(solution.is_palindrome(\"zbcd\")); // false\n    }\n}"}
{"task_id": "Java/49", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        if (p == 1) {\n            return 0;\n        }\n        \n        int result = 1;\n        n = n % p;\n        \n        while (p > 0) {\n            if (p % 2 == 1) {\n                result = (result * n) % p;\n            }\n            p = p >> 1;\n            n = (n * n) % p;\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/50", "generation": "public String decode_shift(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (char ch : s.toCharArray()) {\n        sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26)));\n    }\n    return sb.toString();\n}\n"}
{"task_id": "Java/51", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels(\"\")\n    \"\"\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> remove_vowels(\"abcdef\")\n    \"bcdf\"\n    >>> remove_vowels(\"aaaaa\")\n    \"\"\n    >>> remove_vowels(\"aaBAA\")\n    \"B\"\n    >>> remove_vowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String remove_vowels(String text) {\n        StringBuilder result = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (!isVowel(c)) {\n                result.append(c);\n            }\n        }\n        return result.toString();\n    }\n\n    private boolean isVowel(char c) {\n        return \"aeiouAEIOU\".indexOf(c) != -1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.remove_vowels(\"abcdef\\nghijklm\")); // \"bcdf\\nghjklm\"\n        System.out.println(solution.remove_vowels(\"abcdef\")); // \"bcdf\"\n        System.out.println(solution.remove_vowels(\"aaaaa\")); // \"\"\n        System.out.println(solution.remove_vowels(\"aaBAA\")); // \"B\"\n        System.out.println(solution.remove_vowels(\"zbcd\")); // \"zbcd\"\n    }\n}"}
{"task_id": "Java/52", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> below_threshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean below_threshold(List<Integer> l, int t) {\n        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> l1 = Arrays.asList(1, 2, 4, 10);\n        int t1 = 100;\n        System.out.println(solution.below_threshold(l1, t1)); // true\n        \n        List<Integer> l2 = Arrays.asList(1, 20, 4, 10);\n        int t2 = 5;\n        System.out.println(solution.below_threshold(l2, t2)); // false\n    }\n}"}
{"task_id": "Java/53", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n\n    /**\n    Subtract number y from x\n    >>> subtract(5, 2)\n    3\n    >>> subtract(10, 7)\n    3\n     */\n    public int subtract(int x, int y) {\n        return x - y;\n    }\n\n    /**\n    Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 4)\n    20\n     */\n    public int multiply(int x, int y) {\n        return x * y;\n    }\n\n    /**\n    Divide number x by y\n    >>> divide(10, 2)\n    5\n    >>> divide(15, 3)\n    5\n     */\n    public int divide(int x, int y) {\n        return x / y;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.add(2, 3));\n        System.out.println(solution.subtract(5, 2));\n        System.out.println(solution.multiply(2, 3));\n        System.out.println(solution.divide(10, 2));\n    }\n}"}
{"task_id": "Java/54", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same kind of characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean same_chars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        \n        Map<Character, Integer> map0 = new HashMap<>();\n        Map<Character, Integer> map1 = new HashMap<>();\n        \n        for (char c : s0.toCharArray()) {\n            map0.put(c, map0.getOrDefault(c, 0) + 1);\n        }\n        \n        for (char c : s1.toCharArray()) {\n            map1.put(c, map1.getOrDefault(c, 0) + 1);\n        }\n        \n        return map0.equals(map1);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // true\n        System.out.println(solution.same_chars(\"abcd\", \"dddddddabc\")); // true\n        System.out.println(solution.same_chars(\"dddddddabc\", \"abcd\")); // true\n        System.out.println(solution.same_chars(\"eabcd\", \"dddddddabc\")); // false\n        System.out.println(solution.same_chars(\"abcd\", \"dddddddabce\")); // false\n        System.out.println(solution.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // false\n    }\n}"}
{"task_id": "Java/55", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        \n        int a = 0;\n        int b = 1;\n        int c = 0;\n        \n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        \n        return c;\n    }\n}"}
{"task_id": "Java/56", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n     */\n    public boolean correct_bracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        \n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '<') {\n                stack.push(bracket);\n            } else if (bracket == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}"}
{"task_id": "Java/57", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        boolean increasing = true;\n        boolean decreasing = true;\n        \n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i-1)) {\n                increasing = false;\n            }\n            if (l.get(i) > l.get(i-1)) {\n                decreasing = false;\n            }\n        }\n        \n        return increasing || decreasing;\n    }\n}"}
{"task_id": "Java/58", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        \n        set1.retainAll(set2);\n        \n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/59", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n     */\n    public int largest_prime_factor(int n) {\n        int largestPrime = 0;\n        \n        // Find all prime factors of n\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                // Check if i is a prime number\n                boolean isPrime = true;\n                for (int j = 2; j < i; j++) {\n                    if (i % j == 0) {\n                        isPrime = false;\n                        break;\n                    }\n                }\n                if (isPrime) {\n                    largestPrime = i;\n                }\n            }\n        }\n        \n        return largestPrime;\n    }\n}"}
{"task_id": "Java/60", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n     */\n    public int sum_to_n(int n) {\n        return n * (n + 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sum_to_n(30)); // 465\n        System.out.println(solution.sum_to_n(100)); // 5050\n        System.out.println(solution.sum_to_n(5)); // 15\n        System.out.println(solution.sum_to_n(10)); // 55\n        System.out.println(solution.sum_to_n(1)); // 1\n    }\n}"}
{"task_id": "Java/61", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n     */\n    public boolean correct_bracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        \n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '(') {\n                stack.push(bracket);\n            } else if (bracket == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.correct_bracketing(\"(\")); // false\n        System.out.println(solution.correct_bracketing(\"()\")); // true\n        System.out.println(solution.correct_bracketing(\"(()())\")); // true\n        System.out.println(solution.correct_bracketing(\")(()\")); // false\n    }\n}"}
{"task_id": "Java/62", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> derivative = new ArrayList<>();\n        \n        for (int i = 1; i < xs.size(); i++) {\n            derivative.add(xs.get(i) * i);\n        }\n        \n        return derivative;\n    }\n}"}
{"task_id": "Java/63", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0 || n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        }\n        \n        int[] fibfib = new int[n+1];\n        fibfib[0] = 0;\n        fibfib[1] = 0;\n        fibfib[2] = 1;\n        \n        for (int i = 3; i <= n; i++) {\n            fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n        }\n        \n        return fibfib[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fibfib(1)); // 0\n        System.out.println(solution.fibfib(5)); // 4\n        System.out.println(solution.fibfib(8)); // 24\n    }\n}"}
{"task_id": "Java/64", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n     */\n    public int vowels_count(String s) {\n        // Convert the input string to lowercase for easier comparison\n        s = s.toLowerCase();\n        \n        // Initialize a variable to keep track of the number of vowels\n        int count = 0;\n        \n        // Loop through each character in the string\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            \n            // Check if the character is a vowel\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n            \n            // Check if 'y' is a vowel at the end of the word\n            if (i == s.length() - 1 && c == 'y') {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.vowels_count(\"abcde\")); // Output: 2\n        System.out.println(solution.vowels_count(\"ACEDY\")); // Output: 3\n    }\n}"}
{"task_id": "Java/65", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n     */\n    public String circular_shift(int x, int shift) {\n        // Convert integer to string\n        String numStr = String.valueOf(x);\n        \n        // Get the length of the string\n        int len = numStr.length();\n        \n        // If shift is greater than the length of the string, reverse the string\n        if (shift > len) {\n            return new StringBuilder(numStr).reverse().toString();\n        }\n        \n        // Circular shift the string by shifting the digits right\n        String shiftedStr = numStr.substring(len - shift) + numStr.substring(0, len - shift);\n        \n        return shiftedStr;\n    }\n}"}
{"task_id": "Java/66", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        \n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.digitSum(\"\")); // 0\n        System.out.println(solution.digitSum(\"abAB\")); // 131\n        System.out.println(solution.digitSum(\"abcCd\")); // 67\n        System.out.println(solution.digitSum(\"helloE\")); // 69\n        System.out.println(solution.digitSum(\"woArBld\")); // 131\n        System.out.println(solution.digitSum(\"aAaaaXa\")); // 153\n    }\n}"}
{"task_id": "Java/67", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruit_distribution(String s, int n) {\n        // Split the string to get the number of apples and oranges\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[parts.length - 2]);\n        \n        // Calculate the number of mango fruits\n        int mango = n - apples - oranges;\n        \n        return mango;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.fruit_distribution(\"5 apples and 6 oranges\", 19)); // Output: 8\n        System.out.println(solution.fruit_distribution(\"0 apples and 1 oranges\", 3)); // Output: 2\n        System.out.println(solution.fruit_distribution(\"2 apples and 3 oranges\", 100)); // Output: 95\n        System.out.println(solution.fruit_distribution(\"100 apples and 1 oranges\", 120)); // Output: 19\n    }\n}"}
{"task_id": "Java/68", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        \n        int smallestEven = Integer.MAX_VALUE;\n        int smallestIndex = Integer.MAX_VALUE;\n        \n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num % 2 == 0 && num < smallestEven) {\n                smallestEven = num;\n                smallestIndex = i;\n            }\n        }\n        \n        if (smallestEven != Integer.MAX_VALUE) {\n            result.add(smallestEven);\n            result.add(smallestIndex);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> arr1 = new ArrayList<>(Arrays.asList(4, 2, 3));\n        List<Integer> arr2 = new ArrayList<>(Arrays.asList(1, 2, 3));\n        List<Integer> arr3 = new ArrayList<>();\n        List<Integer> arr4 = new ArrayList<>(Arrays.asList(5, 0, 3, 0, 4, 2));\n\n        System.out.println(solution.pluck(arr1)); // Output: [2, 1]\n        System.out.println(solution.pluck(arr2)); // Output: [2, 1]\n        System.out.println(solution.pluck(arr3)); // Output: []\n        System.out.println(solution.pluck(arr4)); // Output: [0, 1]\n    }\n}"}
{"task_id": "Java/69", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        // Count the frequency of each integer in the list\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        // Iterate through the frequency map to find the greatest integer that meets the condition\n        int result = -1;\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int num = entry.getKey();\n            int frequency = entry.getValue();\n            if (num > 0 && frequency >= num) {\n                result = Math.max(result, num);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.search(Arrays.asList(4, 1, 2, 2, 3, 1))); // Output: 2\n        System.out.println(solution.search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4))); // Output: 3\n        System.out.println(solution.search(Arrays.asList(5, 5, 4, 4, 4))); // Output: -1\n    }\n}"}
{"task_id": "Java/70", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strange_sort_list(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strange_sort_list(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        // Sort the list in ascending order\n        Collections.sort(lst);\n\n        // Initialize two pointers, one at the beginning and one at the end of the list\n        int left = 0;\n        int right = lst.size() - 1;\n\n        // Initialize a new list to store the strange sorted order\n        List<Integer> result = new ArrayList<>();\n\n        // Iterate through the list and add elements in strange order\n        while (left <= right) {\n            // Add the minimum value\n            result.add(lst.get(left));\n            left++;\n\n            // Add the maximum value\n            result.add(lst.get(right));\n            right--;\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.strange_sort_list(Arrays.asList(1, 2, 3, 4))); // [1, 4, 2, 3]\n        System.out.println(solution.strange_sort_list(Arrays.asList(5, 5, 5, 5))); // [5, 5, 5, 5]\n        System.out.println(solution.strange_sort_list(Arrays.asList())); // []\n    }\n}"}
{"task_id": "Java/71", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n     */\n    public double triangle_area(double a, double b, double c) {\n        // Check if the sides form a valid triangle\n        if (a + b > c && a + c > b && b + c > a) {\n            // Calculate the semi-perimeter\n            double s = (a + b + c) / 2;\n            // Calculate the area using Heron's formula\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            // Round the area to 2 decimal points\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            return -1;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test cases\n        System.out.println(solution.triangle_area(3, 4, 5)); // Output: 6.0\n        System.out.println(solution.triangle_area(1, 2, 10)); // Output: -1\n    }\n}"}
{"task_id": "Java/72", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean will_it_fly(List<Integer> q, int w) {\n        // Check if the list is balanced (palindromic)\n        boolean isBalanced = isBalancedList(q);\n        \n        // Calculate the sum of elements in the list\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n        \n        // Check if the sum is less than or equal to the maximum weight\n        return isBalanced && sum <= w;\n    }\n    \n    // Helper function to check if a list is palindromic\n    private boolean isBalancedList(List<Integer> list) {\n        int left = 0;\n        int right = list.size() - 1;\n        \n        while (left < right) {\n            if (!list.get(left).equals(list.get(right))) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.will_it_fly(Arrays.asList(1, 2), 5)); // false\n        System.out.println(solution.will_it_fly(Arrays.asList(3, 2, 3), 1)); // false\n        System.out.println(solution.will_it_fly(Arrays.asList(3, 2, 3), 9)); // true\n        System.out.println(solution.will_it_fly(Arrays.asList(3), 5)); // true\n    }\n}"}
{"task_id": "Java/73", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallest_change(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallest_change(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallest_change(List<Integer> arr) {\n        int n = arr.size();\n        int[][] dp = new int[n][n];\n\n        for (int len = 2; len <= n; len++) {\n            for (int i = 0; i < n - len + 1; i++) {\n                int j = i + len - 1;\n                if (arr.get(i) == arr.get(j)) {\n                    dp[i][j] = dp[i + 1][j - 1];\n                } else {\n                    dp[i][j] = 1 + Math.min(dp[i + 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n\n        return dp[0][n - 1];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> arr1 = Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6);\n        List<Integer> arr2 = Arrays.asList(1, 2, 3, 4, 3, 2, 2);\n        List<Integer> arr3 = Arrays.asList(1, 2, 3, 2, 1);\n\n        System.out.println(solution.smallest_change(arr1)); // Output should be 4\n        System.out.println(solution.smallest_change(arr2)); // Output should be 1\n        System.out.println(solution.smallest_change(arr3)); // Output should be 0\n    }\n}"}
{"task_id": "Java/74", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match(Arrays.asList(), Arrays.asList()) -> []\n    total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    total_match(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        int totalChars1 = 0;\n        int totalChars2 = 0;\n\n        for (String str : lst1) {\n            totalChars1 += str.length();\n        }\n\n        for (String str : lst2) {\n            totalChars2 += str.length();\n        }\n\n        if (totalChars1 < totalChars2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.total_match(Arrays.asList(), Arrays.asList())); // []\n        System.out.println(solution.total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\"))); // [\"hI\", \"Hi\"]\n        System.out.println(solution.total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\"))); // [\"hi\", \"admin\"]\n        System.out.println(solution.total_match(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\"))); // [\"hI\", \"hi\", \"hi\"]\n        System.out.println(solution.total_match(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"))); // [\"4\"]\n    }\n}"}
{"task_id": "Java/75", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that the prime number is less then 100.\n    Example:\n    is_multiply_prime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean is_multiply_prime(int a) {\n        // Get all prime numbers less than 100\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < 100; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n\n        // Check if the given number is the multiplication of 3 prime numbers\n        for (int i = 0; i < primes.size(); i++) {\n            for (int j = i + 1; j < primes.size(); j++) {\n                for (int k = j + 1; k < primes.size(); k++) {\n                    if (primes.get(i) * primes.get(j) * primes.get(k) == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    // Helper function to check if a number is prime\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.is_multiply_prime(30)); // true\n        System.out.println(solution.is_multiply_prime(20)); // false\n    }\n}"}
{"task_id": "Java/76", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n     */\n    public boolean is_simple_power(int x, int n) {\n        if (x == 1) {\n            return true;\n        }\n        \n        int power = 1;\n        while (Math.pow(n, power) <= x) {\n            if (Math.pow(n, power) == x) {\n                return true;\n            }\n            power++;\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.is_simple_power(1, 4)); // true\n        System.out.println(solution.is_simple_power(2, 2)); // true\n        System.out.println(solution.is_simple_power(8, 2)); // true\n        System.out.println(solution.is_simple_power(3, 2)); // false\n        System.out.println(solution.is_simple_power(3, 1)); // false\n        System.out.println(solution.is_simple_power(5, 3)); // false\n    }\n}"}
{"task_id": "Java/77", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        // Check if the input number is a cube of some integer number\n        int cubeRoot = (int) Math.cbrt(a);\n        return cubeRoot * cubeRoot * cubeRoot == a;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.iscube(1)); // true\n        System.out.println(solution.iscube(2)); // false\n        System.out.println(solution.iscube(-1)); // true\n        System.out.println(solution.iscube(64)); // true\n        System.out.println(solution.iscube(0)); // true\n        System.out.println(solution.iscube(180)); // false\n    }\n}"}
{"task_id": "Java/78", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hex_key(String num) {\n        int count = 0;\n        Set<Character> primes = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n\n        for (char c : num.toCharArray()) {\n            if (primes.contains(c)) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.hex_key(\"AB\")); // 1\n        System.out.println(solution.hex_key(\"1077E\")); // 2\n        System.out.println(solution.hex_key(\"ABED1A33\")); // 4\n        System.out.println(solution.hex_key(\"123456789ABCDEF0\")); // 6\n        System.out.println(solution.hex_key(\"2020\")); // 2\n    }\n}"}
{"task_id": "Java/79", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   // returns \"db1111db\"\n    decimal_to_binary(32)   // returns \"db100000db\"\n     */\n    public String decimal_to_binary(int decimal) {\n        String binary = Integer.toBinaryString(decimal);\n        return \"db\" + binary + \"db\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.decimal_to_binary(15));   // should return \"db1111db\"\n        System.out.println(solution.decimal_to_binary(32));   // should return \"db100000db\"\n    }\n}"}
{"task_id": "Java/80", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => false\n    is_happy(aa) => false\n    is_happy(abcd) => true\n    is_happy(aabb) => false\n    is_happy(adb) => true\n    is_happy(xyy) => false\n     */\n    public boolean is_happy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n        \n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.is_happy(\"a\")); // false\n        System.out.println(solution.is_happy(\"aa\")); // false\n        System.out.println(solution.is_happy(\"abcd\")); // true\n        System.out.println(solution.is_happy(\"aabb\")); // false\n        System.out.println(solution.is_happy(\"adb\")); // true\n        System.out.println(solution.is_happy(\"xyy\")); // false\n    }\n}"}
{"task_id": "Java/81", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numerical_letter_grade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        \n        for (Double grade : grades) {\n            if (grade == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        \n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Double> grades = Arrays.asList(4.0, 3.0, 1.7, 2.0, 3.5);\n        List<String> letterGrades = solution.numerical_letter_grade(grades);\n        \n        System.out.println(letterGrades);\n    }\n}"}
{"task_id": "Java/82", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    prime_length(\"Hello\") == true\n    prime_length(\"abcdcba\") == true\n    prime_length(\"kittens\") == true\n    prime_length(\"orange\") == false\n     */\n    public boolean prime_length(String string) {\n        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/83", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int starts_one_ends(int n) {\n        // Count of numbers that start with 1\n        int startWithOne = (int) Math.pow(10, n-1);\n        \n        // Count of numbers that end with 1\n        int endWithOne = 1;\n        \n        return startWithOne + endWithOne;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.starts_one_ends(1)); // Output: 2\n        System.out.println(solution.starts_one_ends(2)); // Output: 20\n        System.out.println(solution.starts_one_ends(3)); // Output: 200\n    }\n}"}
{"task_id": "Java/84", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return in binary the total sum of its digits.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        // Convert the integer N to a binary string\n        String binaryString = Integer.toBinaryString(N);\n        \n        // Initialize a variable to store the sum of digits\n        int sum = 0;\n        \n        // Iterate through each character in the binary string\n        for (int i = 0; i < binaryString.length(); i++) {\n            // Convert the character to an integer and add it to the sum\n            sum += Character.getNumericValue(binaryString.charAt(i));\n        }\n        \n        // Convert the sum to a binary string and return it\n        return Integer.toBinaryString(sum);\n    }\n}"}
{"task_id": "Java/85", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test 1\n        List<Integer> lst1 = Arrays.asList(4, 2, 6, 7);\n        System.out.println(solution.add(lst1)); // Output: 2\n\n        // Test 2\n        List<Integer> lst2 = Arrays.asList(1, 3, 5, 7);\n        System.out.println(solution.add(lst2)); // Output: 0\n\n        // Test 3\n        List<Integer> lst3 = Arrays.asList(2, 4, 6, 8);\n        System.out.println(solution.add(lst3)); // Output: 4\n    }\n}"}
{"task_id": "Java/86", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle(\"Hi\") returns \"Hi\"\n    anti_shuffle(\"hello\") returns \"ehllo\"\n    anti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String anti_shuffle(String s) {\n        // Split the input string by space to get individual words\n        String[] words = s.split(\" \");\n        \n        // Initialize a StringBuilder to store the result\n        StringBuilder result = new StringBuilder();\n        \n        // Iterate through each word in the array\n        for (String word : words) {\n            // Convert the word to a character array for sorting\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars); // Sort the characters in ascending order based on ascii value\n            result.append(chars); // Append the sorted characters to the result\n            result.append(\" \"); // Append a space after each word\n        }\n        \n        // Trim any extra spaces at the end of the result and return it\n        return result.toString().trim();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.anti_shuffle(\"Hi\")); // \"Hi\"\n        System.out.println(solution.anti_shuffle(\"hello\")); // \"ehllo\"\n        System.out.println(solution.anti_shuffle(\"Hello World!!!\")); // \"Hello !!!Wdlor\"\n    }\n}"}
{"task_id": "Java/87", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    List<Integer> coordinate = new ArrayList<>();\n                    coordinate.add(i);\n                    coordinate.add(j);\n                    result.add(coordinate);\n                }\n            }\n        }\n        \n        // Sort coordinates by rows in ascending order\n        Collections.sort(result, (a, b) -> a.get(0) - b.get(0));\n        \n        // Sort coordinates of the row by columns in descending order\n        for (List<Integer> coordinate : result) {\n            Collections.sort(coordinate, Collections.reverseOrder());\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<List<Integer>> lst1 = new ArrayList<>();\n        lst1.add(Arrays.asList(1, 2, 3, 4, 5, 6));\n        lst1.add(Arrays.asList(1, 2, 3, 4, 1, 6));\n        lst1.add(Arrays.asList(1, 2, 3, 4, 5, 1));\n        System.out.println(solution.get_row(lst1, 1)); // [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n\n        List<List<Integer>> lst2 = new ArrayList<>();\n        System.out.println(solution.get_row(lst2, 1)); // []\n\n        List<List<Integer>> lst3 = new ArrayList<>();\n        lst3.add(new ArrayList<>());\n        lst3.add(Arrays.asList(1));\n        lst3.add(Arrays.asList(1, 2, 3));\n        System.out.println(solution.get_row(lst3, 3)); // [[2, 2]]\n    }\n}"}
{"task_id": "Java/88", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array(Arrays.asList()) => []\n    * sort_array(Arrays.asList(5)) => [5]\n    * sort_array(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sort_array(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sort_array(List<Integer> array) {\n        List<Integer> sortedArray = new ArrayList<>(array);\n        \n        int sum = sortedArray.get(0) + sortedArray.get(sortedArray.size() - 1);\n        \n        if (sum % 2 == 0) {\n            Collections.sort(sortedArray, Collections.reverseOrder());\n        } else {\n            Collections.sort(sortedArray);\n        }\n        \n        return sortedArray;\n    }\n}"}
{"task_id": "Java/89", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        StringBuilder encrypted = new StringBuilder();\n        \n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                char encryptedChar = (char) (c + 2 * 2);\n                if (Character.isLowerCase(c)) {\n                    if (encryptedChar > 'z') {\n                        encryptedChar = (char) ('a' + (encryptedChar - 'z' - 1));\n                    }\n                } else {\n                    if (encryptedChar > 'Z') {\n                        encryptedChar = (char) ('A' + (encryptedChar - 'Z' - 1));\n                    }\n                }\n                encrypted.append(encryptedChar);\n            } else {\n                encrypted.append(c);\n            }\n        }\n        \n        return encrypted.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.encrypt(\"hi\")); // \"lm\"\n        System.out.println(solution.encrypt(\"asdfghjkl\")); // \"ewhjklnop\"\n        System.out.println(solution.encrypt(\"gf\")); // \"kj\"\n        System.out.println(solution.encrypt(\"et\")); // \"ix\"\n    }\n}"}
{"task_id": "Java/90", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    next_smallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    next_smallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    next_smallest(Arrays.asList()) == Optional.empty\n    next_smallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n        \n        TreeSet<Integer> set = new TreeSet<>(lst);\n        \n        if (set.size() < 2) {\n            return Optional.empty();\n        }\n        \n        Iterator<Integer> iterator = set.iterator();\n        iterator.next(); // skip the smallest element\n        return Optional.of(iterator.next());\n    }\n}"}
{"task_id": "Java/91", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int is_bored(String S) {\n        String[] sentences = S.split(\"[.!?]\");\n        int boredomCount = 0;\n        \n        for (String sentence : sentences) {\n            String[] words = sentence.trim().split(\" \");\n            if (words.length > 0 && words[0].equals(\"I\")) {\n                boredomCount++;\n            }\n        }\n        \n        return boredomCount;\n    }\n}"}
{"task_id": "Java/92", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) -> true\n\n    any_int(3, 2, 2) -> false\n\n    any_int(3, -2, 1) -> true\n\n    any_int(3.6, -2.2, 2) -> false\n     */\n    public boolean any_int(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int a = (int) x;\n            int b = (int) y;\n            int c = (int) z;\n            \n            return (a == b + c) || (b == a + c) || (c == a + b);\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.any_int(5, 2, 7)); // true\n        System.out.println(solution.any_int(3, 2, 2)); // false\n        System.out.println(solution.any_int(3, -2, 1)); // true\n        System.out.println(solution.any_int(3.6, -2.2, 2)); // false\n    }\n}"}
{"task_id": "Java/93", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        StringBuilder encodedMessage = new StringBuilder();\n        \n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c)) {\n                    encodedMessage.append(Character.toLowerCase(c));\n                } else {\n                    encodedMessage.append(Character.toUpperCase(c));\n                }\n                \n                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n                    c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                    char replacement = (char) (c + 2);\n                    if (replacement > 'z') {\n                        replacement = (char) (replacement - 26);\n                    }\n                    encodedMessage.append(replacement);\n                }\n            } else {\n                encodedMessage.append(c);\n            }\n        }\n        \n        return encodedMessage.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.encode(\"test\")); // \"TGST\"\n        System.out.println(solution.encode(\"This is a message\")); // \"tHKS KS C MGSSCGG\"\n    }\n}"}
{"task_id": "Java/94", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int maxPrime = 0;\n        for (int num : lst) {\n            if (isPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n        \n        int sum = 0;\n        while (maxPrime > 0) {\n            sum += maxPrime % 10;\n            maxPrime /= 10;\n        }\n        \n        return sum;\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/95", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings and all keys are in lower case or  in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        \n        boolean allKeysAreStrings = true;\n        boolean allKeysAreLowerCase = true;\n        boolean allKeysAreUpperCase = true;\n        \n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                allKeysAreStrings = false;\n                break;\n            }\n            \n            String keyStr = (String) key;\n            if (!keyStr.equals(keyStr.toLowerCase())) {\n                allKeysAreLowerCase = false;\n            }\n            if (!keyStr.equals(keyStr.toUpperCase())) {\n                allKeysAreUpperCase = false;\n            }\n        }\n        \n        return allKeysAreStrings && (allKeysAreLowerCase || allKeysAreUpperCase);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        Map<Object, Object> dict1 = new HashMap<>();\n        dict1.put(\"a\", \"apple\");\n        dict1.put(\"b\", \"banana\");\n        System.out.println(solution.check_dict_case(dict1)); // should return true\n        \n        Map<Object, Object> dict2 = new HashMap<>();\n        dict2.put(\"a\", \"apple\");\n        dict2.put(\"A\", \"banana\");\n        dict2.put(\"B\", \"banana\");\n        System.out.println(solution.check_dict_case(dict2)); // should return false\n        \n        Map<Object, Object> dict3 = new HashMap<>();\n        dict3.put(\"a\", \"apple\");\n        dict3.put(8, \"banana\");\n        dict3.put(\"a\", \"apple\");\n        System.out.println(solution.check_dict_case(dict3)); // should return false\n        \n        Map<Object, Object> dict4 = new HashMap<>();\n        dict4.put(\"Name\", \"John\");\n        dict4.put(\"Age\", \"36\");\n        dict4.put(\"City\", \"Houston\");\n        System.out.println(solution.check_dict_case(dict4)); // should return false\n        \n        Map<Object, Object> dict5 = new HashMap<>();\n        dict5.put(\"STATE\", \"NC\");\n        dict5.put(\"ZIP\", \"12345\");\n        System.out.println(solution.check_dict_case(dict5)); // should return true\n    }\n}"}
{"task_id": "Java/96", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<>();\n        \n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        \n        return primes;\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/97", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int unitA = Math.abs(a % 10);\n        int unitB = Math.abs(b % 10);\n        \n        return unitA * unitB;\n    }\n}"}
{"task_id": "Java/98", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper(\"aBCdEf\") returns 1\n    count_upper(\"abcdefg\") returns 0\n    count_upper(\"dBBE\") returns 0\n     */    \n    public int count_upper(String s) {\n        int count = 0;\n        \n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c) && (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}"}
{"task_id": "Java/99", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int closest_integer(String value) {\n        double num = Double.parseDouble(value);\n        int floor = (int) Math.floor(num);\n        int ceil = (int) Math.ceil(num);\n\n        if (Math.abs(num - floor) < Math.abs(num - ceil)) {\n            return floor;\n        } else if (Math.abs(num - floor) > Math.abs(num - ceil)) {\n            return ceil;\n        } else {\n            if (num > 0) {\n                return ceil;\n            } else {\n                return floor;\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.closest_integer(\"10\")); // Output: 10\n        System.out.println(solution.closest_integer(\"15.3\")); // Output: 15\n        System.out.println(solution.closest_integer(\"14.5\")); // Output: 15\n        System.out.println(solution.closest_integer(\"-14.5\")); // Output: -15\n    }\n}"}
{"task_id": "Java/100", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> result = new ArrayList<>();\n        result.add(n);\n        for (int i = 1; i < n; i++) {\n            if (n % 2 == 0) {\n                n += 2;\n            } else {\n                n += 1;\n            }\n            result.add(n);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.make_a_pile(3)); // [3, 5, 7]\n    }\n}"}
{"task_id": "Java/101", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> words_string(String s) {\n        List<String> words = new ArrayList<>();\n        \n        String[] splitWords = s.split(\"[,\\\\s]+\");\n        \n        for (String word : splitWords) {\n            words.add(word);\n        }\n        \n        return words;\n    }\n}"}
{"task_id": "Java/102", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n     */\n    public int choose_num(int x, int y) {\n        // Initialize a variable to store the result\n        int result = -1;\n        \n        // Iterate from y to x\n        for (int i = y; i >= x; i--) {\n            // Check if the number is even\n            if (i % 2 == 0) {\n                result = i;\n                break;\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/103", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"1111\"\n    rounded_avg(20, 33) => \"11011\"\n     */\n    public Object rounded_avg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        \n        int sum = 0;\n        int count = 0;\n        \n        for (int i = n; i <= m; i++) {\n            sum += i;\n            count++;\n        }\n        \n        int avg = Math.round((float) sum / count);\n        \n        return Integer.toBinaryString(avg);\n    }\n}"}
{"task_id": "Java/104", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> unique_digits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> unique_digits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int num : x) {\n            if (hasNoEvenDigit(num)) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        \n        return result;\n    }\n    \n    private boolean hasNoEvenDigit(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return false;\n            }\n            num /= 10;\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/105", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> by_length(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        \n        // Filter out numbers that are not between 1 and 9\n        List<Integer> filteredArr = new ArrayList<>();\n        for (int num : arr) {\n            if (num >= 1 && num <= 9) {\n                filteredArr.add(num);\n            }\n        }\n        \n        // Sort the filtered array\n        Collections.sort(filteredArr);\n        \n        // Reverse the sorted array\n        Collections.reverse(filteredArr);\n        \n        // Replace each digit with its corresponding name\n        for (int num : filteredArr) {\n            switch(num) {\n                case 1:\n                    result.add(\"One\");\n                    break;\n                case 2:\n                    result.add(\"Two\");\n                    break;\n                case 3:\n                    result.add(\"Three\");\n                    break;\n                case 4:\n                    result.add(\"Four\");\n                    break;\n                case 5:\n                    result.add(\"Five\");\n                    break;\n                case 6:\n                    result.add(\"Six\");\n                    break;\n                case 7:\n                    result.add(\"Seven\");\n                    break;\n                case 8:\n                    result.add(\"Eight\");\n                    break;\n                case 9:\n                    result.add(\"Nine\");\n                    break;\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> arr1 = Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3);\n        System.out.println(solution.by_length(arr1)); // [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n        \n        List<Integer> arr2 = Arrays.asList(1, -1, 55);\n        System.out.println(solution.by_length(arr2)); // [\"One\"]\n        \n        List<Integer> arr3 = new ArrayList<>();\n        System.out.println(solution.by_length(arr3)); // []\n    }\n}"}
{"task_id": "Java/106", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sumOfNumbers(i));\n            }\n        }\n        \n        return result;\n    }\n    \n    private int factorial(int n) {\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n    \n    private int sumOfNumbers(int n) {\n        return n * (n + 1) / 2;\n    }\n}"}
{"task_id": "Java/107", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> even_odd_palindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        result.add(evenCount);\n        result.add(oddCount);\n\n        return result;\n    }\n\n    private boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0;\n        int right = str.length() - 1;\n\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.even_odd_palindrome(3)); // Output: (1, 2)\n        System.out.println(solution.even_odd_palindrome(12)); // Output: (4, 6)\n    }\n}"}
{"task_id": "Java/108", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums(Arrays.asList()) == 0\n    >>> count_nums(Arrays.asList(-1, 11, -11)) == 1\n    >>> count_nums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int count_nums(List<Integer> arr) {\n        int count = 0;\n        for (int num : arr) {\n            int sum = 0;\n            int temp = Math.abs(num);\n            while (temp != 0) {\n                sum += temp % 10;\n                temp /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.count_nums(Arrays.asList())); // 0\n        System.out.println(solution.count_nums(Arrays.asList(-1, 11, -11))); // 1\n        System.out.println(solution.count_nums(Arrays.asList(1, 1, 2))); // 3\n    }\n}"}
{"task_id": "Java/109", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    move_one_ball(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean move_one_ball(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        List<Integer> sortedArr = new ArrayList<>(arr);\n        Collections.sort(sortedArr);\n\n        int n = arr.size();\n        for (int i = 0; i < n; i++) {\n            if (arr.equals(sortedArr)) {\n                return true;\n            }\n            int last = arr.get(n - 1);\n            arr.remove(n - 1);\n            arr.add(0, last);\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.move_one_ball(Arrays.asList(3, 4, 5, 1, 2))); // true\n        System.out.println(solution.move_one_ball(Arrays.asList(3, 5, 4, 1, 2))); // false\n    }\n}"}
{"task_id": "Java/110", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Count the number of odd numbers in lst1\n        int oddCount = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCount++;\n            }\n        }\n        \n        // If there are no odd numbers in lst1, return \"YES\"\n        if (oddCount == 0) {\n            return \"YES\";\n        }\n        \n        // If there are odd numbers in lst1, check if there are enough even numbers in lst2 to exchange\n        int evenCount = 0;\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCount++;\n            }\n        }\n        \n        // If there are enough even numbers in lst2 to exchange with odd numbers in lst1, return \"YES\"\n        if (evenCount >= oddCount) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}"}
{"task_id": "Java/111", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String,Integer> histogram(String test) {\n        Map<String, Integer> map = new HashMap<>();\n        \n        if (test == null || test.length() == 0) {\n            return map;\n        }\n        \n        String[] letters = test.split(\" \");\n        \n        for (String letter : letters) {\n            map.put(letter, map.getOrDefault(letter, 0) + 1);\n        }\n        \n        int maxCount = Collections.max(map.values());\n        \n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/112", "generation": "public class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.reverse_delete(\"abcde\", \"ae\")); // (\"bcd\", false)\n        System.out.println(solution.reverse_delete(\"abcdef\", \"b\")); // (\"acdef\", false)\n        System.out.println(solution.reverse_delete(\"abcdedcba\", \"ab\")); // (\"cdedc\", true)\n    }\n}\n"}
{"task_id": "Java/113", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> odd_count(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        \n        for (String str : lst) {\n            int oddCount = 0;\n            for (char c : str.toCharArray()) {\n                if (Character.isDigit(c) && (c - '0') % 2 != 0) {\n                    oddCount++;\n                }\n            }\n            String newStr = str.replace(\"i\", String.valueOf(oddCount));\n            newStr = newStr.replace(\"1\", \"1\");\n            newStr = newStr.replace(\"4\", \"4\");\n            newStr = newStr.replace(\"8\", \"8\");\n            result.add(newStr);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<String> test1 = Arrays.asList(\"1234567\");\n        List<String> test2 = Arrays.asList(\"3\", \"11111111\");\n\n        System.out.println(solution.odd_count(test1));\n        System.out.println(solution.odd_count(test2));\n    }\n}"}
{"task_id": "Java/114", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int n = nums.size();\n        int minSum = Integer.MAX_VALUE;\n        \n        for (int i = 0; i < n; i++) {\n            int sum = 0;\n            for (int j = i; j < n; j++) {\n                sum += nums.get(j);\n                minSum = Math.min(minSum, sum);\n            }\n        }\n        \n        return minSum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> nums1 = Arrays.asList(2, 3, 4, 1, 2, 4);\n        System.out.println(solution.minSubArraySum(nums1)); // Output: 1\n\n        List<Integer> nums2 = Arrays.asList(-1, -2, -3);\n        System.out.println(solution.minSubArraySum(nums2)); // Output: -6\n    }\n}"}
{"task_id": "Java/115", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity. Can't use buckets from other wells to extract water from one well.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        int count = 0;\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n\n        for (int i = 0; i < cols; i++) {\n            int sum = 0;\n            for (int j = 0; j < rows; j++) {\n                sum += grid.get(j).get(i);\n            }\n            count += (sum / capacity);\n            if (sum % capacity != 0) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<List<Integer>> grid1 = new ArrayList<>();\n        grid1.add(Arrays.asList(0, 0, 1, 0));\n        grid1.add(Arrays.asList(0, 1, 0, 0));\n        grid1.add(Arrays.asList(1, 1, 1, 1));\n        int capacity1 = 1;\n        System.out.println(solution.max_fill(grid1, capacity1)); // Output: 6\n\n        List<List<Integer>> grid2 = new ArrayList<>();\n        grid2.add(Arrays.asList(0, 0, 1, 1));\n        grid2.add(Arrays.asList(0, 0, 0, 0));\n        grid2.add(Arrays.asList(1, 1, 1, 1));\n        grid2.add(Arrays.asList(0, 1, 1, 1));\n        int capacity2 = 2;\n        System.out.println(solution.max_fill(grid2, capacity2)); // Output: 5\n\n        List<List<Integer>> grid3 = new ArrayList<>();\n        grid3.add(Arrays.asList(0, 0, 0));\n        grid3.add(Arrays.asList(0, 0, 0));\n        int capacity3 = 5;\n        System.out.println(solution.max_fill(grid3, capacity3)); // Output: 0\n    }\n}"}
{"task_id": "Java/116", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sort_array(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 4, 3, 5))\n    >>> sort_array(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-4, -2, -6, -5, -3))\n    >>> sort_array(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 4, 3))\n     */\n    public List<Integer> sort_array(List<Integer> arr) {\n        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int count1 = Integer.bitCount(Math.abs(o1));\n                int count2 = Integer.bitCount(Math.abs(o2));\n                if (count1 == count2) {\n                    return o1 - o2;\n                } else {\n                    return count1 - count2;\n                }\n            }\n        });\n        return arr;\n    }\n}"}
{"task_id": "Java/117", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> select_words(String s, int n) {\n        List<String> result = new ArrayList<>();\n        \n        if (s.isEmpty()) {\n            return result;\n        }\n        \n        String[] words = s.split(\" \");\n        \n        for (String word : words) {\n            int consonantCount = 0;\n            for (char c : word.toCharArray()) {\n                if (isConsonant(c)) {\n                    consonantCount++;\n                }\n            }\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        \n        return result;\n    }\n    \n    private boolean isConsonant(char c) {\n        return \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\".indexOf(c) != -1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.select_words(\"Mary had a little lamb\", 4)); // [\"little\"]\n        System.out.println(solution.select_words(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\n        System.out.println(solution.select_words(\"simple white space\", 2)); // []\n        System.out.println(solution.select_words(\"Hello world\", 4)); // [\"world\"]\n        System.out.println(solution.select_words(\"Uncle sam\", 3)); // [\"Uncle\"]\n    }\n}"}
{"task_id": "Java/118", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n     */\n    public String get_closest_vowel(String word) {\n        // Initialize variables to store the closest vowel and its index\n        char closestVowel = ' ';\n        int closestIndex = -1;\n\n        // Iterate through the word from right to left\n        for (int i = word.length() - 2; i > 0; i--) {\n            char currentChar = word.charAt(i);\n\n            // Check if the current character is a consonant\n            if (!isVowel(currentChar)) {\n                // Check if the character before and after the current character are vowels\n                if (isVowel(word.charAt(i - 1)) && isVowel(word.charAt(i + 1))) {\n                    closestVowel = word.charAt(i);\n                    closestIndex = i;\n                    break;\n                }\n            }\n        }\n\n        // Return the closest vowel found or an empty string if no vowel met the condition\n        return closestIndex != -1 ? String.valueOf(closestVowel) : \"\";\n    }\n\n    // Helper method to check if a character is a vowel\n    private boolean isVowel(char c) {\n        return \"AEIOUaeiou\".indexOf(c) != -1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.get_closest_vowel(\"yogurt\")); // \"u\"\n        System.out.println(solution.get_closest_vowel(\"FULL\")); // \"U\"\n        System.out.println(solution.get_closest_vowel(\"quick\")); // \"\"\n        System.out.println(solution.get_closest_vowel(\"ab\")); // \"\"\n    }\n}"}
{"task_id": "Java/119", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    match_parens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    match_parens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String match_parens(List<String> lst) {\n        String str1 = lst.get(0);\n        String str2 = lst.get(1);\n        \n        int openCount = 0;\n        int closeCount = 0;\n        \n        for(char c : str1.toCharArray()) {\n            if(c == '(') {\n                openCount++;\n            } else {\n                closeCount++;\n            }\n        }\n        \n        for(char c : str2.toCharArray()) {\n            if(c == '(') {\n                openCount++;\n            } else {\n                closeCount++;\n            }\n        }\n        \n        if(openCount == closeCount) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.match_parens(Arrays.asList(\"()(\", \")\"))); // Yes\n        System.out.println(solution.match_parens(Arrays.asList(\")\", \")\"))); // No\n    }\n}"}
{"task_id": "Java/120", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr, in ascending order.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Sort the array in descending order\n        Collections.sort(arr, Collections.reverseOrder());\n\n        // Create a new list to store the maximum k numbers\n        List<Integer> result = new ArrayList<>();\n\n        // Add the first k numbers to the result list\n        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> arr1 = new ArrayList<>(Arrays.asList(-3, -4, 5));\n        int k1 = 3;\n        System.out.println(solution.maximum(arr1, k1)); // Output: [-4, -3, 5]\n\n        List<Integer> arr2 = new ArrayList<>(Arrays.asList(4, -4, 4));\n        int k2 = 2;\n        System.out.println(solution.maximum(arr2, k2)); // Output: [4, 4]\n\n        List<Integer> arr3 = new ArrayList<>(Arrays.asList(-3, 2, 1, 2, -1, -2, 1));\n        int k3 = 1;\n        System.out.println(solution.maximum(arr3, k3)); // Output: [2]\n    }\n}"}
{"task_id": "Java/121", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/122", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int add_elements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (Math.abs(arr.get(i)) >= 10 && Math.abs(arr.get(i)) < 100) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> arr = new ArrayList<>(Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9));\n        int k = 4;\n\n        System.out.println(solution.add_elements(arr, k)); // Output: 24\n    }\n}"}
{"task_id": "Java/123", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> get_odd_collatz(int n) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            List<Integer> collatzSeq = new ArrayList<>();\n            collatzSeq.add(i);\n            \n            while (i != 1) {\n                if (i % 2 == 0) {\n                    i = i / 2;\n                } else {\n                    i = 3 * i + 1;\n                }\n                collatzSeq.add(i);\n            }\n            \n            for (int num : collatzSeq) {\n                if (num % 2 != 0) {\n                    result.add(num);\n                }\n            }\n        }\n        \n        Collections.sort(result);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the example\n        System.out.println(solution.get_odd_collatz(5)); // [1, 5]\n        \n        // Test additional cases\n        System.out.println(solution.get_odd_collatz(10)); // [1, 3, 5, 7, 9]\n        System.out.println(solution.get_odd_collatz(15)); // [1, 3, 5, 7, 9, 11, 13, 15]\n    }\n}"}
{"task_id": "Java/124", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    valid_date(\"03-11-2000\") => true\n    valid_date(\"15-01-2012\") => false\n    valid_date(\"04-0-2040\") => false\n    valid_date(\"06-04-2020\") => true\n    valid_date(\"06/04/2020\") => false\n     */\n    public boolean valid_date(String date) {\n        // Check if the date string is empty\n        if (date.isEmpty()) {\n            return false;\n        }\n\n        // Split the date string into day, month, and year\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n            return false;\n        }\n\n        // Check if the day, month, and year are valid integers\n        int day, month, year;\n        try {\n            day = Integer.parseInt(parts[1]);\n            month = Integer.parseInt(parts[0]);\n            year = Integer.parseInt(parts[2]);\n        } catch (NumberFormatException e) {\n            return false;\n        }\n\n        // Check if the month is valid\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        // Check if the day is valid based on the month\n        if (day < 1 || day > 31) {\n            return false;\n        }\n\n        if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) {\n            return false;\n        }\n\n        if (month == 2) {\n            if (year % 4 == 0 && day > 29) {\n                return false;\n            } else if (day > 28) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.valid_date(\"03-11-2000\")); // true\n        System.out.println(solution.valid_date(\"15-01-2012\")); // false\n        System.out.println(solution.valid_date(\"04-0-2040\")); // false\n        System.out.println(solution.valid_date(\"06-04-2020\")); // true\n        System.out.println(solution.valid_date(\"06/04/2020\")); // false\n    }\n}"}
{"task_id": "Java/125", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n     */\n    public Object split_words(String txt) {\n        List<String> words = new ArrayList<>();\n        if (txt.contains(\" \")) {\n            words = Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            words = Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c)) {\n                    int order = c - 'a';\n                    if (order % 2 != 0) {\n                        count++;\n                    }\n                }\n            }\n            return count;\n        }\n        return words;\n    }\n}"}
{"task_id": "Java/126", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If the a number appears more than twice, return false. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted(Arrays.asList(5)) -> true\n    is_sorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    is_sorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    is_sorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    is_sorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    is_sorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean is_sorted(List<Integer> lst) {\n        Set<Integer> set = new HashSet<>();\n        for (int num : lst) {\n            if (set.contains(num)) {\n                return false;\n            }\n            set.add(num);\n        }\n        \n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.is_sorted(Arrays.asList(5))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 3, 4, 5))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 3, 2, 4, 5))); // false\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7))); // false\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 2, 3, 3, 4))); // true\n        System.out.println(solution.is_sorted(Arrays.asList(1, 2, 2, 2, 3, 4))); // false\n    }\n}"}
{"task_id": "Java/127", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        \n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n        \n        if (intersectionStart > intersectionEnd) {\n            return \"NO\";\n        }\n        \n        int length = intersectionEnd - intersectionStart;\n        \n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n    \n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> interval1 = new ArrayList<>(Arrays.asList(1, 2));\n        List<Integer> interval2 = new ArrayList<>(Arrays.asList(2, 3));\n        System.out.println(solution.intersection(interval1, interval2)); // \"NO\"\n        \n        interval1 = new ArrayList<>(Arrays.asList(-1, 1));\n        interval2 = new ArrayList<>(Arrays.asList(0, 4));\n        System.out.println(solution.intersection(interval1, interval2)); // \"NO\"\n        \n        interval1 = new ArrayList<>(Arrays.asList(-3, -1));\n        interval2 = new ArrayList<>(Arrays.asList(-5, 5));\n        System.out.println(solution.intersection(interval1, interval2)); // \"YES\"\n    }\n}"}
{"task_id": "Java/128", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prod_signs(Arrays.asList(0, 1)) == 0\n    >>> prod_signs(Arrays.asList()) == None\n     */\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int product = 1;\n        int sum = 0;\n\n        for (int num : arr) {\n            if (num > 0) {\n                product *= 1;\n            } else if (num < 0) {\n                product *= -1;\n            } else {\n                product *= 0;\n            }\n\n            sum += Math.abs(num);\n        }\n\n        return Optional.of(product * sum);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.prod_signs(Arrays.asList(1, 2, 2, -4))); // Output: -9\n        System.out.println(solution.prod_signs(Arrays.asList(0, 1))); // Output: 0\n        System.out.println(solution.prod_signs(Arrays.asList())); // Output: None\n    }\n}"}
{"task_id": "Java/129", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        \n        PriorityQueue<Node> pq = new PriorityQueue<>(new Comparator<Node>() {\n            @Override\n            public int compare(Node n1, Node n2) {\n                return grid.get(n1.x).get(n1.y) - grid.get(n2.x).get(n2.y);\n            }\n        });\n        \n        for (int i = 0; i < n; i++) {\n            pq.offer(new Node(i, 0));\n            pq.offer(new Node(i, n - 1));\n            pq.offer(new Node(0, i));\n            pq.offer(new Node(n - 1, i));\n        }\n        \n        Set<Node> visited = new HashSet<>();\n        List<Integer> path = new ArrayList<>();\n        \n        while (!pq.isEmpty() && path.size() < k) {\n            Node curr = pq.poll();\n            if (visited.contains(curr)) {\n                continue;\n            }\n            visited.add(curr);\n            path.add(grid.get(curr.x).get(curr.y));\n            for (int[] dir : directions) {\n                int newX = curr.x + dir[0];\n                int newY = curr.y + dir[1];\n                if (newX >= 0 && newX < n && newY >= 0 && newY < n) {\n                    pq.offer(new Node(newX, newY));\n                }\n            }\n        }\n        \n        return path;\n    }\n    \n    class Node {\n        int x;\n        int y;\n        \n        public Node(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n        \n        @Override\n        public boolean equals(Object obj) {\n            if (this == obj) {\n                return true;\n            }\n            if (obj == null || getClass() != obj.getClass()) {\n                return false;\n            }\n            Node node = (Node) obj;\n            return x == node.x && y == node.y;\n        }\n        \n        @Override\n        public int hashCode() {\n            return Objects.hash(x, y);\n        }\n    }\n}"}
{"task_id": "Java/130", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        \n        if (n == 0) {\n            return result;\n        }\n        \n        result.add(3);\n        \n        if (n == 1) {\n            return result;\n        }\n        \n        result.add(1);\n        \n        if (n == 2) {\n            return result;\n        }\n        \n        result.add(2);\n        \n        if (n == 3) {\n            return result;\n        }\n        \n        for (int i = 4; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(1 + i / 2);\n            } else {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/131", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int product = 1;\n        \n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        \n        if (product == 1) {\n            return 0;\n        }\n        \n        return product;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.digits(1)); // 1\n        System.out.println(solution.digits(4)); // 0\n        System.out.println(solution.digits(235)); // 15\n    }\n}"}
{"task_id": "Java/132", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    is_nested(\"[[]]\") -> true\n    is_nested(\"[]]]]]]][[[[[]\") -> false\n    is_nested(\"[][]\") -> false\n    is_nested(\"[]\") -> false\n    is_nested(\"[[][]]\") -> true\n    is_nested(\"[[]][[\") -> true\n     */\n    public boolean is_nested(String string) {\n        Stack<Character> stack = new Stack<>();\n        \n        for(char c : string.toCharArray()) {\n            if(c == '[') {\n                stack.push(c);\n            } else if(c == ']' && !stack.isEmpty()) {\n                stack.pop();\n            }\n        }\n        \n        return stack.size() > 1;\n    }\n}"}
{"task_id": "Java/133", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sum_squares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            int roundedNum = (int) Math.ceil(num);\n            sum += roundedNum * roundedNum;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Double> lst1 = Arrays.asList(1.0, 2.0, 3.0);\n        List<Double> lst2 = Arrays.asList(1.0, 4.0, 9.0);\n        List<Double> lst3 = Arrays.asList(1.0, 3.0, 5.0, 7.0);\n        List<Double> lst4 = Arrays.asList(1.4, 4.2, 0.0);\n        List<Double> lst5 = Arrays.asList(-2.4, 1.0, 1.0);\n\n        System.out.println(solution.sum_squares(lst1)); // Output should be 14\n        System.out.println(solution.sum_squares(lst2)); // Output should be 98\n        System.out.println(solution.sum_squares(lst3)); // Output should be 84\n        System.out.println(solution.sum_squares(lst4)); // Output should be 29\n        System.out.println(solution.sum_squares(lst5)); // Output should be 6\n    }\n}"}
{"task_id": "Java/134", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") -> false\n    check_if_last_char_is_a_letter(\"apple pi e\") -> true\n    check_if_last_char_is_a_letter(\"apple pi e \") -> false\n    check_if_last_char_is_a_letter(\"\") -> false\n     */\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        if (txt.isEmpty()) {\n            return false;\n        }\n        \n        char lastChar = txt.charAt(txt.length() - 1);\n        \n        if (Character.isLetter(lastChar)) {\n            if (txt.length() == 1) {\n                return true;\n            } else {\n                char secondLastChar = txt.charAt(txt.length() - 2);\n                if (Character.isWhitespace(secondLastChar)) {\n                    return true;\n                }\n            }\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.check_if_last_char_is_a_letter(\"apple pie\")); // false\n        System.out.println(solution.check_if_last_char_is_a_letter(\"apple pi e\")); // true\n        System.out.println(solution.check_if_last_char_is_a_letter(\"apple pi e \")); // false\n        System.out.println(solution.check_if_last_char_is_a_letter(\"\")); // false\n    }\n}"}
{"task_id": "Java/135", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange(Arrays.asList(1,2,4,3,5)) = 3\n    can_arrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int can_arrange(List<Integer> arr) {\n        int index = -1;\n        \n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                index = i - 1;\n            }\n        }\n        \n        return index;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.can_arrange(Arrays.asList(1, 2, 4, 3, 5))); // Output should be 3\n        System.out.println(solution.can_arrange(Arrays.asList(1, 2, 3))); // Output should be -1\n    }\n}"}
{"task_id": "Java/136", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largest_smallest_integers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largest_smallest_integers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst){\n        List<Integer> negativeIntegers = new ArrayList<>();\n        List<Integer> positiveIntegers = new ArrayList<>();\n\n        for (Integer num : lst) {\n            if (num < 0) {\n                negativeIntegers.add(num);\n            } else if (num > 0) {\n                positiveIntegers.add(num);\n            }\n        }\n\n        Optional<Integer> largestNegative = negativeIntegers.isEmpty() ? Optional.empty() : Optional.of(Collections.max(negativeIntegers));\n        Optional<Integer> smallestPositive = positiveIntegers.isEmpty() ? Optional.empty() : Optional.of(Collections.min(positiveIntegers));\n\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(2, 4, 1, 3, 5, 7))); // (Optional.empty(), Optional.of(1))\n        System.out.println(solution.largest_smallest_integers(Arrays.asList())); // (Optional.empty(), Optional.empty())\n        System.out.println(solution.largest_smallest_integers(Arrays.asList(0))); // (Optional.empty(), Optional.empty())\n    }\n}"}
{"task_id": "Java/137", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) -> Optional.of(2.5)\n    compare_one(1, \"2,3\") -> Optional.of(\"2,3\")\n    compare_one(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compare_one(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compare_one(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            if ((int) a > (int) b) {\n                return Optional.of(a);\n            } else if ((int) b > (int) a) {\n                return Optional.of(b);\n            }\n        } else if (a instanceof Float && b instanceof Float) {\n            if ((float) a > (float) b) {\n                return Optional.of(a);\n            } else if ((float) b > (float) a) {\n                return Optional.of(b);\n            }\n        } else if (a instanceof String && b instanceof String) {\n            double numA = Double.parseDouble(((String) a).replace(\",\", \".\"));\n            double numB = Double.parseDouble(((String) b).replace(\",\", \".\"));\n            if (numA > numB) {\n                return Optional.of(a);\n            } else if (numB > numA) {\n                return Optional.of(b);\n            }\n        }\n        return Optional.empty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.compare_one(1, 2.5)); // Optional[2.5]\n        System.out.println(solution.compare_one(1, \"2,3\")); // Optional[2,3]\n        System.out.println(solution.compare_one(\"5,1\", \"6\")); // Optional[6]\n        System.out.println(solution.compare_one(\"1\", 1)); // Optional.empty()\n    }\n}"}
{"task_id": "Java/138", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == false\n    is_equal_to_sum_even(6) == false\n    is_equal_to_sum_even(8) == true\n     */\n    public boolean is_equal_to_sum_even(int n) {\n        // Check if n is less than 8 or odd\n        if (n < 8 || n % 2 != 0) {\n            return false;\n        }\n        \n        // Check if n can be written as the sum of 4 positive even numbers\n        for (int i = 1; i <= n / 2; i += 2) {\n            for (int j = 1; j <= n / 2; j += 2) {\n                for (int k = 1; k <= n / 2; k += 2) {\n                    for (int l = 1; l <= n / 2; l += 2) {\n                        if (i + j + k + l == n) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.is_equal_to_sum_even(4)); // false\n        System.out.println(solution.is_equal_to_sum_even(6)); // false\n        System.out.println(solution.is_equal_to_sum_even(8)); // true\n    }\n}"}
{"task_id": "Java/139", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long special_factorial(int n) {\n        long result = 1;\n        \n        for (int i = n; i > 0; i--) {\n            long factorial = 1;\n            for (int j = i; j > 0; j--) {\n                factorial *= j;\n            }\n            result *= factorial;\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.special_factorial(4)); // Output: 288\n        System.out.println(solution.special_factorial(5)); // Output: 34560\n        System.out.println(solution.special_factorial(6)); // Output: 24883200\n    }\n}"}
{"task_id": "Java/140", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fix_spaces(String text) {\n        StringBuilder sb = new StringBuilder();\n        int consecutiveSpaces = 0;\n\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n\n            if (c == ' ') {\n                consecutiveSpaces++;\n                if (consecutiveSpaces > 2) {\n                    sb.append(\"-\");\n                } else {\n                    sb.append(\"_\");\n                }\n            } else {\n                sb.append(c);\n                consecutiveSpaces = 0;\n            }\n        }\n\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.fix_spaces(\"Example\")); // \"Example\"\n        System.out.println(solution.fix_spaces(\"Example 1\")); // \"Example_1\"\n        System.out.println(solution.fix_spaces(\" Example 2\")); // \"_Example_2\"\n        System.out.println(solution.fix_spaces(\" Example   3\")); // \"_Example-3\"\n    }\n}"}
{"task_id": "Java/141", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String file_name_check(String file_name) {\n        // Check if the file name contains more than three digits\n        int digitCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n        }\n        if (digitCount > 3) {\n            return \"No\";\n        }\n        \n        // Check if the file name contains exactly one dot\n        if (file_name.indexOf('.') == -1 || file_name.indexOf('.') != file_name.lastIndexOf('.')) {\n            return \"No\";\n        }\n        \n        // Split the file name into two parts based on the dot\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length != 2) {\n            return \"No\";\n        }\n        \n        // Check if the substring before the dot starts with a letter\n        if (!Character.isLetter(parts[0].charAt(0))) {\n            return \"No\";\n        }\n        \n        // Check if the substring after the dot is one of [\"txt\", \"exe\", \"dll\"]\n        if (!Arrays.asList(\"txt\", \"exe\", \"dll\").contains(parts[1])) {\n            return \"No\";\n        }\n        \n        return \"Yes\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.file_name_check(\"example.txt\")); // \"Yes\"\n        System.out.println(solution.file_name_check(\"1example.dll\")); // \"No\"\n    }\n}"}
{"task_id": "Java/142", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sum_squares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> lst1 = new ArrayList<>(Arrays.asList(1, 2, 3));\n        List<Integer> lst2 = new ArrayList<>();\n        List<Integer> lst3 = new ArrayList<>(Arrays.asList(-1, -5, 2, -1, -5));\n\n        System.out.println(solution.sum_squares(lst1)); // Output: 6\n        System.out.println(solution.sum_squares(lst2)); // Output: 0\n        System.out.println(solution.sum_squares(lst3)); // Output: -126\n    }\n}"}
{"task_id": "Java/143", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String words_in_sentence(String sentence) {\n        // Split the sentence into words\n        String[] words = sentence.split(\" \");\n        \n        // Create a list to store prime length words\n        List<String> primeLengthWords = new ArrayList<>();\n        \n        // Check if the length of each word is prime\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                primeLengthWords.add(word);\n            }\n        }\n        \n        // Join the prime length words into a single string\n        String result = String.join(\" \", primeLengthWords);\n        \n        return result;\n    }\n    \n    // Helper function to check if a number is prime\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/144", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Parse the fractions\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n        \n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        \n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n        \n        // Calculate the result of x * n\n        int resultNumerator = xNumerator * nNumerator;\n        int resultDenominator = xDenominator * nDenominator;\n        \n        // Check if the result is a whole number\n        return resultDenominator % resultNumerator == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.simplify(\"1/5\", \"5/1\")); // true\n        System.out.println(solution.simplify(\"1/6\", \"2/1\")); // false\n        System.out.println(solution.simplify(\"7/10\", \"10/2\")); // false\n    }\n}"}
{"task_id": "Java/145", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n    If an integer is negative, then its first digit will be negative:\n    e.g. -123 has digits -1, 2, and 3.\n\n    For example:\n    >>> order_by_points(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> order_by_points(Arrays.asList()) == []\n     */\n    public List<Integer> order_by_points(List<Integer> nums) {\n        Collections.sort(nums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer num1, Integer num2) {\n                int sum1 = getSumOfDigits(num1);\n                int sum2 = getSumOfDigits(num2);\n                \n                if (sum1 == sum2) {\n                    return nums.indexOf(num1) - nums.indexOf(num2);\n                }\n                \n                return sum1 - sum2;\n            }\n        });\n        \n        return nums;\n    }\n    \n    private int getSumOfDigits(int num) {\n        int sum = 0;\n        String numStr = String.valueOf(num);\n        \n        for (int i = 0; i < numStr.length(); i++) {\n            char c = numStr.charAt(i);\n            if (c == '-') {\n                sum += Character.getNumericValue(numStr.charAt(i + 1)) * -1;\n                i++;\n            } else {\n                sum += Character.getNumericValue(c);\n            }\n        }\n        \n        return sum;\n    }\n}"}
{"task_id": "Java/146", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        \n        for (int num : nums) {\n            if (num > 10) {\n                String numStr = String.valueOf(num);\n                char firstDigit = numStr.charAt(0);\n                char lastDigit = numStr.charAt(numStr.length() - 1);\n                \n                if (isOdd(firstDigit) && isOdd(lastDigit)) {\n                    count++;\n                }\n            }\n        }\n        \n        return count;\n    }\n    \n    private boolean isOdd(char digit) {\n        return digit == '1' || digit == '3' || digit == '5' || digit == '7' || digit == '9';\n    }\n}"}
{"task_id": "Java/147", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int get_max_triples(int n) {\n        int[] a = new int[n];\n        int count = 0;\n        \n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        \n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the example\n        int n = 5;\n        System.out.println(solution.get_max_triples(n)); // Output: 1\n    }\n}"}
{"task_id": "Java/148", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        List<String> result = new ArrayList<>();\n        \n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return result;\n        }\n        \n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        \n        int start = Math.min(index1, index2);\n        int end = Math.max(index1, index2);\n        \n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.bf(\"Jupiter\", \"Neptune\")); // [\"Saturn\", \"Uranus\"]\n        System.out.println(solution.bf(\"Earth\", \"Mercury\")); // [\"Venus\"]\n        System.out.println(solution.bf(\"Mercury\", \"Uranus\")); // [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n    }\n}"}
{"task_id": "Java/149", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert sorted_list_sum(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert sorted_list_sum(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> sorted_list_sum(List<String> lst) {\n        // Remove strings with odd lengths\n        List<String> evenLengthStrings = new ArrayList<>();\n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                evenLengthStrings.add(str);\n            }\n        }\n        \n        // Sort the list by length and then alphabetically\n        Collections.sort(evenLengthStrings, (a, b) -> {\n            if (a.length() != b.length()) {\n                return a.length() - b.length();\n            } else {\n                return a.compareTo(b);\n            }\n        });\n        \n        return evenLengthStrings;\n    }\n}"}
{"task_id": "Java/150", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n     */\n    public int x_or_y(int n, int x, int y) {\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.x_or_y(7, 34, 12)); // Output: 34\n        System.out.println(solution.x_or_y(15, 8, 5)); // Output: 5\n    }\n}"}
{"task_id": "Java/151", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    double_the_difference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    double_the_difference(Arrays.asList(-1, -2, 0)) == 0\n    double_the_difference(Arrays.asList(9, -2)) == 81\n    double_the_difference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int double_the_difference(List<Object> lst) {\n        int sum = 0;\n        \n        for (Object num : lst) {\n            if (num instanceof Integer && (int)num > 0 && (int)num % 2 != 0) {\n                sum += (int)num * (int)num;\n            }\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.double_the_difference(Arrays.asList(1, 3, 2, 0))); // Output: 10\n        System.out.println(solution.double_the_difference(Arrays.asList(-1, -2, 0))); // Output: 0\n        System.out.println(solution.double_the_difference(Arrays.asList(9, -2))); // Output: 81\n        System.out.println(solution.double_the_difference(Arrays.asList(0))); // Output: 0\n    }\n}"}
{"task_id": "Java/152", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 0; i < game.size(); i++) {\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            result.add(diff);\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/153", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.Strongest_Extension.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        String strongestExtension = \"\";\n        int maxStrength = Integer.MIN_VALUE;\n\n        for (String extension : extensions) {\n            int capCount = 0;\n            int smCount = 0;\n\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smCount++;\n                }\n            }\n\n            int strength = capCount - smCount;\n\n            if (strength > maxStrength || (strength == maxStrength && extensions.indexOf(extension) < extensions.indexOf(strongestExtension))) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return class_name + \".\" + strongestExtension;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Example 1\n        List<String> extensions1 = new ArrayList<>(Arrays.asList(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"));\n        System.out.println(solution.Strongest_Extension(\"Slices\", extensions1)); // Output: Slices.SErviNGSliCes\n\n        // Example 2\n        List<String> extensions2 = new ArrayList<>(Arrays.asList(\"AA\", \"Be\", \"CC\"));\n        System.out.println(solution.Strongest_Extension(\"my_class\", extensions2)); // Output: my_class.AA\n    }\n}"}
{"task_id": "Java/154", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => false\n    cycpattern_check(\"hello\",\"ell\") => true\n    cycpattern_check(\"whassup\",\"psus\") => false\n    cycpattern_check(\"abab\",\"baa\") => true\n    cycpattern_check(\"efef\",\"eeff\") => false\n    cycpattern_check(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpattern_check(String a, String b) {\n        if (a.length() != b.length()) {\n            return false;\n        }\n        \n        String combined = a + a;\n        \n        return combined.contains(b);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.cycpattern_check(\"abcd\", \"abd\")); // false\n        System.out.println(solution.cycpattern_check(\"hello\", \"ell\")); // true\n        System.out.println(solution.cycpattern_check(\"whassup\", \"psus\")); // false\n        System.out.println(solution.cycpattern_check(\"abab\", \"baa\")); // true\n        System.out.println(solution.cycpattern_check(\"efef\", \"eeff\")); // false\n        System.out.println(solution.cycpattern_check(\"himenss\", \"simen\")); // true\n    }\n}"}
{"task_id": "Java/155", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n     */\n    public List<Integer> even_odd_count(int num) {\n        List<Integer> result = new ArrayList<>();\n        \n        int evenCount = 0;\n        int oddCount = 0;\n        \n        String numStr = String.valueOf(Math.abs(num));\n        \n        for (int i = 0; i < numStr.length(); i++) {\n            int digit = Character.getNumericValue(numStr.charAt(i));\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        \n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/156", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == \"xix\"\n    >>> int_to_mini_roman(152) == \"clii\"\n    >>> int_to_mini_roman(426) == \"cdxxvi\"\n     */\n    public String int_to_mini_roman(int number) {\n        if (number < 1 || number > 1000) {\n            throw new IllegalArgumentException(\"Number must be between 1 and 1000\");\n        }\n\n        String[] romanNumerals = {\"i\", \"iv\", \"v\", \"ix\", \"x\", \"xl\", \"l\", \"xc\", \"c\", \"cd\", \"d\", \"cm\", \"m\"};\n        int[] values = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n\n        StringBuilder sb = new StringBuilder();\n\n        for (int i = values.length - 1; i >= 0; i--) {\n            while (number >= values[i]) {\n                sb.append(romanNumerals[i]);\n                number -= values[i];\n            }\n        }\n\n        return sb.toString().toLowerCase();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.int_to_mini_roman(19)); // Output: xix\n        System.out.println(solution.int_to_mini_roman(152)); // Output: clii\n        System.out.println(solution.int_to_mini_roman(426)); // Output: cdxxvi\n    }\n}"}
{"task_id": "Java/157", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == true\n    right_angle_triangle(1, 2, 3) == false\n     */\n    public boolean right_angle_triangle(int a, int b, int c) {\n        // Sort the sides in ascending order\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n\n        // Check if the sides form a right-angled triangle\n        return (sides[0]*sides[0] + sides[1]*sides[1] == sides[2]*sides[2]);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.right_angle_triangle(3, 4, 5)); // true\n        System.out.println(solution.right_angle_triangle(1, 2, 3)); // false\n    }\n}"}
{"task_id": "Java/158", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String find_max(List<String> words) {\n        String maxWord = \"\";\n        int maxUniqueChars = 0;\n\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            if (uniqueChars.size() > maxUniqueChars || (uniqueChars.size() == maxUniqueChars && word.compareTo(maxWord) < 0)) {\n                maxWord = word;\n                maxUniqueChars = uniqueChars.size();\n            }\n        }\n\n        return maxWord;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<String> words1 = Arrays.asList(\"name\", \"of\", \"string\");\n        System.out.println(solution.find_max(words1)); // Output should be \"string\"\n\n        List<String> words2 = Arrays.asList(\"name\", \"enam\", \"game\");\n        System.out.println(solution.find_max(words2)); // Output should be \"enam\"\n\n        List<String> words3 = Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\");\n        System.out.println(solution.find_max(words3)); // Output should be \"aaaaaaa\"\n    }\n}"}
{"task_id": "Java/159", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        int totalEaten = number + need;\n        int carrotsLeft = Math.max(0, remaining - need);\n        \n        List<Integer> result = new ArrayList<>();\n        result.add(totalEaten);\n        result.add(carrotsLeft);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.eat(5, 6, 10)); // [11, 4]\n        System.out.println(solution.eat(4, 8, 9)); // [12, 1]\n        System.out.println(solution.eat(1, 10, 10)); // [11, 0]\n        System.out.println(solution.eat(2, 11, 5)); // [7, 0]\n    }\n}"}
{"task_id": "Java/160", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        // Initialize result to the first operand\n        int result = operand.get(0);\n\n        // Iterate through the operators and operands\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int num = operand.get(i + 1);\n\n            // Perform the operation based on the operator\n            switch (op) {\n                case \"+\":\n                    result += num;\n                    break;\n                case \"-\":\n                    result -= num;\n                    break;\n                case \"*\":\n                    result *= num;\n                    break;\n                case \"/\":\n                    result /= num;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, num);\n                    break;\n                default:\n                    System.out.println(\"Invalid operator: \" + op);\n                    break;\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<String> operator = new ArrayList<>(Arrays.asList(\"+\", \"*\", \"-\"));\n        List<Integer> operand = new ArrayList<>(Arrays.asList(2, 3, 4, 5));\n\n        int result = solution.do_algebra(operator, operand);\n        System.out.println(\"Result: \" + result);\n    }\n}"}
{"task_id": "Java/161", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] chars = s.toCharArray();\n        boolean hasLetter = false;\n        \n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLetter(chars[i])) {\n                hasLetter = true;\n                if (Character.isUpperCase(chars[i])) {\n                    chars[i] = Character.toLowerCase(chars[i]);\n                } else {\n                    chars[i] = Character.toUpperCase(chars[i]);\n                }\n            }\n        }\n        \n        if (!hasLetter) {\n            StringBuilder sb = new StringBuilder(s);\n            return sb.reverse().toString();\n        }\n        \n        return new String(chars);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.solve(\"1234\")); // Output: \"4321\"\n        System.out.println(solution.solve(\"ab\")); // Output: \"AB\"\n        System.out.println(solution.solve(\"#a@C\")); // Output: \"#A@c\"\n    }\n}"}
{"task_id": "Java/162", "generation": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        \n        // Convert byte array to hex string\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5Hash = bigInt.toString(16);\n        \n        // Pad with zeros if necessary\n        while (md5Hash.length() < 32) {\n            md5Hash = \"0\" + md5Hash;\n        }\n        \n        return Optional.of(md5Hash);\n    }\n}"}
{"task_id": "Java/163", "generation": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order. Please note that the even digits refer to even numbers less than 10.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n     */\n    public List<Integer> generate_integers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        \n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        \n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0 && i < 10) {\n                result.add(i);\n            }\n        }\n        \n        return result;\n    }\n}"}
