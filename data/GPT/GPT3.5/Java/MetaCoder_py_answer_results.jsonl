{"task_id": "Java/14", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> all_prefixes(String string) {\n        List<String> result = new ArrayList<>();\n        \n        for (int i = 0; i < string.length(); i++) {\n            result.add(string.substring(0, i + 1));\n        }\n        \n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.all_prefixes(\"\").equals(List.of()),\n                s.all_prefixes(\"asdfgh\").equals(Arrays.asList(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")),\n                s.all_prefixes(\"WWW\").equals(Arrays.asList(\"W\", \"WW\", \"WWW\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/13", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int greatest_common_divisor(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.greatest_common_divisor(3, 7) == 1,\n                s.greatest_common_divisor(10, 15) == 5,\n                s.greatest_common_divisor(49, 14) == 7,\n                s.greatest_common_divisor(144, 60) == 12\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/2", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double truncate_number(double number) {\n        return number % 1.0;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n            s.truncate_number(3.5) == 0.5,\n            Math.abs(s.truncate_number(1.33) - 0.33) < 1e-6,\n            Math.abs(s.truncate_number(123.456) - 0.456) < 1e-6\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/1", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        List<Character> currentString = new ArrayList<>();\n        int currentDepth = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                currentDepth++;\n                currentString.add(c);\n            } else if (c == ')') {\n                currentDepth--;\n                currentString.add(c);\n\n                if (currentDepth == 0) {\n                    StringBuilder sb = new StringBuilder();\n                    for (char ch : currentString) {\n                        sb.append(ch);\n                    }\n                    result.add(sb.toString());\n                    currentString.clear();\n                }\n            }\n        }\n\n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.separate_paren_groups(\"(()()) ((())) () ((())()())\").equals(Arrays.asList(\n                        \"(()())\", \"((()))\", \"()\", \"((())()())\"\n                )),\n                s.separate_paren_groups(\"() (()) ((())) (((())))\").equals(Arrays.asList(\n                        \"()\", \"(())\", \"((()))\", \"(((())))\"\n                )),\n                s.separate_paren_groups(\"(()(())((())))\").equals(Arrays.asList(\n                        \"(()(())((())))\"\n                )),\n                s.separate_paren_groups(\"( ) (( )) (( )( ))\").equals(Arrays.asList(\"()\", \"(())\", \"(()())\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/7", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> filteredStrings = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredStrings.add(str);\n            }\n        }\n        return filteredStrings;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.filter_by_substring(new ArrayList<>(List.of()), \"john\").equals(List.of()),\n                s.filter_by_substring(new ArrayList<>(Arrays.asList(\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), \"xxx\").equals(Arrays.asList(\"xxx\", \"xxxAAA\", \"xxx\")),\n                s.filter_by_substring(new ArrayList<>(Arrays.asList(\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), \"xx\").equals(Arrays.asList(\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\")),\n                s.filter_by_substring(new ArrayList<>(Arrays.asList(\"grunt\", \"trumpet\", \"prune\", \"gruesome\")), \"run\").equals(Arrays.asList(\"grunt\", \"prune\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/4", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public double mean_absolute_deviation(List<Double> numbers) {\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n        \n        double absoluteDiffSum = 0;\n        for (double num : numbers) {\n            absoluteDiffSum += Math.abs(num - mean);\n        }\n        \n        return absoluteDiffSum / numbers.size();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Math.abs(s.mean_absolute_deviation(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0))) - 2.0/3.0) < 1e-6,\n                Math.abs(s.mean_absolute_deviation(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0))) - 1.0) < 1e-6,\n                Math.abs(s.mean_absolute_deviation(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))) - 6.0/5.0) < 1e-6\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/12", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int maxLength = 0;\n        String longestString = \"\";\n        for (String s : strings) {\n            if (s.length() > maxLength) {\n                maxLength = s.length();\n                longestString = s;\n            }\n        }\n        return Optional.of(longestString);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.longest(new ArrayList<>(List.of())).isEmpty(),\n                Objects.equals(s.longest(new ArrayList<>(Arrays.asList(\"x\", \"y\", \"z\"))).get(), \"x\"),\n                Objects.equals(s.longest(new ArrayList<>(Arrays.asList(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).get(), \"zzzz\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/8", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<Integer> sum_product(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n\n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(sum);\n        result.add(product);\n\n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sum_product(new ArrayList<>(List.of())).equals(Arrays.asList(0, 1)),\n                s.sum_product(new ArrayList<>(Arrays.asList(1, 1, 1))).equals(Arrays.asList(3, 1)),\n                s.sum_product(new ArrayList<>(Arrays.asList(100, 0))).equals(Arrays.asList(100, 0)),\n                s.sum_product(new ArrayList<>(Arrays.asList(3, 5, 7))).equals(Arrays.asList(3 + 5 + 7, 3 * 5 * 7)),\n                s.sum_product(new ArrayList<>(List.of(10))).equals(Arrays.asList(10, 10))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/5", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        \n        if (numbers.isEmpty()) {\n            return result;\n        }\n        \n        for (int i = 0; i < numbers.size() - 1; i++) {\n            result.add(numbers.get(i));\n            result.add(delimiter);\n        }\n        \n        result.add(numbers.get(numbers.size() - 1));\n        \n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.intersperse(new ArrayList<>(List.of()), 7).equals(List.of()),\n                s.intersperse(new ArrayList<>(Arrays.asList(5, 6, 3, 2)), 8).equals(Arrays.asList(5, 8, 6, 8, 3, 8, 2)),\n                s.intersperse(new ArrayList<>(Arrays.asList(2, 2, 2)), 2).equals(Arrays.asList(2, 2, 2, 2, 2))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/6", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<Integer> parse_nested_parens(String paren_string) {\n        List<Integer> depths = new ArrayList<>();\n        String[] groups = paren_string.split(\" \");\n        \n        for (String group : groups) {\n            depths.add(parseParenGroup(group));\n        }\n        \n        return depths;\n    }\n    \n    private int parseParenGroup(String s) {\n        int depth = 0;\n        int maxDepth = 0;\n        \n        for (char c : s.toCharArray()) {\n            if (c == '(') {\n                depth++;\n                maxDepth = Math.max(depth, maxDepth);\n            } else {\n                depth--;\n            }\n        }\n        \n        return maxDepth;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.parse_nested_parens(\"(()()) ((())) () ((())()())\").equals(Arrays.asList(2, 3, 1, 3)),\n                s.parse_nested_parens(\"() (()) ((())) (((())))\").equals(Arrays.asList(1, 2, 3, 4)),\n                s.parse_nested_parens(\"(()(())((())))\").equals(Arrays.asList(4))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/11", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public String string_xor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append('0');\n            } else {\n                result.append('1');\n            }\n        }\n        return result.toString();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.string_xor(\"111000\", \"101010\"), \"010010\"),\n                Objects.equals(s.string_xor(\"1\", \"1\"), \"0\"),\n                Objects.equals(s.string_xor(\"0101\", \"0000\"), \"0101\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/10", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    public String make_palindrome(String string) {\n        if (string.isEmpty()) {\n            return \"\";\n        }\n\n        int beginningOfSuffix = 0;\n        while (!isPalindrome(string.substring(beginningOfSuffix))) {\n            beginningOfSuffix++;\n        }\n\n        return string + new StringBuilder(string.substring(0, beginningOfSuffix)).reverse().toString();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.make_palindrome(\"\"), \"\"),\n                Objects.equals(s.make_palindrome(\"x\"), \"x\"),\n                Objects.equals(s.make_palindrome(\"xyz\"), \"xyzyx\"),\n                Objects.equals(s.make_palindrome(\"xyx\"), \"xyx\"),\n                Objects.equals(s.make_palindrome(\"jerry\"), \"jerryrrej\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/3", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n\n        for (int op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.below_zero(new ArrayList<>(Arrays.asList())),\n                !s.below_zero(new ArrayList<>(Arrays.asList(1, 2, -3, 1, 2, -3))),\n                s.below_zero(new ArrayList<>(Arrays.asList(1, 2, -4, 5, 6))),\n                !s.below_zero(new ArrayList<>(Arrays.asList(1, -1, 2, -2, 5, -5, 4, -4))),\n                s.below_zero(new ArrayList<>(Arrays.asList(1, -1, 2, -2, 5, -5, 4, -5))),\n                s.below_zero(new ArrayList<>(Arrays.asList(1, -2, 2, -2, 5, -5, 4, -4)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/0", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public boolean has_close_elements(List<Double> numbers, double threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = 0; j < numbers.size(); j++) {\n                if (i != j) {\n                    double distance = Math.abs(numbers.get(i) - numbers.get(j));\n                    if (distance < threshold) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.has_close_elements(new ArrayList<>(Arrays.asList(11.0, 2.0, 3.9, 4.0, 5.0, 2.2)), 0.3),\n                !s.has_close_elements(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)), 0.05),\n                s.has_close_elements(new ArrayList<>(Arrays.asList(1.0, 2.0, 5.9, 4.0, 5.0)), 0.95),\n                !s.has_close_elements(new ArrayList<>(Arrays.asList(1.0, 2.0, 5.9, 4.0, 5.0)), 0.8),\n                s.has_close_elements(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)), 0.1),\n                s.has_close_elements(new ArrayList<>(Arrays.asList(1.1, 2.2, 3.1, 4.1, 5.1)), 1.0),\n                !s.has_close_elements(new ArrayList<>(Arrays.asList(1.1, 2.2, 3.1, 4.1, 5.1)), 0.5)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/9", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        Integer runningMax = null;\n\n        for (Integer n : numbers) {\n            if (runningMax == null) {\n                runningMax = n;\n            } else {\n                runningMax = Math.max(runningMax, n);\n            }\n            result.add(runningMax);\n        }\n\n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.rolling_max(new ArrayList<>(List.of())).equals(List.of()),\n                s.rolling_max(new ArrayList<>(Arrays.asList(1, 2, 3, 4))).equals(Arrays.asList(1, 2, 3, 4)),\n                s.rolling_max(new ArrayList<>(Arrays.asList(4, 3, 2, 1))).equals(Arrays.asList(4, 4, 4, 4)),\n                s.rolling_max(new ArrayList<>(Arrays.asList(3, 2, 3, 100, 3))).equals(Arrays.asList(3, 3, 3, 100, 100))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/15", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public String string_sequence(int n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i).append(\" \");\n        }\n        return sb.toString().trim();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.string_sequence(0).equals(\"0\"),\n                s.string_sequence(3).equals(\"0 1 2 3\"),\n                s.string_sequence(10).equals(\"0 1 2 3 4 5 6 7 8 9 10\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/18", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public int how_many_times(String string, String substring) {\n        int times = 0;\n        \n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                times++;\n            }\n        }\n        \n        return times;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.how_many_times(\"\", \"x\") == 0,\n                s.how_many_times(\"xyxyxyx\", \"x\") == 4,\n                s.how_many_times(\"cacacacac\", \"cac\") == 4,\n                s.how_many_times(\"john doe\", \"john\") == 1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/16", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public int count_distinct_characters(String string) {\n        Set<Character> charSet = new HashSet<>();\n        for (char c : string.toLowerCase().toCharArray()) {\n            charSet.add(c);\n        }\n        return charSet.size();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.count_distinct_characters(\"\") == 0,\n                s.count_distinct_characters(\"abcde\") == 5,\n                s.count_distinct_characters(\"abcde\" + \"cade\" + \"CADE\") == 5,\n                s.count_distinct_characters(\"aaaaAAAAaaaa\") == 1,\n                s.count_distinct_characters(\"Jerry jERRY JeRRRY\") == 5\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/17", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<Integer> parse_music(String string) {\n        Map<String, Integer> noteMap = new HashMap<>();\n        noteMap.put(\"o\", 4);\n        noteMap.put(\"o|\", 2);\n        noteMap.put(\".|\", 1);\n        \n        List<Integer> durations = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        \n        for (String note : notes) {\n            if (noteMap.containsKey(note)) {\n                durations.add(noteMap.get(note));\n            }\n        }\n        \n        return durations;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.parse_music(\"\").equals(List.of()),\n                s.parse_music(\"o o o o\").equals(Arrays.asList(4, 4, 4, 4)),\n                s.parse_music(\".| .| .| .|\").equals(Arrays.asList(1, 1, 1, 1)),\n                s.parse_music(\"o| o| .| .| o o o o\").equals(Arrays.asList(2, 2, 1, 1, 4, 4, 4, 4)),\n                s.parse_music(\"o| .| o| .| o o| o o|\").equals(Arrays.asList(2, 1, 2, 1, 4, 2, 4, 2))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/19", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public String sort_numbers(String numbers) {\n        Map<String, Integer> valueMap = new HashMap<>();\n        valueMap.put(\"zero\", 0);\n        valueMap.put(\"one\", 1);\n        valueMap.put(\"two\", 2);\n        valueMap.put(\"three\", 3);\n        valueMap.put(\"four\", 4);\n        valueMap.put(\"five\", 5);\n        valueMap.put(\"six\", 6);\n        valueMap.put(\"seven\", 7);\n        valueMap.put(\"eight\", 8);\n        valueMap.put(\"nine\", 9);\n\n        List<String> numberList = new ArrayList<>(Arrays.asList(numbers.split(\" \")));\n        numberList.removeIf(String::isEmpty);\n        numberList.sort(Comparator.comparingInt(valueMap::get));\n\n        return String.join(\" \", numberList);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sort_numbers(\"\").equals(\"\"),\n                s.sort_numbers(\"three\").equals(\"three\"),\n                s.sort_numbers(\"three five nine\").equals(\"three five nine\"),\n                s.sort_numbers(\"five zero four seven nine eight\").equals(\"zero four five seven eight nine\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/23", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int strlen(String string) {\n        return string.length();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.strlen(\"\") == 0,\n                s.strlen(\"x\") == 1,\n                s.strlen(\"asdasnakj\") == 9\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/20", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<Double> find_closest_elements(List<Double> numbers) {\n        List<Double> closestPair = new ArrayList<>();\n        Double[] result = new Double[2];\n        Double distance = null;\n\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = 0; j < numbers.size(); j++) {\n                if (i != j) {\n                    Double num1 = numbers.get(i);\n                    Double num2 = numbers.get(j);\n                    Double newDistance = Math.abs(num1 - num2);\n                    if (distance == null || newDistance < distance) {\n                        distance = newDistance;\n                        result[0] = num1;\n                        result[1] = num2;\n                    }\n                }\n            }\n        }\n\n        closestPair.add(result[0]);\n        closestPair.add(result[1]);\n        Collections.sort(closestPair);\n        return closestPair;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.find_closest_elements(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.9, 4.0, 5.0, 2.2))).equals(Arrays.asList(3.9, 4.0)),\n                s.find_closest_elements(new ArrayList<>(Arrays.asList(1.0, 2.0, 5.9, 4.0, 5.0))).equals(Arrays.asList(5.0, 5.9)),\n                s.find_closest_elements(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))).equals(Arrays.asList(2.0, 2.2)),\n                s.find_closest_elements(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))).equals(Arrays.asList(2.0, 2.0)),\n                s.find_closest_elements(new ArrayList<>(Arrays.asList(1.1, 2.2, 3.1, 4.1, 5.1))).equals(Arrays.asList(2.2, 3.1))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/21", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<Double> rescale_to_unit(List<Double> numbers) {\n        double minNumber = Collections.min(numbers);\n        double maxNumber = Collections.max(numbers);\n        List<Double> rescaledNumbers = new ArrayList<>();\n        \n        for (double num : numbers) {\n            double rescaledValue = (num - minNumber) / (maxNumber - minNumber);\n            rescaledNumbers.add(rescaledValue);\n        }\n        \n        return rescaledNumbers;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.rescale_to_unit(new ArrayList<>(Arrays.asList(2.0, 49.9))).equals(Arrays.asList(0.0, 1.0)),\n                s.rescale_to_unit(new ArrayList<>(Arrays.asList(100.0, 49.9))).equals(Arrays.asList(1.0, 0.0)),\n                s.rescale_to_unit(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))).equals(Arrays.asList(0.0, 0.25, 0.5, 0.75, 1.0)),\n                s.rescale_to_unit(new ArrayList<>(Arrays.asList(2.0, 1.0, 5.0, 3.0, 4.0))).equals(Arrays.asList(0.25, 0.0, 1.0, 0.5, 0.75)),\n                s.rescale_to_unit(new ArrayList<>(Arrays.asList(12.0, 11.0, 15.0, 13.0, 14.0))).equals(Arrays.asList(0.25, 0.0, 1.0, 0.5, 0.75))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/27", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public String flip_case(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isUpperCase(chars[i])) {\n                chars[i] = Character.toLowerCase(chars[i]);\n            } else if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.flip_case(\"\"), \"\"),\n                Objects.equals(s.flip_case(\"Hello!\"), \"hELLO!\"),\n                Objects.equals(s.flip_case(\"These violent delights have violent ends\"), \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/24", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largest_divisor(int n) {\n        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return -1; // If no divisor found (should not reach this point for positive n)\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.largest_divisor(3) == 1,\n                s.largest_divisor(7) == 1,\n                s.largest_divisor(10) == 5,\n                s.largest_divisor(100) == 50,\n                s.largest_divisor(49) == 7\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/22", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<Integer> filter_integers(List<Object> values) {\n        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.filter_integers(new ArrayList<>(List.of())).equals(List.of()),\n                s.filter_integers(new ArrayList<>(Arrays.asList(4, Map.of(), List.of(), 23.2, 9, \"adasd\"))).equals(Arrays.asList(4, 9)),\n                s.filter_integers(new ArrayList<>(Arrays.asList(3, 'c', 3, 3, 'a', 'b'))).equals(Arrays.asList(3, 3, 3))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/28", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String str : strings) {\n            sb.append(str);\n        }\n        return sb.toString();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.concatenate(new ArrayList<>(List.of())), \"\"),\n                Objects.equals(s.concatenate(new ArrayList<>(Arrays.asList(\"x\", \"y\", \"z\"))), \"xyz\"),\n                Objects.equals(s.concatenate(new ArrayList<>(Arrays.asList(\"x\", \"y\", \"z\", \"w\", \"k\"))), \"xyzwk\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/25", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while (i <= Math.sqrt(n) + 1) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.factorize(2).equals(List.of(2)),\n                s.factorize(4).equals(Arrays.asList(2, 2)),\n                s.factorize(8).equals(Arrays.asList(2, 2, 2)),\n                s.factorize(3 * 19).equals(Arrays.asList(3, 19)),\n                s.factorize(3 * 19 * 3 * 19).equals(Arrays.asList(3, 3, 19, 19)),\n                s.factorize(3 * 19 * 3 * 19 * 3 * 19).equals(Arrays.asList(3, 3, 3, 19, 19, 19)),\n                s.factorize(3 * 19 * 19 * 19).equals(Arrays.asList(3, 19, 19, 19)),\n                s.factorize(3 * 2 * 3).equals(Arrays.asList(2, 3, 3))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/29", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<String> filter_by_prefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.filter_by_prefix(new ArrayList<>(List.of()), \"john\").equals(List.of()),\n                s.filter_by_prefix(new ArrayList<>(Arrays.asList(\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), \"xxx\").equals(Arrays.asList(\"xxx\", \"xxxAAA\", \"xxx\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/26", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> remove_duplicates(List<Integer> numbers) {\n        Map<Integer, Integer> countMap = new HashMap<>();\n        List<Integer> result = new ArrayList<>();\n        \n        for (Integer num : numbers) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n            if (countMap.get(num) == 1) {\n                result.add(num);\n            }\n        }\n        \n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.remove_duplicates(new ArrayList<>(List.of())).equals(List.of()),\n                s.remove_duplicates(new ArrayList<>(Arrays.asList(1, 2, 3, 4))).equals(Arrays.asList(1, 2, 3, 4)),\n                s.remove_duplicates(new ArrayList<>(Arrays.asList(1, 2, 3, 2, 4, 3, 5))).equals(Arrays.asList(1, 4, 5))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "failed: wrong answer", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "Java/31", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_prime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int k = 2; k < n; k++) {\n            if (n % k == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.is_prime(6),\n                s.is_prime(101),\n                s.is_prime(11),\n                s.is_prime(13441),\n                s.is_prime(61),\n                !s.is_prime(4),\n                !s.is_prime(1),\n                s.is_prime(5),\n                s.is_prime(11),\n                s.is_prime(17),\n                !s.is_prime(5 * 17),\n                !s.is_prime(11 * 7),\n                !s.is_prime(13441 * 19)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/34", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> uniqueSet = new HashSet<>(l);\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n        Collections.sort(uniqueList);\n        return uniqueList;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.unique(new ArrayList<>(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))).equals(Arrays.asList(0, 2, 3, 5, 9, 123))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/32", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n\n    public double find_zero(List<Double> xs) {\n        double begin = -1.0;\n        double end = 1.0;\n        while (poly(xs, begin) * poly(xs, end) > 0) {\n            begin *= 2.0;\n            end *= 2.0;\n        }\n        while (end - begin > 1e-10) {\n            double center = (begin + end) / 2.0;\n            if (poly(xs, center) * poly(xs, begin) > 0) {\n                begin = center;\n            } else {\n                end = center;\n            }\n        }\n        return begin;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        Random rand = new Random(42);\n        for (int i = 0; i < 100; i++) {\n            int ncoeff = 2 * (rand.nextInt(3) + 1);\n            List<Double> coeffs = new ArrayList<>();\n            for (int j = 0; j < ncoeff; j++) {\n                int coeff = rand.nextInt(20) - 10;\n                if (coeff == 0) {\n                    coeff = 1;\n                }\n                coeffs.add((double) coeff);\n            }\n            double solution = s.find_zero(coeffs);\n            if (Math.abs(s.poly(coeffs, solution)) > 1e-4) {\n                throw new AssertionError();\n            }\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/30", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> get_positive(List<Integer> l) {\n        return l.stream()\n                .filter(e -> e > 0)\n                .collect(Collectors.toList());\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.get_positive(new ArrayList<>(Arrays.asList(-1, -2, 4, 5, 6))).equals(Arrays.asList(4, 5, 6)),\n                s.get_positive(new ArrayList<>(Arrays.asList(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))).equals(Arrays.asList(5, 3, 2, 3, 3, 9, 123, 1)),\n                s.get_positive(new ArrayList<>(Arrays.asList(-1, -2))).equals(List.of()),\n                s.get_positive(List.of()).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/33", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<Integer> sort_third(List<Integer> l) {\n        List<Integer> sortedList = new ArrayList<>(l);\n        for (int i = 2; i < l.size(); i += 3) {\n            List<Integer> sublist = new ArrayList<>();\n            for (int j = i; j < l.size(); j += 3) {\n                sublist.add(l.get(j));\n            }\n            Collections.sort(sublist);\n            int index = 0;\n            for (int j = i; j < l.size(); j += 3) {\n                sortedList.set(j, sublist.get(index));\n                index++;\n            }\n        }\n        return sortedList;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sort_third(new ArrayList<>(Arrays.asList(5, 6, 3, 4, 8, 9, 2))).equals(Arrays.asList(2, 6, 3, 4, 8, 9, 5)),\n                s.sort_third(new ArrayList<>(Arrays.asList(5, 8, 3, 4, 6, 9, 2))).equals(Arrays.asList(2, 8, 3, 4, 6, 9, 5)),\n                s.sort_third(new ArrayList<>(Arrays.asList(5, 6, 9, 4, 8, 3, 2))).equals(Arrays.asList(2, 6, 9, 4, 8, 3, 5)),\n                s.sort_third(new ArrayList<>(Arrays.asList(5, 6, 3, 4, 8, 9, 2, 1))).equals(Arrays.asList(2, 6, 3, 4, 8, 9, 5, 1))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "failed: wrong answer", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "Java/35", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public int max_element(List<Integer> l) {\n        int m = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > m) {\n                m = l.get(i);\n            }\n        }\n        return m;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.max_element(new ArrayList<>(Arrays.asList(1, 2, 3))) == 3,\n                s.max_element(new ArrayList<>(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10))) == 124\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/39", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int prime_fib(int n) {\n        List<Integer> fibonacci = new ArrayList<>();\n        fibonacci.add(0);\n        fibonacci.add(1);\n        \n        while (true) {\n            int size = fibonacci.size();\n            fibonacci.add(fibonacci.get(size - 1) + fibonacci.get(size - 2));\n            if (isPrime(fibonacci.get(size))) {\n                n--;\n            }\n            if (n == 0) {\n                return fibonacci.get(size);\n            }\n        }\n    }\n    \n    public boolean isPrime(int num) {\n        if (num < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.min((int) Math.sqrt(num) + 1, num - 1); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.prime_fib(1) == 2,\n                s.prime_fib(2) == 3,\n                s.prime_fib(3) == 5,\n                s.prime_fib(4) == 13,\n                s.prime_fib(5) == 89,\n                s.prime_fib(6) == 233,\n                s.prime_fib(7) == 1597,\n                s.prime_fib(8) == 28657,\n                s.prime_fib(9) == 514229,\n                s.prime_fib(10) == 433494437\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/37", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<Integer> sort_even(List<Integer> l) {\n        List<Integer> evens = new ArrayList<>();\n        List<Integer> odds = new ArrayList<>();\n        \n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                evens.add(l.get(i));\n            } else {\n                odds.add(l.get(i));\n            }\n        }\n        \n        Collections.sort(evens);\n        \n        List<Integer> ans = new ArrayList<>();\n        int evenIndex = 0;\n        int oddIndex = 0;\n        \n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                ans.add(evens.get(evenIndex));\n                evenIndex++;\n            } else {\n                ans.add(odds.get(oddIndex));\n                oddIndex++;\n            }\n        }\n        \n        if (evens.size() > odds.size()) {\n            ans.add(evens.get(evens.size() - 1));\n        }\n        \n        return ans;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sort_even(new ArrayList<>(Arrays.asList(1, 2, 3))).equals(Arrays.asList(1, 2, 3)),\n                s.sort_even(new ArrayList<>(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))).equals(Arrays.asList(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)),\n                s.sort_even(new ArrayList<>(Arrays.asList(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))).equals(Arrays.asList(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "failed: wrong answer", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "Java/41", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int car_race_collision(int n) {\n        return n * n;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.car_race_collision(2) == 4,\n                s.car_race_collision(3) == 9,\n                s.car_race_collision(4) == 16,\n                s.car_race_collision(8) == 64,\n                s.car_race_collision(10) == 100\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/40", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public boolean triples_sum_to_zero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.triples_sum_to_zero(new ArrayList<>(Arrays.asList(1, 3, 5, 0))),\n                !s.triples_sum_to_zero(new ArrayList<>(Arrays.asList(1, 3, 5, -1))),\n                s.triples_sum_to_zero(new ArrayList<>(Arrays.asList(1, 3, -2, 1))),\n                !s.triples_sum_to_zero(new ArrayList<>(Arrays.asList(1, 2, 3, 7))),\n                !s.triples_sum_to_zero(new ArrayList<>(Arrays.asList(1, 2, 5, 7))),\n                s.triples_sum_to_zero(new ArrayList<>(Arrays.asList(2, 4, -5, 3, 9, 7))),\n                !s.triples_sum_to_zero(new ArrayList<>(Arrays.asList(1))),\n                !s.triples_sum_to_zero(new ArrayList<>(Arrays.asList(1, 3, 5, -100))),\n                !s.triples_sum_to_zero(new ArrayList<>(Arrays.asList(100, 3, 5, -100)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/38", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decode_cyclic(String s) {\n        return encodeCyclic(encodeCyclic(s));\n    }\n}\n\npublic class Main {\n    static char[] letters = \"abcdefghijklmnopqrstuvwxyz\".toCharArray();\n    static Random rand = new Random(42);\n    public static String random_string(int length) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < length; i++) {\n            sb.append(letters[rand.nextInt(26)]);\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        for (int i = 0; i < 100; i++) {\n            String str = random_string(rand.nextInt(10) + 10);\n            String encode_str = s.encodeCyclic(str);\n            if (!s.decode_cyclic(encode_str).equals(str)) {\n                throw new AssertionError();\n            }\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/44", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public String change_base(int x, int base) {\n        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            sb.insert(0, x % base);\n            x /= base;\n        }\n        return sb.toString();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.change_base(8, 3), \"22\"),\n                Objects.equals(s.change_base(9, 3), \"100\"),\n                Objects.equals(s.change_base(234, 2), \"11101010\"),\n                Objects.equals(s.change_base(16, 2), \"10000\"),\n                Objects.equals(s.change_base(8, 2), \"1000\"),\n                Objects.equals(s.change_base(7, 2), \"111\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n        for (int x = 2; x < 8; x++) {\n            if (!Objects.equals(s.change_base(x, x + 1), String.valueOf(x))) {\n                throw new AssertionError();\n            }\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/36", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public int fizz_buzz(int n) {\n        List<Integer> ns = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                ns.add(i);\n            }\n        }\n        String s = \"\";\n        for (int num : ns) {\n            s += num;\n        }\n        int ans = 0;\n        for (char c : s.toCharArray()) {\n            if (c == '7') {\n                ans++;\n            }\n        }\n        return ans;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.fizz_buzz(50) == 0,\n                s.fizz_buzz(78) == 2,\n                s.fizz_buzz(79) == 3,\n                s.fizz_buzz(100) == 3,\n                s.fizz_buzz(200) == 6,\n                s.fizz_buzz(4000) == 192,\n                s.fizz_buzz(10000) == 639,\n                s.fizz_buzz(100000) == 8026\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/42", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> incr_list(List<Integer> l) {\n        return l.stream().map(num -> num + 1).collect(Collectors.toList());\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.incr_list(new ArrayList<>(Arrays.asList())).equals(List.of()),\n                s.incr_list(new ArrayList<>(Arrays.asList(3, 2, 1))).equals(Arrays.asList(4, 3, 2)),\n                s.incr_list(new ArrayList<>(Arrays.asList(5, 2, 5, 2, 3, 3, 9, 0, 123))).equals(Arrays.asList(6, 3, 6, 3, 4, 4, 10, 1, 124))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/43", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public boolean pairs_sum_to_zero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(i) + l.get(j) == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.pairs_sum_to_zero(new ArrayList<>(Arrays.asList(1, 3, 5, 0))),\n                !s.pairs_sum_to_zero(new ArrayList<>(Arrays.asList(1, 3, -2, 1))),\n                !s.pairs_sum_to_zero(new ArrayList<>(Arrays.asList(1, 2, 3, 7))),\n                s.pairs_sum_to_zero(new ArrayList<>(Arrays.asList(2, 4, -5, 3, 5, 7))),\n                !s.pairs_sum_to_zero(new ArrayList<>(List.of(1))),\n                s.pairs_sum_to_zero(new ArrayList<>(Arrays.asList(-3, 9, -1, 3, 2, 30))),\n                s.pairs_sum_to_zero(new ArrayList<>(Arrays.asList(-3, 9, -1, 3, 2, 31))),\n                !s.pairs_sum_to_zero(new ArrayList<>(Arrays.asList(-3, 9, -1, 4, 2, 30))),\n                !s.pairs_sum_to_zero(new ArrayList<>(Arrays.asList(-3, 9, -1, 4, 2, 31)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/45", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangle_area(double a, double h) {\n        return a * h / 2.0;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.triangle_area(5, 3) == 7.5,\n                s.triangle_area(2, 2) == 2.0,\n                s.triangle_area(10, 8) == 40.0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/46", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public int fib4(int n) {\n        List<Integer> results = new ArrayList<>(List.of(0, 0, 2, 0));\n        if (n < 4) {\n            return results.get(n);\n        }\n\n        for (int i = 4; i <= n; i++) {\n            int next = results.get(3) + results.get(2) + results.get(1) + results.get(0);\n            results.add(next);\n            results.remove(0);\n        }\n\n        return results.get(3);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.fib4(5) == 4,\n                s.fib4(8) == 28,\n                s.fib4(10) == 104,\n                s.fib4(12) == 386\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/47", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 1) {\n            return l.get(n / 2);\n        } else {\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.median(new ArrayList<>(Arrays.asList(3, 1, 2, 4, 5))) == 3,\n                s.median(new ArrayList<>(Arrays.asList(-10, 4, 6, 1000, 10, 20))) == 8.0,\n                s.median(new ArrayList<>(Arrays.asList(5))) == 5,\n                s.median(new ArrayList<>(Arrays.asList(6, 5))) == 5.5\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/48", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public boolean is_palindrome(String text) {\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) != text.charAt(text.length() - 1 - i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.is_palindrome(\"\"),\n                s.is_palindrome(\"aba\"),\n                s.is_palindrome(\"aaaaa\"),\n                !s.is_palindrome(\"zbcd\"),\n                s.is_palindrome(\"xywyx\"),\n                !s.is_palindrome(\"xywyz\"),\n                !s.is_palindrome(\"xywzx\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/50", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decode_shift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26)));\n        }\n        return sb.toString();\n    }\n}\n\npublic class Main {\n    static char[] letters = \"abcdefghijklmnopqrstuvwxyz\".toCharArray();\n    static Random rand = new Random(42);\n\n    public static String random_string(int length) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < length; i++) {\n            sb.append(letters[rand.nextInt(26)]);\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        for (int i = 0; i < 100; i++) {\n            String str = random_string(rand.nextInt(10) + 10);\n            String encode_str = s.encodeShift(str);\n            if (!s.decode_shift(encode_str).equals(str)) {\n                throw new AssertionError();\n            }\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/49", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int modp(int n, int p) {\n        int ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret = (2 * ret) % p;\n        }\n        return ret;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.modp(3, 5) == 3,\n                s.modp(1101, 101) == 2,\n                s.modp(0, 101) == 1,\n                s.modp(3, 11) == 8,\n                s.modp(100, 101) == 1,\n                s.modp(30, 5) == 4,\n                s.modp(31, 5) == 3\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/51", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public String remove_vowels(String text) {\n        StringBuilder result = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (!\"aeiouAEIOU\".contains(String.valueOf(c))) {\n                result.append(c);\n            }\n        }\n        return result.toString();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.remove_vowels(\"\"), \"\"),\n                Objects.equals(s.remove_vowels(\"abcdef\\nghijklm\"), \"bcdf\\nghjklm\"),\n                Objects.equals(s.remove_vowels(\"fedcba\"), \"fdcb\"),\n                Objects.equals(s.remove_vowels(\"eeeee\"), \"\"),\n                Objects.equals(s.remove_vowels(\"acBAA\"), \"cB\"),\n                Objects.equals(s.remove_vowels(\"EcBOO\"), \"cB\"),\n                Objects.equals(s.remove_vowels(\"ybcd\"), \"ybcd\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/53", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add(int x, int y) {\n        return x + y;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        Random rand = new Random(42);\n        List<Boolean> correct = Arrays.asList(\n                s.add(0, 1) == 1,\n                s.add(1, 0) == 1,\n                s.add(2, 3) == 5,\n                s.add(5, 7) == 12,\n                s.add(7, 5) == 12\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n        for (int i = 0; i < 100; i++) {\n            int x = rand.nextInt(1000), y = rand.nextInt(1000);\n            if (s.add(x, y) != x + y) {\n                throw new AssertionError();\n            }\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/52", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public boolean below_threshold(List<Integer> l, int t) {\n        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.below_threshold(new ArrayList<>(Arrays.asList(1, 2, 4, 10)), 100),\n                !s.below_threshold(new ArrayList<>(Arrays.asList(1, 20, 4, 10)), 5),\n                s.below_threshold(new ArrayList<>(Arrays.asList(1, 20, 4, 10)), 21),\n                s.below_threshold(new ArrayList<>(Arrays.asList(1, 20, 4, 10)), 22),\n                s.below_threshold(new ArrayList<>(Arrays.asList(1, 8, 4, 10)), 11),\n                !s.below_threshold(new ArrayList<>(Arrays.asList(1, 8, 4, 10)), 10)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/56", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public boolean correct_bracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<') {\n                depth++;\n            } else {\n                depth--;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.correct_bracketing(\"<>\"),\n                s.correct_bracketing(\"<<><>>\"),\n                s.correct_bracketing(\"<><><<><>><>\"),\n                s.correct_bracketing(\"<><><<<><><>><>><<><><<>>>\"),\n                !s.correct_bracketing(\"<<<><>>>>\"),\n                !s.correct_bracketing(\"><<>\"),\n                !s.correct_bracketing(\"<\"),\n                !s.correct_bracketing(\"<<<<\"),\n                !s.correct_bracketing(\">\"),\n                !s.correct_bracketing(\"<<>\"),\n                !s.correct_bracketing(\"<><><<><>><>><<>\"),\n                !s.correct_bracketing(\"<><><<><>><>>><>\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/54", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public boolean same_chars(String s0, String s1) {\n        Set<Character> set1 = new HashSet<>();\n        Set<Character> set2 = new HashSet<>();\n        \n        for (char c : s0.toCharArray()) {\n            set1.add(c);\n        }\n        \n        for (char c : s1.toCharArray()) {\n            set2.add(c);\n        }\n        \n        return set1.equals(set2);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\n                s.same_chars(\"abcd\", \"dddddddabc\"),\n                s.same_chars(\"dddddddabc\", \"abcd\"),\n                !s.same_chars(\"eabcd\", \"dddddddabc\"),\n                !s.same_chars(\"abcd\", \"dddddddabcf\"),\n                !s.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"),\n                !s.same_chars(\"aabb\", \"aaccc\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/55", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.fib(10) == 55,\n                s.fib(1) == 1,\n                s.fib(8) == 21,\n                s.fib(11) == 89,\n                s.fib(12) == 144\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/57", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public boolean monotonic(List<Integer> l) {\n        List<Integer> increasing = new ArrayList<>(l);\n        List<Integer> decreasing = new ArrayList<>(l);\n        Collections.sort(increasing);\n        Collections.sort(decreasing, Collections.reverseOrder());\n        \n        if (l.equals(increasing) || l.equals(decreasing)) {\n            return true;\n        }\n        return false;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.monotonic(new ArrayList<>(Arrays.asList(1, 2, 4, 10))),\n                s.monotonic(new ArrayList<>(Arrays.asList(1, 2, 4, 20))),\n                !s.monotonic(new ArrayList<>(Arrays.asList(1, 20, 4, 10))),\n                s.monotonic(new ArrayList<>(Arrays.asList(4, 1, 0, -10))),\n                s.monotonic(new ArrayList<>(Arrays.asList(4, 1, 1, 0))),\n                !s.monotonic(new ArrayList<>(Arrays.asList(1, 2, 3, 2, 5, 60))),\n                s.monotonic(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 60))),\n                s.monotonic(new ArrayList<>(Arrays.asList(9, 9, 9, 9)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/59", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public int largest_prime_factor(int n) {\n        int largest = 1;\n        for (int j = 2; j <= n; j++) {\n            if (n % j == 0 && isPrime(j)) {\n                largest = Math.max(largest, j);\n            }\n        }\n        return largest;\n    }\n\n    private boolean isPrime(int k) {\n        if (k < 2) {\n            return false;\n        }\n        for (int i = 2; i < k; i++) {\n            if (k % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.largest_prime_factor(15) == 5,\n                s.largest_prime_factor(27) == 3,\n                s.largest_prime_factor(63) == 7,\n                s.largest_prime_factor(330) == 11,\n                s.largest_prime_factor(13195) == 29\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/58", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set = new HashSet<>();\n        List<Integer> result = new ArrayList<>();\n        \n        for (Integer e1 : l1) {\n            for (Integer e2 : l2) {\n                if (e1.equals(e2)) {\n                    set.add(e1);\n                }\n            }\n        }\n        \n        result.addAll(set);\n        Collections.sort(result);\n        \n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.common(new ArrayList<>(Arrays.asList(1, 4, 3, 34, 653, 2, 5)), new ArrayList<>(Arrays.asList(5, 7, 1, 5, 9, 653, 121))).equals(Arrays.asList(1, 5, 653)),\n                s.common(new ArrayList<>(Arrays.asList(5, 3, 2, 8)), new ArrayList<>(Arrays.asList(3, 2))).equals(Arrays.asList(2, 3)),\n                s.common(new ArrayList<>(Arrays.asList(4, 3, 2, 8)), new ArrayList<>(Arrays.asList(3, 2, 4))).equals(Arrays.asList(2, 3, 4)),\n                s.common(new ArrayList<>(Arrays.asList(4, 3, 2, 8)), new ArrayList<>(List.of())).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/61", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public boolean correct_bracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '(') {\n                depth++;\n            } else {\n                depth--;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.correct_bracketing(\"()\"),\n                s.correct_bracketing(\"(()())\"),\n                s.correct_bracketing(\"()()(()())()\"),\n                s.correct_bracketing(\"()()((()()())())(()()(()))\"),\n                !s.correct_bracketing(\"((()())))\"),\n                !s.correct_bracketing(\")(()\"),\n                !s.correct_bracketing(\"(\"),\n                !s.correct_bracketing(\"((((\"),\n                !s.correct_bracketing(\")\"),\n                !s.correct_bracketing(\"(()\"),\n                !s.correct_bracketing(\"()()(()())())(()\"),\n                !s.correct_bracketing(\"()()(()())()))()\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/60", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sum_to_n(int n) {\n        return n * (n + 1) / 2;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sum_to_n(1) == 1,\n                s.sum_to_n(6) == 21,\n                s.sum_to_n(11) == 66,\n                s.sum_to_n(30) == 465,\n                s.sum_to_n(100) == 5050\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/62", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.derivative(new ArrayList<>(Arrays.asList(3, 1, 2, 4, 5))).equals(Arrays.asList(1, 4, 12, 20)),\n                s.derivative(new ArrayList<>(Arrays.asList(1, 2, 3))).equals(Arrays.asList(2, 6)),\n                s.derivative(new ArrayList<>(Arrays.asList(3, 2, 1))).equals(Arrays.asList(2, 2)),\n                s.derivative(new ArrayList<>(Arrays.asList(3, 2, 1, 0, 4))).equals(Arrays.asList(2, 2, 0, 16)),\n                s.derivative(List.of(1)).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/63", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int[] fibfib = new int[n + 1];\n        fibfib[0] = 0;\n        fibfib[1] = 0;\n        fibfib[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n        }\n        return fibfib[n];\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.fibfib(2) == 1,\n                s.fibfib(1) == 0,\n                s.fibfib(5) == 4,\n                s.fibfib(8) == 24,\n                s.fibfib(10) == 81,\n                s.fibfib(12) == 274,\n                s.fibfib(14) == 927\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/64", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public int vowels_count(String s) {\n        String vowels = \"aeiouAEIOU\";\n        int n_vowels = 0;\n        for (char c : s.toCharArray()) {\n            if (vowels.contains(String.valueOf(c))) {\n                n_vowels++;\n            }\n        }\n        if (s.endsWith(\"y\") || s.endsWith(\"Y\")) {\n            n_vowels++;\n        }\n        return n_vowels;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.vowels_count(\"abcde\") == 2,\n                s.vowels_count(\"Alone\") == 3,\n                s.vowels_count(\"key\") == 2,\n                s.vowels_count(\"bye\") == 1,\n                s.vowels_count(\"keY\") == 2,\n                s.vowels_count(\"bYe\") == 1,\n                s.vowels_count(\"ACEDY\") == 3\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/65", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String circular_shift(int x, int shift) {\n        String s = String.valueOf(x);\n        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n        } else {\n            return s.substring(s.length() - shift) + s.substring(0, s.length() - shift);\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.circular_shift(100, 2).equals(\"001\"),\n                s.circular_shift(12, 2).equals(\"12\"),\n                s.circular_shift(97, 8).equals(\"79\"),\n                s.circular_shift(12, 1).equals(\"21\"),\n                s.circular_shift(11, 101).equals(\"11\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/66", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public int digitSum(String s) {\n        if (s.isEmpty()) {\n            return 0;\n        }\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        return sum;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.digitSum(\"\") == 0,\n                s.digitSum(\"abAB\") == 131,\n                s.digitSum(\"abcCd\") == 67,\n                s.digitSum(\"helloE\") == 69,\n                s.digitSum(\"woArBld\") == 131,\n                s.digitSum(\"aAaaaXa\") == 153,\n                s.digitSum(\" How are yOu?\") == 151,\n                s.digitSum(\"You arE Very Smart\") == 327\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/67", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public int fruit_distribution(String s, int n) {\n        List<Integer> numbers = new ArrayList<>();\n        for (String str : s.split(\" \")) {\n            if (str.matches(\"\\\\d+\")) {\n                numbers.add(Integer.parseInt(str));\n            }\n        }\n        \n        int sum = 0;\n        for (int num : numbers) {\n            sum += num;\n        }\n        \n        return n - sum;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.fruit_distribution(\"5 apples and 6 oranges\",19) == 8,\n                s.fruit_distribution(\"5 apples and 6 oranges\",21) == 10,\n                s.fruit_distribution(\"0 apples and 1 oranges\",3) == 2,\n                s.fruit_distribution(\"1 apples and 0 oranges\",3) == 2,\n                s.fruit_distribution(\"2 apples and 3 oranges\",100) == 95,\n                s.fruit_distribution(\"2 apples and 3 oranges\",5) == 0,\n                s.fruit_distribution(\"1 apples and 100 oranges\",120) == 19\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/71", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangle_area(double a, double b, double c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        double s = (a + b + c) / 2;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        area = Math.round(area * 100.0) / 100.0;\n        return area;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.triangle_area(3, 4, 5) == 6.00,\n                s.triangle_area(1, 2, 10) == -1,\n                s.triangle_area(4, 8, 5) == 8.18,\n                s.triangle_area(2, 2, 2) == 1.73,\n                s.triangle_area(1, 2, 3) == -1,\n                s.triangle_area(10, 5, 7) == 16.25,\n                s.triangle_area(2, 6, 3) == -1,\n                s.triangle_area(1, 1, 1) == 0.43,\n                s.triangle_area(2, 2, 10) == -1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/68", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return result;\n        }\n\n        List<Integer> evens = new ArrayList<>();\n        for (int num : arr) {\n            if (num % 2 == 0) {\n                evens.add(num);\n            }\n        }\n\n        if (evens.isEmpty()) {\n            return result;\n        }\n\n        int minEven = Collections.min(evens);\n        int index = arr.indexOf(minEven);\n\n        result.add(minEven);\n        result.add(index);\n\n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.pluck(new ArrayList<>(Arrays.asList(4, 2, 3))).equals(Arrays.asList(2, 1)),\n                s.pluck(new ArrayList<>(Arrays.asList(1, 2, 3))).equals(Arrays.asList(2, 1)),\n                s.pluck(new ArrayList<>(List.of())).equals(List.of()),\n                s.pluck(new ArrayList<>(Arrays.asList(5, 0, 3, 0, 4, 2))).equals(Arrays.asList(0, 1)),\n                s.pluck(new ArrayList<>(Arrays.asList(1, 2, 3, 0, 5, 3))).equals(Arrays.asList(0, 3)),\n                s.pluck(new ArrayList<>(Arrays.asList(5, 4, 8, 4, 8))).equals(Arrays.asList(4, 1)),\n                s.pluck(new ArrayList<>(Arrays.asList(7, 6, 7, 1))).equals(Arrays.asList(6, 1)),\n                s.pluck(new ArrayList<>(Arrays.asList(7, 9, 7, 1))).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/69", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public int search(List<Integer> lst) {\n        int maxVal = Collections.max(lst);\n        int[] frq = new int[maxVal + 1];\n        \n        for (int i : lst) {\n            frq[i]++;\n        }\n\n        int ans = -1;\n        for (int i = 1; i < frq.length; i++) {\n            if (frq[i] >= i) {\n                ans = i;\n            }\n        }\n        \n        return ans;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.search(new ArrayList<>(Arrays.asList(5, 5, 5, 5, 1))) == 1,\n                s.search(new ArrayList<>(Arrays.asList(4, 1, 4, 1, 4, 4))) == 4,\n                s.search(new ArrayList<>(Arrays.asList(3, 3))) == -1,\n                s.search(new ArrayList<>(Arrays.asList(8, 8, 8, 8, 8, 8, 8, 8))) == 8,\n                s.search(new ArrayList<>(Arrays.asList(2, 3, 3, 2, 2))) == 2,\n                s.search(new ArrayList<>(Arrays.asList(2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1))) == 1,\n                s.search(new ArrayList<>(Arrays.asList(3, 2, 8, 2))) == 2,\n                s.search(new ArrayList<>(Arrays.asList(6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10))) == 1,\n                s.search(new ArrayList<>(Arrays.asList(8, 8, 3, 6, 5, 6, 4))) == -1,\n                s.search(new ArrayList<>(Arrays.asList(6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9))) == 1,\n                s.search(new ArrayList<>(Arrays.asList(1, 9, 10, 1, 3))) == 1,\n                s.search(new ArrayList<>(Arrays.asList(6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10))) == 5,\n                s.search(new ArrayList<>(List.of(1))) == 1,\n                s.search(new ArrayList<>(Arrays.asList(8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5))) == 4,\n                s.search(new ArrayList<>(Arrays.asList(2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10))) == 2,\n                s.search(new ArrayList<>(Arrays.asList(1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3))) == 1,\n                s.search(new ArrayList<>(Arrays.asList(9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4))) == 4,\n                s.search(new ArrayList<>(Arrays.asList(2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7))) == 4,\n                s.search(new ArrayList<>(Arrays.asList(9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1))) == 2,\n                s.search(new ArrayList<>(Arrays.asList(5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8))) == -1,\n                s.search(new ArrayList<>(List.of(10))) == -1,\n                s.search(new ArrayList<>(Arrays.asList(9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2))) == 2,\n                s.search(new ArrayList<>(Arrays.asList(5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8))) == 1,\n                s.search(new ArrayList<>(Arrays.asList(7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6))) == 1,\n                s.search(new ArrayList<>(Arrays.asList(3, 10, 10, 9, 2))) == -1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/73", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public int smallest_change(List<Integer> arr) {\n        int ans = 0;\n        for (int i = 0; i < arr.size() / 2; i++) {\n            if (!arr.get(i).equals(arr.get(arr.size() - i - 1))) {\n                ans++;\n            }\n        }\n        return ans;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.smallest_change(new ArrayList<>(Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6))) == 4,\n                s.smallest_change(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 3, 2, 2))) == 1,\n                s.smallest_change(new ArrayList<>(Arrays.asList(1, 4, 2))) == 1,\n                s.smallest_change(new ArrayList<>(Arrays.asList(1, 4, 4, 2))) == 1,\n                s.smallest_change(new ArrayList<>(Arrays.asList(1, 2, 3, 2, 1))) == 0,\n                s.smallest_change(new ArrayList<>(Arrays.asList(3, 1, 1, 3))) == 0,\n                s.smallest_change(new ArrayList<>(List.of(1))) == 0,\n                s.smallest_change(new ArrayList<>(Arrays.asList(0, 1))) == 1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/70", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> res = new ArrayList<>();\n        boolean switchVal = true;\n        \n        while (!lst.isEmpty()) {\n            if (switchVal) {\n                int minVal = Collections.min(lst);\n                res.add(minVal);\n                lst.remove(Integer.valueOf(minVal));\n            } else {\n                int maxVal = Collections.max(lst);\n                res.add(maxVal);\n                lst.remove(Integer.valueOf(maxVal));\n            }\n            switchVal = !switchVal;\n        }\n        \n        return res;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.strange_sort_list(new ArrayList<>(Arrays.asList(1, 2, 3, 4))).equals(Arrays.asList(1, 4, 2, 3)),\n                s.strange_sort_list(new ArrayList<>(Arrays.asList(5, 6, 7, 8, 9))).equals(Arrays.asList(5, 9, 6, 8, 7)),\n                s.strange_sort_list(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5))).equals(Arrays.asList(1, 5, 2, 4, 3)),\n                s.strange_sort_list(new ArrayList<>(Arrays.asList(5, 6, 7, 8, 9, 1))).equals(Arrays.asList(1, 9, 5, 8, 6, 7)),\n                s.strange_sort_list(new ArrayList<>(Arrays.asList(5, 5, 5, 5))).equals(Arrays.asList(5, 5, 5, 5)),\n                s.strange_sort_list(new ArrayList<>(List.of())).equals(List.of()),\n                s.strange_sort_list(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8))).equals(Arrays.asList(1, 8, 2, 7, 3, 6, 4, 5)),\n                s.strange_sort_list(new ArrayList<>(Arrays.asList(0, 2, 2, 2, 5, 5, -5, -5))).equals(Arrays.asList(-5, 5, -5, 5, 0, 2, 2, 2)),\n                s.strange_sort_list(new ArrayList<>(List.of(111111))).equals(List.of(111111))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/72", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public boolean will_it_fly(List<Integer> q, int w) {\n        if (q.stream().mapToInt(Integer::intValue).sum() > w) {\n            return false;\n        }\n\n        int i = 0;\n        int j = q.size() - 1;\n        while (i < j) {\n            if (!q.get(i).equals(q.get(j))) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.will_it_fly(new ArrayList<>(Arrays.asList(3, 2, 3)), 9),\n                !s.will_it_fly(new ArrayList<>(Arrays.asList(1, 2)), 5),\n                s.will_it_fly(new ArrayList<>(List.of(3)), 5),\n                !s.will_it_fly(new ArrayList<>(Arrays.asList(3, 2, 3)), 1),\n                !s.will_it_fly(new ArrayList<>(Arrays.asList(1, 2, 3)), 6),\n                s.will_it_fly(new ArrayList<>(List.of(5)), 5)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/75", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public boolean is_multiply_prime(int a) {\n        boolean[] isPrime = new boolean[101];\n        Arrays.fill(isPrime, true);\n        for (int i = 2; i <= 100; i++) {\n            if (isPrime[i]) {\n                for (int j = i * i; j <= 100; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n\n        for (int i = 2; i <= 100; i++) {\n            if (!isPrime[i]) continue;\n            for (int j = 2; j <= 100; j++) {\n                if (!isPrime[j]) continue;\n                for (int k = 2; k <= 100; k++) {\n                    if (!isPrime[k]) continue;\n                    if (i * j * k == a) return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.is_multiply_prime(5),\n                s.is_multiply_prime(30),\n                s.is_multiply_prime(8),\n                !s.is_multiply_prime(10),\n                s.is_multiply_prime(125),\n                s.is_multiply_prime(3 * 5 * 7),\n                !s.is_multiply_prime(3 * 6 * 7),\n                !s.is_multiply_prime(9 * 9 * 9),\n                !s.is_multiply_prime(11 * 9 * 9),\n                s.is_multiply_prime(11 * 13 * 7)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/77", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean iscube(int a) {\n        a = Math.abs(a);\n        int cubeRoot = (int) Math.round(Math.pow(a, 1.0 / 3));\n        return cubeRoot * cubeRoot * cubeRoot == a;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.iscube(1),\n                !s.iscube(2),\n                s.iscube(-1),\n                s.iscube(64),\n                !s.iscube(180),\n                s.iscube(1000),\n                s.iscube(0),\n                !s.iscube(1729)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/76", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_simple_power(int x, int n) {\n        if (n == 1) {\n            return x == 1;\n        }\n        int power = 1;\n        while (power < x) {\n            power = power * n;\n        }\n        return power == x;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.is_simple_power(1, 4),\n                s.is_simple_power(2, 2),\n                s.is_simple_power(8, 2),\n                !s.is_simple_power(3, 2),\n                !s.is_simple_power(3, 1),\n                !s.is_simple_power(5, 3),\n                s.is_simple_power(16, 2),\n                !s.is_simple_power(143214, 16),\n                s.is_simple_power(4, 2),\n                s.is_simple_power(9, 3),\n                s.is_simple_power(16, 4),\n                !s.is_simple_power(24, 2),\n                !s.is_simple_power(128, 4),\n                !s.is_simple_power(12, 6),\n                s.is_simple_power(1, 1),\n                s.is_simple_power(1, 12)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/74", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<String> total_match(List<String> lst1, List<String> lst2) {\n        int l1 = 0;\n        for (String st : lst1) {\n            l1 += st.length();\n        }\n\n        int l2 = 0;\n        for (String st : lst2) {\n            l2 += st.length();\n        }\n\n        if (l1 <= l2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.total_match(new ArrayList<>(List.of()), new ArrayList<>(List.of())).equals(List.of()),\n                s.total_match(new ArrayList<>(Arrays.asList(\"hi\", \"admin\")), new ArrayList<>(Arrays.asList(\"hi\", \"hi\"))).equals(Arrays.asList(\"hi\", \"hi\")),\n                s.total_match(new ArrayList<>(Arrays.asList(\"hi\", \"admin\")), new ArrayList<>(Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\"))).equals(Arrays.asList(\"hi\", \"admin\")),\n                s.total_match(new ArrayList<>(List.of(\"4\")), new ArrayList<>(Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"))).equals(List.of(\"4\")),\n                s.total_match(new ArrayList<>(Arrays.asList(\"hi\", \"admin\")), new ArrayList<>(Arrays.asList(\"hI\", \"Hi\"))).equals(Arrays.asList(\"hI\", \"Hi\")),\n                s.total_match(new ArrayList<>(Arrays.asList(\"hi\", \"admin\")), new ArrayList<>(Arrays.asList(\"hI\", \"hi\", \"hi\"))).equals(Arrays.asList(\"hI\", \"hi\", \"hi\")),\n                s.total_match(new ArrayList<>(Arrays.asList(\"hi\", \"admin\")), new ArrayList<>(Arrays.asList(\"hI\", \"hi\", \"hii\"))).equals(Arrays.asList(\"hi\", \"admin\")),\n                s.total_match(new ArrayList<>(List.of()), new ArrayList<>(List.of(\"this\"))).equals(List.of()),\n                s.total_match(new ArrayList<>(List.of(\"this\")), new ArrayList<>(List.of())).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/78", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public int hex_key(String num) {\n        char[] primes = {'2', '3', '5', '7', 'B', 'D'};\n        int total = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (new String(primes).indexOf(num.charAt(i)) != -1) {\n                total++;\n            }\n        }\n        return total;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.hex_key(\"AB\") == 1,\n                s.hex_key(\"1077E\") == 2,\n                s.hex_key(\"ABED1A33\") == 4,\n                s.hex_key(\"2020\") == 2,\n                s.hex_key(\"123456789ABCDEF0\") == 6,\n                s.hex_key(\"112233445566778899AABBCCDDEEFF00\") == 12,\n                s.hex_key(\"\") == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/79", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public String decimal_to_binary(int decimal) {\n        String binary = Integer.toBinaryString(decimal);\n        return \"db\" + binary + \"db\";\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.decimal_to_binary(0), \"db0db\"),\n                Objects.equals(s.decimal_to_binary(32), \"db100000db\"),\n                Objects.equals(s.decimal_to_binary(103), \"db1100111db\"),\n                Objects.equals(s.decimal_to_binary(15), \"db1111db\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/80", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public boolean is_happy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2) || s.charAt(i) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.is_happy(\"a\"),\n                !s.is_happy(\"aa\"),\n                s.is_happy(\"abcd\"),\n                !s.is_happy(\"aabb\"),\n                s.is_happy(\"adb\"),\n                !s.is_happy(\"xyy\"),\n                s.is_happy(\"iopaxpoi\"),\n                !s.is_happy(\"iopaxioi\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/83", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public int starts_one_ends(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        return 18 * (int) Math.pow(10, n - 2);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.starts_one_ends(1) == 1,\n                s.starts_one_ends(2) == 18,\n                s.starts_one_ends(3) == 180,\n                s.starts_one_ends(4) == 1800,\n                s.starts_one_ends(5) == 18000\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/81", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<String> numerical_letter_grade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double gpa : grades) {\n            if (gpa == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.numerical_letter_grade(new ArrayList<>(Arrays.asList(4.0, 3.0, 1.7, 2.0, 3.5))).equals(Arrays.asList(\"A+\", \"B\", \"C-\", \"C\", \"A-\")),\n                s.numerical_letter_grade(new ArrayList<>(List.of(1.2))).equals(List.of(\"D+\")),\n                s.numerical_letter_grade(new ArrayList<>(List.of(0.5))).equals(List.of(\"D-\")),\n                s.numerical_letter_grade(new ArrayList<>(List.of(0.0))).equals(List.of(\"E\")),\n                s.numerical_letter_grade(new ArrayList<>(Arrays.asList(1.0, 0.3, 1.5, 2.8, 3.3))).equals(Arrays.asList(\"D\", \"D-\", \"C-\", \"B\", \"B+\")),\n                s.numerical_letter_grade(new ArrayList<>(Arrays.asList(0.0, 0.7))).equals(Arrays.asList(\"E\", \"D-\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/82", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public boolean prime_length(String string) {\n        int length = string.length();\n        if (length == 0 || length == 1) {\n            return false;\n        }\n        for (int i = 2; i < length; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.prime_length(\"Hello\") == true,\n                s.prime_length(\"abcdcba\") == true,\n                s.prime_length(\"kittens\") == true,\n                s.prime_length(\"orange\") == false,\n                s.prime_length(\"wow\") == true,\n                s.prime_length(\"world\") == true,\n                s.prime_length(\"MadaM\") == true,\n                s.prime_length(\"Wow\") == true,\n                s.prime_length(\"\") == false,\n                s.prime_length(\"HI\") == true,\n                s.prime_length(\"go\") == true,\n                s.prime_length(\"gogo\") == false,\n                s.prime_length(\"aaaaaaaaaaaaaaa\") == false,\n                s.prime_length(\"Madam\") == true,\n                s.prime_length(\"M\") == false,\n                s.prime_length(\"0\") == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/85", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.add(new ArrayList<>(Arrays.asList(4, 88))) == 88,\n                s.add(new ArrayList<>(Arrays.asList(4, 5, 6, 7, 2, 122))) == 122,\n                s.add(new ArrayList<>(Arrays.asList(4, 0, 6, 7))) == 0,\n                s.add(new ArrayList<>(Arrays.asList(4, 4, 6, 8))) == 12\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/86", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public String anti_shuffle(String s) {\n        String[] words = s.split(\" \");\n        StringBuilder result = new StringBuilder();\n        \n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            result.append(chars).append(\" \");\n        }\n        \n        return result.toString().trim();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.anti_shuffle(\"Hi\"), \"Hi\"),\n                Objects.equals(s.anti_shuffle(\"hello\"), \"ehllo\"),\n                Objects.equals(s.anti_shuffle(\"number\"), \"bemnru\"),\n                Objects.equals(s.anti_shuffle(\"abcd\"), \"abcd\"),\n                Objects.equals(s.anti_shuffle(\"Hello World!!!\"), \"Hello !!!Wdlor\"),\n                Objects.equals(s.anti_shuffle(\"\"), \"\"),\n                Objects.equals(s.anti_shuffle(\"Hi. My name is Mister Robot. How are you?\"), \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/84", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public String solve(int N) {\n        int sum = 0;\n        int num = N;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return Integer.toBinaryString(sum);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.solve(1000), \"1\"),\n                Objects.equals(s.solve(150), \"110\"),\n                Objects.equals(s.solve(147), \"1100\"),\n                Objects.equals(s.solve(333), \"1001\"),\n                Objects.equals(s.solve(963), \"10010\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/88", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> array) {\n        if (array.isEmpty()) {\n            return new ArrayList<>();\n        } else {\n            List<Integer> sortedArray = new ArrayList<>(array);\n            if ((array.get(0) + array.get(array.size() - 1)) % 2 == 1) {\n                Collections.sort(sortedArray);\n            } else {\n                Collections.sort(sortedArray, Collections.reverseOrder());\n            }\n            return sortedArray;\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sort_array(new ArrayList<>(List.of())).equals(List.of()),\n                s.sort_array(new ArrayList<>(List.of(5))).equals(List.of(5)),\n                s.sort_array(new ArrayList<>(Arrays.asList(2, 4, 3, 0, 1, 5))).equals(Arrays.asList(0, 1, 2, 3, 4, 5)),\n                s.sort_array(new ArrayList<>(Arrays.asList(2, 4, 3, 0, 1, 5, 6))).equals(Arrays.asList(6, 5, 4, 3, 2, 1, 0)),\n                s.sort_array(new ArrayList<>(Arrays.asList(2, 1))).equals(Arrays.asList(1, 2)),\n                s.sort_array(new ArrayList<>(Arrays.asList(15, 42, 87, 32 ,11, 0))).equals(Arrays.asList(0, 11, 15, 32, 42, 87)),\n                s.sort_array(new ArrayList<>(Arrays.asList(21, 14, 23, 11))).equals(Arrays.asList(23, 21, 14, 11))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/92", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean any_int(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int num1 = (int) x;\n            int num2 = (int) y;\n            int num3 = (int) z;\n            if (num1 + num2 == num3 || num1 + num3 == num2 || num2 + num3 == num1) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.any_int(2, 3, 1) == true,\n                s.any_int(2.5, 2, 3) == false,\n                s.any_int(1.5, 5, 3.5) == false,\n                s.any_int(2, 6, 2) == false,\n                s.any_int(4, 2, 2) == true,\n                s.any_int(2.2, 2.2, 2.2) == false,\n                s.any_int(-4, 6, 2) == true,\n                s.any_int(2, 1, 1) == true,\n                s.any_int(3, 4, 7) == true,\n                s.any_int(3.0, 4, 7) == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/91", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public int is_bored(String S) {\n        String[] sentences = S.split(\"[.?!]\\\\s*\");\n        int count = 0;\n        for (String sentence : sentences) {\n            if (sentence.startsWith(\"I \")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.is_bored(\"Hello world\") == 0,\n                s.is_bored(\"Is the sky blue?\") == 0,\n                s.is_bored(\"I love It !\") == 1,\n                s.is_bored(\"bIt\") == 0,\n                s.is_bored(\"I feel good today. I will be productive. will kill It\") == 2,\n                s.is_bored(\"You and I are going for a walk\") == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/89", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encrypt(String s) {\n        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        StringBuilder encrypted = new StringBuilder();\n        \n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                int index = alphabet.indexOf(c);\n                int newIndex = (index + 2 * 2) % 26;\n                encrypted.append(alphabet.charAt(newIndex));\n            } else {\n                encrypted.append(c);\n            }\n        }\n        \n        return encrypted.toString();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.encrypt(\"hi\"), \"lm\"),\n                Objects.equals(s.encrypt(\"asdfghjkl\"), \"ewhjklnop\"),\n                Objects.equals(s.encrypt(\"gf\"), \"kj\"),\n                Objects.equals(s.encrypt(\"et\"), \"ix\"),\n                Objects.equals(s.encrypt(\"faewfawefaewg\"), \"jeiajeaijeiak\"),\n                Objects.equals(s.encrypt(\"hellomyfriend\"), \"lippsqcjvmirh\"),\n                Objects.equals(s.encrypt(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"),\n                Objects.equals(s.encrypt(\"a\"), \"e\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/93", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public String encode(String message) {\n        String vowels = \"aeiouAEIOU\";\n        Map<Character, Character> vowelsReplace = new HashMap<>();\n        for (char c : vowels.toCharArray()) {\n            vowelsReplace.put(c, (char) (c + 2));\n        }\n        \n        StringBuilder encodedMessage = new StringBuilder();\n        for (char ch : message.toCharArray()) {\n            if (Character.isLetter(ch)) {\n                char encodedChar = vowelsReplace.getOrDefault(Character.toLowerCase(ch), ch);\n                if (Character.isUpperCase(ch)) {\n                    encodedChar = Character.toUpperCase(encodedChar);\n                }\n                encodedMessage.append(encodedChar);\n            } else {\n                encodedMessage.append(ch);\n            }\n        }\n        \n        return encodedMessage.toString();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.encode(\"TEST\"), \"tgst\"),\n                Objects.equals(s.encode(\"Mudasir\"), \"mWDCSKR\"),\n                Objects.equals(s.encode(\"YES\"), \"ygs\"),\n                Objects.equals(s.encode(\"This is a message\"), \"tHKS KS C MGSSCGG\"),\n                Objects.equals(s.encode(\"I DoNt KnOw WhAt tO WrItE\"), \"k dQnT kNqW wHcT Tq wRkTg\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "failed: wrong answer", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "Java/87", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<List<Integer>> get_row(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    List<Integer> coord = new ArrayList<>();\n                    coord.add(i);\n                    coord.add(j);\n                    result.add(coord);\n                }\n            }\n        }\n        \n        result.sort((a, b) -> {\n            if (a.get(0).equals(b.get(0))) {\n                return b.get(1) - a.get(1);\n            }\n            return a.get(0) - b.get(0);\n        });\n        \n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.get_row(Arrays.asList(\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 1, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 1)\n                ), 1).equals(Arrays.asList(Arrays.asList(0, 0), Arrays.asList(1, 4), Arrays.asList(1, 0), Arrays.asList(2, 5), Arrays.asList(2, 0))),\n                s.get_row(Arrays.asList(\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 6)\n                ), 2).equals(Arrays.asList(Arrays.asList(0, 1), Arrays.asList(1, 1), Arrays.asList(2, 1), Arrays.asList(3, 1), Arrays.asList(4, 1), Arrays.asList(5, 1))),\n                s.get_row(Arrays.asList(\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 1, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 1, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 1, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 1, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 1)\n                ), 1).equals(Arrays.asList(Arrays.asList(0, 0), Arrays.asList(1, 0), Arrays.asList(2, 1), Arrays.asList(2, 0), Arrays.asList(3, 2), Arrays.asList(3, 0), Arrays.asList(4, 3), Arrays.asList(4, 0), Arrays.asList(5, 4), Arrays.asList(5, 0), Arrays.asList(6, 5), Arrays.asList(6, 0))),\n                s.get_row(List.of(), 1).equals(List.of()),\n                s.get_row(List.of(List.of(1)), 2).equals(List.of()),\n                s.get_row(Arrays.asList(List.of(), List.of(1), Arrays.asList(1, 2, 3)), 3).equals(List.of(Arrays.asList(2, 2)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/90", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public Optional<Integer> next_smallest(List<Integer> lst) {\n        Set<Integer> set = new TreeSet<>(lst);\n        if (set.size() < 2) {\n            return Optional.empty();\n        } else {\n            Iterator<Integer> iterator = set.iterator();\n            iterator.next();\n            return Optional.of(iterator.next());\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.next_smallest(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5))).get() == 2,\n                s.next_smallest(new ArrayList<>(Arrays.asList(5, 1, 4, 3, 2))).get() == 2,\n                s.next_smallest(new ArrayList<>(List.of())).isEmpty(),\n                s.next_smallest(new ArrayList<>(Arrays.asList(1, 1))).isEmpty(),\n                s.next_smallest(new ArrayList<>(Arrays.asList(1, 1, 1, 1, 0))).get() == 1,\n                s.next_smallest(new ArrayList<>(Arrays.asList(1, (int) Math.pow(0.0, 0.0)))).isEmpty(),\n                s.next_smallest(new ArrayList<>(Arrays.asList(-35, 34, 12, -45))).get() == -35\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/94", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public int skjkasdkd(List<Integer> lst) {\n        int maxx = 0;\n        for (int num : lst) {\n            if (isPrime(num) && num > maxx) {\n                maxx = num;\n            }\n        }\n        return sumDigits(maxx);\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private int sumDigits(int num) {\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.skjkasdkd(Arrays.asList(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3)) == 10,\n                s.skjkasdkd(Arrays.asList(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1)) == 25,\n                s.skjkasdkd(Arrays.asList(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3)) == 13,\n                s.skjkasdkd(Arrays.asList(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6)) == 11,\n                s.skjkasdkd(Arrays.asList(0, 81, 12, 3, 1, 21)) == 3,\n                s.skjkasdkd(Arrays.asList(0, 8, 1, 2, 1, 7)) == 7,\n                s.skjkasdkd(List.of(8191)) == 19,\n                s.skjkasdkd(Arrays.asList(8191, 123456, 127, 7)) == 19,\n                s.skjkasdkd(Arrays.asList(127, 97, 8192)) == 10\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/97", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int multiply(int a, int b) {\n        return Math.abs(a % 10) * Math.abs(b % 10);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.multiply(148, 412) == 16,\n                s.multiply(19, 28) == 72,\n                s.multiply(2020, 1851) == 0,\n                s.multiply(14,-15) == 20,\n                s.multiply(76, 67) == 42,\n                s.multiply(17, 27) == 49,\n                s.multiply(0, 1) == 0,\n                s.multiply(0, 0) == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/96", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            boolean isPrime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.count_up_to(5).equals(Arrays.asList(2, 3)),\n                s.count_up_to(6).equals(Arrays.asList(2, 3, 5)),\n                s.count_up_to(7).equals(Arrays.asList(2, 3, 5)),\n                s.count_up_to(10).equals(Arrays.asList(2, 3, 5, 7)),\n                s.count_up_to(0).equals(List.of()),\n                s.count_up_to(22).equals(Arrays.asList(2, 3, 5, 7, 11, 13, 17, 19)),\n                s.count_up_to(1).equals(List.of()),\n                s.count_up_to(18).equals(Arrays.asList(2, 3, 5, 7, 11, 13, 17)),\n                s.count_up_to(47).equals(Arrays.asList(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)),\n                s.count_up_to(101).equals(Arrays.asList(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/99", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int closest_integer(String value) {\n        if (value.contains(\".\")) {\n            // remove trailing zeros\n            while (value.charAt(value.length() - 1) == '0') {\n                value = value.substring(0, value.length() - 1);\n            }\n        }\n\n        double num = Double.parseDouble(value);\n        int res;\n        if (value.endsWith(\".5\")) {\n            if (num > 0) {\n                res = (int) Math.ceil(num);\n            } else {\n                res = (int) Math.floor(num);\n            }\n        } else if (value.length() > 0) {\n            res = (int) Math.round(num);\n        } else {\n            res = 0;\n        }\n\n        return res;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.closest_integer(\"10\") == 10,\n                s.closest_integer(\"14.5\") == 15,\n                s.closest_integer(\"-15.5\") == -16,\n                s.closest_integer(\"15.3\") == 15,\n                s.closest_integer(\"0\") == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/98", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char ch = s.charAt(i);\n            if (\"AEIOU\".indexOf(ch) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.count_upper(\"aBCdEf\")  == 1,\n                s.count_upper(\"abcdefg\") == 0,\n                s.count_upper(\"dBBE\") == 0,\n                s.count_upper(\"B\")  == 0,\n                s.count_upper(\"U\")  == 1,\n                s.count_upper(\"\") == 0,\n                s.count_upper(\"EEEE\") == 2\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/100", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<Integer> make_a_pile(int n) {\n        List<Integer> stones = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            stones.add(n + 2*i);\n        }\n        return stones;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.make_a_pile(3).equals(Arrays.asList(3, 5, 7)),\n                s.make_a_pile(4).equals(Arrays.asList(4, 6, 8, 10)),\n                s.make_a_pile(5).equals(Arrays.asList(5, 7, 9, 11, 13)),\n                s.make_a_pile(6).equals(Arrays.asList(6, 8, 10, 12, 14, 16)),\n                s.make_a_pile(8).equals(Arrays.asList(8, 10, 12, 14, 16, 18, 20, 22))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/95", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public boolean check_dict_case(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        } else {\n            String state = \"start\";\n            for (Object key : dict.keySet()) {\n                if (!(key instanceof String)) {\n                    return false;\n                }\n                String strKey = (String) key;\n                if (state.equals(\"start\")) {\n                    if (strKey.equals(strKey.toLowerCase())) {\n                        state = \"lower\";\n                    } else if (strKey.equals(strKey.toUpperCase())) {\n                        state = \"upper\";\n                    } else {\n                        return false;\n                    }\n                } else if ((state.equals(\"upper\") && !strKey.equals(strKey.toUpperCase())) || (state.equals(\"lower\") && !strKey.equals(strKey.toLowerCase()))) {\n                    return false;\n                }\n            }\n            return state.equals(\"upper\") || state.equals(\"lower\");\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        Map<Object, Object> map1 = new HashMap<>();\n        map1.put(\"p\", \"pineapple\");\n        map1.put(\"b\", \"banana\");\n        Map<Object, Object> map2 = new HashMap<>();\n        map2.put(\"p\", \"pineapple\");\n        map2.put(\"A\", \"banana\");\n        map2.put(\"B\", \"banana\");\n        Map<Object, Object> map3 = new HashMap<>();\n        map3.put(\"p\", \"pineapple\");\n        map3.put(5, \"banana\");\n        map3.put(\"a\", \"banana\");\n        Map<Object, Object> map4 = new HashMap<>();\n        map4.put(\"Name\", \"John\");\n        map4.put(\"Age\", \"36\");\n        map4.put(\"City\", \"Houston\");\n        Map<Object, Object> map5 = new HashMap<>();\n        map5.put(\"STATE\", \"NC\");\n        map5.put(\"ZIP\", \"12345\");\n        Map<Object, Object> map6 = new HashMap<>();\n        map6.put(\"fruit\", \"Orange\");\n        map6.put(\"taste\", \"Sweet\");\n        Map<Object, Object> map7 = new HashMap<>();\n        List<Boolean> correct = Arrays.asList(\n                s.check_dict_case(map1),\n                !s.check_dict_case(map2),\n                !s.check_dict_case(map3),\n                !s.check_dict_case(map4),\n                s.check_dict_case(map5),\n                s.check_dict_case(map6),\n                !s.check_dict_case(map7)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/101", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<String> words_string(String s) {\n        List<String> wordsList = new ArrayList<>();\n        if (s == null || s.isEmpty()) {\n            return wordsList;\n        }\n\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (c == ',') {\n                wordsList.add(sb.toString().trim());\n                sb.setLength(0);\n            } else if (c == ' ') {\n                if (sb.length() > 0) {\n                    wordsList.add(sb.toString().trim());\n                    sb.setLength(0);\n                }\n            } else {\n                sb.append(c);\n            }\n        }\n\n        if (sb.length() > 0) {\n            wordsList.add(sb.toString().trim());\n        }\n\n        return wordsList;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.words_string(\"Hi, my name is John\" ).equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\" )),\n                s.words_string(\"One, two, three, four, five, six\" ).equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\" )),\n                s.words_string(\"Hi, my name\" ).equals(Arrays.asList(\"Hi\", \"my\", \"name\" )),\n                s.words_string(\"One,, two, three, four, five, six,\" ).equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\" )),\n                s.words_string(\"\" ).equals(List.of()),\n                s.words_string(\"ahmed     , gamal\" ).equals(Arrays.asList(\"ahmed\", \"gamal\" ))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "failed: wrong answer", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "Java/102", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int choose_num(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        if (x == y) {\n            return -1;\n        }\n        return y - 1;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.choose_num(12, 15) == 14,\n                s.choose_num(13, 12) == -1,\n                s.choose_num(33, 12354) == 12354,\n                s.choose_num(5234, 5233) == -1,\n                s.choose_num(6, 29) == 28,\n                s.choose_num(27, 10) == -1,\n                s.choose_num(7, 7) == -1,\n                s.choose_num(546, 546) == 546\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/104", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<Integer> unique_digits(List<Integer> x) {\n        List<Integer> oddDigitElements = new ArrayList<>();\n        for (int num : x) {\n            if (allDigitsAreOdd(num)) {\n                oddDigitElements.add(num);\n            }\n        }\n        Collections.sort(oddDigitElements);\n        return oddDigitElements;\n    }\n    \n    public boolean allDigitsAreOdd(int num) {\n        String numStr = String.valueOf(num);\n        for (char c : numStr.toCharArray()) {\n            if ((c - '0') % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.unique_digits(Arrays.asList(15, 33, 1422, 1)).equals(Arrays.asList(1, 15, 33)),\n                s.unique_digits(Arrays.asList(152, 323, 1422, 10)).equals(List.of()),\n                s.unique_digits(Arrays.asList(12345, 2033, 111, 151)).equals(Arrays.asList(111, 151)),\n                s.unique_digits(Arrays.asList(135, 103, 31)).equals(Arrays.asList(31, 135))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/107", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<Integer> even_odd_palindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n\n    private boolean isPalindrome(int num) {\n        String strNum = String.valueOf(num);\n        return strNum.equals(new StringBuilder(strNum).reverse().toString());\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.even_odd_palindrome(123).equals(Arrays.asList(8, 13)),\n                s.even_odd_palindrome(12).equals(Arrays.asList(4, 6)),\n                s.even_odd_palindrome(3).equals(Arrays.asList(1, 2)),\n                s.even_odd_palindrome(63).equals(Arrays.asList(6, 8)),\n                s.even_odd_palindrome(25).equals(Arrays.asList(5, 6)),\n                s.even_odd_palindrome(19).equals(Arrays.asList(4, 6)),\n                s.even_odd_palindrome(9).equals(Arrays.asList(4, 5)),\n                s.even_odd_palindrome(1).equals(Arrays.asList(0, 1))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/103", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public Object rounded_avg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        int average = Math.round((float) sum / (m - n + 1));\n        return Integer.toBinaryString(average);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals((String) s.rounded_avg(1, 5), \"11\" ),\n                Objects.equals((String) s.rounded_avg(7, 13), \"1010\" ),\n                Objects.equals((String) s.rounded_avg(964, 977), \"1111001011\" ),\n                Objects.equals((String) s.rounded_avg(996, 997), \"1111100101\" ),\n                Objects.equals((String) s.rounded_avg(560, 851), \"1011000010\" ),\n                Objects.equals((String) s.rounded_avg(185, 546), \"101101110\" ),\n                Objects.equals((String) s.rounded_avg(362, 496), \"110101101\" ),\n                Objects.equals((String) s.rounded_avg(350, 902), \"1001110010\" ),\n                Objects.equals((String) s.rounded_avg(197, 233), \"11010111\" ),\n                (int) s.rounded_avg(7, 5) == -1,\n                (int) s.rounded_avg(5, 1) == -1,\n                Objects.equals((String) s.rounded_avg(5, 5), \"101\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/106", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int factorial = 1;\n                for (int j = 1; j <= i; j++) {\n                    factorial *= j;\n                }\n                result.add(factorial);\n            } else {\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.f(5).equals(Arrays.asList(1, 2, 6, 24, 15)),\n                s.f(7).equals(Arrays.asList(1, 2, 6, 24, 15, 720, 28)),\n                s.f(1).equals(List.of(1)),\n                s.f(3).equals(Arrays.asList(1, 2, 6))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/108", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public int count_nums(List<Integer> arr) {\n        int count = 0;\n        for (int num : arr) {\n            int sum = 0;\n            int n = num < 0 ? -1 * num : num;\n            String numStr = String.valueOf(n);\n            for (char c : numStr.toCharArray()) {\n                sum += Character.getNumericValue(c);\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.count_nums(List.of()) == 0,\n                s.count_nums(Arrays.asList(-1, -2, 0)) == 0,\n                s.count_nums(Arrays.asList(1, 1, 2, -2, 3, 4, 5)) == 6,\n                s.count_nums(Arrays.asList(1, 6, 9, -6, 0, 1, 5)) == 5,\n                s.count_nums(Arrays.asList(1, 100, 98, -7, 1, -1)) == 4,\n                s.count_nums(Arrays.asList(12, 23, 34, -45, -56, 0)) == 5,\n                s.count_nums(Arrays.asList(-0, (int) Math.pow(1, 0))) == 1,\n                s.count_nums(List.of(1)) == 1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "failed: wrong answer", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "Java/105", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<String> by_length(List<Integer> arr) {\n        Map<Integer, String> map = new HashMap<>();\n        map.put(1, \"One\");\n        map.put(2, \"Two\");\n        map.put(3, \"Three\");\n        map.put(4, \"Four\");\n        map.put(5, \"Five\");\n        map.put(6, \"Six\");\n        map.put(7, \"Seven\");\n        map.put(8, \"Eight\");\n        map.put(9, \"Nine\");\n\n        List<Integer> validIntegers = new ArrayList<>();\n        for (int num : arr) {\n            if (num >= 1 && num <= 9) {\n                validIntegers.add(num);\n            }\n        }\n\n        Collections.sort(validIntegers, Collections.reverseOrder());\n\n        List<String> result = new ArrayList<>();\n        for (int num : validIntegers) {\n            result.add(map.get(num));\n        }\n\n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.by_length(new ArrayList<>(Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3))).equals(Arrays.asList(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\" )),\n                s.by_length(new ArrayList<>(List.of())).equals(List.of()),\n                s.by_length(new ArrayList<>(Arrays.asList(1, -1, 55))).equals(List.of(\"One\" )),\n                s.by_length(new ArrayList<>(Arrays.asList(1, -1, 3, 2))).equals(Arrays.asList(\"Three\", \"Two\", \"One\" )),\n                s.by_length(new ArrayList<>(Arrays.asList(9, 4, 8))).equals(Arrays.asList(\"Nine\", \"Eight\", \"Four\" ))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/109", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public boolean move_one_ball(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n        \n        List<Integer> sortedArray = new ArrayList<>(arr);\n        Collections.sort(sortedArray);\n        \n        int minValue = Collections.min(arr);\n        int minIndex = arr.indexOf(minValue);\n        \n        List<Integer> myArr = new ArrayList<>(arr.subList(minIndex, arr.size()));\n        myArr.addAll(arr.subList(0, minIndex));\n        \n        for (int i = 0; i < arr.size(); i++) {\n            if (!myArr.get(i).equals(sortedArray.get(i))) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.move_one_ball(new ArrayList<>(Arrays.asList(3, 4, 5, 1, 2))) == true,\n                s.move_one_ball(new ArrayList<>(Arrays.asList(3, 5, 10, 1, 2))) == true,\n                s.move_one_ball(new ArrayList<>(Arrays.asList(4, 3, 1, 2))) == false,\n                s.move_one_ball(new ArrayList<>(Arrays.asList(3, 5, 4, 1, 2))) == false,\n                s.move_one_ball(new ArrayList<>(Arrays.asList())) == true\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/110", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int odd = 0;\n        int even = 0;\n        for (int num : lst1) {\n            if (num % 2 == 1) {\n                odd++;\n            }\n        }\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                even++;\n            }\n        }\n        if (even >= odd) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)), \"YES\" ),\n                Objects.equals(s.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)), \"NO\" ),\n                Objects.equals(s.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(2, 1, 4, 3)), \"YES\" ),\n                Objects.equals(s.exchange(Arrays.asList(5, 7, 3), Arrays.asList(2, 6, 4)), \"YES\" ),\n                Objects.equals(s.exchange(Arrays.asList(5, 7, 3), Arrays.asList(2, 6, 3)), \"NO\" ),\n                Objects.equals(s.exchange(Arrays.asList(3, 2, 6, 1, 8, 9), Arrays.asList(3, 5, 5, 1, 1, 1)), \"NO\" ),\n                Objects.equals(s.exchange(Arrays.asList(100, 200), Arrays.asList(200, 200)), \"YES\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/111", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> dict = new HashMap<>();\n        String[] letters = test.split(\" \");\n        int maxCount = 0;\n\n        for (String letter : letters) {\n            if (!letter.equals(\"\")) {\n                int count = Collections.frequency(Arrays.asList(letters), letter);\n                if (count > maxCount) {\n                    maxCount = count;\n                    dict.clear();\n                    dict.put(letter, count);\n                } else if (count == maxCount) {\n                    dict.put(letter, count);\n                }\n            }\n        }\n        return dict;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        Map<String, Integer> map1 = new HashMap<>();\n        map1.put(\"a\", 2);\n        map1.put(\"b\", 2);\n        Map<String, Integer> map2 = new HashMap<>();\n        map2.put(\"a\", 2);\n        map2.put(\"b\", 2);\n        Map<String, Integer> map3 = new HashMap<>();\n        map3.put(\"a\", 1);\n        map3.put(\"b\", 1);\n        map3.put(\"c\", 1);\n        map3.put(\"d\", 1);\n        map3.put(\"g\", 1);\n        Map<String, Integer> map4 = new HashMap<>();\n        map4.put(\"r\", 1);\n        map4.put(\"t\", 1);\n        map4.put(\"g\", 1);\n        Map<String, Integer> map5 = new HashMap<>();\n        map5.put(\"b\", 4);\n        Map<String, Integer> map6 = new HashMap<>();\n        map6.put(\"r\", 1);\n        map6.put(\"t\", 1);\n        map6.put(\"g\", 1);\n        Map<String, Integer> map7 = new HashMap<>();\n        Map<String, Integer> map8 = new HashMap<>();\n        map8.put(\"a\", 1);\n        List<Boolean> correct = Arrays.asList(\n                s.histogram(\"a b b a\" ).equals(map1),\n                s.histogram(\"a b c a b\" ).equals(map2),\n                s.histogram(\"a b c d g\" ).equals(map3),\n                s.histogram(\"r t g\" ).equals(map4),\n                s.histogram(\"b b b b a\" ).equals(map5),\n                s.histogram(\"r t g\" ).equals(map6),\n                s.histogram(\"\" ).equals(map7),\n                s.histogram(\"a\" ).equals(map8)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/114", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public int minSubArraySum(List<Integer> nums) {\n        int maxSum = 0;\n        int sum = 0;\n        for (int num : nums) {\n            sum += -num;\n            if (sum < 0) {\n                sum = 0;\n            }\n            maxSum = Math.max(sum, maxSum);\n        }\n        if (maxSum == 0) {\n            maxSum = Collections.max(nums) * -1;\n        }\n        int minSum = -maxSum;\n        return minSum;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1,\n                s.minSubArraySum(Arrays.asList(-1, -2, -3)) == -6,\n                s.minSubArraySum(Arrays.asList(-1, -2, -3, 2, -10)) == -14,\n                s.minSubArraySum(List.of(-999999999)) == -999999999,\n                s.minSubArraySum(Arrays.asList(0, 10, 20, 1000000)) == 0,\n                s.minSubArraySum(Arrays.asList(-1, -2, -3, 10, -5)) == -6,\n                s.minSubArraySum(Arrays.asList(100, -1, -2, -3, 10, -5)) == -6,\n                s.minSubArraySum(Arrays.asList(10, 11, 13, 8, 3, 4)) == 3,\n                s.minSubArraySum(Arrays.asList(100, -33, 32, -1, 0, -2)) == -33,\n                s.minSubArraySum(List.of(-10)) == -10,\n                s.minSubArraySum(List.of(7)) == 7,\n                s.minSubArraySum(Arrays.asList(1, -1)) == -1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "failed: wrong answer", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "Java/113", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<String> odd_count(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String str : lst) {\n            int oddCount = 0;\n            for (char c : str.toCharArray()) {\n                if (Character.isDigit(c) && (c - '0') % 2 == 1) {\n                    oddCount++;\n                }\n            }\n            result.add(\"the number of odd elements \" + oddCount + \"n the str\" + oddCount + \"ng \" + oddCount + \" of the \" + oddCount + \"nput.\");\n        }\n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.odd_count(List.of(\"1234567\" )).equals(List.of(\"the number of odd elements 4n the str4ng 4 of the 4nput.\" )),\n                s.odd_count(Arrays.asList(\"3\", \"11111111\" )).equals(Arrays.asList(\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\" )),\n                s.odd_count(Arrays.asList(\"271\", \"137\", \"314\" )).equals(Arrays.asList(\n                        \"the number of odd elements 2n the str2ng 2 of the 2nput.\",\n                        \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\n                        \"the number of odd elements 2n the str2ng 2 of the 2nput.\"\n                ))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/112", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<Object> reverse_delete(String s, String c) {\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                result.append(ch);\n            }\n        }\n        String modifiedString = result.toString();\n        boolean isPalindrome = checkPalindrome(modifiedString);\n        List<Object> output = new ArrayList<>();\n        output.add(modifiedString);\n        output.add(isPalindrome);\n        return output;\n    }\n\n    private boolean checkPalindrome(String str) {\n        int left = 0;\n        int right = str.length() - 1;\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.reverse_delete(\"abcde\", \"ae\" ).equals(Arrays.asList(\"bcd\", false)),\n                s.reverse_delete(\"abcdef\", \"b\" ).equals(Arrays.asList(\"acdef\", false)),\n                s.reverse_delete(\"abcdedcba\", \"ab\" ).equals(Arrays.asList(\"cdedc\", true)),\n                s.reverse_delete(\"dwik\", \"w\" ).equals(Arrays.asList(\"dik\", false)),\n                s.reverse_delete(\"a\", \"a\" ).equals(Arrays.asList(\"\", true)),\n                s.reverse_delete(\"abcdedcba\", \"\" ).equals(Arrays.asList(\"abcdedcba\", true)),\n                s.reverse_delete(\"abcdedcba\", \"v\" ).equals(Arrays.asList(\"abcdedcba\", true)),\n                s.reverse_delete(\"vabba\", \"v\" ).equals(Arrays.asList(\"abba\", true)),\n                s.reverse_delete(\"mamma\", \"mia\" ).equals(Arrays.asList(\"\", true))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/115", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public int max_fill(List<List<Integer>> grid, int capacity) {\n        int total = 0;\n        for (List<Integer> row : grid) {\n            int sum = 0;\n            for (int well : row) {\n                sum += well;\n            }\n            total += (int) Math.ceil((double) sum / capacity);\n        }\n        return total;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.max_fill(Arrays.asList(Arrays.asList(0, 0, 1, 0), Arrays.asList(0, 1, 0, 0), Arrays.asList(1, 1, 1, 1)), 1) == 6,\n                s.max_fill(Arrays.asList(Arrays.asList(0, 0, 1, 1), Arrays.asList(0, 0, 0, 0), Arrays.asList(1, 1, 1, 1), Arrays.asList(0, 1, 1, 1)), 2) == 5,\n                s.max_fill(Arrays.asList(Arrays.asList(0, 0, 0), Arrays.asList(0, 0, 0)), 5) == 0,\n                s.max_fill(Arrays.asList(Arrays.asList(1, 1, 1, 1), Arrays.asList(1, 1, 1, 1)), 2) == 4,\n                s.max_fill(Arrays.asList(Arrays.asList(1, 1, 1, 1), Arrays.asList(1, 1, 1, 1)), 9) == 2\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/117", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<String> select_words(String s, int n) {\n        List<String> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int n_consonants = 0;\n            for (int i = 0; i < word.length(); i++) {\n                char c = Character.toLowerCase(word.charAt(i));\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                    n_consonants++;\n                }\n            }\n            if (n_consonants == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.select_words(\"Mary had a little lamb\", 4).equals(List.of(\"little\" )),\n                s.select_words(\"Mary had a little lamb\", 3).equals(Arrays.asList(\"Mary\", \"lamb\")),\n                s.select_words(\"simple white space\", 2).equals(List.of()),\n                s.select_words(\"Hello world\", 4).equals(List.of(\"world\" )),\n                s.select_words(\"Uncle sam\", 3).equals(List.of(\"Uncle\" )),\n                s.select_words(\"\", 4).equals(List.of()),\n                s.select_words(\"a b c d e f\", 1).equals(Arrays.asList(\"b\", \"c\", \"d\", \"f\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/118", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public String get_closest_vowel(String word) {\n        if (word.length() < 3) {\n            return \"\";\n        }\n\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'O', 'U', 'I'));\n        for (int i = word.length() - 2; i > 0; i--) {\n            if (vowels.contains(word.charAt(i))) {\n                if (!vowels.contains(word.charAt(i - 1)) && !vowels.contains(word.charAt(i + 1))) {\n                    return String.valueOf(word.charAt(i));\n                }\n            }\n        }\n        return \"\";\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.get_closest_vowel(\"yogurt\").equals(\"u\"),\n                s.get_closest_vowel(\"full\").equals(\"u\"),\n                s.get_closest_vowel(\"easy\").equals(\"\"),\n                s.get_closest_vowel(\"eAsy\").equals(\"\"),\n                s.get_closest_vowel(\"ali\").equals(\"\"),\n                s.get_closest_vowel(\"bad\").equals(\"a\"),\n                s.get_closest_vowel(\"most\").equals(\"o\"),\n                s.get_closest_vowel(\"ab\").equals(\"\"),\n                s.get_closest_vowel(\"ba\").equals(\"\"),\n                s.get_closest_vowel(\"quick\").equals(\"\"),\n                s.get_closest_vowel(\"anime\").equals(\"i\"),\n                s.get_closest_vowel(\"Asia\").equals(\"\"),\n                s.get_closest_vowel(\"Above\").equals(\"o\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/116", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<Integer> sort_array(List<Integer> arr) {\n        Collections.sort(arr, (a, b) -> {\n            int countA = Integer.bitCount(Math.abs(a));\n            int countB = Integer.bitCount(Math.abs(b));\n            if (countA == countB) {\n                return a - b;\n            }\n            return countA - countB;\n        });\n        return arr;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sort_array(new ArrayList<>(Arrays.asList(1, 5, 2, 3, 4))).equals(Arrays.asList(1, 2, 4, 3, 5)),\n                s.sort_array(new ArrayList<>(Arrays.asList(-2, -3, -4, -5, -6))).equals(Arrays.asList(-4, -2, -6, -5, -3)),\n                s.sort_array(new ArrayList<>(Arrays.asList(1, 0, 2, 3, 4))).equals(Arrays.asList(0, 1, 2, 4, 3)),\n                s.sort_array(new ArrayList<>(List.of())).equals(List.of()),\n                s.sort_array(new ArrayList<>(Arrays.asList(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4))).equals(Arrays.asList(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)),\n                s.sort_array(new ArrayList<>(Arrays.asList(3, 6, 44, 12, 32, 5))).equals(Arrays.asList(32, 3, 5, 6, 12, 44)),\n                s.sort_array(new ArrayList<>(Arrays.asList(2, 4, 8, 16, 32))).equals(Arrays.asList(2, 4, 8, 16, 32)),\n                s.sort_array(new ArrayList<>(Arrays.asList(2, 4, 8, 16, 32))).equals(Arrays.asList(2, 4, 8, 16, 32))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/121", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.solution(Arrays.asList(5, 8, 7, 1)) == 12,\n                s.solution(Arrays.asList(3, 3, 3, 3, 3)) == 9,\n                s.solution(Arrays.asList(30, 13, 24, 321)) == 0,\n                s.solution(Arrays.asList(5, 9)) == 5,\n                s.solution(Arrays.asList(2, 4, 8)) == 0,\n                s.solution(Arrays.asList(30, 13, 23, 32)) == 23,\n                s.solution(Arrays.asList(3, 13, 2, 9)) == 3\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/119", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public String match_parens(List<String> lst) {\n        String s1 = lst.get(0) + lst.get(1);\n        String s2 = lst.get(1) + lst.get(0);\n        \n        boolean result1 = check(s1);\n        boolean result2 = check(s2);\n        \n        return (result1 || result2) ? \"Yes\" : \"No\";\n    }\n    \n    private boolean check(String s) {\n        int val = 0;\n        for (char c : s.toCharArray()) {\n            if (c == '(') {\n                val++;\n            } else {\n                val--;\n            }\n            if (val < 0) {\n                return false;\n            }\n        }\n        return val == 0;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.match_parens(Arrays.asList(\"()(\", \")\")).equals(\"Yes\"),\n                s.match_parens(Arrays.asList(\")\", \")\")).equals(\"No\"),\n                s.match_parens(Arrays.asList(\"(()(())\", \"())())\")).equals(\"No\"),\n                s.match_parens(Arrays.asList(\")())\", \"(()()(\")).equals(\"Yes\"),\n                s.match_parens(Arrays.asList(\"(())))\", \"(()())((\")).equals(\"Yes\"),\n                s.match_parens(Arrays.asList(\"()\", \"())\")).equals(\"No\"),\n                s.match_parens(Arrays.asList(\"(()(\", \"()))()\")).equals(\"Yes\"),\n                s.match_parens(Arrays.asList(\"((((\", \"((())\")).equals(\"No\"),\n                s.match_parens(Arrays.asList(\")(()\", \"(()(\")).equals(\"No\"),\n                s.match_parens(Arrays.asList(\")(\", \")(\")).equals(\"No\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/123", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<Integer> get_odd_collatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        \n        if (n % 2 != 0) {\n            oddCollatz.add(n);\n        }\n        \n        while (n > 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            \n            if (n % 2 == 1) {\n                oddCollatz.add(n);\n            }\n        }\n        \n        Collections.sort(oddCollatz);\n        \n        return oddCollatz;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.get_odd_collatz(14).equals(Arrays.asList(1, 5, 7, 11, 13, 17)),\n                s.get_odd_collatz(5).equals(Arrays.asList(1, 5)),\n                s.get_odd_collatz(12).equals(Arrays.asList(1, 3, 5)),\n                s.get_odd_collatz(1).equals(List.of(1))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/124", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public boolean valid_date(String date) {\n        try {\n            date = date.trim();\n            String[] parts = date.split(\"-\");\n            if (parts.length != 3) {\n                return false;\n            }\n            int month = Integer.parseInt(parts[0]);\n            int day = Integer.parseInt(parts[1]);\n            int year = Integer.parseInt(parts[2]);\n            \n            if (month < 1 || month > 12) {\n                return false;\n            }\n            \n            if ((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && (day < 1 || day > 31)) {\n                return false;\n            }\n            \n            if ((month == 4 || month == 6 || month == 9 || month == 11) && (day < 1 || day > 30)) {\n                return false;\n            }\n            \n            if (month == 2 && (day < 1 || day > 29)) {\n                return false;\n            }\n        } catch (Exception e) {\n            return false;\n        }\n        \n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.valid_date(\"03-11-2000\" ) == true,\n                s.valid_date(\"15-01-2012\" ) == false,\n                s.valid_date(\"04-0-2040\" ) == false,\n                s.valid_date(\"06-04-2020\" ) == true,\n                s.valid_date(\"01-01-2007\" ) == true,\n                s.valid_date(\"03-32-2011\" ) == false,\n                s.valid_date(\"\" ) == false,\n                s.valid_date(\"04-31-3000\" ) == false,\n                s.valid_date(\"06-06-2005\" ) == true,\n                s.valid_date(\"21-31-2000\" ) == false,\n                s.valid_date(\"04-12-2003\" ) == true,\n                s.valid_date(\"04122003\" ) == false,\n                s.valid_date(\"20030412\" ) == false,\n                s.valid_date(\"2003-04\" ) == false,\n                s.valid_date(\"2003-04-12\" ) == false,\n                s.valid_date(\"04-2003\" ) == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/122", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public int add_elements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (String.valueOf(arr.get(i)).length() <= 2) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.add_elements(Arrays.asList(1, -2, -3, 41, 57, 76, 87, 88, 99), 3) == -4,\n                s.add_elements(Arrays.asList(111, 121, 3, 4000, 5, 6), 2) == 0,\n                s.add_elements(Arrays.asList(11, 21, 3, 90, 5, 6, 7, 8, 9), 4) == 125,\n                s.add_elements(Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4) == 24,\n                s.add_elements(Arrays.asList(1), 1) == 1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/120", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return new ArrayList<>();\n        }\n        Collections.sort(arr);\n        List<Integer> ans = new ArrayList<>(arr.subList(arr.size() - k, arr.size()));\n        return ans;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.maximum(new ArrayList<>(Arrays.asList(-3, -4, 5)), 3).equals(Arrays.asList(-4, -3, 5)),\n                s.maximum(new ArrayList<>(Arrays.asList(4, -4, 4)), 2).equals(Arrays.asList(4, 4)),\n                s.maximum(new ArrayList<>(Arrays.asList(-3, 2, 1, 2, -1, -2, 1)), 1).equals(List.of(2)),\n                s.maximum(new ArrayList<>(Arrays.asList(123, -123, 20, 0 , 1, 2, -3)), 3).equals(Arrays.asList(2, 20, 123)),\n                s.maximum(new ArrayList<>(Arrays.asList(-123, 20, 0 , 1, 2, -3)), 4).equals(Arrays.asList(0, 1, 2, 20)),\n                s.maximum(new ArrayList<>(Arrays.asList(5, 15, 0, 3, -13, -8, 0)), 7).equals(Arrays.asList(-13, -8, 0, 0, 3, 5, 15)),\n                s.maximum(new ArrayList<>(Arrays.asList(-1, 0, 2, 5, 3, -10)), 2).equals(Arrays.asList(3, 5)),\n                s.maximum(new ArrayList<>(Arrays.asList(1, 0, 5, -7)), 1).equals(List.of(5)),\n                s.maximum(new ArrayList<>(Arrays.asList(4, -4)), 2).equals(Arrays.asList(-4, 4)),\n                s.maximum(new ArrayList<>(Arrays.asList(-10, 10)), 2).equals(Arrays.asList(-10, 10))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/125", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public Object split_words(String txt) {\n        List<String> result = new ArrayList<>();\n        if (txt.contains(\" \")) {\n            String[] words = txt.split(\" \");\n            for (String word : words) {\n                result.add(word);\n            }\n        } else if (txt.contains(\",\")) {\n            String[] words = txt.replace(\",\", \" \").split(\" \");\n            for (String word : words) {\n                result.add(word);\n            }\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 == 1) {\n                    count++;\n                }\n            }\n            return count;\n        }\n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.split_words(\"Hello world!\" ), Arrays.asList(\"Hello\", \"world!\" )),\n                Objects.equals(s.split_words(\"Hello,world!\" ), Arrays.asList(\"Hello\", \"world!\" )),\n                Objects.equals(s.split_words(\"Hello world,!\" ), Arrays.asList(\"Hello\", \"world,!\" )),\n                Objects.equals(s.split_words(\"Hello,Hello,world !\" ), Arrays.asList(\"Hello,Hello,world\", \"!\" )),\n                Objects.equals(s.split_words(\"abcdef\" ), 3),\n                Objects.equals(s.split_words(\"aaabb\" ), 2),\n                Objects.equals(s.split_words(\"aaaBb\" ), 1),\n                Objects.equals(s.split_words(\"\" ), 0)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/131", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public int digits(int n) {\n        int product = 1;\n        int oddCount = 0;\n        String numStr = String.valueOf(n);\n        \n        for (int i = 0; i < numStr.length(); i++) {\n            int digit = Character.getNumericValue(numStr.charAt(i));\n            if (digit % 2 == 1) {\n                product *= digit;\n                oddCount++;\n            }\n        }\n        \n        if (oddCount == 0) {\n            return 0;\n        } else {\n            return product;\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.digits(5) == 5,\n                s.digits(54) == 5,\n                s.digits(120) == 1,\n                s.digits(5014) == 5,\n                s.digits(98765) == 315,\n                s.digits(5576543) == 2625\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/128", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> prod_signs(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        int prod = 0;\n        if (arr.contains(0)) {\n            prod = 0;\n        } else {\n            int negativeCount = 0;\n            for (int num : arr) {\n                if (num < 0) {\n                    negativeCount++;\n                }\n            }\n            prod = (int) Math.pow(-1, negativeCount);\n        }\n        \n        int sum = 0;\n        for (int num : arr) {\n            sum += Math.abs(num);\n        }\n        \n        return Optional.of(prod * sum);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.prod_signs(Arrays.asList(1, 2, 2, -4)).get() == -9,\n                s.prod_signs(Arrays.asList(0, 1)).get() == 0,\n                s.prod_signs(Arrays.asList(1, 1, 1, 2, 3, -1, 1)).get() == -10,\n                s.prod_signs(List.of()).isEmpty(),\n                s.prod_signs(Arrays.asList(2, 4,1, 2, -1, -1, 9)).get() == 20,\n                s.prod_signs(Arrays.asList(-1, 1, -1, 1)).get() == 4,\n                s.prod_signs(Arrays.asList(-1, 1, 1, 1)).get() == -4,\n                s.prod_signs(Arrays.asList(-1, 1, 1, 0)).get() == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/127", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    // Helper method to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num == 1 || num == 0) {\n            return false;\n        }\n        if (num == 2) {\n            return true;\n        }\n        for (int i = 2; i < num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int l = Math.max(interval1.get(0), interval2.get(0));\n        int r = Math.min(interval1.get(1), interval2.get(1));\n        int length = r - l;\n        if (length > 0 && isPrime(length)) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.intersection(Arrays.asList(1, 2), Arrays.asList(2, 3)), \"NO\" ),\n                Objects.equals(s.intersection(Arrays.asList(-1, 1), Arrays.asList(0, 4)), \"NO\" ),\n                Objects.equals(s.intersection(Arrays.asList(-3, -1), Arrays.asList(-5, 5)), \"YES\" ),\n                Objects.equals(s.intersection(Arrays.asList(-2, 2), Arrays.asList(-4, 0)), \"YES\" ),\n                Objects.equals(s.intersection(Arrays.asList(-11, 2), Arrays.asList(-1, -1)), \"NO\" ),\n                Objects.equals(s.intersection(Arrays.asList(1, 2), Arrays.asList(3, 5)), \"NO\" ),\n                Objects.equals(s.intersection(Arrays.asList(1, 2), Arrays.asList(1, 2)), \"NO\" ),\n                Objects.equals(s.intersection(Arrays.asList(-2, -2), Arrays.asList(-3, -2)), \"NO\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/126", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public boolean is_sorted(List<Integer> lst) {\n        Map<Integer, Integer> countDigit = new HashMap<>();\n        for (int i : lst) {\n            countDigit.put(i, countDigit.getOrDefault(i, 0) + 1);\n        }\n        \n        for (int i : lst) {\n            if (countDigit.get(i) > 2) {\n                return false;\n            }\n        }\n        \n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i - 1) > lst.get(i)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.is_sorted(new ArrayList<>(List.of(5))) == true,\n                s.is_sorted(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5))) == true,\n                s.is_sorted(new ArrayList<>(Arrays.asList(1, 3, 2, 4, 5))) == false,\n                s.is_sorted(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6))) == true,\n                s.is_sorted(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7))) == true,\n                s.is_sorted(new ArrayList<>(Arrays.asList(1, 3, 2, 4, 5, 6, 7))) == false,\n                s.is_sorted(new ArrayList<>(List.of())) == true,\n                s.is_sorted(new ArrayList<>(List.of(1))) == true,\n                s.is_sorted(new ArrayList<>(Arrays.asList(3, 2, 1))) == false,\n                s.is_sorted(new ArrayList<>(Arrays.asList(1, 2, 2, 2, 3, 4))) == false,\n                s.is_sorted(new ArrayList<>(Arrays.asList(1, 2, 3, 3, 3, 4))) == false,\n                s.is_sorted(new ArrayList<>(Arrays.asList(1, 2, 2, 3, 3, 4))) == true,\n                s.is_sorted(new ArrayList<>(Arrays.asList(1, 2, 3, 4))) == true\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/130", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n        List<Integer> tribonacci = new ArrayList<>();\n        if (n == 0) {\n            tribonacci.add(1);\n            return tribonacci;\n        }\n        tribonacci.add(1);\n        tribonacci.add(3);\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                tribonacci.add(i / 2 + 1);\n            } else {\n                tribonacci.add(tribonacci.get(i - 1) + tribonacci.get(i - 2) + (i + 3) / 2);\n            }\n        }\n        return tribonacci;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.tri(3).equals(Arrays.asList(1, 3, 2, 8)),\n                s.tri(4).equals(Arrays.asList(1, 3, 2, 8, 3)),\n                s.tri(5).equals(Arrays.asList(1, 3, 2, 8, 3, 15)),\n                s.tri(6).equals(Arrays.asList(1, 3, 2, 8, 3, 15, 4)),\n                s.tri(7).equals(Arrays.asList(1, 3, 2, 8, 3, 15, 4, 24)),\n                s.tri(8).equals(Arrays.asList(1, 3, 2, 8, 3, 15, 4, 24, 5)),\n                s.tri(9).equals(Arrays.asList(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)),\n                s.tri(20).equals(Arrays.asList(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)),\n                s.tri(0).equals(List.of(1)),\n                s.tri(1).equals(Arrays.asList(1, 3))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/135", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public int can_arrange(List<Integer> arr) {\n        int ind = -1;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                ind = i;\n            }\n        }\n        return ind;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.can_arrange(Arrays.asList(1, 2, 4, 3, 5)) == 3,\n                s.can_arrange(Arrays.asList(1, 2, 4, 5)) == -1,\n                s.can_arrange(Arrays.asList(1, 4, 2, 5, 6, 7, 8, 9, 10)) == 2,\n                s.can_arrange(Arrays.asList(4, 8, 5, 7, 3)) == 4,\n                s.can_arrange(List.of()) == -1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/133", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public int sum_squares(List<Double> lst) {\n        int squared = 0;\n        for (double num : lst) {\n            squared += Math.ceil(num) * Math.ceil(num);\n        }\n        return squared;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sum_squares(Arrays.asList(1., 2., 3.)) == 14,\n                s.sum_squares(Arrays.asList(1.0, 2., 3.)) == 14,\n                s.sum_squares(Arrays.asList(1., 3., 5., 7.)) == 84,\n                s.sum_squares(Arrays.asList(1.4, 4.2, 0.)) == 29,\n                s.sum_squares(Arrays.asList(-2.4, 1., 1.)) == 6,\n                s.sum_squares(Arrays.asList(100., 1., 15., 2.)) == 10230,\n                s.sum_squares(Arrays.asList(10000., 10000.)) == 200000000,\n                s.sum_squares(Arrays.asList(-1.4, 4.6, 6.3)) == 75,\n                s.sum_squares(Arrays.asList(-1.4, 17.9, 18.9, 19.9)) == 1086,\n                s.sum_squares(List.of(0.)) == 0,\n                s.sum_squares(List.of(-1.)) == 1,\n                s.sum_squares(Arrays.asList(-1., 1., 0.)) == 2\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/132", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public boolean is_nested(String string) {\n        List<Integer> openingBracketIndex = new ArrayList<>();\n        List<Integer> closingBracketIndex = new ArrayList<>();\n        \n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                openingBracketIndex.add(i);\n            } else {\n                closingBracketIndex.add(i);\n            }\n        }\n        \n        Collections.reverse(closingBracketIndex);\n        \n        int count = 0;\n        int i = 0;\n        int l = closingBracketIndex.size();\n        \n        for (int idx : openingBracketIndex) {\n            if (i < l && idx < closingBracketIndex.get(i)) {\n                count++;\n                i++;\n            }\n        }\n        \n        return count >= 2;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.is_nested(\"[[]]\" ),\n                !s.is_nested(\"[]]]]]]][[[[[]\" ),\n                !s.is_nested(\"[][]\" ),\n                !s.is_nested(\"[]\" ),\n                s.is_nested(\"[[[[]]]]\" ),\n                !s.is_nested(\"[]]]]]]]]]]\" ),\n                s.is_nested(\"[][][[]]\" ),\n                !s.is_nested(\"[[]\" ),\n                !s.is_nested(\"[]]\" ),\n                s.is_nested(\"[[]][[\" ),\n                s.is_nested(\"[[][]]\" ),\n                !s.is_nested(\"\" ),\n                !s.is_nested(\"[[[[[[[[\" ),\n                !s.is_nested(\"]]]]]]]]\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/129", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        int[][] visited = new int[n][n];\n        List<Integer> path = new ArrayList<>();\n        \n        int row = 0, col = 0;\n        while (k > 0) {\n            path.add(grid.get(row).get(col));\n            visited[row][col] = 1;\n            int nextRow = -1, nextCol = -1;\n            int minVal = Integer.MAX_VALUE;\n            \n            for (int[] dir : directions) {\n                int newRow = row + dir[0];\n                int newCol = col + dir[1];\n                if (newRow >= 0 && newRow < n && newCol >= 0 && newCol < n && visited[newRow][newCol] == 0) {\n                    if (grid.get(newRow).get(newCol) < minVal) {\n                        minVal = grid.get(newRow).get(newCol);\n                        nextRow = newRow;\n                        nextCol = newCol;\n                    }\n                }\n            }\n            row = nextRow;\n            col = nextCol;\n            k--;\n        }\n        \n        return path;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.minPath(Arrays.asList(Arrays.asList(1, 2, 3), Arrays.asList(4, 5, 6), Arrays.asList(7, 8, 9)), 3).equals(Arrays.asList(1, 2, 1)),\n                s.minPath(Arrays.asList(Arrays.asList(5, 9, 3), Arrays.asList(4, 1, 6), Arrays.asList(7, 8, 2)), 1).equals(List.of(1)),\n                s.minPath(Arrays.asList(Arrays.asList(1, 2, 3, 4), Arrays.asList(5, 6, 7, 8), Arrays.asList(9, 10, 11, 12), Arrays.asList(13, 14, 15, 16)), 4).equals(Arrays.asList(1, 2, 1, 2)),\n                s.minPath(Arrays.asList(Arrays.asList(6, 4, 13, 10), Arrays.asList(5, 7, 12, 1), Arrays.asList(3, 16, 11, 15), Arrays.asList(8, 14, 9, 2)), 7).equals(Arrays.asList(1, 10, 1, 10, 1, 10, 1)),\n                s.minPath(Arrays.asList(Arrays.asList(8, 14, 9, 2), Arrays.asList(6, 4, 13, 15), Arrays.asList(5, 7, 1, 12), Arrays.asList(3, 10, 11, 16)), 5).equals(Arrays.asList(1, 7, 1, 7, 1)),\n                s.minPath(Arrays.asList(Arrays.asList(11, 8, 7, 2), Arrays.asList(5, 16, 14, 4), Arrays.asList(9, 3, 15, 6), Arrays.asList(12, 13, 10, 1)), 9).equals(Arrays.asList(1, 6, 1, 6, 1, 6, 1, 6, 1)),\n                s.minPath(Arrays.asList(Arrays.asList(12, 13, 10, 1), Arrays.asList(9, 3, 15, 6), Arrays.asList(5, 16, 14, 4), Arrays.asList(11, 8, 7, 2)), 12).equals(Arrays.asList(1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6)),\n                s.minPath(Arrays.asList(Arrays.asList(2, 7, 4), Arrays.asList(3, 1, 5), Arrays.asList(6, 8, 9)), 8).equals(Arrays.asList(1, 3, 1, 3, 1, 3, 1, 3)),\n                s.minPath(Arrays.asList(Arrays.asList(6, 1, 5), Arrays.asList(3, 8, 9), Arrays.asList(2, 7, 4)), 8).equals(Arrays.asList(1, 5, 1, 5, 1, 5, 1, 5)),\n                s.minPath(Arrays.asList(Arrays.asList(1, 2), Arrays.asList(3, 4)), 10).equals(Arrays.asList(1, 2, 1, 2, 1, 2, 1, 2, 1, 2)),\n                s.minPath(Arrays.asList(Arrays.asList(1, 3), Arrays.asList(3, 2)), 10).equals(Arrays.asList(1, 3, 1, 3, 1, 3, 1, 3, 1, 3))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "failed: Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 3\n\tat java.base/java.util.Arrays$ArrayList.get(Arrays.java:4266)\n\tat Solution.minPath(Main.java:17)\n\tat Main.main(Main.java:53)\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "Java/134", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public boolean check_if_last_char_is_a_letter(String txt) {\n        String[] words = txt.split(\" \");\n        if (words.length == 0) {\n            return false;\n        }\n        String lastWord = words[words.length - 1];\n        if (lastWord.length() == 1 && Character.isLetter(lastWord.charAt(0))) {\n            return true;\n        }\n        return false;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.check_if_last_char_is_a_letter(\"apple\" ) == false,\n                s.check_if_last_char_is_a_letter(\"apple pi e\" ) == true,\n                s.check_if_last_char_is_a_letter(\"eeeee\" ) == false,\n                s.check_if_last_char_is_a_letter(\"A\" ) == true,\n                s.check_if_last_char_is_a_letter(\"Pumpkin pie \" ) == false,\n                s.check_if_last_char_is_a_letter(\"Pumpkin pie 1\" ) == false,\n                s.check_if_last_char_is_a_letter(\"\" ) == false,\n                s.check_if_last_char_is_a_letter(\"eeeee e \" ) == false,\n                s.check_if_last_char_is_a_letter(\"apple pie\" ) == false,\n                s.check_if_last_char_is_a_letter(\"apple pi e \" ) == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "failed: wrong answer", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "Java/138", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean is_equal_to_sum_even(int n) {\n        return n % 2 == 0 && n >= 8;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.is_equal_to_sum_even(4) == false,\n                s.is_equal_to_sum_even(6) == false,\n                s.is_equal_to_sum_even(8) == true,\n                s.is_equal_to_sum_even(10) == true,\n                s.is_equal_to_sum_even(11) == false,\n                s.is_equal_to_sum_even(12) == true,\n                s.is_equal_to_sum_even(13) == false,\n                s.is_equal_to_sum_even(16) == true\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/139", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public long special_factorial(int n) {\n        long fact_i = 1;\n        long special_fact = 1;\n        for (int i = 1; i <= n; i++) {\n            fact_i *= i;\n            special_fact *= fact_i;\n        }\n        return special_fact;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.special_factorial(4) == 288,\n                s.special_factorial(5) == 34560,\n                s.special_factorial(7) == 125411328000L,\n                s.special_factorial(1) == 1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/137", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public Optional<Object> compare_one(Object a, Object b) {\n        String temp_a = a.toString();\n        String temp_b = b.toString();\n        \n        if (temp_a.contains(\",\")) {\n            temp_a = temp_a.replace(\",\", \".\");\n        }\n        if (temp_b.contains(\",\")) {\n            temp_b = temp_b.replace(\",\", \".\");\n        }\n        \n        double val_a = Double.parseDouble(temp_a);\n        double val_b = Double.parseDouble(temp_b);\n        \n        if (val_a == val_b) {\n            return Optional.empty();\n        } else {\n            if (val_a > val_b) {\n                if (a instanceof Integer) {\n                    return Optional.of((int) val_a);\n                } else if (a instanceof Float) {\n                    return Optional.of((float) val_a);\n                } else {\n                    return Optional.of(temp_a);\n                }\n            } else {\n                if (b instanceof Integer) {\n                    return Optional.of((int) val_b);\n                } else if (b instanceof Float) {\n                    return Optional.of((float) val_b);\n                } else {\n                    return Optional.of(temp_b);\n                }\n            }\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                (int) s.compare_one(1, 2).get() == 2,\n                (double) s.compare_one(1, 2.5).get() == 2.5,\n                (int) s.compare_one(2, 3).get() == 3,\n                (int) s.compare_one(5, 6).get() == 6,\n                (String) s.compare_one(1, \"2,3\").get() == \"2,3\",\n                (String) s.compare_one(\"5,1\", \"6\").get() == \"6\",\n                (String) s.compare_one(\"1\", \"2\").get() == \"2\",\n                s.compare_one(\"1\", 1).isEmpty()\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "failed: Exception in thread \"main\" java.lang.ClassCastException: class java.lang.String cannot be cast to class java.lang.Double (java.lang.String and java.lang.Double are in module java.base of loader 'bootstrap')\n\tat Main.main(Main.java:52)\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "Java/136", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<Optional<Integer>> largest_smallest_integers(List<Integer> lst) {\n        List<Optional<Integer>> result = new ArrayList<>();\n        List<Integer> smallest = new ArrayList<>();\n        List<Integer> largest = new ArrayList<>();\n\n        for (Integer num : lst) {\n            if (num < 0) {\n                smallest.add(num);\n            } else if (num > 0) {\n                largest.add(num);\n            }\n        }\n\n        if (smallest.isEmpty()) {\n            result.add(Optional.empty());\n        } else {\n            result.add(Optional.of(Collections.max(smallest)));\n        }\n\n        if (largest.isEmpty()) {\n            result.add(Optional.empty());\n        } else {\n            result.add(Optional.of(Collections.min(largest)));\n        }\n\n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.largest_smallest_integers(Arrays.asList(2, 4, 1, 3, 5, 7)).equals(Arrays.asList(Optional.empty(), Optional.of(1))),\n                s.largest_smallest_integers(Arrays.asList(2, 4, 1, 3, 5, 7, 0)).equals(Arrays.asList(Optional.empty(), Optional.of(1))),\n                s.largest_smallest_integers(Arrays.asList(1, 3, 2, 4, 5, 6, -2)).equals(Arrays.asList(Optional.of(-2), Optional.of(1))),\n                s.largest_smallest_integers(Arrays.asList(4, 5, 3, 6, 2, 7, -7)).equals(Arrays.asList(Optional.of(-7), Optional.of(2))),\n                s.largest_smallest_integers(Arrays.asList(7, 3, 8, 4, 9, 2, 5, -9)).equals(Arrays.asList(Optional.of(-9), Optional.of(2))),\n                s.largest_smallest_integers(List.of()).equals(Arrays.asList(Optional.empty(), Optional.empty())),\n                s.largest_smallest_integers(List.of(0)).equals(Arrays.asList(Optional.empty(), Optional.empty())),\n                s.largest_smallest_integers(Arrays.asList(-1, -3, -5, -6)).equals(Arrays.asList(Optional.of(-1), Optional.empty())),\n                s.largest_smallest_integers(Arrays.asList(-1, -3, -5, -6, 0)).equals(Arrays.asList(Optional.of(-1), Optional.empty())),\n                s.largest_smallest_integers(Arrays.asList(-6, -4, -4, -3, 1)).equals(Arrays.asList(Optional.of(-3), Optional.of(1))),\n                s.largest_smallest_integers(Arrays.asList(-6, -4, -4, -3, -100, 1)).equals(Arrays.asList(Optional.of(-3), Optional.of(1)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/140", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public String fix_spaces(String text) {\n        StringBuilder new_text = new StringBuilder();\n        int start = 0;\n        int end = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                end++;\n            } else {\n                if (end - start > 2) {\n                    new_text.append(\"-\");\n                    new_text.append(text.charAt(i));\n                } else if (end - start > 0) {\n                    for (int j = 0; j < end - start; j++) {\n                        new_text.append(\"_\");\n                    }\n                    new_text.append(text.charAt(i));\n                } else {\n                    new_text.append(text.charAt(i));\n                }\n                start = i + 1;\n                end = i + 1;\n            }\n        }\n        if (end - start > 2) {\n            new_text.append(\"-\");\n        } else if (end - start > 0) {\n            for (int j = 0; j < end - start; j++) {\n                new_text.append(\"_\");\n            }\n        }\n        return new_text.toString();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.fix_spaces(\"Example\" ), \"Example\" ),\n                Objects.equals(s.fix_spaces(\"Mudasir Hanif \" ), \"Mudasir_Hanif_\" ),\n                Objects.equals(s.fix_spaces(\"Yellow Yellow  Dirty  Fellow\" ), \"Yellow_Yellow__Dirty__Fellow\" ),\n                Objects.equals(s.fix_spaces(\"Exa   mple\" ), \"Exa-mple\" ),\n                Objects.equals(s.fix_spaces(\"   Exa 1 2 2 mple\" ), \"-Exa_1_2_2_mple\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/144", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public boolean simplify(String x, String n) {\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n        \n        int num1 = Integer.parseInt(xParts[0]);\n        int den1 = Integer.parseInt(xParts[1]);\n        int num2 = Integer.parseInt(nParts[0]);\n        int den2 = Integer.parseInt(nParts[1]);\n        \n        int numerator = num1 * num2;\n        int denominator = den1 * den2;\n        \n        if (numerator % denominator == 0) {\n            return true;\n        }\n        return false;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.simplify(\"1/5\", \"5/1\") == true,\n                s.simplify(\"1/6\", \"2/1\") == false,\n                s.simplify(\"5/1\", \"3/1\") == true,\n                s.simplify(\"7/10\", \"10/2\") == false,\n                s.simplify(\"2/10\", \"50/10\") == true,\n                s.simplify(\"7/2\", \"4/2\") == true,\n                s.simplify(\"11/6\", \"6/1\") == true,\n                s.simplify(\"2/3\", \"5/2\") == false,\n                s.simplify(\"5/2\", \"3/5\") == false,\n                s.simplify(\"2/4\", \"8/4\") == true,\n                s.simplify(\"2/4\", \"4/2\") == true,\n                s.simplify(\"1/5\", \"5/1\") == true,\n                s.simplify(\"1/5\", \"1/5\") == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/143", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public String words_in_sentence(String sentence) {\n        List<String> newWords = new ArrayList<>();\n        for (String word : sentence.split(\" \")) {\n            if (isPrime(word.length())) {\n                newWords.add(word);\n            }\n        }\n        return String.join(\" \", newWords);\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.words_in_sentence(\"This is a test\" ), \"is\" ),\n                Objects.equals(s.words_in_sentence(\"lets go for swimming\" ), \"go for\" ),\n                Objects.equals(s.words_in_sentence(\"there is no place available here\" ), \"there is no place\" ),\n                Objects.equals(s.words_in_sentence(\"Hi I am Hussein\" ), \"Hi am Hussein\" ),\n                Objects.equals(s.words_in_sentence(\"go for it\" ), \"go for it\" ),\n                Objects.equals(s.words_in_sentence(\"here\" ), \"\" ),\n                Objects.equals(s.words_in_sentence(\"here is\" ), \"is\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/141", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public String file_name_check(String file_name) {\n        String[] validExtensions = {\"txt\", \"exe\", \"dll\"};\n        String[] parts = file_name.split(\"\\\\.\");\n        \n        if (parts.length != 2) {\n            return \"No\";\n        }\n        \n        String fileName = parts[0];\n        String fileExtension = parts[1];\n        \n        if (!Arrays.asList(validExtensions).contains(fileExtension)) {\n            return \"No\";\n        }\n        \n        if (fileName.isEmpty() || !Character.isLetter(fileName.charAt(0))) {\n            return \"No\";\n        }\n        \n        int digitCount = 0;\n        for (char c : fileName.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n        }\n        \n        if (digitCount > 3) {\n            return \"No\";\n        }\n        \n        return \"Yes\";\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.file_name_check(\"example.txt\" ), \"Yes\" ),\n                Objects.equals(s.file_name_check(\"1example.dll\" ), \"No\" ),\n                Objects.equals(s.file_name_check(\"s1sdf3.asd\" ), \"No\" ),\n                Objects.equals(s.file_name_check(\"K.dll\" ), \"Yes\" ),\n                Objects.equals(s.file_name_check(\"MY16FILE3.exe\" ), \"Yes\" ),\n                Objects.equals(s.file_name_check(\"His12FILE94.exe\" ), \"No\" ),\n                Objects.equals(s.file_name_check(\"_Y.txt\" ), \"No\" ),\n                Objects.equals(s.file_name_check(\"?aREYA.exe\" ), \"No\" ),\n                Objects.equals(s.file_name_check(\"/this_is_valid.dll\" ), \"No\" ),\n                Objects.equals(s.file_name_check(\"this_is_valid.wow\" ), \"No\" ),\n                Objects.equals(s.file_name_check(\"this_is_valid.txt\" ), \"Yes\" ),\n                Objects.equals(s.file_name_check(\"this_is_valid.txtexe\" ), \"No\" ),\n                Objects.equals(s.file_name_check(\"#this2_i4s_5valid.ten\" ), \"No\" ),\n                Objects.equals(s.file_name_check(\"@this1_is6_valid.exe\" ), \"No\" ),\n                Objects.equals(s.file_name_check(\"this_is_12valid.6exe4.txt\" ), \"No\" ),\n                Objects.equals(s.file_name_check(\"all.exe.txt\" ), \"No\" ),\n                Objects.equals(s.file_name_check(\"I563_No.exe\" ), \"Yes\" ),\n                Objects.equals(s.file_name_check(\"Is3youfault.txt\" ), \"Yes\" ),\n                Objects.equals(s.file_name_check(\"no_one#knows.dll\" ), \"Yes\" ),\n                Objects.equals(s.file_name_check(\"1I563_Yes3.exe\" ), \"No\" ),\n                Objects.equals(s.file_name_check(\"I563_Yes3.txtt\" ), \"No\" ),\n                Objects.equals(s.file_name_check(\"final..txt\" ), \"No\" ),\n                Objects.equals(s.file_name_check(\"final132\" ), \"No\" ),\n                Objects.equals(s.file_name_check(\"_f4indsartal132.\" ), \"No\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/150", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public int x_or_y(int n, int x, int y) {\n        if (n == 1) {\n            return y;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.x_or_y(7, 34, 12) == 34,\n                s.x_or_y(15, 8, 5) == 5,\n                s.x_or_y(3, 33, 5212) == 33,\n                s.x_or_y(1259, 3, 52) == 3,\n                s.x_or_y(7919, -1, 12) == -1,\n                s.x_or_y(3609, 1245, 583) == 583,\n                s.x_or_y(91, 56, 129) == 129,\n                s.x_or_y(6, 34, 1234) == 1234,\n                s.x_or_y(1, 2, 0) == 0,\n                s.x_or_y(2, 2, 0) == 2\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/142", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public int sum_squares(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result.add((int) Math.pow(lst.get(i), 2));\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                result.add((int) Math.pow(lst.get(i), 3));\n            } else {\n                result.add(lst.get(i));\n            }\n        }\n        int sum = 0;\n        for (int num : result) {\n            sum += num;\n        }\n        return sum;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sum_squares(Arrays.asList(1,2,3)) == 6,\n                s.sum_squares(Arrays.asList(1,4,9)) == 14,\n                s.sum_squares(List.of()) == 0,\n                s.sum_squares(Arrays.asList(1,1,1,1,1,1,1,1,1)) == 9,\n                s.sum_squares(Arrays.asList(-1,-1,-1,-1,-1,-1,-1,-1,-1)) == -3,\n                s.sum_squares(List.of(0)) == 0,\n                s.sum_squares(Arrays.asList(-1,-5,2,-1,-5)) == -126,\n                s.sum_squares(Arrays.asList(-56,-99,1,0,-2)) == 3030,\n                s.sum_squares(Arrays.asList(-1,0,0,0,0,0,0,0,-1)) == 0,\n                s.sum_squares(Arrays.asList(-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)) == -14196,\n                s.sum_squares(Arrays.asList(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)) == -1448\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/146", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10) {\n                if (isFirstAndLastDigitsOdd(num)) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    \n    private boolean isFirstAndLastDigitsOdd(int num) {\n        String numStr = String.valueOf(num);\n        int firstDigit = Character.getNumericValue(numStr.charAt(0));\n        int lastDigit = Character.getNumericValue(numStr.charAt(numStr.length() - 1));\n        return (firstDigit % 2 != 0) && (lastDigit % 2 != 0);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.specialFilter(Arrays.asList(5, -2, 1, -5)) == 0,\n                s.specialFilter(Arrays.asList(15, -73, 14, -15)) == 1,\n                s.specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) == 2,\n                s.specialFilter(Arrays.asList(43, -12, 93, 125, 121, 109)) == 4,\n                s.specialFilter(Arrays.asList(71, -2, -33, 75, 21, 19)) == 3,\n                s.specialFilter(List.of(1)) == 0,\n                s.specialFilter(List.of()) == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/145", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<Integer> order_by_points(List<Integer> nums) {\n        Collections.sort(nums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer num1, Integer num2) {\n                int sum1 = getDigitsSum(num1);\n                int sum2 = getDigitsSum(num2);\n                if (sum1 == sum2) {\n                    return nums.indexOf(num1) - nums.indexOf(num2);\n                }\n                return sum1 - sum2;\n            }\n        });\n        return nums;\n    }\n\n    private int getDigitsSum(int n) {\n        int neg = 1;\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        String numStr = String.valueOf(n);\n        int sum = 0;\n        for (char c : numStr.toCharArray()) {\n            sum += Character.getNumericValue(c);\n        }\n        return sum * neg;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.order_by_points(new ArrayList<>(Arrays.asList(1, 11, -1, -11, -12))).equals(Arrays.asList(-1, -11, 1, -12, 11)),\n                s.order_by_points(new ArrayList<>(Arrays.asList(1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46))).equals(Arrays.asList(0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457)),\n                s.order_by_points(new ArrayList<>(List.of())).equals(List.of()),\n                s.order_by_points(new ArrayList<>(Arrays.asList(1, -11, -32, 43, 54, -98, 2, -3))).equals(Arrays.asList(-3, -32, -98, -11, 1, 2, 43, 54)),\n                s.order_by_points(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).equals(Arrays.asList(1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9)),\n                s.order_by_points(new ArrayList<>(Arrays.asList(0, 6, 6, -76, -21, 23, 4))).equals(Arrays.asList(-76, -21, 0, 4, 23, 6, 6))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "failed: wrong answer", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "Java/148", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<String> bf(String planet1, String planet2) {\n        String[] planetNames = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        List<String> result = new ArrayList<>();\n        \n        if (!Arrays.asList(planetNames).contains(planet1) || !Arrays.asList(planetNames).contains(planet2) || planet1.equals(planet2)) {\n            return result;\n        }\n        \n        int planet1Index = Arrays.asList(planetNames).indexOf(planet1);\n        int planet2Index = Arrays.asList(planetNames).indexOf(planet2);\n        \n        if (planet1Index < planet2Index) {\n            for (int i = planet1Index + 1; i < planet2Index; i++) {\n                result.add(planetNames[i]);\n            }\n        } else {\n            for (int i = planet2Index + 1; i < planet1Index; i++) {\n                result.add(planetNames[i]);\n            }\n        }\n        \n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.bf(\"Jupiter\", \"Neptune\").equals(Arrays.asList(\"Saturn\", \"Uranus\")),\n                s.bf(\"Earth\", \"Mercury\").equals(List.of(\"Venus\")),\n                s.bf(\"Mercury\", \"Uranus\").equals(Arrays.asList(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")),\n                s.bf(\"Neptune\", \"Venus\").equals(Arrays.asList(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")),\n                s.bf(\"Earth\", \"Earth\").equals(List.of()),\n                s.bf(\"Mars\", \"Earth\").equals(List.of()),\n                s.bf(\"Jupiter\", \"Makemake\").equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/147", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public int get_max_triples(int n) {\n        int[] A = new int[n];\n        for (int i = 0; i < n; i++) {\n            A[i] = i * i - i + 1;\n        }\n        \n        List<int[]> ans = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((A[i] + A[j] + A[k]) % 3 == 0) {\n                        ans.add(new int[]{A[i], A[j], A[k]});\n                    }\n                }\n            }\n        }\n        \n        return ans.size();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.get_max_triples(5) == 1,\n                s.get_max_triples(6) == 4,\n                s.get_max_triples(10) == 36,\n                s.get_max_triples(100) == 53361\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "failed: wrong answer", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "Java/149", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<String> sorted_list_sum(List<String> lst) {\n        lst.sort((a, b) -> {\n            if (a.length() % 2 != 0 && b.length() % 2 == 0) {\n                return 1;\n            } else if (a.length() % 2 == 0 && b.length() % 2 != 0) {\n                return -1;\n            } else {\n                return a.compareTo(b);\n            }\n        });\n\n        List<String> result = new ArrayList<>();\n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                result.add(str);\n            }\n        }\n\n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sorted_list_sum(new ArrayList<>(Arrays.asList(\"aa\", \"a\", \"aaa\"))).equals(List.of(\"aa\")),\n                s.sorted_list_sum(new ArrayList<>(Arrays.asList(\"school\", \"AI\", \"asdf\", \"b\"))).equals(Arrays.asList(\"AI\", \"asdf\", \"school\")),\n                s.sorted_list_sum(new ArrayList<>(Arrays.asList(\"d\", \"b\", \"c\", \"a\"))).equals(List.of()),\n                s.sorted_list_sum(new ArrayList<>(Arrays.asList(\"d\", \"dcba\", \"abcd\", \"a\"))).equals(Arrays.asList(\"abcd\", \"dcba\")),\n                s.sorted_list_sum(new ArrayList<>(Arrays.asList(\"AI\", \"ai\", \"au\"))).equals(Arrays.asList(\"AI\", \"ai\", \"au\")),\n                s.sorted_list_sum(new ArrayList<>(Arrays.asList(\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"))).equals(List.of()),\n                s.sorted_list_sum(new ArrayList<>(Arrays.asList(\"aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals(Arrays.asList(\"cc\", \"dd\", \"aaaa\", \"bbbb\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "failed: wrong answer", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "Java/151", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public int double_the_difference(List<Object> lst) {\n        int sum = 0;\n        for (Object num : lst) {\n            if (num instanceof Integer) {\n                int n = (int) num;\n                if (n > 0 && n % 2 != 0) {\n                    sum += n * n;\n                }\n            }\n        }\n        return sum;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.double_the_difference(List.of()) == 0,\n                s.double_the_difference(Arrays.asList(5, 4)) == 25,\n                s.double_the_difference(Arrays.asList(0.1, 0.2, 0.3)) == 0,\n                s.double_the_difference(Arrays.asList(-10, -20, -30)) == 0,\n                s.double_the_difference(Arrays.asList(-1, -2, 8)) == 0,\n                s.double_the_difference(Arrays.asList(0.2, 3, 5)) == 34\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n        List<Object> lst = new ArrayList<>();\n        for (int i = -99; i < 100; i += 2) {\n            lst.add(i);\n        }\n        int odd_sum = lst.stream().filter(i -> i instanceof Integer p && p % 2 != 0 && p > 0).map(i -> (Integer) i * (Integer) i).reduce(Integer::sum).orElse(0);\n        assert s.double_the_difference(lst) == odd_sum;\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/154", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public boolean cycpattern_check(String a, String b) {\n        int l = b.length();\n        String pat = b + b;\n        for (int i = 0; i < a.length() - l + 1; i++) {\n            for (int j = 0; j < l + 1; j++) {\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.cycpattern_check(\"xyzw\", \"xyw\") == false,\n                s.cycpattern_check(\"yello\", \"ell\") == true,\n                s.cycpattern_check(\"whattup\", \"ptut\") == false,\n                s.cycpattern_check(\"efef\", \"fee\") == true,\n                s.cycpattern_check(\"abab\", \"aabb\") == false,\n                s.cycpattern_check(\"winemtt\", \"tinem\") == true\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/152", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> differences = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            differences.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return differences;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.compare(Arrays.asList(1, 2, 3, 4, 5, 1), Arrays.asList(1, 2, 3, 4, 2, -2)).equals(Arrays.asList(0, 0, 0, 0, 3, 3)),\n                s.compare(Arrays.asList(0,5,0,0,0,4), Arrays.asList(4,1,1,0,0,-2)).equals(Arrays.asList(4,4,1,0,0,6)),\n                s.compare(Arrays.asList(1, 2, 3, 4, 5, 1), Arrays.asList(1, 2, 3, 4, 2, -2)).equals(Arrays.asList(0, 0, 0, 0, 3, 3)),\n                s.compare(Arrays.asList(0, 0, 0, 0, 0, 0), Arrays.asList(0, 0, 0, 0, 0, 0)).equals(Arrays.asList(0, 0, 0, 0, 0, 0)),\n                s.compare(Arrays.asList(1, 2, 3), Arrays.asList(-1, -2, -3)).equals(Arrays.asList(2, 4, 6)),\n                s.compare(Arrays.asList(1, 2, 3, 5), Arrays.asList(-1, 2, 3, 4)).equals(Arrays.asList(2, 0, 0, 1))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/153", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public String Strongest_Extension(String class_name, List<String> extensions) {\n        String strongest = extensions.get(0);\n        int myVal = countStrength(extensions.get(0));\n        \n        for (String s : extensions) {\n            int val = countStrength(s);\n            if (val > myVal) {\n                strongest = s;\n                myVal = val;\n            }\n        }\n        \n        return class_name + \".\" + strongest;\n    }\n    \n    private int countStrength(String extension) {\n        int upperCount = 0;\n        int lowerCount = 0;\n        \n        for (char c : extension.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c)) {\n                    upperCount++;\n                } else {\n                    lowerCount++;\n                }\n            }\n        }\n        \n        return upperCount - lowerCount;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.Strongest_Extension(\"Watashi\", Arrays.asList(\"tEN\", \"niNE\", \"eIGHt8OKe\")), \"Watashi.eIGHt8OKe\"),\n                Objects.equals(s.Strongest_Extension(\"Boku123\", Arrays.asList(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")), \"Boku123.YEs.WeCaNe\"),\n                Objects.equals(s.Strongest_Extension(\"__YESIMHERE\", Arrays.asList(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")), \"__YESIMHERE.NuLl__\"),\n                Objects.equals(s.Strongest_Extension(\"K\", Arrays.asList(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")), \"K.TAR\"),\n                Objects.equals(s.Strongest_Extension(\"__HAHA\", Arrays.asList(\"Tab\", \"123\", \"781345\", \"-_-\")), \"__HAHA.123\"),\n                Objects.equals(s.Strongest_Extension(\"YameRore\", Arrays.asList(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")), \"YameRore.okIWILL123\"),\n                Objects.equals(s.Strongest_Extension(\"finNNalLLly\", Arrays.asList(\"Die\", \"NowW\", \"Wow\", \"WoW\")), \"finNNalLLly.WoW\"),\n                Objects.equals(s.Strongest_Extension(\"_\", Arrays.asList(\"Bb\", \"91245\")), \"_.Bb\"),\n                Objects.equals(s.Strongest_Extension(\"Sp\", Arrays.asList(\"671235\", \"Bb\")), \"Sp.671235\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/157", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean right_angle_triangle(int a, int b, int c) {\n        return a*a == b*b + c*c || b*b == a*a + c*c || c*c == a*a + b*b;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.right_angle_triangle(3, 4, 5) == true,\n                s.right_angle_triangle(1, 2, 3) == false,\n                s.right_angle_triangle(10, 6, 8) == true,\n                s.right_angle_triangle(2, 2, 2) == false,\n                s.right_angle_triangle(7, 24, 25) == true,\n                s.right_angle_triangle(10, 5, 7) == false,\n                s.right_angle_triangle(5, 12, 13) == true,\n                s.right_angle_triangle(15, 8, 17) == true,\n                s.right_angle_triangle(48, 55, 73) == true,\n                s.right_angle_triangle(1, 1, 1) == false,\n                s.right_angle_triangle(2, 2, 10) == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/155", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<Integer> even_odd_count(int num) {\n        List<Integer> counts = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n        String numStr = String.valueOf(Math.abs(num));\n        \n        for (int i = 0; i < numStr.length(); i++) {\n            int digit = Character.getNumericValue(numStr.charAt(i));\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        \n        counts.add(evenCount);\n        counts.add(oddCount);\n        \n        return counts;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.even_odd_count(7).equals(Arrays.asList(0, 1)),\n                s.even_odd_count(-78).equals(Arrays.asList(1, 1)),\n                s.even_odd_count(3452).equals(Arrays.asList(2, 2)),\n                s.even_odd_count(346211).equals(Arrays.asList(3, 3)),\n                s.even_odd_count(-345821).equals(Arrays.asList(3, 3)),\n                s.even_odd_count(-2).equals(Arrays.asList(1, 0)),\n                s.even_odd_count(-45347).equals(Arrays.asList(2, 3)),\n                s.even_odd_count(0).equals(Arrays.asList(1, 0))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/156", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public String int_to_mini_roman(int number) {\n        int[] num = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n        String[] sym = {\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"};\n        int i = 12;\n        StringBuilder res = new StringBuilder();\n        while (number > 0) {\n            int div = number / num[i];\n            number %= num[i];\n            while (div > 0) {\n                res.append(sym[i]);\n                div--;\n            }\n            i--;\n        }\n        return res.toString().toLowerCase();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.int_to_mini_roman(19), \"xix\"),\n                Objects.equals(s.int_to_mini_roman(152), \"clii\"),\n                Objects.equals(s.int_to_mini_roman(251), \"ccli\"),\n                Objects.equals(s.int_to_mini_roman(426), \"cdxxvi\"),\n                Objects.equals(s.int_to_mini_roman(500), \"d\"),\n                Objects.equals(s.int_to_mini_roman(1), \"i\"),\n                Objects.equals(s.int_to_mini_roman(4), \"iv\"),\n                Objects.equals(s.int_to_mini_roman(43), \"xliii\"),\n                Objects.equals(s.int_to_mini_roman(90), \"xc\"),\n                Objects.equals(s.int_to_mini_roman(94), \"xciv\"),\n                Objects.equals(s.int_to_mini_roman(532), \"dxxxii\"),\n                Objects.equals(s.int_to_mini_roman(900), \"cm\"),\n                Objects.equals(s.int_to_mini_roman(994), \"cmxciv\"),\n                Objects.equals(s.int_to_mini_roman(1000), \"m\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/159", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (need <= remaining) {\n            result.add(number + need);\n            result.add(remaining - need);\n        } else {\n            result.add(number + remaining);\n            result.add(0);\n        }\n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.eat(5, 6, 10).equals(Arrays.asList(11, 4)),\n                s.eat(4, 8, 9).equals(Arrays.asList(12, 1)),\n                s.eat(1, 10, 10).equals(Arrays.asList(11, 0)),\n                s.eat(2, 11, 5).equals(Arrays.asList(7, 0)),\n                s.eat(4, 5, 7).equals(Arrays.asList(9, 2)),\n                s.eat(4, 5, 1).equals(Arrays.asList(5, 0))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/161", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public String solve(String s) {\n        char[] chars = s.toCharArray();\n        boolean hasLetter = false;\n        \n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLetter(chars[i])) {\n                chars[i] = Character.isUpperCase(chars[i]) ? Character.toLowerCase(chars[i]) : Character.toUpperCase(chars[i]);\n                hasLetter = true;\n            }\n        }\n        \n        if (!hasLetter) {\n            StringBuilder sb = new StringBuilder(s);\n            return sb.reverse().toString();\n        } else {\n            return new String(chars);\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.solve(\"AsDf\"), \"aSdF\"),\n                Objects.equals(s.solve(\"1234\"), \"4321\"),\n                Objects.equals(s.solve(\"ab\"), \"AB\"),\n                Objects.equals(s.solve(\"#a@C\"), \"#A@c\"),\n                Objects.equals(s.solve(\"#AsdfW^45\"), \"#aSDFw^45\"),\n                Objects.equals(s.solve(\"#6@2\"), \"2@6#\"),\n                Objects.equals(s.solve(\"#$a^D\"), \"#$A^d\"),\n                Objects.equals(s.solve(\"#ccc\"), \"#CCC\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/163", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public List<Integer> generate_integers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        int lower = Math.max(2, Math.min(a, b));\n        int upper = Math.min(8, Math.max(a, b));\n\n        for (int i = lower; i <= upper; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n\n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.generate_integers(2, 10).equals(Arrays.asList(2, 4, 6, 8)),\n                s.generate_integers(10, 2).equals(Arrays.asList(2, 4, 6, 8)),\n                s.generate_integers(132, 2).equals(Arrays.asList(2, 4, 6, 8)),\n                s.generate_integers(17, 89).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/162", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> string_to_md5(String text) {\n        try {\n            if (text.isEmpty()) {\n                return Optional.empty();\n            }\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] hashBytes = md.digest(text.getBytes());\n            BigInteger no = new BigInteger(1, hashBytes);\n            String hashString = no.toString(16);\n            while (hashString.length() < 32) {\n                hashString = \"0\" + hashString;\n            }\n            return Optional.of(hashString);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            return Optional.empty();\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws NoSuchAlgorithmException {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.string_to_md5(\"Hello world\").get().equals(\"3e25960a79dbc69b674cd4ec67a72c62\"),\n                s.string_to_md5(\"\").isEmpty(),\n                s.string_to_md5(\"A B C\").get().equals(\"0ef78513b0cb8cef12743f5aeb35f888\"),\n                s.string_to_md5(\"password\").get().equals(\"5f4dcc3b5aa765d61d8327deb882cf99\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
{"task_id": "Java/160", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public int do_algebra(List<String> operator, List<Integer> operand) {\n        StringBuilder expression = new StringBuilder(String.valueOf(operand.get(0)));\n        for (int i = 0; i < operator.size(); i++) {\n            expression.append(operator.get(i)).append(operand.get(i + 1));\n        }\n        return evaluateExpression(expression.toString());\n    }\n\n    private int evaluateExpression(String expression) {\n        return (int) eval(expression);\n    }\n\n    private double eval(String expression) {\n        return new Object() {\n            int pos = -1, ch;\n\n            void nextChar() {\n                ch = (++pos < expression.length()) ? expression.charAt(pos) : -1;\n            }\n\n            boolean eat(int charToEat) {\n                while (ch == ' ') nextChar();\n                if (ch == charToEat) {\n                    nextChar();\n                    return true;\n                }\n                return false;\n            }\n\n            double parse() {\n                nextChar();\n                double x = parseExpression();\n                if (pos < expression.length()) throw new RuntimeException(\"Unexpected: \" + (char) ch);\n                return x;\n            }\n\n            double parseExpression() {\n                double x = parseTerm();\n                for (; ; ) {\n                    if (eat('+')) x += parseTerm();\n                    else if (eat('-')) x -= parseTerm();\n                    else return x;\n                }\n            }\n\n            double parseTerm() {\n                double x = parseFactor();\n                for (; ; ) {\n                    if (eat('*')) x *= parseFactor();\n                    else if (eat('/')) x /= parseFactor();\n                    else return x;\n                }\n            }\n\n            double parseFactor() {\n                if (eat('+')) return parseFactor();\n                if (eat('-')) return -parseFactor();\n\n                double x;\n                int startPos = this.pos;\n                if (eat('(')) {\n                    x = parseExpression();\n                    eat(')');\n                } else if ((ch >= '0' && ch <= '9') || ch == '.') {\n                    while ((ch >= '0' && ch <= '9') || ch == '.') nextChar();\n                    x = Double.parseDouble(expression.substring(startPos, this.pos));\n                } else {\n                    throw new RuntimeException(\"Unexpected: \" + (char) ch);\n                }\n\n                if (eat('^')) x = Math.pow(x, parseFactor());\n\n                return x;\n            }\n        }.parse();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.do_algebra(new ArrayList<>(Arrays.asList(\"**\", \"*\", \"+\")), new ArrayList<>(Arrays.asList(2, 3, 4, 5))) == 37,\n                s.do_algebra(new ArrayList<>(Arrays.asList(\"+\", \"*\", \"-\")), new ArrayList<>(Arrays.asList(2, 3, 4, 5))) == 9,\n                s.do_algebra(new ArrayList<>(Arrays.asList(\"/\", \"*\")), new ArrayList<>(Arrays.asList(7, 3, 4))) == 8,\n                s.do_algebra(new ArrayList<>(Arrays.asList(\"+\", \"**\", \"**\")), new ArrayList<>(Arrays.asList(7, 5, 3, 2))) == 1953132\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "failed: Exception in thread \"main\" java.lang.RuntimeException: Unexpected: *\n\tat Solution$1.parseFactor(Main.java:76)\n\tat Solution$1.parseTerm(Main.java:57)\n\tat Solution$1.parseExpression(Main.java:46)\n\tat Solution$1.parse(Main.java:40)\n\tat Solution.eval(Main.java:83)\n\tat Solution.evaluateExpression(Main.java:18)\n\tat Solution.do_algebra(Main.java:14)\n\tat Main.main(Main.java:91)\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "Java/158", "completion_id": 0, "test_code": "import java.math.BigInteger;\nimport java.util.stream.Collectors;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public String find_max(List<String> words) {\n        Collections.sort(words, (a, b) -> {\n            if (a.chars().distinct().count() != b.chars().distinct().count()) {\n                return (int) (b.chars().distinct().count() - a.chars().distinct().count());\n            } else {\n                return a.compareTo(b);\n            }\n        });\n        return words.get(0);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.find_max(new ArrayList<>(Arrays.asList(\"name\", \"of\", \"string\"))).equals(\"string\"),\n                s.find_max(new ArrayList<>(Arrays.asList(\"name\", \"enam\", \"game\"))).equals(\"enam\"),\n                s.find_max(new ArrayList<>(Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\"))).equals(\"aaaaaaa\"),\n                s.find_max(new ArrayList<>(Arrays.asList(\"abc\", \"cba\"))).equals(\"abc\"),\n                s.find_max(new ArrayList<>(Arrays.asList(\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals(\"footbott\"),\n                s.find_max(new ArrayList<>(Arrays.asList(\"we\", \"are\", \"gonna\", \"rock\"))).equals(\"gonna\"),\n                s.find_max(new ArrayList<>(Arrays.asList(\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals(\"nation\"),\n                s.find_max(new ArrayList<>(Arrays.asList(\"this\", \"is\", \"a\", \"prrk\"))).equals(\"this\"),\n                s.find_max(new ArrayList<>(List.of(\"b\"))).equals(\"b\"),\n                s.find_max(new ArrayList<>(Arrays.asList(\"play\", \"play\", \"play\"))).equals(\"play\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "result": "passed", "passed": true, "finish": -1, "file": "", "output": []}
