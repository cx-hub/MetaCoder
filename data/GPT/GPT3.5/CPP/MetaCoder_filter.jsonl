{"task_id": "CPP/41", "generation": "/*\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n*/\n#include<stdio.h>\nusing namespace std;\nint car_race_collision(int n){\n    // Each car moving left to right will collide with each car moving right to left\n    // So the total number of collisions will be n * n\n    return n * n;\n}\n\n"}
{"task_id": "CPP/116", "generation": "/*\nIn this Kata, you have to sort a vector of integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n>>> sort_array({1, 5, 2, 3, 4}) == {1, 2, 4, 3, 5}\n>>> sort_array({-2, -3, -4, -5, -6}) == {-4, -2, -6, -5, -3}\n>>> sort_array({1, 0, 2, 3, 4}) == {0, 1, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n    // Custom comparator function to sort based on number of ones in binary representation\n    auto cmp = [](int a, int b) {\n        int countA = __builtin_popcount(abs(a));\n        int countB = __builtin_popcount(abs(b));\n        if (countA == countB) {\n            return a < b;\n        }\n        return countA < countB;\n    };\n    \n    // Sort the vector using the custom comparator\n    sort(arr.begin(), arr.end(), cmp);\n    \n    return arr;\n}"}
{"task_id": "CPP/61", "generation": "/*\nbrackets is a string of '(' and ')'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int count = 0;\n    for(char bracket : brackets){\n        if(bracket == '('){\n            count++;\n        } else if(bracket == ')'){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count == 0;\n}\n\n"}
{"task_id": "CPP/25", "generation": "/*\nReturn vector of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n    vector<int> factors;\n    for(int i=2; i*i<=n; i++){\n        while(n%i == 0){\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if(n > 1){\n        factors.push_back(n);\n    }\n    return factors;\n}"}
{"task_id": "CPP/137", "generation": "#include <string>\n#include <algorithm>\n#include <boost/any.hpp>\nusing namespace std;\n\nboost::any compare_one(boost::any a, boost::any b) {\n    if (a.type() == b.type()) {\n        if (a.type() == typeid(int) || a.type() == typeid(float)) {\n            return max(boost::any_cast<int>(a), boost::any_cast<int>(b));\n        }\n        else if (a.type() == typeid(string)) {\n            string a_str = boost::any_cast<string>(a);\n            string b_str = boost::any_cast<string>(b);\n            float a_num = stof(a_str);\n            float b_num = stof(b_str);\n            if (a_num > b_num) {\n                return a;\n            }\n            else {\n                return b;\n            }\n        }\n    }\n    else if (boost::any_cast<string>(a) == boost::any_cast<string>(b)) {\n        return \"None\";\n    }\n    return nullptr;\n}\n"}
{"task_id": "CPP/102", "generation": "/*\nThis function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n    int max_even = -1;\n    for(int i = y; i >= x; i--){\n        if(i % 2 == 0){\n            max_even = i;\n            break;\n        }\n    }\n    return max_even;\n}\n\n"}
{"task_id": "CPP/10", "generation": "#include <string>\nusing namespace std;\n\nbool is_palindrome(string str) {\n    string s(str.rbegin(), str.rend());\n    return s == str;\n}\n\nstring make_palindrome(string str) {\n    if (str == \"\") {\n        return \"\";\n    }\n    for (int i = str.size(); i > 0; i--) {\n        if (is_palindrome(str.substr(0, i))) {\n            return str + string(str.begin(), str.begin() + i - 1);\n        }\n    }\n    return str + string(str.begin(), str.end() - 1);\n}\n"}
{"task_id": "CPP/76", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x, int n) {\n    if (x == 1) {\n        return true;\n    }\n    int power = 0;\n    while (pow(n, power) < x) {\n        power++;\n    }\n    return pow(n, power) == x;\n}\n"}
{"task_id": "CPP/94", "generation": "/*\nYou are given a vector of integers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n    int maxPrime = 0;\n    for(int num : lst){\n        if(num > 1){\n            bool isPrime = true;\n            for(int i=2; i*i<=num; i++){\n                if(num % i == 0){\n                    isPrime = false;\n                    break;\n                }\n            }\n            if(isPrime && num > maxPrime){\n                maxPrime = num;\n            }\n        }\n    }\n    \n    int sum = 0;\n    string primeStr = to_string(maxPrime);\n    for(char c : primeStr){\n        sum += c - '0';\n    }\n    \n    return sum;\n}"}
{"task_id": "CPP/32", "generation": "#include <vector>\n#include <cmath>\n\ndouble poly(std::vector<double> xs, double x) {\n    double sum = 0;\n    for (int i = 0; i < xs.size(); i++) {\n        sum += xs[i] * pow(x, i);\n    }\n    return sum;\n}\n\ndouble find_zero(std::vector<double> xs) {\n    double largestNonZeroCoef = 0;\n    for (int i = xs.size() - 2; i >= 0; i--) {\n        if (xs[i] != 0) {\n            largestNonZeroCoef = xs[i];\n            break;\n        }\n    }\n    return -largestNonZeroCoef / xs.back();\n}\n"}
{"task_id": "CPP/33", "generation": "#include <vector>\n#include <algorithm>\n\nstd::vector<int> sort_third(std::vector<int> l) {\n    std::vector<int> sorted_indices;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            sorted_indices.push_back(i);\n        }\n    }\n    std::sort(sorted_indices.begin(), sorted_indices.end(), [&l](int a, int b) {\n        return l[a] < l[b];\n    });\n\n    std::vector<int> result = l;\n    for (int i : sorted_indices) {\n        result[i] = l[i];\n    }\n    return result;\n}\n"}
{"task_id": "CPP/88", "generation": "/*\nGiven a vector of non-negative integers, return a copy of the given vector after sorting,\nyou will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n    vector<int> sorted_array = array;\n    if(array.size() == 0){\n        return sorted_array;\n    }\n    \n    int sum = array[0] + array[array.size()-1];\n    \n    if(sum % 2 == 0){\n        sort(sorted_array.begin(), sorted_array.end(), greater<int>());\n    } else {\n        sort(sorted_array.begin(), sorted_array.end());\n    }\n    \n    return sorted_array;\n}"}
{"task_id": "CPP/15", "generation": "/*\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n    string result = \"\";\n    for(int i=0; i<=n; i++){\n        result += to_string(i) + \" \";\n    }\n    result.pop_back(); // remove the extra space at the end\n    return result;\n}"}
{"task_id": "CPP/163", "generation": "/*\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order. Please note that the even digits refer to even numbers less than 10.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n    vector<int> result;\n    if(a > b){\n        int temp = a;\n        a = b;\n        b = temp;\n    }\n    for(int i=a; i<=b; i++){\n        if(i%2 == 0 && i < 10){\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/1", "generation": "#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> separate_paren_groups(string paren_string) {\n    vector<string> result;\n    vector<char> stack;\n    string current = \"\";\n    for (char c : paren_string) {\n        if (c == '(') {\n            stack.push_back('(');\n            current += c;\n        } else if (c == ')') {\n            stack.pop_back();\n            current += c;\n            if (stack.empty()) {\n                result.push_back(current);\n                current = \"\";\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/69", "generation": "/*\nYou are given a non-empty vector of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or equal to the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the vector.\nIf no such a value exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n    int maxFreq = -1;\n    for(int i=0; i<lst.size(); i++){\n        int count = 0;\n        for(int j=0; j<lst.size(); j++){\n            if(lst[j] == lst[i]){\n                count++;\n            }\n        }\n        if(count >= lst[i] && lst[i] > maxFreq){\n            maxFreq = lst[i];\n        }\n    }\n    return maxFreq;\n} \n\n"}
{"task_id": "CPP/31", "generation": "/*\nReturn true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n    if(n <= 1){\n        return false;\n    }\n    for(int i=2; i*i<=n; i++){\n        if(n % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/147", "generation": "#include <stdio.h>\n#include <vector>\nusing namespace std;\n\nint get_max_triples(int n){\n    vector<int> a;\n    for (int i = 1; i <= n; i++) {\n        a.push_back(i * i - i + 1);\n    }\n    \n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    \n    return count;\n}\n"}
{"task_id": "CPP/105", "generation": "/*\nGiven a vector of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting vector, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1 , 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n  vector<int> sorted_arr;\n  vector<string> result;\n  map<int, string> num_to_name = {\n    {1, \"One\"},\n    {2, \"Two\"},\n    {3, \"Three\"},\n    {4, \"Four\"},\n    {5, \"Five\"},\n    {6, \"Six\"},\n    {7, \"Seven\"},\n    {8, \"Eight\"},\n    {9, \"Nine\"}\n  };\n\n  for(int num : arr){\n    if(num >= 1 && num <= 9){\n      sorted_arr.push_back(num);\n    }\n  }\n\n  sort(sorted_arr.begin(), sorted_arr.end());\n\n  reverse(sorted_arr.begin(), sorted_arr.end());\n\n  for(int num : sorted_arr){\n    result.push_back(num_to_name[num]);\n  }\n\n  return result;\n}"}
{"task_id": "CPP/22", "generation": "/*\nFilter given vector of any python values only for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n    vector<int> result;\n    for(auto val : values){\n        if(val.type() == typeid(int)){\n            result.push_back(boost::any_cast<int>(val));\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/52", "generation": "/*\nReturn true if all numbers in the vector l are below threshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n    for(int i=0; i<l.size(); i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "CPP/154", "generation": "bool cycpattern_check(string a, string b) {\n    if (a.size() != b.size()) {\n        return false;\n    }\n    string double_a = a + a;\n    return double_a.find(b) != string::npos;\n}\n"}
{"task_id": "CPP/115", "generation": "int max_fill(vector<vector<int>> grid, int capacity) {\n    int rows = grid.size();\n    int cols = grid[0].size();\n    vector<int> buckets(cols, 0);\n    int count = 0;\n    \n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            if (grid[i][j] == 1) {\n                if (buckets[j] == 0) {\n                    count++;\n                    buckets[j] = capacity;\n                }\n                buckets[j]--;\n            }\n        }\n    }\n    \n    return count;\n}\n"}
{"task_id": "CPP/131", "generation": "#include <string>\n#include <iostream>\n\nint digits(int n) {\n    int product = 1;\n    bool has_odd = false;\n    std::string num_str = std::to_string(n);\n    \n    for (char digit : num_str) {\n        int num = digit - '0';\n        if (num % 2 != 0) {\n            product *= num;\n            has_odd = true;\n        }\n    }\n    \n    return has_odd ? product : 0;\n}\n"}
{"task_id": "CPP/37", "generation": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n    vector<float> l_prime = l;\n    vector<float> even_values;\n\n    // Extract even values from l\n    for(int i=0; i<l.size(); i+=2){\n        even_values.push_back(l[i]);\n    }\n\n    // Sort even values\n    sort(even_values.begin(), even_values.end());\n\n    // Replace even values in l_prime with sorted even values\n    int even_index = 0;\n    for(int i=0; i<l_prime.size(); i+=2){\n        l_prime[i] = even_values[even_index];\n        even_index++;\n    }\n\n    return l_prime;\n}"}
{"task_id": "CPP/92", "generation": "/*\nCreate a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\n\nExamples\nany_int(5, 2, 7) \u279e true\n\nany_int(3, 2, 2) \u279e false\n\nany_int(3, -2, 1) \u279e true\n\nany_int(3.6, -2.2, 2) \u279e false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n    if(floor(a) == a && floor(b) == b && floor(c) == c){\n        if(a == b + c || b == a + c || c == a + b){\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\n"}
{"task_id": "CPP/118", "generation": "/*\nYou are given a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \n\nYou may assume that the given string contains English letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n    string vowels = \"aeiouAEIOU\";\n    int n = word.length();\n    for(int i=n-2; i>0; i--){\n        if(vowels.find(word[i]) != string::npos){\n            if(word[i-1] != 'a' && word[i-1] != 'e' && word[i-1] != 'i' && word[i-1] != 'o' && word[i-1] != 'u' &&\n               word[i+1] != 'a' && word[i+1] != 'e' && word[i+1] != 'i' && word[i+1] != 'o' && word[i+1] != 'u'){\n                return string(1, word[i]);\n            }\n        }\n    }\n    return \"\";\n}"}
{"task_id": "CPP/6", "generation": "/*\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> result;\n    int max_depth = 0;\n    int current_depth = 0;\n    \n    for(int i=0; i<paren_string.length(); i++){\n        if(paren_string[i] == '('){\n            current_depth++;\n            if(current_depth > max_depth){\n                max_depth = current_depth;\n            }\n        }\n        else if(paren_string[i] == ')'){\n            current_depth--;\n        }\n        else if(paren_string[i] == ' '){\n            result.push_back(max_depth);\n            max_depth = 0;\n            current_depth = 0;\n        }\n    }\n    \n    result.push_back(max_depth);\n    \n    return result;\n} \n\n"}
{"task_id": "CPP/87", "generation": "/*\nYou are given a 2 dimensional data, as a nested vectors,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the vector,\nand return vector of vectors, {{x1, y1}, {x2, y2} ...} such that\neach vector is a coordinate - {row, columns}, starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> result;\n    for(int i=0; i<lst.size(); i++){\n        for(int j=0; j<lst[i].size(); j++){\n            if(lst[i][j] == x){\n                result.push_back({i, j});\n            }\n        }\n    }\n    sort(result.begin(), result.end(), [](const vector<int>& a, const vector<int>& b){\n        if(a[0] == b[0]){\n            return a[1] > b[1];\n        }\n        return a[0] < b[0];\n    });\n    return result;\n}"}
{"task_id": "CPP/2", "generation": "/*\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n    int integer_part = (int)number; // get the integer part of the number\n    float decimal_part = number - integer_part; // subtract the integer part to get the decimal part\n    return decimal_part;\n}\n\n"}
{"task_id": "CPP/16", "generation": "/*\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n    // Convert the string to lowercase\n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    \n    // Initialize a vector to store the distinct characters\n    vector<char> distinct_chars;\n    \n    // Iterate through the string and add distinct characters to the vector\n    for(char c : str){\n        if(find(distinct_chars.begin(), distinct_chars.end(), c) == distinct_chars.end()){\n            distinct_chars.push_back(c);\n        }\n    }\n    \n    // Return the size of the vector, which represents the number of distinct characters\n    return distinct_chars.size();\n}"}
{"task_id": "CPP/135", "generation": "#include <vector>\n\nint can_arrange(std::vector<int> arr) {\n    int largest_index = -1;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < arr[i - 1]) {\n            largest_index = i - 1;\n        }\n    }\n    return largest_index;\n}\n"}
{"task_id": "CPP/106", "generation": "#include <vector>\n\nint factorial(int num) {\n    if (num == 0) {\n        return 1;\n    }\n    return num * factorial(num - 1);\n}\n\nstd::vector<int> f(int n) {\n    std::vector<int> result;\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            result.push_back(factorial(i));\n        } else {\n            int sum = 0;\n            for (int j = 1; j <= i; j++) {\n                sum += j;\n            }\n            result.push_back(sum);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/162", "generation": "/*\nGiven a string 'text\", return its md5 hash equivalent string.\nIf 'text\" is an empty string, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n    if(text.empty()){\n        return \"None\";\n    }\n    \n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), digest);\n    \n    char mdString[33];\n    for(int i = 0; i < 16; i++){\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n    }\n    \n    return string(mdString);\n}"}
{"task_id": "CPP/5", "generation": "/*\nInsert a number \"delimeter\" between every two consecutive elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> result;\n    for(int i=0; i<numbers.size(); i++){\n        result.push_back(numbers[i]);\n        if(i != numbers.size()-1){\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/97", "generation": "/*\nComplete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n    int unitA = abs(a) % 10;\n    int unitB = abs(b) % 10;\n    return unitA * unitB;\n}"}
{"task_id": "CPP/44", "generation": "/*\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n    string result = \"\";\n    while(x > 0){\n        int remainder = x % base;\n        result = to_string(remainder) + result;\n        x = x / base;\n    }\n    return result;\n}"}
{"task_id": "CPP/161", "generation": "#include <string>\n#include <algorithm>\n#include <cctype>\n\nstd::string solve(std::string s) {\n    std::string letters;\n    for (char c : s) {\n        if (std::isalpha(c)) {\n            letters += c;\n        }\n    }\n    if (letters.empty()) {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n    for (char& c : s) {\n        if (std::isalpha(c)) {\n            c = std::isupper(c) ? std::tolower(c) : std::toupper(c);\n        }\n    }\n    return s;\n}\n"}
{"task_id": "CPP/38", "generation": "#include <string>\n\nstd::string encode_cyclic(std::string s) {\n    int l = s.length();\n    std::string output = \"\";\n    for (int i = 0; i * 3 < l; i++) {\n        std::string x = s.substr(i * 3, 3);\n        if (x.length() == 3) {\n            x = x.substr(1) + x[0];\n        }\n        output += x;\n    }\n    return output;\n}\n\nstd::string decode_cyclic(std::string s) {\n    std::string output = \"\";\n    for (int i = 0; i * 3 < s.length(); i++) {\n        std::string x = s.substr(i * 3, 3);\n        if (x.length() == 3) {\n            x = x[2] + x.substr(0, 2);\n        }\n        output += x;\n    }\n    return output;\n}\n"}
{"task_id": "CPP/93", "generation": "#include <string>\n#include <cctype>\n\nstd::string encode(std::string message) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string encoded_message = \"\";\n    for (char& c : message) {\n        if (isalpha(c)) {\n            if (vowels.find(c) != std::string::npos) {\n                encoded_message += static_cast<char>(c + 2);\n            } else {\n                encoded_message += islower(c) ? toupper(c) : tolower(c);\n            }\n        } else {\n            encoded_message += c;\n        }\n    }\n    return encoded_message;\n}\n"}
{"task_id": "CPP/152", "generation": "/*\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two vectors of scores and guesses of equal length, where each index shows a match. \nReturn a vector of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> result;\n    for(int i=0; i<game.size(); i++){\n        if(game[i] == guess[i]){\n            result.push_back(0);\n        } else {\n            result.push_back(abs(game[i] - guess[i]));\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/62", "generation": "/*\nxs represent coefficients of a polynomial.\nxs{0} + xs{1} * x + xs{2} * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n    vector<float> result;\n    for(int i=1; i<xs.size(); i++){\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}"}
{"task_id": "CPP/7", "generation": "/*\nFilter an input vector of strings only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> filtered_strings;\n    for(string s : strings){\n        if(s.find(substring) != string::npos){\n            filtered_strings.push_back(s);\n        }\n    }\n    return filtered_strings;\n}"}
{"task_id": "CPP/24", "generation": "/*\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n    int largest = 1;\n    for(int i=2; i<n; i++){\n        if(n % i == 0){\n            largest = i;\n        }\n    }\n    return largest;\n}\n\n"}
{"task_id": "CPP/79", "generation": "#include <string>\n\nstd::string decimal_to_binary(int decimal) {\n    std::string binary = \"\";\n    while (decimal > 0) {\n        binary = (decimal % 2 == 0 ? \"0\" : \"1\") + binary;\n        decimal /= 2;\n    }\n    return \"db\" + binary + \"db\";\n}\n"}
{"task_id": "CPP/155", "generation": "/*\nGiven an integer. return a vector that has the number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n    vector<int> result = {0, 0};\n    string num_str = to_string(abs(num));\n    \n    for(char c : num_str){\n        if((c - '0') % 2 == 0){\n            result[0]++;\n        } else {\n            result[1]++;\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/4", "generation": "/*\nFor a given vector of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n    // Calculate the mean of the dataset\n    float sum = 0.0;\n    for(int i=0; i<numbers.size(); i++){\n        sum += numbers[i];\n    }\n    float mean = sum / numbers.size();\n    \n    // Calculate the mean absolute deviation\n    float mad = 0.0;\n    for(int i=0; i<numbers.size(); i++){\n        mad += abs(numbers[i] - mean);\n    }\n    mad = mad / numbers.size();\n    \n    return mad;\n}\n\n"}
{"task_id": "CPP/56", "generation": "/*\nbrackets is a string of '<' and '>'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int count = 0;\n    for(char bracket : brackets){\n        if(bracket == '<'){\n            count++;\n        } else if(bracket == '>'){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count == 0;\n}"}
{"task_id": "CPP/159", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number, int need, int remaining){\n    int total_eaten = number + min(need, remaining);\n    int carrots_left = max(0, remaining - need);\n    return {total_eaten, carrots_left};\n}\n"}
{"task_id": "CPP/83", "generation": "int starts_one_ends(int n){\n    if (n == 1) {\n        return 1;\n    }\n    int count = 9;  // Numbers from 1 to 9 have 1 at the start or end\n    for (int i = 2; i < n; i++) {\n        count *= 10;  // For each additional digit, there are 10 choices (0-9)\n    }\n    return count;\n}\n"}
{"task_id": "CPP/27", "generation": "/*\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring flip_case(string str){\n    for(int i=0; i<str.length(); i++){\n        if(islower(str[i])){\n            str[i] = toupper(str[i]);\n        } else if(isupper(str[i])){\n            str[i] = tolower(str[i]);\n        }\n    }\n    return str;\n}"}
{"task_id": "CPP/146", "generation": "/*\nWrite a function that takes a vector of numbers as input and returns \nthe number of elements in the vector that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n    int count = 0;\n    for(int num : nums){\n        string str = to_string(num);\n        if(num > 10 && (str[0] - '0') % 2 != 0 && (str[str.size()-1] - '0') % 2 != 0){\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "CPP/81", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> numerical_letter_grade(vector<float> grades) {\n    vector<string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade > 3.7) {\n            result.push_back(\"A\");\n        } else if (grade > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            result.push_back(\"B\");\n        } else if (grade > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade > 1.7) {\n            result.push_back(\"C\");\n        } else if (grade > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade > 0.7) {\n            result.push_back(\"D\");\n        } else if (grade > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/136", "generation": "/*\nCreate a function that returns a vector (a, b), where \"a\" is\nthe largest of negative integers, and \"b\" is the smallest\nof positive integers in a vector.\nIf there is no negative or positive integers, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n    vector<int> result = {0, 0};\n    int largest_negative = INT_MIN;\n    int smallest_positive = INT_MAX;\n    \n    for(int num : lst){\n        if(num < 0 && num > largest_negative){\n            largest_negative = num;\n        }\n        if(num > 0 && num < smallest_positive){\n            smallest_positive = num;\n        }\n    }\n    \n    if(largest_negative != INT_MIN){\n        result[0] = largest_negative;\n    }\n    if(smallest_positive != INT_MAX){\n        result[1] = smallest_positive;\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/67", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n\nint fruit_distribution(std::string s, int n) {\n    int apples = 0, oranges = 0;\n    std::istringstream iss(s);\n    std::string fruit;\n    while (iss >> fruit) {\n        if (fruit == \"apples\") {\n            iss >> apples;\n        } else if (fruit == \"oranges\") {\n            iss >> oranges;\n        }\n    }\n    int mangoes = n - apples - oranges;\n    return mangoes;\n}\n"}
{"task_id": "CPP/48", "generation": "/*\nChecks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n    int left = 0;\n    int right = text.length() - 1;\n    \n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    \n    return true;\n}\n\n"}
{"task_id": "CPP/125", "generation": "#include <vector>\n#include <string>\n#include <algorithm>\n\nstd::vector<std::string> split_words(std::string txt) {\n    std::vector<std::string> result;\n    if (txt.find(' ') != std::string::npos) {\n        size_t pos = 0;\n        while ((pos = txt.find(' ')) != std::string::npos) {\n            result.push_back(txt.substr(0, pos));\n            txt.erase(0, pos + 1);\n        }\n        result.push_back(txt);\n    } else if (txt.find(',') != std::string::npos) {\n        size_t pos = 0;\n        while ((pos = txt.find(',')) != std::string::npos) {\n            result.push_back(txt.substr(0, pos));\n            txt.erase(0, pos + 1);\n        }\n        result.push_back(txt);\n    } else {\n        int count = std::count_if(txt.begin(), txt.end(), [](char c) {\n            return std::islower(c) && (c - 'a') % 2 != 0;\n        });\n        result.push_back(std::to_string(count));\n    }\n    return result;\n}\n"}
{"task_id": "CPP/160", "generation": "#include <iostream>\n#include <vector>\n#include <stack>\n#include <unordered_map>\n\nint do_algebra(std::vector<std::string> operators, std::vector<int> operands) {\n    std::unordered_map<std::string, int> precedence = {{\"+\", 1}, {\"-\", 1}, {\"*\", 2}, {\"//\", 2}, {\"**\", 3}};\n    std::stack<int> stack;\n    \n    auto apply_operator = [](std::string op, std::stack<int>& stack) {\n        int b = stack.top();\n        stack.pop();\n        int a = stack.top();\n        stack.pop();\n        if (op == \"+\") {\n            stack.push(a + b);\n        } else if (op == \"-\") {\n            stack.push(a - b);\n        } else if (op == \"*\") {\n            stack.push(a * b);\n        } else if (op == \"//\") {\n            stack.push(a / b);\n        } else if (op == \"**\") {\n            stack.push(pow(a, b));\n        }\n    };\n    \n    for (size_t i = 0; i < operators.size(); i++) {\n        while (!stack.empty() && precedence[operators[i]] <= precedence[std::to_string(stack.top())]) {\n            int top = stack.top();\n            stack.pop();\n            apply_operator(std::to_string(top), stack);\n        }\n        stack.push(operands[i]);\n        stack.push(std::stoi(operators[i]));\n    }\n    \n    stack.push(operands.back());\n    \n    while (!stack.empty()) {\n        int token = stack.top();\n        stack.pop();\n        if (precedence.find(std::to_string(token)) != precedence.end()) {\n            apply_operator(std::to_string(token), stack);\n        } else {\n            stack.push(token);\n        }\n    }\n    \n    return stack.top();\n}\n"}
{"task_id": "CPP/151", "generation": "/*\nGiven a vector of numbers, return the sum of squares of the numbers\nin the vector that are odd. Ignore numbers that are negative or not integers.\n\ndouble_the_difference({1, 3, 2, 0}) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference({-1, -2, 0}) == 0\ndouble_the_difference({9, -2}) == 81\ndouble_the_difference({0}) == 0  \n\nIf the input vector is empty, return 0.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nlong long double_the_difference(vector<float> lst){\n    long long sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i] > 0 && lst[i] == (int)lst[i] && (int)lst[i] % 2 != 0){\n            sum += pow(lst[i], 2);\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/117", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nvector<string> select_words(string s, int n) {\n    vector<string> result;\n    string word = \"\";\n    string vowels = \"aeiouAEIOU\";\n    \n    for (char c : s) {\n        if (c == ' ' || c == '\\0') {\n            int consonant_count = count_if(word.begin(), word.end(), [vowels](char ch) {\n                return isalpha(ch) && vowels.find(ch) == string::npos;\n            });\n            if (consonant_count == n) {\n                result.push_back(word);\n            }\n            word = \"\";\n        } else {\n            word += c;\n        }\n    }\n    \n    int consonant_count = count_if(word.begin(), word.end(), [vowels](char ch) {\n        return isalpha(ch) && vowels.find(ch) == string::npos;\n    });\n    if (consonant_count == n) {\n        result.push_back(word);\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/78", "generation": "/*\nYou have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n    // Initialize a counter to keep track of prime digits\n    int count = 0;\n    \n    // Define a function to check if a number is prime\n    auto is_prime = [](int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n    \n    // Define a mapping of hexadecimal digits to their decimal values\n    string hex_digits = \"0123456789ABCDEF\";\n    \n    // Iterate through each character in the input string\n    for (char c : num) {\n        // Convert the character to its decimal value\n        int decimal_value = hex_digits.find(c);\n        \n        // Check if the decimal value is a prime digit\n        if (decimal_value == 2 || decimal_value == 3 || decimal_value == 5 || decimal_value == 7 || decimal_value == 11 || decimal_value == 13) {\n            count++;\n        }\n    }\n    \n    return count;\n}\n\n"}
{"task_id": "CPP/74", "generation": "#include <vector>\n#include <string>\n\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n    \n    for (const std::string& word : lst1) {\n        total_chars_lst1 += word.length();\n    }\n    \n    for (const std::string& word : lst2) {\n        total_chars_lst2 += word.length();\n    }\n    \n    if (total_chars_lst1 < total_chars_lst2) {\n        return lst1;\n    } else {\n        return total_chars_lst2 < total_chars_lst1 ? lst2 : lst1;\n    }\n}\n"}
{"task_id": "CPP/53", "generation": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n    return x + y;\n}\n\n"}
{"task_id": "CPP/98", "generation": "/*\nGiven a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n    int count = 0;\n    for(int i=0; i<s.length(); i+=2){\n        if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            count++;\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/140", "generation": "#include <string>\nusing namespace std;\n\nstring fix_spaces(string text) {\n    string result = \"\";\n    int consecutive_spaces = 0;\n    for (char c : text) {\n        if (c == ' ') {\n            consecutive_spaces++;\n            if (consecutive_spaces > 2) {\n                result = result.substr(0, result.length() - 2) + \"-\";\n                consecutive_spaces = 1;\n            } else {\n                result += \"_\";\n            }\n        } else {\n            result += c;\n            consecutive_spaces = 0;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/34", "generation": "/*\nReturn sorted unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n    // Sort the vector\n    sort(l.begin(), l.end());\n    \n    // Remove duplicates\n    l.erase(unique(l.begin(), l.end()), l.end());\n    \n    return l;\n}\n\n"}
{"task_id": "CPP/66", "generation": "/*\nTask\nWrite a function that takes a string as input and returns the sum of the upper characters only's\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n    int sum = 0;\n    for(char c : s){\n        if(isupper(c)){\n            sum += c;\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/120", "generation": "/*\nGiven a vector arr of integers and a positive integer k, return a sorted vector \nof length k with the maximum k numbers in arr, in ascending order.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n    // Sort the vector in descending order\n    sort(arr.begin(), arr.end(), greater<int>());\n    \n    // Create a new vector to store the maximum k numbers\n    vector<int> result;\n    \n    // Add the first k numbers to the result vector\n    for(int i=0;i<k;i++){\n        result.push_back(arr[i]);\n    }\n    \n    // Sort the result vector in ascending order\n    sort(result.begin(), result.end());\n    \n    return result;\n}"}
{"task_id": "CPP/139", "generation": "/*\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n    long long result = 1;\n    for(int i = n; i > 0; i--){\n        long long factorial = 1;\n        for(int j = i; j > 0; j--){\n            factorial *= j;\n        }\n        result *= factorial;\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/12", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n    if (strings.empty()) {\n        return \"\";\n    }\n    string longest_str = strings[0];\n    int max_length = strings[0].length();\n    for (const string& s : strings) {\n        if (s.length() > max_length) {\n            max_length = s.length();\n            longest_str = s;\n        }\n    }\n    return longest_str;\n}\n"}
{"task_id": "CPP/121", "generation": "/*\nGiven a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solution(vector<int> lst){\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(i%2 == 0 && lst[i]%2 != 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/35", "generation": "/*\nReturn maximum element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n    float max = l[0];\n    for(int i=1; i<l.size(); i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n\n"}
{"task_id": "CPP/20", "generation": "/*\nFrom a supplied vector of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> result;\n    float min_diff = INFINITY;\n    for(int i=0; i<numbers.size()-1; i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            float diff = abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                result.clear();\n                result.push_back(min(numbers[i], numbers[j]));\n                result.push_back(max(numbers[i], numbers[j]));\n            }\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/19", "generation": "#include <iostream>\n#include <string>\n#include <vector>\n#include <map>\n#include <algorithm>\n\nstd::string sort_numbers(std::string numbers) {\n    std::map<std::string, int> number_dict = {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n\n    std::vector<std::string> numbers_list;\n    std::string word = \"\";\n    for (char c : numbers) {\n        if (c == ' ') {\n            numbers_list.push_back(word);\n            word = \"\";\n        } else {\n            word += c;\n        }\n    }\n    numbers_list.push_back(word);\n\n    std::sort(numbers_list.begin(), numbers_list.end(), [&](const std::string& a, const std::string& b) {\n        return number_dict[a] < number_dict[b];\n    });\n\n    std::string result = \"\";\n    for (const std::string& num : numbers_list) {\n        result += num + \" \";\n    }\n    result.pop_back(); // Remove the extra space at the end\n    return result;\n}\n"}
{"task_id": "CPP/85", "generation": "/*\nGiven a non-empty vector of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    int sum = 0;\n    for(int i=1; i<lst.size(); i+=2){\n        if(lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/21", "generation": "/*\nGiven vector of numbers (of at least two elements), apply a linear transform to that vector,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n    // Find the minimum and maximum numbers in the vector\n    float min_num = numbers[0];\n    float max_num = numbers[0];\n    for(int i=1; i<numbers.size(); i++){\n        if(numbers[i] < min_num){\n            min_num = numbers[i];\n        }\n        if(numbers[i] > max_num){\n            max_num = numbers[i];\n        }\n    }\n    \n    // Apply linear transformation to rescale the numbers\n    vector<float> rescaled_numbers;\n    for(int i=0; i<numbers.size(); i++){\n        float rescaled_num = (numbers[i] - min_num) / (max_num - min_num);\n        rescaled_numbers.push_back(rescaled_num);\n    }\n    \n    return rescaled_numbers;\n}\n\n"}
{"task_id": "CPP/119", "generation": "#include <string>\n#include <vector>\n\nstd::string match_parens(std::vector<std::string> lst) {\n    int open_count = 0;\n    int close_count = 0;\n    for (const std::string& s : lst) {\n        for (char c : s) {\n            if (c == '(') {\n                open_count++;\n            } else {\n                if (open_count > 0) {\n                    open_count--;\n                } else {\n                    close_count++;\n                }\n            }\n        }\n    }\n    return (open_count == 0 && close_count == 0) ? \"Yes\" : \"No\";\n}\n"}
{"task_id": "CPP/30", "generation": "/*\nReturn only positive numbers in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n    vector<float> positive_nums;\n    for(int i=0; i<l.size(); i++){\n        if(l[i] > 0){\n            positive_nums.push_back(l[i]);\n        }\n    }\n    return positive_nums;\n}"}
{"task_id": "CPP/64", "generation": "/*\nWrite a function vowels_count which takes a string representing a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. \nHere, 'y' is also a vowel, but only when it is at the end of the given word.\nExample: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n    transform(s.begin(), s.end(), s.begin(), ::tolower); // convert all characters to lowercase\n    int count = 0;\n    for(char c : s){\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n            count++;\n        }\n    }\n    if(s.back() == 'y'){ // check if the last character is 'y'\n        count++;\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/128", "generation": "/*\nYou are given a vector arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the vector, represented by 1, -1 or 0.\nNote: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n    if(arr.empty()){\n        return -32768;\n    }\n    \n    int product = 1;\n    int sum = 0;\n    \n    for(int num : arr){\n        if(num > 0){\n            product *= 1;\n        } else if(num < 0){\n            product *= -1;\n        } else {\n            product *= 0;\n        }\n        \n        sum += abs(num);\n    }\n    \n    return product * sum;\n}"}
{"task_id": "CPP/127", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cmath>\n\nbool is_prime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nstd::string intersection(std::vector<int> interval1, std::vector<int> interval2) {\n    int start1 = interval1[0];\n    int end1 = interval1[1];\n    int start2 = interval2[0];\n    int end2 = interval2[1];\n    \n    int intersection_start = std::max(start1, start2);\n    int intersection_end = std::min(end1, end2);\n    \n    if (intersection_start > intersection_end) {\n        return \"NO\";\n    }\n    \n    int intersection_length = intersection_end - intersection_start;\n    if (is_prime(intersection_length)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n"}
{"task_id": "CPP/122", "generation": "int add_elements(vector<int> arr, int k) {\n    int sum_two_digits = 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] >= 10 && arr[i] <= 99) {\n            sum_two_digits += arr[i];\n        }\n    }\n    return sum_two_digits;\n}\n"}
{"task_id": "CPP/59", "generation": "/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n    int i;\n    int largest_prime = 2;\n    \n    while (n % 2 == 0) {\n        n = n / 2;\n    }\n    \n    for (i = 3; i <= n; i = i + 2) {\n        while (n % i == 0) {\n            largest_prime = i;\n            n = n / i;\n        }\n    }\n    \n    return largest_prime;\n}\n\n"}
{"task_id": "CPP/134", "generation": "#include <string>\n\nbool check_if_last_char_is_a_letter(std::string txt) {\n    if (txt.empty()) {\n        return false;\n    }\n    char last_char = txt.back();\n    if (isalpha(last_char) && (txt.size() == 1 || txt[txt.size() - 2] == ' ')) {\n        return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/42", "generation": "/*\nReturn vector with elements incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n    vector<int> result;\n    for(int i=0; i<l.size(); i++){\n        result.push_back(l[i]+1);\n    }\n    return result;\n}"}
{"task_id": "CPP/11", "generation": "/*\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n    string result = \"\";\n    for(int i=0; i<a.length(); i++){\n        if(a[i] != b[i]){\n            result += \"1\";\n        } else {\n            result += \"0\";\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/40", "generation": "/*\ntriples_sum_to_zero takes a vector of integers as an input.\nit returns true if there are three distinct elements in the vector that\nsum to zero, and false otherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n    int n = l.size();\n    for(int i=0; i<n-2; i++){\n        for(int j=i+1; j<n-1; j++){\n            for(int k=j+1; k<n; k++){\n                if(l[i] + l[j] + l[k] == 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/13", "generation": "/*\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n    while (a != b) {\n        if (a > b) {\n            a = a - b;\n        } else {\n            b = b - a;\n        }\n    }\n    return a;\n}"}
{"task_id": "CPP/130", "generation": "#include <vector>\n\nstd::vector<int> tri(int n) {\n    if (n == 0) {\n        return {0};\n    } else if (n == 1) {\n        return {3, 1};\n    } else if (n == 2) {\n        return {3, 1, 2};\n    }\n    \n    std::vector<int> tribonacci = {3, 1, 2};\n    for (int i = 3; i <= n; i++) {\n        if (i % 2 == 0) {\n            tribonacci.push_back(1 + i / 2);\n        } else {\n            tribonacci.push_back(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i+1]);\n        }\n    }\n    \n    return tribonacci;\n}\n"}
{"task_id": "CPP/60", "generation": "/*\nsum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n    int sum = 0;\n    for(int i=1; i<=n; i++){\n        sum += i;\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/23", "generation": "/*\nReturn length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n    return str.length();\n}\n\n"}
{"task_id": "CPP/46", "generation": "/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n    if(n == 0 || n == 1){\n        return 0;\n    }\n    if(n == 2){\n        return 2;\n    }\n    if(n == 3){\n        return 0;\n    }\n    \n    int a = 0, b = 0, c = 2, d = 0, result = 0;\n    \n    for(int i = 4; i <= n; i++){\n        result = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = result;\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/51", "generation": "/*\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n    string result = \"\";\n    for(char c : text){\n        if(tolower(c) != 'a' && tolower(c) != 'e' && tolower(c) != 'i' && tolower(c) != 'o' && tolower(c) != 'u'){\n            result += c;\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/18", "generation": "#include <string>\n\nint how_many_times(std::string str, std::string substring) {\n    if (str.empty() || substring.empty()) {\n        return 0;\n    }\n    int count = 0;\n    size_t start = 0;\n    while (start < str.length()) {\n        size_t index = str.find(substring, start);\n        if (index == std::string::npos) {\n            break;\n        }\n        count++;\n        start = index + 1;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/143", "generation": "#include <stdio.h>\n#include <string>\n#include <vector>\n#include <cmath>\nusing namespace std;\n\nbool is_prime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nstring words_in_sentence(string sentence) {\n    vector<string> words;\n    string word = \"\";\n    for (char c : sentence) {\n        if (c == ' ') {\n            if (!word.empty()) {\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    if (!word.empty()) {\n        words.push_back(word);\n    }\n\n    vector<string> prime_words;\n    for (const string& w : words) {\n        if (is_prime(w.size())) {\n            prime_words.push_back(w);\n        }\n    }\n\n    string result = \"\";\n    for (const string& pw : prime_words) {\n        result += pw + \" \";\n    }\n    if (!result.empty()) {\n        result.pop_back(); // Remove the extra space at the end\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/108", "generation": "int sum_of_digits(int num) {\n    int sum = 0;\n    int temp = abs(num);\n    while (temp != 0) {\n        sum += temp % 10;\n        temp /= 10;\n    }\n    return sum;\n}\n\nint count_nums(vector<int> n) {\n    int count = 0;\n    for (int num : n) {\n        if (sum_of_digits(num) > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/43", "generation": "/*\npairs_sum_to_zero takes a vector of integers as an input.\nit returns true if there are two distinct elements in the vector that\nsum to zero, and false otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n    for(int i=0; i<l.size(); i++){\n        for(int j=i+1; j<l.size(); j++){\n            if(l[i] + l[j] == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/70", "generation": "/*\nGiven vector of integers, return vector in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\n\nExamples:\nstrange_sort_list({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_list({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_list({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> result;\n    sort(lst.begin(), lst.end());\n    int left = 0, right = lst.size() - 1;\n    while(left <= right){\n        if(left == right){\n            result.push_back(lst[left]);\n            break;\n        }\n        result.push_back(lst[left]);\n        result.push_back(lst[right]);\n        left++;\n        right--;\n    }\n    return result;\n}"}
{"task_id": "CPP/63", "generation": "/*\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n    if(n == 0 || n == 1){\n        return 0;\n    }\n    else if(n == 2){\n        return 1;\n    }\n    \n    int a = 0, b = 0, c = 1, result = 0;\n    \n    for(int i = 3; i <= n; i++){\n        result = a + b + c;\n        a = b;\n        b = c;\n        c = result;\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/89", "generation": "/*\nCreate a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n    string result = \"\";\n    for(int i=0; i<s.length(); i++){\n        char c = s[i];\n        if(isalpha(c)){\n            char base = isupper(c) ? 'A' : 'a';\n            c = (c - base + 2*2) % 26 + base;\n        }\n        result += c;\n    }\n    return result;\n}"}
{"task_id": "CPP/26", "generation": "/*\nFrom a vector of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> result;\n    for(int i=0; i<numbers.size(); i++){\n        if(count(numbers.begin(), numbers.end(), numbers[i]) == 1){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/104", "generation": "/*\nGiven a vector of positive integers x. return a sorted vector of all \nelements that hasn't any even digit.\n\nNote: Returned vector should be sorted in increasing order.\n\nFor example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n    vector<int> result;\n    for(int num : x){\n        bool hasEvenDigit = false;\n        int temp = num;\n        while(temp > 0){\n            if(temp % 2 == 0){\n                hasEvenDigit = true;\n                break;\n            }\n            temp /= 10;\n        }\n        if(!hasEvenDigit){\n            result.push_back(num);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}"}
{"task_id": "CPP/90", "generation": "/*\nYou are given a vector of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the vector.\nReturn None if there is no such element.\n\nnext_smallest({1, 2, 3, 4, 5}) == 2\nnext_smallest({5, 1, 4, 3, 2}) == 2\nnext_smallest({}) == None\nnext_smallest({1, 1}) == None\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint next_smallest(vector<int> lst){\n    if(lst.size() < 2){\n        return -1;\n    }\n    \n    sort(lst.begin(), lst.end());\n    \n    int smallest = lst[0];\n    for(int i=1; i<lst.size(); i++){\n        if(lst[i] > smallest){\n            return lst[i];\n        }\n    }\n    \n    return -1;\n}"}
{"task_id": "CPP/126", "generation": "#include <vector>\n#include <algorithm>\n#include <unordered_map>\n\nbool is_sorted(std::vector<int> lst) {\n    std::unordered_map<int, int> count_map;\n    \n    for (int num : lst) {\n        if (count_map.find(num) != count_map.end()) {\n            count_map[num]++;\n            if (count_map[num] > 2) {\n                return false;\n            }\n        } else {\n            count_map[num] = 1;\n        }\n    }\n    \n    std::vector<int> unique_sorted_lst(lst.begin(), lst.end());\n    std::sort(unique_sorted_lst.begin(), unique_sorted_lst.end());\n    unique_sorted_lst.erase(std::unique(unique_sorted_lst.begin(), unique_sorted_lst.end()), unique_sorted_lst.end());\n    \n    return lst == unique_sorted_lst;\n}\n"}
{"task_id": "CPP/68", "generation": "/*\nGiven a vector representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a vector, { smalest_value, its index },\nIf there are no even values or the given vector is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n    vector<int> result;\n    int smallest_even = -1;\n    int smallest_index = -1;\n    \n    for(int i=0; i<arr.size(); i++){\n        if(arr[i] % 2 == 0 && (smallest_even == -1 || arr[i] < smallest_even)){\n            smallest_even = arr[i];\n            smallest_index = i;\n        }\n    }\n    \n    if(smallest_even != -1){\n        result.push_back(smallest_even);\n        result.push_back(smallest_index);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/58", "generation": "/*\nReturn sorted unique common elements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> result;\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n    \n    int i = 0, j = 0;\n    while (i < l1.size() && j < l2.size()) {\n        if (l1[i] == l2[j]) {\n            if (result.empty() || result.back() != l1[i]) {\n                result.push_back(l1[i]);\n            }\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/112", "generation": "/*\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a vector containing the result string and \"True\"/\"False\" for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n    // Delete characters in s that are equal to any character in c\n    string result = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(c.find(s[i]) == string::npos){\n            result += s[i];\n        }\n    }\n    \n    // Check if the result string is palindrome\n    string reversed = result;\n    reverse(reversed.begin(), reversed.end());\n    \n    string isPalindrome = (result == reversed) ? \"True\" : \"False\";\n    \n    return {result, isPalindrome};\n}"}
{"task_id": "CPP/96", "generation": "/*\nImplement a function that takes an non-negative integer and returns a vector of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n    vector<int> primes;\n    if(n <= 1){\n        return primes;\n    }\n    \n    for(int i=2; i<n; i++){\n        bool isPrime = true;\n        for(int j=2; j*j<=i; j++){\n            if(i % j == 0){\n                isPrime = false;\n                break;\n            }\n        }\n        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    \n    return primes;\n}"}
{"task_id": "CPP/157", "generation": "/*\nGiven the lengths of the three sides of a triangle. Return true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or \n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n    // Sort the sides in ascending order\n    if(a > c){\n        swap(a, c);\n    }\n    if(b > c){\n        swap(b, c);\n    }\n    \n    // Check if the sides form a right-angled triangle\n    if(pow(c,2) == pow(a,2) + pow(b,2)){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\n"}
{"task_id": "CPP/99", "generation": "int closest_integer(string value){\n    float num = stof(value);\n    if (num < 0) {\n        return static_cast<int>(num - 0.5);\n    } else {\n        return static_cast<int>(num + 0.5);\n    }\n}\n"}
{"task_id": "CPP/149", "generation": "/*\nWrite a function that accepts a vector of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted vector with a sorted order,\nThe vector is always a vector of strings and never a vector of numbers,\nand it may contain duplicates.\nThe order of the vector should be ascending by length of each word, and you\nshould return the vector sorted by that rule.\nIf two words have the same length, sort the vector alphabetically.\nThe function should return a vector of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n    // Remove strings with odd lengths\n    vector<string> filtered_lst;\n    for(string s : lst){\n        if(s.length() % 2 == 0){\n            filtered_lst.push_back(s);\n        }\n    }\n    \n    // Sort the filtered list by length and then alphabetically\n    sort(filtered_lst.begin(), filtered_lst.end(), [](const string &a, const string &b){\n        if(a.length() == b.length()){\n            return a < b;\n        }\n        return a.length() < b.length();\n    });\n    \n    return filtered_lst;\n}"}
{"task_id": "CPP/86", "generation": "/*\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n    string result = \"\";\n    string word = \"\";\n    \n    for(int i=0; i<s.length(); i++){\n        if(s[i] == ' '){\n            sort(word.begin(), word.end());\n            result += word + \" \";\n            word = \"\";\n        } else {\n            word += s[i];\n        }\n    }\n    \n    sort(word.begin(), word.end());\n    result += word;\n    \n    return result;\n} \n\n"}
{"task_id": "CPP/129", "generation": "#include <vector>\n#include <algorithm>\n\nvector<int> minPath(vector<vector<int>>& grid, int k) {\n    int n = grid.size();\n    vector<pair<int, int>> directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n    \n    auto isValid = [&](int x, int y) {\n        return x >= 0 && x < n && y >= 0 && y < n;\n    };\n    \n    function<vector<int>(int, int, vector<int>&)> dfs = [&](int x, int y, vector<int>& path) -> vector<int> {\n        if (path.size() == k) {\n            return path;\n        }\n        \n        int current_val = grid[x][y];\n        grid[x][y] = -1;\n        vector<pair<int, int>> next_moves;\n        for (auto [dx, dy] : directions) {\n            int new_x = x + dx, new_y = y + dy;\n            if (isValid(new_x, new_y) && grid[new_x][new_y] != -1) {\n                next_moves.emplace_back(new_x, new_y);\n            }\n        }\n        \n        sort(next_moves.begin(), next_moves.end(), [&](const pair<int, int>& a, const pair<int, int>& b) {\n            return grid[a.first][a.second] < grid[b.first][b.second];\n        });\n        \n        for (const auto& [new_x, new_y] : next_moves) {\n            vector<int> result = dfs(new_x, new_y, path);\n            if (!result.empty()) {\n                return result;\n            }\n        }\n        \n        grid[x][y] = current_val;\n        return {};\n    };\n    \n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            vector<int> result = dfs(i, j, {});\n            if (!result.empty()) {\n                return result;\n            }\n        }\n    }\n    \n    return {};\n}\n"}
{"task_id": "CPP/49", "generation": "/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n    if(n == 0){\n        return 1;\n    }\n    int result = 1;\n    for(int i=0; i<n; i++){\n        result = (result * 2) % p;\n    }\n    return result;\n}"}
{"task_id": "CPP/156", "generation": "#include <string>\n#include <vector>\n#include <map>\n\nstd::string int_to_mini_roman(int number) {\n    std::map<int, std::string> roman_numerals = {\n        {1, \"i\"}, {4, \"iv\"}, {5, \"v\"}, {9, \"ix\"}, {10, \"x\"}, {40, \"xl\"},\n        {50, \"l\"}, {90, \"xc\"}, {100, \"c\"}, {400, \"cd\"}, {500, \"d\"}, {900, \"cm\"},\n        {1000, \"m\"}\n    };\n    \n    std::string result = \"\";\n    for (auto it = roman_numerals.rbegin(); it != roman_numerals.rend(); ++it) {\n        int value = it->first;\n        const std::string& numeral = it->second;\n        while (number >= value) {\n            result += numeral;\n            number -= value;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/65", "generation": "/*\nCircular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n    string num = to_string(x);\n    int n = num.size();\n    \n    if(shift > n){\n        reverse(num.begin(), num.end());\n        return num;\n    }\n    \n    shift = shift % n;\n    string result = num.substr(n-shift) + num.substr(0, n-shift);\n    \n    return result;\n}"}
{"task_id": "CPP/9", "generation": "#include <vector>\n\nstd::vector<int> rolling_max(std::vector<int> numbers) {\n    std::vector<int> result;\n    int max_num = std::numeric_limits<int>::min();\n    for (int i = 0; i < numbers.size(); i++) {\n        max_num = std::max(max_num, numbers[i]);\n        result.push_back(max_num);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/158", "generation": "/*\nWrite a function that accepts a vector of strings.\nThe vector contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\nfind_max({\"name\", \"of\", 'string\"}) == 'string\"\nfind_max({\"name\", \"enam\", \"game\"}) == \"enam\"\nfind_max({\"aaaaaaa\", \"bb\" ,\"cc\"}) == \"aaaaaaa\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring find_max(vector<string> words){\n    string max_word = \"\";\n    int max_unique_chars = 0;\n    \n    for(string word : words){\n        int unique_chars = 0;\n        vector<char> seen;\n        \n        for(char c : word){\n            if(find(seen.begin(), seen.end(), c) == seen.end()){\n                unique_chars++;\n                seen.push_back(c);\n            }\n        }\n        \n        if(unique_chars > max_unique_chars || (unique_chars == max_unique_chars && word < max_word)){\n            max_unique_chars = unique_chars;\n            max_word = word;\n        }\n    }\n    \n    return max_word;\n}"}
{"task_id": "CPP/8", "generation": "/*\nFor a given vector of integers, return a vector consisting of a sum and a product of all the integers in a vector.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n    int sum = 0;\n    int product = 1;\n    \n    for(int num : numbers){\n        sum += num;\n        product *= num;\n    }\n    \n    return {sum, product};\n}"}
{"task_id": "CPP/95", "generation": "#include <string>\n#include <map>\n#include <cctype>\n\nbool check_dict_case(map<string, string> dict) {\n    if (dict.empty()) {\n        return false;\n    }\n    for (const auto& pair : dict) {\n        const string& key = pair.first;\n        bool isLower = true;\n        bool isUpper = true;\n        for (char c : key) {\n            if (!islower(c)) {\n                isLower = false;\n            }\n            if (!isupper(c)) {\n                isUpper = false;\n            }\n        }\n        if (!isLower && !isUpper) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/55", "generation": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n    if(n <= 1){\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}\n\n"}
{"task_id": "CPP/29", "generation": "/*\nFilter an input vector of strings only for ones that start with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> result;\n    for(string s : strings){\n        if(s.substr(0, prefix.size()) == prefix){\n            result.push_back(s);\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/72", "generation": "/*\nWrite a function that returns true if the object q will fly, and false otherwise.\nThe object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) \u279e false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) \u279e false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) \u279e true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) \u279e true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n    // Check if the vector q is balanced (palindromic)\n    bool balanced = true;\n    for(int i=0; i<q.size()/2; i++){\n        if(q[i] != q[q.size()-1-i]){\n            balanced = false;\n            break;\n        }\n    }\n    \n    // Check if the sum of elements is less than or equal to the maximum weight\n    int sum = 0;\n    for(int i=0; i<q.size(); i++){\n        sum += q[i];\n    }\n    \n    // Return true if balanced and sum is less than or equal to maximum weight, false otherwise\n    return balanced && sum <= w;\n}\n\n"}
{"task_id": "CPP/54", "generation": "#include <string>\n#include <algorithm>\nbool same_chars(std::string s0, std::string s1) {\n    std::sort(s0.begin(), s0.end());\n    std::sort(s1.begin(), s1.end());\n    return s0 == s1;\n}\n"}
{"task_id": "CPP/91", "generation": "#include <stdio.h>\n#include <string>\nusing namespace std;\n\nint is_bored(string S) {\n    int boredom_count = 0;\n    size_t pos = 0;\n    while (pos < S.size()) {\n        size_t end_pos = S.find_first_of(\".?!\", pos);\n        string sentence = S.substr(pos, end_pos - pos);\n        if (!sentence.empty() && sentence[0] == 'I') {\n            boredom_count++;\n        }\n        if (end_pos == string::npos) {\n            break;\n        }\n        pos = end_pos + 1;\n    }\n    return boredom_count;\n}\n"}
{"task_id": "CPP/77", "generation": "/*\nWrite a function that takes an integer a and returns true \nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscube(int a){\n    int cube_root = cbrt(a);\n    return (cube_root * cube_root * cube_root == a);\n}"}
{"task_id": "CPP/73", "generation": "/*\nGiven a vector arr of integers, find the minimum number of elements that\nneed to be changed to make the vector palindromic. A palindromic vector is a vector that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n    int n = arr.size();\n    int count = 0;\n    \n    for(int i=0; i<n/2; i++){\n        if(arr[i] != arr[n-i-1]){\n            count++;\n        }\n    }\n    \n    return count;\n} \n\n"}
{"task_id": "CPP/71", "generation": "/*\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n    // Check if the three sides form a valid triangle\n    if(a + b > c && a + c > b && b + c > a){\n        // Calculate the semi-perimeter of the triangle\n        float s = (a + b + c) / 2;\n        // Calculate the area of the triangle using Heron's formula\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n        // Round the area to 2 decimal points\n        return roundf(area * 100) / 100;\n    } else {\n        // Return -1 if the sides do not form a valid triangle\n        return -1;\n    }\n}\n\n"}
{"task_id": "CPP/82", "generation": "/*\nWrite a function that takes a string and returns true if the string\nlength is a prime number or false otherwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n    int length = str.length();\n    if(length <= 1){\n        return false;\n    }\n    for(int i=2; i*i<=length; i++){\n        if(length % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/114", "generation": "/*\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n    long long minSum = nums[0];\n    long long currentSum = 0;\n    \n    for(int i=0; i<nums.size(); i++){\n        currentSum += nums[i];\n        minSum = min(minSum, currentSum);\n        \n        if(currentSum > 0){\n            currentSum = 0;\n        }\n    }\n    \n    return minSum;\n}\n\n"}
{"task_id": "CPP/138", "generation": "/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n    if(n % 2 != 0 || n < 8){\n        return false;\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/132", "generation": "#include <stack>\n#include <string>\n\nbool is_nested(std::string str) {\n    std::stack<char> stack;\n    for (char c : str) {\n        if (c == '[') {\n            stack.push(c);\n        } else if (c == ']' && !stack.empty()) {\n            stack.pop();\n        }\n    }\n    return !stack.empty() && stack.size() < str.size();\n}\n"}
{"task_id": "CPP/3", "generation": "/*\nYou\"re given a vector of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account falls below zero, and\nat that point function should return true. Otherwise it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n    int balance = 0;\n    for(int i=0; i<operations.size(); i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/142", "generation": "/*\n\"\nThis function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(i%3 == 0){\n            lst[i] = lst[i]*lst[i]; // square the integer entry\n        }\n        else if(i%4 == 0 && i%3 != 0){\n            lst[i] = lst[i]*lst[i]*lst[i]; // cube the integer entry\n        }\n        sum += lst[i]; // add the modified entry to the sum\n    }\n    return sum;\n}"}
{"task_id": "CPP/50", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n    // takes as input string encoded with encode_shift function. Returns decoded string.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5-(int)'a'+26)%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n\n"}
{"task_id": "CPP/103", "generation": "#include <string>\n\nstring rounded_avg(int n, int m) {\n    if (n > m) {\n        return \"-1\";\n    }\n    int avg = (n + m) / 2;\n    string binary_avg = \"\";\n    while (avg > 0) {\n        binary_avg = to_string(avg % 2) + binary_avg;\n        avg /= 2;\n    }\n    return binary_avg;\n}\n"}
{"task_id": "CPP/57", "generation": "/*\nReturn true is vector elements are monotonically increasing or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n    bool increasing = true;\n    bool decreasing = true;\n    \n    for(int i=1; i<l.size(); i++){\n        if(l[i] < l[i-1]){\n            increasing = false;\n        }\n        if(l[i] > l[i-1]){\n            decreasing = false;\n        }\n    }\n    \n    return increasing || decreasing;\n}"}
{"task_id": "CPP/28", "generation": "/*\nConcatenate vector of strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n    string result = \"\";\n    for(string s : strings){\n        result += s;\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/39", "generation": "#include <iostream>\n#include <vector>\n#include <cmath>\n\nbool is_prime(int num) {\n    if (num < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(num); i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint prime_fib(int n) {\n    auto is_fib = [](int num) {\n        int a = 0, b = 1;\n        while (a < num) {\n            int temp = a;\n            a = b;\n            b = temp + b;\n        }\n        return a == num;\n    };\n\n    int count = 0;\n    int num = 2;\n    while (count < n) {\n        if (is_fib(num) && is_prime(num)) {\n            count++;\n        }\n        num++;\n    }\n    return num - 1;\n}\n"}
{"task_id": "CPP/45", "generation": "/*\nGiven length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n    return 0.5 * a * h;\n}\n\n"}
{"task_id": "CPP/145", "generation": "#include <vector>\n#include <algorithm>\n#include <string>\n\nint digitSum(int num) {\n    if (num < 0) {\n        num = -num;\n    }\n    int sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}\n\nvector<int> order_by_points(vector<int> nums) {\n    sort(nums.begin(), nums.end(), [&](int a, int b) {\n        int sum_a = digitSum(a);\n        int sum_b = digitSum(b);\n        if (sum_a == sum_b) {\n            return find(nums.begin(), nums.end(), a) - nums.begin() < find(nums.begin(), nums.end(), b) - nums.begin();\n        }\n        return sum_a < sum_b;\n    });\n    return nums;\n}\n"}
{"task_id": "CPP/84", "generation": "/*\nGiven a positive integer N, return in binary the total sum of its digits.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 \u2264 N \u2264 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n    int sum = 0;\n    while(N > 0){\n        sum += N % 10;\n        N /= 10;\n    }\n    string binary = \"\";\n    while(sum > 0){\n        binary = to_string(sum % 2) + binary;\n        sum /= 2;\n    }\n    return binary;\n}"}
{"task_id": "CPP/113", "generation": "#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> odd_count(vector<string> lst) {\n    vector<string> result;\n    for (const string& s : lst) {\n        int count = 0;\n        for (char c : s) {\n            if ((c - '0') % 2 != 0) {\n                count++;\n            }\n        }\n        result.push_back(\"the number of odd elements \" + to_string(count) + \"n the str\" + s + \"ng \" + s + \" of the \" + s + \"nput.\\\"\");\n    }\n    return result;\n}\n"}
{"task_id": "CPP/36", "generation": "/*\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n    int count = 0;\n    for(int i=1; i<n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            int num = i;\n            while(num > 0){\n                if(num % 10 == 7){\n                    count++;\n                }\n                num = num / 10;\n            }\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/144", "generation": "/*\nYour task is to implement a function that will simplify the expression\nx * n. The function returns true if x * n evaluates to a whole number and false\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = true\nsimplify(\"1/6\", \"2/1\") = false\nsimplify(\"7/10\", \"10/2\") = false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool simplify(string x,string n){\n    // Extracting numerator and denominator from x and n\n    int x_num = stoi(x.substr(0, x.find(\"/\")));\n    int x_den = stoi(x.substr(x.find(\"/\") + 1));\n    \n    int n_num = stoi(n.substr(0, n.find(\"/\")));\n    int n_den = stoi(n.substr(n.find(\"/\") + 1));\n    \n    // Checking if x * n evaluates to a whole number\n    if((x_num * n_num) % (x_den * n_den) == 0){\n        return true;\n    } else {\n        return false;\n    }\n}"}
{"task_id": "CPP/0", "generation": "/*\nCheck if in given vector of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n    for(int i=0; i<numbers.size(); i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            if(fabs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/17", "generation": "#include <vector>\n#include <string>\n#include <unordered_map>\n\nstd::vector<int> parse_music(std::string music_string) {\n    std::unordered_map<std::string, int> note_duration = {\n        {\"o\", 4},\n        {\"o|\", 2},\n        {\".|\", 1}\n    };\n    \n    std::vector<int> result;\n    size_t start = 0;\n    size_t end = music_string.find(' ');\n    while (end != std::string::npos) {\n        std::string note = music_string.substr(start, end - start);\n        result.push_back(note_duration[note]);\n        start = end + 1;\n        end = music_string.find(' ', start);\n    }\n    std::string last_note = music_string.substr(start);\n    result.push_back(note_duration[last_note]);\n    \n    return result;\n}\n"}
{"task_id": "CPP/47", "generation": "/*\nReturn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n8.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if(n % 2 == 0){\n        return (l[n/2 - 1] + l[n/2]) / 2.0;\n    } else {\n        return l[n/2];\n    }\n}"}
{"task_id": "CPP/75", "generation": "#include <stdio.h>\n#include <vector>\n\nbool is_prime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nbool is_multiply_prime(int a) {\n    std::vector<int> primes;\n    for (int i = 2; i < 100; i++) {\n        if (is_prime(i)) {\n            primes.push_back(i);\n        }\n    }\n\n    for (int i : primes) {\n        for (int j : primes) {\n            for (int k : primes) {\n                if (i * j * k == a) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/124", "generation": "/*\nYou have to write a function which validates a given date string and\nreturns true if the date is valid otherwise false.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n    if(date.empty()){\n        return false;\n    }\n    \n    int month, day, year;\n    if(sscanf(date.c_str(), \"%d-%d-%d\", &month, &day, &year) != 3){\n        return false;\n    }\n    \n    if(month < 1 || month > 12){\n        return false;\n    }\n    \n    if(month == 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n    } else if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n            return false;\n        }\n    } else {\n        if(day < 1 || day > 31){\n            return false;\n        }\n    }\n    \n    return true;\n}"}
{"task_id": "CPP/101", "generation": "/*\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return a vector of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\", 'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n    vector<string> words;\n    string word = \"\";\n    for(char c : s){\n        if(c == ' ' || c == ','){\n            if(word != \"\"){\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    if(word != \"\"){\n        words.push_back(word);\n    }\n    return words;\n}"}
{"task_id": "CPP/14", "generation": "/*\nReturn vector of all prefixes from shortest to longest of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n    vector<string> result;\n    string prefix = \"\";\n    for(int i=0; i<str.length(); i++){\n        prefix += str[i];\n        result.push_back(prefix);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/141", "generation": "#include <string>\n#include <cctype>\n\nstd::string file_name_check(std::string file_name) {\n    int dotCount = 0;\n    int digitCount = 0;\n    std::string name, ext;\n\n    for (char c : file_name) {\n        if (c == '.') {\n            dotCount++;\n        } else if (isdigit(c)) {\n            digitCount++;\n        }\n    }\n\n    if (dotCount != 1 || digitCount > 3) {\n        return \"No\";\n    }\n\n    size_t dotPos = file_name.find('.');\n    name = file_name.substr(0, dotPos);\n    ext = file_name.substr(dotPos + 1);\n\n    if (name.empty() || !isalpha(name[0])) {\n        return \"No\";\n    }\n\n    if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\") {\n        return \"No\";\n    }\n\n    return \"Yes\";\n}\n"}
{"task_id": "CPP/123", "generation": "/*\nGiven a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n    1. Collatz(1) is {1}.\n    2. returned vector sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n    vector<int> result;\n    result.push_back(1); // Collatz(1) is {1}\n    \n    while(n != 1){\n        if(n % 2 == 1){ // if n is odd\n            result.push_back(n);\n        }\n        n = (n % 2 == 0) ? n / 2 : 3 * n + 1;\n    }\n    \n    sort(result.begin(), result.end()); // sort the vector in increasing order\n    return result;\n}"}
{"task_id": "CPP/148", "generation": "/*\nThere are eight planets in our solar system: the closerst to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2. \nThe function should return a vector containing all planets whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2, sorted by \nthe proximity to the sun. \nThe function should return an empty vector if planet1 or planet2\nare not correct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    vector<string> result;\n    int start = -1, end = -1;\n    \n    for(int i=0; i<planets.size(); i++){\n        if(planets[i] == planet1){\n            start = i;\n        }\n        if(planets[i] == planet2){\n            end = i;\n        }\n    }\n    \n    if(start == -1 || end == -1){\n        return result;\n    }\n    \n    if(start < end){\n        for(int i=start+1; i<end; i++){\n            result.push_back(planets[i]);\n        }\n    } else {\n        for(int i=end+1; i<start; i++){\n            result.push_back(planets[i]);\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/133", "generation": "/*\nYou are given a vector of numbers.\nYou need to return the sum of squared numbers in the given vector,\nround each element in the vector to the upper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n    }\n    return sum;\n}"}
{"task_id": "CPP/109", "generation": "#include <vector>\n#include <algorithm>\n\nbool move_one_ball(std::vector<int> arr) {\n    if (arr.empty()) {\n        return true;\n    }\n    std::vector<int> sorted_arr = arr;\n    std::sort(sorted_arr.begin(), sorted_arr.end());\n    int n = arr.size();\n    for (int i = 0; i < n; i++) {\n        if (arr == sorted_arr) {\n            return true;\n        }\n        int last_element = arr.back();\n        arr.pop_back();\n        arr.insert(arr.begin(), last_element);\n    }\n    return false;\n}\n"}
{"task_id": "CPP/100", "generation": "#include <vector>\n\nstd::vector<int> make_a_pile(int n) {\n    std::vector<int> stones = {n};\n    while (n > 1) {\n        if (n % 2 == 0) {\n            n += 1;\n        } else {\n            n += 2;\n        }\n        stones.push_back(n);\n    }\n    return stones;\n}\n"}
{"task_id": "CPP/150", "generation": "#include <stdio.h>\n#include <cmath>\n\nbool is_prime(int num) {\n    if (num < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(num); i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint x_or_y(int n, int x, int y) {\n    if (is_prime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n"}
{"task_id": "CPP/153", "generation": "/*\nYou will be given the name of a class (a string) and a vector of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    int max_strength = INT_MIN;\n    string strongest_extension = \"\";\n    \n    for(string extension : extensions){\n        int CAP = 0, SM = 0;\n        for(char c : extension){\n            if(isupper(c)){\n                CAP++;\n            } else if(islower(c)){\n                SM++;\n            }\n        }\n        int strength = CAP - SM;\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    \n    return class_name + \".\" + strongest_extension;\n}"}
{"task_id": "CPP/107", "generation": "/*\nGiven a positive integer n, return a vector that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n    vector<int> result = {0, 0};\n    for(int i=1; i<=n; i++){\n        string num = to_string(i);\n        string rev_num = num;\n        reverse(rev_num.begin(), rev_num.end());\n        if(num == rev_num){\n            if(i%2 == 0){\n                result[0]++;\n            }else{\n                result[1]++;\n            }\n        }\n    }\n    return result;\n} \n\n"}
{"task_id": "CPP/110", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1, vector<int> lst2){\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n"}
{"task_id": "CPP/111", "generation": "/*\nGiven a string representing a space separated lowercase letters, return a map\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n    map<char, int> result;\n    map<char, int> maxCount;\n    \n    for(char c : test){\n        if(c != ' '){\n            result[c]++;\n            if(maxCount.empty() || result[c] > maxCount.begin()->second){\n                maxCount.clear();\n                maxCount[c] = result[c];\n            } else if(result[c] == maxCount.begin()->second){\n                maxCount[c] = result[c];\n            }\n        }\n    }\n    \n    return maxCount;\n}"}
{"task_id": "CPP/80", "generation": "/*\nYou are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n    if(s.length() < 3){\n        return false;\n    }\n    \n    for(int i=0; i<s.length()-2; i++){\n        if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]){\n            return false;\n        }\n    }\n    \n    return true;\n}\n\n"}
{"task_id": "CPP/41", "generation": "/*\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n*/\n#include<stdio.h>\nusing namespace std;\nint car_race_collision(int n){\n    // Each car moving left to right will collide with each car moving right to left\n    // So the total number of collisions will be n * n\n    return n * n;\n}\n\n"}
{"task_id": "CPP/116", "generation": "/*\nIn this Kata, you have to sort a vector of integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n>>> sort_array({1, 5, 2, 3, 4}) == {1, 2, 4, 3, 5}\n>>> sort_array({-2, -3, -4, -5, -6}) == {-4, -2, -6, -5, -3}\n>>> sort_array({1, 0, 2, 3, 4}) == {0, 1, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n    // Custom comparator function to sort based on number of ones in binary representation\n    auto cmp = [](int a, int b) {\n        int countA = __builtin_popcount(abs(a));\n        int countB = __builtin_popcount(abs(b));\n        if (countA == countB) {\n            return a < b;\n        }\n        return countA < countB;\n    };\n    \n    // Sort the vector using the custom comparator function\n    sort(arr.begin(), arr.end(), cmp);\n    \n    return arr;\n}"}
{"task_id": "CPP/61", "generation": "/*\nbrackets is a string of '(' and ')'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int count = 0;\n    for(char bracket : brackets){\n        if(bracket == '('){\n            count++;\n        } else if(bracket == ')'){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count == 0;\n}"}
{"task_id": "CPP/25", "generation": "/*\nReturn vector of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n    vector<int> factors;\n    for(int i=2; i*i<=n; i++){\n        while(n%i == 0){\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if(n > 1){\n        factors.push_back(n);\n    }\n    return factors;\n}"}
{"task_id": "CPP/137", "generation": "#include <boost/any.hpp>\n#include <string>\n#include <algorithm>\n\nboost::any compare_one(boost::any a, boost::any b) {\n    if (boost::any_cast<decltype(a)>(a) == boost::any_cast<decltype(b)>(b)) {\n        return \"None\";\n    }\n    if (a.type() == typeid(int) && b.type() == typeid(int)) {\n        return std::max(boost::any_cast<int>(a), boost::any_cast<int>(b));\n    } else if (a.type() == typeid(float) && b.type() == typeid(float)) {\n        return std::max(boost::any_cast<float>(a), boost::any_cast<float>(b));\n    } else if (a.type() == typeid(std::string) && b.type() == typeid(std::string)) {\n        std::string str_a = boost::any_cast<std::string>(a);\n        std::string str_b = boost::any_cast<std::string>(b);\n        if (str_a.find(',') != std::string::npos || str_b.find(',') != std::string::npos) {\n            std::replace(str_a.begin(), str_a.end(), ',', '.');\n            std::replace(str_b.begin(), str_b.end(), ',', '.');\n        }\n        return std::max(str_a, str_b);\n    }\n    return std::max(std::to_string(boost::any_cast<decltype(a)>(a)), std::to_string(boost::any_cast<decltype(b)>(b)));\n}\n"}
{"task_id": "CPP/102", "generation": "/*\nThis function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n    int max_even = -1;\n    for(int i = y; i >= x; i--){\n        if(i % 2 == 0){\n            max_even = i;\n            break;\n        }\n    }\n    return max_even;\n}\n\n"}
{"task_id": "CPP/10", "generation": "#include <string>\nusing namespace std;\n\nbool is_palindrome(string str) {\n    string s(str.rbegin(), str.rend());\n    return s == str;\n}\n\nstring make_palindrome(string str) {\n    if (str.empty()) {\n        return \"\";\n    }\n    for (int i = str.size(); i > 0; i--) {\n        if (is_palindrome(str.substr(0, i))) {\n            return str + string(str.begin(), str.begin() + i - 1);\n        }\n    }\n    return str + string(str.begin(), str.end() - 1);\n}\n"}
{"task_id": "CPP/76", "generation": "bool is_simple_power(int x, int n) {\n    if (x == 1) {\n        return true;\n    }\n    int power = 0;\n    while (pow(n, power) < x) {\n        power++;\n    }\n    return pow(n, power) == x;\n}\n"}
{"task_id": "CPP/94", "generation": "/*\nYou are given a vector of integers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n    int maxPrime = 0;\n    for(int num : lst){\n        if(num > 1){\n            bool isPrime = true;\n            for(int i=2; i*i<=num; i++){\n                if(num % i == 0){\n                    isPrime = false;\n                    break;\n                }\n            }\n            if(isPrime && num > maxPrime){\n                maxPrime = num;\n            }\n        }\n    }\n    \n    int sum = 0;\n    string primeStr = to_string(maxPrime);\n    for(char c : primeStr){\n        sum += c - '0';\n    }\n    \n    return sum;\n}"}
{"task_id": "CPP/32", "generation": "#include <vector>\n#include <cmath>\n\ndouble poly(std::vector<double> xs, double x) {\n    double sum = 0;\n    for (int i = 0; i < xs.size(); i++) {\n        sum += xs[i] * std::pow(x, i);\n    }\n    return sum;\n}\n\ndouble find_zero(std::vector<double> xs) {\n    for (int i = 0; i < xs.size(); i++) {\n        for (int j = i + 1; j < xs.size(); j++) {\n            if (xs[i] * xs[j] < 0) {\n                return -xs[i] / xs[j];\n            }\n        }\n    }\n    return 0.0;\n}\n"}
{"task_id": "CPP/33", "generation": "#include <vector>\n#include <algorithm>\n\nstd::vector<int> sort_third(std::vector<int> l) {\n    std::vector<int> sorted_indices;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            sorted_indices.push_back(i);\n        }\n    }\n    std::sort(sorted_indices.begin(), sorted_indices.end(), [&l](int a, int b) {\n        return l[a] < l[b];\n    });\n\n    std::vector<int> result = l;\n    for (size_t i = 0; i < sorted_indices.size(); i++) {\n        result[sorted_indices[i]] = l[sorted_indices[i]];\n    }\n    return result;\n}\n"}
{"task_id": "CPP/88", "generation": "vector<int> sort_array(vector<int> array){\n    vector<int> sorted_array = array;\n    if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n        sort(sorted_array.begin(), sorted_array.end(), greater<int>());\n    } else {\n        sort(sorted_array.begin(), sorted_array.end());\n    }\n    return sorted_array;\n}\n"}
{"task_id": "CPP/15", "generation": "/*\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n    string result = \"\";\n    for(int i=0; i<=n; i++){\n        result += to_string(i) + \" \";\n    }\n    result.pop_back(); // remove the extra space at the end\n    return result;\n}"}
{"task_id": "CPP/163", "generation": "/*\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order. Please note that the even digits refer to even numbers less than 10.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n    vector<int> result;\n    if(a > b){\n        int temp = a;\n        a = b;\n        b = temp;\n    }\n    for(int i=a; i<=b; i++){\n        if(i%2 == 0 && i < 10){\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/1", "generation": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> separate_paren_groups(string paren_string) {\n    vector<string> result;\n    vector<char> stack;\n    string current_group = \"\";\n    \n    for (char c : paren_string) {\n        if (c == '(') {\n            stack.push_back('(');\n            current_group += c;\n        } else if (c == ')') {\n            stack.pop_back();\n            current_group += c;\n            if (stack.empty()) {\n                result.push_back(current_group);\n                current_group = \"\";\n            }\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/69", "generation": "/*\nYou are given a non-empty vector of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or equal to the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the vector.\nIf no such a value exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n    int maxFreq = -1;\n    for(int i=0; i<lst.size(); i++){\n        int count = 0;\n        for(int j=0; j<lst.size(); j++){\n            if(lst[j] == lst[i]){\n                count++;\n            }\n        }\n        if(count >= lst[i] && lst[i] > maxFreq){\n            maxFreq = lst[i];\n        }\n    }\n    return maxFreq;\n} \n\n"}
{"task_id": "CPP/31", "generation": "/*\nReturn true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n    if(n <= 1){\n        return false;\n    }\n    for(int i=2; i*i<=n; i++){\n        if(n % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/147", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_max_triples(int n){\n    vector<int> a(n);\n    for (int i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/105", "generation": "/*\nGiven a vector of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting vector, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1 , 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n    vector<int> sorted_arr;\n    vector<string> result;\n    map<int, string> num_to_name = {\n        {1, \"One\"},\n        {2, \"Two\"},\n        {3, \"Three\"},\n        {4, \"Four\"},\n        {5, \"Five\"},\n        {6, \"Six\"},\n        {7, \"Seven\"},\n        {8, \"Eight\"},\n        {9, \"Nine\"}\n    };\n    \n    for(int num : arr){\n        if(num >= 1 && num <= 9){\n            sorted_arr.push_back(num);\n        }\n    }\n    \n    sort(sorted_arr.begin(), sorted_arr.end());\n    reverse(sorted_arr.begin(), sorted_arr.end());\n    \n    for(int num : sorted_arr){\n        result.push_back(num_to_name[num]);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/22", "generation": "/*\nFilter given vector of any python values only for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n    vector<int> result;\n    for(auto val : values){\n        if(val.type() == typeid(int)){\n            result.push_back(boost::any_cast<int>(val));\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/52", "generation": "/*\nReturn true if all numbers in the vector l are below threshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n    for(int i=0; i<l.size(); i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "CPP/154", "generation": "#include <string>\n#include <algorithm>\n\nbool cycpattern_check(std::string a, std::string b) {\n    if (a.length() != b.length()) {\n        return false;\n    }\n    a += a;\n    return a.find(b) != std::string::npos;\n}\n"}
{"task_id": "CPP/115", "generation": "int max_fill(vector<vector<int>> grid, int capacity) {\n    int rows = grid.size();\n    int cols = grid[0].size();\n    vector<int> buckets(cols, 0);\n    int count = 0;\n    while (true) {\n        bool filled = false;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid[i][j] == 1 && buckets[j] < capacity) {\n                    buckets[j]++;\n                    filled = true;\n                }\n            }\n        }\n        if (!filled) {\n            break;\n        }\n        count++;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/131", "generation": "#include <string>\n#include <iostream>\n\nint digits(int n) {\n    int product = 1;\n    bool has_odd = false;\n    std::string num_str = std::to_string(n);\n    for (char digit : num_str) {\n        int num = digit - '0';\n        if (num % 2 != 0) {\n            product *= num;\n            has_odd = true;\n        }\n    }\n    return has_odd ? product : 0;\n}\n"}
{"task_id": "CPP/37", "generation": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n    vector<float> l_prime = l;\n    vector<float> even_values;\n\n    // Extract even values from l\n    for(int i=0; i<l.size(); i++){\n        if(i%2 == 0){\n            even_values.push_back(l[i]);\n        }\n    }\n\n    // Sort even values\n    sort(even_values.begin(), even_values.end());\n\n    // Replace even indices in l_prime with sorted even values\n    int j = 0;\n    for(int i=0; i<l.size(); i++){\n        if(i%2 == 0){\n            l_prime[i] = even_values[j];\n            j++;\n        }\n    }\n\n    return l_prime;\n}"}
{"task_id": "CPP/92", "generation": "/*\nCreate a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\n\nExamples\nany_int(5, 2, 7) \u279e true\n\nany_int(3, 2, 2) \u279e false\n\nany_int(3, -2, 1) \u279e true\n\nany_int(3.6, -2.2, 2) \u279e false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n    if((int)a == a && (int)b == b && (int)c == c){\n        if(a == b + c || b == a + c || c == a + b){\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\n"}
{"task_id": "CPP/118", "generation": "#include <string>\n#include <algorithm>\n#include <set>\n\nstd::string get_closest_vowel(std::string word) {\n    std::set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    std::set<char> consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z', 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'};\n    \n    word = word.substr(1, word.size() - 2); // Remove first and last characters\n    std::string closest_vowel = \"\";\n    \n    for (int i = word.size() - 1; i > 0; i--) {\n        if (vowels.find(word[i]) != vowels.end()) {\n            for (int j = i - 1; j > 0; j--) {\n                if (consonants.find(word[j]) != consonants.end()) {\n                    closest_vowel = word[i];\n                    break;\n                }\n            }\n            break;\n        }\n    }\n    \n    return closest_vowel;\n}\n"}
{"task_id": "CPP/6", "generation": "/*\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> result;\n    int max_depth = 0;\n    int current_depth = 0;\n    \n    for(int i=0; i<paren_string.length(); i++){\n        if(paren_string[i] == '('){\n            current_depth++;\n            max_depth = max(max_depth, current_depth);\n        }\n        else if(paren_string[i] == ')'){\n            current_depth--;\n        }\n        else if(paren_string[i] == ' '){\n            result.push_back(max_depth);\n            max_depth = 0;\n            current_depth = 0;\n        }\n    }\n    \n    result.push_back(max_depth);\n    \n    return result;\n} \n\n"}
{"task_id": "CPP/87", "generation": "#include <vector>\n#include <algorithm>\n\nvector<vector<int>> get_row(vector<vector<int>> lst, int x) {\n    vector<vector<int>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                result.push_back({i, j});\n            }\n        }\n    }\n    \n    sort(result.begin(), result.end(), [](const vector<int>& a, const vector<int>& b) {\n        if (a[0] == b[0]) {\n            return a[1] > b[1];\n        }\n        return a[0] < b[0];\n    });\n    \n    return result;\n}\n"}
{"task_id": "CPP/2", "generation": "/*\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n    int integer_part = (int)number; // get the integer part\n    float decimal_part = number - integer_part; // subtract integer part to get decimal part\n    return decimal_part;\n}\n\n"}
{"task_id": "CPP/16", "generation": "/*\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n    // Convert the string to lowercase to ignore case sensitivity\n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    \n    // Create a vector to store the distinct characters\n    vector<char> distinct_chars;\n    \n    // Iterate through the string and add distinct characters to the vector\n    for(char c : str){\n        if(find(distinct_chars.begin(), distinct_chars.end(), c) == distinct_chars.end()){\n            distinct_chars.push_back(c);\n        }\n    }\n    \n    // Return the number of distinct characters\n    return distinct_chars.size();\n} \n\n"}
{"task_id": "CPP/135", "generation": "#include <vector>\n\nint can_arrange(std::vector<int> arr) {\n    int largest_index = -1;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < arr[i - 1]) {\n            largest_index = i - 1;\n        }\n    }\n    return largest_index;\n}\n"}
{"task_id": "CPP/106", "generation": "#include <vector>\n\nint factorial(int num) {\n    if (num == 0) {\n        return 1;\n    }\n    return num * factorial(num - 1);\n}\n\nstd::vector<int> f(int n) {\n    std::vector<int> result;\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            result.push_back(factorial(i));\n        } else {\n            int sum = 0;\n            for (int j = 1; j <= i; j++) {\n                sum += j;\n            }\n            result.push_back(sum);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/162", "generation": "/*\nGiven a string 'text\", return its md5 hash equivalent string.\nIf 'text\" is an empty string, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n    if(text.empty()){\n        return \"None\";\n    }\n    \n    unsigned char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), result);\n    \n    char md5_string[MD5_DIGEST_LENGTH*2+1];\n    for(int i=0; i<MD5_DIGEST_LENGTH; i++){\n        sprintf(&md5_string[i*2], \"%02x\", (unsigned int)result[i]);\n    }\n    \n    return string(md5_string);\n}"}
{"task_id": "CPP/5", "generation": "/*\nInsert a number \"delimeter\" between every two consecutive elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> result;\n    for(int i=0; i<numbers.size(); i++){\n        result.push_back(numbers[i]);\n        if(i != numbers.size()-1){\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/97", "generation": "/*\nComplete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n    int unitA = abs(a % 10);\n    int unitB = abs(b % 10);\n    return unitA * unitB;\n}"}
{"task_id": "CPP/44", "generation": "/*\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n    string result = \"\";\n    while(x > 0){\n        int remainder = x % base;\n        result = to_string(remainder) + result;\n        x = x / base;\n    }\n    return result;\n}"}
{"task_id": "CPP/161", "generation": "/*\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n    for(int i=0; i<s.length(); i++){\n        if(isalpha(s[i])){\n            if(islower(s[i])){\n                s[i] = toupper(s[i]);\n            } else {\n                s[i] = tolower(s[i]);\n            }\n        }\n    }\n    if(count_if(s.begin(), s.end(), ::isalpha) == 0){\n        reverse(s.begin(), s.end());\n    }\n    return s;\n}"}
{"task_id": "CPP/38", "generation": "#include <string>\n\nstd::string encode_cyclic(std::string s) {\n    int l = s.length();\n    int num = (l + 2) / 3;\n    std::string output, x;\n    for (int i = 0; i * 3 < l; i++) {\n        x = s.substr(i * 3, 3);\n        if (x.length() == 3) {\n            x = x.substr(1) + x[0];\n        }\n        output += x;\n    }\n    return output;\n}\n\nstd::string decode_cyclic(std::string s) {\n    std::string output, x;\n    for (int i = 0; i < s.length(); i += 3) {\n        x = s.substr(i, 3);\n        if (x.length() == 3) {\n            x = x[2] + x.substr(0, 2);\n        }\n        output += x;\n    }\n    return output;\n}\n"}
{"task_id": "CPP/93", "generation": "#include <string>\n#include <cctype>\n\nstd::string encode(std::string message) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string encoded_message = \"\";\n    for (char& c : message) {\n        if (isalpha(c)) {\n            if (vowels.find(c) != std::string::npos) {\n                encoded_message += static_cast<char>(c + 2);\n            } else {\n                encoded_message += islower(c) ? toupper(c) : tolower(c);\n            }\n        } else {\n            encoded_message += c;\n        }\n    }\n    return encoded_message;\n}\n"}
{"task_id": "CPP/152", "generation": "/*\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two vectors of scores and guesses of equal length, where each index shows a match. \nReturn a vector of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> result;\n    for(int i=0; i<game.size(); i++){\n        if(game[i] == guess[i]){\n            result.push_back(0);\n        }else{\n            result.push_back(abs(game[i] - guess[i]));\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/62", "generation": "/*\nxs represent coefficients of a polynomial.\nxs{0} + xs{1} * x + xs{2} * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n    vector<float> result;\n    for(int i=1; i<xs.size(); i++){\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}"}
{"task_id": "CPP/7", "generation": "/*\nFilter an input vector of strings only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> filtered_strings;\n    for(string str : strings){\n        if(str.find(substring) != string::npos){\n            filtered_strings.push_back(str);\n        }\n    }\n    return filtered_strings;\n}"}
{"task_id": "CPP/24", "generation": "/*\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n    int largest = 1;\n    for(int i=2; i<n; i++){\n        if(n % i == 0){\n            largest = i;\n        }\n    }\n    return largest;\n}\n\n"}
{"task_id": "CPP/79", "generation": "#include <string>\n\nstd::string decimal_to_binary(int decimal) {\n    std::string binary = \"\";\n    while (decimal > 0) {\n        binary = (decimal % 2 == 0 ? \"0\" : \"1\") + binary;\n        decimal /= 2;\n    }\n    return \"db\" + binary + \"db\";\n}\n"}
{"task_id": "CPP/155", "generation": "/*\nGiven an integer. return a vector that has the number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n    vector<int> result = {0, 0};\n    string num_str = to_string(abs(num));\n    \n    for(char c : num_str){\n        if((c - '0') % 2 == 0){\n            result[0]++;\n        } else {\n            result[1]++;\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/4", "generation": "/*\nFor a given vector of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n    // Calculate the mean of the input numbers\n    float sum = 0;\n    for(int i=0; i<numbers.size(); i++){\n        sum += numbers[i];\n    }\n    float mean = sum / numbers.size();\n    \n    // Calculate the mean absolute deviation\n    float mad = 0;\n    for(int i=0; i<numbers.size(); i++){\n        mad += abs(numbers[i] - mean);\n    }\n    mad = mad / numbers.size();\n    \n    return mad;\n}\n\n"}
{"task_id": "CPP/56", "generation": "/*\nbrackets is a string of '<' and '>'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int count = 0;\n    for(char bracket : brackets){\n        if(bracket == '<'){\n            count++;\n        } else if(bracket == '>'){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count == 0;\n}\n\n"}
{"task_id": "CPP/159", "generation": "#include <vector>\n#include <algorithm>\n\nstd::vector<int> eat(int number, int need, int remaining) {\n    int total_carrots = number + need;\n    if (total_carrots <= remaining) {\n        return {total_carrots, 0};\n    } else {\n        return {remaining + (total_carrots - remaining), std::max(0, remaining - total_carrots)};\n    }\n}\n"}
{"task_id": "CPP/83", "generation": "int starts_one_ends(int n){\n    if (n == 1) {\n        return 1;\n    }\n    int count = 9;  // Numbers from 1 to 9 are counted\n    for (int i = 2; i <= n; i++) {\n        count += 9 * pow(10, i - 2);  // Numbers with length i that start with 1\n        count += 9 * pow(10, i - 1);  // Numbers with length i that end with 1\n    }\n    return count;\n}\n"}
{"task_id": "CPP/27", "generation": "/*\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring flip_case(string str){\n    for(int i=0; i<str.length(); i++){\n        if(islower(str[i])){\n            str[i] = toupper(str[i]);\n        }\n        else if(isupper(str[i])){\n            str[i] = tolower(str[i]);\n        }\n    }\n    return str;\n}"}
{"task_id": "CPP/146", "generation": "/*\nWrite a function that takes a vector of numbers as input and returns \nthe number of elements in the vector that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n    int count = 0;\n    for(int num : nums){\n        if(num > 10){\n            string numStr = to_string(num);\n            if((numStr[0] - '0') % 2 != 0 && (numStr[numStr.size()-1] - '0') % 2 != 0){\n                count++;\n            }\n        }\n    }\n    return count;\n} \n\n"}
{"task_id": "CPP/81", "generation": "#include <vector>\n#include <string>\n\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    \n    auto get_letter_grade = [](float gpa) {\n        if (gpa == 4.0)\n            return \"A+\";\n        else if (gpa > 3.7)\n            return \"A\";\n        else if (gpa > 3.3)\n            return \"A-\";\n        else if (gpa > 3.0)\n            return \"B+\";\n        else if (gpa > 2.7)\n            return \"B\";\n        else if (gpa > 2.3)\n            return \"B-\";\n        else if (gpa > 2.0)\n            return \"C+\";\n        else if (gpa > 1.7)\n            return \"C\";\n        else if (gpa > 1.3)\n            return \"C-\";\n        else if (gpa > 1.0)\n            return \"D+\";\n        else if (gpa > 0.7)\n            return \"D\";\n        else if (gpa >= 0.0)\n            return \"D-\";\n        else\n            return \"E\";\n    };\n    \n    for (float gpa : grades) {\n        result.push_back(get_letter_grade(gpa));\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/136", "generation": "/*\nCreate a function that returns a vector (a, b), where \"a\" is\nthe largest of negative integers, and \"b\" is the smallest\nof positive integers in a vector.\nIf there is no negative or positive integers, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n    vector<int> result = {0, 0};\n    int largest_negative = INT_MIN;\n    int smallest_positive = INT_MAX;\n    \n    for(int num : lst){\n        if(num < 0 && num > largest_negative){\n            largest_negative = num;\n        }\n        if(num > 0 && num < smallest_positive){\n            smallest_positive = num;\n        }\n    }\n    \n    if(largest_negative != INT_MIN){\n        result[0] = largest_negative;\n    }\n    if(smallest_positive != INT_MAX){\n        result[1] = smallest_positive;\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/67", "generation": "#include <string>\n#include <sstream>\nint fruit_distribution(std::string s, int n) {\n    int apples = 0, oranges = 0;\n    std::istringstream iss(s);\n    std::string fruit;\n    while (iss >> fruit) {\n        if (fruit == \"apples\") {\n            iss >> apples;\n        } else if (fruit == \"oranges\") {\n            iss >> oranges;\n        }\n    }\n    int mangoes = n - apples - oranges;\n    return mangoes;\n}\n"}
{"task_id": "CPP/48", "generation": "/*\nChecks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n    int left = 0;\n    int right = text.length() - 1;\n    \n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    \n    return true;\n}\n\n"}
{"task_id": "CPP/125", "generation": "#include <vector>\n#include <string>\n#include <algorithm>\n\nstd::vector<std::string> split_words(std::string txt) {\n    std::vector<std::string> result;\n    if (txt.find(' ') != std::string::npos) {\n        size_t pos = 0;\n        std::string token;\n        while ((pos = txt.find(' ')) != std::string::npos) {\n            token = txt.substr(0, pos);\n            result.push_back(token);\n            txt.erase(0, pos + 1);\n        }\n        result.push_back(txt);\n    } else if (txt.find(',') != std::string::npos) {\n        size_t pos = 0;\n        std::string token;\n        while ((pos = txt.find(',')) != std::string::npos) {\n            token = txt.substr(0, pos);\n            result.push_back(token);\n            txt.erase(0, pos + 1);\n        }\n        result.push_back(txt);\n    } else {\n        int count = 0;\n        for (char c : txt) {\n            if (islower(c) && (c - 'a') % 2 != 0) {\n                count++;\n            }\n        }\n        result.push_back(std::to_string(count));\n    }\n    return result;\n}\n"}
{"task_id": "CPP/160", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <stack>\n#include <unordered_map>\n#include <cmath>\n\nint do_algebra(std::vector<std::string> operators, std::vector<int> operands) {\n    std::unordered_map<std::string, int> precedence = {{\"+\", 1}, {\"-\", 1}, {\"*\", 2}, {\"//\", 2}, {\"**\", 3}};\n    std::stack<std::string> stack;\n    std::vector<std::string> output;\n\n    auto apply_operator = [](std::string op, std::stack<std::string>& stack) {\n        int b = std::stoi(stack.top());\n        stack.pop();\n        int a = std::stoi(stack.top());\n        stack.pop();\n        if (op == \"+\") {\n            stack.push(std::to_string(a + b));\n        } else if (op == \"-\") {\n            stack.push(std::to_string(a - b));\n        } else if (op == \"*\") {\n            stack.push(std::to_string(a * b));\n        } else if (op == \"//\") {\n            stack.push(std::to_string(a / b));\n        } else if (op == \"**\") {\n            stack.push(std::to_string(pow(a, b)));\n        }\n    };\n\n    for (size_t i = 0; i < operands.size(); i++) {\n        output.push_back(std::to_string(operands[i]));\n        if (i < operators.size()) {\n            while (!stack.empty() && precedence[operators[i]] <= precedence[stack.top()]) {\n                output.push_back(stack.top());\n                stack.pop();\n            }\n            stack.push(operators[i]);\n        }\n    }\n\n    while (!stack.empty()) {\n        output.push_back(stack.top());\n        stack.pop();\n    }\n\n    for (const std::string& token : output) {\n        if (precedence.find(token) != precedence.end()) {\n            apply_operator(token, stack);\n        } else {\n            stack.push(token);\n        }\n    }\n\n    return std::stoi(stack.top());\n}\n"}
{"task_id": "CPP/151", "generation": "/*\nGiven a vector of numbers, return the sum of squares of the numbers\nin the vector that are odd. Ignore numbers that are negative or not integers.\n\ndouble_the_difference({1, 3, 2, 0}) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference({-1, -2, 0}) == 0\ndouble_the_difference({9, -2}) == 81\ndouble_the_difference({0}) == 0  \n\nIf the input vector is empty, return 0.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nlong long double_the_difference(vector<float> lst){\n    long long sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i] > 0 && lst[i] == (int)lst[i] && (int)lst[i] % 2 != 0){\n            sum += pow(lst[i], 2);\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/117", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstd::vector<std::string> select_words(std::string s, int n) {\n    auto count_consonants = [](const std::string& word) {\n        std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n        int count = 0;\n        for (char c : word) {\n            if (consonants.find(c) != std::string::npos) {\n                count++;\n            }\n        }\n        return count;\n    };\n\n    std::vector<std::string> words;\n    std::string current_word = \"\";\n    for (char c : s) {\n        if (c == ' ') {\n            if (!current_word.empty()) {\n                words.push_back(current_word);\n                current_word = \"\";\n            }\n        } else {\n            current_word += c;\n        }\n    }\n    if (!current_word.empty()) {\n        words.push_back(current_word);\n    }\n\n    std::vector<std::string> result;\n    for (const std::string& word : words) {\n        if (count_consonants(word) == n) {\n            result.push_back(word);\n        }\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/78", "generation": "/*\nYou have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n    int count = 0;\n    string primes = \"2357BD\";\n    \n    for(int i=0; i<num.length(); i++){\n        if(primes.find(num[i]) != string::npos){\n            count++;\n        }\n    }\n    \n    return count;\n}\n\n"}
{"task_id": "CPP/74", "generation": "#include <vector>\n#include <string>\n\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n    \n    for (const std::string& s : lst1) {\n        total_chars_lst1 += s.size();\n    }\n    for (const std::string& s : lst2) {\n        total_chars_lst2 += s.size();\n    }\n    \n    if (total_chars_lst1 < total_chars_lst2) {\n        return lst1;\n    } else {\n        return (total_chars_lst2 < total_chars_lst1) ? lst2 : lst1;\n    }\n}\n"}
{"task_id": "CPP/53", "generation": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n    return x + y;\n}\n\n"}
{"task_id": "CPP/98", "generation": "/*\nGiven a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n    int count = 0;\n    for(int i=0; i<s.length(); i+=2){\n        if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            count++;\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/140", "generation": "#include <string>\nusing namespace std;\n\nstring fix_spaces(string text) {\n    text = regex_replace(text, regex(\" {2,}\"), \"-\");\n    text = regex_replace(text, regex(\" \"), \"_\");\n    return text;\n}\n"}
{"task_id": "CPP/34", "generation": "/*\nReturn sorted unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n    // Sort the vector\n    sort(l.begin(), l.end());\n    \n    // Remove duplicates\n    l.erase(unique(l.begin(), l.end()), l.end());\n    \n    return l;\n}\n\n"}
{"task_id": "CPP/66", "generation": "/*\nTask\nWrite a function that takes a string as input and returns the sum of the upper characters only's\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n    int sum = 0;\n    for(char c : s){\n        if(isupper(c)){\n            sum += c;\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/120", "generation": "vector<int> maximum(vector<int> arr, int k) {\n    sort(arr.begin(), arr.end());\n    return vector<int>(arr.end() - k, arr.end());\n}\n"}
{"task_id": "CPP/139", "generation": "/*\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n    long long result = 1;\n    for(int i = n; i > 0; i--){\n        long long factorial = 1;\n        for(int j = i; j > 0; j--){\n            factorial *= j;\n        }\n        result *= factorial;\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/12", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n    if (strings.empty()) {\n        return \"\";\n    }\n    string longest_str = strings[0];\n    int max_length = strings[0].length();\n    for (const string& s : strings) {\n        if (s.length() > max_length) {\n            max_length = s.length();\n            longest_str = s;\n        }\n    }\n    return longest_str;\n}\n"}
{"task_id": "CPP/121", "generation": "/*\nGiven a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solution(vector<int> lst){\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(i%2 == 0 && lst[i]%2 != 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/35", "generation": "/*\nReturn maximum element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n    float max = l[0];\n    for(int i=1; i<l.size(); i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}"}
{"task_id": "CPP/20", "generation": "/*\nFrom a supplied vector of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> result;\n    float min_diff = INFINITY;\n    for(int i=0; i<numbers.size()-1; i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            float diff = abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                result.clear();\n                result.push_back(min(numbers[i], numbers[j]));\n                result.push_back(max(numbers[i], numbers[j]));\n            }\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/19", "generation": "#include <iostream>\n#include <string>\n#include <vector>\n#include <map>\n#include <algorithm>\n\nstd::string sort_numbers(std::string numbers) {\n    std::map<std::string, int> number_map = {\n        {\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3}, {\"four\", 4},\n        {\"five\", 5}, {\"six\", 6}, {\"seven\", 7}, {\"eight\", 8}, {\"nine\", 9}\n    };\n\n    std::vector<std::string> numbers_list;\n    std::string word = \"\";\n    for (char c : numbers) {\n        if (c == ' ') {\n            numbers_list.push_back(word);\n            word = \"\";\n        } else {\n            word += c;\n        }\n    }\n    numbers_list.push_back(word);\n\n    std::sort(numbers_list.begin(), numbers_list.end(), [&](const std::string& a, const std::string& b) {\n        return number_map[a] < number_map[b];\n    });\n\n    std::string result = \"\";\n    for (const std::string& num : numbers_list) {\n        result += num + \" \";\n    }\n    result.pop_back(); // Remove the extra space at the end\n    return result;\n}\n"}
{"task_id": "CPP/85", "generation": "/*\nGiven a non-empty vector of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    int sum = 0;\n    for(int i=1; i<lst.size(); i+=2){\n        if(lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/21", "generation": "/*\nGiven vector of numbers (of at least two elements), apply a linear transform to that vector,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n    // Find the minimum and maximum numbers in the vector\n    float min_num = numbers[0];\n    float max_num = numbers[0];\n    for(int i=1; i<numbers.size(); i++){\n        if(numbers[i] < min_num){\n            min_num = numbers[i];\n        }\n        if(numbers[i] > max_num){\n            max_num = numbers[i];\n        }\n    }\n    \n    // Apply linear transform to rescale the numbers\n    vector<float> rescaled_numbers;\n    for(int i=0; i<numbers.size(); i++){\n        float rescaled_num = (numbers[i] - min_num) / (max_num - min_num);\n        rescaled_numbers.push_back(rescaled_num);\n    }\n    \n    return rescaled_numbers;\n}\n\n"}
{"task_id": "CPP/119", "generation": "#include <string>\n#include <vector>\n\nstd::string match_parens(std::vector<std::string> lst) {\n    int open_count = 0;\n    int close_count = 0;\n    for (const std::string& s : lst) {\n        for (char c : s) {\n            if (c == '(') {\n                open_count++;\n            } else {\n                if (open_count > 0) {\n                    open_count--;\n                } else {\n                    close_count++;\n                }\n            }\n        }\n    }\n    return (open_count == 0 && close_count == 0) ? \"Yes\" : \"No\";\n}\n"}
{"task_id": "CPP/30", "generation": "/*\nReturn only positive numbers in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n    vector<float> result;\n    for(int i=0; i<l.size(); i++){\n        if(l[i] > 0){\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/64", "generation": "/*\nWrite a function vowels_count which takes a string representing a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. \nHere, 'y' is also a vowel, but only when it is at the end of the given word.\nExample: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n    transform(s.begin(), s.end(), s.begin(), ::tolower); // convert all characters to lowercase\n    int count = 0;\n    for(char c : s){\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n            count++;\n        }\n    }\n    if(s.back() == 'y'){ // check if last character is 'y'\n        count++;\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/128", "generation": "/*\nYou are given a vector arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the vector, represented by 1, -1 or 0.\nNote: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n    if(arr.empty()){\n        return -32768;\n    }\n    \n    int product = 1;\n    int sum = 0;\n    \n    for(int num : arr){\n        if(num > 0){\n            product *= 1;\n        } else if(num < 0){\n            product *= -1;\n        } else {\n            product *= 0;\n        }\n        \n        sum += abs(num);\n    }\n    \n    return product * sum;\n}"}
{"task_id": "CPP/127", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cmath>\n\nbool isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nstring intersection(vector<int> interval1, vector<int> interval2) {\n    int start1 = interval1[0];\n    int end1 = interval1[1];\n    int start2 = interval2[0];\n    int end2 = interval2[1];\n    \n    int intersection_start = max(start1, start2);\n    int intersection_end = min(end1, end2);\n    \n    if (intersection_start > intersection_end) {\n        return \"NO\";\n    }\n    \n    int intersection_length = intersection_end - intersection_start;\n    if (isPrime(intersection_length)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n"}
{"task_id": "CPP/122", "generation": "int add_elements(vector<int> arr, int k) {\n    int sum_two_digits = 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] >= 10 && arr[i] <= 99) {\n            sum_two_digits += arr[i];\n        }\n    }\n    return sum_two_digits;\n}\n"}
{"task_id": "CPP/59", "generation": "/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\n\n"}
{"task_id": "CPP/134", "generation": "#include <string>\nbool check_if_last_char_is_a_letter(std::string txt) {\n    if (txt.empty()) {\n        return false;\n    }\n    char last_char = txt.back();\n    if (isalpha(last_char) && (txt.size() == 1 || txt[txt.size() - 2] == ' ')) {\n        return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/42", "generation": "/*\nReturn vector with elements incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n    vector<int> result;\n    for(int i=0; i<l.size(); i++){\n        result.push_back(l[i]+1);\n    }\n    return result;\n}"}
{"task_id": "CPP/11", "generation": "/*\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n    string result = \"\";\n    for(int i=0; i<a.length(); i++){\n        if(a[i] != b[i]){\n            result += \"1\";\n        } else {\n            result += \"0\";\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/40", "generation": "/*\ntriples_sum_to_zero takes a vector of integers as an input.\nit returns true if there are three distinct elements in the vector that\nsum to zero, and false otherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n    int n = l.size();\n    for(int i=0; i<n-2; i++){\n        for(int j=i+1; j<n-1; j++){\n            for(int k=j+1; k<n; k++){\n                if(l[i] + l[j] + l[k] == 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/13", "generation": "/*\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n    if (b == 0) {\n        return a;\n    } else {\n        return greatest_common_divisor(b, a % b);\n    }\n}"}
{"task_id": "CPP/130", "generation": "#include <vector>\n\nstd::vector<int> tri(int n) {\n    std::vector<int> tribonacci(n + 1, 0);\n    tribonacci[1] = 3;\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            tribonacci[i] = 1 + i / 2;\n        } else {\n            tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1];\n        }\n    }\n    return tribonacci;\n}\n"}
{"task_id": "CPP/60", "generation": "/*\nsum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n    int sum = 0;\n    for(int i=1; i<=n; i++){\n        sum += i;\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/23", "generation": "/*\nReturn length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n    return str.length();\n}\n\n"}
{"task_id": "CPP/46", "generation": "/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n    if(n == 0 || n == 1){\n        return 0;\n    }\n    if(n == 2){\n        return 2;\n    }\n    if(n == 3){\n        return 0;\n    }\n    \n    int a = 0, b = 0, c = 2, d = 0, sum = 0;\n    \n    for(int i = 4; i <= n; i++){\n        sum = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = sum;\n    }\n    \n    return sum;\n}\n\n"}
{"task_id": "CPP/51", "generation": "/*\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n    string result = \"\";\n    for(char c : text){\n        if(tolower(c) != 'a' && tolower(c) != 'e' && tolower(c) != 'i' && tolower(c) != 'o' && tolower(c) != 'u'){\n            result += c;\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/18", "generation": "#include <string>\n\nint how_many_times(std::string str, std::string substring) {\n    if (str.empty() || substring.empty()) {\n        return 0;\n    }\n    int count = 0;\n    size_t start = 0;\n    while (start < str.length()) {\n        size_t index = str.find(substring, start);\n        if (index == std::string::npos) {\n            break;\n        }\n        count++;\n        start = index + 1;\n    }\n    return count;\n}\n"}
{"task_id": "CPP/143", "generation": "#include <stdio.h>\n#include <string>\n#include <vector>\n#include <cmath>\nusing namespace std;\n\nbool is_prime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nstring words_in_sentence(string sentence) {\n    vector<string> words;\n    string word = \"\";\n    for (char c : sentence) {\n        if (c == ' ') {\n            if (!word.empty()) {\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    if (!word.empty()) {\n        words.push_back(word);\n    }\n    \n    vector<string> prime_words;\n    for (const string& w : words) {\n        if (is_prime(w.length())) {\n            prime_words.push_back(w);\n        }\n    }\n    \n    string result = \"\";\n    for (const string& pw : prime_words) {\n        result += pw + \" \";\n    }\n    if (!result.empty()) {\n        result.pop_back(); // Remove the extra space at the end\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/108", "generation": "#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n\nint sum_of_digits(int num) {\n    int sum = 0;\n    int temp = abs(num);\n    while (temp != 0) {\n        sum += temp % 10;\n        temp /= 10;\n    }\n    return sum;\n}\n\nint count_nums(vector<int> n) {\n    int count = 0;\n    for (int num : n) {\n        if (sum_of_digits(num) > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/43", "generation": "/*\npairs_sum_to_zero takes a vector of integers as an input.\nit returns true if there are two distinct elements in the vector that\nsum to zero, and false otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n    for(int i=0; i<l.size(); i++){\n        for(int j=i+1; j<l.size(); j++){\n            if(l[i] + l[j] == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/70", "generation": "/*\nGiven vector of integers, return vector in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\n\nExamples:\nstrange_sort_list({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_list({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_list({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> result;\n    sort(lst.begin(), lst.end());\n    int left = 0, right = lst.size() - 1;\n    while (left <= right) {\n        result.push_back(lst[left]);\n        if (left != right) {\n            result.push_back(lst[right]);\n        }\n        left++;\n        right--;\n    }\n    return result;\n}"}
{"task_id": "CPP/63", "generation": "/*\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n    if(n == 0 || n == 1){\n        return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    \n    int a = 0, b = 0, c = 1, result = 0;\n    \n    for(int i = 3; i <= n; i++){\n        result = a + b + c;\n        a = b;\n        b = c;\n        c = result;\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/89", "generation": "/*\nCreate a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n    string result = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(isalpha(s[i])){\n            char c = s[i];\n            if(islower(c)){\n                c = 'a' + (c - 'a' + 2*2) % 26;\n            } else {\n                c = 'A' + (c - 'A' + 2*2) % 26;\n            }\n            result += c;\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/26", "generation": "/*\nFrom a vector of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> result;\n    for(int i=0; i<numbers.size(); i++){\n        if(count(numbers.begin(), numbers.end(), numbers[i]) == 1){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/104", "generation": "/*\nGiven a vector of positive integers x. return a sorted vector of all \nelements that hasn't any even digit.\n\nNote: Returned vector should be sorted in increasing order.\n\nFor example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n    vector<int> result;\n    for(int num : x){\n        bool hasEvenDigit = false;\n        int temp = num;\n        while(temp > 0){\n            int digit = temp % 10;\n            if(digit % 2 == 0){\n                hasEvenDigit = true;\n                break;\n            }\n            temp /= 10;\n        }\n        if(!hasEvenDigit){\n            result.push_back(num);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}"}
{"task_id": "CPP/90", "generation": "/*\nYou are given a vector of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the vector.\nReturn None if there is no such element.\n\nnext_smallest({1, 2, 3, 4, 5}) == 2\nnext_smallest({5, 1, 4, 3, 2}) == 2\nnext_smallest({}) == None\nnext_smallest({1, 1}) == None\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint next_smallest(vector<int> lst){\n    if(lst.size() < 2){\n        return -1;\n    }\n    \n    sort(lst.begin(), lst.end());\n    \n    int smallest = lst[0];\n    for(int i=1; i<lst.size(); i++){\n        if(lst[i] > smallest){\n            return lst[i];\n        }\n    }\n    \n    return -1;\n}"}
{"task_id": "CPP/126", "generation": "#include <vector>\n#include <algorithm>\n#include <unordered_map>\n\nbool is_sorted(std::vector<int> lst) {\n    std::unordered_map<int, int> count_map;\n    for (int num : lst) {\n        if (count_map.find(num) != count_map.end()) {\n            count_map[num]++;\n            if (count_map[num] > 2) {\n                return false;\n            }\n        } else {\n            count_map[num] = 1;\n        }\n    }\n\n    std::vector<int> sorted_lst = lst;\n    std::sort(sorted_lst.begin(), sorted_lst.end());\n    \n    return lst == sorted_lst;\n}\n"}
{"task_id": "CPP/68", "generation": "/*\nGiven a vector representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a vector, { smalest_value, its index },\nIf there are no even values or the given vector is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n    vector<int> result;\n    int smallest_value = -1;\n    int smallest_index = -1;\n    \n    for(int i=0; i<arr.size(); i++){\n        if(arr[i] % 2 == 0){\n            if(smallest_value == -1 || arr[i] < smallest_value){\n                smallest_value = arr[i];\n                smallest_index = i;\n            }\n        }\n    }\n    \n    if(smallest_value != -1){\n        result.push_back(smallest_value);\n        result.push_back(smallest_index);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/58", "generation": "/*\nReturn sorted unique common elements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> result;\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n    \n    int i = 0, j = 0;\n    while (i < l1.size() && j < l2.size()) {\n        if (l1[i] == l2[j]) {\n            if (result.empty() || result.back() != l1[i]) {\n                result.push_back(l1[i]);\n            }\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/112", "generation": "/*\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a vector containing the result string and \"True\"/\"False\" for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n    // Delete characters in s that are equal to any character in c\n    string result = \"\";\n    for(int i=0;i<s.length();i++){\n        if(c.find(s[i])==string::npos){\n            result += s[i];\n        }\n    }\n    \n    // Check if the result string is palindrome\n    string temp = result;\n    reverse(temp.begin(),temp.end());\n    bool isPalindrome = (temp == result);\n    \n    // Return the result string and whether it is palindrome or not\n    return {result, isPalindrome ? \"True\" : \"False\"};\n}"}
{"task_id": "CPP/96", "generation": "/*\nImplement a function that takes an non-negative integer and returns a vector of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n    vector<int> primes;\n    if(n <= 1){\n        return primes;\n    }\n    for(int i=2; i<n; i++){\n        bool isPrime = true;\n        for(int j=2; j*j<=i; j++){\n            if(i % j == 0){\n                isPrime = false;\n                break;\n            }\n        }\n        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}"}
{"task_id": "CPP/157", "generation": "/*\nGiven the lengths of the three sides of a triangle. Return true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or \n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n    // Sort the sides in ascending order\n    if(a > c){\n        float temp = a;\n        a = c;\n        c = temp;\n    }\n    if(b > c){\n        float temp = b;\n        b = c;\n        c = temp;\n    }\n    \n    // Check if it is a right-angled triangle using Pythagorean theorem\n    if(pow(c,2) == pow(a,2) + pow(b,2)){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\n"}
{"task_id": "CPP/99", "generation": "int closest_integer(string value){\n    float num = stof(value);\n    if (num < 0) {\n        return static_cast<int>(num - 0.5);\n    } else {\n        return static_cast<int>(num + 0.5);\n    }\n}\n"}
{"task_id": "CPP/149", "generation": "/*\nWrite a function that accepts a vector of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted vector with a sorted order,\nThe vector is always a vector of strings and never a vector of numbers,\nand it may contain duplicates.\nThe order of the vector should be ascending by length of each word, and you\nshould return the vector sorted by that rule.\nIf two words have the same length, sort the vector alphabetically.\nThe function should return a vector of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n    // Remove strings with odd lengths\n    vector<string> result;\n    for(string s : lst){\n        if(s.length() % 2 == 0){\n            result.push_back(s);\n        }\n    }\n    \n    // Sort the vector by length and alphabetically\n    sort(result.begin(), result.end(), [](const string& a, const string& b){\n        if(a.length() == b.length()){\n            return a < b;\n        }\n        return a.length() < b.length();\n    });\n    \n    return result;\n}"}
{"task_id": "CPP/86", "generation": "/*\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n    string result = \"\";\n    string word = \"\";\n    \n    for(int i=0; i<s.length(); i++){\n        if(s[i] == ' '){\n            sort(word.begin(), word.end());\n            result += word + \" \";\n            word = \"\";\n        } else {\n            word += s[i];\n        }\n    }\n    \n    sort(word.begin(), word.end());\n    result += word;\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/129", "generation": "#include <vector>\n#include <algorithm>\n#include <functional>\n\nstd::vector<int> minPath(std::vector<std::vector<int>> grid, int k) {\n    int n = grid.size();\n    std::vector<std::pair<int, int>> directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n    \n    std::vector<int> result;\n    \n    std::function<std::vector<int>(int, int, std::vector<int>)> dfs = [&](int x, int y, std::vector<int> path) -> std::vector<int> {\n        if (path.size() == k) {\n            return path;\n        }\n        \n        int current_val = grid[x][y];\n        grid[x][y] = -1; // Mark as visited\n        \n        std::vector<std::pair<int, int>> next_moves;\n        for (const auto& dir : directions) {\n            int new_x = x + dir.first;\n            int new_y = y + dir.second;\n            if (new_x >= 0 && new_x < n && new_y >= 0 && new_y < n && grid[new_x][new_y] != -1) {\n                next_moves.push_back({new_x, new_y});\n            }\n        }\n        \n        std::sort(next_moves.begin(), next_moves.end(), [&](const std::pair<int, int>& a, const std::pair<int, int>& b) {\n            return grid[a.first][a.second] < grid[b.first][b.second];\n        });\n        \n        for (const auto& next_move : next_moves) {\n            std::vector<int> res = dfs(next_move.first, next_move.second, path);\n            if (!res.empty()) {\n                return res;\n            }\n        }\n        \n        grid[x][y] = current_val; // Backtrack\n        return {};\n    };\n    \n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            result = dfs(i, j, {grid[i][j]});\n            if (!result.empty()) {\n                return result;\n            }\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/49", "generation": "/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n    if (n == 0) {\n        return 1;\n    } else {\n        long long result = 1;\n        long long base = 2;\n        n = n % (p - 1); // Using Fermat's Little Theorem\n        while (n > 0) {\n            if (n % 2 == 1) {\n                result = (result * base) % p;\n            }\n            n = n / 2;\n            base = (base * base) % p;\n        }\n        return result;\n    }\n} \n\n"}
{"task_id": "CPP/156", "generation": "/*\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_roman(int number){\n    // Define the roman numeral symbols and their corresponding values\n    vector<string> roman_symbols = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n    vector<int> roman_values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    \n    // Initialize an empty string to store the roman numeral equivalent\n    string roman_numeral = \"\";\n    \n    // Iterate through the roman numeral symbols and values\n    for(int i=0; i<roman_symbols.size(); i++){\n        // Repeat the current symbol as many times as possible\n        while(number >= roman_values[i]){\n            roman_numeral += roman_symbols[i];\n            number -= roman_values[i];\n        }\n    }\n    \n    // Convert the roman numeral to lowercase\n    for(int i=0; i<roman_numeral.size(); i++){\n        roman_numeral[i] = tolower(roman_numeral[i]);\n    }\n    \n    return roman_numeral;\n}"}
{"task_id": "CPP/65", "generation": "/*\nCircular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n    string num = to_string(x);\n    int n = num.size();\n    \n    if(shift > n){\n        reverse(num.begin(), num.end());\n        return num;\n    }\n    \n    shift = shift % n;\n    \n    string result = num.substr(n-shift) + num.substr(0, n-shift);\n    \n    return result;\n}"}
{"task_id": "CPP/9", "generation": "#include <vector>\n\nstd::vector<int> rolling_max(std::vector<int> numbers) {\n    std::vector<int> result;\n    int max_num = std::numeric_limits<int>::min();\n    for (int i = 0; i < numbers.size(); i++) {\n        max_num = std::max(max_num, numbers[i]);\n        result.push_back(max_num);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/158", "generation": "/*\nWrite a function that accepts a vector of strings.\nThe vector contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\nfind_max({\"name\", \"of\", 'string\"}) == 'string\"\nfind_max({\"name\", \"enam\", \"game\"}) == \"enam\"\nfind_max({\"aaaaaaa\", \"bb\" ,\"cc\"}) == \"aaaaaaa\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring find_max(vector<string> words){\n    string maxWord = \"\";\n    int maxUniqueChars = 0;\n    \n    for(string word : words){\n        int uniqueChars = 0;\n        vector<char> chars;\n        \n        for(char c : word){\n            if(find(chars.begin(), chars.end(), c) == chars.end()){\n                uniqueChars++;\n                chars.push_back(c);\n            }\n        }\n        \n        if(uniqueChars > maxUniqueChars || (uniqueChars == maxUniqueChars && word < maxWord)){\n            maxUniqueChars = uniqueChars;\n            maxWord = word;\n        }\n    }\n    \n    return maxWord;\n}"}
{"task_id": "CPP/8", "generation": "/*\nFor a given vector of integers, return a vector consisting of a sum and a product of all the integers in a vector.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n    int sum = 0;\n    int product = 1;\n    \n    for(int num : numbers){\n        sum += num;\n        product *= num;\n    }\n    \n    return {sum, product};\n}"}
{"task_id": "CPP/95", "generation": "#include <string>\n#include <map>\n#include <cctype>\n\nbool check_dict_case(std::map<std::string, std::string> dict) {\n    if (dict.empty()) {\n        return false;\n    }\n    for (const auto& pair : dict) {\n        const std::string& key = pair.first;\n        bool isLower = true;\n        bool isUpper = true;\n        for (char c : key) {\n            if (!std::isalpha(c)) {\n                return false;\n            }\n            if (!std::islower(c)) {\n                isLower = false;\n            }\n            if (!std::isupper(c)) {\n                isUpper = false;\n            }\n        }\n        if (!(isLower || isUpper)) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/55", "generation": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n    if(n <= 1){\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}\n\n"}
{"task_id": "CPP/29", "generation": "/*\nFilter an input vector of strings only for ones that start with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> filtered_strings;\n    for(string s : strings){\n        if(s.substr(0, prefix.length()) == prefix){\n            filtered_strings.push_back(s);\n        }\n    }\n    return filtered_strings;\n}"}
{"task_id": "CPP/72", "generation": "/*\nWrite a function that returns true if the object q will fly, and false otherwise.\nThe object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) \u279e false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) \u279e false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) \u279e true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) \u279e true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n    // Check if the vector is balanced (palindromic)\n    bool balanced = true;\n    for(int i=0; i<q.size()/2; i++){\n        if(q[i] != q[q.size()-1-i]){\n            balanced = false;\n            break;\n        }\n    }\n    \n    // Check if the sum of elements is less than or equal to the maximum weight\n    int sum = 0;\n    for(int i=0; i<q.size(); i++){\n        sum += q[i];\n    }\n    \n    return balanced && sum <= w;\n}\n\n"}
{"task_id": "CPP/54", "generation": "#include <string>\n#include <algorithm>\n\nbool same_chars(std::string s0, std::string s1) {\n    std::sort(s0.begin(), s0.end());\n    std::sort(s1.begin(), s1.end());\n    return s0 == s1;\n}\n"}
{"task_id": "CPP/91", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n\nint is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string sentence;\n    int boredom_count = 0;\n    while (std::getline(ss, sentence, '.') || std::getline(ss, sentence, '?') || std::getline(ss, sentence, '!')) {\n        if (!sentence.empty() && sentence[0] == 'I') {\n            boredom_count++;\n        }\n    }\n    return boredom_count;\n}\n"}
{"task_id": "CPP/77", "generation": "/*\nWrite a function that takes an integer a and returns true \nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscube(int a){\n    int cube_root = cbrt(a);\n    return (cube_root * cube_root * cube_root == a);\n}"}
{"task_id": "CPP/73", "generation": "/*\nGiven a vector arr of integers, find the minimum number of elements that\nneed to be changed to make the vector palindromic. A palindromic vector is a vector that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n    int n = arr.size();\n    int count = 0;\n    \n    for(int i=0; i<n/2; i++){\n        if(arr[i] != arr[n-i-1]){\n            count++;\n        }\n    }\n    \n    return count;\n} \n\n"}
{"task_id": "CPP/71", "generation": "/*\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n    // Check if the sides form a valid triangle\n    if(a + b > c && a + c > b && b + c > a){\n        // Calculate the semi-perimeter\n        float s = (a + b + c) / 2;\n        // Calculate the area using Heron's formula\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n        // Round the area to 2 decimal points\n        return round(area * 100) / 100;\n    } else {\n        return -1;\n    }\n}\n\n"}
{"task_id": "CPP/82", "generation": "/*\nWrite a function that takes a string and returns true if the string\nlength is a prime number or false otherwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n    int length = str.length();\n    if(length <= 1){\n        return false;\n    }\n    for(int i=2; i*i<=length; i++){\n        if(length % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/114", "generation": "/*\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n    long long minSum = nums[0];\n    long long currentSum = nums[0];\n    \n    for(int i=1; i<nums.size(); i++){\n        currentSum = min(nums[i], currentSum + nums[i]);\n        minSum = min(minSum, currentSum);\n    }\n    \n    return minSum;\n}\n\n"}
{"task_id": "CPP/138", "generation": "/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n    if(n % 2 != 0 || n < 8){\n        return false;\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/132", "generation": "#include <stack>\n#include <string>\n\nbool is_nested(std::string str) {\n    std::stack<char> stack;\n    for (char c : str) {\n        if (c == '[') {\n            stack.push(c);\n        } else if (c == ']' && !stack.empty() && stack.top() == '[') {\n            stack.pop();\n        }\n    }\n    return !stack.empty() && stack.size() < str.size();\n}\n"}
{"task_id": "CPP/3", "generation": "/*\nYou\"re given a vector of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account falls below zero, and\nat that point function should return true. Otherwise it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n    int balance = 0;\n    for(int i=0; i<operations.size(); i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/142", "generation": "/*\n\"\nThis function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(i%3 == 0){\n            lst[i] = lst[i]*lst[i]; // square the integer entry\n        }\n        else if(i%4 == 0 && i%3 != 0){\n            lst[i] = lst[i]*lst[i]*lst[i]; // cube the integer entry\n        }\n        sum += lst[i];\n    }\n    return sum;\n}"}
{"task_id": "CPP/50", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n    // takes as input string encoded with encode_shift function. Returns decoded string.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5-(int)'a'+26)%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n\n"}
{"task_id": "CPP/103", "generation": "#include <string>\n\nstring rounded_avg(int n, int m) {\n    if (n > m) {\n        return \"-1\";\n    }\n    int avg = (n + m) / 2;\n    string binary_avg = \"\";\n    while (avg > 0) {\n        binary_avg = to_string(avg % 2) + binary_avg;\n        avg /= 2;\n    }\n    if (binary_avg == \"\") {\n        binary_avg = \"0\";\n    }\n    return binary_avg;\n}\n"}
{"task_id": "CPP/57", "generation": "/*\nReturn true is vector elements are monotonically increasing or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n    bool increasing = true;\n    bool decreasing = true;\n    \n    for(int i=1; i<l.size(); i++){\n        if(l[i] < l[i-1]){\n            increasing = false;\n        }\n        if(l[i] > l[i-1]){\n            decreasing = false;\n        }\n    }\n    \n    return increasing || decreasing;\n}"}
{"task_id": "CPP/28", "generation": "/*\nConcatenate vector of strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n    string result = \"\";\n    for(string s : strings){\n        result += s;\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/39", "generation": "#include <iostream>\n#include <vector>\n#include <cmath>\n\nbool is_prime(int num) {\n    if (num < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(num); i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint prime_fib(int n) {\n    auto is_fib = [](int num) {\n        int a = 0, b = 1;\n        while (a < num) {\n            int temp = a;\n            a = b;\n            b = temp + b;\n        }\n        return a == num;\n    };\n\n    int count = 0;\n    int num = 2;\n    while (count < n) {\n        if (is_fib(num) && is_prime(num)) {\n            count++;\n        }\n        num++;\n    }\n    return num - 1;\n}\n"}
{"task_id": "CPP/45", "generation": "/*\nGiven length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n    return 0.5 * a * h;\n}\n\n"}
{"task_id": "CPP/145", "generation": "#include <vector>\n#include <string>\n#include <algorithm>\n\nint digitSum(int num) {\n    std::string numStr = std::to_string(num);\n    int sum = 0;\n    for (char digit : numStr) {\n        if (digit == '-') continue;\n        sum += digit - '0';\n    }\n    return sum;\n}\n\nstd::vector<int> order_by_points(std::vector<int> nums) {\n    std::sort(nums.begin(), nums.end(), [&](int a, int b) {\n        int sumA = digitSum(a);\n        int sumB = digitSum(b);\n        if (sumA == sumB) {\n            return std::find(nums.begin(), nums.end(), a) - nums.begin() < std::find(nums.begin(), nums.end(), b) - nums.begin();\n        }\n        return sumA < sumB;\n    });\n    return nums;\n}\n"}
{"task_id": "CPP/84", "generation": "/*\nGiven a positive integer N, return in binary the total sum of its digits.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 \u2264 N \u2264 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n    int sum = 0;\n    while(N > 0){\n        sum += N % 10;\n        N /= 10;\n    }\n    string binary = \"\";\n    while(sum > 0){\n        binary = to_string(sum % 2) + binary;\n        sum /= 2;\n    }\n    return binary;\n}\n\n"}
{"task_id": "CPP/113", "generation": "#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> odd_count(vector<string> lst) {\n    vector<string> result;\n    for (const string& s : lst) {\n        int odd_count = 0;\n        for (char c : s) {\n            if ((c - '0') % 2 != 0) {\n                odd_count++;\n            }\n        }\n        result.push_back(\"the number of odd elements \" + to_string(odd_count) + \"n the str\" + s + \" of the \" + s + \"nput.\\\"\");\n    }\n    return result;\n}\n"}
{"task_id": "CPP/36", "generation": "/*\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n    int count = 0;\n    for(int i=1; i<n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            int num = i;\n            while(num > 0){\n                if(num % 10 == 7){\n                    count++;\n                }\n                num /= 10;\n            }\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/144", "generation": "/*\nYour task is to implement a function that will simplify the expression\nx * n. The function returns true if x * n evaluates to a whole number and false\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = true\nsimplify(\"1/6\", \"2/1\") = false\nsimplify(\"7/10\", \"10/2\") = false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool simplify(string x,string n){\n    // Extracting numerator and denominator from x and n\n    int x_num = stoi(x.substr(0, x.find(\"/\")));\n    int x_den = stoi(x.substr(x.find(\"/\") + 1));\n    int n_num = stoi(n.substr(0, n.find(\"/\")));\n    int n_den = stoi(n.substr(n.find(\"/\") + 1));\n    \n    // Calculating the result of x * n\n    double result = (double)x_num / x_den * n_num / n_den;\n    \n    // Checking if the result is a whole number\n    if(result == (int)result){\n        return true;\n    } else {\n        return false;\n    }\n}"}
{"task_id": "CPP/0", "generation": "/*\nCheck if in given vector of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n    for(int i=0; i<numbers.size(); i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            if(fabs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/17", "generation": "#include <vector>\n#include <string>\n#include <unordered_map>\n\nstd::vector<int> parse_music(std::string music_string) {\n    std::unordered_map<std::string, int> notes_duration = {\n        {\"o\", 4},\n        {\"o|\", 2},\n        {\".|\", 1}\n    };\n    \n    std::vector<int> result;\n    size_t pos = 0;\n    while ((pos = music_string.find(\" \")) != std::string::npos) {\n        std::string note = music_string.substr(0, pos);\n        result.push_back(notes_duration[note]);\n        music_string.erase(0, pos + 1);\n    }\n    result.push_back(notes_duration[music_string]); // Last note\n    \n    return result;\n}\n"}
{"task_id": "CPP/47", "generation": "/*\nReturn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n8.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if(n % 2 == 0){\n        return (l[n/2 - 1] + l[n/2]) / 2.0;\n    } else {\n        return l[n/2];\n    }\n}"}
{"task_id": "CPP/75", "generation": "#include <stdio.h>\n#include <vector>\n\nbool is_prime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nbool is_multiply_prime(int a) {\n    std::vector<int> primes;\n    for (int i = 2; i < 100; i++) {\n        if (is_prime(i)) {\n            primes.push_back(i);\n        }\n    }\n\n    for (int i : primes) {\n        for (int j : primes) {\n            for (int k : primes) {\n                if (i * j * k == a) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/124", "generation": "/*\nYou have to write a function which validates a given date string and\nreturns true if the date is valid otherwise false.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n    // Check if the date string is not empty\n    if(date.empty()){\n        return false;\n    }\n    \n    // Check if the date format is correct\n    if(date.length() != 10 || date[2] != '-' || date[5] != '-'){\n        return false;\n    }\n    \n    // Extract month, day and year from the date string\n    int month = stoi(date.substr(0, 2));\n    int day = stoi(date.substr(3, 2));\n    int year = stoi(date.substr(6, 4));\n    \n    // Check if the month is valid\n    if(month < 1 || month > 12){\n        return false;\n    }\n    \n    // Check if the day is valid based on the month\n    if((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && (day < 1 || day > 31)){\n        return false;\n    }\n    else if((month == 4 || month == 6 || month == 9 || month == 11) && (day < 1 || day > 30)){\n        return false;\n    }\n    else if(month == 2){\n        if((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)){\n            if(day < 1 || day > 29){\n                return false;\n            }\n        }\n        else{\n            if(day < 1 || day > 28){\n                return false;\n            }\n        }\n    }\n    \n    return true;\n}"}
{"task_id": "CPP/101", "generation": "/*\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return a vector of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\", 'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n    vector<string> words;\n    string word = \"\";\n    for(char c : s){\n        if(c == ' ' || c == ','){\n            if(word != \"\"){\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    if(word != \"\"){\n        words.push_back(word);\n    }\n    return words;\n}"}
{"task_id": "CPP/14", "generation": "/*\nReturn vector of all prefixes from shortest to longest of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n    vector<string> result;\n    string prefix = \"\";\n    for(char c : str){\n        prefix += c;\n        result.push_back(prefix);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/141", "generation": "#include<stdio.h>\n#include<string>\n#include<ctype.h>\nusing namespace std;\nstring file_name_check(string file_name){\n    int dotCount = 0;\n    int digitCount = 0;\n    string name, ext;\n    for (char c : file_name) {\n        if (c == '.') {\n            dotCount++;\n            if (dotCount > 1) return \"No\";\n            name = file_name.substr(0, file_name.find('.'));\n            ext = file_name.substr(file_name.find('.') + 1);\n        }\n        if (isdigit(c)) digitCount++;\n    }\n    if (dotCount != 1 || name.empty() || !isalpha(name[0]) || digitCount > 3) return \"No\";\n    if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\") return \"No\";\n    return \"Yes\";\n}\n"}
{"task_id": "CPP/123", "generation": "/*\nGiven a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n    1. Collatz(1) is {1}.\n    2. returned vector sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n    vector<int> result;\n    result.push_back(1); // Collatz(1) is {1}\n    \n    while(n != 1){\n        if(n % 2 == 1){ // if n is odd\n            result.push_back(n);\n        }\n        n = (n % 2 == 0) ? n / 2 : 3 * n + 1;\n    }\n    \n    sort(result.begin(), result.end());\n    \n    return result;\n}"}
{"task_id": "CPP/148", "generation": "/*\nThere are eight planets in our solar system: the closerst to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2. \nThe function should return a vector containing all planets whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2, sorted by \nthe proximity to the sun. \nThe function should return an empty vector if planet1 or planet2\nare not correct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    vector<string> result;\n    int index1 = -1;\n    int index2 = -1;\n    \n    for(int i=0; i<planets.size(); i++){\n        if(planets[i] == planet1){\n            index1 = i;\n        }\n        if(planets[i] == planet2){\n            index2 = i;\n        }\n    }\n    \n    if(index1 == -1 || index2 == -1){\n        return result;\n    }\n    \n    int start = min(index1, index2) + 1;\n    int end = max(index1, index2);\n    \n    for(int i=start; i<end; i++){\n        result.push_back(planets[i]);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/133", "generation": "/*\nYou are given a vector of numbers.\nYou need to return the sum of squared numbers in the given vector,\nround each element in the vector to the upper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        int rounded = ceil(lst[i]);\n        sum += rounded * rounded;\n    }\n    return sum;\n}"}
{"task_id": "CPP/109", "generation": "#include <vector>\n#include <algorithm>\n\nbool move_one_ball(std::vector<int> arr) {\n    if (arr.empty()) {\n        return true;\n    }\n    std::vector<int> sorted_arr = arr;\n    std::sort(sorted_arr.begin(), sorted_arr.end());\n    int n = arr.size();\n    for (int i = 0; i < n; i++) {\n        if (arr == sorted_arr) {\n            return true;\n        }\n        int last_element = arr.back();\n        arr.pop_back();\n        arr.insert(arr.begin(), last_element);\n    }\n    return false;\n}\n"}
{"task_id": "CPP/100", "generation": "#include <vector>\n\nstd::vector<int> make_a_pile(int n) {\n    std::vector<int> stones = {n};\n    for (int i = 1; i < n; i++) {\n        if (n % 2 == 0) {\n            n += 1;\n        } else {\n            n += 2;\n        }\n        stones.push_back(n);\n    }\n    return stones;\n}\n"}
{"task_id": "CPP/150", "generation": "/*\nA simple program which should return the value of x if n is \na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n    if(n<=1){\n        return y;\n    }\n    for(int i=2;i<n;i++){\n        if(n%i==0){\n            return y;\n        }\n    }\n    return x;\n}\n\n"}
{"task_id": "CPP/153", "generation": "/*\nYou will be given the name of a class (a string) and a vector of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    int max_strength = INT_MIN;\n    string strongest_extension = \"\";\n    \n    for(string extension : extensions){\n        int cap_count = 0;\n        int sm_count = 0;\n        \n        for(char c : extension){\n            if(isupper(c)){\n                cap_count++;\n            } else if(islower(c)){\n                sm_count++;\n            }\n        }\n        \n        int strength = cap_count - sm_count;\n        \n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    \n    return class_name + \".\" + strongest_extension;\n}"}
{"task_id": "CPP/107", "generation": "/*\nGiven a positive integer n, return a vector that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n    vector<int> result = {0, 0};\n    for(int i=1; i<=n; i++){\n        string num = to_string(i);\n        string rev_num = num;\n        reverse(rev_num.begin(), rev_num.end());\n        if(num == rev_num){\n            if(i%2 == 0){\n                result[0]++;\n            }else{\n                result[1]++;\n            }\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/110", "generation": "#include <vector>\n#include <string>\n#include <algorithm>\n\nstd::string exchange(std::vector<int> lst1, std::vector<int> lst2) {\n    int oddCount = 0;\n    for (int num : lst1) {\n        if (num % 2 == 1) {\n            oddCount++;\n        }\n    }\n    return oddCount <= lst2.size() ? \"YES\" : \"NO\";\n}\n"}
{"task_id": "CPP/111", "generation": "/*\nGiven a string representing a space separated lowercase letters, return a map\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n    map<char, int> result;\n    map<char, int> count;\n\n    // Count the occurrences of each letter\n    for (char c : test) {\n        if (c != ' ') {\n            count[c]++;\n        }\n    }\n\n    // Find the maximum occurrence\n    int max_occurrence = 0;\n    for (auto it : count) {\n        max_occurrence = max(max_occurrence, it.second);\n    }\n\n    // Add letters with maximum occurrence to the result map\n    for (auto it : count) {\n        if (it.second == max_occurrence) {\n            result[it.first] = it.second;\n        }\n    }\n\n    return result;\n}"}
{"task_id": "CPP/80", "generation": "/*\nYou are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n    if(s.length() < 3){\n        return false;\n    }\n    \n    for(int i=0; i<s.length()-2; i++){\n        if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]){\n            return false;\n        }\n    }\n    \n    return true;\n}\n\n"}
{"task_id": "CPP/41", "generation": "/*\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n*/\n#include<stdio.h>\nusing namespace std;\nint car_race_collision(int n){\n    // Each car moving left to right will collide with each car moving right to left\n    // So the total number of collisions will be n * n\n    return n * n;\n}\n\n"}
{"task_id": "CPP/116", "generation": "/*\nIn this Kata, you have to sort a vector of integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n>>> sort_array({1, 5, 2, 3, 4}) == {1, 2, 4, 3, 5}\n>>> sort_array({-2, -3, -4, -5, -6}) == {-4, -2, -6, -5, -3}\n>>> sort_array({1, 0, 2, 3, 4}) == {0, 1, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n    // Custom comparator function to sort based on number of ones in binary representation\n    auto cmp = [](int a, int b) {\n        int countA = __builtin_popcount(abs(a));\n        int countB = __builtin_popcount(abs(b));\n        if (countA == countB) {\n            return a < b;\n        }\n        return countA < countB;\n    };\n    \n    // Sort the vector using the custom comparator function\n    sort(arr.begin(), arr.end(), cmp);\n    \n    return arr;\n}"}
{"task_id": "CPP/61", "generation": "/*\nbrackets is a string of '(' and ')'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int count = 0;\n    for(char bracket : brackets){\n        if(bracket == '('){\n            count++;\n        } else if(bracket == ')'){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count == 0;\n}"}
{"task_id": "CPP/25", "generation": "/*\nReturn vector of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n    vector<int> factors;\n    for(int i=2; i*i<=n; i++){\n        while(n%i == 0){\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if(n > 1){\n        factors.push_back(n);\n    }\n    return factors;\n}"}
{"task_id": "CPP/137", "generation": "#include <string>\n#include <algorithm>\n#include <boost/any.hpp>\n#include <iostream>\n\nboost::any compare_one(boost::any a, boost::any b) {\n    if (boost::any_cast<std::string>(a) == boost::any_cast<std::string>(b)) {\n        return \"None\";\n    }\n    if (a.type() == b.type()) {\n        if (boost::any_cast<double>(a) > boost::any_cast<double>(b)) {\n            return a;\n        } else {\n            return b;\n        }\n    } else if (a.type() == typeid(int) || a.type() == typeid(double)) {\n        return std::max(boost::any_cast<double>(a), boost::any_cast<double>(b));\n    } else {\n        std::string str_a = boost::any_cast<std::string>(a);\n        std::string str_b = boost::any_cast<std::string>(b);\n        std::replace(str_a.begin(), str_a.end(), ',', '.');\n        std::replace(str_b.begin(), str_b.end(), ',', '.');\n        if (std::stod(str_a) > std::stod(str_b)) {\n            std::replace(str_a.begin(), str_a.end(), '.', ',');\n            return str_a;\n        } else {\n            std::replace(str_b.begin(), str_b.end(), '.', ',');\n            return str_b;\n        }\n    }\n}\n"}
{"task_id": "CPP/102", "generation": "/*\nThis function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n    int max_even = -1;\n    for(int i = y; i >= x; i--){\n        if(i % 2 == 0){\n            max_even = i;\n            break;\n        }\n    }\n    return max_even;\n}\n\n"}
{"task_id": "CPP/10", "generation": "#include <string>\n#include <algorithm>\n\nbool is_palindrome(std::string str) {\n    std::string s(str.rbegin(), str.rend());\n    return s == str;\n}\n\nstd::string find_longest_palindrome(const std::string& s, int left, int right) {\n    while (left >= 0 && right < s.size() && s[left] == s[right]) {\n        left--;\n        right++;\n    }\n    return s.substr(left + 1, right - left - 1);\n}\n\nstd::string make_palindrome(std::string str) {\n    if (str.empty()) {\n        return \"\";\n    }\n\n    for (int i = str.size() - 1; i >= 0; i--) {\n        std::string palindrome_suffix = find_longest_palindrome(str, i, i);\n        if (!palindrome_suffix.empty()) {\n            return str.substr(0, i) + std::string(str.begin() + i - palindrome_suffix.size(), str.begin() + i) + str.substr(i);\n        }\n    }\n\n    return str.substr(0, str.size() - 1) + std::string(str.rbegin() + 1, str.rend());\n}\n"}
{"task_id": "CPP/76", "generation": "bool is_simple_power(int x, int n) {\n    if (x == 1) {\n        return true;\n    }\n    int power = 0;\n    while (pow(n, power) < x) {\n        power++;\n    }\n    return pow(n, power) == x;\n}\n"}
{"task_id": "CPP/94", "generation": "/*\nYou are given a vector of integers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n    int maxPrime = 0;\n    for(int num : lst){\n        if(num > 1){\n            bool isPrime = true;\n            for(int i=2; i*i<=num; i++){\n                if(num % i == 0){\n                    isPrime = false;\n                    break;\n                }\n            }\n            if(isPrime && num > maxPrime){\n                maxPrime = num;\n            }\n        }\n    }\n    \n    int sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    \n    return sum;\n}"}
{"task_id": "CPP/32", "generation": "#include <vector>\n#include <cmath>\n\ndouble poly(std::vector<double> xs, double x) {\n    double sum = 0;\n    for (int i = 0; i < xs.size(); i++) {\n        sum += xs[i] * pow(x, i);\n    }\n    return sum;\n}\n\ndouble find_zero(std::vector<double> xs) {\n    if (xs.size() % 2 != 0) {\n        throw std::invalid_argument(\"The number of coefficients should be even.\");\n    }\n\n    double largest_non_zero_coef = 0;\n    for (double coef : xs) {\n        if (coef != 0) {\n            largest_non_zero_coef = coef;\n            break;\n        }\n    }\n\n    return -largest_non_zero_coef / xs[0];\n}\n"}
{"task_id": "CPP/33", "generation": "#include <vector>\n#include <algorithm>\n\nstd::vector<int> sort_third(std::vector<int> l) {\n    std::vector<int> sorted_indices;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            sorted_indices.push_back(i);\n        }\n    }\n    std::sort(sorted_indices.begin(), sorted_indices.end(), [&l](int a, int b) {\n        return l[a] < l[b];\n    });\n\n    std::vector<int> result = l;\n    for (int i : sorted_indices) {\n        result[i] = l[i];\n    }\n    return result;\n}\n"}
{"task_id": "CPP/88", "generation": "/*\nGiven a vector of non-negative integers, return a copy of the given vector after sorting,\nyou will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n    vector<int> sorted_array = array;\n    if(array.size() == 0){\n        return sorted_array;\n    }\n    \n    int sum = array[0] + array[array.size()-1];\n    \n    if(sum % 2 == 0){\n        sort(sorted_array.begin(), sorted_array.end(), greater<int>());\n    } else {\n        sort(sorted_array.begin(), sorted_array.end());\n    }\n    \n    return sorted_array;\n}"}
{"task_id": "CPP/15", "generation": "/*\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n    string result = \"\";\n    for(int i=0; i<=n; i++){\n        result += to_string(i) + \" \";\n    }\n    result.pop_back(); // remove the extra space at the end\n    return result;\n}"}
{"task_id": "CPP/163", "generation": "/*\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order. Please note that the even digits refer to even numbers less than 10.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n    vector<int> result;\n    if(a > b){\n        int temp = a;\n        a = b;\n        b = temp;\n    }\n    for(int i = a; i <= b; i++){\n        if(i % 2 == 0 && i < 10){\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/1", "generation": "#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> separate_paren_groups(string paren_string) {\n    vector<string> result;\n    vector<char> stack;\n    string current = \"\";\n    for (char c : paren_string) {\n        if (c == '(') {\n            stack.push_back('(');\n            current += c;\n        } else if (c == ')') {\n            stack.pop_back();\n            current += c;\n            if (stack.empty()) {\n                result.push_back(current);\n                current = \"\";\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/69", "generation": "/*\nYou are given a non-empty vector of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or equal to the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the vector.\nIf no such a value exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n    int maxFreq = -1;\n    for(int i=0; i<lst.size(); i++){\n        int count = 0;\n        for(int j=0; j<lst.size(); j++){\n            if(lst[j] == lst[i]){\n                count++;\n            }\n        }\n        if(count >= lst[i] && lst[i] > maxFreq){\n            maxFreq = lst[i];\n        }\n    }\n    return maxFreq;\n} \n\n"}
{"task_id": "CPP/31", "generation": "/*\nReturn true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/147", "generation": "int get_max_triples(int n){\n    vector<int> a;\n    for (int i = 1; i <= n; i++) {\n        a.push_back(i*i - i + 1);\n    }\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/105", "generation": "vector<string> by_length(vector<int> arr){\n    vector<string> digit_names = {\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    vector<int> filtered_arr;\n    for (int num : arr) {\n        if (num >= 1 && num <= 9) {\n            filtered_arr.push_back(num);\n        }\n    }\n    sort(filtered_arr.begin(), filtered_arr.end());\n    reverse(filtered_arr.begin(), filtered_arr.end());\n    vector<string> result;\n    for (int num : filtered_arr) {\n        result.push_back(digit_names[num]);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/22", "generation": "/*\nFilter given vector of any python values only for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n    vector<int> result;\n    for(auto val : values){\n        if(val.type() == typeid(int)){\n            result.push_back(boost::any_cast<int>(val));\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/52", "generation": "/*\nReturn true if all numbers in the vector l are below threshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n    for(int i=0; i<l.size(); i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "CPP/154", "generation": "#include <string>\n#include <algorithm>\n\nbool cycpattern_check(std::string a, std::string b) {\n    if (a.length() != b.length()) {\n        return false;\n    }\n    std::string double_a = a + a;\n    return double_a.find(b) != std::string::npos;\n}\n"}
{"task_id": "CPP/115", "generation": "#include <vector>\nusing namespace std;\n\nint max_fill(vector<vector<int>> grid, int capacity) {\n    int m = grid.size();\n    int n = grid[0].size();\n    vector<int> heights(n, 0);\n    int result = 0;\n    \n    while (true) {\n        int max_height = *max_element(heights.begin(), heights.end());\n        if (max_height == 0) {\n            break;\n        }\n        \n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid[i][j] == 1 && heights[j] > 0) {\n                    grid[i][j] = 0;\n                    heights[j]--;\n                }\n            }\n        }\n        \n        result += max_height;\n    }\n    \n    return result * capacity;\n}\n"}
{"task_id": "CPP/131", "generation": "#include <string>\n#include <iostream>\n\nint digits(int n) {\n    int product = 1;\n    bool all_even = true;\n    std::string num_str = std::to_string(n);\n    for (char digit : num_str) {\n        int num = digit - '0';\n        if (num % 2 != 0) {\n            product *= num;\n            all_even = false;\n        }\n    }\n    return all_even ? 0 : product;\n}\n"}
{"task_id": "CPP/37", "generation": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n    vector<float> l_prime = l;\n    vector<float> even_values;\n\n    // Extract even values from l\n    for(int i=0; i<l.size(); i++){\n        if(i%2 == 0){\n            even_values.push_back(l[i]);\n        }\n    }\n\n    // Sort even values\n    sort(even_values.begin(), even_values.end());\n\n    // Replace even values in l_prime with sorted even values\n    int even_index = 0;\n    for(int i=0; i<l_prime.size(); i++){\n        if(i%2 == 0){\n            l_prime[i] = even_values[even_index];\n            even_index++;\n        }\n    }\n\n    return l_prime;\n}"}
{"task_id": "CPP/92", "generation": "/*\nCreate a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\n\nExamples\nany_int(5, 2, 7) \u279e true\n\nany_int(3, 2, 2) \u279e false\n\nany_int(3, -2, 1) \u279e true\n\nany_int(3.6, -2.2, 2) \u279e false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n    if((int)a == a && (int)b == b && (int)c == c){\n        if(a == b + c || b == a + c || c == a + b){\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\n"}
{"task_id": "CPP/118", "generation": "/*\nYou are given a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \n\nYou may assume that the given string contains English letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n    string vowels = \"aeiouAEIOU\";\n    int n = word.length();\n    for(int i=n-2; i>0; i--){\n        if(vowels.find(word[i]) != string::npos){\n            if(word[i-1] != 'a' && word[i-1] != 'e' && word[i-1] != 'i' && word[i-1] != 'o' && word[i-1] != 'u' &&\n               word[i+1] != 'a' && word[i+1] != 'e' && word[i+1] != 'i' && word[i+1] != 'o' && word[i+1] != 'u'){\n                return string(1, word[i]);\n            }\n        }\n    }\n    return \"\";\n}"}
{"task_id": "CPP/6", "generation": "/*\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> result;\n    int max_depth = 0;\n    int current_depth = 0;\n    \n    for(char c : paren_string){\n        if(c == '('){\n            current_depth++;\n            if(current_depth > max_depth){\n                max_depth = current_depth;\n            }\n        } else if(c == ')'){\n            current_depth--;\n        } else if(c == ' '){\n            result.push_back(max_depth);\n            max_depth = 0;\n            current_depth = 0;\n        }\n    }\n    \n    result.push_back(max_depth);\n    \n    return result;\n}"}
{"task_id": "CPP/87", "generation": "#include <vector>\n#include <algorithm>\n\nvector<vector<int>> get_row(vector<vector<int>> lst, int x) {\n    vector<vector<int>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                result.push_back({i, j});\n            }\n        }\n    }\n    \n    sort(result.begin(), result.end(), [](const vector<int>& a, const vector<int>& b) {\n        if (a[0] == b[0]) {\n            return a[1] > b[1];\n        }\n        return a[0] < b[0];\n    });\n    \n    return result;\n}\n"}
{"task_id": "CPP/2", "generation": "/*\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n    int integer_part = floor(number); // Get the integer part of the number\n    float decimal_part = number - integer_part; // Calculate the decimal part\n    return decimal_part; // Return the decimal part\n}\n\n"}
{"task_id": "CPP/16", "generation": "/*\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n    // Convert the string to lowercase\n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    \n    // Initialize a vector to store distinct characters\n    vector<char> distinct_chars;\n    \n    // Iterate through the string and add distinct characters to the vector\n    for(char c : str){\n        if(find(distinct_chars.begin(), distinct_chars.end(), c) == distinct_chars.end()){\n            distinct_chars.push_back(c);\n        }\n    }\n    \n    // Return the number of distinct characters\n    return distinct_chars.size();\n}"}
{"task_id": "CPP/135", "generation": "#include <vector>\nint can_arrange(std::vector<int> arr) {\n    int index = -1;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < arr[i - 1]) {\n            index = i - 1;\n        }\n    }\n    return index;\n}\n"}
{"task_id": "CPP/106", "generation": "#include <vector>\n\nint factorial(int num) {\n    if (num == 0) {\n        return 1;\n    }\n    return num * factorial(num - 1);\n}\n\nstd::vector<int> f(int n) {\n    std::vector<int> result;\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            result.push_back(factorial(i));\n        } else {\n            int sum = 0;\n            for (int j = 1; j <= i; j++) {\n                sum += j;\n            }\n            result.push_back(sum);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/162", "generation": "/*\nGiven a string 'text\", return its md5 hash equivalent string.\nIf 'text\" is an empty string, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n    if(text.empty()){\n        return \"None\";\n    }\n    \n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), digest);\n    \n    char mdString[33];\n    for(int i = 0; i < 16; i++){\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n    }\n    \n    return string(mdString);\n}"}
{"task_id": "CPP/5", "generation": "/*\nInsert a number \"delimeter\" between every two consecutive elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> result;\n    for(int i=0; i<numbers.size(); i++){\n        result.push_back(numbers[i]);\n        if(i != numbers.size()-1){\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n} \n\n"}
{"task_id": "CPP/97", "generation": "/*\nComplete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n    int unitA = abs(a) % 10;\n    int unitB = abs(b) % 10;\n    return unitA * unitB;\n}"}
{"task_id": "CPP/44", "generation": "/*\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n    string result = \"\";\n    while(x > 0){\n        int remainder = x % base;\n        result = to_string(remainder) + result;\n        x = x / base;\n    }\n    return result;\n}"}
{"task_id": "CPP/161", "generation": "#include <string>\n#include <algorithm>\n#include <cctype>\n\nstd::string solve(std::string s) {\n    bool hasLetters = false;\n    for (char c : s) {\n        if (std::isalpha(c)) {\n            hasLetters = true;\n            break;\n        }\n    }\n    \n    if (!hasLetters) {\n        std::reverse(s.begin(), s.end());\n    } else {\n        for (char& c : s) {\n            if (std::isalpha(c)) {\n                c = std::isupper(c) ? std::tolower(c) : std::toupper(c);\n            }\n        }\n    }\n    \n    return s;\n}\n"}
{"task_id": "CPP/38", "generation": "#include <string>\nusing namespace std;\n\nstring encode_cyclic(string s) {\n    int l = s.length();\n    int num = (l + 2) / 3;\n    string output = \"\";\n    for (int i = 0; i * 3 < l; i++) {\n        string x = s.substr(i * 3, 3);\n        if (x.length() == 3) {\n            x = x.substr(1) + x[0];\n        }\n        output += x;\n    }\n    return output;\n}\n\nstring decode_cyclic(string s) {\n    string output = \"\";\n    int num = s.length() / 3;\n    for (int i = 0; i < num; i++) {\n        string x = s.substr(i * 3, 3);\n        x = x[2] + x.substr(0, 2);\n        output += x;\n    }\n    return output;\n}\n"}
{"task_id": "CPP/93", "generation": "#include <string>\n#include <cctype>\n\nstd::string encode(std::string message) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string encoded_message = \"\";\n    for (char& c : message) {\n        if (isalpha(c)) {\n            if (vowels.find(c) != std::string::npos) {\n                encoded_message += static_cast<char>(c + 2);\n            } else {\n                encoded_message += static_cast<char>(islower(c) ? toupper(c) : tolower(c));\n            }\n        } else {\n            encoded_message += c;\n        }\n    }\n    return encoded_message;\n}\n"}
{"task_id": "CPP/152", "generation": "/*\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two vectors of scores and guesses of equal length, where each index shows a match. \nReturn a vector of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> result;\n    for(int i=0; i<game.size(); i++){\n        if(game[i] == guess[i]){\n            result.push_back(0);\n        }else{\n            result.push_back(abs(game[i] - guess[i]));\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/62", "generation": "/*\nxs represent coefficients of a polynomial.\nxs{0} + xs{1} * x + xs{2} * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n    vector<float> result;\n    for(int i=1; i<xs.size(); i++){\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}"}
{"task_id": "CPP/7", "generation": "/*\nFilter an input vector of strings only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> filtered_strings;\n    for(string s : strings){\n        if(s.find(substring) != string::npos){\n            filtered_strings.push_back(s);\n        }\n    }\n    return filtered_strings;\n}"}
{"task_id": "CPP/24", "generation": "/*\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n    int largest = 1;\n    for(int i=2; i<n; i++){\n        if(n%i == 0){\n            largest = i;\n        }\n    }\n    return largest;\n}\n\n"}
{"task_id": "CPP/79", "generation": "#include <string>\n\nstd::string decimal_to_binary(int decimal) {\n    std::string binary = \"\";\n    while (decimal > 0) {\n        binary = (decimal % 2 == 0 ? \"0\" : \"1\") + binary;\n        decimal /= 2;\n    }\n    return \"db\" + binary + \"db\";\n}\n"}
{"task_id": "CPP/155", "generation": "/*\nGiven an integer. return a vector that has the number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n    vector<int> result = {0, 0};\n    string num_str = to_string(abs(num));\n    \n    for(char c : num_str){\n        if((c - '0') % 2 == 0){\n            result[0]++;\n        } else {\n            result[1]++;\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/4", "generation": "/*\nFor a given vector of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n    // Calculate the mean of the dataset\n    float sum = 0;\n    for(int i=0; i<numbers.size(); i++){\n        sum += numbers[i];\n    }\n    float mean = sum / numbers.size();\n    \n    // Calculate the mean absolute deviation\n    float mad = 0;\n    for(int i=0; i<numbers.size(); i++){\n        mad += abs(numbers[i] - mean);\n    }\n    mad = mad / numbers.size();\n    \n    return mad;\n}\n\n"}
{"task_id": "CPP/56", "generation": "/*\nbrackets is a string of '<' and '>'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int count = 0;\n    for(char bracket : brackets){\n        if(bracket == '<'){\n            count++;\n        } else if(bracket == '>'){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count == 0;\n}"}
{"task_id": "CPP/159", "generation": "#include <vector>\n#include <algorithm>\n\nstd::vector<int> eat(int number, int need, int remaining) {\n    int total_eaten = number + std::min(need, remaining);\n    int carrots_left = std::max(0, remaining - need);\n    return {total_eaten, carrots_left};\n}\n"}
{"task_id": "CPP/83", "generation": "int starts_one_ends(int n){\n    if (n == 1) {\n        return 1;\n    }\n    int count = 9;  // Numbers from 1 to 9 are counted initially\n    for (int i = 2; i <= n; i++) {\n        count += 9 * pow(10, i-2);  // Numbers starting with 1\n        count += 9 * pow(10, i-1);  // Numbers ending with 1\n    }\n    return count;\n}\n"}
{"task_id": "CPP/27", "generation": "/*\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring flip_case(string str){\n    for(int i=0; i<str.length(); i++){\n        if(islower(str[i])){\n            str[i] = toupper(str[i]);\n        }\n        else if(isupper(str[i])){\n            str[i] = tolower(str[i]);\n        }\n    }\n    return str;\n}"}
{"task_id": "CPP/146", "generation": "/*\nWrite a function that takes a vector of numbers as input and returns \nthe number of elements in the vector that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n    int count = 0;\n    for(int num : nums){\n        string str = to_string(num);\n        if(num > 10 && (str[0] - '0') % 2 != 0 && (str[str.length()-1] - '0') % 2 != 0){\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "CPP/81", "generation": "#include <vector>\n#include <string>\n\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    \n    auto get_letter_grade = [](float gpa) {\n        if (gpa == 4.0) return \"A+\";\n        else if (gpa > 3.7) return \"A\";\n        else if (gpa > 3.3) return \"A-\";\n        else if (gpa > 3.0) return \"B+\";\n        else if (gpa > 2.7) return \"B\";\n        else if (gpa > 2.3) return \"B-\";\n        else if (gpa > 2.0) return \"C+\";\n        else if (gpa > 1.7) return \"C\";\n        else if (gpa > 1.3) return \"C-\";\n        else if (gpa > 1.0) return \"D+\";\n        else if (gpa > 0.7) return \"D\";\n        else if (gpa >= 0.0) return \"D-\";\n        else return \"E\";\n    };\n    \n    for (float gpa : grades) {\n        result.push_back(get_letter_grade(gpa));\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/136", "generation": "/*\nCreate a function that returns a vector (a, b), where \"a\" is\nthe largest of negative integers, and \"b\" is the smallest\nof positive integers in a vector.\nIf there is no negative or positive integers, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n    vector<int> result = {0, 0};\n    int largest_negative = INT_MIN;\n    int smallest_positive = INT_MAX;\n    \n    for(int num : lst){\n        if(num < 0 && num > largest_negative){\n            largest_negative = num;\n        }\n        if(num > 0 && num < smallest_positive){\n            smallest_positive = num;\n        }\n    }\n    \n    if(largest_negative != INT_MIN){\n        result[0] = largest_negative;\n    }\n    if(smallest_positive != INT_MAX){\n        result[1] = smallest_positive;\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/67", "generation": "#include <string>\n#include <sstream>\n\nint fruit_distribution(std::string s, int n) {\n    std::istringstream iss(s);\n    std::string fruit;\n    int apples = 0, oranges = 0;\n    while (iss >> fruit) {\n        if (fruit == \"apples\") {\n            iss >> apples;\n        } else if (fruit == \"oranges\") {\n            iss >> oranges;\n        }\n    }\n    int mangoes = n - apples - oranges;\n    return mangoes;\n}\n"}
{"task_id": "CPP/48", "generation": "/*\nChecks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n    int left = 0;\n    int right = text.length() - 1;\n    \n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    \n    return true;\n}\n\n"}
{"task_id": "CPP/125", "generation": "#include <vector>\n#include <string>\n#include <algorithm>\n\nstd::vector<std::string> split_words(std::string txt) {\n    std::vector<std::string> result;\n    if (txt.find(' ') != std::string::npos) {\n        size_t pos = 0;\n        while ((pos = txt.find(' ')) != std::string::npos) {\n            result.push_back(txt.substr(0, pos));\n            txt.erase(0, pos + 1);\n        }\n        result.push_back(txt);\n    } else if (txt.find(',') != std::string::npos) {\n        size_t pos = 0;\n        while ((pos = txt.find(',')) != std::string::npos) {\n            result.push_back(txt.substr(0, pos));\n            txt.erase(0, pos + 1);\n        }\n        result.push_back(txt);\n    } else {\n        int odd_count = std::count_if(txt.begin(), txt.end(), [](char c) {\n            return std::islower(c) && (c - 'a') % 2 != 0;\n        });\n        result.push_back(std::to_string(odd_count));\n    }\n    return result;\n}\n"}
{"task_id": "CPP/160", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <stack>\n#include <unordered_map>\n\nint do_algebra(std::vector<std::string> operators, std::vector<int> operands) {\n    std::unordered_map<std::string, int> precedence = {{\"+\", 1}, {\"-\", 1}, {\"*\", 2}, {\"//\", 2}, {\"**\", 3}};\n    std::stack<std::string> op_stack;\n    std::vector<std::string> postfix;\n    \n    for (int i = 0; i < operators.size(); i++) {\n        while (!op_stack.empty() && precedence[operators[i]] <= precedence[op_stack.top()]) {\n            postfix.push_back(op_stack.top());\n            op_stack.pop();\n        }\n        op_stack.push(operators[i]);\n        postfix.push_back(std::to_string(operands[i]));\n    }\n    \n    postfix.push_back(std::to_string(operands.back()));\n    \n    while (!op_stack.empty()) {\n        postfix.push_back(op_stack.top());\n        op_stack.pop();\n    }\n    \n    std::stack<int> eval_stack;\n    \n    for (const std::string& token : postfix) {\n        if (precedence.find(token) != precedence.end()) {\n            int b = eval_stack.top();\n            eval_stack.pop();\n            int a = eval_stack.top();\n            eval_stack.pop();\n            if (token == \"+\") {\n                eval_stack.push(a + b);\n            } else if (token == \"-\") {\n                eval_stack.push(a - b);\n            } else if (token == \"*\") {\n                eval_stack.push(a * b);\n            } else if (token == \"//\") {\n                eval_stack.push(a / b);\n            } else if (token == \"**\") {\n                eval_stack.push(pow(a, b));\n            }\n        } else {\n            eval_stack.push(std::stoi(token));\n        }\n    }\n    \n    return eval_stack.top();\n}\n"}
{"task_id": "CPP/151", "generation": "/*\nGiven a vector of numbers, return the sum of squares of the numbers\nin the vector that are odd. Ignore numbers that are negative or not integers.\n\ndouble_the_difference({1, 3, 2, 0}) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference({-1, -2, 0}) == 0\ndouble_the_difference({9, -2}) == 81\ndouble_the_difference({0}) == 0  \n\nIf the input vector is empty, return 0.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nlong long double_the_difference(vector<float> lst){\n    long long sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i] > 0 && lst[i] == (int)lst[i] && (int)lst[i] % 2 != 0){\n            sum += pow(lst[i], 2);\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/117", "generation": "/*\nGiven a string s and a natural number n, you have been tasked to implement \na function that returns a vector of all words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty vector.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n    vector<string> result;\n    string word = \"\";\n    int count = 0;\n    \n    for(int i=0; i<s.length(); i++){\n        if(s[i] != ' '){\n            word += s[i];\n            if(tolower(s[i]) != 'a' && tolower(s[i]) != 'e' && tolower(s[i]) != 'i' && tolower(s[i]) != 'o' && tolower(s[i]) != 'u'){\n                count++;\n            }\n        } else {\n            if(count == n){\n                result.push_back(word);\n            }\n            word = \"\";\n            count = 0;\n        }\n    }\n    \n    if(count == n){\n        result.push_back(word);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/78", "generation": "/*\nYou have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n    int count = 0;\n    string primes = \"2357BD\";\n    \n    for(int i=0; i<num.length(); i++){\n        if(primes.find(num[i]) != string::npos){\n            count++;\n        }\n    }\n    \n    return count;\n}\n\n"}
{"task_id": "CPP/74", "generation": "#include <vector>\n#include <string>\n\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n    \n    for (const std::string& word : lst1) {\n        total_chars_lst1 += word.size();\n    }\n    \n    for (const std::string& word : lst2) {\n        total_chars_lst2 += word.size();\n    }\n    \n    if (total_chars_lst1 < total_chars_lst2) {\n        return lst1;\n    } else {\n        return total_chars_lst2 < total_chars_lst1 ? lst2 : lst1;\n    }\n}\n"}
{"task_id": "CPP/53", "generation": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n    return x + y;\n}\n\n"}
{"task_id": "CPP/98", "generation": "/*\nGiven a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n    int count = 0;\n    for(int i=0; i<s.length(); i+=2){\n        if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            count++;\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/140", "generation": "#include <string>\nusing namespace std;\n\nstring fix_spaces(string text) {\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        }\n    }\n    \n    int count = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == '_') {\n            count++;\n            if (count > 2) {\n                text[i-1] = '-';\n                text.erase(i-2, 1);\n                count = 1;\n            }\n        } else {\n            count = 0;\n        }\n    }\n    \n    return text;\n}\n"}
{"task_id": "CPP/34", "generation": "/*\nReturn sorted unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n    // Sort the vector\n    sort(l.begin(), l.end());\n    \n    // Remove duplicates\n    l.erase(unique(l.begin(), l.end()), l.end());\n    \n    return l;\n}\n\n"}
{"task_id": "CPP/66", "generation": "/*\nTask\nWrite a function that takes a string as input and returns the sum of the upper characters only's\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n    int sum = 0;\n    for(char c : s){\n        if(isupper(c)){\n            sum += c;\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/120", "generation": "vector<int> maximum(vector<int> arr, int k) {\n    sort(arr.begin(), arr.end());\n    vector<int> result(arr.end() - k, arr.end());\n    return result;\n}\n"}
{"task_id": "CPP/139", "generation": "/*\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n    long long result = 1;\n    for(int i = n; i > 0; i--){\n        long long factorial = 1;\n        for(int j = i; j > 0; j--){\n            factorial *= j;\n        }\n        result *= factorial;\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/12", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n    if (strings.empty()) {\n        return \"\";\n    }\n    string longest_str = strings[0];\n    int max_length = strings[0].length();\n    for (const string& s : strings) {\n        if (s.length() > max_length) {\n            max_length = s.length();\n            longest_str = s;\n        }\n    }\n    return longest_str;\n}\n"}
{"task_id": "CPP/121", "generation": "/*\nGiven a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solution(vector<int> lst){\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(i%2 == 0 && lst[i]%2 != 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/35", "generation": "/*\nReturn maximum element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n    float max = l[0];\n    for(int i=1; i<l.size(); i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n\n"}
{"task_id": "CPP/20", "generation": "/*\nFrom a supplied vector of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> result;\n    float min_diff = INFINITY;\n    for(int i=0; i<numbers.size()-1; i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            float diff = abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                result.clear();\n                result.push_back(min(numbers[i], numbers[j]));\n                result.push_back(max(numbers[i], numbers[j]));\n            }\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/19", "generation": "#include <iostream>\n#include <string>\n#include <vector>\n#include <map>\n#include <algorithm>\n\nstd::string sort_numbers(std::string numbers) {\n    std::map<std::string, int> number_dict = {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n\n    std::vector<std::string> numbers_list;\n    std::string word = \"\";\n    for (char c : numbers) {\n        if (c == ' ') {\n            numbers_list.push_back(word);\n            word = \"\";\n        } else {\n            word += c;\n        }\n    }\n    numbers_list.push_back(word);\n\n    std::sort(numbers_list.begin(), numbers_list.end(), [&](const std::string& a, const std::string& b) {\n        return number_dict[a] < number_dict[b];\n    });\n\n    std::string result = \"\";\n    for (const std::string& num : numbers_list) {\n        result += num + \" \";\n    }\n    result.pop_back(); // Remove the extra space at the end\n    return result;\n}\n"}
{"task_id": "CPP/85", "generation": "/*\nGiven a non-empty vector of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    int sum = 0;\n    for(int i=1; i<lst.size(); i+=2){\n        if(lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/21", "generation": "/*\nGiven vector of numbers (of at least two elements), apply a linear transform to that vector,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n    // Find the minimum and maximum values in the vector\n    float min_val = numbers[0];\n    float max_val = numbers[0];\n    for(int i=1; i<numbers.size(); i++){\n        if(numbers[i] < min_val){\n            min_val = numbers[i];\n        }\n        if(numbers[i] > max_val){\n            max_val = numbers[i];\n        }\n    }\n    \n    // Apply linear transform to rescale the numbers\n    vector<float> rescaled_numbers;\n    for(int i=0; i<numbers.size(); i++){\n        float rescaled_num = (numbers[i] - min_val) / (max_val - min_val);\n        rescaled_numbers.push_back(rescaled_num);\n    }\n    \n    return rescaled_numbers;\n}\n\n"}
{"task_id": "CPP/119", "generation": "#include <string>\n#include <vector>\n\nstd::string match_parens(std::vector<std::string> lst) {\n    int count = 0;\n    for (const std::string& s : lst) {\n        for (char c : s) {\n            if (c == '(') {\n                count++;\n            } else {\n                if (count == 0) {\n                    return \"No\";\n                }\n                count--;\n            }\n        }\n    }\n    return (count == 0) ? \"Yes\" : \"No\";\n}\n"}
{"task_id": "CPP/30", "generation": "/*\nReturn only positive numbers in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n    vector<float> positive_nums;\n    for(int i=0; i<l.size(); i++){\n        if(l[i] > 0){\n            positive_nums.push_back(l[i]);\n        }\n    }\n    return positive_nums;\n}"}
{"task_id": "CPP/64", "generation": "/*\nWrite a function vowels_count which takes a string representing a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. \nHere, 'y' is also a vowel, but only when it is at the end of the given word.\nExample: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n    transform(s.begin(), s.end(), s.begin(), ::tolower); // convert string to lowercase\n    int count = 0;\n    for(char c : s){\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n            count++;\n        }\n    }\n    if(s.back() == 'y'){ // check if last character is 'y'\n        count++;\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/128", "generation": "/*\nYou are given a vector arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the vector, represented by 1, -1 or 0.\nNote: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n    if(arr.empty()){\n        return -32768;\n    }\n    \n    int product = 1;\n    int sum = 0;\n    \n    for(int num : arr){\n        if(num > 0){\n            product *= 1;\n        } else if(num < 0){\n            product *= -1;\n        } else {\n            product *= 0;\n        }\n        \n        sum += abs(num);\n    }\n    \n    return product * sum;\n}"}
{"task_id": "CPP/127", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cmath>\n\nbool is_prime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nstd::string intersection(std::vector<int> interval1, std::vector<int> interval2) {\n    int start1 = interval1[0];\n    int end1 = interval1[1];\n    int start2 = interval2[0];\n    int end2 = interval2[1];\n    \n    int intersection_start = std::max(start1, start2);\n    int intersection_end = std::min(end1, end2);\n    \n    if (intersection_start > intersection_end) {\n        return \"NO\";\n    }\n    \n    int intersection_length = intersection_end - intersection_start;\n    \n    if (is_prime(intersection_length)) {\n        return \"YES\";\n    }\n    \n    return \"NO\";\n}\n"}
{"task_id": "CPP/122", "generation": "int add_elements(vector<int> arr, int k) {\n    int sum_two_digits = 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] > 9 && arr[i] < 100) {\n            sum_two_digits += arr[i];\n        }\n    }\n    return sum_two_digits;\n}\n"}
{"task_id": "CPP/59", "generation": "/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\n\n"}
{"task_id": "CPP/134", "generation": "#include <string>\n\nbool check_if_last_char_is_a_letter(std::string txt) {\n    if (txt.empty()) {\n        return false;\n    }\n    char last_char = txt.back();\n    if (isalpha(last_char) && (txt.size() == 1 || txt[txt.size() - 2] == ' ')) {\n        return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/42", "generation": "/*\nReturn vector with elements incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n    vector<int> result;\n    for(int i=0; i<l.size(); i++){\n        result.push_back(l[i]+1);\n    }\n    return result;\n}"}
{"task_id": "CPP/11", "generation": "/*\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n    string result = \"\";\n    for(int i=0; i<a.length(); i++){\n        if(a[i] != b[i]){\n            result += \"1\";\n        } else {\n            result += \"0\";\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/40", "generation": "/*\ntriples_sum_to_zero takes a vector of integers as an input.\nit returns true if there are three distinct elements in the vector that\nsum to zero, and false otherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n    int n = l.size();\n    for(int i=0; i<n-2; i++){\n        for(int j=i+1; j<n-1; j++){\n            for(int k=j+1; k<n; k++){\n                if(l[i] + l[j] + l[k] == 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/13", "generation": "/*\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n    while (a != b) {\n        if (a > b) {\n            a = a - b;\n        } else {\n            b = b - a;\n        }\n    }\n    return a;\n}"}
{"task_id": "CPP/130", "generation": "#include <vector>\n\nstd::vector<int> tri(int n) {\n    if (n == 0) {\n        return {0};\n    } else if (n == 1) {\n        return {3};\n    } else if (n == 2) {\n        return {1, 3};\n    } else {\n        std::vector<int> tribonacci = {0, 3, 1};\n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                tribonacci.push_back(1 + i / 2);\n            } else {\n                tribonacci.push_back(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]);\n            }\n        }\n        return tribonacci;\n    }\n}\n"}
{"task_id": "CPP/60", "generation": "/*\nsum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n    int sum = 0;\n    for(int i=1; i<=n; i++){\n        sum += i;\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/23", "generation": "/*\nReturn length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n    return str.length();\n}\n\n"}
{"task_id": "CPP/46", "generation": "/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n    if(n == 0 || n == 1){\n        return 0;\n    }\n    if(n == 2){\n        return 2;\n    }\n    if(n == 3){\n        return 0;\n    }\n    \n    int a = 0, b = 0, c = 2, d = 0, sum = 0;\n    \n    for(int i = 4; i <= n; i++){\n        sum = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = sum;\n    }\n    \n    return sum;\n}\n\n"}
{"task_id": "CPP/51", "generation": "/*\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n    string result = \"\";\n    for(char c : text){\n        if(tolower(c) != 'a' && tolower(c) != 'e' && tolower(c) != 'i' && tolower(c) != 'o' && tolower(c) != 'u'){\n            result += c;\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/18", "generation": "/*\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n    int count = 0;\n    size_t pos = str.find(substring, 0);\n    while (pos != string::npos) {\n        count++;\n        pos = str.find(substring, pos + 1);\n    }\n    return count;\n}"}
{"task_id": "CPP/143", "generation": "#include <stdio.h>\n#include <string>\n#include <vector>\n#include <cmath>\nusing namespace std;\n\nbool is_prime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nstring words_in_sentence(string sentence) {\n    vector<string> words;\n    string word = \"\";\n    for (char c : sentence) {\n        if (c == ' ') {\n            if (!word.empty()) {\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    if (!word.empty()) {\n        words.push_back(word);\n    }\n\n    vector<string> prime_words;\n    for (const string& w : words) {\n        if (is_prime(w.length())) {\n            prime_words.push_back(w);\n        }\n    }\n\n    string result = \"\";\n    for (const string& pw : prime_words) {\n        result += pw + \" \";\n    }\n    if (!result.empty()) {\n        result.pop_back(); // Remove the extra space at the end\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/108", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n    int count = 0;\n    for (int num : n) {\n        int num_copy = num < 0 ? -num : num;\n        int sum_digits = 0;\n        while (num_copy > 0) {\n            sum_digits += num_copy % 10;\n            num_copy /= 10;\n        }\n        if (sum_digits > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/43", "generation": "/*\npairs_sum_to_zero takes a vector of integers as an input.\nit returns true if there are two distinct elements in the vector that\nsum to zero, and false otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n    for(int i=0; i<l.size(); i++){\n        for(int j=i+1; j<l.size(); j++){\n            if(l[i] + l[j] == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/70", "generation": "/*\nGiven vector of integers, return vector in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\n\nExamples:\nstrange_sort_list({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_list({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_list({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> result;\n    sort(lst.begin(), lst.end());\n    int left = 0, right = lst.size() - 1;\n    while (left <= right) {\n        if (left == right) {\n            result.push_back(lst[left]);\n            break;\n        }\n        result.push_back(lst[left]);\n        result.push_back(lst[right]);\n        left++;\n        right--;\n    }\n    return result;\n}"}
{"task_id": "CPP/63", "generation": "/*\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n    if(n == 0 || n == 1){\n        return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    \n    int a = 0, b = 0, c = 1, result = 0;\n    \n    for(int i = 3; i <= n; i++){\n        result = a + b + c;\n        a = b;\n        b = c;\n        c = result;\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/89", "generation": "/*\nCreate a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n    string result = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(isalpha(s[i])){\n            char c = s[i];\n            if(islower(c)){\n                c = 'a' + (c - 'a' + 2*2) % 26;\n            } else {\n                c = 'A' + (c - 'A' + 2*2) % 26;\n            }\n            result += c;\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/26", "generation": "/*\nFrom a vector of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> result;\n    for(int i=0; i<numbers.size(); i++){\n        if(count(numbers.begin(), numbers.end(), numbers[i]) == 1){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/104", "generation": "/*\nGiven a vector of positive integers x. return a sorted vector of all \nelements that hasn't any even digit.\n\nNote: Returned vector should be sorted in increasing order.\n\nFor example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n    vector<int> result;\n    for(int num : x){\n        bool hasEvenDigit = false;\n        int temp = num;\n        while(temp > 0){\n            int digit = temp % 10;\n            if(digit % 2 == 0){\n                hasEvenDigit = true;\n                break;\n            }\n            temp /= 10;\n        }\n        if(!hasEvenDigit){\n            result.push_back(num);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}"}
{"task_id": "CPP/90", "generation": "/*\nYou are given a vector of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the vector.\nReturn None if there is no such element.\n\nnext_smallest({1, 2, 3, 4, 5}) == 2\nnext_smallest({5, 1, 4, 3, 2}) == 2\nnext_smallest({}) == None\nnext_smallest({1, 1}) == None\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint next_smallest(vector<int> lst){\n    if(lst.size() < 2){\n        return -1;\n    }\n    \n    sort(lst.begin(), lst.end());\n    \n    int smallest = lst[0];\n    for(int i=1; i<lst.size(); i++){\n        if(lst[i] > smallest){\n            return lst[i];\n        }\n    }\n    \n    return -1;\n}"}
{"task_id": "CPP/126", "generation": "#include <vector>\n#include <algorithm>\n#include <unordered_map>\n\nbool is_sorted(std::vector<int> lst) {\n    std::unordered_map<int, int> count;\n    for (int num : lst) {\n        if (count.find(num) != count.end()) {\n            count[num]++;\n            if (count[num] > 2) {\n                return false;\n            }\n        } else {\n            count[num] = 1;\n        }\n    }\n    \n    std::vector<int> unique_sorted_lst(lst.begin(), lst.end());\n    std::sort(unique_sorted_lst.begin(), unique_sorted_lst.end());\n    \n    return lst == unique_sorted_lst;\n}\n"}
{"task_id": "CPP/68", "generation": "/*\nGiven a vector representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a vector, { smalest_value, its index },\nIf there are no even values or the given vector is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n    vector<int> result;\n    int smallest_value = -1;\n    int smallest_index = -1;\n    \n    for(int i=0; i<arr.size(); i++){\n        if(arr[i] % 2 == 0 && (smallest_value == -1 || arr[i] < smallest_value)){\n            smallest_value = arr[i];\n            smallest_index = i;\n        }\n    }\n    \n    if(smallest_value != -1){\n        result.push_back(smallest_value);\n        result.push_back(smallest_index);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/58", "generation": "/*\nReturn sorted unique common elements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> result;\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n    \n    int i = 0, j = 0;\n    while(i < l1.size() && j < l2.size()){\n        if(l1[i] == l2[j]){\n            if(result.empty() || result.back() != l1[i]){\n                result.push_back(l1[i]);\n            }\n            i++;\n            j++;\n        }\n        else if(l1[i] < l2[j]){\n            i++;\n        }\n        else{\n            j++;\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/112", "generation": "/*\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a vector containing the result string and \"True\"/\"False\" for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n    // Delete characters in s that are equal to any character in c\n    for(int i=0;i<c.length();i++){\n        s.erase(remove(s.begin(), s.end(), c[i]), s.end());\n    }\n    \n    // Check if the result string is palindrome\n    string result = s;\n    string rev = s;\n    reverse(rev.begin(), rev.end());\n    \n    if(result == rev){\n        return {result, \"True\"};\n    } else {\n        return {result, \"False\"};\n    }\n}"}
{"task_id": "CPP/96", "generation": "/*\nImplement a function that takes an non-negative integer and returns a vector of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n    vector<int> primes;\n    if(n <= 1){\n        return primes;\n    }\n    \n    for(int i=2; i<n; i++){\n        bool isPrime = true;\n        for(int j=2; j*j<=i; j++){\n            if(i % j == 0){\n                isPrime = false;\n                break;\n            }\n        }\n        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    \n    return primes;\n}"}
{"task_id": "CPP/157", "generation": "/*\nGiven the lengths of the three sides of a triangle. Return true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or \n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n    // Sort the sides in ascending order\n    if(a > c){\n        float temp = a;\n        a = c;\n        c = temp;\n    }\n    if(b > c){\n        float temp = b;\n        b = c;\n        c = temp;\n    }\n    \n    // Check if it forms a right-angled triangle using Pythagoras theorem\n    if(pow(c,2) == pow(a,2) + pow(b,2)){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\n"}
{"task_id": "CPP/99", "generation": "#include <stdio.h>\n#include <math.h>\n#include <string>\nusing namespace std;\n\nint closest_integer(string value) {\n    float num = stof(value);\n    return (num > 0) ? static_cast<int>(num + 0.5) : static_cast<int>(num - 0.5);\n}\n"}
{"task_id": "CPP/149", "generation": "/*\nWrite a function that accepts a vector of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted vector with a sorted order,\nThe vector is always a vector of strings and never a vector of numbers,\nand it may contain duplicates.\nThe order of the vector should be ascending by length of each word, and you\nshould return the vector sorted by that rule.\nIf two words have the same length, sort the vector alphabetically.\nThe function should return a vector of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n    // Remove strings with odd lengths\n    vector<string> result;\n    for(string s : lst){\n        if(s.length() % 2 == 0){\n            result.push_back(s);\n        }\n    }\n    \n    // Sort the vector by length and alphabetically\n    sort(result.begin(), result.end(), [](const string& a, const string& b){\n        if(a.length() == b.length()){\n            return a < b;\n        }\n        return a.length() < b.length();\n    });\n    \n    return result;\n}"}
{"task_id": "CPP/86", "generation": "/*\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n    string result = \"\";\n    string word = \"\";\n    \n    for(int i=0; i<s.length(); i++){\n        if(s[i] == ' '){\n            sort(word.begin(), word.end());\n            result += word + \" \";\n            word = \"\";\n        } else {\n            word += s[i];\n        }\n    }\n    \n    sort(word.begin(), word.end());\n    result += word;\n    \n    return result;\n}"}
{"task_id": "CPP/129", "generation": "#include <vector>\n#include <algorithm>\n#include <functional>\n\nstd::vector<int> minPath(std::vector<std::vector<int>>&& grid, int k) {\n    int n = grid.size();\n    std::vector<std::pair<int, int>> directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n    \n    std::vector<int> result;\n    \n    std::function<std::vector<int>(int, int, std::vector<int>)> dfs = [&](int x, int y, std::vector<int> path) -> std::vector<int> {\n        if (path.size() == k) {\n            return path;\n        }\n        \n        int current_val = grid[x][y];\n        grid[x][y] = -1;\n        std::vector<std::pair<int, int>> next_moves;\n        \n        for (const auto& dir : directions) {\n            int nx = x + dir.first, ny = y + dir.second;\n            if (nx >= 0 && nx < n && ny >= 0 && ny < n && grid[nx][ny] != -1) {\n                next_moves.push_back({nx, ny});\n            }\n        }\n        \n        std::sort(next_moves.begin(), next_moves.end(), [&](const std::pair<int, int>& a, const std::pair<int, int>& b) {\n            return grid[a.first][a.second] < grid[b.first][b.second];\n        });\n        \n        for (const auto& move : next_moves) {\n            std::vector<int> res = dfs(move.first, move.second, path);\n            if (!res.empty()) {\n                return res;\n            }\n        }\n        \n        grid[x][y] = current_val;\n        return {};\n    };\n    \n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            result = dfs(i, j, {grid[i][j]});\n            if (!result.empty()) {\n                return result;\n            }\n        }\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/49", "generation": "/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n    if(n == 0){\n        return 1;\n    }\n    int result = 1;\n    for(int i=0; i<n; i++){\n        result = (result * 2) % p;\n    }\n    return result;\n}"}
{"task_id": "CPP/156", "generation": "/*\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_roman(int number){\n    // Create vectors to store the roman numeral symbols and their corresponding values\n    vector<string> roman_symbols = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n    vector<int> roman_values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    \n    string result = \"\";\n    \n    // Iterate through the roman numeral symbols and their corresponding values\n    for(int i=0; i<roman_values.size(); i++){\n        // Repeat the current symbol as many times as possible\n        while(number >= roman_values[i]){\n            result += roman_symbols[i];\n            number -= roman_values[i];\n        }\n    }\n    \n    // Convert the result to lowercase\n    for(int i=0; i<result.size(); i++){\n        result[i] = tolower(result[i]);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/65", "generation": "/*\nCircular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n    string s = to_string(x);\n    int n = s.size();\n    \n    if(shift > n){\n        reverse(s.begin(), s.end());\n        return s;\n    }\n    \n    shift = shift % n;\n    string result = s.substr(n-shift) + s.substr(0, n-shift);\n    \n    return result;\n}"}
{"task_id": "CPP/9", "generation": "#include <vector>\n\nstd::vector<int> rolling_max(std::vector<int> numbers) {\n    std::vector<int> max_numbers;\n    int max_num = std::numeric_limits<int>::min();\n    for (int num : numbers) {\n        max_num = std::max(max_num, num);\n        max_numbers.push_back(max_num);\n    }\n    return max_numbers;\n}\n"}
{"task_id": "CPP/158", "generation": "/*\nWrite a function that accepts a vector of strings.\nThe vector contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\nfind_max({\"name\", \"of\", 'string\"}) == 'string\"\nfind_max({\"name\", \"enam\", \"game\"}) == \"enam\"\nfind_max({\"aaaaaaa\", \"bb\" ,\"cc\"}) == \"aaaaaaa\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring find_max(vector<string> words){\n    string max_word = \"\";\n    int max_unique_chars = 0;\n    \n    for(string word : words){\n        int unique_chars = 0;\n        vector<char> seen;\n        \n        for(char c : word){\n            if(find(seen.begin(), seen.end(), c) == seen.end()){\n                unique_chars++;\n                seen.push_back(c);\n            }\n        }\n        \n        if(unique_chars > max_unique_chars || (unique_chars == max_unique_chars && word < max_word)){\n            max_unique_chars = unique_chars;\n            max_word = word;\n        }\n    }\n    \n    return max_word;\n}"}
{"task_id": "CPP/8", "generation": "/*\nFor a given vector of integers, return a vector consisting of a sum and a product of all the integers in a vector.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n    int sum = 0;\n    int product = 1;\n    \n    for(int num : numbers){\n        sum += num;\n        product *= num;\n    }\n    \n    return {sum, product};\n}"}
{"task_id": "CPP/95", "generation": "#include <string>\n#include <map>\n#include <cctype>\n\nbool check_dict_case(std::map<std::string, std::string> dict) {\n    if (dict.empty()) {\n        return false;\n    }\n    for (const auto& pair : dict) {\n        const std::string& key = pair.first;\n        bool isLower = true;\n        bool isUpper = true;\n        for (char c : key) {\n            if (!std::isalpha(c)) {\n                return false;\n            }\n            if (!std::islower(c)) {\n                isLower = false;\n            }\n            if (!std::isupper(c)) {\n                isUpper = false;\n            }\n        }\n        if (!(isLower || isUpper)) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/55", "generation": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n    if(n <= 1){\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}\n\n"}
{"task_id": "CPP/29", "generation": "/*\nFilter an input vector of strings only for ones that start with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> filtered_strings;\n    for(string s : strings){\n        if(s.substr(0, prefix.length()) == prefix){\n            filtered_strings.push_back(s);\n        }\n    }\n    return filtered_strings;\n}"}
{"task_id": "CPP/72", "generation": "/*\nWrite a function that returns true if the object q will fly, and false otherwise.\nThe object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) \u279e false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) \u279e false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) \u279e true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) \u279e true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n    // Check if the vector q is balanced (palindromic)\n    bool balanced = true;\n    for(int i=0; i<q.size()/2; i++){\n        if(q[i] != q[q.size()-1-i]){\n            balanced = false;\n            break;\n        }\n    }\n    \n    // Check if the sum of elements is less than or equal to the maximum weight\n    int sum = 0;\n    for(int i=0; i<q.size(); i++){\n        sum += q[i];\n    }\n    \n    // Return true if balanced and sum is less than or equal to maximum weight, false otherwise\n    return balanced && sum <= w;\n}\n\n"}
{"task_id": "CPP/54", "generation": "#include <string>\n#include <algorithm>\nbool same_chars(std::string s0, std::string s1) {\n    std::sort(s0.begin(), s0.end());\n    std::sort(s1.begin(), s1.end());\n    return s0 == s1;\n}\n"}
{"task_id": "CPP/91", "generation": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\nint is_bored(std::string S) {\n    std::vector<std::string> sentences;\n    std::string sentence = \"\";\n    for (char c : S) {\n        if (c == '.' || c == '?' || c == '!') {\n            sentences.push_back(sentence);\n            sentence = \"\";\n        } else {\n            sentence += c;\n        }\n    }\n\n    int boredom_count = 0;\n    for (const std::string& s : sentences) {\n        if (!s.empty() && s[0] == 'I') {\n            boredom_count++;\n        }\n    }\n\n    return boredom_count;\n}\n"}
{"task_id": "CPP/77", "generation": "/*\nWrite a function that takes an integer a and returns true \nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscube(int a){\n    int cube_root = cbrt(a);\n    return (cube_root * cube_root * cube_root == a);\n}"}
{"task_id": "CPP/73", "generation": "/*\nGiven a vector arr of integers, find the minimum number of elements that\nneed to be changed to make the vector palindromic. A palindromic vector is a vector that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n    int n = arr.size();\n    int count = 0;\n    \n    for(int i=0; i<n/2; i++){\n        if(arr[i] != arr[n-i-1]){\n            count++;\n        }\n    }\n    \n    return count;\n} \n\n"}
{"task_id": "CPP/71", "generation": "/*\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n    // Check if the three sides form a valid triangle\n    if(a + b > c && a + c > b && b + c > a){\n        // Calculate the semi-perimeter\n        float s = (a + b + c) / 2;\n        // Calculate the area using Heron's formula\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n        // Round the area to 2 decimal points\n        return round(area * 100) / 100;\n    } else {\n        // Return -1 if the sides do not form a valid triangle\n        return -1;\n    }\n}\n\n"}
{"task_id": "CPP/82", "generation": "/*\nWrite a function that takes a string and returns true if the string\nlength is a prime number or false otherwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n    int length = str.length();\n    if(length <= 1){\n        return false;\n    }\n    for(int i=2; i*i<=length; i++){\n        if(length % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/114", "generation": "/*\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n    long long minSum = nums[0];\n    long long currentSum = 0;\n    \n    for(int i=0; i<nums.size(); i++){\n        currentSum += nums[i];\n        minSum = min(minSum, currentSum);\n        if(currentSum > 0){\n            currentSum = 0;\n        }\n    }\n    \n    return minSum;\n}\n\n"}
{"task_id": "CPP/138", "generation": "/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n    if(n % 2 != 0 || n < 8){\n        return false;\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/132", "generation": "#include <stack>\n#include <string>\n\nbool is_nested(std::string str) {\n    std::stack<char> stack;\n    for (char c : str) {\n        if (c == '[') {\n            stack.push(c);\n        } else if (c == ']' && !stack.empty() && stack.top() == '[') {\n            stack.pop();\n        }\n    }\n    return stack.size() < str.size() && !stack.empty();\n}\n"}
{"task_id": "CPP/3", "generation": "/*\nYou\"re given a vector of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account falls below zero, and\nat that point function should return true. Otherwise it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n    int balance = 0;\n    for(int i=0; i<operations.size(); i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/142", "generation": "/*\n\"\nThis function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(i%3 == 0){\n            lst[i] = lst[i]*lst[i]; // square the integer entry\n        }\n        else if(i%4 == 0){\n            lst[i] = lst[i]*lst[i]*lst[i]; // cube the integer entry\n        }\n        sum += lst[i]; // add the modified entry to the sum\n    }\n    return sum;\n}"}
{"task_id": "CPP/50", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n    // takes as input string encoded with encode_shift function. Returns decoded string.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5-(int)'a'+26)%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n\n"}
{"task_id": "CPP/103", "generation": "#include <string>\n\nstd::string rounded_avg(int n, int m) {\n    if (n > m) {\n        return \"-1\";\n    }\n    int avg = (n + m) / 2;\n    std::string binary_avg = \"\";\n    while (avg > 0) {\n        binary_avg = std::to_string(avg % 2) + binary_avg;\n        avg /= 2;\n    }\n    return binary_avg;\n}\n"}
{"task_id": "CPP/57", "generation": "/*\nReturn true is vector elements are monotonically increasing or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n    bool increasing = true;\n    bool decreasing = true;\n    \n    for(int i=1; i<l.size(); i++){\n        if(l[i] < l[i-1]){\n            increasing = false;\n        }\n        if(l[i] > l[i-1]){\n            decreasing = false;\n        }\n    }\n    \n    return increasing || decreasing;\n}"}
{"task_id": "CPP/28", "generation": "/*\nConcatenate vector of strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n    string result = \"\";\n    for(string s : strings){\n        result += s;\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/39", "generation": "#include <iostream>\n#include <vector>\n#include <cmath>\n\nbool is_prime(int num) {\n    if (num < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(num); i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint prime_fib(int n) {\n    auto is_fib = [](int num) {\n        int a = 0, b = 1;\n        while (a < num) {\n            int temp = a;\n            a = b;\n            b = temp + b;\n        }\n        return a == num;\n    };\n\n    int count = 0;\n    int num = 2;\n    while (count < n) {\n        if (is_fib(num) && is_prime(num)) {\n            count++;\n        }\n        num++;\n    }\n    return num - 1;\n}\n"}
{"task_id": "CPP/45", "generation": "/*\nGiven length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n    return 0.5 * a * h;\n}\n\n"}
{"task_id": "CPP/145", "generation": "#include <vector>\n#include <algorithm>\n#include <string>\n\nint digitSum(int num) {\n    std::string numStr = std::to_string(num);\n    int sum = 0;\n    for (char digit : numStr) {\n        if (digit == '-') continue;\n        sum += digit - '0';\n    }\n    return sum;\n}\n\nstd::vector<int> order_by_points(std::vector<int> nums) {\n    std::sort(nums.begin(), nums.end(), [&nums](int a, int b) {\n        int sumA = digitSum(a);\n        int sumB = digitSum(b);\n        if (sumA == sumB) {\n            return std::find(nums.begin(), nums.end(), a) - nums.begin() < std::find(nums.begin(), nums.end(), b) - nums.begin();\n        }\n        return sumA < sumB;\n    });\n    return nums;\n}\n"}
{"task_id": "CPP/84", "generation": "/*\nGiven a positive integer N, return in binary the total sum of its digits.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 \u2264 N \u2264 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n    int sum = 0;\n    while(N > 0){\n        sum += N % 10;\n        N /= 10;\n    }\n    string binary = \"\";\n    while(sum > 0){\n        binary = to_string(sum % 2) + binary;\n        sum /= 2;\n    }\n    return binary;\n}"}
{"task_id": "CPP/113", "generation": "#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> odd_count(vector<string> lst) {\n    vector<string> result;\n    \n    for (const string& s : lst) {\n        int count = 0;\n        for (char c : s) {\n            if ((c - '0') % 2 != 0) {\n                count++;\n            }\n        }\n        result.push_back(\"the number of odd elements \" + to_string(count) + \"n the str\" + s + \"ng \" + s + \" of the \" + to_string(count) + \"nput.\\\"\");\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/36", "generation": "/*\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n    int count = 0;\n    for(int i=1; i<n; i++){\n        if(i%11==0 || i%13==0){\n            int num = i;\n            while(num > 0){\n                if(num%10 == 7){\n                    count++;\n                }\n                num = num/10;\n            }\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/144", "generation": "#include <stdio.h>\n#include <string>\n#include <sstream>\n#include <algorithm>\n#include <numeric>\nusing namespace std;\n\nbool simplify(string x, string n) {\n    auto isWholeNumber = [](const string& fraction) {\n        int numerator, denominator;\n        char delimiter;\n        istringstream iss(fraction);\n        iss >> numerator >> delimiter >> denominator;\n        return numerator % denominator == 0;\n    };\n\n    auto gcd = [](int a, int b) {\n        while (b) {\n            a %= b;\n            swap(a, b);\n        }\n        return a;\n    };\n\n    int x_num, x_den, n_num, n_den;\n    char delimiter;\n    istringstream iss_x(x), iss_n(n);\n    iss_x >> x_num >> delimiter >> x_den;\n    iss_n >> n_num >> delimiter >> n_den;\n\n    int new_num = x_num * n_num;\n    int new_den = x_den * n_den;\n\n    int common = gcd(new_num, new_den);\n    new_num /= common;\n    new_den /= common;\n\n    return isWholeNumber(to_string(new_num) + \"/\" + to_string(new_den));\n}\n"}
{"task_id": "CPP/0", "generation": "/*\nCheck if in given vector of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n    for(int i=0; i<numbers.size(); i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            if(fabs(numbers[i]-numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/17", "generation": "#include <vector>\n#include <string>\n#include <unordered_map>\n\nstd::vector<int> parse_music(std::string music_string) {\n    std::unordered_map<std::string, int> note_duration = {\n        {\"o\", 4},\n        {\"o|\", 2},\n        {\".|\", 1}\n    };\n\n    std::vector<int> result;\n    size_t start = 0, end = music_string.find(' ');\n    while (end != std::string::npos) {\n        std::string note = music_string.substr(start, end - start);\n        result.push_back(note_duration[note]);\n        start = end + 1;\n        end = music_string.find(' ', start);\n    }\n    std::string last_note = music_string.substr(start);\n    result.push_back(note_duration[last_note]);\n\n    return result;\n}\n"}
{"task_id": "CPP/47", "generation": "/*\nReturn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n8.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if(n % 2 == 0){\n        return (l[n/2 - 1] + l[n/2]) / 2.0;\n    } else {\n        return l[n/2];\n    }\n}"}
{"task_id": "CPP/75", "generation": "#include <stdio.h>\n#include <vector>\n\nbool is_prime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nstd::vector<int> prime_factors(int n) {\n    std::vector<int> factors;\n    for (int i = 2; i <= n; i++) {\n        if (n % i == 0 && is_prime(i)) {\n            factors.push_back(i);\n        }\n    }\n    return factors;\n}\n\nbool is_multiply_prime(int a) {\n    std::vector<int> factors = prime_factors(a);\n    if (factors.size() == 3) {\n        return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/124", "generation": "/*\nYou have to write a function which validates a given date string and\nreturns true if the date is valid otherwise false.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n    if(date.empty()){\n        return false;\n    }\n    \n    int month = stoi(date.substr(0,2));\n    int day = stoi(date.substr(3,2));\n    int year = stoi(date.substr(6,4));\n    \n    if(month < 1 || month > 12){\n        return false;\n    }\n    \n    if((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && (day < 1 || day > 31)){\n        return false;\n    }\n    \n    if((month == 4 || month == 6 || month == 9 || month == 11) && (day < 1 || day > 30)){\n        return false;\n    }\n    \n    if(month == 2){\n        if((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)){\n            if(day < 1 || day > 29){\n                return false;\n            }\n        } else {\n            if(day < 1 || day > 28){\n                return false;\n            }\n        }\n    }\n    \n    if(date[2] != '-' || date[5] != '-'){\n        return false;\n    }\n    \n    return true;\n}"}
{"task_id": "CPP/101", "generation": "/*\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return a vector of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\", 'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n    vector<string> words;\n    string word = \"\";\n    for(char c : s){\n        if(c == ' ' || c == ','){\n            if(word != \"\"){\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    if(word != \"\"){\n        words.push_back(word);\n    }\n    return words;\n}"}
{"task_id": "CPP/14", "generation": "/*\nReturn vector of all prefixes from shortest to longest of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n    vector<string> result;\n    string prefix = \"\";\n    for(int i=0; i<str.length(); i++){\n        prefix += str[i];\n        result.push_back(prefix);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/141", "generation": "#include <string>\n#include <cctype>\n\nstd::string file_name_check(std::string file_name) {\n    if (file_name.size() < 5) {\n        return \"No\";\n    }\n    int dotCount = 0;\n    for (char c : file_name) {\n        if (c == '.') {\n            dotCount++;\n        }\n    }\n    if (dotCount != 1) {\n        return \"No\";\n    }\n    size_t dotPos = file_name.find('.');\n    std::string name = file_name.substr(0, dotPos);\n    std::string ext = file_name.substr(dotPos + 1);\n    if (!isalpha(name[0])) {\n        return \"No\";\n    }\n    if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\") {\n        return \"No\";\n    }\n    int digitCount = 0;\n    for (char c : name) {\n        if (isdigit(c)) {\n            digitCount++;\n        }\n    }\n    if (digitCount > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n"}
{"task_id": "CPP/123", "generation": "#include <vector>\n#include <algorithm>\n\nstd::vector<int> collatz(int num) {\n    std::vector<int> sequence = {num};\n    while (num != 1) {\n        if (num % 2 == 0) {\n            num = num / 2;\n        } else {\n            num = 3 * num + 1;\n        }\n        sequence.push_back(num);\n    }\n    return sequence;\n}\n\nstd::vector<int> get_odd_collatz(int n) {\n    std::vector<int> collatz_sequence = collatz(n);\n    std::vector<int> odd_numbers;\n    for (int num : collatz_sequence) {\n        if (num % 2 != 0) {\n            odd_numbers.push_back(num);\n        }\n    }\n    std::sort(odd_numbers.begin(), odd_numbers.end());\n    return odd_numbers;\n}\n"}
{"task_id": "CPP/148", "generation": "/*\nThere are eight planets in our solar system: the closerst to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2. \nThe function should return a vector containing all planets whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2, sorted by \nthe proximity to the sun. \nThe function should return an empty vector if planet1 or planet2\nare not correct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    vector<string> result;\n    \n    int index1 = -1;\n    int index2 = -1;\n    \n    for(int i=0; i<planets.size(); i++){\n        if(planets[i] == planet1){\n            index1 = i;\n        }\n        if(planets[i] == planet2){\n            index2 = i;\n        }\n    }\n    \n    if(index1 == -1 || index2 == -1){\n        return result;\n    }\n    \n    int start = min(index1, index2);\n    int end = max(index1, index2);\n    \n    for(int i=start+1; i<end; i++){\n        result.push_back(planets[i]);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/133", "generation": "/*\nYou are given a vector of numbers.\nYou need to return the sum of squared numbers in the given vector,\nround each element in the vector to the upper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n    }\n    return sum;\n}"}
{"task_id": "CPP/109", "generation": "#include <vector>\n#include <algorithm>\n\nbool move_one_ball(std::vector<int> arr) {\n    if (arr.empty()) {\n        return true;\n    }\n    std::vector<int> sorted_arr = arr;\n    std::sort(sorted_arr.begin(), sorted_arr.end());\n    int n = arr.size();\n    for (int i = 0; i < n; i++) {\n        if (arr == sorted_arr) {\n            return true;\n        }\n        int last_element = arr.back();\n        arr.pop_back();\n        arr.insert(arr.begin(), last_element);\n    }\n    return false;\n}\n"}
{"task_id": "CPP/100", "generation": "#include <vector>\n\nstd::vector<int> make_a_pile(int n) {\n    std::vector<int> stones = {n};\n    for (int i = 1; i < n; i++) {\n        if (n % 2 == 0) {\n            n += 1;\n        } else {\n            n += 2;\n        }\n        stones.push_back(n);\n    }\n    return stones;\n}\n"}
{"task_id": "CPP/150", "generation": "/*\nA simple program which should return the value of x if n is \na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n    int i;\n    if(n<=1){\n        return y;\n    }\n    for(i=2;i<n;i++){\n        if(n%i==0){\n            return y;\n        }\n    }\n    return x;\n}\n\n"}
{"task_id": "CPP/153", "generation": "/*\nYou will be given the name of a class (a string) and a vector of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    int max_strength = INT_MIN;\n    string strongest_extension = \"\";\n    \n    for(string extension : extensions){\n        int CAP = 0;\n        int SM = 0;\n        for(char c : extension){\n            if(isupper(c)){\n                CAP++;\n            } else if(islower(c)){\n                SM++;\n            }\n        }\n        int strength = CAP - SM;\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    \n    return class_name + \".\" + strongest_extension;\n}"}
{"task_id": "CPP/107", "generation": "/*\nGiven a positive integer n, return a vector that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n    vector<int> result = {0, 0};\n    for(int i=1; i<=n; i++){\n        string num = to_string(i);\n        string rev_num = num;\n        reverse(rev_num.begin(), rev_num.end());\n        if(num == rev_num){\n            if(i % 2 == 0){\n                result[0]++;\n            } else {\n                result[1]++;\n            }\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/110", "generation": "#include <vector>\n#include <string>\n\nstd::string exchange(std::vector<int> lst1, std::vector<int> lst2) {\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n"}
{"task_id": "CPP/111", "generation": "/*\nGiven a string representing a space separated lowercase letters, return a map\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n    map<char, int> result;\n    map<char, int> count;\n\n    // Count the occurrences of each letter\n    for (char c : test) {\n        if (c != ' ') {\n            count[c]++;\n        }\n    }\n\n    // Find the maximum occurrence\n    int max_occurrence = 0;\n    for (auto it : count) {\n        max_occurrence = max(max_occurrence, it.second);\n    }\n\n    // Add letters with maximum occurrence to the result map\n    for (auto it : count) {\n        if (it.second == max_occurrence) {\n            result[it.first] = it.second;\n        }\n    }\n\n    return result;\n}"}
{"task_id": "CPP/80", "generation": "/*\nYou are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n    if(s.length() < 3){\n        return false;\n    }\n    \n    for(int i=0; i<s.length()-2; i++){\n        if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]){\n            return false;\n        }\n    }\n    \n    return true;\n}\n\n"}
{"task_id": "CPP/41", "generation": "/*\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n*/\n#include<stdio.h>\nusing namespace std;\nint car_race_collision(int n){\n    // Each car moving left to right will collide with each car moving right to left\n    // So the total number of collisions will be n * n\n    return n * n;\n}\n\n"}
{"task_id": "CPP/116", "generation": "/*\nIn this Kata, you have to sort a vector of integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n>>> sort_array({1, 5, 2, 3, 4}) == {1, 2, 4, 3, 5}\n>>> sort_array({-2, -3, -4, -5, -6}) == {-4, -2, -6, -5, -3}\n>>> sort_array({1, 0, 2, 3, 4}) == {0, 1, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n    // Custom comparator function to sort based on number of ones in binary representation\n    auto cmp = [](int a, int b) {\n        int countA = __builtin_popcount(abs(a));\n        int countB = __builtin_popcount(abs(b));\n        if (countA == countB) {\n            return a < b;\n        }\n        return countA < countB;\n    };\n    \n    // Sort the vector using custom comparator\n    sort(arr.begin(), arr.end(), cmp);\n    \n    return arr;\n}"}
{"task_id": "CPP/61", "generation": "/*\nbrackets is a string of '(' and ')'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int count = 0;\n    for(char bracket : brackets){\n        if(bracket == '('){\n            count++;\n        } else if(bracket == ')'){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count == 0;\n}\n\n"}
{"task_id": "CPP/25", "generation": "/*\nReturn vector of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n    vector<int> factors;\n    for(int i=2; i*i<=n; i++){\n        while(n%i == 0){\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if(n > 1){\n        factors.push_back(n);\n    }\n    return factors;\n}"}
{"task_id": "CPP/137", "generation": "#include <string>\n#include <algorithm>\n#include <boost/any.hpp>\nusing namespace std;\n\nboost::any compare_one(boost::any a, boost::any b) {\n    if (boost::any_cast<string>(&a) && boost::any_cast<string>(&b)) {\n        string str_a = boost::any_cast<string>(a);\n        string str_b = boost::any_cast<string>(b);\n        replace(str_a.begin(), str_a.end(), ',', '.');\n        replace(str_b.begin(), str_b.end(), ',', '.');\n        return max(stof(str_a), stof(str_b));\n    } else if (boost::any_cast<float>(&a) && boost::any_cast<float>(&b)) {\n        if (boost::any_cast<float>(a) == boost::any_cast<float>(b)) {\n            return \"None\";\n        }\n        return max(boost::any_cast<float>(a), boost::any_cast<float>(b));\n    } else {\n        return \"None\";\n    }\n}\n"}
{"task_id": "CPP/102", "generation": "/*\nThis function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n    int max_even = -1;\n    for(int i = y; i >= x; i--){\n        if(i % 2 == 0){\n            max_even = i;\n            break;\n        }\n    }\n    return max_even;\n}\n\n"}
{"task_id": "CPP/10", "generation": "#include <string>\nusing namespace std;\n\nbool is_palindrome(string str) {\n    string s(str.rbegin(), str.rend());\n    return s == str;\n}\n\nstring make_palindrome(string str) {\n    for (int i = 0; i < str.size(); i++) {\n        if (is_palindrome(str.substr(i))) {\n            return str + string(str.rbegin(), str.rend() - i);\n        }\n    }\n    return str;\n}\n"}
{"task_id": "CPP/76", "generation": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x, int n) {\n    if (x == 1) {\n        return true;\n    }\n    int power = 0;\n    while (pow(n, power) < x) {\n        power++;\n    }\n    return pow(n, power) == x;\n}\n"}
{"task_id": "CPP/94", "generation": "/*\nYou are given a vector of integers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n    int maxPrime = 0;\n    for(int num : lst){\n        if(num > 1){\n            bool isPrime = true;\n            for(int i=2; i*i<=num; i++){\n                if(num % i == 0){\n                    isPrime = false;\n                    break;\n                }\n            }\n            if(isPrime && num > maxPrime){\n                maxPrime = num;\n            }\n        }\n    }\n    \n    int sum = 0;\n    string primeStr = to_string(maxPrime);\n    for(char c : primeStr){\n        sum += c - '0';\n    }\n    \n    return sum;\n}"}
{"task_id": "CPP/32", "generation": "#include <vector>\n#include <cmath>\n\ndouble poly(std::vector<double> xs, double x) {\n    double sum = 0;\n    for (int i = 0; i < xs.size(); i++) {\n        sum += xs[i] * pow(x, i);\n    }\n    return sum;\n}\n\ndouble find_zero(std::vector<double> xs) {\n    int largestNonZeroIndex = 0;\n    for (int i = 0; i < xs.size() - 1; i++) {\n        if (xs[i] != 0) {\n            largestNonZeroIndex = i;\n        }\n    }\n    return -xs.back() / xs[largestNonZeroIndex];\n}\n"}
{"task_id": "CPP/33", "generation": "#include <vector>\n#include <algorithm>\n\nstd::vector<int> sort_third(std::vector<int> l) {\n    std::vector<int> sorted_indices;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            sorted_indices.push_back(i);\n        }\n    }\n    std::sort(sorted_indices.begin(), sorted_indices.end(), [&l](int a, int b) {\n        return l[a] < l[b];\n    });\n\n    std::vector<int> result = l;\n    for (int i : sorted_indices) {\n        // Sort the values at indices divisible by three\n        std::sort(result.begin() + i, result.begin() + i + 3);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/88", "generation": "/*\nGiven a vector of non-negative integers, return a copy of the given vector after sorting,\nyou will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n    // Check if the vector is empty\n    if(array.empty()){\n        return array;\n    }\n    \n    // Calculate the sum of the first and last index values\n    int sum = array[0] + array[array.size()-1];\n    \n    // Sort the vector in ascending order if the sum is odd, otherwise sort in descending order\n    if(sum % 2 != 0){\n        sort(array.begin(), array.end());\n    } else {\n        sort(array.begin(), array.end(), greater<int>());\n    }\n    \n    return array;\n}"}
{"task_id": "CPP/15", "generation": "/*\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n    string result = \"\";\n    for(int i=0; i<=n; i++){\n        result += to_string(i) + \" \";\n    }\n    result.pop_back(); // remove the extra space at the end\n    return result;\n}"}
{"task_id": "CPP/163", "generation": "/*\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order. Please note that the even digits refer to even numbers less than 10.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n    vector<int> result;\n    if(a > b){\n        int temp = a;\n        a = b;\n        b = temp;\n    }\n    for(int i=a; i<=b; i++){\n        if(i%2 == 0 && i < 10){\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/1", "generation": "#include <vector>\n#include <string>\n\nstd::vector<std::string> separate_paren_groups(std::string paren_string) {\n    std::vector<std::string> result;\n    std::vector<char> stack;\n    std::string current = \"\";\n    for (char c : paren_string) {\n        if (c == '(') {\n            stack.push_back('(');\n            current += '(';\n        } else if (c == ')') {\n            stack.pop_back();\n            current += ')';\n            if (stack.empty()) {\n                result.push_back(current);\n                current = \"\";\n            }\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/69", "generation": "/*\nYou are given a non-empty vector of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or equal to the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the vector.\nIf no such a value exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n    int maxFreq = -1;\n    for(int i=0; i<lst.size(); i++){\n        int count = 0;\n        for(int j=0; j<lst.size(); j++){\n            if(lst[i] == lst[j]){\n                count++;\n            }\n        }\n        if(count >= lst[i] && lst[i] > maxFreq){\n            maxFreq = lst[i];\n        }\n    }\n    return maxFreq;\n}"}
{"task_id": "CPP/31", "generation": "/*\nReturn true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/147", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_max_triples(int n){\n    vector<int> a;\n    for (int i = 1; i <= n; i++) {\n        a.push_back(i * i - i + 1);\n    }\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/105", "generation": "/*\nGiven a vector of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting vector, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1 , 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n    vector<int> sorted_arr;\n    vector<string> result;\n    map<int, string> num_to_name = {\n        {1, \"One\"},\n        {2, \"Two\"},\n        {3, \"Three\"},\n        {4, \"Four\"},\n        {5, \"Five\"},\n        {6, \"Six\"},\n        {7, \"Seven\"},\n        {8, \"Eight\"},\n        {9, \"Nine\"}\n    };\n\n    for(int num : arr){\n        if(num >= 1 && num <= 9){\n            sorted_arr.push_back(num);\n        }\n    }\n\n    sort(sorted_arr.begin(), sorted_arr.end());\n\n    reverse(sorted_arr.begin(), sorted_arr.end());\n\n    for(int num : sorted_arr){\n        result.push_back(num_to_name[num]);\n    }\n\n    return result;\n}"}
{"task_id": "CPP/22", "generation": "/*\nFilter given vector of any python values only for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n    vector<int> result;\n    for(auto val : values){\n        if(val.type() == typeid(int)){\n            result.push_back(boost::any_cast<int>(val));\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/52", "generation": "/*\nReturn true if all numbers in the vector l are below threshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n    for(int i=0; i<l.size(); i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "CPP/154", "generation": "#include <string>\n#include <algorithm>\n\nbool cycpattern_check(std::string a, std::string b) {\n    if (a.length() != b.length()) {\n        return false;\n    }\n    std::string double_a = a + a;\n    return double_a.find(b) != std::string::npos;\n}\n"}
{"task_id": "CPP/115", "generation": "int max_fill(vector<vector<int>> grid, int capacity) {\n    int rows = grid.size();\n    int cols = grid[0].size();\n    vector<int> buckets(cols, 0);\n    int count = 0;\n    \n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            if (grid[i][j] == 1) {\n                int diff = capacity - buckets[j];\n                if (diff > 0) {\n                    count += diff;\n                    buckets[j] += diff;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/131", "generation": "#include <string>\n#include <iostream>\nint digits(int n){\n    int product = 1;\n    bool has_odd = false;\n    std::string num_str = std::to_string(n);\n    for (char digit : num_str) {\n        int num = digit - '0';\n        if (num % 2 != 0) {\n            product *= num;\n            has_odd = true;\n        }\n    }\n    return has_odd ? product : 0;\n}\n"}
{"task_id": "CPP/37", "generation": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n    vector<float> l_prime = l;\n    vector<float> even_values;\n\n    // Extract even values from l\n    for(int i=0; i<l.size(); i+=2){\n        even_values.push_back(l[i]);\n    }\n\n    // Sort even values\n    sort(even_values.begin(), even_values.end());\n\n    // Replace even values in l_prime with sorted even values\n    int j = 0;\n    for(int i=0; i<l_prime.size(); i+=2){\n        l_prime[i] = even_values[j];\n        j++;\n    }\n\n    return l_prime;\n}"}
{"task_id": "CPP/92", "generation": "/*\nCreate a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\n\nExamples\nany_int(5, 2, 7) \u279e true\n\nany_int(3, 2, 2) \u279e false\n\nany_int(3, -2, 1) \u279e true\n\nany_int(3.6, -2.2, 2) \u279e false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n    if (a == (b + c) || b == (a + c) || c == (a + b)) {\n        if (a == (int)a && b == (int)b && c == (int)c) {\n            return true;\n        }\n    }\n    return false;\n}\n\n"}
{"task_id": "CPP/118", "generation": "/*\nYou are given a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \n\nYou may assume that the given string contains English letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n    string vowels = \"aeiouAEIOU\";\n    int n = word.length();\n    for(int i=n-2; i>0; i--){\n        if(vowels.find(word[i]) != string::npos){\n            if(word[i-1] != 'a' && word[i-1] != 'e' && word[i-1] != 'i' && word[i-1] != 'o' && word[i-1] != 'u' &&\n               word[i+1] != 'a' && word[i+1] != 'e' && word[i+1] != 'i' && word[i+1] != 'o' && word[i+1] != 'u'){\n                return string(1, word[i]);\n            }\n        }\n    }\n    return \"\";\n}"}
{"task_id": "CPP/6", "generation": "/*\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> result;\n    int max_depth = 0;\n    int current_depth = 0;\n    \n    for(char c : paren_string){\n        if(c == '('){\n            current_depth++;\n            max_depth = max(max_depth, current_depth);\n        } else if(c == ')'){\n            current_depth--;\n        } else if(c == ' '){\n            result.push_back(max_depth);\n            max_depth = 0;\n            current_depth = 0;\n        }\n    }\n    \n    result.push_back(max_depth);\n    \n    return result;\n}"}
{"task_id": "CPP/87", "generation": "#include <vector>\n#include <algorithm>\n\nvector<vector<int>> get_row(vector<vector<int>> lst, int x) {\n    vector<vector<int>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                result.push_back({i, j});\n            }\n        }\n    }\n    \n    sort(result.begin(), result.end(), [](const vector<int>& a, const vector<int>& b) {\n        if (a[0] == b[0]) {\n            return a[1] > b[1];\n        }\n        return a[0] < b[0];\n    });\n    \n    return result;\n}\n"}
{"task_id": "CPP/2", "generation": "/*\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n    int integer_part = floor(number); // Get the integer part of the number\n    float decimal_part = number - integer_part; // Calculate the decimal part\n    return decimal_part; // Return the decimal part\n}\n\n"}
{"task_id": "CPP/16", "generation": "/*\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n    // Convert the string to lowercase\n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    \n    // Initialize a vector to store distinct characters\n    vector<char> distinct_chars;\n    \n    // Iterate through the string and add distinct characters to the vector\n    for(char c : str){\n        if(find(distinct_chars.begin(), distinct_chars.end(), c) == distinct_chars.end()){\n            distinct_chars.push_back(c);\n        }\n    }\n    \n    // Return the size of the vector, which represents the number of distinct characters\n    return distinct_chars.size();\n}"}
{"task_id": "CPP/135", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n    int largest_index = -1;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < arr[i-1]) {\n            largest_index = i - 1;\n        }\n    }\n    return largest_index;\n}\n"}
{"task_id": "CPP/106", "generation": "#include <vector>\n\nint factorial(int num) {\n    if (num == 0) {\n        return 1;\n    }\n    return num * factorial(num - 1);\n}\n\nstd::vector<int> f(int n) {\n    std::vector<int> result;\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            result.push_back(factorial(i));\n        } else {\n            int sum = 0;\n            for (int j = 1; j <= i; j++) {\n                sum += j;\n            }\n            result.push_back(sum);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/162", "generation": "/*\nGiven a string 'text\", return its md5 hash equivalent string.\nIf 'text\" is an empty string, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n    if(text.empty()){\n        return \"None\";\n    }\n    \n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), digest);\n    \n    char mdString[33];\n    for(int i = 0; i < 16; i++){\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n    }\n    \n    return string(mdString);\n}"}
{"task_id": "CPP/5", "generation": "/*\nInsert a number \"delimeter\" between every two consecutive elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> result;\n    for(int i=0; i<numbers.size(); i++){\n        result.push_back(numbers[i]);\n        if(i != numbers.size()-1){\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/97", "generation": "/*\nComplete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n    int unitA = abs(a) % 10;\n    int unitB = abs(b) % 10;\n    return unitA * unitB;\n}\n\n"}
{"task_id": "CPP/44", "generation": "/*\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n    string result = \"\";\n    while(x > 0){\n        int remainder = x % base;\n        result = to_string(remainder) + result;\n        x = x / base;\n    }\n    return result;\n}"}
{"task_id": "CPP/161", "generation": "#include <string>\n#include <cctype>\n\nstd::string solve(std::string s) {\n    std::string result = \"\";\n    bool has_letter = false;\n    for (char c : s) {\n        if (std::isalpha(c)) {\n            has_letter = true;\n            if (std::islower(c)) {\n                result += std::toupper(c);\n            } else {\n                result += std::tolower(c);\n            }\n        } else {\n            result += c;\n        }\n    }\n    if (!has_letter) {\n        std::reverse(result.begin(), result.end());\n    }\n    return result;\n}\n"}
{"task_id": "CPP/38", "generation": "#include <string>\nusing namespace std;\n\nstring encode_cyclic(string s) {\n    int l = s.length();\n    int num = (l + 2) / 3;\n    string output;\n    for (int i = 0; i * 3 < l; i++) {\n        string x = s.substr(i * 3, 3);\n        if (x.length() == 3) {\n            x = x.substr(1) + x[0];\n        }\n        output += x;\n    }\n    return output;\n}\n\nstring decode_cyclic(string s) {\n    string output;\n    for (int i = 0; i < s.length(); i += 3) {\n        string x = s.substr(i, 3);\n        if (x.length() == 3) {\n            x = x[2] + x.substr(0, 2);\n        }\n        output += x;\n    }\n    return output;\n}\n"}
{"task_id": "CPP/93", "generation": "#include <string>\n#include <algorithm>\n#include <cctype>\n\nstd::string encode(std::string message) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string encoded_message = \"\";\n    for (char& c : message) {\n        if (isalpha(c)) {\n            if (vowels.find(c) != std::string::npos) {\n                char encoded_char = c + 2;\n                if (encoded_char > 'z' || (encoded_char > 'Z' && encoded_char < 'a')) {\n                    encoded_char -= 26;\n                }\n                encoded_message += encoded_char;\n            } else {\n                encoded_message += std::islower(c) ? std::toupper(c) : std::tolower(c);\n            }\n        } else {\n            encoded_message += c;\n        }\n    }\n    return encoded_message;\n}\n"}
{"task_id": "CPP/152", "generation": "/*\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two vectors of scores and guesses of equal length, where each index shows a match. \nReturn a vector of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> result;\n    for(int i=0; i<game.size(); i++){\n        if(game[i] == guess[i]){\n            result.push_back(0);\n        }else{\n            result.push_back(abs(game[i] - guess[i]));\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/62", "generation": "/*\nxs represent coefficients of a polynomial.\nxs{0} + xs{1} * x + xs{2} * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n    vector<float> result;\n    for(int i=1; i<xs.size(); i++){\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/7", "generation": "/*\nFilter an input vector of strings only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> result;\n    for(string s : strings){\n        if(s.find(substring) != string::npos){\n            result.push_back(s);\n        }\n    }\n    return result;\n} \n\n"}
{"task_id": "CPP/24", "generation": "/*\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n    int largest = 1;\n    for(int i=2; i<n; i++){\n        if(n%i == 0){\n            largest = i;\n        }\n    }\n    return largest;\n}\n\n"}
{"task_id": "CPP/79", "generation": "#include <string>\n\nstd::string decimal_to_binary(int decimal) {\n    std::string binary = \"\";\n    while (decimal > 0) {\n        binary = (decimal % 2 == 0 ? \"0\" : \"1\") + binary;\n        decimal /= 2;\n    }\n    return \"db\" + binary + \"db\";\n}\n"}
{"task_id": "CPP/155", "generation": "/*\nGiven an integer. return a vector that has the number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n    vector<int> result = {0, 0};\n    string numStr = to_string(abs(num));\n    \n    for(char c : numStr){\n        if((c - '0') % 2 == 0){\n            result[0]++;\n        } else {\n            result[1]++;\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/4", "generation": "/*\nFor a given vector of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n    float sum = 0;\n    float mean = 0;\n    \n    // Calculate the mean of the dataset\n    for(int i=0; i<numbers.size(); i++){\n        sum += numbers[i];\n    }\n    mean = sum / numbers.size();\n    \n    // Calculate the mean absolute deviation\n    float mad = 0;\n    for(int i=0; i<numbers.size(); i++){\n        mad += abs(numbers[i] - mean);\n    }\n    mad = mad / numbers.size();\n    \n    return mad;\n}\n\n"}
{"task_id": "CPP/56", "generation": "/*\nbrackets is a string of '<' and '>'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int count = 0;\n    for(char bracket : brackets){\n        if(bracket == '<'){\n            count++;\n        } else if(bracket == '>'){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count == 0;\n}"}
{"task_id": "CPP/159", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number, int need, int remaining) {\n    int total_eaten = number + min(need, remaining);\n    int carrots_left = max(0, remaining - need);\n    return {total_eaten, carrots_left};\n}\n"}
{"task_id": "CPP/83", "generation": "int starts_one_ends(int n){\n    if (n == 1) {\n        return 1;\n    }\n    int count = 9;  // Numbers from 1 to 9 are counted initially\n    for (int i = 2; i <= n; i++) {\n        count += 9 * pow(10, i-2);  // Numbers with 1 at the start\n        count += 9 * pow(10, i-1);  // Numbers with 1 at the end\n    }\n    return count;\n}\n"}
{"task_id": "CPP/27", "generation": "/*\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring flip_case(string str){\n    for(int i=0; i<str.length(); i++){\n        if(islower(str[i])){\n            str[i] = toupper(str[i]);\n        }\n        else if(isupper(str[i])){\n            str[i] = tolower(str[i]);\n        }\n    }\n    return str;\n}"}
{"task_id": "CPP/146", "generation": "/*\nWrite a function that takes a vector of numbers as input and returns \nthe number of elements in the vector that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n    int count = 0;\n    for(int num : nums){\n        if(num > 10){\n            string numStr = to_string(num);\n            if((numStr[0] - '0') % 2 != 0 && (numStr[numStr.size()-1] - '0') % 2 != 0){\n                count++;\n            }\n        }\n    }\n    return count;\n} \n\n"}
{"task_id": "CPP/81", "generation": "#include <vector>\n#include <string>\n\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    \n    auto get_letter_grade = [](float gpa) {\n        if (gpa == 4.0) {\n            return \"A+\";\n        } else if (gpa > 3.7) {\n            return \"A\";\n        } else if (gpa > 3.3) {\n            return \"A-\";\n        } else if (gpa > 3.0) {\n            return \"B+\";\n        } else if (gpa > 2.7) {\n            return \"B\";\n        } else if (gpa > 2.3) {\n            return \"B-\";\n        } else if (gpa > 2.0) {\n            return \"C+\";\n        } else if (gpa > 1.7) {\n            return \"C\";\n        } else if (gpa > 1.3) {\n            return \"C-\";\n        } else if (gpa > 1.0) {\n            return \"D+\";\n        } else if (gpa > 0.7) {\n            return \"D\";\n        } else if (gpa >= 0.0) {\n            return \"D-\";\n        } else {\n            return \"E\";\n        }\n    };\n    \n    for (float gpa : grades) {\n        result.push_back(get_letter_grade(gpa));\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/136", "generation": "/*\nCreate a function that returns a vector (a, b), where \"a\" is\nthe largest of negative integers, and \"b\" is the smallest\nof positive integers in a vector.\nIf there is no negative or positive integers, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n    vector<int> result = {0, 0};\n    int largest_negative = INT_MIN;\n    int smallest_positive = INT_MAX;\n    \n    for(int num : lst){\n        if(num < 0 && num > largest_negative){\n            largest_negative = num;\n        }\n        if(num > 0 && num < smallest_positive){\n            smallest_positive = num;\n        }\n    }\n    \n    if(largest_negative != INT_MIN){\n        result[0] = largest_negative;\n    }\n    if(smallest_positive != INT_MAX){\n        result[1] = smallest_positive;\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/67", "generation": "#include <string>\n#include <sstream>\n#include <vector>\n\nint fruit_distribution(std::string s, int n) {\n    std::vector<std::string> fruits;\n    std::stringstream ss(s);\n    std::string token;\n    while (getline(ss, token, ' ')) {\n        fruits.push_back(token);\n    }\n    \n    int apples = 0, oranges = 0;\n    for (int i = 0; i < fruits.size(); i++) {\n        if (fruits[i] == \"apples\") {\n            apples = std::stoi(fruits[i - 1]);\n        } else if (fruits[i] == \"oranges\") {\n            oranges = std::stoi(fruits[i - 1]);\n        }\n    }\n    \n    int mangoes = n - apples - oranges;\n    return mangoes;\n}\n"}
{"task_id": "CPP/48", "generation": "/*\nChecks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n    int left = 0;\n    int right = text.length() - 1;\n    \n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    \n    return true;\n}\n\n"}
{"task_id": "CPP/125", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstd::vector<std::string> split_words(std::string txt) {\n    std::vector<std::string> result;\n    if (txt.find(' ') != std::string::npos) {\n        size_t pos = 0;\n        std::string token;\n        while ((pos = txt.find(' ')) != std::string::npos) {\n            token = txt.substr(0, pos);\n            result.push_back(token);\n            txt.erase(0, pos + 1);\n        }\n        result.push_back(txt);\n    } else if (txt.find(',') != std::string::npos) {\n        size_t pos = 0;\n        std::string token;\n        while ((pos = txt.find(',')) != std::string::npos) {\n            token = txt.substr(0, pos);\n            result.push_back(token);\n            txt.erase(0, pos + 1);\n        }\n        result.push_back(txt);\n    } else {\n        int count = std::count_if(txt.begin(), txt.end(), [](char c) {\n            return std::islower(c) && (c - 'a') % 2 != 0;\n        });\n        result.push_back(std::to_string(count));\n    }\n    return result;\n}\n"}
{"task_id": "CPP/160", "generation": "#include <iostream>\n#include <vector>\n#include <stack>\n#include <unordered_map>\n\nint do_algebra(std::vector<std::string> operators, std::vector<int> operands) {\n    std::unordered_map<std::string, int> precedence = {{\"+\", 1}, {\"-\", 1}, {\"*\", 2}, {\"//\", 2}, {\"**\", 3}};\n    std::stack<int> stack;\n    std::vector<std::string> output;\n\n    auto apply_operator = [&](std::string op) {\n        int b = stack.top();\n        stack.pop();\n        int a = stack.top();\n        stack.pop();\n        if (op == \"+\") stack.push(a + b);\n        else if (op == \"-\") stack.push(a - b);\n        else if (op == \"*\") stack.push(a * b);\n        else if (op == \"//\") stack.push(a / b);\n        else if (op == \"**\") stack.push(pow(a, b));\n    };\n\n    for (size_t i = 0; i < operators.size(); ++i) {\n        while (!stack.empty() && precedence[operators[i]] <= precedence[output.back()]) {\n            output.push_back(std::to_string(stack.top()));\n            stack.pop();\n        }\n        stack.push(operands[i]);\n        output.push_back(operators[i]);\n    }\n\n    output.push_back(std::to_string(operands.back()));\n\n    while (!stack.empty()) {\n        output.push_back(std::to_string(stack.top()));\n        stack.pop();\n    }\n\n    for (const auto& token : output) {\n        if (precedence.find(token) != precedence.end()) {\n            apply_operator(token);\n        } else {\n            stack.push(std::stoi(token));\n        }\n    }\n\n    return stack.top();\n}\n"}
{"task_id": "CPP/151", "generation": "/*\nGiven a vector of numbers, return the sum of squares of the numbers\nin the vector that are odd. Ignore numbers that are negative or not integers.\n\ndouble_the_difference({1, 3, 2, 0}) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference({-1, -2, 0}) == 0\ndouble_the_difference({9, -2}) == 81\ndouble_the_difference({0}) == 0  \n\nIf the input vector is empty, return 0.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nlong long double_the_difference(vector<float> lst){\n    long long sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i] > 0 && lst[i] == (int)lst[i] && (int)lst[i] % 2 != 0){\n            sum += pow(lst[i], 2);\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/117", "generation": "/*\nGiven a string s and a natural number n, you have been tasked to implement \na function that returns a vector of all words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty vector.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n    vector<string> result;\n    string word = \"\";\n    int consonant_count = 0;\n    \n    for(int i=0; i<s.length(); i++){\n        if(s[i] != ' '){\n            word += s[i];\n            if(tolower(s[i]) != 'a' && tolower(s[i]) != 'e' && tolower(s[i]) != 'i' && tolower(s[i]) != 'o' && tolower(s[i]) != 'u'){\n                consonant_count++;\n            }\n        } else {\n            if(consonant_count == n){\n                result.push_back(word);\n            }\n            word = \"\";\n            consonant_count = 0;\n        }\n    }\n    \n    if(consonant_count == n){\n        result.push_back(word);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/78", "generation": "/*\nYou have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n    int count = 0;\n    for(char c : num){\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D'){\n            count++;\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/74", "generation": "#include <vector>\n#include <string>\n\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n    \n    for (const std::string& word : lst1) {\n        total_chars_lst1 += word.length();\n    }\n    \n    for (const std::string& word : lst2) {\n        total_chars_lst2 += word.length();\n    }\n    \n    if (total_chars_lst1 < total_chars_lst2) {\n        return lst1;\n    } else {\n        return total_chars_lst2 < total_chars_lst1 ? lst2 : lst1;\n    }\n}\n"}
{"task_id": "CPP/53", "generation": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n    return x + y;\n}\n\n"}
{"task_id": "CPP/98", "generation": "/*\nGiven a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n    int count = 0;\n    for(int i=0; i<s.length(); i+=2){\n        if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            count++;\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/140", "generation": "#include <string>\nusing namespace std;\n\nstring fix_spaces(string text) {\n    text = regex_replace(text, regex(\" {2,}\"), \"-\");\n    text = regex_replace(text, regex(\" \"), \"_\");\n    return text;\n}\n"}
{"task_id": "CPP/34", "generation": "/*\nReturn sorted unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n    // Sort the vector\n    sort(l.begin(), l.end());\n    \n    // Remove duplicates\n    l.erase(unique(l.begin(), l.end()), l.end());\n    \n    return l;\n}\n\n"}
{"task_id": "CPP/66", "generation": "/*\nTask\nWrite a function that takes a string as input and returns the sum of the upper characters only's\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n    int sum = 0;\n    for(char c : s){\n        if(isupper(c)){\n            sum += c;\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/120", "generation": "vector<int> maximum(vector<int> arr, int k) {\n    sort(arr.begin(), arr.end());\n    vector<int> result(arr.end() - k, arr.end());\n    return result;\n}\n"}
{"task_id": "CPP/139", "generation": "/*\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n    long long result = 1;\n    for(int i = n; i > 0; i--){\n        long long factorial = 1;\n        for(int j = i; j > 0; j--){\n            factorial *= j;\n        }\n        result *= factorial;\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/12", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring longest(vector<string> strings) {\n    if (strings.empty()) {\n        return \"\";\n    }\n    string longestString = strings[0];\n    int maxLength = strings[0].length();\n    for (const string& s : strings) {\n        if (s.length() > maxLength) {\n            maxLength = s.length();\n            longestString = s;\n        }\n    }\n    return longestString;\n}\n"}
{"task_id": "CPP/121", "generation": "/*\nGiven a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solution(vector<int> lst){\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(i%2 == 0 && lst[i]%2 != 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/35", "generation": "/*\nReturn maximum element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n    float max = l[0];\n    for(int i=1; i<l.size(); i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}"}
{"task_id": "CPP/20", "generation": "/*\nFrom a supplied vector of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> result;\n    float min_diff = INFINITY;\n    for(int i=0; i<numbers.size()-1; i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            float diff = abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                result.clear();\n                result.push_back(min(numbers[i], numbers[j]));\n                result.push_back(max(numbers[i], numbers[j]));\n            }\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/19", "generation": "/*\nInput is a space-delimited string of numberals from \"zero\" to \"nine\".\nValid choices are \"zero\", \"one\", 'two\", 'three\", \"four\", \"five\", 'six\", 'seven\", \"eight\" and \"nine\".\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n    map<string, int> number_map = {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n    \n    string result = \"\";\n    map<int, string> sorted_numbers;\n    \n    size_t pos = 0;\n    string token;\n    while ((pos = numbers.find(\" \")) != string::npos) {\n        token = numbers.substr(0, pos);\n        sorted_numbers[number_map[token]] = token;\n        numbers.erase(0, pos + 1);\n    }\n    sorted_numbers[number_map[numbers]] = numbers;\n    \n    for (auto const& pair : sorted_numbers) {\n        result += pair.second + \" \";\n    }\n    \n    return result.substr(0, result.size() - 1);\n}"}
{"task_id": "CPP/85", "generation": "/*\nGiven a non-empty vector of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    int sum = 0;\n    for(int i=1; i<lst.size(); i+=2){\n        if(lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/21", "generation": "/*\nGiven vector of numbers (of at least two elements), apply a linear transform to that vector,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n    // Find the minimum and maximum numbers in the vector\n    float min_num = numbers[0];\n    float max_num = numbers[0];\n    for(int i=1; i<numbers.size(); i++){\n        if(numbers[i] < min_num){\n            min_num = numbers[i];\n        }\n        if(numbers[i] > max_num){\n            max_num = numbers[i];\n        }\n    }\n    \n    // Apply linear transform to rescale the numbers\n    vector<float> rescaled_numbers;\n    for(int i=0; i<numbers.size(); i++){\n        float rescaled_num = (numbers[i] - min_num) / (max_num - min_num);\n        rescaled_numbers.push_back(rescaled_num);\n    }\n    \n    return rescaled_numbers;\n}\n\n"}
{"task_id": "CPP/119", "generation": "#include <string>\n#include <vector>\n\nstd::string match_parens(std::vector<std::string> lst) {\n    int open_count = 0;\n    int close_count = 0;\n    for (const std::string& s : lst) {\n        for (char c : s) {\n            if (c == '(') {\n                open_count++;\n            } else {\n                if (open_count > 0) {\n                    open_count--;\n                } else {\n                    close_count++;\n                }\n            }\n        }\n    }\n    if (open_count == 0 && close_count <= 1) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n"}
{"task_id": "CPP/30", "generation": "/*\nReturn only positive numbers in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n    vector<float> positive_nums;\n    for(int i=0; i<l.size(); i++){\n        if(l[i] > 0){\n            positive_nums.push_back(l[i]);\n        }\n    }\n    return positive_nums;\n}"}
{"task_id": "CPP/64", "generation": "/*\nWrite a function vowels_count which takes a string representing a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. \nHere, 'y' is also a vowel, but only when it is at the end of the given word.\nExample: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n    transform(s.begin(), s.end(), s.begin(), ::tolower); // convert all characters to lowercase\n    int count = 0;\n    for(char c : s){\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n            count++;\n        }\n    }\n    if(s.back() == 'y'){ // check if last character is 'y'\n        count++;\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/128", "generation": "/*\nYou are given a vector arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the vector, represented by 1, -1 or 0.\nNote: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n    if(arr.empty()){\n        return -32768;\n    }\n    \n    int product = 1;\n    int sum = 0;\n    \n    for(int num : arr){\n        if(num > 0){\n            product *= 1;\n        } else if(num < 0){\n            product *= -1;\n        } else {\n            product *= 0;\n        }\n        \n        sum += abs(num);\n    }\n    \n    return product * sum;\n}"}
{"task_id": "CPP/127", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cmath>\n\nbool isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nstring intersection(vector<int> interval1, vector<int> interval2) {\n    int start1 = interval1[0];\n    int end1 = interval1[1];\n    int start2 = interval2[0];\n    int end2 = interval2[1];\n    \n    int intersection_start = max(start1, start2);\n    int intersection_end = min(end1, end2);\n    \n    if (intersection_start > intersection_end) {\n        return \"NO\";\n    }\n    \n    int intersection_length = intersection_end - intersection_start;\n    if (isPrime(intersection_length)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n"}
{"task_id": "CPP/122", "generation": "int add_elements(vector<int> arr, int k) {\n    int sum_two_digits = 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] >= 10 && arr[i] <= 99) {\n            sum_two_digits += arr[i];\n        }\n    }\n    return sum_two_digits;\n}\n"}
{"task_id": "CPP/59", "generation": "/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\n\n"}
{"task_id": "CPP/134", "generation": "#include <string>\nbool check_if_last_char_is_a_letter(std::string txt) {\n    if (txt.empty()) {\n        return false;\n    }\n    char last_char = txt.back();\n    if (isalpha(last_char) && (txt.size() == 1 || txt[txt.size() - 2] == ' ')) {\n        return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/42", "generation": "/*\nReturn vector with elements incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n    vector<int> result;\n    for(int i=0; i<l.size(); i++){\n        result.push_back(l[i]+1);\n    }\n    return result;\n}"}
{"task_id": "CPP/11", "generation": "/*\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n    string result = \"\";\n    for(int i=0; i<a.length(); i++){\n        if(a[i] != b[i]){\n            result += \"1\";\n        }else{\n            result += \"0\";\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/40", "generation": "/*\ntriples_sum_to_zero takes a vector of integers as an input.\nit returns true if there are three distinct elements in the vector that\nsum to zero, and false otherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n    int n = l.size();\n    for(int i=0; i<n-2; i++){\n        for(int j=i+1; j<n-1; j++){\n            for(int k=j+1; k<n; k++){\n                if(l[i] + l[j] + l[k] == 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/13", "generation": "/*\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n    while (a != b) {\n        if (a > b) {\n            a = a - b;\n        } else {\n            b = b - a;\n        }\n    }\n    return a;\n}\n\n"}
{"task_id": "CPP/130", "generation": "#include <vector>\n\nstd::vector<int> tri(int n) {\n    std::vector<int> tribonacci(n + 1, 0);\n    tribonacci[1] = 3;\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            tribonacci[i] = 1 + i / 2;\n        } else {\n            tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1];\n        }\n    }\n    return tribonacci;\n}\n"}
{"task_id": "CPP/60", "generation": "/*\nsum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n    int sum = 0;\n    for(int i=1; i<=n; i++){\n        sum += i;\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/23", "generation": "/*\nReturn length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n    return str.length();\n}\n\n"}
{"task_id": "CPP/46", "generation": "/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n    if(n == 0 || n == 1){\n        return 0;\n    }\n    if(n == 2){\n        return 2;\n    }\n    if(n == 3){\n        return 0;\n    }\n    \n    int a = 0, b = 0, c = 2, d = 0, result = 0;\n    \n    for(int i = 4; i <= n; i++){\n        result = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = result;\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/51", "generation": "/*\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n    string result = \"\";\n    for(char c : text){\n        if(tolower(c) != 'a' && tolower(c) != 'e' && tolower(c) != 'i' && tolower(c) != 'o' && tolower(c) != 'u'){\n            result += c;\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/18", "generation": "/*\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n    int count = 0;\n    if(substring.empty()){\n        return 0;\n    }\n    for (size_t i = 0; i < str.length(); i++) {\n        if (str.substr(i, substring.length()) == substring) {\n            count++;\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/143", "generation": "#include <stdio.h>\n#include <string>\n#include <vector>\n#include <cmath>\nusing namespace std;\n\nbool is_prime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nstring words_in_sentence(string sentence) {\n    vector<string> words;\n    string word = \"\";\n    for (char c : sentence) {\n        if (c == ' ') {\n            if (!word.empty()) {\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    if (!word.empty()) {\n        words.push_back(word);\n    }\n\n    vector<string> prime_words;\n    for (const string& w : words) {\n        if (is_prime(w.size())) {\n            prime_words.push_back(w);\n        }\n    }\n\n    string result = \"\";\n    for (const string& pw : prime_words) {\n        result += pw + \" \";\n    }\n    if (!result.empty()) {\n        result.pop_back(); // Remove the extra space at the end\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/108", "generation": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n    int count = 0;\n    for (int num : n) {\n        int sum_digits = 0;\n        int temp = num < 0 ? -num : num;\n        while (temp > 0) {\n            sum_digits += temp % 10;\n            temp /= 10;\n        }\n        if (sum_digits > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/43", "generation": "/*\npairs_sum_to_zero takes a vector of integers as an input.\nit returns true if there are two distinct elements in the vector that\nsum to zero, and false otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n    for(int i=0; i<l.size(); i++){\n        for(int j=i+1; j<l.size(); j++){\n            if(l[i] + l[j] == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/70", "generation": "/*\nGiven vector of integers, return vector in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\n\nExamples:\nstrange_sort_list({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_list({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_list({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> result;\n    sort(lst.begin(), lst.end());\n    int left = 0, right = lst.size() - 1;\n    while(left <= right){\n        if(left == right){\n            result.push_back(lst[left]);\n            break;\n        }\n        result.push_back(lst[left]);\n        result.push_back(lst[right]);\n        left++;\n        right--;\n    }\n    return result;\n}"}
{"task_id": "CPP/63", "generation": "/*\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n    if(n == 0 || n == 1){\n        return 0;\n    }\n    else if(n == 2){\n        return 1;\n    }\n    \n    int a = 0, b = 0, c = 1, d;\n    \n    for(int i = 3; i <= n; i++){\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    \n    return d;\n}\n\n"}
{"task_id": "CPP/89", "generation": "/*\nCreate a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n    string result = \"\";\n    for(int i=0; i<s.length(); i++){\n        char c = s[i];\n        if(isalpha(c)){\n            char base = islower(c) ? 'a' : 'A';\n            c = base + (c - base + 2*2) % 26;\n        }\n        result += c;\n    }\n    return result;\n}"}
{"task_id": "CPP/26", "generation": "/*\nFrom a vector of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> result;\n    for(int i=0; i<numbers.size(); i++){\n        if(count(numbers.begin(), numbers.end(), numbers[i]) == 1){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/104", "generation": "/*\nGiven a vector of positive integers x. return a sorted vector of all \nelements that hasn't any even digit.\n\nNote: Returned vector should be sorted in increasing order.\n\nFor example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n    vector<int> result;\n    for(int num : x){\n        bool hasEvenDigit = false;\n        int temp = num;\n        while(temp > 0){\n            int digit = temp % 10;\n            if(digit % 2 == 0){\n                hasEvenDigit = true;\n                break;\n            }\n            temp /= 10;\n        }\n        if(!hasEvenDigit){\n            result.push_back(num);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}"}
{"task_id": "CPP/90", "generation": "/*\nYou are given a vector of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the vector.\nReturn None if there is no such element.\n\nnext_smallest({1, 2, 3, 4, 5}) == 2\nnext_smallest({5, 1, 4, 3, 2}) == 2\nnext_smallest({}) == None\nnext_smallest({1, 1}) == None\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint next_smallest(vector<int> lst){\n    if(lst.size() < 2){\n        return -1;\n    }\n    \n    sort(lst.begin(), lst.end());\n    \n    int smallest = lst[0];\n    for(int i=1; i<lst.size(); i++){\n        if(lst[i] > smallest){\n            return lst[i];\n        }\n    }\n    \n    return -1;\n}"}
{"task_id": "CPP/126", "generation": "#include <vector>\n#include <algorithm>\n#include <unordered_map>\n\nbool is_sorted(std::vector<int> lst) {\n    std::unordered_map<int, int> count_map;\n    for (int num : lst) {\n        if (count_map.find(num) != count_map.end()) {\n            count_map[num]++;\n            if (count_map[num] > 2) {\n                return false;\n            }\n        } else {\n            count_map[num] = 1;\n        }\n    }\n    \n    std::vector<int> sorted_lst = lst;\n    std::sort(sorted_lst.begin(), sorted_lst.end());\n    sorted_lst.erase(std::unique(sorted_lst.begin(), sorted_lst.end()), sorted_lst.end());\n    \n    return lst == sorted_lst;\n}\n"}
{"task_id": "CPP/68", "generation": "/*\nGiven a vector representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a vector, { smalest_value, its index },\nIf there are no even values or the given vector is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n    vector<int> result;\n    int smallest_even = -1;\n    int smallest_index = -1;\n    \n    for(int i=0; i<arr.size(); i++){\n        if(arr[i] % 2 == 0 && (smallest_even == -1 || arr[i] < smallest_even)){\n            smallest_even = arr[i];\n            smallest_index = i;\n        }\n    }\n    \n    if(smallest_even != -1){\n        result.push_back(smallest_even);\n        result.push_back(smallest_index);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/58", "generation": "/*\nReturn sorted unique common elements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> result;\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n    \n    int i = 0, j = 0;\n    while (i < l1.size() && j < l2.size()) {\n        if (l1[i] == l2[j]) {\n            if (result.empty() || result.back() != l1[i]) {\n                result.push_back(l1[i]);\n            }\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/112", "generation": "/*\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a vector containing the result string and \"True\"/\"False\" for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n    // Delete characters in s that are equal to any character in c\n    for(int i=0;i<c.length();i++){\n        s.erase(remove(s.begin(), s.end(), c[i]), s.end());\n    }\n    \n    // Check if the result string is palindrome\n    string result = s;\n    string rev = s;\n    reverse(rev.begin(), rev.end());\n    \n    if(result == rev){\n        return {result, \"True\"};\n    } else {\n        return {result, \"False\"};\n    }\n}"}
{"task_id": "CPP/96", "generation": "/*\nImplement a function that takes an non-negative integer and returns a vector of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n    vector<int> primes;\n    if(n <= 1){\n        return primes;\n    }\n    \n    for(int i=2; i<n; i++){\n        bool isPrime = true;\n        for(int j=2; j*j<=i; j++){\n            if(i % j == 0){\n                isPrime = false;\n                break;\n            }\n        }\n        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    \n    return primes;\n}"}
{"task_id": "CPP/157", "generation": "/*\nGiven the lengths of the three sides of a triangle. Return true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or \n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n    // Sort the sides in ascending order\n    if(a > c){\n        float temp = a;\n        a = c;\n        c = temp;\n    }\n    if(b > c){\n        float temp = b;\n        b = c;\n        c = temp;\n    }\n    \n    // Check if the sides form a right-angled triangle\n    if(pow(c,2) == pow(a,2) + pow(b,2)){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\n"}
{"task_id": "CPP/99", "generation": "int closest_integer(string value){\n    float num = stof(value);\n    if (num < 0) {\n        return static_cast<int>(num - 0.5);\n    } else {\n        return static_cast<int>(num + 0.5);\n    }\n}\n"}
{"task_id": "CPP/149", "generation": "/*\nWrite a function that accepts a vector of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted vector with a sorted order,\nThe vector is always a vector of strings and never a vector of numbers,\nand it may contain duplicates.\nThe order of the vector should be ascending by length of each word, and you\nshould return the vector sorted by that rule.\nIf two words have the same length, sort the vector alphabetically.\nThe function should return a vector of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> result;\n    for(string s : lst){\n        if(s.length() % 2 == 0){\n            result.push_back(s);\n        }\n    }\n    sort(result.begin(), result.end(), [](const string& a, const string& b){\n        if(a.length() == b.length()){\n            return a < b;\n        }\n        return a.length() < b.length();\n    });\n    return result;\n}"}
{"task_id": "CPP/86", "generation": "/*\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n    string result = \"\";\n    string word = \"\";\n    \n    for(int i=0; i<s.length(); i++){\n        if(s[i] == ' '){\n            sort(word.begin(), word.end());\n            result += word + \" \";\n            word = \"\";\n        } else {\n            word += s[i];\n        }\n    }\n    \n    sort(word.begin(), word.end());\n    result += word;\n    \n    return result;\n} \n\n"}
{"task_id": "CPP/129", "generation": "#include <vector>\n#include <algorithm>\n\nvector<int> minPath(vector<vector<int>> grid, int k) {\n    int n = grid.size();\n    vector<pair<int, int>> directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n    \n    function<vector<int>(int, int, vector<int>)> dfs = [&](int i, int j, vector<int> path) -> vector<int> {\n        if (path.size() == k) {\n            return path;\n        }\n        \n        int current_val = grid[i][j];\n        grid[i][j] = -1;\n        vector<pair<int, int>> next_moves;\n        \n        for (auto dir : directions) {\n            int dx = dir.first;\n            int dy = dir.second;\n            int x = i + dx, y = j + dy;\n            if (x >= 0 && x < n && y >= 0 && y < n && grid[x][y] != -1) {\n                next_moves.push_back({x, y});\n            }\n        }\n        \n        sort(next_moves.begin(), next_moves.end(), [&](const pair<int, int>& a, const pair<int, int>& b) {\n            return grid[a.first][a.second] < grid[b.first][b.second];\n        });\n        \n        for (auto move : next_moves) {\n            int x = move.first;\n            int y = move.second;\n            vector<int> result = dfs(x, y, path);\n            if (!result.empty()) {\n                return result;\n            }\n        }\n        \n        grid[i][j] = current_val;\n        return {};\n    };\n    \n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            vector<int> result = dfs(i, j, {grid[i][j]});\n            if (!result.empty()) {\n                return result;\n            }\n        }\n    }\n    \n    return {};\n}\n\n"}
{"task_id": "CPP/49", "generation": "#include<stdio.h>\nusing namespace std;\nint modp(int n, int p) {\n    if (n == 0) {\n        return 1;\n    }\n    int result = 1;\n    int base = 2;\n    n = n % (p - 1);\n    while (n > 0) {\n        if (n % 2 == 1) {\n            result = (result * base) % p;\n        }\n        n = n / 2;\n        base = (base * base) % p;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/156", "generation": "#include <stdio.h>\n#include <vector>\n#include <string>\n#include <map>\n\nstd::string int_to_mini_roman(int number) {\n    std::map<int, std::string> roman_numerals = {\n        {1, \"i\"}, {4, \"iv\"}, {5, \"v\"}, {9, \"ix\"}, {10, \"x\"}, {40, \"xl\"},\n        {50, \"l\"}, {90, \"xc\"}, {100, \"c\"}, {400, \"cd\"}, {500, \"d\"}, {900, \"cm\"},\n        {1000, \"m\"}\n    };\n    std::string result = \"\";\n    for (auto it = roman_numerals.rbegin(); it != roman_numerals.rend(); ++it) {\n        int value = it->first;\n        const std::string& numeral = it->second;\n        while (number >= value) {\n            result += numeral;\n            number -= value;\n        }\n    }\n    for (char& c : result) {\n        c = std::tolower(c);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/65", "generation": "/*\nCircular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n    string num = to_string(x);\n    int n = num.size();\n    \n    if(shift > n){\n        reverse(num.begin(), num.end());\n    }else{\n        shift = shift % n;\n        rotate(num.rbegin(), num.rbegin() + shift, num.rend());\n    }\n    \n    return num;\n}"}
{"task_id": "CPP/9", "generation": "#include <vector>\n\nstd::vector<int> rolling_max(std::vector<int> numbers) {\n    std::vector<int> rolling_max_list;\n    int max_num = std::numeric_limits<int>::min();\n    for (int num : numbers) {\n        max_num = std::max(max_num, num);\n        rolling_max_list.push_back(max_num);\n    }\n    return rolling_max_list;\n}\n"}
{"task_id": "CPP/158", "generation": "/*\nWrite a function that accepts a vector of strings.\nThe vector contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\nfind_max({\"name\", \"of\", 'string\"}) == 'string\"\nfind_max({\"name\", \"enam\", \"game\"}) == \"enam\"\nfind_max({\"aaaaaaa\", \"bb\" ,\"cc\"}) == \"aaaaaaa\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring find_max(vector<string> words){\n    string max_word = \"\";\n    int max_unique_chars = 0;\n    \n    for(string word : words){\n        int unique_chars = 0;\n        vector<char> char_count(26, 0);\n        \n        for(char c : word){\n            if(char_count[c - 'a'] == 0){\n                unique_chars++;\n                char_count[c - 'a'] = 1;\n            }\n        }\n        \n        if(unique_chars > max_unique_chars || (unique_chars == max_unique_chars && word < max_word)){\n            max_word = word;\n            max_unique_chars = unique_chars;\n        }\n    }\n    \n    return max_word;\n}"}
{"task_id": "CPP/8", "generation": "/*\nFor a given vector of integers, return a vector consisting of a sum and a product of all the integers in a vector.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n    int sum = 0;\n    int product = 1;\n    \n    for(int num : numbers){\n        sum += num;\n        product *= num;\n    }\n    \n    return {sum, product};\n}"}
{"task_id": "CPP/95", "generation": "#include <string>\n#include <map>\n#include <cctype>\n\nbool check_dict_case(std::map<std::string, std::string> dict) {\n    if (dict.empty()) {\n        return false;\n    }\n    for (const auto& pair : dict) {\n        const std::string& key = pair.first;\n        bool isLower = true;\n        bool isUpper = true;\n        for (char c : key) {\n            if (!std::isalpha(c)) {\n                return false;\n            }\n            if (!std::islower(c)) {\n                isLower = false;\n            }\n            if (!std::isupper(c)) {\n                isUpper = false;\n            }\n        }\n        if (!isLower && !isUpper) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/55", "generation": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n    if(n <= 1){\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}"}
{"task_id": "CPP/29", "generation": "/*\nFilter an input vector of strings only for ones that start with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> result;\n    for(string str : strings){\n        if(str.find(prefix) == 0){\n            result.push_back(str);\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/72", "generation": "/*\nWrite a function that returns true if the object q will fly, and false otherwise.\nThe object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) \u279e false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) \u279e false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) \u279e true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) \u279e true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n    int sum = 0;\n    bool balanced = true;\n    \n    // Calculate the sum of elements in the vector\n    for(int i=0; i<q.size(); i++){\n        sum += q[i];\n    }\n    \n    // Check if the vector is balanced\n    for(int i=0; i<q.size()/2; i++){\n        if(q[i] != q[q.size()-1-i]){\n            balanced = false;\n            break;\n        }\n    }\n    \n    // Check if the sum is less than or equal to the maximum weight\n    if(balanced && sum <= w){\n        return true;\n    } else {\n        return false;\n    }\n}"}
{"task_id": "CPP/54", "generation": "#include <string>\n#include <algorithm>\n#include <unordered_map>\n\nbool same_chars(std::string s0, std::string s1) {\n    if (s0.size() != s1.size()) {\n        return false;\n    }\n    \n    std::unordered_map<char, int> charCount;\n    \n    for (char c : s0) {\n        charCount[c]++;\n    }\n    \n    for (char c : s1) {\n        if (charCount.find(c) == charCount.end() || charCount[c] == 0) {\n            return false;\n        }\n        charCount[c]--;\n    }\n    \n    return true;\n}\n"}
{"task_id": "CPP/91", "generation": "#include <string>\nusing namespace std;\n\nint is_bored(string S){\n    int boredom_count = 0;\n    size_t pos = 0;\n    string delimiter = \".?!\";\n    while ((pos = S.find_first_of(delimiter, pos)) != string::npos) {\n        string sentence = S.substr(0, pos);\n        size_t start = sentence.find_first_not_of(\" \");\n        if (start != string::npos && sentence[start] == 'I') {\n            boredom_count++;\n        }\n        S.erase(0, pos + 1);\n        pos = 0;\n    }\n    return boredom_count;\n}\n"}
{"task_id": "CPP/77", "generation": "/*\nWrite a function that takes an integer a and returns true \nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscube(int a){\n    int cube_root = cbrt(a); // calculate the cube root of the input integer\n    return (cube_root * cube_root * cube_root == a); // check if the cube of the cube root is equal to the input integer\n}"}
{"task_id": "CPP/73", "generation": "/*\nGiven a vector arr of integers, find the minimum number of elements that\nneed to be changed to make the vector palindromic. A palindromic vector is a vector that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n    int n = arr.size();\n    int changes = 0;\n    \n    for(int i=0; i<n/2; i++){\n        if(arr[i] != arr[n-1-i]){\n            changes++;\n        }\n    }\n    \n    return changes;\n} \n\n"}
{"task_id": "CPP/71", "generation": "/*\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n    // Check if the three sides form a valid triangle\n    if(a + b > c && a + c > b && b + c > a){\n        // Calculate the semi-perimeter\n        float s = (a + b + c) / 2;\n        // Calculate the area using Heron's formula\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n        // Round the area to 2 decimal points\n        return round(area * 100) / 100;\n    } else {\n        return -1;\n    }\n}\n\n"}
{"task_id": "CPP/82", "generation": "/*\nWrite a function that takes a string and returns true if the string\nlength is a prime number or false otherwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n    int length = str.length();\n    if(length <= 1){\n        return false;\n    }\n    for(int i=2; i*i<=length; i++){\n        if(length % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/114", "generation": "/*\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n    long long minSum = nums[0];\n    long long currentSum = nums[0];\n    \n    for(int i=1; i<nums.size(); i++){\n        currentSum = min(nums[i], currentSum + nums[i]);\n        minSum = min(minSum, currentSum);\n    }\n    \n    return minSum;\n}\n\n"}
{"task_id": "CPP/138", "generation": "#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n    if (n % 2 != 0) {\n        return false;\n    }\n    if (n < 8) {\n        return false;\n    }\n    return true;\n}\n"}
{"task_id": "CPP/132", "generation": "#include <string>\n#include <stack>\n\nbool is_nested(std::string str) {\n    std::stack<char> brackets;\n    for (char c : str) {\n        if (c == '[') {\n            brackets.push(c);\n        } else if (c == ']' && !brackets.empty() && brackets.top() == '[') {\n            brackets.pop();\n        }\n    }\n    return !brackets.empty() && brackets.size() < str.size() && brackets.size() > 0;\n}\n"}
{"task_id": "CPP/3", "generation": "/*\nYou\"re given a vector of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account falls below zero, and\nat that point function should return true. Otherwise it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n    int balance = 0;\n    for(int i=0; i<operations.size(); i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/142", "generation": "/*\n\"\nThis function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(i%3 == 0){\n            lst[i] = lst[i]*lst[i]; // square the integer entry if index is multiple of 3\n        }\n        else if(i%4 == 0){\n            lst[i] = lst[i]*lst[i]*lst[i]; // cube the integer entry if index is multiple of 4 and not a multiple of 3\n        }\n        sum += lst[i]; // add the modified or unmodified entry to the sum\n    }\n    return sum;\n}"}
{"task_id": "CPP/50", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n    // takes as input string encoded with encode_shift function. Returns decoded string.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5-(int)'a'+26)%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n\n"}
{"task_id": "CPP/103", "generation": "#include <string>\n\nstring rounded_avg(int n, int m) {\n    if (n > m) {\n        return \"-1\";\n    }\n    int avg = (n + m) / 2;\n    string binary_avg = \"\";\n    while (avg > 0) {\n        binary_avg = to_string(avg % 2) + binary_avg;\n        avg /= 2;\n    }\n    return binary_avg;\n}\n"}
{"task_id": "CPP/57", "generation": "/*\nReturn true is vector elements are monotonically increasing or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n    bool increasing = true;\n    bool decreasing = true;\n    \n    for(int i=1; i<l.size(); i++){\n        if(l[i] < l[i-1]){\n            increasing = false;\n        }\n        if(l[i] > l[i-1]){\n            decreasing = false;\n        }\n    }\n    \n    return increasing || decreasing;\n}"}
{"task_id": "CPP/28", "generation": "/*\nConcatenate vector of strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n    string result = \"\";\n    for(string s : strings){\n        result += s;\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/39", "generation": "#include <iostream>\n#include <vector>\n#include <cmath>\n\nbool is_prime(int num) {\n    if (num < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(num); i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint prime_fib(int n) {\n    auto is_fib = [](int num) {\n        int a = 0, b = 1;\n        while (a < num) {\n            int temp = a;\n            a = b;\n            b = temp + b;\n        }\n        return a == num;\n    };\n\n    int count = 0;\n    int num = 2;\n    while (count < n) {\n        if (is_fib(num) && is_prime(num)) {\n            count++;\n        }\n        num++;\n    }\n    return num - 1;\n}\n"}
{"task_id": "CPP/45", "generation": "/*\nGiven length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n    return 0.5 * a * h;\n}\n\n"}
{"task_id": "CPP/145", "generation": "#include <vector>\n#include <algorithm>\n#include <string>\n\nint digitSum(int num) {\n    std::string numStr = std::to_string(num);\n    int sum = 0;\n    for (char digit : numStr) {\n        if (digit == '-' && sum == 0) {\n            sum -= (digit - '0');\n        } else {\n            sum += (digit - '0');\n        }\n    }\n    return sum;\n}\n\nstd::vector<int> order_by_points(std::vector<int> nums) {\n    std::sort(nums.begin(), nums.end(), [&](int a, int b) {\n        if (digitSum(a) == digitSum(b)) {\n            return std::find(nums.begin(), nums.end(), a) - nums.begin() < std::find(nums.begin(), nums.end(), b) - nums.begin();\n        }\n        return digitSum(a) < digitSum(b);\n    });\n    return nums;\n}\n"}
{"task_id": "CPP/84", "generation": "/*\nGiven a positive integer N, return in binary the total sum of its digits.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 \u2264 N \u2264 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n    int sum = 0;\n    while(N > 0){\n        sum += N % 10;\n        N /= 10;\n    }\n    string binary = \"\";\n    while(sum > 0){\n        binary = to_string(sum % 2) + binary;\n        sum /= 2;\n    }\n    return binary;\n}\n\n"}
{"task_id": "CPP/113", "generation": "#include <vector>\n#include <string>\n#include <map>\n\nstd::vector<std::string> odd_count(std::vector<std::string> lst) {\n    std::vector<std::string> result;\n    for (const std::string& s : lst) {\n        int odd_count = 0;\n        for (char c : s) {\n            if ((c - '0') % 2 != 0) {\n                odd_count++;\n            }\n        }\n        result.push_back(\"the number of odd elements \" + std::to_string(odd_count) + \"n the str\" + s + \"ng \" + s + \" of the \" + s + \"nput.\\\"\");\n    }\n    return result;\n}\n"}
{"task_id": "CPP/36", "generation": "/*\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n    int count = 0;\n    for(int i=0; i<n; i++){\n        if(i%11==0 || i%13==0){\n            int num = i;\n            while(num>0){\n                if(num%10 == 7){\n                    count++;\n                }\n                num = num/10;\n            }\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/144", "generation": "/*\nYour task is to implement a function that will simplify the expression\nx * n. The function returns true if x * n evaluates to a whole number and false\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = true\nsimplify(\"1/6\", \"2/1\") = false\nsimplify(\"7/10\", \"10/2\") = false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool simplify(string x,string n){\n    // Extracting numerator and denominator from x and n\n    int x_num = stoi(x.substr(0, x.find(\"/\")));\n    int x_den = stoi(x.substr(x.find(\"/\") + 1));\n    \n    int n_num = stoi(n.substr(0, n.find(\"/\")));\n    int n_den = stoi(n.substr(n.find(\"/\") + 1));\n    \n    // Checking if x * n evaluates to a whole number\n    if((x_num * n_num) % (x_den * n_den) == 0){\n        return true;\n    } else {\n        return false;\n    }\n}"}
{"task_id": "CPP/0", "generation": "/*\nCheck if in given vector of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n    for(int i=0; i<numbers.size(); i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            if(fabs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n} \n\n"}
{"task_id": "CPP/17", "generation": "#include <vector>\n#include <string>\n#include <unordered_map>\n\nstd::vector<int> parse_music(std::string music_string) {\n    std::unordered_map<std::string, int> notes_duration = {\n        {\"o\", 4},\n        {\"o|\", 2},\n        {\".|\", 1}\n    };\n    std::vector<int> result;\n    size_t start = 0;\n    size_t end = music_string.find(\" \");\n    while (end != std::string::npos) {\n        std::string note = music_string.substr(start, end - start);\n        result.push_back(notes_duration[note]);\n        start = end + 1;\n        end = music_string.find(\" \", start);\n    }\n    std::string last_note = music_string.substr(start);\n    result.push_back(notes_duration[last_note]);\n    return result;\n}\n"}
{"task_id": "CPP/47", "generation": "/*\nReturn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n8.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if(n % 2 == 0){\n        return (l[n/2 - 1] + l[n/2]) / 2.0;\n    } else {\n        return l[n/2];\n    }\n}"}
{"task_id": "CPP/75", "generation": "#include <stdio.h>\n#include <vector>\n\nbool is_multiply_prime(int a) {\n    std::vector<int> primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n    for (int i = 0; i < primes.size(); i++) {\n        for (int j = i; j < primes.size(); j++) {\n            for (int k = j; k < primes.size(); k++) {\n                if (primes[i] * primes[j] * primes[k] == a) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/124", "generation": "/*\nYou have to write a function which validates a given date string and\nreturns true if the date is valid otherwise false.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n    if(date.empty()){\n        return false;\n    }\n    \n    int month, day, year;\n    if(sscanf(date.c_str(), \"%d-%d-%d\", &month, &day, &year) != 3){\n        return false;\n    }\n    \n    if(month < 1 || month > 12){\n        return false;\n    }\n    \n    if(month == 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n    } else if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n            return false;\n        }\n    } else {\n        if(day < 1 || day > 31){\n            return false;\n        }\n    }\n    \n    return true;\n}"}
{"task_id": "CPP/101", "generation": "/*\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return a vector of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\", 'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n    vector<string> words;\n    string word = \"\";\n    \n    for(char c : s){\n        if(c == ' ' || c == ','){\n            if(word != \"\"){\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    \n    if(word != \"\"){\n        words.push_back(word);\n    }\n    \n    return words;\n}"}
{"task_id": "CPP/14", "generation": "/*\nReturn vector of all prefixes from shortest to longest of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n    vector<string> result;\n    string prefix = \"\";\n    for(char c : str){\n        prefix += c;\n        result.push_back(prefix);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/141", "generation": "#include <string>\n#include <cctype>\n\nstd::string file_name_check(std::string file_name) {\n    if (file_name.size() < 5) {\n        return \"No\";\n    }\n    int dotCount = 0;\n    for (char c : file_name) {\n        if (c == '.') {\n            dotCount++;\n        }\n    }\n    if (dotCount != 1) {\n        return \"No\";\n    }\n    size_t dotPos = file_name.find('.');\n    std::string name = file_name.substr(0, dotPos);\n    std::string ext = file_name.substr(dotPos + 1);\n    if (!isalpha(name[0])) {\n        return \"No\";\n    }\n    if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\") {\n        return \"No\";\n    }\n    int digitCount = 0;\n    for (char c : name) {\n        if (isdigit(c)) {\n            digitCount++;\n        }\n    }\n    if (digitCount > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n"}
{"task_id": "CPP/123", "generation": "/*\nGiven a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n    1. Collatz(1) is {1}.\n    2. returned vector sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n    vector<int> result;\n    result.push_back(1); // Collatz(1) is {1}\n    \n    while(n != 1){\n        if(n % 2 == 1){ // if n is odd\n            result.push_back(n);\n        }\n        n = (n % 2 == 0) ? n / 2 : 3 * n + 1;\n    }\n    \n    sort(result.begin(), result.end()); // sort the vector in increasing order\n    return result;\n}"}
{"task_id": "CPP/148", "generation": "/*\nThere are eight planets in our solar system: the closerst to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2. \nThe function should return a vector containing all planets whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2, sorted by \nthe proximity to the sun. \nThe function should return an empty vector if planet1 or planet2\nare not correct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    vector<string> result;\n    \n    int index1 = -1;\n    int index2 = -1;\n    \n    for(int i=0; i<planets.size(); i++){\n        if(planets[i] == planet1){\n            index1 = i;\n        }\n        if(planets[i] == planet2){\n            index2 = i;\n        }\n    }\n    \n    if(index1 == -1 || index2 == -1){\n        return result;\n    }\n    \n    int start = min(index1, index2);\n    int end = max(index1, index2);\n    \n    for(int i=start+1; i<end; i++){\n        result.push_back(planets[i]);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/133", "generation": "/*\nYou are given a vector of numbers.\nYou need to return the sum of squared numbers in the given vector,\nround each element in the vector to the upper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        int rounded = ceil(lst[i]);\n        sum += rounded * rounded;\n    }\n    return sum;\n}"}
{"task_id": "CPP/109", "generation": "#include <vector>\n#include <algorithm>\n\nbool move_one_ball(std::vector<int> arr) {\n    if (arr.empty()) {\n        return true;\n    }\n    std::vector<int> sorted_arr = arr;\n    std::sort(sorted_arr.begin(), sorted_arr.end());\n    int n = arr.size();\n    for (int i = 0; i < n; i++) {\n        if (arr == sorted_arr) {\n            return true;\n        }\n        int last_element = arr.back();\n        arr.pop_back();\n        arr.insert(arr.begin(), last_element);\n    }\n    return false;\n}\n"}
{"task_id": "CPP/100", "generation": "#include <vector>\n\nstd::vector<int> make_a_pile(int n) {\n    std::vector<int> stones = {n};\n    for (int i = 1; i < n; i++) {\n        if (n % 2 == 0) {\n            n += 1;\n        } else {\n            n += 2;\n        }\n        stones.push_back(n);\n    }\n    return stones;\n}\n"}
{"task_id": "CPP/150", "generation": "/*\nA simple program which should return the value of x if n is \na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n    if(n<=1){\n        return y;\n    }\n    for(int i=2;i<n;i++){\n        if(n%i==0){\n            return y;\n        }\n    }\n    return x;\n}\n\n"}
{"task_id": "CPP/153", "generation": "/*\nYou will be given the name of a class (a string) and a vector of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    int max_strength = INT_MIN;\n    string strongest_extension = \"\";\n    \n    for(string extension : extensions){\n        int cap_count = 0;\n        int sm_count = 0;\n        \n        for(char c : extension){\n            if(isupper(c)){\n                cap_count++;\n            } else if(islower(c)){\n                sm_count++;\n            }\n        }\n        \n        int strength = cap_count - sm_count;\n        \n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    \n    return class_name + \".\" + strongest_extension;\n}"}
{"task_id": "CPP/107", "generation": "/*\nGiven a positive integer n, return a vector that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n    vector<int> result = {0, 0};\n    for(int i=1; i<=n; i++){\n        string s = to_string(i);\n        string rev = s;\n        reverse(rev.begin(), rev.end());\n        if(s == rev){\n            if(i % 2 == 0){\n                result[0]++;\n            }else{\n                result[1]++;\n            }\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/110", "generation": "#include <vector>\n#include <string>\n\nstd::string exchange(std::vector<int> lst1, std::vector<int> lst2) {\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n"}
{"task_id": "CPP/111", "generation": "/*\nGiven a string representing a space separated lowercase letters, return a map\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n    map<char, int> result;\n    map<char, int> count;\n    \n    for(char c : test){\n        if(c != ' '){\n            count[c]++;\n        }\n    }\n    \n    int maxCount = 0;\n    for(auto it = count.begin(); it != count.end(); it++){\n        if(it->second > maxCount){\n            maxCount = it->second;\n        }\n    }\n    \n    for(auto it = count.begin(); it != count.end(); it++){\n        if(it->second == maxCount){\n            result[it->first] = it->second;\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/80", "generation": "/*\nYou are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n    if(s.length() < 3){\n        return false;\n    }\n    \n    for(int i=0; i<s.length()-2; i++){\n        if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]){\n            return false;\n        }\n    }\n    \n    return true;\n}\n\n"}
{"task_id": "CPP/41", "generation": "/*\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n*/\n#include<stdio.h>\nusing namespace std;\nint car_race_collision(int n){\n    // Each car moving left to right will collide with each car moving right to left\n    // So the total number of collisions will be the product of the number of cars moving left to right and the number of cars moving right to left\n    return n * n;\n}\n\n"}
{"task_id": "CPP/116", "generation": "/*\nIn this Kata, you have to sort a vector of integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n>>> sort_array({1, 5, 2, 3, 4}) == {1, 2, 4, 3, 5}\n>>> sort_array({-2, -3, -4, -5, -6}) == {-4, -2, -6, -5, -3}\n>>> sort_array({1, 0, 2, 3, 4}) == {0, 1, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n    // Custom comparator function to sort based on number of ones in binary representation\n    auto cmp = [](int a, int b) {\n        int countA = __builtin_popcount(abs(a));\n        int countB = __builtin_popcount(abs(b));\n        if (countA == countB) {\n            return a < b;\n        }\n        return countA < countB;\n    };\n    \n    // Sort the vector using the custom comparator function\n    sort(arr.begin(), arr.end(), cmp);\n    \n    return arr;\n}"}
{"task_id": "CPP/61", "generation": "/*\nbrackets is a string of '(' and ')'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int count = 0;\n    for(char bracket : brackets){\n        if(bracket == '('){\n            count++;\n        } else if(bracket == ')'){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count == 0;\n}\n\n"}
{"task_id": "CPP/25", "generation": "/*\nReturn vector of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n    vector<int> factors;\n    for(int i=2; i*i<=n; i++){\n        while(n%i == 0){\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if(n > 1){\n        factors.push_back(n);\n    }\n    return factors;\n}"}
{"task_id": "CPP/137", "generation": "#include <string>\n#include <algorithm>\n#include <boost/any.hpp>\nusing namespace std;\n\nboost::any compare_one(boost::any a, boost::any b) {\n    if (a.type() == b.type()) {\n        if (a.type() == typeid(int)) {\n            return max(boost::any_cast<int>(a), boost::any_cast<int>(b));\n        } else if (a.type() == typeid(float)) {\n            return max(boost::any_cast<float>(a), boost::any_cast<float>(b));\n        } else if (a.type() == typeid(string)) {\n            float a_num = stof(boost::any_cast<string>(a));\n            float b_num = stof(boost::any_cast<string>(b));\n            return to_string(max(a_num, b_num));\n        }\n    } else {\n        return max(boost::any_cast<float>(a), boost::any_cast<float>(b));\n    }\n    return \"None\";\n}\n"}
{"task_id": "CPP/102", "generation": "/*\nThis function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n    int max_even = -1;\n    for(int i = y; i >= x; i--){\n        if(i % 2 == 0){\n            max_even = i;\n            break;\n        }\n    }\n    return max_even;\n}\n\n"}
{"task_id": "CPP/10", "generation": "#include <string>\nusing namespace std;\n\nbool is_palindrome(string str) {\n    string s(str.rbegin(), str.rend());\n    return s == str;\n}\n\nstring make_palindrome(string str) {\n    if (str.empty()) {\n        return \"\";\n    }\n    for (int i = str.size(); i > 0; i--) {\n        if (is_palindrome(str.substr(0, i))) {\n            return str + string(str.begin(), str.begin() + i - 1);\n        }\n    }\n    return str + string(str.begin(), str.end() - 1);\n}\n"}
{"task_id": "CPP/76", "generation": "#include <stdio.h>\n#include <math.h>\n\nbool is_simple_power(int x, int n) {\n    if (x == 1) {\n        return true;\n    }\n    int power = 0;\n    while (pow(n, power) < x) {\n        power++;\n    }\n    return pow(n, power) == x;\n}\n"}
{"task_id": "CPP/94", "generation": "/*\nYou are given a vector of integers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n    int maxPrime = 0;\n    for(int num : lst){\n        if(num > 1){\n            bool isPrime = true;\n            for(int i=2; i*i<=num; i++){\n                if(num % i == 0){\n                    isPrime = false;\n                    break;\n                }\n            }\n            if(isPrime && num > maxPrime){\n                maxPrime = num;\n            }\n        }\n    }\n    \n    int sum = 0;\n    string primeStr = to_string(maxPrime);\n    for(char c : primeStr){\n        sum += c - '0';\n    }\n    \n    return sum;\n}"}
{"task_id": "CPP/32", "generation": "#include <vector>\n#include <cmath>\n#include <algorithm>\n\ndouble poly(std::vector<double> xs, double x) {\n    double sum = 0;\n    for (int i = 0; i < xs.size(); i++) {\n        sum += xs[i] * pow(x, i);\n    }\n    return sum;\n}\n\ndouble find_zero(std::vector<double> xs) {\n    if (xs.size() % 2 != 0) {\n        throw std::invalid_argument(\"Number of coefficients should be even.\");\n    }\n\n    double largest_coeff = *std::max_element(xs.begin(), xs.end(), \n        [](double a, double b) { return std::abs(a) < std::abs(b); });\n\n    if (largest_coeff == 0) {\n        throw std::invalid_argument(\"Largest non-zero coefficient should be non-zero.\");\n    }\n\n    for (int i = 0; i < xs.size(); i++) {\n        if (xs[i] == largest_coeff) {\n            xs[i] = 0;\n            break;\n        }\n    }\n\n    return -xs[0] / largest_coeff;\n}\n"}
{"task_id": "CPP/33", "generation": "#include <vector>\n#include <algorithm>\n\nstd::vector<int> sort_third(std::vector<int> l) {\n    std::vector<int> l_sorted;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l_sorted.push_back(l[i]);\n        }\n    }\n    std::sort(l_sorted.begin(), l_sorted.end());\n\n    std::vector<int> result;\n    int sorted_index = 0;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            result.push_back(l_sorted[sorted_index]);\n            sorted_index++;\n        } else {\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/88", "generation": "/*\nGiven a vector of non-negative integers, return a copy of the given vector after sorting,\nyou will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n    if(array.empty()){\n        return array;\n    }\n    \n    int sum = array[0] + array[array.size()-1];\n    \n    if(sum % 2 == 0){\n        sort(array.begin(), array.end(), greater<int>());\n    } else {\n        sort(array.begin(), array.end());\n    }\n    \n    return array;\n}"}
{"task_id": "CPP/15", "generation": "/*\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n    string result = \"\";\n    for(int i=0; i<=n; i++){\n        result += to_string(i) + \" \";\n    }\n    result.pop_back(); // remove the extra space at the end\n    return result;\n}"}
{"task_id": "CPP/163", "generation": "/*\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order. Please note that the even digits refer to even numbers less than 10.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n    vector<int> result;\n    if(a > b){\n        int temp = a;\n        a = b;\n        b = temp;\n    }\n    for(int i=a; i<=b; i++){\n        if(i%2 == 0 && i < 10){\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/1", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> separate_paren_groups(std::string paren_string) {\n    std::vector<std::string> result;\n    std::vector<char> stack;\n    std::string current = \"\";\n    \n    for (char c : paren_string) {\n        if (c == '(') {\n            stack.push_back('(');\n            current += c;\n        } else if (c == ')') {\n            stack.pop_back();\n            current += c;\n            if (stack.empty()) {\n                result.push_back(current);\n                current = \"\";\n            }\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/69", "generation": "/*\nYou are given a non-empty vector of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or equal to the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the vector.\nIf no such a value exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n    int maxFreq = -1;\n    for(int i=0; i<lst.size(); i++){\n        int count = 0;\n        for(int j=0; j<lst.size(); j++){\n            if(lst[j] == lst[i]){\n                count++;\n            }\n        }\n        if(count >= lst[i] && lst[i] > maxFreq){\n            maxFreq = lst[i];\n        }\n    }\n    return maxFreq;\n}"}
{"task_id": "CPP/31", "generation": "/*\nReturn true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/147", "generation": "#include <stdio.h>\n#include <vector>\nusing namespace std;\n\nint get_max_triples(int n) {\n    vector<int> a(n);\n    for (int i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"}
{"task_id": "CPP/105", "generation": "/*\nGiven a vector of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting vector, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1 , 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n    vector<int> sorted_arr;\n    vector<string> result;\n    map<int, string> num_to_name = {\n        {1, \"One\"},\n        {2, \"Two\"},\n        {3, \"Three\"},\n        {4, \"Four\"},\n        {5, \"Five\"},\n        {6, \"Six\"},\n        {7, \"Seven\"},\n        {8, \"Eight\"},\n        {9, \"Nine\"}\n    };\n    \n    for(int num : arr){\n        if(num >= 1 && num <= 9){\n            sorted_arr.push_back(num);\n        }\n    }\n    \n    sort(sorted_arr.begin(), sorted_arr.end());\n    reverse(sorted_arr.begin(), sorted_arr.end());\n    \n    for(int num : sorted_arr){\n        result.push_back(num_to_name[num]);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/22", "generation": "/*\nFilter given vector of any python values only for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n    vector<int> result;\n    for(auto val : values){\n        if(val.type() == typeid(int)){\n            result.push_back(boost::any_cast<int>(val));\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/52", "generation": "/*\nReturn true if all numbers in the vector l are below threshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n    for(int i=0; i<l.size(); i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "CPP/154", "generation": "#include <string>\n#include <algorithm>\n\nbool cycpattern_check(std::string a, std::string b) {\n    if (a.length() != b.length()) {\n        return false;\n    }\n    std::string double_a = a + a;\n    return double_a.find(b) != std::string::npos;\n}\n"}
{"task_id": "CPP/115", "generation": "int max_fill(vector<vector<int>> grid, int capacity) {\n    int rows = grid.size();\n    int cols = grid[0].size();\n    vector<int> buckets(cols, 0);\n    int count = 0;\n    \n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            if (grid[i][j] == 1) {\n                int diff = capacity - buckets[j];\n                if (diff > 0) {\n                    count += diff;\n                    buckets[j] += diff;\n                }\n            }\n        }\n    }\n    \n    return count;\n}\n"}
{"task_id": "CPP/131", "generation": "#include <string>\n#include <iostream>\n\nint digits(int n) {\n    int product = 1;\n    bool has_odd = false;\n    std::string num_str = std::to_string(n);\n    for (char digit : num_str) {\n        int num = digit - '0';\n        if (num % 2 != 0) {\n            product *= num;\n            has_odd = true;\n        }\n    }\n    return has_odd ? product : 0;\n}\n"}
{"task_id": "CPP/37", "generation": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n    vector<float> l_prime = l;\n    vector<float> even_values;\n    \n    // Extract even values from l\n    for(int i=0; i<l.size(); i+=2){\n        even_values.push_back(l[i]);\n    }\n    \n    // Sort even values\n    sort(even_values.begin(), even_values.end());\n    \n    // Replace even values in l_prime with sorted even values\n    int even_index = 0;\n    for(int i=0; i<l_prime.size(); i+=2){\n        l_prime[i] = even_values[even_index];\n        even_index++;\n    }\n    \n    return l_prime;\n}"}
{"task_id": "CPP/92", "generation": "/*\nCreate a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\n\nExamples\nany_int(5, 2, 7) \u279e true\n\nany_int(3, 2, 2) \u279e false\n\nany_int(3, -2, 1) \u279e true\n\nany_int(3.6, -2.2, 2) \u279e false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n    if(floor(a)==a && floor(b)==b && floor(c)==c){\n        if(a==b+c || b==a+c || c==a+b){\n            return true;\n        }\n    }\n    return false;\n}\n\n"}
{"task_id": "CPP/118", "generation": "#include <string>\n#include <algorithm>\nusing namespace std;\n\nstring get_closest_vowel(string word) {\n    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    for (int i = word.size() - 2; i > 0; i--) {\n        if (vowels.find(word[i]) != string::npos && consonants.find(word[i - 1]) != string::npos && consonants.find(word[i + 1]) != string::npos) {\n            return string(1, word[i]);\n        }\n    }\n    return \"\";\n}\n"}
{"task_id": "CPP/6", "generation": "/*\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> result;\n    int max_depth = 0;\n    int current_depth = 0;\n    \n    for(int i=0; i<paren_string.length(); i++){\n        if(paren_string[i] == '('){\n            current_depth++;\n            if(current_depth > max_depth){\n                max_depth = current_depth;\n            }\n        }\n        else if(paren_string[i] == ')'){\n            current_depth--;\n        }\n        else if(paren_string[i] == ' '){\n            result.push_back(max_depth);\n            max_depth = 0;\n            current_depth = 0;\n        }\n    }\n    \n    result.push_back(max_depth);\n    \n    return result;\n}"}
{"task_id": "CPP/87", "generation": "#include <vector>\n#include <algorithm>\n\nvector<vector<int>> get_row(vector<vector<int>> lst, int x) {\n    vector<vector<int>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                result.push_back({i, j});\n            }\n        }\n    }\n    \n    sort(result.begin(), result.end(), [](const vector<int>& a, const vector<int>& b) {\n        if (a[0] == b[0]) {\n            return a[1] > b[1];\n        }\n        return a[0] < b[0];\n    });\n    \n    return result;\n}\n"}
{"task_id": "CPP/2", "generation": "/*\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n    int integer_part = floor(number); // Get the integer part of the number\n    float decimal_part = number - integer_part; // Calculate the decimal part\n    return decimal_part; // Return the decimal part\n}\n\n"}
{"task_id": "CPP/16", "generation": "/*\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n    // Convert the string to lowercase to ignore case\n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    \n    // Initialize a vector to store distinct characters\n    vector<char> distinct_chars;\n    \n    // Iterate through each character in the string\n    for(char c : str){\n        // Check if the character is already in the distinct_chars vector\n        if(find(distinct_chars.begin(), distinct_chars.end(), c) == distinct_chars.end()){\n            // If not found, add it to the vector\n            distinct_chars.push_back(c);\n        }\n    }\n    \n    // Return the size of the distinct_chars vector\n    return distinct_chars.size();\n}"}
{"task_id": "CPP/135", "generation": "#include <vector>\nint can_arrange(std::vector<int> arr) {\n    int largest_index = -1;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < arr[i - 1]) {\n            largest_index = i - 1;\n        }\n    }\n    return largest_index;\n}\n"}
{"task_id": "CPP/106", "generation": "#include <vector>\n\nint factorial(int num) {\n    if (num == 0) {\n        return 1;\n    }\n    return num * factorial(num - 1);\n}\n\nstd::vector<int> f(int n) {\n    std::vector<int> result;\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            result.push_back(factorial(i));\n        } else {\n            int sum = 0;\n            for (int j = 1; j <= i; j++) {\n                sum += j;\n            }\n            result.push_back(sum);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/162", "generation": "/*\nGiven a string 'text\", return its md5 hash equivalent string.\nIf 'text\" is an empty string, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n    if(text.empty()){\n        return \"None\";\n    }\n    \n    unsigned char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), result);\n    \n    char md5_string[MD5_DIGEST_LENGTH*2+1];\n    for(int i=0; i<MD5_DIGEST_LENGTH; i++){\n        sprintf(&md5_string[i*2], \"%02x\", (unsigned int)result[i]);\n    }\n    \n    return string(md5_string);\n}"}
{"task_id": "CPP/5", "generation": "/*\nInsert a number \"delimeter\" between every two consecutive elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> result;\n    for(int i=0; i<numbers.size(); i++){\n        result.push_back(numbers[i]);\n        if(i != numbers.size()-1){\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/97", "generation": "/*\nComplete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n    int unitA = abs(a) % 10;\n    int unitB = abs(b) % 10;\n    return unitA * unitB;\n}\n\n"}
{"task_id": "CPP/44", "generation": "/*\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n    string result = \"\";\n    while(x > 0){\n        int remainder = x % base;\n        result = to_string(remainder) + result;\n        x = x / base;\n    }\n    return result;\n}"}
{"task_id": "CPP/161", "generation": "#include <string>\n#include <algorithm>\n\nstd::string solve(std::string s) {\n    if (std::all_of(s.begin(), s.end(), [](char c) { return !isalpha(c); })) {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n    for (char& c : s) {\n        if (isalpha(c)) {\n            c = islower(c) ? toupper(c) : tolower(c);\n        }\n    }\n    return s;\n}\n"}
{"task_id": "CPP/38", "generation": "#include <string>\n\nstd::string encode_cyclic(std::string s) {\n    int l = s.length();\n    int num = (l + 2) / 3;\n    std::string output = \"\";\n    for (int i = 0; i * 3 < l; i++) {\n        std::string x = s.substr(i * 3, 3);\n        if (x.length() == 3) {\n            x = x.substr(1) + x[0];\n        }\n        output += x;\n    }\n    return output;\n}\n\nstd::string decode_cyclic(std::string s) {\n    std::string output = \"\";\n    for (int i = 0; i < s.length(); i += 3) {\n        std::string x = s.substr(i, 3);\n        x = x[2] + x.substr(0, 2);\n        output += x;\n    }\n    return output;\n}\n"}
{"task_id": "CPP/93", "generation": "#include <string>\n#include <cctype>\n\nstd::string encode(std::string message) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string encoded_message = \"\";\n    for (char& c : message) {\n        if (isalpha(c)) {\n            if (vowels.find(c) != std::string::npos) {\n                encoded_message += static_cast<char>(c + 2);\n            } else {\n                encoded_message += islower(c) ? toupper(c) : tolower(c);\n            }\n        } else {\n            encoded_message += c;\n        }\n    }\n    return encoded_message;\n}\n"}
{"task_id": "CPP/152", "generation": "/*\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two vectors of scores and guesses of equal length, where each index shows a match. \nReturn a vector of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> result;\n    for(int i=0; i<game.size(); i++){\n        if(game[i] == guess[i]){\n            result.push_back(0);\n        } else {\n            result.push_back(abs(game[i] - guess[i]));\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/62", "generation": "/*\nxs represent coefficients of a polynomial.\nxs{0} + xs{1} * x + xs{2} * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n    vector<float> result;\n    for(int i=1; i<xs.size(); i++){\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}"}
{"task_id": "CPP/7", "generation": "/*\nFilter an input vector of strings only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> filtered_strings;\n    for(string s : strings){\n        if(s.find(substring) != string::npos){\n            filtered_strings.push_back(s);\n        }\n    }\n    return filtered_strings;\n}"}
{"task_id": "CPP/24", "generation": "/*\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n    int largest = 1;\n    for(int i=2; i<n; i++){\n        if(n % i == 0){\n            largest = i;\n        }\n    }\n    return largest;\n}\n\n"}
{"task_id": "CPP/79", "generation": "#include <string>\n\nstd::string decimal_to_binary(int decimal) {\n    std::string binary = \"\";\n    while (decimal > 0) {\n        binary = (decimal % 2 == 0 ? \"0\" : \"1\") + binary;\n        decimal /= 2;\n    }\n    return \"db\" + binary + \"db\";\n}\n"}
{"task_id": "CPP/155", "generation": "/*\nGiven an integer. return a vector that has the number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n    vector<int> result = {0, 0};\n    string num_str = to_string(abs(num));\n    \n    for(char c : num_str){\n        if((c - '0') % 2 == 0){\n            result[0]++;\n        } else {\n            result[1]++;\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/4", "generation": "/*\nFor a given vector of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n    // Calculate the mean of the dataset\n    float sum = 0;\n    for(int i=0; i<numbers.size(); i++){\n        sum += numbers[i];\n    }\n    float mean = sum / numbers.size();\n    \n    // Calculate the mean absolute deviation\n    float mad = 0;\n    for(int i=0; i<numbers.size(); i++){\n        mad += abs(numbers[i] - mean);\n    }\n    mad = mad / numbers.size();\n    \n    return mad;\n}\n\n"}
{"task_id": "CPP/56", "generation": "/*\nbrackets is a string of '<' and '>'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int count = 0;\n    for(char bracket : brackets){\n        if(bracket == '<'){\n            count++;\n        } else if(bracket == '>'){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count == 0;\n}"}
{"task_id": "CPP/159", "generation": "#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number, int need, int remaining) {\n    int total_eaten = number + min(need, remaining);\n    int carrots_left = max(0, remaining - need);\n    return {total_eaten, carrots_left};\n}\n"}
{"task_id": "CPP/83", "generation": "/*\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n*/\n#include<stdio.h>\nusing namespace std;\nint starts_one_ends(int n){\n    int count = 0;\n    if(n == 1){\n        return 1;\n    }\n    count += 9; // for numbers starting with 1\n    count += 9; // for numbers ending with 1\n    for(int i=3; i<=n; i++){\n        count *= 10; // for the rest of the digits, we have 10 choices\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/27", "generation": "/*\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring flip_case(string str){\n    for(int i=0; i<str.length(); i++){\n        if(islower(str[i])){\n            str[i] = toupper(str[i]);\n        }\n        else if(isupper(str[i])){\n            str[i] = tolower(str[i]);\n        }\n    }\n    return str;\n}"}
{"task_id": "CPP/146", "generation": "/*\nWrite a function that takes a vector of numbers as input and returns \nthe number of elements in the vector that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n    int count = 0;\n    for(int num : nums){\n        string str = to_string(num);\n        if(num > 10 && (str[0] - '0') % 2 != 0 && (str[str.size()-1] - '0') % 2 != 0){\n            count++;\n        }\n    }\n    return count;\n} \n\n"}
{"task_id": "CPP/81", "generation": "#include <vector>\n#include <string>\n\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    \n    auto get_letter_grade = [](float gpa) {\n        if (gpa == 4.0) {\n            return \"A+\";\n        } else if (gpa > 3.7) {\n            return \"A\";\n        } else if (gpa > 3.3) {\n            return \"A-\";\n        } else if (gpa > 3.0) {\n            return \"B+\";\n        } else if (gpa > 2.7) {\n            return \"B\";\n        } else if (gpa > 2.3) {\n            return \"B-\";\n        } else if (gpa > 2.0) {\n            return \"C+\";\n        } else if (gpa > 1.7) {\n            return \"C\";\n        } else if (gpa > 1.3) {\n            return \"C-\";\n        } else if (gpa > 1.0) {\n            return \"D+\";\n        } else if (gpa > 0.7) {\n            return \"D\";\n        } else if (gpa >= 0.0) {\n            return \"D-\";\n        } else {\n            return \"E\";\n        }\n    };\n    \n    for (float gpa : grades) {\n        result.push_back(get_letter_grade(gpa));\n    }\n    \n    return result;\n}\n"}
{"task_id": "CPP/136", "generation": "/*\nCreate a function that returns a vector (a, b), where \"a\" is\nthe largest of negative integers, and \"b\" is the smallest\nof positive integers in a vector.\nIf there is no negative or positive integers, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n    vector<int> result = {0, 0};\n    int largest_negative = INT_MIN;\n    int smallest_positive = INT_MAX;\n    \n    for(int num : lst){\n        if(num < 0 && num > largest_negative){\n            largest_negative = num;\n        }\n        if(num > 0 && num < smallest_positive){\n            smallest_positive = num;\n        }\n    }\n    \n    if(largest_negative != INT_MIN){\n        result[0] = largest_negative;\n    }\n    if(smallest_positive != INT_MAX){\n        result[1] = smallest_positive;\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/67", "generation": "#include <string>\n#include <sstream>\nint fruit_distribution(std::string s, int n) {\n    std::istringstream iss(s);\n    int apples = 0, oranges = 0;\n    std::string fruit;\n    while (iss >> fruit) {\n        if (fruit == \"apples\") {\n            iss >> apples;\n        } else if (fruit == \"oranges\") {\n            iss >> oranges;\n        }\n    }\n    int mangoes = n - apples - oranges;\n    return mangoes;\n}\n"}
{"task_id": "CPP/48", "generation": "/*\nChecks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n    int left = 0;\n    int right = text.length() - 1;\n    \n    while(left < right){\n        if(text[left] != text[right]){\n            return false;\n        }\n        left++;\n        right--;\n    }\n    \n    return true;\n}\n\n"}
{"task_id": "CPP/125", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstd::vector<std::string> split_words(std::string txt) {\n    std::vector<std::string> result;\n    if (txt.find(' ') != std::string::npos) {\n        size_t pos = 0;\n        std::string token;\n        while ((pos = txt.find(' ')) != std::string::npos) {\n            token = txt.substr(0, pos);\n            result.push_back(token);\n            txt.erase(0, pos + 1);\n        }\n        result.push_back(txt);\n    } else if (txt.find(',') != std::string::npos) {\n        size_t pos = 0;\n        std::string token;\n        while ((pos = txt.find(',')) != std::string::npos) {\n            token = txt.substr(0, pos);\n            result.push_back(token);\n            txt.erase(0, pos + 1);\n        }\n        result.push_back(txt);\n    } else {\n        int odd_lower_case_count = 0;\n        for (char c : txt) {\n            if (islower(c) && (c - 'a') % 2 != 0) {\n                odd_lower_case_count++;\n            }\n        }\n        result.push_back(std::to_string(odd_lower_case_count));\n    }\n    return result;\n}\n"}
{"task_id": "CPP/160", "generation": "#include <stdio.h>\n#include <math.h>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <stdlib.h>\nusing namespace std;\n\nint do_algebra(vector<string> operato, vector<int> operand) {\n    int result = operand[0];\n    for (int i = 0; i < operato.size(); i++) {\n        if (operato[i] == \"+\") {\n            result += operand[i + 1];\n        } else if (operato[i] == \"-\") {\n            result -= operand[i + 1];\n        } else if (operato[i] == \"*\") {\n            result *= operand[i + 1];\n        } else if (operato[i] == \"//\") {\n            result /= operand[i + 1];\n        } else if (operato[i] == \"**\") {\n            result = pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/151", "generation": "/*\nGiven a vector of numbers, return the sum of squares of the numbers\nin the vector that are odd. Ignore numbers that are negative or not integers.\n\ndouble_the_difference({1, 3, 2, 0}) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference({-1, -2, 0}) == 0\ndouble_the_difference({9, -2}) == 81\ndouble_the_difference({0}) == 0  \n\nIf the input vector is empty, return 0.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nlong long double_the_difference(vector<float> lst){\n    long long sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i] > 0 && lst[i] == (int)lst[i] && (int)lst[i] % 2 != 0){\n            sum += pow(lst[i], 2);\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/117", "generation": "/*\nGiven a string s and a natural number n, you have been tasked to implement \na function that returns a vector of all words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty vector.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n    vector<string> result;\n    string word = \"\";\n    int consonant_count = 0;\n    \n    for(int i=0; i<s.length(); i++){\n        if(s[i] != ' '){\n            word += s[i];\n            if(tolower(s[i]) != 'a' && tolower(s[i]) != 'e' && tolower(s[i]) != 'i' && tolower(s[i]) != 'o' && tolower(s[i]) != 'u'){\n                consonant_count++;\n            }\n        } else {\n            if(consonant_count == n){\n                result.push_back(word);\n            }\n            word = \"\";\n            consonant_count = 0;\n        }\n    }\n    \n    if(consonant_count == n){\n        result.push_back(word);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/78", "generation": "/*\nYou have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n    int count = 0;\n    for(char c : num){\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D'){\n            count++;\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/74", "generation": "#include <vector>\n#include <string>\n\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n    \n    for (const std::string& word : lst1) {\n        total_chars_lst1 += word.length();\n    }\n    for (const std::string& word : lst2) {\n        total_chars_lst2 += word.length();\n    }\n    \n    if (total_chars_lst1 < total_chars_lst2) {\n        return lst1;\n    } else {\n        return (total_chars_lst2 < total_chars_lst1) ? lst2 : lst1;\n    }\n}\n"}
{"task_id": "CPP/53", "generation": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n    return x + y;\n}\n\n"}
{"task_id": "CPP/98", "generation": "/*\nGiven a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n    int count = 0;\n    for(int i = 0; i < s.length(); i+=2){\n        if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            count++;\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/140", "generation": "#include <string>\n\nstd::string fix_spaces(std::string text) {\n    std::string result = \"\";\n    int consecutive_spaces = 0;\n    for (char c : text) {\n        if (c == ' ') {\n            consecutive_spaces++;\n            if (consecutive_spaces > 2) {\n                result += '-';\n                consecutive_spaces = 0;\n            } else {\n                result += '_';\n            }\n        } else {\n            result += c;\n            consecutive_spaces = 0;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "CPP/34", "generation": "/*\nReturn sorted unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n    // Sort the vector\n    sort(l.begin(), l.end());\n    \n    // Remove duplicates\n    l.erase(unique(l.begin(), l.end()), l.end());\n    \n    return l;\n}\n\n"}
{"task_id": "CPP/66", "generation": "/*\nTask\nWrite a function that takes a string as input and returns the sum of the upper characters only's\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n    int sum = 0;\n    for(char c : s){\n        if(isupper(c)){\n            sum += c;\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/120", "generation": "/*\nGiven a vector arr of integers and a positive integer k, return a sorted vector \nof length k with the maximum k numbers in arr, in ascending order.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n    // Sort the vector in descending order\n    sort(arr.begin(), arr.end(), greater<int>());\n    \n    // Create a new vector to store the maximum k numbers\n    vector<int> result;\n    \n    // Add the first k numbers to the result vector\n    for(int i=0;i<k;i++){\n        result.push_back(arr[i]);\n    }\n    \n    // Sort the result vector in ascending order\n    sort(result.begin(), result.end());\n    \n    return result;\n}"}
{"task_id": "CPP/139", "generation": "/*\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n    long long result = 1;\n    for(int i = n; i > 0; i--){\n        long long factorial = 1;\n        for(int j = i; j > 0; j--){\n            factorial *= j;\n        }\n        result *= factorial;\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/12", "generation": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n    if (strings.empty()) {\n        return \"\";\n    }\n    string longest_str = strings[0];\n    int max_length = strings[0].length();\n    for (const string& s : strings) {\n        if (s.length() > max_length) {\n            max_length = s.length();\n            longest_str = s;\n        }\n    }\n    return longest_str;\n}\n"}
{"task_id": "CPP/121", "generation": "/*\nGiven a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solution(vector<int> lst){\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(i%2 == 0 && lst[i]%2 != 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/35", "generation": "/*\nReturn maximum element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n    float max = l[0];\n    for(int i=1; i<l.size(); i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n} \n\n"}
{"task_id": "CPP/20", "generation": "/*\nFrom a supplied vector of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> result;\n    float min_diff = INFINITY;\n    for(int i=0; i<numbers.size()-1; i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            float diff = abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                result.clear();\n                result.push_back(min(numbers[i], numbers[j]));\n                result.push_back(max(numbers[i], numbers[j]));\n            }\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/19", "generation": "#include <iostream>\n#include <string>\n#include <vector>\n#include <map>\n#include <algorithm>\n\nstd::string sort_numbers(std::string numbers) {\n    std::map<std::string, int> number_map = {\n        {\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3}, {\"four\", 4},\n        {\"five\", 5}, {\"six\", 6}, {\"seven\", 7}, {\"eight\", 8}, {\"nine\", 9}\n    };\n\n    std::vector<std::string> numbers_list;\n    std::string word = \"\";\n    for (char c : numbers) {\n        if (c == ' ') {\n            numbers_list.push_back(word);\n            word = \"\";\n        } else {\n            word += c;\n        }\n    }\n    numbers_list.push_back(word);\n\n    std::sort(numbers_list.begin(), numbers_list.end(), [&](const std::string& a, const std::string& b) {\n        return number_map[a] < number_map[b];\n    });\n\n    std::string result = \"\";\n    for (const std::string& num : numbers_list) {\n        result += num + \" \";\n    }\n    result.pop_back(); // Remove the extra space at the end\n    return result;\n}\n"}
{"task_id": "CPP/85", "generation": "/*\nGiven a non-empty vector of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    int sum = 0;\n    for(int i=1; i<lst.size(); i+=2){\n        if(lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "CPP/21", "generation": "/*\nGiven vector of numbers (of at least two elements), apply a linear transform to that vector,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n    // Find the minimum and maximum numbers in the vector\n    float min_num = numbers[0];\n    float max_num = numbers[0];\n    for(int i=1; i<numbers.size(); i++){\n        if(numbers[i] < min_num){\n            min_num = numbers[i];\n        }\n        if(numbers[i] > max_num){\n            max_num = numbers[i];\n        }\n    }\n    \n    // Apply linear transformation to rescale the numbers\n    vector<float> rescaled_numbers;\n    for(int i=0; i<numbers.size(); i++){\n        float rescaled_num = (numbers[i] - min_num) / (max_num - min_num);\n        rescaled_numbers.push_back(rescaled_num);\n    }\n    \n    return rescaled_numbers;\n}\n\n"}
{"task_id": "CPP/119", "generation": "#include <string>\n#include <vector>\n\nstd::string match_parens(std::vector<std::string> lst) {\n    int open_count = 0;\n    int close_count = 0;\n    for (const std::string& s : lst) {\n        for (char c : s) {\n            if (c == '(') {\n                open_count++;\n            } else if (c == ')') {\n                close_count++;\n            }\n        }\n    }\n    if (open_count == close_count) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n"}
{"task_id": "CPP/30", "generation": "/*\nReturn only positive numbers in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n    vector<float> positive_nums;\n    for(int i=0; i<l.size(); i++){\n        if(l[i] > 0){\n            positive_nums.push_back(l[i]);\n        }\n    }\n    return positive_nums;\n}"}
{"task_id": "CPP/64", "generation": "/*\nWrite a function vowels_count which takes a string representing a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. \nHere, 'y' is also a vowel, but only when it is at the end of the given word.\nExample: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n    transform(s.begin(), s.end(), s.begin(), ::tolower); // convert all characters to lowercase\n    int count = 0;\n    for(char c : s){\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n            count++;\n        }\n    }\n    if(s.back() == 'y'){ // check if the last character is 'y'\n        count++;\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/128", "generation": "/*\nYou are given a vector arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the vector, represented by 1, -1 or 0.\nNote: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n    if(arr.empty()){\n        return -32768;\n    }\n    \n    int product = 1;\n    int sum = 0;\n    \n    for(int num : arr){\n        if(num > 0){\n            product *= 1;\n        } else if(num < 0){\n            product *= -1;\n        } else {\n            product *= 0;\n        }\n        \n        sum += abs(num);\n    }\n    \n    return product * sum;\n}"}
{"task_id": "CPP/127", "generation": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cmath>\n\nbool isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nstring intersection(vector<int> interval1, vector<int> interval2) {\n    int start1 = interval1[0];\n    int end1 = interval1[1];\n    int start2 = interval2[0];\n    int end2 = interval2[1];\n    \n    int intersection_start = max(start1, start2);\n    int intersection_end = min(end1, end2);\n    \n    if (intersection_start > intersection_end) {\n        return \"NO\";\n    }\n    \n    int intersection_length = intersection_end - intersection_start;\n    if (isPrime(intersection_length)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n"}
{"task_id": "CPP/122", "generation": "int add_elements(vector<int> arr, int k) {\n    int sum_two_digits = 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] >= 10 && arr[i] <= 99) {\n            sum_two_digits += arr[i];\n        }\n    }\n    return sum_two_digits;\n}\n"}
{"task_id": "CPP/59", "generation": "/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\n\n"}
{"task_id": "CPP/134", "generation": "#include <string>\nusing namespace std;\n\nbool check_if_last_char_is_a_letter(string txt) {\n    if (txt.empty()) {\n        return false;\n    }\n    char last_char = txt.back();\n    if (isalpha(last_char) && (txt.size() == 1 || txt[txt.size() - 2] == ' ')) {\n        return true;\n    }\n    return false;\n}\n"}
{"task_id": "CPP/42", "generation": "/*\nReturn vector with elements incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n    vector<int> result;\n    for(int i=0; i<l.size(); i++){\n        result.push_back(l[i]+1);\n    }\n    return result;\n}"}
{"task_id": "CPP/11", "generation": "/*\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n    string result = \"\";\n    for(int i=0; i<a.length(); i++){\n        if(a[i] != b[i]){\n            result += \"1\";\n        } else {\n            result += \"0\";\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/40", "generation": "/*\ntriples_sum_to_zero takes a vector of integers as an input.\nit returns true if there are three distinct elements in the vector that\nsum to zero, and false otherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n    int n = l.size();\n    for(int i=0; i<n-2; i++){\n        for(int j=i+1; j<n-1; j++){\n            for(int k=j+1; k<n; k++){\n                if(l[i] + l[j] + l[k] == 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/13", "generation": "/*\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n    while (a != b) {\n        if (a > b) {\n            a = a - b;\n        } else {\n            b = b - a;\n        }\n    }\n    return a;\n}\n\n"}
{"task_id": "CPP/130", "generation": "#include <vector>\n\nstd::vector<int> tri(int n) {\n    std::vector<int> tribonacci(n + 1, 0);\n    tribonacci[1] = 3;\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            tribonacci[i] = 1 + i / 2;\n        } else {\n            tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1];\n        }\n    }\n    return tribonacci;\n}\n"}
{"task_id": "CPP/60", "generation": "/*\nsum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n    int sum = 0;\n    for(int i=1; i<=n; i++){\n        sum += i;\n    }\n    return sum;\n}\n\n"}
{"task_id": "CPP/23", "generation": "/*\nReturn length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n    return str.length();\n}\n\n"}
{"task_id": "CPP/46", "generation": "/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n    if(n == 0 || n == 1){\n        return 0;\n    }\n    if(n == 2){\n        return 2;\n    }\n    if(n == 3){\n        return 0;\n    }\n    \n    int a = 0, b = 0, c = 2, d = 0, sum = 0;\n    \n    for(int i = 4; i <= n; i++){\n        sum = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = sum;\n    }\n    \n    return sum;\n}\n\n"}
{"task_id": "CPP/51", "generation": "/*\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n    string result = \"\";\n    for(char c : text){\n        if(tolower(c) != 'a' && tolower(c) != 'e' && tolower(c) != 'i' && tolower(c) != 'o' && tolower(c) != 'u'){\n            result += c;\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/18", "generation": "/*\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n    int count = 0;\n    if(substring.empty()){\n        return 0;\n    }\n    size_t pos = str.find(substring, 0);\n    while(pos != string::npos){\n        count++;\n        pos = str.find(substring, pos + 1);\n    }\n    return count;\n}"}
{"task_id": "CPP/143", "generation": "#include <stdio.h>\n#include <string>\n#include <vector>\n#include <cmath>\nusing namespace std;\n\nbool is_prime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nstring words_in_sentence(string sentence) {\n    vector<string> words;\n    string word = \"\";\n    for (char c : sentence) {\n        if (c == ' ') {\n            if (!word.empty()) {\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    if (!word.empty()) {\n        words.push_back(word);\n    }\n\n    vector<string> prime_words;\n    for (const string& w : words) {\n        if (is_prime(w.size())) {\n            prime_words.push_back(w);\n        }\n    }\n\n    string result = \"\";\n    for (const string& pw : prime_words) {\n        result += pw + \" \";\n    }\n    if (!result.empty()) {\n        result.pop_back(); // Remove the extra space at the end\n    }\n\n    return result;\n}\n"}
{"task_id": "CPP/108", "generation": "#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n\nint count_nums(vector<int> n) {\n    int count = 0;\n\n    auto sum_of_digits = [](int num) {\n        if (num < 0) {\n            num = -num;\n        }\n        int sum_digits = 0;\n        while (num > 0) {\n            sum_digits += num % 10;\n            num /= 10;\n        }\n        return sum_digits;\n    };\n\n    for (int num : n) {\n        if (sum_of_digits(num) > 0) {\n            count++;\n        }\n    }\n\n    return count;\n}\n"}
{"task_id": "CPP/43", "generation": "/*\npairs_sum_to_zero takes a vector of integers as an input.\nit returns true if there are two distinct elements in the vector that\nsum to zero, and false otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n    for(int i=0; i<l.size(); i++){\n        for(int j=i+1; j<l.size(); j++){\n            if(l[i] + l[j] == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/70", "generation": "/*\nGiven vector of integers, return vector in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\n\nExamples:\nstrange_sort_list({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_list({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_list({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> result;\n    sort(lst.begin(), lst.end());\n    int left = 0, right = lst.size() - 1;\n    while(left <= right){\n        if(left == right){\n            result.push_back(lst[left]);\n            break;\n        }\n        result.push_back(lst[left]);\n        result.push_back(lst[right]);\n        left++;\n        right--;\n    }\n    return result;\n}"}
{"task_id": "CPP/63", "generation": "/*\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n    if(n == 0 || n == 1){\n        return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    \n    int a = 0, b = 0, c = 1, d;\n    \n    for(int i = 3; i <= n; i++){\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    \n    return d;\n} \n\n"}
{"task_id": "CPP/89", "generation": "/*\nCreate a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n    string result = \"\";\n    for(int i=0; i<s.length(); i++){\n        char c = s[i];\n        if(isalpha(c)){\n            char base = isupper(c) ? 'A' : 'a';\n            c = (c - base + 2*2) % 26 + base;\n        }\n        result += c;\n    }\n    return result;\n}"}
{"task_id": "CPP/26", "generation": "/*\nFrom a vector of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> result;\n    for(int i=0; i<numbers.size(); i++){\n        if(count(numbers.begin(), numbers.end(), numbers[i]) == 1){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/104", "generation": "/*\nGiven a vector of positive integers x. return a sorted vector of all \nelements that hasn't any even digit.\n\nNote: Returned vector should be sorted in increasing order.\n\nFor example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n    vector<int> result;\n    for(int num : x){\n        bool hasEvenDigit = false;\n        int temp = num;\n        while(temp > 0){\n            int digit = temp % 10;\n            if(digit % 2 == 0){\n                hasEvenDigit = true;\n                break;\n            }\n            temp /= 10;\n        }\n        if(!hasEvenDigit){\n            result.push_back(num);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}"}
{"task_id": "CPP/90", "generation": "/*\nYou are given a vector of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the vector.\nReturn None if there is no such element.\n\nnext_smallest({1, 2, 3, 4, 5}) == 2\nnext_smallest({5, 1, 4, 3, 2}) == 2\nnext_smallest({}) == None\nnext_smallest({1, 1}) == None\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint next_smallest(vector<int> lst){\n    if(lst.size() < 2){\n        return -1;\n    }\n    sort(lst.begin(), lst.end());\n    int smallest = lst[0];\n    for(int i=1; i<lst.size(); i++){\n        if(lst[i] > smallest){\n            return lst[i];\n        }\n    }\n    return -1;\n}"}
{"task_id": "CPP/126", "generation": "#include <vector>\n#include <algorithm>\n#include <unordered_map>\n\nbool is_sorted(std::vector<int> lst) {\n    std::unordered_map<int, int> count_map;\n    for (int num : lst) {\n        if (count_map.find(num) != count_map.end()) {\n            count_map[num]++;\n            if (count_map[num] > 2) {\n                return false;\n            }\n        } else {\n            count_map[num] = 1;\n        }\n    }\n    \n    std::vector<int> sorted_lst = lst;\n    std::sort(sorted_lst.begin(), sorted_lst.end());\n    \n    return lst == sorted_lst;\n}\n"}
{"task_id": "CPP/68", "generation": "/*\nGiven a vector representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a vector, { smalest_value, its index },\nIf there are no even values or the given vector is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n    vector<int> result;\n    int smallest_even = -1;\n    int smallest_index = -1;\n    \n    for(int i=0; i<arr.size(); i++){\n        if(arr[i] % 2 == 0 && (smallest_even == -1 || arr[i] < smallest_even)){\n            smallest_even = arr[i];\n            smallest_index = i;\n        }\n    }\n    \n    if(smallest_even != -1){\n        result.push_back(smallest_even);\n        result.push_back(smallest_index);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/58", "generation": "/*\nReturn sorted unique common elements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> result;\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n    \n    int i = 0, j = 0;\n    while (i < l1.size() && j < l2.size()) {\n        if (l1[i] == l2[j]) {\n            if (result.empty() || result.back() != l1[i]) {\n                result.push_back(l1[i]);\n            }\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    \n    return result;\n}\n\n"}
{"task_id": "CPP/112", "generation": "/*\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a vector containing the result string and \"True\"/\"False\" for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n    // Delete characters in s that are equal to any character in c\n    string result = \"\";\n    for(int i=0;i<s.length();i++){\n        if(c.find(s[i]) == string::npos){\n            result += s[i];\n        }\n    }\n    \n    // Check if the result string is palindrome\n    string temp = result;\n    reverse(temp.begin(),temp.end());\n    bool isPalindrome = (temp == result);\n    \n    // Return the result string and whether it is palindrome or not\n    return {result, (isPalindrome ? \"True\" : \"False\")};\n}"}
{"task_id": "CPP/96", "generation": "/*\nImplement a function that takes an non-negative integer and returns a vector of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n    vector<int> primes;\n    if(n <= 1){\n        return primes;\n    }\n    for(int i=2; i<n; i++){\n        bool isPrime = true;\n        for(int j=2; j*j<=i; j++){\n            if(i % j == 0){\n                isPrime = false;\n                break;\n            }\n        }\n        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}"}
{"task_id": "CPP/157", "generation": "/*\nGiven the lengths of the three sides of a triangle. Return true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or \n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n    // Sort the sides in ascending order\n    if(a > c){\n        float temp = a;\n        a = c;\n        c = temp;\n    }\n    if(b > c){\n        float temp = b;\n        b = c;\n        c = temp;\n    }\n    \n    // Check if the sides form a right-angled triangle\n    if(pow(c,2) == pow(a,2) + pow(b,2)){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\n"}
{"task_id": "CPP/99", "generation": "#include <stdio.h>\n#include <math.h>\n#include <string>\nusing namespace std;\n\nint closest_integer(string value) {\n    float num = stof(value);\n    if (num < 0) {\n        return int(num - 0.5);\n    } else {\n        return int(num + 0.5);\n    }\n}\n"}
{"task_id": "CPP/149", "generation": "/*\nWrite a function that accepts a vector of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted vector with a sorted order,\nThe vector is always a vector of strings and never a vector of numbers,\nand it may contain duplicates.\nThe order of the vector should be ascending by length of each word, and you\nshould return the vector sorted by that rule.\nIf two words have the same length, sort the vector alphabetically.\nThe function should return a vector of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n    // Remove strings with odd lengths\n    vector<string> filtered_lst;\n    for(string s : lst){\n        if(s.length() % 2 == 0){\n            filtered_lst.push_back(s);\n        }\n    }\n    \n    // Sort the filtered list by length and then alphabetically\n    sort(filtered_lst.begin(), filtered_lst.end(), [](const string& a, const string& b){\n        if(a.length() == b.length()){\n            return a < b;\n        }\n        return a.length() < b.length();\n    });\n    \n    return filtered_lst;\n}"}
{"task_id": "CPP/86", "generation": "/*\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n    string result = \"\";\n    string word = \"\";\n    for(int i=0; i<s.length(); i++){\n        if(s[i] == ' '){\n            sort(word.begin(), word.end());\n            result += word + \" \";\n            word = \"\";\n        } else {\n            word += s[i];\n        }\n    }\n    sort(word.begin(), word.end());\n    result += word;\n    return result;\n}"}
{"task_id": "CPP/129", "generation": "#include <vector>\n#include <algorithm>\n\nstd::vector<int> minPath(std::vector<std::vector<int>>& grid, int k) {\n    int n = grid.size();\n    std::vector<std::pair<int, int>> directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n    \n    auto isValid = [&](int x, int y) {\n        return x >= 0 && x < n && y >= 0 && y < n;\n    };\n    \n    std::vector<int> start_path;\n    \n    std::function<std::vector<int>(int, int, std::vector<int>)> dfs = [&](int x, int y, std::vector<int> path) -> std::vector<int> {\n        if (path.size() == k) {\n            return path;\n        }\n        \n        int current_val = grid[x][y];\n        grid[x][y] = -1;\n        std::vector<int> min_path;\n        \n        for (const auto& dir : directions) {\n            int new_x = x + dir.first;\n            int new_y = y + dir.second;\n            if (isValid(new_x, new_y) && grid[new_x][new_y] != -1) {\n                std::vector<int> new_path = dfs(new_x, new_y, path);\n                if (min_path.empty() || new_path < min_path) {\n                    min_path = new_path;\n                }\n            }\n        }\n        \n        grid[x][y] = current_val;\n        return min_path;\n    };\n    \n    int min_val = std::numeric_limits<int>::max();\n    \n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            std::vector<int> path = dfs(i, j, {grid[i][j]});\n            if (!path.empty() && path < start_path) {\n                start_path = path;\n            }\n        }\n    }\n    \n    return start_path;\n}\n"}
{"task_id": "CPP/49", "generation": "#include <stdio.h>\nusing namespace std;\n\nint modp(int n, int p) {\n    if (n == 0) {\n        return 1;\n    }\n    int result = 1;\n    int base = 2;\n    n = n % (p - 1);\n    while (n > 0) {\n        if (n % 2 == 1) {\n            result = (result * base) % p;\n        }\n        n = n / 2;\n        base = (base * base) % p;\n    }\n    return result;\n}\n"}
{"task_id": "CPP/156", "generation": "/*\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_roman(int number){\n    // Create vectors to store the roman numeral symbols and their corresponding values\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    vector<string> symbols = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n\n    // Initialize an empty string to store the roman numeral equivalent\n    string roman = \"\";\n\n    // Iterate through the values and symbols vectors to build the roman numeral equivalent\n    for (int i = 0; i < values.size(); i++) {\n        while (number >= values[i]) {\n            roman += symbols[i];\n            number -= values[i];\n        }\n    }\n\n    // Convert the roman numeral to lowercase\n    for (int i = 0; i < roman.size(); i++) {\n        roman[i] = tolower(roman[i]);\n    }\n\n    return roman;\n}"}
{"task_id": "CPP/65", "generation": "/*\nCircular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n    string num = to_string(x);\n    int n = num.size();\n    \n    if(shift > n){\n        reverse(num.begin(), num.end());\n        return num;\n    }\n    \n    shift = shift % n;\n    string result = num.substr(n-shift) + num.substr(0, n-shift);\n    \n    return result;\n}"}
{"task_id": "CPP/9", "generation": "#include <vector>\n\nstd::vector<int> rolling_max(std::vector<int> numbers) {\n    std::vector<int> result;\n    int max_num = std::numeric_limits<int>::min();\n    for (int i = 0; i < numbers.size(); i++) {\n        max_num = std::max(max_num, numbers[i]);\n        result.push_back(max_num);\n    }\n    return result;\n}\n"}
{"task_id": "CPP/158", "generation": "/*\nWrite a function that accepts a vector of strings.\nThe vector contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\nfind_max({\"name\", \"of\", 'string\"}) == 'string\"\nfind_max({\"name\", \"enam\", \"game\"}) == \"enam\"\nfind_max({\"aaaaaaa\", \"bb\" ,\"cc\"}) == \"aaaaaaa\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring find_max(vector<string> words){\n    string maxWord = \"\";\n    int maxUniqueChars = 0;\n    \n    for(string word : words){\n        int uniqueChars = 0;\n        vector<char> charCount(26, 0);\n        \n        for(char c : word){\n            if(charCount[c - 'a'] == 0){\n                uniqueChars++;\n                charCount[c - 'a'] = 1;\n            }\n        }\n        \n        if(uniqueChars > maxUniqueChars || (uniqueChars == maxUniqueChars && word < maxWord)){\n            maxUniqueChars = uniqueChars;\n            maxWord = word;\n        }\n    }\n    \n    return maxWord;\n} \n\n"}
{"task_id": "CPP/8", "generation": "/*\nFor a given vector of integers, return a vector consisting of a sum and a product of all the integers in a vector.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n    int sum = 0;\n    int product = 1;\n    \n    for(int num : numbers){\n        sum += num;\n        product *= num;\n    }\n    \n    return {sum, product};\n}"}
{"task_id": "CPP/95", "generation": "#include <string>\n#include <map>\n#include <cctype>\n\nbool check_dict_case(std::map<std::string, std::string> dict) {\n    if (dict.empty()) {\n        return false;\n    }\n    for (const auto& pair : dict) {\n        const std::string& key = pair.first;\n        bool isLower = true;\n        bool isUpper = true;\n        for (char c : key) {\n            if (!std::isalpha(c)) {\n                return false;\n            }\n            if (!std::islower(c)) {\n                isLower = false;\n            }\n            if (!std::isupper(c)) {\n                isUpper = false;\n            }\n        }\n        if (!(isLower || isUpper)) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "CPP/55", "generation": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n    if(n <= 1){\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}"}
{"task_id": "CPP/29", "generation": "/*\nFilter an input vector of strings only for ones that start with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> result;\n    for(string s : strings){\n        if(s.substr(0, prefix.length()) == prefix){\n            result.push_back(s);\n        }\n    }\n    return result;\n}"}
{"task_id": "CPP/72", "generation": "/*\nWrite a function that returns true if the object q will fly, and false otherwise.\nThe object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) \u279e false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) \u279e false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) \u279e true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) \u279e true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n    // Check if the vector is balanced (palindromic)\n    bool balanced = true;\n    for(int i=0; i<q.size()/2; i++){\n        if(q[i] != q[q.size()-1-i]){\n            balanced = false;\n            break;\n        }\n    }\n    \n    // Check if the sum of elements is less than or equal to the maximum weight\n    int sum = 0;\n    for(int i=0; i<q.size(); i++){\n        sum += q[i];\n    }\n    \n    return balanced && sum <= w;\n}"}
{"task_id": "CPP/54", "generation": "#include <string>\n#include <algorithm>\nbool same_chars(std::string s0, std::string s1) {\n    std::sort(s0.begin(), s0.end());\n    std::sort(s1.begin(), s1.end());\n    return s0 == s1;\n}\n"}
{"task_id": "CPP/91", "generation": "#include <iostream>\n#include <string>\n#include <sstream>\n\nint is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string sentence;\n    int boredom_count = 0;\n    while (std::getline(ss, sentence, '.') || std::getline(ss, sentence, '?') || std::getline(ss, sentence, '!')) {\n        if (!sentence.empty() && sentence[0] == 'I') {\n            boredom_count++;\n        }\n    }\n    return boredom_count;\n}\n"}
{"task_id": "CPP/77", "generation": "/*\nWrite a function that takes an integer a and returns true \nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscube(int a){\n    int cube_root = cbrt(a);\n    return (cube_root * cube_root * cube_root == a);\n}"}
{"task_id": "CPP/73", "generation": "/*\nGiven a vector arr of integers, find the minimum number of elements that\nneed to be changed to make the vector palindromic. A palindromic vector is a vector that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n    int n = arr.size();\n    int count = 0;\n    for(int i=0; i<n/2; i++){\n        if(arr[i] != arr[n-1-i]){\n            count++;\n        }\n    }\n    return count;\n} \n\n"}
{"task_id": "CPP/71", "generation": "/*\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n    // Check if the three sides form a valid triangle\n    if(a + b > c && a + c > b && b + c > a){\n        // Calculate the semi-perimeter\n        float s = (a + b + c) / 2;\n        // Calculate the area using Heron's formula\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n        // Round the area to 2 decimal points\n        return round(area * 100) / 100;\n    } else {\n        return -1; // Return -1 if the sides do not form a valid triangle\n    }\n}\n\n"}
{"task_id": "CPP/82", "generation": "/*\nWrite a function that takes a string and returns true if the string\nlength is a prime number or false otherwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n    int length = str.length();\n    if(length <= 1){\n        return false;\n    }\n    for(int i=2; i*i<=length; i++){\n        if(length % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/114", "generation": "/*\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n    long long minSum = nums[0];\n    long long currentSum = nums[0];\n    \n    for(int i=1; i<nums.size(); i++){\n        currentSum = min(nums[i], currentSum + nums[i]);\n        minSum = min(minSum, currentSum);\n    }\n    \n    return minSum;\n}\n\n"}
{"task_id": "CPP/138", "generation": "/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n    if(n % 2 != 0 || n < 8) {\n        return false;\n    }\n    return true;\n}\n\n"}
{"task_id": "CPP/132", "generation": "#include <stack>\n#include <string>\n\nbool is_nested(std::string str) {\n    std::stack<char> stack;\n    for (char c : str) {\n        if (c == '[') {\n            stack.push(c);\n        } else if (c == ']' && !stack.empty() && stack.top() == '[') {\n            stack.pop();\n        }\n    }\n    return !stack.empty() && stack.size() < str.size();\n}\n"}
{"task_id": "CPP/3", "generation": "/*\nYou\"re given a vector of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account falls below zero, and\nat that point function should return true. Otherwise it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n    int balance = 0;\n    for(int i=0; i<operations.size(); i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n} \n\n"}
{"task_id": "CPP/142", "generation": "/*\n\"\nThis function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(i%3 == 0){\n            lst[i] = lst[i]*lst[i];\n        }\n        else if(i%4 == 0){\n            lst[i] = lst[i]*lst[i]*lst[i];\n        }\n        sum += lst[i];\n    }\n    return sum;\n}"}
{"task_id": "CPP/50", "generation": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n    // takes as input string encoded with encode_shift function. Returns decoded string.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5-(int)'a'+26)%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n\n"}
{"task_id": "CPP/103", "generation": "#include <string>\n\nstring rounded_avg(int n, int m) {\n    if (n > m) {\n        return \"-1\";\n    }\n    int avg = (n + m) / 2;\n    string binary_avg = \"\";\n    while (avg > 0) {\n        binary_avg = to_string(avg % 2) + binary_avg;\n        avg /= 2;\n    }\n    return binary_avg;\n}\n"}
{"task_id": "CPP/57", "generation": "/*\nReturn true is vector elements are monotonically increasing or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n    bool increasing = true;\n    bool decreasing = true;\n    \n    for(int i=1; i<l.size(); i++){\n        if(l[i] < l[i-1]){\n            increasing = false;\n        }\n        if(l[i] > l[i-1]){\n            decreasing = false;\n        }\n    }\n    \n    return increasing || decreasing;\n}"}
{"task_id": "CPP/28", "generation": "/*\nConcatenate vector of strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n    string result = \"\";\n    for(string s : strings){\n        result += s;\n    }\n    return result;\n}"}
{"task_id": "CPP/39", "generation": "#include <iostream>\n#include <vector>\n#include <cmath>\n\nbool is_prime(int num) {\n    if (num < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(num); i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint prime_fib(int n) {\n    auto is_fib = [](int num) {\n        int a = 0, b = 1;\n        while (a < num) {\n            int temp = a;\n            a = b;\n            b = temp + b;\n        }\n        return a == num;\n    };\n\n    int count = 0;\n    int num = 2;\n    while (count < n) {\n        if (is_fib(num) && is_prime(num)) {\n            count++;\n        }\n        num++;\n    }\n    return num - 1;\n}\n"}
{"task_id": "CPP/45", "generation": "/*\nGiven length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n    return 0.5 * a * h;\n}\n\n"}
{"task_id": "CPP/145", "generation": "#include <vector>\n#include <algorithm>\n#include <string>\n\nint digitSum(int num) {\n    std::string numStr = std::to_string(num);\n    int sum = 0;\n    for (char digit : numStr) {\n        if (digit == '-') continue;\n        sum += digit - '0';\n    }\n    return sum;\n}\n\nstd::vector<int> order_by_points(const std::vector<int>& nums) {\n    std::vector<int> sortedNums(nums.begin(), nums.end());\n    std::sort(sortedNums.begin(), sortedNums.end(), [&](int a, int b) {\n        int sumA = digitSum(a);\n        int sumB = digitSum(b);\n        if (sumA == sumB) {\n            return std::find(nums.begin(), nums.end(), a) - nums.begin() < std::find(nums.begin(), nums.end(), b) - nums.begin();\n        }\n        return sumA < sumB;\n    });\n    return sortedNums;\n}\n\n"}
{"task_id": "CPP/84", "generation": "/*\nGiven a positive integer N, return in binary the total sum of its digits.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 \u2264 N \u2264 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n    int sum = 0;\n    while(N > 0){\n        sum += N % 10;\n        N /= 10;\n    }\n    string binary = \"\";\n    while(sum > 0){\n        binary = to_string(sum % 2) + binary;\n        sum /= 2;\n    }\n    return binary;\n}"}
{"task_id": "CPP/113", "generation": "#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> odd_count(vector<string> lst) {\n    vector<string> result;\n    for (const string& s : lst) {\n        int odd_count = 0;\n        for (char c : s) {\n            if ((c - '0') % 2 != 0) {\n                odd_count++;\n            }\n        }\n        result.push_back(\"the number of odd elements \" + to_string(odd_count) + \"n the str\" + s + \" of the \" + s + \"nput.\\\"\");\n    }\n    return result;\n}\n"}
{"task_id": "CPP/36", "generation": "/*\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n    int count = 0;\n    for(int i=1; i<n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            int num = i;\n            while(num > 0){\n                if(num % 10 == 7){\n                    count++;\n                }\n                num /= 10;\n            }\n        }\n    }\n    return count;\n}\n\n"}
{"task_id": "CPP/144", "generation": "/*\nYour task is to implement a function that will simplify the expression\nx * n. The function returns true if x * n evaluates to a whole number and false\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = true\nsimplify(\"1/6\", \"2/1\") = false\nsimplify(\"7/10\", \"10/2\") = false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool simplify(string x,string n){\n    // Extracting numerator and denominator from x and n\n    int x_num = stoi(x.substr(0, x.find(\"/\")));\n    int x_den = stoi(x.substr(x.find(\"/\") + 1));\n    \n    int n_num = stoi(n.substr(0, n.find(\"/\")));\n    int n_den = stoi(n.substr(n.find(\"/\") + 1));\n    \n    // Checking if x * n evaluates to a whole number\n    if((x_num * n_num) % (x_den * n_den) == 0){\n        return true;\n    } else {\n        return false;\n    }\n}"}
{"task_id": "CPP/0", "generation": "/*\nCheck if in given vector of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n    for(int i=0; i<numbers.size(); i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            if(fabs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "CPP/17", "generation": "#include <vector>\n#include <string>\n#include <unordered_map>\n\nstd::vector<int> parse_music(std::string music_string) {\n    std::unordered_map<std::string, int> notes_duration = {\n        {\"o\", 4},\n        {\"o|\", 2},\n        {\".|\", 1}\n    };\n    \n    std::vector<int> result;\n    size_t pos = 0;\n    while ((pos = music_string.find(\" \")) != std::string::npos) {\n        std::string note = music_string.substr(0, pos);\n        result.push_back(notes_duration[note]);\n        music_string.erase(0, pos + 1);\n    }\n    result.push_back(notes_duration[music_string]); // Last note\n    \n    return result;\n}\n"}
{"task_id": "CPP/47", "generation": "/*\nReturn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n8.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if(n % 2 == 0){\n        return (l[n/2 - 1] + l[n/2]) / 2.0;\n    } else {\n        return l[n/2];\n    }\n}"}
{"task_id": "CPP/75", "generation": "#include <stdio.h>\n#include <vector>\n#include <cmath>\n\nbool is_prime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nbool is_multiply_prime(int a) {\n    std::vector<int> primes;\n    for (int i = 2; i < 100; i++) {\n        if (is_prime(i)) {\n            primes.push_back(i);\n        }\n    }\n    for (int i : primes) {\n        for (int j : primes) {\n            for (int k : primes) {\n                if (i * j * k == a) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "CPP/124", "generation": "/*\nYou have to write a function which validates a given date string and\nreturns true if the date is valid otherwise false.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n    // Check if the date string is not empty\n    if(date.empty()){\n        return false;\n    }\n    \n    // Split the date string into month, day, and year\n    int month = stoi(date.substr(0, 2));\n    int day = stoi(date.substr(3, 2));\n    int year = stoi(date.substr(6, 4));\n    \n    // Check if the month is valid\n    if(month < 1 || month > 12){\n        return false;\n    }\n    \n    // Check if the day is valid based on the month\n    if((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && (day < 1 || day > 31)){\n        return false;\n    }\n    else if((month == 4 || month == 6 || month == 9 || month == 11) && (day < 1 || day > 30)){\n        return false;\n    }\n    else if(month == 2){\n        // Check for leap year\n        if((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)){\n            if(day < 1 || day > 29){\n                return false;\n            }\n        }\n        else{\n            if(day < 1 || day > 28){\n                return false;\n            }\n        }\n    }\n    \n    // Check if the date is in the correct format\n    if(date[2] != '-' || date[5] != '-'){\n        return false;\n    }\n    \n    return true;\n}"}
{"task_id": "CPP/101", "generation": "/*\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return a vector of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\", 'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n    vector<string> words;\n    string word = \"\";\n    for(char c : s){\n        if(c == ' ' || c == ','){\n            if(word != \"\"){\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    if(word != \"\"){\n        words.push_back(word);\n    }\n    return words;\n}"}
{"task_id": "CPP/14", "generation": "/*\nReturn vector of all prefixes from shortest to longest of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n    vector<string> result;\n    string prefix = \"\";\n    for(int i=0; i<str.length(); i++){\n        prefix += str[i];\n        result.push_back(prefix);\n    }\n    return result;\n}\n\n"}
{"task_id": "CPP/141", "generation": "#include <string>\n#include <cctype>\n\nstd::string file_name_check(std::string file_name) {\n    if (file_name.find('.') == std::string::npos || file_name.find('.') != file_name.rfind('.')) {\n        return \"No\";\n    }\n\n    size_t dot_pos = file_name.find('.');\n    std::string name = file_name.substr(0, dot_pos);\n    std::string ext = file_name.substr(dot_pos + 1);\n\n    if (name.empty() || !isalpha(name[0]) || std::count_if(name.begin(), name.end(), ::isdigit) > 3) {\n        return \"No\";\n    }\n\n    if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\") {\n        return \"No\";\n    }\n\n    return \"Yes\";\n}\n"}
{"task_id": "CPP/123", "generation": "#include <vector>\n#include <algorithm>\n\nstd::vector<int> collatz(int num) {\n    std::vector<int> sequence = {num};\n    while (num != 1) {\n        if (num % 2 == 0) {\n            num = num / 2;\n        } else {\n            num = 3 * num + 1;\n        }\n        sequence.push_back(num);\n    }\n    return sequence;\n}\n\nstd::vector<int> get_odd_collatz(int n) {\n    std::vector<int> collatz_sequence = collatz(n);\n    std::vector<int> odd_numbers;\n    for (int num : collatz_sequence) {\n        if (num % 2 != 0) {\n            odd_numbers.push_back(num);\n        }\n    }\n    std::sort(odd_numbers.begin(), odd_numbers.end());\n    return odd_numbers;\n}\n"}
{"task_id": "CPP/148", "generation": "/*\nThere are eight planets in our solar system: the closerst to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2. \nThe function should return a vector containing all planets whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2, sorted by \nthe proximity to the sun. \nThe function should return an empty vector if planet1 or planet2\nare not correct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    vector<string> result;\n    \n    int index1 = -1;\n    int index2 = -1;\n    \n    for(int i=0; i<planets.size(); i++){\n        if(planets[i] == planet1){\n            index1 = i;\n        }\n        if(planets[i] == planet2){\n            index2 = i;\n        }\n    }\n    \n    if(index1 == -1 || index2 == -1){\n        return result;\n    }\n    \n    int start = min(index1, index2);\n    int end = max(index1, index2);\n    \n    for(int i=start+1; i<end; i++){\n        result.push_back(planets[i]);\n    }\n    \n    return result;\n}"}
{"task_id": "CPP/133", "generation": "/*\nYou are given a vector of numbers.\nYou need to return the sum of squared numbers in the given vector,\nround each element in the vector to the upper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n    }\n    return sum;\n}"}
{"task_id": "CPP/109", "generation": "#include <vector>\n#include <algorithm>\n\nbool move_one_ball(std::vector<int> arr) {\n    if (arr.empty()) {\n        return true;\n    }\n    std::vector<int> sorted_arr = arr;\n    std::sort(sorted_arr.begin(), sorted_arr.end());\n    int n = arr.size();\n    for (int i = 0; i < n; i++) {\n        if (arr == sorted_arr) {\n            return true;\n        }\n        int last_element = arr.back();\n        arr.pop_back();\n        arr.insert(arr.begin(), last_element);  // Perform right shift operation\n    }\n    return false;\n}\n"}
{"task_id": "CPP/100", "generation": "#include <vector>\n\nstd::vector<int> make_a_pile(int n) {\n    std::vector<int> stones = {n};\n    while (n > 1) {\n        if (n % 2 == 0) {\n            n += 1;\n        } else {\n            n += 2;\n        }\n        stones.push_back(n);\n    }\n    return stones;\n}\n"}
{"task_id": "CPP/150", "generation": "#include <cmath>\n\nint x_or_y(int n, int x, int y) {\n    if (n < 2) {\n        return y;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n    return x;\n}\n"}
{"task_id": "CPP/153", "generation": "/*\nYou will be given the name of a class (a string) and a vector of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    int max_strength = INT_MIN;\n    string strongest_extension = \"\";\n    \n    for(string extension : extensions){\n        int CAP = 0, SM = 0;\n        for(char c : extension){\n            if(isupper(c)){\n                CAP++;\n            } else if(islower(c)){\n                SM++;\n            }\n        }\n        int strength = CAP - SM;\n        if(strength > max_strength){\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    \n    return class_name + \".\" + strongest_extension;\n}"}
{"task_id": "CPP/107", "generation": "/*\nGiven a positive integer n, return a vector that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n    vector<int> result = {0, 0};\n    for(int i=1; i<=n; i++){\n        string num = to_string(i);\n        string rev_num = num;\n        reverse(rev_num.begin(), rev_num.end());\n        if(num == rev_num){\n            if(i % 2 == 0){\n                result[0]++;\n            } else {\n                result[1]++;\n            }\n        }\n    }\n    return result;\n} \n\n"}
{"task_id": "CPP/110", "generation": "#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nstring exchange(vector<int> lst1, vector<int> lst2) {\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n"}
{"task_id": "CPP/111", "generation": "/*\nGiven a string representing a space separated lowercase letters, return a map\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n    map<char, int> result;\n    map<char, int> count;\n\n    for (char c : test) {\n        if (c != ' ') {\n            count[c]++;\n        }\n    }\n\n    int maxCount = 0;\n    for (auto it : count) {\n        if (it.second > maxCount) {\n            maxCount = it.second;\n        }\n    }\n\n    for (auto it : count) {\n        if (it.second == maxCount) {\n            result[it.first] = it.second;\n        }\n    }\n\n    return result;\n}"}
{"task_id": "CPP/80", "generation": "/*\nYou are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n    if(s.length() < 3){\n        return false;\n    }\n    \n    for(int i=0; i<s.length()-2; i++){\n        if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]){\n            return false;\n        }\n    }\n    \n    return true;\n}\n\n"}
